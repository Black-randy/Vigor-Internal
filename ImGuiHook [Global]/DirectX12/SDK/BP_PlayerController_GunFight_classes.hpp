#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_PlayerController_GunFight

#include "Basic.hpp"

#include "Flame_structs.hpp"
#include "Engine_structs.hpp"
#include "S_CustomMapMarker_structs.hpp"
#include "EGunFight_LoadoutState_structs.hpp"
#include "E_TeamsMatchPhase_structs.hpp"
#include "BP_PlayerController_Teams_classes.hpp"
#include "EBooster_structs.hpp"
#include "ERaidNotificationType_structs.hpp"


namespace SDK
{

// BlueprintGeneratedClass BP_PlayerController_GunFight.BP_PlayerController_GunFight_C
// 0x0158 (0x0EF0 - 0x0D98)
class ABP_PlayerController_GunFight_C final : public ABP_PlayerController_Teams_C
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame_BP_PlayerController_GunFight_C;     // 0x0D98(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class UBP_PingingSystemComponent_C*           BP_PingingSystemComponent;                         // 0x0DA0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UUI_GunFight_MatchProgress_C*           Match_Progress_UI;                                 // 0x0DA8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ABP_PlayerStart_Raid_C*                 Selected_Attacker_Start;                           // 0x0DB0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ABP_PlayerStart_Raid_C*                 Selected_Defender_Start;                           // 0x0DB8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UUI_GunFight_RoundStartCountdown_C*     Round_Start_Countdown_UI;                          // 0x0DC0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TMap<class FName, struct FS_CustomMapMarker>  ThisRoundMapMarkers;                               // 0x0DC8(0x0050)(Edit, BlueprintVisible, DisableEditOnInstance)
	bool                                          Match_Started;                                     // 0x0E18(0x0001)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_E19[0x7];                                      // 0x0E19(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UUI_Raid_WaitingForMatchStart_C*        Wait_For_Match_Start_UI;                           // 0x0E20(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Is_Invincibile;                                    // 0x0E28(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_E29[0x7];                                      // 0x0E29(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class ABP_FreeCameraSpectator_C*              Player_Spectator;                                  // 0x0E30(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<int32>                                 Player_IDs_To_Set_Widget_On;                       // 0x0E38(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	TArray<class UWidgetComponent*>               Player_Widgets;                                    // 0x0E48(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance, ContainsInstancedReference)
	E_TeamsMatchPhase                             Phase_Before_Round_Start;                          // 0x0E58(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_E59[0x7];                                      // 0x0E59(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UUI_ItemTransfer_C*                     PreRound_Inventory_UI;                             // 0x0E60(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UUI_GunFight_LoadoutPicker_C*           LoadoutPickerUI;                                   // 0x0E68(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FTimerHandle                           Make_Ping_Timer;                                   // 0x0E70(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	int32                                         Ping_Tab_Count;                                    // 0x0E78(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_E7C[0x4];                                      // 0x0E7C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class FName>                           TeammateMarkers;                                   // 0x0E80(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	class ABP_PlayerStart_Raid_C*                 Last_Player_Start;                                 // 0x0E90(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UUI_GunFight_ChosenLoadout_PopUp_C*     ChosenLoadoutPopUp_UI;                             // 0x0E98(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          ForcedBlackScreenAlreadyHappened;                  // 0x0EA0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_EA1[0x7];                                      // 0x0EA1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UUI_BlueScreen_C*                       ForcedBlackScreen;                                 // 0x0EA8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UUI_GunFight_PreRoundCountDown_InputBlock_C* PreRoundInputBlock;                                // 0x0EB0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         DEBUG_CurrentSettingID;                            // 0x0EB8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         DEBUG_NewSettingID;                                // 0x0EBC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         DEBUG_MaxSettingID;                                // 0x0EC0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_EC4[0x4];                                      // 0x0EC4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UUI_GunFight_VoteKick_C*                VoteKickUI;                                        // 0x0EC8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         RemainingStartVoteKickCount;                       // 0x0ED0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CapturedFlagsCount;                                // 0x0ED4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UUI_GunFight_VoteKick_C*                AFK_Check_Result_UI;                               // 0x0ED8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         LoadoutShownForRound;                              // 0x0EE0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_EE4[0x4];                                      // 0x0EE4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTimerHandle                           LoadoutShownCheckTimer;                            // 0x0EE8(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)

public:
	void ExecuteUbergraph_BP_PlayerController_GunFight(int32 EntryPoint);
	void TryShowingLoadoutsAgain();
	void LoadoutShownCheckTimedOut();
	void StartLoadoutShownCheckTimer();
	void ReceiveLoadoutShown();
	void ShowLoadouts();
	void Client_RequestVoteKick(int32 PlayerID_to_kick);
	void CustomEvent_0(EMessageBoxAction Result);
	void GetKicked();
	void Server_RequestVoteKick(int32 PlayerID_to_kick);
	void UpdateLoadoutWidgetPlayerCount(int32 LoadoutIndex, int32 PlayerCount);
	void BreakLockEventResult(int32 LoadoutIndex, bool LockBroken, bool UsedTicket);
	void BlockCurrencyForInstantLockBreak(const class FString& MatchID);
	void SetPickedLoadout(const struct FS_GunFightLoadouts_S12& LoadoutInfo);
	void UpdateTicketCount(int32 TicketCount);
	void TryToBreakLock(int32 LoadoutIndex);
	void UpdateLoadoutState_Locally(int32 LoadoutIndex, EGunFight_LoadoutState State, bool ThisPlayerLockedTheSlot);
	void TryLockingLoadout(int32 LoadoutIndex);
	void Show_Teammate_Positions();
	void Save_Match_ID_on_Client(const class FString& Match_ID);
	void Clear_All_Pings();
	void Get_Kicked_For_Teamkilling();
	void Remove_All_Player_Widgets();
	void PossessedServer(class ABP_Character_C* Possessed_Character);
	void Died();
	void Delete_the_Player_widget(class ABP_Character_C* Marked_character);
	void Create_the_Player_widget(class ABP_Character_C* Character_to_mark);
	void Set_Invincibility_at_Possesed(class ABP_Character_C* Possessed_Character);
	void Set_Invincibility(bool New_Invincibility);
	void Player_Connected_Server();
	void Remove_Objective_Marker(class AActor* Located_Actor);
	void Add_Objective_Marker(class AActor* Located_Actor);
	void Replicate_RemoveVoteKickUI();
	void ReplicateAFK_Check(bool ShouldDisplayAFKCheck);
	void ShowAFK_CheckResult(bool ToBeKicked, int32 PlayerId, const class FString& PlayerName);
	void OnClosedDelegate_Event_0(class UFlameWidget* FlameWidget);
	void SendAFK_CheckResult(bool ToBeKicked, bool Attempted);
	void ShowAFK_Check();
	void MarkTeammateForVoteKick(bool bMarkerEnabled, int32 PlayerID_to_kick);
	void Client_SendInKickVote(bool VotedToKick);
	void ShowKickVoteResult(bool bGotKicked, int32 PlayerID_to_kick);
	void ReplicateVoteCount(int32 TotalCount, int32 YesCount, int32 NoCount);
	void Server_SendInKickVote(bool VotedToKick);
	void UpdateVoteCount(int32 TotalCount, int32 YesCount, int32 NoCount);
	void Remove_VoteKickUI();
	void Add_VoteKickUI(const int32& PlayerID_to_kick, const class FString& PlayerName_to_kick, int32 PlayerID_of_Vote_Starter);
	void HidePersistentHUDIcons();
	void HideLoadoutAndTransfer();
	void UpdatePreRoundInputBlockTime(int32 Round_Starts_In);
	void HidePreRoundCountdownInputBlock();
	void ShowPreRoundCountdownInputBlock(int32 PreRoundTime);
	void Remove_Forced_Black_Screen();
	void Add_Forced_Black_Screen();
	void HideChosenLoadoutPopUp();
	void ShowChosenLoadoutPopUp();
	void HideLoadoutPicker();
	void UpdateLoadoutPickerPreRoundTime(int32 RoundStartsIn);
	void CreateLoadoutPicker(int32 PreMinusRound_Time);
	void Create_ScorePopUp();
	void Update_Round_Start_Countdown_UI(int32 Round_Starts_In);
	void Set_Round_Time(int32 Round_Time, bool Is_Objective_Phase);
	void Start_Countdown_in_Waiting_for_Match(int32 Time, bool All_Connected);
	void Hide_Waiting_For_Match_To_Start();
	void Show_Waiting_For_Match_To_Start();
	void Hide_Round_Start_Countdown_UI();
	void Show_Round_Start_Countdown_UI(int32 PreMinusRoundStart);
	void Update_Match_Progress(int32 Attackers_Won_Rounds, int32 Defenders_Won_Rounds);
	void Hide_Match_Progress_UI();
	void Show_Match_Progress_UI(int32 Round_Time, int32 Attackers_Won_Rounds, const int32 Defenders_Won_Rounds);
	void Show_Player_Notification(const class FText& Title, const class FText& Reason, ERaidNotificationType Type);
	void Hide_End_Turn_UI();
	void Cheat_SetRoundsToWin(int32 RoundsToWin);
	void Cheat_UpdateNewLoadouts();
	void Cheat_RollNewLoadouts();
	void Cheat_SkipMatch(bool LocalPlayerWins);
	void Cheat_SkipRound();
	void Cheat_UpdateCurrentAndMaxSettingID();
	void Cheat_UpdateLocalWidgetSettingID_Display(int32 CurrentID, int32 NewID, int32 MaxID);
	void Cheat_SetSettingID(int32 SettingID);
	void Cheat_ResetScore();
	void Cheat_AddScore(class FName ScoreEvent);
	void Client_Request_Pause_Match();
	void Request_Pause_Match();
	void Add_or_Remove_Objective_Marker(class AActor* Located_Actor, bool Add);
	void Start_Spectating();
	void Is_Attacker(bool* Is_Attacker_0);
	void Add_Teammate_Markers();
	void GetGunfightUIHud(bool* Valid, class UUI_HUD_C** HUD);
	void Get_Total_Owned_Lobby_Booster_Cost(int32* TotalCost);
	void HasEnoughHC_ForBooster(EBooster BoosterType, bool* EnoughHC);
	void Player_Respawned();
	void ReceiveBeginPlay();
	void CheatHideUI(bool Hide);
	void Send_Kill_Scored_Event(class AHumanCharacter* Killer, class AHumanCharacter* Victim, class UClass* Instigating_Item, bool Headshot, bool Teamkill);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BP_PlayerController_GunFight_C">();
	}
	static class ABP_PlayerController_GunFight_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<ABP_PlayerController_GunFight_C>();
	}
};
static_assert(alignof(ABP_PlayerController_GunFight_C) == 0x000008, "Wrong alignment on ABP_PlayerController_GunFight_C");
static_assert(sizeof(ABP_PlayerController_GunFight_C) == 0x000EF0, "Wrong size on ABP_PlayerController_GunFight_C");
static_assert(offsetof(ABP_PlayerController_GunFight_C, UberGraphFrame_BP_PlayerController_GunFight_C) == 0x000D98, "Member 'ABP_PlayerController_GunFight_C::UberGraphFrame_BP_PlayerController_GunFight_C' has a wrong offset!");
static_assert(offsetof(ABP_PlayerController_GunFight_C, BP_PingingSystemComponent) == 0x000DA0, "Member 'ABP_PlayerController_GunFight_C::BP_PingingSystemComponent' has a wrong offset!");
static_assert(offsetof(ABP_PlayerController_GunFight_C, Match_Progress_UI) == 0x000DA8, "Member 'ABP_PlayerController_GunFight_C::Match_Progress_UI' has a wrong offset!");
static_assert(offsetof(ABP_PlayerController_GunFight_C, Selected_Attacker_Start) == 0x000DB0, "Member 'ABP_PlayerController_GunFight_C::Selected_Attacker_Start' has a wrong offset!");
static_assert(offsetof(ABP_PlayerController_GunFight_C, Selected_Defender_Start) == 0x000DB8, "Member 'ABP_PlayerController_GunFight_C::Selected_Defender_Start' has a wrong offset!");
static_assert(offsetof(ABP_PlayerController_GunFight_C, Round_Start_Countdown_UI) == 0x000DC0, "Member 'ABP_PlayerController_GunFight_C::Round_Start_Countdown_UI' has a wrong offset!");
static_assert(offsetof(ABP_PlayerController_GunFight_C, ThisRoundMapMarkers) == 0x000DC8, "Member 'ABP_PlayerController_GunFight_C::ThisRoundMapMarkers' has a wrong offset!");
static_assert(offsetof(ABP_PlayerController_GunFight_C, Match_Started) == 0x000E18, "Member 'ABP_PlayerController_GunFight_C::Match_Started' has a wrong offset!");
static_assert(offsetof(ABP_PlayerController_GunFight_C, Wait_For_Match_Start_UI) == 0x000E20, "Member 'ABP_PlayerController_GunFight_C::Wait_For_Match_Start_UI' has a wrong offset!");
static_assert(offsetof(ABP_PlayerController_GunFight_C, Is_Invincibile) == 0x000E28, "Member 'ABP_PlayerController_GunFight_C::Is_Invincibile' has a wrong offset!");
static_assert(offsetof(ABP_PlayerController_GunFight_C, Player_Spectator) == 0x000E30, "Member 'ABP_PlayerController_GunFight_C::Player_Spectator' has a wrong offset!");
static_assert(offsetof(ABP_PlayerController_GunFight_C, Player_IDs_To_Set_Widget_On) == 0x000E38, "Member 'ABP_PlayerController_GunFight_C::Player_IDs_To_Set_Widget_On' has a wrong offset!");
static_assert(offsetof(ABP_PlayerController_GunFight_C, Player_Widgets) == 0x000E48, "Member 'ABP_PlayerController_GunFight_C::Player_Widgets' has a wrong offset!");
static_assert(offsetof(ABP_PlayerController_GunFight_C, Phase_Before_Round_Start) == 0x000E58, "Member 'ABP_PlayerController_GunFight_C::Phase_Before_Round_Start' has a wrong offset!");
static_assert(offsetof(ABP_PlayerController_GunFight_C, PreRound_Inventory_UI) == 0x000E60, "Member 'ABP_PlayerController_GunFight_C::PreRound_Inventory_UI' has a wrong offset!");
static_assert(offsetof(ABP_PlayerController_GunFight_C, LoadoutPickerUI) == 0x000E68, "Member 'ABP_PlayerController_GunFight_C::LoadoutPickerUI' has a wrong offset!");
static_assert(offsetof(ABP_PlayerController_GunFight_C, Make_Ping_Timer) == 0x000E70, "Member 'ABP_PlayerController_GunFight_C::Make_Ping_Timer' has a wrong offset!");
static_assert(offsetof(ABP_PlayerController_GunFight_C, Ping_Tab_Count) == 0x000E78, "Member 'ABP_PlayerController_GunFight_C::Ping_Tab_Count' has a wrong offset!");
static_assert(offsetof(ABP_PlayerController_GunFight_C, TeammateMarkers) == 0x000E80, "Member 'ABP_PlayerController_GunFight_C::TeammateMarkers' has a wrong offset!");
static_assert(offsetof(ABP_PlayerController_GunFight_C, Last_Player_Start) == 0x000E90, "Member 'ABP_PlayerController_GunFight_C::Last_Player_Start' has a wrong offset!");
static_assert(offsetof(ABP_PlayerController_GunFight_C, ChosenLoadoutPopUp_UI) == 0x000E98, "Member 'ABP_PlayerController_GunFight_C::ChosenLoadoutPopUp_UI' has a wrong offset!");
static_assert(offsetof(ABP_PlayerController_GunFight_C, ForcedBlackScreenAlreadyHappened) == 0x000EA0, "Member 'ABP_PlayerController_GunFight_C::ForcedBlackScreenAlreadyHappened' has a wrong offset!");
static_assert(offsetof(ABP_PlayerController_GunFight_C, ForcedBlackScreen) == 0x000EA8, "Member 'ABP_PlayerController_GunFight_C::ForcedBlackScreen' has a wrong offset!");
static_assert(offsetof(ABP_PlayerController_GunFight_C, PreRoundInputBlock) == 0x000EB0, "Member 'ABP_PlayerController_GunFight_C::PreRoundInputBlock' has a wrong offset!");
static_assert(offsetof(ABP_PlayerController_GunFight_C, DEBUG_CurrentSettingID) == 0x000EB8, "Member 'ABP_PlayerController_GunFight_C::DEBUG_CurrentSettingID' has a wrong offset!");
static_assert(offsetof(ABP_PlayerController_GunFight_C, DEBUG_NewSettingID) == 0x000EBC, "Member 'ABP_PlayerController_GunFight_C::DEBUG_NewSettingID' has a wrong offset!");
static_assert(offsetof(ABP_PlayerController_GunFight_C, DEBUG_MaxSettingID) == 0x000EC0, "Member 'ABP_PlayerController_GunFight_C::DEBUG_MaxSettingID' has a wrong offset!");
static_assert(offsetof(ABP_PlayerController_GunFight_C, VoteKickUI) == 0x000EC8, "Member 'ABP_PlayerController_GunFight_C::VoteKickUI' has a wrong offset!");
static_assert(offsetof(ABP_PlayerController_GunFight_C, RemainingStartVoteKickCount) == 0x000ED0, "Member 'ABP_PlayerController_GunFight_C::RemainingStartVoteKickCount' has a wrong offset!");
static_assert(offsetof(ABP_PlayerController_GunFight_C, CapturedFlagsCount) == 0x000ED4, "Member 'ABP_PlayerController_GunFight_C::CapturedFlagsCount' has a wrong offset!");
static_assert(offsetof(ABP_PlayerController_GunFight_C, AFK_Check_Result_UI) == 0x000ED8, "Member 'ABP_PlayerController_GunFight_C::AFK_Check_Result_UI' has a wrong offset!");
static_assert(offsetof(ABP_PlayerController_GunFight_C, LoadoutShownForRound) == 0x000EE0, "Member 'ABP_PlayerController_GunFight_C::LoadoutShownForRound' has a wrong offset!");
static_assert(offsetof(ABP_PlayerController_GunFight_C, LoadoutShownCheckTimer) == 0x000EE8, "Member 'ABP_PlayerController_GunFight_C::LoadoutShownCheckTimer' has a wrong offset!");

}

