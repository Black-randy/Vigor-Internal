#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_SmokeGrenade_Thrown

#include "Basic.hpp"

#include "Flame_classes.hpp"
#include "Engine_structs.hpp"
#include "F_SmokeCloudConfig_structs.hpp"
#include "FlameUI_structs.hpp"


namespace SDK
{

// BlueprintGeneratedClass BP_SmokeGrenade_Thrown.BP_SmokeGrenade_Thrown_C
// 0x0048 (0x0438 - 0x03F0)
class ABP_SmokeGrenade_Thrown_C final : public AGrenade
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x03F0(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class UBP_ExplosionComponent_C*               BP_ExplosionComponent;                             // 0x03F8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USphereComponent*                       Sphere;                                            // 0x0400(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UStaticMeshComponent*                   Mesh;                                              // 0x0408(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	bool                                          CanBounceFromPlayer;                               // 0x0410(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_411[0x7];                                      // 0x0411(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class ABP_GameState_Teams_C*                  TeamsGS;                                           // 0x0418(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FF_SmokeCloudConfig                    Smoke_cloud_config;                                // 0x0420(0x0014)(Edit, BlueprintVisible, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

public:
	void ExecuteUbergraph_BP_SmokeGrenade_Thrown(int32 EntryPoint);
	void OnGrenadeExplode(const TArray<struct FExplosionEffect>& ExplosionEffects);
	void OnComponentBeginOverlap_Event_0(class UPrimitiveComponent* OverlappedComponent, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, int32 OtherBodyIndex, bool bFromSweep, const struct FHitResult& SweepResult);
	void ReceiveDestroyed();
	void DestroyAfterRoundFinish();
	void ReceiveBeginPlay();
	void SpawnLeverParticle();
	void OnThrow();
	void OnImpact(const struct FVector& HitLocation, const struct FVector& NormalImpulse);
	void Select_correct_particle_effect(class UParticleSystem** Selected_particle_effect);
	void Check_for_non_friendly_character(class AHumanCharacter* Hit_Character, class AHumanCharacter* Character_that_threw_grenade, bool* Non_friendly_character);
	void Check_for_multiple_nonMinusfriendly_hits(TArray<class AActor*>& Hit_Characters, class ABP_Character_Script_C* Character_that_threw_grenade, int32* NonMinusfriendly_characters);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BP_SmokeGrenade_Thrown_C">();
	}
	static class ABP_SmokeGrenade_Thrown_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<ABP_SmokeGrenade_Thrown_C>();
	}
};
static_assert(alignof(ABP_SmokeGrenade_Thrown_C) == 0x000008, "Wrong alignment on ABP_SmokeGrenade_Thrown_C");
static_assert(sizeof(ABP_SmokeGrenade_Thrown_C) == 0x000438, "Wrong size on ABP_SmokeGrenade_Thrown_C");
static_assert(offsetof(ABP_SmokeGrenade_Thrown_C, UberGraphFrame) == 0x0003F0, "Member 'ABP_SmokeGrenade_Thrown_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(ABP_SmokeGrenade_Thrown_C, BP_ExplosionComponent) == 0x0003F8, "Member 'ABP_SmokeGrenade_Thrown_C::BP_ExplosionComponent' has a wrong offset!");
static_assert(offsetof(ABP_SmokeGrenade_Thrown_C, Sphere) == 0x000400, "Member 'ABP_SmokeGrenade_Thrown_C::Sphere' has a wrong offset!");
static_assert(offsetof(ABP_SmokeGrenade_Thrown_C, Mesh) == 0x000408, "Member 'ABP_SmokeGrenade_Thrown_C::Mesh' has a wrong offset!");
static_assert(offsetof(ABP_SmokeGrenade_Thrown_C, CanBounceFromPlayer) == 0x000410, "Member 'ABP_SmokeGrenade_Thrown_C::CanBounceFromPlayer' has a wrong offset!");
static_assert(offsetof(ABP_SmokeGrenade_Thrown_C, TeamsGS) == 0x000418, "Member 'ABP_SmokeGrenade_Thrown_C::TeamsGS' has a wrong offset!");
static_assert(offsetof(ABP_SmokeGrenade_Thrown_C, Smoke_cloud_config) == 0x000420, "Member 'ABP_SmokeGrenade_Thrown_C::Smoke_cloud_config' has a wrong offset!");

}

