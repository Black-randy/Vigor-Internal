#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BPI_Explosions

#include "Basic.hpp"

#include "CoreUObject_structs.hpp"


namespace SDK::Params
{

// Function BPI_Explosions.BPI_Explosions_C.ProccessExplosion
// 0x0028 (0x0028 - 0x0000)
struct BPI_Explosions_C_ProccessExplosion final
{
public:
	struct FVector                                Location;                                          // 0x0000(0x000C)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         ExplosionRadius;                                   // 0x000C(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AController*                            InstigatorController;                              // 0x0010(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 DamageCauser;                                      // 0x0018(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          DamagingExplosion;                                 // 0x0020(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_21[0x3];                                       // 0x0021(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         EnviromentDamageMultiplier;                        // 0x0024(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BPI_Explosions_C_ProccessExplosion) == 0x000008, "Wrong alignment on BPI_Explosions_C_ProccessExplosion");
static_assert(sizeof(BPI_Explosions_C_ProccessExplosion) == 0x000028, "Wrong size on BPI_Explosions_C_ProccessExplosion");
static_assert(offsetof(BPI_Explosions_C_ProccessExplosion, Location) == 0x000000, "Member 'BPI_Explosions_C_ProccessExplosion::Location' has a wrong offset!");
static_assert(offsetof(BPI_Explosions_C_ProccessExplosion, ExplosionRadius) == 0x00000C, "Member 'BPI_Explosions_C_ProccessExplosion::ExplosionRadius' has a wrong offset!");
static_assert(offsetof(BPI_Explosions_C_ProccessExplosion, InstigatorController) == 0x000010, "Member 'BPI_Explosions_C_ProccessExplosion::InstigatorController' has a wrong offset!");
static_assert(offsetof(BPI_Explosions_C_ProccessExplosion, DamageCauser) == 0x000018, "Member 'BPI_Explosions_C_ProccessExplosion::DamageCauser' has a wrong offset!");
static_assert(offsetof(BPI_Explosions_C_ProccessExplosion, DamagingExplosion) == 0x000020, "Member 'BPI_Explosions_C_ProccessExplosion::DamagingExplosion' has a wrong offset!");
static_assert(offsetof(BPI_Explosions_C_ProccessExplosion, EnviromentDamageMultiplier) == 0x000024, "Member 'BPI_Explosions_C_ProccessExplosion::EnviromentDamageMultiplier' has a wrong offset!");

}

