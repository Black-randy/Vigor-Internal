#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_InvisibleWall_Spline

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "Engine_classes.hpp"


namespace SDK
{

// BlueprintGeneratedClass BP_InvisibleWall_Spline.BP_InvisibleWall_Spline_C
// 0x0020 (0x0240 - 0x0220)
class ABP_InvisibleWall_Spline_C final : public AActor
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x0220(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class USplineComponent*                       Spline1;                                           // 0x0228(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	int32                                         Number_of_meshes;                                  // 0x0230(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Orient_to_spline;                                  // 0x0234(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_235[0x3];                                      // 0x0235(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         HeightScale;                                       // 0x0238(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash)
	ECollisionEnabled                             Collision;                                         // 0x023C(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

public:
	void ExecuteUbergraph_BP_InvisibleWall_Spline(int32 EntryPoint);
	void BndEvt__Spline1_K2Node_ComponentBoundEvent_3_ComponentBeginOverlapSignature__DelegateSignature(class UPrimitiveComponent* OverlappedComponent, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, int32 OtherBodyIndex, bool bFromSweep, const struct FHitResult& SweepResult);
	void UserConstructionScript();
	void SetSplineMesh(class ABP_Spline_Mesh_C* NewParam, const struct FTransform& NewParam1, const struct FTransform& NewParam2);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BP_InvisibleWall_Spline_C">();
	}
	static class ABP_InvisibleWall_Spline_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<ABP_InvisibleWall_Spline_C>();
	}
};
static_assert(alignof(ABP_InvisibleWall_Spline_C) == 0x000008, "Wrong alignment on ABP_InvisibleWall_Spline_C");
static_assert(sizeof(ABP_InvisibleWall_Spline_C) == 0x000240, "Wrong size on ABP_InvisibleWall_Spline_C");
static_assert(offsetof(ABP_InvisibleWall_Spline_C, UberGraphFrame) == 0x000220, "Member 'ABP_InvisibleWall_Spline_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(ABP_InvisibleWall_Spline_C, Spline1) == 0x000228, "Member 'ABP_InvisibleWall_Spline_C::Spline1' has a wrong offset!");
static_assert(offsetof(ABP_InvisibleWall_Spline_C, Number_of_meshes) == 0x000230, "Member 'ABP_InvisibleWall_Spline_C::Number_of_meshes' has a wrong offset!");
static_assert(offsetof(ABP_InvisibleWall_Spline_C, Orient_to_spline) == 0x000234, "Member 'ABP_InvisibleWall_Spline_C::Orient_to_spline' has a wrong offset!");
static_assert(offsetof(ABP_InvisibleWall_Spline_C, HeightScale) == 0x000238, "Member 'ABP_InvisibleWall_Spline_C::HeightScale' has a wrong offset!");
static_assert(offsetof(ABP_InvisibleWall_Spline_C, Collision) == 0x00023C, "Member 'ABP_InvisibleWall_Spline_C::Collision' has a wrong offset!");

}

