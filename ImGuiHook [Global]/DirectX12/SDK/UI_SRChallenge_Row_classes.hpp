#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: UI_SRChallenge_Row

#include "Basic.hpp"

#include "Flame_classes.hpp"
#include "S_ShootingChallengeGroup_structs.hpp"
#include "Engine_structs.hpp"
#include "SlateCore_structs.hpp"
#include "Slate_structs.hpp"
#include "E_ShootingChallengeResult_structs.hpp"
#include "UMG_structs.hpp"


namespace SDK
{

// WidgetBlueprintGeneratedClass UI_SRChallenge_Row.UI_SRChallenge_Row_C
// 0x00A8 (0x0360 - 0x02B8)
class UUI_SRChallenge_Row_C final : public UFlameWidget
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x02B8(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class UFlameTextBlock*                        ChallengeNameText;                                 // 0x02C0(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UFlameButton*                           FlameButton_279;                                   // 0x02C8(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UHorizontalBox*                         HorizontalBox_Challenges;                          // 0x02D0(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UImage*                                 Image_Lock;                                        // 0x02D8(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UImage*                                 RowBackground;                                     // 0x02E0(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UImage*                                 SlotIcon;                                          // 0x02E8(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	int32                                         FocusedIndex;                                      // 0x02F0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2F4[0x4];                                      // 0x02F4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class UUI_SRChallenge_Slot_C*>         Slots;                                             // 0x02F8(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance, ContainsInstancedReference)
	FMulticastInlineDelegateProperty_             ChallengeFocused;                                  // 0x0308(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	FMulticastInlineDelegateProperty_             ChallengeClicked;                                  // 0x0318(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	struct FS_ShootingChallengeGroup              Group;                                             // 0x0328(0x0030)(Edit, BlueprintVisible, ContainsInstancedReference, ExposeOnSpawn, HasGetValueTypeHash)
	bool                                          HasFocus;                                          // 0x0358(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          IsCurrentlyHovered;                                // 0x0359(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)

public:
	void ChallengeFocused__DelegateSignature(const struct FS_ShootingChallenge& Challenge, const struct FS_ShootingChallengeGroup& Group_0);
	void ChallengeClicked__DelegateSignature(const struct FS_ShootingChallenge& Challenge, const struct FS_ShootingChallengeGroup& Group_0);
	void ExecuteUbergraph_UI_SRChallenge_Row(int32 EntryPoint);
	void BndEvt__UI_SRChallenge_Row_FlameButton_279_K2Node_ComponentBoundEvent_2_OnButtonPressedEvent__DelegateSignature(class UButton* Sender);
	void OnSlotUnhovered();
	void OnChildUnhovered(class UButton* Sender);
	void OnSlotHovered();
	void OnChildHovered(class UButton* Sender);
	void BndEvt__UI_SRChallenge_Row_FlameButton_279_K2Node_ComponentBoundEvent_4_OnButtonHoverEvent__DelegateSignature(class UButton* Sender);
	void BndEvt__UI_SRChallenge_Row_FlameButton_279_K2Node_ComponentBoundEvent_3_OnButtonHoverEvent__DelegateSignature(class UButton* Sender);
	void SlotClicked(int32 Index_0);
	void Right();
	void Left();
	void PreConstruct(bool IsDesignTime);
	void Construct();
	void BndEvt__FlameButton_279_K2Node_ComponentBoundEvent_1_OnButtonFocusEvent__DelegateSignature(class UButton* Sender);
	void BndEvt__FlameButton_279_K2Node_ComponentBoundEvent_0_OnButtonFocusEvent__DelegateSignature(class UButton* Sender);
	struct FEventReply OnFocusReceived(const struct FGeometry& MyGeometry, const struct FFocusEvent& InFocusEvent);
	void FillRank(E_ShootingChallengeResult Rank, float HighScore);
	class UWidget* CustomUp_DownNavigation(EUINavigation Navigation_0);
	void ScrollToFocus(class UWidget* Widget, EDescendantScrollDestination ScrollDestination);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"UI_SRChallenge_Row_C">();
	}
	static class UUI_SRChallenge_Row_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UUI_SRChallenge_Row_C>();
	}
};
static_assert(alignof(UUI_SRChallenge_Row_C) == 0x000008, "Wrong alignment on UUI_SRChallenge_Row_C");
static_assert(sizeof(UUI_SRChallenge_Row_C) == 0x000360, "Wrong size on UUI_SRChallenge_Row_C");
static_assert(offsetof(UUI_SRChallenge_Row_C, UberGraphFrame) == 0x0002B8, "Member 'UUI_SRChallenge_Row_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(UUI_SRChallenge_Row_C, ChallengeNameText) == 0x0002C0, "Member 'UUI_SRChallenge_Row_C::ChallengeNameText' has a wrong offset!");
static_assert(offsetof(UUI_SRChallenge_Row_C, FlameButton_279) == 0x0002C8, "Member 'UUI_SRChallenge_Row_C::FlameButton_279' has a wrong offset!");
static_assert(offsetof(UUI_SRChallenge_Row_C, HorizontalBox_Challenges) == 0x0002D0, "Member 'UUI_SRChallenge_Row_C::HorizontalBox_Challenges' has a wrong offset!");
static_assert(offsetof(UUI_SRChallenge_Row_C, Image_Lock) == 0x0002D8, "Member 'UUI_SRChallenge_Row_C::Image_Lock' has a wrong offset!");
static_assert(offsetof(UUI_SRChallenge_Row_C, RowBackground) == 0x0002E0, "Member 'UUI_SRChallenge_Row_C::RowBackground' has a wrong offset!");
static_assert(offsetof(UUI_SRChallenge_Row_C, SlotIcon) == 0x0002E8, "Member 'UUI_SRChallenge_Row_C::SlotIcon' has a wrong offset!");
static_assert(offsetof(UUI_SRChallenge_Row_C, FocusedIndex) == 0x0002F0, "Member 'UUI_SRChallenge_Row_C::FocusedIndex' has a wrong offset!");
static_assert(offsetof(UUI_SRChallenge_Row_C, Slots) == 0x0002F8, "Member 'UUI_SRChallenge_Row_C::Slots' has a wrong offset!");
static_assert(offsetof(UUI_SRChallenge_Row_C, ChallengeFocused) == 0x000308, "Member 'UUI_SRChallenge_Row_C::ChallengeFocused' has a wrong offset!");
static_assert(offsetof(UUI_SRChallenge_Row_C, ChallengeClicked) == 0x000318, "Member 'UUI_SRChallenge_Row_C::ChallengeClicked' has a wrong offset!");
static_assert(offsetof(UUI_SRChallenge_Row_C, Group) == 0x000328, "Member 'UUI_SRChallenge_Row_C::Group' has a wrong offset!");
static_assert(offsetof(UUI_SRChallenge_Row_C, HasFocus) == 0x000358, "Member 'UUI_SRChallenge_Row_C::HasFocus' has a wrong offset!");
static_assert(offsetof(UUI_SRChallenge_Row_C, IsCurrentlyHovered) == 0x000359, "Member 'UUI_SRChallenge_Row_C::IsCurrentlyHovered' has a wrong offset!");

}

