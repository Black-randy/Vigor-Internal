#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_Functions

#include "Basic.hpp"

#include "BP_Functions_classes.hpp"
#include "BP_Functions_parameters.hpp"


namespace SDK
{

// Function BP_Functions.BP_Functions_C.FormatTimeFloatMMSS
// (Static, Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// float                                   Time                                                   (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class UObject*                          __WorldContext                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class FText                             TimeText                                               (Parm, OutParm)

void UBP_Functions_C::FormatTimeFloatMMSS(float Time, class UObject* __WorldContext, class FText* TimeText)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("BP_Functions_C", "FormatTimeFloatMMSS");

	Params::BP_Functions_C_FormatTimeFloatMMSS Parms{};

	Parms.Time = Time;
	Parms.__WorldContext = __WorldContext;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	if (TimeText != nullptr)
		*TimeText = std::move(Parms.TimeText);
}


// Function BP_Functions.BP_Functions_C.TimeTickToZero
// (Static, Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// float                                   Time                                                   (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FTimerHandle                     TimerHandler                                           (BlueprintVisible, BlueprintReadOnly, Parm, NoDestructor, HasGetValueTypeHash)
// class UObject*                          __WorldContext                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   NewTime                                                (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_Functions_C::TimeTickToZero(float Time, const struct FTimerHandle& TimerHandler, class UObject* __WorldContext, float* NewTime)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("BP_Functions_C", "TimeTickToZero");

	Params::BP_Functions_C_TimeTickToZero Parms{};

	Parms.Time = Time;
	Parms.TimerHandler = std::move(TimerHandler);
	Parms.__WorldContext = __WorldContext;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	if (NewTime != nullptr)
		*NewTime = Parms.NewTime;
}


// Function BP_Functions.BP_Functions_C.RandomLocationFromInterval
// (Static, Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FVector                          MinLocation                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FVector                          MaxLocation                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class UObject*                          __WorldContext                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FVector                          RandomLocation                                         (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_Functions_C::RandomLocationFromInterval(const struct FVector& MinLocation, const struct FVector& MaxLocation, class UObject* __WorldContext, struct FVector* RandomLocation)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("BP_Functions_C", "RandomLocationFromInterval");

	Params::BP_Functions_C_RandomLocationFromInterval Parms{};

	Parms.MinLocation = std::move(MinLocation);
	Parms.MaxLocation = std::move(MaxLocation);
	Parms.__WorldContext = __WorldContext;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	if (RandomLocation != nullptr)
		*RandomLocation = std::move(Parms.RandomLocation);
}


// Function BP_Functions.BP_Functions_C.FormatTimeFloatMMSSmm
// (Static, Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// float                                   Time                                                   (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class UObject*                          __WorldContext                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class FText                             ReturnValue                                            (Parm, OutParm, ReturnParm)

class FText UBP_Functions_C::FormatTimeFloatMMSSmm(float Time, class UObject* __WorldContext)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("BP_Functions_C", "FormatTimeFloatMMSSmm");

	Params::BP_Functions_C_FormatTimeFloatMMSSmm Parms{};

	Parms.Time = Time;
	Parms.__WorldContext = __WorldContext;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function BP_Functions.BP_Functions_C.GetAmmo
// (Static, Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// class AWeapon*                          Weapon                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class UObject*                          __WorldContext                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class FText                             ReturnValue                                            (Parm, OutParm, ReturnParm)

class FText UBP_Functions_C::GetAmmo(class AWeapon* Weapon, class UObject* __WorldContext)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("BP_Functions_C", "GetAmmo");

	Params::BP_Functions_C_GetAmmo Parms{};

	Parms.Weapon = Weapon;
	Parms.__WorldContext = __WorldContext;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function BP_Functions.BP_Functions_C.SetPlayerVisibility
// (Static, Public, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    NoSee                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// class AHumanCharacter*                  HumanCharacter                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class UObject*                          __WorldContext                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_Functions_C::SetPlayerVisibility(bool NoSee, class AHumanCharacter* HumanCharacter, class UObject* __WorldContext)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("BP_Functions_C", "SetPlayerVisibility");

	Params::BP_Functions_C_SetPlayerVisibility Parms{};

	Parms.NoSee = NoSee;
	Parms.HumanCharacter = HumanCharacter;
	Parms.__WorldContext = __WorldContext;

	GetDefaultObj()->ProcessEvent(Func, &Parms);
}


// Function BP_Functions.BP_Functions_C.IsChildOf
// (Static, Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// class UWidget*                          Child                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class UWidget*                          Parent                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   MaxIterations                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class UObject*                          __WorldContext                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    IsChildOf_0                                            (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void UBP_Functions_C::IsChildOf(class UWidget* Child, class UWidget* Parent, int32 MaxIterations, class UObject* __WorldContext, bool* IsChildOf_0)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("BP_Functions_C", "IsChildOf");

	Params::BP_Functions_C_IsChildOf Parms{};

	Parms.Child = Child;
	Parms.Parent = Parent;
	Parms.MaxIterations = MaxIterations;
	Parms.__WorldContext = __WorldContext;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	if (IsChildOf_0 != nullptr)
		*IsChildOf_0 = Parms.IsChildOf_0;
}


// Function BP_Functions.BP_Functions_C.FindGridCoordinatesVector
// (Static, Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FVector                          ZeroPilar                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FVector                          MaxPilar                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   X_precision                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   Y_Precision                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FVector                          ObjectWorldLocation                                    (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   X_offset                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   Y_offset                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class UObject*                          __WorldContext                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class FString                           Coordinates                                            (Parm, OutParm, ZeroConstructor, HasGetValueTypeHash)
// class FString                           X                                                      (Parm, OutParm, ZeroConstructor, HasGetValueTypeHash)
// class FString                           Y                                                      (Parm, OutParm, ZeroConstructor, HasGetValueTypeHash)

void UBP_Functions_C::FindGridCoordinatesVector(const struct FVector& ZeroPilar, const struct FVector& MaxPilar, int32 X_precision, int32 Y_Precision, const struct FVector& ObjectWorldLocation, int32 X_offset, int32 Y_offset, class UObject* __WorldContext, class FString* Coordinates, class FString* X, class FString* Y)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("BP_Functions_C", "FindGridCoordinatesVector");

	Params::BP_Functions_C_FindGridCoordinatesVector Parms{};

	Parms.ZeroPilar = std::move(ZeroPilar);
	Parms.MaxPilar = std::move(MaxPilar);
	Parms.X_precision = X_precision;
	Parms.Y_Precision = Y_Precision;
	Parms.ObjectWorldLocation = std::move(ObjectWorldLocation);
	Parms.X_offset = X_offset;
	Parms.Y_offset = Y_offset;
	Parms.__WorldContext = __WorldContext;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	if (Coordinates != nullptr)
		*Coordinates = std::move(Parms.Coordinates);

	if (X != nullptr)
		*X = std::move(Parms.X);

	if (Y != nullptr)
		*Y = std::move(Parms.Y);
}


// Function BP_Functions.BP_Functions_C.GetRationForGridCoordinatesVector
// (Static, Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FVector                          Min                                                    (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FVector                          Max                                                    (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   X_precision                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   Y_Precision                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class UObject*                          __WorldContext                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   XZero                                                  (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   YZero                                                  (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   XRatio                                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   YRation                                                (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_Functions_C::GetRationForGridCoordinatesVector(const struct FVector& Min, const struct FVector& Max, int32 X_precision, int32 Y_Precision, class UObject* __WorldContext, float* XZero, float* YZero, float* XRatio, float* YRation)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("BP_Functions_C", "GetRationForGridCoordinatesVector");

	Params::BP_Functions_C_GetRationForGridCoordinatesVector Parms{};

	Parms.Min = std::move(Min);
	Parms.Max = std::move(Max);
	Parms.X_precision = X_precision;
	Parms.Y_Precision = Y_Precision;
	Parms.__WorldContext = __WorldContext;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	if (XZero != nullptr)
		*XZero = Parms.XZero;

	if (YZero != nullptr)
		*YZero = Parms.YZero;

	if (XRatio != nullptr)
		*XRatio = Parms.XRatio;

	if (YRation != nullptr)
		*YRation = Parms.YRation;
}


// Function BP_Functions.BP_Functions_C.Get Item Names from Item Array
// (Static, Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// TArray<class UClass*>                   Items_List                                             (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
// class UObject*                          __WorldContext                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// TArray<class FText>                     Names_List                                             (Parm, OutParm)

void UBP_Functions_C::Get_Item_Names_from_Item_Array(TArray<class UClass*>& Items_List, class UObject* __WorldContext, TArray<class FText>* Names_List)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("BP_Functions_C", "Get Item Names from Item Array");

	Params::BP_Functions_C_Get_Item_Names_from_Item_Array Parms{};

	Parms.Items_List = std::move(Items_List);
	Parms.__WorldContext = __WorldContext;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Items_List = std::move(Parms.Items_List);

	if (Names_List != nullptr)
		*Names_List = std::move(Parms.Names_List);
}


// Function BP_Functions.BP_Functions_C.Get Normalized Map Coordinates
// (Static, Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// class AActor*                           Actor                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class UObject*                          __WorldContext                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FVector2D                        Normalized_Coordinates                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_Functions_C::Get_Normalized_Map_Coordinates(class AActor* Actor, class UObject* __WorldContext, struct FVector2D* Normalized_Coordinates)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("BP_Functions_C", "Get Normalized Map Coordinates");

	Params::BP_Functions_C_Get_Normalized_Map_Coordinates Parms{};

	Parms.Actor = Actor;
	Parms.__WorldContext = __WorldContext;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	if (Normalized_Coordinates != nullptr)
		*Normalized_Coordinates = std::move(Parms.Normalized_Coordinates);
}


// Function BP_Functions.BP_Functions_C.MaxBoundsToDrawDistance
// (Static, Public, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// class AActor*                           Actor                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   DrawDistanceMultiplier                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    Toggle_Debug                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// class UObject*                          __WorldContext                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_Functions_C::MaxBoundsToDrawDistance(class AActor* Actor, float DrawDistanceMultiplier, bool Toggle_Debug, class UObject* __WorldContext)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("BP_Functions_C", "MaxBoundsToDrawDistance");

	Params::BP_Functions_C_MaxBoundsToDrawDistance Parms{};

	Parms.Actor = Actor;
	Parms.DrawDistanceMultiplier = DrawDistanceMultiplier;
	Parms.Toggle_Debug = Toggle_Debug;
	Parms.__WorldContext = __WorldContext;

	GetDefaultObj()->ProcessEvent(Func, &Parms);
}


// Function BP_Functions.BP_Functions_C.Find Most 2D-Distant Object from Object
// (Static, Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// class AActor*                           Origin                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// TArray<class AActor*>                   Candidates                                             (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
// class UObject*                          __WorldContext                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class AActor*                           Most_Distant_Object                                    (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   Distance                                               (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_Functions_C::Find_Most_2DMinusDistant_Object_from_Object(class AActor* Origin, TArray<class AActor*>& Candidates, class UObject* __WorldContext, class AActor** Most_Distant_Object, float* Distance)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("BP_Functions_C", "Find Most 2D-Distant Object from Object");

	Params::BP_Functions_C_Find_Most_2DMinusDistant_Object_from_Object Parms{};

	Parms.Origin = Origin;
	Parms.Candidates = std::move(Candidates);
	Parms.__WorldContext = __WorldContext;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Candidates = std::move(Parms.Candidates);

	if (Most_Distant_Object != nullptr)
		*Most_Distant_Object = Parms.Most_Distant_Object;

	if (Distance != nullptr)
		*Distance = Parms.Distance;
}


// Function BP_Functions.BP_Functions_C.Convert from World to Game
// (Static, Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FRotator                         Rotator_in_World_Space                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// class UObject*                          __WorldContext                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FRotator                         Rotator_in_Game_Space                                  (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void UBP_Functions_C::Convert_from_World_to_Game(const struct FRotator& Rotator_in_World_Space, class UObject* __WorldContext, struct FRotator* Rotator_in_Game_Space)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("BP_Functions_C", "Convert from World to Game");

	Params::BP_Functions_C_Convert_from_World_to_Game Parms{};

	Parms.Rotator_in_World_Space = std::move(Rotator_in_World_Space);
	Parms.__WorldContext = __WorldContext;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	if (Rotator_in_Game_Space != nullptr)
		*Rotator_in_Game_Space = std::move(Parms.Rotator_in_Game_Space);
}


// Function BP_Functions.BP_Functions_C.Convert from Game to World
// (Static, Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FRotator                         Rotator_in_Game_Space                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// class UObject*                          __WorldContext                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FRotator                         Rotator_in_World_Space                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void UBP_Functions_C::Convert_from_Game_to_World(const struct FRotator& Rotator_in_Game_Space, class UObject* __WorldContext, struct FRotator* Rotator_in_World_Space)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("BP_Functions_C", "Convert from Game to World");

	Params::BP_Functions_C_Convert_from_Game_to_World Parms{};

	Parms.Rotator_in_Game_Space = std::move(Rotator_in_Game_Space);
	Parms.__WorldContext = __WorldContext;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	if (Rotator_in_World_Space != nullptr)
		*Rotator_in_World_Space = std::move(Parms.Rotator_in_World_Space);
}


// Function BP_Functions.BP_Functions_C.Find Most 2D-Distant Object from Location
// (Static, Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FVector                          Location                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// TArray<class AActor*>                   Candidates                                             (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
// class UObject*                          __WorldContext                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class AActor*                           Most_Distant_Object                                    (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   Distance                                               (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_Functions_C::Find_Most_2DMinusDistant_Object_from_Location(const struct FVector& Location, TArray<class AActor*>& Candidates, class UObject* __WorldContext, class AActor** Most_Distant_Object, float* Distance)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("BP_Functions_C", "Find Most 2D-Distant Object from Location");

	Params::BP_Functions_C_Find_Most_2DMinusDistant_Object_from_Location Parms{};

	Parms.Location = std::move(Location);
	Parms.Candidates = std::move(Candidates);
	Parms.__WorldContext = __WorldContext;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Candidates = std::move(Parms.Candidates);

	if (Most_Distant_Object != nullptr)
		*Most_Distant_Object = Parms.Most_Distant_Object;

	if (Distance != nullptr)
		*Distance = Parms.Distance;
}


// Function BP_Functions.BP_Functions_C.Find Most 2D-Distant Location from Location
// (Static, Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FVector                          Location                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// TArray<struct FVector>                  Candidates                                             (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
// class UObject*                          __WorldContext                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FVector                          Most_Distant_Location                                  (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   Distance                                               (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_Functions_C::Find_Most_2DMinusDistant_Location_from_Location(const struct FVector& Location, TArray<struct FVector>& Candidates, class UObject* __WorldContext, struct FVector* Most_Distant_Location, float* Distance)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("BP_Functions_C", "Find Most 2D-Distant Location from Location");

	Params::BP_Functions_C_Find_Most_2DMinusDistant_Location_from_Location Parms{};

	Parms.Location = std::move(Location);
	Parms.Candidates = std::move(Candidates);
	Parms.__WorldContext = __WorldContext;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Candidates = std::move(Parms.Candidates);

	if (Most_Distant_Location != nullptr)
		*Most_Distant_Location = std::move(Parms.Most_Distant_Location);

	if (Distance != nullptr)
		*Distance = Parms.Distance;
}


// Function BP_Functions.BP_Functions_C.Handle Valid and Timer Exists
// (Static, Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// struct FTimerHandle                     Handle                                                 (BlueprintVisible, BlueprintReadOnly, Parm, NoDestructor, HasGetValueTypeHash)
// class UObject*                          __WorldContext                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    Return_Value                                           (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void UBP_Functions_C::Handle_Valid_and_Timer_Exists(const struct FTimerHandle& Handle, class UObject* __WorldContext, bool* Return_Value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("BP_Functions_C", "Handle Valid and Timer Exists");

	Params::BP_Functions_C_Handle_Valid_and_Timer_Exists Parms{};

	Parms.Handle = std::move(Handle);
	Parms.__WorldContext = __WorldContext;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	if (Return_Value != nullptr)
		*Return_Value = Parms.Return_Value;
}


// Function BP_Functions.BP_Functions_C.Get Center of Map
// (Static, Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// class UObject*                          __WorldContext                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FVector2D                        Location                                               (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    Output_Valid                                           (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void UBP_Functions_C::Get_Center_of_Map(class UObject* __WorldContext, struct FVector2D* Location, bool* Output_Valid)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("BP_Functions_C", "Get Center of Map");

	Params::BP_Functions_C_Get_Center_of_Map Parms{};

	Parms.__WorldContext = __WorldContext;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	if (Location != nullptr)
		*Location = std::move(Parms.Location);

	if (Output_Valid != nullptr)
		*Output_Valid = Parms.Output_Valid;
}


// Function BP_Functions.BP_Functions_C.Find Least 2D-Distant Object from Object
// (Static, Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// class AActor*                           Origin                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// TArray<class AActor*>                   Candidates                                             (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
// class UObject*                          __WorldContext                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class AActor*                           Least_Distant_Object                                   (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   Distance                                               (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_Functions_C::Find_Least_2DMinusDistant_Object_from_Object(class AActor* Origin, TArray<class AActor*>& Candidates, class UObject* __WorldContext, class AActor** Least_Distant_Object, float* Distance)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("BP_Functions_C", "Find Least 2D-Distant Object from Object");

	Params::BP_Functions_C_Find_Least_2DMinusDistant_Object_from_Object Parms{};

	Parms.Origin = Origin;
	Parms.Candidates = std::move(Candidates);
	Parms.__WorldContext = __WorldContext;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Candidates = std::move(Parms.Candidates);

	if (Least_Distant_Object != nullptr)
		*Least_Distant_Object = Parms.Least_Distant_Object;

	if (Distance != nullptr)
		*Distance = Parms.Distance;
}


// Function BP_Functions.BP_Functions_C.Get Game Azimuth
// (Static, Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// struct FVector                          Start                                                  (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FVector                          Target                                                 (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class UObject*                          __WorldContext                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

float UBP_Functions_C::Get_Game_Azimuth(const struct FVector& Start, const struct FVector& Target, class UObject* __WorldContext)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("BP_Functions_C", "Get Game Azimuth");

	Params::BP_Functions_C_Get_Game_Azimuth Parms{};

	Parms.Start = std::move(Start);
	Parms.Target = std::move(Target);
	Parms.__WorldContext = __WorldContext;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function BP_Functions.BP_Functions_C.Get All Weapons Count
// (Static, Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// class UEquipmentStorageComponent*       Equipment_Storage                                      (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class UObject*                          __WorldContext                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   Number_of_Weapons                                      (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_Functions_C::Get_All_Weapons_Count(class UEquipmentStorageComponent* Equipment_Storage, class UObject* __WorldContext, int32* Number_of_Weapons)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("BP_Functions_C", "Get All Weapons Count");

	Params::BP_Functions_C_Get_All_Weapons_Count Parms{};

	Parms.Equipment_Storage = Equipment_Storage;
	Parms.__WorldContext = __WorldContext;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	if (Number_of_Weapons != nullptr)
		*Number_of_Weapons = Parms.Number_of_Weapons;
}


// Function BP_Functions.BP_Functions_C.Get Primary Weapons Count
// (Static, Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// class UEquipmentStorageComponent*       Equipment_Storage                                      (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class UObject*                          __WorldContext                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   Number_of_Primary_Weapons                              (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_Functions_C::Get_Primary_Weapons_Count(class UEquipmentStorageComponent* Equipment_Storage, class UObject* __WorldContext, int32* Number_of_Primary_Weapons)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("BP_Functions_C", "Get Primary Weapons Count");

	Params::BP_Functions_C_Get_Primary_Weapons_Count Parms{};

	Parms.Equipment_Storage = Equipment_Storage;
	Parms.__WorldContext = __WorldContext;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	if (Number_of_Primary_Weapons != nullptr)
		*Number_of_Primary_Weapons = Parms.Number_of_Primary_Weapons;
}


// Function BP_Functions.BP_Functions_C.Get Secondary Weapons Count
// (Static, Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// class UEquipmentStorageComponent*       Equipment_Storage                                      (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class UObject*                          __WorldContext                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   Number_of_Secondary_Weapons                            (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_Functions_C::Get_Secondary_Weapons_Count(class UEquipmentStorageComponent* Equipment_Storage, class UObject* __WorldContext, int32* Number_of_Secondary_Weapons)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("BP_Functions_C", "Get Secondary Weapons Count");

	Params::BP_Functions_C_Get_Secondary_Weapons_Count Parms{};

	Parms.Equipment_Storage = Equipment_Storage;
	Parms.__WorldContext = __WorldContext;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	if (Number_of_Secondary_Weapons != nullptr)
		*Number_of_Secondary_Weapons = Parms.Number_of_Secondary_Weapons;
}


// Function BP_Functions.BP_Functions_C.Get Firearms Count
// (Static, Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// class UEquipmentStorageComponent*       Equipment_Storage                                      (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class UObject*                          __WorldContext                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   Number_of_Firearms                                     (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_Functions_C::Get_Firearms_Count(class UEquipmentStorageComponent* Equipment_Storage, class UObject* __WorldContext, int32* Number_of_Firearms)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("BP_Functions_C", "Get Firearms Count");

	Params::BP_Functions_C_Get_Firearms_Count Parms{};

	Parms.Equipment_Storage = Equipment_Storage;
	Parms.__WorldContext = __WorldContext;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	if (Number_of_Firearms != nullptr)
		*Number_of_Firearms = Parms.Number_of_Firearms;
}


// Function BP_Functions.BP_Functions_C.Get Melee Weapons Count
// (Static, Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// class UEquipmentStorageComponent*       Equipment_Storage                                      (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class UObject*                          __WorldContext                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   Number_of_Melee_Weapons                                (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_Functions_C::Get_Melee_Weapons_Count(class UEquipmentStorageComponent* Equipment_Storage, class UObject* __WorldContext, int32* Number_of_Melee_Weapons)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("BP_Functions_C", "Get Melee Weapons Count");

	Params::BP_Functions_C_Get_Melee_Weapons_Count Parms{};

	Parms.Equipment_Storage = Equipment_Storage;
	Parms.__WorldContext = __WorldContext;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	if (Number_of_Melee_Weapons != nullptr)
		*Number_of_Melee_Weapons = Parms.Number_of_Melee_Weapons;
}


// Function BP_Functions.BP_Functions_C.Get Throwable Weapons Count
// (Static, Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// class UEquipmentStorageComponent*       Equipment_Storage                                      (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class UObject*                          __WorldContext                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   Number_of_Throwable_Weapons                            (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_Functions_C::Get_Throwable_Weapons_Count(class UEquipmentStorageComponent* Equipment_Storage, class UObject* __WorldContext, int32* Number_of_Throwable_Weapons)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("BP_Functions_C", "Get Throwable Weapons Count");

	Params::BP_Functions_C_Get_Throwable_Weapons_Count Parms{};

	Parms.Equipment_Storage = Equipment_Storage;
	Parms.__WorldContext = __WorldContext;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	if (Number_of_Throwable_Weapons != nullptr)
		*Number_of_Throwable_Weapons = Parms.Number_of_Throwable_Weapons;
}


// Function BP_Functions.BP_Functions_C.Get All Ammo Count
// (Static, Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// class UEquipmentStorageComponent*       Equipment_Storage                                      (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class UObject*                          __WorldContext                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   Amount_of_Ammunition                                   (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_Functions_C::Get_All_Ammo_Count(class UEquipmentStorageComponent* Equipment_Storage, class UObject* __WorldContext, int32* Amount_of_Ammunition)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("BP_Functions_C", "Get All Ammo Count");

	Params::BP_Functions_C_Get_All_Ammo_Count Parms{};

	Parms.Equipment_Storage = Equipment_Storage;
	Parms.__WorldContext = __WorldContext;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	if (Amount_of_Ammunition != nullptr)
		*Amount_of_Ammunition = Parms.Amount_of_Ammunition;
}


// Function BP_Functions.BP_Functions_C.Get Item Count
// (Static, Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// class UEquipmentStorageComponent*       Equipment_Storage                                      (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class UClass*                           Item_Type                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class UObject*                          __WorldContext                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   Sum_of_Items_Found                                     (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// TArray<class UClass*>                   Types_of_Items_Found                                   (Parm, OutParm)

void UBP_Functions_C::Get_Item_Count(class UEquipmentStorageComponent* Equipment_Storage, class UClass* Item_Type, class UObject* __WorldContext, int32* Sum_of_Items_Found, TArray<class UClass*>* Types_of_Items_Found)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("BP_Functions_C", "Get Item Count");

	Params::BP_Functions_C_Get_Item_Count Parms{};

	Parms.Equipment_Storage = Equipment_Storage;
	Parms.Item_Type = Item_Type;
	Parms.__WorldContext = __WorldContext;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	if (Sum_of_Items_Found != nullptr)
		*Sum_of_Items_Found = Parms.Sum_of_Items_Found;

	if (Types_of_Items_Found != nullptr)
		*Types_of_Items_Found = std::move(Parms.Types_of_Items_Found);
}


// Function BP_Functions.BP_Functions_C.Convert Damage Type to Cause of Death
// (Static, Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// EDamageType                             Damage_Type                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class UObject*                          __WorldContext                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// ECloudDeathCauseType                    Cause_of_Death                                         (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_Functions_C::Convert_Damage_Type_to_Cause_of_Death(EDamageType Damage_Type, class UObject* __WorldContext, ECloudDeathCauseType* Cause_of_Death)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("BP_Functions_C", "Convert Damage Type to Cause of Death");

	Params::BP_Functions_C_Convert_Damage_Type_to_Cause_of_Death Parms{};

	Parms.Damage_Type = Damage_Type;
	Parms.__WorldContext = __WorldContext;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	if (Cause_of_Death != nullptr)
		*Cause_of_Death = Parms.Cause_of_Death;
}


// Function BP_Functions.BP_Functions_C.Get Full Customization Name
// (Static, Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FCustomizationPair               Customization_pair                                     (BlueprintVisible, BlueprintReadOnly, Parm, NoDestructor)
// class UObject*                          __WorldContext                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class FString                           Name_0                                                 (Parm, OutParm, ZeroConstructor, HasGetValueTypeHash)

void UBP_Functions_C::Get_Full_Customization_Name(const struct FCustomizationPair& Customization_pair, class UObject* __WorldContext, class FString* Name_0)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("BP_Functions_C", "Get Full Customization Name");

	Params::BP_Functions_C_Get_Full_Customization_Name Parms{};

	Parms.Customization_pair = std::move(Customization_pair);
	Parms.__WorldContext = __WorldContext;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	if (Name_0 != nullptr)
		*Name_0 = std::move(Parms.Name_0);
}


// Function BP_Functions.BP_Functions_C.Get Full Customization Class Name
// (Static, Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FCustomizationPair               Customization_pair                                     (BlueprintVisible, BlueprintReadOnly, Parm, NoDestructor)
// class UObject*                          __WorldContext                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class FString                           Name_0                                                 (Parm, OutParm, ZeroConstructor, HasGetValueTypeHash)

void UBP_Functions_C::Get_Full_Customization_Class_Name(const struct FCustomizationPair& Customization_pair, class UObject* __WorldContext, class FString* Name_0)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("BP_Functions_C", "Get Full Customization Class Name");

	Params::BP_Functions_C_Get_Full_Customization_Class_Name Parms{};

	Parms.Customization_pair = std::move(Customization_pair);
	Parms.__WorldContext = __WorldContext;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	if (Name_0 != nullptr)
		*Name_0 = std::move(Parms.Name_0);
}


// Function BP_Functions.BP_Functions_C.Convert Cause of Death to Damage Type
// (Static, Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// ECloudDeathCauseType                    Cause_of_Death                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class UObject*                          __WorldContext                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// EDamageType                             Damage_Type                                            (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_Functions_C::Convert_Cause_of_Death_to_Damage_Type(ECloudDeathCauseType Cause_of_Death, class UObject* __WorldContext, EDamageType* Damage_Type)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("BP_Functions_C", "Convert Cause of Death to Damage Type");

	Params::BP_Functions_C_Convert_Cause_of_Death_to_Damage_Type Parms{};

	Parms.Cause_of_Death = Cause_of_Death;
	Parms.__WorldContext = __WorldContext;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	if (Damage_Type != nullptr)
		*Damage_Type = Parms.Damage_Type;
}


// Function BP_Functions.BP_Functions_C.Get Actor Locations
// (Static, Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// TArray<class AActor*>                   Actors                                                 (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
// bool                                    Skip_Invalid                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// class UObject*                          __WorldContext                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// TArray<struct FVector>                  Locations                                              (Parm, OutParm)

void UBP_Functions_C::Get_Actor_Locations(TArray<class AActor*>& Actors, bool Skip_Invalid, class UObject* __WorldContext, TArray<struct FVector>* Locations)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("BP_Functions_C", "Get Actor Locations");

	Params::BP_Functions_C_Get_Actor_Locations Parms{};

	Parms.Actors = std::move(Actors);
	Parms.Skip_Invalid = Skip_Invalid;
	Parms.__WorldContext = __WorldContext;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Actors = std::move(Parms.Actors);

	if (Locations != nullptr)
		*Locations = std::move(Parms.Locations);
}


// Function BP_Functions.BP_Functions_C.PlayerUserMessage
// (Static, Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class FText                             Message                                                (BlueprintVisible, BlueprintReadOnly, Parm)
// class AController*                      Controller                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    IncludeDeadChars                                       (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// TSoftObjectPtr<class USoundBase>        Optional2D_Sound                                       (BlueprintVisible, BlueprintReadOnly, Parm, HasGetValueTypeHash)
// class UObject*                          __WorldContext                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_Functions_C::PlayerUserMessage(const class FText& Message, class AController* Controller, bool IncludeDeadChars, TSoftObjectPtr<class USoundBase> Optional2D_Sound, class UObject* __WorldContext)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("BP_Functions_C", "PlayerUserMessage");

	Params::BP_Functions_C_PlayerUserMessage Parms{};

	Parms.Message = std::move(Message);
	Parms.Controller = Controller;
	Parms.IncludeDeadChars = IncludeDeadChars;
	Parms.Optional2D_Sound = Optional2D_Sound;
	Parms.__WorldContext = __WorldContext;

	GetDefaultObj()->ProcessEvent(Func, &Parms);
}


// Function BP_Functions.BP_Functions_C.PlayerCharacterUserMessage
// (Static, Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class FText                             Message                                                (BlueprintVisible, BlueprintReadOnly, Parm)
// class ACharacter*                       Character                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class UObject*                          __WorldContext                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_Functions_C::PlayerCharacterUserMessage(const class FText& Message, class ACharacter* Character, class UObject* __WorldContext)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("BP_Functions_C", "PlayerCharacterUserMessage");

	Params::BP_Functions_C_PlayerCharacterUserMessage Parms{};

	Parms.Message = std::move(Message);
	Parms.Character = Character;
	Parms.__WorldContext = __WorldContext;

	GetDefaultObj()->ProcessEvent(Func, &Parms);
}


// Function BP_Functions.BP_Functions_C.PrintAllTimes
// (Static, Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class AHumanPlayerController*           PlayerController                                       (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FLinearColor                     TextColor                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   Duration                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class UObject*                          __WorldContext                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_Functions_C::PrintAllTimes(class AHumanPlayerController* PlayerController, const struct FLinearColor& TextColor, float Duration, class UObject* __WorldContext)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("BP_Functions_C", "PrintAllTimes");

	Params::BP_Functions_C_PrintAllTimes Parms{};

	Parms.PlayerController = PlayerController;
	Parms.TextColor = std::move(TextColor);
	Parms.Duration = Duration;
	Parms.__WorldContext = __WorldContext;

	GetDefaultObj()->ProcessEvent(Func, &Parms);
}


// Function BP_Functions.BP_Functions_C.PrintDebugMessage
// (Static, Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class FString                           InString                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)
// struct FLinearColor                     TextColor                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class FName                             Category                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   Duration                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class UObject*                          __WorldContext                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_Functions_C::PrintDebugMessage(const class FString& InString, const struct FLinearColor& TextColor, class FName Category, float Duration, class UObject* __WorldContext)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("BP_Functions_C", "PrintDebugMessage");

	Params::BP_Functions_C_PrintDebugMessage Parms{};

	Parms.InString = std::move(InString);
	Parms.TextColor = std::move(TextColor);
	Parms.Category = Category;
	Parms.Duration = Duration;
	Parms.__WorldContext = __WorldContext;

	GetDefaultObj()->ProcessEvent(Func, &Parms);
}


// Function BP_Functions.BP_Functions_C.RotationBetweenVectors
// (Static, Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// struct FVector                          A                                                      (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FVector                          B                                                      (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class UObject*                          __WorldContext                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FRotator                         Rotator                                                (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
// struct FVector                          Axis                                                   (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   Angle                                                  (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_Functions_C::RotationBetweenVectors(const struct FVector& A, const struct FVector& B, class UObject* __WorldContext, struct FRotator* Rotator, struct FVector* Axis, float* Angle)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("BP_Functions_C", "RotationBetweenVectors");

	Params::BP_Functions_C_RotationBetweenVectors Parms{};

	Parms.A = std::move(A);
	Parms.B = std::move(B);
	Parms.__WorldContext = __WorldContext;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	if (Rotator != nullptr)
		*Rotator = std::move(Parms.Rotator);

	if (Axis != nullptr)
		*Axis = std::move(Parms.Axis);

	if (Angle != nullptr)
		*Angle = Parms.Angle;
}


// Function BP_Functions.BP_Functions_C.GetBoosterCount
// (Static, Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// TArray<struct FCloudUserLobbyInfo>      PlayersBoosters                                        (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
// class FString                           BoosterSKU                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)
// class UObject*                          __WorldContext                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   Count                                                  (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_Functions_C::GetBoosterCount(const TArray<struct FCloudUserLobbyInfo>& PlayersBoosters, const class FString& BoosterSKU, class UObject* __WorldContext, int32* Count)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("BP_Functions_C", "GetBoosterCount");

	Params::BP_Functions_C_GetBoosterCount Parms{};

	Parms.PlayersBoosters = std::move(PlayersBoosters);
	Parms.BoosterSKU = std::move(BoosterSKU);
	Parms.__WorldContext = __WorldContext;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	if (Count != nullptr)
		*Count = Parms.Count;
}


// Function BP_Functions.BP_Functions_C.Get First Occupied Weapon Slot
// (Static, Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// class UInventoryComponent*              Inventory                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class UObject*                          __WorldContext                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// EWeaponSlotType                         Slot                                                   (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_Functions_C::Get_First_Occupied_Weapon_Slot(class UInventoryComponent* Inventory, class UObject* __WorldContext, EWeaponSlotType* Slot)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("BP_Functions_C", "Get First Occupied Weapon Slot");

	Params::BP_Functions_C_Get_First_Occupied_Weapon_Slot Parms{};

	Parms.Inventory = Inventory;
	Parms.__WorldContext = __WorldContext;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	if (Slot != nullptr)
		*Slot = Parms.Slot;
}


// Function BP_Functions.BP_Functions_C.Join Text Array
// (Static, Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// TArray<class FText>                     SourceArray                                            (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
// class FText                             Separator                                              (BlueprintVisible, BlueprintReadOnly, Parm)
// class UObject*                          __WorldContext                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class FText                             ReturnValue                                            (Parm, OutParm, ReturnParm)

class FText UBP_Functions_C::Join_Text_Array(const TArray<class FText>& SourceArray, const class FText& Separator, class UObject* __WorldContext)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("BP_Functions_C", "Join Text Array");

	Params::BP_Functions_C_Join_Text_Array Parms{};

	Parms.SourceArray = std::move(SourceArray);
	Parms.Separator = std::move(Separator);
	Parms.__WorldContext = __WorldContext;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function BP_Functions.BP_Functions_C.Increase Achievement Progress
// (Static, Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// class FName                             Achievement_Name                                       (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   Increase_Progress_By                                   (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class UObject*                          __WorldContext                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   Result_Code                                            (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_Functions_C::Increase_Achievement_Progress(class FName Achievement_Name, float Increase_Progress_By, class UObject* __WorldContext, int32* Result_Code)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("BP_Functions_C", "Increase Achievement Progress");

	Params::BP_Functions_C_Increase_Achievement_Progress Parms{};

	Parms.Achievement_Name = Achievement_Name;
	Parms.Increase_Progress_By = Increase_Progress_By;
	Parms.__WorldContext = __WorldContext;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	if (Result_Code != nullptr)
		*Result_Code = Parms.Result_Code;
}


// Function BP_Functions.BP_Functions_C.Has Achievement Already Been Achieved
// (Static, Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// class FName                             Achievement_Name                                       (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class UObject*                          __WorldContext                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    Already_Achieved                                       (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void UBP_Functions_C::Has_Achievement_Already_Been_Achieved(class FName Achievement_Name, class UObject* __WorldContext, bool* Already_Achieved)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("BP_Functions_C", "Has Achievement Already Been Achieved");

	Params::BP_Functions_C_Has_Achievement_Already_Been_Achieved Parms{};

	Parms.Achievement_Name = Achievement_Name;
	Parms.__WorldContext = __WorldContext;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	if (Already_Achieved != nullptr)
		*Already_Achieved = Parms.Already_Achieved;
}


// Function BP_Functions.BP_Functions_C.FormatTimespanDHMS
// (Static, Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// struct FTimespan                        TimespanIn                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// class UObject*                          __WorldContext                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class FText                             TimespanDHMSOut                                        (Parm, OutParm)

void UBP_Functions_C::FormatTimespanDHMS(const struct FTimespan& TimespanIn, class UObject* __WorldContext, class FText* TimespanDHMSOut)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("BP_Functions_C", "FormatTimespanDHMS");

	Params::BP_Functions_C_FormatTimespanDHMS Parms{};

	Parms.TimespanIn = std::move(TimespanIn);
	Parms.__WorldContext = __WorldContext;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	if (TimespanDHMSOut != nullptr)
		*TimespanDHMSOut = std::move(Parms.TimespanDHMSOut);
}


// Function BP_Functions.BP_Functions_C.Lerp (vector2D)
// (Static, Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// struct FVector2D                        A                                                      (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FVector2D                        B                                                      (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   Alpha                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class UObject*                          __WorldContext                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FVector2D                        ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

struct FVector2D UBP_Functions_C::Lerp__vector2D_(const struct FVector2D& A, const struct FVector2D& B, float Alpha, class UObject* __WorldContext)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("BP_Functions_C", "Lerp (vector2D)");

	Params::BP_Functions_C_Lerp__vector2D_ Parms{};

	Parms.A = std::move(A);
	Parms.B = std::move(B);
	Parms.Alpha = Alpha;
	Parms.__WorldContext = __WorldContext;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function BP_Functions.BP_Functions_C.ToString (DateTime)
// (Static, Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// struct FDateTime                        DateTime                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// class UObject*                          __WorldContext                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class FString                           String                                                 (Parm, OutParm, ZeroConstructor, HasGetValueTypeHash)

void UBP_Functions_C::ToString__DateTime_(const struct FDateTime& DateTime, class UObject* __WorldContext, class FString* String)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("BP_Functions_C", "ToString (DateTime)");

	Params::BP_Functions_C_ToString__DateTime_ Parms{};

	Parms.DateTime = std::move(DateTime);
	Parms.__WorldContext = __WorldContext;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	if (String != nullptr)
		*String = std::move(Parms.String);
}


// Function BP_Functions.BP_Functions_C.ToString (Timespan)
// (Static, Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// struct FTimespan                        DateTime                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// class UObject*                          __WorldContext                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class FString                           String                                                 (Parm, OutParm, ZeroConstructor, HasGetValueTypeHash)

void UBP_Functions_C::ToString__Timespan_(const struct FTimespan& DateTime, class UObject* __WorldContext, class FString* String)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("BP_Functions_C", "ToString (Timespan)");

	Params::BP_Functions_C_ToString__Timespan_ Parms{};

	Parms.DateTime = std::move(DateTime);
	Parms.__WorldContext = __WorldContext;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	if (String != nullptr)
		*String = std::move(Parms.String);
}


// Function BP_Functions.BP_Functions_C.IsPlanUnlocked
// (Static, Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// class UClass*                           PlanClassIn                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class APlayerController*                PlayerControllerIn                                     (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class UObject*                          __WorldContext                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    OutputValid                                            (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
// bool                                    PlanUnlocked                                           (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void UBP_Functions_C::IsPlanUnlocked(class UClass* PlanClassIn, class APlayerController* PlayerControllerIn, class UObject* __WorldContext, bool* OutputValid, bool* PlanUnlocked)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("BP_Functions_C", "IsPlanUnlocked");

	Params::BP_Functions_C_IsPlanUnlocked Parms{};

	Parms.PlanClassIn = PlanClassIn;
	Parms.PlayerControllerIn = PlayerControllerIn;
	Parms.__WorldContext = __WorldContext;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	if (OutputValid != nullptr)
		*OutputValid = Parms.OutputValid;

	if (PlanUnlocked != nullptr)
		*PlanUnlocked = Parms.PlanUnlocked;
}


// Function BP_Functions.BP_Functions_C.ChooseOpticBlur
// (Static, Public, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// EOpticsType                             OpticType                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class UCameraComponent*                 AimPoint                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class UObject*                          __WorldContext                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_Functions_C::ChooseOpticBlur(EOpticsType OpticType, class UCameraComponent* AimPoint, class UObject* __WorldContext)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("BP_Functions_C", "ChooseOpticBlur");

	Params::BP_Functions_C_ChooseOpticBlur Parms{};

	Parms.OpticType = OpticType;
	Parms.AimPoint = AimPoint;
	Parms.__WorldContext = __WorldContext;

	GetDefaultObj()->ProcessEvent(Func, &Parms);
}


// Function BP_Functions.BP_Functions_C.ApplyWeaponSkin
// (Static, Public, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// class UClass*                           WeaponSkin                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class UMeshComponent*                   Mesh                                                   (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class AWeapon*                          Weaspon                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class UObject*                          __WorldContext                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_Functions_C::ApplyWeaponSkin(class UClass* WeaponSkin, class UMeshComponent* Mesh, class AWeapon* Weaspon, class UObject* __WorldContext)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("BP_Functions_C", "ApplyWeaponSkin");

	Params::BP_Functions_C_ApplyWeaponSkin Parms{};

	Parms.WeaponSkin = WeaponSkin;
	Parms.Mesh = Mesh;
	Parms.Weaspon = Weaspon;
	Parms.__WorldContext = __WorldContext;

	GetDefaultObj()->ProcessEvent(Func, &Parms);
}


// Function BP_Functions.BP_Functions_C.ClearWeaponSkinVisual
// (Static, Public, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// class UMeshComponent*                   Mesh                                                   (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class AWeapon*                          Weapon                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class FName                             ExtraMaterialSkinElementName                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class UObject*                          __WorldContext                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_Functions_C::ClearWeaponSkinVisual(class UMeshComponent* Mesh, class AWeapon* Weapon, class FName ExtraMaterialSkinElementName, class UObject* __WorldContext)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("BP_Functions_C", "ClearWeaponSkinVisual");

	Params::BP_Functions_C_ClearWeaponSkinVisual Parms{};

	Parms.Mesh = Mesh;
	Parms.Weapon = Weapon;
	Parms.ExtraMaterialSkinElementName = ExtraMaterialSkinElementName;
	Parms.__WorldContext = __WorldContext;

	GetDefaultObj()->ProcessEvent(Func, &Parms);
}


// Function BP_Functions.BP_Functions_C.Cloud Request Result Equal To
// (Static, Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// struct FCloudRequestResult              A                                                      (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
// ECloudRequestResult                     B                                                      (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class UObject*                          __WorldContext                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)

bool UBP_Functions_C::Cloud_Request_Result_Equal_To(const struct FCloudRequestResult& A, ECloudRequestResult B, class UObject* __WorldContext)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("BP_Functions_C", "Cloud Request Result Equal To");

	Params::BP_Functions_C_Cloud_Request_Result_Equal_To Parms{};

	Parms.A = std::move(A);
	Parms.B = B;
	Parms.__WorldContext = __WorldContext;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function BP_Functions.BP_Functions_C.Are Characters in Group
// (Static, Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// class AHumanCharacter*                  Character_A                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class AHumanCharacter*                  Character_B                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class UObject*                          __WorldContext                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    Are_in_Group                                           (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
// bool                                    Output_Valid                                           (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void UBP_Functions_C::Are_Characters_in_Group(class AHumanCharacter* Character_A, class AHumanCharacter* Character_B, class UObject* __WorldContext, bool* Are_in_Group, bool* Output_Valid)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("BP_Functions_C", "Are Characters in Group");

	Params::BP_Functions_C_Are_Characters_in_Group Parms{};

	Parms.Character_A = Character_A;
	Parms.Character_B = Character_B;
	Parms.__WorldContext = __WorldContext;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	if (Are_in_Group != nullptr)
		*Are_in_Group = Parms.Are_in_Group;

	if (Output_Valid != nullptr)
		*Output_Valid = Parms.Output_Valid;
}


// Function BP_Functions.BP_Functions_C.FormatTimespanDHMS(ZeroClamped)
// (Static, Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// struct FTimespan                        TimespanIn                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// class UObject*                          __WorldContext                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class FText                             TimespanDHMSOut                                        (Parm, OutParm)

void UBP_Functions_C::FormatTimespanDHMS_ZeroClamped_(const struct FTimespan& TimespanIn, class UObject* __WorldContext, class FText* TimespanDHMSOut)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("BP_Functions_C", "FormatTimespanDHMS(ZeroClamped)");

	Params::BP_Functions_C_FormatTimespanDHMS_ZeroClamped_ Parms{};

	Parms.TimespanIn = std::move(TimespanIn);
	Parms.__WorldContext = __WorldContext;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	if (TimespanDHMSOut != nullptr)
		*TimespanDHMSOut = std::move(Parms.TimespanDHMSOut);
}


// Function BP_Functions.BP_Functions_C.Count (String)
// (Static, Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// TArray<class FString>                   Array                                                  (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
// class FString                           Item                                                   (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)
// class UObject*                          __WorldContext                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   Count                                                  (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_Functions_C::Count__String_(TArray<class FString>& Array, const class FString& Item, class UObject* __WorldContext, int32* Count)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("BP_Functions_C", "Count (String)");

	Params::BP_Functions_C_Count__String_ Parms{};

	Parms.Array = std::move(Array);
	Parms.Item = std::move(Item);
	Parms.__WorldContext = __WorldContext;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Array = std::move(Parms.Array);

	if (Count != nullptr)
		*Count = Parms.Count;
}


// Function BP_Functions.BP_Functions_C.ToString (CloudRequestResult)
// (Static, Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// struct FCloudRequestResult              Cloud_Request_Result                                   (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
// bool                                    Inline                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// class UObject*                          __WorldContext                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class FString                           String                                                 (Parm, OutParm, ZeroConstructor, HasGetValueTypeHash)

void UBP_Functions_C::ToString__CloudRequestResult_(const struct FCloudRequestResult& Cloud_Request_Result, bool Inline, class UObject* __WorldContext, class FString* String)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("BP_Functions_C", "ToString (CloudRequestResult)");

	Params::BP_Functions_C_ToString__CloudRequestResult_ Parms{};

	Parms.Cloud_Request_Result = std::move(Cloud_Request_Result);
	Parms.Inline = Inline;
	Parms.__WorldContext = __WorldContext;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	if (String != nullptr)
		*String = std::move(Parms.String);
}


// Function BP_Functions.BP_Functions_C.SkinSetDefaultMaterial
// (Static, Public, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// class AWeapon*                          Weapon                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class FName                             ExtraSlot                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class UObject*                          __WorldContext                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_Functions_C::SkinSetDefaultMaterial(class AWeapon* Weapon, class FName ExtraSlot, class UObject* __WorldContext)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("BP_Functions_C", "SkinSetDefaultMaterial");

	Params::BP_Functions_C_SkinSetDefaultMaterial Parms{};

	Parms.Weapon = Weapon;
	Parms.ExtraSlot = ExtraSlot;
	Parms.__WorldContext = __WorldContext;

	GetDefaultObj()->ProcessEvent(Func, &Parms);
}


// Function BP_Functions.BP_Functions_C.PlayerAcquiredCrowns
// (Static, Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// int32                                   Crown_Amount                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   Crown_Bonus_Amount                                     (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class UObject*                          __WorldContext                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_Functions_C::PlayerAcquiredCrowns(int32 Crown_Amount, int32 Crown_Bonus_Amount, class UObject* __WorldContext)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("BP_Functions_C", "PlayerAcquiredCrowns");

	Params::BP_Functions_C_PlayerAcquiredCrowns Parms{};

	Parms.Crown_Amount = Crown_Amount;
	Parms.Crown_Bonus_Amount = Crown_Bonus_Amount;
	Parms.__WorldContext = __WorldContext;

	GetDefaultObj()->ProcessEvent(Func, &Parms);
}


// Function BP_Functions.BP_Functions_C.ItemClassToTable
// (Static, Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// class UClass*                           ItemClass                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class UObject*                          __WorldContext                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class UDataTable*                       RelatedDataTable                                       (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_Functions_C::ItemClassToTable(class UClass* ItemClass, class UObject* __WorldContext, class UDataTable** RelatedDataTable)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("BP_Functions_C", "ItemClassToTable");

	Params::BP_Functions_C_ItemClassToTable Parms{};

	Parms.ItemClass = ItemClass;
	Parms.__WorldContext = __WorldContext;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	if (RelatedDataTable != nullptr)
		*RelatedDataTable = Parms.RelatedDataTable;
}


// Function BP_Functions.BP_Functions_C.HasOwnedLabelInShop
// (Static, Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// class UClass*                           StoreItemClass                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class AHumanPlayerController*           HumanPlayerController                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class UObject*                          __WorldContext                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    OwnedOut                                               (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void UBP_Functions_C::HasOwnedLabelInShop(class UClass* StoreItemClass, class AHumanPlayerController* HumanPlayerController, class UObject* __WorldContext, bool* OwnedOut)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("BP_Functions_C", "HasOwnedLabelInShop");

	Params::BP_Functions_C_HasOwnedLabelInShop Parms{};

	Parms.StoreItemClass = StoreItemClass;
	Parms.HumanPlayerController = HumanPlayerController;
	Parms.__WorldContext = __WorldContext;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	if (OwnedOut != nullptr)
		*OwnedOut = Parms.OwnedOut;
}


// Function BP_Functions.BP_Functions_C.GetExclusiveOffers
// (Static, Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// class UObject*                          __WorldContext                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// TArray<struct FGameStoreOfferInfo>      ExclusiveOffers                                        (Parm, OutParm)

void UBP_Functions_C::GetExclusiveOffers(class UObject* __WorldContext, TArray<struct FGameStoreOfferInfo>* ExclusiveOffers)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("BP_Functions_C", "GetExclusiveOffers");

	Params::BP_Functions_C_GetExclusiveOffers Parms{};

	Parms.__WorldContext = __WorldContext;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	if (ExclusiveOffers != nullptr)
		*ExclusiveOffers = std::move(Parms.ExclusiveOffers);
}


// Function BP_Functions.BP_Functions_C.Get Weapon Ammo and Magazine Size
// (Static, Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// class UClass*                           Weapon_Class                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class UObject*                          __WorldContext                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class UClass*                           Ammo_Item                                              (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   Magazine_Size                                          (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_Functions_C::Get_Weapon_Ammo_and_Magazine_Size(class UClass* Weapon_Class, class UObject* __WorldContext, class UClass** Ammo_Item, int32* Magazine_Size)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("BP_Functions_C", "Get Weapon Ammo and Magazine Size");

	Params::BP_Functions_C_Get_Weapon_Ammo_and_Magazine_Size Parms{};

	Parms.Weapon_Class = Weapon_Class;
	Parms.__WorldContext = __WorldContext;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	if (Ammo_Item != nullptr)
		*Ammo_Item = Parms.Ammo_Item;

	if (Magazine_Size != nullptr)
		*Magazine_Size = Parms.Magazine_Size;
}


// Function BP_Functions.BP_Functions_C.GetUserPawn
// (Static, Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// class UObject*                          __WorldContext                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class APawn*                            Pawn                                                   (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_Functions_C::GetUserPawn(class UObject* __WorldContext, class APawn** Pawn)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("BP_Functions_C", "GetUserPawn");

	Params::BP_Functions_C_GetUserPawn Parms{};

	Parms.__WorldContext = __WorldContext;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	if (Pawn != nullptr)
		*Pawn = Parms.Pawn;
}


// Function BP_Functions.BP_Functions_C.GetFlameController
// (Static, Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// class UObject*                          __WorldContext                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class AHumanPlayerController*           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

class AHumanPlayerController* UBP_Functions_C::GetFlameController(class UObject* __WorldContext)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("BP_Functions_C", "GetFlameController");

	Params::BP_Functions_C_GetFlameController Parms{};

	Parms.__WorldContext = __WorldContext;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function BP_Functions.BP_Functions_C.GetBitwiseMask
// (Static, Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// int32                                   Length                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class UObject*                          __WorldContext                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   Mask                                                   (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_Functions_C::GetBitwiseMask(int32 Length, class UObject* __WorldContext, int32* Mask)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("BP_Functions_C", "GetBitwiseMask");

	Params::BP_Functions_C_GetBitwiseMask Parms{};

	Parms.Length = Length;
	Parms.__WorldContext = __WorldContext;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	if (Mask != nullptr)
		*Mask = Parms.Mask;
}


// Function BP_Functions.BP_Functions_C.Pack Integers
// (Static, Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// TArray<int32>                           Ints                                                   (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
// TArray<int32>                           BitLengths                                             (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
// class UObject*                          __WorldContext                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   Int                                                    (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_Functions_C::Pack_Integers(TArray<int32>& Ints, TArray<int32>& BitLengths, class UObject* __WorldContext, int32* Int)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("BP_Functions_C", "Pack Integers");

	Params::BP_Functions_C_Pack_Integers Parms{};

	Parms.Ints = std::move(Ints);
	Parms.BitLengths = std::move(BitLengths);
	Parms.__WorldContext = __WorldContext;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Ints = std::move(Parms.Ints);
	BitLengths = std::move(Parms.BitLengths);

	if (Int != nullptr)
		*Int = Parms.Int;
}


// Function BP_Functions.BP_Functions_C.Unpack Integers
// (Static, Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// int32                                   Int                                                    (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// TArray<int32>                           BitLengths                                             (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
// class UObject*                          __WorldContext                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// TArray<int32>                           Ints                                                   (Parm, OutParm)

void UBP_Functions_C::Unpack_Integers(int32 Int, TArray<int32>& BitLengths, class UObject* __WorldContext, TArray<int32>* Ints)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("BP_Functions_C", "Unpack Integers");

	Params::BP_Functions_C_Unpack_Integers Parms{};

	Parms.Int = Int;
	Parms.BitLengths = std::move(BitLengths);
	Parms.__WorldContext = __WorldContext;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	BitLengths = std::move(Parms.BitLengths);

	if (Ints != nullptr)
		*Ints = std::move(Parms.Ints);
}


// Function BP_Functions.BP_Functions_C.Join Integer Array
// (Static, Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// TArray<int32>                           SourceArray                                            (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
// class FString                           Separator                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)
// class UObject*                          __WorldContext                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class FString                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash)

class FString UBP_Functions_C::Join_Integer_Array(const TArray<int32>& SourceArray, const class FString& Separator, class UObject* __WorldContext)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("BP_Functions_C", "Join Integer Array");

	Params::BP_Functions_C_Join_Integer_Array Parms{};

	Parms.SourceArray = std::move(SourceArray);
	Parms.Separator = std::move(Separator);
	Parms.__WorldContext = __WorldContext;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function BP_Functions.BP_Functions_C.GetAchievementProgress
// (Static, Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// class FName                             AchievementName                                        (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class UObject*                          __WorldContext                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    IsProgressValid                                        (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
// float                                   Progress                                               (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_Functions_C::GetAchievementProgress(class FName AchievementName, class UObject* __WorldContext, bool* IsProgressValid, float* Progress)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("BP_Functions_C", "GetAchievementProgress");

	Params::BP_Functions_C_GetAchievementProgress Parms{};

	Parms.AchievementName = AchievementName;
	Parms.__WorldContext = __WorldContext;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	if (IsProgressValid != nullptr)
		*IsProgressValid = Parms.IsProgressValid;

	if (Progress != nullptr)
		*Progress = Parms.Progress;
}


// Function BP_Functions.BP_Functions_C.ConvertTransformToPasteFriendlyFormat
// (Static, Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FTransform                       Transform                                              (BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor)
// class UObject*                          __WorldContext                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class FString                           PasteFriendlyString                                    (Parm, OutParm, ZeroConstructor, HasGetValueTypeHash)

void UBP_Functions_C::ConvertTransformToPasteFriendlyFormat(const struct FTransform& Transform, class UObject* __WorldContext, class FString* PasteFriendlyString)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("BP_Functions_C", "ConvertTransformToPasteFriendlyFormat");

	Params::BP_Functions_C_ConvertTransformToPasteFriendlyFormat Parms{};

	Parms.Transform = std::move(Transform);
	Parms.__WorldContext = __WorldContext;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	if (PasteFriendlyString != nullptr)
		*PasteFriendlyString = std::move(Parms.PasteFriendlyString);
}


// Function BP_Functions.BP_Functions_C.ConvertRotatorToPasteFriendlyFormat
// (Static, Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FRotator                         Rotator                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// class UObject*                          __WorldContext                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class FString                           PasteFriendlyString                                    (Parm, OutParm, ZeroConstructor, HasGetValueTypeHash)

void UBP_Functions_C::ConvertRotatorToPasteFriendlyFormat(const struct FRotator& Rotator, class UObject* __WorldContext, class FString* PasteFriendlyString)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("BP_Functions_C", "ConvertRotatorToPasteFriendlyFormat");

	Params::BP_Functions_C_ConvertRotatorToPasteFriendlyFormat Parms{};

	Parms.Rotator = std::move(Rotator);
	Parms.__WorldContext = __WorldContext;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	if (PasteFriendlyString != nullptr)
		*PasteFriendlyString = std::move(Parms.PasteFriendlyString);
}


// Function BP_Functions.BP_Functions_C.CopyToClipboardPlayerCustomizationContainer
// (Static, Public, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// class UObject*                          __WorldContext                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_Functions_C::CopyToClipboardPlayerCustomizationContainer(class UObject* __WorldContext)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("BP_Functions_C", "CopyToClipboardPlayerCustomizationContainer");

	Params::BP_Functions_C_CopyToClipboardPlayerCustomizationContainer Parms{};

	Parms.__WorldContext = __WorldContext;

	GetDefaultObj()->ProcessEvent(Func, &Parms);
}


// Function BP_Functions.BP_Functions_C.SetFadeInMaterialVisibility
// (Static, Public, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// class FName                             MeshActor_TAG                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    Visibility                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// class UObject*                          __WorldContext                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_Functions_C::SetFadeInMaterialVisibility(class FName MeshActor_TAG, bool Visibility, class UObject* __WorldContext)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("BP_Functions_C", "SetFadeInMaterialVisibility");

	Params::BP_Functions_C_SetFadeInMaterialVisibility Parms{};

	Parms.MeshActor_TAG = MeshActor_TAG;
	Parms.Visibility = Visibility;
	Parms.__WorldContext = __WorldContext;

	GetDefaultObj()->ProcessEvent(Func, &Parms);
}


// Function BP_Functions.BP_Functions_C.Set Material VisibilityActors with Tag
// (Static, Public, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    bNewVisibility                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// struct FS_ActorTagVisibilityMapWrap     Tag_to_count                                           (BlueprintVisible, BlueprintReadOnly, Parm, HasGetValueTypeHash)
// class UObject*                          __WorldContext                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_Functions_C::Set_Material_VisibilityActors_with_Tag(bool bNewVisibility, const struct FS_ActorTagVisibilityMapWrap& Tag_to_count, class UObject* __WorldContext)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("BP_Functions_C", "Set Material VisibilityActors with Tag");

	Params::BP_Functions_C_Set_Material_VisibilityActors_with_Tag Parms{};

	Parms.bNewVisibility = bNewVisibility;
	Parms.Tag_to_count = std::move(Tag_to_count);
	Parms.__WorldContext = __WorldContext;

	GetDefaultObj()->ProcessEvent(Func, &Parms);
}


// Function BP_Functions.BP_Functions_C.SetHiddenActorByTag
// (Static, Public, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// TMap<class FString, int32>              Tag_to_Max_Count                                       (BlueprintVisible, BlueprintReadOnly, Parm)
// class UObject*                          __WorldContext                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_Functions_C::SetHiddenActorByTag(const TMap<class FString, int32>& Tag_to_Max_Count, class UObject* __WorldContext)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("BP_Functions_C", "SetHiddenActorByTag");

	Params::BP_Functions_C_SetHiddenActorByTag Parms{};

	Parms.Tag_to_Max_Count = std::move(Tag_to_Max_Count);
	Parms.__WorldContext = __WorldContext;

	GetDefaultObj()->ProcessEvent(Func, &Parms);
}


// Function BP_Functions.BP_Functions_C.Get Booster Ticket State
// (Static, Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// TArray<struct FBoosterDetails>          BoosterDetails                                         (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
// class FString                           BoosterSKU                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)
// class UObject*                          __WorldContext                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    Found                                                  (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
// struct FBoosterDetails                  BoosterDetail                                          (Parm, OutParm)

void UBP_Functions_C::Get_Booster_Ticket_State(const TArray<struct FBoosterDetails>& BoosterDetails, const class FString& BoosterSKU, class UObject* __WorldContext, bool* Found, struct FBoosterDetails* BoosterDetail)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("BP_Functions_C", "Get Booster Ticket State");

	Params::BP_Functions_C_Get_Booster_Ticket_State Parms{};

	Parms.BoosterDetails = std::move(BoosterDetails);
	Parms.BoosterSKU = std::move(BoosterSKU);
	Parms.__WorldContext = __WorldContext;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	if (Found != nullptr)
		*Found = Parms.Found;

	if (BoosterDetail != nullptr)
		*BoosterDetail = std::move(Parms.BoosterDetail);
}


// Function BP_Functions.BP_Functions_C.Get Booster Sku Class Info
// (Static, Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// class UObject*                          __WorldContext                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// TMap<class FString, class UClass*>      SKU_To_Currency                                        (Parm, OutParm)
// TMap<class UClass*, class FString>      Currency_To_SKU                                        (Parm, OutParm)
// TMap<class UClass*, class FString>      Currency_To_Gamemode                                   (Parm, OutParm)

void UBP_Functions_C::Get_Booster_Sku_Class_Info(class UObject* __WorldContext, TMap<class FString, class UClass*>* SKU_To_Currency, TMap<class UClass*, class FString>* Currency_To_SKU, TMap<class UClass*, class FString>* Currency_To_Gamemode)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("BP_Functions_C", "Get Booster Sku Class Info");

	Params::BP_Functions_C_Get_Booster_Sku_Class_Info Parms{};

	Parms.__WorldContext = __WorldContext;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	if (SKU_To_Currency != nullptr)
		*SKU_To_Currency = std::move(Parms.SKU_To_Currency);

	if (Currency_To_SKU != nullptr)
		*Currency_To_SKU = std::move(Parms.Currency_To_SKU);

	if (Currency_To_Gamemode != nullptr)
		*Currency_To_Gamemode = std::move(Parms.Currency_To_Gamemode);
}


// Function BP_Functions.BP_Functions_C.GetBoosterSkuFromEnum
// (Static, Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// EBooster                                Booster                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    ChopTeamScoreSku                                       (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// class UObject*                          __WorldContext                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class FString                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash)

class FString UBP_Functions_C::GetBoosterSkuFromEnum(EBooster Booster, bool ChopTeamScoreSku, class UObject* __WorldContext)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("BP_Functions_C", "GetBoosterSkuFromEnum");

	Params::BP_Functions_C_GetBoosterSkuFromEnum Parms{};

	Parms.Booster = Booster;
	Parms.ChopTeamScoreSku = ChopTeamScoreSku;
	Parms.__WorldContext = __WorldContext;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function BP_Functions.BP_Functions_C.Get Booster Enum From Sku
// (Static, Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// class FString                           BoosterSKU                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)
// class UObject*                          __WorldContext                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    Found                                                  (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
// EBooster                                ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

EBooster UBP_Functions_C::Get_Booster_Enum_From_Sku(const class FString& BoosterSKU, class UObject* __WorldContext, bool* Found)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("BP_Functions_C", "Get Booster Enum From Sku");

	Params::BP_Functions_C_Get_Booster_Enum_From_Sku Parms{};

	Parms.BoosterSKU = std::move(BoosterSKU);
	Parms.__WorldContext = __WorldContext;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	if (Found != nullptr)
		*Found = Parms.Found;

	return Parms.ReturnValue;
}


// Function BP_Functions.BP_Functions_C.Decimal to Short Format
// (Static, Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// float                                   Value                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    DisplayAsInteger                                       (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// class UObject*                          __WorldContext                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class FText                             FormattedValue                                         (Parm, OutParm)

void UBP_Functions_C::Decimal_to_Short_Format(float Value, bool DisplayAsInteger, class UObject* __WorldContext, class FText* FormattedValue)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("BP_Functions_C", "Decimal to Short Format");

	Params::BP_Functions_C_Decimal_to_Short_Format Parms{};

	Parms.Value = Value;
	Parms.DisplayAsInteger = DisplayAsInteger;
	Parms.__WorldContext = __WorldContext;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	if (FormattedValue != nullptr)
		*FormattedValue = std::move(Parms.FormattedValue);
}


// Function BP_Functions.BP_Functions_C.CheckForNoWeapon
// (Static, Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// class APawn*                            Owning_Player_Pawn                                     (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// EOnlineGameMode                         Online_Game_Mode                                       (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class UObject*                          __WorldContext                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// E_WeaponCheckResult                     Check_result                                           (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_Functions_C::CheckForNoWeapon(class APawn*& Owning_Player_Pawn, EOnlineGameMode Online_Game_Mode, class UObject* __WorldContext, E_WeaponCheckResult* Check_result)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("BP_Functions_C", "CheckForNoWeapon");

	Params::BP_Functions_C_CheckForNoWeapon Parms{};

	Parms.Owning_Player_Pawn = Owning_Player_Pawn;
	Parms.Online_Game_Mode = Online_Game_Mode;
	Parms.__WorldContext = __WorldContext;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Owning_Player_Pawn = Parms.Owning_Player_Pawn;

	if (Check_result != nullptr)
		*Check_result = Parms.Check_result;
}


// Function BP_Functions.BP_Functions_C.HasEachWeaponAmmo
// (Static, Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// class UInventoryComponent*              Inventory                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class UObject*                          __WorldContext                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    AllWeaponsWithoutAmmo                                  (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
// int32                                   NumberOfWeaponsWithoutAmmo                             (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_Functions_C::HasEachWeaponAmmo(class UInventoryComponent* Inventory, class UObject* __WorldContext, bool* AllWeaponsWithoutAmmo, int32* NumberOfWeaponsWithoutAmmo)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("BP_Functions_C", "HasEachWeaponAmmo");

	Params::BP_Functions_C_HasEachWeaponAmmo Parms{};

	Parms.Inventory = Inventory;
	Parms.__WorldContext = __WorldContext;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	if (AllWeaponsWithoutAmmo != nullptr)
		*AllWeaponsWithoutAmmo = Parms.AllWeaponsWithoutAmmo;

	if (NumberOfWeaponsWithoutAmmo != nullptr)
		*NumberOfWeaponsWithoutAmmo = Parms.NumberOfWeaponsWithoutAmmo;
}


// Function BP_Functions.BP_Functions_C.ShowNoWeaponMsgBox
// (Static, Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// E_WeaponCheckResult                     Weapon_check_result                                    (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class APlayerController*                Owning_Player                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class UUI_ShelterMap_C*                 UIShelterMap__Optional_                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class UObject*                          __WorldContext                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_Functions_C::ShowNoWeaponMsgBox(E_WeaponCheckResult& Weapon_check_result, class APlayerController* Owning_Player, class UUI_ShelterMap_C* UIShelterMap__Optional_, class UObject* __WorldContext)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("BP_Functions_C", "ShowNoWeaponMsgBox");

	Params::BP_Functions_C_ShowNoWeaponMsgBox Parms{};

	Parms.Weapon_check_result = Weapon_check_result;
	Parms.Owning_Player = Owning_Player;
	Parms.UIShelterMap__Optional_ = UIShelterMap__Optional_;
	Parms.__WorldContext = __WorldContext;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Weapon_check_result = Parms.Weapon_check_result;
}


// Function BP_Functions.BP_Functions_C.JoinMPSession
// (Static, Public, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// class APlayerController*                Owning_Player                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class FString                           LevelName                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)
// class FString                           GamemodeAlias                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)
// int32                                   Matchmaking_Slot                                       (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    Quick_Play                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// class UObject*                          __WorldContext                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_Functions_C::JoinMPSession(class APlayerController* Owning_Player, const class FString& LevelName, const class FString& GamemodeAlias, int32 Matchmaking_Slot, bool Quick_Play, class UObject* __WorldContext)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("BP_Functions_C", "JoinMPSession");

	Params::BP_Functions_C_JoinMPSession Parms{};

	Parms.Owning_Player = Owning_Player;
	Parms.LevelName = std::move(LevelName);
	Parms.GamemodeAlias = std::move(GamemodeAlias);
	Parms.Matchmaking_Slot = Matchmaking_Slot;
	Parms.Quick_Play = Quick_Play;
	Parms.__WorldContext = __WorldContext;

	GetDefaultObj()->ProcessEvent(Func, &Parms);
}


// Function BP_Functions.BP_Functions_C.GetInputIcons
// (Static, Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// TArray<EInputIcon>                      InputIcons                                             (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
// class UObject*                          __WorldContext                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// TArray<EInputIcon>                      Icons                                                  (Parm, OutParm)

void UBP_Functions_C::GetInputIcons(TArray<EInputIcon>& InputIcons, class UObject* __WorldContext, TArray<EInputIcon>* Icons)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("BP_Functions_C", "GetInputIcons");

	Params::BP_Functions_C_GetInputIcons Parms{};

	Parms.InputIcons = std::move(InputIcons);
	Parms.__WorldContext = __WorldContext;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	InputIcons = std::move(Parms.InputIcons);

	if (Icons != nullptr)
		*Icons = std::move(Parms.Icons);
}


// Function BP_Functions.BP_Functions_C.GetInputIcon
// (Static, Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// EInputIcon                              InputIconConsole                                       (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// EInputIcon                              InputIconPCWithGamepad                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class FName                             InputIconPC                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class UObject*                          __WorldContext                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// EInputIcon                              InputIcon                                              (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_Functions_C::GetInputIcon(EInputIcon InputIconConsole, EInputIcon InputIconPCWithGamepad, class FName InputIconPC, class UObject* __WorldContext, EInputIcon* InputIcon)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("BP_Functions_C", "GetInputIcon");

	Params::BP_Functions_C_GetInputIcon Parms{};

	Parms.InputIconConsole = InputIconConsole;
	Parms.InputIconPCWithGamepad = InputIconPCWithGamepad;
	Parms.InputIconPC = InputIconPC;
	Parms.__WorldContext = __WorldContext;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	if (InputIcon != nullptr)
		*InputIcon = Parms.InputIcon;
}


// Function BP_Functions.BP_Functions_C.GetInputIconText
// (Static, Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// EInputIcon                              InputIconConsole                                       (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class FName                             InputIconPC                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class UObject*                          __WorldContext                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class FString                           InputIconString                                        (Parm, OutParm, ZeroConstructor, HasGetValueTypeHash)

void UBP_Functions_C::GetInputIconText(EInputIcon InputIconConsole, class FName InputIconPC, class UObject* __WorldContext, class FString* InputIconString)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("BP_Functions_C", "GetInputIconText");

	Params::BP_Functions_C_GetInputIconText Parms{};

	Parms.InputIconConsole = InputIconConsole;
	Parms.InputIconPC = InputIconPC;
	Parms.__WorldContext = __WorldContext;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	if (InputIconString != nullptr)
		*InputIconString = std::move(Parms.InputIconString);
}


// Function BP_Functions.BP_Functions_C.SoundClassToString
// (Static, Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// class USoundClass*                      SoundClass                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class UObject*                          __WorldContext                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class FString                           SoundClassString                                       (Parm, OutParm, ZeroConstructor, HasGetValueTypeHash)

void UBP_Functions_C::SoundClassToString(class USoundClass* SoundClass, class UObject* __WorldContext, class FString* SoundClassString)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("BP_Functions_C", "SoundClassToString");

	Params::BP_Functions_C_SoundClassToString Parms{};

	Parms.SoundClass = SoundClass;
	Parms.__WorldContext = __WorldContext;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	if (SoundClassString != nullptr)
		*SoundClassString = std::move(Parms.SoundClassString);
}


// Function BP_Functions.BP_Functions_C.GetWindowsInputIcon
// (Static, Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// EInputIcon                              InputIcon                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class UObject*                          __WorldContext                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// EInputIcon                              Icon                                                   (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    IsWide                                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void UBP_Functions_C::GetWindowsInputIcon(EInputIcon InputIcon, class UObject* __WorldContext, EInputIcon* Icon, bool* IsWide)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("BP_Functions_C", "GetWindowsInputIcon");

	Params::BP_Functions_C_GetWindowsInputIcon Parms{};

	Parms.InputIcon = InputIcon;
	Parms.__WorldContext = __WorldContext;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	if (Icon != nullptr)
		*Icon = Parms.Icon;

	if (IsWide != nullptr)
		*IsWide = Parms.IsWide;
}


// Function BP_Functions.BP_Functions_C.ShouldOverrideActionName
// (Static, Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// EInputIcon                              InputIcon                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class UObject*                          __WorldContext                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    ShouldOverride                                         (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
// class FName                             New_Action_Name                                        (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_Functions_C::ShouldOverrideActionName(EInputIcon InputIcon, class UObject* __WorldContext, bool* ShouldOverride, class FName* New_Action_Name)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("BP_Functions_C", "ShouldOverrideActionName");

	Params::BP_Functions_C_ShouldOverrideActionName Parms{};

	Parms.InputIcon = InputIcon;
	Parms.__WorldContext = __WorldContext;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	if (ShouldOverride != nullptr)
		*ShouldOverride = Parms.ShouldOverride;

	if (New_Action_Name != nullptr)
		*New_Action_Name = Parms.New_Action_Name;
}


// Function BP_Functions.BP_Functions_C.ShouldOverrideActionNameString
// (Static, Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// class FText                             InputIcon                                              (BlueprintVisible, BlueprintReadOnly, Parm)
// class UObject*                          __WorldContext                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    ShouldOverride                                         (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
// class FName                             NewName                                                (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_Functions_C::ShouldOverrideActionNameString(const class FText& InputIcon, class UObject* __WorldContext, bool* ShouldOverride, class FName* NewName)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("BP_Functions_C", "ShouldOverrideActionNameString");

	Params::BP_Functions_C_ShouldOverrideActionNameString Parms{};

	Parms.InputIcon = std::move(InputIcon);
	Parms.__WorldContext = __WorldContext;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	if (ShouldOverride != nullptr)
		*ShouldOverride = Parms.ShouldOverride;

	if (NewName != nullptr)
		*NewName = Parms.NewName;
}


// Function BP_Functions.BP_Functions_C.GetInputIconsText
// (Static, Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// TArray<class FText>                     InInputIconsText                                       (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
// class UObject*                          __WorldContext                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// TArray<class FText>                     InputIconsText                                         (Parm, OutParm)

void UBP_Functions_C::GetInputIconsText(TArray<class FText>& InInputIconsText, class UObject* __WorldContext, TArray<class FText>* InputIconsText)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("BP_Functions_C", "GetInputIconsText");

	Params::BP_Functions_C_GetInputIconsText Parms{};

	Parms.InInputIconsText = std::move(InInputIconsText);
	Parms.__WorldContext = __WorldContext;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	InInputIconsText = std::move(Parms.InInputIconsText);

	if (InputIconsText != nullptr)
		*InputIconsText = std::move(Parms.InputIconsText);
}


// Function BP_Functions.BP_Functions_C.SetAllNicknameStylesInRichText
// (Static, Public, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// class URichTextBlock*                   In_Rich_Text_Block                                     (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FTextBlockStyle                  Nickname_Style                                         (BlueprintVisible, BlueprintReadOnly, Parm)
// class UObject*                          __WorldContext                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_Functions_C::SetAllNicknameStylesInRichText(class URichTextBlock* In_Rich_Text_Block, const struct FTextBlockStyle& Nickname_Style, class UObject* __WorldContext)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("BP_Functions_C", "SetAllNicknameStylesInRichText");

	Params::BP_Functions_C_SetAllNicknameStylesInRichText Parms{};

	Parms.In_Rich_Text_Block = In_Rich_Text_Block;
	Parms.Nickname_Style = std::move(Nickname_Style);
	Parms.__WorldContext = __WorldContext;

	GetDefaultObj()->ProcessEvent(Func, &Parms);
}


// Function BP_Functions.BP_Functions_C.SetAllNicknameWidgetsInRichText
// (Static, Public, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// class URichTextBlock*                   In_Rich_Text_Block                                     (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class AHumanPlayerState*                Player_State                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class UObject*                          __WorldContext                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_Functions_C::SetAllNicknameWidgetsInRichText(class URichTextBlock* In_Rich_Text_Block, class AHumanPlayerState* Player_State, class UObject* __WorldContext)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("BP_Functions_C", "SetAllNicknameWidgetsInRichText");

	Params::BP_Functions_C_SetAllNicknameWidgetsInRichText Parms{};

	Parms.In_Rich_Text_Block = In_Rich_Text_Block;
	Parms.Player_State = Player_State;
	Parms.__WorldContext = __WorldContext;

	GetDefaultObj()->ProcessEvent(Func, &Parms);
}


// Function BP_Functions.BP_Functions_C.SetAllNicknameBottomPaddingInRichText
// (Static, Public, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// class URichTextBlock*                   In_Rich_Text_Block                                     (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   Bottom_padding                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class UObject*                          __WorldContext                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_Functions_C::SetAllNicknameBottomPaddingInRichText(class URichTextBlock* In_Rich_Text_Block, float Bottom_padding, class UObject* __WorldContext)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("BP_Functions_C", "SetAllNicknameBottomPaddingInRichText");

	Params::BP_Functions_C_SetAllNicknameBottomPaddingInRichText Parms{};

	Parms.In_Rich_Text_Block = In_Rich_Text_Block;
	Parms.Bottom_padding = Bottom_padding;
	Parms.__WorldContext = __WorldContext;

	GetDefaultObj()->ProcessEvent(Func, &Parms);
}


// Function BP_Functions.BP_Functions_C.Increase Achievement Progress by Value
// (Static, Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class FName                             Achievement_Name                                       (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   Value                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   Target_Value                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class UObject*                          __WorldContext                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_Functions_C::Increase_Achievement_Progress_by_Value(class FName Achievement_Name, int32 Value, int32 Target_Value, class UObject* __WorldContext)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("BP_Functions_C", "Increase Achievement Progress by Value");

	Params::BP_Functions_C_Increase_Achievement_Progress_by_Value Parms{};

	Parms.Achievement_Name = Achievement_Name;
	Parms.Value = Value;
	Parms.Target_Value = Target_Value;
	Parms.__WorldContext = __WorldContext;

	GetDefaultObj()->ProcessEvent(Func, &Parms);
}


// Function BP_Functions.BP_Functions_C.SetAllNicknameMaxCharactersInRichText
// (Static, Public, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// class URichTextBlock*                   In_Rich_Text_Block                                     (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   Max_Characters                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class UObject*                          __WorldContext                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_Functions_C::SetAllNicknameMaxCharactersInRichText(class URichTextBlock* In_Rich_Text_Block, int32 Max_Characters, class UObject* __WorldContext)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("BP_Functions_C", "SetAllNicknameMaxCharactersInRichText");

	Params::BP_Functions_C_SetAllNicknameMaxCharactersInRichText Parms{};

	Parms.In_Rich_Text_Block = In_Rich_Text_Block;
	Parms.Max_Characters = Max_Characters;
	Parms.__WorldContext = __WorldContext;

	GetDefaultObj()->ProcessEvent(Func, &Parms);
}


// Function BP_Functions.BP_Functions_C.ShowProfile
// (Static, Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FUniqueNetIdRepl                 ProfileToShowId                                        (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm, HasGetValueTypeHash)
// class UObject*                          __WorldContext                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_Functions_C::ShowProfile(const struct FUniqueNetIdRepl& ProfileToShowId, class UObject* __WorldContext)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("BP_Functions_C", "ShowProfile");

	Params::BP_Functions_C_ShowProfile Parms{};

	Parms.ProfileToShowId = std::move(ProfileToShowId);
	Parms.__WorldContext = __WorldContext;

	GetDefaultObj()->ProcessEvent(Func, &Parms);
}


// Function BP_Functions.BP_Functions_C.GetBlockedPlayersText
// (Static, Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// bool                                    UseParentheses                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// class ABP_PlayerController_Script_C*    BP_Player_Controlle_Script                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class UObject*                          __WorldContext                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class FText                             PlayersBlocked                                         (Parm, OutParm)

void UBP_Functions_C::GetBlockedPlayersText(bool UseParentheses, class ABP_PlayerController_Script_C* BP_Player_Controlle_Script, class UObject* __WorldContext, class FText* PlayersBlocked)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("BP_Functions_C", "GetBlockedPlayersText");

	Params::BP_Functions_C_GetBlockedPlayersText Parms{};

	Parms.UseParentheses = UseParentheses;
	Parms.BP_Player_Controlle_Script = BP_Player_Controlle_Script;
	Parms.__WorldContext = __WorldContext;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	if (PlayersBlocked != nullptr)
		*PlayersBlocked = std::move(Parms.PlayersBlocked);
}


// Function BP_Functions.BP_Functions_C.StringToEFlamePlatform
// (Static, Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// class FString                           PlatformString                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)
// class UObject*                          __WorldContext                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// EFlamePlatform                          NewParam                                               (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_Functions_C::StringToEFlamePlatform(const class FString& PlatformString, class UObject* __WorldContext, EFlamePlatform* NewParam)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("BP_Functions_C", "StringToEFlamePlatform");

	Params::BP_Functions_C_StringToEFlamePlatform Parms{};

	Parms.PlatformString = std::move(PlatformString);
	Parms.__WorldContext = __WorldContext;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	if (NewParam != nullptr)
		*NewParam = Parms.NewParam;
}


// Function BP_Functions.BP_Functions_C.SetFrameRate
// (Static, Public, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FVideoSaveSettings               VideoSettings                                          (BlueprintVisible, BlueprintReadOnly, Parm)
// float                                   OverrideFrameRate                                      (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    ShouldApply_                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// class UObject*                          __WorldContext                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_Functions_C::SetFrameRate(const struct FVideoSaveSettings& VideoSettings, float OverrideFrameRate, bool ShouldApply_, class UObject* __WorldContext)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("BP_Functions_C", "SetFrameRate");

	Params::BP_Functions_C_SetFrameRate Parms{};

	Parms.VideoSettings = std::move(VideoSettings);
	Parms.OverrideFrameRate = OverrideFrameRate;
	Parms.ShouldApply_ = ShouldApply_;
	Parms.__WorldContext = __WorldContext;

	GetDefaultObj()->ProcessEvent(Func, &Parms);
}


// Function BP_Functions.BP_Functions_C.Is Input Action Gamepad
// (Static, Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// class FString                           Input                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)
// class UObject*                          __WorldContext                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    IsGamepad                                              (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void UBP_Functions_C::Is_Input_Action_Gamepad(const class FString& Input, class UObject* __WorldContext, bool* IsGamepad)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("BP_Functions_C", "Is Input Action Gamepad");

	Params::BP_Functions_C_Is_Input_Action_Gamepad Parms{};

	Parms.Input = std::move(Input);
	Parms.__WorldContext = __WorldContext;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	if (IsGamepad != nullptr)
		*IsGamepad = Parms.IsGamepad;
}


// Function BP_Functions.BP_Functions_C.IsMatchmakingAllowedForGameMode
// (Static, Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// EOnlineGameMode                         GameMode                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class UObject*                          __WorldContext                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)

bool UBP_Functions_C::IsMatchmakingAllowedForGameMode(EOnlineGameMode GameMode, class UObject* __WorldContext)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("BP_Functions_C", "IsMatchmakingAllowedForGameMode");

	Params::BP_Functions_C_IsMatchmakingAllowedForGameMode Parms{};

	Parms.GameMode = GameMode;
	Parms.__WorldContext = __WorldContext;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function BP_Functions.BP_Functions_C.UnwindDegrees
// (Static, Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure, Const)
// Parameters:
// float                                   Input                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class UObject*                          __WorldContext                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   Return                                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_Functions_C::UnwindDegrees(float Input, class UObject* __WorldContext, float* Return)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("BP_Functions_C", "UnwindDegrees");

	Params::BP_Functions_C_UnwindDegrees Parms{};

	Parms.Input = Input;
	Parms.__WorldContext = __WorldContext;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	if (Return != nullptr)
		*Return = Parms.Return;
}


// Function BP_Functions.BP_Functions_C.PlayersUserMessage
// (Static, Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent, Const)
// Parameters:
// class FText                             Message                                                (BlueprintVisible, BlueprintReadOnly, Parm)
// TArray<class APlayerController*>        Players                                                (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
// bool                                    DisplayToAll                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// TSoftObjectPtr<class USoundBase>        Optional2D_Sound                                       (BlueprintVisible, BlueprintReadOnly, Parm, HasGetValueTypeHash)
// class UObject*                          __WorldContext                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_Functions_C::PlayersUserMessage(const class FText& Message, TArray<class APlayerController*>& Players, bool DisplayToAll, TSoftObjectPtr<class USoundBase> Optional2D_Sound, class UObject* __WorldContext)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("BP_Functions_C", "PlayersUserMessage");

	Params::BP_Functions_C_PlayersUserMessage Parms{};

	Parms.Message = std::move(Message);
	Parms.Players = std::move(Players);
	Parms.DisplayToAll = DisplayToAll;
	Parms.Optional2D_Sound = Optional2D_Sound;
	Parms.__WorldContext = __WorldContext;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Players = std::move(Parms.Players);
}


// Function BP_Functions.BP_Functions_C.Is Equipment Storage Empty
// (Static, Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure, Const)
// Parameters:
// class UEquipmentStorageComponent*       Equipment_Storage                                      (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class UObject*                          __WorldContext                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    Is_Empty                                               (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void UBP_Functions_C::Is_Equipment_Storage_Empty(class UEquipmentStorageComponent* Equipment_Storage, class UObject* __WorldContext, bool* Is_Empty)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("BP_Functions_C", "Is Equipment Storage Empty");

	Params::BP_Functions_C_Is_Equipment_Storage_Empty Parms{};

	Parms.Equipment_Storage = Equipment_Storage;
	Parms.__WorldContext = __WorldContext;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	if (Is_Empty != nullptr)
		*Is_Empty = Parms.Is_Empty;
}


// Function BP_Functions.BP_Functions_C.Get One Frame Skip Time
// (Static, Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure, Const)
// Parameters:
// class UObject*                          __WorldContext                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   SkipTime                                               (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_Functions_C::Get_One_Frame_Skip_Time(class UObject* __WorldContext, float* SkipTime)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("BP_Functions_C", "Get One Frame Skip Time");

	Params::BP_Functions_C_Get_One_Frame_Skip_Time Parms{};

	Parms.__WorldContext = __WorldContext;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	if (SkipTime != nullptr)
		*SkipTime = Parms.SkipTime;
}


// Function BP_Functions.BP_Functions_C.FindValidOffer
// (Static, Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent, Const)
// Parameters:
// struct FDateTime                        ShopOriginTime                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// struct FGameStoreSlotInfo               GameStoreSlotInfo                                      (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
// struct FDateTime                        Now                                                    (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// class UObject*                          __WorldContext                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    ValidOfferFound                                        (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
// struct FGameStoreOfferInfo              ValidOffer                                             (Parm, OutParm)
// struct FDateTime                        ValidUntil                                             (Parm, OutParm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// int32                                   RemainingSeconds                                       (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   OfferIndex                                             (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_Functions_C::FindValidOffer(const struct FDateTime& ShopOriginTime, const struct FGameStoreSlotInfo& GameStoreSlotInfo, const struct FDateTime& Now, class UObject* __WorldContext, bool* ValidOfferFound, struct FGameStoreOfferInfo* ValidOffer, struct FDateTime* ValidUntil, int32* RemainingSeconds, int32* OfferIndex)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("BP_Functions_C", "FindValidOffer");

	Params::BP_Functions_C_FindValidOffer Parms{};

	Parms.ShopOriginTime = std::move(ShopOriginTime);
	Parms.GameStoreSlotInfo = std::move(GameStoreSlotInfo);
	Parms.Now = std::move(Now);
	Parms.__WorldContext = __WorldContext;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	if (ValidOfferFound != nullptr)
		*ValidOfferFound = Parms.ValidOfferFound;

	if (ValidOffer != nullptr)
		*ValidOffer = std::move(Parms.ValidOffer);

	if (ValidUntil != nullptr)
		*ValidUntil = std::move(Parms.ValidUntil);

	if (RemainingSeconds != nullptr)
		*RemainingSeconds = Parms.RemainingSeconds;

	if (OfferIndex != nullptr)
		*OfferIndex = Parms.OfferIndex;
}


// Function BP_Functions.BP_Functions_C.Nearly Equal (Vector Element-wise)
// (Static, Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure, Const)
// Parameters:
// struct FVector                          A                                                      (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FVector                          B                                                      (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   ErrorTolerance                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class UObject*                          __WorldContext                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    EqualX                                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
// bool                                    EqualY                                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
// bool                                    EqualZ                                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void UBP_Functions_C::Nearly_Equal__Vector_ElementMinuswise_(const struct FVector& A, const struct FVector& B, float ErrorTolerance, class UObject* __WorldContext, bool* EqualX, bool* EqualY, bool* EqualZ)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("BP_Functions_C", "Nearly Equal (Vector Element-wise)");

	Params::BP_Functions_C_Nearly_Equal__Vector_ElementMinuswise_ Parms{};

	Parms.A = std::move(A);
	Parms.B = std::move(B);
	Parms.ErrorTolerance = ErrorTolerance;
	Parms.__WorldContext = __WorldContext;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	if (EqualX != nullptr)
		*EqualX = Parms.EqualX;

	if (EqualY != nullptr)
		*EqualY = Parms.EqualY;

	if (EqualZ != nullptr)
		*EqualZ = Parms.EqualZ;
}


// Function BP_Functions.BP_Functions_C.IsTemporarySellingPointActive
// (Static, Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent, BlueprintPure, Const)
// Parameters:
// struct FDateTime                        CurrentTime                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// struct FS_TemporarySellingPointTimeInfo ValidTimes                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// class UObject*                          __WorldContext                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    bIsActive                                              (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
// bool                                    bIsTemporary                                           (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void UBP_Functions_C::IsTemporarySellingPointActive(const struct FDateTime& CurrentTime, const struct FS_TemporarySellingPointTimeInfo& ValidTimes, class UObject* __WorldContext, bool* bIsActive, bool* bIsTemporary)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("BP_Functions_C", "IsTemporarySellingPointActive");

	Params::BP_Functions_C_IsTemporarySellingPointActive Parms{};

	Parms.CurrentTime = std::move(CurrentTime);
	Parms.ValidTimes = std::move(ValidTimes);
	Parms.__WorldContext = __WorldContext;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	if (bIsActive != nullptr)
		*bIsActive = Parms.bIsActive;

	if (bIsTemporary != nullptr)
		*bIsTemporary = Parms.bIsTemporary;
}


// Function BP_Functions.BP_Functions_C.Is on A Console
// (Static, Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure, Const)
// Parameters:
// class UObject*                          __WorldContext                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)

bool UBP_Functions_C::Is_on_A_Console(class UObject* __WorldContext)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("BP_Functions_C", "Is on A Console");

	Params::BP_Functions_C_Is_on_A_Console Parms{};

	Parms.__WorldContext = __WorldContext;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function BP_Functions.BP_Functions_C.Find Ancestor Of User Widget Class
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// TSoftObjectPtr<class UUserWidget>       ChildWidget                                            (BlueprintVisible, BlueprintReadOnly, Parm, InstancedReference, HasGetValueTypeHash)
// TSoftClassPtr<class UClass>             Desired_Ancestor_Class                                 (BlueprintVisible, BlueprintReadOnly, Parm, HasGetValueTypeHash)
// class UObject*                          __WorldContext                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    Success_                                               (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
// class UWidget*                          Ancestor_Widget                                        (Parm, OutParm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_Functions_C::Find_Ancestor_Of_User_Widget_Class(TSoftObjectPtr<class UUserWidget> ChildWidget, TSoftClassPtr<class UClass> Desired_Ancestor_Class, class UObject* __WorldContext, bool* Success_, class UWidget** Ancestor_Widget)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_Functions_C", "Find Ancestor Of User Widget Class");

	Params::BP_Functions_C_Find_Ancestor_Of_User_Widget_Class Parms{};

	Parms.ChildWidget = ChildWidget;
	Parms.Desired_Ancestor_Class = Desired_Ancestor_Class;
	Parms.__WorldContext = __WorldContext;

	UObject::ProcessEvent(Func, &Parms);

	if (Success_ != nullptr)
		*Success_ = Parms.Success_;

	if (Ancestor_Widget != nullptr)
		*Ancestor_Widget = Parms.Ancestor_Widget;
}

}

