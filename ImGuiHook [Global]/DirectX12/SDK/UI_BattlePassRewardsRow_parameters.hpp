#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: UI_BattlePassRewardsRow

#include "Basic.hpp"

#include "S_BattlePassLevelRewardFull_structs.hpp"
#include "UMG_structs.hpp"


namespace SDK::Params
{

// Function UI_BattlePassRewardsRow.UI_BattlePassRewardsRow_C.ExecuteUbergraph_UI_BattlePassRewardsRow
// 0x0010 (0x0010 - 0x0000)
struct UI_BattlePassRewardsRow_C_ExecuteUbergraph_UI_BattlePassRewardsRow final
{
public:
	int32                                         EntryPoint;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_Event_IsDesignTime;                         // 0x0004(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UButton*                                K2Node_CustomEvent_Button;                         // 0x0008(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(UI_BattlePassRewardsRow_C_ExecuteUbergraph_UI_BattlePassRewardsRow) == 0x000008, "Wrong alignment on UI_BattlePassRewardsRow_C_ExecuteUbergraph_UI_BattlePassRewardsRow");
static_assert(sizeof(UI_BattlePassRewardsRow_C_ExecuteUbergraph_UI_BattlePassRewardsRow) == 0x000010, "Wrong size on UI_BattlePassRewardsRow_C_ExecuteUbergraph_UI_BattlePassRewardsRow");
static_assert(offsetof(UI_BattlePassRewardsRow_C_ExecuteUbergraph_UI_BattlePassRewardsRow, EntryPoint) == 0x000000, "Member 'UI_BattlePassRewardsRow_C_ExecuteUbergraph_UI_BattlePassRewardsRow::EntryPoint' has a wrong offset!");
static_assert(offsetof(UI_BattlePassRewardsRow_C_ExecuteUbergraph_UI_BattlePassRewardsRow, K2Node_Event_IsDesignTime) == 0x000004, "Member 'UI_BattlePassRewardsRow_C_ExecuteUbergraph_UI_BattlePassRewardsRow::K2Node_Event_IsDesignTime' has a wrong offset!");
static_assert(offsetof(UI_BattlePassRewardsRow_C_ExecuteUbergraph_UI_BattlePassRewardsRow, K2Node_CustomEvent_Button) == 0x000008, "Member 'UI_BattlePassRewardsRow_C_ExecuteUbergraph_UI_BattlePassRewardsRow::K2Node_CustomEvent_Button' has a wrong offset!");

// Function UI_BattlePassRewardsRow.UI_BattlePassRewardsRow_C.EventSlotClicked
// 0x0008 (0x0008 - 0x0000)
struct UI_BattlePassRewardsRow_C_EventSlotClicked final
{
public:
	class UButton*                                Button;                                            // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(UI_BattlePassRewardsRow_C_EventSlotClicked) == 0x000008, "Wrong alignment on UI_BattlePassRewardsRow_C_EventSlotClicked");
static_assert(sizeof(UI_BattlePassRewardsRow_C_EventSlotClicked) == 0x000008, "Wrong size on UI_BattlePassRewardsRow_C_EventSlotClicked");
static_assert(offsetof(UI_BattlePassRewardsRow_C_EventSlotClicked, Button) == 0x000000, "Member 'UI_BattlePassRewardsRow_C_EventSlotClicked::Button' has a wrong offset!");

// Function UI_BattlePassRewardsRow.UI_BattlePassRewardsRow_C.PreConstruct
// 0x0001 (0x0001 - 0x0000)
struct UI_BattlePassRewardsRow_C_PreConstruct final
{
public:
	bool                                          IsDesignTime;                                      // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(UI_BattlePassRewardsRow_C_PreConstruct) == 0x000001, "Wrong alignment on UI_BattlePassRewardsRow_C_PreConstruct");
static_assert(sizeof(UI_BattlePassRewardsRow_C_PreConstruct) == 0x000001, "Wrong size on UI_BattlePassRewardsRow_C_PreConstruct");
static_assert(offsetof(UI_BattlePassRewardsRow_C_PreConstruct, IsDesignTime) == 0x000000, "Member 'UI_BattlePassRewardsRow_C_PreConstruct::IsDesignTime' has a wrong offset!");

// Function UI_BattlePassRewardsRow.UI_BattlePassRewardsRow_C.SetRowFocus
// 0x0020 (0x0020 - 0x0000)
struct UI_BattlePassRewardsRow_C_SetRowFocus final
{
public:
	bool                                          FocusWasSet;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsPlatformGroupDesktop_ReturnValue;       // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_2[0x6];                                        // 0x0002(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class UWidget*                                CallFunc_GetChildAt_ReturnValue;                   // 0x0008(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_HasFocus_ReturnValue;                     // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0011(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_12[0x6];                                       // 0x0012(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class APlayerController*                      CallFunc_GetOwningPlayer_ReturnValue;              // 0x0018(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(UI_BattlePassRewardsRow_C_SetRowFocus) == 0x000008, "Wrong alignment on UI_BattlePassRewardsRow_C_SetRowFocus");
static_assert(sizeof(UI_BattlePassRewardsRow_C_SetRowFocus) == 0x000020, "Wrong size on UI_BattlePassRewardsRow_C_SetRowFocus");
static_assert(offsetof(UI_BattlePassRewardsRow_C_SetRowFocus, FocusWasSet) == 0x000000, "Member 'UI_BattlePassRewardsRow_C_SetRowFocus::FocusWasSet' has a wrong offset!");
static_assert(offsetof(UI_BattlePassRewardsRow_C_SetRowFocus, CallFunc_IsPlatformGroupDesktop_ReturnValue) == 0x000001, "Member 'UI_BattlePassRewardsRow_C_SetRowFocus::CallFunc_IsPlatformGroupDesktop_ReturnValue' has a wrong offset!");
static_assert(offsetof(UI_BattlePassRewardsRow_C_SetRowFocus, CallFunc_GetChildAt_ReturnValue) == 0x000008, "Member 'UI_BattlePassRewardsRow_C_SetRowFocus::CallFunc_GetChildAt_ReturnValue' has a wrong offset!");
static_assert(offsetof(UI_BattlePassRewardsRow_C_SetRowFocus, CallFunc_HasFocus_ReturnValue) == 0x000010, "Member 'UI_BattlePassRewardsRow_C_SetRowFocus::CallFunc_HasFocus_ReturnValue' has a wrong offset!");
static_assert(offsetof(UI_BattlePassRewardsRow_C_SetRowFocus, CallFunc_IsValid_ReturnValue) == 0x000011, "Member 'UI_BattlePassRewardsRow_C_SetRowFocus::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(UI_BattlePassRewardsRow_C_SetRowFocus, CallFunc_GetOwningPlayer_ReturnValue) == 0x000018, "Member 'UI_BattlePassRewardsRow_C_SetRowFocus::CallFunc_GetOwningPlayer_ReturnValue' has a wrong offset!");

// Function UI_BattlePassRewardsRow.UI_BattlePassRewardsRow_C.SetRowLocked
// 0x0030 (0x0030 - 0x0000)
struct UI_BattlePassRewardsRow_C_SetRowLocked final
{
public:
	bool                                          IsLockedIn;                                        // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	ESlateVisibility                              Temp_byte_Variable;                                // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2[0x2];                                        // 0x0002(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Temp_int_Variable;                                 // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UWidget*                                CallFunc_GetChildAt_ReturnValue;                   // 0x0010(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_GetChildrenCount_ReturnValue;             // 0x0018(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UUI_ItemBattlePassRewardSlot_C*         K2Node_DynamicCast_AsUI_Item_Battle_Pass_Reward_Slot; // 0x0020(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0028(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_LessEqual_IntInt_ReturnValue;             // 0x0029(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	ESlateVisibility                              Temp_byte_Variable_1;                              // 0x002A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable;                                // 0x002B(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	ESlateVisibility                              K2Node_Select_Default;                             // 0x002C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(UI_BattlePassRewardsRow_C_SetRowLocked) == 0x000008, "Wrong alignment on UI_BattlePassRewardsRow_C_SetRowLocked");
static_assert(sizeof(UI_BattlePassRewardsRow_C_SetRowLocked) == 0x000030, "Wrong size on UI_BattlePassRewardsRow_C_SetRowLocked");
static_assert(offsetof(UI_BattlePassRewardsRow_C_SetRowLocked, IsLockedIn) == 0x000000, "Member 'UI_BattlePassRewardsRow_C_SetRowLocked::IsLockedIn' has a wrong offset!");
static_assert(offsetof(UI_BattlePassRewardsRow_C_SetRowLocked, Temp_byte_Variable) == 0x000001, "Member 'UI_BattlePassRewardsRow_C_SetRowLocked::Temp_byte_Variable' has a wrong offset!");
static_assert(offsetof(UI_BattlePassRewardsRow_C_SetRowLocked, Temp_int_Variable) == 0x000004, "Member 'UI_BattlePassRewardsRow_C_SetRowLocked::Temp_int_Variable' has a wrong offset!");
static_assert(offsetof(UI_BattlePassRewardsRow_C_SetRowLocked, CallFunc_Add_IntInt_ReturnValue) == 0x000008, "Member 'UI_BattlePassRewardsRow_C_SetRowLocked::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(UI_BattlePassRewardsRow_C_SetRowLocked, CallFunc_GetChildAt_ReturnValue) == 0x000010, "Member 'UI_BattlePassRewardsRow_C_SetRowLocked::CallFunc_GetChildAt_ReturnValue' has a wrong offset!");
static_assert(offsetof(UI_BattlePassRewardsRow_C_SetRowLocked, CallFunc_GetChildrenCount_ReturnValue) == 0x000018, "Member 'UI_BattlePassRewardsRow_C_SetRowLocked::CallFunc_GetChildrenCount_ReturnValue' has a wrong offset!");
static_assert(offsetof(UI_BattlePassRewardsRow_C_SetRowLocked, K2Node_DynamicCast_AsUI_Item_Battle_Pass_Reward_Slot) == 0x000020, "Member 'UI_BattlePassRewardsRow_C_SetRowLocked::K2Node_DynamicCast_AsUI_Item_Battle_Pass_Reward_Slot' has a wrong offset!");
static_assert(offsetof(UI_BattlePassRewardsRow_C_SetRowLocked, K2Node_DynamicCast_bSuccess) == 0x000028, "Member 'UI_BattlePassRewardsRow_C_SetRowLocked::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(UI_BattlePassRewardsRow_C_SetRowLocked, CallFunc_LessEqual_IntInt_ReturnValue) == 0x000029, "Member 'UI_BattlePassRewardsRow_C_SetRowLocked::CallFunc_LessEqual_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(UI_BattlePassRewardsRow_C_SetRowLocked, Temp_byte_Variable_1) == 0x00002A, "Member 'UI_BattlePassRewardsRow_C_SetRowLocked::Temp_byte_Variable_1' has a wrong offset!");
static_assert(offsetof(UI_BattlePassRewardsRow_C_SetRowLocked, Temp_bool_Variable) == 0x00002B, "Member 'UI_BattlePassRewardsRow_C_SetRowLocked::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(UI_BattlePassRewardsRow_C_SetRowLocked, K2Node_Select_Default) == 0x00002C, "Member 'UI_BattlePassRewardsRow_C_SetRowLocked::K2Node_Select_Default' has a wrong offset!");

// Function UI_BattlePassRewardsRow.UI_BattlePassRewardsRow_C.FillRewardSlots
// 0x0180 (0x0180 - 0x0000)
struct UI_BattlePassRewardsRow_C_FillRewardSlots final
{
public:
	TArray<struct FS_BattlePassLevelRewardFull>   RewardsIn;                                         // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
	bool                                          Aggregate;                                         // 0x0010(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FS_BattlePassLevelRewardFull>   Prepared_Rewards;                                  // 0x0018(0x0010)(Edit, BlueprintVisible)
	TMap<class UClass*, int32>                    Rewards_Map;                                       // 0x0028(0x0050)(Edit, BlueprintVisible)
	int32                                         Temp_int_Array_Index_Variable;                     // 0x0078(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x007C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x0080(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable_1;                  // 0x0084(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Array_Index_Variable_1;                   // 0x0088(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue_1;                 // 0x008C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Array_Index_Variable_2;                   // 0x0090(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable_2;                  // 0x0094(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable;                                // 0x0098(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_99[0x3];                                       // 0x0099(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Add_IntInt_ReturnValue_2;                 // 0x009C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FS_BattlePassLevelRewardFull           CallFunc_Array_Get_Item;                           // 0x00A0(0x0020)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x00C0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValidClass_ReturnValue;                 // 0x00C4(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x00C5(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_C6[0x2];                                       // 0x00C6(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class UClass*>                         CallFunc_Map_Keys_Keys;                            // 0x00C8(0x0010)(ReferenceParm)
	class UClass*                                 CallFunc_Array_Get_Item_1;                         // 0x00D8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue_1;               // 0x00E0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValidClass_ReturnValue_1;               // 0x00E4(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Less_IntInt_ReturnValue_1;                // 0x00E5(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_E6[0x2];                                       // 0x00E6(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Map_Find_Value;                           // 0x00E8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Map_Find_ReturnValue;                     // 0x00EC(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_ED[0x3];                                       // 0x00ED(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FS_BattlePassLevelRewardFull           K2Node_MakeStruct_S_BattlePassLevelRewardFull;     // 0x00F0(0x0020)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Add_ReturnValue;                    // 0x0110(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_114[0x4];                                      // 0x0114(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FS_BattlePassLevelRewardFull           CallFunc_Array_Get_Item_2;                         // 0x0118(0x0020)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue_2;               // 0x0138(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Add_ReturnValue_1;                  // 0x013C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue_2;                // 0x0140(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValidClass_ReturnValue_2;               // 0x0141(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_142[0x2];                                      // 0x0142(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Map_Find_Value_1;                         // 0x0144(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Map_Find_ReturnValue_1;                   // 0x0148(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_149[0x3];                                      // 0x0149(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Add_IntInt_ReturnValue_3;                 // 0x014C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsDurable_IsDurableOut;                   // 0x0150(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_151[0x3];                                      // 0x0151(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         K2Node_Select_Default;                             // 0x0154(0x0004)(ConstParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TDelegate<void(class UButton* Sender)>        K2Node_CreateDelegate_OutputDelegate;              // 0x0158(0x0010)(ZeroConstructor, NoDestructor)
	class APlayerController*                      CallFunc_GetOwningPlayer_ReturnValue;              // 0x0168(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UUI_ItemBattlePassRewardSlot_C*         CallFunc_Create_ReturnValue;                       // 0x0170(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UPanelSlot*                             CallFunc_AddChild_ReturnValue;                     // 0x0178(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(UI_BattlePassRewardsRow_C_FillRewardSlots) == 0x000008, "Wrong alignment on UI_BattlePassRewardsRow_C_FillRewardSlots");
static_assert(sizeof(UI_BattlePassRewardsRow_C_FillRewardSlots) == 0x000180, "Wrong size on UI_BattlePassRewardsRow_C_FillRewardSlots");
static_assert(offsetof(UI_BattlePassRewardsRow_C_FillRewardSlots, RewardsIn) == 0x000000, "Member 'UI_BattlePassRewardsRow_C_FillRewardSlots::RewardsIn' has a wrong offset!");
static_assert(offsetof(UI_BattlePassRewardsRow_C_FillRewardSlots, Aggregate) == 0x000010, "Member 'UI_BattlePassRewardsRow_C_FillRewardSlots::Aggregate' has a wrong offset!");
static_assert(offsetof(UI_BattlePassRewardsRow_C_FillRewardSlots, Prepared_Rewards) == 0x000018, "Member 'UI_BattlePassRewardsRow_C_FillRewardSlots::Prepared_Rewards' has a wrong offset!");
static_assert(offsetof(UI_BattlePassRewardsRow_C_FillRewardSlots, Rewards_Map) == 0x000028, "Member 'UI_BattlePassRewardsRow_C_FillRewardSlots::Rewards_Map' has a wrong offset!");
static_assert(offsetof(UI_BattlePassRewardsRow_C_FillRewardSlots, Temp_int_Array_Index_Variable) == 0x000078, "Member 'UI_BattlePassRewardsRow_C_FillRewardSlots::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(UI_BattlePassRewardsRow_C_FillRewardSlots, Temp_int_Loop_Counter_Variable) == 0x00007C, "Member 'UI_BattlePassRewardsRow_C_FillRewardSlots::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(UI_BattlePassRewardsRow_C_FillRewardSlots, CallFunc_Add_IntInt_ReturnValue) == 0x000080, "Member 'UI_BattlePassRewardsRow_C_FillRewardSlots::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(UI_BattlePassRewardsRow_C_FillRewardSlots, Temp_int_Loop_Counter_Variable_1) == 0x000084, "Member 'UI_BattlePassRewardsRow_C_FillRewardSlots::Temp_int_Loop_Counter_Variable_1' has a wrong offset!");
static_assert(offsetof(UI_BattlePassRewardsRow_C_FillRewardSlots, Temp_int_Array_Index_Variable_1) == 0x000088, "Member 'UI_BattlePassRewardsRow_C_FillRewardSlots::Temp_int_Array_Index_Variable_1' has a wrong offset!");
static_assert(offsetof(UI_BattlePassRewardsRow_C_FillRewardSlots, CallFunc_Add_IntInt_ReturnValue_1) == 0x00008C, "Member 'UI_BattlePassRewardsRow_C_FillRewardSlots::CallFunc_Add_IntInt_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(UI_BattlePassRewardsRow_C_FillRewardSlots, Temp_int_Array_Index_Variable_2) == 0x000090, "Member 'UI_BattlePassRewardsRow_C_FillRewardSlots::Temp_int_Array_Index_Variable_2' has a wrong offset!");
static_assert(offsetof(UI_BattlePassRewardsRow_C_FillRewardSlots, Temp_int_Loop_Counter_Variable_2) == 0x000094, "Member 'UI_BattlePassRewardsRow_C_FillRewardSlots::Temp_int_Loop_Counter_Variable_2' has a wrong offset!");
static_assert(offsetof(UI_BattlePassRewardsRow_C_FillRewardSlots, Temp_bool_Variable) == 0x000098, "Member 'UI_BattlePassRewardsRow_C_FillRewardSlots::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(UI_BattlePassRewardsRow_C_FillRewardSlots, CallFunc_Add_IntInt_ReturnValue_2) == 0x00009C, "Member 'UI_BattlePassRewardsRow_C_FillRewardSlots::CallFunc_Add_IntInt_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(UI_BattlePassRewardsRow_C_FillRewardSlots, CallFunc_Array_Get_Item) == 0x0000A0, "Member 'UI_BattlePassRewardsRow_C_FillRewardSlots::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(UI_BattlePassRewardsRow_C_FillRewardSlots, CallFunc_Array_Length_ReturnValue) == 0x0000C0, "Member 'UI_BattlePassRewardsRow_C_FillRewardSlots::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(UI_BattlePassRewardsRow_C_FillRewardSlots, CallFunc_IsValidClass_ReturnValue) == 0x0000C4, "Member 'UI_BattlePassRewardsRow_C_FillRewardSlots::CallFunc_IsValidClass_ReturnValue' has a wrong offset!");
static_assert(offsetof(UI_BattlePassRewardsRow_C_FillRewardSlots, CallFunc_Less_IntInt_ReturnValue) == 0x0000C5, "Member 'UI_BattlePassRewardsRow_C_FillRewardSlots::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(UI_BattlePassRewardsRow_C_FillRewardSlots, CallFunc_Map_Keys_Keys) == 0x0000C8, "Member 'UI_BattlePassRewardsRow_C_FillRewardSlots::CallFunc_Map_Keys_Keys' has a wrong offset!");
static_assert(offsetof(UI_BattlePassRewardsRow_C_FillRewardSlots, CallFunc_Array_Get_Item_1) == 0x0000D8, "Member 'UI_BattlePassRewardsRow_C_FillRewardSlots::CallFunc_Array_Get_Item_1' has a wrong offset!");
static_assert(offsetof(UI_BattlePassRewardsRow_C_FillRewardSlots, CallFunc_Array_Length_ReturnValue_1) == 0x0000E0, "Member 'UI_BattlePassRewardsRow_C_FillRewardSlots::CallFunc_Array_Length_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(UI_BattlePassRewardsRow_C_FillRewardSlots, CallFunc_IsValidClass_ReturnValue_1) == 0x0000E4, "Member 'UI_BattlePassRewardsRow_C_FillRewardSlots::CallFunc_IsValidClass_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(UI_BattlePassRewardsRow_C_FillRewardSlots, CallFunc_Less_IntInt_ReturnValue_1) == 0x0000E5, "Member 'UI_BattlePassRewardsRow_C_FillRewardSlots::CallFunc_Less_IntInt_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(UI_BattlePassRewardsRow_C_FillRewardSlots, CallFunc_Map_Find_Value) == 0x0000E8, "Member 'UI_BattlePassRewardsRow_C_FillRewardSlots::CallFunc_Map_Find_Value' has a wrong offset!");
static_assert(offsetof(UI_BattlePassRewardsRow_C_FillRewardSlots, CallFunc_Map_Find_ReturnValue) == 0x0000EC, "Member 'UI_BattlePassRewardsRow_C_FillRewardSlots::CallFunc_Map_Find_ReturnValue' has a wrong offset!");
static_assert(offsetof(UI_BattlePassRewardsRow_C_FillRewardSlots, K2Node_MakeStruct_S_BattlePassLevelRewardFull) == 0x0000F0, "Member 'UI_BattlePassRewardsRow_C_FillRewardSlots::K2Node_MakeStruct_S_BattlePassLevelRewardFull' has a wrong offset!");
static_assert(offsetof(UI_BattlePassRewardsRow_C_FillRewardSlots, CallFunc_Array_Add_ReturnValue) == 0x000110, "Member 'UI_BattlePassRewardsRow_C_FillRewardSlots::CallFunc_Array_Add_ReturnValue' has a wrong offset!");
static_assert(offsetof(UI_BattlePassRewardsRow_C_FillRewardSlots, CallFunc_Array_Get_Item_2) == 0x000118, "Member 'UI_BattlePassRewardsRow_C_FillRewardSlots::CallFunc_Array_Get_Item_2' has a wrong offset!");
static_assert(offsetof(UI_BattlePassRewardsRow_C_FillRewardSlots, CallFunc_Array_Length_ReturnValue_2) == 0x000138, "Member 'UI_BattlePassRewardsRow_C_FillRewardSlots::CallFunc_Array_Length_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(UI_BattlePassRewardsRow_C_FillRewardSlots, CallFunc_Array_Add_ReturnValue_1) == 0x00013C, "Member 'UI_BattlePassRewardsRow_C_FillRewardSlots::CallFunc_Array_Add_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(UI_BattlePassRewardsRow_C_FillRewardSlots, CallFunc_Less_IntInt_ReturnValue_2) == 0x000140, "Member 'UI_BattlePassRewardsRow_C_FillRewardSlots::CallFunc_Less_IntInt_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(UI_BattlePassRewardsRow_C_FillRewardSlots, CallFunc_IsValidClass_ReturnValue_2) == 0x000141, "Member 'UI_BattlePassRewardsRow_C_FillRewardSlots::CallFunc_IsValidClass_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(UI_BattlePassRewardsRow_C_FillRewardSlots, CallFunc_Map_Find_Value_1) == 0x000144, "Member 'UI_BattlePassRewardsRow_C_FillRewardSlots::CallFunc_Map_Find_Value_1' has a wrong offset!");
static_assert(offsetof(UI_BattlePassRewardsRow_C_FillRewardSlots, CallFunc_Map_Find_ReturnValue_1) == 0x000148, "Member 'UI_BattlePassRewardsRow_C_FillRewardSlots::CallFunc_Map_Find_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(UI_BattlePassRewardsRow_C_FillRewardSlots, CallFunc_Add_IntInt_ReturnValue_3) == 0x00014C, "Member 'UI_BattlePassRewardsRow_C_FillRewardSlots::CallFunc_Add_IntInt_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(UI_BattlePassRewardsRow_C_FillRewardSlots, CallFunc_IsDurable_IsDurableOut) == 0x000150, "Member 'UI_BattlePassRewardsRow_C_FillRewardSlots::CallFunc_IsDurable_IsDurableOut' has a wrong offset!");
static_assert(offsetof(UI_BattlePassRewardsRow_C_FillRewardSlots, K2Node_Select_Default) == 0x000154, "Member 'UI_BattlePassRewardsRow_C_FillRewardSlots::K2Node_Select_Default' has a wrong offset!");
static_assert(offsetof(UI_BattlePassRewardsRow_C_FillRewardSlots, K2Node_CreateDelegate_OutputDelegate) == 0x000158, "Member 'UI_BattlePassRewardsRow_C_FillRewardSlots::K2Node_CreateDelegate_OutputDelegate' has a wrong offset!");
static_assert(offsetof(UI_BattlePassRewardsRow_C_FillRewardSlots, CallFunc_GetOwningPlayer_ReturnValue) == 0x000168, "Member 'UI_BattlePassRewardsRow_C_FillRewardSlots::CallFunc_GetOwningPlayer_ReturnValue' has a wrong offset!");
static_assert(offsetof(UI_BattlePassRewardsRow_C_FillRewardSlots, CallFunc_Create_ReturnValue) == 0x000170, "Member 'UI_BattlePassRewardsRow_C_FillRewardSlots::CallFunc_Create_ReturnValue' has a wrong offset!");
static_assert(offsetof(UI_BattlePassRewardsRow_C_FillRewardSlots, CallFunc_AddChild_ReturnValue) == 0x000178, "Member 'UI_BattlePassRewardsRow_C_FillRewardSlots::CallFunc_AddChild_ReturnValue' has a wrong offset!");

// Function UI_BattlePassRewardsRow.UI_BattlePassRewardsRow_C.GetFirstChild
// 0x0010 (0x0010 - 0x0000)
struct UI_BattlePassRewardsRow_C_GetFirstChild final
{
public:
	class UWidget*                                BattlePassItem;                                    // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UWidget*                                CallFunc_GetChildAt_ReturnValue;                   // 0x0008(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(UI_BattlePassRewardsRow_C_GetFirstChild) == 0x000008, "Wrong alignment on UI_BattlePassRewardsRow_C_GetFirstChild");
static_assert(sizeof(UI_BattlePassRewardsRow_C_GetFirstChild) == 0x000010, "Wrong size on UI_BattlePassRewardsRow_C_GetFirstChild");
static_assert(offsetof(UI_BattlePassRewardsRow_C_GetFirstChild, BattlePassItem) == 0x000000, "Member 'UI_BattlePassRewardsRow_C_GetFirstChild::BattlePassItem' has a wrong offset!");
static_assert(offsetof(UI_BattlePassRewardsRow_C_GetFirstChild, CallFunc_GetChildAt_ReturnValue) == 0x000008, "Member 'UI_BattlePassRewardsRow_C_GetFirstChild::CallFunc_GetChildAt_ReturnValue' has a wrong offset!");

// Function UI_BattlePassRewardsRow.UI_BattlePassRewardsRow_C.IsDurable
// 0x0050 (0x0050 - 0x0000)
struct UI_BattlePassRewardsRow_C_IsDurable final
{
public:
	class UClass*                                 ItemClassIn;                                       // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsDurableOut;                                      // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UClass*                                 K2Node_ClassDynamicCast_AsCustomization_Variant;   // 0x0010(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_ClassDynamicCast_bSuccess;                  // 0x0018(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UClass*                                 K2Node_ClassDynamicCast_AsCustomization_Variant_Bundle; // 0x0020(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_ClassDynamicCast_bSuccess_1;                // 0x0028(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_29[0x7];                                       // 0x0029(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UClass*                                 K2Node_ClassDynamicCast_AsWeapon_Skin;             // 0x0030(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_ClassDynamicCast_bSuccess_2;                // 0x0038(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_39[0x7];                                       // 0x0039(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UClass*                                 K2Node_ClassDynamicCast_AsPlan;                    // 0x0040(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_ClassDynamicCast_bSuccess_3;                // 0x0048(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(UI_BattlePassRewardsRow_C_IsDurable) == 0x000008, "Wrong alignment on UI_BattlePassRewardsRow_C_IsDurable");
static_assert(sizeof(UI_BattlePassRewardsRow_C_IsDurable) == 0x000050, "Wrong size on UI_BattlePassRewardsRow_C_IsDurable");
static_assert(offsetof(UI_BattlePassRewardsRow_C_IsDurable, ItemClassIn) == 0x000000, "Member 'UI_BattlePassRewardsRow_C_IsDurable::ItemClassIn' has a wrong offset!");
static_assert(offsetof(UI_BattlePassRewardsRow_C_IsDurable, IsDurableOut) == 0x000008, "Member 'UI_BattlePassRewardsRow_C_IsDurable::IsDurableOut' has a wrong offset!");
static_assert(offsetof(UI_BattlePassRewardsRow_C_IsDurable, K2Node_ClassDynamicCast_AsCustomization_Variant) == 0x000010, "Member 'UI_BattlePassRewardsRow_C_IsDurable::K2Node_ClassDynamicCast_AsCustomization_Variant' has a wrong offset!");
static_assert(offsetof(UI_BattlePassRewardsRow_C_IsDurable, K2Node_ClassDynamicCast_bSuccess) == 0x000018, "Member 'UI_BattlePassRewardsRow_C_IsDurable::K2Node_ClassDynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(UI_BattlePassRewardsRow_C_IsDurable, K2Node_ClassDynamicCast_AsCustomization_Variant_Bundle) == 0x000020, "Member 'UI_BattlePassRewardsRow_C_IsDurable::K2Node_ClassDynamicCast_AsCustomization_Variant_Bundle' has a wrong offset!");
static_assert(offsetof(UI_BattlePassRewardsRow_C_IsDurable, K2Node_ClassDynamicCast_bSuccess_1) == 0x000028, "Member 'UI_BattlePassRewardsRow_C_IsDurable::K2Node_ClassDynamicCast_bSuccess_1' has a wrong offset!");
static_assert(offsetof(UI_BattlePassRewardsRow_C_IsDurable, K2Node_ClassDynamicCast_AsWeapon_Skin) == 0x000030, "Member 'UI_BattlePassRewardsRow_C_IsDurable::K2Node_ClassDynamicCast_AsWeapon_Skin' has a wrong offset!");
static_assert(offsetof(UI_BattlePassRewardsRow_C_IsDurable, K2Node_ClassDynamicCast_bSuccess_2) == 0x000038, "Member 'UI_BattlePassRewardsRow_C_IsDurable::K2Node_ClassDynamicCast_bSuccess_2' has a wrong offset!");
static_assert(offsetof(UI_BattlePassRewardsRow_C_IsDurable, K2Node_ClassDynamicCast_AsPlan) == 0x000040, "Member 'UI_BattlePassRewardsRow_C_IsDurable::K2Node_ClassDynamicCast_AsPlan' has a wrong offset!");
static_assert(offsetof(UI_BattlePassRewardsRow_C_IsDurable, K2Node_ClassDynamicCast_bSuccess_3) == 0x000048, "Member 'UI_BattlePassRewardsRow_C_IsDurable::K2Node_ClassDynamicCast_bSuccess_3' has a wrong offset!");

}

