#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_Van_Base

#include "Basic.hpp"

#include "E_Van_Type_structs.hpp"
#include "CoreUObject_structs.hpp"
#include "S_Van_Colours_structs.hpp"
#include "Engine_structs.hpp"


namespace SDK::Params
{

// Function BP_Van_Base.BP_Van_Base_C.ExecuteUbergraph_BP_Van_Base
// 0x0038 (0x0038 - 0x0000)
struct BP_Van_Base_C_ExecuteUbergraph_BP_Van_Base final
{
public:
	int32                                         EntryPoint;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_Event_CurrentWindIntensity_1;               // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                K2Node_Event_CurrentWindDirection_1;               // 0x0008(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_Event_HeavyRain;                            // 0x0014(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_15[0x3];                                       // 0x0015(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         K2Node_Event_CurrentRainAmount_1;                  // 0x0018(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_Event_CurrentWetnessAmount_1;               // 0x001C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_Event_CurrentRainAmount;                    // 0x0020(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_Event_CurrentWindIntensity;                 // 0x0024(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                K2Node_Event_CurrentWindDirection;                 // 0x0028(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_Event_CurrentWetnessAmount;                 // 0x0034(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_Van_Base_C_ExecuteUbergraph_BP_Van_Base) == 0x000004, "Wrong alignment on BP_Van_Base_C_ExecuteUbergraph_BP_Van_Base");
static_assert(sizeof(BP_Van_Base_C_ExecuteUbergraph_BP_Van_Base) == 0x000038, "Wrong size on BP_Van_Base_C_ExecuteUbergraph_BP_Van_Base");
static_assert(offsetof(BP_Van_Base_C_ExecuteUbergraph_BP_Van_Base, EntryPoint) == 0x000000, "Member 'BP_Van_Base_C_ExecuteUbergraph_BP_Van_Base::EntryPoint' has a wrong offset!");
static_assert(offsetof(BP_Van_Base_C_ExecuteUbergraph_BP_Van_Base, K2Node_Event_CurrentWindIntensity_1) == 0x000004, "Member 'BP_Van_Base_C_ExecuteUbergraph_BP_Van_Base::K2Node_Event_CurrentWindIntensity_1' has a wrong offset!");
static_assert(offsetof(BP_Van_Base_C_ExecuteUbergraph_BP_Van_Base, K2Node_Event_CurrentWindDirection_1) == 0x000008, "Member 'BP_Van_Base_C_ExecuteUbergraph_BP_Van_Base::K2Node_Event_CurrentWindDirection_1' has a wrong offset!");
static_assert(offsetof(BP_Van_Base_C_ExecuteUbergraph_BP_Van_Base, K2Node_Event_HeavyRain) == 0x000014, "Member 'BP_Van_Base_C_ExecuteUbergraph_BP_Van_Base::K2Node_Event_HeavyRain' has a wrong offset!");
static_assert(offsetof(BP_Van_Base_C_ExecuteUbergraph_BP_Van_Base, K2Node_Event_CurrentRainAmount_1) == 0x000018, "Member 'BP_Van_Base_C_ExecuteUbergraph_BP_Van_Base::K2Node_Event_CurrentRainAmount_1' has a wrong offset!");
static_assert(offsetof(BP_Van_Base_C_ExecuteUbergraph_BP_Van_Base, K2Node_Event_CurrentWetnessAmount_1) == 0x00001C, "Member 'BP_Van_Base_C_ExecuteUbergraph_BP_Van_Base::K2Node_Event_CurrentWetnessAmount_1' has a wrong offset!");
static_assert(offsetof(BP_Van_Base_C_ExecuteUbergraph_BP_Van_Base, K2Node_Event_CurrentRainAmount) == 0x000020, "Member 'BP_Van_Base_C_ExecuteUbergraph_BP_Van_Base::K2Node_Event_CurrentRainAmount' has a wrong offset!");
static_assert(offsetof(BP_Van_Base_C_ExecuteUbergraph_BP_Van_Base, K2Node_Event_CurrentWindIntensity) == 0x000024, "Member 'BP_Van_Base_C_ExecuteUbergraph_BP_Van_Base::K2Node_Event_CurrentWindIntensity' has a wrong offset!");
static_assert(offsetof(BP_Van_Base_C_ExecuteUbergraph_BP_Van_Base, K2Node_Event_CurrentWindDirection) == 0x000028, "Member 'BP_Van_Base_C_ExecuteUbergraph_BP_Van_Base::K2Node_Event_CurrentWindDirection' has a wrong offset!");
static_assert(offsetof(BP_Van_Base_C_ExecuteUbergraph_BP_Van_Base, K2Node_Event_CurrentWetnessAmount) == 0x000034, "Member 'BP_Van_Base_C_ExecuteUbergraph_BP_Van_Base::K2Node_Event_CurrentWetnessAmount' has a wrong offset!");

// Function BP_Van_Base.BP_Van_Base_C.AdjustWeather
// 0x0018 (0x0018 - 0x0000)
struct BP_Van_Base_C_AdjustWeather final
{
public:
	float                                         CurrentRainAmount;                                 // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CurrentWindIntensity;                              // 0x0004(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CurrentWindDirection;                              // 0x0008(0x000C)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CurrentWetnessAmount;                              // 0x0014(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_Van_Base_C_AdjustWeather) == 0x000004, "Wrong alignment on BP_Van_Base_C_AdjustWeather");
static_assert(sizeof(BP_Van_Base_C_AdjustWeather) == 0x000018, "Wrong size on BP_Van_Base_C_AdjustWeather");
static_assert(offsetof(BP_Van_Base_C_AdjustWeather, CurrentRainAmount) == 0x000000, "Member 'BP_Van_Base_C_AdjustWeather::CurrentRainAmount' has a wrong offset!");
static_assert(offsetof(BP_Van_Base_C_AdjustWeather, CurrentWindIntensity) == 0x000004, "Member 'BP_Van_Base_C_AdjustWeather::CurrentWindIntensity' has a wrong offset!");
static_assert(offsetof(BP_Van_Base_C_AdjustWeather, CurrentWindDirection) == 0x000008, "Member 'BP_Van_Base_C_AdjustWeather::CurrentWindDirection' has a wrong offset!");
static_assert(offsetof(BP_Van_Base_C_AdjustWeather, CurrentWetnessAmount) == 0x000014, "Member 'BP_Van_Base_C_AdjustWeather::CurrentWetnessAmount' has a wrong offset!");

// Function BP_Van_Base.BP_Van_Base_C.AdjustRainIntensity
// 0x0008 (0x0008 - 0x0000)
struct BP_Van_Base_C_AdjustRainIntensity final
{
public:
	float                                         CurrentRainAmount;                                 // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CurrentWetnessAmount;                              // 0x0004(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_Van_Base_C_AdjustRainIntensity) == 0x000004, "Wrong alignment on BP_Van_Base_C_AdjustRainIntensity");
static_assert(sizeof(BP_Van_Base_C_AdjustRainIntensity) == 0x000008, "Wrong size on BP_Van_Base_C_AdjustRainIntensity");
static_assert(offsetof(BP_Van_Base_C_AdjustRainIntensity, CurrentRainAmount) == 0x000000, "Member 'BP_Van_Base_C_AdjustRainIntensity::CurrentRainAmount' has a wrong offset!");
static_assert(offsetof(BP_Van_Base_C_AdjustRainIntensity, CurrentWetnessAmount) == 0x000004, "Member 'BP_Van_Base_C_AdjustRainIntensity::CurrentWetnessAmount' has a wrong offset!");

// Function BP_Van_Base.BP_Van_Base_C.SetHeavyRain
// 0x0001 (0x0001 - 0x0000)
struct BP_Van_Base_C_SetHeavyRain final
{
public:
	bool                                          HeavyRain;                                         // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_Van_Base_C_SetHeavyRain) == 0x000001, "Wrong alignment on BP_Van_Base_C_SetHeavyRain");
static_assert(sizeof(BP_Van_Base_C_SetHeavyRain) == 0x000001, "Wrong size on BP_Van_Base_C_SetHeavyRain");
static_assert(offsetof(BP_Van_Base_C_SetHeavyRain, HeavyRain) == 0x000000, "Member 'BP_Van_Base_C_SetHeavyRain::HeavyRain' has a wrong offset!");

// Function BP_Van_Base.BP_Van_Base_C.AdjustWindDirection
// 0x000C (0x000C - 0x0000)
struct BP_Van_Base_C_AdjustWindDirection final
{
public:
	struct FVector                                CurrentWindDirection;                              // 0x0000(0x000C)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_Van_Base_C_AdjustWindDirection) == 0x000004, "Wrong alignment on BP_Van_Base_C_AdjustWindDirection");
static_assert(sizeof(BP_Van_Base_C_AdjustWindDirection) == 0x00000C, "Wrong size on BP_Van_Base_C_AdjustWindDirection");
static_assert(offsetof(BP_Van_Base_C_AdjustWindDirection, CurrentWindDirection) == 0x000000, "Member 'BP_Van_Base_C_AdjustWindDirection::CurrentWindDirection' has a wrong offset!");

// Function BP_Van_Base.BP_Van_Base_C.AdjustWindIntensity
// 0x0004 (0x0004 - 0x0000)
struct BP_Van_Base_C_AdjustWindIntensity final
{
public:
	float                                         CurrentWindIntensity;                              // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_Van_Base_C_AdjustWindIntensity) == 0x000004, "Wrong alignment on BP_Van_Base_C_AdjustWindIntensity");
static_assert(sizeof(BP_Van_Base_C_AdjustWindIntensity) == 0x000004, "Wrong size on BP_Van_Base_C_AdjustWindIntensity");
static_assert(offsetof(BP_Van_Base_C_AdjustWindIntensity, CurrentWindIntensity) == 0x000000, "Member 'BP_Van_Base_C_AdjustWindIntensity::CurrentWindIntensity' has a wrong offset!");

// Function BP_Van_Base.BP_Van_Base_C.UserConstructionScript
// 0x0188 (0x0188 - 0x0000)
struct BP_Van_Base_C_UserConstructionScript final
{
public:
	class UChildActorComponent*                   NewLocalVar_1;                                     // 0x0000(0x0008)(Edit, BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          NewLocalVar_0;                                     // 0x0008(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UObstacleComponent*                     CallFunc_GetComponentByClass_ReturnValue;          // 0x0010(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0018(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSoftObjectPath                        CallFunc_Map_Find_Value;                           // 0x0020(0x0018)(ZeroConstructor, HasGetValueTypeHash)
	bool                                          CallFunc_Map_Find_ReturnValue;                     // 0x0038(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_39[0x3];                                       // 0x0039(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_Add_FloatFloat_ReturnValue;               // 0x003C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               CallFunc_MakeRotator_ReturnValue;                  // 0x0040(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FRotator                               CallFunc_MakeRotator_ReturnValue_1;                // 0x004C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor)
	class UObject*                                CallFunc_GetObjectFromSoftObject_ReturnValue;      // 0x0058(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UObstacleAsset*                         K2Node_DynamicCast_AsObstacle_Asset;               // 0x0060(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0068(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_69[0x3];                                       // 0x0069(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FHitResult                             CallFunc_K2_SetRelativeRotation_SweepHitResult;    // 0x006C(0x008C)(IsPlainOldData, NoDestructor, ContainsInstancedReference)
	struct FHitResult                             CallFunc_K2_SetRelativeRotation_SweepHitResult_1;  // 0x00F8(0x008C)(IsPlainOldData, NoDestructor, ContainsInstancedReference)
};
static_assert(alignof(BP_Van_Base_C_UserConstructionScript) == 0x000008, "Wrong alignment on BP_Van_Base_C_UserConstructionScript");
static_assert(sizeof(BP_Van_Base_C_UserConstructionScript) == 0x000188, "Wrong size on BP_Van_Base_C_UserConstructionScript");
static_assert(offsetof(BP_Van_Base_C_UserConstructionScript, NewLocalVar_1) == 0x000000, "Member 'BP_Van_Base_C_UserConstructionScript::NewLocalVar_1' has a wrong offset!");
static_assert(offsetof(BP_Van_Base_C_UserConstructionScript, NewLocalVar_0) == 0x000008, "Member 'BP_Van_Base_C_UserConstructionScript::NewLocalVar_0' has a wrong offset!");
static_assert(offsetof(BP_Van_Base_C_UserConstructionScript, CallFunc_GetComponentByClass_ReturnValue) == 0x000010, "Member 'BP_Van_Base_C_UserConstructionScript::CallFunc_GetComponentByClass_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Van_Base_C_UserConstructionScript, CallFunc_IsValid_ReturnValue) == 0x000018, "Member 'BP_Van_Base_C_UserConstructionScript::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Van_Base_C_UserConstructionScript, CallFunc_Map_Find_Value) == 0x000020, "Member 'BP_Van_Base_C_UserConstructionScript::CallFunc_Map_Find_Value' has a wrong offset!");
static_assert(offsetof(BP_Van_Base_C_UserConstructionScript, CallFunc_Map_Find_ReturnValue) == 0x000038, "Member 'BP_Van_Base_C_UserConstructionScript::CallFunc_Map_Find_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Van_Base_C_UserConstructionScript, CallFunc_Add_FloatFloat_ReturnValue) == 0x00003C, "Member 'BP_Van_Base_C_UserConstructionScript::CallFunc_Add_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Van_Base_C_UserConstructionScript, CallFunc_MakeRotator_ReturnValue) == 0x000040, "Member 'BP_Van_Base_C_UserConstructionScript::CallFunc_MakeRotator_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Van_Base_C_UserConstructionScript, CallFunc_MakeRotator_ReturnValue_1) == 0x00004C, "Member 'BP_Van_Base_C_UserConstructionScript::CallFunc_MakeRotator_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_Van_Base_C_UserConstructionScript, CallFunc_GetObjectFromSoftObject_ReturnValue) == 0x000058, "Member 'BP_Van_Base_C_UserConstructionScript::CallFunc_GetObjectFromSoftObject_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Van_Base_C_UserConstructionScript, K2Node_DynamicCast_AsObstacle_Asset) == 0x000060, "Member 'BP_Van_Base_C_UserConstructionScript::K2Node_DynamicCast_AsObstacle_Asset' has a wrong offset!");
static_assert(offsetof(BP_Van_Base_C_UserConstructionScript, K2Node_DynamicCast_bSuccess) == 0x000068, "Member 'BP_Van_Base_C_UserConstructionScript::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(BP_Van_Base_C_UserConstructionScript, CallFunc_K2_SetRelativeRotation_SweepHitResult) == 0x00006C, "Member 'BP_Van_Base_C_UserConstructionScript::CallFunc_K2_SetRelativeRotation_SweepHitResult' has a wrong offset!");
static_assert(offsetof(BP_Van_Base_C_UserConstructionScript, CallFunc_K2_SetRelativeRotation_SweepHitResult_1) == 0x0000F8, "Member 'BP_Van_Base_C_UserConstructionScript::CallFunc_K2_SetRelativeRotation_SweepHitResult_1' has a wrong offset!");

// Function BP_Van_Base.BP_Van_Base_C.SetColours
// 0x00C0 (0x00C0 - 0x0000)
struct BP_Van_Base_C_SetColours final
{
public:
	float                                         CallFunc_BreakVector_X;                            // 0x0000(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_Y;                            // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_Z;                            // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue;          // 0x000C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FTransform                             CallFunc_MakeTransform_ReturnValue;                // 0x0010(0x0030)(IsPlainOldData, NoDestructor)
	struct FVector                                CallFunc_MakeVector_ReturnValue;                   // 0x0040(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4C[0x4];                                       // 0x004C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UDecalComponent*                        CallFunc_AddComponent_ReturnValue;                 // 0x0050(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_58[0x8];                                       // 0x0058(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             CallFunc_MakeTransform_ReturnValue_1;              // 0x0060(0x0030)(IsPlainOldData, NoDestructor)
	class UDecalComponent*                        CallFunc_AddComponent_ReturnValue_1;               // 0x0090(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue;          // 0x0098(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue_1;        // 0x0099(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue_2;        // 0x009A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue_3;        // 0x009B(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanOR_ReturnValue;                    // 0x009C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanOR_ReturnValue_1;                  // 0x009D(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_9E[0x2];                                       // 0x009E(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	struct FS_Van_Colours                         CallFunc_Map_Find_Value;                           // 0x00A0(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Map_Find_ReturnValue;                     // 0x00B8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_Van_Base_C_SetColours) == 0x000010, "Wrong alignment on BP_Van_Base_C_SetColours");
static_assert(sizeof(BP_Van_Base_C_SetColours) == 0x0000C0, "Wrong size on BP_Van_Base_C_SetColours");
static_assert(offsetof(BP_Van_Base_C_SetColours, CallFunc_BreakVector_X) == 0x000000, "Member 'BP_Van_Base_C_SetColours::CallFunc_BreakVector_X' has a wrong offset!");
static_assert(offsetof(BP_Van_Base_C_SetColours, CallFunc_BreakVector_Y) == 0x000004, "Member 'BP_Van_Base_C_SetColours::CallFunc_BreakVector_Y' has a wrong offset!");
static_assert(offsetof(BP_Van_Base_C_SetColours, CallFunc_BreakVector_Z) == 0x000008, "Member 'BP_Van_Base_C_SetColours::CallFunc_BreakVector_Z' has a wrong offset!");
static_assert(offsetof(BP_Van_Base_C_SetColours, CallFunc_Multiply_FloatFloat_ReturnValue) == 0x00000C, "Member 'BP_Van_Base_C_SetColours::CallFunc_Multiply_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Van_Base_C_SetColours, CallFunc_MakeTransform_ReturnValue) == 0x000010, "Member 'BP_Van_Base_C_SetColours::CallFunc_MakeTransform_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Van_Base_C_SetColours, CallFunc_MakeVector_ReturnValue) == 0x000040, "Member 'BP_Van_Base_C_SetColours::CallFunc_MakeVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Van_Base_C_SetColours, CallFunc_AddComponent_ReturnValue) == 0x000050, "Member 'BP_Van_Base_C_SetColours::CallFunc_AddComponent_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Van_Base_C_SetColours, CallFunc_MakeTransform_ReturnValue_1) == 0x000060, "Member 'BP_Van_Base_C_SetColours::CallFunc_MakeTransform_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_Van_Base_C_SetColours, CallFunc_AddComponent_ReturnValue_1) == 0x000090, "Member 'BP_Van_Base_C_SetColours::CallFunc_AddComponent_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_Van_Base_C_SetColours, CallFunc_EqualEqual_ByteByte_ReturnValue) == 0x000098, "Member 'BP_Van_Base_C_SetColours::CallFunc_EqualEqual_ByteByte_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Van_Base_C_SetColours, CallFunc_EqualEqual_ByteByte_ReturnValue_1) == 0x000099, "Member 'BP_Van_Base_C_SetColours::CallFunc_EqualEqual_ByteByte_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_Van_Base_C_SetColours, CallFunc_EqualEqual_ByteByte_ReturnValue_2) == 0x00009A, "Member 'BP_Van_Base_C_SetColours::CallFunc_EqualEqual_ByteByte_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BP_Van_Base_C_SetColours, CallFunc_EqualEqual_ByteByte_ReturnValue_3) == 0x00009B, "Member 'BP_Van_Base_C_SetColours::CallFunc_EqualEqual_ByteByte_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(BP_Van_Base_C_SetColours, CallFunc_BooleanOR_ReturnValue) == 0x00009C, "Member 'BP_Van_Base_C_SetColours::CallFunc_BooleanOR_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Van_Base_C_SetColours, CallFunc_BooleanOR_ReturnValue_1) == 0x00009D, "Member 'BP_Van_Base_C_SetColours::CallFunc_BooleanOR_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_Van_Base_C_SetColours, CallFunc_Map_Find_Value) == 0x0000A0, "Member 'BP_Van_Base_C_SetColours::CallFunc_Map_Find_Value' has a wrong offset!");
static_assert(offsetof(BP_Van_Base_C_SetColours, CallFunc_Map_Find_ReturnValue) == 0x0000B8, "Member 'BP_Van_Base_C_SetColours::CallFunc_Map_Find_ReturnValue' has a wrong offset!");

// Function BP_Van_Base.BP_Van_Base_C.SetMeshes
// 0x0028 (0x0028 - 0x0000)
struct BP_Van_Base_C_SetMeshes final
{
public:
	E_Van_Type                                    Temp_byte_Variable;                                // 0x0000(0x0001)(ConstParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_NotEqual_ByteByte_ReturnValue;            // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_SetStaticMesh_ReturnValue;                // 0x0002(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_SetStaticMesh_ReturnValue_1;              // 0x0003(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_SetStaticMesh_ReturnValue_2;              // 0x0004(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UStaticMesh*                            CallFunc_Map_Find_Value;                           // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Map_Find_ReturnValue;                     // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_SetStaticMesh_ReturnValue_3;              // 0x0011(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_NotEqual_ByteByte_ReturnValue_1;          // 0x0012(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_13[0x5];                                       // 0x0013(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	class UStaticMesh*                            CallFunc_Map_Find_Value_1;                         // 0x0018(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Map_Find_ReturnValue_1;                   // 0x0020(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_SetStaticMesh_ReturnValue_4;              // 0x0021(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_Van_Base_C_SetMeshes) == 0x000008, "Wrong alignment on BP_Van_Base_C_SetMeshes");
static_assert(sizeof(BP_Van_Base_C_SetMeshes) == 0x000028, "Wrong size on BP_Van_Base_C_SetMeshes");
static_assert(offsetof(BP_Van_Base_C_SetMeshes, Temp_byte_Variable) == 0x000000, "Member 'BP_Van_Base_C_SetMeshes::Temp_byte_Variable' has a wrong offset!");
static_assert(offsetof(BP_Van_Base_C_SetMeshes, CallFunc_NotEqual_ByteByte_ReturnValue) == 0x000001, "Member 'BP_Van_Base_C_SetMeshes::CallFunc_NotEqual_ByteByte_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Van_Base_C_SetMeshes, CallFunc_SetStaticMesh_ReturnValue) == 0x000002, "Member 'BP_Van_Base_C_SetMeshes::CallFunc_SetStaticMesh_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Van_Base_C_SetMeshes, CallFunc_SetStaticMesh_ReturnValue_1) == 0x000003, "Member 'BP_Van_Base_C_SetMeshes::CallFunc_SetStaticMesh_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_Van_Base_C_SetMeshes, CallFunc_SetStaticMesh_ReturnValue_2) == 0x000004, "Member 'BP_Van_Base_C_SetMeshes::CallFunc_SetStaticMesh_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BP_Van_Base_C_SetMeshes, CallFunc_Map_Find_Value) == 0x000008, "Member 'BP_Van_Base_C_SetMeshes::CallFunc_Map_Find_Value' has a wrong offset!");
static_assert(offsetof(BP_Van_Base_C_SetMeshes, CallFunc_Map_Find_ReturnValue) == 0x000010, "Member 'BP_Van_Base_C_SetMeshes::CallFunc_Map_Find_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Van_Base_C_SetMeshes, CallFunc_SetStaticMesh_ReturnValue_3) == 0x000011, "Member 'BP_Van_Base_C_SetMeshes::CallFunc_SetStaticMesh_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(BP_Van_Base_C_SetMeshes, CallFunc_NotEqual_ByteByte_ReturnValue_1) == 0x000012, "Member 'BP_Van_Base_C_SetMeshes::CallFunc_NotEqual_ByteByte_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_Van_Base_C_SetMeshes, CallFunc_Map_Find_Value_1) == 0x000018, "Member 'BP_Van_Base_C_SetMeshes::CallFunc_Map_Find_Value_1' has a wrong offset!");
static_assert(offsetof(BP_Van_Base_C_SetMeshes, CallFunc_Map_Find_ReturnValue_1) == 0x000020, "Member 'BP_Van_Base_C_SetMeshes::CallFunc_Map_Find_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_Van_Base_C_SetMeshes, CallFunc_SetStaticMesh_ReturnValue_4) == 0x000021, "Member 'BP_Van_Base_C_SetMeshes::CallFunc_SetStaticMesh_ReturnValue_4' has a wrong offset!");

// Function BP_Van_Base.BP_Van_Base_C.SetWheels
// 0x0020 (0x0020 - 0x0000)
struct BP_Van_Base_C_SetWheels final
{
public:
	class UStaticMesh*                            WheelMesh;                                         // 0x0000(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_SetStaticMesh_ReturnValue;                // 0x0008(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_SetStaticMesh_ReturnValue_1;              // 0x0009(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_SetStaticMesh_ReturnValue_2;              // 0x000A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_SetStaticMesh_ReturnValue_3;              // 0x000B(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UStaticMesh*                            CallFunc_Map_Find_Value;                           // 0x0010(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Map_Find_ReturnValue;                     // 0x0018(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_Van_Base_C_SetWheels) == 0x000008, "Wrong alignment on BP_Van_Base_C_SetWheels");
static_assert(sizeof(BP_Van_Base_C_SetWheels) == 0x000020, "Wrong size on BP_Van_Base_C_SetWheels");
static_assert(offsetof(BP_Van_Base_C_SetWheels, WheelMesh) == 0x000000, "Member 'BP_Van_Base_C_SetWheels::WheelMesh' has a wrong offset!");
static_assert(offsetof(BP_Van_Base_C_SetWheels, CallFunc_SetStaticMesh_ReturnValue) == 0x000008, "Member 'BP_Van_Base_C_SetWheels::CallFunc_SetStaticMesh_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Van_Base_C_SetWheels, CallFunc_SetStaticMesh_ReturnValue_1) == 0x000009, "Member 'BP_Van_Base_C_SetWheels::CallFunc_SetStaticMesh_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_Van_Base_C_SetWheels, CallFunc_SetStaticMesh_ReturnValue_2) == 0x00000A, "Member 'BP_Van_Base_C_SetWheels::CallFunc_SetStaticMesh_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BP_Van_Base_C_SetWheels, CallFunc_SetStaticMesh_ReturnValue_3) == 0x00000B, "Member 'BP_Van_Base_C_SetWheels::CallFunc_SetStaticMesh_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(BP_Van_Base_C_SetWheels, CallFunc_Map_Find_Value) == 0x000010, "Member 'BP_Van_Base_C_SetWheels::CallFunc_Map_Find_Value' has a wrong offset!");
static_assert(offsetof(BP_Van_Base_C_SetWheels, CallFunc_Map_Find_ReturnValue) == 0x000018, "Member 'BP_Van_Base_C_SetWheels::CallFunc_Map_Find_ReturnValue' has a wrong offset!");

}

