#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_WeatherManager

#include "Basic.hpp"

#include "BP_WeatherManager_classes.hpp"
#include "BP_WeatherManager_parameters.hpp"


namespace SDK
{

// Function BP_WeatherManager.BP_WeatherManager_C.ExecuteUbergraph_BP_WeatherManager
// (Final, UbergraphFunction, HasDefaults)
// Parameters:
// int32                                   EntryPoint                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_WeatherManager_C::ExecuteUbergraph_BP_WeatherManager(int32 EntryPoint)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_WeatherManager_C", "ExecuteUbergraph_BP_WeatherManager");

	Params::BP_WeatherManager_C_ExecuteUbergraph_BP_WeatherManager Parms{};

	Parms.EntryPoint = EntryPoint;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_WeatherManager.BP_WeatherManager_C.ReceiveBeginPlay
// (Event, Protected, BlueprintEvent)

void ABP_WeatherManager_C::ReceiveBeginPlay()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_WeatherManager_C", "ReceiveBeginPlay");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_WeatherManager.BP_WeatherManager_C.ReceiveTick
// (Event, Public, BlueprintEvent)
// Parameters:
// float                                   DeltaSeconds                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_WeatherManager_C::ReceiveTick(float DeltaSeconds)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_WeatherManager_C", "ReceiveTick");

	Params::BP_WeatherManager_C_ReceiveTick Parms{};

	Parms.DeltaSeconds = DeltaSeconds;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_WeatherManager.BP_WeatherManager_C.InpActEvt_SmokeAdd_K2Node_InputActionEvent_0
// (BlueprintEvent)
// Parameters:
// struct FKey                             Key                                                    (BlueprintVisible, BlueprintReadOnly, Parm, HasGetValueTypeHash)

void ABP_WeatherManager_C::InpActEvt_SmokeAdd_K2Node_InputActionEvent_0(const struct FKey& Key)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_WeatherManager_C", "InpActEvt_SmokeAdd_K2Node_InputActionEvent_0");

	Params::BP_WeatherManager_C_InpActEvt_SmokeAdd_K2Node_InputActionEvent_0 Parms{};

	Parms.Key = std::move(Key);

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_WeatherManager.BP_WeatherManager_C.InpActEvt_SmokeRemove_K2Node_InputActionEvent_1
// (BlueprintEvent)
// Parameters:
// struct FKey                             Key                                                    (BlueprintVisible, BlueprintReadOnly, Parm, HasGetValueTypeHash)

void ABP_WeatherManager_C::InpActEvt_SmokeRemove_K2Node_InputActionEvent_1(const struct FKey& Key)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_WeatherManager_C", "InpActEvt_SmokeRemove_K2Node_InputActionEvent_1");

	Params::BP_WeatherManager_C_InpActEvt_SmokeRemove_K2Node_InputActionEvent_1 Parms{};

	Parms.Key = std::move(Key);

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_WeatherManager.BP_WeatherManager_C.InpActEvt_Ctrl+Alt_NumPadNine_K2Node_InputKeyEvent_0
// (BlueprintEvent)
// Parameters:
// struct FKey                             Key                                                    (BlueprintVisible, BlueprintReadOnly, Parm, HasGetValueTypeHash)

void ABP_WeatherManager_C::InpActEvt_CtrlPlusAlt_NumPadNine_K2Node_InputKeyEvent_0(const struct FKey& Key)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_WeatherManager_C", "InpActEvt_Ctrl+Alt_NumPadNine_K2Node_InputKeyEvent_0");

	Params::BP_WeatherManager_C_InpActEvt_CtrlPlusAlt_NumPadNine_K2Node_InputKeyEvent_0 Parms{};

	Parms.Key = std::move(Key);

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_WeatherManager.BP_WeatherManager_C.UserConstructionScript
// (Event, Public, BlueprintCallable, BlueprintEvent)

void ABP_WeatherManager_C::UserConstructionScript()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_WeatherManager_C", "UserConstructionScript");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_WeatherManager.BP_WeatherManager_C.UpdateMaterialParams
// (Public, BlueprintCallable, BlueprintEvent)

void ABP_WeatherManager_C::UpdateMaterialParams()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_WeatherManager_C", "UpdateMaterialParams");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_WeatherManager.BP_WeatherManager_C.UpdateRainPPEffects
// (Public, BlueprintCallable, BlueprintEvent)

void ABP_WeatherManager_C::UpdateRainPPEffects()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_WeatherManager_C", "UpdateRainPPEffects");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_WeatherManager.BP_WeatherManager_C.IsRaining
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    OutRaining                                             (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ABP_WeatherManager_C::IsRaining(bool* OutRaining)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_WeatherManager_C", "IsRaining");

	Params::BP_WeatherManager_C_IsRaining Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (OutRaining != nullptr)
		*OutRaining = Parms.OutRaining;
}


// Function BP_WeatherManager.BP_WeatherManager_C.IsWet
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    OutWet                                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ABP_WeatherManager_C::IsWet(bool* OutWet)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_WeatherManager_C", "IsWet");

	Params::BP_WeatherManager_C_IsWet Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (OutWet != nullptr)
		*OutWet = Parms.OutWet;
}


// Function BP_WeatherManager.BP_WeatherManager_C.GetCurrentRainAmount
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// float                                   OutRainAmount                                          (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_WeatherManager_C::GetCurrentRainAmount(float* OutRainAmount)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_WeatherManager_C", "GetCurrentRainAmount");

	Params::BP_WeatherManager_C_GetCurrentRainAmount Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (OutRainAmount != nullptr)
		*OutRainAmount = Parms.OutRainAmount;
}


// Function BP_WeatherManager.BP_WeatherManager_C.GetCurrentWetnessAmount
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// float                                   OutWetnessAmount                                       (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_WeatherManager_C::GetCurrentWetnessAmount(float* OutWetnessAmount)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_WeatherManager_C", "GetCurrentWetnessAmount");

	Params::BP_WeatherManager_C_GetCurrentWetnessAmount Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (OutWetnessAmount != nullptr)
		*OutWetnessAmount = Parms.OutWetnessAmount;
}


// Function BP_WeatherManager.BP_WeatherManager_C.UpdateAll
// (Public, BlueprintCallable, BlueprintEvent)

void ABP_WeatherManager_C::UpdateAll()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_WeatherManager_C", "UpdateAll");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_WeatherManager.BP_WeatherManager_C.UpdateWeatherManagerComponent
// (Public, BlueprintCallable, BlueprintEvent)

void ABP_WeatherManager_C::UpdateWeatherManagerComponent()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_WeatherManager_C", "UpdateWeatherManagerComponent");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_WeatherManager.BP_WeatherManager_C.GetCurrentCameraPosition
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FVector                          OutPosition                                            (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FRotator                         OutRotation                                            (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
// bool                                    OutPositionValid                                       (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ABP_WeatherManager_C::GetCurrentCameraPosition(struct FVector* OutPosition, struct FRotator* OutRotation, bool* OutPositionValid)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_WeatherManager_C", "GetCurrentCameraPosition");

	Params::BP_WeatherManager_C_GetCurrentCameraPosition Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (OutPosition != nullptr)
		*OutPosition = std::move(Parms.OutPosition);

	if (OutRotation != nullptr)
		*OutRotation = std::move(Parms.OutRotation);

	if (OutPositionValid != nullptr)
		*OutPositionValid = Parms.OutPositionValid;
}


// Function BP_WeatherManager.BP_WeatherManager_C.UpdateParticleSystems
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)

void ABP_WeatherManager_C::UpdateParticleSystems()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_WeatherManager_C", "UpdateParticleSystems");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_WeatherManager.BP_WeatherManager_C.Simulate
// (Public, BlueprintCallable, BlueprintEvent)

void ABP_WeatherManager_C::Simulate()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_WeatherManager_C", "Simulate");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_WeatherManager.BP_WeatherManager_C.IsRainPostprocessEnabled
// (Event, Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)

bool ABP_WeatherManager_C::IsRainPostprocessEnabled()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_WeatherManager_C", "IsRainPostprocessEnabled");

	Params::BP_WeatherManager_C_IsRainPostprocessEnabled Parms{};

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function BP_WeatherManager.BP_WeatherManager_C.IsRainOcclusionEnabled
// (Event, Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)

bool ABP_WeatherManager_C::IsRainOcclusionEnabled()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_WeatherManager_C", "IsRainOcclusionEnabled");

	Params::BP_WeatherManager_C_IsRainOcclusionEnabled Parms{};

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function BP_WeatherManager.BP_WeatherManager_C.GetCurrentSnowingAmount
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// float                                   OutSnowingAmount                                       (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_WeatherManager_C::GetCurrentSnowingAmount(float* OutSnowingAmount)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_WeatherManager_C", "GetCurrentSnowingAmount");

	Params::BP_WeatherManager_C_GetCurrentSnowingAmount Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (OutSnowingAmount != nullptr)
		*OutSnowingAmount = Parms.OutSnowingAmount;
}


// Function BP_WeatherManager.BP_WeatherManager_C.SetRainParticleSystemsEnabled
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    IsEnabled                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ABP_WeatherManager_C::SetRainParticleSystemsEnabled(bool IsEnabled)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_WeatherManager_C", "SetRainParticleSystemsEnabled");

	Params::BP_WeatherManager_C_SetRainParticleSystemsEnabled Parms{};

	Parms.IsEnabled = IsEnabled;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_WeatherManager.BP_WeatherManager_C.SetSnowParticleSystemsEnabled
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    IsEnabled                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ABP_WeatherManager_C::SetSnowParticleSystemsEnabled(bool IsEnabled)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_WeatherManager_C", "SetSnowParticleSystemsEnabled");

	Params::BP_WeatherManager_C_SetSnowParticleSystemsEnabled Parms{};

	Parms.IsEnabled = IsEnabled;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_WeatherManager.BP_WeatherManager_C.IsSnowing
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    OutRaining                                             (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ABP_WeatherManager_C::IsSnowing(bool* OutRaining)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_WeatherManager_C", "IsSnowing");

	Params::BP_WeatherManager_C_IsSnowing Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (OutRaining != nullptr)
		*OutRaining = Parms.OutRaining;
}


// Function BP_WeatherManager.BP_WeatherManager_C.GetCurrentSnowCoverAmount
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// float                                   OutSnowCoverAmount                                     (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_WeatherManager_C::GetCurrentSnowCoverAmount(float* OutSnowCoverAmount)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_WeatherManager_C", "GetCurrentSnowCoverAmount");

	Params::BP_WeatherManager_C_GetCurrentSnowCoverAmount Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (OutSnowCoverAmount != nullptr)
		*OutSnowCoverAmount = Parms.OutSnowCoverAmount;
}


// Function BP_WeatherManager.BP_WeatherManager_C.IsSnowCover
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    OutSnowCover                                           (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ABP_WeatherManager_C::IsSnowCover(bool* OutSnowCover)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_WeatherManager_C", "IsSnowCover");

	Params::BP_WeatherManager_C_IsSnowCover Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (OutSnowCover != nullptr)
		*OutSnowCover = Parms.OutSnowCover;
}


// Function BP_WeatherManager.BP_WeatherManager_C.UpdateSnowPPEffects
// (Public, BlueprintCallable, BlueprintEvent)

void ABP_WeatherManager_C::UpdateSnowPPEffects()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_WeatherManager_C", "UpdateSnowPPEffects");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_WeatherManager.BP_WeatherManager_C.UpdateWeatherPPEffects
// (Public, BlueprintCallable, BlueprintEvent)

void ABP_WeatherManager_C::UpdateWeatherPPEffects()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_WeatherManager_C", "UpdateWeatherPPEffects");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_WeatherManager.BP_WeatherManager_C.InitForecastSetups
// (Public, BlueprintCallable, BlueprintEvent)

void ABP_WeatherManager_C::InitForecastSetups()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_WeatherManager_C", "InitForecastSetups");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_WeatherManager.BP_WeatherManager_C.GetSunDirection
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FVector                          OutDir                                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_WeatherManager_C::GetSunDirection(struct FVector* OutDir)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_WeatherManager_C", "GetSunDirection");

	Params::BP_WeatherManager_C_GetSunDirection Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (OutDir != nullptr)
		*OutDir = std::move(Parms.OutDir);
}


// Function BP_WeatherManager.BP_WeatherManager_C.UpdateLevelAmbience
// (Public, BlueprintCallable, BlueprintEvent)

void ABP_WeatherManager_C::UpdateLevelAmbience()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_WeatherManager_C", "UpdateLevelAmbience");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_WeatherManager.BP_WeatherManager_C.InitLevelAmbience
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)

void ABP_WeatherManager_C::InitLevelAmbience()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_WeatherManager_C", "InitLevelAmbience");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_WeatherManager.BP_WeatherManager_C.GetCurrentWindIntensity
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// float                                   OutWindIntensity                                       (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_WeatherManager_C::GetCurrentWindIntensity(float* OutWindIntensity)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_WeatherManager_C", "GetCurrentWindIntensity");

	Params::BP_WeatherManager_C_GetCurrentWindIntensity Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (OutWindIntensity != nullptr)
		*OutWindIntensity = Parms.OutWindIntensity;
}


// Function BP_WeatherManager.BP_WeatherManager_C.DisableWeather
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    Disable                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ABP_WeatherManager_C::DisableWeather(bool Disable)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_WeatherManager_C", "DisableWeather");

	Params::BP_WeatherManager_C_DisableWeather Parms{};

	Parms.Disable = Disable;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_WeatherManager.BP_WeatherManager_C.GetMapBoundaries
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FLinearColor                     MapSizeDetails                                         (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    Success                                                (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ABP_WeatherManager_C::GetMapBoundaries(struct FLinearColor* MapSizeDetails, bool* Success)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_WeatherManager_C", "GetMapBoundaries");

	Params::BP_WeatherManager_C_GetMapBoundaries Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (MapSizeDetails != nullptr)
		*MapSizeDetails = std::move(Parms.MapSizeDetails);

	if (Success != nullptr)
		*Success = Parms.Success;
}


// Function BP_WeatherManager.BP_WeatherManager_C.AddSmokeCloud
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FVector                          Position                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   Radius                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class UParticleSystem*                  Particles                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class UParticleSystem*                  ParticlesBuilding                                      (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FS_SmokeCloud                    Cloud                                                  (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    Success                                                (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ABP_WeatherManager_C::AddSmokeCloud(const struct FVector& Position, int32 Radius, class UParticleSystem* Particles, class UParticleSystem* ParticlesBuilding, struct FS_SmokeCloud* Cloud, bool* Success)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_WeatherManager_C", "AddSmokeCloud");

	Params::BP_WeatherManager_C_AddSmokeCloud Parms{};

	Parms.Position = std::move(Position);
	Parms.Radius = Radius;
	Parms.Particles = Particles;
	Parms.ParticlesBuilding = ParticlesBuilding;

	UObject::ProcessEvent(Func, &Parms);

	if (Cloud != nullptr)
		*Cloud = std::move(Parms.Cloud);

	if (Success != nullptr)
		*Success = Parms.Success;
}


// Function BP_WeatherManager.BP_WeatherManager_C.InitSmokeDistribution
// (Public, BlueprintCallable, BlueprintEvent)

void ABP_WeatherManager_C::InitSmokeDistribution()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_WeatherManager_C", "InitSmokeDistribution");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_WeatherManager.BP_WeatherManager_C.RemoveSmokeCloud
// (Public, BlueprintCallable, BlueprintEvent)

void ABP_WeatherManager_C::RemoveSmokeCloud()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_WeatherManager_C", "RemoveSmokeCloud");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_WeatherManager.BP_WeatherManager_C.DebugSpawnSmokeCloud
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)

void ABP_WeatherManager_C::DebugSpawnSmokeCloud()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_WeatherManager_C", "DebugSpawnSmokeCloud");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_WeatherManager.BP_WeatherManager_C.CheckCurrentWeatherStringForLightScenarios
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// class FString                           CurrWeather                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)
// bool                                    LightScenario                                          (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ABP_WeatherManager_C::CheckCurrentWeatherStringForLightScenarios(const class FString& CurrWeather, bool* LightScenario)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_WeatherManager_C", "CheckCurrentWeatherStringForLightScenarios");

	Params::BP_WeatherManager_C_CheckCurrentWeatherStringForLightScenarios Parms{};

	Parms.CurrWeather = std::move(CurrWeather);

	UObject::ProcessEvent(Func, &Parms);

	if (LightScenario != nullptr)
		*LightScenario = Parms.LightScenario;
}

}

