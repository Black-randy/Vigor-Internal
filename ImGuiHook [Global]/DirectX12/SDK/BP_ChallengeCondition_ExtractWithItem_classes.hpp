#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_ChallengeCondition_ExtractWithItem

#include "Basic.hpp"

#include "Flame_structs.hpp"
#include "Engine_structs.hpp"
#include "E_ChallengeConditionEvaluationType_structs.hpp"
#include "BP_ChallengeCondition_Base_classes.hpp"


namespace SDK
{

// BlueprintGeneratedClass BP_ChallengeCondition_ExtractWithItem.BP_ChallengeCondition_ExtractWithItem_C
// 0x00C8 (0x0448 - 0x0380)
class ABP_ChallengeCondition_ExtractWithItem_C final : public ABP_ChallengeCondition_Base_C
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame_BP_ChallengeCondition_ExtractWithItem_C; // 0x0380(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	int32                                         Amount_to_Loot;                                    // 0x0388(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_38C[0x4];                                      // 0x038C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UClass*                                 Item_Type_to_Loot;                                 // 0x0390(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EItemCategory                                 Item_Category_to_Loot;                             // 0x0398(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_399[0x7];                                      // 0x0399(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TSet<EItemCategory>                           ValidItemCategories;                               // 0x03A0(0x0050)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance)
	E_ChallengeConditionEvaluationType            Evaluation_Type;                                   // 0x03F0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3F1[0x7];                                      // 0x03F1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   Item_Name;                                         // 0x03F8(0x0018)(Edit, BlueprintVisible, DisableEditOnInstance)
	int32                                         MinRarityRequired;                                 // 0x0410(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_414[0x4];                                      // 0x0414(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<EItemCategory>                         ItemCategoriesToLoot;                              // 0x0418(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	TArray<class UClass*>                         ItemsToLoot;                                       // 0x0428(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	TArray<class FText>                           ItemsNames;                                        // 0x0438(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)

public:
	void ExecuteUbergraph_BP_ChallengeCondition_ExtractWithItem(int32 EntryPoint);
	void Encounter_Result_Screen_Entered(const struct FUserMatchResult& Match_Result);
	void ReceiveBeginPlay();
	void Get_Maximum_Progress(int32* Maximum_Progress);
	void Get_Condition_Text(class FText* Condition_Text);
	class FText GetAllItemsNames();
	void IsConditionMet_(TArray<struct FItemSlot>& Array, int32* ItemsCount);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BP_ChallengeCondition_ExtractWithItem_C">();
	}
	static class ABP_ChallengeCondition_ExtractWithItem_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<ABP_ChallengeCondition_ExtractWithItem_C>();
	}
};
static_assert(alignof(ABP_ChallengeCondition_ExtractWithItem_C) == 0x000008, "Wrong alignment on ABP_ChallengeCondition_ExtractWithItem_C");
static_assert(sizeof(ABP_ChallengeCondition_ExtractWithItem_C) == 0x000448, "Wrong size on ABP_ChallengeCondition_ExtractWithItem_C");
static_assert(offsetof(ABP_ChallengeCondition_ExtractWithItem_C, UberGraphFrame_BP_ChallengeCondition_ExtractWithItem_C) == 0x000380, "Member 'ABP_ChallengeCondition_ExtractWithItem_C::UberGraphFrame_BP_ChallengeCondition_ExtractWithItem_C' has a wrong offset!");
static_assert(offsetof(ABP_ChallengeCondition_ExtractWithItem_C, Amount_to_Loot) == 0x000388, "Member 'ABP_ChallengeCondition_ExtractWithItem_C::Amount_to_Loot' has a wrong offset!");
static_assert(offsetof(ABP_ChallengeCondition_ExtractWithItem_C, Item_Type_to_Loot) == 0x000390, "Member 'ABP_ChallengeCondition_ExtractWithItem_C::Item_Type_to_Loot' has a wrong offset!");
static_assert(offsetof(ABP_ChallengeCondition_ExtractWithItem_C, Item_Category_to_Loot) == 0x000398, "Member 'ABP_ChallengeCondition_ExtractWithItem_C::Item_Category_to_Loot' has a wrong offset!");
static_assert(offsetof(ABP_ChallengeCondition_ExtractWithItem_C, ValidItemCategories) == 0x0003A0, "Member 'ABP_ChallengeCondition_ExtractWithItem_C::ValidItemCategories' has a wrong offset!");
static_assert(offsetof(ABP_ChallengeCondition_ExtractWithItem_C, Evaluation_Type) == 0x0003F0, "Member 'ABP_ChallengeCondition_ExtractWithItem_C::Evaluation_Type' has a wrong offset!");
static_assert(offsetof(ABP_ChallengeCondition_ExtractWithItem_C, Item_Name) == 0x0003F8, "Member 'ABP_ChallengeCondition_ExtractWithItem_C::Item_Name' has a wrong offset!");
static_assert(offsetof(ABP_ChallengeCondition_ExtractWithItem_C, MinRarityRequired) == 0x000410, "Member 'ABP_ChallengeCondition_ExtractWithItem_C::MinRarityRequired' has a wrong offset!");
static_assert(offsetof(ABP_ChallengeCondition_ExtractWithItem_C, ItemCategoriesToLoot) == 0x000418, "Member 'ABP_ChallengeCondition_ExtractWithItem_C::ItemCategoriesToLoot' has a wrong offset!");
static_assert(offsetof(ABP_ChallengeCondition_ExtractWithItem_C, ItemsToLoot) == 0x000428, "Member 'ABP_ChallengeCondition_ExtractWithItem_C::ItemsToLoot' has a wrong offset!");
static_assert(offsetof(ABP_ChallengeCondition_ExtractWithItem_C, ItemsNames) == 0x000438, "Member 'ABP_ChallengeCondition_ExtractWithItem_C::ItemsNames' has a wrong offset!");

}

