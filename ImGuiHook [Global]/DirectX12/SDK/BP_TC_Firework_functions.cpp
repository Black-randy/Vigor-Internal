#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_TC_Firework

#include "Basic.hpp"

#include "BP_TC_Firework_classes.hpp"
#include "BP_TC_Firework_parameters.hpp"


namespace SDK
{

// Function BP_TC_Firework.BP_TC_Firework_C.ExecuteUbergraph_BP_TC_Firework
// (Final, UbergraphFunction, HasDefaults)
// Parameters:
// int32                                   EntryPoint                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_TC_Firework_C::ExecuteUbergraph_BP_TC_Firework(int32 EntryPoint)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_TC_Firework_C", "ExecuteUbergraph_BP_TC_Firework");

	Params::BP_TC_Firework_C_ExecuteUbergraph_BP_TC_Firework Parms{};

	Parms.EntryPoint = EntryPoint;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_TC_Firework.BP_TC_Firework_C.ReceiveEndPlay
// (Event, Protected, BlueprintEvent)
// Parameters:
// EEndPlayReason                          EndPlayReason                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_TC_Firework_C::ReceiveEndPlay(EEndPlayReason EndPlayReason)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_TC_Firework_C", "ReceiveEndPlay");

	Params::BP_TC_Firework_C_ReceiveEndPlay Parms{};

	Parms.EndPlayReason = EndPlayReason;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_TC_Firework.BP_TC_Firework_C.ComputeLineTracers
// (BlueprintCallable, BlueprintEvent)

void ABP_TC_Firework_C::ComputeLineTracers()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_TC_Firework_C", "ComputeLineTracers");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_TC_Firework.BP_TC_Firework_C.ReceiveBeginPlay
// (Event, Protected, BlueprintEvent)

void ABP_TC_Firework_C::ReceiveBeginPlay()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_TC_Firework_C", "ReceiveBeginPlay");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_TC_Firework.BP_TC_Firework_C.Trap_Placement_CanBePlaced
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FHitResult                       Hit                                                    (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, ContainsInstancedReference)
// float                                   MaxZNormal                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// TArray<TSoftClassPtr<class UClass>>     ActorsThatBlocksThePlacement                           (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
// TArray<EPhysicalSurface>                SurfacesThatBlocksThePlacement                         (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
// bool                                    Trap_CanBePlacedInWater                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// bool                                    Trap_CanBePlacedVertically                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// bool                                    CanBePlaced                                            (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ABP_TC_Firework_C::Trap_Placement_CanBePlaced(const struct FHitResult& Hit, float MaxZNormal, TArray<TSoftClassPtr<class UClass>>& ActorsThatBlocksThePlacement, TArray<EPhysicalSurface>& SurfacesThatBlocksThePlacement, bool Trap_CanBePlacedInWater, bool Trap_CanBePlacedVertically, bool* CanBePlaced)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_TC_Firework_C", "Trap_Placement_CanBePlaced");

	Params::BP_TC_Firework_C_Trap_Placement_CanBePlaced Parms{};

	Parms.Hit = std::move(Hit);
	Parms.MaxZNormal = MaxZNormal;
	Parms.ActorsThatBlocksThePlacement = std::move(ActorsThatBlocksThePlacement);
	Parms.SurfacesThatBlocksThePlacement = std::move(SurfacesThatBlocksThePlacement);
	Parms.Trap_CanBePlacedInWater = Trap_CanBePlacedInWater;
	Parms.Trap_CanBePlacedVertically = Trap_CanBePlacedVertically;

	UObject::ProcessEvent(Func, &Parms);

	ActorsThatBlocksThePlacement = std::move(Parms.ActorsThatBlocksThePlacement);
	SurfacesThatBlocksThePlacement = std::move(Parms.SurfacesThatBlocksThePlacement);

	if (CanBePlaced != nullptr)
		*CanBePlaced = Parms.CanBePlaced;
}


// Function BP_TC_Firework.BP_TC_Firework_C.Trap_Hologram_Show
// (Public, BlueprintCallable, BlueprintEvent)

void ABP_TC_Firework_C::Trap_Hologram_Show()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_TC_Firework_C", "Trap_Hologram_Show");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_TC_Firework.BP_TC_Firework_C.Trap_Hologram_Hide
// (Public, BlueprintCallable, BlueprintEvent)

void ABP_TC_Firework_C::Trap_Hologram_Hide()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_TC_Firework_C", "Trap_Hologram_Hide");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_TC_Firework.BP_TC_Firework_C.ThrowLinetracers
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// TArray<struct FVector>                  Array                                                  (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
// bool                                    CanBeLaunched_0                                        (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ABP_TC_Firework_C::ThrowLinetracers(TArray<struct FVector>& Array, bool* CanBeLaunched_0)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_TC_Firework_C", "ThrowLinetracers");

	Params::BP_TC_Firework_C_ThrowLinetracers Parms{};

	Parms.Array = std::move(Array);

	UObject::ProcessEvent(Func, &Parms);

	Array = std::move(Parms.Array);

	if (CanBeLaunched_0 != nullptr)
		*CanBeLaunched_0 = Parms.CanBeLaunched_0;
}


// Function BP_TC_Firework.BP_TC_Firework_C.PlacementIsCorrect
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    CanBePlaced                                            (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ABP_TC_Firework_C::PlacementIsCorrect(bool* CanBePlaced)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_TC_Firework_C", "PlacementIsCorrect");

	Params::BP_TC_Firework_C_PlacementIsCorrect Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (CanBePlaced != nullptr)
		*CanBePlaced = Parms.CanBePlaced;
}

}

