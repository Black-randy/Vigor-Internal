#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_BulletManager

#include "Basic.hpp"

#include "BP_BulletManager_classes.hpp"
#include "BP_BulletManager_parameters.hpp"


namespace SDK
{

// Function BP_BulletManager.BP_BulletManager_C.ExecuteUbergraph_BP_BulletManager
// (Final, UbergraphFunction, HasDefaults)
// Parameters:
// int32                                   EntryPoint                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_BulletManager_C::ExecuteUbergraph_BP_BulletManager(int32 EntryPoint)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_BulletManager_C", "ExecuteUbergraph_BP_BulletManager");

	Params::BP_BulletManager_C_ExecuteUbergraph_BP_BulletManager Parms{};

	Parms.EntryPoint = EntryPoint;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_BulletManager.BP_BulletManager_C.ReceiveBeginPlay
// (Event, Protected, BlueprintEvent)

void ABP_BulletManager_C::ReceiveBeginPlay()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_BulletManager_C", "ReceiveBeginPlay");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_BulletManager.BP_BulletManager_C.OnProjectileFlybyGeneric
// (Event, Public, HasOutParams, BlueprintEvent)
// Parameters:
// EProjectileType                         ProjectileType                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FVector                          ProjectileOriginLocation                               (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class AHumanCharacter*                  PlayerVictim                                           (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class AHumanCharacter*                  PlayerInstigator                                       (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    bPlayerIsBeingHit                                      (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// struct FHitResultSimplified             HitOptimised                                           (BlueprintVisible, BlueprintReadOnly, Parm, NoDestructor, ContainsInstancedReference)

void ABP_BulletManager_C::OnProjectileFlybyGeneric(EProjectileType ProjectileType, const struct FVector& ProjectileOriginLocation, const class AHumanCharacter* PlayerVictim, const class AHumanCharacter* PlayerInstigator, bool bPlayerIsBeingHit, const struct FHitResultSimplified& HitOptimised)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_BulletManager_C", "OnProjectileFlybyGeneric");

	Params::BP_BulletManager_C_OnProjectileFlybyGeneric Parms{};

	Parms.ProjectileType = ProjectileType;
	Parms.ProjectileOriginLocation = std::move(ProjectileOriginLocation);
	Parms.PlayerVictim = PlayerVictim;
	Parms.PlayerInstigator = PlayerInstigator;
	Parms.bPlayerIsBeingHit = bPlayerIsBeingHit;
	Parms.HitOptimised = std::move(HitOptimised);

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_BulletManager.BP_BulletManager_C.CustomEvent_0
// (HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FHitResultSimplified             HitResultOptimised                                     (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm, NoDestructor, ContainsInstancedReference)
// struct FAmmoTypeConfiguration           BulletTypeConfig                                       (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
// class AHumanCharacter*                  OwnerCharacter                                         (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    bIsPenetrating                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// bool                                    bIsDeformed                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ABP_BulletManager_C::CustomEvent_0(const struct FHitResultSimplified& HitResultOptimised, const struct FAmmoTypeConfiguration& BulletTypeConfig, const class AHumanCharacter* OwnerCharacter, bool bIsPenetrating, bool bIsDeformed)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_BulletManager_C", "CustomEvent_0");

	Params::BP_BulletManager_C_CustomEvent_0 Parms{};

	Parms.HitResultOptimised = std::move(HitResultOptimised);
	Parms.BulletTypeConfig = std::move(BulletTypeConfig);
	Parms.OwnerCharacter = OwnerCharacter;
	Parms.bIsPenetrating = bIsPenetrating;
	Parms.bIsDeformed = bIsDeformed;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_BulletManager.BP_BulletManager_C.OnBulletHitOwningClientEvent
// (HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FHitResultSimplified             HitResultOptimised                                     (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm, NoDestructor, ContainsInstancedReference)
// struct FAmmoTypeConfiguration           BulletTypeConfig                                       (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
// class AHumanCharacter*                  OwnerCharacter                                         (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    bIsPenetrating                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// bool                                    bIsDeformed                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ABP_BulletManager_C::OnBulletHitOwningClientEvent(const struct FHitResultSimplified& HitResultOptimised, const struct FAmmoTypeConfiguration& BulletTypeConfig, const class AHumanCharacter* OwnerCharacter, bool bIsPenetrating, bool bIsDeformed)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_BulletManager_C", "OnBulletHitOwningClientEvent");

	Params::BP_BulletManager_C_OnBulletHitOwningClientEvent Parms{};

	Parms.HitResultOptimised = std::move(HitResultOptimised);
	Parms.BulletTypeConfig = std::move(BulletTypeConfig);
	Parms.OwnerCharacter = OwnerCharacter;
	Parms.bIsPenetrating = bIsPenetrating;
	Parms.bIsDeformed = bIsDeformed;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_BulletManager.BP_BulletManager_C.HitEvent
// (HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FHitResultSimplified             HitResultOptimised                                     (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm, NoDestructor, ContainsInstancedReference)
// struct FAmmoTypeConfiguration           BulletTypeConfig                                       (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
// class AHumanCharacter*                  OwnerCharacter                                         (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    bIsPenetrating                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// bool                                    bIsDeformed                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// struct FVector                          RelativeHitPosition                                    (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_BulletManager_C::HitEvent(const struct FHitResultSimplified& HitResultOptimised, const struct FAmmoTypeConfiguration& BulletTypeConfig, const class AHumanCharacter* OwnerCharacter, bool bIsPenetrating, bool bIsDeformed, const struct FVector& RelativeHitPosition)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_BulletManager_C", "HitEvent");

	Params::BP_BulletManager_C_HitEvent Parms{};

	Parms.HitResultOptimised = std::move(HitResultOptimised);
	Parms.BulletTypeConfig = std::move(BulletTypeConfig);
	Parms.OwnerCharacter = OwnerCharacter;
	Parms.bIsPenetrating = bIsPenetrating;
	Parms.bIsDeformed = bIsDeformed;
	Parms.RelativeHitPosition = std::move(RelativeHitPosition);

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_BulletManager.BP_BulletManager_C.StopArrowWhizz
// (Event, Public, BlueprintEvent)
// Parameters:
// class UAudioComponent*                  WhizzSound                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_BulletManager_C::StopArrowWhizz(class UAudioComponent* WhizzSound)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_BulletManager_C", "StopArrowWhizz");

	Params::BP_BulletManager_C_StopArrowWhizz Parms{};

	Parms.WhizzSound = WhizzSound;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_BulletManager.BP_BulletManager_C.CalcDecalScale
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// float                                   DecalScale                                             (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_BulletManager_C::CalcDecalScale(float* DecalScale)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_BulletManager_C", "CalcDecalScale");

	Params::BP_BulletManager_C_CalcDecalScale Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (DecalScale != nullptr)
		*DecalScale = Parms.DecalScale;
}


// Function BP_BulletManager.BP_BulletManager_C.CalcDecalRotation
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// struct FVector                          InVec                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FVector                          Axis                                                   (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FRotator                         ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)

struct FRotator ABP_BulletManager_C::CalcDecalRotation(const struct FVector& InVec, const struct FVector& Axis)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_BulletManager_C", "CalcDecalRotation");

	Params::BP_BulletManager_C_CalcDecalRotation Parms{};

	Parms.InVec = std::move(InVec);
	Parms.Axis = std::move(Axis);

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function BP_BulletManager.BP_BulletManager_C.OnBulletHitEventBP
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FVector                          ImpactPoint_0                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FVector                          ImpactNormal                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// EPhysicalSurface                        SurfaceType                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class AHumanCharacter*                  Owner_0                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FAmmoTypeConfiguration           BulletTypeConfig                                       (BlueprintVisible, BlueprintReadOnly, Parm)
// bool                                    IsPenetrated                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ABP_BulletManager_C::OnBulletHitEventBP(const struct FVector& ImpactPoint_0, const struct FVector& ImpactNormal, EPhysicalSurface SurfaceType, class AHumanCharacter* Owner_0, const struct FAmmoTypeConfiguration& BulletTypeConfig, bool IsPenetrated)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_BulletManager_C", "OnBulletHitEventBP");

	Params::BP_BulletManager_C_OnBulletHitEventBP Parms{};

	Parms.ImpactPoint_0 = std::move(ImpactPoint_0);
	Parms.ImpactNormal = std::move(ImpactNormal);
	Parms.SurfaceType = SurfaceType;
	Parms.Owner_0 = Owner_0;
	Parms.BulletTypeConfig = std::move(BulletTypeConfig);
	Parms.IsPenetrated = IsPenetrated;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_BulletManager.BP_BulletManager_C.SetHitSurfaceType
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class AActor*                           HitActor                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class UPhysicalMaterial*                PhysicalMaterial                                       (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// EPhysicalSurface                        HitSurfaceType_0                                       (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_BulletManager_C::SetHitSurfaceType(class AActor* HitActor, class UPhysicalMaterial* PhysicalMaterial, EPhysicalSurface HitSurfaceType_0)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_BulletManager_C", "SetHitSurfaceType");

	Params::BP_BulletManager_C_SetHitSurfaceType Parms{};

	Parms.HitActor = HitActor;
	Parms.PhysicalMaterial = PhysicalMaterial;
	Parms.HitSurfaceType_0 = HitSurfaceType_0;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_BulletManager.BP_BulletManager_C.GetHitSound
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// EPhysicalSurface                        SurfaceType                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FAmmoTypeConfiguration           AmmoType                                               (BlueprintVisible, BlueprintReadOnly, Parm)
// class FName                             BoneName                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class USoundBase*                       Sound                                                  (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class USoundConcurrency*                Concurrency                                            (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_BulletManager_C::GetHitSound(EPhysicalSurface SurfaceType, const struct FAmmoTypeConfiguration& AmmoType, class FName BoneName, class USoundBase** Sound, class USoundConcurrency** Concurrency)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_BulletManager_C", "GetHitSound");

	Params::BP_BulletManager_C_GetHitSound Parms{};

	Parms.SurfaceType = SurfaceType;
	Parms.AmmoType = std::move(AmmoType);
	Parms.BoneName = BoneName;

	UObject::ProcessEvent(Func, &Parms);

	if (Sound != nullptr)
		*Sound = Parms.Sound;

	if (Concurrency != nullptr)
		*Concurrency = Parms.Concurrency;
}


// Function BP_BulletManager.BP_BulletManager_C.PlayArrowWhizz
// (Event, Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FVector                          WhizzLocation                                          (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   ArrowSpeed                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class UAudioComponent*                  ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

class UAudioComponent* ABP_BulletManager_C::PlayArrowWhizz(const struct FVector& WhizzLocation, float ArrowSpeed)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_BulletManager_C", "PlayArrowWhizz");

	Params::BP_BulletManager_C_PlayArrowWhizz Parms{};

	Parms.WhizzLocation = std::move(WhizzLocation);
	Parms.ArrowSpeed = ArrowSpeed;

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function BP_BulletManager.BP_BulletManager_C.PlayHitSound
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FVector                          InputPin                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// EPhysicalSurface                        SurfaceType                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FAmmoTypeConfiguration           AmmoType                                               (BlueprintVisible, BlueprintReadOnly, Parm)
// class FName                             BoneName                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    IsPenetrating                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// bool                                    IsDeformed                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// bool                                    IsLocallyControlled                                    (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ABP_BulletManager_C::PlayHitSound(const struct FVector& InputPin, EPhysicalSurface SurfaceType, const struct FAmmoTypeConfiguration& AmmoType, class FName BoneName, bool IsPenetrating, bool IsDeformed, bool IsLocallyControlled)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_BulletManager_C", "PlayHitSound");

	Params::BP_BulletManager_C_PlayHitSound Parms{};

	Parms.InputPin = std::move(InputPin);
	Parms.SurfaceType = SurfaceType;
	Parms.AmmoType = std::move(AmmoType);
	Parms.BoneName = BoneName;
	Parms.IsPenetrating = IsPenetrating;
	Parms.IsDeformed = IsDeformed;
	Parms.IsLocallyControlled = IsLocallyControlled;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_BulletManager.BP_BulletManager_C.PlayBulletSonicCrack
// (Event, Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FVector                          SonicCrackLocation                                     (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FVector                          BulletOrigin                                           (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   BulletSpeed                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class AHumanCharacter*                  PlayerVictim                                           (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    bPlayerIsBeingHit                                      (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// bool                                    bIsProjectileDeformed                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// class UAudioComponent*                  ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

class UAudioComponent* ABP_BulletManager_C::PlayBulletSonicCrack(const struct FVector& SonicCrackLocation, const struct FVector& BulletOrigin, float BulletSpeed, const class AHumanCharacter* PlayerVictim, bool bPlayerIsBeingHit, bool bIsProjectileDeformed)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_BulletManager_C", "PlayBulletSonicCrack");

	Params::BP_BulletManager_C_PlayBulletSonicCrack Parms{};

	Parms.SonicCrackLocation = std::move(SonicCrackLocation);
	Parms.BulletOrigin = std::move(BulletOrigin);
	Parms.BulletSpeed = BulletSpeed;
	Parms.PlayerVictim = PlayerVictim;
	Parms.bPlayerIsBeingHit = bPlayerIsBeingHit;
	Parms.bIsProjectileDeformed = bIsProjectileDeformed;

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function BP_BulletManager.BP_BulletManager_C.PlayBulletWhizz
// (Event, Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FVector                          WhizzLocation                                          (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FVector                          BulletOrigin                                           (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   BulletSpeed                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class AHumanCharacter*                  PlayerVictim                                           (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    bPlayerIsBeingHit                                      (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// bool                                    bIsProjectileDeformed                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// class UAudioComponent*                  ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

class UAudioComponent* ABP_BulletManager_C::PlayBulletWhizz(const struct FVector& WhizzLocation, const struct FVector& BulletOrigin, float BulletSpeed, const class AHumanCharacter* PlayerVictim, bool bPlayerIsBeingHit, bool bIsProjectileDeformed)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_BulletManager_C", "PlayBulletWhizz");

	Params::BP_BulletManager_C_PlayBulletWhizz Parms{};

	Parms.WhizzLocation = std::move(WhizzLocation);
	Parms.BulletOrigin = std::move(BulletOrigin);
	Parms.BulletSpeed = BulletSpeed;
	Parms.PlayerVictim = PlayerVictim;
	Parms.bPlayerIsBeingHit = bPlayerIsBeingHit;
	Parms.bIsProjectileDeformed = bIsProjectileDeformed;

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function BP_BulletManager.BP_BulletManager_C.ShowHitDecals
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FAmmoTypeConfiguration           BulletTypeConfig                                       (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
// class AHumanCharacter*                  OwnerCharacter                                         (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    IsPenetrating                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// bool                                    IsDeformed                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// bool                                    IsRelative                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// struct FVector                          RelativeHitPosition                                    (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FHitResultSimplified             HitResultOptimised                                     (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm, NoDestructor, ContainsInstancedReference)

void ABP_BulletManager_C::ShowHitDecals(struct FAmmoTypeConfiguration& BulletTypeConfig, class AHumanCharacter*& OwnerCharacter, bool IsPenetrating, bool IsDeformed, bool IsRelative, struct FVector& RelativeHitPosition, struct FHitResultSimplified& HitResultOptimised)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_BulletManager_C", "ShowHitDecals");

	Params::BP_BulletManager_C_ShowHitDecals Parms{};

	Parms.BulletTypeConfig = std::move(BulletTypeConfig);
	Parms.OwnerCharacter = OwnerCharacter;
	Parms.IsPenetrating = IsPenetrating;
	Parms.IsDeformed = IsDeformed;
	Parms.IsRelative = IsRelative;
	Parms.RelativeHitPosition = std::move(RelativeHitPosition);
	Parms.HitResultOptimised = std::move(HitResultOptimised);

	UObject::ProcessEvent(Func, &Parms);

	BulletTypeConfig = std::move(Parms.BulletTypeConfig);
	OwnerCharacter = Parms.OwnerCharacter;
	RelativeHitPosition = std::move(Parms.RelativeHitPosition);
	HitResultOptimised = std::move(Parms.HitResultOptimised);
}


// Function BP_BulletManager.BP_BulletManager_C.Player Has Armor Equiped
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// struct FHitResultSimplified             HitOptimised                                           (BlueprintVisible, BlueprintReadOnly, Parm, NoDestructor, ContainsInstancedReference)
// bool                                    Has_Armor_Equiped                                      (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ABP_BulletManager_C::Player_Has_Armor_Equiped(const struct FHitResultSimplified& HitOptimised, bool* Has_Armor_Equiped)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_BulletManager_C", "Player Has Armor Equiped");

	Params::BP_BulletManager_C_Player_Has_Armor_Equiped Parms{};

	Parms.HitOptimised = std::move(HitOptimised);

	UObject::ProcessEvent(Func, &Parms);

	if (Has_Armor_Equiped != nullptr)
		*Has_Armor_Equiped = Parms.Has_Armor_Equiped;
}


// Function BP_BulletManager.BP_BulletManager_C.UpdateImpactEmitters
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// class AHumanCharacter*                  HumanOwner                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// EPhysicalSurface                        Surface                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FVector                          Location                                               (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FRotator                         Rotator                                                (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor)
// struct FVector                          Scale                                                  (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_BulletManager_C::UpdateImpactEmitters(class AHumanCharacter* HumanOwner, EPhysicalSurface Surface, const struct FVector& Location, const struct FRotator& Rotator, const struct FVector& Scale)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_BulletManager_C", "UpdateImpactEmitters");

	Params::BP_BulletManager_C_UpdateImpactEmitters Parms{};

	Parms.HumanOwner = HumanOwner;
	Parms.Surface = Surface;
	Parms.Location = std::move(Location);
	Parms.Rotator = std::move(Rotator);
	Parms.Scale = std::move(Scale);

	UObject::ProcessEvent(Func, &Parms);
}

}

