#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_ShootingRangeVolume

#include "Basic.hpp"


namespace SDK::Params
{

// Function BP_ShootingRangeVolume.BP_ShootingRangeVolume_C.ExecuteUbergraph_BP_ShootingRangeVolume
// 0x00E8 (0x00E8 - 0x0000)
struct BP_ShootingRangeVolume_C_ExecuteUbergraph_BP_ShootingRangeVolume final
{
public:
	int32                                         EntryPoint;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_GetUserControllerId_ReturnValue;          // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AHumanPlayerController*                 CallFunc_GetHumanPlayerControllerByControllerId_ReturnValue; // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 K2Node_Event_OtherActor_1;                         // 0x0010(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0018(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class ABP_Character_Shelter_C*                K2Node_DynamicCast_AsBP_Character_Shelter;         // 0x0020(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0028(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_29[0x7];                                       // 0x0029(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AController*                            CallFunc_GetController_ReturnValue;                // 0x0030(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AHumanPlayerController*                 K2Node_DynamicCast_AsHuman_Player_Controller;      // 0x0038(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess_1;                     // 0x0040(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_41[0x7];                                       // 0x0041(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class UUI_HUD_Shelter_C*>              CallFunc_GetAllOpenedWidgets_OutWidgets;           // 0x0048(0x0010)(ReferenceParm, ContainsInstancedReference)
	class AHumanCharacter*                        K2Node_DynamicCast_AsHuman_Character;              // 0x0058(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess_2;                     // 0x0060(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_61[0x7];                                       // 0x0061(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UUI_HUD_Shelter_C*                      CallFunc_Array_Get_Item;                           // 0x0068(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ABP_PlayerController_Script_C*          K2Node_DynamicCast_AsBP_Player_Controller_Script;  // 0x0070(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess_3;                     // 0x0078(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue_1;                    // 0x0079(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_7A[0x6];                                       // 0x007A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 K2Node_Event_OtherActor;                           // 0x0080(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ABP_Character_Shelter_C*                K2Node_DynamicCast_AsBP_Character_Shelter_1;       // 0x0088(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess_4;                     // 0x0090(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_91[0x7];                                       // 0x0091(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AGameModeBase*                          CallFunc_GetGameMode_ReturnValue;                  // 0x0098(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AController*                            CallFunc_GetController_ReturnValue_1;              // 0x00A0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ABP_GameMode_Shelter_C*                 K2Node_DynamicCast_AsBP_Game_Mode_Shelter;         // 0x00A8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess_5;                     // 0x00B0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_B1[0x7];                                       // 0x00B1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AHumanPlayerController*                 K2Node_DynamicCast_AsHuman_Player_Controller_1;    // 0x00B8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess_6;                     // 0x00C0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_C1[0x7];                                       // 0x00C1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class UUI_HUD_Shelter_C*>              CallFunc_GetAllOpenedWidgets_OutWidgets_1;         // 0x00C8(0x0010)(ReferenceParm, ContainsInstancedReference)
	class UUI_HUD_Shelter_C*                      CallFunc_Array_Get_Item_1;                         // 0x00D8(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Not_PreBool_ReturnValue;                  // 0x00E0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue_2;                    // 0x00E1(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanAND_ReturnValue;                   // 0x00E2(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue_3;                    // 0x00E3(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	int32                                         CallFunc_GetZOrder_ReturnValue;                    // 0x00E4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_ShootingRangeVolume_C_ExecuteUbergraph_BP_ShootingRangeVolume) == 0x000008, "Wrong alignment on BP_ShootingRangeVolume_C_ExecuteUbergraph_BP_ShootingRangeVolume");
static_assert(sizeof(BP_ShootingRangeVolume_C_ExecuteUbergraph_BP_ShootingRangeVolume) == 0x0000E8, "Wrong size on BP_ShootingRangeVolume_C_ExecuteUbergraph_BP_ShootingRangeVolume");
static_assert(offsetof(BP_ShootingRangeVolume_C_ExecuteUbergraph_BP_ShootingRangeVolume, EntryPoint) == 0x000000, "Member 'BP_ShootingRangeVolume_C_ExecuteUbergraph_BP_ShootingRangeVolume::EntryPoint' has a wrong offset!");
static_assert(offsetof(BP_ShootingRangeVolume_C_ExecuteUbergraph_BP_ShootingRangeVolume, CallFunc_GetUserControllerId_ReturnValue) == 0x000004, "Member 'BP_ShootingRangeVolume_C_ExecuteUbergraph_BP_ShootingRangeVolume::CallFunc_GetUserControllerId_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_ShootingRangeVolume_C_ExecuteUbergraph_BP_ShootingRangeVolume, CallFunc_GetHumanPlayerControllerByControllerId_ReturnValue) == 0x000008, "Member 'BP_ShootingRangeVolume_C_ExecuteUbergraph_BP_ShootingRangeVolume::CallFunc_GetHumanPlayerControllerByControllerId_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_ShootingRangeVolume_C_ExecuteUbergraph_BP_ShootingRangeVolume, K2Node_Event_OtherActor_1) == 0x000010, "Member 'BP_ShootingRangeVolume_C_ExecuteUbergraph_BP_ShootingRangeVolume::K2Node_Event_OtherActor_1' has a wrong offset!");
static_assert(offsetof(BP_ShootingRangeVolume_C_ExecuteUbergraph_BP_ShootingRangeVolume, CallFunc_IsValid_ReturnValue) == 0x000018, "Member 'BP_ShootingRangeVolume_C_ExecuteUbergraph_BP_ShootingRangeVolume::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_ShootingRangeVolume_C_ExecuteUbergraph_BP_ShootingRangeVolume, K2Node_DynamicCast_AsBP_Character_Shelter) == 0x000020, "Member 'BP_ShootingRangeVolume_C_ExecuteUbergraph_BP_ShootingRangeVolume::K2Node_DynamicCast_AsBP_Character_Shelter' has a wrong offset!");
static_assert(offsetof(BP_ShootingRangeVolume_C_ExecuteUbergraph_BP_ShootingRangeVolume, K2Node_DynamicCast_bSuccess) == 0x000028, "Member 'BP_ShootingRangeVolume_C_ExecuteUbergraph_BP_ShootingRangeVolume::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(BP_ShootingRangeVolume_C_ExecuteUbergraph_BP_ShootingRangeVolume, CallFunc_GetController_ReturnValue) == 0x000030, "Member 'BP_ShootingRangeVolume_C_ExecuteUbergraph_BP_ShootingRangeVolume::CallFunc_GetController_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_ShootingRangeVolume_C_ExecuteUbergraph_BP_ShootingRangeVolume, K2Node_DynamicCast_AsHuman_Player_Controller) == 0x000038, "Member 'BP_ShootingRangeVolume_C_ExecuteUbergraph_BP_ShootingRangeVolume::K2Node_DynamicCast_AsHuman_Player_Controller' has a wrong offset!");
static_assert(offsetof(BP_ShootingRangeVolume_C_ExecuteUbergraph_BP_ShootingRangeVolume, K2Node_DynamicCast_bSuccess_1) == 0x000040, "Member 'BP_ShootingRangeVolume_C_ExecuteUbergraph_BP_ShootingRangeVolume::K2Node_DynamicCast_bSuccess_1' has a wrong offset!");
static_assert(offsetof(BP_ShootingRangeVolume_C_ExecuteUbergraph_BP_ShootingRangeVolume, CallFunc_GetAllOpenedWidgets_OutWidgets) == 0x000048, "Member 'BP_ShootingRangeVolume_C_ExecuteUbergraph_BP_ShootingRangeVolume::CallFunc_GetAllOpenedWidgets_OutWidgets' has a wrong offset!");
static_assert(offsetof(BP_ShootingRangeVolume_C_ExecuteUbergraph_BP_ShootingRangeVolume, K2Node_DynamicCast_AsHuman_Character) == 0x000058, "Member 'BP_ShootingRangeVolume_C_ExecuteUbergraph_BP_ShootingRangeVolume::K2Node_DynamicCast_AsHuman_Character' has a wrong offset!");
static_assert(offsetof(BP_ShootingRangeVolume_C_ExecuteUbergraph_BP_ShootingRangeVolume, K2Node_DynamicCast_bSuccess_2) == 0x000060, "Member 'BP_ShootingRangeVolume_C_ExecuteUbergraph_BP_ShootingRangeVolume::K2Node_DynamicCast_bSuccess_2' has a wrong offset!");
static_assert(offsetof(BP_ShootingRangeVolume_C_ExecuteUbergraph_BP_ShootingRangeVolume, CallFunc_Array_Get_Item) == 0x000068, "Member 'BP_ShootingRangeVolume_C_ExecuteUbergraph_BP_ShootingRangeVolume::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(BP_ShootingRangeVolume_C_ExecuteUbergraph_BP_ShootingRangeVolume, K2Node_DynamicCast_AsBP_Player_Controller_Script) == 0x000070, "Member 'BP_ShootingRangeVolume_C_ExecuteUbergraph_BP_ShootingRangeVolume::K2Node_DynamicCast_AsBP_Player_Controller_Script' has a wrong offset!");
static_assert(offsetof(BP_ShootingRangeVolume_C_ExecuteUbergraph_BP_ShootingRangeVolume, K2Node_DynamicCast_bSuccess_3) == 0x000078, "Member 'BP_ShootingRangeVolume_C_ExecuteUbergraph_BP_ShootingRangeVolume::K2Node_DynamicCast_bSuccess_3' has a wrong offset!");
static_assert(offsetof(BP_ShootingRangeVolume_C_ExecuteUbergraph_BP_ShootingRangeVolume, CallFunc_IsValid_ReturnValue_1) == 0x000079, "Member 'BP_ShootingRangeVolume_C_ExecuteUbergraph_BP_ShootingRangeVolume::CallFunc_IsValid_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_ShootingRangeVolume_C_ExecuteUbergraph_BP_ShootingRangeVolume, K2Node_Event_OtherActor) == 0x000080, "Member 'BP_ShootingRangeVolume_C_ExecuteUbergraph_BP_ShootingRangeVolume::K2Node_Event_OtherActor' has a wrong offset!");
static_assert(offsetof(BP_ShootingRangeVolume_C_ExecuteUbergraph_BP_ShootingRangeVolume, K2Node_DynamicCast_AsBP_Character_Shelter_1) == 0x000088, "Member 'BP_ShootingRangeVolume_C_ExecuteUbergraph_BP_ShootingRangeVolume::K2Node_DynamicCast_AsBP_Character_Shelter_1' has a wrong offset!");
static_assert(offsetof(BP_ShootingRangeVolume_C_ExecuteUbergraph_BP_ShootingRangeVolume, K2Node_DynamicCast_bSuccess_4) == 0x000090, "Member 'BP_ShootingRangeVolume_C_ExecuteUbergraph_BP_ShootingRangeVolume::K2Node_DynamicCast_bSuccess_4' has a wrong offset!");
static_assert(offsetof(BP_ShootingRangeVolume_C_ExecuteUbergraph_BP_ShootingRangeVolume, CallFunc_GetGameMode_ReturnValue) == 0x000098, "Member 'BP_ShootingRangeVolume_C_ExecuteUbergraph_BP_ShootingRangeVolume::CallFunc_GetGameMode_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_ShootingRangeVolume_C_ExecuteUbergraph_BP_ShootingRangeVolume, CallFunc_GetController_ReturnValue_1) == 0x0000A0, "Member 'BP_ShootingRangeVolume_C_ExecuteUbergraph_BP_ShootingRangeVolume::CallFunc_GetController_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_ShootingRangeVolume_C_ExecuteUbergraph_BP_ShootingRangeVolume, K2Node_DynamicCast_AsBP_Game_Mode_Shelter) == 0x0000A8, "Member 'BP_ShootingRangeVolume_C_ExecuteUbergraph_BP_ShootingRangeVolume::K2Node_DynamicCast_AsBP_Game_Mode_Shelter' has a wrong offset!");
static_assert(offsetof(BP_ShootingRangeVolume_C_ExecuteUbergraph_BP_ShootingRangeVolume, K2Node_DynamicCast_bSuccess_5) == 0x0000B0, "Member 'BP_ShootingRangeVolume_C_ExecuteUbergraph_BP_ShootingRangeVolume::K2Node_DynamicCast_bSuccess_5' has a wrong offset!");
static_assert(offsetof(BP_ShootingRangeVolume_C_ExecuteUbergraph_BP_ShootingRangeVolume, K2Node_DynamicCast_AsHuman_Player_Controller_1) == 0x0000B8, "Member 'BP_ShootingRangeVolume_C_ExecuteUbergraph_BP_ShootingRangeVolume::K2Node_DynamicCast_AsHuman_Player_Controller_1' has a wrong offset!");
static_assert(offsetof(BP_ShootingRangeVolume_C_ExecuteUbergraph_BP_ShootingRangeVolume, K2Node_DynamicCast_bSuccess_6) == 0x0000C0, "Member 'BP_ShootingRangeVolume_C_ExecuteUbergraph_BP_ShootingRangeVolume::K2Node_DynamicCast_bSuccess_6' has a wrong offset!");
static_assert(offsetof(BP_ShootingRangeVolume_C_ExecuteUbergraph_BP_ShootingRangeVolume, CallFunc_GetAllOpenedWidgets_OutWidgets_1) == 0x0000C8, "Member 'BP_ShootingRangeVolume_C_ExecuteUbergraph_BP_ShootingRangeVolume::CallFunc_GetAllOpenedWidgets_OutWidgets_1' has a wrong offset!");
static_assert(offsetof(BP_ShootingRangeVolume_C_ExecuteUbergraph_BP_ShootingRangeVolume, CallFunc_Array_Get_Item_1) == 0x0000D8, "Member 'BP_ShootingRangeVolume_C_ExecuteUbergraph_BP_ShootingRangeVolume::CallFunc_Array_Get_Item_1' has a wrong offset!");
static_assert(offsetof(BP_ShootingRangeVolume_C_ExecuteUbergraph_BP_ShootingRangeVolume, CallFunc_Not_PreBool_ReturnValue) == 0x0000E0, "Member 'BP_ShootingRangeVolume_C_ExecuteUbergraph_BP_ShootingRangeVolume::CallFunc_Not_PreBool_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_ShootingRangeVolume_C_ExecuteUbergraph_BP_ShootingRangeVolume, CallFunc_IsValid_ReturnValue_2) == 0x0000E1, "Member 'BP_ShootingRangeVolume_C_ExecuteUbergraph_BP_ShootingRangeVolume::CallFunc_IsValid_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BP_ShootingRangeVolume_C_ExecuteUbergraph_BP_ShootingRangeVolume, CallFunc_BooleanAND_ReturnValue) == 0x0000E2, "Member 'BP_ShootingRangeVolume_C_ExecuteUbergraph_BP_ShootingRangeVolume::CallFunc_BooleanAND_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_ShootingRangeVolume_C_ExecuteUbergraph_BP_ShootingRangeVolume, CallFunc_IsValid_ReturnValue_3) == 0x0000E3, "Member 'BP_ShootingRangeVolume_C_ExecuteUbergraph_BP_ShootingRangeVolume::CallFunc_IsValid_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(BP_ShootingRangeVolume_C_ExecuteUbergraph_BP_ShootingRangeVolume, CallFunc_GetZOrder_ReturnValue) == 0x0000E4, "Member 'BP_ShootingRangeVolume_C_ExecuteUbergraph_BP_ShootingRangeVolume::CallFunc_GetZOrder_ReturnValue' has a wrong offset!");

// Function BP_ShootingRangeVolume.BP_ShootingRangeVolume_C.ReceiveActorEndOverlap
// 0x0008 (0x0008 - 0x0000)
struct BP_ShootingRangeVolume_C_ReceiveActorEndOverlap final
{
public:
	class AActor*                                 OtherActor;                                        // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_ShootingRangeVolume_C_ReceiveActorEndOverlap) == 0x000008, "Wrong alignment on BP_ShootingRangeVolume_C_ReceiveActorEndOverlap");
static_assert(sizeof(BP_ShootingRangeVolume_C_ReceiveActorEndOverlap) == 0x000008, "Wrong size on BP_ShootingRangeVolume_C_ReceiveActorEndOverlap");
static_assert(offsetof(BP_ShootingRangeVolume_C_ReceiveActorEndOverlap, OtherActor) == 0x000000, "Member 'BP_ShootingRangeVolume_C_ReceiveActorEndOverlap::OtherActor' has a wrong offset!");

// Function BP_ShootingRangeVolume.BP_ShootingRangeVolume_C.ReceiveActorBeginOverlap
// 0x0008 (0x0008 - 0x0000)
struct BP_ShootingRangeVolume_C_ReceiveActorBeginOverlap final
{
public:
	class AActor*                                 OtherActor;                                        // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_ShootingRangeVolume_C_ReceiveActorBeginOverlap) == 0x000008, "Wrong alignment on BP_ShootingRangeVolume_C_ReceiveActorBeginOverlap");
static_assert(sizeof(BP_ShootingRangeVolume_C_ReceiveActorBeginOverlap) == 0x000008, "Wrong size on BP_ShootingRangeVolume_C_ReceiveActorBeginOverlap");
static_assert(offsetof(BP_ShootingRangeVolume_C_ReceiveActorBeginOverlap, OtherActor) == 0x000000, "Member 'BP_ShootingRangeVolume_C_ReceiveActorBeginOverlap::OtherActor' has a wrong offset!");

}

