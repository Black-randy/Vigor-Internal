#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_ShootingChallenges_TargetComponent

#include "Basic.hpp"

#include "BP_ShootingChallenges_TargetComponent_classes.hpp"
#include "BP_ShootingChallenges_TargetComponent_parameters.hpp"


namespace SDK
{

// Function BP_ShootingChallenges_TargetComponent.BP_ShootingChallenges_TargetComponent_C.ScoreHit
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    WasShootable                                           (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void UBP_ShootingChallenges_TargetComponent_C::ScoreHit(bool* WasShootable)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_ShootingChallenges_TargetComponent_C", "ScoreHit");

	Params::BP_ShootingChallenges_TargetComponent_C_ScoreHit Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (WasShootable != nullptr)
		*WasShootable = Parms.WasShootable;
}


// Function BP_ShootingChallenges_TargetComponent.BP_ShootingChallenges_TargetComponent_C.FailChallenge
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// class FText                             FailingReason                                          (BlueprintVisible, BlueprintReadOnly, Parm)
// bool                                    SuccesfullyFailed                                      (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void UBP_ShootingChallenges_TargetComponent_C::FailChallenge(const class FText& FailingReason, bool* SuccesfullyFailed)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_ShootingChallenges_TargetComponent_C", "FailChallenge");

	Params::BP_ShootingChallenges_TargetComponent_C_FailChallenge Parms{};

	Parms.FailingReason = std::move(FailingReason);

	UObject::ProcessEvent(Func, &Parms);

	if (SuccesfullyFailed != nullptr)
		*SuccesfullyFailed = Parms.SuccesfullyFailed;
}

}

