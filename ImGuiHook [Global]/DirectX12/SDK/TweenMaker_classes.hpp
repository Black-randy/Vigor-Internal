#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: TweenMaker

#include "Basic.hpp"

#include "TweenMaker_structs.hpp"
#include "CoreUObject_classes.hpp"
#include "Engine_classes.hpp"


namespace SDK
{

// Class TweenMaker.BaseTween
// 0x0080 (0x00A8 - 0x0028)
class UBaseTween : public UObject
{
public:
	uint8                                         Pad_28[0x30];                                      // 0x0028(0x0030)(Fixing Size After Last Property [ Dumper-7 ])
	class UCurveFloat*                            MCurveFloat;                                       // 0x0058(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_60[0x8];                                       // 0x0060(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	class UTweenContainer*                        MOwningTweenContainer;                             // 0x0068(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_70[0x38];                                      // 0x0070(0x0038)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	class UTweenFloat* AppendTweenActorFollowSpline(class AActor*& TweenTarget, class USplineComponent* Spline, float Duration, bool ApplyRotation, bool ApplyScale, bool UseConstantSpeed, ETweenEaseType EaseType, bool DeleteTweenOnHit, bool DeleteTweenOnOverlap, int32 NumLoops, ETweenLoopType LoopType, float Delay, float TimeScale, bool TweenWhileGameIsPaused);
	class UTweenFloat* AppendTweenCustomFloat(class UObject*& TweenTarget, float From, float To, float Duration, ETweenEaseType EaseType, int32 NumLoops, ETweenLoopType LoopType, float Delay, float TimeScale, bool TweenWhileGameIsPaused);
	class UTweenVector* AppendTweenCustomVector(class UObject*& TweenTarget, const struct FVector& From, const struct FVector& To, float Duration, ETweenEaseType EaseType, int32 NumLoops, ETweenLoopType LoopType, float Delay, float TimeScale, bool TweenWhileGameIsPaused);
	class UTweenVector2D* AppendTweenCustomVector2D(class UObject*& TweenTarget, const struct FVector2D& From, const struct FVector2D& To, float Duration, ETweenEaseType EaseType, int32 NumLoops, ETweenLoopType LoopType, float Delay, float TimeScale, bool TweenWhileGameIsPaused);
	class UTweenFloat* AppendTweenMaterialFloatFromTo(class UMaterialInstanceDynamic*& TweenTarget, class FName ParameterName, float From, float To, float Duration, ETweenEaseType EaseType, int32 NumLoops, ETweenLoopType LoopType, float Delay, float TimeScale, bool TweenWhileGameIsPaused);
	class UTweenFloat* AppendTweenMaterialFloatTo(class UMaterialInstanceDynamic*& TweenTarget, class FName ParameterName, float To, float Duration, ETweenEaseType EaseType, int32 NumLoops, ETweenLoopType LoopType, float Delay, float TimeScale, bool TweenWhileGameIsPaused);
	class UTweenLinearColor* AppendTweenMaterialVectorFromTo(class UMaterialInstanceDynamic*& TweenTarget, class FName ParameterName, const struct FLinearColor& From, const struct FLinearColor& To, float Duration, ETweenEaseType EaseType, int32 NumLoops, ETweenLoopType LoopType, float Delay, float TimeScale, bool TweenWhileGameIsPaused);
	class UTweenLinearColor* AppendTweenMaterialVectorTo(class UMaterialInstanceDynamic*& TweenTarget, class FName ParameterName, const struct FLinearColor& To, float Duration, ETweenEaseType EaseType, int32 NumLoops, ETweenLoopType LoopType, float Delay, float TimeScale, bool TweenWhileGameIsPaused);
	class UTweenVector* AppendTweenMoveActorBy(class AActor*& TweenTarget, const struct FVector& bY, float Duration, ETweenEaseType EaseType, bool DeleteTweenOnHit, bool DeleteTweenOnOverlap, int32 NumLoops, ETweenLoopType LoopType, float Delay, float TimeScale, bool TweenWhileGameIsPaused);
	class UTweenVector* AppendTweenMoveActorTo(class AActor*& TweenTarget, const struct FVector& To, float Duration, ETweenEaseType EaseType, ETweenSpace TweenSpace, bool DeleteTweenOnHit, bool DeleteTweenOnOverlap, int32 NumLoops, ETweenLoopType LoopType, float Delay, float TimeScale, bool TweenWhileGameIsPaused);
	class UTweenVector* AppendTweenMoveSceneComponentBy(class USceneComponent*& TweenTarget, const struct FVector& bY, float Duration, ETweenEaseType EaseType, bool DeleteTweenOnHit, bool DeleteTweenOnOverlap, int32 NumLoops, ETweenLoopType LoopType, float Delay, float TimeScale, bool TweenWhileGameIsPaused);
	class UTweenVector* AppendTweenMoveSceneComponentTo(class USceneComponent*& TweenTarget, const struct FVector& To, float Duration, ETweenEaseType EaseType, ETweenSpace TweenSpace, bool DeleteTweenOnHit, bool DeleteTweenOnOverlap, int32 NumLoops, ETweenLoopType LoopType, float Delay, float TimeScale, bool TweenWhileGameIsPaused);
	class UTweenVector2D* AppendTweenMoveWidgetBy(class UWidget*& TweenTarget, const struct FVector2D& bY, float Duration, ETweenEaseType EaseType, int32 NumLoops, ETweenLoopType LoopType, float Delay, float TimeScale, bool TweenWhileGameIsPaused);
	class UTweenVector2D* AppendTweenMoveWidgetTo(class UWidget*& TweenTarget, const struct FVector2D& To, float Duration, ETweenEaseType EaseType, int32 NumLoops, ETweenLoopType LoopType, float Delay, float TimeScale, bool TweenWhileGameIsPaused);
	class UTweenFloat* AppendTweenRotateActorAroundPoint(class AActor*& TweenTarget, const struct FVector& PivotPoint, float StartingAngle, float EndingAngle, float Radius, const struct FVector& Axis, float Duration, ETweenEaseType EaseType, bool DeleteTweenOnHit, bool DeleteTweenOnOverlap, int32 NumLoops, ETweenLoopType LoopType, float Delay, float TimeScale, bool TweenWhileGameIsPaused);
	class UTweenFloat* AppendTweenRotateActorAroundPointByOffset(class AActor*& TweenTarget, const struct FVector& PivotPoint, float OffsetAngle, ETweenReferenceAxis ReferenceAxis, float Duration, ETweenEaseType EaseType, bool DeleteTweenOnHit, bool DeleteTweenOnOverlap, int32 NumLoops, ETweenLoopType LoopType, float Delay, float TimeScale, bool TweenWhileGameIsPaused);
	class UTweenRotator* AppendTweenRotateActorBy(class AActor*& TweenTarget, const struct FRotator& bY, float Duration, ETweenEaseType EaseType, bool DeleteTweenOnHit, bool DeleteTweenOnOverlap, int32 NumLoops, ETweenLoopType LoopType, float Delay, float TimeScale, bool TweenWhileGameIsPaused);
	class UTweenRotator* AppendTweenRotateActorTo(class AActor*& TweenTarget, const struct FRotator& To, float Duration, ETweenEaseType EaseType, ETweenSpace TweenSpace, ETweenRotationMode RotationMode, bool DeleteTweenOnHit, bool DeleteTweenOnOverlap, int32 NumLoops, ETweenLoopType LoopType, float Delay, float TimeScale, bool TweenWhileGameIsPaused);
	class UTweenFloat* AppendTweenRotateSceneComponentAroundPoint(class USceneComponent*& TweenTarget, const struct FVector& PivotPoint, float StartingAngle, float EndingAngle, float Radius, const struct FVector& Axis, float Duration, ETweenEaseType EaseType, bool DeleteTweenOnHit, bool DeleteTweenOnOverlap, int32 NumLoops, ETweenLoopType LoopType, float Delay, float TimeScale, bool TweenWhileGameIsPaused);
	class UTweenFloat* AppendTweenRotateSceneComponentAroundPointByOffset(class USceneComponent*& TweenTarget, const struct FVector& PivotPoint, float OffsetAngle, ETweenReferenceAxis ReferenceAxis, float Duration, ETweenEaseType EaseType, bool DeleteTweenOnHit, bool DeleteTweenOnOverlap, int32 NumLoops, ETweenLoopType LoopType, float Delay, float TimeScale, bool TweenWhileGameIsPaused);
	class UTweenRotator* AppendTweenRotateSceneComponentBy(class USceneComponent*& TweenTarget, const struct FRotator& bY, float Duration, ETweenEaseType EaseType, bool DeleteTweenOnHit, bool DeleteTweenOnOverlap, int32 NumLoops, ETweenLoopType LoopType, float Delay, float TimeScale, bool TweenWhileGameIsPaused);
	class UTweenRotator* AppendTweenRotateSceneComponentTo(class USceneComponent*& TweenTarget, const struct FRotator& To, float Duration, ETweenEaseType EaseType, ETweenSpace TweenSpace, ETweenRotationMode RotationMode, bool DeleteTweenOnHit, bool DeleteTweenOnOverlap, int32 NumLoops, ETweenLoopType LoopType, float Delay, float TimeScale, bool TweenWhileGameIsPaused);
	class UTweenVector* AppendTweenScaleActorBy(class AActor*& TweenTarget, const struct FVector& bY, float Duration, ETweenEaseType EaseType, bool DeleteTweenOnHit, bool DeleteTweenOnOverlap, int32 NumLoops, ETweenLoopType LoopType, float Delay, float TimeScale, bool TweenWhileGameIsPaused);
	class UTweenVector* AppendTweenScaleActorTo(class AActor*& TweenTarget, const struct FVector& To, float Duration, ETweenEaseType EaseType, ETweenSpace TweenSpace, bool DeleteTweenOnHit, bool DeleteTweenOnOverlap, int32 NumLoops, ETweenLoopType LoopType, float Delay, float TimeScale, bool TweenWhileGameIsPaused);
	class UTweenVector* AppendTweenScaleSceneComponentBy(class USceneComponent*& TweenTarget, const struct FVector& bY, float Duration, ETweenEaseType EaseType, bool DeleteTweenOnHit, bool DeleteTweenOnOverlap, int32 NumLoops, ETweenLoopType LoopType, float Delay, float TimeScale, bool TweenWhileGameIsPaused);
	class UTweenVector* AppendTweenScaleSceneComponentTo(class USceneComponent*& TweenTarget, const struct FVector& To, float Duration, ETweenEaseType EaseType, ETweenSpace TweenSpace, bool DeleteTweenOnHit, bool DeleteTweenOnOverlap, int32 NumLoops, ETweenLoopType LoopType, float Delay, float TimeScale, bool TweenWhileGameIsPaused);
	class UTweenVector2D* AppendTweenScaleWidgetBy(class UWidget*& TweenTarget, const struct FVector2D& bY, float Duration, ETweenEaseType EaseType, int32 NumLoops, ETweenLoopType LoopType, float Delay, float TimeScale, bool TweenWhileGameIsPaused);
	class UTweenVector2D* AppendTweenScaleWidgetTo(class UWidget*& TweenTarget, const struct FVector2D& To, float Duration, ETweenEaseType EaseType, int32 NumLoops, ETweenLoopType LoopType, float Delay, float TimeScale, bool TweenWhileGameIsPaused);
	class UTweenFloat* AppendTweenSceneComponentFollowSpline(class USceneComponent*& TweenTarget, class USplineComponent* Spline, float Duration, bool ApplyRotation, bool ApplyScale, bool UseConstantSpeed, ETweenEaseType EaseType, bool DeleteTweenOnHit, bool DeleteTweenOnOverlap, int32 NumLoops, ETweenLoopType LoopType, float Delay, float TimeScale, bool TweenWhileGameIsPaused);
	class UTweenVector2D* AppendTweenShearWidgetTo(class UWidget*& TweenTarget, const struct FVector2D& To, float Duration, ETweenEaseType EaseType, int32 NumLoops, ETweenLoopType LoopType, float Delay, float TimeScale, bool TweenWhileGameIsPaused);
	class UTweenFloat* AppendTweenWidgetAngleTo(class UWidget*& TweenTarget, float To, float Duration, ETweenEaseType EaseType, int32 NumLoops, ETweenLoopType LoopType, float Delay, float TimeScale, bool TweenWhileGameIsPaused);
	class UTweenFloat* AppendTweenWidgetOpacityTo(class UWidget*& TweenTarget, float To, float Duration, ETweenEaseType EaseType, int32 NumLoops, ETweenLoopType LoopType, float Delay, float TimeScale, bool TweenWhileGameIsPaused);
	void DeleteTween(bool FireEndEvent);
	class UTweenFloat* JoinTweenActorFollowSpline(class AActor*& TweenTarget, class USplineComponent* Spline, float Duration, bool ApplyRotation, bool ApplyScale, bool UseConstantSpeed, ETweenEaseType EaseType, bool DeleteTweenOnHit, bool DeleteTweenOnOverlap, float Delay, float TimeScale, bool TweenWhileGameIsPaused);
	class UTweenFloat* JoinTweenCustomFloat(class UObject*& TweenTarget, float From, float To, float Duration, ETweenEaseType EaseType, float Delay, float TimeScale, bool TweenWhileGameIsPaused);
	class UTweenVector* JoinTweenCustomVector(class UObject*& TweenTarget, const struct FVector& From, const struct FVector& To, float Duration, ETweenEaseType EaseType, float Delay, float TimeScale, bool TweenWhileGameIsPaused);
	class UTweenVector2D* JoinTweenCustomVector2D(class UObject*& TweenTarget, const struct FVector2D& From, const struct FVector2D& To, float Duration, ETweenEaseType EaseType, float Delay, float TimeScale, bool TweenWhileGameIsPaused);
	class UTweenFloat* JoinTweenMaterialFloatFromTo(class UMaterialInstanceDynamic*& TweenTarget, class FName ParameterName, float From, float To, float Duration, ETweenEaseType EaseType, float Delay, float TimeScale, bool TweenWhileGameIsPaused);
	class UTweenFloat* JoinTweenMaterialFloatTo(class UMaterialInstanceDynamic*& TweenTarget, class FName ParameterName, float To, float Duration, ETweenEaseType EaseType, float Delay, float TimeScale, bool TweenWhileGameIsPaused);
	class UTweenLinearColor* JoinTweenMaterialVectorFromTo(class UMaterialInstanceDynamic*& TweenTarget, class FName ParameterName, const struct FLinearColor& From, const struct FLinearColor& To, float Duration, ETweenEaseType EaseType, float Delay, float TimeScale, bool TweenWhileGameIsPaused);
	class UTweenLinearColor* JoinTweenMaterialVectorTo(class UMaterialInstanceDynamic*& TweenTarget, class FName ParameterName, const struct FLinearColor& To, float Duration, ETweenEaseType EaseType, float Delay, float TimeScale, bool TweenWhileGameIsPaused);
	class UTweenVector* JoinTweenMoveActorBy(class AActor*& TweenTarget, const struct FVector& bY, float Duration, ETweenEaseType EaseType, bool DeleteTweenOnHit, bool DeleteTweenOnOverlap, float Delay, float TimeScale, bool TweenWhileGameIsPaused);
	class UTweenVector* JoinTweenMoveActorTo(class AActor*& TweenTarget, const struct FVector& To, float Duration, ETweenEaseType EaseType, ETweenSpace TweenSpace, bool DeleteTweenOnHit, bool DeleteTweenOnOverlap, float Delay, float TimeScale, bool TweenWhileGameIsPaused);
	class UTweenVector* JoinTweenMoveSceneComponentBy(class USceneComponent*& TweenTarget, const struct FVector& bY, float Duration, ETweenEaseType EaseType, bool DeleteTweenOnHit, bool DeleteTweenOnOverlap, float Delay, float TimeScale, bool TweenWhileGameIsPaused);
	class UTweenVector* JoinTweenMoveSceneComponentTo(class USceneComponent*& TweenTarget, const struct FVector& To, float Duration, ETweenEaseType EaseType, ETweenSpace TweenSpace, bool DeleteTweenOnHit, bool DeleteTweenOnOverlap, float Delay, float TimeScale, bool TweenWhileGameIsPaused);
	class UTweenVector2D* JoinTweenMoveWidgetBy(class UWidget*& TweenTarget, const struct FVector2D& bY, float Duration, ETweenEaseType EaseType, float Delay, float TimeScale, bool TweenWhileGameIsPaused);
	class UTweenVector2D* JoinTweenMoveWidgetTo(class UWidget*& TweenTarget, const struct FVector2D& To, float Duration, ETweenEaseType EaseType, float Delay, float TimeScale, bool TweenWhileGameIsPaused);
	class UTweenFloat* JoinTweenRotateActorAroundPoint(class AActor*& TweenTarget, const struct FVector& PivotPoint, float StartingAngle, float EndingAngle, float Radius, const struct FVector& Axis, float Duration, ETweenEaseType EaseType, bool DeleteTweenOnHit, bool DeleteTweenOnOverlap, float Delay, float TimeScale, bool TweenWhileGameIsPaused);
	class UTweenFloat* JoinTweenRotateActorAroundPointByOffset(class AActor*& TweenTarget, const struct FVector& PivotPoint, float OffsetAngle, ETweenReferenceAxis ReferenceAxis, float Duration, ETweenEaseType EaseType, bool DeleteTweenOnHit, bool DeleteTweenOnOverlap, float Delay, float TimeScale, bool TweenWhileGameIsPaused);
	class UTweenRotator* JoinTweenRotateActorBy(class AActor*& TweenTarget, const struct FRotator& bY, float Duration, ETweenEaseType EaseType, bool DeleteTweenOnHit, bool DeleteTweenOnOverlap, float Delay, float TimeScale, bool TweenWhileGameIsPaused);
	class UTweenRotator* JoinTweenRotateActorTo(class AActor*& TweenTarget, const struct FRotator& To, float Duration, ETweenEaseType EaseType, ETweenSpace TweenSpace, ETweenRotationMode RotationMode, bool DeleteTweenOnHit, bool DeleteTweenOnOverlap, float Delay, float TimeScale, bool TweenWhileGameIsPaused);
	class UTweenFloat* JoinTweenRotateSceneComponentAroundPoint(class USceneComponent*& TweenTarget, const struct FVector& PivotPoint, float StartingAngle, float EndingAngle, float Radius, const struct FVector& Axis, float Duration, ETweenEaseType EaseType, bool DeleteTweenOnHit, bool DeleteTweenOnOverlap, float Delay, float TimeScale, bool TweenWhileGameIsPaused);
	class UTweenFloat* JoinTweenRotateSceneComponentAroundPointByOffset(class USceneComponent*& TweenTarget, const struct FVector& PivotPoint, float OffsetAngle, ETweenReferenceAxis ReferenceAxis, float Duration, ETweenEaseType EaseType, bool DeleteTweenOnHit, bool DeleteTweenOnOverlap, float Delay, float TimeScale, bool TweenWhileGameIsPaused);
	class UTweenRotator* JoinTweenRotateSceneComponentBy(class USceneComponent*& TweenTarget, const struct FRotator& bY, float Duration, ETweenEaseType EaseType, bool DeleteTweenOnHit, bool DeleteTweenOnOverlap, float Delay, float TimeScale, bool TweenWhileGameIsPaused);
	class UTweenRotator* JoinTweenRotateSceneComponentTo(class USceneComponent*& TweenTarget, const struct FRotator& To, float Duration, ETweenEaseType EaseType, ETweenSpace TweenSpace, ETweenRotationMode RotationMode, bool DeleteTweenOnHit, bool DeleteTweenOnOverlap, float Delay, float TimeScale, bool TweenWhileGameIsPaused);
	class UTweenVector* JoinTweenScaleActorBy(class AActor*& TweenTarget, const struct FVector& bY, float Duration, ETweenEaseType EaseType, bool DeleteTweenOnHit, bool DeleteTweenOnOverlap, float Delay, float TimeScale, bool TweenWhileGameIsPaused);
	class UTweenVector* JoinTweenScaleActorTo(class AActor*& TweenTarget, const struct FVector& To, float Duration, ETweenEaseType EaseType, ETweenSpace TweenSpace, bool DeleteTweenOnHit, bool DeleteTweenOnOverlap, float Delay, float TimeScale, bool TweenWhileGameIsPaused);
	class UTweenVector* JoinTweenScaleSceneComponentBy(class USceneComponent*& TweenTarget, const struct FVector& bY, float Duration, ETweenEaseType EaseType, bool DeleteTweenOnHit, bool DeleteTweenOnOverlap, float Delay, float TimeScale, bool TweenWhileGameIsPaused);
	class UTweenVector* JoinTweenScaleSceneComponentTo(class USceneComponent*& TweenTarget, const struct FVector& To, float Duration, ETweenEaseType EaseType, ETweenSpace TweenSpace, bool DeleteTweenOnHit, bool DeleteTweenOnOverlap, float Delay, float TimeScale, bool TweenWhileGameIsPaused);
	class UTweenVector2D* JoinTweenScaleWidgetBy(class UWidget*& TweenTarget, const struct FVector2D& bY, float Duration, ETweenEaseType EaseType, float Delay, float TimeScale, bool TweenWhileGameIsPaused);
	class UTweenVector2D* JoinTweenScaleWidgetTo(class UWidget*& TweenTarget, const struct FVector2D& To, float Duration, ETweenEaseType EaseType, float Delay, float TimeScale, bool TweenWhileGameIsPaused);
	class UTweenFloat* JoinTweenSceneComponentFollowSpline(class USceneComponent*& TweenTarget, class USplineComponent* Spline, float Duration, bool ApplyRotation, bool ApplyScale, bool UseConstantSpeed, ETweenEaseType EaseType, bool DeleteTweenOnHit, bool DeleteTweenOnOverlap, float Delay, float TimeScale, bool TweenWhileGameIsPaused);
	class UTweenVector2D* JoinTweenShearWidgetTo(class UWidget*& TweenTarget, const struct FVector2D& bY, float Duration, ETweenEaseType EaseType, float Delay, float TimeScale, bool TweenWhileGameIsPaused);
	class UTweenFloat* JoinTweenWidgetAngleTo(class UWidget*& TweenTarget, float To, float Duration, ETweenEaseType EaseType, float Delay, float TimeScale, bool TweenWhileGameIsPaused);
	class UTweenFloat* JoinTweenWidgetOpacityTo(class UWidget*& TweenTarget, float To, float Duration, ETweenEaseType EaseType, float Delay, float TimeScale, bool TweenWhileGameIsPaused);
	void PauseTween(bool SkipTween);
	void RestartTween();
	void ResumeTween();
	void SetCustomEasisng(class UCurveFloat* Curve);
	void SetDelay(float NewDelay);
	void SetTimeScale(float NewTimeScale);
	void SetTweenName(class FName TweenName);
	void TogglePauseTween(bool SkipTween);

	float GetTimeScale() const;
	class UTweenContainer* GetTweenContainer() const;
	float GetTweenDuration() const;
	float GetTweenElapsedTime() const;
	class FName GetTweenName() const;
	class UObject* GetTweenTarget() const;
	bool IsTweening() const;
	bool IsTweenPaused() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"BaseTween">();
	}
	static class UBaseTween* GetDefaultObj()
	{
		return GetDefaultObjImpl<UBaseTween>();
	}
};
static_assert(alignof(UBaseTween) == 0x000008, "Wrong alignment on UBaseTween");
static_assert(sizeof(UBaseTween) == 0x0000A8, "Wrong size on UBaseTween");
static_assert(offsetof(UBaseTween, MCurveFloat) == 0x000058, "Member 'UBaseTween::MCurveFloat' has a wrong offset!");
static_assert(offsetof(UBaseTween, MOwningTweenContainer) == 0x000068, "Member 'UBaseTween::MOwningTweenContainer' has a wrong offset!");

// Class TweenMaker.TweenContainer
// 0x0060 (0x0088 - 0x0028)
class UTweenContainer final : public UObject
{
public:
	class UTweenManagerComponent*                 OwningTweenManager;                                // 0x0028(0x0008)(ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_             OnTweenContainerEnd;                               // 0x0030(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	uint8                                         Pad_40[0x10];                                      // 0x0040(0x0010)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FParallelTween>                 MSequences;                                        // 0x0050(0x0010)(ZeroConstructor, NativeAccessSpecifierPrivate)
	uint8                                         Pad_60[0x28];                                      // 0x0060(0x0028)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void DeleteTweenContainer();
	void DeleteTweensInContainerByObject(class UObject*& TweenTarget, ETweenGenericType TweensType);
	void PauseTweenContainer();
	void RestartTweenContainer();
	void ResumeTweenContainer();
	void SetLoop(int32 NumLoops, ETweenLoopType LoopType);
	void SetPersistent(bool Persistent);
	void SetTimeScale(float NewTimeScale);
	void TogglePauseTweenContainer();

	bool HasEnded() const;
	bool IsObjectTweeningInContainer(class UObject*& TweenTarget, ETweenGenericType TweensType, class UBaseTween** TweenFound) const;
	bool IsPaused() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"TweenContainer">();
	}
	static class UTweenContainer* GetDefaultObj()
	{
		return GetDefaultObjImpl<UTweenContainer>();
	}
};
static_assert(alignof(UTweenContainer) == 0x000008, "Wrong alignment on UTweenContainer");
static_assert(sizeof(UTweenContainer) == 0x000088, "Wrong size on UTweenContainer");
static_assert(offsetof(UTweenContainer, OwningTweenManager) == 0x000028, "Member 'UTweenContainer::OwningTweenManager' has a wrong offset!");
static_assert(offsetof(UTweenContainer, OnTweenContainerEnd) == 0x000030, "Member 'UTweenContainer::OnTweenContainerEnd' has a wrong offset!");
static_assert(offsetof(UTweenContainer, MSequences) == 0x000050, "Member 'UTweenContainer::MSequences' has a wrong offset!");

// Class TweenMaker.TweenFloat
// 0x0170 (0x0218 - 0x00A8)
class UTweenFloat final : public UBaseTween
{
public:
	FMulticastInlineDelegateProperty_             OnTweenStart;                                      // 0x00A8(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_             OnTweenUpdate;                                     // 0x00B8(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_             OnTweenEnd;                                        // 0x00C8(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_             OnTweenActorHit;                                   // 0x00D8(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_             OnTweenActorBeginOverlap;                          // 0x00E8(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_             OnTweenPrimitiveComponentHit;                      // 0x00F8(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_             OnTweenPrimitiveComponentBeginOverlap;             // 0x0108(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_             OnTweenSplinePointReached;                         // 0x0118(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	uint8                                         Pad_128[0x88];                                     // 0x0128(0x0088)(Fixing Size After Last Property [ Dumper-7 ])
	class UTweenFloatLatentFactory*               TweenLatentProxy;                                  // 0x01B0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_1B8[0x50];                                     // 0x01B8(0x0050)(Fixing Size After Last Property [ Dumper-7 ])
	class USplineComponent*                       MSpline;                                           // 0x0208(0x0008)(ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_210[0x8];                                      // 0x0210(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void OnActorBeginOverlap(class AActor* PThisActor, class AActor* POtherActor);
	void OnActorHit(class AActor* PThisActor, class AActor* POtherActor, const struct FVector& PNormalImpulse, const struct FHitResult& PHit);
	void OnPrimitiveComponentBeginOverlap(class UPrimitiveComponent* PThisComponent, class AActor* POtherActor, class UPrimitiveComponent* POtherComp, int32 POtherBodyIndex, bool bFromSweep, const struct FHitResult& PSweepResult);
	void OnPrimitiveComponentHit(class UPrimitiveComponent* PThisComponent, class AActor* POtherActor, class UPrimitiveComponent* POtherComp, const struct FVector& PNormalImpulse, const struct FHitResult& PHitResult);

	float GetCurrentValue() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"TweenFloat">();
	}
	static class UTweenFloat* GetDefaultObj()
	{
		return GetDefaultObjImpl<UTweenFloat>();
	}
};
static_assert(alignof(UTweenFloat) == 0x000008, "Wrong alignment on UTweenFloat");
static_assert(sizeof(UTweenFloat) == 0x000218, "Wrong size on UTweenFloat");
static_assert(offsetof(UTweenFloat, OnTweenStart) == 0x0000A8, "Member 'UTweenFloat::OnTweenStart' has a wrong offset!");
static_assert(offsetof(UTweenFloat, OnTweenUpdate) == 0x0000B8, "Member 'UTweenFloat::OnTweenUpdate' has a wrong offset!");
static_assert(offsetof(UTweenFloat, OnTweenEnd) == 0x0000C8, "Member 'UTweenFloat::OnTweenEnd' has a wrong offset!");
static_assert(offsetof(UTweenFloat, OnTweenActorHit) == 0x0000D8, "Member 'UTweenFloat::OnTweenActorHit' has a wrong offset!");
static_assert(offsetof(UTweenFloat, OnTweenActorBeginOverlap) == 0x0000E8, "Member 'UTweenFloat::OnTweenActorBeginOverlap' has a wrong offset!");
static_assert(offsetof(UTweenFloat, OnTweenPrimitiveComponentHit) == 0x0000F8, "Member 'UTweenFloat::OnTweenPrimitiveComponentHit' has a wrong offset!");
static_assert(offsetof(UTweenFloat, OnTweenPrimitiveComponentBeginOverlap) == 0x000108, "Member 'UTweenFloat::OnTweenPrimitiveComponentBeginOverlap' has a wrong offset!");
static_assert(offsetof(UTweenFloat, OnTweenSplinePointReached) == 0x000118, "Member 'UTweenFloat::OnTweenSplinePointReached' has a wrong offset!");
static_assert(offsetof(UTweenFloat, TweenLatentProxy) == 0x0001B0, "Member 'UTweenFloat::TweenLatentProxy' has a wrong offset!");
static_assert(offsetof(UTweenFloat, MSpline) == 0x000208, "Member 'UTweenFloat::MSpline' has a wrong offset!");

// Class TweenMaker.TweenFloatLatentFactory
// 0x0030 (0x0060 - 0x0030)
class UTweenFloatLatentFactory final : public UBlueprintAsyncActionBase
{
public:
	FMulticastInlineDelegateProperty_             OnTweenStart;                                      // 0x0030(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_             OnTweenUpdate;                                     // 0x0040(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_             OnTweenEnd;                                        // 0x0050(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)

public:
	static class UTweenFloatLatentFactory* BP_AppendLatentTweenActorFollowSpline(class UTweenContainer*& TweenContainer, class UTweenFloat*& OutTween, class AActor*& TweenTarget, class USplineComponent* Spline, float Duration, bool ApplyRotation, bool ApplyScale, bool UseConstantSpeed, ETweenEaseType EaseType, bool DeleteTweenOnHit, bool DeleteTweenOnOverlap, int32 NumLoops, ETweenLoopType LoopType, float Delay, float TimeScale, bool TweenWhileGameIsPaused);
	static class UTweenFloatLatentFactory* BP_AppendLatentTweenCustomFloat(class UTweenContainer*& TweenContainer, class UTweenFloat*& OutTween, class UObject*& TweenTarget, float From, float To, float Duration, ETweenEaseType EaseType, int32 NumLoops, ETweenLoopType LoopType, float Delay, float TimeScale, bool TweenWhileGameIsPaused);
	static class UTweenFloatLatentFactory* BP_AppendLatentTweenMaterialFloatFromTo(class UTweenContainer*& TweenContainer, class UTweenFloat*& OutTween, class UMaterialInstanceDynamic*& TweenTarget, class FName ParameterName, float From, float To, float Duration, ETweenEaseType EaseType, int32 NumLoops, ETweenLoopType LoopType, float Delay, float TimeScale, bool TweenWhileGameIsPaused);
	static class UTweenFloatLatentFactory* BP_AppendLatentTweenMaterialFloatTo(class UTweenContainer*& TweenContainer, class UTweenFloat*& OutTween, class UMaterialInstanceDynamic*& TweenTarget, class FName ParameterName, float To, float Duration, ETweenEaseType EaseType, int32 NumLoops, ETweenLoopType LoopType, float Delay, float TimeScale, bool TweenWhileGameIsPaused);
	static class UTweenFloatLatentFactory* BP_AppendLatentTweenRotateActorAroundPoint(class UTweenContainer*& TweenContainer, class UTweenFloat*& OutTween, class AActor*& TweenTarget, const struct FVector& PivotPoint, float StartingAngle, float EndingAngle, float Radius, const struct FVector& Axis, float Duration, ETweenEaseType EaseType, bool DeleteTweenOnHit, bool DeleteTweenOnOverlap, int32 NumLoops, ETweenLoopType LoopType, float Delay, float TimeScale, bool TweenWhileGameIsPaused);
	static class UTweenFloatLatentFactory* BP_AppendLatentTweenRotateActorAroundPointByOffset(class UTweenContainer*& TweenContainer, class UTweenFloat*& OutTween, class AActor*& TweenTarget, const struct FVector& PivotPoint, float OffsetAngle, ETweenReferenceAxis ReferenceAxis, float Duration, ETweenEaseType EaseType, bool DeleteTweenOnHit, bool DeleteTweenOnOverlap, int32 NumLoops, ETweenLoopType LoopType, float Delay, float TimeScale, bool TweenWhileGameIsPaused);
	static class UTweenFloatLatentFactory* BP_AppendLatentTweenRotateSceneComponentAroundPoint(class UTweenContainer*& TweenContainer, class UTweenFloat*& OutTween, class USceneComponent*& TweenTarget, const struct FVector& PivotPoint, float StartingAngle, float EndingAngle, float Radius, const struct FVector& Axis, float Duration, ETweenEaseType EaseType, bool DeleteTweenOnHit, bool DeleteTweenOnOverlap, int32 NumLoops, ETweenLoopType LoopType, float Delay, float TimeScale, bool TweenWhileGameIsPaused);
	static class UTweenFloatLatentFactory* BP_AppendLatentTweenRotateSceneComponentAroundPointByOffset(class UTweenContainer*& TweenContainer, class UTweenFloat*& OutTween, class USceneComponent*& TweenTarget, const struct FVector& PivotPoint, float OffsetAngle, ETweenReferenceAxis ReferenceAxis, float Duration, ETweenEaseType EaseType, bool DeleteTweenOnHit, bool DeleteTweenOnOverlap, int32 NumLoops, ETweenLoopType LoopType, float Delay, float TimeScale, bool TweenWhileGameIsPaused);
	static class UTweenFloatLatentFactory* BP_AppendLatentTweenSceneComponentFollowSpline(class UTweenContainer*& TweenContainer, class UTweenFloat*& OutTween, class USceneComponent*& TweenTarget, class USplineComponent* Spline, float Duration, bool ApplyRotation, bool ApplyScale, bool UseConstantSpeed, ETweenEaseType EaseType, bool DeleteTweenOnHit, bool DeleteTweenOnOverlap, int32 NumLoops, ETweenLoopType LoopType, float Delay, float TimeScale, bool TweenWhileGameIsPaused);
	static class UTweenFloatLatentFactory* BP_AppendLatentTweenWidgetAngleTo(class UTweenContainer*& TweenContainer, class UTweenFloat*& OutTween, class UWidget*& TweenTarget, float To, float Duration, ETweenEaseType EaseType, int32 NumLoops, ETweenLoopType LoopType, float Delay, float TimeScale, bool TweenWhileGameIsPaused);
	static class UTweenFloatLatentFactory* BP_AppendLatentTweenWidgetOpacityTo(class UTweenContainer*& TweenContainer, class UTweenFloat*& OutTween, class UWidget*& TweenTarget, float To, float Duration, ETweenEaseType EaseType, int32 NumLoops, ETweenLoopType LoopType, float Delay, float TimeScale, bool TweenWhileGameIsPaused);
	static class UTweenFloatLatentFactory* BP_CreateLatentTweenActorFollowSpline(class UTweenManagerComponent* TweenManager, class AActor*& TweenTarget, class UTweenContainer*& OutTweenContainer, class UTweenFloat*& OutTween, class USplineComponent* Spline, float Duration, bool ApplyRotation, bool ApplyScale, bool UseConstantSpeed, ETweenEaseType EaseType, bool DeleteTweenOnHit, bool DeleteTweenOnOverlap, int32 NumLoops, ETweenLoopType LoopType, float Delay, float TimeScale, bool TweenWhileGameIsPaused);
	static class UTweenFloatLatentFactory* BP_CreateLatentTweenCustomFloat(class UTweenManagerComponent* TweenManager, class UObject*& TweenTarget, class UTweenContainer*& OutTweenContainer, class UTweenFloat*& OutTween, float From, float To, float Duration, ETweenEaseType EaseType, int32 NumLoops, ETweenLoopType LoopType, float Delay, float TimeScale, bool TweenWhileGameIsPaused);
	static class UTweenFloatLatentFactory* BP_CreateLatentTweenMaterialFloatFromTo(class UTweenManagerComponent* TweenManager, class UMaterialInstanceDynamic*& TweenTarget, class UTweenContainer*& OutTweenContainer, class UTweenFloat*& OutTween, class FName ParameterName, float From, float To, float Duration, ETweenEaseType EaseType, int32 NumLoops, ETweenLoopType LoopType, float Delay, float TimeScale, bool TweenWhileGameIsPaused);
	static class UTweenFloatLatentFactory* BP_CreateLatentTweenMaterialFloatTo(class UTweenManagerComponent* TweenManager, class UMaterialInstanceDynamic*& TweenTarget, class UTweenContainer*& OutTweenContainer, class UTweenFloat*& OutTween, class FName ParameterName, float To, float Duration, ETweenEaseType EaseType, int32 NumLoops, ETweenLoopType LoopType, float Delay, float TimeScale, bool TweenWhileGameIsPaused);
	static class UTweenFloatLatentFactory* BP_CreateLatentTweenRotateActorAroundPoint(class UTweenManagerComponent* TweenManager, class AActor*& TweenTarget, class UTweenContainer*& OutTweenContainer, class UTweenFloat*& OutTween, const struct FVector& PivotPoint, float StartingAngle, float EndingAngle, float Radius, const struct FVector& Axis, float Duration, ETweenEaseType EaseType, bool DeleteTweenOnHit, bool DeleteTweenOnOverlap, int32 NumLoops, ETweenLoopType LoopType, float Delay, float TimeScale, bool TweenWhileGameIsPaused);
	static class UTweenFloatLatentFactory* BP_CreateLatentTweenRotateActorAroundPointByOffset(class UTweenManagerComponent* TweenManager, class AActor*& TweenTarget, class UTweenContainer*& OutTweenContainer, class UTweenFloat*& OutTween, const struct FVector& PivotPoint, float OffsetAngle, ETweenReferenceAxis ReferenceAxis, float Duration, ETweenEaseType EaseType, bool DeleteTweenOnHit, bool DeleteTweenOnOverlap, int32 NumLoops, ETweenLoopType LoopType, float Delay, float TimeScale, bool TweenWhileGameIsPaused);
	static class UTweenFloatLatentFactory* BP_CreateLatentTweenRotateSceneComponentAroundPoint(class UTweenManagerComponent* TweenManager, class USceneComponent*& TweenTarget, class UTweenContainer*& OutTweenContainer, class UTweenFloat*& OutTween, const struct FVector& PivotPoint, float StartingAngle, float EndingAngle, float Radius, const struct FVector& Axis, float Duration, ETweenEaseType EaseType, bool DeleteTweenOnHit, bool DeleteTweenOnOverlap, int32 NumLoops, ETweenLoopType LoopType, float Delay, float TimeScale, bool TweenWhileGameIsPaused);
	static class UTweenFloatLatentFactory* BP_CreateLatentTweenRotateSceneComponentAroundPointByOffset(class UTweenManagerComponent* TweenManager, class USceneComponent*& TweenTarget, class UTweenContainer*& OutTweenContainer, class UTweenFloat*& OutTween, const struct FVector& PivotPoint, float OffsetAngle, ETweenReferenceAxis ReferenceAxis, float Duration, ETweenEaseType EaseType, bool DeleteTweenOnHit, bool DeleteTweenOnOverlap, int32 NumLoops, ETweenLoopType LoopType, float Delay, float TimeScale, bool TweenWhileGameIsPaused);
	static class UTweenFloatLatentFactory* BP_CreateLatentTweenSceneComponentFollowSpline(class UTweenManagerComponent* TweenManager, class USceneComponent*& TweenTarget, class UTweenContainer*& OutTweenContainer, class UTweenFloat*& OutTween, class USplineComponent* Spline, float Duration, bool ApplyRotation, bool ApplyScale, bool UseConstantSpeed, ETweenEaseType EaseType, bool DeleteTweenOnHit, bool DeleteTweenOnOverlap, int32 NumLoops, ETweenLoopType LoopType, float Delay, float TimeScale, bool TweenWhileGameIsPaused);
	static class UTweenFloatLatentFactory* BP_CreateLatentTweenWidgetAngleTo(class UTweenManagerComponent* TweenManager, class UWidget*& TweenTarget, class UTweenContainer*& OutTweenContainer, class UTweenFloat*& OutTween, float To, float Duration, ETweenEaseType EaseType, int32 NumLoops, ETweenLoopType LoopType, float Delay, float TimeScale, bool TweenWhileGameIsPaused);
	static class UTweenFloatLatentFactory* BP_CreateLatentTweenWidgetOpacityTo(class UTweenManagerComponent* TweenManager, class UWidget*& TweenTarget, class UTweenContainer*& OutTweenContainer, class UTweenFloat*& OutTween, float To, float Duration, ETweenEaseType EaseType, int32 NumLoops, ETweenLoopType LoopType, float Delay, float TimeScale, bool TweenWhileGameIsPaused);
	static class UTweenFloatLatentFactory* BP_JoinLatentTweenActorFollowSpline(class UTweenContainer*& TweenContainer, class UTweenFloat*& OutTween, class AActor*& TweenTarget, class USplineComponent* Spline, float Duration, bool ApplyRotation, bool ApplyScale, bool UseConstantSpeed, ETweenEaseType EaseType, bool DeleteTweenOnHit, bool DeleteTweenOnOverlap, float Delay, float TimeScale, bool TweenWhileGameIsPaused);
	static class UTweenFloatLatentFactory* BP_JoinLatentTweenCustomFloat(class UTweenContainer*& TweenContainer, class UTweenFloat*& OutTween, class UObject*& TweenTarget, float From, float To, float Duration, ETweenEaseType EaseType, float Delay, float TimeScale, bool TweenWhileGameIsPaused);
	static class UTweenFloatLatentFactory* BP_JoinLatentTweenMaterialFloatFromTo(class UTweenContainer*& TweenContainer, class UTweenFloat*& OutTween, class UMaterialInstanceDynamic*& TweenTarget, class FName ParameterName, float From, float To, float Duration, ETweenEaseType EaseType, float Delay, float TimeScale, bool TweenWhileGameIsPaused);
	static class UTweenFloatLatentFactory* BP_JoinLatentTweenMaterialFloatTo(class UTweenContainer*& TweenContainer, class UTweenFloat*& OutTween, class UMaterialInstanceDynamic*& TweenTarget, class FName ParameterName, float To, float Duration, ETweenEaseType EaseType, float Delay, float TimeScale, bool TweenWhileGameIsPaused);
	static class UTweenFloatLatentFactory* BP_JoinLatentTweenRotateActorAroundPoint(class UTweenContainer*& TweenContainer, class UTweenFloat*& OutTween, class AActor*& TweenTarget, const struct FVector& PivotPoint, float StartingAngle, float EndingAngle, float Radius, const struct FVector& Axis, float Duration, ETweenEaseType EaseType, bool DeleteTweenOnHit, bool DeleteTweenOnOverlap, float Delay, float TimeScale, bool TweenWhileGameIsPaused);
	static class UTweenFloatLatentFactory* BP_JoinLatentTweenRotateActorAroundPointByOffset(class UTweenContainer*& TweenContainer, class UTweenFloat*& OutTween, class AActor*& TweenTarget, const struct FVector& PivotPoint, float OffsetAngle, ETweenReferenceAxis ReferenceAxis, float Duration, ETweenEaseType EaseType, bool DeleteTweenOnHit, bool DeleteTweenOnOverlap, float Delay, float TimeScale, bool TweenWhileGameIsPaused);
	static class UTweenFloatLatentFactory* BP_JoinLatentTweenRotateSceneComponentAroundPoint(class UTweenContainer*& TweenContainer, class UTweenFloat*& OutTween, class USceneComponent*& TweenTarget, const struct FVector& PivotPoint, float StartingAngle, float EndingAngle, float Radius, const struct FVector& Axis, float Duration, ETweenEaseType EaseType, bool DeleteTweenOnHit, bool DeleteTweenOnOverlap, float Delay, float TimeScale, bool TweenWhileGameIsPaused);
	static class UTweenFloatLatentFactory* BP_JoinLatentTweenRotateSceneComponentAroundPointByOffset(class UTweenContainer*& TweenContainer, class UTweenFloat*& OutTween, class USceneComponent*& TweenTarget, const struct FVector& PivotPoint, float OffsetAngle, ETweenReferenceAxis ReferenceAxis, float Duration, ETweenEaseType EaseType, bool DeleteTweenOnHit, bool DeleteTweenOnOverlap, float Delay, float TimeScale, bool TweenWhileGameIsPaused);
	static class UTweenFloatLatentFactory* BP_JoinLatentTweenSceneComponentFollowSpline(class UTweenContainer*& TweenContainer, class UTweenFloat*& OutTween, class USceneComponent*& TweenTarget, class USplineComponent* Spline, float Duration, bool ApplyRotation, bool ApplyScale, bool UseConstantSpeed, ETweenEaseType EaseType, bool DeleteTweenOnHit, bool DeleteTweenOnOverlap, float Delay, float TimeScale, bool TweenWhileGameIsPaused);
	static class UTweenFloatLatentFactory* BP_JoinLatentTweenWidgetAngleTo(class UTweenContainer*& TweenContainer, class UTweenFloat*& OutTween, class UWidget*& TweenTarget, float To, float Duration, ETweenEaseType EaseType, float Delay, float TimeScale, bool TweenWhileGameIsPaused);
	static class UTweenFloatLatentFactory* BP_JoinLatentTweenWidgetOpacityTo(class UTweenContainer*& TweenContainer, class UTweenFloat*& OutTween, class UWidget*& TweenTarget, float To, float Duration, ETweenEaseType EaseType, float Delay, float TimeScale, bool TweenWhileGameIsPaused);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"TweenFloatLatentFactory">();
	}
	static class UTweenFloatLatentFactory* GetDefaultObj()
	{
		return GetDefaultObjImpl<UTweenFloatLatentFactory>();
	}
};
static_assert(alignof(UTweenFloatLatentFactory) == 0x000008, "Wrong alignment on UTweenFloatLatentFactory");
static_assert(sizeof(UTweenFloatLatentFactory) == 0x000060, "Wrong size on UTweenFloatLatentFactory");
static_assert(offsetof(UTweenFloatLatentFactory, OnTweenStart) == 0x000030, "Member 'UTweenFloatLatentFactory::OnTweenStart' has a wrong offset!");
static_assert(offsetof(UTweenFloatLatentFactory, OnTweenUpdate) == 0x000040, "Member 'UTweenFloatLatentFactory::OnTweenUpdate' has a wrong offset!");
static_assert(offsetof(UTweenFloatLatentFactory, OnTweenEnd) == 0x000050, "Member 'UTweenFloatLatentFactory::OnTweenEnd' has a wrong offset!");

// Class TweenMaker.TweenFloatStandardFactory
// 0x0000 (0x0028 - 0x0028)
class UTweenFloatStandardFactory final : public UObject
{
public:
	static class UTweenFloat* BP_AppendTweenActorFollowSpline(class UTweenContainer*& TweenContainer, class AActor*& TweenTarget, class USplineComponent* Spline, float Duration, bool ApplyRotation, bool ApplyScale, bool UseConstantSpeed, ETweenEaseType EaseType, bool DeleteTweenOnHit, bool DeleteTweenOnOverlap, int32 NumLoops, ETweenLoopType LoopType, float Delay, float TimeScale, bool TweenWhileGameIsPaused, int32 SequenceIndex);
	static class UTweenFloat* BP_AppendTweenCustomFloat(class UTweenContainer*& TweenContainer, class UObject*& TweenTarget, float From, float To, float Duration, ETweenEaseType EaseType, int32 NumLoops, ETweenLoopType LoopType, float Delay, float TimeScale, bool TweenWhileGameIsPaused, int32 SequenceIndex);
	static class UTweenFloat* BP_AppendTweenMaterialFloatFromTo(class UTweenContainer*& TweenContainer, class UMaterialInstanceDynamic*& TweenTarget, class FName ParameterName, float From, float To, float Duration, ETweenEaseType EaseType, int32 NumLoops, ETweenLoopType LoopType, float Delay, float TimeScale, bool TweenWhileGameIsPaused, int32 SequenceIndex);
	static class UTweenFloat* BP_AppendTweenMaterialFloatTo(class UTweenContainer*& TweenContainer, class UMaterialInstanceDynamic*& TweenTarget, class FName ParameterName, float To, float Duration, ETweenEaseType EaseType, int32 NumLoops, ETweenLoopType LoopType, float Delay, float TimeScale, bool TweenWhileGameIsPaused, int32 SequenceIndex);
	static class UTweenFloat* BP_AppendTweenRotateActorAroundPoint(class UTweenContainer*& TweenContainer, class AActor*& TweenTarget, const struct FVector& PivotPoint, float StartingAngle, float EndingAngle, float Radius, const struct FVector& Axis, float Duration, ETweenEaseType EaseType, bool DeleteTweenOnHit, bool DeleteTweenOnOverlap, int32 NumLoops, ETweenLoopType LoopType, float Delay, float TimeScale, bool TweenWhileGameIsPaused, int32 SequenceIndex);
	static class UTweenFloat* BP_AppendTweenRotateActorAroundPointByOffset(class UTweenContainer*& TweenContainer, class AActor*& TweenTarget, const struct FVector& PivotPoint, float OffsetAngle, ETweenReferenceAxis ReferenceAxis, float Duration, ETweenEaseType EaseType, bool DeleteTweenOnHit, bool DeleteTweenOnOverlap, int32 NumLoops, ETweenLoopType LoopType, float Delay, float TimeScale, bool TweenWhileGameIsPaused, int32 SequenceIndex);
	static class UTweenFloat* BP_AppendTweenRotateSceneComponentAroundPoint(class UTweenContainer*& TweenContainer, class USceneComponent*& TweenTarget, const struct FVector& PivotPoint, float StartingAngle, float EndingAngle, float Radius, const struct FVector& Axis, float Duration, ETweenEaseType EaseType, bool DeleteTweenOnHit, bool DeleteTweenOnOverlap, int32 NumLoops, ETweenLoopType LoopType, float Delay, float TimeScale, bool TweenWhileGameIsPaused, int32 SequenceIndex);
	static class UTweenFloat* BP_AppendTweenRotateSceneComponentAroundPointByOffset(class UTweenContainer*& TweenContainer, class USceneComponent*& TweenTarget, const struct FVector& PivotPoint, float OffsetAngle, ETweenReferenceAxis ReferenceAxis, float Duration, ETweenEaseType EaseType, bool DeleteTweenOnHit, bool DeleteTweenOnOverlap, int32 NumLoops, ETweenLoopType LoopType, float Delay, float TimeScale, bool TweenWhileGameIsPaused, int32 SequenceIndex);
	static class UTweenFloat* BP_AppendTweenSceneComponentFollowSpline(class UTweenContainer*& TweenContainer, class USceneComponent*& TweenTarget, class USplineComponent* Spline, float Duration, bool ApplyRotation, bool ApplyScale, bool UseConstantSpeed, ETweenEaseType EaseType, bool DeleteTweenOnHit, bool DeleteTweenOnOverlap, int32 NumLoops, ETweenLoopType LoopType, float Delay, float TimeScale, bool TweenWhileGameIsPaused, int32 SequenceIndex);
	static class UTweenFloat* BP_AppendTweenWidgetAngleTo(class UTweenContainer*& TweenContainer, class UWidget*& TweenTarget, float To, float Duration, ETweenEaseType EaseType, int32 NumLoops, ETweenLoopType LoopType, float Delay, float TimeScale, bool TweenWhileGameIsPaused, int32 SequenceIndex);
	static class UTweenFloat* BP_AppendTweenWidgetOpacityTo(class UTweenContainer*& TweenContainer, class UWidget*& TweenTarget, float To, float Duration, ETweenEaseType EaseType, int32 NumLoops, ETweenLoopType LoopType, float Delay, float TimeScale, bool TweenWhileGameIsPaused, int32 SequenceIndex);
	static void BP_CreateTweenActorFollowSpline(class UTweenManagerComponent* TweenManager, class AActor*& TweenTarget, class UTweenContainer** TweenContainer, class UTweenFloat** Tween, class USplineComponent* Spline, float Duration, bool ApplyRotation, bool ApplyScale, bool UseConstantSpeed, ETweenEaseType EaseType, bool DeleteTweenOnHit, bool DeleteTweenOnOverlap, int32 NumLoops, ETweenLoopType LoopType, float Delay, float TimeScale, bool TweenWhileGameIsPaused, int32 SequenceIndex);
	static void BP_CreateTweenCustomFloat(class UTweenManagerComponent* TweenManager, class UObject*& TweenTarget, class UTweenContainer** TweenContainer, class UTweenFloat** Tween, float From, float To, float Duration, ETweenEaseType EaseType, int32 NumLoops, ETweenLoopType LoopType, float Delay, float TimeScale, bool TweenWhileGameIsPaused, int32 SequenceIndex);
	static void BP_CreateTweenMaterialFloatFromTo(class UTweenManagerComponent* TweenManager, class UMaterialInstanceDynamic*& TweenTarget, class UTweenContainer** TweenContainer, class UTweenFloat** Tween, class FName ParameterName, float From, float To, float Duration, ETweenEaseType EaseType, int32 NumLoops, ETweenLoopType LoopType, float Delay, float TimeScale, bool TweenWhileGameIsPaused, int32 SequenceIndex);
	static void BP_CreateTweenMaterialFloatTo(class UTweenManagerComponent* TweenManager, class UMaterialInstanceDynamic*& TweenTarget, class UTweenContainer** TweenContainer, class UTweenFloat** Tween, class FName ParameterName, float To, float Duration, ETweenEaseType EaseType, int32 NumLoops, ETweenLoopType LoopType, float Delay, float TimeScale, bool TweenWhileGameIsPaused, int32 SequenceIndex);
	static void BP_CreateTweenRotateActorAroundPoint(class UTweenManagerComponent* TweenManager, class AActor*& TweenTarget, class UTweenContainer** TweenContainer, class UTweenFloat** Tween, const struct FVector& PivotPoint, float StartingAngle, float EndingAngle, float Radius, const struct FVector& Axis, float Duration, ETweenEaseType EaseType, bool DeleteTweenOnHit, bool DeleteTweenOnOverlap, int32 NumLoops, ETweenLoopType LoopType, float Delay, float TimeScale, bool TweenWhileGameIsPaused, int32 SequenceIndex);
	static void BP_CreateTweenRotateActorAroundPointByOffset(class UTweenManagerComponent* TweenManager, class AActor*& TweenTarget, class UTweenContainer** TweenContainer, class UTweenFloat** Tween, const struct FVector& PivotPoint, float OffsetAngle, ETweenReferenceAxis ReferenceAxis, float Duration, ETweenEaseType EaseType, bool DeleteTweenOnHit, bool DeleteTweenOnOverlap, int32 NumLoops, ETweenLoopType LoopType, float Delay, float TimeScale, bool TweenWhileGameIsPaused, int32 SequenceIndex);
	static void BP_CreateTweenRotateSceneComponentAroundPoint(class UTweenManagerComponent* TweenManager, class USceneComponent*& TweenTarget, class UTweenContainer** TweenContainer, class UTweenFloat** Tween, const struct FVector& PivotPoint, float StartingAngle, float EndingAngle, float Radius, const struct FVector& Axis, float Duration, ETweenEaseType EaseType, bool DeleteTweenOnHit, bool DeleteTweenOnOverlap, int32 NumLoops, ETweenLoopType LoopType, float Delay, float TimeScale, bool TweenWhileGameIsPaused, int32 SequenceIndex);
	static void BP_CreateTweenRotateSceneComponentAroundPointByOffset(class UTweenManagerComponent* TweenManager, class USceneComponent*& TweenTarget, class UTweenContainer** TweenContainer, class UTweenFloat** Tween, const struct FVector& PivotPoint, float OffsetAngle, ETweenReferenceAxis ReferenceAxis, float Duration, ETweenEaseType EaseType, bool DeleteTweenOnHit, bool DeleteTweenOnOverlap, int32 NumLoops, ETweenLoopType LoopType, float Delay, float TimeScale, bool TweenWhileGameIsPaused, int32 SequenceIndex);
	static void BP_CreateTweenSceneComponentFollowSpline(class UTweenManagerComponent* TweenManager, class USceneComponent*& TweenTarget, class UTweenContainer** TweenContainer, class UTweenFloat** Tween, class USplineComponent* Spline, float Duration, bool ApplyRotation, bool ApplyScale, bool UseConstantSpeed, ETweenEaseType EaseType, bool DeleteTweenOnHit, bool DeleteTweenOnOverlap, int32 NumLoops, ETweenLoopType LoopType, float Delay, float TimeScale, bool TweenWhileGameIsPaused, int32 SequenceIndex);
	static void BP_CreateTweenWidgetAngleTo(class UTweenManagerComponent* TweenManager, class UWidget*& TweenTarget, class UTweenContainer** TweenContainer, class UTweenFloat** Tween, float To, float Duration, ETweenEaseType EaseType, int32 NumLoops, ETweenLoopType LoopType, float Delay, float TimeScale, bool TweenWhileGameIsPaused, int32 SequenceIndex);
	static void BP_CreateTweenWidgetOpacityTo(class UTweenManagerComponent* TweenManager, class UWidget*& TweenTarget, class UTweenContainer** TweenContainer, class UTweenFloat** Tween, float To, float Duration, ETweenEaseType EaseType, int32 NumLoops, ETweenLoopType LoopType, float Delay, float TimeScale, bool TweenWhileGameIsPaused, int32 SequenceIndex);
	static class UTweenFloat* BP_JoinTweenActorFollowSpline(class UTweenContainer*& TweenContainer, class AActor*& TweenTarget, class USplineComponent* Spline, float Duration, bool ApplyRotation, bool ApplyScale, bool UseConstantSpeed, ETweenEaseType EaseType, bool DeleteTweenOnHit, bool DeleteTweenOnOverlap, float Delay, float TimeScale, bool TweenWhileGameIsPaused, int32 SequenceIndex);
	static class UTweenFloat* BP_JoinTweenCustomFloat(class UTweenContainer*& TweenContainer, class UObject*& TweenTarget, float From, float To, float Duration, ETweenEaseType EaseType, float Delay, float TimeScale, bool TweenWhileGameIsPaused, int32 SequenceIndex);
	static class UTweenFloat* BP_JoinTweenMaterialFloatFromTo(class UTweenContainer*& TweenContainer, class UMaterialInstanceDynamic*& TweenTarget, class FName ParameterName, float From, float To, float Duration, ETweenEaseType EaseType, float Delay, float TimeScale, bool TweenWhileGameIsPaused, int32 SequenceIndex);
	static class UTweenFloat* BP_JoinTweenMaterialFloatTo(class UTweenContainer*& TweenContainer, class UMaterialInstanceDynamic*& TweenTarget, class FName ParameterName, float To, float Duration, ETweenEaseType EaseType, float Delay, float TimeScale, bool TweenWhileGameIsPaused, int32 SequenceIndex);
	static class UTweenFloat* BP_JoinTweenRotateActorAroundPoint(class UTweenContainer*& TweenContainer, class AActor*& TweenTarget, const struct FVector& PivotPoint, float StartingAngle, float EndingAngle, float Radius, const struct FVector& Axis, float Duration, ETweenEaseType EaseType, bool DeleteTweenOnHit, bool DeleteTweenOnOverlap, float Delay, float TimeScale, bool TweenWhileGameIsPaused, int32 SequenceIndex);
	static class UTweenFloat* BP_JoinTweenRotateActorAroundPointByOffset(class UTweenContainer*& TweenContainer, class AActor*& TweenTarget, const struct FVector& PivotPoint, float OffsetAngle, ETweenReferenceAxis ReferenceAxis, float Duration, ETweenEaseType EaseType, bool DeleteTweenOnHit, bool DeleteTweenOnOverlap, float Delay, float TimeScale, bool TweenWhileGameIsPaused, int32 SequenceIndex);
	static class UTweenFloat* BP_JoinTweenRotateSceneComponentAroundPoint(class UTweenContainer*& TweenContainer, class USceneComponent*& TweenTarget, const struct FVector& PivotPoint, float StartingAngle, float EndingAngle, float Radius, const struct FVector& Axis, float Duration, ETweenEaseType EaseType, bool DeleteTweenOnHit, bool DeleteTweenOnOverlap, float Delay, float TimeScale, bool TweenWhileGameIsPaused, int32 SequenceIndex);
	static class UTweenFloat* BP_JoinTweenRotateSceneComponentAroundPointByOffset(class UTweenContainer*& TweenContainer, class USceneComponent*& TweenTarget, const struct FVector& PivotPoint, float OffsetAngle, ETweenReferenceAxis ReferenceAxis, float Duration, ETweenEaseType EaseType, bool DeleteTweenOnHit, bool DeleteTweenOnOverlap, float Delay, float TimeScale, bool TweenWhileGameIsPaused, int32 SequenceIndex);
	static class UTweenFloat* BP_JoinTweenSceneComponentFollowSpline(class UTweenContainer*& TweenContainer, class USceneComponent*& TweenTarget, class USplineComponent* Spline, float Duration, bool ApplyRotation, bool ApplyScale, bool UseConstantSpeed, ETweenEaseType EaseType, bool DeleteTweenOnHit, bool DeleteTweenOnOverlap, float Delay, float TimeScale, bool TweenWhileGameIsPaused, int32 SequenceIndex);
	static class UTweenFloat* BP_JoinTweenWidgetAngleTo(class UTweenContainer*& TweenContainer, class UWidget*& TweenTarget, float To, float Duration, ETweenEaseType EaseType, float Delay, float TimeScale, bool TweenWhileGameIsPaused, int32 SequenceIndex);
	static class UTweenFloat* BP_JoinTweenWidgetOpacityTo(class UTweenContainer*& TweenContainer, class UWidget*& TweenTarget, float To, float Duration, ETweenEaseType EaseType, float Delay, float TimeScale, bool TweenWhileGameIsPaused, int32 SequenceIndex);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"TweenFloatStandardFactory">();
	}
	static class UTweenFloatStandardFactory* GetDefaultObj()
	{
		return GetDefaultObjImpl<UTweenFloatStandardFactory>();
	}
};
static_assert(alignof(UTweenFloatStandardFactory) == 0x000008, "Wrong alignment on UTweenFloatStandardFactory");
static_assert(sizeof(UTweenFloatStandardFactory) == 0x000028, "Wrong size on UTweenFloatStandardFactory");

// Class TweenMaker.TweenLinearColor
// 0x00D0 (0x0178 - 0x00A8)
class UTweenLinearColor final : public UBaseTween
{
public:
	FMulticastInlineDelegateProperty_             OnTweenStart;                                      // 0x00A8(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_             OnTweenUpdate;                                     // 0x00B8(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_             OnTweenEnd;                                        // 0x00C8(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	uint8                                         Pad_D8[0x38];                                      // 0x00D8(0x0038)(Fixing Size After Last Property [ Dumper-7 ])
	class UTweenLinearColorLatentFactory*         TweenLatentProxy;                                  // 0x0110(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_118[0x60];                                     // 0x0118(0x0060)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	struct FLinearColor GetCurrentValue() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"TweenLinearColor">();
	}
	static class UTweenLinearColor* GetDefaultObj()
	{
		return GetDefaultObjImpl<UTweenLinearColor>();
	}
};
static_assert(alignof(UTweenLinearColor) == 0x000008, "Wrong alignment on UTweenLinearColor");
static_assert(sizeof(UTweenLinearColor) == 0x000178, "Wrong size on UTweenLinearColor");
static_assert(offsetof(UTweenLinearColor, OnTweenStart) == 0x0000A8, "Member 'UTweenLinearColor::OnTweenStart' has a wrong offset!");
static_assert(offsetof(UTweenLinearColor, OnTweenUpdate) == 0x0000B8, "Member 'UTweenLinearColor::OnTweenUpdate' has a wrong offset!");
static_assert(offsetof(UTweenLinearColor, OnTweenEnd) == 0x0000C8, "Member 'UTweenLinearColor::OnTweenEnd' has a wrong offset!");
static_assert(offsetof(UTweenLinearColor, TweenLatentProxy) == 0x000110, "Member 'UTweenLinearColor::TweenLatentProxy' has a wrong offset!");

// Class TweenMaker.TweenLinearColorLatentFactory
// 0x0030 (0x0060 - 0x0030)
class UTweenLinearColorLatentFactory final : public UBlueprintAsyncActionBase
{
public:
	FMulticastInlineDelegateProperty_             OnTweenStart;                                      // 0x0030(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_             OnTweenUpdate;                                     // 0x0040(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_             OnTweenEnd;                                        // 0x0050(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)

public:
	static class UTweenLinearColorLatentFactory* BP_AppendLatentTweenMaterialVectorFromTo(class UTweenContainer*& TweenContainer, class UTweenLinearColor*& OutTween, class UMaterialInstanceDynamic*& TweenTarget, class FName ParameterName, const struct FLinearColor& From, const struct FLinearColor& To, float Duration, ETweenEaseType EaseType, int32 NumLoops, ETweenLoopType LoopType, float Delay, float TimeScale, bool TweenWhileGameIsPaused);
	static class UTweenLinearColorLatentFactory* BP_AppendLatentTweenMaterialVectorTo(class UTweenContainer*& TweenContainer, class UTweenLinearColor*& OutTween, class UMaterialInstanceDynamic*& TweenTarget, class FName ParameterName, const struct FLinearColor& To, float Duration, ETweenEaseType EaseType, int32 NumLoops, ETweenLoopType LoopType, float Delay, float TimeScale, bool TweenWhileGameIsPaused);
	static class UTweenLinearColorLatentFactory* BP_CreateLatentTweenMaterialVectorFromTo(class UTweenManagerComponent* TweenManager, class UMaterialInstanceDynamic*& TweenTarget, class UTweenContainer*& OutTweenContainer, class UTweenLinearColor*& OutTween, class FName ParameterName, const struct FLinearColor& From, const struct FLinearColor& To, float Duration, ETweenEaseType EaseType, int32 NumLoops, ETweenLoopType LoopType, float Delay, float TimeScale, bool TweenWhileGameIsPaused);
	static class UTweenLinearColorLatentFactory* BP_CreateLatentTweenMaterialVectorTo(class UTweenManagerComponent* TweenManager, class UMaterialInstanceDynamic*& TweenTarget, class UTweenContainer*& OutTweenContainer, class UTweenLinearColor*& OutTween, class FName ParameterName, const struct FLinearColor& To, float Duration, ETweenEaseType EaseType, int32 NumLoops, ETweenLoopType LoopType, float Delay, float TimeScale, bool TweenWhileGameIsPaused);
	static class UTweenLinearColorLatentFactory* BP_JoinLatentTweenMaterialVectorFromTo(class UTweenContainer*& TweenContainer, class UTweenLinearColor*& OutTween, class UMaterialInstanceDynamic*& TweenTarget, class FName ParameterName, const struct FLinearColor& From, const struct FLinearColor& To, float Duration, ETweenEaseType EaseType, float Delay, float TimeScale, bool TweenWhileGameIsPaused);
	static class UTweenLinearColorLatentFactory* BP_JoinLatentTweenMaterialVectorTo(class UTweenContainer*& TweenContainer, class UTweenLinearColor*& OutTween, class UMaterialInstanceDynamic*& TweenTarget, class FName ParameterName, const struct FLinearColor& To, float Duration, ETweenEaseType EaseType, float Delay, float TimeScale, bool TweenWhileGameIsPaused);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"TweenLinearColorLatentFactory">();
	}
	static class UTweenLinearColorLatentFactory* GetDefaultObj()
	{
		return GetDefaultObjImpl<UTweenLinearColorLatentFactory>();
	}
};
static_assert(alignof(UTweenLinearColorLatentFactory) == 0x000008, "Wrong alignment on UTweenLinearColorLatentFactory");
static_assert(sizeof(UTweenLinearColorLatentFactory) == 0x000060, "Wrong size on UTweenLinearColorLatentFactory");
static_assert(offsetof(UTweenLinearColorLatentFactory, OnTweenStart) == 0x000030, "Member 'UTweenLinearColorLatentFactory::OnTweenStart' has a wrong offset!");
static_assert(offsetof(UTweenLinearColorLatentFactory, OnTweenUpdate) == 0x000040, "Member 'UTweenLinearColorLatentFactory::OnTweenUpdate' has a wrong offset!");
static_assert(offsetof(UTweenLinearColorLatentFactory, OnTweenEnd) == 0x000050, "Member 'UTweenLinearColorLatentFactory::OnTweenEnd' has a wrong offset!");

// Class TweenMaker.TweenLinearColorStandardFactory
// 0x0000 (0x0028 - 0x0028)
class UTweenLinearColorStandardFactory final : public UObject
{
public:
	static class UTweenLinearColor* BP_AppendTweenMaterialVectorFromTo(class UTweenContainer*& TweenContainer, class UMaterialInstanceDynamic*& TweenTarget, class FName ParameterName, const struct FLinearColor& From, const struct FLinearColor& To, float Duration, ETweenEaseType EaseType, int32 NumLoops, ETweenLoopType LoopType, float Delay, float TimeScale, bool TweenWhileGameIsPaused, int32 SequenceIndex);
	static class UTweenLinearColor* BP_AppendTweenMaterialVectorTo(class UTweenContainer*& TweenContainer, class UMaterialInstanceDynamic*& TweenTarget, class FName ParameterName, const struct FLinearColor& To, float Duration, ETweenEaseType EaseType, int32 NumLoops, ETweenLoopType LoopType, float Delay, float TimeScale, bool TweenWhileGameIsPaused, int32 SequenceIndex);
	static void BP_CreateTweenMaterialVectorFromTo(class UTweenManagerComponent* TweenManager, class UMaterialInstanceDynamic*& TweenTarget, class UTweenContainer** TweenContainer, class UTweenLinearColor** Tween, class FName ParameterName, const struct FLinearColor& From, const struct FLinearColor& To, float Duration, ETweenEaseType EaseType, int32 NumLoops, ETweenLoopType LoopType, float Delay, float TimeScale, bool TweenWhileGameIsPaused, int32 SequenceIndex);
	static void BP_CreateTweenMaterialVectorTo(class UTweenManagerComponent* TweenManager, class UMaterialInstanceDynamic*& TweenTarget, class UTweenContainer** TweenContainer, class UTweenLinearColor** Tween, class FName ParameterName, const struct FLinearColor& To, float Duration, ETweenEaseType EaseType, int32 NumLoops, ETweenLoopType LoopType, float Delay, float TimeScale, bool TweenWhileGameIsPaused, int32 SequenceIndex);
	static class UTweenLinearColor* BP_JoinTweenMaterialVectorFromTo(class UTweenContainer*& TweenContainer, class UMaterialInstanceDynamic*& TweenTarget, class FName ParameterName, const struct FLinearColor& From, const struct FLinearColor& To, float Duration, ETweenEaseType EaseType, float Delay, float TimeScale, bool TweenWhileGameIsPaused, int32 SequenceIndex);
	static class UTweenLinearColor* BP_JoinTweenMaterialVectorTo(class UTweenContainer*& TweenContainer, class UMaterialInstanceDynamic*& TweenTarget, class FName ParameterName, const struct FLinearColor& To, float Duration, ETweenEaseType EaseType, float Delay, float TimeScale, bool TweenWhileGameIsPaused, int32 SequenceIndex);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"TweenLinearColorStandardFactory">();
	}
	static class UTweenLinearColorStandardFactory* GetDefaultObj()
	{
		return GetDefaultObjImpl<UTweenLinearColorStandardFactory>();
	}
};
static_assert(alignof(UTweenLinearColorStandardFactory) == 0x000008, "Wrong alignment on UTweenLinearColorStandardFactory");
static_assert(sizeof(UTweenLinearColorStandardFactory) == 0x000028, "Wrong size on UTweenLinearColorStandardFactory");

// Class TweenMaker.TweenManagerActor
// 0x0000 (0x0220 - 0x0220)
class ATweenManagerActor : public AActor
{
public:
	static void BP_CreateTweenContainerStatic(class UTweenContainer** TweenContainer, int32 NumLoops, ETweenLoopType LoopType, float TimeScale);
	static int32 DeleteAllTweens();
	static bool DeleteAllTweensByObject(class UObject*& TweenTarget, ETweenGenericType TweensType);
	static bool FindTweenByName(class FName TweenName, ETweenGenericType TweenType, class UBaseTween** TweenFound);
	static bool IsObjectTweening(class UObject*& TweenTarget, ETweenGenericType TweensType, class UBaseTween** TweenFound);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"TweenManagerActor">();
	}
	static class ATweenManagerActor* GetDefaultObj()
	{
		return GetDefaultObjImpl<ATweenManagerActor>();
	}
};
static_assert(alignof(ATweenManagerActor) == 0x000008, "Wrong alignment on ATweenManagerActor");
static_assert(sizeof(ATweenManagerActor) == 0x000220, "Wrong size on ATweenManagerActor");

// Class TweenMaker.TweenManagerComponent
// 0x00B0 (0x0160 - 0x00B0)
class UTweenManagerComponent final : public UActorComponent
{
public:
	TArray<class UTweenContainer*>                MTweenContainers;                                  // 0x00B0(0x0010)(ZeroConstructor, NativeAccessSpecifierPrivate)
	uint8                                         Pad_C0[0xA0];                                      // 0x00C0(0x00A0)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void BP_CreateTweenContainer(class UTweenContainer** TweenContainer, int32 NumLoops, ETweenLoopType LoopType, float TimeScale);
	int32 DeleteAllTweens();
	bool DeleteAllTweensByObject(class UObject*& TweenTarget, ETweenGenericType TweensType);
	void TweenDestroyed(class UBaseTween* PTween);
	void UpdateNameMap(class UBaseTween* PTween, const class FName& PPreviousName, const class FName& PNewName);

	bool FindTweenByName(class FName TweenName, ETweenGenericType TweenType, class UBaseTween** TweenFound) const;
	bool IsObjectTweening(class UObject*& TweenTarget, ETweenGenericType TweensType, class UBaseTween** TweenFound) const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"TweenManagerComponent">();
	}
	static class UTweenManagerComponent* GetDefaultObj()
	{
		return GetDefaultObjImpl<UTweenManagerComponent>();
	}
};
static_assert(alignof(UTweenManagerComponent) == 0x000008, "Wrong alignment on UTweenManagerComponent");
static_assert(sizeof(UTweenManagerComponent) == 0x000160, "Wrong size on UTweenManagerComponent");
static_assert(offsetof(UTweenManagerComponent, MTweenContainers) == 0x0000B0, "Member 'UTweenManagerComponent::MTweenContainers' has a wrong offset!");

// Class TweenMaker.TweenRotator
// 0x0168 (0x0210 - 0x00A8)
class alignas(0x10) UTweenRotator final : public UBaseTween
{
public:
	FMulticastInlineDelegateProperty_             OnTweenStart;                                      // 0x00A8(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_             OnTweenUpdate;                                     // 0x00B8(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_             OnTweenEnd;                                        // 0x00C8(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_             OnTweenActorHit;                                   // 0x00D8(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_             OnTweenActorBeginOverlap;                          // 0x00E8(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_             OnTweenPrimitiveComponentHit;                      // 0x00F8(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_             OnTweenPrimitiveComponentBeginOverlap;             // 0x0108(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	uint8                                         Pad_118[0x78];                                     // 0x0118(0x0078)(Fixing Size After Last Property [ Dumper-7 ])
	class UTweenRotatorLatentFactory*             MTweenLatentProxy;                                 // 0x0190(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_198[0x78];                                     // 0x0198(0x0078)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void OnActorBeginOverlap(class AActor* PThisActor, class AActor* POtherActor);
	void OnActorHit(class AActor* PThisActor, class AActor* POtherActor, const struct FVector& PNormalImpulse, const struct FHitResult& PHit);
	void OnPrimitiveComponentBeginOverlap(class UPrimitiveComponent* PThisComponent, class AActor* POtherActor, class UPrimitiveComponent* POtherComp, int32 POtherBodyIndex, bool bFromSweep, const struct FHitResult& PSweepResult);
	void OnPrimitiveComponentHit(class UPrimitiveComponent* PThisComponent, class AActor* POtherActor, class UPrimitiveComponent* POtherComp, const struct FVector& PNormalImpulse, const struct FHitResult& PHitResult);

	struct FRotator GetCurrentValue() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"TweenRotator">();
	}
	static class UTweenRotator* GetDefaultObj()
	{
		return GetDefaultObjImpl<UTweenRotator>();
	}
};
static_assert(alignof(UTweenRotator) == 0x000010, "Wrong alignment on UTweenRotator");
static_assert(sizeof(UTweenRotator) == 0x000210, "Wrong size on UTweenRotator");
static_assert(offsetof(UTweenRotator, OnTweenStart) == 0x0000A8, "Member 'UTweenRotator::OnTweenStart' has a wrong offset!");
static_assert(offsetof(UTweenRotator, OnTweenUpdate) == 0x0000B8, "Member 'UTweenRotator::OnTweenUpdate' has a wrong offset!");
static_assert(offsetof(UTweenRotator, OnTweenEnd) == 0x0000C8, "Member 'UTweenRotator::OnTweenEnd' has a wrong offset!");
static_assert(offsetof(UTweenRotator, OnTweenActorHit) == 0x0000D8, "Member 'UTweenRotator::OnTweenActorHit' has a wrong offset!");
static_assert(offsetof(UTweenRotator, OnTweenActorBeginOverlap) == 0x0000E8, "Member 'UTweenRotator::OnTweenActorBeginOverlap' has a wrong offset!");
static_assert(offsetof(UTweenRotator, OnTweenPrimitiveComponentHit) == 0x0000F8, "Member 'UTweenRotator::OnTweenPrimitiveComponentHit' has a wrong offset!");
static_assert(offsetof(UTweenRotator, OnTweenPrimitiveComponentBeginOverlap) == 0x000108, "Member 'UTweenRotator::OnTweenPrimitiveComponentBeginOverlap' has a wrong offset!");
static_assert(offsetof(UTweenRotator, MTweenLatentProxy) == 0x000190, "Member 'UTweenRotator::MTweenLatentProxy' has a wrong offset!");

// Class TweenMaker.TweenRotatorLatentFactory
// 0x0030 (0x0060 - 0x0030)
class UTweenRotatorLatentFactory final : public UBlueprintAsyncActionBase
{
public:
	FMulticastInlineDelegateProperty_             OnTweenStart;                                      // 0x0030(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_             OnTweenUpdate;                                     // 0x0040(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_             OnTweenEnd;                                        // 0x0050(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)

public:
	static class UTweenRotatorLatentFactory* BP_AppendLatentTweenRotateActorBy(class UTweenContainer*& TweenContainer, class UTweenRotator*& OutTween, class AActor*& TweenTarget, const struct FRotator& bY, float Duration, ETweenEaseType EaseType, bool DeleteTweenOnHit, bool DeleteTweenOnOverlap, int32 NumLoops, ETweenLoopType LoopType, float Delay, float TimeScale, bool TweenWhileGameIsPaused);
	static class UTweenRotatorLatentFactory* BP_AppendLatentTweenRotateActorTo(class UTweenContainer*& TweenContainer, class UTweenRotator*& OutTween, class AActor*& TweenTarget, const struct FRotator& To, float Duration, ETweenEaseType EaseType, ETweenSpace TweenSpace, ETweenRotationMode RotationMode, bool DeleteTweenOnHit, bool DeleteTweenOnOverlap, int32 NumLoops, ETweenLoopType LoopType, float Delay, float TimeScale, bool TweenWhileGameIsPaused);
	static class UTweenRotatorLatentFactory* BP_AppendLatentTweenRotateSceneComponentBy(class UTweenContainer*& TweenContainer, class UTweenRotator*& OutTween, class USceneComponent*& TweenTarget, const struct FRotator& bY, float Duration, ETweenEaseType EaseType, bool DeleteTweenOnHit, bool DeleteTweenOnOverlap, int32 NumLoops, ETweenLoopType LoopType, float Delay, float TimeScale, bool TweenWhileGameIsPaused);
	static class UTweenRotatorLatentFactory* BP_AppendLatentTweenRotateSceneComponentTo(class UTweenContainer*& TweenContainer, class UTweenRotator*& OutTween, class USceneComponent*& TweenTarget, const struct FRotator& To, float Duration, ETweenEaseType EaseType, ETweenSpace TweenSpace, ETweenRotationMode RotationMode, bool DeleteTweenOnHit, bool DeleteTweenOnOverlap, int32 NumLoops, ETweenLoopType LoopType, float Delay, float TimeScale, bool TweenWhileGameIsPaused);
	static class UTweenRotatorLatentFactory* BP_CreateLatentTweenRotateActorBy(class UTweenManagerComponent* TweenManager, class AActor*& TweenTarget, class UTweenContainer*& OutTweenContainer, class UTweenRotator*& OutTween, const struct FRotator& bY, float Duration, ETweenEaseType EaseType, bool DeleteTweenOnHit, bool DeleteTweenOnOverlap, int32 NumLoops, ETweenLoopType LoopType, float Delay, float TimeScale, bool TweenWhileGameIsPaused);
	static class UTweenRotatorLatentFactory* BP_CreateLatentTweenRotateActorTo(class UTweenManagerComponent* TweenManager, class AActor*& TweenTarget, class UTweenContainer*& OutTweenContainer, class UTweenRotator*& OutTween, const struct FRotator& To, float Duration, ETweenEaseType EaseType, ETweenSpace TweenSpace, ETweenRotationMode RotationMode, bool DeleteTweenOnHit, bool DeleteTweenOnOverlap, int32 NumLoops, ETweenLoopType LoopType, float Delay, float TimeScale, bool TweenWhileGameIsPaused);
	static class UTweenRotatorLatentFactory* BP_CreateLatentTweenRotateSceneComponentBy(class UTweenManagerComponent* TweenManager, class USceneComponent*& TweenTarget, class UTweenContainer*& OutTweenContainer, class UTweenRotator*& OutTween, const struct FRotator& bY, float Duration, ETweenEaseType EaseType, bool DeleteTweenOnHit, bool DeleteTweenOnOverlap, int32 NumLoops, ETweenLoopType LoopType, float Delay, float TimeScale, bool TweenWhileGameIsPaused);
	static class UTweenRotatorLatentFactory* BP_CreateLatentTweenRotateSceneComponentTo(class UTweenManagerComponent* TweenManager, class USceneComponent*& TweenTarget, class UTweenContainer*& OutTweenContainer, class UTweenRotator*& OutTween, const struct FRotator& To, float Duration, ETweenEaseType EaseType, ETweenSpace TweenSpace, ETweenRotationMode RotationMode, bool DeleteTweenOnHit, bool DeleteTweenOnOverlap, int32 NumLoops, ETweenLoopType LoopType, float Delay, float TimeScale, bool TweenWhileGameIsPaused);
	static class UTweenRotatorLatentFactory* BP_JoinLatentTweenRotateActorBy(class UTweenContainer*& TweenContainer, class UTweenRotator*& OutTween, class AActor*& TweenTarget, const struct FRotator& bY, float Duration, ETweenEaseType EaseType, bool DeleteTweenOnHit, bool DeleteTweenOnOverlap, float Delay, float TimeScale, bool TweenWhileGameIsPaused);
	static class UTweenRotatorLatentFactory* BP_JoinLatentTweenRotateActorTo(class UTweenContainer*& TweenContainer, class UTweenRotator*& OutTween, class AActor*& TweenTarget, const struct FRotator& To, float Duration, ETweenEaseType EaseType, ETweenSpace TweenSpace, ETweenRotationMode RotationMode, bool DeleteTweenOnHit, bool DeleteTweenOnOverlap, float Delay, float TimeScale, bool TweenWhileGameIsPaused);
	static class UTweenRotatorLatentFactory* BP_JoinLatentTweenRotateSceneComponentBy(class UTweenContainer*& TweenContainer, class UTweenRotator*& OutTween, class USceneComponent*& TweenTarget, const struct FRotator& bY, float Duration, ETweenEaseType EaseType, bool DeleteTweenOnHit, bool DeleteTweenOnOverlap, float Delay, float TimeScale, bool TweenWhileGameIsPaused);
	static class UTweenRotatorLatentFactory* BP_JoinLatentTweenRotateSceneComponentTo(class UTweenContainer*& TweenContainer, class UTweenRotator*& OutTween, class USceneComponent*& TweenTarget, const struct FRotator& To, float Duration, ETweenEaseType EaseType, ETweenSpace TweenSpace, ETweenRotationMode RotationMode, bool DeleteTweenOnHit, bool DeleteTweenOnOverlap, float Delay, float TimeScale, bool TweenWhileGameIsPaused);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"TweenRotatorLatentFactory">();
	}
	static class UTweenRotatorLatentFactory* GetDefaultObj()
	{
		return GetDefaultObjImpl<UTweenRotatorLatentFactory>();
	}
};
static_assert(alignof(UTweenRotatorLatentFactory) == 0x000008, "Wrong alignment on UTweenRotatorLatentFactory");
static_assert(sizeof(UTweenRotatorLatentFactory) == 0x000060, "Wrong size on UTweenRotatorLatentFactory");
static_assert(offsetof(UTweenRotatorLatentFactory, OnTweenStart) == 0x000030, "Member 'UTweenRotatorLatentFactory::OnTweenStart' has a wrong offset!");
static_assert(offsetof(UTweenRotatorLatentFactory, OnTweenUpdate) == 0x000040, "Member 'UTweenRotatorLatentFactory::OnTweenUpdate' has a wrong offset!");
static_assert(offsetof(UTweenRotatorLatentFactory, OnTweenEnd) == 0x000050, "Member 'UTweenRotatorLatentFactory::OnTweenEnd' has a wrong offset!");

// Class TweenMaker.TweenRotatorStandardFactory
// 0x0000 (0x0028 - 0x0028)
class UTweenRotatorStandardFactory final : public UObject
{
public:
	static class UTweenRotator* BP_AppendTweenRotateActorBy(class UTweenContainer*& TweenContainer, class AActor*& TweenTarget, const struct FRotator& bY, float Duration, ETweenEaseType EaseType, bool DeleteTweenOnHit, bool DeleteTweenOnOverlap, int32 NumLoops, ETweenLoopType LoopType, float Delay, float TimeScale, bool TweenWhileGameIsPaused, int32 SequenceIndex);
	static class UTweenRotator* BP_AppendTweenRotateActorTo(class UTweenContainer*& TweenContainer, class AActor*& TweenTarget, const struct FRotator& To, float Duration, ETweenEaseType EaseType, ETweenSpace TweenSpace, ETweenRotationMode RotationMode, bool DeleteTweenOnHit, bool DeleteTweenOnOverlap, int32 NumLoops, ETweenLoopType LoopType, float Delay, float TimeScale, bool TweenWhileGameIsPaused, int32 SequenceIndex);
	static class UTweenRotator* BP_AppendTweenRotateSceneComponentBy(class UTweenContainer*& TweenContainer, class USceneComponent*& TweenTarget, const struct FRotator& bY, float Duration, ETweenEaseType EaseType, bool DeleteTweenOnHit, bool DeleteTweenOnOverlap, int32 NumLoops, ETweenLoopType LoopType, float Delay, float TimeScale, bool TweenWhileGameIsPaused, int32 SequenceIndex);
	static class UTweenRotator* BP_AppendTweenRotateSceneComponentTo(class UTweenContainer*& TweenContainer, class USceneComponent*& TweenTarget, const struct FRotator& To, float Duration, ETweenEaseType EaseType, ETweenSpace TweenSpace, ETweenRotationMode RotationMode, bool DeleteTweenOnHit, bool DeleteTweenOnOverlap, int32 NumLoops, ETweenLoopType LoopType, float Delay, float TimeScale, bool TweenWhileGameIsPaused, int32 SequenceIndex);
	static void BP_CreateTweenRotateActorBy(class UTweenManagerComponent* TweenManager, class AActor*& TweenTarget, class UTweenContainer** TweenContainer, class UTweenRotator** Tween, const struct FRotator& bY, float Duration, ETweenEaseType EaseType, bool DeleteTweenOnHit, bool DeleteTweenOnOverlap, int32 NumLoops, ETweenLoopType LoopType, float Delay, float TimeScale, bool TweenWhileGameIsPaused, int32 SequenceIndex);
	static void BP_CreateTweenRotateActorTo(class UTweenManagerComponent* TweenManager, class AActor*& TweenTarget, class UTweenContainer** TweenContainer, class UTweenRotator** Tween, const struct FRotator& To, float Duration, ETweenEaseType EaseType, ETweenSpace TweenSpace, ETweenRotationMode RotationMode, bool DeleteTweenOnHit, bool DeleteTweenOnOverlap, int32 NumLoops, ETweenLoopType LoopType, float Delay, float TimeScale, bool TweenWhileGameIsPaused, int32 SequenceIndex);
	static void BP_CreateTweenRotateSceneComponentBy(class UTweenManagerComponent* TweenManager, class USceneComponent*& TweenTarget, class UTweenContainer** TweenContainer, class UTweenRotator** Tween, const struct FRotator& bY, float Duration, ETweenEaseType EaseType, bool DeleteTweenOnHit, bool DeleteTweenOnOverlap, int32 NumLoops, ETweenLoopType LoopType, float Delay, float TimeScale, bool TweenWhileGameIsPaused, int32 SequenceIndex);
	static void BP_CreateTweenRotateSceneComponentTo(class UTweenManagerComponent* TweenManager, class USceneComponent*& TweenTarget, class UTweenContainer** TweenContainer, class UTweenRotator** Tween, const struct FRotator& To, float Duration, ETweenEaseType EaseType, ETweenSpace TweenSpace, ETweenRotationMode RotationMode, bool DeleteTweenOnHit, bool DeleteTweenOnOverlap, int32 NumLoops, ETweenLoopType LoopType, float Delay, float TimeScale, bool TweenWhileGameIsPaused, int32 SequenceIndex);
	static class UTweenRotator* BP_JoinTweenRotateActorBy(class UTweenContainer*& TweenContainer, class AActor*& TweenTarget, const struct FRotator& bY, float Duration, ETweenEaseType EaseType, bool DeleteTweenOnHit, bool DeleteTweenOnOverlap, float Delay, float TimeScale, bool TweenWhileGameIsPaused, int32 SequenceIndex);
	static class UTweenRotator* BP_JoinTweenRotateActorTo(class UTweenContainer*& TweenContainer, class AActor*& TweenTarget, const struct FRotator& To, float Duration, ETweenEaseType EaseType, ETweenSpace TweenSpace, ETweenRotationMode RotationMode, bool DeleteTweenOnHit, bool DeleteTweenOnOverlap, float Delay, float TimeScale, bool TweenWhileGameIsPaused, int32 SequenceIndex);
	static class UTweenRotator* BP_JoinTweenRotateSceneComponentBy(class UTweenContainer*& TweenContainer, class USceneComponent*& TweenTarget, const struct FRotator& bY, float Duration, ETweenEaseType EaseType, bool DeleteTweenOnHit, bool DeleteTweenOnOverlap, float Delay, float TimeScale, bool TweenWhileGameIsPaused, int32 SequenceIndex);
	static class UTweenRotator* BP_JoinTweenRotateSceneComponentTo(class UTweenContainer*& TweenContainer, class USceneComponent*& TweenTarget, const struct FRotator& To, float Duration, ETweenEaseType EaseType, ETweenSpace TweenSpace, ETweenRotationMode RotationMode, bool DeleteTweenOnHit, bool DeleteTweenOnOverlap, float Delay, float TimeScale, bool TweenWhileGameIsPaused, int32 SequenceIndex);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"TweenRotatorStandardFactory">();
	}
	static class UTweenRotatorStandardFactory* GetDefaultObj()
	{
		return GetDefaultObjImpl<UTweenRotatorStandardFactory>();
	}
};
static_assert(alignof(UTweenRotatorStandardFactory) == 0x000008, "Wrong alignment on UTweenRotatorStandardFactory");
static_assert(sizeof(UTweenRotatorStandardFactory) == 0x000028, "Wrong size on UTweenRotatorStandardFactory");

// Class TweenMaker.TweenVector
// 0x0128 (0x01D0 - 0x00A8)
class UTweenVector final : public UBaseTween
{
public:
	FMulticastInlineDelegateProperty_             OnTweenStart;                                      // 0x00A8(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_             OnTweenUpdate;                                     // 0x00B8(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_             OnTweenEnd;                                        // 0x00C8(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_             OnTweenActorHit;                                   // 0x00D8(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_             OnTweenActorBeginOverlap;                          // 0x00E8(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_             OnTweenPrimitiveComponentHit;                      // 0x00F8(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_             OnTweenPrimitiveComponentBeginOverlap;             // 0x0108(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	uint8                                         Pad_118[0x78];                                     // 0x0118(0x0078)(Fixing Size After Last Property [ Dumper-7 ])
	class UTweenVectorLatentFactory*              MTweenLatentProxy;                                 // 0x0190(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_198[0x38];                                     // 0x0198(0x0038)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void OnActorBeginOverlap(class AActor* PThisActor, class AActor* POtherActor);
	void OnActorHit(class AActor* PThisActor, class AActor* POtherActor, const struct FVector& PNormalImpulse, const struct FHitResult& PHit);
	void OnPrimitiveComponentBeginOverlap(class UPrimitiveComponent* PThisComponent, class AActor* POtherActor, class UPrimitiveComponent* POtherComp, int32 POtherBodyIndex, bool bFromSweep, const struct FHitResult& PSweepResult);
	void OnPrimitiveComponentHit(class UPrimitiveComponent* PThisComponent, class AActor* POtherActor, class UPrimitiveComponent* POtherComp, const struct FVector& PNormalImpulse, const struct FHitResult& PHitResult);

	struct FVector GetCurrentValue() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"TweenVector">();
	}
	static class UTweenVector* GetDefaultObj()
	{
		return GetDefaultObjImpl<UTweenVector>();
	}
};
static_assert(alignof(UTweenVector) == 0x000008, "Wrong alignment on UTweenVector");
static_assert(sizeof(UTweenVector) == 0x0001D0, "Wrong size on UTweenVector");
static_assert(offsetof(UTweenVector, OnTweenStart) == 0x0000A8, "Member 'UTweenVector::OnTweenStart' has a wrong offset!");
static_assert(offsetof(UTweenVector, OnTweenUpdate) == 0x0000B8, "Member 'UTweenVector::OnTweenUpdate' has a wrong offset!");
static_assert(offsetof(UTweenVector, OnTweenEnd) == 0x0000C8, "Member 'UTweenVector::OnTweenEnd' has a wrong offset!");
static_assert(offsetof(UTweenVector, OnTweenActorHit) == 0x0000D8, "Member 'UTweenVector::OnTweenActorHit' has a wrong offset!");
static_assert(offsetof(UTweenVector, OnTweenActorBeginOverlap) == 0x0000E8, "Member 'UTweenVector::OnTweenActorBeginOverlap' has a wrong offset!");
static_assert(offsetof(UTweenVector, OnTweenPrimitiveComponentHit) == 0x0000F8, "Member 'UTweenVector::OnTweenPrimitiveComponentHit' has a wrong offset!");
static_assert(offsetof(UTweenVector, OnTweenPrimitiveComponentBeginOverlap) == 0x000108, "Member 'UTweenVector::OnTweenPrimitiveComponentBeginOverlap' has a wrong offset!");
static_assert(offsetof(UTweenVector, MTweenLatentProxy) == 0x000190, "Member 'UTweenVector::MTweenLatentProxy' has a wrong offset!");

// Class TweenMaker.TweenVector2D
// 0x0090 (0x0138 - 0x00A8)
class UTweenVector2D final : public UBaseTween
{
public:
	FMulticastInlineDelegateProperty_             OnTweenStart;                                      // 0x00A8(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_             OnTweenUpdate;                                     // 0x00B8(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_             OnTweenEnd;                                        // 0x00C8(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	uint8                                         Pad_D8[0x38];                                      // 0x00D8(0x0038)(Fixing Size After Last Property [ Dumper-7 ])
	class UTweenVector2DLatentFactory*            MTweenLatentProxy;                                 // 0x0110(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_118[0x20];                                     // 0x0118(0x0020)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	struct FVector2D GetCurrentValue() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"TweenVector2D">();
	}
	static class UTweenVector2D* GetDefaultObj()
	{
		return GetDefaultObjImpl<UTweenVector2D>();
	}
};
static_assert(alignof(UTweenVector2D) == 0x000008, "Wrong alignment on UTweenVector2D");
static_assert(sizeof(UTweenVector2D) == 0x000138, "Wrong size on UTweenVector2D");
static_assert(offsetof(UTweenVector2D, OnTweenStart) == 0x0000A8, "Member 'UTweenVector2D::OnTweenStart' has a wrong offset!");
static_assert(offsetof(UTweenVector2D, OnTweenUpdate) == 0x0000B8, "Member 'UTweenVector2D::OnTweenUpdate' has a wrong offset!");
static_assert(offsetof(UTweenVector2D, OnTweenEnd) == 0x0000C8, "Member 'UTweenVector2D::OnTweenEnd' has a wrong offset!");
static_assert(offsetof(UTweenVector2D, MTweenLatentProxy) == 0x000110, "Member 'UTweenVector2D::MTweenLatentProxy' has a wrong offset!");

// Class TweenMaker.TweenVector2DLatentFactory
// 0x0030 (0x0060 - 0x0030)
class UTweenVector2DLatentFactory final : public UBlueprintAsyncActionBase
{
public:
	FMulticastInlineDelegateProperty_             OnTweenStart;                                      // 0x0030(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_             OnTweenUpdate;                                     // 0x0040(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_             OnTweenEnd;                                        // 0x0050(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)

public:
	static class UTweenVector2DLatentFactory* BP_AppendLatentTweenCustomVector2D(class UTweenContainer*& TweenContainer, class UTweenVector2D*& OutTween, class UObject*& TweenTarget, const struct FVector2D& From, const struct FVector2D& To, float Duration, ETweenEaseType EaseType, int32 NumLoops, ETweenLoopType LoopType, float Delay, float TimeScale, bool TweenWhileGameIsPaused);
	static class UTweenVector2DLatentFactory* BP_AppendLatentTweenMoveWidgetBy(class UTweenContainer*& TweenContainer, class UTweenVector2D*& OutTween, class UWidget*& TweenTarget, const struct FVector2D& bY, float Duration, ETweenEaseType EaseType, int32 NumLoops, ETweenLoopType LoopType, float Delay, float TimeScale, bool TweenWhileGameIsPaused);
	static class UTweenVector2DLatentFactory* BP_AppendLatentTweenMoveWidgetTo(class UTweenContainer*& TweenContainer, class UTweenVector2D*& OutTween, class UWidget*& TweenTarget, const struct FVector2D& To, float Duration, ETweenEaseType EaseType, int32 NumLoops, ETweenLoopType LoopType, float Delay, float TimeScale, bool TweenWhileGameIsPaused);
	static class UTweenVector2DLatentFactory* BP_AppendLatentTweenScaleWidgetBy(class UTweenContainer*& TweenContainer, class UTweenVector2D*& OutTween, class UWidget*& TweenTarget, const struct FVector2D& bY, float Duration, ETweenEaseType EaseType, int32 NumLoops, ETweenLoopType LoopType, float Delay, float TimeScale, bool TweenWhileGameIsPaused);
	static class UTweenVector2DLatentFactory* BP_AppendLatentTweenScaleWidgetTo(class UTweenContainer*& TweenContainer, class UTweenVector2D*& OutTween, class UWidget*& TweenTarget, const struct FVector2D& To, float Duration, ETweenEaseType EaseType, int32 NumLoops, ETweenLoopType LoopType, float Delay, float TimeScale, bool TweenWhileGameIsPaused);
	static class UTweenVector2DLatentFactory* BP_AppendLatentTweenShearWidgetTo(class UTweenContainer*& TweenContainer, class UTweenVector2D*& OutTween, class UWidget*& TweenTarget, const struct FVector2D& To, float Duration, ETweenEaseType EaseType, int32 NumLoops, ETweenLoopType LoopType, float Delay, float TimeScale, bool TweenWhileGameIsPaused);
	static class UTweenVector2DLatentFactory* BP_CreateLatentTweenCustomVector2D(class UTweenManagerComponent* TweenManager, class UObject*& TweenTarget, class UTweenContainer*& OutTweenContainer, class UTweenVector2D*& OutTween, const struct FVector2D& From, const struct FVector2D& To, float Duration, ETweenEaseType EaseType, int32 NumLoops, ETweenLoopType LoopType, float Delay, float TimeScale, bool TweenWhileGameIsPaused);
	static class UTweenVector2DLatentFactory* BP_CreateLatentTweenMoveWidgetBy(class UTweenManagerComponent* TweenManager, class UWidget*& TweenTarget, class UTweenContainer*& OutTweenContainer, class UTweenVector2D*& OutTween, const struct FVector2D& bY, float Duration, ETweenEaseType EaseType, int32 NumLoops, ETweenLoopType LoopType, float Delay, float TimeScale, bool TweenWhileGameIsPaused);
	static class UTweenVector2DLatentFactory* BP_CreateLatentTweenMoveWidgetTo(class UTweenManagerComponent* TweenManager, class UWidget*& TweenTarget, class UTweenContainer*& OutTweenContainer, class UTweenVector2D*& OutTween, const struct FVector2D& To, float Duration, ETweenEaseType EaseType, int32 NumLoops, ETweenLoopType LoopType, float Delay, float TimeScale, bool TweenWhileGameIsPaused);
	static class UTweenVector2DLatentFactory* BP_CreateLatentTweenScaleWidgetBy(class UTweenManagerComponent* TweenManager, class UWidget*& TweenTarget, class UTweenContainer*& OutTweenContainer, class UTweenVector2D*& OutTween, const struct FVector2D& bY, float Duration, ETweenEaseType EaseType, int32 NumLoops, ETweenLoopType LoopType, float Delay, float TimeScale, bool TweenWhileGameIsPaused);
	static class UTweenVector2DLatentFactory* BP_CreateLatentTweenScaleWidgetTo(class UTweenManagerComponent* TweenManager, class UWidget*& TweenTarget, class UTweenContainer*& OutTweenContainer, class UTweenVector2D*& OutTween, const struct FVector2D& To, float Duration, ETweenEaseType EaseType, int32 NumLoops, ETweenLoopType LoopType, float Delay, float TimeScale, bool TweenWhileGameIsPaused);
	static class UTweenVector2DLatentFactory* BP_CreateLatentTweenShearWidgetTo(class UTweenManagerComponent* TweenManager, class UWidget*& TweenTarget, class UTweenContainer*& OutTweenContainer, class UTweenVector2D*& OutTween, const struct FVector2D& To, float Duration, ETweenEaseType EaseType, int32 NumLoops, ETweenLoopType LoopType, float Delay, float TimeScale, bool TweenWhileGameIsPaused);
	static class UTweenVector2DLatentFactory* BP_JoinLatentTweenCustomVector2D(class UTweenContainer*& TweenContainer, class UTweenVector2D*& OutTween, class UObject*& TweenTarget, const struct FVector2D& From, const struct FVector2D& To, float Duration, ETweenEaseType EaseType, float Delay, float TimeScale, bool TweenWhileGameIsPaused);
	static class UTweenVector2DLatentFactory* BP_JoinLatentTweenMoveWidgetBy(class UTweenContainer*& TweenContainer, class UTweenVector2D*& OutTween, class UWidget*& TweenTarget, const struct FVector2D& bY, float Duration, ETweenEaseType EaseType, float Delay, float TimeScale, bool TweenWhileGameIsPaused);
	static class UTweenVector2DLatentFactory* BP_JoinLatentTweenMoveWidgetTo(class UTweenContainer*& TweenContainer, class UTweenVector2D*& OutTween, class UWidget*& TweenTarget, const struct FVector2D& To, float Duration, ETweenEaseType EaseType, float Delay, float TimeScale, bool TweenWhileGameIsPaused);
	static class UTweenVector2DLatentFactory* BP_JoinLatentTweenScaleWidgetBy(class UTweenContainer*& TweenContainer, class UTweenVector2D*& OutTween, class UWidget*& TweenTarget, const struct FVector2D& bY, float Duration, ETweenEaseType EaseType, float Delay, float TimeScale, bool TweenWhileGameIsPaused);
	static class UTweenVector2DLatentFactory* BP_JoinLatentTweenScaleWidgetTo(class UTweenContainer*& TweenContainer, class UTweenVector2D*& OutTween, class UWidget*& TweenTarget, const struct FVector2D& To, float Duration, ETweenEaseType EaseType, float Delay, float TimeScale, bool TweenWhileGameIsPaused);
	static class UTweenVector2DLatentFactory* BP_JoinLatentTweenShearWidgetTo(class UTweenContainer*& TweenContainer, class UTweenVector2D*& OutTween, class UWidget*& TweenTarget, const struct FVector2D& To, float Duration, ETweenEaseType EaseType, float Delay, float TimeScale, bool TweenWhileGameIsPaused);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"TweenVector2DLatentFactory">();
	}
	static class UTweenVector2DLatentFactory* GetDefaultObj()
	{
		return GetDefaultObjImpl<UTweenVector2DLatentFactory>();
	}
};
static_assert(alignof(UTweenVector2DLatentFactory) == 0x000008, "Wrong alignment on UTweenVector2DLatentFactory");
static_assert(sizeof(UTweenVector2DLatentFactory) == 0x000060, "Wrong size on UTweenVector2DLatentFactory");
static_assert(offsetof(UTweenVector2DLatentFactory, OnTweenStart) == 0x000030, "Member 'UTweenVector2DLatentFactory::OnTweenStart' has a wrong offset!");
static_assert(offsetof(UTweenVector2DLatentFactory, OnTweenUpdate) == 0x000040, "Member 'UTweenVector2DLatentFactory::OnTweenUpdate' has a wrong offset!");
static_assert(offsetof(UTweenVector2DLatentFactory, OnTweenEnd) == 0x000050, "Member 'UTweenVector2DLatentFactory::OnTweenEnd' has a wrong offset!");

// Class TweenMaker.TweenVector2DStandardFactory
// 0x0000 (0x0028 - 0x0028)
class UTweenVector2DStandardFactory final : public UObject
{
public:
	static class UTweenVector2D* BP_AppendTweenCustomVector2D(class UTweenContainer*& TweenContainer, class UObject*& TweenTarget, const struct FVector2D& From, const struct FVector2D& To, float Duration, ETweenEaseType EaseType, int32 NumLoops, ETweenLoopType LoopType, float Delay, float TimeScale, bool TweenWhileGameIsPaused, int32 SequenceIndex);
	static class UTweenVector2D* BP_AppendTweenMoveWidgetBy(class UTweenContainer*& TweenContainer, class UWidget*& TweenTarget, const struct FVector2D& bY, float Duration, ETweenEaseType EaseType, int32 NumLoops, ETweenLoopType LoopType, float Delay, float TimeScale, bool TweenWhileGameIsPaused, int32 SequenceIndex);
	static class UTweenVector2D* BP_AppendTweenMoveWidgetTo(class UTweenContainer*& TweenContainer, class UWidget*& TweenTarget, const struct FVector2D& To, float Duration, ETweenEaseType EaseType, int32 NumLoops, ETweenLoopType LoopType, float Delay, float TimeScale, bool TweenWhileGameIsPaused, int32 SequenceIndex);
	static class UTweenVector2D* BP_AppendTweenScaleWidgetBy(class UTweenContainer*& TweenContainer, class UWidget*& TweenTarget, const struct FVector2D& bY, float Duration, ETweenEaseType EaseType, int32 NumLoops, ETweenLoopType LoopType, float Delay, float TimeScale, bool TweenWhileGameIsPaused, int32 SequenceIndex);
	static class UTweenVector2D* BP_AppendTweenScaleWidgetTo(class UTweenContainer*& TweenContainer, class UWidget*& TweenTarget, const struct FVector2D& To, float Duration, ETweenEaseType EaseType, int32 NumLoops, ETweenLoopType LoopType, float Delay, float TimeScale, bool TweenWhileGameIsPaused, int32 SequenceIndex);
	static class UTweenVector2D* BP_AppendTweenShearWidgetTo(class UTweenContainer*& TweenContainer, class UWidget*& TweenTarget, const struct FVector2D& To, float Duration, ETweenEaseType EaseType, int32 NumLoops, ETweenLoopType LoopType, float Delay, float TimeScale, bool TweenWhileGameIsPaused, int32 SequenceIndex);
	static void BP_CreateTweenCustomVector2D(class UTweenManagerComponent* TweenManager, class UObject*& TweenTarget, class UTweenContainer** TweenContainer, class UTweenVector2D** Tween, const struct FVector2D& From, const struct FVector2D& To, float Duration, ETweenEaseType EaseType, int32 NumLoops, ETweenLoopType LoopType, float Delay, float TimeScale, bool TweenWhileGameIsPaused, int32 SequenceIndex);
	static void BP_CreateTweenMoveWidgetBy(class UTweenManagerComponent* TweenManager, class UWidget*& TweenTarget, class UTweenContainer** TweenContainer, class UTweenVector2D** Tween, const struct FVector2D& bY, float Duration, ETweenEaseType EaseType, int32 NumLoops, ETweenLoopType LoopType, float Delay, float TimeScale, bool TweenWhileGameIsPaused, int32 SequenceIndex);
	static void BP_CreateTweenMoveWidgetTo(class UTweenManagerComponent* TweenManager, class UWidget*& TweenTarget, class UTweenContainer** TweenContainer, class UTweenVector2D** Tween, const struct FVector2D& To, float Duration, ETweenEaseType EaseType, int32 NumLoops, ETweenLoopType LoopType, float Delay, float TimeScale, bool TweenWhileGameIsPaused, int32 SequenceIndex);
	static void BP_CreateTweenScaleWidgetBy(class UTweenManagerComponent* TweenManager, class UWidget*& TweenTarget, class UTweenContainer** TweenContainer, class UTweenVector2D** Tween, const struct FVector2D& bY, float Duration, ETweenEaseType EaseType, int32 NumLoops, ETweenLoopType LoopType, float Delay, float TimeScale, bool TweenWhileGameIsPaused, int32 SequenceIndex);
	static void BP_CreateTweenScaleWidgetTo(class UTweenManagerComponent* TweenManager, class UWidget*& TweenTarget, class UTweenContainer** TweenContainer, class UTweenVector2D** Tween, const struct FVector2D& To, float Duration, ETweenEaseType EaseType, int32 NumLoops, ETweenLoopType LoopType, float Delay, float TimeScale, bool TweenWhileGameIsPaused, int32 SequenceIndex);
	static void BP_CreateTweenShearWidgetTo(class UTweenManagerComponent* TweenManager, class UWidget*& TweenTarget, class UTweenContainer** TweenContainer, class UTweenVector2D** Tween, const struct FVector2D& To, float Duration, ETweenEaseType EaseType, int32 NumLoops, ETweenLoopType LoopType, float Delay, float TimeScale, bool TweenWhileGameIsPaused, int32 SequenceIndex);
	static class UTweenVector2D* BP_JoinTweenCustomVector2D(class UTweenContainer*& TweenContainer, class UObject*& TweenTarget, const struct FVector2D& From, const struct FVector2D& To, float Duration, ETweenEaseType EaseType, float Delay, float TimeScale, bool TweenWhileGameIsPaused, int32 SequenceIndex);
	static class UTweenVector2D* BP_JoinTweenMoveWidgetBy(class UTweenContainer*& TweenContainer, class UWidget*& TweenTarget, const struct FVector2D& bY, float Duration, ETweenEaseType EaseType, float Delay, float TimeScale, bool TweenWhileGameIsPaused, int32 SequenceIndex);
	static class UTweenVector2D* BP_JoinTweenMoveWidgetTo(class UTweenContainer*& TweenContainer, class UWidget*& TweenTarget, const struct FVector2D& To, float Duration, ETweenEaseType EaseType, float Delay, float TimeScale, bool TweenWhileGameIsPaused, int32 SequenceIndex);
	static class UTweenVector2D* BP_JoinTweenScaleWidgetBy(class UTweenContainer*& TweenContainer, class UWidget*& TweenTarget, const struct FVector2D& bY, float Duration, ETweenEaseType EaseType, float Delay, float TimeScale, bool TweenWhileGameIsPaused, int32 SequenceIndex);
	static class UTweenVector2D* BP_JoinTweenScaleWidgetTo(class UTweenContainer*& TweenContainer, class UWidget*& TweenTarget, const struct FVector2D& To, float Duration, ETweenEaseType EaseType, float Delay, float TimeScale, bool TweenWhileGameIsPaused, int32 SequenceIndex);
	static class UTweenVector2D* BP_JoinTweenShearWidgetTo(class UTweenContainer*& TweenContainer, class UWidget*& TweenTarget, const struct FVector2D& To, float Duration, ETweenEaseType EaseType, float Delay, float TimeScale, bool TweenWhileGameIsPaused, int32 SequenceIndex);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"TweenVector2DStandardFactory">();
	}
	static class UTweenVector2DStandardFactory* GetDefaultObj()
	{
		return GetDefaultObjImpl<UTweenVector2DStandardFactory>();
	}
};
static_assert(alignof(UTweenVector2DStandardFactory) == 0x000008, "Wrong alignment on UTweenVector2DStandardFactory");
static_assert(sizeof(UTweenVector2DStandardFactory) == 0x000028, "Wrong size on UTweenVector2DStandardFactory");

// Class TweenMaker.TweenVectorLatentFactory
// 0x0030 (0x0060 - 0x0030)
class UTweenVectorLatentFactory final : public UBlueprintAsyncActionBase
{
public:
	FMulticastInlineDelegateProperty_             OnTweenStart;                                      // 0x0030(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_             OnTweenUpdate;                                     // 0x0040(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_             OnTweenEnd;                                        // 0x0050(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)

public:
	static class UTweenVectorLatentFactory* BP_AppendLatentTweenCustomVector(class UTweenContainer*& TweenContainer, class UTweenVector*& OutTween, class UObject*& TweenTarget, const struct FVector& From, const struct FVector& To, float Duration, ETweenEaseType EaseType, int32 NumLoops, ETweenLoopType LoopType, float Delay, float TimeScale, bool TweenWhileGameIsPaused);
	static class UTweenVectorLatentFactory* BP_AppendLatentTweenMoveActorBy(class UTweenContainer*& TweenContainer, class UTweenVector*& OutTween, class AActor*& TweenTarget, const struct FVector& bY, float Duration, ETweenEaseType EaseType, bool DeleteTweenOnHit, bool DeleteTweenOnOverlap, int32 NumLoops, ETweenLoopType LoopType, float Delay, float TimeScale, bool TweenWhileGameIsPaused);
	static class UTweenVectorLatentFactory* BP_AppendLatentTweenMoveActorTo(class UTweenContainer*& TweenContainer, class UTweenVector*& OutTween, class AActor*& TweenTarget, const struct FVector& To, float Duration, ETweenEaseType EaseType, ETweenSpace TweenSpace, bool DeleteTweenOnHit, bool DeleteTweenOnOverlap, int32 NumLoops, ETweenLoopType LoopType, float Delay, float TimeScale, bool TweenWhileGameIsPaused);
	static class UTweenVectorLatentFactory* BP_AppendLatentTweenMoveSceneComponentBy(class UTweenContainer*& TweenContainer, class UTweenVector*& OutTween, class USceneComponent*& TweenTarget, const struct FVector& bY, float Duration, ETweenEaseType EaseType, bool DeleteTweenOnHit, bool DeleteTweenOnOverlap, int32 NumLoops, ETweenLoopType LoopType, float Delay, float TimeScale, bool TweenWhileGameIsPaused);
	static class UTweenVectorLatentFactory* BP_AppendLatentTweenMoveSceneComponentTo(class UTweenContainer*& TweenContainer, class UTweenVector*& OutTween, class USceneComponent*& TweenTarget, const struct FVector& To, float Duration, ETweenEaseType EaseType, ETweenSpace TweenSpace, bool DeleteTweenOnHit, bool DeleteTweenOnOverlap, int32 NumLoops, ETweenLoopType LoopType, float Delay, float TimeScale, bool TweenWhileGameIsPaused);
	static class UTweenVectorLatentFactory* BP_AppendLatentTweenScaleActorBy(class UTweenContainer*& TweenContainer, class UTweenVector*& OutTween, class AActor*& TweenTarget, const struct FVector& bY, float Duration, ETweenEaseType EaseType, bool DeleteTweenOnHit, bool DeleteTweenOnOverlap, int32 NumLoops, ETweenLoopType LoopType, float Delay, float TimeScale, bool TweenWhileGameIsPaused);
	static class UTweenVectorLatentFactory* BP_AppendLatentTweenScaleActorTo(class UTweenContainer*& TweenContainer, class UTweenVector*& OutTween, class AActor*& TweenTarget, const struct FVector& To, float Duration, ETweenEaseType EaseType, ETweenSpace TweenSpace, bool DeleteTweenOnHit, bool DeleteTweenOnOverlap, int32 NumLoops, ETweenLoopType LoopType, float Delay, float TimeScale, bool TweenWhileGameIsPaused);
	static class UTweenVectorLatentFactory* BP_AppendLatentTweenScaleSceneComponentBy(class UTweenContainer*& TweenContainer, class UTweenVector*& OutTween, class USceneComponent*& TweenTarget, const struct FVector& bY, float Duration, ETweenEaseType EaseType, bool DeleteTweenOnHit, bool DeleteTweenOnOverlap, int32 NumLoops, ETweenLoopType LoopType, float Delay, float TimeScale, bool TweenWhileGameIsPaused);
	static class UTweenVectorLatentFactory* BP_AppendLatentTweenScaleSceneComponentTo(class UTweenContainer*& TweenContainer, class UTweenVector*& OutTween, class USceneComponent*& TweenTarget, const struct FVector& To, float Duration, ETweenEaseType EaseType, ETweenSpace TweenSpace, bool DeleteTweenOnHit, bool DeleteTweenOnOverlap, int32 NumLoops, ETweenLoopType LoopType, float Delay, float TimeScale, bool TweenWhileGameIsPaused);
	static class UTweenVectorLatentFactory* BP_CreateLatentTweenCustomVector(class UTweenManagerComponent* TweenManager, class UObject*& TweenTarget, class UTweenContainer*& OutTweenContainer, class UTweenVector*& OutTween, const struct FVector& From, const struct FVector& To, float Duration, ETweenEaseType EaseType, int32 NumLoops, ETweenLoopType LoopType, float Delay, float TimeScale, bool TweenWhileGameIsPaused);
	static class UTweenVectorLatentFactory* BP_CreateLatentTweenMoveActorBy(class UTweenManagerComponent* TweenManager, class AActor*& TweenTarget, class UTweenContainer*& OutTweenContainer, class UTweenVector*& OutTween, const struct FVector& bY, float Duration, ETweenEaseType EaseType, bool DeleteTweenOnHit, bool DeleteTweenOnOverlap, int32 NumLoops, ETweenLoopType LoopType, float Delay, float TimeScale, bool TweenWhileGameIsPaused);
	static class UTweenVectorLatentFactory* BP_CreateLatentTweenMoveActorTo(class UTweenManagerComponent* TweenManager, class AActor*& TweenTarget, class UTweenContainer*& OutTweenContainer, class UTweenVector*& OutTween, const struct FVector& To, float Duration, ETweenEaseType EaseType, ETweenSpace TweenSpace, bool DeleteTweenOnHit, bool DeleteTweenOnOverlap, int32 NumLoops, ETweenLoopType LoopType, float Delay, float TimeScale, bool TweenWhileGameIsPaused);
	static class UTweenVectorLatentFactory* BP_CreateLatentTweenMoveSceneComponentBy(class UTweenManagerComponent* TweenManager, class USceneComponent*& TweenTarget, class UTweenContainer*& OutTweenContainer, class UTweenVector*& OutTween, const struct FVector& bY, float Duration, ETweenEaseType EaseType, bool DeleteTweenOnHit, bool DeleteTweenOnOverlap, int32 NumLoops, ETweenLoopType LoopType, float Delay, float TimeScale, bool TweenWhileGameIsPaused);
	static class UTweenVectorLatentFactory* BP_CreateLatentTweenMoveSceneComponentTo(class UTweenManagerComponent* TweenManager, class USceneComponent*& TweenTarget, class UTweenContainer*& OutTweenContainer, class UTweenVector*& OutTween, const struct FVector& To, float Duration, ETweenEaseType EaseType, ETweenSpace TweenSpace, bool DeleteTweenOnHit, bool DeleteTweenOnOverlap, int32 NumLoops, ETweenLoopType LoopType, float Delay, float TimeScale, bool TweenWhileGameIsPaused);
	static class UTweenVectorLatentFactory* BP_CreateLatentTweenScaleActorBy(class UTweenManagerComponent* TweenManager, class AActor*& TweenTarget, class UTweenContainer*& OutTweenContainer, class UTweenVector*& OutTween, const struct FVector& bY, float Duration, ETweenEaseType EaseType, bool DeleteTweenOnHit, bool DeleteTweenOnOverlap, int32 NumLoops, ETweenLoopType LoopType, float Delay, float TimeScale, bool TweenWhileGameIsPaused);
	static class UTweenVectorLatentFactory* BP_CreateLatentTweenScaleActorTo(class UTweenManagerComponent* TweenManager, class AActor* TweenTarget, class UTweenContainer** OutTweenContainer, class UTweenVector** OutTween, const struct FVector& To, float Duration, ETweenEaseType EaseType, ETweenSpace TweenSpace, bool DeleteTweenOnHit, bool DeleteTweenOnOverlap, int32 NumLoops, ETweenLoopType LoopType, float Delay, float TimeScale, bool TweenWhileGameIsPaused);
	static class UTweenVectorLatentFactory* BP_CreateLatentTweenScaleSceneComponentBy(class UTweenManagerComponent* TweenManager, class USceneComponent*& TweenTarget, class UTweenContainer*& OutTweenContainer, class UTweenVector*& OutTween, const struct FVector& bY, float Duration, ETweenEaseType EaseType, bool DeleteTweenOnHit, bool DeleteTweenOnOverlap, int32 NumLoops, ETweenLoopType LoopType, float Delay, float TimeScale, bool TweenWhileGameIsPaused);
	static class UTweenVectorLatentFactory* BP_CreateLatentTweenScaleSceneComponentTo(class UTweenManagerComponent* TweenManager, class USceneComponent*& TweenTarget, class UTweenContainer*& OutTweenContainer, class UTweenVector*& OutTween, const struct FVector& To, float Duration, ETweenEaseType EaseType, ETweenSpace TweenSpace, bool DeleteTweenOnHit, bool DeleteTweenOnOverlap, int32 NumLoops, ETweenLoopType LoopType, float Delay, float TimeScale, bool TweenWhileGameIsPaused);
	static class UTweenVectorLatentFactory* BP_JoinLatentTweenCustomVector(class UTweenContainer*& TweenContainer, class UTweenVector*& OutTween, class UObject*& TweenTarget, const struct FVector& From, const struct FVector& To, float Duration, ETweenEaseType EaseType, float Delay, float TimeScale, bool TweenWhileGameIsPaused);
	static class UTweenVectorLatentFactory* BP_JoinLatentTweenMoveActorBy(class UTweenContainer*& TweenContainer, class UTweenVector*& OutTween, class AActor*& TweenTarget, const struct FVector& bY, float Duration, ETweenEaseType EaseType, bool DeleteTweenOnHit, bool DeleteTweenOnOverlap, float Delay, float TimeScale, bool TweenWhileGameIsPaused);
	static class UTweenVectorLatentFactory* BP_JoinLatentTweenMoveActorTo(class UTweenContainer*& TweenContainer, class UTweenVector*& OutTween, class AActor*& TweenTarget, const struct FVector& To, float Duration, ETweenEaseType EaseType, ETweenSpace TweenSpace, bool DeleteTweenOnHit, bool DeleteTweenOnOverlap, float Delay, float TimeScale, bool TweenWhileGameIsPaused);
	static class UTweenVectorLatentFactory* BP_JoinLatentTweenMoveSceneComponentBy(class UTweenContainer*& TweenContainer, class UTweenVector*& OutTween, class USceneComponent*& TweenTarget, const struct FVector& bY, float Duration, ETweenEaseType EaseType, bool DeleteTweenOnHit, bool DeleteTweenOnOverlap, float Delay, float TimeScale, bool TweenWhileGameIsPaused);
	static class UTweenVectorLatentFactory* BP_JoinLatentTweenMoveSceneComponentTo(class UTweenContainer*& TweenContainer, class UTweenVector*& OutTween, class USceneComponent*& TweenTarget, const struct FVector& To, float Duration, ETweenEaseType EaseType, ETweenSpace TweenSpace, bool DeleteTweenOnHit, bool DeleteTweenOnOverlap, float Delay, float TimeScale, bool TweenWhileGameIsPaused);
	static class UTweenVectorLatentFactory* BP_JoinLatentTweenScaleActorBy(class UTweenContainer*& TweenContainer, class UTweenVector*& OutTween, class AActor*& TweenTarget, const struct FVector& bY, float Duration, ETweenEaseType EaseType, bool DeleteTweenOnHit, bool DeleteTweenOnOverlap, float Delay, float TimeScale, bool TweenWhileGameIsPaused);
	static class UTweenVectorLatentFactory* BP_JoinLatentTweenScaleActorTo(class UTweenContainer*& TweenContainer, class UTweenVector*& OutTween, class AActor*& TweenTarget, const struct FVector& To, float Duration, ETweenEaseType EaseType, ETweenSpace TweenSpace, bool DeleteTweenOnHit, bool DeleteTweenOnOverlap, float Delay, float TimeScale, bool TweenWhileGameIsPaused);
	static class UTweenVectorLatentFactory* BP_JoinLatentTweenScaleSceneComponentBy(class UTweenContainer*& TweenContainer, class UTweenVector*& OutTween, class USceneComponent*& TweenTarget, const struct FVector& bY, float Duration, ETweenEaseType EaseType, bool DeleteTweenOnHit, bool DeleteTweenOnOverlap, float Delay, float TimeScale, bool TweenWhileGameIsPaused);
	static class UTweenVectorLatentFactory* BP_JoinLatentTweenScaleSceneComponentTo(class UTweenContainer*& TweenContainer, class UTweenVector*& OutTween, class USceneComponent*& TweenTarget, const struct FVector& To, float Duration, ETweenEaseType EaseType, ETweenSpace TweenSpace, bool DeleteTweenOnHit, bool DeleteTweenOnOverlap, float Delay, float TimeScale, bool TweenWhileGameIsPaused);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"TweenVectorLatentFactory">();
	}
	static class UTweenVectorLatentFactory* GetDefaultObj()
	{
		return GetDefaultObjImpl<UTweenVectorLatentFactory>();
	}
};
static_assert(alignof(UTweenVectorLatentFactory) == 0x000008, "Wrong alignment on UTweenVectorLatentFactory");
static_assert(sizeof(UTweenVectorLatentFactory) == 0x000060, "Wrong size on UTweenVectorLatentFactory");
static_assert(offsetof(UTweenVectorLatentFactory, OnTweenStart) == 0x000030, "Member 'UTweenVectorLatentFactory::OnTweenStart' has a wrong offset!");
static_assert(offsetof(UTweenVectorLatentFactory, OnTweenUpdate) == 0x000040, "Member 'UTweenVectorLatentFactory::OnTweenUpdate' has a wrong offset!");
static_assert(offsetof(UTweenVectorLatentFactory, OnTweenEnd) == 0x000050, "Member 'UTweenVectorLatentFactory::OnTweenEnd' has a wrong offset!");

// Class TweenMaker.TweenVectorStandardFactory
// 0x0000 (0x0028 - 0x0028)
class UTweenVectorStandardFactory final : public UObject
{
public:
	static class UTweenVector* BP_AppendTweenCustomVector(class UTweenContainer*& TweenContainer, class UObject*& TweenTarget, const struct FVector& From, const struct FVector& To, float Duration, ETweenEaseType EaseType, int32 NumLoops, ETweenLoopType LoopType, float Delay, float TimeScale, bool TweenWhileGameIsPaused, int32 SequenceIndex);
	static class UTweenVector* BP_AppendTweenMoveActorBy(class UTweenContainer*& TweenContainer, class AActor*& TweenTarget, const struct FVector& bY, float Duration, ETweenEaseType EaseType, bool DeleteTweenOnHit, bool DeleteTweenOnOverlap, int32 NumLoops, ETweenLoopType LoopType, float Delay, float TimeScale, bool TweenWhileGameIsPaused, int32 SequenceIndex);
	static class UTweenVector* BP_AppendTweenMoveActorTo(class UTweenContainer*& TweenContainer, class AActor*& TweenTarget, const struct FVector& To, float Duration, ETweenEaseType EaseType, ETweenSpace TweenSpace, bool DeleteTweenOnHit, bool DeleteTweenOnOverlap, int32 NumLoops, ETweenLoopType LoopType, float Delay, float TimeScale, bool TweenWhileGameIsPaused, int32 SequenceIndex);
	static class UTweenVector* BP_AppendTweenMoveSceneComponentBy(class UTweenContainer*& TweenContainer, class USceneComponent*& TweenTarget, const struct FVector& bY, float Duration, ETweenEaseType EaseType, bool DeleteTweenOnHit, bool DeleteTweenOnOverlap, int32 NumLoops, ETweenLoopType LoopType, float Delay, float TimeScale, bool TweenWhileGameIsPaused, int32 SequenceIndex);
	static class UTweenVector* BP_AppendTweenMoveSceneComponentTo(class UTweenContainer*& TweenContainer, class USceneComponent*& TweenTarget, const struct FVector& To, float Duration, ETweenEaseType EaseType, ETweenSpace TweenSpace, bool DeleteTweenOnHit, bool DeleteTweenOnOverlap, int32 NumLoops, ETweenLoopType LoopType, float Delay, float TimeScale, bool TweenWhileGameIsPaused, int32 SequenceIndex);
	static class UTweenVector* BP_AppendTweenScaleActorBy(class UTweenContainer*& TweenContainer, class AActor*& TweenTarget, const struct FVector& bY, float Duration, ETweenEaseType EaseType, bool DeleteTweenOnHit, bool DeleteTweenOnOverlap, int32 NumLoops, ETweenLoopType LoopType, float Delay, float TimeScale, bool TweenWhileGameIsPaused, int32 SequenceIndex);
	static class UTweenVector* BP_AppendTweenScaleActorTo(class UTweenContainer*& TweenContainer, class AActor*& TweenTarget, const struct FVector& To, float Duration, ETweenEaseType EaseType, ETweenSpace TweenSpace, bool DeleteTweenOnHit, bool DeleteTweenOnOverlap, int32 NumLoops, ETweenLoopType LoopType, float Delay, float TimeScale, bool TweenWhileGameIsPaused, int32 SequenceIndex);
	static class UTweenVector* BP_AppendTweenScaleSceneComponentBy(class UTweenContainer*& TweenContainer, class USceneComponent*& TweenTarget, const struct FVector& bY, float Duration, ETweenEaseType EaseType, bool DeleteTweenOnHit, bool DeleteTweenOnOverlap, int32 NumLoops, ETweenLoopType LoopType, float Delay, float TimeScale, bool TweenWhileGameIsPaused, int32 SequenceIndex);
	static class UTweenVector* BP_AppendTweenScaleSceneComponentTo(class UTweenContainer*& TweenContainer, class USceneComponent*& TweenTarget, const struct FVector& To, float Duration, ETweenEaseType EaseType, ETweenSpace TweenSpace, bool DeleteTweenOnHit, bool DeleteTweenOnOverlap, int32 NumLoops, ETweenLoopType LoopType, float Delay, float TimeScale, bool TweenWhileGameIsPaused, int32 SequenceIndex);
	static void BP_CreateTweenCustomVector(class UTweenManagerComponent* TweenManager, class UObject*& TweenTarget, class UTweenContainer** TweenContainer, class UTweenVector** Tween, const struct FVector& From, const struct FVector& To, float Duration, ETweenEaseType EaseType, int32 NumLoops, ETweenLoopType LoopType, float Delay, float TimeScale, bool TweenWhileGameIsPaused, int32 SequenceIndex);
	static void BP_CreateTweenMoveActorBy(class UTweenManagerComponent* TweenManager, class AActor*& TweenTarget, class UTweenContainer** TweenContainer, class UTweenVector** Tween, const struct FVector& bY, float Duration, ETweenEaseType EaseType, bool DeleteTweenOnHit, bool DeleteTweenOnOverlap, int32 NumLoops, ETweenLoopType LoopType, float Delay, float TimeScale, bool TweenWhileGameIsPaused, int32 SequenceIndex);
	static void BP_CreateTweenMoveActorTo(class UTweenManagerComponent* TweenManager, class AActor*& TweenTarget, class UTweenContainer** TweenContainer, class UTweenVector** Tween, const struct FVector& To, float Duration, ETweenEaseType EaseType, ETweenSpace TweenSpace, bool DeleteTweenOnHit, bool DeleteTweenOnOverlap, int32 NumLoops, ETweenLoopType LoopType, float Delay, float TimeScale, bool TweenWhileGameIsPaused, int32 SequenceIndex);
	static void BP_CreateTweenMoveSceneComponentBy(class UTweenManagerComponent* TweenManager, class USceneComponent*& TweenTarget, class UTweenContainer** TweenContainer, class UTweenVector** Tween, const struct FVector& bY, float Duration, ETweenEaseType EaseType, bool DeleteTweenOnHit, bool DeleteTweenOnOverlap, int32 NumLoops, ETweenLoopType LoopType, float Delay, float TimeScale, bool TweenWhileGameIsPaused, int32 SequenceIndex);
	static void BP_CreateTweenMoveSceneComponentTo(class UTweenManagerComponent* TweenManager, class USceneComponent*& TweenTarget, class UTweenContainer** TweenContainer, class UTweenVector** Tween, const struct FVector& To, float Duration, ETweenEaseType EaseType, ETweenSpace TweenSpace, bool DeleteTweenOnHit, bool DeleteTweenOnOverlap, int32 NumLoops, ETweenLoopType LoopType, float Delay, float TimeScale, bool TweenWhileGameIsPaused, int32 SequenceIndex);
	static void BP_CreateTweenScaleActorBy(class UTweenManagerComponent* TweenManager, class AActor*& TweenTarget, class UTweenContainer** TweenContainer, class UTweenVector** Tween, const struct FVector& bY, float Duration, ETweenEaseType EaseType, bool DeleteTweenOnHit, bool DeleteTweenOnOverlap, int32 NumLoops, ETweenLoopType LoopType, float Delay, float TimeScale, bool TweenWhileGameIsPaused, int32 SequenceIndex);
	static void BP_CreateTweenScaleActorTo(class UTweenManagerComponent* TweenManager, class AActor*& TweenTarget, class UTweenContainer** TweenContainer, class UTweenVector** Tween, const struct FVector& To, float Duration, ETweenEaseType EaseType, ETweenSpace TweenSpace, bool DeleteTweenOnHit, bool DeleteTweenOnOverlap, int32 NumLoops, ETweenLoopType LoopType, float Delay, float TimeScale, bool TweenWhileGameIsPaused, int32 SequenceIndex);
	static void BP_CreateTweenScaleSceneComponentBy(class UTweenManagerComponent* TweenManager, class USceneComponent*& TweenTarget, class UTweenContainer** TweenContainer, class UTweenVector** Tween, const struct FVector& bY, float Duration, ETweenEaseType EaseType, bool DeleteTweenOnHit, bool DeleteTweenOnOverlap, int32 NumLoops, ETweenLoopType LoopType, float Delay, float TimeScale, bool TweenWhileGameIsPaused, int32 SequenceIndex);
	static void BP_CreateTweenScaleSceneComponentTo(class UTweenManagerComponent* TweenManager, class USceneComponent*& TweenTarget, class UTweenContainer** TweenContainer, class UTweenVector** Tween, const struct FVector& To, float Duration, ETweenEaseType EaseType, ETweenSpace TweenSpace, bool DeleteTweenOnHit, bool DeleteTweenOnOverlap, int32 NumLoops, ETweenLoopType LoopType, float Delay, float TimeScale, bool TweenWhileGameIsPaused, int32 SequenceIndex);
	static class UTweenVector* BP_JoinTweenCustomVector(class UTweenContainer*& TweenContainer, class UObject*& TweenTarget, const struct FVector& From, const struct FVector& To, float Duration, ETweenEaseType EaseType, float Delay, float TimeScale, bool TweenWhileGameIsPaused, int32 SequenceIndex);
	static class UTweenVector* BP_JoinTweenMoveActorBy(class UTweenContainer*& TweenContainer, class AActor*& TweenTarget, const struct FVector& bY, float Duration, ETweenEaseType EaseType, bool DeleteTweenOnHit, bool DeleteTweenOnOverlap, float Delay, float TimeScale, bool TweenWhileGameIsPaused, int32 SequenceIndex);
	static class UTweenVector* BP_JoinTweenMoveActorTo(class UTweenContainer*& TweenContainer, class AActor*& TweenTarget, const struct FVector& To, float Duration, ETweenEaseType EaseType, ETweenSpace TweenSpace, bool DeleteTweenOnHit, bool DeleteTweenOnOverlap, float Delay, float TimeScale, bool TweenWhileGameIsPaused, int32 SequenceIndex);
	static class UTweenVector* BP_JoinTweenMoveSceneComponentBy(class UTweenContainer*& TweenContainer, class USceneComponent*& TweenTarget, const struct FVector& bY, float Duration, ETweenEaseType EaseType, bool DeleteTweenOnHit, bool DeleteTweenOnOverlap, float Delay, float TimeScale, bool TweenWhileGameIsPaused, int32 SequenceIndex);
	static class UTweenVector* BP_JoinTweenMoveSceneComponentTo(class UTweenContainer*& TweenContainer, class USceneComponent*& TweenTarget, const struct FVector& To, float Duration, ETweenEaseType EaseType, ETweenSpace TweenSpace, bool DeleteTweenOnHit, bool DeleteTweenOnOverlap, float Delay, float TimeScale, bool TweenWhileGameIsPaused, int32 SequenceIndex);
	static class UTweenVector* BP_JoinTweenScaleActorBy(class UTweenContainer*& TweenContainer, class AActor*& TweenTarget, const struct FVector& bY, float Duration, ETweenEaseType EaseType, bool DeleteTweenOnHit, bool DeleteTweenOnOverlap, float Delay, float TimeScale, bool TweenWhileGameIsPaused, int32 SequenceIndex);
	static class UTweenVector* BP_JoinTweenScaleActorTo(class UTweenContainer*& TweenContainer, class AActor*& TweenTarget, const struct FVector& To, float Duration, ETweenEaseType EaseType, ETweenSpace TweenSpace, bool DeleteTweenOnHit, bool DeleteTweenOnOverlap, float Delay, float TimeScale, bool TweenWhileGameIsPaused, int32 SequenceIndex);
	static class UTweenVector* BP_JoinTweenScaleSceneComponentBy(class UTweenContainer*& TweenContainer, class USceneComponent*& TweenTarget, const struct FVector& bY, float Duration, ETweenEaseType EaseType, bool DeleteTweenOnHit, bool DeleteTweenOnOverlap, float Delay, float TimeScale, bool TweenWhileGameIsPaused, int32 SequenceIndex);
	static class UTweenVector* BP_JoinTweenScaleSceneComponentTo(class UTweenContainer*& TweenContainer, class USceneComponent*& TweenTarget, const struct FVector& To, float Duration, ETweenEaseType EaseType, ETweenSpace TweenSpace, bool DeleteTweenOnHit, bool DeleteTweenOnOverlap, float Delay, float TimeScale, bool TweenWhileGameIsPaused, int32 SequenceIndex);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"TweenVectorStandardFactory">();
	}
	static class UTweenVectorStandardFactory* GetDefaultObj()
	{
		return GetDefaultObjImpl<UTweenVectorStandardFactory>();
	}
};
static_assert(alignof(UTweenVectorStandardFactory) == 0x000008, "Wrong alignment on UTweenVectorStandardFactory");
static_assert(sizeof(UTweenVectorStandardFactory) == 0x000028, "Wrong size on UTweenVectorStandardFactory");

}

