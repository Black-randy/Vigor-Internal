#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: UI_HUD

#include "Basic.hpp"

#include "UI_HUD_classes.hpp"
#include "UI_HUD_parameters.hpp"


namespace SDK
{

// Function UI_HUD.UI_HUD_C.ExecuteUbergraph_UI_HUD
// (Final, UbergraphFunction, HasDefaults)
// Parameters:
// int32                                   EntryPoint                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UUI_HUD_C::ExecuteUbergraph_UI_HUD(int32 EntryPoint)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UI_HUD_C", "ExecuteUbergraph_UI_HUD");

	Params::UI_HUD_C_ExecuteUbergraph_UI_HUD Parms{};

	Parms.EntryPoint = EntryPoint;

	UObject::ProcessEvent(Func, &Parms);
}


// Function UI_HUD.UI_HUD_C.DelayChallengeNotificationPopUps
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// float                                   DelayTime                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UUI_HUD_C::DelayChallengeNotificationPopUps(float DelayTime)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UI_HUD_C", "DelayChallengeNotificationPopUps");

	Params::UI_HUD_C_DelayChallengeNotificationPopUps Parms{};

	Parms.DelayTime = DelayTime;

	UObject::ProcessEvent(Func, &Parms);
}


// Function UI_HUD.UI_HUD_C.FlushDelayedNotifications
// (BlueprintCallable, BlueprintEvent)

void UUI_HUD_C::FlushDelayedNotifications()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UI_HUD_C", "FlushDelayedNotifications");

	UObject::ProcessEvent(Func, nullptr);
}


// Function UI_HUD.UI_HUD_C.EventChallengeManagerCreated
// (BlueprintCallable, BlueprintEvent)

void UUI_HUD_C::EventChallengeManagerCreated()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UI_HUD_C", "EventChallengeManagerCreated");

	UObject::ProcessEvent(Func, nullptr);
}


// Function UI_HUD.UI_HUD_C.InitChallengeNotification
// (BlueprintCallable, BlueprintEvent)

void UUI_HUD_C::InitChallengeNotification()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UI_HUD_C", "InitChallengeNotification");

	UObject::ProcessEvent(Func, nullptr);
}


// Function UI_HUD.UI_HUD_C.Show
// (Event, Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    bShowHUD                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void UUI_HUD_C::Show(bool bShowHUD)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UI_HUD_C", "Show");

	Params::UI_HUD_C_Show Parms{};

	Parms.bShowHUD = bShowHUD;

	UObject::ProcessEvent(Func, &Parms);
}


// Function UI_HUD.UI_HUD_C.ShowConsumableNotification
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// class UClass*                           ConsumableClass                                        (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   EffectTimer                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    IsPersistentEffect                                     (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void UUI_HUD_C::ShowConsumableNotification(class UClass* ConsumableClass, float EffectTimer, bool IsPersistentEffect)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UI_HUD_C", "ShowConsumableNotification");

	Params::UI_HUD_C_ShowConsumableNotification Parms{};

	Parms.ConsumableClass = ConsumableClass;
	Parms.EffectTimer = EffectTimer;
	Parms.IsPersistentEffect = IsPersistentEffect;

	UObject::ProcessEvent(Func, &Parms);
}


// Function UI_HUD.UI_HUD_C.ShowChallengeNotification
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// class ABP_ChallengeSlot_C*              ChallengeSlot                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UUI_HUD_C::ShowChallengeNotification(class ABP_ChallengeSlot_C* ChallengeSlot)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UI_HUD_C", "ShowChallengeNotification");

	Params::UI_HUD_C_ShowChallengeNotification Parms{};

	Parms.ChallengeSlot = ChallengeSlot;

	UObject::ProcessEvent(Func, &Parms);
}


// Function UI_HUD.UI_HUD_C.EventChallengeProgressUpdated
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// class ABP_ChallengeSlot_C*              Slot_0                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   New_Progress                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UUI_HUD_C::EventChallengeProgressUpdated(class ABP_ChallengeSlot_C* Slot_0, int32 New_Progress)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UI_HUD_C", "EventChallengeProgressUpdated");

	Params::UI_HUD_C_EventChallengeProgressUpdated Parms{};

	Parms.Slot_0 = Slot_0;
	Parms.New_Progress = New_Progress;

	UObject::ProcessEvent(Func, &Parms);
}


// Function UI_HUD.UI_HUD_C.EventChallengeManagerReady
// (BlueprintCallable, BlueprintEvent)

void UUI_HUD_C::EventChallengeManagerReady()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UI_HUD_C", "EventChallengeManagerReady");

	UObject::ProcessEvent(Func, nullptr);
}


// Function UI_HUD.UI_HUD_C.PreConstruct
// (BlueprintCosmetic, Event, Public, BlueprintEvent)
// Parameters:
// bool                                    IsDesignTime                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void UUI_HUD_C::PreConstruct(bool IsDesignTime)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UI_HUD_C", "PreConstruct");

	Params::UI_HUD_C_PreConstruct Parms{};

	Parms.IsDesignTime = IsDesignTime;

	UObject::ProcessEvent(Func, &Parms);
}


// Function UI_HUD.UI_HUD_C.Construct
// (BlueprintCosmetic, Event, Public, BlueprintEvent)

void UUI_HUD_C::Construct()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UI_HUD_C", "Construct");

	UObject::ProcessEvent(Func, nullptr);
}


// Function UI_HUD.UI_HUD_C.GetOwningCharacter
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// class ABP_Character_C*                  BP_Character                                           (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UUI_HUD_C::GetOwningCharacter(class ABP_Character_C** BP_Character)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UI_HUD_C", "GetOwningCharacter");

	Params::UI_HUD_C_GetOwningCharacter Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (BP_Character != nullptr)
		*BP_Character = Parms.BP_Character;
}


// Function UI_HUD.UI_HUD_C.SetMainHUDVisibility
// (Private, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    ShowHUD                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void UUI_HUD_C::SetMainHUDVisibility(bool ShowHUD)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UI_HUD_C", "SetMainHUDVisibility");

	Params::UI_HUD_C_SetMainHUDVisibility Parms{};

	Parms.ShowHUD = ShowHUD;

	UObject::ProcessEvent(Func, &Parms);
}


// Function UI_HUD.UI_HUD_C.Set Freezing Indicator
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    BeingFreezed_0                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// float                                   Value                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UUI_HUD_C::Set_Freezing_Indicator(bool BeingFreezed_0, float Value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UI_HUD_C", "Set Freezing Indicator");

	Params::UI_HUD_C_Set_Freezing_Indicator Parms{};

	Parms.BeingFreezed_0 = BeingFreezed_0;
	Parms.Value = Value;

	UObject::ProcessEvent(Func, &Parms);
}

}

