#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_GameInstance

#include "Basic.hpp"

#include "Flame_structs.hpp"
#include "Flame_classes.hpp"
#include "S_MatchPlayerInfo_structs.hpp"
#include "Engine_structs.hpp"
#include "F_AchievementWriteRequest_structs.hpp"
#include "FlameUI_structs.hpp"
#include "CoreUObject_structs.hpp"
#include "F_LastPlayerWith_Player_structs.hpp"
#include "UMG_structs.hpp"


namespace SDK
{

// BlueprintGeneratedClass BP_GameInstance.BP_GameInstance_C
// 0x02E8 (0x0AA8 - 0x07C0)
class UBP_GameInstance_C final : public UFlameGameInstance
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x07C0(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	int32                                         Server_Measures_Period;                            // 0x07C8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_7CC[0x4];                                      // 0x07CC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FF_AchievementWriteRequest>     Achievement_Queue;                                 // 0x07D0(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	bool                                          Achievement_Cache_Is_Dirty;                        // 0x07E0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          Achievement_System_Is_Idle;                        // 0x07E1(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          IsInTeamMode;                                      // 0x07E2(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_7E3[0x5];                                      // 0x07E3(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	class APlayerController*                      Controller;                                        // 0x07E8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   Name_0;                                            // 0x07F0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Progress_Increment;                                // 0x07F8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Old_Progress;                                      // 0x07FC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UBP_EncounterHints_Manager_C*           EncounterHintsManager;                             // 0x0800(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TMap<class FName, float>                      Local_Achievement_Cache;                           // 0x0808(0x0050)(Edit, BlueprintVisible, DisableEditOnInstance)
	class FString                                 QueuedMapName;                                     // 0x0858(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, HasGetValueTypeHash)
	bool                                          LoadoutManager;                                    // 0x0868(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_869[0x3];                                      // 0x0869(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         BPCloudGenerationObsolete;                         // 0x086C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         BPTotalHCObsolete;                                 // 0x0870(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Is_ChallengesExploitProtection_Active;             // 0x0874(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          Is_Poison_Active;                                  // 0x0875(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          Is_ExitTell_Active;                                // 0x0876(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_877[0x1];                                      // 0x0877(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	struct FDateTime                              GameStartTime;                                     // 0x0878(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	bool                                          Bee_Stings_Active;                                 // 0x0880(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          Car_Alarm_Active;                                  // 0x0881(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          Random_Bombardment_Active;                         // 0x0882(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          Freezing_Water_Active;                             // 0x0883(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          Is_HealingOthers_Active;                           // 0x0884(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_885[0x3];                                      // 0x0885(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FCloudPriceListItem>            BPLobbyPriceListObsolete;                          // 0x0888(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	struct FS_MatchPlayerInfo                     Killer_Match_Player_Info;                          // 0x0898(0x00A0)(Edit, BlueprintVisible, DisableEditOnInstance, HasGetValueTypeHash)
	bool                                          Detect_Campers;                                    // 0x0938(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          Bombard_Manager_Active;                            // 0x0939(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_93A[0x6];                                      // 0x093A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class UBP_NotificationsSaveGame_C*            NotificationsSave;                                 // 0x0940(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UBP_AchievementsSaveGame_C*             AchievementsSaveGame;                              // 0x0948(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	FMulticastInlineDelegateProperty_             ChallengeManagerCreated;                           // 0x0950(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	bool                                          WasDoubleXPWidgetSeen;                             // 0x0960(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_961[0x7];                                      // 0x0961(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TSet<class FName>                             InGameNewsSeenFlag;                                // 0x0968(0x0050)(Edit, BlueprintVisible, DisableEditOnInstance)
	TMap<class FString, class FString>            Last_Played_UserID;                                // 0x09B8(0x0050)(Edit, BlueprintVisible, DisableEditOnInstance)
	TArray<struct FF_LastPlayerWith_Player>       Last_Played_UserID_new;                            // 0x0A08(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	bool                                          WasFeatureStoreWidgetSeen;                         // 0x0A18(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          WillChallengesOverviewShow;                        // 0x0A19(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          PlayerWasKickedFromMatch;                          // 0x0A1A(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          PlayerHasSeenLoginRewards;                         // 0x0A1B(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_A1C[0x4];                                      // 0x0A1C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TMap<class FString, int32>                    ChallengesLocalProgressMap;                        // 0x0A20(0x0050)(Edit, BlueprintVisible, DisableEditOnInstance)
	struct FLoadoutInfo                           PlayerInitialLoadout;                              // 0x0A70(0x0028)(Edit, BlueprintVisible, DisableEditOnInstance)
	bool                                          HasInitializedVideoSettings;                       // 0x0A98(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_A99[0x3];                                      // 0x0A99(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   ShaderRecompileSettings;                           // 0x0A9C(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          SkipFps;                                           // 0x0AA4(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          SetToNative;                                       // 0x0AA5(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)

public:
	void ChallengeManagerCreated__DelegateSignature();
	void ExecuteUbergraph_BP_GameInstance(int32 EntryPoint);
	void PlatformStoreInitialized();
	void EnableMinimizeAfterDuration();
	void DelayMinimize();
	void CheckMotionBlur(bool IsMotionBlurEnabled);
	void CheckFPSEnabled(int32 ZOrder, bool CreateNew);
	void ApplyResolution();
	void OnVideoSettingsChangeEventDelegate(const struct FVideoSaveSettings& VideoSettings);
	void BPI_StoreAchievementProgress(class FName AchievementName, float IncreaseProgressBy);
	void BPI_AddToAchievementQueue(class APlayerController* PlayerController, class FName AchievementName, float Progress);
	void EventSystemStarted();
	void Clear_last_played_array();
	void Save_player_to_last_played_array(const class FString& Player_name, const class FString& Analytics_User_ID, const struct FUniqueNetIdRepl& Player_unique_ID, EFlamePlatform Player_platform);
	void SafePlatformSavingByGameInstance(class USaveGame* SaveGameObject, const class FString& SlotName);
	void StoreAchievementProgressToSave(class FName AchievementName, float IncreaseProgressBy);
	void ReceiveShutdown();
	void Player_Lost();
	void Player_Switched();
	void EncounterHint_ControllerInstantiated();
	void EncounterHint_MatchLeft(const struct FUserMatchResult& Match_Result);
	void EncounterHint_MatchPlayed();
	void Start_Challenge_System();
	void Event_System_Started();
	void Player_Left_Group(const struct FUniqueNetIdRepl& Userid, const class FString& GroupId);
	void Player_Joined_Group(const struct FUniqueNetIdRepl& Userid, const class FString& GroupId);
	void Send_Dedicated_Server_Analytics();
	void ReceiveInit();
	void Init_Achievement_System();
	void Add_to_Achievement_Queue(class APlayerController* Player_Controller, class FName Achievement_Name, float Progress);
	void Send_Achievement_Progress_to_OSS();
	void Refresh_Achievement_Cache();
	void OnLoadSucceed_3309B7AC4A02DB98B2CE0AAC3D450199(class USaveGame* SaveGame);
	void OnLoadFailed_3309B7AC4A02DB98B2CE0AAC3D450199(class USaveGame* SaveGame);
	void OnSaveSucceed_E763D687473564307975C9AFA347244A(const class FString& SlotName, const int32 UserIndex);
	void OnSaveFailed_E763D687473564307975C9AFA347244A(const class FString& SlotName, const int32 UserIndex);
	void OnSaveSucceed_3DF602D74A0437350F09C0A12379EF93(const class FString& SlotName, const int32 UserIndex);
	void OnSaveFailed_3DF602D74A0437350F09C0A12379EF93(const class FString& SlotName, const int32 UserIndex);
	void OnSaveSucceed_5EDD165948E74565F7665282E9050FCF(const class FString& SlotName, const int32 UserIndex);
	void OnSaveFailed_5EDD165948E74565F7665282E9050FCF(const class FString& SlotName, const int32 UserIndex);
	void OnSuccess_FBE8EC8B4496D136CDCA5290A8D54912();
	void OnFailure_FBE8EC8B4496D136CDCA5290A8D54912();
	void OnSuccess_609E024B4C0B65F0717CA39E4FF2E5BD(class FName WrittenAchievementName, float WrittenProgress, int32 WrittenUserTag);
	void OnFailure_609E024B4C0B65F0717CA39E4FF2E5BD(class FName WrittenAchievementName, float WrittenProgress, int32 WrittenUserTag);
	class USoundBase* GetLoadingSound(float TimeToTravel, const class FName& LevelName, float* FadeInTime, float* FadeOutTime, float* FadeOutDelay);
	void Get_Achievement_Progress(class APlayerController* PlayerController, class FName Achievement_Name, bool* Valid_Output, bool* Might_Be_Out_of_Date, float* Achievement_Progress);
	int32 InvalidCloudRequest();
	void GetCloudTime(struct FDateTime* CloudTime);
	void GetLocalController(class APlayerController** PlayerController);
	int32 GetControllerId();
	void GetGameMode(class AGameModeBase** GameMode);
	void LoadOrCreateAchievementsSave(class UBP_AchievementsSaveGame_C** AchievementsSave);
	void Get_Achievement_ProgressFromSave(class FName AchievementName, float* AchievementProgress);
	void ChallengesAddPartialProgress(const class FString& Key, int32 Value);
	void ChallengesFindPartialProgress(const class FString& Key, int32* Value, bool* WasFound_);
	void ChallengesRemovePartialProgress(const class FString& Key, bool* Was_Removed_);
	void SetPlatformStorePurchaseDelegate();
	void OnPlatformStorePurchaseFinished(const struct FCloudRequestResult& CloudRequestResult, const struct FGameStorePurchaseResult& GameStorePurchaseResult);
	void OpenStore(class UUI_ShelterShop_C** AsUI_Shelter_Shop);
	void Check_CorrectConsoleSettings();
	void IsHealingOthersActive(bool* IsActive);
	void BPI_GetAchievementProgressFromSave_Pure(class FName AchievementName, bool* bValid, float* AchievementProgress);
	void BPI_GetAchievementProgress(class APlayerController* PlayerController, class FName AchievementName, bool* ValidOutput, bool* MightBeOutOfDate, float* AchievementProgress);
	void BPI_CheckForValidGameInstance(bool* bValid);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BP_GameInstance_C">();
	}
	static class UBP_GameInstance_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UBP_GameInstance_C>();
	}
};
static_assert(alignof(UBP_GameInstance_C) == 0x000008, "Wrong alignment on UBP_GameInstance_C");
static_assert(sizeof(UBP_GameInstance_C) == 0x000AA8, "Wrong size on UBP_GameInstance_C");
static_assert(offsetof(UBP_GameInstance_C, UberGraphFrame) == 0x0007C0, "Member 'UBP_GameInstance_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(UBP_GameInstance_C, Server_Measures_Period) == 0x0007C8, "Member 'UBP_GameInstance_C::Server_Measures_Period' has a wrong offset!");
static_assert(offsetof(UBP_GameInstance_C, Achievement_Queue) == 0x0007D0, "Member 'UBP_GameInstance_C::Achievement_Queue' has a wrong offset!");
static_assert(offsetof(UBP_GameInstance_C, Achievement_Cache_Is_Dirty) == 0x0007E0, "Member 'UBP_GameInstance_C::Achievement_Cache_Is_Dirty' has a wrong offset!");
static_assert(offsetof(UBP_GameInstance_C, Achievement_System_Is_Idle) == 0x0007E1, "Member 'UBP_GameInstance_C::Achievement_System_Is_Idle' has a wrong offset!");
static_assert(offsetof(UBP_GameInstance_C, IsInTeamMode) == 0x0007E2, "Member 'UBP_GameInstance_C::IsInTeamMode' has a wrong offset!");
static_assert(offsetof(UBP_GameInstance_C, Controller) == 0x0007E8, "Member 'UBP_GameInstance_C::Controller' has a wrong offset!");
static_assert(offsetof(UBP_GameInstance_C, Name_0) == 0x0007F0, "Member 'UBP_GameInstance_C::Name_0' has a wrong offset!");
static_assert(offsetof(UBP_GameInstance_C, Progress_Increment) == 0x0007F8, "Member 'UBP_GameInstance_C::Progress_Increment' has a wrong offset!");
static_assert(offsetof(UBP_GameInstance_C, Old_Progress) == 0x0007FC, "Member 'UBP_GameInstance_C::Old_Progress' has a wrong offset!");
static_assert(offsetof(UBP_GameInstance_C, EncounterHintsManager) == 0x000800, "Member 'UBP_GameInstance_C::EncounterHintsManager' has a wrong offset!");
static_assert(offsetof(UBP_GameInstance_C, Local_Achievement_Cache) == 0x000808, "Member 'UBP_GameInstance_C::Local_Achievement_Cache' has a wrong offset!");
static_assert(offsetof(UBP_GameInstance_C, QueuedMapName) == 0x000858, "Member 'UBP_GameInstance_C::QueuedMapName' has a wrong offset!");
static_assert(offsetof(UBP_GameInstance_C, LoadoutManager) == 0x000868, "Member 'UBP_GameInstance_C::LoadoutManager' has a wrong offset!");
static_assert(offsetof(UBP_GameInstance_C, BPCloudGenerationObsolete) == 0x00086C, "Member 'UBP_GameInstance_C::BPCloudGenerationObsolete' has a wrong offset!");
static_assert(offsetof(UBP_GameInstance_C, BPTotalHCObsolete) == 0x000870, "Member 'UBP_GameInstance_C::BPTotalHCObsolete' has a wrong offset!");
static_assert(offsetof(UBP_GameInstance_C, Is_ChallengesExploitProtection_Active) == 0x000874, "Member 'UBP_GameInstance_C::Is_ChallengesExploitProtection_Active' has a wrong offset!");
static_assert(offsetof(UBP_GameInstance_C, Is_Poison_Active) == 0x000875, "Member 'UBP_GameInstance_C::Is_Poison_Active' has a wrong offset!");
static_assert(offsetof(UBP_GameInstance_C, Is_ExitTell_Active) == 0x000876, "Member 'UBP_GameInstance_C::Is_ExitTell_Active' has a wrong offset!");
static_assert(offsetof(UBP_GameInstance_C, GameStartTime) == 0x000878, "Member 'UBP_GameInstance_C::GameStartTime' has a wrong offset!");
static_assert(offsetof(UBP_GameInstance_C, Bee_Stings_Active) == 0x000880, "Member 'UBP_GameInstance_C::Bee_Stings_Active' has a wrong offset!");
static_assert(offsetof(UBP_GameInstance_C, Car_Alarm_Active) == 0x000881, "Member 'UBP_GameInstance_C::Car_Alarm_Active' has a wrong offset!");
static_assert(offsetof(UBP_GameInstance_C, Random_Bombardment_Active) == 0x000882, "Member 'UBP_GameInstance_C::Random_Bombardment_Active' has a wrong offset!");
static_assert(offsetof(UBP_GameInstance_C, Freezing_Water_Active) == 0x000883, "Member 'UBP_GameInstance_C::Freezing_Water_Active' has a wrong offset!");
static_assert(offsetof(UBP_GameInstance_C, Is_HealingOthers_Active) == 0x000884, "Member 'UBP_GameInstance_C::Is_HealingOthers_Active' has a wrong offset!");
static_assert(offsetof(UBP_GameInstance_C, BPLobbyPriceListObsolete) == 0x000888, "Member 'UBP_GameInstance_C::BPLobbyPriceListObsolete' has a wrong offset!");
static_assert(offsetof(UBP_GameInstance_C, Killer_Match_Player_Info) == 0x000898, "Member 'UBP_GameInstance_C::Killer_Match_Player_Info' has a wrong offset!");
static_assert(offsetof(UBP_GameInstance_C, Detect_Campers) == 0x000938, "Member 'UBP_GameInstance_C::Detect_Campers' has a wrong offset!");
static_assert(offsetof(UBP_GameInstance_C, Bombard_Manager_Active) == 0x000939, "Member 'UBP_GameInstance_C::Bombard_Manager_Active' has a wrong offset!");
static_assert(offsetof(UBP_GameInstance_C, NotificationsSave) == 0x000940, "Member 'UBP_GameInstance_C::NotificationsSave' has a wrong offset!");
static_assert(offsetof(UBP_GameInstance_C, AchievementsSaveGame) == 0x000948, "Member 'UBP_GameInstance_C::AchievementsSaveGame' has a wrong offset!");
static_assert(offsetof(UBP_GameInstance_C, ChallengeManagerCreated) == 0x000950, "Member 'UBP_GameInstance_C::ChallengeManagerCreated' has a wrong offset!");
static_assert(offsetof(UBP_GameInstance_C, WasDoubleXPWidgetSeen) == 0x000960, "Member 'UBP_GameInstance_C::WasDoubleXPWidgetSeen' has a wrong offset!");
static_assert(offsetof(UBP_GameInstance_C, InGameNewsSeenFlag) == 0x000968, "Member 'UBP_GameInstance_C::InGameNewsSeenFlag' has a wrong offset!");
static_assert(offsetof(UBP_GameInstance_C, Last_Played_UserID) == 0x0009B8, "Member 'UBP_GameInstance_C::Last_Played_UserID' has a wrong offset!");
static_assert(offsetof(UBP_GameInstance_C, Last_Played_UserID_new) == 0x000A08, "Member 'UBP_GameInstance_C::Last_Played_UserID_new' has a wrong offset!");
static_assert(offsetof(UBP_GameInstance_C, WasFeatureStoreWidgetSeen) == 0x000A18, "Member 'UBP_GameInstance_C::WasFeatureStoreWidgetSeen' has a wrong offset!");
static_assert(offsetof(UBP_GameInstance_C, WillChallengesOverviewShow) == 0x000A19, "Member 'UBP_GameInstance_C::WillChallengesOverviewShow' has a wrong offset!");
static_assert(offsetof(UBP_GameInstance_C, PlayerWasKickedFromMatch) == 0x000A1A, "Member 'UBP_GameInstance_C::PlayerWasKickedFromMatch' has a wrong offset!");
static_assert(offsetof(UBP_GameInstance_C, PlayerHasSeenLoginRewards) == 0x000A1B, "Member 'UBP_GameInstance_C::PlayerHasSeenLoginRewards' has a wrong offset!");
static_assert(offsetof(UBP_GameInstance_C, ChallengesLocalProgressMap) == 0x000A20, "Member 'UBP_GameInstance_C::ChallengesLocalProgressMap' has a wrong offset!");
static_assert(offsetof(UBP_GameInstance_C, PlayerInitialLoadout) == 0x000A70, "Member 'UBP_GameInstance_C::PlayerInitialLoadout' has a wrong offset!");
static_assert(offsetof(UBP_GameInstance_C, HasInitializedVideoSettings) == 0x000A98, "Member 'UBP_GameInstance_C::HasInitializedVideoSettings' has a wrong offset!");
static_assert(offsetof(UBP_GameInstance_C, ShaderRecompileSettings) == 0x000A9C, "Member 'UBP_GameInstance_C::ShaderRecompileSettings' has a wrong offset!");
static_assert(offsetof(UBP_GameInstance_C, SkipFps) == 0x000AA4, "Member 'UBP_GameInstance_C::SkipFps' has a wrong offset!");
static_assert(offsetof(UBP_GameInstance_C, SetToNative) == 0x000AA5, "Member 'UBP_GameInstance_C::SetToNative' has a wrong offset!");

}

