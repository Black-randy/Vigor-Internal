#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_ADM_RedChest_GMComponent

#include "Basic.hpp"

#include "CoreUObject_structs.hpp"
#include "S_CustomMapMarker_structs.hpp"
#include "S_CustomMapMarker_Optimized_structs.hpp"


namespace SDK::Params
{

// Function BP_ADM_RedChest_GMComponent.BP_ADM_RedChest_GMComponent_C.Spawn red chest
// 0x00B0 (0x00B0 - 0x0000)
struct BP_ADM_RedChest_GMComponent_C_Spawn_red_chest final
{
public:
	bool                                          Success;                                           // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_1[0xF];                                        // 0x0001(0x000F)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             CallFunc_GetTransform_ReturnValue;                 // 0x0010(0x0030)(ConstParm, IsPlainOldData, NoDestructor)
	class AActor*                                 CallFunc_BeginDeferredActorSpawnFromClass_ReturnValue; // 0x0040(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ABP_ADM_RedChest_Lootable_C*            CallFunc_FinishSpawningActor_ReturnValue;          // 0x0048(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AGameModeBase*                          CallFunc_GetGameMode_ReturnValue;                  // 0x0050(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Reserve_Location_for_Use_Success;         // 0x0058(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_59[0x7];                                       // 0x0059(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class ABP_GameMode_AirDropModular_C*          K2Node_DynamicCast_AsBP_Game_Mode_Air_Drop_Modular; // 0x0060(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0068(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_69[0x7];                                       // 0x0069(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class ABP_ADM_ActorLocation_Base_C*>   CallFunc_Get_Locations_Locations;                  // 0x0070(0x0010)(ReferenceParm)
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x0080(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue_1;               // 0x0084(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Greater_IntInt_ReturnValue;               // 0x0088(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_89[0x3];                                       // 0x0089(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_RandomInteger_ReturnValue;                // 0x008C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Not_PreBool_ReturnValue;                  // 0x0090(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_91[0x7];                                       // 0x0091(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class ABP_ADM_ActorLocation_Base_C*           CallFunc_Array_Get_Item;                           // 0x0098(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ABP_ADM_RedChest_Location_C*            K2Node_DynamicCast_AsBP_ADM_Red_Chest_Location;    // 0x00A0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess_1;                     // 0x00A8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_ADM_RedChest_GMComponent_C_Spawn_red_chest) == 0x000010, "Wrong alignment on BP_ADM_RedChest_GMComponent_C_Spawn_red_chest");
static_assert(sizeof(BP_ADM_RedChest_GMComponent_C_Spawn_red_chest) == 0x0000B0, "Wrong size on BP_ADM_RedChest_GMComponent_C_Spawn_red_chest");
static_assert(offsetof(BP_ADM_RedChest_GMComponent_C_Spawn_red_chest, Success) == 0x000000, "Member 'BP_ADM_RedChest_GMComponent_C_Spawn_red_chest::Success' has a wrong offset!");
static_assert(offsetof(BP_ADM_RedChest_GMComponent_C_Spawn_red_chest, CallFunc_GetTransform_ReturnValue) == 0x000010, "Member 'BP_ADM_RedChest_GMComponent_C_Spawn_red_chest::CallFunc_GetTransform_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_ADM_RedChest_GMComponent_C_Spawn_red_chest, CallFunc_BeginDeferredActorSpawnFromClass_ReturnValue) == 0x000040, "Member 'BP_ADM_RedChest_GMComponent_C_Spawn_red_chest::CallFunc_BeginDeferredActorSpawnFromClass_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_ADM_RedChest_GMComponent_C_Spawn_red_chest, CallFunc_FinishSpawningActor_ReturnValue) == 0x000048, "Member 'BP_ADM_RedChest_GMComponent_C_Spawn_red_chest::CallFunc_FinishSpawningActor_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_ADM_RedChest_GMComponent_C_Spawn_red_chest, CallFunc_GetGameMode_ReturnValue) == 0x000050, "Member 'BP_ADM_RedChest_GMComponent_C_Spawn_red_chest::CallFunc_GetGameMode_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_ADM_RedChest_GMComponent_C_Spawn_red_chest, CallFunc_Reserve_Location_for_Use_Success) == 0x000058, "Member 'BP_ADM_RedChest_GMComponent_C_Spawn_red_chest::CallFunc_Reserve_Location_for_Use_Success' has a wrong offset!");
static_assert(offsetof(BP_ADM_RedChest_GMComponent_C_Spawn_red_chest, K2Node_DynamicCast_AsBP_Game_Mode_Air_Drop_Modular) == 0x000060, "Member 'BP_ADM_RedChest_GMComponent_C_Spawn_red_chest::K2Node_DynamicCast_AsBP_Game_Mode_Air_Drop_Modular' has a wrong offset!");
static_assert(offsetof(BP_ADM_RedChest_GMComponent_C_Spawn_red_chest, K2Node_DynamicCast_bSuccess) == 0x000068, "Member 'BP_ADM_RedChest_GMComponent_C_Spawn_red_chest::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(BP_ADM_RedChest_GMComponent_C_Spawn_red_chest, CallFunc_Get_Locations_Locations) == 0x000070, "Member 'BP_ADM_RedChest_GMComponent_C_Spawn_red_chest::CallFunc_Get_Locations_Locations' has a wrong offset!");
static_assert(offsetof(BP_ADM_RedChest_GMComponent_C_Spawn_red_chest, CallFunc_Array_Length_ReturnValue) == 0x000080, "Member 'BP_ADM_RedChest_GMComponent_C_Spawn_red_chest::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_ADM_RedChest_GMComponent_C_Spawn_red_chest, CallFunc_Array_Length_ReturnValue_1) == 0x000084, "Member 'BP_ADM_RedChest_GMComponent_C_Spawn_red_chest::CallFunc_Array_Length_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_ADM_RedChest_GMComponent_C_Spawn_red_chest, CallFunc_Greater_IntInt_ReturnValue) == 0x000088, "Member 'BP_ADM_RedChest_GMComponent_C_Spawn_red_chest::CallFunc_Greater_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_ADM_RedChest_GMComponent_C_Spawn_red_chest, CallFunc_RandomInteger_ReturnValue) == 0x00008C, "Member 'BP_ADM_RedChest_GMComponent_C_Spawn_red_chest::CallFunc_RandomInteger_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_ADM_RedChest_GMComponent_C_Spawn_red_chest, CallFunc_Not_PreBool_ReturnValue) == 0x000090, "Member 'BP_ADM_RedChest_GMComponent_C_Spawn_red_chest::CallFunc_Not_PreBool_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_ADM_RedChest_GMComponent_C_Spawn_red_chest, CallFunc_Array_Get_Item) == 0x000098, "Member 'BP_ADM_RedChest_GMComponent_C_Spawn_red_chest::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(BP_ADM_RedChest_GMComponent_C_Spawn_red_chest, K2Node_DynamicCast_AsBP_ADM_Red_Chest_Location) == 0x0000A0, "Member 'BP_ADM_RedChest_GMComponent_C_Spawn_red_chest::K2Node_DynamicCast_AsBP_ADM_Red_Chest_Location' has a wrong offset!");
static_assert(offsetof(BP_ADM_RedChest_GMComponent_C_Spawn_red_chest, K2Node_DynamicCast_bSuccess_1) == 0x0000A8, "Member 'BP_ADM_RedChest_GMComponent_C_Spawn_red_chest::K2Node_DynamicCast_bSuccess_1' has a wrong offset!");

// Function BP_ADM_RedChest_GMComponent.BP_ADM_RedChest_GMComponent_C.Spawn Loot manager
// 0x0050 (0x0050 - 0x0000)
struct BP_ADM_RedChest_GMComponent_C_Spawn_Loot_manager final
{
public:
	class ABP_ADM_RedChest_LootManager_C*         Loot_manager;                                      // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_8[0x8];                                        // 0x0008(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             CallFunc_MakeTransform_ReturnValue;                // 0x0010(0x0030)(IsPlainOldData, NoDestructor)
	class AActor*                                 CallFunc_BeginDeferredActorSpawnFromClass_ReturnValue; // 0x0040(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ABP_ADM_RedChest_LootManager_C*         CallFunc_FinishSpawningActor_ReturnValue;          // 0x0048(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_ADM_RedChest_GMComponent_C_Spawn_Loot_manager) == 0x000010, "Wrong alignment on BP_ADM_RedChest_GMComponent_C_Spawn_Loot_manager");
static_assert(sizeof(BP_ADM_RedChest_GMComponent_C_Spawn_Loot_manager) == 0x000050, "Wrong size on BP_ADM_RedChest_GMComponent_C_Spawn_Loot_manager");
static_assert(offsetof(BP_ADM_RedChest_GMComponent_C_Spawn_Loot_manager, Loot_manager) == 0x000000, "Member 'BP_ADM_RedChest_GMComponent_C_Spawn_Loot_manager::Loot_manager' has a wrong offset!");
static_assert(offsetof(BP_ADM_RedChest_GMComponent_C_Spawn_Loot_manager, CallFunc_MakeTransform_ReturnValue) == 0x000010, "Member 'BP_ADM_RedChest_GMComponent_C_Spawn_Loot_manager::CallFunc_MakeTransform_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_ADM_RedChest_GMComponent_C_Spawn_Loot_manager, CallFunc_BeginDeferredActorSpawnFromClass_ReturnValue) == 0x000040, "Member 'BP_ADM_RedChest_GMComponent_C_Spawn_Loot_manager::CallFunc_BeginDeferredActorSpawnFromClass_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_ADM_RedChest_GMComponent_C_Spawn_Loot_manager, CallFunc_FinishSpawningActor_ReturnValue) == 0x000048, "Member 'BP_ADM_RedChest_GMComponent_C_Spawn_Loot_manager::CallFunc_FinishSpawningActor_ReturnValue' has a wrong offset!");

// Function BP_ADM_RedChest_GMComponent.BP_ADM_RedChest_GMComponent_C.Destroy loot manager
// 0x0001 (0x0001 - 0x0000)
struct BP_ADM_RedChest_GMComponent_C_Destroy_loot_manager final
{
public:
	bool                                          Result;                                            // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_ADM_RedChest_GMComponent_C_Destroy_loot_manager) == 0x000001, "Wrong alignment on BP_ADM_RedChest_GMComponent_C_Destroy_loot_manager");
static_assert(sizeof(BP_ADM_RedChest_GMComponent_C_Destroy_loot_manager) == 0x000001, "Wrong size on BP_ADM_RedChest_GMComponent_C_Destroy_loot_manager");
static_assert(offsetof(BP_ADM_RedChest_GMComponent_C_Destroy_loot_manager, Result) == 0x000000, "Member 'BP_ADM_RedChest_GMComponent_C_Destroy_loot_manager::Result' has a wrong offset!");

// Function BP_ADM_RedChest_GMComponent.BP_ADM_RedChest_GMComponent_C.Red chest looted
// 0x0008 (0x0008 - 0x0000)
struct BP_ADM_RedChest_GMComponent_C_Red_chest_looted final
{
public:
	class AActor*                                 Character_that_looted_red_chest;                   // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_ADM_RedChest_GMComponent_C_Red_chest_looted) == 0x000008, "Wrong alignment on BP_ADM_RedChest_GMComponent_C_Red_chest_looted");
static_assert(sizeof(BP_ADM_RedChest_GMComponent_C_Red_chest_looted) == 0x000008, "Wrong size on BP_ADM_RedChest_GMComponent_C_Red_chest_looted");
static_assert(offsetof(BP_ADM_RedChest_GMComponent_C_Red_chest_looted, Character_that_looted_red_chest) == 0x000000, "Member 'BP_ADM_RedChest_GMComponent_C_Red_chest_looted::Character_that_looted_red_chest' has a wrong offset!");

// Function BP_ADM_RedChest_GMComponent.BP_ADM_RedChest_GMComponent_C.Mark Red chest on map
// 0x0008 (0x0008 - 0x0000)
struct BP_ADM_RedChest_GMComponent_C_Mark_Red_chest_on_map final
{
public:
	class ABP_PlayerController_Script_C*          Player_Controller;                                 // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_ADM_RedChest_GMComponent_C_Mark_Red_chest_on_map) == 0x000008, "Wrong alignment on BP_ADM_RedChest_GMComponent_C_Mark_Red_chest_on_map");
static_assert(sizeof(BP_ADM_RedChest_GMComponent_C_Mark_Red_chest_on_map) == 0x000008, "Wrong size on BP_ADM_RedChest_GMComponent_C_Mark_Red_chest_on_map");
static_assert(offsetof(BP_ADM_RedChest_GMComponent_C_Mark_Red_chest_on_map, Player_Controller) == 0x000000, "Member 'BP_ADM_RedChest_GMComponent_C_Mark_Red_chest_on_map::Player_Controller' has a wrong offset!");

// Function BP_ADM_RedChest_GMComponent.BP_ADM_RedChest_GMComponent_C.ExecuteUbergraph_BP_ADM_RedChest_GMComponent
// 0x0100 (0x0100 - 0x0000)
struct BP_ADM_RedChest_GMComponent_C_ExecuteUbergraph_BP_ADM_RedChest_GMComponent final
{
public:
	int32                                         EntryPoint;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0004(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	TDelegate<void(bool Result)>                  K2Node_CreateDelegate_OutputDelegate;              // 0x0008(0x0010)(ZeroConstructor, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue_1;                    // 0x0018(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Send_Red_chest_Spawned_Event_ReturnValue; // 0x0019(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_1A[0x6];                                       // 0x001A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class ABP_ADM_RedChest_LootManager_C*         CallFunc_Spawn_Loot_manager_Loot_manager;          // 0x0020(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_CustomEvent_Result;                         // 0x0028(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_29[0x7];                                       // 0x0029(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 K2Node_CustomEvent_Character_that_looted_red_chest; // 0x0030(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ABP_Character_Matches_C*                K2Node_DynamicCast_AsBP_Character_Matches;         // 0x0038(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0040(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Spawn_red_chest_Success;                  // 0x0041(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_42[0x6];                                       // 0x0042(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class AController*                            CallFunc_GetController_ReturnValue;                // 0x0048(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ABP_PlayerController_Script_C*          K2Node_DynamicCast_AsBP_Player_Controller_Script;  // 0x0050(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess_1;                     // 0x0058(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_59[0x3];                                       // 0x0059(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_K2_GetActorLocation_ReturnValue;          // 0x005C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UBP_ADM_RedChest_PCComponent_C*         CallFunc_GetComponentByClass_ReturnValue;          // 0x0068(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FS_CustomMapMarker                     K2Node_MakeStruct_S_CustomMapMarker;               // 0x0070(0x0050)(HasGetValueTypeHash)
	class ABP_PlayerController_Script_C*          K2Node_CustomEvent_Player_Controller;              // 0x00C0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FS_CustomMapMarker_Optimized           CallFunc_EncodeMapMarker_Map_Marker_Optimized;     // 0x00C8(0x0038)(HasGetValueTypeHash)
};
static_assert(alignof(BP_ADM_RedChest_GMComponent_C_ExecuteUbergraph_BP_ADM_RedChest_GMComponent) == 0x000008, "Wrong alignment on BP_ADM_RedChest_GMComponent_C_ExecuteUbergraph_BP_ADM_RedChest_GMComponent");
static_assert(sizeof(BP_ADM_RedChest_GMComponent_C_ExecuteUbergraph_BP_ADM_RedChest_GMComponent) == 0x000100, "Wrong size on BP_ADM_RedChest_GMComponent_C_ExecuteUbergraph_BP_ADM_RedChest_GMComponent");
static_assert(offsetof(BP_ADM_RedChest_GMComponent_C_ExecuteUbergraph_BP_ADM_RedChest_GMComponent, EntryPoint) == 0x000000, "Member 'BP_ADM_RedChest_GMComponent_C_ExecuteUbergraph_BP_ADM_RedChest_GMComponent::EntryPoint' has a wrong offset!");
static_assert(offsetof(BP_ADM_RedChest_GMComponent_C_ExecuteUbergraph_BP_ADM_RedChest_GMComponent, CallFunc_IsValid_ReturnValue) == 0x000004, "Member 'BP_ADM_RedChest_GMComponent_C_ExecuteUbergraph_BP_ADM_RedChest_GMComponent::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_ADM_RedChest_GMComponent_C_ExecuteUbergraph_BP_ADM_RedChest_GMComponent, K2Node_CreateDelegate_OutputDelegate) == 0x000008, "Member 'BP_ADM_RedChest_GMComponent_C_ExecuteUbergraph_BP_ADM_RedChest_GMComponent::K2Node_CreateDelegate_OutputDelegate' has a wrong offset!");
static_assert(offsetof(BP_ADM_RedChest_GMComponent_C_ExecuteUbergraph_BP_ADM_RedChest_GMComponent, CallFunc_IsValid_ReturnValue_1) == 0x000018, "Member 'BP_ADM_RedChest_GMComponent_C_ExecuteUbergraph_BP_ADM_RedChest_GMComponent::CallFunc_IsValid_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_ADM_RedChest_GMComponent_C_ExecuteUbergraph_BP_ADM_RedChest_GMComponent, CallFunc_Send_Red_chest_Spawned_Event_ReturnValue) == 0x000019, "Member 'BP_ADM_RedChest_GMComponent_C_ExecuteUbergraph_BP_ADM_RedChest_GMComponent::CallFunc_Send_Red_chest_Spawned_Event_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_ADM_RedChest_GMComponent_C_ExecuteUbergraph_BP_ADM_RedChest_GMComponent, CallFunc_Spawn_Loot_manager_Loot_manager) == 0x000020, "Member 'BP_ADM_RedChest_GMComponent_C_ExecuteUbergraph_BP_ADM_RedChest_GMComponent::CallFunc_Spawn_Loot_manager_Loot_manager' has a wrong offset!");
static_assert(offsetof(BP_ADM_RedChest_GMComponent_C_ExecuteUbergraph_BP_ADM_RedChest_GMComponent, K2Node_CustomEvent_Result) == 0x000028, "Member 'BP_ADM_RedChest_GMComponent_C_ExecuteUbergraph_BP_ADM_RedChest_GMComponent::K2Node_CustomEvent_Result' has a wrong offset!");
static_assert(offsetof(BP_ADM_RedChest_GMComponent_C_ExecuteUbergraph_BP_ADM_RedChest_GMComponent, K2Node_CustomEvent_Character_that_looted_red_chest) == 0x000030, "Member 'BP_ADM_RedChest_GMComponent_C_ExecuteUbergraph_BP_ADM_RedChest_GMComponent::K2Node_CustomEvent_Character_that_looted_red_chest' has a wrong offset!");
static_assert(offsetof(BP_ADM_RedChest_GMComponent_C_ExecuteUbergraph_BP_ADM_RedChest_GMComponent, K2Node_DynamicCast_AsBP_Character_Matches) == 0x000038, "Member 'BP_ADM_RedChest_GMComponent_C_ExecuteUbergraph_BP_ADM_RedChest_GMComponent::K2Node_DynamicCast_AsBP_Character_Matches' has a wrong offset!");
static_assert(offsetof(BP_ADM_RedChest_GMComponent_C_ExecuteUbergraph_BP_ADM_RedChest_GMComponent, K2Node_DynamicCast_bSuccess) == 0x000040, "Member 'BP_ADM_RedChest_GMComponent_C_ExecuteUbergraph_BP_ADM_RedChest_GMComponent::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(BP_ADM_RedChest_GMComponent_C_ExecuteUbergraph_BP_ADM_RedChest_GMComponent, CallFunc_Spawn_red_chest_Success) == 0x000041, "Member 'BP_ADM_RedChest_GMComponent_C_ExecuteUbergraph_BP_ADM_RedChest_GMComponent::CallFunc_Spawn_red_chest_Success' has a wrong offset!");
static_assert(offsetof(BP_ADM_RedChest_GMComponent_C_ExecuteUbergraph_BP_ADM_RedChest_GMComponent, CallFunc_GetController_ReturnValue) == 0x000048, "Member 'BP_ADM_RedChest_GMComponent_C_ExecuteUbergraph_BP_ADM_RedChest_GMComponent::CallFunc_GetController_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_ADM_RedChest_GMComponent_C_ExecuteUbergraph_BP_ADM_RedChest_GMComponent, K2Node_DynamicCast_AsBP_Player_Controller_Script) == 0x000050, "Member 'BP_ADM_RedChest_GMComponent_C_ExecuteUbergraph_BP_ADM_RedChest_GMComponent::K2Node_DynamicCast_AsBP_Player_Controller_Script' has a wrong offset!");
static_assert(offsetof(BP_ADM_RedChest_GMComponent_C_ExecuteUbergraph_BP_ADM_RedChest_GMComponent, K2Node_DynamicCast_bSuccess_1) == 0x000058, "Member 'BP_ADM_RedChest_GMComponent_C_ExecuteUbergraph_BP_ADM_RedChest_GMComponent::K2Node_DynamicCast_bSuccess_1' has a wrong offset!");
static_assert(offsetof(BP_ADM_RedChest_GMComponent_C_ExecuteUbergraph_BP_ADM_RedChest_GMComponent, CallFunc_K2_GetActorLocation_ReturnValue) == 0x00005C, "Member 'BP_ADM_RedChest_GMComponent_C_ExecuteUbergraph_BP_ADM_RedChest_GMComponent::CallFunc_K2_GetActorLocation_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_ADM_RedChest_GMComponent_C_ExecuteUbergraph_BP_ADM_RedChest_GMComponent, CallFunc_GetComponentByClass_ReturnValue) == 0x000068, "Member 'BP_ADM_RedChest_GMComponent_C_ExecuteUbergraph_BP_ADM_RedChest_GMComponent::CallFunc_GetComponentByClass_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_ADM_RedChest_GMComponent_C_ExecuteUbergraph_BP_ADM_RedChest_GMComponent, K2Node_MakeStruct_S_CustomMapMarker) == 0x000070, "Member 'BP_ADM_RedChest_GMComponent_C_ExecuteUbergraph_BP_ADM_RedChest_GMComponent::K2Node_MakeStruct_S_CustomMapMarker' has a wrong offset!");
static_assert(offsetof(BP_ADM_RedChest_GMComponent_C_ExecuteUbergraph_BP_ADM_RedChest_GMComponent, K2Node_CustomEvent_Player_Controller) == 0x0000C0, "Member 'BP_ADM_RedChest_GMComponent_C_ExecuteUbergraph_BP_ADM_RedChest_GMComponent::K2Node_CustomEvent_Player_Controller' has a wrong offset!");
static_assert(offsetof(BP_ADM_RedChest_GMComponent_C_ExecuteUbergraph_BP_ADM_RedChest_GMComponent, CallFunc_EncodeMapMarker_Map_Marker_Optimized) == 0x0000C8, "Member 'BP_ADM_RedChest_GMComponent_C_ExecuteUbergraph_BP_ADM_RedChest_GMComponent::CallFunc_EncodeMapMarker_Map_Marker_Optimized' has a wrong offset!");

}

