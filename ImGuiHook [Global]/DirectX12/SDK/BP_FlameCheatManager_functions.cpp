#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_FlameCheatManager

#include "Basic.hpp"

#include "BP_FlameCheatManager_classes.hpp"
#include "BP_FlameCheatManager_parameters.hpp"


namespace SDK
{

// Function BP_FlameCheatManager.BP_FlameCheatManager_C.ExecuteUbergraph_BP_FlameCheatManager
// (Final, UbergraphFunction, HasDefaults)
// Parameters:
// int32                                   EntryPoint                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_FlameCheatManager_C::ExecuteUbergraph_BP_FlameCheatManager(int32 EntryPoint)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_FlameCheatManager_C", "ExecuteUbergraph_BP_FlameCheatManager");

	Params::BP_FlameCheatManager_C_ExecuteUbergraph_BP_FlameCheatManager Parms{};

	Parms.EntryPoint = EntryPoint;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_FlameCheatManager.BP_FlameCheatManager_C.PreLoadLootables
// (Net, NetReliable, NetServer, BlueprintCallable, BlueprintEvent)

void UBP_FlameCheatManager_C::PreLoadLootables()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_FlameCheatManager_C", "PreLoadLootables");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_FlameCheatManager.BP_FlameCheatManager_C.ReceiveInitCheatManager
// (Event, Public, BlueprintEvent)

void UBP_FlameCheatManager_C::ReceiveInitCheatManager()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_FlameCheatManager_C", "ReceiveInitCheatManager");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_FlameCheatManager.BP_FlameCheatManager_C.CheatToggleOnboardingUILocks
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// class ABP_PlayerController_Script_C*    CheatingController                                     (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    IsLocked                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void UBP_FlameCheatManager_C::CheatToggleOnboardingUILocks(class ABP_PlayerController_Script_C* CheatingController, bool IsLocked)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_FlameCheatManager_C", "CheatToggleOnboardingUILocks");

	Params::BP_FlameCheatManager_C_CheatToggleOnboardingUILocks Parms{};

	Parms.CheatingController = CheatingController;
	Parms.IsLocked = IsLocked;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_FlameCheatManager.BP_FlameCheatManager_C.Cheat toggle machine mode
// (Net, NetReliable, NetServer, BlueprintCallable, BlueprintEvent)
// Parameters:
// class ABP_PlayerController_Script_C*    Controller                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    Toggle_machine_mode_0                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void UBP_FlameCheatManager_C::Cheat_toggle_machine_mode(class ABP_PlayerController_Script_C* Controller, bool Toggle_machine_mode_0)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_FlameCheatManager_C", "Cheat toggle machine mode");

	Params::BP_FlameCheatManager_C_Cheat_toggle_machine_mode Parms{};

	Parms.Controller = Controller;
	Parms.Toggle_machine_mode_0 = Toggle_machine_mode_0;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_FlameCheatManager.BP_FlameCheatManager_C.Cheat projectile debug
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// class ABP_PlayerController_Script_C*    Controller                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_FlameCheatManager_C::Cheat_projectile_debug(class ABP_PlayerController_Script_C* Controller)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_FlameCheatManager_C", "Cheat projectile debug");

	Params::BP_FlameCheatManager_C_Cheat_projectile_debug Parms{};

	Parms.Controller = Controller;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_FlameCheatManager.BP_FlameCheatManager_C.Open All Exits
// (Net, NetReliable, NetServer, BlueprintCallable, BlueprintEvent)

void UBP_FlameCheatManager_C::Open_All_Exits()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_FlameCheatManager_C", "Open All Exits");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_FlameCheatManager.BP_FlameCheatManager_C.Set Camping Detection Active
// (Net, NetReliable, NetServer, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    Active                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void UBP_FlameCheatManager_C::Set_Camping_Detection_Active(bool Active)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_FlameCheatManager_C", "Set Camping Detection Active");

	Params::BP_FlameCheatManager_C_Set_Camping_Detection_Active Parms{};

	Parms.Active = Active;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_FlameCheatManager.BP_FlameCheatManager_C.SpawnAllMementos
// (Net, NetReliable, NetServer, BlueprintCallable, BlueprintEvent)
// Parameters:
// class ABP_PlayerController_Script_C*    Controller                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_FlameCheatManager_C::SpawnAllMementos(class ABP_PlayerController_Script_C* Controller)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_FlameCheatManager_C", "SpawnAllMementos");

	Params::BP_FlameCheatManager_C_SpawnAllMementos Parms{};

	Parms.Controller = Controller;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_FlameCheatManager.BP_FlameCheatManager_C.ShowSpawnedMementos
// (Net, NetReliable, NetServer, BlueprintCallable, BlueprintEvent)
// Parameters:
// class ABP_PlayerController_Script_C*    Controller                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_FlameCheatManager_C::ShowSpawnedMementos(class ABP_PlayerController_Script_C* Controller)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_FlameCheatManager_C", "ShowSpawnedMementos");

	Params::BP_FlameCheatManager_C_ShowSpawnedMementos Parms{};

	Parms.Controller = Controller;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_FlameCheatManager.BP_FlameCheatManager_C.ShowMementoSpawnPoints
// (Net, NetReliable, NetServer, BlueprintCallable, BlueprintEvent)
// Parameters:
// class ABP_PlayerController_Script_C*    Controller                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_FlameCheatManager_C::ShowMementoSpawnPoints(class ABP_PlayerController_Script_C* Controller)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_FlameCheatManager_C", "ShowMementoSpawnPoints");

	Params::BP_FlameCheatManager_C_ShowMementoSpawnPoints Parms{};

	Parms.Controller = Controller;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_FlameCheatManager.BP_FlameCheatManager_C.CheatSwitchFogOfWar
// (Net, NetServer, BlueprintCallable, BlueprintEvent)
// Parameters:
// class ABP_PlayerController_Script_C*    Controller                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_FlameCheatManager_C::CheatSwitchFogOfWar(class ABP_PlayerController_Script_C* Controller)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_FlameCheatManager_C", "CheatSwitchFogOfWar");

	Params::BP_FlameCheatManager_C_CheatSwitchFogOfWar Parms{};

	Parms.Controller = Controller;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_FlameCheatManager.BP_FlameCheatManager_C.CheatCameraFreeLook
// (Net, NetServer, BlueprintCallable, BlueprintEvent)
// Parameters:
// class ABP_PlayerController_Script_C*    Controller                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_FlameCheatManager_C::CheatCameraFreeLook(class ABP_PlayerController_Script_C* Controller)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_FlameCheatManager_C", "CheatCameraFreeLook");

	Params::BP_FlameCheatManager_C_CheatCameraFreeLook Parms{};

	Parms.Controller = Controller;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_FlameCheatManager.BP_FlameCheatManager_C.CheatStartSpectating
// (Net, NetReliable, NetServer, BlueprintCallable, BlueprintEvent)
// Parameters:
// class ABP_PlayerController_Script_C*    Controller                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_FlameCheatManager_C::CheatStartSpectating(class ABP_PlayerController_Script_C* Controller)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_FlameCheatManager_C", "CheatStartSpectating");

	Params::BP_FlameCheatManager_C_CheatStartSpectating Parms{};

	Parms.Controller = Controller;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_FlameCheatManager.BP_FlameCheatManager_C.CanCheat_M
// (Net, NetServer, BlueprintCallable, BlueprintEvent)
// Parameters:
// class ABP_PlayerController_Script_C*    Controller                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class UClass*                           CheatWidget                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_FlameCheatManager_C::CanCheat_M(class ABP_PlayerController_Script_C* Controller, class UClass* CheatWidget)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_FlameCheatManager_C", "CanCheat_M");

	Params::BP_FlameCheatManager_C_CanCheat_M Parms{};

	Parms.Controller = Controller;
	Parms.CheatWidget = CheatWidget;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_FlameCheatManager.BP_FlameCheatManager_C.CheatSkipTutorial
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// class ABP_PlayerController_Script_C*    CheatingPlayer                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_FlameCheatManager_C::CheatSkipTutorial(class ABP_PlayerController_Script_C* CheatingPlayer)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_FlameCheatManager_C", "CheatSkipTutorial");

	Params::BP_FlameCheatManager_C_CheatSkipTutorial Parms{};

	Parms.CheatingPlayer = CheatingPlayer;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_FlameCheatManager.BP_FlameCheatManager_C.CheatBigJumps
// (Net, NetServer, BlueprintCallable, BlueprintEvent)
// Parameters:
// class ABP_PlayerController_Script_C*    Controller                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   NewJumpZVelocity                                       (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_FlameCheatManager_C::CheatBigJumps(class ABP_PlayerController_Script_C* Controller, float NewJumpZVelocity)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_FlameCheatManager_C", "CheatBigJumps");

	Params::BP_FlameCheatManager_C_CheatBigJumps Parms{};

	Parms.Controller = Controller;
	Parms.NewJumpZVelocity = NewJumpZVelocity;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_FlameCheatManager.BP_FlameCheatManager_C.CheatMarkSelfAsTester
// (Net, NetServer, BlueprintCallable, BlueprintEvent)
// Parameters:
// class ABP_PlayerController_Script_C*    Controller                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_FlameCheatManager_C::CheatMarkSelfAsTester(class ABP_PlayerController_Script_C* Controller)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_FlameCheatManager_C", "CheatMarkSelfAsTester");

	Params::BP_FlameCheatManager_C_CheatMarkSelfAsTester Parms{};

	Parms.Controller = Controller;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_FlameCheatManager.BP_FlameCheatManager_C.CheatFastMovement
// (Net, NetServer, BlueprintCallable, BlueprintEvent)
// Parameters:
// class ABP_PlayerController_Script_C*    Controller                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   MaxWalkSpeed                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_FlameCheatManager_C::CheatFastMovement(class ABP_PlayerController_Script_C* Controller, float MaxWalkSpeed)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_FlameCheatManager_C", "CheatFastMovement");

	Params::BP_FlameCheatManager_C_CheatFastMovement Parms{};

	Parms.Controller = Controller;
	Parms.MaxWalkSpeed = MaxWalkSpeed;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_FlameCheatManager.BP_FlameCheatManager_C.CheatInfiniteSprint
// (Net, NetServer, BlueprintCallable, BlueprintEvent)
// Parameters:
// class ABP_PlayerController_Script_C*    Controller                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_FlameCheatManager_C::CheatInfiniteSprint(class ABP_PlayerController_Script_C* Controller)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_FlameCheatManager_C", "CheatInfiniteSprint");

	Params::BP_FlameCheatManager_C_CheatInfiniteSprint Parms{};

	Parms.Controller = Controller;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_FlameCheatManager.BP_FlameCheatManager_C.CheatSetDevMode
// (Net, NetReliable, NetServer, BlueprintCallable, BlueprintEvent)
// Parameters:
// class ABP_PlayerController_Script_C*    Controller                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_FlameCheatManager_C::CheatSetDevMode(class ABP_PlayerController_Script_C* Controller)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_FlameCheatManager_C", "CheatSetDevMode");

	Params::BP_FlameCheatManager_C_CheatSetDevMode Parms{};

	Parms.Controller = Controller;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_FlameCheatManager.BP_FlameCheatManager_C.CheatSkipLobby
// (Net, NetReliable, NetServer, BlueprintCallable, BlueprintEvent)
// Parameters:
// class ABP_PlayerController_Script_C*    Controller                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   TimeToEncounter                                        (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   TimeToLock                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_FlameCheatManager_C::CheatSkipLobby(class ABP_PlayerController_Script_C* Controller, int32 TimeToEncounter, int32 TimeToLock)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_FlameCheatManager_C", "CheatSkipLobby");

	Params::BP_FlameCheatManager_C_CheatSkipLobby Parms{};

	Parms.Controller = Controller;
	Parms.TimeToEncounter = TimeToEncounter;
	Parms.TimeToLock = TimeToLock;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_FlameCheatManager.BP_FlameCheatManager_C.Cheat Create Testing Pawns
// (Net, NetReliable, NetServer, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// class ABP_PlayerController_Script_C*    Controller                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// TArray<class ABP_Character_Script_C*>   AllCharacters                                          (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)

void UBP_FlameCheatManager_C::Cheat_Create_Testing_Pawns(class ABP_PlayerController_Script_C* Controller, const TArray<class ABP_Character_Script_C*>& AllCharacters)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_FlameCheatManager_C", "Cheat Create Testing Pawns");

	Params::BP_FlameCheatManager_C_Cheat_Create_Testing_Pawns Parms{};

	Parms.Controller = Controller;
	Parms.AllCharacters = std::move(AllCharacters);

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_FlameCheatManager.BP_FlameCheatManager_C.Client Toggle Bullet Impact Material
// (Net, NetReliable, NetServer, BlueprintCallable, BlueprintEvent)
// Parameters:
// class ABP_PlayerController_Script_C*    Controller                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    ShowBulletMaterialImpact                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void UBP_FlameCheatManager_C::Client_Toggle_Bullet_Impact_Material(class ABP_PlayerController_Script_C* Controller, bool ShowBulletMaterialImpact)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_FlameCheatManager_C", "Client Toggle Bullet Impact Material");

	Params::BP_FlameCheatManager_C_Client_Toggle_Bullet_Impact_Material Parms{};

	Parms.Controller = Controller;
	Parms.ShowBulletMaterialImpact = ShowBulletMaterialImpact;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_FlameCheatManager.BP_FlameCheatManager_C.Cheat Show Player Count Event
// (Net, NetReliable, NetServer, BlueprintCallable, BlueprintEvent)
// Parameters:
// class ABP_PlayerController_Script_C*    Controller                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    Show_Player_Count_State                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void UBP_FlameCheatManager_C::Cheat_Show_Player_Count_Event(class ABP_PlayerController_Script_C* Controller, bool Show_Player_Count_State)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_FlameCheatManager_C", "Cheat Show Player Count Event");

	Params::BP_FlameCheatManager_C_Cheat_Show_Player_Count_Event Parms{};

	Parms.Controller = Controller;
	Parms.Show_Player_Count_State = Show_Player_Count_State;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_FlameCheatManager.BP_FlameCheatManager_C.Cheat Equip Consumable
// (Net, NetServer, BlueprintCallable, BlueprintEvent)
// Parameters:
// class ABP_PlayerController_Script_C*    Controller                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class UClass*                           Consumable                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    UnEquip                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void UBP_FlameCheatManager_C::Cheat_Equip_Consumable(class ABP_PlayerController_Script_C* Controller, class UClass* Consumable, bool UnEquip)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_FlameCheatManager_C", "Cheat Equip Consumable");

	Params::BP_FlameCheatManager_C_Cheat_Equip_Consumable Parms{};

	Parms.Controller = Controller;
	Parms.Consumable = Consumable;
	Parms.UnEquip = UnEquip;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_FlameCheatManager.BP_FlameCheatManager_C.Cheat Show Traced Actor DisplayName
// (Net, NetReliable, NetServer, BlueprintCallable, BlueprintEvent)
// Parameters:
// class ABP_PlayerController_Script_C*    Controller                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    Toggle_Show_Traced_Actor_Display_Name                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void UBP_FlameCheatManager_C::Cheat_Show_Traced_Actor_DisplayName(class ABP_PlayerController_Script_C* Controller, bool Toggle_Show_Traced_Actor_Display_Name)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_FlameCheatManager_C", "Cheat Show Traced Actor DisplayName");

	Params::BP_FlameCheatManager_C_Cheat_Show_Traced_Actor_DisplayName Parms{};

	Parms.Controller = Controller;
	Parms.Toggle_Show_Traced_Actor_Display_Name = Toggle_Show_Traced_Actor_Display_Name;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_FlameCheatManager.BP_FlameCheatManager_C.Cheat Add Shelter Resource Elapsed Time
// (Net, NetReliable, NetServer, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// class ABP_PlayerController_Script_C*    Controller                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   TimeToElapse                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// TArray<class ABP_ShelterImprovementBase_C*>Shelter_Improvements                                   (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)

void UBP_FlameCheatManager_C::Cheat_Add_Shelter_Resource_Elapsed_Time(class ABP_PlayerController_Script_C* Controller, int32 TimeToElapse, const TArray<class ABP_ShelterImprovementBase_C*>& Shelter_Improvements)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_FlameCheatManager_C", "Cheat Add Shelter Resource Elapsed Time");

	Params::BP_FlameCheatManager_C_Cheat_Add_Shelter_Resource_Elapsed_Time Parms{};

	Parms.Controller = Controller;
	Parms.TimeToElapse = TimeToElapse;
	Parms.Shelter_Improvements = std::move(Shelter_Improvements);

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_FlameCheatManager.BP_FlameCheatManager_C.Cheat Infinite Bullets
// (Net, NetServer, BlueprintCallable, BlueprintEvent)
// Parameters:
// class ABP_PlayerController_Script_C*    Controller                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    New_Infinite_Bullets_State                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void UBP_FlameCheatManager_C::Cheat_Infinite_Bullets(class ABP_PlayerController_Script_C* Controller, bool New_Infinite_Bullets_State)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_FlameCheatManager_C", "Cheat Infinite Bullets");

	Params::BP_FlameCheatManager_C_Cheat_Infinite_Bullets Parms{};

	Parms.Controller = Controller;
	Parms.New_Infinite_Bullets_State = New_Infinite_Bullets_State;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_FlameCheatManager.BP_FlameCheatManager_C.Cheat 3D Debug Blocking Volume
// (Net, NetReliable, NetServer, BlueprintCallable, BlueprintEvent)
// Parameters:
// class ABP_PlayerController_Script_C*    Controller                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    Threed_Debug_Blocking_Volume_State                     (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void UBP_FlameCheatManager_C::Cheat_3D_Debug_Blocking_Volume(class ABP_PlayerController_Script_C* Controller, bool Threed_Debug_Blocking_Volume_State)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_FlameCheatManager_C", "Cheat 3D Debug Blocking Volume");

	Params::BP_FlameCheatManager_C_Cheat_3D_Debug_Blocking_Volume Parms{};

	Parms.Controller = Controller;
	Parms.Threed_Debug_Blocking_Volume_State = Threed_Debug_Blocking_Volume_State;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_FlameCheatManager.BP_FlameCheatManager_C.Cheat Victory Add Lootbox
// (Net, NetReliable, NetServer, BlueprintCallable, BlueprintEvent)
// Parameters:
// class ABP_PlayerController_Script_C*    Controller                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class UClass*                           Class_0                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   InInt                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_FlameCheatManager_C::Cheat_Victory_Add_Lootbox(class ABP_PlayerController_Script_C* Controller, class UClass* Class_0, int32 InInt)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_FlameCheatManager_C", "Cheat Victory Add Lootbox");

	Params::BP_FlameCheatManager_C_Cheat_Victory_Add_Lootbox Parms{};

	Parms.Controller = Controller;
	Parms.Class_0 = Class_0;
	Parms.InInt = InInt;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_FlameCheatManager.BP_FlameCheatManager_C.Cheat Retreat Add Resources
// (Net, NetReliable, NetServer, BlueprintCallable, BlueprintEvent)
// Parameters:
// class ABP_PlayerController_Script_C*    Controller                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class UClass*                           Resource                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   Count                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_FlameCheatManager_C::Cheat_Retreat_Add_Resources(class ABP_PlayerController_Script_C* Controller, class UClass* Resource, int32 Count)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_FlameCheatManager_C", "Cheat Retreat Add Resources");

	Params::BP_FlameCheatManager_C_Cheat_Retreat_Add_Resources Parms{};

	Parms.Controller = Controller;
	Parms.Resource = Resource;
	Parms.Count = Count;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_FlameCheatManager.BP_FlameCheatManager_C.Cheat Trade In Resources
// (Net, NetReliable, NetServer, BlueprintCallable, BlueprintEvent)
// Parameters:
// class ABP_PlayerController_Script_C*    Controller                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_FlameCheatManager_C::Cheat_Trade_In_Resources(class ABP_PlayerController_Script_C* Controller)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_FlameCheatManager_C", "Cheat Trade In Resources");

	Params::BP_FlameCheatManager_C_Cheat_Trade_In_Resources Parms{};

	Parms.Controller = Controller;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_FlameCheatManager.BP_FlameCheatManager_C.CheatToggleHitInfo
// (Net, NetServer, BlueprintCallable, BlueprintEvent)
// Parameters:
// class ABP_PlayerController_Script_C*    Controller                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    ToggleHitInfo_0                                        (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// class ABP_BulletManager_C*              BulletManager                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_FlameCheatManager_C::CheatToggleHitInfo(class ABP_PlayerController_Script_C* Controller, bool ToggleHitInfo_0, class ABP_BulletManager_C* BulletManager)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_FlameCheatManager_C", "CheatToggleHitInfo");

	Params::BP_FlameCheatManager_C_CheatToggleHitInfo Parms{};

	Parms.Controller = Controller;
	Parms.ToggleHitInfo_0 = ToggleHitInfo_0;
	Parms.BulletManager = BulletManager;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_FlameCheatManager.BP_FlameCheatManager_C.Cheat 3D Debug Player
// (Net, NetReliable, NetServer, BlueprintCallable, BlueprintEvent)
// Parameters:
// class ABP_PlayerController_Script_C*    Controller                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    ThreedDebugPlayerState                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void UBP_FlameCheatManager_C::Cheat_3D_Debug_Player(class ABP_PlayerController_Script_C* Controller, bool ThreedDebugPlayerState)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_FlameCheatManager_C", "Cheat 3D Debug Player");

	Params::BP_FlameCheatManager_C_Cheat_3D_Debug_Player Parms{};

	Parms.Controller = Controller;
	Parms.ThreedDebugPlayerState = ThreedDebugPlayerState;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_FlameCheatManager.BP_FlameCheatManager_C.Cheat 3D Debug Player Starts
// (Net, NetReliable, NetServer, BlueprintCallable, BlueprintEvent)
// Parameters:
// class ABP_PlayerController_Script_C*    Controller                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    ThreedDebugPlayerStartsState                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void UBP_FlameCheatManager_C::Cheat_3D_Debug_Player_Starts(class ABP_PlayerController_Script_C* Controller, bool ThreedDebugPlayerStartsState)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_FlameCheatManager_C", "Cheat 3D Debug Player Starts");

	Params::BP_FlameCheatManager_C_Cheat_3D_Debug_Player_Starts Parms{};

	Parms.Controller = Controller;
	Parms.ThreedDebugPlayerStartsState = ThreedDebugPlayerStartsState;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_FlameCheatManager.BP_FlameCheatManager_C.Cheat 3D Debug Loot Spawns
// (Net, NetReliable, NetServer, BlueprintCallable, BlueprintEvent)
// Parameters:
// class ABP_PlayerController_Script_C*    Controller                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    ThreedDebugSpawnedLootState                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void UBP_FlameCheatManager_C::Cheat_3D_Debug_Loot_Spawns(class ABP_PlayerController_Script_C* Controller, bool ThreedDebugSpawnedLootState)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_FlameCheatManager_C", "Cheat 3D Debug Loot Spawns");

	Params::BP_FlameCheatManager_C_Cheat_3D_Debug_Loot_Spawns Parms{};

	Parms.Controller = Controller;
	Parms.ThreedDebugSpawnedLootState = ThreedDebugSpawnedLootState;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_FlameCheatManager.BP_FlameCheatManager_C.Cheat 3D Debug Spawned Loot
// (Net, NetServer, BlueprintCallable, BlueprintEvent)
// Parameters:
// class ABP_PlayerController_Script_C*    Controller                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    ThreedDebugSpawnedLootState                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void UBP_FlameCheatManager_C::Cheat_3D_Debug_Spawned_Loot(class ABP_PlayerController_Script_C* Controller, bool ThreedDebugSpawnedLootState)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_FlameCheatManager_C", "Cheat 3D Debug Spawned Loot");

	Params::BP_FlameCheatManager_C_Cheat_3D_Debug_Spawned_Loot Parms{};

	Parms.Controller = Controller;
	Parms.ThreedDebugSpawnedLootState = ThreedDebugSpawnedLootState;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_FlameCheatManager.BP_FlameCheatManager_C.Cheat 3D Debug Objective Spawns
// (Net, NetReliable, NetServer, BlueprintCallable, BlueprintEvent)
// Parameters:
// class ABP_PlayerController_Script_C*    Controller                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    ThreedDebugObjectiveSpawnsState                        (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void UBP_FlameCheatManager_C::Cheat_3D_Debug_Objective_Spawns(class ABP_PlayerController_Script_C* Controller, bool ThreedDebugObjectiveSpawnsState)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_FlameCheatManager_C", "Cheat 3D Debug Objective Spawns");

	Params::BP_FlameCheatManager_C_Cheat_3D_Debug_Objective_Spawns Parms{};

	Parms.Controller = Controller;
	Parms.ThreedDebugObjectiveSpawnsState = ThreedDebugObjectiveSpawnsState;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_FlameCheatManager.BP_FlameCheatManager_C.Cheat 3D Debug Objective Items
// (Net, NetReliable, NetServer, BlueprintCallable, BlueprintEvent)
// Parameters:
// class ABP_PlayerController_Script_C*    Controller                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    ThreedDebugObjectiveItemsState                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void UBP_FlameCheatManager_C::Cheat_3D_Debug_Objective_Items(class ABP_PlayerController_Script_C* Controller, bool ThreedDebugObjectiveItemsState)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_FlameCheatManager_C", "Cheat 3D Debug Objective Items");

	Params::BP_FlameCheatManager_C_Cheat_3D_Debug_Objective_Items Parms{};

	Parms.Controller = Controller;
	Parms.ThreedDebugObjectiveItemsState = ThreedDebugObjectiveItemsState;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_FlameCheatManager.BP_FlameCheatManager_C.Cheat 3D Debug Resource Items
// (Net, NetReliable, NetServer, BlueprintCallable, BlueprintEvent)
// Parameters:
// class ABP_PlayerController_Script_C*    Controller                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    ThreedDebugResourceItemsState                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void UBP_FlameCheatManager_C::Cheat_3D_Debug_Resource_Items(class ABP_PlayerController_Script_C* Controller, bool ThreedDebugResourceItemsState)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_FlameCheatManager_C", "Cheat 3D Debug Resource Items");

	Params::BP_FlameCheatManager_C_Cheat_3D_Debug_Resource_Items Parms{};

	Parms.Controller = Controller;
	Parms.ThreedDebugResourceItemsState = ThreedDebugResourceItemsState;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_FlameCheatManager.BP_FlameCheatManager_C.Cheat Machine Hud
// (Net, NetReliable, NetServer, BlueprintCallable, BlueprintEvent)
// Parameters:
// class ABP_PlayerController_Script_C*    Controller                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    MachineHudState                                        (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void UBP_FlameCheatManager_C::Cheat_Machine_Hud(class ABP_PlayerController_Script_C* Controller, bool MachineHudState)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_FlameCheatManager_C", "Cheat Machine Hud");

	Params::BP_FlameCheatManager_C_Cheat_Machine_Hud Parms{};

	Parms.Controller = Controller;
	Parms.MachineHudState = MachineHudState;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_FlameCheatManager.BP_FlameCheatManager_C.Cheat Consumable Hud
// (Net, NetReliable, NetServer, BlueprintCallable, BlueprintEvent)
// Parameters:
// class ABP_PlayerController_Script_C*    Controller                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    Consumable_Hud_State                                   (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void UBP_FlameCheatManager_C::Cheat_Consumable_Hud(class ABP_PlayerController_Script_C* Controller, bool Consumable_Hud_State)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_FlameCheatManager_C", "Cheat Consumable Hud");

	Params::BP_FlameCheatManager_C_Cheat_Consumable_Hud Parms{};

	Parms.Controller = Controller;
	Parms.Consumable_Hud_State = Consumable_Hud_State;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_FlameCheatManager.BP_FlameCheatManager_C.Cheat 3D Debug
// (Net, NetReliable, NetServer, BlueprintCallable, BlueprintEvent)
// Parameters:
// class ABP_PlayerController_Script_C*    Controller                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    ThreedDebugState                                       (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void UBP_FlameCheatManager_C::Cheat_3D_Debug(class ABP_PlayerController_Script_C* Controller, bool ThreedDebugState)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_FlameCheatManager_C", "Cheat 3D Debug");

	Params::BP_FlameCheatManager_C_Cheat_3D_Debug Parms{};

	Parms.Controller = Controller;
	Parms.ThreedDebugState = ThreedDebugState;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_FlameCheatManager.BP_FlameCheatManager_C.Cheat Game Mode Debug
// (Net, NetReliable, NetServer, BlueprintCallable, BlueprintEvent)
// Parameters:
// class ABP_PlayerController_Script_C*    Controller                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class AGameModeBase*                    GameMode                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_FlameCheatManager_C::Cheat_Game_Mode_Debug(class ABP_PlayerController_Script_C* Controller, class AGameModeBase* GameMode)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_FlameCheatManager_C", "Cheat Game Mode Debug");

	Params::BP_FlameCheatManager_C_Cheat_Game_Mode_Debug Parms{};

	Parms.Controller = Controller;
	Parms.GameMode = GameMode;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_FlameCheatManager.BP_FlameCheatManager_C.Cheat Teleport Player To Start
// (Net, NetReliable, NetServer, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// class ABP_PlayerController_Script_C*    Controller                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// TArray<class APlayerStartFlame*>        AllPlayerStarts_                                       (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
// TArray<class ABP_PlayerController_C*>   AllControllers                                         (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)

void UBP_FlameCheatManager_C::Cheat_Teleport_Player_To_Start(class ABP_PlayerController_Script_C* Controller, const TArray<class APlayerStartFlame*>& AllPlayerStarts_, const TArray<class ABP_PlayerController_C*>& AllControllers)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_FlameCheatManager_C", "Cheat Teleport Player To Start");

	Params::BP_FlameCheatManager_C_Cheat_Teleport_Player_To_Start Parms{};

	Parms.Controller = Controller;
	Parms.AllPlayerStarts_ = std::move(AllPlayerStarts_);
	Parms.AllControllers = std::move(AllControllers);

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_FlameCheatManager.BP_FlameCheatManager_C.Cheat Show Players In Session
// (Net, NetReliable, NetServer, BlueprintCallable, BlueprintEvent)
// Parameters:
// class ABP_PlayerController_Script_C*    Controller                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    ShowPlayersInSessionState                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void UBP_FlameCheatManager_C::Cheat_Show_Players_In_Session(class ABP_PlayerController_Script_C* Controller, bool ShowPlayersInSessionState)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_FlameCheatManager_C", "Cheat Show Players In Session");

	Params::BP_FlameCheatManager_C_Cheat_Show_Players_In_Session Parms{};

	Parms.Controller = Controller;
	Parms.ShowPlayersInSessionState = ShowPlayersInSessionState;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_FlameCheatManager.BP_FlameCheatManager_C.Cheat Show Player Location
// (Net, NetReliable, NetServer, BlueprintCallable, BlueprintEvent)
// Parameters:
// class ABP_PlayerController_Script_C*    Controller                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    Show_Player_Location_State                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void UBP_FlameCheatManager_C::Cheat_Show_Player_Location(class ABP_PlayerController_Script_C* Controller, bool Show_Player_Location_State)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_FlameCheatManager_C", "Cheat Show Player Location");

	Params::BP_FlameCheatManager_C_Cheat_Show_Player_Location Parms{};

	Parms.Controller = Controller;
	Parms.Show_Player_Location_State = Show_Player_Location_State;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_FlameCheatManager.BP_FlameCheatManager_C.Cheat Set Player Transform
// (Net, NetReliable, NetServer, BlueprintCallable, BlueprintEvent)
// Parameters:
// class ABP_PlayerController_Script_C*    Controller                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FTransform                       Transform                                              (BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor)

void UBP_FlameCheatManager_C::Cheat_Set_Player_Transform(class ABP_PlayerController_Script_C* Controller, const struct FTransform& Transform)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_FlameCheatManager_C", "Cheat Set Player Transform");

	Params::BP_FlameCheatManager_C_Cheat_Set_Player_Transform Parms{};

	Parms.Controller = Controller;
	Parms.Transform = std::move(Transform);

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_FlameCheatManager.BP_FlameCheatManager_C.Cheat Set FOV
// (Net, NetServer, BlueprintCallable, BlueprintEvent)
// Parameters:
// class ABP_PlayerController_Script_C*    Controller                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_FlameCheatManager_C::Cheat_Set_FOV(class ABP_PlayerController_Script_C* Controller)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_FlameCheatManager_C", "Cheat Set FOV");

	Params::BP_FlameCheatManager_C_Cheat_Set_FOV Parms{};

	Parms.Controller = Controller;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_FlameCheatManager.BP_FlameCheatManager_C.Cheat Definable Damage
// (Net, NetServer, BlueprintCallable, BlueprintEvent)
// Parameters:
// class ABP_PlayerController_Script_C*    Controller                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_FlameCheatManager_C::Cheat_Definable_Damage(class ABP_PlayerController_Script_C* Controller)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_FlameCheatManager_C", "Cheat Definable Damage");

	Params::BP_FlameCheatManager_C_Cheat_Definable_Damage Parms{};

	Parms.Controller = Controller;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_FlameCheatManager.BP_FlameCheatManager_C.Cheat Health Debug
// (Net, NetServer, BlueprintCallable, BlueprintEvent)
// Parameters:
// class ABP_PlayerController_Script_C*    Controller                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    Health_Debug_State                                     (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void UBP_FlameCheatManager_C::Cheat_Health_Debug(class ABP_PlayerController_Script_C* Controller, bool Health_Debug_State)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_FlameCheatManager_C", "Cheat Health Debug");

	Params::BP_FlameCheatManager_C_Cheat_Health_Debug Parms{};

	Parms.Controller = Controller;
	Parms.Health_Debug_State = Health_Debug_State;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_FlameCheatManager.BP_FlameCheatManager_C.Cheat Infinite Ammo
// (Net, NetServer, BlueprintCallable, BlueprintEvent)
// Parameters:
// class ABP_PlayerController_Script_C*    Controller                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    New_Infinite_Ammo_State                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void UBP_FlameCheatManager_C::Cheat_Infinite_Ammo(class ABP_PlayerController_Script_C* Controller, bool New_Infinite_Ammo_State)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_FlameCheatManager_C", "Cheat Infinite Ammo");

	Params::BP_FlameCheatManager_C_Cheat_Infinite_Ammo Parms{};

	Parms.Controller = Controller;
	Parms.New_Infinite_Ammo_State = New_Infinite_Ammo_State;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_FlameCheatManager.BP_FlameCheatManager_C.Cheat Damage Character
// (Net, NetServer, BlueprintCallable, BlueprintEvent)
// Parameters:
// class ABP_PlayerController_Script_C*    Controller                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   Damage_Amount                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_FlameCheatManager_C::Cheat_Damage_Character(class ABP_PlayerController_Script_C* Controller, float Damage_Amount)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_FlameCheatManager_C", "Cheat Damage Character");

	Params::BP_FlameCheatManager_C_Cheat_Damage_Character Parms{};

	Parms.Controller = Controller;
	Parms.Damage_Amount = Damage_Amount;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_FlameCheatManager.BP_FlameCheatManager_C.Cheat Heal Character
// (Net, NetServer, BlueprintCallable, BlueprintEvent)
// Parameters:
// class ABP_PlayerController_Script_C*    Controller                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   Heal_Amount                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_FlameCheatManager_C::Cheat_Heal_Character(class ABP_PlayerController_Script_C* Controller, float Heal_Amount)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_FlameCheatManager_C", "Cheat Heal Character");

	Params::BP_FlameCheatManager_C_Cheat_Heal_Character Parms{};

	Parms.Controller = Controller;
	Parms.Heal_Amount = Heal_Amount;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_FlameCheatManager.BP_FlameCheatManager_C.Cheat Set Invincibility
// (Net, NetServer, BlueprintCallable, BlueprintEvent)
// Parameters:
// class ABP_PlayerController_Script_C*    Controller                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    New_Invincibility_State                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void UBP_FlameCheatManager_C::Cheat_Set_Invincibility(class ABP_PlayerController_Script_C* Controller, bool New_Invincibility_State)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_FlameCheatManager_C", "Cheat Set Invincibility");

	Params::BP_FlameCheatManager_C_Cheat_Set_Invincibility Parms{};

	Parms.Controller = Controller;
	Parms.New_Invincibility_State = New_Invincibility_State;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_FlameCheatManager.BP_FlameCheatManager_C.Cheat Set Max Health
// (Net, NetServer, BlueprintCallable, BlueprintEvent)
// Parameters:
// class ABP_PlayerController_Script_C*    Controller                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   New_Max_Health                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_FlameCheatManager_C::Cheat_Set_Max_Health(class ABP_PlayerController_Script_C* Controller, float New_Max_Health)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_FlameCheatManager_C", "Cheat Set Max Health");

	Params::BP_FlameCheatManager_C_Cheat_Set_Max_Health Parms{};

	Parms.Controller = Controller;
	Parms.New_Max_Health = New_Max_Health;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_FlameCheatManager.BP_FlameCheatManager_C.Cheat Set Health
// (Net, NetServer, BlueprintCallable, BlueprintEvent)
// Parameters:
// class ABP_PlayerController_Script_C*    Controller                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   New_Health                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_FlameCheatManager_C::Cheat_Set_Health(class ABP_PlayerController_Script_C* Controller, float New_Health)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_FlameCheatManager_C", "Cheat Set Health");

	Params::BP_FlameCheatManager_C_Cheat_Set_Health Parms{};

	Parms.Controller = Controller;
	Parms.New_Health = New_Health;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_FlameCheatManager.BP_FlameCheatManager_C.Cheat Kill Character
// (Net, NetServer, BlueprintCallable, BlueprintEvent)
// Parameters:
// class ABP_PlayerController_Script_C*    Controller                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_FlameCheatManager_C::Cheat_Kill_Character(class ABP_PlayerController_Script_C* Controller)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_FlameCheatManager_C", "Cheat Kill Character");

	Params::BP_FlameCheatManager_C_Cheat_Kill_Character Parms{};

	Parms.Controller = Controller;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_FlameCheatManager.BP_FlameCheatManager_C.Cheat Clear Objective Items From Backpack
// (Net, NetServer, BlueprintCallable, BlueprintEvent)
// Parameters:
// class ABP_PlayerController_Script_C*    Controller                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_FlameCheatManager_C::Cheat_Clear_Objective_Items_From_Backpack(class ABP_PlayerController_Script_C* Controller)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_FlameCheatManager_C", "Cheat Clear Objective Items From Backpack");

	Params::BP_FlameCheatManager_C_Cheat_Clear_Objective_Items_From_Backpack Parms{};

	Parms.Controller = Controller;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_FlameCheatManager.BP_FlameCheatManager_C.Cheat Clear Backpack
// (Net, NetServer, BlueprintCallable, BlueprintEvent)
// Parameters:
// class ABP_PlayerController_Script_C*    Controller                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_FlameCheatManager_C::Cheat_Clear_Backpack(class ABP_PlayerController_Script_C* Controller)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_FlameCheatManager_C", "Cheat Clear Backpack");

	Params::BP_FlameCheatManager_C_Cheat_Clear_Backpack Parms{};

	Parms.Controller = Controller;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_FlameCheatManager.BP_FlameCheatManager_C.Cheat Add Item For Backpack
// (Net, NetServer, BlueprintCallable, BlueprintEvent)
// Parameters:
// class ABP_PlayerController_Script_C*    Controller                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class UClass*                           Item_Type                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   Item_Amount                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_FlameCheatManager_C::Cheat_Add_Item_For_Backpack(class ABP_PlayerController_Script_C* Controller, class UClass* Item_Type, int32 Item_Amount)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_FlameCheatManager_C", "Cheat Add Item For Backpack");

	Params::BP_FlameCheatManager_C_Cheat_Add_Item_For_Backpack Parms{};

	Parms.Controller = Controller;
	Parms.Item_Type = Item_Type;
	Parms.Item_Amount = Item_Amount;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_FlameCheatManager.BP_FlameCheatManager_C.Cheat Add Weapon
// (Net, NetServer, BlueprintCallable, BlueprintEvent)
// Parameters:
// class ABP_PlayerController_Script_C*    Controller                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class UClass*                           Weapon_Type                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_FlameCheatManager_C::Cheat_Add_Weapon(class ABP_PlayerController_Script_C* Controller, class UClass* Weapon_Type)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_FlameCheatManager_C", "Cheat Add Weapon");

	Params::BP_FlameCheatManager_C_Cheat_Add_Weapon Parms{};

	Parms.Controller = Controller;
	Parms.Weapon_Type = Weapon_Type;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_FlameCheatManager.BP_FlameCheatManager_C.Add Weapon
// (Private, BlueprintCallable, BlueprintEvent)
// Parameters:
// class ABP_PlayerController_Script_C*    Controller                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class UClass*                           Weapon_Type                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_FlameCheatManager_C::Add_Weapon(class ABP_PlayerController_Script_C* Controller, class UClass* Weapon_Type)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_FlameCheatManager_C", "Add Weapon");

	Params::BP_FlameCheatManager_C_Add_Weapon Parms{};

	Parms.Controller = Controller;
	Parms.Weapon_Type = Weapon_Type;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_FlameCheatManager.BP_FlameCheatManager_C.Add Item For Backpack
// (Private, BlueprintCallable, BlueprintEvent)
// Parameters:
// class ABP_PlayerController_Script_C*    Controller                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class UClass*                           Item_Type                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   Item_Amount                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_FlameCheatManager_C::Add_Item_For_Backpack(class ABP_PlayerController_Script_C* Controller, class UClass* Item_Type, int32 Item_Amount)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_FlameCheatManager_C", "Add Item For Backpack");

	Params::BP_FlameCheatManager_C_Add_Item_For_Backpack Parms{};

	Parms.Controller = Controller;
	Parms.Item_Type = Item_Type;
	Parms.Item_Amount = Item_Amount;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_FlameCheatManager.BP_FlameCheatManager_C.Clear Backpack
// (Private, BlueprintCallable, BlueprintEvent)
// Parameters:
// class ABP_PlayerController_Script_C*    Controller                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_FlameCheatManager_C::Clear_Backpack(class ABP_PlayerController_Script_C* Controller)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_FlameCheatManager_C", "Clear Backpack");

	Params::BP_FlameCheatManager_C_Clear_Backpack Parms{};

	Parms.Controller = Controller;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_FlameCheatManager.BP_FlameCheatManager_C.Clear Objective Items From Backpack
// (Private, BlueprintCallable, BlueprintEvent)
// Parameters:
// class ABP_PlayerController_Script_C*    Controller                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_FlameCheatManager_C::Clear_Objective_Items_From_Backpack(class ABP_PlayerController_Script_C* Controller)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_FlameCheatManager_C", "Clear Objective Items From Backpack");

	Params::BP_FlameCheatManager_C_Clear_Objective_Items_From_Backpack Parms{};

	Parms.Controller = Controller;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_FlameCheatManager.BP_FlameCheatManager_C.Kill Character
// (Private, BlueprintCallable, BlueprintEvent)
// Parameters:
// class ABP_PlayerController_Script_C*    Controller                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_FlameCheatManager_C::Kill_Character(class ABP_PlayerController_Script_C* Controller)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_FlameCheatManager_C", "Kill Character");

	Params::BP_FlameCheatManager_C_Kill_Character Parms{};

	Parms.Controller = Controller;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_FlameCheatManager.BP_FlameCheatManager_C.Set Health
// (Private, BlueprintCallable, BlueprintEvent)
// Parameters:
// class ABP_PlayerController_Script_C*    Controller                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   New_Health                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_FlameCheatManager_C::Set_Health(class ABP_PlayerController_Script_C* Controller, float New_Health)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_FlameCheatManager_C", "Set Health");

	Params::BP_FlameCheatManager_C_Set_Health Parms{};

	Parms.Controller = Controller;
	Parms.New_Health = New_Health;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_FlameCheatManager.BP_FlameCheatManager_C.Set Max Health
// (Private, BlueprintCallable, BlueprintEvent)
// Parameters:
// class ABP_PlayerController_Script_C*    Controller                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   New_Max_Health                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_FlameCheatManager_C::Set_Max_Health(class ABP_PlayerController_Script_C* Controller, float New_Max_Health)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_FlameCheatManager_C", "Set Max Health");

	Params::BP_FlameCheatManager_C_Set_Max_Health Parms{};

	Parms.Controller = Controller;
	Parms.New_Max_Health = New_Max_Health;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_FlameCheatManager.BP_FlameCheatManager_C.Set Invincibility
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class ABP_PlayerController_Script_C*    Controller                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    New_Invincibility_State                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void UBP_FlameCheatManager_C::Set_Invincibility(class ABP_PlayerController_Script_C* Controller, bool New_Invincibility_State)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_FlameCheatManager_C", "Set Invincibility");

	Params::BP_FlameCheatManager_C_Set_Invincibility Parms{};

	Parms.Controller = Controller;
	Parms.New_Invincibility_State = New_Invincibility_State;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_FlameCheatManager.BP_FlameCheatManager_C.Heal Character
// (Private, BlueprintCallable, BlueprintEvent)
// Parameters:
// class ABP_PlayerController_Script_C*    Controller                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   Heal_Amount                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_FlameCheatManager_C::Heal_Character(class ABP_PlayerController_Script_C* Controller, float Heal_Amount)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_FlameCheatManager_C", "Heal Character");

	Params::BP_FlameCheatManager_C_Heal_Character Parms{};

	Parms.Controller = Controller;
	Parms.Heal_Amount = Heal_Amount;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_FlameCheatManager.BP_FlameCheatManager_C.Damage Character
// (Private, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// class ABP_PlayerController_Script_C*    Controller                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   Damage_Amount                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_FlameCheatManager_C::Damage_Character(class ABP_PlayerController_Script_C* Controller, float Damage_Amount)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_FlameCheatManager_C", "Damage Character");

	Params::BP_FlameCheatManager_C_Damage_Character Parms{};

	Parms.Controller = Controller;
	Parms.Damage_Amount = Damage_Amount;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_FlameCheatManager.BP_FlameCheatManager_C.Set Infinite Ammo
// (Private, BlueprintCallable, BlueprintEvent)
// Parameters:
// class ABP_PlayerController_Script_C*    Controller                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    Infinite_Ammo                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void UBP_FlameCheatManager_C::Set_Infinite_Ammo(class ABP_PlayerController_Script_C* Controller, bool Infinite_Ammo)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_FlameCheatManager_C", "Set Infinite Ammo");

	Params::BP_FlameCheatManager_C_Set_Infinite_Ammo Parms{};

	Parms.Controller = Controller;
	Parms.Infinite_Ammo = Infinite_Ammo;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_FlameCheatManager.BP_FlameCheatManager_C.Health Debug
// (Private, BlueprintCallable, BlueprintEvent)
// Parameters:
// class ABP_PlayerController_Script_C*    Controller                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    Health_Debug_0                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void UBP_FlameCheatManager_C::Health_Debug(class ABP_PlayerController_Script_C* Controller, bool Health_Debug_0)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_FlameCheatManager_C", "Health Debug");

	Params::BP_FlameCheatManager_C_Health_Debug Parms{};

	Parms.Controller = Controller;
	Parms.Health_Debug_0 = Health_Debug_0;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_FlameCheatManager.BP_FlameCheatManager_C.DefinableDamage
// (Private, BlueprintCallable, BlueprintEvent)
// Parameters:
// class ABP_PlayerController_Script_C*    Controller                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_FlameCheatManager_C::DefinableDamage(class ABP_PlayerController_Script_C* Controller)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_FlameCheatManager_C", "DefinableDamage");

	Params::BP_FlameCheatManager_C_DefinableDamage Parms{};

	Parms.Controller = Controller;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_FlameCheatManager.BP_FlameCheatManager_C.Change FOV
// (Private, BlueprintCallable, BlueprintEvent)
// Parameters:
// class ABP_PlayerController_Script_C*    Controller                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_FlameCheatManager_C::Change_FOV(class ABP_PlayerController_Script_C* Controller)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_FlameCheatManager_C", "Change FOV");

	Params::BP_FlameCheatManager_C_Change_FOV Parms{};

	Parms.Controller = Controller;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_FlameCheatManager.BP_FlameCheatManager_C.Set Player Transform
// (Private, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// class ABP_PlayerController_Script_C*    Controller                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FTransform                       Transform                                              (BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor)

void UBP_FlameCheatManager_C::Set_Player_Transform(class ABP_PlayerController_Script_C* Controller, const struct FTransform& Transform)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_FlameCheatManager_C", "Set Player Transform");

	Params::BP_FlameCheatManager_C_Set_Player_Transform Parms{};

	Parms.Controller = Controller;
	Parms.Transform = std::move(Transform);

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_FlameCheatManager.BP_FlameCheatManager_C.ShowPlayerLocation
// (Private, BlueprintCallable, BlueprintEvent)
// Parameters:
// class ABP_PlayerController_Script_C*    Controller                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    Show_Player_Location                                   (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void UBP_FlameCheatManager_C::ShowPlayerLocation(class ABP_PlayerController_Script_C* Controller, bool Show_Player_Location)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_FlameCheatManager_C", "ShowPlayerLocation");

	Params::BP_FlameCheatManager_C_ShowPlayerLocation Parms{};

	Parms.Controller = Controller;
	Parms.Show_Player_Location = Show_Player_Location;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_FlameCheatManager.BP_FlameCheatManager_C.Toggle machine mode
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class ABP_PlayerController_Script_C*    Controller                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    Toggle_machine_mode_0                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void UBP_FlameCheatManager_C::Toggle_machine_mode(class ABP_PlayerController_Script_C* Controller, bool Toggle_machine_mode_0)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_FlameCheatManager_C", "Toggle machine mode");

	Params::BP_FlameCheatManager_C_Toggle_machine_mode Parms{};

	Parms.Controller = Controller;
	Parms.Toggle_machine_mode_0 = Toggle_machine_mode_0;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_FlameCheatManager.BP_FlameCheatManager_C.ShowPlayersInSession
// (Private, BlueprintCallable, BlueprintEvent)
// Parameters:
// class ABP_PlayerController_Script_C*    Controller                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    ToggleShowPlayersInSession                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void UBP_FlameCheatManager_C::ShowPlayersInSession(class ABP_PlayerController_Script_C* Controller, bool ToggleShowPlayersInSession)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_FlameCheatManager_C", "ShowPlayersInSession");

	Params::BP_FlameCheatManager_C_ShowPlayersInSession Parms{};

	Parms.Controller = Controller;
	Parms.ToggleShowPlayersInSession = ToggleShowPlayersInSession;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_FlameCheatManager.BP_FlameCheatManager_C.TeleportToPlayerStart
// (Private, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// class ABP_PlayerController_Script_C*    Controller                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// TArray<class APlayerStartFlame*>        AllPlayerStarts                                        (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
// TArray<class ABP_PlayerController_C*>   AllControllers                                         (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
// int32                                   TeleportationsCount1                                   (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_FlameCheatManager_C::TeleportToPlayerStart(class ABP_PlayerController_Script_C* Controller, TArray<class APlayerStartFlame*>& AllPlayerStarts, TArray<class ABP_PlayerController_C*>& AllControllers, int32* TeleportationsCount1)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_FlameCheatManager_C", "TeleportToPlayerStart");

	Params::BP_FlameCheatManager_C_TeleportToPlayerStart Parms{};

	Parms.Controller = Controller;
	Parms.AllPlayerStarts = std::move(AllPlayerStarts);
	Parms.AllControllers = std::move(AllControllers);

	UObject::ProcessEvent(Func, &Parms);

	AllPlayerStarts = std::move(Parms.AllPlayerStarts);
	AllControllers = std::move(Parms.AllControllers);

	if (TeleportationsCount1 != nullptr)
		*TeleportationsCount1 = Parms.TeleportationsCount1;
}


// Function BP_FlameCheatManager.BP_FlameCheatManager_C.ShowGameModeDebug
// (Private, BlueprintCallable, BlueprintEvent)
// Parameters:
// class ABP_PlayerController_Script_C*    Controller                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class UClass*                           WidgetToDraw                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_FlameCheatManager_C::ShowGameModeDebug(class ABP_PlayerController_Script_C* Controller, class UClass* WidgetToDraw)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_FlameCheatManager_C", "ShowGameModeDebug");

	Params::BP_FlameCheatManager_C_ShowGameModeDebug Parms{};

	Parms.Controller = Controller;
	Parms.WidgetToDraw = WidgetToDraw;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_FlameCheatManager.BP_FlameCheatManager_C.3dDebug
// (Private, BlueprintCallable, BlueprintEvent)
// Parameters:
// class ABP_PlayerController_Script_C*    Controller                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    Toggle3dDebug                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void UBP_FlameCheatManager_C::ThreedDebug(class ABP_PlayerController_Script_C* Controller, bool Toggle3dDebug)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_FlameCheatManager_C", "3dDebug");

	Params::BP_FlameCheatManager_C_ThreedDebug Parms{};

	Parms.Controller = Controller;
	Parms.Toggle3dDebug = Toggle3dDebug;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_FlameCheatManager.BP_FlameCheatManager_C.ConsumableHud
// (Private, BlueprintCallable, BlueprintEvent)
// Parameters:
// class ABP_PlayerController_Script_C*    Controller                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    ToggleConsumableHud                                    (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void UBP_FlameCheatManager_C::ConsumableHud(class ABP_PlayerController_Script_C* Controller, bool ToggleConsumableHud)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_FlameCheatManager_C", "ConsumableHud");

	Params::BP_FlameCheatManager_C_ConsumableHud Parms{};

	Parms.Controller = Controller;
	Parms.ToggleConsumableHud = ToggleConsumableHud;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_FlameCheatManager.BP_FlameCheatManager_C.MachineHud
// (Private, BlueprintCallable, BlueprintEvent)
// Parameters:
// class ABP_PlayerController_Script_C*    Controller                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    ToggleMachineHud                                       (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void UBP_FlameCheatManager_C::MachineHud(class ABP_PlayerController_Script_C* Controller, bool ToggleMachineHud)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_FlameCheatManager_C", "MachineHud");

	Params::BP_FlameCheatManager_C_MachineHud Parms{};

	Parms.Controller = Controller;
	Parms.ToggleMachineHud = ToggleMachineHud;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_FlameCheatManager.BP_FlameCheatManager_C.3dDebug_ResourceItems
// (Private, BlueprintCallable, BlueprintEvent)
// Parameters:
// class ABP_PlayerController_Script_C*    Controller                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    Toggle3dDebugResourceItems                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void UBP_FlameCheatManager_C::ThreedDebug_ResourceItems(class ABP_PlayerController_Script_C* Controller, bool Toggle3dDebugResourceItems)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_FlameCheatManager_C", "3dDebug_ResourceItems");

	Params::BP_FlameCheatManager_C_ThreedDebug_ResourceItems Parms{};

	Parms.Controller = Controller;
	Parms.Toggle3dDebugResourceItems = Toggle3dDebugResourceItems;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_FlameCheatManager.BP_FlameCheatManager_C.3dDebug_ObjectiveItems
// (Private, BlueprintCallable, BlueprintEvent)
// Parameters:
// class ABP_PlayerController_Script_C*    Controller                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    Toggle3dDebugObjectiveItems                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void UBP_FlameCheatManager_C::ThreedDebug_ObjectiveItems(class ABP_PlayerController_Script_C* Controller, bool Toggle3dDebugObjectiveItems)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_FlameCheatManager_C", "3dDebug_ObjectiveItems");

	Params::BP_FlameCheatManager_C_ThreedDebug_ObjectiveItems Parms{};

	Parms.Controller = Controller;
	Parms.Toggle3dDebugObjectiveItems = Toggle3dDebugObjectiveItems;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_FlameCheatManager.BP_FlameCheatManager_C.3dDebug_ObjectiveSpawns
// (Private, BlueprintCallable, BlueprintEvent)
// Parameters:
// class ABP_PlayerController_Script_C*    Controller                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    Toggle3dDebugObjectiveSpawns                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void UBP_FlameCheatManager_C::ThreedDebug_ObjectiveSpawns(class ABP_PlayerController_Script_C* Controller, bool Toggle3dDebugObjectiveSpawns)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_FlameCheatManager_C", "3dDebug_ObjectiveSpawns");

	Params::BP_FlameCheatManager_C_ThreedDebug_ObjectiveSpawns Parms{};

	Parms.Controller = Controller;
	Parms.Toggle3dDebugObjectiveSpawns = Toggle3dDebugObjectiveSpawns;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_FlameCheatManager.BP_FlameCheatManager_C.3dDebug_SpawnedLoot
// (Private, BlueprintCallable, BlueprintEvent)
// Parameters:
// class ABP_PlayerController_Script_C*    Controller                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    Toggle3dDebugSpawnedLoot                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void UBP_FlameCheatManager_C::ThreedDebug_SpawnedLoot(class ABP_PlayerController_Script_C* Controller, bool Toggle3dDebugSpawnedLoot)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_FlameCheatManager_C", "3dDebug_SpawnedLoot");

	Params::BP_FlameCheatManager_C_ThreedDebug_SpawnedLoot Parms{};

	Parms.Controller = Controller;
	Parms.Toggle3dDebugSpawnedLoot = Toggle3dDebugSpawnedLoot;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_FlameCheatManager.BP_FlameCheatManager_C.3dDebug_LootSpawns
// (Private, BlueprintCallable, BlueprintEvent)
// Parameters:
// class ABP_PlayerController_Script_C*    Controller                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    Toggle3dDebugLootSpawns                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void UBP_FlameCheatManager_C::ThreedDebug_LootSpawns(class ABP_PlayerController_Script_C* Controller, bool Toggle3dDebugLootSpawns)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_FlameCheatManager_C", "3dDebug_LootSpawns");

	Params::BP_FlameCheatManager_C_ThreedDebug_LootSpawns Parms{};

	Parms.Controller = Controller;
	Parms.Toggle3dDebugLootSpawns = Toggle3dDebugLootSpawns;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_FlameCheatManager.BP_FlameCheatManager_C.3dDebug_PlayerStarts
// (Private, BlueprintCallable, BlueprintEvent)
// Parameters:
// class ABP_PlayerController_Script_C*    Controller                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    Toggle3dDebugPlayerStarts                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void UBP_FlameCheatManager_C::ThreedDebug_PlayerStarts(class ABP_PlayerController_Script_C* Controller, bool Toggle3dDebugPlayerStarts)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_FlameCheatManager_C", "3dDebug_PlayerStarts");

	Params::BP_FlameCheatManager_C_ThreedDebug_PlayerStarts Parms{};

	Parms.Controller = Controller;
	Parms.Toggle3dDebugPlayerStarts = Toggle3dDebugPlayerStarts;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_FlameCheatManager.BP_FlameCheatManager_C.3dDebug_Player
// (Private, BlueprintCallable, BlueprintEvent)
// Parameters:
// class ABP_PlayerController_Script_C*    Controller                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    Toggle3dDebugPlayer                                    (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void UBP_FlameCheatManager_C::ThreedDebug_Player(class ABP_PlayerController_Script_C* Controller, bool Toggle3dDebugPlayer)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_FlameCheatManager_C", "3dDebug_Player");

	Params::BP_FlameCheatManager_C_ThreedDebug_Player Parms{};

	Parms.Controller = Controller;
	Parms.Toggle3dDebugPlayer = Toggle3dDebugPlayer;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_FlameCheatManager.BP_FlameCheatManager_C.ToggleHitInfo
// (Private, BlueprintCallable, BlueprintEvent)
// Parameters:
// class ABP_PlayerController_Script_C*    Controller                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    HitInfo                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// class ABP_BulletManager_C*              BulletManager                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_FlameCheatManager_C::ToggleHitInfo(class ABP_PlayerController_Script_C* Controller, bool HitInfo, class ABP_BulletManager_C* BulletManager)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_FlameCheatManager_C", "ToggleHitInfo");

	Params::BP_FlameCheatManager_C_ToggleHitInfo Parms{};

	Parms.Controller = Controller;
	Parms.HitInfo = HitInfo;
	Parms.BulletManager = BulletManager;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_FlameCheatManager.BP_FlameCheatManager_C.TradeInResources
// (Private, BlueprintCallable, BlueprintEvent)
// Parameters:
// class ABP_PlayerController_Script_C*    Controller                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_FlameCheatManager_C::TradeInResources(class ABP_PlayerController_Script_C* Controller)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_FlameCheatManager_C", "TradeInResources");

	Params::BP_FlameCheatManager_C_TradeInResources Parms{};

	Parms.Controller = Controller;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_FlameCheatManager.BP_FlameCheatManager_C.RetreatAddResources
// (Private, BlueprintCallable, BlueprintEvent)
// Parameters:
// class ABP_PlayerController_Script_C*    Controller                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class UClass*                           Resource                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   Count                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_FlameCheatManager_C::RetreatAddResources(class ABP_PlayerController_Script_C* Controller, class UClass* Resource, int32 Count)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_FlameCheatManager_C", "RetreatAddResources");

	Params::BP_FlameCheatManager_C_RetreatAddResources Parms{};

	Parms.Controller = Controller;
	Parms.Resource = Resource;
	Parms.Count = Count;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_FlameCheatManager.BP_FlameCheatManager_C.VictoryAddPlayerLootbox
// (Private, BlueprintCallable, BlueprintEvent)
// Parameters:
// class ABP_PlayerController_Script_C*    Controller                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class UClass*                           Class_0                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   InInt                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_FlameCheatManager_C::VictoryAddPlayerLootbox(class ABP_PlayerController_Script_C* Controller, class UClass* Class_0, int32 InInt)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_FlameCheatManager_C", "VictoryAddPlayerLootbox");

	Params::BP_FlameCheatManager_C_VictoryAddPlayerLootbox Parms{};

	Parms.Controller = Controller;
	Parms.Class_0 = Class_0;
	Parms.InInt = InInt;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_FlameCheatManager.BP_FlameCheatManager_C.3dDebug_BlockingVolumes
// (Private, BlueprintCallable, BlueprintEvent)
// Parameters:
// class ABP_PlayerController_Script_C*    Controller                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    Toggle_3d_Debug_Blocking_Volumes                       (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void UBP_FlameCheatManager_C::ThreedDebug_BlockingVolumes(class ABP_PlayerController_Script_C* Controller, bool Toggle_3d_Debug_Blocking_Volumes)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_FlameCheatManager_C", "3dDebug_BlockingVolumes");

	Params::BP_FlameCheatManager_C_ThreedDebug_BlockingVolumes Parms{};

	Parms.Controller = Controller;
	Parms.Toggle_3d_Debug_Blocking_Volumes = Toggle_3d_Debug_Blocking_Volumes;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_FlameCheatManager.BP_FlameCheatManager_C.Set Infinite Bullets
// (Private, BlueprintCallable, BlueprintEvent)
// Parameters:
// class ABP_PlayerController_Script_C*    Controller                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    Infinite_Bullets                                       (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void UBP_FlameCheatManager_C::Set_Infinite_Bullets(class ABP_PlayerController_Script_C* Controller, bool Infinite_Bullets)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_FlameCheatManager_C", "Set Infinite Bullets");

	Params::BP_FlameCheatManager_C_Set_Infinite_Bullets Parms{};

	Parms.Controller = Controller;
	Parms.Infinite_Bullets = Infinite_Bullets;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_FlameCheatManager.BP_FlameCheatManager_C.AddShelterResourceElapsedTime
// (Private, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// int32                                   TimeToElapse                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// TArray<class ABP_ShelterImprovementBase_C*>Shelter_Improvements                                   (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
// class APlayerState*                     Player_State                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_FlameCheatManager_C::AddShelterResourceElapsedTime(int32 TimeToElapse, TArray<class ABP_ShelterImprovementBase_C*>& Shelter_Improvements, class APlayerState* Player_State)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_FlameCheatManager_C", "AddShelterResourceElapsedTime");

	Params::BP_FlameCheatManager_C_AddShelterResourceElapsedTime Parms{};

	Parms.TimeToElapse = TimeToElapse;
	Parms.Shelter_Improvements = std::move(Shelter_Improvements);
	Parms.Player_State = Player_State;

	UObject::ProcessEvent(Func, &Parms);

	Shelter_Improvements = std::move(Parms.Shelter_Improvements);
}


// Function BP_FlameCheatManager.BP_FlameCheatManager_C.ShowTracedActorDisplayName
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class ABP_PlayerController_Script_C*    Controller                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    ShowTracedActorDisplayName_0                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void UBP_FlameCheatManager_C::ShowTracedActorDisplayName(class ABP_PlayerController_Script_C* Controller, bool ShowTracedActorDisplayName_0)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_FlameCheatManager_C", "ShowTracedActorDisplayName");

	Params::BP_FlameCheatManager_C_ShowTracedActorDisplayName Parms{};

	Parms.Controller = Controller;
	Parms.ShowTracedActorDisplayName_0 = ShowTracedActorDisplayName_0;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_FlameCheatManager.BP_FlameCheatManager_C.EquipConsumable
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class ABP_PlayerController_C*           Controller                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class UClass*                           Consumable                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    UnEquip                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void UBP_FlameCheatManager_C::EquipConsumable(class ABP_PlayerController_C* Controller, class UClass* Consumable, bool UnEquip)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_FlameCheatManager_C", "EquipConsumable");

	Params::BP_FlameCheatManager_C_EquipConsumable Parms{};

	Parms.Controller = Controller;
	Parms.Consumable = Consumable;
	Parms.UnEquip = UnEquip;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_FlameCheatManager.BP_FlameCheatManager_C.ShowPlayerCount
// (Private, BlueprintCallable, BlueprintEvent)
// Parameters:
// class ABP_PlayerController_Script_C*    Controller                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    ToggleShowPlayerCount                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void UBP_FlameCheatManager_C::ShowPlayerCount(class ABP_PlayerController_Script_C* Controller, bool ToggleShowPlayerCount)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_FlameCheatManager_C", "ShowPlayerCount");

	Params::BP_FlameCheatManager_C_ShowPlayerCount Parms{};

	Parms.Controller = Controller;
	Parms.ToggleShowPlayerCount = ToggleShowPlayerCount;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_FlameCheatManager.BP_FlameCheatManager_C.Toggle Bullet Impact Material
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class ABP_PlayerController_Script_C*    Controller                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    ToggleBulletMaterialImpact                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void UBP_FlameCheatManager_C::Toggle_Bullet_Impact_Material(class ABP_PlayerController_Script_C* Controller, bool ToggleBulletMaterialImpact)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_FlameCheatManager_C", "Toggle Bullet Impact Material");

	Params::BP_FlameCheatManager_C_Toggle_Bullet_Impact_Material Parms{};

	Parms.Controller = Controller;
	Parms.ToggleBulletMaterialImpact = ToggleBulletMaterialImpact;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_FlameCheatManager.BP_FlameCheatManager_C.CreateTestingPawns
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// class ABP_PlayerController_Script_C*    Controller                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// TArray<class ABP_Character_Script_C*>   AllCharacters                                          (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)

void UBP_FlameCheatManager_C::CreateTestingPawns(class ABP_PlayerController_Script_C* Controller, TArray<class ABP_Character_Script_C*>& AllCharacters)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_FlameCheatManager_C", "CreateTestingPawns");

	Params::BP_FlameCheatManager_C_CreateTestingPawns Parms{};

	Parms.Controller = Controller;
	Parms.AllCharacters = std::move(AllCharacters);

	UObject::ProcessEvent(Func, &Parms);

	AllCharacters = std::move(Parms.AllCharacters);
}


// Function BP_FlameCheatManager.BP_FlameCheatManager_C.ToggleInfiniteSprint
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class ABP_PlayerController_Script_C*    Controller                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    NewInfiniteSprintState                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void UBP_FlameCheatManager_C::ToggleInfiniteSprint(class ABP_PlayerController_Script_C* Controller, bool NewInfiniteSprintState)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_FlameCheatManager_C", "ToggleInfiniteSprint");

	Params::BP_FlameCheatManager_C_ToggleInfiniteSprint Parms{};

	Parms.Controller = Controller;
	Parms.NewInfiniteSprintState = NewInfiniteSprintState;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_FlameCheatManager.BP_FlameCheatManager_C.SkipLobby
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// class ABP_PlayerController_Script_C*    Controller                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   TimeToEncounter                                        (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   TimeToLock                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_FlameCheatManager_C::SkipLobby(class ABP_PlayerController_Script_C* Controller, int32 TimeToEncounter, int32 TimeToLock)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_FlameCheatManager_C", "SkipLobby");

	Params::BP_FlameCheatManager_C_SkipLobby Parms{};

	Parms.Controller = Controller;
	Parms.TimeToEncounter = TimeToEncounter;
	Parms.TimeToLock = TimeToLock;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_FlameCheatManager.BP_FlameCheatManager_C.MarkSelfAsTester
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// class ABP_PlayerController_Script_C*    CheatingPC                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FLinearColor                     MarkerTint                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_FlameCheatManager_C::MarkSelfAsTester(class ABP_PlayerController_Script_C* CheatingPC, const struct FLinearColor& MarkerTint)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_FlameCheatManager_C", "MarkSelfAsTester");

	Params::BP_FlameCheatManager_C_MarkSelfAsTester Parms{};

	Parms.CheatingPC = CheatingPC;
	Parms.MarkerTint = std::move(MarkerTint);

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_FlameCheatManager.BP_FlameCheatManager_C.FastMovement
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class ABP_PlayerController_Script_C*    Controller                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   MaxWalkSpeed                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_FlameCheatManager_C::FastMovement(class ABP_PlayerController_Script_C* Controller, float MaxWalkSpeed)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_FlameCheatManager_C", "FastMovement");

	Params::BP_FlameCheatManager_C_FastMovement Parms{};

	Parms.Controller = Controller;
	Parms.MaxWalkSpeed = MaxWalkSpeed;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_FlameCheatManager.BP_FlameCheatManager_C.SetDevMode
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class ABP_PlayerController_Script_C*    Controller                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_FlameCheatManager_C::SetDevMode(class ABP_PlayerController_Script_C* Controller)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_FlameCheatManager_C", "SetDevMode");

	Params::BP_FlameCheatManager_C_SetDevMode Parms{};

	Parms.Controller = Controller;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_FlameCheatManager.BP_FlameCheatManager_C.BigJumps
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class ABP_PlayerController_Script_C*    Controller                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   NewJumpZVelocity                                       (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_FlameCheatManager_C::BigJumps(class ABP_PlayerController_Script_C* Controller, float NewJumpZVelocity)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_FlameCheatManager_C", "BigJumps");

	Params::BP_FlameCheatManager_C_BigJumps Parms{};

	Parms.Controller = Controller;
	Parms.NewJumpZVelocity = NewJumpZVelocity;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_FlameCheatManager.BP_FlameCheatManager_C.SkipTutorial
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class ABP_PlayerController_Script_C*    CheatingPlayer                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_FlameCheatManager_C::SkipTutorial(class ABP_PlayerController_Script_C* CheatingPlayer)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_FlameCheatManager_C", "SkipTutorial");

	Params::BP_FlameCheatManager_C_SkipTutorial Parms{};

	Parms.CheatingPlayer = CheatingPlayer;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_FlameCheatManager.BP_FlameCheatManager_C.GetLootData
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// class AActor*                           InputPin                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class AActor*                           Actor                                                  (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// TArray<class UClass*>                   Weapons                                                (Parm, OutParm)
// TArray<struct FBackpackItemSlot>        Items                                                  (Parm, OutParm)

void UBP_FlameCheatManager_C::GetLootData(class AActor* InputPin, class AActor** Actor, TArray<class UClass*>* Weapons, TArray<struct FBackpackItemSlot>* Items)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_FlameCheatManager_C", "GetLootData");

	Params::BP_FlameCheatManager_C_GetLootData Parms{};

	Parms.InputPin = InputPin;

	UObject::ProcessEvent(Func, &Parms);

	if (Actor != nullptr)
		*Actor = Parms.Actor;

	if (Weapons != nullptr)
		*Weapons = std::move(Parms.Weapons);

	if (Items != nullptr)
		*Items = std::move(Parms.Items);
}


// Function BP_FlameCheatManager.BP_FlameCheatManager_C.StartSpectating
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class ABP_PlayerController_Script_C*    Controller                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_FlameCheatManager_C::StartSpectating(class ABP_PlayerController_Script_C* Controller)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_FlameCheatManager_C", "StartSpectating");

	Params::BP_FlameCheatManager_C_StartSpectating Parms{};

	Parms.Controller = Controller;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_FlameCheatManager.BP_FlameCheatManager_C.Camera Free Look
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// class ABP_PlayerController_Script_C*    Controller                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_FlameCheatManager_C::Camera_Free_Look(class ABP_PlayerController_Script_C* Controller)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_FlameCheatManager_C", "Camera Free Look");

	Params::BP_FlameCheatManager_C_Camera_Free_Look Parms{};

	Parms.Controller = Controller;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_FlameCheatManager.BP_FlameCheatManager_C.Switch Fog of War
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class ABP_PlayerController_Script_C*    Controller                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_FlameCheatManager_C::Switch_Fog_of_War(class ABP_PlayerController_Script_C* Controller)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_FlameCheatManager_C", "Switch Fog of War");

	Params::BP_FlameCheatManager_C_Switch_Fog_of_War Parms{};

	Parms.Controller = Controller;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_FlameCheatManager.BP_FlameCheatManager_C.Execute command line cheat
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class FString                           Command                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)
// class ABP_PlayerController_Script_C*    Controller                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_FlameCheatManager_C::Execute_command_line_cheat(const class FString& Command, class ABP_PlayerController_Script_C* Controller)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_FlameCheatManager_C", "Execute command line cheat");

	Params::BP_FlameCheatManager_C_Execute_command_line_cheat Parms{};

	Parms.Command = std::move(Command);
	Parms.Controller = Controller;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_FlameCheatManager.BP_FlameCheatManager_C.Spawn All Loot Visualization Nodes
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)

void UBP_FlameCheatManager_C::Spawn_All_Loot_Visualization_Nodes()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_FlameCheatManager_C", "Spawn All Loot Visualization Nodes");

	UObject::ProcessEvent(Func, nullptr);
}

}

