#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_ADM_LockedContainer_Crate

#include "Basic.hpp"

#include "CoreUObject_structs.hpp"
#include "Engine_structs.hpp"
#include "BP_Lootable_Base_classes.hpp"


namespace SDK
{

// BlueprintGeneratedClass BP_ADM_LockedContainer_Crate.BP_ADM_LockedContainer_Crate_C
// 0x0050 (0x03F8 - 0x03A8)
class ABP_ADM_LockedContainer_Crate_C final : public ABP_Lootable_Base_C
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame_BP_ADM_LockedContainer_Crate_C;     // 0x03A8(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class UBP_Challenge_GrenadeHitComponent_C*    BP_Challenge_GrenadeHitComponent;                  // 0x03B0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UBoxComponent*                          Box;                                               // 0x03B8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UAudioComponent*                        Audio;                                             // 0x03C0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UBP_MapMarkerComponent_C*               BP_MapMarkerComponent;                             // 0x03C8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UBP_ADM_LockedContainer_GMComponent_C*  Owning_GMComponent;                                // 0x03D0(0x0008)(Edit, BlueprintVisible, Net, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Is_Convoy_Unlocked;                                // 0x03D8(0x0001)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_3D9[0x7];                                      // 0x03D9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FTransform>                     Lock_slots;                                        // 0x03E0(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	class ABP_ADM_LockedContainer_Container_C*    Container;                                         // 0x03F0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

public:
	void ExecuteUbergraph_BP_ADM_LockedContainer_Crate(int32 EntryPoint);
	void Enable_Interactions(bool Enabled);
	void Load_soft_sound_and_play(TSoftObjectPtr<class UObject> Soft_sound, float Fade_in_duration);
	void Server_Interaction_Start(class ABP_Character_C* Interacting_Character);
	void OnLoaded_303A9E7341428F48F05BE78ABC1F3608(class UObject* Loaded);
	void UserConstructionScript();
	void Generate_lock_slots_from_mesh_sockets(bool* Success);
	void Convoy_play_effects_broken();
	void Convoy_play_effects_unlocked();
	void Convoy_play_effects_all_locks_down();
	void Change_static_mesh_with_sockets(class UStaticMeshComponent* Replacement_static_mesh, bool* Success);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BP_ADM_LockedContainer_Crate_C">();
	}
	static class ABP_ADM_LockedContainer_Crate_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<ABP_ADM_LockedContainer_Crate_C>();
	}
};
static_assert(alignof(ABP_ADM_LockedContainer_Crate_C) == 0x000008, "Wrong alignment on ABP_ADM_LockedContainer_Crate_C");
static_assert(sizeof(ABP_ADM_LockedContainer_Crate_C) == 0x0003F8, "Wrong size on ABP_ADM_LockedContainer_Crate_C");
static_assert(offsetof(ABP_ADM_LockedContainer_Crate_C, UberGraphFrame_BP_ADM_LockedContainer_Crate_C) == 0x0003A8, "Member 'ABP_ADM_LockedContainer_Crate_C::UberGraphFrame_BP_ADM_LockedContainer_Crate_C' has a wrong offset!");
static_assert(offsetof(ABP_ADM_LockedContainer_Crate_C, BP_Challenge_GrenadeHitComponent) == 0x0003B0, "Member 'ABP_ADM_LockedContainer_Crate_C::BP_Challenge_GrenadeHitComponent' has a wrong offset!");
static_assert(offsetof(ABP_ADM_LockedContainer_Crate_C, Box) == 0x0003B8, "Member 'ABP_ADM_LockedContainer_Crate_C::Box' has a wrong offset!");
static_assert(offsetof(ABP_ADM_LockedContainer_Crate_C, Audio) == 0x0003C0, "Member 'ABP_ADM_LockedContainer_Crate_C::Audio' has a wrong offset!");
static_assert(offsetof(ABP_ADM_LockedContainer_Crate_C, BP_MapMarkerComponent) == 0x0003C8, "Member 'ABP_ADM_LockedContainer_Crate_C::BP_MapMarkerComponent' has a wrong offset!");
static_assert(offsetof(ABP_ADM_LockedContainer_Crate_C, Owning_GMComponent) == 0x0003D0, "Member 'ABP_ADM_LockedContainer_Crate_C::Owning_GMComponent' has a wrong offset!");
static_assert(offsetof(ABP_ADM_LockedContainer_Crate_C, Is_Convoy_Unlocked) == 0x0003D8, "Member 'ABP_ADM_LockedContainer_Crate_C::Is_Convoy_Unlocked' has a wrong offset!");
static_assert(offsetof(ABP_ADM_LockedContainer_Crate_C, Lock_slots) == 0x0003E0, "Member 'ABP_ADM_LockedContainer_Crate_C::Lock_slots' has a wrong offset!");
static_assert(offsetof(ABP_ADM_LockedContainer_Crate_C, Container) == 0x0003F0, "Member 'ABP_ADM_LockedContainer_Crate_C::Container' has a wrong offset!");

}

