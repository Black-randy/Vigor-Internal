#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_TVTDeathmatch_Box

#include "Basic.hpp"

#include "Flame_structs.hpp"
#include "Engine_structs.hpp"
#include "BP_Lootable_Base_classes.hpp"


namespace SDK
{

// BlueprintGeneratedClass BP_TVTDeathmatch_Box.BP_TVTDeathmatch_Box_C
// 0x00D8 (0x0480 - 0x03A8)
class ABP_TVTDeathmatch_Box_C final : public ABP_Lootable_Base_C
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame_BP_TVTDeathmatch_Box_C;             // 0x03A8(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	ECloudMatchLootboxType                        Box_Type;                                          // 0x03B0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3B1[0x7];                                      // 0x03B1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class ABP_TVTDeathmatch_Box_SpawnPoint_C*     Linked_lootbox_spawn_point;                        // 0x03B8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash)
	struct FCloudMatchLootbox                     LootboxDefinition;                                 // 0x03C0(0x0030)(Edit, BlueprintVisible, DisableEditOnInstance)
	class UClass*                                 Weapon_To_Store;                                   // 0x03F0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TMap<class UClass*, int32>                    Backpack_Items_To_Store;                           // 0x03F8(0x0050)(Edit, BlueprintVisible, DisableEditOnInstance)
	int32                                         Ammo_in_Magazine;                                  // 0x0448(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_44C[0x4];                                      // 0x044C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTimerHandle                           Swap_Destroy_Timer;                                // 0x0450(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	float                                         Time_To_Destroy_After_Swap;                        // 0x0458(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_45C[0x4];                                      // 0x045C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class ABP_Character_C*>                Players_Awarded_With_Score;                        // 0x0460(0x0010)(Edit, BlueprintVisible, DisableEditOnTemplate, DisableEditOnInstance)
	class UClass*                                 Loot;                                              // 0x0470(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         How_many_mags_spawn_with_weapon;                   // 0x0478(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         How_many_consumables_spawn;                        // 0x047C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

public:
	void ExecuteUbergraph_BP_TVTDeathmatch_Box(int32 EntryPoint);
	void BndEvt__BP_InteractionItemComponent_K2Node_ComponentBoundEvent_2_Interaction_Start_on_Server__DelegateSignature(class UInteractionItemComponent* Sender, class AActor* Interacting_Actor);
	void Swap_For_Weapon(class AWeapon* Swapped_Weapon, class ABP_PlayerController_TVTDeathmatch_C* Player_Controller);
	void Initialize_Box_from_spawn_point(ECloudMatchLootboxType Box_Type_0, const class UClass* Weapon_To_Store_0, int32 Ammo_in_Magazine_0, const TMap<class UClass*, int32>& Backpack_Items_To_Store_0);
	void Initialize_loot(class UClass* Loot_0);
	void Initialize_lootbox_from_game_mode(const struct FCloudMatchLootbox& LootboxDefinition_0);
	void BndEvt__BP_InteractionItemComponent_K2Node_ComponentBoundEvent_3_Interaction_End_on_Server__DelegateSignature(class UInteractionItemComponent* Sender, class AActor* Interacting_Actor);
	void BndEvt__LootStorage_K2Node_ComponentBoundEvent_1_OnRemovedBagItem__DelegateSignature(TSubclassOf<class AItemForBackpack> BagItemClass, int32 Count);
	void BndEvt__LootStorage_K2Node_ComponentBoundEvent_0_OnRemovedWeapon__DelegateSignature(class AWeapon* Weapon);
	void Set_Box_Type(ECloudMatchLootboxType New_Box_Type);
	void Interaction_Ammo(class ABP_Character_TVTDeathmatch_C* Character);
	void Interaction_Others(class ABP_Character_TVTDeathmatch_C* Character);
	void Interaction_Weapon(class ABP_Character_TVTDeathmatch_C* Character);
	void Get_Stored_Weapon_Slot_Type(EWeaponInventoryType* Slot_Type);
	void Get_Weapons_For_Swap(class ABP_Character_TVTDeathmatch_C* Character, class AWeapon** Weapon_A, class AWeapon** Weapon_X);
	void Swap_Weapons(class AWeapon* New_Swapped_Weapon, class ABP_PlayerController_TVTDeathmatch_C* Player_Controller);
	void Insert_Weapon_to_Invetory();
	void Insert_Resources_to_Invetory();
	void Insert_Weapon_To_Storage(class UClass* Weapon_Type, int32 Count);
	void InitializeLootFromCloud(const struct FCloudMatchLootbox& LootboxDefinition_0);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BP_TVTDeathmatch_Box_C">();
	}
	static class ABP_TVTDeathmatch_Box_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<ABP_TVTDeathmatch_Box_C>();
	}
};
static_assert(alignof(ABP_TVTDeathmatch_Box_C) == 0x000008, "Wrong alignment on ABP_TVTDeathmatch_Box_C");
static_assert(sizeof(ABP_TVTDeathmatch_Box_C) == 0x000480, "Wrong size on ABP_TVTDeathmatch_Box_C");
static_assert(offsetof(ABP_TVTDeathmatch_Box_C, UberGraphFrame_BP_TVTDeathmatch_Box_C) == 0x0003A8, "Member 'ABP_TVTDeathmatch_Box_C::UberGraphFrame_BP_TVTDeathmatch_Box_C' has a wrong offset!");
static_assert(offsetof(ABP_TVTDeathmatch_Box_C, Box_Type) == 0x0003B0, "Member 'ABP_TVTDeathmatch_Box_C::Box_Type' has a wrong offset!");
static_assert(offsetof(ABP_TVTDeathmatch_Box_C, Linked_lootbox_spawn_point) == 0x0003B8, "Member 'ABP_TVTDeathmatch_Box_C::Linked_lootbox_spawn_point' has a wrong offset!");
static_assert(offsetof(ABP_TVTDeathmatch_Box_C, LootboxDefinition) == 0x0003C0, "Member 'ABP_TVTDeathmatch_Box_C::LootboxDefinition' has a wrong offset!");
static_assert(offsetof(ABP_TVTDeathmatch_Box_C, Weapon_To_Store) == 0x0003F0, "Member 'ABP_TVTDeathmatch_Box_C::Weapon_To_Store' has a wrong offset!");
static_assert(offsetof(ABP_TVTDeathmatch_Box_C, Backpack_Items_To_Store) == 0x0003F8, "Member 'ABP_TVTDeathmatch_Box_C::Backpack_Items_To_Store' has a wrong offset!");
static_assert(offsetof(ABP_TVTDeathmatch_Box_C, Ammo_in_Magazine) == 0x000448, "Member 'ABP_TVTDeathmatch_Box_C::Ammo_in_Magazine' has a wrong offset!");
static_assert(offsetof(ABP_TVTDeathmatch_Box_C, Swap_Destroy_Timer) == 0x000450, "Member 'ABP_TVTDeathmatch_Box_C::Swap_Destroy_Timer' has a wrong offset!");
static_assert(offsetof(ABP_TVTDeathmatch_Box_C, Time_To_Destroy_After_Swap) == 0x000458, "Member 'ABP_TVTDeathmatch_Box_C::Time_To_Destroy_After_Swap' has a wrong offset!");
static_assert(offsetof(ABP_TVTDeathmatch_Box_C, Players_Awarded_With_Score) == 0x000460, "Member 'ABP_TVTDeathmatch_Box_C::Players_Awarded_With_Score' has a wrong offset!");
static_assert(offsetof(ABP_TVTDeathmatch_Box_C, Loot) == 0x000470, "Member 'ABP_TVTDeathmatch_Box_C::Loot' has a wrong offset!");
static_assert(offsetof(ABP_TVTDeathmatch_Box_C, How_many_mags_spawn_with_weapon) == 0x000478, "Member 'ABP_TVTDeathmatch_Box_C::How_many_mags_spawn_with_weapon' has a wrong offset!");
static_assert(offsetof(ABP_TVTDeathmatch_Box_C, How_many_consumables_spawn) == 0x00047C, "Member 'ABP_TVTDeathmatch_Box_C::How_many_consumables_spawn' has a wrong offset!");

}

