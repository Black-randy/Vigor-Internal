#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: UI_ZoomableLevelMap

#include "Basic.hpp"

#include "CoreUObject_structs.hpp"
#include "FlameUI_structs.hpp"
#include "S_CustomMapMarker_ContextUI_structs.hpp"
#include "Flame_structs.hpp"
#include "Flame_classes.hpp"
#include "Engine_structs.hpp"
#include "UMG_structs.hpp"
#include "SlateCore_structs.hpp"


namespace SDK
{

// WidgetBlueprintGeneratedClass UI_ZoomableLevelMap.UI_ZoomableLevelMap_C
// 0x0350 (0x0628 - 0x02D8)
class UUI_ZoomableLevelMap_C final : public UMenuWidget
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x02D8(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class UWidgetAnimation*                       BoosterInfo_FadeIn_LeftShoulder;                   // 0x02E0(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, RepSkip, NoDestructor, HasGetValueTypeHash)
	class UWidgetAnimation*                       BoosterInfo_FadeIn_RightShoulder;                  // 0x02E8(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, RepSkip, NoDestructor, HasGetValueTypeHash)
	class UWidgetAnimation*                       Map_FadeIn_LeftShoulder;                           // 0x02F0(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, RepSkip, NoDestructor, HasGetValueTypeHash)
	class UWidgetAnimation*                       BoostersList_FadeIn_LeftShoulder;                  // 0x02F8(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, RepSkip, NoDestructor, HasGetValueTypeHash)
	class UWidgetAnimation*                       BoostersList_FadeIn_RightShoulder;                 // 0x0300(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, RepSkip, NoDestructor, HasGetValueTypeHash)
	class UWidgetAnimation*                       Map_FadeIn_RightShoulder;                          // 0x0308(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, RepSkip, NoDestructor, HasGetValueTypeHash)
	class UUI_InputActionWidget_C*                ActionButton_Boosters_1;                           // 0x0310(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UOverlay*                               BackgroundShadowOverlay;                           // 0x0318(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UCanvasPanel*                           Canvas_BoosterFakeButton_Root;                     // 0x0320(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UCanvasPanel*                           CanvasPanel_0;                                     // 0x0328(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UCanvasPanel*                           CanvasPanel_Markers;                               // 0x0330(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UUI_InputActionWidget_C*                Close_Button;                                      // 0x0338(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UOverlay*                               ControlsOverlay;                                   // 0x0340(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UImage*                                 Crosshair;                                         // 0x0348(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UFlameTextBlock*                        FlameTextBlock_POI;                                // 0x0350(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UUI_MapTextureImage_C*                  FogOfWar;                                          // 0x0358(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UTextBlock*                             FoWWarning_Text;                                   // 0x0360(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UHorizontalBox*                         HorizontalBox_POIfound;                            // 0x0368(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UImage*                                 Image_0;                                           // 0x0370(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UImage*                                 Image_92;                                          // 0x0378(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UImage*                                 Image_MarkerShowcase;                              // 0x0380(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UInputIconImage*                        InputIconImage;                                    // 0x0388(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UInputIconImage*                        InputIconImage_113;                                // 0x0390(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UCanvasPanel*                           MapPositionAnchor;                                 // 0x0398(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UUI_MapTextureImage_C*                  MapUI;                                             // 0x03A0(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UOverlay*                               MiniMapOverlay;                                    // 0x03A8(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UOverlay*                               Overlay_BoostersInfo;                              // 0x03B0(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UImage*                                 RadiationWarning;                                  // 0x03B8(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UUI_FlameSafezone_C*                    UI_FlameSafezone;                                  // 0x03C0(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UUI_InputActionWidget_C*                UI_GamepadActionWidget;                            // 0x03C8(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UUI_InputActionWidget_C*                UI_GamepadActionWidget_1;                          // 0x03D0(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UUI_MapBoostersList_C*                  UI_MapBoostersList_1;                              // 0x03D8(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UUI_MapMarkerLabel_C*                   UI_MapMarkerLabel;                                 // 0x03E0(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UUI_InputActionWidget_C*                UI_PlaceMarkerAction;                              // 0x03E8(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UUI_InputActionWidget_C*                UI_PlaceMarkerAction2;                             // 0x03F0(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UImage*                                 WindDirection;                                     // 0x03F8(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	struct FLinearColor                           UVOffsets;                                         // 0x0400(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               CompassHelperRotation;                             // 0x0410(0x000C)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	struct FVector                                WorldMin;                                          // 0x041C(0x000C)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                WorldMax;                                          // 0x0428(0x000C)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsDeletingMarker;                                  // 0x0434(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_435[0x3];                                      // 0x0435(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         DeletingTolerance;                                 // 0x0438(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           CenteringOffsetA;                                  // 0x043C(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           CenteringOffsetB;                                  // 0x044C(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         TimeToCenter;                                      // 0x045C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         ElapsedTimeToCenter;                               // 0x0460(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsCenteringToActual;                               // 0x0464(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_465[0x3];                                      // 0x0465(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         MinZoom;                                           // 0x0468(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         MovementSpeed;                                     // 0x046C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           LowerMapZoomLimit;                                 // 0x0470(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           UpperMapZoomLimit;                                 // 0x0480(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          RadiationDebug;                                    // 0x0490(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_491[0x7];                                      // 0x0491(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class ABP_RadiationWave_C*>            RadiationWaves;                                    // 0x0498(0x0010)(Edit, BlueprintVisible, DisableEditOnTemplate, DisableEditOnInstance)
	struct FVector                                WorldMinOriginal;                                  // 0x04A8(0x000C)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                WorldMaxOriginal;                                  // 0x04B4(0x000C)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector2D                              LabelRelativeOffset;                               // 0x04C0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         AxisUpDown;                                        // 0x04C8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         AxisLeftRight;                                     // 0x04CC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<class APawn*>                          PlayersCharacters;                                 // 0x04D0(0x0010)(Edit, BlueprintVisible, DisableEditOnTemplate, DisableEditOnInstance)
	float                                         ZoomSpeed;                                         // 0x04E0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4E4[0x4];                                      // 0x04E4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class USoundBase*                             OpenMapSound;                                      // 0x04E8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash)
	struct FVector                                CursorLocation;                                    // 0x04F0(0x000C)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          MarkerFocused;                                     // 0x04FC(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_4FD[0x3];                                      // 0x04FD(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UTexture*                               MyMarkerTexture;                                   // 0x0500(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          AutoZoomIn;                                        // 0x0508(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          AutoZoomOut;                                       // 0x0509(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_50A[0x2];                                      // 0x050A(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         LastPinchValue;                                    // 0x050C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         NumClicks;                                         // 0x0510(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Panning;                                           // 0x0514(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_515[0x3];                                      // 0x0515(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         LastPointerX;                                      // 0x0518(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         LastPointerY;                                      // 0x051C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<float>                                 AxisUpDownReadings;                                // 0x0520(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	int32                                         AxisUpDownReadingsIndex;                           // 0x0530(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_534[0x4];                                      // 0x0534(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<float>                                 AxisLeftRightReadings;                             // 0x0538(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	TMap<class FName, struct FS_CustomMapMarker_ContextUI> CustomMapMarkers;                                  // 0x0548(0x0050)(Edit, BlueprintVisible, DisableEditOnInstance, ContainsInstancedReference)
	TArray<struct FS_CustomMapMarker_ContextUI>   PlayersMarkers;                                    // 0x0598(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance, ContainsInstancedReference)
	class UBP_POIManagerComponent_C*              POIManager;                                        // 0x05A8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         AxisLeftRightReadingsIndex;                        // 0x05B0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_5B4[0x4];                                      // 0x05B4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class ABP_MapTool_C*                          MapTool;                                           // 0x05B8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          PROTOTYPE_FoW_ACTIVE;                              // 0x05C0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          MapIsOnRight;                                      // 0x05C1(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_5C2[0x2];                                      // 0x05C2(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         OrderInGroup;                                      // 0x05C4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          ShouldDissappearInstantly;                         // 0x05C8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          ShouldDisplayBoosterInfo;                          // 0x05C9(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn)
	uint8                                         Pad_5CA[0x6];                                      // 0x05CA(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	TMap<ECursorMode, class UMaterial*>           CrosshairData;                                     // 0x05D0(0x0050)(Edit, BlueprintVisible, DisableEditOnInstance)
	float                                         ClickedTime;                                       // 0x0620(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CanAddRemoveCustomMarker;                          // 0x0624(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          IsGamepad;                                         // 0x0625(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)

public:
	void ExecuteUbergraph_UI_ZoomableLevelMap(int32 EntryPoint);
	void BndEvt__UI_ZoomableLevelMap_UI_PlaceMarkerAction2_K2Node_ComponentBoundEvent_4_OnActionPressedEvent__DelegateSignature();
	void InputModeChanged(int32 PlayerIndex, EInputMode InputMode);
	void CheckClick();
	void TriggerClick();
	void BndEvt__UI_GamepadActionWidget_1_K2Node_ComponentBoundEvent_1_OnActionPressedEvent__DelegateSignature();
	void BndEvt__UI_GamepadActionWidget_C_0_K2Node_ComponentBoundEvent_0_OnActionPressedEvent__DelegateSignature();
	void BndEvt__Close_Button_K2Node_ComponentBoundEvent_2_OnActionPressedEvent__DelegateSignature();
	void BndEvt__ActionButton_Boosters_1_K2Node_ComponentBoundEvent_1_OnActionPressedEvent__DelegateSignature();
	void SetBoosterDetailWidgetVIsibility(bool NewVisibility);
	void RemoveWidgetAfterAnimation();
	void CheckZoomButton();
	void SetSpecificZoomLimits(const struct FLinearColor& LowerMapZoomLimit_0, const struct FLinearColor& UpperMapZoomLimit_0);
	void Check_FoW_Prototype_Active();
	void ZoomDelay();
	void PreConstruct(bool IsDesignTime);
	void AddFadedMarker(const class FName MarkerTag, const struct FS_CustomMapMarker_Fade& MarkerInfo);
	void MouseWheelZoom(float AxisValue);
	void ToggleAutoZoom();
	void PinchZoom(float AxisValue);
	void StopPanning();
	void StartPanning();
	void OnGameMenu();
	void CenterActual();
	void NewMarker();
	void OnCloseMap();
	void RemoveMapMarkerByTag(class FName Tag);
	void AddMapMarker(class FName Tag, const struct FS_CustomMapMarker& Marker);
	void RemoveMapMarkers();
	void Zoom(float AxisValue);
	void LeftStickLeftRight(float AxisValue);
	void LeftStickUpDown(float AxisValue);
	void Tick(const struct FGeometry& MyGeometry, float InDeltaTime);
	void Construct();
	void Finished_A4ADECF543029FC0F96A46BB7836D444();
	void Finished_579A59464C8DF0B03CBB718D9C39DB83();
	void Finished_02BC51964E99BA91E549E19C633BA452();
	void OnLoaded_303A9E7341428F48F05BE78A3AFDD8BC(class UObject* Loaded);
	void GetPlayerPos(TArray<struct FS_CustomMapMarker_ContextUI>* ActivePlayersMarkers);
	void AddMarkerToMap(struct FS_CustomMapMarker& CustomMapMarkerIcon, class UImage* Image);
	void InitMap();
	void ResolveCustomMarkerButton();
	void LoadMarkers();
	void StartStopDeletingOneUserMarker();
	void CreateOneUserMarker();
	void MoveCursor();
	void SmoothCenterToPlayersposition();
	void StartSmoothCentering();
	void Refresh_Weather_Icons();
	void SetMarkerPosition(class UCanvasPanelSlot* Slot_0, const struct FVector& MarkerLocation, const struct FVector2D& MarkerSize);
	bool IsLocationFocused(float X, float Y, float ErrorTolerance, float* Distance);
	void Pixel2Meter(float Pixel, float* Meter);
	void Meter2Pixel(float Meter, float* Pixel);
	float IconSize2Tolerance(const struct FVector2D& InVec, bool IsRealWorldSize);
	void GetScaleForMarkers(float* Scale);
	void Radiation();
	void CreatePlayersMarkers();
	void CloseMap();
	void UpdatePositionsOfMarkersAndVisibilityOfLabel();
	void SelectCustomMarkerForTeams();
	void AutoZoom();
	void StopAutoZoom();
	void Pan();
	void GetCurrentPointerInfo(float* X, float* Y, bool* IsHoveringMap, bool* IsTouch, bool* IsTwoFingerTouch);
	void UpdateMarker(class UImage* ImageWidget, const struct FVector& Location, const struct FLinearColor& Tint, class UTexture* Image, const struct FVector2D& ImageSize, float Tilt, bool RealWorldSize);
	void FadeMarkers(class UCurveFloat* Curve, const struct FS_CustomMapMarker_ContextUI& Marker, float DeltaTime, class FName Tag);
	void UpdatePOI();
	void SetOnScreenPosition(class APlayerController* PlayerController);
	void Is_Marker_Visible(const struct FS_CustomMapMarker& Marker_Settings, bool* Visible);
	void Is_Marker_Jammed(const struct FS_CustomMapMarker& Marker, bool* Is_Jammed);
	void UpdateCrosshair(ECursorMode TargetCrosshair);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"UI_ZoomableLevelMap_C">();
	}
	static class UUI_ZoomableLevelMap_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UUI_ZoomableLevelMap_C>();
	}
};
static_assert(alignof(UUI_ZoomableLevelMap_C) == 0x000008, "Wrong alignment on UUI_ZoomableLevelMap_C");
static_assert(sizeof(UUI_ZoomableLevelMap_C) == 0x000628, "Wrong size on UUI_ZoomableLevelMap_C");
static_assert(offsetof(UUI_ZoomableLevelMap_C, UberGraphFrame) == 0x0002D8, "Member 'UUI_ZoomableLevelMap_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(UUI_ZoomableLevelMap_C, BoosterInfo_FadeIn_LeftShoulder) == 0x0002E0, "Member 'UUI_ZoomableLevelMap_C::BoosterInfo_FadeIn_LeftShoulder' has a wrong offset!");
static_assert(offsetof(UUI_ZoomableLevelMap_C, BoosterInfo_FadeIn_RightShoulder) == 0x0002E8, "Member 'UUI_ZoomableLevelMap_C::BoosterInfo_FadeIn_RightShoulder' has a wrong offset!");
static_assert(offsetof(UUI_ZoomableLevelMap_C, Map_FadeIn_LeftShoulder) == 0x0002F0, "Member 'UUI_ZoomableLevelMap_C::Map_FadeIn_LeftShoulder' has a wrong offset!");
static_assert(offsetof(UUI_ZoomableLevelMap_C, BoostersList_FadeIn_LeftShoulder) == 0x0002F8, "Member 'UUI_ZoomableLevelMap_C::BoostersList_FadeIn_LeftShoulder' has a wrong offset!");
static_assert(offsetof(UUI_ZoomableLevelMap_C, BoostersList_FadeIn_RightShoulder) == 0x000300, "Member 'UUI_ZoomableLevelMap_C::BoostersList_FadeIn_RightShoulder' has a wrong offset!");
static_assert(offsetof(UUI_ZoomableLevelMap_C, Map_FadeIn_RightShoulder) == 0x000308, "Member 'UUI_ZoomableLevelMap_C::Map_FadeIn_RightShoulder' has a wrong offset!");
static_assert(offsetof(UUI_ZoomableLevelMap_C, ActionButton_Boosters_1) == 0x000310, "Member 'UUI_ZoomableLevelMap_C::ActionButton_Boosters_1' has a wrong offset!");
static_assert(offsetof(UUI_ZoomableLevelMap_C, BackgroundShadowOverlay) == 0x000318, "Member 'UUI_ZoomableLevelMap_C::BackgroundShadowOverlay' has a wrong offset!");
static_assert(offsetof(UUI_ZoomableLevelMap_C, Canvas_BoosterFakeButton_Root) == 0x000320, "Member 'UUI_ZoomableLevelMap_C::Canvas_BoosterFakeButton_Root' has a wrong offset!");
static_assert(offsetof(UUI_ZoomableLevelMap_C, CanvasPanel_0) == 0x000328, "Member 'UUI_ZoomableLevelMap_C::CanvasPanel_0' has a wrong offset!");
static_assert(offsetof(UUI_ZoomableLevelMap_C, CanvasPanel_Markers) == 0x000330, "Member 'UUI_ZoomableLevelMap_C::CanvasPanel_Markers' has a wrong offset!");
static_assert(offsetof(UUI_ZoomableLevelMap_C, Close_Button) == 0x000338, "Member 'UUI_ZoomableLevelMap_C::Close_Button' has a wrong offset!");
static_assert(offsetof(UUI_ZoomableLevelMap_C, ControlsOverlay) == 0x000340, "Member 'UUI_ZoomableLevelMap_C::ControlsOverlay' has a wrong offset!");
static_assert(offsetof(UUI_ZoomableLevelMap_C, Crosshair) == 0x000348, "Member 'UUI_ZoomableLevelMap_C::Crosshair' has a wrong offset!");
static_assert(offsetof(UUI_ZoomableLevelMap_C, FlameTextBlock_POI) == 0x000350, "Member 'UUI_ZoomableLevelMap_C::FlameTextBlock_POI' has a wrong offset!");
static_assert(offsetof(UUI_ZoomableLevelMap_C, FogOfWar) == 0x000358, "Member 'UUI_ZoomableLevelMap_C::FogOfWar' has a wrong offset!");
static_assert(offsetof(UUI_ZoomableLevelMap_C, FoWWarning_Text) == 0x000360, "Member 'UUI_ZoomableLevelMap_C::FoWWarning_Text' has a wrong offset!");
static_assert(offsetof(UUI_ZoomableLevelMap_C, HorizontalBox_POIfound) == 0x000368, "Member 'UUI_ZoomableLevelMap_C::HorizontalBox_POIfound' has a wrong offset!");
static_assert(offsetof(UUI_ZoomableLevelMap_C, Image_0) == 0x000370, "Member 'UUI_ZoomableLevelMap_C::Image_0' has a wrong offset!");
static_assert(offsetof(UUI_ZoomableLevelMap_C, Image_92) == 0x000378, "Member 'UUI_ZoomableLevelMap_C::Image_92' has a wrong offset!");
static_assert(offsetof(UUI_ZoomableLevelMap_C, Image_MarkerShowcase) == 0x000380, "Member 'UUI_ZoomableLevelMap_C::Image_MarkerShowcase' has a wrong offset!");
static_assert(offsetof(UUI_ZoomableLevelMap_C, InputIconImage) == 0x000388, "Member 'UUI_ZoomableLevelMap_C::InputIconImage' has a wrong offset!");
static_assert(offsetof(UUI_ZoomableLevelMap_C, InputIconImage_113) == 0x000390, "Member 'UUI_ZoomableLevelMap_C::InputIconImage_113' has a wrong offset!");
static_assert(offsetof(UUI_ZoomableLevelMap_C, MapPositionAnchor) == 0x000398, "Member 'UUI_ZoomableLevelMap_C::MapPositionAnchor' has a wrong offset!");
static_assert(offsetof(UUI_ZoomableLevelMap_C, MapUI) == 0x0003A0, "Member 'UUI_ZoomableLevelMap_C::MapUI' has a wrong offset!");
static_assert(offsetof(UUI_ZoomableLevelMap_C, MiniMapOverlay) == 0x0003A8, "Member 'UUI_ZoomableLevelMap_C::MiniMapOverlay' has a wrong offset!");
static_assert(offsetof(UUI_ZoomableLevelMap_C, Overlay_BoostersInfo) == 0x0003B0, "Member 'UUI_ZoomableLevelMap_C::Overlay_BoostersInfo' has a wrong offset!");
static_assert(offsetof(UUI_ZoomableLevelMap_C, RadiationWarning) == 0x0003B8, "Member 'UUI_ZoomableLevelMap_C::RadiationWarning' has a wrong offset!");
static_assert(offsetof(UUI_ZoomableLevelMap_C, UI_FlameSafezone) == 0x0003C0, "Member 'UUI_ZoomableLevelMap_C::UI_FlameSafezone' has a wrong offset!");
static_assert(offsetof(UUI_ZoomableLevelMap_C, UI_GamepadActionWidget) == 0x0003C8, "Member 'UUI_ZoomableLevelMap_C::UI_GamepadActionWidget' has a wrong offset!");
static_assert(offsetof(UUI_ZoomableLevelMap_C, UI_GamepadActionWidget_1) == 0x0003D0, "Member 'UUI_ZoomableLevelMap_C::UI_GamepadActionWidget_1' has a wrong offset!");
static_assert(offsetof(UUI_ZoomableLevelMap_C, UI_MapBoostersList_1) == 0x0003D8, "Member 'UUI_ZoomableLevelMap_C::UI_MapBoostersList_1' has a wrong offset!");
static_assert(offsetof(UUI_ZoomableLevelMap_C, UI_MapMarkerLabel) == 0x0003E0, "Member 'UUI_ZoomableLevelMap_C::UI_MapMarkerLabel' has a wrong offset!");
static_assert(offsetof(UUI_ZoomableLevelMap_C, UI_PlaceMarkerAction) == 0x0003E8, "Member 'UUI_ZoomableLevelMap_C::UI_PlaceMarkerAction' has a wrong offset!");
static_assert(offsetof(UUI_ZoomableLevelMap_C, UI_PlaceMarkerAction2) == 0x0003F0, "Member 'UUI_ZoomableLevelMap_C::UI_PlaceMarkerAction2' has a wrong offset!");
static_assert(offsetof(UUI_ZoomableLevelMap_C, WindDirection) == 0x0003F8, "Member 'UUI_ZoomableLevelMap_C::WindDirection' has a wrong offset!");
static_assert(offsetof(UUI_ZoomableLevelMap_C, UVOffsets) == 0x000400, "Member 'UUI_ZoomableLevelMap_C::UVOffsets' has a wrong offset!");
static_assert(offsetof(UUI_ZoomableLevelMap_C, CompassHelperRotation) == 0x000410, "Member 'UUI_ZoomableLevelMap_C::CompassHelperRotation' has a wrong offset!");
static_assert(offsetof(UUI_ZoomableLevelMap_C, WorldMin) == 0x00041C, "Member 'UUI_ZoomableLevelMap_C::WorldMin' has a wrong offset!");
static_assert(offsetof(UUI_ZoomableLevelMap_C, WorldMax) == 0x000428, "Member 'UUI_ZoomableLevelMap_C::WorldMax' has a wrong offset!");
static_assert(offsetof(UUI_ZoomableLevelMap_C, IsDeletingMarker) == 0x000434, "Member 'UUI_ZoomableLevelMap_C::IsDeletingMarker' has a wrong offset!");
static_assert(offsetof(UUI_ZoomableLevelMap_C, DeletingTolerance) == 0x000438, "Member 'UUI_ZoomableLevelMap_C::DeletingTolerance' has a wrong offset!");
static_assert(offsetof(UUI_ZoomableLevelMap_C, CenteringOffsetA) == 0x00043C, "Member 'UUI_ZoomableLevelMap_C::CenteringOffsetA' has a wrong offset!");
static_assert(offsetof(UUI_ZoomableLevelMap_C, CenteringOffsetB) == 0x00044C, "Member 'UUI_ZoomableLevelMap_C::CenteringOffsetB' has a wrong offset!");
static_assert(offsetof(UUI_ZoomableLevelMap_C, TimeToCenter) == 0x00045C, "Member 'UUI_ZoomableLevelMap_C::TimeToCenter' has a wrong offset!");
static_assert(offsetof(UUI_ZoomableLevelMap_C, ElapsedTimeToCenter) == 0x000460, "Member 'UUI_ZoomableLevelMap_C::ElapsedTimeToCenter' has a wrong offset!");
static_assert(offsetof(UUI_ZoomableLevelMap_C, IsCenteringToActual) == 0x000464, "Member 'UUI_ZoomableLevelMap_C::IsCenteringToActual' has a wrong offset!");
static_assert(offsetof(UUI_ZoomableLevelMap_C, MinZoom) == 0x000468, "Member 'UUI_ZoomableLevelMap_C::MinZoom' has a wrong offset!");
static_assert(offsetof(UUI_ZoomableLevelMap_C, MovementSpeed) == 0x00046C, "Member 'UUI_ZoomableLevelMap_C::MovementSpeed' has a wrong offset!");
static_assert(offsetof(UUI_ZoomableLevelMap_C, LowerMapZoomLimit) == 0x000470, "Member 'UUI_ZoomableLevelMap_C::LowerMapZoomLimit' has a wrong offset!");
static_assert(offsetof(UUI_ZoomableLevelMap_C, UpperMapZoomLimit) == 0x000480, "Member 'UUI_ZoomableLevelMap_C::UpperMapZoomLimit' has a wrong offset!");
static_assert(offsetof(UUI_ZoomableLevelMap_C, RadiationDebug) == 0x000490, "Member 'UUI_ZoomableLevelMap_C::RadiationDebug' has a wrong offset!");
static_assert(offsetof(UUI_ZoomableLevelMap_C, RadiationWaves) == 0x000498, "Member 'UUI_ZoomableLevelMap_C::RadiationWaves' has a wrong offset!");
static_assert(offsetof(UUI_ZoomableLevelMap_C, WorldMinOriginal) == 0x0004A8, "Member 'UUI_ZoomableLevelMap_C::WorldMinOriginal' has a wrong offset!");
static_assert(offsetof(UUI_ZoomableLevelMap_C, WorldMaxOriginal) == 0x0004B4, "Member 'UUI_ZoomableLevelMap_C::WorldMaxOriginal' has a wrong offset!");
static_assert(offsetof(UUI_ZoomableLevelMap_C, LabelRelativeOffset) == 0x0004C0, "Member 'UUI_ZoomableLevelMap_C::LabelRelativeOffset' has a wrong offset!");
static_assert(offsetof(UUI_ZoomableLevelMap_C, AxisUpDown) == 0x0004C8, "Member 'UUI_ZoomableLevelMap_C::AxisUpDown' has a wrong offset!");
static_assert(offsetof(UUI_ZoomableLevelMap_C, AxisLeftRight) == 0x0004CC, "Member 'UUI_ZoomableLevelMap_C::AxisLeftRight' has a wrong offset!");
static_assert(offsetof(UUI_ZoomableLevelMap_C, PlayersCharacters) == 0x0004D0, "Member 'UUI_ZoomableLevelMap_C::PlayersCharacters' has a wrong offset!");
static_assert(offsetof(UUI_ZoomableLevelMap_C, ZoomSpeed) == 0x0004E0, "Member 'UUI_ZoomableLevelMap_C::ZoomSpeed' has a wrong offset!");
static_assert(offsetof(UUI_ZoomableLevelMap_C, OpenMapSound) == 0x0004E8, "Member 'UUI_ZoomableLevelMap_C::OpenMapSound' has a wrong offset!");
static_assert(offsetof(UUI_ZoomableLevelMap_C, CursorLocation) == 0x0004F0, "Member 'UUI_ZoomableLevelMap_C::CursorLocation' has a wrong offset!");
static_assert(offsetof(UUI_ZoomableLevelMap_C, MarkerFocused) == 0x0004FC, "Member 'UUI_ZoomableLevelMap_C::MarkerFocused' has a wrong offset!");
static_assert(offsetof(UUI_ZoomableLevelMap_C, MyMarkerTexture) == 0x000500, "Member 'UUI_ZoomableLevelMap_C::MyMarkerTexture' has a wrong offset!");
static_assert(offsetof(UUI_ZoomableLevelMap_C, AutoZoomIn) == 0x000508, "Member 'UUI_ZoomableLevelMap_C::AutoZoomIn' has a wrong offset!");
static_assert(offsetof(UUI_ZoomableLevelMap_C, AutoZoomOut) == 0x000509, "Member 'UUI_ZoomableLevelMap_C::AutoZoomOut' has a wrong offset!");
static_assert(offsetof(UUI_ZoomableLevelMap_C, LastPinchValue) == 0x00050C, "Member 'UUI_ZoomableLevelMap_C::LastPinchValue' has a wrong offset!");
static_assert(offsetof(UUI_ZoomableLevelMap_C, NumClicks) == 0x000510, "Member 'UUI_ZoomableLevelMap_C::NumClicks' has a wrong offset!");
static_assert(offsetof(UUI_ZoomableLevelMap_C, Panning) == 0x000514, "Member 'UUI_ZoomableLevelMap_C::Panning' has a wrong offset!");
static_assert(offsetof(UUI_ZoomableLevelMap_C, LastPointerX) == 0x000518, "Member 'UUI_ZoomableLevelMap_C::LastPointerX' has a wrong offset!");
static_assert(offsetof(UUI_ZoomableLevelMap_C, LastPointerY) == 0x00051C, "Member 'UUI_ZoomableLevelMap_C::LastPointerY' has a wrong offset!");
static_assert(offsetof(UUI_ZoomableLevelMap_C, AxisUpDownReadings) == 0x000520, "Member 'UUI_ZoomableLevelMap_C::AxisUpDownReadings' has a wrong offset!");
static_assert(offsetof(UUI_ZoomableLevelMap_C, AxisUpDownReadingsIndex) == 0x000530, "Member 'UUI_ZoomableLevelMap_C::AxisUpDownReadingsIndex' has a wrong offset!");
static_assert(offsetof(UUI_ZoomableLevelMap_C, AxisLeftRightReadings) == 0x000538, "Member 'UUI_ZoomableLevelMap_C::AxisLeftRightReadings' has a wrong offset!");
static_assert(offsetof(UUI_ZoomableLevelMap_C, CustomMapMarkers) == 0x000548, "Member 'UUI_ZoomableLevelMap_C::CustomMapMarkers' has a wrong offset!");
static_assert(offsetof(UUI_ZoomableLevelMap_C, PlayersMarkers) == 0x000598, "Member 'UUI_ZoomableLevelMap_C::PlayersMarkers' has a wrong offset!");
static_assert(offsetof(UUI_ZoomableLevelMap_C, POIManager) == 0x0005A8, "Member 'UUI_ZoomableLevelMap_C::POIManager' has a wrong offset!");
static_assert(offsetof(UUI_ZoomableLevelMap_C, AxisLeftRightReadingsIndex) == 0x0005B0, "Member 'UUI_ZoomableLevelMap_C::AxisLeftRightReadingsIndex' has a wrong offset!");
static_assert(offsetof(UUI_ZoomableLevelMap_C, MapTool) == 0x0005B8, "Member 'UUI_ZoomableLevelMap_C::MapTool' has a wrong offset!");
static_assert(offsetof(UUI_ZoomableLevelMap_C, PROTOTYPE_FoW_ACTIVE) == 0x0005C0, "Member 'UUI_ZoomableLevelMap_C::PROTOTYPE_FoW_ACTIVE' has a wrong offset!");
static_assert(offsetof(UUI_ZoomableLevelMap_C, MapIsOnRight) == 0x0005C1, "Member 'UUI_ZoomableLevelMap_C::MapIsOnRight' has a wrong offset!");
static_assert(offsetof(UUI_ZoomableLevelMap_C, OrderInGroup) == 0x0005C4, "Member 'UUI_ZoomableLevelMap_C::OrderInGroup' has a wrong offset!");
static_assert(offsetof(UUI_ZoomableLevelMap_C, ShouldDissappearInstantly) == 0x0005C8, "Member 'UUI_ZoomableLevelMap_C::ShouldDissappearInstantly' has a wrong offset!");
static_assert(offsetof(UUI_ZoomableLevelMap_C, ShouldDisplayBoosterInfo) == 0x0005C9, "Member 'UUI_ZoomableLevelMap_C::ShouldDisplayBoosterInfo' has a wrong offset!");
static_assert(offsetof(UUI_ZoomableLevelMap_C, CrosshairData) == 0x0005D0, "Member 'UUI_ZoomableLevelMap_C::CrosshairData' has a wrong offset!");
static_assert(offsetof(UUI_ZoomableLevelMap_C, ClickedTime) == 0x000620, "Member 'UUI_ZoomableLevelMap_C::ClickedTime' has a wrong offset!");
static_assert(offsetof(UUI_ZoomableLevelMap_C, CanAddRemoveCustomMarker) == 0x000624, "Member 'UUI_ZoomableLevelMap_C::CanAddRemoveCustomMarker' has a wrong offset!");
static_assert(offsetof(UUI_ZoomableLevelMap_C, IsGamepad) == 0x000625, "Member 'UUI_ZoomableLevelMap_C::IsGamepad' has a wrong offset!");

}

