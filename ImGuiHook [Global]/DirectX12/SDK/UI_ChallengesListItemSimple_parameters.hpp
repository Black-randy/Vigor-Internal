#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: UI_ChallengesListItemSimple

#include "Basic.hpp"

#include "E_ChallengeSlotState_structs.hpp"
#include "SlateCore_structs.hpp"
#include "Engine_structs.hpp"
#include "Flame_structs.hpp"
#include "E_ChallengeManagerState_structs.hpp"
#include "CoreUObject_structs.hpp"


namespace SDK::Params
{

// Function UI_ChallengesListItemSimple.UI_ChallengesListItemSimple_C.ExecuteUbergraph_UI_ChallengesListItemSimple
// 0x0038 (0x0038 - 0x0000)
struct UI_ChallengesListItemSimple_C_ExecuteUbergraph_UI_ChallengesListItemSimple final
{
public:
	int32                                         EntryPoint;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class AChallengeManager*                      CallFunc_GetChallengeManager_ReturnValue;          // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class ABP_ChallengeManager_C*                 K2Node_DynamicCast_AsBP_Challenge_Manager;         // 0x0018(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0020(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	E_ChallengeManagerState                       CallFunc_Get_Challenge_Manager_State_State;        // 0x0021(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue;          // 0x0022(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_23[0x1];                                       // 0x0023(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	TDelegate<void()>                             K2Node_CreateDelegate_OutputDelegate;              // 0x0024(0x0010)(ZeroConstructor, NoDestructor)
};
static_assert(alignof(UI_ChallengesListItemSimple_C_ExecuteUbergraph_UI_ChallengesListItemSimple) == 0x000008, "Wrong alignment on UI_ChallengesListItemSimple_C_ExecuteUbergraph_UI_ChallengesListItemSimple");
static_assert(sizeof(UI_ChallengesListItemSimple_C_ExecuteUbergraph_UI_ChallengesListItemSimple) == 0x000038, "Wrong size on UI_ChallengesListItemSimple_C_ExecuteUbergraph_UI_ChallengesListItemSimple");
static_assert(offsetof(UI_ChallengesListItemSimple_C_ExecuteUbergraph_UI_ChallengesListItemSimple, EntryPoint) == 0x000000, "Member 'UI_ChallengesListItemSimple_C_ExecuteUbergraph_UI_ChallengesListItemSimple::EntryPoint' has a wrong offset!");
static_assert(offsetof(UI_ChallengesListItemSimple_C_ExecuteUbergraph_UI_ChallengesListItemSimple, CallFunc_GetChallengeManager_ReturnValue) == 0x000008, "Member 'UI_ChallengesListItemSimple_C_ExecuteUbergraph_UI_ChallengesListItemSimple::CallFunc_GetChallengeManager_ReturnValue' has a wrong offset!");
static_assert(offsetof(UI_ChallengesListItemSimple_C_ExecuteUbergraph_UI_ChallengesListItemSimple, CallFunc_IsValid_ReturnValue) == 0x000010, "Member 'UI_ChallengesListItemSimple_C_ExecuteUbergraph_UI_ChallengesListItemSimple::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(UI_ChallengesListItemSimple_C_ExecuteUbergraph_UI_ChallengesListItemSimple, K2Node_DynamicCast_AsBP_Challenge_Manager) == 0x000018, "Member 'UI_ChallengesListItemSimple_C_ExecuteUbergraph_UI_ChallengesListItemSimple::K2Node_DynamicCast_AsBP_Challenge_Manager' has a wrong offset!");
static_assert(offsetof(UI_ChallengesListItemSimple_C_ExecuteUbergraph_UI_ChallengesListItemSimple, K2Node_DynamicCast_bSuccess) == 0x000020, "Member 'UI_ChallengesListItemSimple_C_ExecuteUbergraph_UI_ChallengesListItemSimple::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(UI_ChallengesListItemSimple_C_ExecuteUbergraph_UI_ChallengesListItemSimple, CallFunc_Get_Challenge_Manager_State_State) == 0x000021, "Member 'UI_ChallengesListItemSimple_C_ExecuteUbergraph_UI_ChallengesListItemSimple::CallFunc_Get_Challenge_Manager_State_State' has a wrong offset!");
static_assert(offsetof(UI_ChallengesListItemSimple_C_ExecuteUbergraph_UI_ChallengesListItemSimple, CallFunc_EqualEqual_ByteByte_ReturnValue) == 0x000022, "Member 'UI_ChallengesListItemSimple_C_ExecuteUbergraph_UI_ChallengesListItemSimple::CallFunc_EqualEqual_ByteByte_ReturnValue' has a wrong offset!");
static_assert(offsetof(UI_ChallengesListItemSimple_C_ExecuteUbergraph_UI_ChallengesListItemSimple, K2Node_CreateDelegate_OutputDelegate) == 0x000024, "Member 'UI_ChallengesListItemSimple_C_ExecuteUbergraph_UI_ChallengesListItemSimple::K2Node_CreateDelegate_OutputDelegate' has a wrong offset!");

// Function UI_ChallengesListItemSimple.UI_ChallengesListItemSimple_C.GetRemainingTime
// 0x0048 (0x0048 - 0x0000)
struct UI_ChallengesListItemSimple_C_GetRemainingTime final
{
public:
	struct FDateTime                              Time;                                              // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class FText                                   RemainingTime;                                     // 0x0008(0x0018)(Parm, OutParm)
	struct FDateTime                              CallFunc_GetCloudTime_ReturnValue;                 // 0x0020(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	struct FTimespan                              CallFunc_Subtract_DateTimeDateTime_ReturnValue;    // 0x0028(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class FText                                   CallFunc_FormatTimespanDHMS_ZeroClamped__TimespanDHMSOut; // 0x0030(0x0018)()
};
static_assert(alignof(UI_ChallengesListItemSimple_C_GetRemainingTime) == 0x000008, "Wrong alignment on UI_ChallengesListItemSimple_C_GetRemainingTime");
static_assert(sizeof(UI_ChallengesListItemSimple_C_GetRemainingTime) == 0x000048, "Wrong size on UI_ChallengesListItemSimple_C_GetRemainingTime");
static_assert(offsetof(UI_ChallengesListItemSimple_C_GetRemainingTime, Time) == 0x000000, "Member 'UI_ChallengesListItemSimple_C_GetRemainingTime::Time' has a wrong offset!");
static_assert(offsetof(UI_ChallengesListItemSimple_C_GetRemainingTime, RemainingTime) == 0x000008, "Member 'UI_ChallengesListItemSimple_C_GetRemainingTime::RemainingTime' has a wrong offset!");
static_assert(offsetof(UI_ChallengesListItemSimple_C_GetRemainingTime, CallFunc_GetCloudTime_ReturnValue) == 0x000020, "Member 'UI_ChallengesListItemSimple_C_GetRemainingTime::CallFunc_GetCloudTime_ReturnValue' has a wrong offset!");
static_assert(offsetof(UI_ChallengesListItemSimple_C_GetRemainingTime, CallFunc_Subtract_DateTimeDateTime_ReturnValue) == 0x000028, "Member 'UI_ChallengesListItemSimple_C_GetRemainingTime::CallFunc_Subtract_DateTimeDateTime_ReturnValue' has a wrong offset!");
static_assert(offsetof(UI_ChallengesListItemSimple_C_GetRemainingTime, CallFunc_FormatTimespanDHMS_ZeroClamped__TimespanDHMSOut) == 0x000030, "Member 'UI_ChallengesListItemSimple_C_GetRemainingTime::CallFunc_FormatTimespanDHMS_ZeroClamped__TimespanDHMSOut' has a wrong offset!");

// Function UI_ChallengesListItemSimple.UI_ChallengesListItemSimple_C.UpdateChallengeState
// 0x0230 (0x0230 - 0x0000)
struct UI_ChallengesListItemSimple_C_UpdateChallengeState final
{
public:
	class ABP_ChallengeSlot_C*                    ChallengeSlotIn;                                   // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsChallengeActive;                                 // 0x0008(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	E_ChallengeSlotState                          Temp_byte_Variable;                                // 0x0009(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	E_ChallengeSlotState                          CallFunc_Get_Slot_State_Slot_State;                // 0x000A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable;                                // 0x000B(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable_1;                              // 0x000C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable_2;                              // 0x000D(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable_3;                              // 0x000E(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable_4;                              // 0x000F(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable_5;                              // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable_6;                              // 0x0011(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_Select_Default;                             // 0x0012(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0013(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue_1;                    // 0x0014(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_15[0x3];                                       // 0x0015(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 CallFunc_ToLower_ReturnValue;                      // 0x0018(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_StrStr_ReturnValue;            // 0x0028(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_EqualEqual_StrStr_ReturnValue_1;          // 0x0029(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_EqualEqual_StrStr_ReturnValue_2;          // 0x002A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_2B[0x5];                                       // 0x002B(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSlateColor                            K2Node_MakeStruct_SlateColor;                      // 0x0030(0x0028)()
	class FText                                   Temp_text_Variable;                                // 0x0058(0x0018)()
	E_ChallengeSlotState                          CallFunc_Get_Slot_State_Slot_State_1;              // 0x0070(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable_7;                              // 0x0071(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue;          // 0x0072(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_73[0x5];                                       // 0x0073(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   CallFunc_Get_Condition_Text_Condition_Text;        // 0x0078(0x0018)()
	EChallengeCategory                            CallFunc_Get_Challenge_Category_Category;          // 0x0090(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue_1;        // 0x0091(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_92[0x6];                                       // 0x0092(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   Temp_text_Variable_1;                              // 0x0098(0x0018)()
	bool                                          Temp_bool_Variable_8;                              // 0x00B0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_B1[0x7];                                       // 0x00B1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   Temp_text_Variable_2;                              // 0x00B8(0x0018)()
	class FText                                   CallFunc_Get_Title_Text_Title_Text;                // 0x00D0(0x0018)()
	int32                                         CallFunc_Get_Maximum_Progress_Maximum_Progress;    // 0x00E8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Get_Current_Progress_Current_Progress;    // 0x00EC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FFormatArgumentData                    K2Node_MakeStruct_FormatArgumentData;              // 0x00F0(0x0040)(HasGetValueTypeHash)
	struct FFormatArgumentData                    K2Node_MakeStruct_FormatArgumentData_1;            // 0x0130(0x0040)(HasGetValueTypeHash)
	TArray<struct FFormatArgumentData>            K2Node_MakeArray_Array;                            // 0x0170(0x0010)(ReferenceParm)
	TArray<struct FFormatArgumentData>            K2Node_MakeArray_Array_1;                          // 0x0180(0x0010)(ReferenceParm)
	class FText                                   CallFunc_Format_ReturnValue;                       // 0x0190(0x0018)()
	class FText                                   CallFunc_Format_ReturnValue_1;                     // 0x01A8(0x0018)()
	float                                         CallFunc_Conv_IntToFloat_ReturnValue;              // 0x01C0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Conv_IntToFloat_ReturnValue_1;            // 0x01C4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FText                                   Temp_text_Variable_3;                              // 0x01C8(0x0018)()
	float                                         CallFunc_Divide_FloatFloat_ReturnValue;            // 0x01E0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1E4[0x4];                                      // 0x01E4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   K2Node_Select_Default_1;                           // 0x01E8(0x0018)()
	class FText                                   K2Node_Select_Default_2;                           // 0x0200(0x0018)()
	class FText                                   K2Node_Select_Default_3;                           // 0x0218(0x0018)()
};
static_assert(alignof(UI_ChallengesListItemSimple_C_UpdateChallengeState) == 0x000008, "Wrong alignment on UI_ChallengesListItemSimple_C_UpdateChallengeState");
static_assert(sizeof(UI_ChallengesListItemSimple_C_UpdateChallengeState) == 0x000230, "Wrong size on UI_ChallengesListItemSimple_C_UpdateChallengeState");
static_assert(offsetof(UI_ChallengesListItemSimple_C_UpdateChallengeState, ChallengeSlotIn) == 0x000000, "Member 'UI_ChallengesListItemSimple_C_UpdateChallengeState::ChallengeSlotIn' has a wrong offset!");
static_assert(offsetof(UI_ChallengesListItemSimple_C_UpdateChallengeState, IsChallengeActive) == 0x000008, "Member 'UI_ChallengesListItemSimple_C_UpdateChallengeState::IsChallengeActive' has a wrong offset!");
static_assert(offsetof(UI_ChallengesListItemSimple_C_UpdateChallengeState, Temp_byte_Variable) == 0x000009, "Member 'UI_ChallengesListItemSimple_C_UpdateChallengeState::Temp_byte_Variable' has a wrong offset!");
static_assert(offsetof(UI_ChallengesListItemSimple_C_UpdateChallengeState, CallFunc_Get_Slot_State_Slot_State) == 0x00000A, "Member 'UI_ChallengesListItemSimple_C_UpdateChallengeState::CallFunc_Get_Slot_State_Slot_State' has a wrong offset!");
static_assert(offsetof(UI_ChallengesListItemSimple_C_UpdateChallengeState, Temp_bool_Variable) == 0x00000B, "Member 'UI_ChallengesListItemSimple_C_UpdateChallengeState::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(UI_ChallengesListItemSimple_C_UpdateChallengeState, Temp_bool_Variable_1) == 0x00000C, "Member 'UI_ChallengesListItemSimple_C_UpdateChallengeState::Temp_bool_Variable_1' has a wrong offset!");
static_assert(offsetof(UI_ChallengesListItemSimple_C_UpdateChallengeState, Temp_bool_Variable_2) == 0x00000D, "Member 'UI_ChallengesListItemSimple_C_UpdateChallengeState::Temp_bool_Variable_2' has a wrong offset!");
static_assert(offsetof(UI_ChallengesListItemSimple_C_UpdateChallengeState, Temp_bool_Variable_3) == 0x00000E, "Member 'UI_ChallengesListItemSimple_C_UpdateChallengeState::Temp_bool_Variable_3' has a wrong offset!");
static_assert(offsetof(UI_ChallengesListItemSimple_C_UpdateChallengeState, Temp_bool_Variable_4) == 0x00000F, "Member 'UI_ChallengesListItemSimple_C_UpdateChallengeState::Temp_bool_Variable_4' has a wrong offset!");
static_assert(offsetof(UI_ChallengesListItemSimple_C_UpdateChallengeState, Temp_bool_Variable_5) == 0x000010, "Member 'UI_ChallengesListItemSimple_C_UpdateChallengeState::Temp_bool_Variable_5' has a wrong offset!");
static_assert(offsetof(UI_ChallengesListItemSimple_C_UpdateChallengeState, Temp_bool_Variable_6) == 0x000011, "Member 'UI_ChallengesListItemSimple_C_UpdateChallengeState::Temp_bool_Variable_6' has a wrong offset!");
static_assert(offsetof(UI_ChallengesListItemSimple_C_UpdateChallengeState, K2Node_Select_Default) == 0x000012, "Member 'UI_ChallengesListItemSimple_C_UpdateChallengeState::K2Node_Select_Default' has a wrong offset!");
static_assert(offsetof(UI_ChallengesListItemSimple_C_UpdateChallengeState, CallFunc_IsValid_ReturnValue) == 0x000013, "Member 'UI_ChallengesListItemSimple_C_UpdateChallengeState::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(UI_ChallengesListItemSimple_C_UpdateChallengeState, CallFunc_IsValid_ReturnValue_1) == 0x000014, "Member 'UI_ChallengesListItemSimple_C_UpdateChallengeState::CallFunc_IsValid_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(UI_ChallengesListItemSimple_C_UpdateChallengeState, CallFunc_ToLower_ReturnValue) == 0x000018, "Member 'UI_ChallengesListItemSimple_C_UpdateChallengeState::CallFunc_ToLower_ReturnValue' has a wrong offset!");
static_assert(offsetof(UI_ChallengesListItemSimple_C_UpdateChallengeState, CallFunc_EqualEqual_StrStr_ReturnValue) == 0x000028, "Member 'UI_ChallengesListItemSimple_C_UpdateChallengeState::CallFunc_EqualEqual_StrStr_ReturnValue' has a wrong offset!");
static_assert(offsetof(UI_ChallengesListItemSimple_C_UpdateChallengeState, CallFunc_EqualEqual_StrStr_ReturnValue_1) == 0x000029, "Member 'UI_ChallengesListItemSimple_C_UpdateChallengeState::CallFunc_EqualEqual_StrStr_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(UI_ChallengesListItemSimple_C_UpdateChallengeState, CallFunc_EqualEqual_StrStr_ReturnValue_2) == 0x00002A, "Member 'UI_ChallengesListItemSimple_C_UpdateChallengeState::CallFunc_EqualEqual_StrStr_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(UI_ChallengesListItemSimple_C_UpdateChallengeState, K2Node_MakeStruct_SlateColor) == 0x000030, "Member 'UI_ChallengesListItemSimple_C_UpdateChallengeState::K2Node_MakeStruct_SlateColor' has a wrong offset!");
static_assert(offsetof(UI_ChallengesListItemSimple_C_UpdateChallengeState, Temp_text_Variable) == 0x000058, "Member 'UI_ChallengesListItemSimple_C_UpdateChallengeState::Temp_text_Variable' has a wrong offset!");
static_assert(offsetof(UI_ChallengesListItemSimple_C_UpdateChallengeState, CallFunc_Get_Slot_State_Slot_State_1) == 0x000070, "Member 'UI_ChallengesListItemSimple_C_UpdateChallengeState::CallFunc_Get_Slot_State_Slot_State_1' has a wrong offset!");
static_assert(offsetof(UI_ChallengesListItemSimple_C_UpdateChallengeState, Temp_bool_Variable_7) == 0x000071, "Member 'UI_ChallengesListItemSimple_C_UpdateChallengeState::Temp_bool_Variable_7' has a wrong offset!");
static_assert(offsetof(UI_ChallengesListItemSimple_C_UpdateChallengeState, CallFunc_EqualEqual_ByteByte_ReturnValue) == 0x000072, "Member 'UI_ChallengesListItemSimple_C_UpdateChallengeState::CallFunc_EqualEqual_ByteByte_ReturnValue' has a wrong offset!");
static_assert(offsetof(UI_ChallengesListItemSimple_C_UpdateChallengeState, CallFunc_Get_Condition_Text_Condition_Text) == 0x000078, "Member 'UI_ChallengesListItemSimple_C_UpdateChallengeState::CallFunc_Get_Condition_Text_Condition_Text' has a wrong offset!");
static_assert(offsetof(UI_ChallengesListItemSimple_C_UpdateChallengeState, CallFunc_Get_Challenge_Category_Category) == 0x000090, "Member 'UI_ChallengesListItemSimple_C_UpdateChallengeState::CallFunc_Get_Challenge_Category_Category' has a wrong offset!");
static_assert(offsetof(UI_ChallengesListItemSimple_C_UpdateChallengeState, CallFunc_EqualEqual_ByteByte_ReturnValue_1) == 0x000091, "Member 'UI_ChallengesListItemSimple_C_UpdateChallengeState::CallFunc_EqualEqual_ByteByte_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(UI_ChallengesListItemSimple_C_UpdateChallengeState, Temp_text_Variable_1) == 0x000098, "Member 'UI_ChallengesListItemSimple_C_UpdateChallengeState::Temp_text_Variable_1' has a wrong offset!");
static_assert(offsetof(UI_ChallengesListItemSimple_C_UpdateChallengeState, Temp_bool_Variable_8) == 0x0000B0, "Member 'UI_ChallengesListItemSimple_C_UpdateChallengeState::Temp_bool_Variable_8' has a wrong offset!");
static_assert(offsetof(UI_ChallengesListItemSimple_C_UpdateChallengeState, Temp_text_Variable_2) == 0x0000B8, "Member 'UI_ChallengesListItemSimple_C_UpdateChallengeState::Temp_text_Variable_2' has a wrong offset!");
static_assert(offsetof(UI_ChallengesListItemSimple_C_UpdateChallengeState, CallFunc_Get_Title_Text_Title_Text) == 0x0000D0, "Member 'UI_ChallengesListItemSimple_C_UpdateChallengeState::CallFunc_Get_Title_Text_Title_Text' has a wrong offset!");
static_assert(offsetof(UI_ChallengesListItemSimple_C_UpdateChallengeState, CallFunc_Get_Maximum_Progress_Maximum_Progress) == 0x0000E8, "Member 'UI_ChallengesListItemSimple_C_UpdateChallengeState::CallFunc_Get_Maximum_Progress_Maximum_Progress' has a wrong offset!");
static_assert(offsetof(UI_ChallengesListItemSimple_C_UpdateChallengeState, CallFunc_Get_Current_Progress_Current_Progress) == 0x0000EC, "Member 'UI_ChallengesListItemSimple_C_UpdateChallengeState::CallFunc_Get_Current_Progress_Current_Progress' has a wrong offset!");
static_assert(offsetof(UI_ChallengesListItemSimple_C_UpdateChallengeState, K2Node_MakeStruct_FormatArgumentData) == 0x0000F0, "Member 'UI_ChallengesListItemSimple_C_UpdateChallengeState::K2Node_MakeStruct_FormatArgumentData' has a wrong offset!");
static_assert(offsetof(UI_ChallengesListItemSimple_C_UpdateChallengeState, K2Node_MakeStruct_FormatArgumentData_1) == 0x000130, "Member 'UI_ChallengesListItemSimple_C_UpdateChallengeState::K2Node_MakeStruct_FormatArgumentData_1' has a wrong offset!");
static_assert(offsetof(UI_ChallengesListItemSimple_C_UpdateChallengeState, K2Node_MakeArray_Array) == 0x000170, "Member 'UI_ChallengesListItemSimple_C_UpdateChallengeState::K2Node_MakeArray_Array' has a wrong offset!");
static_assert(offsetof(UI_ChallengesListItemSimple_C_UpdateChallengeState, K2Node_MakeArray_Array_1) == 0x000180, "Member 'UI_ChallengesListItemSimple_C_UpdateChallengeState::K2Node_MakeArray_Array_1' has a wrong offset!");
static_assert(offsetof(UI_ChallengesListItemSimple_C_UpdateChallengeState, CallFunc_Format_ReturnValue) == 0x000190, "Member 'UI_ChallengesListItemSimple_C_UpdateChallengeState::CallFunc_Format_ReturnValue' has a wrong offset!");
static_assert(offsetof(UI_ChallengesListItemSimple_C_UpdateChallengeState, CallFunc_Format_ReturnValue_1) == 0x0001A8, "Member 'UI_ChallengesListItemSimple_C_UpdateChallengeState::CallFunc_Format_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(UI_ChallengesListItemSimple_C_UpdateChallengeState, CallFunc_Conv_IntToFloat_ReturnValue) == 0x0001C0, "Member 'UI_ChallengesListItemSimple_C_UpdateChallengeState::CallFunc_Conv_IntToFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(UI_ChallengesListItemSimple_C_UpdateChallengeState, CallFunc_Conv_IntToFloat_ReturnValue_1) == 0x0001C4, "Member 'UI_ChallengesListItemSimple_C_UpdateChallengeState::CallFunc_Conv_IntToFloat_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(UI_ChallengesListItemSimple_C_UpdateChallengeState, Temp_text_Variable_3) == 0x0001C8, "Member 'UI_ChallengesListItemSimple_C_UpdateChallengeState::Temp_text_Variable_3' has a wrong offset!");
static_assert(offsetof(UI_ChallengesListItemSimple_C_UpdateChallengeState, CallFunc_Divide_FloatFloat_ReturnValue) == 0x0001E0, "Member 'UI_ChallengesListItemSimple_C_UpdateChallengeState::CallFunc_Divide_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(UI_ChallengesListItemSimple_C_UpdateChallengeState, K2Node_Select_Default_1) == 0x0001E8, "Member 'UI_ChallengesListItemSimple_C_UpdateChallengeState::K2Node_Select_Default_1' has a wrong offset!");
static_assert(offsetof(UI_ChallengesListItemSimple_C_UpdateChallengeState, K2Node_Select_Default_2) == 0x000200, "Member 'UI_ChallengesListItemSimple_C_UpdateChallengeState::K2Node_Select_Default_2' has a wrong offset!");
static_assert(offsetof(UI_ChallengesListItemSimple_C_UpdateChallengeState, K2Node_Select_Default_3) == 0x000218, "Member 'UI_ChallengesListItemSimple_C_UpdateChallengeState::K2Node_Select_Default_3' has a wrong offset!");

}

