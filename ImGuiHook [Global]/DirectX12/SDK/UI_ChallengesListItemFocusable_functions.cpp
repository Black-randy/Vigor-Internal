#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: UI_ChallengesListItemFocusable

#include "Basic.hpp"

#include "UI_ChallengesListItemFocusable_classes.hpp"
#include "UI_ChallengesListItemFocusable_parameters.hpp"


namespace SDK
{

// Function UI_ChallengesListItemFocusable.UI_ChallengesListItemFocusable_C.ChallengeSlotCancelled__DelegateSignature
// (Public, Delegate, BlueprintCallable, BlueprintEvent)
// Parameters:
// class ABP_ChallengeSlot_C*              BP_ChallengeSlot_0                                     (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UUI_ChallengesListItemFocusable_C::ChallengeSlotCancelled__DelegateSignature(class ABP_ChallengeSlot_C* BP_ChallengeSlot_0)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UI_ChallengesListItemFocusable_C", "ChallengeSlotCancelled__DelegateSignature");

	Params::UI_ChallengesListItemFocusable_C_ChallengeSlotCancelled__DelegateSignature Parms{};

	Parms.BP_ChallengeSlot_0 = BP_ChallengeSlot_0;

	UObject::ProcessEvent(Func, &Parms);
}


// Function UI_ChallengesListItemFocusable.UI_ChallengesListItemFocusable_C.ExecuteUbergraph_UI_ChallengesListItemFocusable
// (Final, UbergraphFunction)
// Parameters:
// int32                                   EntryPoint                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UUI_ChallengesListItemFocusable_C::ExecuteUbergraph_UI_ChallengesListItemFocusable(int32 EntryPoint)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UI_ChallengesListItemFocusable_C", "ExecuteUbergraph_UI_ChallengesListItemFocusable");

	Params::UI_ChallengesListItemFocusable_C_ExecuteUbergraph_UI_ChallengesListItemFocusable Parms{};

	Parms.EntryPoint = EntryPoint;

	UObject::ProcessEvent(Func, &Parms);
}


// Function UI_ChallengesListItemFocusable.UI_ChallengesListItemFocusable_C.BndEvt__UI_ChallengesListItemFocusable_Button_K2Node_ComponentBoundEvent_0_OnButtonHoverEvent__DelegateSignature
// (BlueprintEvent)
// Parameters:
// class UButton*                          Sender                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UUI_ChallengesListItemFocusable_C::BndEvt__UI_ChallengesListItemFocusable_Button_K2Node_ComponentBoundEvent_0_OnButtonHoverEvent__DelegateSignature(class UButton* Sender)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UI_ChallengesListItemFocusable_C", "BndEvt__UI_ChallengesListItemFocusable_Button_K2Node_ComponentBoundEvent_0_OnButtonHoverEvent__DelegateSignature");

	Params::UI_ChallengesListItemFocusable_C_BndEvt__UI_ChallengesListItemFocusable_Button_K2Node_ComponentBoundEvent_0_OnButtonHoverEvent__DelegateSignature Parms{};

	Parms.Sender = Sender;

	UObject::ProcessEvent(Func, &Parms);
}


// Function UI_ChallengesListItemFocusable.UI_ChallengesListItemFocusable_C.Init
// (BlueprintCallable, BlueprintEvent)

void UUI_ChallengesListItemFocusable_C::Init()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UI_ChallengesListItemFocusable_C", "Init");

	UObject::ProcessEvent(Func, nullptr);
}


// Function UI_ChallengesListItemFocusable.UI_ChallengesListItemFocusable_C.OnStateChanged
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// class ABP_ChallengeSlot_C*              Slot_0                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UUI_ChallengesListItemFocusable_C::OnStateChanged(class ABP_ChallengeSlot_C* Slot_0)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UI_ChallengesListItemFocusable_C", "OnStateChanged");

	Params::UI_ChallengesListItemFocusable_C_OnStateChanged Parms{};

	Parms.Slot_0 = Slot_0;

	UObject::ProcessEvent(Func, &Parms);
}


// Function UI_ChallengesListItemFocusable.UI_ChallengesListItemFocusable_C.OnChallengeCancelled
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    Success                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void UUI_ChallengesListItemFocusable_C::OnChallengeCancelled(bool Success)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UI_ChallengesListItemFocusable_C", "OnChallengeCancelled");

	Params::UI_ChallengesListItemFocusable_C_OnChallengeCancelled Parms{};

	Parms.Success = Success;

	UObject::ProcessEvent(Func, &Parms);
}


// Function UI_ChallengesListItemFocusable.UI_ChallengesListItemFocusable_C.EventChallengeManagerReady
// (BlueprintCallable, BlueprintEvent)

void UUI_ChallengesListItemFocusable_C::EventChallengeManagerReady()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UI_ChallengesListItemFocusable_C", "EventChallengeManagerReady");

	UObject::ProcessEvent(Func, nullptr);
}


// Function UI_ChallengesListItemFocusable.UI_ChallengesListItemFocusable_C.UpdateChallengeState
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// class ABP_ChallengeSlot_C*              ChallengeSlotIn                                        (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UUI_ChallengesListItemFocusable_C::UpdateChallengeState(class ABP_ChallengeSlot_C* ChallengeSlotIn)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UI_ChallengesListItemFocusable_C", "UpdateChallengeState");

	Params::UI_ChallengesListItemFocusable_C_UpdateChallengeState Parms{};

	Parms.ChallengeSlotIn = ChallengeSlotIn;

	UObject::ProcessEvent(Func, &Parms);
}


// Function UI_ChallengesListItemFocusable.UI_ChallengesListItemFocusable_C.GetRemainingTime
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// struct FDateTime                        Time                                                   (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// class FText                             RemainingTime                                          (Parm, OutParm)

void UUI_ChallengesListItemFocusable_C::GetRemainingTime(const struct FDateTime& Time, class FText* RemainingTime)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UI_ChallengesListItemFocusable_C", "GetRemainingTime");

	Params::UI_ChallengesListItemFocusable_C_GetRemainingTime Parms{};

	Parms.Time = std::move(Time);

	UObject::ProcessEvent(Func, &Parms);

	if (RemainingTime != nullptr)
		*RemainingTime = std::move(Parms.RemainingTime);
}

}

