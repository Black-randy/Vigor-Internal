#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_ChallengeCondition_TravelDistanceWithAirdrop

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "BP_ChallengeCondition_Base_classes.hpp"


namespace SDK
{

// BlueprintGeneratedClass BP_ChallengeCondition_TravelDistanceWithAirdrop.BP_ChallengeCondition_TravelDistanceWithAirdrop_C
// 0x0018 (0x0398 - 0x0380)
class ABP_ChallengeCondition_TravelDistanceWithAirdrop_C final : public ABP_ChallengeCondition_Base_C
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame_BP_ChallengeCondition_TravelDistanceWithAirdrop_C; // 0x0380(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	int32                                         TargetDistance;                                    // 0x0388(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         TotalDistance;                                     // 0x038C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          NotificationCooldownPassed;                        // 0x0390(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)

public:
	void ExecuteUbergraph_BP_ChallengeCondition_TravelDistanceWithAirdrop(int32 EntryPoint);
	void ResetDistance();
	void PickedUpAirdrop();
	void Distance_Updated(float Distance_Increment);
	void ReceiveBeginPlay();
	void Get_Maximum_Progress(int32* Maximum_Progress);
	void Get_Condition_Text(class FText* Condition_Text);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BP_ChallengeCondition_TravelDistanceWithAirdrop_C">();
	}
	static class ABP_ChallengeCondition_TravelDistanceWithAirdrop_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<ABP_ChallengeCondition_TravelDistanceWithAirdrop_C>();
	}
};
static_assert(alignof(ABP_ChallengeCondition_TravelDistanceWithAirdrop_C) == 0x000008, "Wrong alignment on ABP_ChallengeCondition_TravelDistanceWithAirdrop_C");
static_assert(sizeof(ABP_ChallengeCondition_TravelDistanceWithAirdrop_C) == 0x000398, "Wrong size on ABP_ChallengeCondition_TravelDistanceWithAirdrop_C");
static_assert(offsetof(ABP_ChallengeCondition_TravelDistanceWithAirdrop_C, UberGraphFrame_BP_ChallengeCondition_TravelDistanceWithAirdrop_C) == 0x000380, "Member 'ABP_ChallengeCondition_TravelDistanceWithAirdrop_C::UberGraphFrame_BP_ChallengeCondition_TravelDistanceWithAirdrop_C' has a wrong offset!");
static_assert(offsetof(ABP_ChallengeCondition_TravelDistanceWithAirdrop_C, TargetDistance) == 0x000388, "Member 'ABP_ChallengeCondition_TravelDistanceWithAirdrop_C::TargetDistance' has a wrong offset!");
static_assert(offsetof(ABP_ChallengeCondition_TravelDistanceWithAirdrop_C, TotalDistance) == 0x00038C, "Member 'ABP_ChallengeCondition_TravelDistanceWithAirdrop_C::TotalDistance' has a wrong offset!");
static_assert(offsetof(ABP_ChallengeCondition_TravelDistanceWithAirdrop_C, NotificationCooldownPassed) == 0x000390, "Member 'ABP_ChallengeCondition_TravelDistanceWithAirdrop_C::NotificationCooldownPassed' has a wrong offset!");

}

