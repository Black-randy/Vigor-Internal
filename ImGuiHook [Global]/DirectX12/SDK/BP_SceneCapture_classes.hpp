#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_SceneCapture

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "Engine_classes.hpp"
#include "E_SceneCaptureState_structs.hpp"
#include "E_SceneCapturePurpose_structs.hpp"
#include "FlameUI_structs.hpp"


namespace SDK
{

// BlueprintGeneratedClass BP_SceneCapture.BP_SceneCapture_C
// 0x0058 (0x0290 - 0x0238)
class ABP_SceneCapture_C : public ASceneCapture2D
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x0238(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class UStaticMeshComponent*                   MipsAdjuster;                                      // 0x0240(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	int32                                         SceneCaptureIndex;                                 // 0x0248(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsAnimating;                                       // 0x024C(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	E_SceneCaptureState                           CaptureState;                                      // 0x024D(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_24E[0x2];                                      // 0x024E(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class UPrimitiveComponent*>            PrimitiveComponents;                               // 0x0250(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance, ContainsInstancedReference)
	bool                                          IsMipmapStreaming;                                 // 0x0260(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_261[0x3];                                      // 0x0261(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         SceneCaptureIndexWithinMinMax;                     // 0x0264(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         NumSceneCaptureIndices;                            // 0x0268(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_26C[0x4];                                      // 0x026C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	FMulticastInlineDelegateProperty_             CaptureRefreshed;                                  // 0x0270(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	struct FTimerHandle                           BoothClearTimer;                                   // 0x0280(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	E_SceneCapturePurpose                         CapturePurpose;                                    // 0x0288(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

public:
	void CaptureRefreshed__DelegateSignature();
	void ExecuteUbergraph_BP_SceneCapture(int32 EntryPoint);
	void ResetClearContentEvent();
	void ClearContentAfterDelay();
	void ReceiveTick(float DeltaSeconds);
	void ReceiveBeginPlay();
	void InitializeRenderTarget(int32 SizeX, int32 SizeY, class UTextureRenderTarget2D** RenderTarget);
	void ChangeState(E_SceneCaptureState NewState);
	void InitializePrimitiveComponents();
	void CheckMipmapsStreaming(bool* IsStreaming);
	void InitializeNumSceneCaptureIndices();
	void Deinitialize();
	void ClearContent();

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BP_SceneCapture_C">();
	}
	static class ABP_SceneCapture_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<ABP_SceneCapture_C>();
	}
};
static_assert(alignof(ABP_SceneCapture_C) == 0x000008, "Wrong alignment on ABP_SceneCapture_C");
static_assert(sizeof(ABP_SceneCapture_C) == 0x000290, "Wrong size on ABP_SceneCapture_C");
static_assert(offsetof(ABP_SceneCapture_C, UberGraphFrame) == 0x000238, "Member 'ABP_SceneCapture_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(ABP_SceneCapture_C, MipsAdjuster) == 0x000240, "Member 'ABP_SceneCapture_C::MipsAdjuster' has a wrong offset!");
static_assert(offsetof(ABP_SceneCapture_C, SceneCaptureIndex) == 0x000248, "Member 'ABP_SceneCapture_C::SceneCaptureIndex' has a wrong offset!");
static_assert(offsetof(ABP_SceneCapture_C, IsAnimating) == 0x00024C, "Member 'ABP_SceneCapture_C::IsAnimating' has a wrong offset!");
static_assert(offsetof(ABP_SceneCapture_C, CaptureState) == 0x00024D, "Member 'ABP_SceneCapture_C::CaptureState' has a wrong offset!");
static_assert(offsetof(ABP_SceneCapture_C, PrimitiveComponents) == 0x000250, "Member 'ABP_SceneCapture_C::PrimitiveComponents' has a wrong offset!");
static_assert(offsetof(ABP_SceneCapture_C, IsMipmapStreaming) == 0x000260, "Member 'ABP_SceneCapture_C::IsMipmapStreaming' has a wrong offset!");
static_assert(offsetof(ABP_SceneCapture_C, SceneCaptureIndexWithinMinMax) == 0x000264, "Member 'ABP_SceneCapture_C::SceneCaptureIndexWithinMinMax' has a wrong offset!");
static_assert(offsetof(ABP_SceneCapture_C, NumSceneCaptureIndices) == 0x000268, "Member 'ABP_SceneCapture_C::NumSceneCaptureIndices' has a wrong offset!");
static_assert(offsetof(ABP_SceneCapture_C, CaptureRefreshed) == 0x000270, "Member 'ABP_SceneCapture_C::CaptureRefreshed' has a wrong offset!");
static_assert(offsetof(ABP_SceneCapture_C, BoothClearTimer) == 0x000280, "Member 'ABP_SceneCapture_C::BoothClearTimer' has a wrong offset!");
static_assert(offsetof(ABP_SceneCapture_C, CapturePurpose) == 0x000288, "Member 'ABP_SceneCapture_C::CapturePurpose' has a wrong offset!");

}

