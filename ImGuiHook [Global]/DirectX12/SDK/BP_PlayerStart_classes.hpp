#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_PlayerStart

#include "Basic.hpp"

#include "Struct_SpawnUsageInfo_structs.hpp"
#include "CoreUObject_structs.hpp"
#include "Flame_classes.hpp"


namespace SDK
{

// BlueprintGeneratedClass BP_PlayerStart.BP_PlayerStart_C
// 0x00A0 (0x0328 - 0x0288)
class ABP_PlayerStart_C final : public APlayerStartFlame
{
public:
	TMap<int32, struct FStruct_SpawnUsageInfo>    PlayerID_To_UseTimes;                              // 0x0288(0x0050)(Edit, BlueprintVisible, DisableEditOnInstance)
	TMap<struct FVector, struct FVector2D>        DirectionsToIgnore_to_DotProductLimit_With_DistanceMultiplier; // 0x02D8(0x0050)(Edit, BlueprintVisible)

public:
	void SetUseTime(const int32& PlayerId);
	void GetUsageData(int32 PlayerId, float InAmountOfTime, float* Usage);
	void DEBUG_ViewBlockedDirections();
	void CheckIfTheDirectionIsBlocked(const struct FVector& Direction, float* Multiplier);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BP_PlayerStart_C">();
	}
	static class ABP_PlayerStart_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<ABP_PlayerStart_C>();
	}
};
static_assert(alignof(ABP_PlayerStart_C) == 0x000008, "Wrong alignment on ABP_PlayerStart_C");
static_assert(sizeof(ABP_PlayerStart_C) == 0x000328, "Wrong size on ABP_PlayerStart_C");
static_assert(offsetof(ABP_PlayerStart_C, PlayerID_To_UseTimes) == 0x000288, "Member 'ABP_PlayerStart_C::PlayerID_To_UseTimes' has a wrong offset!");
static_assert(offsetof(ABP_PlayerStart_C, DirectionsToIgnore_to_DotProductLimit_With_DistanceMultiplier) == 0x0002D8, "Member 'ABP_PlayerStart_C::DirectionsToIgnore_to_DotProductLimit_With_DistanceMultiplier' has a wrong offset!");

}

