#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_GameState_GunFight

#include "Basic.hpp"

#include "BP_GameState_GunFight_classes.hpp"
#include "BP_GameState_GunFight_parameters.hpp"


namespace SDK
{

// Function BP_GameState_GunFight.BP_GameState_GunFight_C.LoadoutsReplicated__DelegateSignature
// (Public, Delegate, BlueprintCallable, BlueprintEvent)
// Parameters:
// class ABP_PlayerController_GunFight_C*  PlayerController                                       (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   PreRoundTime                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_GameState_GunFight_C::LoadoutsReplicated__DelegateSignature(class ABP_PlayerController_GunFight_C* PlayerController, int32 PreRoundTime)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_GameState_GunFight_C", "LoadoutsReplicated__DelegateSignature");

	Params::BP_GameState_GunFight_C_LoadoutsReplicated__DelegateSignature Parms{};

	Parms.PlayerController = PlayerController;
	Parms.PreRoundTime = PreRoundTime;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_GameState_GunFight.BP_GameState_GunFight_C.SecondInMatchHasPassed__DelegateSignature
// (Public, Delegate, BlueprintCallable, BlueprintEvent)

void ABP_GameState_GunFight_C::SecondInMatchHasPassed__DelegateSignature()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_GameState_GunFight_C", "SecondInMatchHasPassed__DelegateSignature");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_GameState_GunFight.BP_GameState_GunFight_C.VoteKickRulesChanged__DelegateSignature
// (Public, Delegate, BlueprintCallable, BlueprintEvent)

void ABP_GameState_GunFight_C::VoteKickRulesChanged__DelegateSignature()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_GameState_GunFight_C", "VoteKickRulesChanged__DelegateSignature");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_GameState_GunFight.BP_GameState_GunFight_C.VoteKick_KickedPlayersUpdated__DelegateSignature
// (Public, Delegate, BlueprintCallable, BlueprintEvent)

void ABP_GameState_GunFight_C::VoteKick_KickedPlayersUpdated__DelegateSignature()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_GameState_GunFight_C", "VoteKick_KickedPlayersUpdated__DelegateSignature");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_GameState_GunFight.BP_GameState_GunFight_C.ExecuteUbergraph_BP_GameState_GunFight
// (Final, UbergraphFunction, HasDefaults)
// Parameters:
// int32                                   EntryPoint                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_GameState_GunFight_C::ExecuteUbergraph_BP_GameState_GunFight(int32 EntryPoint)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_GameState_GunFight_C", "ExecuteUbergraph_BP_GameState_GunFight");

	Params::BP_GameState_GunFight_C_ExecuteUbergraph_BP_GameState_GunFight Parms{};

	Parms.EntryPoint = EntryPoint;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_GameState_GunFight.BP_GameState_GunFight_C.ClearKickVotingUponMatchEnd
// (BlueprintCallable, BlueprintEvent)

void ABP_GameState_GunFight_C::ClearKickVotingUponMatchEnd()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_GameState_GunFight_C", "ClearKickVotingUponMatchEnd");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_GameState_GunFight.BP_GameState_GunFight_C.AFKKickAfterDelay
// (BlueprintCallable, BlueprintEvent)

void ABP_GameState_GunFight_C::AFKKickAfterDelay()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_GameState_GunFight_C", "AFKKickAfterDelay");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_GameState_GunFight.BP_GameState_GunFight_C.HandleAFK_CheckResult
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// class ABP_PlayerController_GunFight_C*  PlayerToKick                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    ShouldKick                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// int32                                   TeamID                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_GameState_GunFight_C::HandleAFK_CheckResult(class ABP_PlayerController_GunFight_C* PlayerToKick, bool ShouldKick, int32 TeamID)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_GameState_GunFight_C", "HandleAFK_CheckResult");

	Params::BP_GameState_GunFight_C_HandleAFK_CheckResult Parms{};

	Parms.PlayerToKick = PlayerToKick;
	Parms.ShouldKick = ShouldKick;
	Parms.TeamID = TeamID;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_GameState_GunFight.BP_GameState_GunFight_C.ShowAFK_CheckIfNeeded
// (BlueprintCallable, BlueprintEvent)

void ABP_GameState_GunFight_C::ShowAFK_CheckIfNeeded()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_GameState_GunFight_C", "ShowAFK_CheckIfNeeded");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_GameState_GunFight.BP_GameState_GunFight_C.ClearKickVoting_AfterAFK_Check
// (BlueprintCallable, BlueprintEvent)

void ABP_GameState_GunFight_C::ClearKickVoting_AfterAFK_Check()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_GameState_GunFight_C", "ClearKickVoting_AfterAFK_Check");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_GameState_GunFight.BP_GameState_GunFight_C.ReplicateKickedPlayers
// (Net, NetReliable, NetMulticast, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// int32                                   KickedPlayerID                                         (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   TeamID                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_GameState_GunFight_C::ReplicateKickedPlayers(const int32& KickedPlayerID, int32 TeamID)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_GameState_GunFight_C", "ReplicateKickedPlayers");

	Params::BP_GameState_GunFight_C_ReplicateKickedPlayers Parms{};

	Parms.KickedPlayerID = KickedPlayerID;
	Parms.TeamID = TeamID;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_GameState_GunFight.BP_GameState_GunFight_C.Team1_EnableKickVotingAfterDelay
// (BlueprintCallable, BlueprintEvent)

void ABP_GameState_GunFight_C::Team1_EnableKickVotingAfterDelay()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_GameState_GunFight_C", "Team1_EnableKickVotingAfterDelay");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_GameState_GunFight.BP_GameState_GunFight_C.Team2_EnableKickVotingAfterDelay
// (BlueprintCallable, BlueprintEvent)

void ABP_GameState_GunFight_C::Team2_EnableKickVotingAfterDelay()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_GameState_GunFight_C", "Team2_EnableKickVotingAfterDelay");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_GameState_GunFight.BP_GameState_GunFight_C.Replicate_EnableVoteKick
// (Net, NetReliable, NetMulticast, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    bCanVoteKick_0                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ABP_GameState_GunFight_C::Replicate_EnableVoteKick(bool bCanVoteKick_0)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_GameState_GunFight_C", "Replicate_EnableVoteKick");

	Params::BP_GameState_GunFight_C_Replicate_EnableVoteKick Parms{};

	Parms.bCanVoteKick_0 = bCanVoteKick_0;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_GameState_GunFight.BP_GameState_GunFight_C.OnKickVotingStarted
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// int32                                   TeamIndex                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_GameState_GunFight_C::OnKickVotingStarted(int32 TeamIndex)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_GameState_GunFight_C", "OnKickVotingStarted");

	Params::BP_GameState_GunFight_C_OnKickVotingStarted Parms{};

	Parms.TeamIndex = TeamIndex;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_GameState_GunFight.BP_GameState_GunFight_C.SecondOnServerPassed
// (BlueprintCallable, BlueprintEvent)

void ABP_GameState_GunFight_C::SecondOnServerPassed()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_GameState_GunFight_C", "SecondOnServerPassed");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_GameState_GunFight.BP_GameState_GunFight_C.KickAfterDelay
// (BlueprintCallable, BlueprintEvent)

void ABP_GameState_GunFight_C::KickAfterDelay()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_GameState_GunFight_C", "KickAfterDelay");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_GameState_GunFight.BP_GameState_GunFight_C.ResolveVoteKick
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    bShouldDisplayAFKCheck                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// class ABP_PlayerController_GunFight_C*  PlayerToKick                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   TeamID                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_GameState_GunFight_C::ResolveVoteKick(bool bShouldDisplayAFKCheck, class ABP_PlayerController_GunFight_C* PlayerToKick, int32 TeamID)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_GameState_GunFight_C", "ResolveVoteKick");

	Params::BP_GameState_GunFight_C_ResolveVoteKick Parms{};

	Parms.bShouldDisplayAFKCheck = bShouldDisplayAFKCheck;
	Parms.PlayerToKick = PlayerToKick;
	Parms.TeamID = TeamID;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_GameState_GunFight.BP_GameState_GunFight_C.VoteKickPlayer
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// class ABP_PlayerController_GunFight_C*  PlayerToKick                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_GameState_GunFight_C::VoteKickPlayer(class ABP_PlayerController_GunFight_C* PlayerToKick)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_GameState_GunFight_C", "VoteKickPlayer");

	Params::BP_GameState_GunFight_C_VoteKickPlayer Parms{};

	Parms.PlayerToKick = PlayerToKick;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_GameState_GunFight.BP_GameState_GunFight_C.Replicate_VoteKickCooldown
// (Net, NetReliable, NetMulticast, BlueprintCallable, BlueprintEvent)
// Parameters:
// int32                                   CooldownStartTime                                      (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    ActiveVoteKick                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// int32                                   TeamIndex                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_GameState_GunFight_C::Replicate_VoteKickCooldown(int32 CooldownStartTime, bool ActiveVoteKick, int32 TeamIndex)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_GameState_GunFight_C", "Replicate_VoteKickCooldown");

	Params::BP_GameState_GunFight_C_Replicate_VoteKickCooldown Parms{};

	Parms.CooldownStartTime = CooldownStartTime;
	Parms.ActiveVoteKick = ActiveVoteKick;
	Parms.TeamIndex = TeamIndex;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_GameState_GunFight.BP_GameState_GunFight_C.VoteKickGracePeriodEnded
// (BlueprintCallable, BlueprintEvent)

void ABP_GameState_GunFight_C::VoteKickGracePeriodEnded()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_GameState_GunFight_C", "VoteKickGracePeriodEnded");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_GameState_GunFight.BP_GameState_GunFight_C.InitialKickCooldown
// (BlueprintCallable, BlueprintEvent)

void ABP_GameState_GunFight_C::InitialKickCooldown()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_GameState_GunFight_C", "InitialKickCooldown");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_GameState_GunFight.BP_GameState_GunFight_C.CheckLocalPlayerRoundLoadout
// (BlueprintCallable, BlueprintEvent)

void ABP_GameState_GunFight_C::CheckLocalPlayerRoundLoadout()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_GameState_GunFight_C", "CheckLocalPlayerRoundLoadout");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_GameState_GunFight.BP_GameState_GunFight_C.ReplicateDisconnectedPlayerStatistics
// (Net, NetReliable, NetMulticast, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FStruct_GunFightStatistics       ScoreboardRow                                          (BlueprintVisible, BlueprintReadOnly, Parm, HasGetValueTypeHash)
// bool                                    WasKicked                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// bool                                    Attacker                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ABP_GameState_GunFight_C::ReplicateDisconnectedPlayerStatistics(const struct FStruct_GunFightStatistics& ScoreboardRow, bool WasKicked, bool Attacker)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_GameState_GunFight_C", "ReplicateDisconnectedPlayerStatistics");

	Params::BP_GameState_GunFight_C_ReplicateDisconnectedPlayerStatistics Parms{};

	Parms.ScoreboardRow = std::move(ScoreboardRow);
	Parms.WasKicked = WasKicked;
	Parms.Attacker = Attacker;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_GameState_GunFight.BP_GameState_GunFight_C.ReplicateMatchBoosters
// (Net, NetReliable, NetMulticast, BlueprintCallable, BlueprintEvent)
// Parameters:
// int32                                   ScoreBoosterTeam1_Count_0                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   ScoreBoosterTeam2_Count_0                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_GameState_GunFight_C::ReplicateMatchBoosters(int32 ScoreBoosterTeam1_Count_0, int32 ScoreBoosterTeam2_Count_0)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_GameState_GunFight_C", "ReplicateMatchBoosters");

	Params::BP_GameState_GunFight_C_ReplicateMatchBoosters Parms{};

	Parms.ScoreBoosterTeam1_Count_0 = ScoreBoosterTeam1_Count_0;
	Parms.ScoreBoosterTeam2_Count_0 = ScoreBoosterTeam2_Count_0;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_GameState_GunFight.BP_GameState_GunFight_C.ShowScoreEventFeed
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// class FString                           ScoreEventStringKey                                    (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)
// int32                                   Awarded_Points                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_GameState_GunFight_C::ShowScoreEventFeed(const class FString& ScoreEventStringKey, int32 Awarded_Points)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_GameState_GunFight_C", "ShowScoreEventFeed");

	Params::BP_GameState_GunFight_C_ShowScoreEventFeed Parms{};

	Parms.ScoreEventStringKey = std::move(ScoreEventStringKey);
	Parms.Awarded_Points = Awarded_Points;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_GameState_GunFight.BP_GameState_GunFight_C.ShowChosenLoadout
// (BlueprintCallable, BlueprintEvent)

void ABP_GameState_GunFight_C::ShowChosenLoadout()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_GameState_GunFight_C", "ShowChosenLoadout");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_GameState_GunFight.BP_GameState_GunFight_C.HideLoadoutAfterDelay
// (BlueprintCallable, BlueprintEvent)

void ABP_GameState_GunFight_C::HideLoadoutAfterDelay()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_GameState_GunFight_C", "HideLoadoutAfterDelay");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_GameState_GunFight.BP_GameState_GunFight_C.ShowLoadoutOptionsDelayed
// (Net, NetReliable, NetMulticast, BlueprintCallable, BlueprintEvent)

void ABP_GameState_GunFight_C::ShowLoadoutOptionsDelayed()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_GameState_GunFight_C", "ShowLoadoutOptionsDelayed");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_GameState_GunFight.BP_GameState_GunFight_C.ReplicateLoadoutSlots
// (Net, NetReliable, NetMulticast, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// TArray<struct FS_GunFightLoadoutSlot>   Loadout_slots                                          (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
// bool                                    IsAttacker                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ABP_GameState_GunFight_C::ReplicateLoadoutSlots(const TArray<struct FS_GunFightLoadoutSlot>& Loadout_slots, bool IsAttacker)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_GameState_GunFight_C", "ReplicateLoadoutSlots");

	Params::BP_GameState_GunFight_C_ReplicateLoadoutSlots Parms{};

	Parms.Loadout_slots = std::move(Loadout_slots);
	Parms.IsAttacker = IsAttacker;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_GameState_GunFight.BP_GameState_GunFight_C.ReplicateLoadoutOptions
// (Net, NetReliable, NetMulticast, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// TArray<struct FS_Gunfight_LoadoutSlotInfo>Loadouts                                               (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)

void ABP_GameState_GunFight_C::ReplicateLoadoutOptions(TArray<struct FS_Gunfight_LoadoutSlotInfo>& Loadouts)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_GameState_GunFight_C", "ReplicateLoadoutOptions");

	Params::BP_GameState_GunFight_C_ReplicateLoadoutOptions Parms{};

	Parms.Loadouts = std::move(Loadouts);

	UObject::ProcessEvent(Func, &Parms);

	Loadouts = std::move(Parms.Loadouts);
}


// Function BP_GameState_GunFight.BP_GameState_GunFight_C.Set Barricades Active State
// (Net, NetReliable, NetMulticast, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    IsActive                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ABP_GameState_GunFight_C::Set_Barricades_Active_State(bool IsActive)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_GameState_GunFight_C", "Set Barricades Active State");

	Params::BP_GameState_GunFight_C_Set_Barricades_Active_State Parms{};

	Parms.IsActive = IsActive;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_GameState_GunFight.BP_GameState_GunFight_C.Handle Match Phase
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// E_TeamsMatchPhase                       Match_Phase_0                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_GameState_GunFight_C::Handle_Match_Phase(E_TeamsMatchPhase Match_Phase_0)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_GameState_GunFight_C", "Handle Match Phase");

	Params::BP_GameState_GunFight_C_Handle_Match_Phase Parms{};

	Parms.Match_Phase_0 = Match_Phase_0;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_GameState_GunFight.BP_GameState_GunFight_C.Replicate Spawns
// (Net, NetReliable, NetMulticast, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// TArray<class ABP_PlayerStart_Raid_C*>   Attacker_Spawns                                        (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
// TArray<class ABP_PlayerStart_Raid_C*>   Defender_Spawns                                        (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
// int32                                   CurrentSettingID_0                                     (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_GameState_GunFight_C::Replicate_Spawns(const TArray<class ABP_PlayerStart_Raid_C*>& Attacker_Spawns, const TArray<class ABP_PlayerStart_Raid_C*>& Defender_Spawns, int32 CurrentSettingID_0)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_GameState_GunFight_C", "Replicate Spawns");

	Params::BP_GameState_GunFight_C_Replicate_Spawns Parms{};

	Parms.Attacker_Spawns = std::move(Attacker_Spawns);
	Parms.Defender_Spawns = std::move(Defender_Spawns);
	Parms.CurrentSettingID_0 = CurrentSettingID_0;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_GameState_GunFight.BP_GameState_GunFight_C.Set Spawn Sides Switched
// (Net, NetReliable, NetMulticast, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    Sides_Switched                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ABP_GameState_GunFight_C::Set_Spawn_Sides_Switched(bool Sides_Switched)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_GameState_GunFight_C", "Set Spawn Sides Switched");

	Params::BP_GameState_GunFight_C_Set_Spawn_Sides_Switched Parms{};

	Parms.Sides_Switched = Sides_Switched;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_GameState_GunFight.BP_GameState_GunFight_C.Winner Screen Start
// (BlueprintCallable, BlueprintEvent)

void ABP_GameState_GunFight_C::Winner_Screen_Start()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_GameState_GunFight_C", "Winner Screen Start");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_GameState_GunFight.BP_GameState_GunFight_C.SetLoadoutStyle
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// int32                                   Value                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_GameState_GunFight_C::SetLoadoutStyle(int32 Value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_GameState_GunFight_C", "SetLoadoutStyle");

	Params::BP_GameState_GunFight_C_SetLoadoutStyle Parms{};

	Parms.Value = Value;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_GameState_GunFight.BP_GameState_GunFight_C.Objective Stage Started
// (Net, NetReliable, NetMulticast, BlueprintCallable, BlueprintEvent)
// Parameters:
// class ABP_Objective_GunFight_C*         Objective                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class ABP_ObjectiveSpawnPoint_GunFight_C*SpawnPoint                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_GameState_GunFight_C::Objective_Stage_Started(class ABP_Objective_GunFight_C* Objective, class ABP_ObjectiveSpawnPoint_GunFight_C* SpawnPoint)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_GameState_GunFight_C", "Objective Stage Started");

	Params::BP_GameState_GunFight_C_Objective_Stage_Started Parms{};

	Parms.Objective = Objective;
	Parms.SpawnPoint = SpawnPoint;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_GameState_GunFight.BP_GameState_GunFight_C.Update Survivor Count
// (Net, NetReliable, NetMulticast, BlueprintCallable, BlueprintEvent)
// Parameters:
// int32                                   Attacker_Survivors                                     (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   Defender_Survivors                                     (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_GameState_GunFight_C::Update_Survivor_Count(int32 Attacker_Survivors, int32 Defender_Survivors)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_GameState_GunFight_C", "Update Survivor Count");

	Params::BP_GameState_GunFight_C_Update_Survivor_Count Parms{};

	Parms.Attacker_Survivors = Attacker_Survivors;
	Parms.Defender_Survivors = Defender_Survivors;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_GameState_GunFight.BP_GameState_GunFight_C.Show Kill Feed
// (Net, NetReliable, NetMulticast, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FStruct_TVTDeathmatch_KillFeed   KillFeed                                               (BlueprintVisible, BlueprintReadOnly, Parm, HasGetValueTypeHash)

void ABP_GameState_GunFight_C::Show_Kill_Feed(const struct FStruct_TVTDeathmatch_KillFeed& KillFeed)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_GameState_GunFight_C", "Show Kill Feed");

	Params::BP_GameState_GunFight_C_Show_Kill_Feed Parms{};

	Parms.KillFeed = std::move(KillFeed);

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_GameState_GunFight.BP_GameState_GunFight_C.Replicate Current Round Weapons
// (Net, NetReliable, NetMulticast, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// TArray<struct FStruct_GunFightLoadout>  InCurrentRoundLoadouts_Attackers                       (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
// TArray<struct FStruct_GunFightLoadout>  InCurrentRoundLoadouts_Defenders                       (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)

void ABP_GameState_GunFight_C::Replicate_Current_Round_Weapons(const TArray<struct FStruct_GunFightLoadout>& InCurrentRoundLoadouts_Attackers, const TArray<struct FStruct_GunFightLoadout>& InCurrentRoundLoadouts_Defenders)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_GameState_GunFight_C", "Replicate Current Round Weapons");

	Params::BP_GameState_GunFight_C_Replicate_Current_Round_Weapons Parms{};

	Parms.InCurrentRoundLoadouts_Attackers = std::move(InCurrentRoundLoadouts_Attackers);
	Parms.InCurrentRoundLoadouts_Defenders = std::move(InCurrentRoundLoadouts_Defenders);

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_GameState_GunFight.BP_GameState_GunFight_C.Last Two Minutes In Match
// (Net, NetReliable, NetMulticast, BlueprintCallable, BlueprintEvent)

void ABP_GameState_GunFight_C::Last_Two_Minutes_In_Match()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_GameState_GunFight_C", "Last Two Minutes In Match");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_GameState_GunFight.BP_GameState_GunFight_C.Set Round Win Reason
// (Net, NetReliable, NetMulticast, BlueprintCallable, BlueprintEvent)
// Parameters:
// EGunFightWinReason                      Win_Reason                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class UBP_GSC_Team_Raid_C*              Team_Who_Won                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_GameState_GunFight_C::Set_Round_Win_Reason(EGunFightWinReason Win_Reason, class UBP_GSC_Team_Raid_C* Team_Who_Won)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_GameState_GunFight_C", "Set Round Win Reason");

	Params::BP_GameState_GunFight_C_Set_Round_Win_Reason Parms{};

	Parms.Win_Reason = Win_Reason;
	Parms.Team_Who_Won = Team_Who_Won;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_GameState_GunFight.BP_GameState_GunFight_C.ReceiveBeginPlay
// (Event, Protected, BlueprintEvent)

void ABP_GameState_GunFight_C::ReceiveBeginPlay()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_GameState_GunFight_C", "ReceiveBeginPlay");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_GameState_GunFight.BP_GameState_GunFight_C.Notify Player Statistics Changed
// (BlueprintCallable, BlueprintEvent)

void ABP_GameState_GunFight_C::Notify_Player_Statistics_Changed()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_GameState_GunFight_C", "Notify Player Statistics Changed");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_GameState_GunFight.BP_GameState_GunFight_C.New Round Started
// (Net, NetReliable, NetMulticast, BlueprintCallable, BlueprintEvent)

void ABP_GameState_GunFight_C::New_Round_Started()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_GameState_GunFight_C", "New Round Started");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_GameState_GunFight.BP_GameState_GunFight_C.Players Update PreRound Time Remaining
// (Net, NetReliable, NetMulticast, BlueprintCallable, BlueprintEvent)
// Parameters:
// int32                                   Remaining_Time                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_GameState_GunFight_C::Players_Update_PreRound_Time_Remaining(int32 Remaining_Time)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_GameState_GunFight_C", "Players Update PreRound Time Remaining");

	Params::BP_GameState_GunFight_C_Players_Update_PreRound_Time_Remaining Parms{};

	Parms.Remaining_Time = Remaining_Time;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_GameState_GunFight.BP_GameState_GunFight_C.Set PreRound Remaining Time
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// int32                                   Remaining_Time                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_GameState_GunFight_C::Set_PreRound_Remaining_Time(int32 Remaining_Time)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_GameState_GunFight_C", "Set PreRound Remaining Time");

	Params::BP_GameState_GunFight_C_Set_PreRound_Remaining_Time Parms{};

	Parms.Remaining_Time = Remaining_Time;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_GameState_GunFight.BP_GameState_GunFight_C.Last Ten Seconds In Match
// (Net, NetReliable, NetMulticast, BlueprintCallable, BlueprintEvent)

void ABP_GameState_GunFight_C::Last_Ten_Seconds_In_Match()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_GameState_GunFight_C", "Last Ten Seconds In Match");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_GameState_GunFight.BP_GameState_GunFight_C.Players Update Time Remaining
// (Net, NetReliable, NetMulticast, BlueprintCallable, BlueprintEvent)
// Parameters:
// int32                                   Remaining_Time                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_GameState_GunFight_C::Players_Update_Time_Remaining(int32 Remaining_Time)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_GameState_GunFight_C", "Players Update Time Remaining");

	Params::BP_GameState_GunFight_C_Players_Update_Time_Remaining Parms{};

	Parms.Remaining_Time = Remaining_Time;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_GameState_GunFight.BP_GameState_GunFight_C.Set Match Remaining Time
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// int32                                   Remaining_Time                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_GameState_GunFight_C::Set_Match_Remaining_Time(int32 Remaining_Time)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_GameState_GunFight_C", "Set Match Remaining Time");

	Params::BP_GameState_GunFight_C_Set_Match_Remaining_Time Parms{};

	Parms.Remaining_Time = Remaining_Time;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_GameState_GunFight.BP_GameState_GunFight_C.Cheat_SetRoundsToWin
// (Net, NetMulticast, BlueprintCallable, BlueprintEvent)
// Parameters:
// int32                                   RoundsToWin                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_GameState_GunFight_C::Cheat_SetRoundsToWin(int32 RoundsToWin)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_GameState_GunFight_C", "Cheat_SetRoundsToWin");

	Params::BP_GameState_GunFight_C_Cheat_SetRoundsToWin Parms{};

	Parms.RoundsToWin = RoundsToWin;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_GameState_GunFight.BP_GameState_GunFight_C.Cheat_UpdateNewLoadouts
// (BlueprintCallable, BlueprintEvent)

void ABP_GameState_GunFight_C::Cheat_UpdateNewLoadouts()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_GameState_GunFight_C", "Cheat_UpdateNewLoadouts");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_GameState_GunFight.BP_GameState_GunFight_C.Debug Switch Pause Match
// (BlueprintCallable, BlueprintEvent)

void ABP_GameState_GunFight_C::Debug_Switch_Pause_Match()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_GameState_GunFight_C", "Debug Switch Pause Match");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_GameState_GunFight.BP_GameState_GunFight_C.Get Attacking Team
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// class UBP_GSC_Team_Raid_C*              Attacking_Team                                         (Parm, OutParm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_GameState_GunFight_C::Get_Attacking_Team(class UBP_GSC_Team_Raid_C** Attacking_Team)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_GameState_GunFight_C", "Get Attacking Team");

	Params::BP_GameState_GunFight_C_Get_Attacking_Team Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Attacking_Team != nullptr)
		*Attacking_Team = Parms.Attacking_Team;
}


// Function BP_GameState_GunFight.BP_GameState_GunFight_C.Get Defending Team
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// class UBP_GSC_Team_Raid_C*              Defending_Team                                         (Parm, OutParm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_GameState_GunFight_C::Get_Defending_Team(class UBP_GSC_Team_Raid_C** Defending_Team)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_GameState_GunFight_C", "Get Defending Team");

	Params::BP_GameState_GunFight_C_Get_Defending_Team Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Defending_Team != nullptr)
		*Defending_Team = Parms.Defending_Team;
}


// Function BP_GameState_GunFight.BP_GameState_GunFight_C.GetWorldMinMax
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FVector                          World_Min                                              (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FVector                          World_Max                                              (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_GameState_GunFight_C::GetWorldMinMax(struct FVector* World_Min, struct FVector* World_Max)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_GameState_GunFight_C", "GetWorldMinMax");

	Params::BP_GameState_GunFight_C_GetWorldMinMax Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (World_Min != nullptr)
		*World_Min = std::move(Parms.World_Min);

	if (World_Max != nullptr)
		*World_Max = std::move(Parms.World_Max);
}


// Function BP_GameState_GunFight.BP_GameState_GunFight_C.Check Remaining Time Sound Cues
// (Public, BlueprintCallable, BlueprintEvent)

void ABP_GameState_GunFight_C::Check_Remaining_Time_Sound_Cues()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_GameState_GunFight_C", "Check Remaining Time Sound Cues");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_GameState_GunFight.BP_GameState_GunFight_C.Get Statistics
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// TArray<struct FStruct_GunFightStatistics>Statistics                                             (Parm, OutParm)

void ABP_GameState_GunFight_C::Get_Statistics(TArray<struct FStruct_GunFightStatistics>* Statistics)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_GameState_GunFight_C", "Get Statistics");

	Params::BP_GameState_GunFight_C_Get_Statistics Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Statistics != nullptr)
		*Statistics = std::move(Parms.Statistics);
}


// Function BP_GameState_GunFight.BP_GameState_GunFight_C.Get Attacker Statistics
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// TArray<struct FStruct_GunFightStatistics>Statistics                                             (Parm, OutParm)

void ABP_GameState_GunFight_C::Get_Attacker_Statistics(TArray<struct FStruct_GunFightStatistics>* Statistics)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_GameState_GunFight_C", "Get Attacker Statistics");

	Params::BP_GameState_GunFight_C_Get_Attacker_Statistics Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Statistics != nullptr)
		*Statistics = std::move(Parms.Statistics);
}


// Function BP_GameState_GunFight.BP_GameState_GunFight_C.Get Defender Statistics
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// TArray<struct FStruct_GunFightStatistics>Statistics                                             (Parm, OutParm)

void ABP_GameState_GunFight_C::Get_Defender_Statistics(TArray<struct FStruct_GunFightStatistics>* Statistics)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_GameState_GunFight_C", "Get Defender Statistics");

	Params::BP_GameState_GunFight_C_Get_Defender_Statistics Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Statistics != nullptr)
		*Statistics = std::move(Parms.Statistics);
}


// Function BP_GameState_GunFight.BP_GameState_GunFight_C.Find Player Start Positions
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)

void ABP_GameState_GunFight_C::Find_Player_Start_Positions()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_GameState_GunFight_C", "Find Player Start Positions");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_GameState_GunFight.BP_GameState_GunFight_C.Get Winning and Losing Teams
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    Winner_Found                                           (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
// class UBP_GSC_Team_Raid_C*              Winning_Team                                           (Parm, OutParm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class UBP_GSC_Team_Raid_C*              Losing_Team                                            (Parm, OutParm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    TeamsAreEqual                                          (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ABP_GameState_GunFight_C::Get_Winning_and_Losing_Teams(bool* Winner_Found, class UBP_GSC_Team_Raid_C** Winning_Team, class UBP_GSC_Team_Raid_C** Losing_Team, bool* TeamsAreEqual)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_GameState_GunFight_C", "Get Winning and Losing Teams");

	Params::BP_GameState_GunFight_C_Get_Winning_and_Losing_Teams Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Winner_Found != nullptr)
		*Winner_Found = Parms.Winner_Found;

	if (Winning_Team != nullptr)
		*Winning_Team = Parms.Winning_Team;

	if (Losing_Team != nullptr)
		*Losing_Team = Parms.Losing_Team;

	if (TeamsAreEqual != nullptr)
		*TeamsAreEqual = Parms.TeamsAreEqual;
}


// Function BP_GameState_GunFight.BP_GameState_GunFight_C.DidAttackersWin
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    AttackersWon                                           (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ABP_GameState_GunFight_C::DidAttackersWin(bool* AttackersWon)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_GameState_GunFight_C", "DidAttackersWin");

	Params::BP_GameState_GunFight_C_DidAttackersWin Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (AttackersWon != nullptr)
		*AttackersWon = Parms.AttackersWon;
}


// Function BP_GameState_GunFight.BP_GameState_GunFight_C.Show End Turn Notification To Player
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// EGunFightWinReason                      Win_Reason                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class UBP_GSC_Team_Raid_C*              Winning_Team                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class ABP_PlayerController_GunFight_C*  Player_Controller                                      (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_GameState_GunFight_C::Show_End_Turn_Notification_To_Player(EGunFightWinReason Win_Reason, class UBP_GSC_Team_Raid_C* Winning_Team, class ABP_PlayerController_GunFight_C* Player_Controller)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_GameState_GunFight_C", "Show End Turn Notification To Player");

	Params::BP_GameState_GunFight_C_Show_End_Turn_Notification_To_Player Parms{};

	Parms.Win_Reason = Win_Reason;
	Parms.Winning_Team = Winning_Team;
	Parms.Player_Controller = Player_Controller;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_GameState_GunFight.BP_GameState_GunFight_C.Find Winner Screen
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)

void ABP_GameState_GunFight_C::Find_Winner_Screen()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_GameState_GunFight_C", "Find Winner Screen");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_GameState_GunFight.BP_GameState_GunFight_C.Display Winner Screen
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)

void ABP_GameState_GunFight_C::Display_Winner_Screen()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_GameState_GunFight_C", "Display Winner Screen");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_GameState_GunFight.BP_GameState_GunFight_C.GetScoreboardTabs
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// TArray<struct FStruct_ScoreboardTab>    Tabs                                                   (Parm, OutParm)

void ABP_GameState_GunFight_C::GetScoreboardTabs(TArray<struct FStruct_ScoreboardTab>* Tabs)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_GameState_GunFight_C", "GetScoreboardTabs");

	Params::BP_GameState_GunFight_C_GetScoreboardTabs Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Tabs != nullptr)
		*Tabs = std::move(Parms.Tabs);
}


// Function BP_GameState_GunFight.BP_GameState_GunFight_C.IsLocalPlayerWinning
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    IsWinning                                              (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ABP_GameState_GunFight_C::IsLocalPlayerWinning(bool* IsWinning)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_GameState_GunFight_C", "IsLocalPlayerWinning");

	Params::BP_GameState_GunFight_C_IsLocalPlayerWinning Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (IsWinning != nullptr)
		*IsWinning = Parms.IsWinning;
}


// Function BP_GameState_GunFight.BP_GameState_GunFight_C.Get Current Round Loadout
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    Is_Attacker                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// EGunFightRole                           Role_0                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    Found_Any                                              (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
// struct FStruct_GunFightLoadout          Loadout                                                (Parm, OutParm, HasGetValueTypeHash)

void ABP_GameState_GunFight_C::Get_Current_Round_Loadout(bool Is_Attacker, EGunFightRole Role_0, bool* Found_Any, struct FStruct_GunFightLoadout* Loadout)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_GameState_GunFight_C", "Get Current Round Loadout");

	Params::BP_GameState_GunFight_C_Get_Current_Round_Loadout Parms{};

	Parms.Is_Attacker = Is_Attacker;
	Parms.Role_0 = Role_0;

	UObject::ProcessEvent(Func, &Parms);

	if (Found_Any != nullptr)
		*Found_Any = Parms.Found_Any;

	if (Loadout != nullptr)
		*Loadout = std::move(Parms.Loadout);
}


// Function BP_GameState_GunFight.BP_GameState_GunFight_C.Modify Kill Feed Color By Team
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// struct FStruct_TVTDeathmatch_KillFeed   Kill_Feed_In                                           (BlueprintVisible, BlueprintReadOnly, Parm, HasGetValueTypeHash)
// struct FStruct_TVTDeathmatch_KillFeed   Kill_Feed_Out                                          (Parm, OutParm, HasGetValueTypeHash)

void ABP_GameState_GunFight_C::Modify_Kill_Feed_Color_By_Team(const struct FStruct_TVTDeathmatch_KillFeed& Kill_Feed_In, struct FStruct_TVTDeathmatch_KillFeed* Kill_Feed_Out)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_GameState_GunFight_C", "Modify Kill Feed Color By Team");

	Params::BP_GameState_GunFight_C_Modify_Kill_Feed_Color_By_Team Parms{};

	Parms.Kill_Feed_In = std::move(Kill_Feed_In);

	UObject::ProcessEvent(Func, &Parms);

	if (Kill_Feed_Out != nullptr)
		*Kill_Feed_Out = std::move(Parms.Kill_Feed_Out);
}


// Function BP_GameState_GunFight.BP_GameState_GunFight_C.Show or Hide Spawn Markers
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    Show                                                   (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ABP_GameState_GunFight_C::Show_or_Hide_Spawn_Markers(bool Show)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_GameState_GunFight_C", "Show or Hide Spawn Markers");

	Params::BP_GameState_GunFight_C_Show_or_Hide_Spawn_Markers Parms{};

	Parms.Show = Show;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_GameState_GunFight.BP_GameState_GunFight_C.Clean Loadout Slots
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)

void ABP_GameState_GunFight_C::Clean_Loadout_Slots()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_GameState_GunFight_C", "Clean Loadout Slots");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_GameState_GunFight.BP_GameState_GunFight_C.Clean Loadout Pick Types
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)

void ABP_GameState_GunFight_C::Clean_Loadout_Pick_Types()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_GameState_GunFight_C", "Clean Loadout Pick Types");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_GameState_GunFight.BP_GameState_GunFight_C.SetPlayerStateToLoadoutSlot
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// int32                                   LoadoutIndex                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class ABP_PlayerState_GunFight_C*       PlayerState                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    bIsAttacker                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ABP_GameState_GunFight_C::SetPlayerStateToLoadoutSlot(int32 LoadoutIndex, class ABP_PlayerState_GunFight_C* PlayerState, bool bIsAttacker)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_GameState_GunFight_C", "SetPlayerStateToLoadoutSlot");

	Params::BP_GameState_GunFight_C_SetPlayerStateToLoadoutSlot Parms{};

	Parms.LoadoutIndex = LoadoutIndex;
	Parms.PlayerState = PlayerState;
	Parms.bIsAttacker = bIsAttacker;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_GameState_GunFight.BP_GameState_GunFight_C.GetLoadoutByPlayerState
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// class ABP_PlayerState_GunFight_C*       PlayerState                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    bIsAttacker                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// bool                                    bFoundAny                                              (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
// struct FS_GunFightLoadouts_S12          Loadout                                                (Parm, OutParm, HasGetValueTypeHash)
// int32                                   FoundLoadoutIndex                                      (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_GameState_GunFight_C::GetLoadoutByPlayerState(class ABP_PlayerState_GunFight_C* PlayerState, bool bIsAttacker, bool* bFoundAny, struct FS_GunFightLoadouts_S12* Loadout, int32* FoundLoadoutIndex)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_GameState_GunFight_C", "GetLoadoutByPlayerState");

	Params::BP_GameState_GunFight_C_GetLoadoutByPlayerState Parms{};

	Parms.PlayerState = PlayerState;
	Parms.bIsAttacker = bIsAttacker;

	UObject::ProcessEvent(Func, &Parms);

	if (bFoundAny != nullptr)
		*bFoundAny = Parms.bFoundAny;

	if (Loadout != nullptr)
		*Loadout = std::move(Parms.Loadout);

	if (FoundLoadoutIndex != nullptr)
		*FoundLoadoutIndex = Parms.FoundLoadoutIndex;
}


// Function BP_GameState_GunFight.BP_GameState_GunFight_C.GetLoadoutStateByIndex
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// int32                                   Index_0                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    bIsAttacker                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// bool                                    Valid                                                  (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
// EGunFight_LoadoutState                  State                                                  (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_GameState_GunFight_C::GetLoadoutStateByIndex(int32 Index_0, bool bIsAttacker, bool* Valid, EGunFight_LoadoutState* State)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_GameState_GunFight_C", "GetLoadoutStateByIndex");

	Params::BP_GameState_GunFight_C_GetLoadoutStateByIndex Parms{};

	Parms.Index_0 = Index_0;
	Parms.bIsAttacker = bIsAttacker;

	UObject::ProcessEvent(Func, &Parms);

	if (Valid != nullptr)
		*Valid = Parms.Valid;

	if (State != nullptr)
		*State = Parms.State;
}


// Function BP_GameState_GunFight.BP_GameState_GunFight_C.GetCleanLoadoutStates
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// int32                                   LoadoutCount_0                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// TArray<struct FS_GunFightLoadoutSlot>   NewParam                                               (Parm, OutParm)

void ABP_GameState_GunFight_C::GetCleanLoadoutStates(int32 LoadoutCount_0, TArray<struct FS_GunFightLoadoutSlot>* NewParam)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_GameState_GunFight_C", "GetCleanLoadoutStates");

	Params::BP_GameState_GunFight_C_GetCleanLoadoutStates Parms{};

	Parms.LoadoutCount_0 = LoadoutCount_0;

	UObject::ProcessEvent(Func, &Parms);

	if (NewParam != nullptr)
		*NewParam = std::move(Parms.NewParam);
}


// Function BP_GameState_GunFight.BP_GameState_GunFight_C.SelectMatchLoadouts
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)

void ABP_GameState_GunFight_C::SelectMatchLoadouts()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_GameState_GunFight_C", "SelectMatchLoadouts");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_GameState_GunFight.BP_GameState_GunFight_C.ShowLoadoutPicker
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class ABP_PlayerController_GunFight_C*  PlayerController                                       (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   PreRoundTime                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_GameState_GunFight_C::ShowLoadoutPicker(class ABP_PlayerController_GunFight_C* PlayerController, int32 PreRoundTime)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_GameState_GunFight_C", "ShowLoadoutPicker");

	Params::BP_GameState_GunFight_C_ShowLoadoutPicker Parms{};

	Parms.PlayerController = PlayerController;
	Parms.PreRoundTime = PreRoundTime;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_GameState_GunFight.BP_GameState_GunFight_C.Get Pre Round Time
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// int32                                   Time                                                   (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_GameState_GunFight_C::Get_Pre_Round_Time(int32* Time)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_GameState_GunFight_C", "Get Pre Round Time");

	Params::BP_GameState_GunFight_C_Get_Pre_Round_Time Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Time != nullptr)
		*Time = Parms.Time;
}


// Function BP_GameState_GunFight.BP_GameState_GunFight_C.SavePreviousLoadout
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)

void ABP_GameState_GunFight_C::SavePreviousLoadout()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_GameState_GunFight_C", "SavePreviousLoadout");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_GameState_GunFight.BP_GameState_GunFight_C.ReceivedMatchPhaseReplication
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// E_TeamsMatchPhase                       Match_Phase_0                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_GameState_GunFight_C::ReceivedMatchPhaseReplication(E_TeamsMatchPhase Match_Phase_0)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_GameState_GunFight_C", "ReceivedMatchPhaseReplication");

	Params::BP_GameState_GunFight_C_ReceivedMatchPhaseReplication Parms{};

	Parms.Match_Phase_0 = Match_Phase_0;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_GameState_GunFight.BP_GameState_GunFight_C.Set Lowest Available Index Loadout
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// class ABP_PlayerState_GunFight_C*       PlayerState                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    bIsAttacker                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ABP_GameState_GunFight_C::Set_Lowest_Available_Index_Loadout(class ABP_PlayerState_GunFight_C* PlayerState, bool bIsAttacker)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_GameState_GunFight_C", "Set Lowest Available Index Loadout");

	Params::BP_GameState_GunFight_C_Set_Lowest_Available_Index_Loadout Parms{};

	Parms.PlayerState = PlayerState;
	Parms.bIsAttacker = bIsAttacker;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_GameState_GunFight.BP_GameState_GunFight_C.GetCountOfPlayersWithLoadout
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// int32                                   Index_0                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    bIsAttacker                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// bool                                    Valid                                                  (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
// int32                                   PlayerCount_0                                          (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_GameState_GunFight_C::GetCountOfPlayersWithLoadout(int32 Index_0, bool bIsAttacker, bool* Valid, int32* PlayerCount_0)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_GameState_GunFight_C", "GetCountOfPlayersWithLoadout");

	Params::BP_GameState_GunFight_C_GetCountOfPlayersWithLoadout Parms{};

	Parms.Index_0 = Index_0;
	Parms.bIsAttacker = bIsAttacker;

	UObject::ProcessEvent(Func, &Parms);

	if (Valid != nullptr)
		*Valid = Parms.Valid;

	if (PlayerCount_0 != nullptr)
		*PlayerCount_0 = Parms.PlayerCount_0;
}


// Function BP_GameState_GunFight.BP_GameState_GunFight_C.GetDisconnectedScoreboardRow
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FStruct_GunFightStatistics       Statistics                                             (BlueprintVisible, BlueprintReadOnly, Parm, HasGetValueTypeHash)
// bool                                    WasKicked                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// struct FStruct_ScoreboardRow            ScoreboardRow                                          (Parm, OutParm, HasGetValueTypeHash)

void ABP_GameState_GunFight_C::GetDisconnectedScoreboardRow(const struct FStruct_GunFightStatistics& Statistics, bool WasKicked, struct FStruct_ScoreboardRow* ScoreboardRow)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_GameState_GunFight_C", "GetDisconnectedScoreboardRow");

	Params::BP_GameState_GunFight_C_GetDisconnectedScoreboardRow Parms{};

	Parms.Statistics = std::move(Statistics);
	Parms.WasKicked = WasKicked;

	UObject::ProcessEvent(Func, &Parms);

	if (ScoreboardRow != nullptr)
		*ScoreboardRow = std::move(Parms.ScoreboardRow);
}


// Function BP_GameState_GunFight.BP_GameState_GunFight_C.GetDisconnectedPlayerScoreboardRows
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// bool                                    IsAttacker                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// TArray<struct FStruct_ScoreboardRow>    DisconnectedPlayers                                    (Parm, OutParm)

void ABP_GameState_GunFight_C::GetDisconnectedPlayerScoreboardRows(bool IsAttacker, TArray<struct FStruct_ScoreboardRow>* DisconnectedPlayers)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_GameState_GunFight_C", "GetDisconnectedPlayerScoreboardRows");

	Params::BP_GameState_GunFight_C_GetDisconnectedPlayerScoreboardRows Parms{};

	Parms.IsAttacker = IsAttacker;

	UObject::ProcessEvent(Func, &Parms);

	if (DisconnectedPlayers != nullptr)
		*DisconnectedPlayers = std::move(Parms.DisconnectedPlayers);
}


// Function BP_GameState_GunFight.BP_GameState_GunFight_C.GetThresholdMultiplierForDisconnectedPlayers
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    Attacker                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// float                                   Multiplier                                             (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_GameState_GunFight_C::GetThresholdMultiplierForDisconnectedPlayers(bool Attacker, float* Multiplier)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_GameState_GunFight_C", "GetThresholdMultiplierForDisconnectedPlayers");

	Params::BP_GameState_GunFight_C_GetThresholdMultiplierForDisconnectedPlayers Parms{};

	Parms.Attacker = Attacker;

	UObject::ProcessEvent(Func, &Parms);

	if (Multiplier != nullptr)
		*Multiplier = Parms.Multiplier;
}


// Function BP_GameState_GunFight.BP_GameState_GunFight_C.GetGameModeStringName
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// class FString                           StringName                                             (Parm, OutParm, ZeroConstructor, HasGetValueTypeHash)

void ABP_GameState_GunFight_C::GetGameModeStringName(class FString* StringName)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_GameState_GunFight_C", "GetGameModeStringName");

	Params::BP_GameState_GunFight_C_GetGameModeStringName Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (StringName != nullptr)
		*StringName = std::move(Parms.StringName);
}


// Function BP_GameState_GunFight.BP_GameState_GunFight_C.SetPickTypeByPlayerState
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// class FString                           PickType                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)
// class ABP_PlayerState_GunFight_C*       PlayerState                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_GameState_GunFight_C::SetPickTypeByPlayerState(const class FString& PickType, class ABP_PlayerState_GunFight_C* PlayerState)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_GameState_GunFight_C", "SetPickTypeByPlayerState");

	Params::BP_GameState_GunFight_C_SetPickTypeByPlayerState Parms{};

	Parms.PickType = std::move(PickType);
	Parms.PlayerState = PlayerState;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_GameState_GunFight.BP_GameState_GunFight_C.GetPickTypeByPlayerState
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// class ABP_PlayerState_GunFight_C*       PlayerState                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class FString                           PickType                                               (Parm, OutParm, ZeroConstructor, HasGetValueTypeHash)

void ABP_GameState_GunFight_C::GetPickTypeByPlayerState(class ABP_PlayerState_GunFight_C* PlayerState, class FString* PickType)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_GameState_GunFight_C", "GetPickTypeByPlayerState");

	Params::BP_GameState_GunFight_C_GetPickTypeByPlayerState Parms{};

	Parms.PlayerState = PlayerState;

	UObject::ProcessEvent(Func, &Parms);

	if (PickType != nullptr)
		*PickType = std::move(Parms.PickType);
}


// Function BP_GameState_GunFight.BP_GameState_GunFight_C.CheckLocalPlayerForLoadout
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    HasLoadout                                             (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ABP_GameState_GunFight_C::CheckLocalPlayerForLoadout(bool* HasLoadout)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_GameState_GunFight_C", "CheckLocalPlayerForLoadout");

	Params::BP_GameState_GunFight_C_CheckLocalPlayerForLoadout Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (HasLoadout != nullptr)
		*HasLoadout = Parms.HasLoadout;
}


// Function BP_GameState_GunFight.BP_GameState_GunFight_C.GetRemainingKickVotingTime
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// int32                                   TeamIndex                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   RemainingTime_0                                        (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    VotingActive                                           (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ABP_GameState_GunFight_C::GetRemainingKickVotingTime(int32 TeamIndex, int32* RemainingTime_0, bool* VotingActive)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_GameState_GunFight_C", "GetRemainingKickVotingTime");

	Params::BP_GameState_GunFight_C_GetRemainingKickVotingTime Parms{};

	Parms.TeamIndex = TeamIndex;

	UObject::ProcessEvent(Func, &Parms);

	if (RemainingTime_0 != nullptr)
		*RemainingTime_0 = Parms.RemainingTime_0;

	if (VotingActive != nullptr)
		*VotingActive = Parms.VotingActive;
}


// Function BP_GameState_GunFight.BP_GameState_GunFight_C.Get Remaining Kick Vote Grace Time
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// int32                                   TeamIndex                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   RemainingTime_0                                        (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_GameState_GunFight_C::Get_Remaining_Kick_Vote_Grace_Time(int32 TeamIndex, int32* RemainingTime_0)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_GameState_GunFight_C", "Get Remaining Kick Vote Grace Time");

	Params::BP_GameState_GunFight_C_Get_Remaining_Kick_Vote_Grace_Time Parms{};

	Parms.TeamIndex = TeamIndex;

	UObject::ProcessEvent(Func, &Parms);

	if (RemainingTime_0 != nullptr)
		*RemainingTime_0 = Parms.RemainingTime_0;
}


// Function BP_GameState_GunFight.BP_GameState_GunFight_C.GetVoteKickStartTime
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// int32                                   TeamIndex                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   StartElapsedTime                                       (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_GameState_GunFight_C::GetVoteKickStartTime(int32 TeamIndex, int32* StartElapsedTime)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_GameState_GunFight_C", "GetVoteKickStartTime");

	Params::BP_GameState_GunFight_C_GetVoteKickStartTime Parms{};

	Parms.TeamIndex = TeamIndex;

	UObject::ProcessEvent(Func, &Parms);

	if (StartElapsedTime != nullptr)
		*StartElapsedTime = Parms.StartElapsedTime;
}


// Function BP_GameState_GunFight.BP_GameState_GunFight_C.GetTotalElapsedTimeForNextVoteKick
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// int32                                   TeamIndex                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   StartElapsedTime                                       (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_GameState_GunFight_C::GetTotalElapsedTimeForNextVoteKick(int32 TeamIndex, int32* StartElapsedTime)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_GameState_GunFight_C", "GetTotalElapsedTimeForNextVoteKick");

	Params::BP_GameState_GunFight_C_GetTotalElapsedTimeForNextVoteKick Parms{};

	Parms.TeamIndex = TeamIndex;

	UObject::ProcessEvent(Func, &Parms);

	if (StartElapsedTime != nullptr)
		*StartElapsedTime = Parms.StartElapsedTime;
}


// Function BP_GameState_GunFight.BP_GameState_GunFight_C.GetIsActiveKickVoting
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// int32                                   TeamIndex                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)

bool ABP_GameState_GunFight_C::GetIsActiveKickVoting(int32 TeamIndex)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_GameState_GunFight_C", "GetIsActiveKickVoting");

	Params::BP_GameState_GunFight_C_GetIsActiveKickVoting Parms{};

	Parms.TeamIndex = TeamIndex;

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function BP_GameState_GunFight.BP_GameState_GunFight_C.Check if Every Player Picked aLoadout
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// bool                                    EveryPlayerPicked                                      (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ABP_GameState_GunFight_C::Check_if_Every_Player_Picked_aLoadout(bool* EveryPlayerPicked)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_GameState_GunFight_C", "Check if Every Player Picked aLoadout");

	Params::BP_GameState_GunFight_C_Check_if_Every_Player_Picked_aLoadout Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (EveryPlayerPicked != nullptr)
		*EveryPlayerPicked = Parms.EveryPlayerPicked;
}

}

