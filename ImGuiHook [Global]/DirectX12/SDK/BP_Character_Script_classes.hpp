#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_Character_Script

#include "Basic.hpp"

#include "Flame_structs.hpp"
#include "ECameraFadeState_structs.hpp"
#include "Engine_structs.hpp"
#include "S_ParticleTriggerEffectArray_structs.hpp"
#include "CoreUObject_structs.hpp"
#include "S_BulletIndicators_structs.hpp"
#include "E_Character_JamStatus_structs.hpp"
#include "E_ParticleTriggerConditions_structs.hpp"
#include "BP_Character_classes.hpp"
#include "E_Actions_structs.hpp"
#include "PhysicsCore_structs.hpp"


namespace SDK
{

// BlueprintGeneratedClass BP_Character_Script.BP_Character_Script_C
// 0x0300 (0x11C0 - 0x0EC0)
class ABP_Character_Script_C : public ABP_Character_C
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame_BP_Character_Script_C;              // 0x0EB8(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class UBP_MeshParticleTrigger_Component_C*    BP_MeshParticleTrigger_Component;                  // 0x0EC0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UChildActorComponent*                   BP_VegetationAffector_Player;                      // 0x0EC8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UBP_Poisons_TEMP_PoC_C*                 BP_Poisons_TEMP_PoC;                               // 0x0ED0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UBP_Component_StatusEffects_C*          BP_Component_StatusEffects;                        // 0x0ED8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UBP_StateMachineDebugComponent_C*       BP_ActionMachineDebugComponent;                    // 0x0EE0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UPostProcessComponent*                  HoldBreathPostProcess;                             // 0x0EE8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UParticleSystemComponent*               PS_Breath_smoke_01;                                // 0x0EF0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UAudioComponent*                        WaterFlowSound;                                    // 0x0EF8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UAudioComponent*                        SC_Ladder_Slide_Metal_Loop;                        // 0x0F00(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UAudioComponent*                        GeigerCounterAudio;                                // 0x0F08(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UPostProcessComponent*                  RadiationPostProcess;                              // 0x0F10(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	bool                                          IsMapOpened;                                       // 0x0F18(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          IsInMenu;                                          // 0x0F19(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          bIsInExitArea;                                     // 0x0F1A(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_F1B[0x5];                                      // 0x0F1B(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	class UUI_LeaveArea_Message_C*                ExitAreaWidget;                                    // 0x0F20(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         HitDir_GaugePercentage;                            // 0x0F28(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         HitDir_GaugeStart_Front;                           // 0x0F2C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         HitDir_GaugeStart_Left;                            // 0x0F30(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         HitDir_GaugeStart_Right;                           // 0x0F34(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         HitDir_GaugeStart_Back;                            // 0x0F38(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         HitDir_GaugeStart_BackLeft;                        // 0x0F3C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         HitDir_GaugeStart_BackRight;                       // 0x0F40(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         HitDir_GaugeStart_FrontLeft;                       // 0x0F44(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         HitDir_GaugeStart_FrontRight;                      // 0x0F48(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         HitDir_Hide_Delay;                                 // 0x0F4C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UUI_HealthDebug_C*                      CheatHealthDebug;                                  // 0x0F50(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Current_Radiation_exposure;                        // 0x0F58(0x0004)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Rad_Damage_Taken;                                  // 0x0F5C(0x0004)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UUI_ShowPlayerLocation_C*               CheatShowPlayerLocation;                           // 0x0F60(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UUI_PlayersMenu_C*                      CheatShowPlayersInSession;                         // 0x0F68(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UWBP_ConsumableIndicator_C*             CheatShowConsumableHud;                            // 0x0F70(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UWBP_MachineDebug_C*                    CheatShowMachineHud;                               // 0x0F78(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           TransparentFogColor;                               // 0x0F80(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UUI_ShowActorDisplayName_C*             UI_ShowTracedActorDisplayName;                     // 0x0F90(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         AccumulatedRads;                                   // 0x0F98(0x0004)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ECloudDeathCauseType                          Caused_of_Death;                                   // 0x0F9C(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ECameraFadeState                              CameraFadeState;                                   // 0x0F9D(0x0001)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, RepNotify, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_F9E[0x2];                                      // 0x0F9E(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         FadeAlpha;                                         // 0x0FA0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         FadeDuration;                                      // 0x0FA4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UMaterialInstanceDynamic*               CameraFadeMID;                                     // 0x0FA8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<class AHumanCharacter*>                AttackersThisFrame;                                // 0x0FB0(0x0010)(Edit, BlueprintVisible, DisableEditOnTemplate, DisableEditOnInstance)
	class UAudioComponent*                        LastInjurySound;                                   // 0x0FC0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          WasSlidingInLastTick;                              // 0x0FC8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_FC9[0x7];                                      // 0x0FC9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UAudioComponent*                        LadderSound;                                       // 0x0FD0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UUI_PlayerCount_C*                      UI_PlayerCountWidget;                              // 0x0FD8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          WaterLandingTriggered;                             // 0x0FE0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          Cloud_Inventory_Loaded;                            // 0x0FE1(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          Cloud_Customizations_Loaded;                       // 0x0FE2(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_FE3[0x5];                                      // 0x0FE3(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	FMulticastInlineDelegateProperty_             Player_Scored_a_Kill;                              // 0x0FE8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	TMap<class FName, class UStaticMeshComponent*> MeshesInSockets;                                   // 0x0FF8(0x0050)(Edit, BlueprintVisible, DisableEditOnInstance, ContainsInstancedReference)
	class UCurveFloat*                            HoldBreathWeightCurve;                             // 0x1048(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UUI_HUD_C*                              HUD_Widget;                                        // 0x1050(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsHealthPPVisible;                                 // 0x1058(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_1059[0x7];                                     // 0x1059(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTimerHandle                           HealthPPTimer;                                     // 0x1060(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	float                                         HealthPPPulsesPerSec;                              // 0x1068(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         HealthPPMaxBlendWeight;                            // 0x106C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UAudioComponent*                        HitAudioComponent;                                 // 0x1070(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Jammers_Active;                                    // 0x1078(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_107C[0x4];                                     // 0x107C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UUI_PersistentIconHolder_C*             Persistent_Icon_Holder;                            // 0x1080(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<class APersistentItem*>                Persistent_Item_Icons_Last_Check;                  // 0x1088(0x0010)(Edit, BlueprintVisible, DisableEditOnTemplate, DisableEditOnInstance)
	struct FTimerHandle                           Persistent_Icon_Check_Timer;                       // 0x1098(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	bool                                          Was_Jammed_Last_Change;                            // 0x10A0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          IsFreezing;                                        // 0x10A1(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_10A2[0x6];                                     // 0x10A2(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class UMaterialInstanceDynamic*               FreezingMaterial;                                  // 0x10A8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FWeightedBlendable                     FreezingPostProcess;                               // 0x10B0(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor)
	float                                         MinVelocityToProduceRipples;                       // 0x10C0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         MinWaterFlowToProduceRipples;                      // 0x10C4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Friendly_Jammers_Active;                           // 0x10C8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	E_Character_JamStatus                         JamStatus;                                         // 0x10CC(0x0001)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_10CD[0x3];                                     // 0x10CD(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class UUI_HitIndication_C*>            BulletIndications;                                 // 0x10D0(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance, ContainsInstancedReference)
	int32                                         ActiveIndicators;                                  // 0x10E0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_10E4[0x4];                                     // 0x10E4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FS_BulletIndicators>            HitIndicators;                                     // 0x10E8(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance, ContainsInstancedReference)
	class UUI_HitIndications_C*                   HitIndicatorsWidget;                               // 0x10F8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TMap<class FName, class UParticleSystemComponent*> UsedMeshParticles;                                 // 0x1100(0x0050)(Edit, BlueprintVisible, DisableEditOnInstance, ContainsInstancedReference)
	TMap<E_ParticleTriggerConditions, struct FS_ParticleTriggerEffectArray> TriggerToUsedParticles;                            // 0x1150(0x0050)(Edit, BlueprintVisible, DisableEditOnInstance, ContainsInstancedReference)
	FMulticastInlineDelegateProperty_             Character_Scored_a_Kill;                           // 0x11A0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	float                                         LastParticleTriggerTime;                           // 0x11B0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         AccumulatedDamage;                                 // 0x11B4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FTimerHandle                           HitTimer;                                          // 0x11B8(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)

public:
	void Player_Scored_a_Kill__DelegateSignature(class ABP_PlayerController_Script_C* Killer, class ABP_PlayerController_Script_C* Victim);
	void Character_Scored_a_Kill__DelegateSignature();
	void ExecuteUbergraph_BP_Character_Script(int32 EntryPoint);
	void UnbindPesrsitentItemChanged();
	void BindPersistentItemChanged();
	void OnPersistentsChangedClient_Event_0(const class AHumanCharacter* Sender, const struct FPersistentChange& Change);
	void AccumulateDamage(float Damage, EDamageType DamageType);
	void OnAgregatedDamage();
	void DelayedOnHit();
	void EventOnStanceChanged(EStance NewStance);
	void CharacterScoreKill();
	void Buried_cache_Minus_send_message_about_missing_Cache_Key();
	void PlayerLootedLockedContainer();
	void ShowGrenadeIndicator(class AGrenade* Grenade);
	void UpdateAnimsAfterCustomizationChanges();
	void RecheckLoadedUniformMesh();
	void CustomEvent_0(class AHumanCharacter* Sender, class UInventoryCustomizationComponent* Inventory_0);
	void CheckForJiggleOnceClothesLoad();
	void DEBU_MovSpeedLoop();
	void DEBUG_MovementSpeed(int32 Param);
	void CheckForOffset_Exceptions();
	void UpdateAfterCustomizationChanges();
	void Stop_Radiation_Effects_on_Spectator();
	void ReceivePossessed(class AController* NewController);
	void Set_Freezing_Effect(bool Enabled, float CurrentValue, float DamageThreshold, float MaxValue);
	void OnPingPressed();
	void ShowBulletIndicatorNative(bool bIsPlayerHit, EDamageType DamageType, const class AHumanCharacter* PlayerInstigator, const struct FVector& Origin, const struct FHitResultSimplified& HitOptimised);
	void Start_Check_Persistent_Item_Icons();
	void Replicate_Jammers_Active(int32 Jammers_Active_0, int32 Friendly_Jammers_Active_0);
	void Stepped_Out_of_Jammed_Area(bool Friendly_jammer);
	void Stepped_Into_Jammed_Area(bool Friendly_jammer);
	void Scored_a_Kill(class ABP_PlayerController_Script_C* Killer, class ABP_PlayerController_Script_C* Victim, class UClass* Instigating_Item, bool Headshot, bool Teamkill);
	void OnLeaveCountdownFinished();
	void EventCheckHealthValue();
	void UpdateHealthPP(bool IsHealthPPVisible_0);
	void Hide_Mesh_In_Socket(class FName SocketName);
	void Show_Mesh_In_Socket(class FName SocketName, class UStaticMesh* NewMesh, const struct FTransform& NewTransform);
	void EventShowBloodOnHUD(float DamageAmount, EDamageType DamageType);
	void BndEvt__Mesh_K2Node_ComponentBoundEvent_4_ComponentHitSignature__DelegateSignature(class UPrimitiveComponent* HitComponent, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, const struct FVector& NormalImpulse, const struct FHitResult& Hit);
	void BndEvt__Customization_K2Node_ComponentBoundEvent_3_CustomizationFromCloudLoadedClient__DelegateSignature(class AHumanCharacter* Sender, class UInventoryCustomizationComponent* Inventory_0);
	void BndEvt__Customization_K2Node_ComponentBoundEvent_2_CustomizationFromCloudLoadedAuthority__DelegateSignature(class AHumanCharacter* Sender, class UInventoryCustomizationComponent* Inventory_0);
	void BndEvt__Inventory_K2Node_ComponentBoundEvent_1_InventoryFromCloudLoadedClient__DelegateSignature(class AHumanCharacter* Sender, class UInventoryComponent* Inventory_0);
	void BndEvt__Inventory_K2Node_ComponentBoundEvent_0_InventoryFromCloudLoadedAuthority__DelegateSignature(class AHumanCharacter* Sender, class UInventoryComponent* Inventory_0);
	void StopRadiationEffects();
	void InWaterTick(float DeltaTime);
	void OnPlayerExitWater();
	void OnPlayerEnterWater(const struct FVector& ImpactLocation, float WaterDepthAtImpact, float WaterDepthInFront);
	void OnLanded(const struct FHitResult& Hit);
	void OnJumped();
	void OnTakeDamage(float DamageAmount, EDamageType DamageType, const class AHumanCharacter* InstigatingActor, TSubclassOf<class AItem> InstigatingItemClass, const struct FHitResultSimplified& HitOptimised, const TArray<TSubclassOf<class AItem>>& AffectedItems);
	void Clear_Stored_Attackers_of_the_Frame();
	void SetCameraFadeState(ECameraFadeState NewFadeState);
	void ReceiveOnFire();
	void UpdateRadiationEffects(float Current_exposure, float Max_Exposure);
	void Die(float DamageAmount, EDamageType DamageType, class AHumanCharacter* InstigatingCharacter, TSubclassOf<class AItem> InstigatingItem, const struct FHitResult& HitResult);
	void ReceiveTick(float DeltaSeconds);
	void ReceiveBeginPlay();
	void CloseUI_NotifyPlayableExit();
	void OpenUI_NotifyPlayableExit();
	void Cheat_Show_Player_Count(bool Show_Player_Count_State);
	void Cheat_Get_Actor_Display_Name();
	void Cheat_Get_Actor_Display_Name_Timer(bool Toggle_Get_Actor_Display_Name_Timer);
	void Cheat_Toggle_Show_Actor_Display_Name(bool ToggleShowTracedActorDisplayName);
	void Cheat_Spawn_3D_Debug_Blocking_Volumes(bool Toggle_3d_Debug_Blocking_Volumes);
	void Cheat_Spawn_3D_Debug_Player(bool Toggle3dDebugPlayer);
	void Cheat_Spawn_3D_Debug_Player_Starts(bool Toggle3dDebugPlayerStarts);
	void Cheat_Spawn_3D_Debug_Loot_Spawns(bool Toggle3dDebugLootSpawns);
	void Cheat_Spawn_3D_Debug_Spawned_Loot(bool Toggle3dDebugSpawnedLoot);
	void Cheat_Spawn_3D_Debug_Objective_Spawns(bool Toggle3dDebugObjectiveSpawns);
	void Cheat_Spawn_3D_Debug_Objective_Items(bool Toggle3dDebugObjectiveItems);
	void Cheat_Spawn_3D_Debug_Resource_Items(bool Toggle3dDebugResourceItems);
	void Cheat_Set_Machine_Hud(bool ToggleMachineHud);
	void Cheat_Set_Consumable_Hud(bool Toggle_Consumable_Hud);
	void Cheat_Spawn_3D_Debug(bool Toggle3dDebug);
	void Cheat_Draw_Game_Mode_Debug(class UClass* WidgetToDraw);
	void Cheat_Show_Players_In_Session(bool ShowPlayersInSessionState);
	void Cheat_Show_Player_Location(bool Show_Player_Location_State);
	void Cheat_Draw_FOV_Selection();
	void Cheat_Draw_Definable_Damage();
	void Cheat_Draw_Health_Debug(bool Health_Debug_State);
	void Cheat_Infinite_Ammo();
	void TriggerMeshSpecificParticle(E_ParticleTriggerConditions TriggerType, bool HandleReplicationYourself);
	void PutMapToRightHand();
	void ClearRightHand();
	void PutKitchenTimerToRightHand();
	void AnimHitReaction(class FName BoneName, const struct FVector& HitNormal, float Impact);
	void AnimInteraction(E_Actions Action, bool Interrupt);
	void UserConstructionScript();
	void RespawnPlayerToShelter();
	void Handle3dDebug(bool Condition, TSoftClassPtr<class UClass> ActorToDebug, TSoftClassPtr<class UClass> VisualizationActor, class UMaterialInterface* VisualizedActorMaterial, class FName TagName);
	void OnRep_CameraFadeState();
	void HandleLadderSlide();
	void HandleWaterLanding(bool HitWaterSurface, const struct FVector& ImpactLocation, float WaterDepthAtImpact, float WaterDepthInFront);
	void HandleWaterTick();
	void HandleOnHitSounds(class UPrimitiveComponent* HitComponent, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, const struct FVector& NormalImpulse, const struct FHitResult& Hit);
	void Show_Bullet_Indicator(bool IsPlayerHit, const struct FVector& BulletOrigin, const struct FHitResultSimplified& HitOptimised, EDamageType DamageType, class AHumanCharacter* Instigator_0);
	void ShowBloodOnHUD(float DamageAmount, EDamageType DamageType);
	void UpdateHoldBreathPP();
	void Update_Map_Tool();
	void Check_Persistent_Item_Icons();
	void Handle_Freezing_Effect(bool Enabled, float Current_Value, float Damage_Threshold, float Max_Value);
	void ShowIndicatorGrenade(class AGrenade* Grenade);
	void GetCurrentJiggle(bool* Success);
	void Handle_radiation_status_effect_icons();
	void CreateBulletIndications(int32 IndicatorsToCreate, class UUI_HitIndication_C** OutputPin);
	void OnArmorPlateDestroyed(class AHumanCharacter* Character);

	void GetMovementSoundProperties(const class USoundBase* Sound, float* VolumeMultiplier, float* PitchMultiplier) const;
	void GetCharacterWeightSoundProperties(float* VolumeMultiplier, float* PitchMultiplier) const;

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BP_Character_Script_C">();
	}
	static class ABP_Character_Script_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<ABP_Character_Script_C>();
	}
};
static_assert(alignof(ABP_Character_Script_C) == 0x000010, "Wrong alignment on ABP_Character_Script_C");
static_assert(sizeof(ABP_Character_Script_C) == 0x0011C0, "Wrong size on ABP_Character_Script_C");
static_assert(offsetof(ABP_Character_Script_C, UberGraphFrame_BP_Character_Script_C) == 0x000EB8, "Member 'ABP_Character_Script_C::UberGraphFrame_BP_Character_Script_C' has a wrong offset!");
static_assert(offsetof(ABP_Character_Script_C, BP_MeshParticleTrigger_Component) == 0x000EC0, "Member 'ABP_Character_Script_C::BP_MeshParticleTrigger_Component' has a wrong offset!");
static_assert(offsetof(ABP_Character_Script_C, BP_VegetationAffector_Player) == 0x000EC8, "Member 'ABP_Character_Script_C::BP_VegetationAffector_Player' has a wrong offset!");
static_assert(offsetof(ABP_Character_Script_C, BP_Poisons_TEMP_PoC) == 0x000ED0, "Member 'ABP_Character_Script_C::BP_Poisons_TEMP_PoC' has a wrong offset!");
static_assert(offsetof(ABP_Character_Script_C, BP_Component_StatusEffects) == 0x000ED8, "Member 'ABP_Character_Script_C::BP_Component_StatusEffects' has a wrong offset!");
static_assert(offsetof(ABP_Character_Script_C, BP_ActionMachineDebugComponent) == 0x000EE0, "Member 'ABP_Character_Script_C::BP_ActionMachineDebugComponent' has a wrong offset!");
static_assert(offsetof(ABP_Character_Script_C, HoldBreathPostProcess) == 0x000EE8, "Member 'ABP_Character_Script_C::HoldBreathPostProcess' has a wrong offset!");
static_assert(offsetof(ABP_Character_Script_C, PS_Breath_smoke_01) == 0x000EF0, "Member 'ABP_Character_Script_C::PS_Breath_smoke_01' has a wrong offset!");
static_assert(offsetof(ABP_Character_Script_C, WaterFlowSound) == 0x000EF8, "Member 'ABP_Character_Script_C::WaterFlowSound' has a wrong offset!");
static_assert(offsetof(ABP_Character_Script_C, SC_Ladder_Slide_Metal_Loop) == 0x000F00, "Member 'ABP_Character_Script_C::SC_Ladder_Slide_Metal_Loop' has a wrong offset!");
static_assert(offsetof(ABP_Character_Script_C, GeigerCounterAudio) == 0x000F08, "Member 'ABP_Character_Script_C::GeigerCounterAudio' has a wrong offset!");
static_assert(offsetof(ABP_Character_Script_C, RadiationPostProcess) == 0x000F10, "Member 'ABP_Character_Script_C::RadiationPostProcess' has a wrong offset!");
static_assert(offsetof(ABP_Character_Script_C, IsMapOpened) == 0x000F18, "Member 'ABP_Character_Script_C::IsMapOpened' has a wrong offset!");
static_assert(offsetof(ABP_Character_Script_C, IsInMenu) == 0x000F19, "Member 'ABP_Character_Script_C::IsInMenu' has a wrong offset!");
static_assert(offsetof(ABP_Character_Script_C, bIsInExitArea) == 0x000F1A, "Member 'ABP_Character_Script_C::bIsInExitArea' has a wrong offset!");
static_assert(offsetof(ABP_Character_Script_C, ExitAreaWidget) == 0x000F20, "Member 'ABP_Character_Script_C::ExitAreaWidget' has a wrong offset!");
static_assert(offsetof(ABP_Character_Script_C, HitDir_GaugePercentage) == 0x000F28, "Member 'ABP_Character_Script_C::HitDir_GaugePercentage' has a wrong offset!");
static_assert(offsetof(ABP_Character_Script_C, HitDir_GaugeStart_Front) == 0x000F2C, "Member 'ABP_Character_Script_C::HitDir_GaugeStart_Front' has a wrong offset!");
static_assert(offsetof(ABP_Character_Script_C, HitDir_GaugeStart_Left) == 0x000F30, "Member 'ABP_Character_Script_C::HitDir_GaugeStart_Left' has a wrong offset!");
static_assert(offsetof(ABP_Character_Script_C, HitDir_GaugeStart_Right) == 0x000F34, "Member 'ABP_Character_Script_C::HitDir_GaugeStart_Right' has a wrong offset!");
static_assert(offsetof(ABP_Character_Script_C, HitDir_GaugeStart_Back) == 0x000F38, "Member 'ABP_Character_Script_C::HitDir_GaugeStart_Back' has a wrong offset!");
static_assert(offsetof(ABP_Character_Script_C, HitDir_GaugeStart_BackLeft) == 0x000F3C, "Member 'ABP_Character_Script_C::HitDir_GaugeStart_BackLeft' has a wrong offset!");
static_assert(offsetof(ABP_Character_Script_C, HitDir_GaugeStart_BackRight) == 0x000F40, "Member 'ABP_Character_Script_C::HitDir_GaugeStart_BackRight' has a wrong offset!");
static_assert(offsetof(ABP_Character_Script_C, HitDir_GaugeStart_FrontLeft) == 0x000F44, "Member 'ABP_Character_Script_C::HitDir_GaugeStart_FrontLeft' has a wrong offset!");
static_assert(offsetof(ABP_Character_Script_C, HitDir_GaugeStart_FrontRight) == 0x000F48, "Member 'ABP_Character_Script_C::HitDir_GaugeStart_FrontRight' has a wrong offset!");
static_assert(offsetof(ABP_Character_Script_C, HitDir_Hide_Delay) == 0x000F4C, "Member 'ABP_Character_Script_C::HitDir_Hide_Delay' has a wrong offset!");
static_assert(offsetof(ABP_Character_Script_C, CheatHealthDebug) == 0x000F50, "Member 'ABP_Character_Script_C::CheatHealthDebug' has a wrong offset!");
static_assert(offsetof(ABP_Character_Script_C, Current_Radiation_exposure) == 0x000F58, "Member 'ABP_Character_Script_C::Current_Radiation_exposure' has a wrong offset!");
static_assert(offsetof(ABP_Character_Script_C, Rad_Damage_Taken) == 0x000F5C, "Member 'ABP_Character_Script_C::Rad_Damage_Taken' has a wrong offset!");
static_assert(offsetof(ABP_Character_Script_C, CheatShowPlayerLocation) == 0x000F60, "Member 'ABP_Character_Script_C::CheatShowPlayerLocation' has a wrong offset!");
static_assert(offsetof(ABP_Character_Script_C, CheatShowPlayersInSession) == 0x000F68, "Member 'ABP_Character_Script_C::CheatShowPlayersInSession' has a wrong offset!");
static_assert(offsetof(ABP_Character_Script_C, CheatShowConsumableHud) == 0x000F70, "Member 'ABP_Character_Script_C::CheatShowConsumableHud' has a wrong offset!");
static_assert(offsetof(ABP_Character_Script_C, CheatShowMachineHud) == 0x000F78, "Member 'ABP_Character_Script_C::CheatShowMachineHud' has a wrong offset!");
static_assert(offsetof(ABP_Character_Script_C, TransparentFogColor) == 0x000F80, "Member 'ABP_Character_Script_C::TransparentFogColor' has a wrong offset!");
static_assert(offsetof(ABP_Character_Script_C, UI_ShowTracedActorDisplayName) == 0x000F90, "Member 'ABP_Character_Script_C::UI_ShowTracedActorDisplayName' has a wrong offset!");
static_assert(offsetof(ABP_Character_Script_C, AccumulatedRads) == 0x000F98, "Member 'ABP_Character_Script_C::AccumulatedRads' has a wrong offset!");
static_assert(offsetof(ABP_Character_Script_C, Caused_of_Death) == 0x000F9C, "Member 'ABP_Character_Script_C::Caused_of_Death' has a wrong offset!");
static_assert(offsetof(ABP_Character_Script_C, CameraFadeState) == 0x000F9D, "Member 'ABP_Character_Script_C::CameraFadeState' has a wrong offset!");
static_assert(offsetof(ABP_Character_Script_C, FadeAlpha) == 0x000FA0, "Member 'ABP_Character_Script_C::FadeAlpha' has a wrong offset!");
static_assert(offsetof(ABP_Character_Script_C, FadeDuration) == 0x000FA4, "Member 'ABP_Character_Script_C::FadeDuration' has a wrong offset!");
static_assert(offsetof(ABP_Character_Script_C, CameraFadeMID) == 0x000FA8, "Member 'ABP_Character_Script_C::CameraFadeMID' has a wrong offset!");
static_assert(offsetof(ABP_Character_Script_C, AttackersThisFrame) == 0x000FB0, "Member 'ABP_Character_Script_C::AttackersThisFrame' has a wrong offset!");
static_assert(offsetof(ABP_Character_Script_C, LastInjurySound) == 0x000FC0, "Member 'ABP_Character_Script_C::LastInjurySound' has a wrong offset!");
static_assert(offsetof(ABP_Character_Script_C, WasSlidingInLastTick) == 0x000FC8, "Member 'ABP_Character_Script_C::WasSlidingInLastTick' has a wrong offset!");
static_assert(offsetof(ABP_Character_Script_C, LadderSound) == 0x000FD0, "Member 'ABP_Character_Script_C::LadderSound' has a wrong offset!");
static_assert(offsetof(ABP_Character_Script_C, UI_PlayerCountWidget) == 0x000FD8, "Member 'ABP_Character_Script_C::UI_PlayerCountWidget' has a wrong offset!");
static_assert(offsetof(ABP_Character_Script_C, WaterLandingTriggered) == 0x000FE0, "Member 'ABP_Character_Script_C::WaterLandingTriggered' has a wrong offset!");
static_assert(offsetof(ABP_Character_Script_C, Cloud_Inventory_Loaded) == 0x000FE1, "Member 'ABP_Character_Script_C::Cloud_Inventory_Loaded' has a wrong offset!");
static_assert(offsetof(ABP_Character_Script_C, Cloud_Customizations_Loaded) == 0x000FE2, "Member 'ABP_Character_Script_C::Cloud_Customizations_Loaded' has a wrong offset!");
static_assert(offsetof(ABP_Character_Script_C, Player_Scored_a_Kill) == 0x000FE8, "Member 'ABP_Character_Script_C::Player_Scored_a_Kill' has a wrong offset!");
static_assert(offsetof(ABP_Character_Script_C, MeshesInSockets) == 0x000FF8, "Member 'ABP_Character_Script_C::MeshesInSockets' has a wrong offset!");
static_assert(offsetof(ABP_Character_Script_C, HoldBreathWeightCurve) == 0x001048, "Member 'ABP_Character_Script_C::HoldBreathWeightCurve' has a wrong offset!");
static_assert(offsetof(ABP_Character_Script_C, HUD_Widget) == 0x001050, "Member 'ABP_Character_Script_C::HUD_Widget' has a wrong offset!");
static_assert(offsetof(ABP_Character_Script_C, IsHealthPPVisible) == 0x001058, "Member 'ABP_Character_Script_C::IsHealthPPVisible' has a wrong offset!");
static_assert(offsetof(ABP_Character_Script_C, HealthPPTimer) == 0x001060, "Member 'ABP_Character_Script_C::HealthPPTimer' has a wrong offset!");
static_assert(offsetof(ABP_Character_Script_C, HealthPPPulsesPerSec) == 0x001068, "Member 'ABP_Character_Script_C::HealthPPPulsesPerSec' has a wrong offset!");
static_assert(offsetof(ABP_Character_Script_C, HealthPPMaxBlendWeight) == 0x00106C, "Member 'ABP_Character_Script_C::HealthPPMaxBlendWeight' has a wrong offset!");
static_assert(offsetof(ABP_Character_Script_C, HitAudioComponent) == 0x001070, "Member 'ABP_Character_Script_C::HitAudioComponent' has a wrong offset!");
static_assert(offsetof(ABP_Character_Script_C, Jammers_Active) == 0x001078, "Member 'ABP_Character_Script_C::Jammers_Active' has a wrong offset!");
static_assert(offsetof(ABP_Character_Script_C, Persistent_Icon_Holder) == 0x001080, "Member 'ABP_Character_Script_C::Persistent_Icon_Holder' has a wrong offset!");
static_assert(offsetof(ABP_Character_Script_C, Persistent_Item_Icons_Last_Check) == 0x001088, "Member 'ABP_Character_Script_C::Persistent_Item_Icons_Last_Check' has a wrong offset!");
static_assert(offsetof(ABP_Character_Script_C, Persistent_Icon_Check_Timer) == 0x001098, "Member 'ABP_Character_Script_C::Persistent_Icon_Check_Timer' has a wrong offset!");
static_assert(offsetof(ABP_Character_Script_C, Was_Jammed_Last_Change) == 0x0010A0, "Member 'ABP_Character_Script_C::Was_Jammed_Last_Change' has a wrong offset!");
static_assert(offsetof(ABP_Character_Script_C, IsFreezing) == 0x0010A1, "Member 'ABP_Character_Script_C::IsFreezing' has a wrong offset!");
static_assert(offsetof(ABP_Character_Script_C, FreezingMaterial) == 0x0010A8, "Member 'ABP_Character_Script_C::FreezingMaterial' has a wrong offset!");
static_assert(offsetof(ABP_Character_Script_C, FreezingPostProcess) == 0x0010B0, "Member 'ABP_Character_Script_C::FreezingPostProcess' has a wrong offset!");
static_assert(offsetof(ABP_Character_Script_C, MinVelocityToProduceRipples) == 0x0010C0, "Member 'ABP_Character_Script_C::MinVelocityToProduceRipples' has a wrong offset!");
static_assert(offsetof(ABP_Character_Script_C, MinWaterFlowToProduceRipples) == 0x0010C4, "Member 'ABP_Character_Script_C::MinWaterFlowToProduceRipples' has a wrong offset!");
static_assert(offsetof(ABP_Character_Script_C, Friendly_Jammers_Active) == 0x0010C8, "Member 'ABP_Character_Script_C::Friendly_Jammers_Active' has a wrong offset!");
static_assert(offsetof(ABP_Character_Script_C, JamStatus) == 0x0010CC, "Member 'ABP_Character_Script_C::JamStatus' has a wrong offset!");
static_assert(offsetof(ABP_Character_Script_C, BulletIndications) == 0x0010D0, "Member 'ABP_Character_Script_C::BulletIndications' has a wrong offset!");
static_assert(offsetof(ABP_Character_Script_C, ActiveIndicators) == 0x0010E0, "Member 'ABP_Character_Script_C::ActiveIndicators' has a wrong offset!");
static_assert(offsetof(ABP_Character_Script_C, HitIndicators) == 0x0010E8, "Member 'ABP_Character_Script_C::HitIndicators' has a wrong offset!");
static_assert(offsetof(ABP_Character_Script_C, HitIndicatorsWidget) == 0x0010F8, "Member 'ABP_Character_Script_C::HitIndicatorsWidget' has a wrong offset!");
static_assert(offsetof(ABP_Character_Script_C, UsedMeshParticles) == 0x001100, "Member 'ABP_Character_Script_C::UsedMeshParticles' has a wrong offset!");
static_assert(offsetof(ABP_Character_Script_C, TriggerToUsedParticles) == 0x001150, "Member 'ABP_Character_Script_C::TriggerToUsedParticles' has a wrong offset!");
static_assert(offsetof(ABP_Character_Script_C, Character_Scored_a_Kill) == 0x0011A0, "Member 'ABP_Character_Script_C::Character_Scored_a_Kill' has a wrong offset!");
static_assert(offsetof(ABP_Character_Script_C, LastParticleTriggerTime) == 0x0011B0, "Member 'ABP_Character_Script_C::LastParticleTriggerTime' has a wrong offset!");
static_assert(offsetof(ABP_Character_Script_C, AccumulatedDamage) == 0x0011B4, "Member 'ABP_Character_Script_C::AccumulatedDamage' has a wrong offset!");
static_assert(offsetof(ABP_Character_Script_C, HitTimer) == 0x0011B8, "Member 'ABP_Character_Script_C::HitTimer' has a wrong offset!");

}

