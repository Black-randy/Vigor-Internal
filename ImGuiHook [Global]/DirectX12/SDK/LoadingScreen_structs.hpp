#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: LoadingScreen

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "Slate_structs.hpp"
#include "SlateCore_structs.hpp"
#include "CoreUObject_structs.hpp"


namespace SDK
{

// Enum LoadingScreen.EOnlineGameMode
// NumValues: 0x000A
enum class EOnlineGameMode : uint8
{
	None                                     = 0,
	Airdrop                                  = 1,
	Compounds                                = 2,
	TVTDeathmatch                            = 3,
	TVTGunfight                              = 4,
	Junkers                                  = 5,
	TVTTomatoFight                           = 6,
	TVTSnowballFight                         = 7,
	TVTPumpkinFight                          = 8,
	EOnlineGameMode_MAX                      = 9,
};

// ScriptStruct LoadingScreen.OnlineGameModeDescriptionTableRow
// 0x0070 (0x0078 - 0x0008)
struct FOnlineGameModeDescriptionTableRow final : public FTableRowBase
{
public:
	EOnlineGameMode                               OnlineGameMode;                                    // 0x0008(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   DisplayName;                                       // 0x0010(0x0018)(Edit, BlueprintVisible, DisableEditOnInstance, NativeAccessSpecifierPublic)
	int32                                         MinGroupSize;                                      // 0x0028(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MaxGroupSize;                                      // 0x002C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bRequiresCrossPlayOn;                              // 0x0030(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bLoneWolfAllowed;                                  // 0x0031(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_32[0x6];                                       // 0x0032(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class FText>                           Rules;                                             // 0x0038(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic)
	class FText                                   LoadoutDescription;                                // 0x0048(0x0018)(Edit, BlueprintVisible, DisableEditOnInstance, NativeAccessSpecifierPublic)
	class FText                                   RewardDescription;                                 // 0x0060(0x0018)(Edit, BlueprintVisible, DisableEditOnInstance, NativeAccessSpecifierPublic)
};
static_assert(alignof(FOnlineGameModeDescriptionTableRow) == 0x000008, "Wrong alignment on FOnlineGameModeDescriptionTableRow");
static_assert(sizeof(FOnlineGameModeDescriptionTableRow) == 0x000078, "Wrong size on FOnlineGameModeDescriptionTableRow");
static_assert(offsetof(FOnlineGameModeDescriptionTableRow, OnlineGameMode) == 0x000008, "Member 'FOnlineGameModeDescriptionTableRow::OnlineGameMode' has a wrong offset!");
static_assert(offsetof(FOnlineGameModeDescriptionTableRow, DisplayName) == 0x000010, "Member 'FOnlineGameModeDescriptionTableRow::DisplayName' has a wrong offset!");
static_assert(offsetof(FOnlineGameModeDescriptionTableRow, MinGroupSize) == 0x000028, "Member 'FOnlineGameModeDescriptionTableRow::MinGroupSize' has a wrong offset!");
static_assert(offsetof(FOnlineGameModeDescriptionTableRow, MaxGroupSize) == 0x00002C, "Member 'FOnlineGameModeDescriptionTableRow::MaxGroupSize' has a wrong offset!");
static_assert(offsetof(FOnlineGameModeDescriptionTableRow, bRequiresCrossPlayOn) == 0x000030, "Member 'FOnlineGameModeDescriptionTableRow::bRequiresCrossPlayOn' has a wrong offset!");
static_assert(offsetof(FOnlineGameModeDescriptionTableRow, bLoneWolfAllowed) == 0x000031, "Member 'FOnlineGameModeDescriptionTableRow::bLoneWolfAllowed' has a wrong offset!");
static_assert(offsetof(FOnlineGameModeDescriptionTableRow, Rules) == 0x000038, "Member 'FOnlineGameModeDescriptionTableRow::Rules' has a wrong offset!");
static_assert(offsetof(FOnlineGameModeDescriptionTableRow, LoadoutDescription) == 0x000048, "Member 'FOnlineGameModeDescriptionTableRow::LoadoutDescription' has a wrong offset!");
static_assert(offsetof(FOnlineGameModeDescriptionTableRow, RewardDescription) == 0x000060, "Member 'FOnlineGameModeDescriptionTableRow::RewardDescription' has a wrong offset!");

// ScriptStruct LoadingScreen.LoadingScreenProperties
// 0x0318 (0x0318 - 0x0000)
struct FLoadingScreenProperties final
{
public:
	float                                         MinimumLoadingScreenDisplayTime;                   // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bAutoCompleteWhenLoadingCompletes;                 // 0x0004(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bMoviesAreSkippable;                               // 0x0005(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bWaitForManualStop;                                // 0x0006(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bShowUIOverlay;                                    // 0x0007(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FText                                   LoadingText;                                       // 0x0008(0x0018)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	struct FSlateFontInfo                         LoadingFont;                                       // 0x0020(0x0058)(Edit, BlueprintVisible, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FSlateBrush                            LoadingSpinner;                                    // 0x0078(0x0088)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	float                                         LoadingSpinnerSpeed;                               // 0x0100(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_104[0x4];                                      // 0x0104(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class FString>                         MoviePaths;                                        // 0x0108(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	struct FSoftObjectPath                        LoadingScreensDataTable;                           // 0x0118(0x0018)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FSoftObjectPath                        OnlineGameModesDataTable;                          // 0x0130(0x0018)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EStretch                                      ImageStretch;                                      // 0x0148(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_149[0x7];                                      // 0x0149(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSlateBrush                            NoImageBrush;                                      // 0x0150(0x0088)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	float                                         LoadingProgressBarHeight;                          // 0x01D8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1DC[0x4];                                      // 0x01DC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSlateColor                            LoadingProgressBarColor;                           // 0x01E0(0x0028)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	struct FSlateBrush                            LoadingProgressBarFillImage;                       // 0x0208(0x0088)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	struct FSlateBrush                            LoadingProgressBarBackgroundImage;                 // 0x0290(0x0088)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
};
static_assert(alignof(FLoadingScreenProperties) == 0x000008, "Wrong alignment on FLoadingScreenProperties");
static_assert(sizeof(FLoadingScreenProperties) == 0x000318, "Wrong size on FLoadingScreenProperties");
static_assert(offsetof(FLoadingScreenProperties, MinimumLoadingScreenDisplayTime) == 0x000000, "Member 'FLoadingScreenProperties::MinimumLoadingScreenDisplayTime' has a wrong offset!");
static_assert(offsetof(FLoadingScreenProperties, bAutoCompleteWhenLoadingCompletes) == 0x000004, "Member 'FLoadingScreenProperties::bAutoCompleteWhenLoadingCompletes' has a wrong offset!");
static_assert(offsetof(FLoadingScreenProperties, bMoviesAreSkippable) == 0x000005, "Member 'FLoadingScreenProperties::bMoviesAreSkippable' has a wrong offset!");
static_assert(offsetof(FLoadingScreenProperties, bWaitForManualStop) == 0x000006, "Member 'FLoadingScreenProperties::bWaitForManualStop' has a wrong offset!");
static_assert(offsetof(FLoadingScreenProperties, bShowUIOverlay) == 0x000007, "Member 'FLoadingScreenProperties::bShowUIOverlay' has a wrong offset!");
static_assert(offsetof(FLoadingScreenProperties, LoadingText) == 0x000008, "Member 'FLoadingScreenProperties::LoadingText' has a wrong offset!");
static_assert(offsetof(FLoadingScreenProperties, LoadingFont) == 0x000020, "Member 'FLoadingScreenProperties::LoadingFont' has a wrong offset!");
static_assert(offsetof(FLoadingScreenProperties, LoadingSpinner) == 0x000078, "Member 'FLoadingScreenProperties::LoadingSpinner' has a wrong offset!");
static_assert(offsetof(FLoadingScreenProperties, LoadingSpinnerSpeed) == 0x000100, "Member 'FLoadingScreenProperties::LoadingSpinnerSpeed' has a wrong offset!");
static_assert(offsetof(FLoadingScreenProperties, MoviePaths) == 0x000108, "Member 'FLoadingScreenProperties::MoviePaths' has a wrong offset!");
static_assert(offsetof(FLoadingScreenProperties, LoadingScreensDataTable) == 0x000118, "Member 'FLoadingScreenProperties::LoadingScreensDataTable' has a wrong offset!");
static_assert(offsetof(FLoadingScreenProperties, OnlineGameModesDataTable) == 0x000130, "Member 'FLoadingScreenProperties::OnlineGameModesDataTable' has a wrong offset!");
static_assert(offsetof(FLoadingScreenProperties, ImageStretch) == 0x000148, "Member 'FLoadingScreenProperties::ImageStretch' has a wrong offset!");
static_assert(offsetof(FLoadingScreenProperties, NoImageBrush) == 0x000150, "Member 'FLoadingScreenProperties::NoImageBrush' has a wrong offset!");
static_assert(offsetof(FLoadingScreenProperties, LoadingProgressBarHeight) == 0x0001D8, "Member 'FLoadingScreenProperties::LoadingProgressBarHeight' has a wrong offset!");
static_assert(offsetof(FLoadingScreenProperties, LoadingProgressBarColor) == 0x0001E0, "Member 'FLoadingScreenProperties::LoadingProgressBarColor' has a wrong offset!");
static_assert(offsetof(FLoadingScreenProperties, LoadingProgressBarFillImage) == 0x000208, "Member 'FLoadingScreenProperties::LoadingProgressBarFillImage' has a wrong offset!");
static_assert(offsetof(FLoadingScreenProperties, LoadingProgressBarBackgroundImage) == 0x000290, "Member 'FLoadingScreenProperties::LoadingProgressBarBackgroundImage' has a wrong offset!");

// ScriptStruct LoadingScreen.LoadingScreenDataRow
// 0x0060 (0x0068 - 0x0008)
struct FLoadingScreenDataRow final : public FTableRowBase
{
public:
	class FName                                   MapName;                                           // 0x0008(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FText                                   DisplayName;                                       // 0x0010(0x0018)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	bool                                          bShowTips;                                         // 0x0028(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_29[0x7];                                       // 0x0029(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FSoftObjectPath>                Images;                                            // 0x0030(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class USoundBase>              Music;                                             // 0x0040(0x0028)(Edit, BlueprintVisible, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FLoadingScreenDataRow) == 0x000008, "Wrong alignment on FLoadingScreenDataRow");
static_assert(sizeof(FLoadingScreenDataRow) == 0x000068, "Wrong size on FLoadingScreenDataRow");
static_assert(offsetof(FLoadingScreenDataRow, MapName) == 0x000008, "Member 'FLoadingScreenDataRow::MapName' has a wrong offset!");
static_assert(offsetof(FLoadingScreenDataRow, DisplayName) == 0x000010, "Member 'FLoadingScreenDataRow::DisplayName' has a wrong offset!");
static_assert(offsetof(FLoadingScreenDataRow, bShowTips) == 0x000028, "Member 'FLoadingScreenDataRow::bShowTips' has a wrong offset!");
static_assert(offsetof(FLoadingScreenDataRow, Images) == 0x000030, "Member 'FLoadingScreenDataRow::Images' has a wrong offset!");
static_assert(offsetof(FLoadingScreenDataRow, Music) == 0x000040, "Member 'FLoadingScreenDataRow::Music' has a wrong offset!");

// ScriptStruct LoadingScreen.LoadingScreenTip
// 0x0030 (0x0038 - 0x0008)
struct FLoadingScreenTip final : public FTableRowBase
{
public:
	class FText                                   Text;                                              // 0x0008(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	TArray<class FString>                         Arguments;                                         // 0x0020(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
	int32                                         Platforms;                                         // 0x0030(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         OnlineGameModeFilter;                              // 0x0034(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FLoadingScreenTip) == 0x000008, "Wrong alignment on FLoadingScreenTip");
static_assert(sizeof(FLoadingScreenTip) == 0x000038, "Wrong size on FLoadingScreenTip");
static_assert(offsetof(FLoadingScreenTip, Text) == 0x000008, "Member 'FLoadingScreenTip::Text' has a wrong offset!");
static_assert(offsetof(FLoadingScreenTip, Arguments) == 0x000020, "Member 'FLoadingScreenTip::Arguments' has a wrong offset!");
static_assert(offsetof(FLoadingScreenTip, Platforms) == 0x000030, "Member 'FLoadingScreenTip::Platforms' has a wrong offset!");
static_assert(offsetof(FLoadingScreenTip, OnlineGameModeFilter) == 0x000034, "Member 'FLoadingScreenTip::OnlineGameModeFilter' has a wrong offset!");

}

