#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: ABP_ShelterCharacter

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "S_JiggleSettings_structs.hpp"
#include "E_MeshSpecificJiggle_structs.hpp"
#include "CoreUObject_structs.hpp"
#include "S_JiggleDefinition_structs.hpp"


namespace SDK::Params
{

// Function ABP_ShelterCharacter.ABP_ShelterCharacter_C.ExecuteUbergraph_ABP_ShelterCharacter
// 0x0018 (0x0018 - 0x0000)
struct ABP_ShelterCharacter_C_ExecuteUbergraph_ABP_ShelterCharacter final
{
public:
	int32                                         EntryPoint;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UAnimSequenceBase*                      K2Node_Event_Anim;                                 // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_Event_Angle;                                // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_Event_DeltaTimeX;                           // 0x0014(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(ABP_ShelterCharacter_C_ExecuteUbergraph_ABP_ShelterCharacter) == 0x000008, "Wrong alignment on ABP_ShelterCharacter_C_ExecuteUbergraph_ABP_ShelterCharacter");
static_assert(sizeof(ABP_ShelterCharacter_C_ExecuteUbergraph_ABP_ShelterCharacter) == 0x000018, "Wrong size on ABP_ShelterCharacter_C_ExecuteUbergraph_ABP_ShelterCharacter");
static_assert(offsetof(ABP_ShelterCharacter_C_ExecuteUbergraph_ABP_ShelterCharacter, EntryPoint) == 0x000000, "Member 'ABP_ShelterCharacter_C_ExecuteUbergraph_ABP_ShelterCharacter::EntryPoint' has a wrong offset!");
static_assert(offsetof(ABP_ShelterCharacter_C_ExecuteUbergraph_ABP_ShelterCharacter, K2Node_Event_Anim) == 0x000008, "Member 'ABP_ShelterCharacter_C_ExecuteUbergraph_ABP_ShelterCharacter::K2Node_Event_Anim' has a wrong offset!");
static_assert(offsetof(ABP_ShelterCharacter_C_ExecuteUbergraph_ABP_ShelterCharacter, K2Node_Event_Angle) == 0x000010, "Member 'ABP_ShelterCharacter_C_ExecuteUbergraph_ABP_ShelterCharacter::K2Node_Event_Angle' has a wrong offset!");
static_assert(offsetof(ABP_ShelterCharacter_C_ExecuteUbergraph_ABP_ShelterCharacter, K2Node_Event_DeltaTimeX) == 0x000014, "Member 'ABP_ShelterCharacter_C_ExecuteUbergraph_ABP_ShelterCharacter::K2Node_Event_DeltaTimeX' has a wrong offset!");

// Function ABP_ShelterCharacter.ABP_ShelterCharacter_C.SetShelterPreviewIdleAnim
// 0x0008 (0x0008 - 0x0000)
struct ABP_ShelterCharacter_C_SetShelterPreviewIdleAnim final
{
public:
	class UAnimSequenceBase*                      Anim;                                              // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(ABP_ShelterCharacter_C_SetShelterPreviewIdleAnim) == 0x000008, "Wrong alignment on ABP_ShelterCharacter_C_SetShelterPreviewIdleAnim");
static_assert(sizeof(ABP_ShelterCharacter_C_SetShelterPreviewIdleAnim) == 0x000008, "Wrong size on ABP_ShelterCharacter_C_SetShelterPreviewIdleAnim");
static_assert(offsetof(ABP_ShelterCharacter_C_SetShelterPreviewIdleAnim, Anim) == 0x000000, "Member 'ABP_ShelterCharacter_C_SetShelterPreviewIdleAnim::Anim' has a wrong offset!");

// Function ABP_ShelterCharacter.ABP_ShelterCharacter_C.BlueprintUpdateAnimation
// 0x0004 (0x0004 - 0x0000)
struct ABP_ShelterCharacter_C_BlueprintUpdateAnimation final
{
public:
	float                                         DeltaTimeX;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(ABP_ShelterCharacter_C_BlueprintUpdateAnimation) == 0x000004, "Wrong alignment on ABP_ShelterCharacter_C_BlueprintUpdateAnimation");
static_assert(sizeof(ABP_ShelterCharacter_C_BlueprintUpdateAnimation) == 0x000004, "Wrong size on ABP_ShelterCharacter_C_BlueprintUpdateAnimation");
static_assert(offsetof(ABP_ShelterCharacter_C_BlueprintUpdateAnimation, DeltaTimeX) == 0x000000, "Member 'ABP_ShelterCharacter_C_BlueprintUpdateAnimation::DeltaTimeX' has a wrong offset!");

// Function ABP_ShelterCharacter.ABP_ShelterCharacter_C.CassettesRotationChanged
// 0x0004 (0x0004 - 0x0000)
struct ABP_ShelterCharacter_C_CassettesRotationChanged final
{
public:
	float                                         Angle;                                             // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(ABP_ShelterCharacter_C_CassettesRotationChanged) == 0x000004, "Wrong alignment on ABP_ShelterCharacter_C_CassettesRotationChanged");
static_assert(sizeof(ABP_ShelterCharacter_C_CassettesRotationChanged) == 0x000004, "Wrong size on ABP_ShelterCharacter_C_CassettesRotationChanged");
static_assert(offsetof(ABP_ShelterCharacter_C_CassettesRotationChanged, Angle) == 0x000000, "Member 'ABP_ShelterCharacter_C_CassettesRotationChanged::Angle' has a wrong offset!");

// Function ABP_ShelterCharacter.ABP_ShelterCharacter_C.SetAdditive
// 0x0001 (0x0001 - 0x0000)
struct ABP_ShelterCharacter_C_SetAdditive final
{
public:
	bool                                          NewParam;                                          // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(ABP_ShelterCharacter_C_SetAdditive) == 0x000001, "Wrong alignment on ABP_ShelterCharacter_C_SetAdditive");
static_assert(sizeof(ABP_ShelterCharacter_C_SetAdditive) == 0x000001, "Wrong size on ABP_ShelterCharacter_C_SetAdditive");
static_assert(offsetof(ABP_ShelterCharacter_C_SetAdditive, NewParam) == 0x000000, "Member 'ABP_ShelterCharacter_C_SetAdditive::NewParam' has a wrong offset!");

// Function ABP_ShelterCharacter.ABP_ShelterCharacter_C.AnimGraph
// 0x0010 (0x0010 - 0x0000)
struct ABP_ShelterCharacter_C_AnimGraph final
{
public:
	struct FPoseLink                              AnimGraph_0;                                       // 0x0000(0x0010)(Parm, OutParm, NoDestructor)
};
static_assert(alignof(ABP_ShelterCharacter_C_AnimGraph) == 0x000008, "Wrong alignment on ABP_ShelterCharacter_C_AnimGraph");
static_assert(sizeof(ABP_ShelterCharacter_C_AnimGraph) == 0x000010, "Wrong size on ABP_ShelterCharacter_C_AnimGraph");
static_assert(offsetof(ABP_ShelterCharacter_C_AnimGraph, AnimGraph_0) == 0x000000, "Member 'ABP_ShelterCharacter_C_AnimGraph::AnimGraph_0' has a wrong offset!");

// Function ABP_ShelterCharacter.ABP_ShelterCharacter_C.AnimDynamicsJiggle
// 0x0028 (0x0028 - 0x0000)
struct ABP_ShelterCharacter_C_AnimDynamicsJiggle final
{
public:
	struct FPoseLink                              InPose;                                            // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, NoDestructor)
	E_MeshSpecificJiggle                          Uniform_0;                                         // 0x0010(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	E_MeshSpecificJiggle                          Backpack_0;                                        // 0x0011(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	E_MeshSpecificJiggle                          Bottom_Headwear_0;                                 // 0x0012(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_13[0x5];                                       // 0x0013(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	struct FPoseLink                              AnimDynamicsJiggle_0;                              // 0x0018(0x0010)(Parm, OutParm, NoDestructor)
};
static_assert(alignof(ABP_ShelterCharacter_C_AnimDynamicsJiggle) == 0x000008, "Wrong alignment on ABP_ShelterCharacter_C_AnimDynamicsJiggle");
static_assert(sizeof(ABP_ShelterCharacter_C_AnimDynamicsJiggle) == 0x000028, "Wrong size on ABP_ShelterCharacter_C_AnimDynamicsJiggle");
static_assert(offsetof(ABP_ShelterCharacter_C_AnimDynamicsJiggle, InPose) == 0x000000, "Member 'ABP_ShelterCharacter_C_AnimDynamicsJiggle::InPose' has a wrong offset!");
static_assert(offsetof(ABP_ShelterCharacter_C_AnimDynamicsJiggle, Uniform_0) == 0x000010, "Member 'ABP_ShelterCharacter_C_AnimDynamicsJiggle::Uniform_0' has a wrong offset!");
static_assert(offsetof(ABP_ShelterCharacter_C_AnimDynamicsJiggle, Backpack_0) == 0x000011, "Member 'ABP_ShelterCharacter_C_AnimDynamicsJiggle::Backpack_0' has a wrong offset!");
static_assert(offsetof(ABP_ShelterCharacter_C_AnimDynamicsJiggle, Bottom_Headwear_0) == 0x000012, "Member 'ABP_ShelterCharacter_C_AnimDynamicsJiggle::Bottom_Headwear_0' has a wrong offset!");
static_assert(offsetof(ABP_ShelterCharacter_C_AnimDynamicsJiggle, AnimDynamicsJiggle_0) == 0x000018, "Member 'ABP_ShelterCharacter_C_AnimDynamicsJiggle::AnimDynamicsJiggle_0' has a wrong offset!");

// Function ABP_ShelterCharacter.ABP_ShelterCharacter_C.SetJiggleTypes
// 0x01B0 (0x01B0 - 0x0000)
struct ABP_ShelterCharacter_C_SetJiggleTypes final
{
public:
	bool                                          bShouldSimJiggle;                                  // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FS_JiggleSettings                      Uniform_0;                                         // 0x0008(0x0018)(BlueprintVisible, BlueprintReadOnly, Parm, HasGetValueTypeHash)
	struct FS_JiggleSettings                      Backpack_0;                                        // 0x0020(0x0018)(BlueprintVisible, BlueprintReadOnly, Parm, HasGetValueTypeHash)
	struct FS_JiggleSettings                      BottomHeadwear;                                    // 0x0038(0x0018)(BlueprintVisible, BlueprintReadOnly, Parm, HasGetValueTypeHash)
	bool                                          bSuccess;                                          // 0x0050(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_51[0x3];                                       // 0x0051(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x0054(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x0058(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Array_Index_Variable;                     // 0x005C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable_1;                  // 0x0060(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_SwitchInteger_CmpSuccess;                   // 0x0064(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_65[0x3];                                       // 0x0065(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Add_IntInt_ReturnValue_1;                 // 0x0068(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable_2;                  // 0x006C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue_2;                 // 0x0070(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Array_Index_Variable_1;                   // 0x0074(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_SwitchInteger_CmpSuccess_1;                 // 0x0078(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_79[0x3];                                       // 0x0079(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Temp_int_Array_Index_Variable_2;                   // 0x007C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x0080(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_84[0xC];                                       // 0x0084(0x000C)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             CallFunc_Array_Get_Item;                           // 0x0090(0x0030)(IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x00C0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_C1[0x3];                                       // 0x00C1(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_BreakTransform_Location;                  // 0x00C4(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               CallFunc_BreakTransform_Rotation;                  // 0x00D0(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FVector                                CallFunc_BreakTransform_Scale;                     // 0x00DC(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_SwitchInteger_CmpSuccess_2;                 // 0x00E8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue;          // 0x00E9(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_EA[0x6];                                       // 0x00EA(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             CallFunc_Array_Get_Item_1;                         // 0x00F0(0x0030)(IsPlainOldData, NoDestructor)
	struct FTransform                             CallFunc_Array_Get_Item_2;                         // 0x0120(0x0030)(IsPlainOldData, NoDestructor)
	struct FVector                                CallFunc_BreakTransform_Location_1;                // 0x0150(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               CallFunc_BreakTransform_Rotation_1;                // 0x015C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FVector                                CallFunc_BreakTransform_Scale_1;                   // 0x0168(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakTransform_Location_2;                // 0x0174(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               CallFunc_BreakTransform_Rotation_2;                // 0x0180(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FVector                                CallFunc_BreakTransform_Scale_2;                   // 0x018C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue_1;               // 0x0198(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue_1;        // 0x019C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Less_IntInt_ReturnValue_1;                // 0x019D(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_19E[0x2];                                      // 0x019E(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Array_Length_ReturnValue_2;               // 0x01A0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue_2;        // 0x01A4(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Less_IntInt_ReturnValue_2;                // 0x01A5(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(ABP_ShelterCharacter_C_SetJiggleTypes) == 0x000010, "Wrong alignment on ABP_ShelterCharacter_C_SetJiggleTypes");
static_assert(sizeof(ABP_ShelterCharacter_C_SetJiggleTypes) == 0x0001B0, "Wrong size on ABP_ShelterCharacter_C_SetJiggleTypes");
static_assert(offsetof(ABP_ShelterCharacter_C_SetJiggleTypes, bShouldSimJiggle) == 0x000000, "Member 'ABP_ShelterCharacter_C_SetJiggleTypes::bShouldSimJiggle' has a wrong offset!");
static_assert(offsetof(ABP_ShelterCharacter_C_SetJiggleTypes, Uniform_0) == 0x000008, "Member 'ABP_ShelterCharacter_C_SetJiggleTypes::Uniform_0' has a wrong offset!");
static_assert(offsetof(ABP_ShelterCharacter_C_SetJiggleTypes, Backpack_0) == 0x000020, "Member 'ABP_ShelterCharacter_C_SetJiggleTypes::Backpack_0' has a wrong offset!");
static_assert(offsetof(ABP_ShelterCharacter_C_SetJiggleTypes, BottomHeadwear) == 0x000038, "Member 'ABP_ShelterCharacter_C_SetJiggleTypes::BottomHeadwear' has a wrong offset!");
static_assert(offsetof(ABP_ShelterCharacter_C_SetJiggleTypes, bSuccess) == 0x000050, "Member 'ABP_ShelterCharacter_C_SetJiggleTypes::bSuccess' has a wrong offset!");
static_assert(offsetof(ABP_ShelterCharacter_C_SetJiggleTypes, Temp_int_Loop_Counter_Variable) == 0x000054, "Member 'ABP_ShelterCharacter_C_SetJiggleTypes::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(ABP_ShelterCharacter_C_SetJiggleTypes, CallFunc_Add_IntInt_ReturnValue) == 0x000058, "Member 'ABP_ShelterCharacter_C_SetJiggleTypes::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_ShelterCharacter_C_SetJiggleTypes, Temp_int_Array_Index_Variable) == 0x00005C, "Member 'ABP_ShelterCharacter_C_SetJiggleTypes::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(ABP_ShelterCharacter_C_SetJiggleTypes, Temp_int_Loop_Counter_Variable_1) == 0x000060, "Member 'ABP_ShelterCharacter_C_SetJiggleTypes::Temp_int_Loop_Counter_Variable_1' has a wrong offset!");
static_assert(offsetof(ABP_ShelterCharacter_C_SetJiggleTypes, K2Node_SwitchInteger_CmpSuccess) == 0x000064, "Member 'ABP_ShelterCharacter_C_SetJiggleTypes::K2Node_SwitchInteger_CmpSuccess' has a wrong offset!");
static_assert(offsetof(ABP_ShelterCharacter_C_SetJiggleTypes, CallFunc_Add_IntInt_ReturnValue_1) == 0x000068, "Member 'ABP_ShelterCharacter_C_SetJiggleTypes::CallFunc_Add_IntInt_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(ABP_ShelterCharacter_C_SetJiggleTypes, Temp_int_Loop_Counter_Variable_2) == 0x00006C, "Member 'ABP_ShelterCharacter_C_SetJiggleTypes::Temp_int_Loop_Counter_Variable_2' has a wrong offset!");
static_assert(offsetof(ABP_ShelterCharacter_C_SetJiggleTypes, CallFunc_Add_IntInt_ReturnValue_2) == 0x000070, "Member 'ABP_ShelterCharacter_C_SetJiggleTypes::CallFunc_Add_IntInt_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(ABP_ShelterCharacter_C_SetJiggleTypes, Temp_int_Array_Index_Variable_1) == 0x000074, "Member 'ABP_ShelterCharacter_C_SetJiggleTypes::Temp_int_Array_Index_Variable_1' has a wrong offset!");
static_assert(offsetof(ABP_ShelterCharacter_C_SetJiggleTypes, K2Node_SwitchInteger_CmpSuccess_1) == 0x000078, "Member 'ABP_ShelterCharacter_C_SetJiggleTypes::K2Node_SwitchInteger_CmpSuccess_1' has a wrong offset!");
static_assert(offsetof(ABP_ShelterCharacter_C_SetJiggleTypes, Temp_int_Array_Index_Variable_2) == 0x00007C, "Member 'ABP_ShelterCharacter_C_SetJiggleTypes::Temp_int_Array_Index_Variable_2' has a wrong offset!");
static_assert(offsetof(ABP_ShelterCharacter_C_SetJiggleTypes, CallFunc_Array_Length_ReturnValue) == 0x000080, "Member 'ABP_ShelterCharacter_C_SetJiggleTypes::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_ShelterCharacter_C_SetJiggleTypes, CallFunc_Array_Get_Item) == 0x000090, "Member 'ABP_ShelterCharacter_C_SetJiggleTypes::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(ABP_ShelterCharacter_C_SetJiggleTypes, CallFunc_Less_IntInt_ReturnValue) == 0x0000C0, "Member 'ABP_ShelterCharacter_C_SetJiggleTypes::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_ShelterCharacter_C_SetJiggleTypes, CallFunc_BreakTransform_Location) == 0x0000C4, "Member 'ABP_ShelterCharacter_C_SetJiggleTypes::CallFunc_BreakTransform_Location' has a wrong offset!");
static_assert(offsetof(ABP_ShelterCharacter_C_SetJiggleTypes, CallFunc_BreakTransform_Rotation) == 0x0000D0, "Member 'ABP_ShelterCharacter_C_SetJiggleTypes::CallFunc_BreakTransform_Rotation' has a wrong offset!");
static_assert(offsetof(ABP_ShelterCharacter_C_SetJiggleTypes, CallFunc_BreakTransform_Scale) == 0x0000DC, "Member 'ABP_ShelterCharacter_C_SetJiggleTypes::CallFunc_BreakTransform_Scale' has a wrong offset!");
static_assert(offsetof(ABP_ShelterCharacter_C_SetJiggleTypes, K2Node_SwitchInteger_CmpSuccess_2) == 0x0000E8, "Member 'ABP_ShelterCharacter_C_SetJiggleTypes::K2Node_SwitchInteger_CmpSuccess_2' has a wrong offset!");
static_assert(offsetof(ABP_ShelterCharacter_C_SetJiggleTypes, CallFunc_EqualEqual_ByteByte_ReturnValue) == 0x0000E9, "Member 'ABP_ShelterCharacter_C_SetJiggleTypes::CallFunc_EqualEqual_ByteByte_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_ShelterCharacter_C_SetJiggleTypes, CallFunc_Array_Get_Item_1) == 0x0000F0, "Member 'ABP_ShelterCharacter_C_SetJiggleTypes::CallFunc_Array_Get_Item_1' has a wrong offset!");
static_assert(offsetof(ABP_ShelterCharacter_C_SetJiggleTypes, CallFunc_Array_Get_Item_2) == 0x000120, "Member 'ABP_ShelterCharacter_C_SetJiggleTypes::CallFunc_Array_Get_Item_2' has a wrong offset!");
static_assert(offsetof(ABP_ShelterCharacter_C_SetJiggleTypes, CallFunc_BreakTransform_Location_1) == 0x000150, "Member 'ABP_ShelterCharacter_C_SetJiggleTypes::CallFunc_BreakTransform_Location_1' has a wrong offset!");
static_assert(offsetof(ABP_ShelterCharacter_C_SetJiggleTypes, CallFunc_BreakTransform_Rotation_1) == 0x00015C, "Member 'ABP_ShelterCharacter_C_SetJiggleTypes::CallFunc_BreakTransform_Rotation_1' has a wrong offset!");
static_assert(offsetof(ABP_ShelterCharacter_C_SetJiggleTypes, CallFunc_BreakTransform_Scale_1) == 0x000168, "Member 'ABP_ShelterCharacter_C_SetJiggleTypes::CallFunc_BreakTransform_Scale_1' has a wrong offset!");
static_assert(offsetof(ABP_ShelterCharacter_C_SetJiggleTypes, CallFunc_BreakTransform_Location_2) == 0x000174, "Member 'ABP_ShelterCharacter_C_SetJiggleTypes::CallFunc_BreakTransform_Location_2' has a wrong offset!");
static_assert(offsetof(ABP_ShelterCharacter_C_SetJiggleTypes, CallFunc_BreakTransform_Rotation_2) == 0x000180, "Member 'ABP_ShelterCharacter_C_SetJiggleTypes::CallFunc_BreakTransform_Rotation_2' has a wrong offset!");
static_assert(offsetof(ABP_ShelterCharacter_C_SetJiggleTypes, CallFunc_BreakTransform_Scale_2) == 0x00018C, "Member 'ABP_ShelterCharacter_C_SetJiggleTypes::CallFunc_BreakTransform_Scale_2' has a wrong offset!");
static_assert(offsetof(ABP_ShelterCharacter_C_SetJiggleTypes, CallFunc_Array_Length_ReturnValue_1) == 0x000198, "Member 'ABP_ShelterCharacter_C_SetJiggleTypes::CallFunc_Array_Length_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(ABP_ShelterCharacter_C_SetJiggleTypes, CallFunc_EqualEqual_ByteByte_ReturnValue_1) == 0x00019C, "Member 'ABP_ShelterCharacter_C_SetJiggleTypes::CallFunc_EqualEqual_ByteByte_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(ABP_ShelterCharacter_C_SetJiggleTypes, CallFunc_Less_IntInt_ReturnValue_1) == 0x00019D, "Member 'ABP_ShelterCharacter_C_SetJiggleTypes::CallFunc_Less_IntInt_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(ABP_ShelterCharacter_C_SetJiggleTypes, CallFunc_Array_Length_ReturnValue_2) == 0x0001A0, "Member 'ABP_ShelterCharacter_C_SetJiggleTypes::CallFunc_Array_Length_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(ABP_ShelterCharacter_C_SetJiggleTypes, CallFunc_EqualEqual_ByteByte_ReturnValue_2) == 0x0001A4, "Member 'ABP_ShelterCharacter_C_SetJiggleTypes::CallFunc_EqualEqual_ByteByte_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(ABP_ShelterCharacter_C_SetJiggleTypes, CallFunc_Less_IntInt_ReturnValue_2) == 0x0001A5, "Member 'ABP_ShelterCharacter_C_SetJiggleTypes::CallFunc_Less_IntInt_ReturnValue_2' has a wrong offset!");

// Function ABP_ShelterCharacter.ABP_ShelterCharacter_C.SetPrimaryHolsterLock
// 0x0003 (0x0003 - 0x0000)
struct ABP_ShelterCharacter_C_SetPrimaryHolsterLock final
{
public:
	bool                                          ShouldLock;                                        // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          bRightSide_;                                       // 0x0001(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Success;                                           // 0x0002(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(ABP_ShelterCharacter_C_SetPrimaryHolsterLock) == 0x000001, "Wrong alignment on ABP_ShelterCharacter_C_SetPrimaryHolsterLock");
static_assert(sizeof(ABP_ShelterCharacter_C_SetPrimaryHolsterLock) == 0x000003, "Wrong size on ABP_ShelterCharacter_C_SetPrimaryHolsterLock");
static_assert(offsetof(ABP_ShelterCharacter_C_SetPrimaryHolsterLock, ShouldLock) == 0x000000, "Member 'ABP_ShelterCharacter_C_SetPrimaryHolsterLock::ShouldLock' has a wrong offset!");
static_assert(offsetof(ABP_ShelterCharacter_C_SetPrimaryHolsterLock, bRightSide_) == 0x000001, "Member 'ABP_ShelterCharacter_C_SetPrimaryHolsterLock::bRightSide_' has a wrong offset!");
static_assert(offsetof(ABP_ShelterCharacter_C_SetPrimaryHolsterLock, Success) == 0x000002, "Member 'ABP_ShelterCharacter_C_SetPrimaryHolsterLock::Success' has a wrong offset!");

// Function ABP_ShelterCharacter.ABP_ShelterCharacter_C.SetDisableLeftHandIK
// 0x0002 (0x0002 - 0x0000)
struct ABP_ShelterCharacter_C_SetDisableLeftHandIK final
{
public:
	bool                                          ShouldDisable;                                     // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Success;                                           // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(ABP_ShelterCharacter_C_SetDisableLeftHandIK) == 0x000001, "Wrong alignment on ABP_ShelterCharacter_C_SetDisableLeftHandIK");
static_assert(sizeof(ABP_ShelterCharacter_C_SetDisableLeftHandIK) == 0x000002, "Wrong size on ABP_ShelterCharacter_C_SetDisableLeftHandIK");
static_assert(offsetof(ABP_ShelterCharacter_C_SetDisableLeftHandIK, ShouldDisable) == 0x000000, "Member 'ABP_ShelterCharacter_C_SetDisableLeftHandIK::ShouldDisable' has a wrong offset!");
static_assert(offsetof(ABP_ShelterCharacter_C_SetDisableLeftHandIK, Success) == 0x000001, "Member 'ABP_ShelterCharacter_C_SetDisableLeftHandIK::Success' has a wrong offset!");

// Function ABP_ShelterCharacter.ABP_ShelterCharacter_C.SetDisabledAiming
// 0x0002 (0x0002 - 0x0000)
struct ABP_ShelterCharacter_C_SetDisabledAiming final
{
public:
	bool                                          bDisabled;                                         // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Success;                                           // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(ABP_ShelterCharacter_C_SetDisabledAiming) == 0x000001, "Wrong alignment on ABP_ShelterCharacter_C_SetDisabledAiming");
static_assert(sizeof(ABP_ShelterCharacter_C_SetDisabledAiming) == 0x000002, "Wrong size on ABP_ShelterCharacter_C_SetDisabledAiming");
static_assert(offsetof(ABP_ShelterCharacter_C_SetDisabledAiming, bDisabled) == 0x000000, "Member 'ABP_ShelterCharacter_C_SetDisabledAiming::bDisabled' has a wrong offset!");
static_assert(offsetof(ABP_ShelterCharacter_C_SetDisabledAiming, Success) == 0x000001, "Member 'ABP_ShelterCharacter_C_SetDisabledAiming::Success' has a wrong offset!");

// Function ABP_ShelterCharacter.ABP_ShelterCharacter_C.SetActiveHardStanceTransition
// 0x0002 (0x0002 - 0x0000)
struct ABP_ShelterCharacter_C_SetActiveHardStanceTransition final
{
public:
	bool                                          bActive;                                           // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Success;                                           // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(ABP_ShelterCharacter_C_SetActiveHardStanceTransition) == 0x000001, "Wrong alignment on ABP_ShelterCharacter_C_SetActiveHardStanceTransition");
static_assert(sizeof(ABP_ShelterCharacter_C_SetActiveHardStanceTransition) == 0x000002, "Wrong size on ABP_ShelterCharacter_C_SetActiveHardStanceTransition");
static_assert(offsetof(ABP_ShelterCharacter_C_SetActiveHardStanceTransition, bActive) == 0x000000, "Member 'ABP_ShelterCharacter_C_SetActiveHardStanceTransition::bActive' has a wrong offset!");
static_assert(offsetof(ABP_ShelterCharacter_C_SetActiveHardStanceTransition, Success) == 0x000001, "Member 'ABP_ShelterCharacter_C_SetActiveHardStanceTransition::Success' has a wrong offset!");

// Function ABP_ShelterCharacter.ABP_ShelterCharacter_C.CheckForJiggle
// 0x0700 (0x0700 - 0x0000)
struct ABP_ShelterCharacter_C_CheckForJiggle final
{
public:
	class USkeletalMeshComponent*                 UniformMesh;                                       // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class USkeletalMeshComponent*                 BackpackMesh;                                      // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class USkeletalMeshComponent*                 BottomHeadwear;                                    // 0x0010(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Processed;                                         // 0x0018(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FS_JiggleSettings                      BottomHeadwearJiggleSettings;                      // 0x0020(0x0018)(Edit, BlueprintVisible, HasGetValueTypeHash)
	E_MeshSpecificJiggle                          BottomHeadwearType;                                // 0x0038(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          BottomHeadwearSocketFound;                         // 0x0039(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_3A[0x6];                                       // 0x003A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FTransform>                     BottomHeadwearSocketTransforms;                    // 0x0040(0x0010)(Edit, BlueprintVisible)
	struct FS_JiggleSettings                      UniformJiggleSettings;                             // 0x0050(0x0018)(Edit, BlueprintVisible, HasGetValueTypeHash)
	struct FS_JiggleSettings                      BackpackJiggleSettings;                            // 0x0068(0x0018)(Edit, BlueprintVisible, HasGetValueTypeHash)
	TArray<struct FTransform>                     BackpackSocketTransforms;                          // 0x0080(0x0010)(Edit, BlueprintVisible)
	bool                                          BackpackSocketFound;                               // 0x0090(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	E_MeshSpecificJiggle                          BackpackType;                                      // 0x0091(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	E_MeshSpecificJiggle                          UniformType;                                       // 0x0092(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_93[0x5];                                       // 0x0093(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FTransform>                     UniformSocketTransforms;                           // 0x0098(0x0010)(Edit, BlueprintVisible)
	bool                                          UniformSocketFound;                                // 0x00A8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_A9[0x7];                                       // 0x00A9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UDataTable*                             DT_JiggleDefinitions;                              // 0x00B0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TMap<TSoftObjectPtr<class USkeletalMesh>, E_MeshSpecificJiggle> SkelMeshToJiggleTypes;                             // 0x00B8(0x0050)(Edit, BlueprintVisible)
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x0108(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x010C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable_1;                  // 0x0110(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue_1;                 // 0x0114(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_True_if_break_was_hit_Variable;          // 0x0118(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_119[0x3];                                      // 0x0119(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Temp_int_Array_Index_Variable;                     // 0x011C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Not_PreBool_ReturnValue;                  // 0x0120(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_True_if_break_was_hit_Variable_1;        // 0x0121(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_122[0x2];                                      // 0x0122(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Temp_int_Variable;                                 // 0x0124(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FFormatArgumentData                    K2Node_MakeStruct_FormatArgumentData;              // 0x0128(0x0040)(HasGetValueTypeHash)
	TArray<struct FFormatArgumentData>            K2Node_MakeArray_Array;                            // 0x0168(0x0010)(ReferenceParm)
	bool                                          CallFunc_LessEqual_IntInt_ReturnValue;             // 0x0178(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_179[0x7];                                      // 0x0179(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   CallFunc_Format_ReturnValue;                       // 0x0180(0x0018)()
	class FString                                 CallFunc_Conv_TextToString_ReturnValue;            // 0x0198(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue_2;                 // 0x01A8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   CallFunc_Conv_StringToName_ReturnValue;            // 0x01AC(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Not_PreBool_ReturnValue_1;                // 0x01B4(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_1B5[0x3];                                      // 0x01B5(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Temp_int_Variable_1;                               // 0x01B8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1BC[0x4];                                      // 0x01BC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FFormatArgumentData                    K2Node_MakeStruct_FormatArgumentData_1;            // 0x01C0(0x0040)(HasGetValueTypeHash)
	TArray<struct FFormatArgumentData>            K2Node_MakeArray_Array_1;                          // 0x0200(0x0010)(ReferenceParm)
	bool                                          CallFunc_LessEqual_IntInt_ReturnValue_1;           // 0x0210(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_211[0x7];                                      // 0x0211(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   CallFunc_Format_ReturnValue_1;                     // 0x0218(0x0018)()
	class FString                                 CallFunc_Conv_TextToString_ReturnValue_1;          // 0x0230(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue_3;                 // 0x0240(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   CallFunc_Conv_StringToName_ReturnValue_1;          // 0x0244(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Variable_2;                               // 0x024C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable_2;                  // 0x0250(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_254[0x4];                                      // 0x0254(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FFormatArgumentData                    K2Node_MakeStruct_FormatArgumentData_2;            // 0x0258(0x0040)(HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue_4;                 // 0x0298(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_29C[0x4];                                      // 0x029C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FFormatArgumentData>            K2Node_MakeArray_Array_2;                          // 0x02A0(0x0010)(ReferenceParm)
	class FText                                   CallFunc_Format_ReturnValue_2;                     // 0x02B0(0x0018)()
	class FString                                 CallFunc_Conv_TextToString_ReturnValue_2;          // 0x02C8(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FName                                   CallFunc_Conv_StringToName_ReturnValue_2;          // 0x02D8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_LessEqual_IntInt_ReturnValue_2;           // 0x02E0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_2E1[0x3];                                      // 0x02E1(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Add_IntInt_ReturnValue_5;                 // 0x02E4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Array_Index_Variable_1;                   // 0x02E8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2EC[0x4];                                      // 0x02EC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FS_JiggleSettings                      K2Node_MakeStruct_S_JiggleSettings;                // 0x02F0(0x0018)(HasGetValueTypeHash)
	int32                                         Temp_int_Array_Index_Variable_2;                   // 0x0308(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_True_if_break_was_hit_Variable_2;        // 0x030C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_30D[0x3];                                      // 0x030D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<TSoftObjectPtr<class USkeletalMesh>>   CallFunc_Map_Keys_Keys;                            // 0x0310(0x0010)(ReferenceParm)
	bool                                          CallFunc_Not_PreBool_ReturnValue_2;                // 0x0320(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_321[0x3];                                      // 0x0321(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x0324(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_328[0x8];                                      // 0x0328(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             CallFunc_GetSocketTransform_ReturnValue;           // 0x0330(0x0030)(IsPlainOldData, NoDestructor)
	int32                                         CallFunc_Array_Add_ReturnValue;                    // 0x0360(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_DoesSocketExist_ReturnValue;              // 0x0364(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_365[0x3];                                      // 0x0365(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 CallFunc_GetEnumeratorUserFriendlyName_ReturnValue; // 0x0368(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FString                                 CallFunc_GetEnumeratorUserFriendlyName_ReturnValue_1; // 0x0378(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsVisible_ReturnValue;                    // 0x0388(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_389[0x7];                                      // 0x0389(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 CallFunc_GetDisplayName_ReturnValue;               // 0x0390(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FString                                 CallFunc_GetDisplayName_ReturnValue_1;             // 0x03A0(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FString                                 CallFunc_Concat_StrStr_ReturnValue;                // 0x03B0(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FString                                 CallFunc_Concat_StrStr_ReturnValue_1;              // 0x03C0(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FString                                 CallFunc_Concat_StrStr_ReturnValue_2;              // 0x03D0(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	bool                                          CallFunc_DoesSocketExist_ReturnValue_1;            // 0x03E0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_3E1[0x7];                                      // 0x03E1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 CallFunc_Concat_StrStr_ReturnValue_3;              // 0x03E8(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FString                                 CallFunc_Concat_StrStr_ReturnValue_4;              // 0x03F8(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FString                                 CallFunc_Concat_StrStr_ReturnValue_5;              // 0x0408(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FString                                 CallFunc_Concat_StrStr_ReturnValue_6;              // 0x0418(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	bool                                          CallFunc_DoesSocketExist_ReturnValue_2;            // 0x0428(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_429[0x7];                                      // 0x0429(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             CallFunc_GetSocketTransform_ReturnValue_1;         // 0x0430(0x0030)(IsPlainOldData, NoDestructor)
	struct FTransform                             CallFunc_GetSocketTransform_ReturnValue_2;         // 0x0460(0x0030)(IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsDedicatedServer_ReturnValue;            // 0x0490(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_491[0x3];                                      // 0x0491(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Temp_int_Loop_Counter_Variable_3;                  // 0x0494(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Not_PreBool_ReturnValue_3;                // 0x0498(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x0499(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_49A[0x2];                                      // 0x049A(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Add_IntInt_ReturnValue_6;                 // 0x049C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanAND_ReturnValue;                   // 0x04A0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_4A1[0x7];                                      // 0x04A1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TScriptInterface<class IBPI_HumanAnimInstance_C> CallFunc_SetJiggleTypes_self_CastInput;            // 0x04A8(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_SetJiggleTypes_bSuccess;                  // 0x04B8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_4B9[0x7];                                      // 0x04B9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FS_JiggleSettings                      K2Node_MakeStruct_S_JiggleSettings_1;              // 0x04C0(0x0018)(HasGetValueTypeHash)
	TArray<TSoftObjectPtr<class USkeletalMesh>>   CallFunc_Map_Keys_Keys_1;                          // 0x04D8(0x0010)(ReferenceParm)
	int32                                         CallFunc_Array_Add_ReturnValue_1;                  // 0x04E8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4EC[0x4];                                      // 0x04EC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TSoftObjectPtr<class USkeletalMesh>           CallFunc_Array_Get_Item;                           // 0x04F0(0x0028)(HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue_1;               // 0x0518(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_51C[0x4];                                      // 0x051C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UObject*                                CallFunc_Conv_SoftObjectReferenceToObject_ReturnValue; // 0x0520(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue_1;                // 0x0528(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_529[0x7];                                      // 0x0529(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class USkeletalMesh*                          K2Node_DynamicCast_AsSkeletal_Mesh;                // 0x0530(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0538(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanAND_ReturnValue_1;                 // 0x0539(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_EqualEqual_ObjectObject_ReturnValue;      // 0x053A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x053B(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	E_MeshSpecificJiggle                          CallFunc_Map_Find_Value;                           // 0x053C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Map_Find_ReturnValue;                     // 0x053D(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_53E[0x2];                                      // 0x053E(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	struct FS_JiggleSettings                      K2Node_MakeStruct_S_JiggleSettings_2;              // 0x0540(0x0018)(HasGetValueTypeHash)
	TArray<TSoftObjectPtr<class USkeletalMesh>>   CallFunc_Map_Keys_Keys_2;                          // 0x0558(0x0010)(ReferenceParm)
	TSoftObjectPtr<class USkeletalMesh>           CallFunc_Array_Get_Item_1;                         // 0x0568(0x0028)(HasGetValueTypeHash)
	int32                                         CallFunc_Array_Add_ReturnValue_2;                  // 0x0590(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_594[0x4];                                      // 0x0594(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UObject*                                CallFunc_Conv_SoftObjectReferenceToObject_ReturnValue_1; // 0x0598(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	E_MeshSpecificJiggle                          CallFunc_Map_Find_Value_1;                         // 0x05A0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Map_Find_ReturnValue_1;                   // 0x05A1(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_5A2[0x6];                                      // 0x05A2(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class USkeletalMesh*                          K2Node_DynamicCast_AsSkeletal_Mesh_1;              // 0x05A8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess_1;                     // 0x05B0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_EqualEqual_ObjectObject_ReturnValue_1;    // 0x05B1(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue_1;                    // 0x05B2(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_5B3[0x1];                                      // 0x05B3(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Array_Length_ReturnValue_2;               // 0x05B4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Array_Index_Variable_3;                   // 0x05B8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue_2;                // 0x05BC(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_5BD[0x3];                                      // 0x05BD(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	TSoftObjectPtr<class USkeletalMesh>           CallFunc_Array_Get_Item_2;                         // 0x05C0(0x0028)(HasGetValueTypeHash)
	bool                                          CallFunc_BooleanAND_ReturnValue_2;                 // 0x05E8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_5E9[0x7];                                      // 0x05E9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UObject*                                CallFunc_Conv_SoftObjectReferenceToObject_ReturnValue_2; // 0x05F0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class USkeletalMesh*                          K2Node_DynamicCast_AsSkeletal_Mesh_2;              // 0x05F8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess_2;                     // 0x0600(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	E_MeshSpecificJiggle                          CallFunc_Map_Find_Value_2;                         // 0x0601(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Map_Find_ReturnValue_2;                   // 0x0602(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_EqualEqual_ObjectObject_ReturnValue_2;    // 0x0603(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue_2;                    // 0x0604(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_605[0x3];                                      // 0x0605(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class FName>                           CallFunc_GetDataTableRowNames_OutRowNames;         // 0x0608(0x0010)(ReferenceParm)
	class FName                                   CallFunc_Array_Get_Item_3;                         // 0x0618(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue_3;               // 0x0620(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_624[0x4];                                      // 0x0624(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FS_JiggleDefinition                    CallFunc_GetDataTableRowFromName_OutRow;           // 0x0628(0x00D0)(HasGetValueTypeHash)
	bool                                          CallFunc_GetDataTableRowFromName_ReturnValue;      // 0x06F8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Less_IntInt_ReturnValue_3;                // 0x06F9(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(ABP_ShelterCharacter_C_CheckForJiggle) == 0x000010, "Wrong alignment on ABP_ShelterCharacter_C_CheckForJiggle");
static_assert(sizeof(ABP_ShelterCharacter_C_CheckForJiggle) == 0x000700, "Wrong size on ABP_ShelterCharacter_C_CheckForJiggle");
static_assert(offsetof(ABP_ShelterCharacter_C_CheckForJiggle, UniformMesh) == 0x000000, "Member 'ABP_ShelterCharacter_C_CheckForJiggle::UniformMesh' has a wrong offset!");
static_assert(offsetof(ABP_ShelterCharacter_C_CheckForJiggle, BackpackMesh) == 0x000008, "Member 'ABP_ShelterCharacter_C_CheckForJiggle::BackpackMesh' has a wrong offset!");
static_assert(offsetof(ABP_ShelterCharacter_C_CheckForJiggle, BottomHeadwear) == 0x000010, "Member 'ABP_ShelterCharacter_C_CheckForJiggle::BottomHeadwear' has a wrong offset!");
static_assert(offsetof(ABP_ShelterCharacter_C_CheckForJiggle, Processed) == 0x000018, "Member 'ABP_ShelterCharacter_C_CheckForJiggle::Processed' has a wrong offset!");
static_assert(offsetof(ABP_ShelterCharacter_C_CheckForJiggle, BottomHeadwearJiggleSettings) == 0x000020, "Member 'ABP_ShelterCharacter_C_CheckForJiggle::BottomHeadwearJiggleSettings' has a wrong offset!");
static_assert(offsetof(ABP_ShelterCharacter_C_CheckForJiggle, BottomHeadwearType) == 0x000038, "Member 'ABP_ShelterCharacter_C_CheckForJiggle::BottomHeadwearType' has a wrong offset!");
static_assert(offsetof(ABP_ShelterCharacter_C_CheckForJiggle, BottomHeadwearSocketFound) == 0x000039, "Member 'ABP_ShelterCharacter_C_CheckForJiggle::BottomHeadwearSocketFound' has a wrong offset!");
static_assert(offsetof(ABP_ShelterCharacter_C_CheckForJiggle, BottomHeadwearSocketTransforms) == 0x000040, "Member 'ABP_ShelterCharacter_C_CheckForJiggle::BottomHeadwearSocketTransforms' has a wrong offset!");
static_assert(offsetof(ABP_ShelterCharacter_C_CheckForJiggle, UniformJiggleSettings) == 0x000050, "Member 'ABP_ShelterCharacter_C_CheckForJiggle::UniformJiggleSettings' has a wrong offset!");
static_assert(offsetof(ABP_ShelterCharacter_C_CheckForJiggle, BackpackJiggleSettings) == 0x000068, "Member 'ABP_ShelterCharacter_C_CheckForJiggle::BackpackJiggleSettings' has a wrong offset!");
static_assert(offsetof(ABP_ShelterCharacter_C_CheckForJiggle, BackpackSocketTransforms) == 0x000080, "Member 'ABP_ShelterCharacter_C_CheckForJiggle::BackpackSocketTransforms' has a wrong offset!");
static_assert(offsetof(ABP_ShelterCharacter_C_CheckForJiggle, BackpackSocketFound) == 0x000090, "Member 'ABP_ShelterCharacter_C_CheckForJiggle::BackpackSocketFound' has a wrong offset!");
static_assert(offsetof(ABP_ShelterCharacter_C_CheckForJiggle, BackpackType) == 0x000091, "Member 'ABP_ShelterCharacter_C_CheckForJiggle::BackpackType' has a wrong offset!");
static_assert(offsetof(ABP_ShelterCharacter_C_CheckForJiggle, UniformType) == 0x000092, "Member 'ABP_ShelterCharacter_C_CheckForJiggle::UniformType' has a wrong offset!");
static_assert(offsetof(ABP_ShelterCharacter_C_CheckForJiggle, UniformSocketTransforms) == 0x000098, "Member 'ABP_ShelterCharacter_C_CheckForJiggle::UniformSocketTransforms' has a wrong offset!");
static_assert(offsetof(ABP_ShelterCharacter_C_CheckForJiggle, UniformSocketFound) == 0x0000A8, "Member 'ABP_ShelterCharacter_C_CheckForJiggle::UniformSocketFound' has a wrong offset!");
static_assert(offsetof(ABP_ShelterCharacter_C_CheckForJiggle, DT_JiggleDefinitions) == 0x0000B0, "Member 'ABP_ShelterCharacter_C_CheckForJiggle::DT_JiggleDefinitions' has a wrong offset!");
static_assert(offsetof(ABP_ShelterCharacter_C_CheckForJiggle, SkelMeshToJiggleTypes) == 0x0000B8, "Member 'ABP_ShelterCharacter_C_CheckForJiggle::SkelMeshToJiggleTypes' has a wrong offset!");
static_assert(offsetof(ABP_ShelterCharacter_C_CheckForJiggle, Temp_int_Loop_Counter_Variable) == 0x000108, "Member 'ABP_ShelterCharacter_C_CheckForJiggle::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(ABP_ShelterCharacter_C_CheckForJiggle, CallFunc_Add_IntInt_ReturnValue) == 0x00010C, "Member 'ABP_ShelterCharacter_C_CheckForJiggle::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_ShelterCharacter_C_CheckForJiggle, Temp_int_Loop_Counter_Variable_1) == 0x000110, "Member 'ABP_ShelterCharacter_C_CheckForJiggle::Temp_int_Loop_Counter_Variable_1' has a wrong offset!");
static_assert(offsetof(ABP_ShelterCharacter_C_CheckForJiggle, CallFunc_Add_IntInt_ReturnValue_1) == 0x000114, "Member 'ABP_ShelterCharacter_C_CheckForJiggle::CallFunc_Add_IntInt_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(ABP_ShelterCharacter_C_CheckForJiggle, Temp_bool_True_if_break_was_hit_Variable) == 0x000118, "Member 'ABP_ShelterCharacter_C_CheckForJiggle::Temp_bool_True_if_break_was_hit_Variable' has a wrong offset!");
static_assert(offsetof(ABP_ShelterCharacter_C_CheckForJiggle, Temp_int_Array_Index_Variable) == 0x00011C, "Member 'ABP_ShelterCharacter_C_CheckForJiggle::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(ABP_ShelterCharacter_C_CheckForJiggle, CallFunc_Not_PreBool_ReturnValue) == 0x000120, "Member 'ABP_ShelterCharacter_C_CheckForJiggle::CallFunc_Not_PreBool_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_ShelterCharacter_C_CheckForJiggle, Temp_bool_True_if_break_was_hit_Variable_1) == 0x000121, "Member 'ABP_ShelterCharacter_C_CheckForJiggle::Temp_bool_True_if_break_was_hit_Variable_1' has a wrong offset!");
static_assert(offsetof(ABP_ShelterCharacter_C_CheckForJiggle, Temp_int_Variable) == 0x000124, "Member 'ABP_ShelterCharacter_C_CheckForJiggle::Temp_int_Variable' has a wrong offset!");
static_assert(offsetof(ABP_ShelterCharacter_C_CheckForJiggle, K2Node_MakeStruct_FormatArgumentData) == 0x000128, "Member 'ABP_ShelterCharacter_C_CheckForJiggle::K2Node_MakeStruct_FormatArgumentData' has a wrong offset!");
static_assert(offsetof(ABP_ShelterCharacter_C_CheckForJiggle, K2Node_MakeArray_Array) == 0x000168, "Member 'ABP_ShelterCharacter_C_CheckForJiggle::K2Node_MakeArray_Array' has a wrong offset!");
static_assert(offsetof(ABP_ShelterCharacter_C_CheckForJiggle, CallFunc_LessEqual_IntInt_ReturnValue) == 0x000178, "Member 'ABP_ShelterCharacter_C_CheckForJiggle::CallFunc_LessEqual_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_ShelterCharacter_C_CheckForJiggle, CallFunc_Format_ReturnValue) == 0x000180, "Member 'ABP_ShelterCharacter_C_CheckForJiggle::CallFunc_Format_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_ShelterCharacter_C_CheckForJiggle, CallFunc_Conv_TextToString_ReturnValue) == 0x000198, "Member 'ABP_ShelterCharacter_C_CheckForJiggle::CallFunc_Conv_TextToString_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_ShelterCharacter_C_CheckForJiggle, CallFunc_Add_IntInt_ReturnValue_2) == 0x0001A8, "Member 'ABP_ShelterCharacter_C_CheckForJiggle::CallFunc_Add_IntInt_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(ABP_ShelterCharacter_C_CheckForJiggle, CallFunc_Conv_StringToName_ReturnValue) == 0x0001AC, "Member 'ABP_ShelterCharacter_C_CheckForJiggle::CallFunc_Conv_StringToName_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_ShelterCharacter_C_CheckForJiggle, CallFunc_Not_PreBool_ReturnValue_1) == 0x0001B4, "Member 'ABP_ShelterCharacter_C_CheckForJiggle::CallFunc_Not_PreBool_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(ABP_ShelterCharacter_C_CheckForJiggle, Temp_int_Variable_1) == 0x0001B8, "Member 'ABP_ShelterCharacter_C_CheckForJiggle::Temp_int_Variable_1' has a wrong offset!");
static_assert(offsetof(ABP_ShelterCharacter_C_CheckForJiggle, K2Node_MakeStruct_FormatArgumentData_1) == 0x0001C0, "Member 'ABP_ShelterCharacter_C_CheckForJiggle::K2Node_MakeStruct_FormatArgumentData_1' has a wrong offset!");
static_assert(offsetof(ABP_ShelterCharacter_C_CheckForJiggle, K2Node_MakeArray_Array_1) == 0x000200, "Member 'ABP_ShelterCharacter_C_CheckForJiggle::K2Node_MakeArray_Array_1' has a wrong offset!");
static_assert(offsetof(ABP_ShelterCharacter_C_CheckForJiggle, CallFunc_LessEqual_IntInt_ReturnValue_1) == 0x000210, "Member 'ABP_ShelterCharacter_C_CheckForJiggle::CallFunc_LessEqual_IntInt_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(ABP_ShelterCharacter_C_CheckForJiggle, CallFunc_Format_ReturnValue_1) == 0x000218, "Member 'ABP_ShelterCharacter_C_CheckForJiggle::CallFunc_Format_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(ABP_ShelterCharacter_C_CheckForJiggle, CallFunc_Conv_TextToString_ReturnValue_1) == 0x000230, "Member 'ABP_ShelterCharacter_C_CheckForJiggle::CallFunc_Conv_TextToString_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(ABP_ShelterCharacter_C_CheckForJiggle, CallFunc_Add_IntInt_ReturnValue_3) == 0x000240, "Member 'ABP_ShelterCharacter_C_CheckForJiggle::CallFunc_Add_IntInt_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(ABP_ShelterCharacter_C_CheckForJiggle, CallFunc_Conv_StringToName_ReturnValue_1) == 0x000244, "Member 'ABP_ShelterCharacter_C_CheckForJiggle::CallFunc_Conv_StringToName_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(ABP_ShelterCharacter_C_CheckForJiggle, Temp_int_Variable_2) == 0x00024C, "Member 'ABP_ShelterCharacter_C_CheckForJiggle::Temp_int_Variable_2' has a wrong offset!");
static_assert(offsetof(ABP_ShelterCharacter_C_CheckForJiggle, Temp_int_Loop_Counter_Variable_2) == 0x000250, "Member 'ABP_ShelterCharacter_C_CheckForJiggle::Temp_int_Loop_Counter_Variable_2' has a wrong offset!");
static_assert(offsetof(ABP_ShelterCharacter_C_CheckForJiggle, K2Node_MakeStruct_FormatArgumentData_2) == 0x000258, "Member 'ABP_ShelterCharacter_C_CheckForJiggle::K2Node_MakeStruct_FormatArgumentData_2' has a wrong offset!");
static_assert(offsetof(ABP_ShelterCharacter_C_CheckForJiggle, CallFunc_Add_IntInt_ReturnValue_4) == 0x000298, "Member 'ABP_ShelterCharacter_C_CheckForJiggle::CallFunc_Add_IntInt_ReturnValue_4' has a wrong offset!");
static_assert(offsetof(ABP_ShelterCharacter_C_CheckForJiggle, K2Node_MakeArray_Array_2) == 0x0002A0, "Member 'ABP_ShelterCharacter_C_CheckForJiggle::K2Node_MakeArray_Array_2' has a wrong offset!");
static_assert(offsetof(ABP_ShelterCharacter_C_CheckForJiggle, CallFunc_Format_ReturnValue_2) == 0x0002B0, "Member 'ABP_ShelterCharacter_C_CheckForJiggle::CallFunc_Format_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(ABP_ShelterCharacter_C_CheckForJiggle, CallFunc_Conv_TextToString_ReturnValue_2) == 0x0002C8, "Member 'ABP_ShelterCharacter_C_CheckForJiggle::CallFunc_Conv_TextToString_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(ABP_ShelterCharacter_C_CheckForJiggle, CallFunc_Conv_StringToName_ReturnValue_2) == 0x0002D8, "Member 'ABP_ShelterCharacter_C_CheckForJiggle::CallFunc_Conv_StringToName_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(ABP_ShelterCharacter_C_CheckForJiggle, CallFunc_LessEqual_IntInt_ReturnValue_2) == 0x0002E0, "Member 'ABP_ShelterCharacter_C_CheckForJiggle::CallFunc_LessEqual_IntInt_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(ABP_ShelterCharacter_C_CheckForJiggle, CallFunc_Add_IntInt_ReturnValue_5) == 0x0002E4, "Member 'ABP_ShelterCharacter_C_CheckForJiggle::CallFunc_Add_IntInt_ReturnValue_5' has a wrong offset!");
static_assert(offsetof(ABP_ShelterCharacter_C_CheckForJiggle, Temp_int_Array_Index_Variable_1) == 0x0002E8, "Member 'ABP_ShelterCharacter_C_CheckForJiggle::Temp_int_Array_Index_Variable_1' has a wrong offset!");
static_assert(offsetof(ABP_ShelterCharacter_C_CheckForJiggle, K2Node_MakeStruct_S_JiggleSettings) == 0x0002F0, "Member 'ABP_ShelterCharacter_C_CheckForJiggle::K2Node_MakeStruct_S_JiggleSettings' has a wrong offset!");
static_assert(offsetof(ABP_ShelterCharacter_C_CheckForJiggle, Temp_int_Array_Index_Variable_2) == 0x000308, "Member 'ABP_ShelterCharacter_C_CheckForJiggle::Temp_int_Array_Index_Variable_2' has a wrong offset!");
static_assert(offsetof(ABP_ShelterCharacter_C_CheckForJiggle, Temp_bool_True_if_break_was_hit_Variable_2) == 0x00030C, "Member 'ABP_ShelterCharacter_C_CheckForJiggle::Temp_bool_True_if_break_was_hit_Variable_2' has a wrong offset!");
static_assert(offsetof(ABP_ShelterCharacter_C_CheckForJiggle, CallFunc_Map_Keys_Keys) == 0x000310, "Member 'ABP_ShelterCharacter_C_CheckForJiggle::CallFunc_Map_Keys_Keys' has a wrong offset!");
static_assert(offsetof(ABP_ShelterCharacter_C_CheckForJiggle, CallFunc_Not_PreBool_ReturnValue_2) == 0x000320, "Member 'ABP_ShelterCharacter_C_CheckForJiggle::CallFunc_Not_PreBool_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(ABP_ShelterCharacter_C_CheckForJiggle, CallFunc_Array_Length_ReturnValue) == 0x000324, "Member 'ABP_ShelterCharacter_C_CheckForJiggle::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_ShelterCharacter_C_CheckForJiggle, CallFunc_GetSocketTransform_ReturnValue) == 0x000330, "Member 'ABP_ShelterCharacter_C_CheckForJiggle::CallFunc_GetSocketTransform_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_ShelterCharacter_C_CheckForJiggle, CallFunc_Array_Add_ReturnValue) == 0x000360, "Member 'ABP_ShelterCharacter_C_CheckForJiggle::CallFunc_Array_Add_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_ShelterCharacter_C_CheckForJiggle, CallFunc_DoesSocketExist_ReturnValue) == 0x000364, "Member 'ABP_ShelterCharacter_C_CheckForJiggle::CallFunc_DoesSocketExist_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_ShelterCharacter_C_CheckForJiggle, CallFunc_GetEnumeratorUserFriendlyName_ReturnValue) == 0x000368, "Member 'ABP_ShelterCharacter_C_CheckForJiggle::CallFunc_GetEnumeratorUserFriendlyName_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_ShelterCharacter_C_CheckForJiggle, CallFunc_GetEnumeratorUserFriendlyName_ReturnValue_1) == 0x000378, "Member 'ABP_ShelterCharacter_C_CheckForJiggle::CallFunc_GetEnumeratorUserFriendlyName_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(ABP_ShelterCharacter_C_CheckForJiggle, CallFunc_IsVisible_ReturnValue) == 0x000388, "Member 'ABP_ShelterCharacter_C_CheckForJiggle::CallFunc_IsVisible_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_ShelterCharacter_C_CheckForJiggle, CallFunc_GetDisplayName_ReturnValue) == 0x000390, "Member 'ABP_ShelterCharacter_C_CheckForJiggle::CallFunc_GetDisplayName_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_ShelterCharacter_C_CheckForJiggle, CallFunc_GetDisplayName_ReturnValue_1) == 0x0003A0, "Member 'ABP_ShelterCharacter_C_CheckForJiggle::CallFunc_GetDisplayName_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(ABP_ShelterCharacter_C_CheckForJiggle, CallFunc_Concat_StrStr_ReturnValue) == 0x0003B0, "Member 'ABP_ShelterCharacter_C_CheckForJiggle::CallFunc_Concat_StrStr_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_ShelterCharacter_C_CheckForJiggle, CallFunc_Concat_StrStr_ReturnValue_1) == 0x0003C0, "Member 'ABP_ShelterCharacter_C_CheckForJiggle::CallFunc_Concat_StrStr_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(ABP_ShelterCharacter_C_CheckForJiggle, CallFunc_Concat_StrStr_ReturnValue_2) == 0x0003D0, "Member 'ABP_ShelterCharacter_C_CheckForJiggle::CallFunc_Concat_StrStr_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(ABP_ShelterCharacter_C_CheckForJiggle, CallFunc_DoesSocketExist_ReturnValue_1) == 0x0003E0, "Member 'ABP_ShelterCharacter_C_CheckForJiggle::CallFunc_DoesSocketExist_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(ABP_ShelterCharacter_C_CheckForJiggle, CallFunc_Concat_StrStr_ReturnValue_3) == 0x0003E8, "Member 'ABP_ShelterCharacter_C_CheckForJiggle::CallFunc_Concat_StrStr_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(ABP_ShelterCharacter_C_CheckForJiggle, CallFunc_Concat_StrStr_ReturnValue_4) == 0x0003F8, "Member 'ABP_ShelterCharacter_C_CheckForJiggle::CallFunc_Concat_StrStr_ReturnValue_4' has a wrong offset!");
static_assert(offsetof(ABP_ShelterCharacter_C_CheckForJiggle, CallFunc_Concat_StrStr_ReturnValue_5) == 0x000408, "Member 'ABP_ShelterCharacter_C_CheckForJiggle::CallFunc_Concat_StrStr_ReturnValue_5' has a wrong offset!");
static_assert(offsetof(ABP_ShelterCharacter_C_CheckForJiggle, CallFunc_Concat_StrStr_ReturnValue_6) == 0x000418, "Member 'ABP_ShelterCharacter_C_CheckForJiggle::CallFunc_Concat_StrStr_ReturnValue_6' has a wrong offset!");
static_assert(offsetof(ABP_ShelterCharacter_C_CheckForJiggle, CallFunc_DoesSocketExist_ReturnValue_2) == 0x000428, "Member 'ABP_ShelterCharacter_C_CheckForJiggle::CallFunc_DoesSocketExist_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(ABP_ShelterCharacter_C_CheckForJiggle, CallFunc_GetSocketTransform_ReturnValue_1) == 0x000430, "Member 'ABP_ShelterCharacter_C_CheckForJiggle::CallFunc_GetSocketTransform_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(ABP_ShelterCharacter_C_CheckForJiggle, CallFunc_GetSocketTransform_ReturnValue_2) == 0x000460, "Member 'ABP_ShelterCharacter_C_CheckForJiggle::CallFunc_GetSocketTransform_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(ABP_ShelterCharacter_C_CheckForJiggle, CallFunc_IsDedicatedServer_ReturnValue) == 0x000490, "Member 'ABP_ShelterCharacter_C_CheckForJiggle::CallFunc_IsDedicatedServer_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_ShelterCharacter_C_CheckForJiggle, Temp_int_Loop_Counter_Variable_3) == 0x000494, "Member 'ABP_ShelterCharacter_C_CheckForJiggle::Temp_int_Loop_Counter_Variable_3' has a wrong offset!");
static_assert(offsetof(ABP_ShelterCharacter_C_CheckForJiggle, CallFunc_Not_PreBool_ReturnValue_3) == 0x000498, "Member 'ABP_ShelterCharacter_C_CheckForJiggle::CallFunc_Not_PreBool_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(ABP_ShelterCharacter_C_CheckForJiggle, CallFunc_Less_IntInt_ReturnValue) == 0x000499, "Member 'ABP_ShelterCharacter_C_CheckForJiggle::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_ShelterCharacter_C_CheckForJiggle, CallFunc_Add_IntInt_ReturnValue_6) == 0x00049C, "Member 'ABP_ShelterCharacter_C_CheckForJiggle::CallFunc_Add_IntInt_ReturnValue_6' has a wrong offset!");
static_assert(offsetof(ABP_ShelterCharacter_C_CheckForJiggle, CallFunc_BooleanAND_ReturnValue) == 0x0004A0, "Member 'ABP_ShelterCharacter_C_CheckForJiggle::CallFunc_BooleanAND_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_ShelterCharacter_C_CheckForJiggle, CallFunc_SetJiggleTypes_self_CastInput) == 0x0004A8, "Member 'ABP_ShelterCharacter_C_CheckForJiggle::CallFunc_SetJiggleTypes_self_CastInput' has a wrong offset!");
static_assert(offsetof(ABP_ShelterCharacter_C_CheckForJiggle, CallFunc_SetJiggleTypes_bSuccess) == 0x0004B8, "Member 'ABP_ShelterCharacter_C_CheckForJiggle::CallFunc_SetJiggleTypes_bSuccess' has a wrong offset!");
static_assert(offsetof(ABP_ShelterCharacter_C_CheckForJiggle, K2Node_MakeStruct_S_JiggleSettings_1) == 0x0004C0, "Member 'ABP_ShelterCharacter_C_CheckForJiggle::K2Node_MakeStruct_S_JiggleSettings_1' has a wrong offset!");
static_assert(offsetof(ABP_ShelterCharacter_C_CheckForJiggle, CallFunc_Map_Keys_Keys_1) == 0x0004D8, "Member 'ABP_ShelterCharacter_C_CheckForJiggle::CallFunc_Map_Keys_Keys_1' has a wrong offset!");
static_assert(offsetof(ABP_ShelterCharacter_C_CheckForJiggle, CallFunc_Array_Add_ReturnValue_1) == 0x0004E8, "Member 'ABP_ShelterCharacter_C_CheckForJiggle::CallFunc_Array_Add_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(ABP_ShelterCharacter_C_CheckForJiggle, CallFunc_Array_Get_Item) == 0x0004F0, "Member 'ABP_ShelterCharacter_C_CheckForJiggle::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(ABP_ShelterCharacter_C_CheckForJiggle, CallFunc_Array_Length_ReturnValue_1) == 0x000518, "Member 'ABP_ShelterCharacter_C_CheckForJiggle::CallFunc_Array_Length_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(ABP_ShelterCharacter_C_CheckForJiggle, CallFunc_Conv_SoftObjectReferenceToObject_ReturnValue) == 0x000520, "Member 'ABP_ShelterCharacter_C_CheckForJiggle::CallFunc_Conv_SoftObjectReferenceToObject_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_ShelterCharacter_C_CheckForJiggle, CallFunc_Less_IntInt_ReturnValue_1) == 0x000528, "Member 'ABP_ShelterCharacter_C_CheckForJiggle::CallFunc_Less_IntInt_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(ABP_ShelterCharacter_C_CheckForJiggle, K2Node_DynamicCast_AsSkeletal_Mesh) == 0x000530, "Member 'ABP_ShelterCharacter_C_CheckForJiggle::K2Node_DynamicCast_AsSkeletal_Mesh' has a wrong offset!");
static_assert(offsetof(ABP_ShelterCharacter_C_CheckForJiggle, K2Node_DynamicCast_bSuccess) == 0x000538, "Member 'ABP_ShelterCharacter_C_CheckForJiggle::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(ABP_ShelterCharacter_C_CheckForJiggle, CallFunc_BooleanAND_ReturnValue_1) == 0x000539, "Member 'ABP_ShelterCharacter_C_CheckForJiggle::CallFunc_BooleanAND_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(ABP_ShelterCharacter_C_CheckForJiggle, CallFunc_EqualEqual_ObjectObject_ReturnValue) == 0x00053A, "Member 'ABP_ShelterCharacter_C_CheckForJiggle::CallFunc_EqualEqual_ObjectObject_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_ShelterCharacter_C_CheckForJiggle, CallFunc_IsValid_ReturnValue) == 0x00053B, "Member 'ABP_ShelterCharacter_C_CheckForJiggle::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_ShelterCharacter_C_CheckForJiggle, CallFunc_Map_Find_Value) == 0x00053C, "Member 'ABP_ShelterCharacter_C_CheckForJiggle::CallFunc_Map_Find_Value' has a wrong offset!");
static_assert(offsetof(ABP_ShelterCharacter_C_CheckForJiggle, CallFunc_Map_Find_ReturnValue) == 0x00053D, "Member 'ABP_ShelterCharacter_C_CheckForJiggle::CallFunc_Map_Find_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_ShelterCharacter_C_CheckForJiggle, K2Node_MakeStruct_S_JiggleSettings_2) == 0x000540, "Member 'ABP_ShelterCharacter_C_CheckForJiggle::K2Node_MakeStruct_S_JiggleSettings_2' has a wrong offset!");
static_assert(offsetof(ABP_ShelterCharacter_C_CheckForJiggle, CallFunc_Map_Keys_Keys_2) == 0x000558, "Member 'ABP_ShelterCharacter_C_CheckForJiggle::CallFunc_Map_Keys_Keys_2' has a wrong offset!");
static_assert(offsetof(ABP_ShelterCharacter_C_CheckForJiggle, CallFunc_Array_Get_Item_1) == 0x000568, "Member 'ABP_ShelterCharacter_C_CheckForJiggle::CallFunc_Array_Get_Item_1' has a wrong offset!");
static_assert(offsetof(ABP_ShelterCharacter_C_CheckForJiggle, CallFunc_Array_Add_ReturnValue_2) == 0x000590, "Member 'ABP_ShelterCharacter_C_CheckForJiggle::CallFunc_Array_Add_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(ABP_ShelterCharacter_C_CheckForJiggle, CallFunc_Conv_SoftObjectReferenceToObject_ReturnValue_1) == 0x000598, "Member 'ABP_ShelterCharacter_C_CheckForJiggle::CallFunc_Conv_SoftObjectReferenceToObject_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(ABP_ShelterCharacter_C_CheckForJiggle, CallFunc_Map_Find_Value_1) == 0x0005A0, "Member 'ABP_ShelterCharacter_C_CheckForJiggle::CallFunc_Map_Find_Value_1' has a wrong offset!");
static_assert(offsetof(ABP_ShelterCharacter_C_CheckForJiggle, CallFunc_Map_Find_ReturnValue_1) == 0x0005A1, "Member 'ABP_ShelterCharacter_C_CheckForJiggle::CallFunc_Map_Find_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(ABP_ShelterCharacter_C_CheckForJiggle, K2Node_DynamicCast_AsSkeletal_Mesh_1) == 0x0005A8, "Member 'ABP_ShelterCharacter_C_CheckForJiggle::K2Node_DynamicCast_AsSkeletal_Mesh_1' has a wrong offset!");
static_assert(offsetof(ABP_ShelterCharacter_C_CheckForJiggle, K2Node_DynamicCast_bSuccess_1) == 0x0005B0, "Member 'ABP_ShelterCharacter_C_CheckForJiggle::K2Node_DynamicCast_bSuccess_1' has a wrong offset!");
static_assert(offsetof(ABP_ShelterCharacter_C_CheckForJiggle, CallFunc_EqualEqual_ObjectObject_ReturnValue_1) == 0x0005B1, "Member 'ABP_ShelterCharacter_C_CheckForJiggle::CallFunc_EqualEqual_ObjectObject_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(ABP_ShelterCharacter_C_CheckForJiggle, CallFunc_IsValid_ReturnValue_1) == 0x0005B2, "Member 'ABP_ShelterCharacter_C_CheckForJiggle::CallFunc_IsValid_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(ABP_ShelterCharacter_C_CheckForJiggle, CallFunc_Array_Length_ReturnValue_2) == 0x0005B4, "Member 'ABP_ShelterCharacter_C_CheckForJiggle::CallFunc_Array_Length_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(ABP_ShelterCharacter_C_CheckForJiggle, Temp_int_Array_Index_Variable_3) == 0x0005B8, "Member 'ABP_ShelterCharacter_C_CheckForJiggle::Temp_int_Array_Index_Variable_3' has a wrong offset!");
static_assert(offsetof(ABP_ShelterCharacter_C_CheckForJiggle, CallFunc_Less_IntInt_ReturnValue_2) == 0x0005BC, "Member 'ABP_ShelterCharacter_C_CheckForJiggle::CallFunc_Less_IntInt_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(ABP_ShelterCharacter_C_CheckForJiggle, CallFunc_Array_Get_Item_2) == 0x0005C0, "Member 'ABP_ShelterCharacter_C_CheckForJiggle::CallFunc_Array_Get_Item_2' has a wrong offset!");
static_assert(offsetof(ABP_ShelterCharacter_C_CheckForJiggle, CallFunc_BooleanAND_ReturnValue_2) == 0x0005E8, "Member 'ABP_ShelterCharacter_C_CheckForJiggle::CallFunc_BooleanAND_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(ABP_ShelterCharacter_C_CheckForJiggle, CallFunc_Conv_SoftObjectReferenceToObject_ReturnValue_2) == 0x0005F0, "Member 'ABP_ShelterCharacter_C_CheckForJiggle::CallFunc_Conv_SoftObjectReferenceToObject_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(ABP_ShelterCharacter_C_CheckForJiggle, K2Node_DynamicCast_AsSkeletal_Mesh_2) == 0x0005F8, "Member 'ABP_ShelterCharacter_C_CheckForJiggle::K2Node_DynamicCast_AsSkeletal_Mesh_2' has a wrong offset!");
static_assert(offsetof(ABP_ShelterCharacter_C_CheckForJiggle, K2Node_DynamicCast_bSuccess_2) == 0x000600, "Member 'ABP_ShelterCharacter_C_CheckForJiggle::K2Node_DynamicCast_bSuccess_2' has a wrong offset!");
static_assert(offsetof(ABP_ShelterCharacter_C_CheckForJiggle, CallFunc_Map_Find_Value_2) == 0x000601, "Member 'ABP_ShelterCharacter_C_CheckForJiggle::CallFunc_Map_Find_Value_2' has a wrong offset!");
static_assert(offsetof(ABP_ShelterCharacter_C_CheckForJiggle, CallFunc_Map_Find_ReturnValue_2) == 0x000602, "Member 'ABP_ShelterCharacter_C_CheckForJiggle::CallFunc_Map_Find_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(ABP_ShelterCharacter_C_CheckForJiggle, CallFunc_EqualEqual_ObjectObject_ReturnValue_2) == 0x000603, "Member 'ABP_ShelterCharacter_C_CheckForJiggle::CallFunc_EqualEqual_ObjectObject_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(ABP_ShelterCharacter_C_CheckForJiggle, CallFunc_IsValid_ReturnValue_2) == 0x000604, "Member 'ABP_ShelterCharacter_C_CheckForJiggle::CallFunc_IsValid_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(ABP_ShelterCharacter_C_CheckForJiggle, CallFunc_GetDataTableRowNames_OutRowNames) == 0x000608, "Member 'ABP_ShelterCharacter_C_CheckForJiggle::CallFunc_GetDataTableRowNames_OutRowNames' has a wrong offset!");
static_assert(offsetof(ABP_ShelterCharacter_C_CheckForJiggle, CallFunc_Array_Get_Item_3) == 0x000618, "Member 'ABP_ShelterCharacter_C_CheckForJiggle::CallFunc_Array_Get_Item_3' has a wrong offset!");
static_assert(offsetof(ABP_ShelterCharacter_C_CheckForJiggle, CallFunc_Array_Length_ReturnValue_3) == 0x000620, "Member 'ABP_ShelterCharacter_C_CheckForJiggle::CallFunc_Array_Length_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(ABP_ShelterCharacter_C_CheckForJiggle, CallFunc_GetDataTableRowFromName_OutRow) == 0x000628, "Member 'ABP_ShelterCharacter_C_CheckForJiggle::CallFunc_GetDataTableRowFromName_OutRow' has a wrong offset!");
static_assert(offsetof(ABP_ShelterCharacter_C_CheckForJiggle, CallFunc_GetDataTableRowFromName_ReturnValue) == 0x0006F8, "Member 'ABP_ShelterCharacter_C_CheckForJiggle::CallFunc_GetDataTableRowFromName_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_ShelterCharacter_C_CheckForJiggle, CallFunc_Less_IntInt_ReturnValue_3) == 0x0006F9, "Member 'ABP_ShelterCharacter_C_CheckForJiggle::CallFunc_Less_IntInt_ReturnValue_3' has a wrong offset!");

}

