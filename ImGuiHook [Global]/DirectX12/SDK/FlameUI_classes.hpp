#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: FlameUI

#include "Basic.hpp"

#include "Engine_classes.hpp"
#include "CoreUObject_structs.hpp"
#include "CoreUObject_classes.hpp"
#include "FlameUI_structs.hpp"
#include "UMG_classes.hpp"


namespace SDK
{

// Class FlameUI.FlameTextBlock
// 0x0008 (0x02B0 - 0x02A8)
class UFlameTextBlock : public UTextBlock
{
public:
	bool                                          bDisplayAsUpperCase;                               // 0x02A8(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_2A9[0x7];                                      // 0x02A9(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void SetDisplayAsUpperCase(bool bInDisplayAsUpperCase);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"FlameTextBlock">();
	}
	static class UFlameTextBlock* GetDefaultObj()
	{
		return GetDefaultObjImpl<UFlameTextBlock>();
	}
};
static_assert(alignof(UFlameTextBlock) == 0x000008, "Wrong alignment on UFlameTextBlock");
static_assert(sizeof(UFlameTextBlock) == 0x0002B0, "Wrong size on UFlameTextBlock");
static_assert(offsetof(UFlameTextBlock, bDisplayAsUpperCase) == 0x0002A8, "Member 'UFlameTextBlock::bDisplayAsUpperCase' has a wrong offset!");

// Class FlameUI.CoreFunctions
// 0x0000 (0x0028 - 0x0028)
class UCoreFunctions final : public UBlueprintFunctionLibrary
{
public:
	static EFlamePlatform GetCurrentPlatform();
	static bool IsLowEndPlatform();
	static void SetFlamePlatform(EFlamePlatform InPlatform);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"CoreFunctions">();
	}
	static class UCoreFunctions* GetDefaultObj()
	{
		return GetDefaultObjImpl<UCoreFunctions>();
	}
};
static_assert(alignof(UCoreFunctions) == 0x000008, "Wrong alignment on UCoreFunctions");
static_assert(sizeof(UCoreFunctions) == 0x000028, "Wrong size on UCoreFunctions");

// Class FlameUI.FlameSlider
// 0x0100 (0x05F8 - 0x04F8)
class UFlameSlider : public USlider
{
public:
	uint8                                         Pad_4F8[0x8];                                      // 0x04F8(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	bool                                          bIsFocused;                                        // 0x0500(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_501[0x3];                                      // 0x0501(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FLinearColor                           FocusedBarColor;                                   // 0x0504(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FLinearColor                           FocusedHandleColor;                                // 0x0514(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_524[0x20];                                     // 0x0524(0x0020)(Fixing Size After Last Property [ Dumper-7 ])
	bool                                          bStopNavigationOnCapture;                          // 0x0544(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_545[0x3];                                      // 0x0545(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	FMulticastInlineDelegateProperty_             OnFocused;                                         // 0x0548(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, Protected, NativeAccessSpecifierProtected)
	FMulticastInlineDelegateProperty_             OnUnfocused;                                       // 0x0558(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, Protected, NativeAccessSpecifierProtected)
	uint8                                         Pad_568[0x90];                                     // 0x0568(0x0090)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void OnCaptureBegin();
	void OnCaptureEnd();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"FlameSlider">();
	}
	static class UFlameSlider* GetDefaultObj()
	{
		return GetDefaultObjImpl<UFlameSlider>();
	}
};
static_assert(alignof(UFlameSlider) == 0x000008, "Wrong alignment on UFlameSlider");
static_assert(sizeof(UFlameSlider) == 0x0005F8, "Wrong size on UFlameSlider");
static_assert(offsetof(UFlameSlider, bIsFocused) == 0x000500, "Member 'UFlameSlider::bIsFocused' has a wrong offset!");
static_assert(offsetof(UFlameSlider, FocusedBarColor) == 0x000504, "Member 'UFlameSlider::FocusedBarColor' has a wrong offset!");
static_assert(offsetof(UFlameSlider, FocusedHandleColor) == 0x000514, "Member 'UFlameSlider::FocusedHandleColor' has a wrong offset!");
static_assert(offsetof(UFlameSlider, bStopNavigationOnCapture) == 0x000544, "Member 'UFlameSlider::bStopNavigationOnCapture' has a wrong offset!");
static_assert(offsetof(UFlameSlider, OnFocused) == 0x000548, "Member 'UFlameSlider::OnFocused' has a wrong offset!");
static_assert(offsetof(UFlameSlider, OnUnfocused) == 0x000558, "Member 'UFlameSlider::OnUnfocused' has a wrong offset!");

// Class FlameUI.CustomCursor
// 0x0008 (0x0268 - 0x0260)
class UCustomCursor : public UUserWidget
{
public:
	ECursorMode                                   CurrentCursorMode;                                 // 0x0260(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_261[0x7];                                      // 0x0261(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void SetCurrentCursorMode(ECursorMode CursorMode);
	void ToggleMouseCursor();
	void UpdateCursorMode();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"CustomCursor">();
	}
	static class UCustomCursor* GetDefaultObj()
	{
		return GetDefaultObjImpl<UCustomCursor>();
	}
};
static_assert(alignof(UCustomCursor) == 0x000008, "Wrong alignment on UCustomCursor");
static_assert(sizeof(UCustomCursor) == 0x000268, "Wrong size on UCustomCursor");
static_assert(offsetof(UCustomCursor, CurrentCursorMode) == 0x000260, "Member 'UCustomCursor::CurrentCursorMode' has a wrong offset!");

// Class FlameUI.FlameUIEditorSettings
// 0x0008 (0x0030 - 0x0028)
class UFlameUIEditorSettings final : public UObject
{
public:
	EFlamePlatform                                PreviewPlatform;                                   // 0x0028(0x0001)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_29[0x7];                                       // 0x0029(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"FlameUIEditorSettings">();
	}
	static class UFlameUIEditorSettings* GetDefaultObj()
	{
		return GetDefaultObjImpl<UFlameUIEditorSettings>();
	}
};
static_assert(alignof(UFlameUIEditorSettings) == 0x000008, "Wrong alignment on UFlameUIEditorSettings");
static_assert(sizeof(UFlameUIEditorSettings) == 0x000030, "Wrong size on UFlameUIEditorSettings");
static_assert(offsetof(UFlameUIEditorSettings, PreviewPlatform) == 0x000028, "Member 'UFlameUIEditorSettings::PreviewPlatform' has a wrong offset!");

// Class FlameUI.FlameButton
// 0x00C8 (0x04F0 - 0x0428)
class UFlameButton final : public UButton
{
public:
	uint8                                         Pad_428[0x8];                                      // 0x0428(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	FMulticastInlineDelegateProperty_             OnFocused;                                         // 0x0430(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_             OnUnfocused;                                       // 0x0440(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	ECursorMode                                   HoverState;                                        // 0x0450(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ECursorMode                                   DisabledState;                                     // 0x0451(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_452[0xE];                                      // 0x0452(0x000E)(Fixing Size After Last Property [ Dumper-7 ])
	bool                                          bIsFocused;                                        // 0x0460(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_461[0x8F];                                     // 0x0461(0x008F)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void UpdateSavedBrush();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"FlameButton">();
	}
	static class UFlameButton* GetDefaultObj()
	{
		return GetDefaultObjImpl<UFlameButton>();
	}
};
static_assert(alignof(UFlameButton) == 0x000008, "Wrong alignment on UFlameButton");
static_assert(sizeof(UFlameButton) == 0x0004F0, "Wrong size on UFlameButton");
static_assert(offsetof(UFlameButton, OnFocused) == 0x000430, "Member 'UFlameButton::OnFocused' has a wrong offset!");
static_assert(offsetof(UFlameButton, OnUnfocused) == 0x000440, "Member 'UFlameButton::OnUnfocused' has a wrong offset!");
static_assert(offsetof(UFlameButton, HoverState) == 0x000450, "Member 'UFlameButton::HoverState' has a wrong offset!");
static_assert(offsetof(UFlameButton, DisabledState) == 0x000451, "Member 'UFlameButton::DisabledState' has a wrong offset!");
static_assert(offsetof(UFlameButton, bIsFocused) == 0x000460, "Member 'UFlameButton::bIsFocused' has a wrong offset!");

// Class FlameUI.FlameCheckBox
// 0x01C8 (0x0938 - 0x0770)
class UFlameCheckBox : public UCheckBox
{
public:
	uint8                                         Pad_770[0x8];                                      // 0x0770(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	bool                                          bIsFocused;                                        // 0x0778(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_779[0x7];                                      // 0x0779(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	FMulticastInlineDelegateProperty_             OnFocused;                                         // 0x0780(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, Protected, NativeAccessSpecifierProtected)
	FMulticastInlineDelegateProperty_             OnUnfocused;                                       // 0x0790(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, Protected, NativeAccessSpecifierProtected)
	uint8                                         Pad_7A0[0x198];                                    // 0x07A0(0x0198)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"FlameCheckBox">();
	}
	static class UFlameCheckBox* GetDefaultObj()
	{
		return GetDefaultObjImpl<UFlameCheckBox>();
	}
};
static_assert(alignof(UFlameCheckBox) == 0x000008, "Wrong alignment on UFlameCheckBox");
static_assert(sizeof(UFlameCheckBox) == 0x000938, "Wrong size on UFlameCheckBox");
static_assert(offsetof(UFlameCheckBox, bIsFocused) == 0x000778, "Member 'UFlameCheckBox::bIsFocused' has a wrong offset!");
static_assert(offsetof(UFlameCheckBox, OnFocused) == 0x000780, "Member 'UFlameCheckBox::OnFocused' has a wrong offset!");
static_assert(offsetof(UFlameCheckBox, OnUnfocused) == 0x000790, "Member 'UFlameCheckBox::OnUnfocused' has a wrong offset!");

// Class FlameUI.FlameUISettings
// 0x0078 (0x00A0 - 0x0028)
class UFlameUISettings final : public UObject
{
public:
	TMap<EFlamePlatform, TSoftClassPtr<class UClass>> IconSets;                                          // 0x0028(0x0050)(Edit, Config, UObjectWrapper, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UMaterial>               InputIconMaterial;                                 // 0x0078(0x0028)(Edit, Config, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"FlameUISettings">();
	}
	static class UFlameUISettings* GetDefaultObj()
	{
		return GetDefaultObjImpl<UFlameUISettings>();
	}
};
static_assert(alignof(UFlameUISettings) == 0x000008, "Wrong alignment on UFlameUISettings");
static_assert(sizeof(UFlameUISettings) == 0x0000A0, "Wrong size on UFlameUISettings");
static_assert(offsetof(UFlameUISettings, IconSets) == 0x000028, "Member 'UFlameUISettings::IconSets' has a wrong offset!");
static_assert(offsetof(UFlameUISettings, InputIconMaterial) == 0x000078, "Member 'UFlameUISettings::InputIconMaterial' has a wrong offset!");

// Class FlameUI.FocusInterface
// 0x0000 (0x0028 - 0x0028)
class IFocusInterface final : public IInterface
{
public:
	void OnFocusLost();
	void OnFocusReceived();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"FocusInterface">();
	}
	static class IFocusInterface* GetDefaultObj()
	{
		return GetDefaultObjImpl<IFocusInterface>();
	}
};
static_assert(alignof(IFocusInterface) == 0x000008, "Wrong alignment on IFocusInterface");
static_assert(sizeof(IFocusInterface) == 0x000028, "Wrong size on IFocusInterface");

// Class FlameUI.InputFunctions
// 0x0000 (0x0028 - 0x0028)
class UInputFunctions final : public UBlueprintFunctionLibrary
{
public:
	static class UTexture2D* GetInputIcon(EInputIcon InIcon, EInputIconType InIconType);
	static class FString GetInputIconActionName(EInputIcon InIcon);
	static EInputIcon GetInputIconWithCustomControls(EInputIcon InIcon, EInputIconType InIconType);
	static EInputIcon GetWindowsControllerIcon(EInputIcon InIcon);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"InputFunctions">();
	}
	static class UInputFunctions* GetDefaultObj()
	{
		return GetDefaultObjImpl<UInputFunctions>();
	}
};
static_assert(alignof(UInputFunctions) == 0x000008, "Wrong alignment on UInputFunctions");
static_assert(sizeof(UInputFunctions) == 0x000028, "Wrong size on UInputFunctions");

// Class FlameUI.InputIconImage
// 0x0018 (0x0228 - 0x0210)
class UInputIconImage final : public UImage
{
public:
	EInputIcon                                    InputIcon;                                         // 0x0210(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bIsHoldable;                                       // 0x0211(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_212[0x2];                                      // 0x0212(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         ProgressPercentage;                                // 0x0214(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_218[0x8];                                      // 0x0218(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	class UMaterialInstanceDynamic*               DynamicIconMaterial;                               // 0x0220(0x0008)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)

public:
	void SetInputIcon(EInputIcon InInputIcon, bool bInIsHoldable);
	void SetProgressPercentage(float InProgressPercentage);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"InputIconImage">();
	}
	static class UInputIconImage* GetDefaultObj()
	{
		return GetDefaultObjImpl<UInputIconImage>();
	}
};
static_assert(alignof(UInputIconImage) == 0x000008, "Wrong alignment on UInputIconImage");
static_assert(sizeof(UInputIconImage) == 0x000228, "Wrong size on UInputIconImage");
static_assert(offsetof(UInputIconImage, InputIcon) == 0x000210, "Member 'UInputIconImage::InputIcon' has a wrong offset!");
static_assert(offsetof(UInputIconImage, bIsHoldable) == 0x000211, "Member 'UInputIconImage::bIsHoldable' has a wrong offset!");
static_assert(offsetof(UInputIconImage, ProgressPercentage) == 0x000214, "Member 'UInputIconImage::ProgressPercentage' has a wrong offset!");
static_assert(offsetof(UInputIconImage, DynamicIconMaterial) == 0x000220, "Member 'UInputIconImage::DynamicIconMaterial' has a wrong offset!");

// Class FlameUI.InputIconSet
// 0x0240 (0x0268 - 0x0028)
class UInputIconSet : public UObject
{
public:
	struct FInputIconVisual                       Confirm;                                           // 0x0028(0x0018)(Edit, DisableEditOnInstance, NoDestructor, Protected, NativeAccessSpecifierProtected)
	struct FInputIconVisual                       Cancel;                                            // 0x0040(0x0018)(Edit, DisableEditOnInstance, NoDestructor, Protected, NativeAccessSpecifierProtected)
	struct FInputIconVisual                       ContextOne;                                        // 0x0058(0x0018)(Edit, DisableEditOnInstance, NoDestructor, Protected, NativeAccessSpecifierProtected)
	struct FInputIconVisual                       ContextTwo;                                        // 0x0070(0x0018)(Edit, DisableEditOnInstance, NoDestructor, Protected, NativeAccessSpecifierProtected)
	struct FInputIconVisual                       Navigation;                                        // 0x0088(0x0018)(Edit, DisableEditOnInstance, NoDestructor, Protected, NativeAccessSpecifierProtected)
	struct FInputIconVisual                       NavigationRight;                                   // 0x00A0(0x0018)(Edit, DisableEditOnInstance, NoDestructor, Protected, NativeAccessSpecifierProtected)
	struct FInputIconVisual                       DirectionUp;                                       // 0x00B8(0x0018)(Edit, DisableEditOnInstance, NoDestructor, Protected, NativeAccessSpecifierProtected)
	struct FInputIconVisual                       DirectionDown;                                     // 0x00D0(0x0018)(Edit, DisableEditOnInstance, NoDestructor, Protected, NativeAccessSpecifierProtected)
	struct FInputIconVisual                       DirectionLeft;                                     // 0x00E8(0x0018)(Edit, DisableEditOnInstance, NoDestructor, Protected, NativeAccessSpecifierProtected)
	struct FInputIconVisual                       DirectionRight;                                    // 0x0100(0x0018)(Edit, DisableEditOnInstance, NoDestructor, Protected, NativeAccessSpecifierProtected)
	struct FInputIconVisual                       PlayerMenu;                                        // 0x0118(0x0018)(Edit, DisableEditOnInstance, NoDestructor, Protected, NativeAccessSpecifierProtected)
	struct FInputIconVisual                       GameMenu;                                          // 0x0130(0x0018)(Edit, DisableEditOnInstance, NoDestructor, Protected, NativeAccessSpecifierProtected)
	struct FInputIconVisual                       LeftTab;                                           // 0x0148(0x0018)(Edit, DisableEditOnInstance, NoDestructor, Protected, NativeAccessSpecifierProtected)
	struct FInputIconVisual                       LeftSubtab;                                        // 0x0160(0x0018)(Edit, DisableEditOnInstance, NoDestructor, Protected, NativeAccessSpecifierProtected)
	struct FInputIconVisual                       RightTab;                                          // 0x0178(0x0018)(Edit, DisableEditOnInstance, NoDestructor, Protected, NativeAccessSpecifierProtected)
	struct FInputIconVisual                       RightSubtab;                                       // 0x0190(0x0018)(Edit, DisableEditOnInstance, NoDestructor, Protected, NativeAccessSpecifierProtected)
	struct FInputIconVisual                       LeftAction;                                        // 0x01A8(0x0018)(Edit, DisableEditOnInstance, NoDestructor, Protected, NativeAccessSpecifierProtected)
	struct FInputIconVisual                       RightAction;                                       // 0x01C0(0x0018)(Edit, DisableEditOnInstance, NoDestructor, Protected, NativeAccessSpecifierProtected)
	struct FInputIconVisual                       DirectionUpDown;                                   // 0x01D8(0x0018)(Edit, DisableEditOnInstance, NoDestructor, Protected, NativeAccessSpecifierProtected)
	struct FInputIconVisual                       DirectionLeftRight;                                // 0x01F0(0x0018)(Edit, DisableEditOnInstance, NoDestructor, Protected, NativeAccessSpecifierProtected)
	struct FInputIconVisual                       CharacterJump;                                     // 0x0208(0x0018)(Edit, DisableEditOnInstance, NoDestructor, Protected, NativeAccessSpecifierProtected)
	struct FInputIconVisual                       CharacterCrouch;                                   // 0x0220(0x0018)(Edit, DisableEditOnInstance, NoDestructor, Protected, NativeAccessSpecifierProtected)
	struct FInputIconVisual                       CharacterInteract;                                 // 0x0238(0x0018)(Edit, DisableEditOnInstance, NoDestructor, Protected, NativeAccessSpecifierProtected)
	struct FInputIconVisual                       CharacterEquip;                                    // 0x0250(0x0018)(Edit, DisableEditOnInstance, NoDestructor, Protected, NativeAccessSpecifierProtected)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"InputIconSet">();
	}
	static class UInputIconSet* GetDefaultObj()
	{
		return GetDefaultObjImpl<UInputIconSet>();
	}
};
static_assert(alignof(UInputIconSet) == 0x000008, "Wrong alignment on UInputIconSet");
static_assert(sizeof(UInputIconSet) == 0x000268, "Wrong size on UInputIconSet");
static_assert(offsetof(UInputIconSet, Confirm) == 0x000028, "Member 'UInputIconSet::Confirm' has a wrong offset!");
static_assert(offsetof(UInputIconSet, Cancel) == 0x000040, "Member 'UInputIconSet::Cancel' has a wrong offset!");
static_assert(offsetof(UInputIconSet, ContextOne) == 0x000058, "Member 'UInputIconSet::ContextOne' has a wrong offset!");
static_assert(offsetof(UInputIconSet, ContextTwo) == 0x000070, "Member 'UInputIconSet::ContextTwo' has a wrong offset!");
static_assert(offsetof(UInputIconSet, Navigation) == 0x000088, "Member 'UInputIconSet::Navigation' has a wrong offset!");
static_assert(offsetof(UInputIconSet, NavigationRight) == 0x0000A0, "Member 'UInputIconSet::NavigationRight' has a wrong offset!");
static_assert(offsetof(UInputIconSet, DirectionUp) == 0x0000B8, "Member 'UInputIconSet::DirectionUp' has a wrong offset!");
static_assert(offsetof(UInputIconSet, DirectionDown) == 0x0000D0, "Member 'UInputIconSet::DirectionDown' has a wrong offset!");
static_assert(offsetof(UInputIconSet, DirectionLeft) == 0x0000E8, "Member 'UInputIconSet::DirectionLeft' has a wrong offset!");
static_assert(offsetof(UInputIconSet, DirectionRight) == 0x000100, "Member 'UInputIconSet::DirectionRight' has a wrong offset!");
static_assert(offsetof(UInputIconSet, PlayerMenu) == 0x000118, "Member 'UInputIconSet::PlayerMenu' has a wrong offset!");
static_assert(offsetof(UInputIconSet, GameMenu) == 0x000130, "Member 'UInputIconSet::GameMenu' has a wrong offset!");
static_assert(offsetof(UInputIconSet, LeftTab) == 0x000148, "Member 'UInputIconSet::LeftTab' has a wrong offset!");
static_assert(offsetof(UInputIconSet, LeftSubtab) == 0x000160, "Member 'UInputIconSet::LeftSubtab' has a wrong offset!");
static_assert(offsetof(UInputIconSet, RightTab) == 0x000178, "Member 'UInputIconSet::RightTab' has a wrong offset!");
static_assert(offsetof(UInputIconSet, RightSubtab) == 0x000190, "Member 'UInputIconSet::RightSubtab' has a wrong offset!");
static_assert(offsetof(UInputIconSet, LeftAction) == 0x0001A8, "Member 'UInputIconSet::LeftAction' has a wrong offset!");
static_assert(offsetof(UInputIconSet, RightAction) == 0x0001C0, "Member 'UInputIconSet::RightAction' has a wrong offset!");
static_assert(offsetof(UInputIconSet, DirectionUpDown) == 0x0001D8, "Member 'UInputIconSet::DirectionUpDown' has a wrong offset!");
static_assert(offsetof(UInputIconSet, DirectionLeftRight) == 0x0001F0, "Member 'UInputIconSet::DirectionLeftRight' has a wrong offset!");
static_assert(offsetof(UInputIconSet, CharacterJump) == 0x000208, "Member 'UInputIconSet::CharacterJump' has a wrong offset!");
static_assert(offsetof(UInputIconSet, CharacterCrouch) == 0x000220, "Member 'UInputIconSet::CharacterCrouch' has a wrong offset!");
static_assert(offsetof(UInputIconSet, CharacterInteract) == 0x000238, "Member 'UInputIconSet::CharacterInteract' has a wrong offset!");
static_assert(offsetof(UInputIconSet, CharacterEquip) == 0x000250, "Member 'UInputIconSet::CharacterEquip' has a wrong offset!");

// Class FlameUI.InputIconSetDesktop
// 0x0BA0 (0x0E08 - 0x0268)
class UInputIconSetDesktop : public UInputIconSet
{
public:
	struct FInputIconVisual                       ContextTwoGame;                                    // 0x0268(0x0018)(Edit, DisableEditOnInstance, NoDestructor, Protected, NativeAccessSpecifierProtected)
	struct FInputIconVisual                       Pan;                                               // 0x0280(0x0018)(Edit, DisableEditOnInstance, NoDestructor, Protected, NativeAccessSpecifierProtected)
	struct FInputIconVisual                       FreehandPan;                                       // 0x0298(0x0018)(Edit, DisableEditOnInstance, NoDestructor, Protected, NativeAccessSpecifierProtected)
	struct FInputIconVisual                       Rotate;                                            // 0x02B0(0x0018)(Edit, DisableEditOnInstance, NoDestructor, Protected, NativeAccessSpecifierProtected)
	struct FInputIconVisual                       Zoom;                                              // 0x02C8(0x0018)(Edit, DisableEditOnInstance, NoDestructor, Protected, NativeAccessSpecifierProtected)
	struct FInputIconVisual                       AmmoInspect;                                       // 0x02E0(0x0018)(Edit, DisableEditOnInstance, NoDestructor, Protected, NativeAccessSpecifierProtected)
	struct FInputIconVisual                       AmmoStack;                                         // 0x02F8(0x0018)(Edit, DisableEditOnInstance, NoDestructor, Protected, NativeAccessSpecifierProtected)
	struct FInputIconVisual                       MenuInteract;                                      // 0x0310(0x0018)(Edit, DisableEditOnInstance, NoDestructor, Protected, NativeAccessSpecifierProtected)
	struct FInputIconVisual                       MenuContextTwo;                                    // 0x0328(0x0018)(Edit, DisableEditOnInstance, NoDestructor, Protected, NativeAccessSpecifierProtected)
	struct FInputIconVisual                       MenuConsumable;                                    // 0x0340(0x0018)(Edit, DisableEditOnInstance, NoDestructor, Protected, NativeAccessSpecifierProtected)
	struct FInputIconVisual                       MenuWeapon;                                        // 0x0358(0x0018)(Edit, DisableEditOnInstance, NoDestructor, Protected, NativeAccessSpecifierProtected)
	struct FInputIconVisual                       ReloadContextual;                                  // 0x0370(0x0018)(Edit, DisableEditOnInstance, NoDestructor, Protected, NativeAccessSpecifierProtected)
	struct FInputIconVisual                       VoteKickYes;                                       // 0x0388(0x0018)(Edit, DisableEditOnInstance, NoDestructor, Protected, NativeAccessSpecifierProtected)
	struct FInputIconVisual                       VoteKickNo;                                        // 0x03A0(0x0018)(Edit, DisableEditOnInstance, NoDestructor, Protected, NativeAccessSpecifierProtected)
	struct FInputIconVisual                       CharacterSprint;                                   // 0x03B8(0x0018)(Edit, DisableEditOnInstance, NoDestructor, Protected, NativeAccessSpecifierProtected)
	struct FInputIconVisual                       CharacterFire;                                     // 0x03D0(0x0018)(Edit, DisableEditOnInstance, NoDestructor, Protected, NativeAccessSpecifierProtected)
	struct FInputIconVisual                       CharacterAim;                                      // 0x03E8(0x0018)(Edit, DisableEditOnInstance, NoDestructor, Protected, NativeAccessSpecifierProtected)
	struct FInputIconVisual                       CharacterSwapPerspective;                          // 0x0400(0x0018)(Edit, DisableEditOnInstance, NoDestructor, Protected, NativeAccessSpecifierProtected)
	struct FInputIconVisual                       CharacterToggleContextual;                         // 0x0418(0x0018)(Edit, DisableEditOnInstance, NoDestructor, Protected, NativeAccessSpecifierProtected)
	struct FInputIconVisual                       CharacterMelee;                                    // 0x0430(0x0018)(Edit, DisableEditOnInstance, NoDestructor, Protected, NativeAccessSpecifierProtected)
	struct FInputIconVisual                       CharacterMap;                                      // 0x0448(0x0018)(Edit, DisableEditOnInstance, NoDestructor, Protected, NativeAccessSpecifierProtected)
	struct FInputIconVisual                       CharacterGesture;                                  // 0x0460(0x0018)(Edit, DisableEditOnInstance, NoDestructor, Protected, NativeAccessSpecifierProtected)
	struct FInputIconVisual                       CharacterChangeFireMode;                           // 0x0478(0x0018)(Edit, DisableEditOnInstance, NoDestructor, Protected, NativeAccessSpecifierProtected)
	struct FInputIconVisual                       CharacterTool;                                     // 0x0490(0x0018)(Edit, DisableEditOnInstance, NoDestructor, Protected, NativeAccessSpecifierProtected)
	struct FInputIconVisual                       KeyboardA;                                         // 0x04A8(0x0018)(Edit, DisableEditOnInstance, NoDestructor, Protected, NativeAccessSpecifierProtected)
	struct FInputIconVisual                       KeyboardB;                                         // 0x04C0(0x0018)(Edit, DisableEditOnInstance, NoDestructor, Protected, NativeAccessSpecifierProtected)
	struct FInputIconVisual                       KeyboardC;                                         // 0x04D8(0x0018)(Edit, DisableEditOnInstance, NoDestructor, Protected, NativeAccessSpecifierProtected)
	struct FInputIconVisual                       KeyboardD;                                         // 0x04F0(0x0018)(Edit, DisableEditOnInstance, NoDestructor, Protected, NativeAccessSpecifierProtected)
	struct FInputIconVisual                       KeyboardE;                                         // 0x0508(0x0018)(Edit, DisableEditOnInstance, NoDestructor, Protected, NativeAccessSpecifierProtected)
	struct FInputIconVisual                       KeyboardF;                                         // 0x0520(0x0018)(Edit, DisableEditOnInstance, NoDestructor, Protected, NativeAccessSpecifierProtected)
	struct FInputIconVisual                       KeyboardG;                                         // 0x0538(0x0018)(Edit, DisableEditOnInstance, NoDestructor, Protected, NativeAccessSpecifierProtected)
	struct FInputIconVisual                       KeyboardH;                                         // 0x0550(0x0018)(Edit, DisableEditOnInstance, NoDestructor, Protected, NativeAccessSpecifierProtected)
	struct FInputIconVisual                       KeyboardI;                                         // 0x0568(0x0018)(Edit, DisableEditOnInstance, NoDestructor, Protected, NativeAccessSpecifierProtected)
	struct FInputIconVisual                       KeyboardJ;                                         // 0x0580(0x0018)(Edit, DisableEditOnInstance, NoDestructor, Protected, NativeAccessSpecifierProtected)
	struct FInputIconVisual                       KeyboardK;                                         // 0x0598(0x0018)(Edit, DisableEditOnInstance, NoDestructor, Protected, NativeAccessSpecifierProtected)
	struct FInputIconVisual                       KeyboardL;                                         // 0x05B0(0x0018)(Edit, DisableEditOnInstance, NoDestructor, Protected, NativeAccessSpecifierProtected)
	struct FInputIconVisual                       KeyboardM;                                         // 0x05C8(0x0018)(Edit, DisableEditOnInstance, NoDestructor, Protected, NativeAccessSpecifierProtected)
	struct FInputIconVisual                       KeyboardN;                                         // 0x05E0(0x0018)(Edit, DisableEditOnInstance, NoDestructor, Protected, NativeAccessSpecifierProtected)
	struct FInputIconVisual                       KeyboardO;                                         // 0x05F8(0x0018)(Edit, DisableEditOnInstance, NoDestructor, Protected, NativeAccessSpecifierProtected)
	struct FInputIconVisual                       KeyboardP;                                         // 0x0610(0x0018)(Edit, DisableEditOnInstance, NoDestructor, Protected, NativeAccessSpecifierProtected)
	struct FInputIconVisual                       KeyboardQ;                                         // 0x0628(0x0018)(Edit, DisableEditOnInstance, NoDestructor, Protected, NativeAccessSpecifierProtected)
	struct FInputIconVisual                       KeyboardR;                                         // 0x0640(0x0018)(Edit, DisableEditOnInstance, NoDestructor, Protected, NativeAccessSpecifierProtected)
	struct FInputIconVisual                       KeyboardS;                                         // 0x0658(0x0018)(Edit, DisableEditOnInstance, NoDestructor, Protected, NativeAccessSpecifierProtected)
	struct FInputIconVisual                       KeyboardT;                                         // 0x0670(0x0018)(Edit, DisableEditOnInstance, NoDestructor, Protected, NativeAccessSpecifierProtected)
	struct FInputIconVisual                       KeyboardU;                                         // 0x0688(0x0018)(Edit, DisableEditOnInstance, NoDestructor, Protected, NativeAccessSpecifierProtected)
	struct FInputIconVisual                       KeyboardV;                                         // 0x06A0(0x0018)(Edit, DisableEditOnInstance, NoDestructor, Protected, NativeAccessSpecifierProtected)
	struct FInputIconVisual                       KeyboardW;                                         // 0x06B8(0x0018)(Edit, DisableEditOnInstance, NoDestructor, Protected, NativeAccessSpecifierProtected)
	struct FInputIconVisual                       KeyboardX;                                         // 0x06D0(0x0018)(Edit, DisableEditOnInstance, NoDestructor, Protected, NativeAccessSpecifierProtected)
	struct FInputIconVisual                       KeyboardY;                                         // 0x06E8(0x0018)(Edit, DisableEditOnInstance, NoDestructor, Protected, NativeAccessSpecifierProtected)
	struct FInputIconVisual                       KeyboardZ;                                         // 0x0700(0x0018)(Edit, DisableEditOnInstance, NoDestructor, Protected, NativeAccessSpecifierProtected)
	struct FInputIconVisual                       KeyboardF1;                                        // 0x0718(0x0018)(Edit, DisableEditOnInstance, NoDestructor, Protected, NativeAccessSpecifierProtected)
	struct FInputIconVisual                       KeyboardF2;                                        // 0x0730(0x0018)(Edit, DisableEditOnInstance, NoDestructor, Protected, NativeAccessSpecifierProtected)
	struct FInputIconVisual                       KeyboardF3;                                        // 0x0748(0x0018)(Edit, DisableEditOnInstance, NoDestructor, Protected, NativeAccessSpecifierProtected)
	struct FInputIconVisual                       KeyboardEnter;                                     // 0x0760(0x0018)(Edit, DisableEditOnInstance, NoDestructor, Protected, NativeAccessSpecifierProtected)
	struct FInputIconVisual                       KeyboardSpace;                                     // 0x0778(0x0018)(Edit, DisableEditOnInstance, NoDestructor, Protected, NativeAccessSpecifierProtected)
	struct FInputIconVisual                       KeyboardCtrl;                                      // 0x0790(0x0018)(Edit, DisableEditOnInstance, NoDestructor, Protected, NativeAccessSpecifierProtected)
	struct FInputIconVisual                       KeyboardLShift;                                    // 0x07A8(0x0018)(Edit, DisableEditOnInstance, NoDestructor, Protected, NativeAccessSpecifierProtected)
	struct FInputIconVisual                       KeyboardRShift;                                    // 0x07C0(0x0018)(Edit, DisableEditOnInstance, NoDestructor, Protected, NativeAccessSpecifierProtected)
	struct FInputIconVisual                       KeyboardTab;                                       // 0x07D8(0x0018)(Edit, DisableEditOnInstance, NoDestructor, Protected, NativeAccessSpecifierProtected)
	struct FInputIconVisual                       KeyboardEscape;                                    // 0x07F0(0x0018)(Edit, DisableEditOnInstance, NoDestructor, Protected, NativeAccessSpecifierProtected)
	struct FInputIconVisual                       KeyboardBackspace;                                 // 0x0808(0x0018)(Edit, DisableEditOnInstance, NoDestructor, Protected, NativeAccessSpecifierProtected)
	struct FInputIconVisual                       KeyboardAlt;                                       // 0x0820(0x0018)(Edit, DisableEditOnInstance, NoDestructor, Protected, NativeAccessSpecifierProtected)
	struct FInputIconVisual                       KeyboardCaps;                                      // 0x0838(0x0018)(Edit, DisableEditOnInstance, NoDestructor, Protected, NativeAccessSpecifierProtected)
	struct FInputIconVisual                       KeyboardSemicolon;                                 // 0x0850(0x0018)(Edit, DisableEditOnInstance, NoDestructor, Protected, NativeAccessSpecifierProtected)
	struct FInputIconVisual                       KeyboardBackslash;                                 // 0x0868(0x0018)(Edit, DisableEditOnInstance, NoDestructor, Protected, NativeAccessSpecifierProtected)
	struct FInputIconVisual                       KeyboardHyphen;                                    // 0x0880(0x0018)(Edit, DisableEditOnInstance, NoDestructor, Protected, NativeAccessSpecifierProtected)
	struct FInputIconVisual                       KeyboardEquals;                                    // 0x0898(0x0018)(Edit, DisableEditOnInstance, NoDestructor, Protected, NativeAccessSpecifierProtected)
	struct FInputIconVisual                       KeyboardLeftBracket;                               // 0x08B0(0x0018)(Edit, DisableEditOnInstance, NoDestructor, Protected, NativeAccessSpecifierProtected)
	struct FInputIconVisual                       KeyboardRightBracket;                              // 0x08C8(0x0018)(Edit, DisableEditOnInstance, NoDestructor, Protected, NativeAccessSpecifierProtected)
	struct FInputIconVisual                       KeyboardComma;                                     // 0x08E0(0x0018)(Edit, DisableEditOnInstance, NoDestructor, Protected, NativeAccessSpecifierProtected)
	struct FInputIconVisual                       KeyboardPeriod;                                    // 0x08F8(0x0018)(Edit, DisableEditOnInstance, NoDestructor, Protected, NativeAccessSpecifierProtected)
	struct FInputIconVisual                       KeyboardSlash;                                     // 0x0910(0x0018)(Edit, DisableEditOnInstance, NoDestructor, Protected, NativeAccessSpecifierProtected)
	struct FInputIconVisual                       KeyboardDelete;                                    // 0x0928(0x0018)(Edit, DisableEditOnInstance, NoDestructor, Protected, NativeAccessSpecifierProtected)
	struct FInputIconVisual                       KeyboardApostrophe;                                // 0x0940(0x0018)(Edit, DisableEditOnInstance, NoDestructor, Protected, NativeAccessSpecifierProtected)
	struct FInputIconVisual                       KeyboardNum0;                                      // 0x0958(0x0018)(Edit, DisableEditOnInstance, NoDestructor, Protected, NativeAccessSpecifierProtected)
	struct FInputIconVisual                       KeyboardNum1;                                      // 0x0970(0x0018)(Edit, DisableEditOnInstance, NoDestructor, Protected, NativeAccessSpecifierProtected)
	struct FInputIconVisual                       KeyboardNum2;                                      // 0x0988(0x0018)(Edit, DisableEditOnInstance, NoDestructor, Protected, NativeAccessSpecifierProtected)
	struct FInputIconVisual                       KeyboardNum3;                                      // 0x09A0(0x0018)(Edit, DisableEditOnInstance, NoDestructor, Protected, NativeAccessSpecifierProtected)
	struct FInputIconVisual                       KeyboardNum4;                                      // 0x09B8(0x0018)(Edit, DisableEditOnInstance, NoDestructor, Protected, NativeAccessSpecifierProtected)
	struct FInputIconVisual                       KeyboardNum5;                                      // 0x09D0(0x0018)(Edit, DisableEditOnInstance, NoDestructor, Protected, NativeAccessSpecifierProtected)
	struct FInputIconVisual                       KeyboardNum6;                                      // 0x09E8(0x0018)(Edit, DisableEditOnInstance, NoDestructor, Protected, NativeAccessSpecifierProtected)
	struct FInputIconVisual                       KeyboardNum7;                                      // 0x0A00(0x0018)(Edit, DisableEditOnInstance, NoDestructor, Protected, NativeAccessSpecifierProtected)
	struct FInputIconVisual                       KeyboardNum8;                                      // 0x0A18(0x0018)(Edit, DisableEditOnInstance, NoDestructor, Protected, NativeAccessSpecifierProtected)
	struct FInputIconVisual                       KeyboardNum9;                                      // 0x0A30(0x0018)(Edit, DisableEditOnInstance, NoDestructor, Protected, NativeAccessSpecifierProtected)
	struct FInputIconVisual                       KeyboardArrowUp;                                   // 0x0A48(0x0018)(Edit, DisableEditOnInstance, NoDestructor, Protected, NativeAccessSpecifierProtected)
	struct FInputIconVisual                       KeyboardArrowDown;                                 // 0x0A60(0x0018)(Edit, DisableEditOnInstance, NoDestructor, Protected, NativeAccessSpecifierProtected)
	struct FInputIconVisual                       KeyboardArrowLeft;                                 // 0x0A78(0x0018)(Edit, DisableEditOnInstance, NoDestructor, Protected, NativeAccessSpecifierProtected)
	struct FInputIconVisual                       KeyboardArrowRight;                                // 0x0A90(0x0018)(Edit, DisableEditOnInstance, NoDestructor, Protected, NativeAccessSpecifierProtected)
	struct FInputIconVisual                       Ping;                                              // 0x0AA8(0x0018)(Edit, DisableEditOnInstance, NoDestructor, Protected, NativeAccessSpecifierProtected)
	struct FInputIconVisual                       Holster;                                           // 0x0AC0(0x0018)(Edit, DisableEditOnInstance, NoDestructor, Protected, NativeAccessSpecifierProtected)
	struct FInputIconVisual                       MouseLeftClick;                                    // 0x0AD8(0x0018)(Edit, DisableEditOnInstance, NoDestructor, Protected, NativeAccessSpecifierProtected)
	struct FInputIconVisual                       MouseRightClick;                                   // 0x0AF0(0x0018)(Edit, DisableEditOnInstance, NoDestructor, Protected, NativeAccessSpecifierProtected)
	struct FInputIconVisual                       MouseScroll;                                       // 0x0B08(0x0018)(Edit, DisableEditOnInstance, NoDestructor, Protected, NativeAccessSpecifierProtected)
	struct FInputIconVisual                       MouseMiddleButton;                                 // 0x0B20(0x0018)(Edit, DisableEditOnInstance, NoDestructor, Protected, NativeAccessSpecifierProtected)
	struct FInputIconVisual                       MouseButtonM4;                                     // 0x0B38(0x0018)(Edit, DisableEditOnInstance, NoDestructor, Protected, NativeAccessSpecifierProtected)
	struct FInputIconVisual                       MouseButtonM5;                                     // 0x0B50(0x0018)(Edit, DisableEditOnInstance, NoDestructor, Protected, NativeAccessSpecifierProtected)
	struct FInputIconVisual                       MouseButtonM6;                                     // 0x0B68(0x0018)(Edit, DisableEditOnInstance, NoDestructor, Protected, NativeAccessSpecifierProtected)
	struct FInputIconVisual                       MouseButtonM7;                                     // 0x0B80(0x0018)(Edit, DisableEditOnInstance, NoDestructor, Protected, NativeAccessSpecifierProtected)
	struct FInputIconVisual                       MouseButtonM8;                                     // 0x0B98(0x0018)(Edit, DisableEditOnInstance, NoDestructor, Protected, NativeAccessSpecifierProtected)
	struct FInputIconVisual                       MouseButtonM9;                                     // 0x0BB0(0x0018)(Edit, DisableEditOnInstance, NoDestructor, Protected, NativeAccessSpecifierProtected)
	struct FInputIconVisual                       ConfirmWithController;                             // 0x0BC8(0x0018)(Edit, DisableEditOnInstance, NoDestructor, Protected, NativeAccessSpecifierProtected)
	struct FInputIconVisual                       CancelWithController;                              // 0x0BE0(0x0018)(Edit, DisableEditOnInstance, NoDestructor, Protected, NativeAccessSpecifierProtected)
	struct FInputIconVisual                       ContextOneWithController;                          // 0x0BF8(0x0018)(Edit, DisableEditOnInstance, NoDestructor, Protected, NativeAccessSpecifierProtected)
	struct FInputIconVisual                       ContextTwoWithController;                          // 0x0C10(0x0018)(Edit, DisableEditOnInstance, NoDestructor, Protected, NativeAccessSpecifierProtected)
	struct FInputIconVisual                       NavigationWithController;                          // 0x0C28(0x0018)(Edit, DisableEditOnInstance, NoDestructor, Protected, NativeAccessSpecifierProtected)
	struct FInputIconVisual                       NavigationRightWithController;                     // 0x0C40(0x0018)(Edit, DisableEditOnInstance, NoDestructor, Protected, NativeAccessSpecifierProtected)
	struct FInputIconVisual                       DirectionUpWithController;                         // 0x0C58(0x0018)(Edit, DisableEditOnInstance, NoDestructor, Protected, NativeAccessSpecifierProtected)
	struct FInputIconVisual                       DirectionDownWithController;                       // 0x0C70(0x0018)(Edit, DisableEditOnInstance, NoDestructor, Protected, NativeAccessSpecifierProtected)
	struct FInputIconVisual                       DirectionLeftWithController;                       // 0x0C88(0x0018)(Edit, DisableEditOnInstance, NoDestructor, Protected, NativeAccessSpecifierProtected)
	struct FInputIconVisual                       DirectionRightWithController;                      // 0x0CA0(0x0018)(Edit, DisableEditOnInstance, NoDestructor, Protected, NativeAccessSpecifierProtected)
	struct FInputIconVisual                       DirectionUpDownWithController;                     // 0x0CB8(0x0018)(Edit, DisableEditOnInstance, NoDestructor, Protected, NativeAccessSpecifierProtected)
	struct FInputIconVisual                       DirectionLeftRightWithController;                  // 0x0CD0(0x0018)(Edit, DisableEditOnInstance, NoDestructor, Protected, NativeAccessSpecifierProtected)
	struct FInputIconVisual                       PlayerMenuWithController;                          // 0x0CE8(0x0018)(Edit, DisableEditOnInstance, NoDestructor, Protected, NativeAccessSpecifierProtected)
	struct FInputIconVisual                       GameMenuWithController;                            // 0x0D00(0x0018)(Edit, DisableEditOnInstance, NoDestructor, Protected, NativeAccessSpecifierProtected)
	struct FInputIconVisual                       LeftTabWithController;                             // 0x0D18(0x0018)(Edit, DisableEditOnInstance, NoDestructor, Protected, NativeAccessSpecifierProtected)
	struct FInputIconVisual                       LeftSubTabWithController;                          // 0x0D30(0x0018)(Edit, DisableEditOnInstance, NoDestructor, Protected, NativeAccessSpecifierProtected)
	struct FInputIconVisual                       LeftActionWithController;                          // 0x0D48(0x0018)(Edit, DisableEditOnInstance, NoDestructor, Protected, NativeAccessSpecifierProtected)
	struct FInputIconVisual                       RightTabWithController;                            // 0x0D60(0x0018)(Edit, DisableEditOnInstance, NoDestructor, Protected, NativeAccessSpecifierProtected)
	struct FInputIconVisual                       RightSubTabWithController;                         // 0x0D78(0x0018)(Edit, DisableEditOnInstance, NoDestructor, Protected, NativeAccessSpecifierProtected)
	struct FInputIconVisual                       RightActionWithController;                         // 0x0D90(0x0018)(Edit, DisableEditOnInstance, NoDestructor, Protected, NativeAccessSpecifierProtected)
	struct FInputIconVisual                       CharacterCrouchWithController;                     // 0x0DA8(0x0018)(Edit, DisableEditOnInstance, NoDestructor, Protected, NativeAccessSpecifierProtected)
	struct FInputIconVisual                       CharacterJumpWithController;                       // 0x0DC0(0x0018)(Edit, DisableEditOnInstance, NoDestructor, Protected, NativeAccessSpecifierProtected)
	struct FInputIconVisual                       CharacterInteractWithController;                   // 0x0DD8(0x0018)(Edit, DisableEditOnInstance, NoDestructor, Protected, NativeAccessSpecifierProtected)
	struct FInputIconVisual                       CharacterEquipWithController;                      // 0x0DF0(0x0018)(Edit, DisableEditOnInstance, NoDestructor, Protected, NativeAccessSpecifierProtected)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"InputIconSetDesktop">();
	}
	static class UInputIconSetDesktop* GetDefaultObj()
	{
		return GetDefaultObjImpl<UInputIconSetDesktop>();
	}
};
static_assert(alignof(UInputIconSetDesktop) == 0x000008, "Wrong alignment on UInputIconSetDesktop");
static_assert(sizeof(UInputIconSetDesktop) == 0x000E08, "Wrong size on UInputIconSetDesktop");
static_assert(offsetof(UInputIconSetDesktop, ContextTwoGame) == 0x000268, "Member 'UInputIconSetDesktop::ContextTwoGame' has a wrong offset!");
static_assert(offsetof(UInputIconSetDesktop, Pan) == 0x000280, "Member 'UInputIconSetDesktop::Pan' has a wrong offset!");
static_assert(offsetof(UInputIconSetDesktop, FreehandPan) == 0x000298, "Member 'UInputIconSetDesktop::FreehandPan' has a wrong offset!");
static_assert(offsetof(UInputIconSetDesktop, Rotate) == 0x0002B0, "Member 'UInputIconSetDesktop::Rotate' has a wrong offset!");
static_assert(offsetof(UInputIconSetDesktop, Zoom) == 0x0002C8, "Member 'UInputIconSetDesktop::Zoom' has a wrong offset!");
static_assert(offsetof(UInputIconSetDesktop, AmmoInspect) == 0x0002E0, "Member 'UInputIconSetDesktop::AmmoInspect' has a wrong offset!");
static_assert(offsetof(UInputIconSetDesktop, AmmoStack) == 0x0002F8, "Member 'UInputIconSetDesktop::AmmoStack' has a wrong offset!");
static_assert(offsetof(UInputIconSetDesktop, MenuInteract) == 0x000310, "Member 'UInputIconSetDesktop::MenuInteract' has a wrong offset!");
static_assert(offsetof(UInputIconSetDesktop, MenuContextTwo) == 0x000328, "Member 'UInputIconSetDesktop::MenuContextTwo' has a wrong offset!");
static_assert(offsetof(UInputIconSetDesktop, MenuConsumable) == 0x000340, "Member 'UInputIconSetDesktop::MenuConsumable' has a wrong offset!");
static_assert(offsetof(UInputIconSetDesktop, MenuWeapon) == 0x000358, "Member 'UInputIconSetDesktop::MenuWeapon' has a wrong offset!");
static_assert(offsetof(UInputIconSetDesktop, ReloadContextual) == 0x000370, "Member 'UInputIconSetDesktop::ReloadContextual' has a wrong offset!");
static_assert(offsetof(UInputIconSetDesktop, VoteKickYes) == 0x000388, "Member 'UInputIconSetDesktop::VoteKickYes' has a wrong offset!");
static_assert(offsetof(UInputIconSetDesktop, VoteKickNo) == 0x0003A0, "Member 'UInputIconSetDesktop::VoteKickNo' has a wrong offset!");
static_assert(offsetof(UInputIconSetDesktop, CharacterSprint) == 0x0003B8, "Member 'UInputIconSetDesktop::CharacterSprint' has a wrong offset!");
static_assert(offsetof(UInputIconSetDesktop, CharacterFire) == 0x0003D0, "Member 'UInputIconSetDesktop::CharacterFire' has a wrong offset!");
static_assert(offsetof(UInputIconSetDesktop, CharacterAim) == 0x0003E8, "Member 'UInputIconSetDesktop::CharacterAim' has a wrong offset!");
static_assert(offsetof(UInputIconSetDesktop, CharacterSwapPerspective) == 0x000400, "Member 'UInputIconSetDesktop::CharacterSwapPerspective' has a wrong offset!");
static_assert(offsetof(UInputIconSetDesktop, CharacterToggleContextual) == 0x000418, "Member 'UInputIconSetDesktop::CharacterToggleContextual' has a wrong offset!");
static_assert(offsetof(UInputIconSetDesktop, CharacterMelee) == 0x000430, "Member 'UInputIconSetDesktop::CharacterMelee' has a wrong offset!");
static_assert(offsetof(UInputIconSetDesktop, CharacterMap) == 0x000448, "Member 'UInputIconSetDesktop::CharacterMap' has a wrong offset!");
static_assert(offsetof(UInputIconSetDesktop, CharacterGesture) == 0x000460, "Member 'UInputIconSetDesktop::CharacterGesture' has a wrong offset!");
static_assert(offsetof(UInputIconSetDesktop, CharacterChangeFireMode) == 0x000478, "Member 'UInputIconSetDesktop::CharacterChangeFireMode' has a wrong offset!");
static_assert(offsetof(UInputIconSetDesktop, CharacterTool) == 0x000490, "Member 'UInputIconSetDesktop::CharacterTool' has a wrong offset!");
static_assert(offsetof(UInputIconSetDesktop, KeyboardA) == 0x0004A8, "Member 'UInputIconSetDesktop::KeyboardA' has a wrong offset!");
static_assert(offsetof(UInputIconSetDesktop, KeyboardB) == 0x0004C0, "Member 'UInputIconSetDesktop::KeyboardB' has a wrong offset!");
static_assert(offsetof(UInputIconSetDesktop, KeyboardC) == 0x0004D8, "Member 'UInputIconSetDesktop::KeyboardC' has a wrong offset!");
static_assert(offsetof(UInputIconSetDesktop, KeyboardD) == 0x0004F0, "Member 'UInputIconSetDesktop::KeyboardD' has a wrong offset!");
static_assert(offsetof(UInputIconSetDesktop, KeyboardE) == 0x000508, "Member 'UInputIconSetDesktop::KeyboardE' has a wrong offset!");
static_assert(offsetof(UInputIconSetDesktop, KeyboardF) == 0x000520, "Member 'UInputIconSetDesktop::KeyboardF' has a wrong offset!");
static_assert(offsetof(UInputIconSetDesktop, KeyboardG) == 0x000538, "Member 'UInputIconSetDesktop::KeyboardG' has a wrong offset!");
static_assert(offsetof(UInputIconSetDesktop, KeyboardH) == 0x000550, "Member 'UInputIconSetDesktop::KeyboardH' has a wrong offset!");
static_assert(offsetof(UInputIconSetDesktop, KeyboardI) == 0x000568, "Member 'UInputIconSetDesktop::KeyboardI' has a wrong offset!");
static_assert(offsetof(UInputIconSetDesktop, KeyboardJ) == 0x000580, "Member 'UInputIconSetDesktop::KeyboardJ' has a wrong offset!");
static_assert(offsetof(UInputIconSetDesktop, KeyboardK) == 0x000598, "Member 'UInputIconSetDesktop::KeyboardK' has a wrong offset!");
static_assert(offsetof(UInputIconSetDesktop, KeyboardL) == 0x0005B0, "Member 'UInputIconSetDesktop::KeyboardL' has a wrong offset!");
static_assert(offsetof(UInputIconSetDesktop, KeyboardM) == 0x0005C8, "Member 'UInputIconSetDesktop::KeyboardM' has a wrong offset!");
static_assert(offsetof(UInputIconSetDesktop, KeyboardN) == 0x0005E0, "Member 'UInputIconSetDesktop::KeyboardN' has a wrong offset!");
static_assert(offsetof(UInputIconSetDesktop, KeyboardO) == 0x0005F8, "Member 'UInputIconSetDesktop::KeyboardO' has a wrong offset!");
static_assert(offsetof(UInputIconSetDesktop, KeyboardP) == 0x000610, "Member 'UInputIconSetDesktop::KeyboardP' has a wrong offset!");
static_assert(offsetof(UInputIconSetDesktop, KeyboardQ) == 0x000628, "Member 'UInputIconSetDesktop::KeyboardQ' has a wrong offset!");
static_assert(offsetof(UInputIconSetDesktop, KeyboardR) == 0x000640, "Member 'UInputIconSetDesktop::KeyboardR' has a wrong offset!");
static_assert(offsetof(UInputIconSetDesktop, KeyboardS) == 0x000658, "Member 'UInputIconSetDesktop::KeyboardS' has a wrong offset!");
static_assert(offsetof(UInputIconSetDesktop, KeyboardT) == 0x000670, "Member 'UInputIconSetDesktop::KeyboardT' has a wrong offset!");
static_assert(offsetof(UInputIconSetDesktop, KeyboardU) == 0x000688, "Member 'UInputIconSetDesktop::KeyboardU' has a wrong offset!");
static_assert(offsetof(UInputIconSetDesktop, KeyboardV) == 0x0006A0, "Member 'UInputIconSetDesktop::KeyboardV' has a wrong offset!");
static_assert(offsetof(UInputIconSetDesktop, KeyboardW) == 0x0006B8, "Member 'UInputIconSetDesktop::KeyboardW' has a wrong offset!");
static_assert(offsetof(UInputIconSetDesktop, KeyboardX) == 0x0006D0, "Member 'UInputIconSetDesktop::KeyboardX' has a wrong offset!");
static_assert(offsetof(UInputIconSetDesktop, KeyboardY) == 0x0006E8, "Member 'UInputIconSetDesktop::KeyboardY' has a wrong offset!");
static_assert(offsetof(UInputIconSetDesktop, KeyboardZ) == 0x000700, "Member 'UInputIconSetDesktop::KeyboardZ' has a wrong offset!");
static_assert(offsetof(UInputIconSetDesktop, KeyboardF1) == 0x000718, "Member 'UInputIconSetDesktop::KeyboardF1' has a wrong offset!");
static_assert(offsetof(UInputIconSetDesktop, KeyboardF2) == 0x000730, "Member 'UInputIconSetDesktop::KeyboardF2' has a wrong offset!");
static_assert(offsetof(UInputIconSetDesktop, KeyboardF3) == 0x000748, "Member 'UInputIconSetDesktop::KeyboardF3' has a wrong offset!");
static_assert(offsetof(UInputIconSetDesktop, KeyboardEnter) == 0x000760, "Member 'UInputIconSetDesktop::KeyboardEnter' has a wrong offset!");
static_assert(offsetof(UInputIconSetDesktop, KeyboardSpace) == 0x000778, "Member 'UInputIconSetDesktop::KeyboardSpace' has a wrong offset!");
static_assert(offsetof(UInputIconSetDesktop, KeyboardCtrl) == 0x000790, "Member 'UInputIconSetDesktop::KeyboardCtrl' has a wrong offset!");
static_assert(offsetof(UInputIconSetDesktop, KeyboardLShift) == 0x0007A8, "Member 'UInputIconSetDesktop::KeyboardLShift' has a wrong offset!");
static_assert(offsetof(UInputIconSetDesktop, KeyboardRShift) == 0x0007C0, "Member 'UInputIconSetDesktop::KeyboardRShift' has a wrong offset!");
static_assert(offsetof(UInputIconSetDesktop, KeyboardTab) == 0x0007D8, "Member 'UInputIconSetDesktop::KeyboardTab' has a wrong offset!");
static_assert(offsetof(UInputIconSetDesktop, KeyboardEscape) == 0x0007F0, "Member 'UInputIconSetDesktop::KeyboardEscape' has a wrong offset!");
static_assert(offsetof(UInputIconSetDesktop, KeyboardBackspace) == 0x000808, "Member 'UInputIconSetDesktop::KeyboardBackspace' has a wrong offset!");
static_assert(offsetof(UInputIconSetDesktop, KeyboardAlt) == 0x000820, "Member 'UInputIconSetDesktop::KeyboardAlt' has a wrong offset!");
static_assert(offsetof(UInputIconSetDesktop, KeyboardCaps) == 0x000838, "Member 'UInputIconSetDesktop::KeyboardCaps' has a wrong offset!");
static_assert(offsetof(UInputIconSetDesktop, KeyboardSemicolon) == 0x000850, "Member 'UInputIconSetDesktop::KeyboardSemicolon' has a wrong offset!");
static_assert(offsetof(UInputIconSetDesktop, KeyboardBackslash) == 0x000868, "Member 'UInputIconSetDesktop::KeyboardBackslash' has a wrong offset!");
static_assert(offsetof(UInputIconSetDesktop, KeyboardHyphen) == 0x000880, "Member 'UInputIconSetDesktop::KeyboardHyphen' has a wrong offset!");
static_assert(offsetof(UInputIconSetDesktop, KeyboardEquals) == 0x000898, "Member 'UInputIconSetDesktop::KeyboardEquals' has a wrong offset!");
static_assert(offsetof(UInputIconSetDesktop, KeyboardLeftBracket) == 0x0008B0, "Member 'UInputIconSetDesktop::KeyboardLeftBracket' has a wrong offset!");
static_assert(offsetof(UInputIconSetDesktop, KeyboardRightBracket) == 0x0008C8, "Member 'UInputIconSetDesktop::KeyboardRightBracket' has a wrong offset!");
static_assert(offsetof(UInputIconSetDesktop, KeyboardComma) == 0x0008E0, "Member 'UInputIconSetDesktop::KeyboardComma' has a wrong offset!");
static_assert(offsetof(UInputIconSetDesktop, KeyboardPeriod) == 0x0008F8, "Member 'UInputIconSetDesktop::KeyboardPeriod' has a wrong offset!");
static_assert(offsetof(UInputIconSetDesktop, KeyboardSlash) == 0x000910, "Member 'UInputIconSetDesktop::KeyboardSlash' has a wrong offset!");
static_assert(offsetof(UInputIconSetDesktop, KeyboardDelete) == 0x000928, "Member 'UInputIconSetDesktop::KeyboardDelete' has a wrong offset!");
static_assert(offsetof(UInputIconSetDesktop, KeyboardApostrophe) == 0x000940, "Member 'UInputIconSetDesktop::KeyboardApostrophe' has a wrong offset!");
static_assert(offsetof(UInputIconSetDesktop, KeyboardNum0) == 0x000958, "Member 'UInputIconSetDesktop::KeyboardNum0' has a wrong offset!");
static_assert(offsetof(UInputIconSetDesktop, KeyboardNum1) == 0x000970, "Member 'UInputIconSetDesktop::KeyboardNum1' has a wrong offset!");
static_assert(offsetof(UInputIconSetDesktop, KeyboardNum2) == 0x000988, "Member 'UInputIconSetDesktop::KeyboardNum2' has a wrong offset!");
static_assert(offsetof(UInputIconSetDesktop, KeyboardNum3) == 0x0009A0, "Member 'UInputIconSetDesktop::KeyboardNum3' has a wrong offset!");
static_assert(offsetof(UInputIconSetDesktop, KeyboardNum4) == 0x0009B8, "Member 'UInputIconSetDesktop::KeyboardNum4' has a wrong offset!");
static_assert(offsetof(UInputIconSetDesktop, KeyboardNum5) == 0x0009D0, "Member 'UInputIconSetDesktop::KeyboardNum5' has a wrong offset!");
static_assert(offsetof(UInputIconSetDesktop, KeyboardNum6) == 0x0009E8, "Member 'UInputIconSetDesktop::KeyboardNum6' has a wrong offset!");
static_assert(offsetof(UInputIconSetDesktop, KeyboardNum7) == 0x000A00, "Member 'UInputIconSetDesktop::KeyboardNum7' has a wrong offset!");
static_assert(offsetof(UInputIconSetDesktop, KeyboardNum8) == 0x000A18, "Member 'UInputIconSetDesktop::KeyboardNum8' has a wrong offset!");
static_assert(offsetof(UInputIconSetDesktop, KeyboardNum9) == 0x000A30, "Member 'UInputIconSetDesktop::KeyboardNum9' has a wrong offset!");
static_assert(offsetof(UInputIconSetDesktop, KeyboardArrowUp) == 0x000A48, "Member 'UInputIconSetDesktop::KeyboardArrowUp' has a wrong offset!");
static_assert(offsetof(UInputIconSetDesktop, KeyboardArrowDown) == 0x000A60, "Member 'UInputIconSetDesktop::KeyboardArrowDown' has a wrong offset!");
static_assert(offsetof(UInputIconSetDesktop, KeyboardArrowLeft) == 0x000A78, "Member 'UInputIconSetDesktop::KeyboardArrowLeft' has a wrong offset!");
static_assert(offsetof(UInputIconSetDesktop, KeyboardArrowRight) == 0x000A90, "Member 'UInputIconSetDesktop::KeyboardArrowRight' has a wrong offset!");
static_assert(offsetof(UInputIconSetDesktop, Ping) == 0x000AA8, "Member 'UInputIconSetDesktop::Ping' has a wrong offset!");
static_assert(offsetof(UInputIconSetDesktop, Holster) == 0x000AC0, "Member 'UInputIconSetDesktop::Holster' has a wrong offset!");
static_assert(offsetof(UInputIconSetDesktop, MouseLeftClick) == 0x000AD8, "Member 'UInputIconSetDesktop::MouseLeftClick' has a wrong offset!");
static_assert(offsetof(UInputIconSetDesktop, MouseRightClick) == 0x000AF0, "Member 'UInputIconSetDesktop::MouseRightClick' has a wrong offset!");
static_assert(offsetof(UInputIconSetDesktop, MouseScroll) == 0x000B08, "Member 'UInputIconSetDesktop::MouseScroll' has a wrong offset!");
static_assert(offsetof(UInputIconSetDesktop, MouseMiddleButton) == 0x000B20, "Member 'UInputIconSetDesktop::MouseMiddleButton' has a wrong offset!");
static_assert(offsetof(UInputIconSetDesktop, MouseButtonM4) == 0x000B38, "Member 'UInputIconSetDesktop::MouseButtonM4' has a wrong offset!");
static_assert(offsetof(UInputIconSetDesktop, MouseButtonM5) == 0x000B50, "Member 'UInputIconSetDesktop::MouseButtonM5' has a wrong offset!");
static_assert(offsetof(UInputIconSetDesktop, MouseButtonM6) == 0x000B68, "Member 'UInputIconSetDesktop::MouseButtonM6' has a wrong offset!");
static_assert(offsetof(UInputIconSetDesktop, MouseButtonM7) == 0x000B80, "Member 'UInputIconSetDesktop::MouseButtonM7' has a wrong offset!");
static_assert(offsetof(UInputIconSetDesktop, MouseButtonM8) == 0x000B98, "Member 'UInputIconSetDesktop::MouseButtonM8' has a wrong offset!");
static_assert(offsetof(UInputIconSetDesktop, MouseButtonM9) == 0x000BB0, "Member 'UInputIconSetDesktop::MouseButtonM9' has a wrong offset!");
static_assert(offsetof(UInputIconSetDesktop, ConfirmWithController) == 0x000BC8, "Member 'UInputIconSetDesktop::ConfirmWithController' has a wrong offset!");
static_assert(offsetof(UInputIconSetDesktop, CancelWithController) == 0x000BE0, "Member 'UInputIconSetDesktop::CancelWithController' has a wrong offset!");
static_assert(offsetof(UInputIconSetDesktop, ContextOneWithController) == 0x000BF8, "Member 'UInputIconSetDesktop::ContextOneWithController' has a wrong offset!");
static_assert(offsetof(UInputIconSetDesktop, ContextTwoWithController) == 0x000C10, "Member 'UInputIconSetDesktop::ContextTwoWithController' has a wrong offset!");
static_assert(offsetof(UInputIconSetDesktop, NavigationWithController) == 0x000C28, "Member 'UInputIconSetDesktop::NavigationWithController' has a wrong offset!");
static_assert(offsetof(UInputIconSetDesktop, NavigationRightWithController) == 0x000C40, "Member 'UInputIconSetDesktop::NavigationRightWithController' has a wrong offset!");
static_assert(offsetof(UInputIconSetDesktop, DirectionUpWithController) == 0x000C58, "Member 'UInputIconSetDesktop::DirectionUpWithController' has a wrong offset!");
static_assert(offsetof(UInputIconSetDesktop, DirectionDownWithController) == 0x000C70, "Member 'UInputIconSetDesktop::DirectionDownWithController' has a wrong offset!");
static_assert(offsetof(UInputIconSetDesktop, DirectionLeftWithController) == 0x000C88, "Member 'UInputIconSetDesktop::DirectionLeftWithController' has a wrong offset!");
static_assert(offsetof(UInputIconSetDesktop, DirectionRightWithController) == 0x000CA0, "Member 'UInputIconSetDesktop::DirectionRightWithController' has a wrong offset!");
static_assert(offsetof(UInputIconSetDesktop, DirectionUpDownWithController) == 0x000CB8, "Member 'UInputIconSetDesktop::DirectionUpDownWithController' has a wrong offset!");
static_assert(offsetof(UInputIconSetDesktop, DirectionLeftRightWithController) == 0x000CD0, "Member 'UInputIconSetDesktop::DirectionLeftRightWithController' has a wrong offset!");
static_assert(offsetof(UInputIconSetDesktop, PlayerMenuWithController) == 0x000CE8, "Member 'UInputIconSetDesktop::PlayerMenuWithController' has a wrong offset!");
static_assert(offsetof(UInputIconSetDesktop, GameMenuWithController) == 0x000D00, "Member 'UInputIconSetDesktop::GameMenuWithController' has a wrong offset!");
static_assert(offsetof(UInputIconSetDesktop, LeftTabWithController) == 0x000D18, "Member 'UInputIconSetDesktop::LeftTabWithController' has a wrong offset!");
static_assert(offsetof(UInputIconSetDesktop, LeftSubTabWithController) == 0x000D30, "Member 'UInputIconSetDesktop::LeftSubTabWithController' has a wrong offset!");
static_assert(offsetof(UInputIconSetDesktop, LeftActionWithController) == 0x000D48, "Member 'UInputIconSetDesktop::LeftActionWithController' has a wrong offset!");
static_assert(offsetof(UInputIconSetDesktop, RightTabWithController) == 0x000D60, "Member 'UInputIconSetDesktop::RightTabWithController' has a wrong offset!");
static_assert(offsetof(UInputIconSetDesktop, RightSubTabWithController) == 0x000D78, "Member 'UInputIconSetDesktop::RightSubTabWithController' has a wrong offset!");
static_assert(offsetof(UInputIconSetDesktop, RightActionWithController) == 0x000D90, "Member 'UInputIconSetDesktop::RightActionWithController' has a wrong offset!");
static_assert(offsetof(UInputIconSetDesktop, CharacterCrouchWithController) == 0x000DA8, "Member 'UInputIconSetDesktop::CharacterCrouchWithController' has a wrong offset!");
static_assert(offsetof(UInputIconSetDesktop, CharacterJumpWithController) == 0x000DC0, "Member 'UInputIconSetDesktop::CharacterJumpWithController' has a wrong offset!");
static_assert(offsetof(UInputIconSetDesktop, CharacterInteractWithController) == 0x000DD8, "Member 'UInputIconSetDesktop::CharacterInteractWithController' has a wrong offset!");
static_assert(offsetof(UInputIconSetDesktop, CharacterEquipWithController) == 0x000DF0, "Member 'UInputIconSetDesktop::CharacterEquipWithController' has a wrong offset!");

// Class FlameUI.PlatformTextBlock
// 0x0050 (0x0300 - 0x02B0)
class UPlatformTextBlock final : public UFlameTextBlock
{
public:
	TMap<EFlamePlatform, class FText>             Texts;                                             // 0x02B0(0x0050)(Edit, Protected, NativeAccessSpecifierProtected)

public:
	void SetTexts(const TMap<EFlamePlatform, class FText>& InTexts);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"PlatformTextBlock">();
	}
	static class UPlatformTextBlock* GetDefaultObj()
	{
		return GetDefaultObjImpl<UPlatformTextBlock>();
	}
};
static_assert(alignof(UPlatformTextBlock) == 0x000008, "Wrong alignment on UPlatformTextBlock");
static_assert(sizeof(UPlatformTextBlock) == 0x000300, "Wrong size on UPlatformTextBlock");
static_assert(offsetof(UPlatformTextBlock, Texts) == 0x0002B0, "Member 'UPlatformTextBlock::Texts' has a wrong offset!");

}

