#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_SlaveMaster

#include "Basic.hpp"

#include "CoreUObject_structs.hpp"
#include "Engine_structs.hpp"
#include "Engine_classes.hpp"


namespace SDK
{

// BlueprintGeneratedClass BP_SlaveMaster.BP_SlaveMaster_C
// 0x0028 (0x0248 - 0x0220)
class ABP_SlaveMaster_C final : public AActor
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x0220(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class USceneComponent*                        DefaultSceneRoot;                                  // 0x0228(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	struct FVector                                SlavePosition;                                     // 0x0230(0x000C)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          SlaveActive;                                       // 0x023C(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_23D[0x3];                                      // 0x023D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         ControlPeriod;                                     // 0x0240(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

public:
	void ExecuteUbergraph_BP_SlaveMaster(int32 EntryPoint);
	void ReleaseSlave();
	void MakeSlave(const struct FVector& Position);
	void ReceiveTick(float DeltaSeconds);
	void ReceiveBeginPlay();

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BP_SlaveMaster_C">();
	}
	static class ABP_SlaveMaster_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<ABP_SlaveMaster_C>();
	}
};
static_assert(alignof(ABP_SlaveMaster_C) == 0x000008, "Wrong alignment on ABP_SlaveMaster_C");
static_assert(sizeof(ABP_SlaveMaster_C) == 0x000248, "Wrong size on ABP_SlaveMaster_C");
static_assert(offsetof(ABP_SlaveMaster_C, UberGraphFrame) == 0x000220, "Member 'ABP_SlaveMaster_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(ABP_SlaveMaster_C, DefaultSceneRoot) == 0x000228, "Member 'ABP_SlaveMaster_C::DefaultSceneRoot' has a wrong offset!");
static_assert(offsetof(ABP_SlaveMaster_C, SlavePosition) == 0x000230, "Member 'ABP_SlaveMaster_C::SlavePosition' has a wrong offset!");
static_assert(offsetof(ABP_SlaveMaster_C, SlaveActive) == 0x00023C, "Member 'ABP_SlaveMaster_C::SlaveActive' has a wrong offset!");
static_assert(offsetof(ABP_SlaveMaster_C, ControlPeriod) == 0x000240, "Member 'ABP_SlaveMaster_C::ControlPeriod' has a wrong offset!");

}

