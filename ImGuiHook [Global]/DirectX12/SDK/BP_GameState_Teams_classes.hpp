#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_GameState_Teams

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "E_TeamsMatchPhase_structs.hpp"
#include "BP_GameState_Script_classes.hpp"


namespace SDK
{

// BlueprintGeneratedClass BP_GameState_Teams.BP_GameState_Teams_C
// 0x0060 (0x04B8 - 0x0458)
class ABP_GameState_Teams_C : public ABP_GameState_Script_C
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame_BP_GameState_Teams_C;               // 0x0458(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	TArray<class UBP_GSC_Team_C*>                 Teams;                                             // 0x0460(0x0010)(Edit, BlueprintVisible, Net, DisableEditOnInstance, ContainsInstancedReference)
	class UBP_GSC_TeamManager_C*                  Team_Manager;                                      // 0x0470(0x0008)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Round;                                             // 0x0478(0x0004)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	E_TeamsMatchPhase                             Match_Phase;                                       // 0x047C(0x0001)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, RepNotify, NoDestructor, HasGetValueTypeHash)
	bool                                          Team_Diag;                                         // 0x047D(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_47E[0x2];                                      // 0x047E(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	FMulticastInlineDelegateProperty_             Statistics_Changed;                                // 0x0480(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	FMulticastInlineDelegateProperty_             RoundCleanUp;                                      // 0x0490(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	FMulticastInlineDelegateProperty_             MatchCleanUp;                                      // 0x04A0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	bool                                          IsFriendlyFire;                                    // 0x04B0(0x0001)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)

public:
	void Statistics_Changed__DelegateSignature();
	void RoundCleanUp__DelegateSignature();
	void MatchCleanUp__DelegateSignature();
	void ExecuteUbergraph_BP_GameState_Teams(int32 EntryPoint);
	void ReceiveBeginPlay();
	void SetFriendlyFire();
	void Handle_Match_Phase(E_TeamsMatchPhase Match_Phase_0);
	void On_Match_Phase_Changed(E_TeamsMatchPhase Match_Phase_0);
	void UserConstructionScript();
	void OnRep_Match_Phase();
	void ReceivedMatchPhaseReplication(E_TeamsMatchPhase Match_Phase_0);
	void GetTeamsGameStateReference(class ABP_GameState_Teams_C** TeamsGS);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BP_GameState_Teams_C">();
	}
	static class ABP_GameState_Teams_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<ABP_GameState_Teams_C>();
	}
};
static_assert(alignof(ABP_GameState_Teams_C) == 0x000008, "Wrong alignment on ABP_GameState_Teams_C");
static_assert(sizeof(ABP_GameState_Teams_C) == 0x0004B8, "Wrong size on ABP_GameState_Teams_C");
static_assert(offsetof(ABP_GameState_Teams_C, UberGraphFrame_BP_GameState_Teams_C) == 0x000458, "Member 'ABP_GameState_Teams_C::UberGraphFrame_BP_GameState_Teams_C' has a wrong offset!");
static_assert(offsetof(ABP_GameState_Teams_C, Teams) == 0x000460, "Member 'ABP_GameState_Teams_C::Teams' has a wrong offset!");
static_assert(offsetof(ABP_GameState_Teams_C, Team_Manager) == 0x000470, "Member 'ABP_GameState_Teams_C::Team_Manager' has a wrong offset!");
static_assert(offsetof(ABP_GameState_Teams_C, Round) == 0x000478, "Member 'ABP_GameState_Teams_C::Round' has a wrong offset!");
static_assert(offsetof(ABP_GameState_Teams_C, Match_Phase) == 0x00047C, "Member 'ABP_GameState_Teams_C::Match_Phase' has a wrong offset!");
static_assert(offsetof(ABP_GameState_Teams_C, Team_Diag) == 0x00047D, "Member 'ABP_GameState_Teams_C::Team_Diag' has a wrong offset!");
static_assert(offsetof(ABP_GameState_Teams_C, Statistics_Changed) == 0x000480, "Member 'ABP_GameState_Teams_C::Statistics_Changed' has a wrong offset!");
static_assert(offsetof(ABP_GameState_Teams_C, RoundCleanUp) == 0x000490, "Member 'ABP_GameState_Teams_C::RoundCleanUp' has a wrong offset!");
static_assert(offsetof(ABP_GameState_Teams_C, MatchCleanUp) == 0x0004A0, "Member 'ABP_GameState_Teams_C::MatchCleanUp' has a wrong offset!");
static_assert(offsetof(ABP_GameState_Teams_C, IsFriendlyFire) == 0x0004B0, "Member 'ABP_GameState_Teams_C::IsFriendlyFire' has a wrong offset!");

}

