#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_GameState

#include "Basic.hpp"

#include "BP_GameState_classes.hpp"
#include "BP_GameState_parameters.hpp"


namespace SDK
{

// Function BP_GameState.BP_GameState_C.Get Game Mode Description
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// class FText                             Game_Mode_Description_0                                (Parm, OutParm)

void ABP_GameState_C::Get_Game_Mode_Description(class FText* Game_Mode_Description_0)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_GameState_C", "Get Game Mode Description");

	Params::BP_GameState_C_Get_Game_Mode_Description Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Game_Mode_Description_0 != nullptr)
		*Game_Mode_Description_0 = std::move(Parms.Game_Mode_Description_0);
}


// Function BP_GameState.BP_GameState_C.Set Game Mode Description
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class FText                             New_Game_Mode_Description                              (BlueprintVisible, BlueprintReadOnly, Parm)

void ABP_GameState_C::Set_Game_Mode_Description(const class FText& New_Game_Mode_Description)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_GameState_C", "Set Game Mode Description");

	Params::BP_GameState_C_Set_Game_Mode_Description Parms{};

	Parms.New_Game_Mode_Description = std::move(New_Game_Mode_Description);

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_GameState.BP_GameState_C.GetMapTexture
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// class UTexture2D*                       TwoD_MapTexture                                        (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_GameState_C::GetMapTexture(class UTexture2D** TwoD_MapTexture)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_GameState_C", "GetMapTexture");

	Params::BP_GameState_C_GetMapTexture Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (TwoD_MapTexture != nullptr)
		*TwoD_MapTexture = Parms.TwoD_MapTexture;
}


// Function BP_GameState.BP_GameState_C.GetGameModeStringName
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// class FString                           StringName                                             (Parm, OutParm, ZeroConstructor, HasGetValueTypeHash)

void ABP_GameState_C::GetGameModeStringName(class FString* StringName)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_GameState_C", "GetGameModeStringName");

	Params::BP_GameState_C_GetGameModeStringName Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (StringName != nullptr)
		*StringName = std::move(Parms.StringName);
}


// Function BP_GameState.BP_GameState_C.GetMapOverlayTexture
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// class UTexture2D*                       TwoD_MapTexture                                        (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_GameState_C::GetMapOverlayTexture(class UTexture2D** TwoD_MapTexture)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_GameState_C", "GetMapOverlayTexture");

	Params::BP_GameState_C_GetMapOverlayTexture Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (TwoD_MapTexture != nullptr)
		*TwoD_MapTexture = Parms.TwoD_MapTexture;
}


// Function BP_GameState.BP_GameState_C.GetCustomZoomLimits
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FLinearColor                     LowerLimit                                             (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FLinearColor                     UpperLimit                                             (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FLinearColor                     StartPosition                                          (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_GameState_C::GetCustomZoomLimits(struct FLinearColor* LowerLimit, struct FLinearColor* UpperLimit, struct FLinearColor* StartPosition)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_GameState_C", "GetCustomZoomLimits");

	Params::BP_GameState_C_GetCustomZoomLimits Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (LowerLimit != nullptr)
		*LowerLimit = std::move(Parms.LowerLimit);

	if (UpperLimit != nullptr)
		*UpperLimit = std::move(Parms.UpperLimit);

	if (StartPosition != nullptr)
		*StartPosition = std::move(Parms.StartPosition);
}


// Function BP_GameState.BP_GameState_C.BPI_GetCompassRotator
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    bValid                                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
// struct FRotator                         CompasRotator                                          (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ABP_GameState_C::BPI_GetCompassRotator(bool* bValid, struct FRotator* CompasRotator)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_GameState_C", "BPI_GetCompassRotator");

	Params::BP_GameState_C_BPI_GetCompassRotator Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (bValid != nullptr)
		*bValid = Parms.bValid;

	if (CompasRotator != nullptr)
		*CompasRotator = std::move(Parms.CompasRotator);
}


// Function BP_GameState.BP_GameState_C.BPI_GetMapCorners
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    bValid                                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
// TArray<class AActor*>                   MapCorners_0                                           (Parm, OutParm)

void ABP_GameState_C::BPI_GetMapCorners(bool* bValid, TArray<class AActor*>* MapCorners_0)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_GameState_C", "BPI_GetMapCorners");

	Params::BP_GameState_C_BPI_GetMapCorners Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (bValid != nullptr)
		*bValid = Parms.bValid;

	if (MapCorners_0 != nullptr)
		*MapCorners_0 = std::move(Parms.MapCorners_0);
}


// Function BP_GameState.BP_GameState_C.GetCloudMatchSettingsInfo
// (Event, Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure, Const)
// Parameters:
// struct FCloudMatchSettingsInfo          ReturnValue                                            (Parm, OutParm, ReturnParm)

struct FCloudMatchSettingsInfo ABP_GameState_C::GetCloudMatchSettingsInfo() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_GameState_C", "GetCloudMatchSettingsInfo");

	Params::BP_GameState_C_GetCloudMatchSettingsInfo Parms{};

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}

}

