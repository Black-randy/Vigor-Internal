#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_GameState_TomatoFight

#include "Basic.hpp"

#include "CoreUObject_structs.hpp"
#include "E_TeamsMatchPhase_structs.hpp"
#include "EFightVariant_structs.hpp"
#include "Struct_ScoreboardRow_structs.hpp"
#include "Struct_GunFightLoadout_structs.hpp"
#include "S_CustomMapMarker_Optimized_structs.hpp"
#include "S_CustomMapMarker_structs.hpp"
#include "Flame_structs.hpp"
#include "Struct_TVTDeathmatch_KillFeed_structs.hpp"
#include "Struct_ScoreboardTab_structs.hpp"
#include "Struct_GunFightStatistics_structs.hpp"
#include "FlameUI_structs.hpp"
#include "EGunFightWinReason_structs.hpp"
#include "Engine_structs.hpp"
#include "Struct_ScoreboardSubTab_structs.hpp"
#include "ERaidNotificationType_structs.hpp"


namespace SDK::Params
{

// Function BP_GameState_TomatoFight.BP_GameState_TomatoFight_C.FightVariantSet__DelegateSignature
// 0x0001 (0x0001 - 0x0000)
struct BP_GameState_TomatoFight_C_FightVariantSet__DelegateSignature final
{
public:
	EFightVariant                                 NewVariant;                                        // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_GameState_TomatoFight_C_FightVariantSet__DelegateSignature) == 0x000001, "Wrong alignment on BP_GameState_TomatoFight_C_FightVariantSet__DelegateSignature");
static_assert(sizeof(BP_GameState_TomatoFight_C_FightVariantSet__DelegateSignature) == 0x000001, "Wrong size on BP_GameState_TomatoFight_C_FightVariantSet__DelegateSignature");
static_assert(offsetof(BP_GameState_TomatoFight_C_FightVariantSet__DelegateSignature, NewVariant) == 0x000000, "Member 'BP_GameState_TomatoFight_C_FightVariantSet__DelegateSignature::NewVariant' has a wrong offset!");

// Function BP_GameState_TomatoFight.BP_GameState_TomatoFight_C.ExecuteUbergraph_BP_GameState_TomatoFight
// 0x05A0 (0x05A0 - 0x0000)
struct BP_GameState_TomatoFight_C_ExecuteUbergraph_BP_GameState_TomatoFight final
{
public:
	int32                                         EntryPoint;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0004(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class USoundBase*                             Temp_object_Variable;                              // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable;                                // 0x0014(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsDedicatedServer_ReturnValue;            // 0x0015(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsServer_ReturnValue;                     // 0x0016(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_17[0x1];                                       // 0x0017(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Array_Length_ReturnValue_1;               // 0x0018(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x001C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x0020(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue_1;                    // 0x0024(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsDedicatedServer_ReturnValue_1;          // 0x0025(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsServer_ReturnValue_1;                   // 0x0026(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_27[0x1];                                       // 0x0027(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	class AGameModeBase*                          CallFunc_GetGameMode_ReturnValue;                  // 0x0028(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_GetUserControllerId_ReturnValue;          // 0x0030(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_34[0x4];                                       // 0x0034(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class ABP_GameMode_TomatoFight_C*             K2Node_DynamicCast_AsBP_Game_Mode_Tomato_Fight;    // 0x0038(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0040(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_41[0x7];                                       // 0x0041(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AHumanPlayerController*                 CallFunc_GetHumanPlayerControllerByControllerId_ReturnValue; // 0x0048(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Variable;                                 // 0x0050(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_54[0x4];                                       // 0x0054(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class ABP_PlayerController_TomatoFight_C*     K2Node_DynamicCast_AsBP_Player_Controller_Tomato_Fight; // 0x0058(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess_1;                     // 0x0060(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsServer_ReturnValue_2;                   // 0x0061(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable_1;                              // 0x0062(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_63[0x1];                                       // 0x0063(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_GetUserControllerId_ReturnValue_1;        // 0x0064(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Variable_1;                               // 0x0068(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_6C[0x4];                                       // 0x006C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class AHumanPlayerController*                 CallFunc_GetHumanPlayerControllerByControllerId_ReturnValue_1; // 0x0070(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ABP_PlayerController_TomatoFight_C*     K2Node_DynamicCast_AsBP_Player_Controller_Tomato_Fight_1; // 0x0078(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess_2;                     // 0x0080(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_81[0x3];                                       // 0x0081(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Temp_int_Loop_Counter_Variable_1;                  // 0x0084(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue_1;                 // 0x0088(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Array_Index_Variable;                     // 0x008C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsDedicatedServer_ReturnValue_2;          // 0x0090(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable_2;                              // 0x0091(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsServer_ReturnValue_3;                   // 0x0092(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_93[0x1];                                       // 0x0093(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Temp_int_Variable_2;                               // 0x0094(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AGameModeBase*                          CallFunc_GetGameMode_ReturnValue_1;                // 0x0098(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AGameModeBase*                          CallFunc_GetGameMode_ReturnValue_2;                // 0x00A0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ABP_GameMode_TomatoFight_C*             K2Node_DynamicCast_AsBP_Game_Mode_Tomato_Fight_1;  // 0x00A8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess_3;                     // 0x00B0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_B1[0x7];                                       // 0x00B1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class ABP_GameMode_TomatoFight_C*             K2Node_DynamicCast_AsBP_Game_Mode_Tomato_Fight_2;  // 0x00B8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess_4;                     // 0x00C0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable_3;                              // 0x00C1(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_C2[0x2];                                       // 0x00C2(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Temp_int_Variable_3;                               // 0x00C4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue_2;               // 0x00C8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x00CC(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_CD[0x3];                                       // 0x00CD(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Temp_int_Array_Index_Variable_1;                   // 0x00D0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_D4[0x4];                                       // 0x00D4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class APlayerState*                           CallFunc_Array_Get_Item;                           // 0x00D8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue_2;                    // 0x00E0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_E1[0x7];                                       // 0x00E1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class ABP_PlayerState_Teams_C*                K2Node_DynamicCast_AsBP_Player_State_Teams;        // 0x00E8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess_5;                     // 0x00F0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable_4;                              // 0x00F1(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue_3;                    // 0x00F2(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_F3[0x5];                                       // 0x00F3(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	class ABP_PlayerController_TomatoFight_C*     K2Node_DynamicCast_AsBP_Player_Controller_Tomato_Fight_2; // 0x00F8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess_6;                     // 0x0100(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsDedicatedServer_ReturnValue_3;          // 0x0101(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_102[0x2];                                      // 0x0102(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Temp_int_Loop_Counter_Variable_2;                  // 0x0104(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue_2;                 // 0x0108(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Array_Index_Variable_2;                   // 0x010C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsDedicatedServer_ReturnValue_4;          // 0x0110(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_111[0x3];                                      // 0x0111(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         K2Node_CustomEvent_Remaining_Time_3;               // 0x0114(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Not_PreBool_ReturnValue;                  // 0x0118(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_119[0x3];                                      // 0x0119(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Temp_int_Array_Index_Variable_3;                   // 0x011C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class USoundBase*                             Temp_object_Variable_1;                            // 0x0120(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class APlayerState*                           CallFunc_Array_Get_Item_1;                         // 0x0128(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue_4;                    // 0x0130(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_131[0x7];                                      // 0x0131(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class ABP_PlayerState_Teams_C*                K2Node_DynamicCast_AsBP_Player_State_Teams_1;      // 0x0138(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess_7;                     // 0x0140(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue_5;                    // 0x0141(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_142[0x6];                                      // 0x0142(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class ABP_PlayerController_TomatoFight_C*     K2Node_DynamicCast_AsBP_Player_Controller_Tomato_Fight_3; // 0x0148(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess_8;                     // 0x0150(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_151[0x3];                                      // 0x0151(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         K2Node_CustomEvent_Remaining_Time_2;               // 0x0154(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         K2Node_CustomEvent_Remaining_Time_1;               // 0x0158(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         K2Node_CustomEvent_Remaining_Time;                 // 0x015C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsDedicatedServer_ReturnValue_5;          // 0x0160(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_161[0x3];                                      // 0x0161(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Temp_int_Loop_Counter_Variable_3;                  // 0x0164(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsDedicatedServer_ReturnValue_6;          // 0x0168(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Less_IntInt_ReturnValue_1;                // 0x0169(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_16A[0x2];                                      // 0x016A(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Add_IntInt_ReturnValue_3;                 // 0x016C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsServer_ReturnValue_4;                   // 0x0170(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsServer_ReturnValue_5;                   // 0x0171(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_172[0x6];                                      // 0x0172(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class UBP_GSC_Team_Raid_C*                    CallFunc_Get_Attacking_Team_Attacking_Team;        // 0x0178(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue_6;                    // 0x0180(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue_7;                    // 0x0181(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_182[0x6];                                      // 0x0182(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class UBP_GSC_Team_Raid_C*                    CallFunc_Get_Defending_Team_Defending_Team;        // 0x0188(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         K2Node_Select_Default;                             // 0x0190(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue_8;                    // 0x0194(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	EGunFightWinReason                            K2Node_CustomEvent_Win_Reason;                     // 0x0195(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_196[0x2];                                      // 0x0196(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	class UBP_GSC_Team_Raid_C*                    K2Node_CustomEvent_Team_Who_Won;                   // 0x0198(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         K2Node_Select_Default_1;                           // 0x01A0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsDedicatedServer_ReturnValue_7;          // 0x01A4(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_1A5[0x3];                                      // 0x01A5(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UBP_GSC_Team_Raid_C*                    CallFunc_Get_Attacking_Team_Attacking_Team_1;      // 0x01A8(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UBP_GSC_Team_Raid_C*                    CallFunc_Get_Defending_Team_Defending_Team_1;      // 0x01B0(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue_9;                    // 0x01B8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue_10;                   // 0x01B9(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_1BA[0x2];                                      // 0x01BA(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         K2Node_Select_Default_2;                           // 0x01BC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         K2Node_Select_Default_3;                           // 0x01C0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_GetUserControllerId_ReturnValue_2;        // 0x01C4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AHumanPlayerController*                 CallFunc_GetHumanPlayerControllerByControllerId_ReturnValue_2; // 0x01C8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ABP_PlayerController_TomatoFight_C*     K2Node_DynamicCast_AsBP_Player_Controller_Tomato_Fight_4; // 0x01D0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess_9;                     // 0x01D8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_1D9[0x3];                                      // 0x01D9(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_GetUserControllerId_ReturnValue_3;        // 0x01DC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AHumanPlayerController*                 CallFunc_GetHumanPlayerControllerByControllerId_ReturnValue_3; // 0x01E0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FStruct_TVTDeathmatch_KillFeed         K2Node_CustomEvent_KillFeed;                       // 0x01E8(0x00C8)(HasGetValueTypeHash)
	class ABP_PlayerController_TomatoFight_C*     K2Node_DynamicCast_AsBP_Player_Controller_Tomato_Fight_5; // 0x02B0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess_10;                    // 0x02B8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_2B9[0x7];                                      // 0x02B9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FStruct_TVTDeathmatch_KillFeed         CallFunc_Modify_Kill_Feed_Color_By_Team_Kill_Feed_Out; // 0x02C0(0x00C8)(HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue_11;                   // 0x0388(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_389[0x3];                                      // 0x0389(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Temp_int_Array_Index_Variable_4;                   // 0x038C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class APlayerState*                           CallFunc_Array_Get_Item_2;                         // 0x0390(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue_12;                   // 0x0398(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_399[0x7];                                      // 0x0399(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class ABP_PlayerState_Teams_C*                K2Node_DynamicCast_AsBP_Player_State_Teams_2;      // 0x03A0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess_11;                    // 0x03A8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_3A9[0x3];                                      // 0x03A9(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         K2Node_CustomEvent_Attacker_Survivors;             // 0x03AC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         K2Node_CustomEvent_Defender_Survivors;             // 0x03B0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue_13;                   // 0x03B4(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_3B5[0x3];                                      // 0x03B5(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class ABP_PlayerController_TomatoFight_C*     K2Node_DynamicCast_AsBP_Player_Controller_Tomato_Fight_6; // 0x03B8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess_12;                    // 0x03C0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_3C1[0x7];                                      // 0x03C1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class APawn*                                  CallFunc_K2_GetPawn_ReturnValue;                   // 0x03C8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AHumanPlayerCharacter*                  CallFunc_GetHumanCharacter_ReturnValue;            // 0x03D0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ABP_WorldSpectator_C*                   K2Node_DynamicCast_AsBP_World_Spectator;           // 0x03D8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess_13;                    // 0x03E0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue_14;                   // 0x03E1(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue_15;                   // 0x03E2(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_3E3[0x1];                                      // 0x03E3(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_GetMaxHealth_ReturnValue;                 // 0x03E4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_GetUserControllerId_ReturnValue_4;        // 0x03E8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3EC[0x4];                                      // 0x03EC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class AHumanPlayerController*                 CallFunc_GetHumanPlayerControllerByControllerId_ReturnValue_4; // 0x03F0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ABP_Objective_TomatoFight_C*            K2Node_CustomEvent_Objective;                      // 0x03F8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ABP_ObjectiveSpawnPoint_GunFight_C*     K2Node_CustomEvent_SpawnPoint;                     // 0x0400(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ABP_PlayerController_TomatoFight_C*     K2Node_DynamicCast_AsBP_Player_Controller_Tomato_Fight_7; // 0x0408(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess_14;                    // 0x0410(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue_16;                   // 0x0411(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsDedicatedServer_ReturnValue_8;          // 0x0412(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_413[0x1];                                      // 0x0413(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_GetUserControllerId_ReturnValue_5;        // 0x0414(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue_17;                   // 0x0418(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_419[0x7];                                      // 0x0419(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AHumanPlayerController*                 CallFunc_GetHumanPlayerControllerByControllerId_ReturnValue_5; // 0x0420(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UUI_TVTDeathmatch_KillFeed_C*           CallFunc_Create_ReturnValue;                       // 0x0428(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Is_Player_in_Team_Is_in_Team;             // 0x0430(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_431[0x3];                                      // 0x0431(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_GetUserControllerId_ReturnValue_6;        // 0x0434(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class USoundBase*                             K2Node_Select_Default_4;                           // 0x0438(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AHumanPlayerController*                 CallFunc_GetHumanPlayerControllerByControllerId_ReturnValue_6; // 0x0440(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UUI_GunFight_SurvivorCount_C*           CallFunc_Create_ReturnValue_1;                     // 0x0448(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         K2Node_CustomEvent_Value;                          // 0x0450(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TDelegate<void()>                             K2Node_CreateDelegate_OutputDelegate;              // 0x0454(0x0010)(ZeroConstructor, NoDestructor)
	uint8                                         Pad_464[0x4];                                      // 0x0464(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTimerHandle                           CallFunc_K2_SetTimerDelegate_ReturnValue;          // 0x0468(0x0008)(NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_CustomEvent_Sides_Switched;                 // 0x0470(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_471[0x7];                                      // 0x0471(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class ABP_PlayerStart_Raid_C*>         K2Node_CustomEvent_Attacker_Spawns;                // 0x0478(0x0010)(ConstParm, ReferenceParm)
	TArray<class ABP_PlayerStart_Raid_C*>         K2Node_CustomEvent_Defender_Spawns;                // 0x0488(0x0010)(ConstParm, ReferenceParm)
	int32                                         K2Node_CustomEvent_SelectedSettingID;              // 0x0498(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_49C[0x4];                                      // 0x049C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class UUI_SelectionWheel_C*>           CallFunc_GetAllWidgetsOfClass_FoundWidgets;        // 0x04A0(0x0010)(ReferenceParm, ContainsInstancedReference)
	int32                                         Temp_int_Loop_Counter_Variable_4;                  // 0x04B0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4B4[0x4];                                      // 0x04B4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UUI_SelectionWheel_C*                   CallFunc_Array_Get_Item_3;                         // 0x04B8(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue_2;                // 0x04C0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_4C1[0x3];                                      // 0x04C1(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Add_IntInt_ReturnValue_4;                 // 0x04C4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue_3;               // 0x04C8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue_3;                // 0x04CC(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsDedicatedServer_ReturnValue_9;          // 0x04CD(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_4CE[0x2];                                      // 0x04CE(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_GetUserControllerId_ReturnValue_7;        // 0x04D0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	E_TeamsMatchPhase                             K2Node_Event_Match_Phase;                          // 0x04D4(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4D5[0x3];                                      // 0x04D5(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class AHumanPlayerController*                 CallFunc_GetHumanPlayerControllerByControllerId_ReturnValue_7; // 0x04D8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_SwitchEnum_CmpSuccess;                      // 0x04E0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_4E1[0x7];                                      // 0x04E1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class ABP_PlayerController_TomatoFight_C*     K2Node_DynamicCast_AsBP_Player_Controller_Tomato_Fight_8; // 0x04E8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess_15;                    // 0x04F0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_4F1[0x3];                                      // 0x04F1(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	TDelegate<void()>                             K2Node_CreateDelegate_OutputDelegate_1;            // 0x04F4(0x0010)(ZeroConstructor, NoDestructor)
	bool                                          CallFunc_IsDedicatedServer_ReturnValue_10;         // 0x0504(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_505[0x3];                                      // 0x0505(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTimerHandle                           CallFunc_K2_SetTimerDelegate_ReturnValue_1;        // 0x0508(0x0008)(NoDestructor, HasGetValueTypeHash)
	class UAudioComponent*                        CallFunc_SpawnSound2D_ReturnValue;                 // 0x0510(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UAudioComponent*                        CallFunc_SpawnSound2D_ReturnValue_1;               // 0x0518(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_CustomEvent_IsActive;                       // 0x0520(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_521[0x7];                                      // 0x0521(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class ABP_Barricade_GunFight_C*>       CallFunc_GetAllActorsOfClass_OutActors;            // 0x0528(0x0010)(ReferenceParm)
	class ABP_WinnerScreen_Base_C*                K2Node_CustomEvent_Origin;                         // 0x0538(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ABP_Barricade_GunFight_C*               CallFunc_Array_Get_Item_4;                         // 0x0540(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_548[0x8];                                      // 0x0548(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             CallFunc_GetTransform_ReturnValue;                 // 0x0550(0x0030)(ConstParm, IsPlainOldData, NoDestructor)
	int32                                         CallFunc_Array_Length_ReturnValue_4;               // 0x0580(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_584[0x4];                                      // 0x0584(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 CallFunc_BeginDeferredActorSpawnFromClass_ReturnValue; // 0x0588(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue_4;                // 0x0590(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_591[0x7];                                      // 0x0591(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class ABP_WinnerScreen_TomatoFight_C*         CallFunc_FinishSpawningActor_ReturnValue;          // 0x0598(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_GameState_TomatoFight_C_ExecuteUbergraph_BP_GameState_TomatoFight) == 0x000010, "Wrong alignment on BP_GameState_TomatoFight_C_ExecuteUbergraph_BP_GameState_TomatoFight");
static_assert(sizeof(BP_GameState_TomatoFight_C_ExecuteUbergraph_BP_GameState_TomatoFight) == 0x0005A0, "Wrong size on BP_GameState_TomatoFight_C_ExecuteUbergraph_BP_GameState_TomatoFight");
static_assert(offsetof(BP_GameState_TomatoFight_C_ExecuteUbergraph_BP_GameState_TomatoFight, EntryPoint) == 0x000000, "Member 'BP_GameState_TomatoFight_C_ExecuteUbergraph_BP_GameState_TomatoFight::EntryPoint' has a wrong offset!");
static_assert(offsetof(BP_GameState_TomatoFight_C_ExecuteUbergraph_BP_GameState_TomatoFight, CallFunc_IsValid_ReturnValue) == 0x000004, "Member 'BP_GameState_TomatoFight_C_ExecuteUbergraph_BP_GameState_TomatoFight::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_GameState_TomatoFight_C_ExecuteUbergraph_BP_GameState_TomatoFight, Temp_object_Variable) == 0x000008, "Member 'BP_GameState_TomatoFight_C_ExecuteUbergraph_BP_GameState_TomatoFight::Temp_object_Variable' has a wrong offset!");
static_assert(offsetof(BP_GameState_TomatoFight_C_ExecuteUbergraph_BP_GameState_TomatoFight, CallFunc_Array_Length_ReturnValue) == 0x000010, "Member 'BP_GameState_TomatoFight_C_ExecuteUbergraph_BP_GameState_TomatoFight::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_GameState_TomatoFight_C_ExecuteUbergraph_BP_GameState_TomatoFight, Temp_bool_Variable) == 0x000014, "Member 'BP_GameState_TomatoFight_C_ExecuteUbergraph_BP_GameState_TomatoFight::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(BP_GameState_TomatoFight_C_ExecuteUbergraph_BP_GameState_TomatoFight, CallFunc_IsDedicatedServer_ReturnValue) == 0x000015, "Member 'BP_GameState_TomatoFight_C_ExecuteUbergraph_BP_GameState_TomatoFight::CallFunc_IsDedicatedServer_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_GameState_TomatoFight_C_ExecuteUbergraph_BP_GameState_TomatoFight, CallFunc_IsServer_ReturnValue) == 0x000016, "Member 'BP_GameState_TomatoFight_C_ExecuteUbergraph_BP_GameState_TomatoFight::CallFunc_IsServer_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_GameState_TomatoFight_C_ExecuteUbergraph_BP_GameState_TomatoFight, CallFunc_Array_Length_ReturnValue_1) == 0x000018, "Member 'BP_GameState_TomatoFight_C_ExecuteUbergraph_BP_GameState_TomatoFight::CallFunc_Array_Length_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_GameState_TomatoFight_C_ExecuteUbergraph_BP_GameState_TomatoFight, Temp_int_Loop_Counter_Variable) == 0x00001C, "Member 'BP_GameState_TomatoFight_C_ExecuteUbergraph_BP_GameState_TomatoFight::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(BP_GameState_TomatoFight_C_ExecuteUbergraph_BP_GameState_TomatoFight, CallFunc_Add_IntInt_ReturnValue) == 0x000020, "Member 'BP_GameState_TomatoFight_C_ExecuteUbergraph_BP_GameState_TomatoFight::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_GameState_TomatoFight_C_ExecuteUbergraph_BP_GameState_TomatoFight, CallFunc_IsValid_ReturnValue_1) == 0x000024, "Member 'BP_GameState_TomatoFight_C_ExecuteUbergraph_BP_GameState_TomatoFight::CallFunc_IsValid_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_GameState_TomatoFight_C_ExecuteUbergraph_BP_GameState_TomatoFight, CallFunc_IsDedicatedServer_ReturnValue_1) == 0x000025, "Member 'BP_GameState_TomatoFight_C_ExecuteUbergraph_BP_GameState_TomatoFight::CallFunc_IsDedicatedServer_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_GameState_TomatoFight_C_ExecuteUbergraph_BP_GameState_TomatoFight, CallFunc_IsServer_ReturnValue_1) == 0x000026, "Member 'BP_GameState_TomatoFight_C_ExecuteUbergraph_BP_GameState_TomatoFight::CallFunc_IsServer_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_GameState_TomatoFight_C_ExecuteUbergraph_BP_GameState_TomatoFight, CallFunc_GetGameMode_ReturnValue) == 0x000028, "Member 'BP_GameState_TomatoFight_C_ExecuteUbergraph_BP_GameState_TomatoFight::CallFunc_GetGameMode_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_GameState_TomatoFight_C_ExecuteUbergraph_BP_GameState_TomatoFight, CallFunc_GetUserControllerId_ReturnValue) == 0x000030, "Member 'BP_GameState_TomatoFight_C_ExecuteUbergraph_BP_GameState_TomatoFight::CallFunc_GetUserControllerId_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_GameState_TomatoFight_C_ExecuteUbergraph_BP_GameState_TomatoFight, K2Node_DynamicCast_AsBP_Game_Mode_Tomato_Fight) == 0x000038, "Member 'BP_GameState_TomatoFight_C_ExecuteUbergraph_BP_GameState_TomatoFight::K2Node_DynamicCast_AsBP_Game_Mode_Tomato_Fight' has a wrong offset!");
static_assert(offsetof(BP_GameState_TomatoFight_C_ExecuteUbergraph_BP_GameState_TomatoFight, K2Node_DynamicCast_bSuccess) == 0x000040, "Member 'BP_GameState_TomatoFight_C_ExecuteUbergraph_BP_GameState_TomatoFight::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(BP_GameState_TomatoFight_C_ExecuteUbergraph_BP_GameState_TomatoFight, CallFunc_GetHumanPlayerControllerByControllerId_ReturnValue) == 0x000048, "Member 'BP_GameState_TomatoFight_C_ExecuteUbergraph_BP_GameState_TomatoFight::CallFunc_GetHumanPlayerControllerByControllerId_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_GameState_TomatoFight_C_ExecuteUbergraph_BP_GameState_TomatoFight, Temp_int_Variable) == 0x000050, "Member 'BP_GameState_TomatoFight_C_ExecuteUbergraph_BP_GameState_TomatoFight::Temp_int_Variable' has a wrong offset!");
static_assert(offsetof(BP_GameState_TomatoFight_C_ExecuteUbergraph_BP_GameState_TomatoFight, K2Node_DynamicCast_AsBP_Player_Controller_Tomato_Fight) == 0x000058, "Member 'BP_GameState_TomatoFight_C_ExecuteUbergraph_BP_GameState_TomatoFight::K2Node_DynamicCast_AsBP_Player_Controller_Tomato_Fight' has a wrong offset!");
static_assert(offsetof(BP_GameState_TomatoFight_C_ExecuteUbergraph_BP_GameState_TomatoFight, K2Node_DynamicCast_bSuccess_1) == 0x000060, "Member 'BP_GameState_TomatoFight_C_ExecuteUbergraph_BP_GameState_TomatoFight::K2Node_DynamicCast_bSuccess_1' has a wrong offset!");
static_assert(offsetof(BP_GameState_TomatoFight_C_ExecuteUbergraph_BP_GameState_TomatoFight, CallFunc_IsServer_ReturnValue_2) == 0x000061, "Member 'BP_GameState_TomatoFight_C_ExecuteUbergraph_BP_GameState_TomatoFight::CallFunc_IsServer_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BP_GameState_TomatoFight_C_ExecuteUbergraph_BP_GameState_TomatoFight, Temp_bool_Variable_1) == 0x000062, "Member 'BP_GameState_TomatoFight_C_ExecuteUbergraph_BP_GameState_TomatoFight::Temp_bool_Variable_1' has a wrong offset!");
static_assert(offsetof(BP_GameState_TomatoFight_C_ExecuteUbergraph_BP_GameState_TomatoFight, CallFunc_GetUserControllerId_ReturnValue_1) == 0x000064, "Member 'BP_GameState_TomatoFight_C_ExecuteUbergraph_BP_GameState_TomatoFight::CallFunc_GetUserControllerId_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_GameState_TomatoFight_C_ExecuteUbergraph_BP_GameState_TomatoFight, Temp_int_Variable_1) == 0x000068, "Member 'BP_GameState_TomatoFight_C_ExecuteUbergraph_BP_GameState_TomatoFight::Temp_int_Variable_1' has a wrong offset!");
static_assert(offsetof(BP_GameState_TomatoFight_C_ExecuteUbergraph_BP_GameState_TomatoFight, CallFunc_GetHumanPlayerControllerByControllerId_ReturnValue_1) == 0x000070, "Member 'BP_GameState_TomatoFight_C_ExecuteUbergraph_BP_GameState_TomatoFight::CallFunc_GetHumanPlayerControllerByControllerId_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_GameState_TomatoFight_C_ExecuteUbergraph_BP_GameState_TomatoFight, K2Node_DynamicCast_AsBP_Player_Controller_Tomato_Fight_1) == 0x000078, "Member 'BP_GameState_TomatoFight_C_ExecuteUbergraph_BP_GameState_TomatoFight::K2Node_DynamicCast_AsBP_Player_Controller_Tomato_Fight_1' has a wrong offset!");
static_assert(offsetof(BP_GameState_TomatoFight_C_ExecuteUbergraph_BP_GameState_TomatoFight, K2Node_DynamicCast_bSuccess_2) == 0x000080, "Member 'BP_GameState_TomatoFight_C_ExecuteUbergraph_BP_GameState_TomatoFight::K2Node_DynamicCast_bSuccess_2' has a wrong offset!");
static_assert(offsetof(BP_GameState_TomatoFight_C_ExecuteUbergraph_BP_GameState_TomatoFight, Temp_int_Loop_Counter_Variable_1) == 0x000084, "Member 'BP_GameState_TomatoFight_C_ExecuteUbergraph_BP_GameState_TomatoFight::Temp_int_Loop_Counter_Variable_1' has a wrong offset!");
static_assert(offsetof(BP_GameState_TomatoFight_C_ExecuteUbergraph_BP_GameState_TomatoFight, CallFunc_Add_IntInt_ReturnValue_1) == 0x000088, "Member 'BP_GameState_TomatoFight_C_ExecuteUbergraph_BP_GameState_TomatoFight::CallFunc_Add_IntInt_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_GameState_TomatoFight_C_ExecuteUbergraph_BP_GameState_TomatoFight, Temp_int_Array_Index_Variable) == 0x00008C, "Member 'BP_GameState_TomatoFight_C_ExecuteUbergraph_BP_GameState_TomatoFight::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(BP_GameState_TomatoFight_C_ExecuteUbergraph_BP_GameState_TomatoFight, CallFunc_IsDedicatedServer_ReturnValue_2) == 0x000090, "Member 'BP_GameState_TomatoFight_C_ExecuteUbergraph_BP_GameState_TomatoFight::CallFunc_IsDedicatedServer_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BP_GameState_TomatoFight_C_ExecuteUbergraph_BP_GameState_TomatoFight, Temp_bool_Variable_2) == 0x000091, "Member 'BP_GameState_TomatoFight_C_ExecuteUbergraph_BP_GameState_TomatoFight::Temp_bool_Variable_2' has a wrong offset!");
static_assert(offsetof(BP_GameState_TomatoFight_C_ExecuteUbergraph_BP_GameState_TomatoFight, CallFunc_IsServer_ReturnValue_3) == 0x000092, "Member 'BP_GameState_TomatoFight_C_ExecuteUbergraph_BP_GameState_TomatoFight::CallFunc_IsServer_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(BP_GameState_TomatoFight_C_ExecuteUbergraph_BP_GameState_TomatoFight, Temp_int_Variable_2) == 0x000094, "Member 'BP_GameState_TomatoFight_C_ExecuteUbergraph_BP_GameState_TomatoFight::Temp_int_Variable_2' has a wrong offset!");
static_assert(offsetof(BP_GameState_TomatoFight_C_ExecuteUbergraph_BP_GameState_TomatoFight, CallFunc_GetGameMode_ReturnValue_1) == 0x000098, "Member 'BP_GameState_TomatoFight_C_ExecuteUbergraph_BP_GameState_TomatoFight::CallFunc_GetGameMode_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_GameState_TomatoFight_C_ExecuteUbergraph_BP_GameState_TomatoFight, CallFunc_GetGameMode_ReturnValue_2) == 0x0000A0, "Member 'BP_GameState_TomatoFight_C_ExecuteUbergraph_BP_GameState_TomatoFight::CallFunc_GetGameMode_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BP_GameState_TomatoFight_C_ExecuteUbergraph_BP_GameState_TomatoFight, K2Node_DynamicCast_AsBP_Game_Mode_Tomato_Fight_1) == 0x0000A8, "Member 'BP_GameState_TomatoFight_C_ExecuteUbergraph_BP_GameState_TomatoFight::K2Node_DynamicCast_AsBP_Game_Mode_Tomato_Fight_1' has a wrong offset!");
static_assert(offsetof(BP_GameState_TomatoFight_C_ExecuteUbergraph_BP_GameState_TomatoFight, K2Node_DynamicCast_bSuccess_3) == 0x0000B0, "Member 'BP_GameState_TomatoFight_C_ExecuteUbergraph_BP_GameState_TomatoFight::K2Node_DynamicCast_bSuccess_3' has a wrong offset!");
static_assert(offsetof(BP_GameState_TomatoFight_C_ExecuteUbergraph_BP_GameState_TomatoFight, K2Node_DynamicCast_AsBP_Game_Mode_Tomato_Fight_2) == 0x0000B8, "Member 'BP_GameState_TomatoFight_C_ExecuteUbergraph_BP_GameState_TomatoFight::K2Node_DynamicCast_AsBP_Game_Mode_Tomato_Fight_2' has a wrong offset!");
static_assert(offsetof(BP_GameState_TomatoFight_C_ExecuteUbergraph_BP_GameState_TomatoFight, K2Node_DynamicCast_bSuccess_4) == 0x0000C0, "Member 'BP_GameState_TomatoFight_C_ExecuteUbergraph_BP_GameState_TomatoFight::K2Node_DynamicCast_bSuccess_4' has a wrong offset!");
static_assert(offsetof(BP_GameState_TomatoFight_C_ExecuteUbergraph_BP_GameState_TomatoFight, Temp_bool_Variable_3) == 0x0000C1, "Member 'BP_GameState_TomatoFight_C_ExecuteUbergraph_BP_GameState_TomatoFight::Temp_bool_Variable_3' has a wrong offset!");
static_assert(offsetof(BP_GameState_TomatoFight_C_ExecuteUbergraph_BP_GameState_TomatoFight, Temp_int_Variable_3) == 0x0000C4, "Member 'BP_GameState_TomatoFight_C_ExecuteUbergraph_BP_GameState_TomatoFight::Temp_int_Variable_3' has a wrong offset!");
static_assert(offsetof(BP_GameState_TomatoFight_C_ExecuteUbergraph_BP_GameState_TomatoFight, CallFunc_Array_Length_ReturnValue_2) == 0x0000C8, "Member 'BP_GameState_TomatoFight_C_ExecuteUbergraph_BP_GameState_TomatoFight::CallFunc_Array_Length_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BP_GameState_TomatoFight_C_ExecuteUbergraph_BP_GameState_TomatoFight, CallFunc_Less_IntInt_ReturnValue) == 0x0000CC, "Member 'BP_GameState_TomatoFight_C_ExecuteUbergraph_BP_GameState_TomatoFight::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_GameState_TomatoFight_C_ExecuteUbergraph_BP_GameState_TomatoFight, Temp_int_Array_Index_Variable_1) == 0x0000D0, "Member 'BP_GameState_TomatoFight_C_ExecuteUbergraph_BP_GameState_TomatoFight::Temp_int_Array_Index_Variable_1' has a wrong offset!");
static_assert(offsetof(BP_GameState_TomatoFight_C_ExecuteUbergraph_BP_GameState_TomatoFight, CallFunc_Array_Get_Item) == 0x0000D8, "Member 'BP_GameState_TomatoFight_C_ExecuteUbergraph_BP_GameState_TomatoFight::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(BP_GameState_TomatoFight_C_ExecuteUbergraph_BP_GameState_TomatoFight, CallFunc_IsValid_ReturnValue_2) == 0x0000E0, "Member 'BP_GameState_TomatoFight_C_ExecuteUbergraph_BP_GameState_TomatoFight::CallFunc_IsValid_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BP_GameState_TomatoFight_C_ExecuteUbergraph_BP_GameState_TomatoFight, K2Node_DynamicCast_AsBP_Player_State_Teams) == 0x0000E8, "Member 'BP_GameState_TomatoFight_C_ExecuteUbergraph_BP_GameState_TomatoFight::K2Node_DynamicCast_AsBP_Player_State_Teams' has a wrong offset!");
static_assert(offsetof(BP_GameState_TomatoFight_C_ExecuteUbergraph_BP_GameState_TomatoFight, K2Node_DynamicCast_bSuccess_5) == 0x0000F0, "Member 'BP_GameState_TomatoFight_C_ExecuteUbergraph_BP_GameState_TomatoFight::K2Node_DynamicCast_bSuccess_5' has a wrong offset!");
static_assert(offsetof(BP_GameState_TomatoFight_C_ExecuteUbergraph_BP_GameState_TomatoFight, Temp_bool_Variable_4) == 0x0000F1, "Member 'BP_GameState_TomatoFight_C_ExecuteUbergraph_BP_GameState_TomatoFight::Temp_bool_Variable_4' has a wrong offset!");
static_assert(offsetof(BP_GameState_TomatoFight_C_ExecuteUbergraph_BP_GameState_TomatoFight, CallFunc_IsValid_ReturnValue_3) == 0x0000F2, "Member 'BP_GameState_TomatoFight_C_ExecuteUbergraph_BP_GameState_TomatoFight::CallFunc_IsValid_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(BP_GameState_TomatoFight_C_ExecuteUbergraph_BP_GameState_TomatoFight, K2Node_DynamicCast_AsBP_Player_Controller_Tomato_Fight_2) == 0x0000F8, "Member 'BP_GameState_TomatoFight_C_ExecuteUbergraph_BP_GameState_TomatoFight::K2Node_DynamicCast_AsBP_Player_Controller_Tomato_Fight_2' has a wrong offset!");
static_assert(offsetof(BP_GameState_TomatoFight_C_ExecuteUbergraph_BP_GameState_TomatoFight, K2Node_DynamicCast_bSuccess_6) == 0x000100, "Member 'BP_GameState_TomatoFight_C_ExecuteUbergraph_BP_GameState_TomatoFight::K2Node_DynamicCast_bSuccess_6' has a wrong offset!");
static_assert(offsetof(BP_GameState_TomatoFight_C_ExecuteUbergraph_BP_GameState_TomatoFight, CallFunc_IsDedicatedServer_ReturnValue_3) == 0x000101, "Member 'BP_GameState_TomatoFight_C_ExecuteUbergraph_BP_GameState_TomatoFight::CallFunc_IsDedicatedServer_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(BP_GameState_TomatoFight_C_ExecuteUbergraph_BP_GameState_TomatoFight, Temp_int_Loop_Counter_Variable_2) == 0x000104, "Member 'BP_GameState_TomatoFight_C_ExecuteUbergraph_BP_GameState_TomatoFight::Temp_int_Loop_Counter_Variable_2' has a wrong offset!");
static_assert(offsetof(BP_GameState_TomatoFight_C_ExecuteUbergraph_BP_GameState_TomatoFight, CallFunc_Add_IntInt_ReturnValue_2) == 0x000108, "Member 'BP_GameState_TomatoFight_C_ExecuteUbergraph_BP_GameState_TomatoFight::CallFunc_Add_IntInt_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BP_GameState_TomatoFight_C_ExecuteUbergraph_BP_GameState_TomatoFight, Temp_int_Array_Index_Variable_2) == 0x00010C, "Member 'BP_GameState_TomatoFight_C_ExecuteUbergraph_BP_GameState_TomatoFight::Temp_int_Array_Index_Variable_2' has a wrong offset!");
static_assert(offsetof(BP_GameState_TomatoFight_C_ExecuteUbergraph_BP_GameState_TomatoFight, CallFunc_IsDedicatedServer_ReturnValue_4) == 0x000110, "Member 'BP_GameState_TomatoFight_C_ExecuteUbergraph_BP_GameState_TomatoFight::CallFunc_IsDedicatedServer_ReturnValue_4' has a wrong offset!");
static_assert(offsetof(BP_GameState_TomatoFight_C_ExecuteUbergraph_BP_GameState_TomatoFight, K2Node_CustomEvent_Remaining_Time_3) == 0x000114, "Member 'BP_GameState_TomatoFight_C_ExecuteUbergraph_BP_GameState_TomatoFight::K2Node_CustomEvent_Remaining_Time_3' has a wrong offset!");
static_assert(offsetof(BP_GameState_TomatoFight_C_ExecuteUbergraph_BP_GameState_TomatoFight, CallFunc_Not_PreBool_ReturnValue) == 0x000118, "Member 'BP_GameState_TomatoFight_C_ExecuteUbergraph_BP_GameState_TomatoFight::CallFunc_Not_PreBool_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_GameState_TomatoFight_C_ExecuteUbergraph_BP_GameState_TomatoFight, Temp_int_Array_Index_Variable_3) == 0x00011C, "Member 'BP_GameState_TomatoFight_C_ExecuteUbergraph_BP_GameState_TomatoFight::Temp_int_Array_Index_Variable_3' has a wrong offset!");
static_assert(offsetof(BP_GameState_TomatoFight_C_ExecuteUbergraph_BP_GameState_TomatoFight, Temp_object_Variable_1) == 0x000120, "Member 'BP_GameState_TomatoFight_C_ExecuteUbergraph_BP_GameState_TomatoFight::Temp_object_Variable_1' has a wrong offset!");
static_assert(offsetof(BP_GameState_TomatoFight_C_ExecuteUbergraph_BP_GameState_TomatoFight, CallFunc_Array_Get_Item_1) == 0x000128, "Member 'BP_GameState_TomatoFight_C_ExecuteUbergraph_BP_GameState_TomatoFight::CallFunc_Array_Get_Item_1' has a wrong offset!");
static_assert(offsetof(BP_GameState_TomatoFight_C_ExecuteUbergraph_BP_GameState_TomatoFight, CallFunc_IsValid_ReturnValue_4) == 0x000130, "Member 'BP_GameState_TomatoFight_C_ExecuteUbergraph_BP_GameState_TomatoFight::CallFunc_IsValid_ReturnValue_4' has a wrong offset!");
static_assert(offsetof(BP_GameState_TomatoFight_C_ExecuteUbergraph_BP_GameState_TomatoFight, K2Node_DynamicCast_AsBP_Player_State_Teams_1) == 0x000138, "Member 'BP_GameState_TomatoFight_C_ExecuteUbergraph_BP_GameState_TomatoFight::K2Node_DynamicCast_AsBP_Player_State_Teams_1' has a wrong offset!");
static_assert(offsetof(BP_GameState_TomatoFight_C_ExecuteUbergraph_BP_GameState_TomatoFight, K2Node_DynamicCast_bSuccess_7) == 0x000140, "Member 'BP_GameState_TomatoFight_C_ExecuteUbergraph_BP_GameState_TomatoFight::K2Node_DynamicCast_bSuccess_7' has a wrong offset!");
static_assert(offsetof(BP_GameState_TomatoFight_C_ExecuteUbergraph_BP_GameState_TomatoFight, CallFunc_IsValid_ReturnValue_5) == 0x000141, "Member 'BP_GameState_TomatoFight_C_ExecuteUbergraph_BP_GameState_TomatoFight::CallFunc_IsValid_ReturnValue_5' has a wrong offset!");
static_assert(offsetof(BP_GameState_TomatoFight_C_ExecuteUbergraph_BP_GameState_TomatoFight, K2Node_DynamicCast_AsBP_Player_Controller_Tomato_Fight_3) == 0x000148, "Member 'BP_GameState_TomatoFight_C_ExecuteUbergraph_BP_GameState_TomatoFight::K2Node_DynamicCast_AsBP_Player_Controller_Tomato_Fight_3' has a wrong offset!");
static_assert(offsetof(BP_GameState_TomatoFight_C_ExecuteUbergraph_BP_GameState_TomatoFight, K2Node_DynamicCast_bSuccess_8) == 0x000150, "Member 'BP_GameState_TomatoFight_C_ExecuteUbergraph_BP_GameState_TomatoFight::K2Node_DynamicCast_bSuccess_8' has a wrong offset!");
static_assert(offsetof(BP_GameState_TomatoFight_C_ExecuteUbergraph_BP_GameState_TomatoFight, K2Node_CustomEvent_Remaining_Time_2) == 0x000154, "Member 'BP_GameState_TomatoFight_C_ExecuteUbergraph_BP_GameState_TomatoFight::K2Node_CustomEvent_Remaining_Time_2' has a wrong offset!");
static_assert(offsetof(BP_GameState_TomatoFight_C_ExecuteUbergraph_BP_GameState_TomatoFight, K2Node_CustomEvent_Remaining_Time_1) == 0x000158, "Member 'BP_GameState_TomatoFight_C_ExecuteUbergraph_BP_GameState_TomatoFight::K2Node_CustomEvent_Remaining_Time_1' has a wrong offset!");
static_assert(offsetof(BP_GameState_TomatoFight_C_ExecuteUbergraph_BP_GameState_TomatoFight, K2Node_CustomEvent_Remaining_Time) == 0x00015C, "Member 'BP_GameState_TomatoFight_C_ExecuteUbergraph_BP_GameState_TomatoFight::K2Node_CustomEvent_Remaining_Time' has a wrong offset!");
static_assert(offsetof(BP_GameState_TomatoFight_C_ExecuteUbergraph_BP_GameState_TomatoFight, CallFunc_IsDedicatedServer_ReturnValue_5) == 0x000160, "Member 'BP_GameState_TomatoFight_C_ExecuteUbergraph_BP_GameState_TomatoFight::CallFunc_IsDedicatedServer_ReturnValue_5' has a wrong offset!");
static_assert(offsetof(BP_GameState_TomatoFight_C_ExecuteUbergraph_BP_GameState_TomatoFight, Temp_int_Loop_Counter_Variable_3) == 0x000164, "Member 'BP_GameState_TomatoFight_C_ExecuteUbergraph_BP_GameState_TomatoFight::Temp_int_Loop_Counter_Variable_3' has a wrong offset!");
static_assert(offsetof(BP_GameState_TomatoFight_C_ExecuteUbergraph_BP_GameState_TomatoFight, CallFunc_IsDedicatedServer_ReturnValue_6) == 0x000168, "Member 'BP_GameState_TomatoFight_C_ExecuteUbergraph_BP_GameState_TomatoFight::CallFunc_IsDedicatedServer_ReturnValue_6' has a wrong offset!");
static_assert(offsetof(BP_GameState_TomatoFight_C_ExecuteUbergraph_BP_GameState_TomatoFight, CallFunc_Less_IntInt_ReturnValue_1) == 0x000169, "Member 'BP_GameState_TomatoFight_C_ExecuteUbergraph_BP_GameState_TomatoFight::CallFunc_Less_IntInt_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_GameState_TomatoFight_C_ExecuteUbergraph_BP_GameState_TomatoFight, CallFunc_Add_IntInt_ReturnValue_3) == 0x00016C, "Member 'BP_GameState_TomatoFight_C_ExecuteUbergraph_BP_GameState_TomatoFight::CallFunc_Add_IntInt_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(BP_GameState_TomatoFight_C_ExecuteUbergraph_BP_GameState_TomatoFight, CallFunc_IsServer_ReturnValue_4) == 0x000170, "Member 'BP_GameState_TomatoFight_C_ExecuteUbergraph_BP_GameState_TomatoFight::CallFunc_IsServer_ReturnValue_4' has a wrong offset!");
static_assert(offsetof(BP_GameState_TomatoFight_C_ExecuteUbergraph_BP_GameState_TomatoFight, CallFunc_IsServer_ReturnValue_5) == 0x000171, "Member 'BP_GameState_TomatoFight_C_ExecuteUbergraph_BP_GameState_TomatoFight::CallFunc_IsServer_ReturnValue_5' has a wrong offset!");
static_assert(offsetof(BP_GameState_TomatoFight_C_ExecuteUbergraph_BP_GameState_TomatoFight, CallFunc_Get_Attacking_Team_Attacking_Team) == 0x000178, "Member 'BP_GameState_TomatoFight_C_ExecuteUbergraph_BP_GameState_TomatoFight::CallFunc_Get_Attacking_Team_Attacking_Team' has a wrong offset!");
static_assert(offsetof(BP_GameState_TomatoFight_C_ExecuteUbergraph_BP_GameState_TomatoFight, CallFunc_IsValid_ReturnValue_6) == 0x000180, "Member 'BP_GameState_TomatoFight_C_ExecuteUbergraph_BP_GameState_TomatoFight::CallFunc_IsValid_ReturnValue_6' has a wrong offset!");
static_assert(offsetof(BP_GameState_TomatoFight_C_ExecuteUbergraph_BP_GameState_TomatoFight, CallFunc_IsValid_ReturnValue_7) == 0x000181, "Member 'BP_GameState_TomatoFight_C_ExecuteUbergraph_BP_GameState_TomatoFight::CallFunc_IsValid_ReturnValue_7' has a wrong offset!");
static_assert(offsetof(BP_GameState_TomatoFight_C_ExecuteUbergraph_BP_GameState_TomatoFight, CallFunc_Get_Defending_Team_Defending_Team) == 0x000188, "Member 'BP_GameState_TomatoFight_C_ExecuteUbergraph_BP_GameState_TomatoFight::CallFunc_Get_Defending_Team_Defending_Team' has a wrong offset!");
static_assert(offsetof(BP_GameState_TomatoFight_C_ExecuteUbergraph_BP_GameState_TomatoFight, K2Node_Select_Default) == 0x000190, "Member 'BP_GameState_TomatoFight_C_ExecuteUbergraph_BP_GameState_TomatoFight::K2Node_Select_Default' has a wrong offset!");
static_assert(offsetof(BP_GameState_TomatoFight_C_ExecuteUbergraph_BP_GameState_TomatoFight, CallFunc_IsValid_ReturnValue_8) == 0x000194, "Member 'BP_GameState_TomatoFight_C_ExecuteUbergraph_BP_GameState_TomatoFight::CallFunc_IsValid_ReturnValue_8' has a wrong offset!");
static_assert(offsetof(BP_GameState_TomatoFight_C_ExecuteUbergraph_BP_GameState_TomatoFight, K2Node_CustomEvent_Win_Reason) == 0x000195, "Member 'BP_GameState_TomatoFight_C_ExecuteUbergraph_BP_GameState_TomatoFight::K2Node_CustomEvent_Win_Reason' has a wrong offset!");
static_assert(offsetof(BP_GameState_TomatoFight_C_ExecuteUbergraph_BP_GameState_TomatoFight, K2Node_CustomEvent_Team_Who_Won) == 0x000198, "Member 'BP_GameState_TomatoFight_C_ExecuteUbergraph_BP_GameState_TomatoFight::K2Node_CustomEvent_Team_Who_Won' has a wrong offset!");
static_assert(offsetof(BP_GameState_TomatoFight_C_ExecuteUbergraph_BP_GameState_TomatoFight, K2Node_Select_Default_1) == 0x0001A0, "Member 'BP_GameState_TomatoFight_C_ExecuteUbergraph_BP_GameState_TomatoFight::K2Node_Select_Default_1' has a wrong offset!");
static_assert(offsetof(BP_GameState_TomatoFight_C_ExecuteUbergraph_BP_GameState_TomatoFight, CallFunc_IsDedicatedServer_ReturnValue_7) == 0x0001A4, "Member 'BP_GameState_TomatoFight_C_ExecuteUbergraph_BP_GameState_TomatoFight::CallFunc_IsDedicatedServer_ReturnValue_7' has a wrong offset!");
static_assert(offsetof(BP_GameState_TomatoFight_C_ExecuteUbergraph_BP_GameState_TomatoFight, CallFunc_Get_Attacking_Team_Attacking_Team_1) == 0x0001A8, "Member 'BP_GameState_TomatoFight_C_ExecuteUbergraph_BP_GameState_TomatoFight::CallFunc_Get_Attacking_Team_Attacking_Team_1' has a wrong offset!");
static_assert(offsetof(BP_GameState_TomatoFight_C_ExecuteUbergraph_BP_GameState_TomatoFight, CallFunc_Get_Defending_Team_Defending_Team_1) == 0x0001B0, "Member 'BP_GameState_TomatoFight_C_ExecuteUbergraph_BP_GameState_TomatoFight::CallFunc_Get_Defending_Team_Defending_Team_1' has a wrong offset!");
static_assert(offsetof(BP_GameState_TomatoFight_C_ExecuteUbergraph_BP_GameState_TomatoFight, CallFunc_IsValid_ReturnValue_9) == 0x0001B8, "Member 'BP_GameState_TomatoFight_C_ExecuteUbergraph_BP_GameState_TomatoFight::CallFunc_IsValid_ReturnValue_9' has a wrong offset!");
static_assert(offsetof(BP_GameState_TomatoFight_C_ExecuteUbergraph_BP_GameState_TomatoFight, CallFunc_IsValid_ReturnValue_10) == 0x0001B9, "Member 'BP_GameState_TomatoFight_C_ExecuteUbergraph_BP_GameState_TomatoFight::CallFunc_IsValid_ReturnValue_10' has a wrong offset!");
static_assert(offsetof(BP_GameState_TomatoFight_C_ExecuteUbergraph_BP_GameState_TomatoFight, K2Node_Select_Default_2) == 0x0001BC, "Member 'BP_GameState_TomatoFight_C_ExecuteUbergraph_BP_GameState_TomatoFight::K2Node_Select_Default_2' has a wrong offset!");
static_assert(offsetof(BP_GameState_TomatoFight_C_ExecuteUbergraph_BP_GameState_TomatoFight, K2Node_Select_Default_3) == 0x0001C0, "Member 'BP_GameState_TomatoFight_C_ExecuteUbergraph_BP_GameState_TomatoFight::K2Node_Select_Default_3' has a wrong offset!");
static_assert(offsetof(BP_GameState_TomatoFight_C_ExecuteUbergraph_BP_GameState_TomatoFight, CallFunc_GetUserControllerId_ReturnValue_2) == 0x0001C4, "Member 'BP_GameState_TomatoFight_C_ExecuteUbergraph_BP_GameState_TomatoFight::CallFunc_GetUserControllerId_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BP_GameState_TomatoFight_C_ExecuteUbergraph_BP_GameState_TomatoFight, CallFunc_GetHumanPlayerControllerByControllerId_ReturnValue_2) == 0x0001C8, "Member 'BP_GameState_TomatoFight_C_ExecuteUbergraph_BP_GameState_TomatoFight::CallFunc_GetHumanPlayerControllerByControllerId_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BP_GameState_TomatoFight_C_ExecuteUbergraph_BP_GameState_TomatoFight, K2Node_DynamicCast_AsBP_Player_Controller_Tomato_Fight_4) == 0x0001D0, "Member 'BP_GameState_TomatoFight_C_ExecuteUbergraph_BP_GameState_TomatoFight::K2Node_DynamicCast_AsBP_Player_Controller_Tomato_Fight_4' has a wrong offset!");
static_assert(offsetof(BP_GameState_TomatoFight_C_ExecuteUbergraph_BP_GameState_TomatoFight, K2Node_DynamicCast_bSuccess_9) == 0x0001D8, "Member 'BP_GameState_TomatoFight_C_ExecuteUbergraph_BP_GameState_TomatoFight::K2Node_DynamicCast_bSuccess_9' has a wrong offset!");
static_assert(offsetof(BP_GameState_TomatoFight_C_ExecuteUbergraph_BP_GameState_TomatoFight, CallFunc_GetUserControllerId_ReturnValue_3) == 0x0001DC, "Member 'BP_GameState_TomatoFight_C_ExecuteUbergraph_BP_GameState_TomatoFight::CallFunc_GetUserControllerId_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(BP_GameState_TomatoFight_C_ExecuteUbergraph_BP_GameState_TomatoFight, CallFunc_GetHumanPlayerControllerByControllerId_ReturnValue_3) == 0x0001E0, "Member 'BP_GameState_TomatoFight_C_ExecuteUbergraph_BP_GameState_TomatoFight::CallFunc_GetHumanPlayerControllerByControllerId_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(BP_GameState_TomatoFight_C_ExecuteUbergraph_BP_GameState_TomatoFight, K2Node_CustomEvent_KillFeed) == 0x0001E8, "Member 'BP_GameState_TomatoFight_C_ExecuteUbergraph_BP_GameState_TomatoFight::K2Node_CustomEvent_KillFeed' has a wrong offset!");
static_assert(offsetof(BP_GameState_TomatoFight_C_ExecuteUbergraph_BP_GameState_TomatoFight, K2Node_DynamicCast_AsBP_Player_Controller_Tomato_Fight_5) == 0x0002B0, "Member 'BP_GameState_TomatoFight_C_ExecuteUbergraph_BP_GameState_TomatoFight::K2Node_DynamicCast_AsBP_Player_Controller_Tomato_Fight_5' has a wrong offset!");
static_assert(offsetof(BP_GameState_TomatoFight_C_ExecuteUbergraph_BP_GameState_TomatoFight, K2Node_DynamicCast_bSuccess_10) == 0x0002B8, "Member 'BP_GameState_TomatoFight_C_ExecuteUbergraph_BP_GameState_TomatoFight::K2Node_DynamicCast_bSuccess_10' has a wrong offset!");
static_assert(offsetof(BP_GameState_TomatoFight_C_ExecuteUbergraph_BP_GameState_TomatoFight, CallFunc_Modify_Kill_Feed_Color_By_Team_Kill_Feed_Out) == 0x0002C0, "Member 'BP_GameState_TomatoFight_C_ExecuteUbergraph_BP_GameState_TomatoFight::CallFunc_Modify_Kill_Feed_Color_By_Team_Kill_Feed_Out' has a wrong offset!");
static_assert(offsetof(BP_GameState_TomatoFight_C_ExecuteUbergraph_BP_GameState_TomatoFight, CallFunc_IsValid_ReturnValue_11) == 0x000388, "Member 'BP_GameState_TomatoFight_C_ExecuteUbergraph_BP_GameState_TomatoFight::CallFunc_IsValid_ReturnValue_11' has a wrong offset!");
static_assert(offsetof(BP_GameState_TomatoFight_C_ExecuteUbergraph_BP_GameState_TomatoFight, Temp_int_Array_Index_Variable_4) == 0x00038C, "Member 'BP_GameState_TomatoFight_C_ExecuteUbergraph_BP_GameState_TomatoFight::Temp_int_Array_Index_Variable_4' has a wrong offset!");
static_assert(offsetof(BP_GameState_TomatoFight_C_ExecuteUbergraph_BP_GameState_TomatoFight, CallFunc_Array_Get_Item_2) == 0x000390, "Member 'BP_GameState_TomatoFight_C_ExecuteUbergraph_BP_GameState_TomatoFight::CallFunc_Array_Get_Item_2' has a wrong offset!");
static_assert(offsetof(BP_GameState_TomatoFight_C_ExecuteUbergraph_BP_GameState_TomatoFight, CallFunc_IsValid_ReturnValue_12) == 0x000398, "Member 'BP_GameState_TomatoFight_C_ExecuteUbergraph_BP_GameState_TomatoFight::CallFunc_IsValid_ReturnValue_12' has a wrong offset!");
static_assert(offsetof(BP_GameState_TomatoFight_C_ExecuteUbergraph_BP_GameState_TomatoFight, K2Node_DynamicCast_AsBP_Player_State_Teams_2) == 0x0003A0, "Member 'BP_GameState_TomatoFight_C_ExecuteUbergraph_BP_GameState_TomatoFight::K2Node_DynamicCast_AsBP_Player_State_Teams_2' has a wrong offset!");
static_assert(offsetof(BP_GameState_TomatoFight_C_ExecuteUbergraph_BP_GameState_TomatoFight, K2Node_DynamicCast_bSuccess_11) == 0x0003A8, "Member 'BP_GameState_TomatoFight_C_ExecuteUbergraph_BP_GameState_TomatoFight::K2Node_DynamicCast_bSuccess_11' has a wrong offset!");
static_assert(offsetof(BP_GameState_TomatoFight_C_ExecuteUbergraph_BP_GameState_TomatoFight, K2Node_CustomEvent_Attacker_Survivors) == 0x0003AC, "Member 'BP_GameState_TomatoFight_C_ExecuteUbergraph_BP_GameState_TomatoFight::K2Node_CustomEvent_Attacker_Survivors' has a wrong offset!");
static_assert(offsetof(BP_GameState_TomatoFight_C_ExecuteUbergraph_BP_GameState_TomatoFight, K2Node_CustomEvent_Defender_Survivors) == 0x0003B0, "Member 'BP_GameState_TomatoFight_C_ExecuteUbergraph_BP_GameState_TomatoFight::K2Node_CustomEvent_Defender_Survivors' has a wrong offset!");
static_assert(offsetof(BP_GameState_TomatoFight_C_ExecuteUbergraph_BP_GameState_TomatoFight, CallFunc_IsValid_ReturnValue_13) == 0x0003B4, "Member 'BP_GameState_TomatoFight_C_ExecuteUbergraph_BP_GameState_TomatoFight::CallFunc_IsValid_ReturnValue_13' has a wrong offset!");
static_assert(offsetof(BP_GameState_TomatoFight_C_ExecuteUbergraph_BP_GameState_TomatoFight, K2Node_DynamicCast_AsBP_Player_Controller_Tomato_Fight_6) == 0x0003B8, "Member 'BP_GameState_TomatoFight_C_ExecuteUbergraph_BP_GameState_TomatoFight::K2Node_DynamicCast_AsBP_Player_Controller_Tomato_Fight_6' has a wrong offset!");
static_assert(offsetof(BP_GameState_TomatoFight_C_ExecuteUbergraph_BP_GameState_TomatoFight, K2Node_DynamicCast_bSuccess_12) == 0x0003C0, "Member 'BP_GameState_TomatoFight_C_ExecuteUbergraph_BP_GameState_TomatoFight::K2Node_DynamicCast_bSuccess_12' has a wrong offset!");
static_assert(offsetof(BP_GameState_TomatoFight_C_ExecuteUbergraph_BP_GameState_TomatoFight, CallFunc_K2_GetPawn_ReturnValue) == 0x0003C8, "Member 'BP_GameState_TomatoFight_C_ExecuteUbergraph_BP_GameState_TomatoFight::CallFunc_K2_GetPawn_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_GameState_TomatoFight_C_ExecuteUbergraph_BP_GameState_TomatoFight, CallFunc_GetHumanCharacter_ReturnValue) == 0x0003D0, "Member 'BP_GameState_TomatoFight_C_ExecuteUbergraph_BP_GameState_TomatoFight::CallFunc_GetHumanCharacter_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_GameState_TomatoFight_C_ExecuteUbergraph_BP_GameState_TomatoFight, K2Node_DynamicCast_AsBP_World_Spectator) == 0x0003D8, "Member 'BP_GameState_TomatoFight_C_ExecuteUbergraph_BP_GameState_TomatoFight::K2Node_DynamicCast_AsBP_World_Spectator' has a wrong offset!");
static_assert(offsetof(BP_GameState_TomatoFight_C_ExecuteUbergraph_BP_GameState_TomatoFight, K2Node_DynamicCast_bSuccess_13) == 0x0003E0, "Member 'BP_GameState_TomatoFight_C_ExecuteUbergraph_BP_GameState_TomatoFight::K2Node_DynamicCast_bSuccess_13' has a wrong offset!");
static_assert(offsetof(BP_GameState_TomatoFight_C_ExecuteUbergraph_BP_GameState_TomatoFight, CallFunc_IsValid_ReturnValue_14) == 0x0003E1, "Member 'BP_GameState_TomatoFight_C_ExecuteUbergraph_BP_GameState_TomatoFight::CallFunc_IsValid_ReturnValue_14' has a wrong offset!");
static_assert(offsetof(BP_GameState_TomatoFight_C_ExecuteUbergraph_BP_GameState_TomatoFight, CallFunc_IsValid_ReturnValue_15) == 0x0003E2, "Member 'BP_GameState_TomatoFight_C_ExecuteUbergraph_BP_GameState_TomatoFight::CallFunc_IsValid_ReturnValue_15' has a wrong offset!");
static_assert(offsetof(BP_GameState_TomatoFight_C_ExecuteUbergraph_BP_GameState_TomatoFight, CallFunc_GetMaxHealth_ReturnValue) == 0x0003E4, "Member 'BP_GameState_TomatoFight_C_ExecuteUbergraph_BP_GameState_TomatoFight::CallFunc_GetMaxHealth_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_GameState_TomatoFight_C_ExecuteUbergraph_BP_GameState_TomatoFight, CallFunc_GetUserControllerId_ReturnValue_4) == 0x0003E8, "Member 'BP_GameState_TomatoFight_C_ExecuteUbergraph_BP_GameState_TomatoFight::CallFunc_GetUserControllerId_ReturnValue_4' has a wrong offset!");
static_assert(offsetof(BP_GameState_TomatoFight_C_ExecuteUbergraph_BP_GameState_TomatoFight, CallFunc_GetHumanPlayerControllerByControllerId_ReturnValue_4) == 0x0003F0, "Member 'BP_GameState_TomatoFight_C_ExecuteUbergraph_BP_GameState_TomatoFight::CallFunc_GetHumanPlayerControllerByControllerId_ReturnValue_4' has a wrong offset!");
static_assert(offsetof(BP_GameState_TomatoFight_C_ExecuteUbergraph_BP_GameState_TomatoFight, K2Node_CustomEvent_Objective) == 0x0003F8, "Member 'BP_GameState_TomatoFight_C_ExecuteUbergraph_BP_GameState_TomatoFight::K2Node_CustomEvent_Objective' has a wrong offset!");
static_assert(offsetof(BP_GameState_TomatoFight_C_ExecuteUbergraph_BP_GameState_TomatoFight, K2Node_CustomEvent_SpawnPoint) == 0x000400, "Member 'BP_GameState_TomatoFight_C_ExecuteUbergraph_BP_GameState_TomatoFight::K2Node_CustomEvent_SpawnPoint' has a wrong offset!");
static_assert(offsetof(BP_GameState_TomatoFight_C_ExecuteUbergraph_BP_GameState_TomatoFight, K2Node_DynamicCast_AsBP_Player_Controller_Tomato_Fight_7) == 0x000408, "Member 'BP_GameState_TomatoFight_C_ExecuteUbergraph_BP_GameState_TomatoFight::K2Node_DynamicCast_AsBP_Player_Controller_Tomato_Fight_7' has a wrong offset!");
static_assert(offsetof(BP_GameState_TomatoFight_C_ExecuteUbergraph_BP_GameState_TomatoFight, K2Node_DynamicCast_bSuccess_14) == 0x000410, "Member 'BP_GameState_TomatoFight_C_ExecuteUbergraph_BP_GameState_TomatoFight::K2Node_DynamicCast_bSuccess_14' has a wrong offset!");
static_assert(offsetof(BP_GameState_TomatoFight_C_ExecuteUbergraph_BP_GameState_TomatoFight, CallFunc_IsValid_ReturnValue_16) == 0x000411, "Member 'BP_GameState_TomatoFight_C_ExecuteUbergraph_BP_GameState_TomatoFight::CallFunc_IsValid_ReturnValue_16' has a wrong offset!");
static_assert(offsetof(BP_GameState_TomatoFight_C_ExecuteUbergraph_BP_GameState_TomatoFight, CallFunc_IsDedicatedServer_ReturnValue_8) == 0x000412, "Member 'BP_GameState_TomatoFight_C_ExecuteUbergraph_BP_GameState_TomatoFight::CallFunc_IsDedicatedServer_ReturnValue_8' has a wrong offset!");
static_assert(offsetof(BP_GameState_TomatoFight_C_ExecuteUbergraph_BP_GameState_TomatoFight, CallFunc_GetUserControllerId_ReturnValue_5) == 0x000414, "Member 'BP_GameState_TomatoFight_C_ExecuteUbergraph_BP_GameState_TomatoFight::CallFunc_GetUserControllerId_ReturnValue_5' has a wrong offset!");
static_assert(offsetof(BP_GameState_TomatoFight_C_ExecuteUbergraph_BP_GameState_TomatoFight, CallFunc_IsValid_ReturnValue_17) == 0x000418, "Member 'BP_GameState_TomatoFight_C_ExecuteUbergraph_BP_GameState_TomatoFight::CallFunc_IsValid_ReturnValue_17' has a wrong offset!");
static_assert(offsetof(BP_GameState_TomatoFight_C_ExecuteUbergraph_BP_GameState_TomatoFight, CallFunc_GetHumanPlayerControllerByControllerId_ReturnValue_5) == 0x000420, "Member 'BP_GameState_TomatoFight_C_ExecuteUbergraph_BP_GameState_TomatoFight::CallFunc_GetHumanPlayerControllerByControllerId_ReturnValue_5' has a wrong offset!");
static_assert(offsetof(BP_GameState_TomatoFight_C_ExecuteUbergraph_BP_GameState_TomatoFight, CallFunc_Create_ReturnValue) == 0x000428, "Member 'BP_GameState_TomatoFight_C_ExecuteUbergraph_BP_GameState_TomatoFight::CallFunc_Create_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_GameState_TomatoFight_C_ExecuteUbergraph_BP_GameState_TomatoFight, CallFunc_Is_Player_in_Team_Is_in_Team) == 0x000430, "Member 'BP_GameState_TomatoFight_C_ExecuteUbergraph_BP_GameState_TomatoFight::CallFunc_Is_Player_in_Team_Is_in_Team' has a wrong offset!");
static_assert(offsetof(BP_GameState_TomatoFight_C_ExecuteUbergraph_BP_GameState_TomatoFight, CallFunc_GetUserControllerId_ReturnValue_6) == 0x000434, "Member 'BP_GameState_TomatoFight_C_ExecuteUbergraph_BP_GameState_TomatoFight::CallFunc_GetUserControllerId_ReturnValue_6' has a wrong offset!");
static_assert(offsetof(BP_GameState_TomatoFight_C_ExecuteUbergraph_BP_GameState_TomatoFight, K2Node_Select_Default_4) == 0x000438, "Member 'BP_GameState_TomatoFight_C_ExecuteUbergraph_BP_GameState_TomatoFight::K2Node_Select_Default_4' has a wrong offset!");
static_assert(offsetof(BP_GameState_TomatoFight_C_ExecuteUbergraph_BP_GameState_TomatoFight, CallFunc_GetHumanPlayerControllerByControllerId_ReturnValue_6) == 0x000440, "Member 'BP_GameState_TomatoFight_C_ExecuteUbergraph_BP_GameState_TomatoFight::CallFunc_GetHumanPlayerControllerByControllerId_ReturnValue_6' has a wrong offset!");
static_assert(offsetof(BP_GameState_TomatoFight_C_ExecuteUbergraph_BP_GameState_TomatoFight, CallFunc_Create_ReturnValue_1) == 0x000448, "Member 'BP_GameState_TomatoFight_C_ExecuteUbergraph_BP_GameState_TomatoFight::CallFunc_Create_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_GameState_TomatoFight_C_ExecuteUbergraph_BP_GameState_TomatoFight, K2Node_CustomEvent_Value) == 0x000450, "Member 'BP_GameState_TomatoFight_C_ExecuteUbergraph_BP_GameState_TomatoFight::K2Node_CustomEvent_Value' has a wrong offset!");
static_assert(offsetof(BP_GameState_TomatoFight_C_ExecuteUbergraph_BP_GameState_TomatoFight, K2Node_CreateDelegate_OutputDelegate) == 0x000454, "Member 'BP_GameState_TomatoFight_C_ExecuteUbergraph_BP_GameState_TomatoFight::K2Node_CreateDelegate_OutputDelegate' has a wrong offset!");
static_assert(offsetof(BP_GameState_TomatoFight_C_ExecuteUbergraph_BP_GameState_TomatoFight, CallFunc_K2_SetTimerDelegate_ReturnValue) == 0x000468, "Member 'BP_GameState_TomatoFight_C_ExecuteUbergraph_BP_GameState_TomatoFight::CallFunc_K2_SetTimerDelegate_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_GameState_TomatoFight_C_ExecuteUbergraph_BP_GameState_TomatoFight, K2Node_CustomEvent_Sides_Switched) == 0x000470, "Member 'BP_GameState_TomatoFight_C_ExecuteUbergraph_BP_GameState_TomatoFight::K2Node_CustomEvent_Sides_Switched' has a wrong offset!");
static_assert(offsetof(BP_GameState_TomatoFight_C_ExecuteUbergraph_BP_GameState_TomatoFight, K2Node_CustomEvent_Attacker_Spawns) == 0x000478, "Member 'BP_GameState_TomatoFight_C_ExecuteUbergraph_BP_GameState_TomatoFight::K2Node_CustomEvent_Attacker_Spawns' has a wrong offset!");
static_assert(offsetof(BP_GameState_TomatoFight_C_ExecuteUbergraph_BP_GameState_TomatoFight, K2Node_CustomEvent_Defender_Spawns) == 0x000488, "Member 'BP_GameState_TomatoFight_C_ExecuteUbergraph_BP_GameState_TomatoFight::K2Node_CustomEvent_Defender_Spawns' has a wrong offset!");
static_assert(offsetof(BP_GameState_TomatoFight_C_ExecuteUbergraph_BP_GameState_TomatoFight, K2Node_CustomEvent_SelectedSettingID) == 0x000498, "Member 'BP_GameState_TomatoFight_C_ExecuteUbergraph_BP_GameState_TomatoFight::K2Node_CustomEvent_SelectedSettingID' has a wrong offset!");
static_assert(offsetof(BP_GameState_TomatoFight_C_ExecuteUbergraph_BP_GameState_TomatoFight, CallFunc_GetAllWidgetsOfClass_FoundWidgets) == 0x0004A0, "Member 'BP_GameState_TomatoFight_C_ExecuteUbergraph_BP_GameState_TomatoFight::CallFunc_GetAllWidgetsOfClass_FoundWidgets' has a wrong offset!");
static_assert(offsetof(BP_GameState_TomatoFight_C_ExecuteUbergraph_BP_GameState_TomatoFight, Temp_int_Loop_Counter_Variable_4) == 0x0004B0, "Member 'BP_GameState_TomatoFight_C_ExecuteUbergraph_BP_GameState_TomatoFight::Temp_int_Loop_Counter_Variable_4' has a wrong offset!");
static_assert(offsetof(BP_GameState_TomatoFight_C_ExecuteUbergraph_BP_GameState_TomatoFight, CallFunc_Array_Get_Item_3) == 0x0004B8, "Member 'BP_GameState_TomatoFight_C_ExecuteUbergraph_BP_GameState_TomatoFight::CallFunc_Array_Get_Item_3' has a wrong offset!");
static_assert(offsetof(BP_GameState_TomatoFight_C_ExecuteUbergraph_BP_GameState_TomatoFight, CallFunc_Less_IntInt_ReturnValue_2) == 0x0004C0, "Member 'BP_GameState_TomatoFight_C_ExecuteUbergraph_BP_GameState_TomatoFight::CallFunc_Less_IntInt_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BP_GameState_TomatoFight_C_ExecuteUbergraph_BP_GameState_TomatoFight, CallFunc_Add_IntInt_ReturnValue_4) == 0x0004C4, "Member 'BP_GameState_TomatoFight_C_ExecuteUbergraph_BP_GameState_TomatoFight::CallFunc_Add_IntInt_ReturnValue_4' has a wrong offset!");
static_assert(offsetof(BP_GameState_TomatoFight_C_ExecuteUbergraph_BP_GameState_TomatoFight, CallFunc_Array_Length_ReturnValue_3) == 0x0004C8, "Member 'BP_GameState_TomatoFight_C_ExecuteUbergraph_BP_GameState_TomatoFight::CallFunc_Array_Length_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(BP_GameState_TomatoFight_C_ExecuteUbergraph_BP_GameState_TomatoFight, CallFunc_Less_IntInt_ReturnValue_3) == 0x0004CC, "Member 'BP_GameState_TomatoFight_C_ExecuteUbergraph_BP_GameState_TomatoFight::CallFunc_Less_IntInt_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(BP_GameState_TomatoFight_C_ExecuteUbergraph_BP_GameState_TomatoFight, CallFunc_IsDedicatedServer_ReturnValue_9) == 0x0004CD, "Member 'BP_GameState_TomatoFight_C_ExecuteUbergraph_BP_GameState_TomatoFight::CallFunc_IsDedicatedServer_ReturnValue_9' has a wrong offset!");
static_assert(offsetof(BP_GameState_TomatoFight_C_ExecuteUbergraph_BP_GameState_TomatoFight, CallFunc_GetUserControllerId_ReturnValue_7) == 0x0004D0, "Member 'BP_GameState_TomatoFight_C_ExecuteUbergraph_BP_GameState_TomatoFight::CallFunc_GetUserControllerId_ReturnValue_7' has a wrong offset!");
static_assert(offsetof(BP_GameState_TomatoFight_C_ExecuteUbergraph_BP_GameState_TomatoFight, K2Node_Event_Match_Phase) == 0x0004D4, "Member 'BP_GameState_TomatoFight_C_ExecuteUbergraph_BP_GameState_TomatoFight::K2Node_Event_Match_Phase' has a wrong offset!");
static_assert(offsetof(BP_GameState_TomatoFight_C_ExecuteUbergraph_BP_GameState_TomatoFight, CallFunc_GetHumanPlayerControllerByControllerId_ReturnValue_7) == 0x0004D8, "Member 'BP_GameState_TomatoFight_C_ExecuteUbergraph_BP_GameState_TomatoFight::CallFunc_GetHumanPlayerControllerByControllerId_ReturnValue_7' has a wrong offset!");
static_assert(offsetof(BP_GameState_TomatoFight_C_ExecuteUbergraph_BP_GameState_TomatoFight, K2Node_SwitchEnum_CmpSuccess) == 0x0004E0, "Member 'BP_GameState_TomatoFight_C_ExecuteUbergraph_BP_GameState_TomatoFight::K2Node_SwitchEnum_CmpSuccess' has a wrong offset!");
static_assert(offsetof(BP_GameState_TomatoFight_C_ExecuteUbergraph_BP_GameState_TomatoFight, K2Node_DynamicCast_AsBP_Player_Controller_Tomato_Fight_8) == 0x0004E8, "Member 'BP_GameState_TomatoFight_C_ExecuteUbergraph_BP_GameState_TomatoFight::K2Node_DynamicCast_AsBP_Player_Controller_Tomato_Fight_8' has a wrong offset!");
static_assert(offsetof(BP_GameState_TomatoFight_C_ExecuteUbergraph_BP_GameState_TomatoFight, K2Node_DynamicCast_bSuccess_15) == 0x0004F0, "Member 'BP_GameState_TomatoFight_C_ExecuteUbergraph_BP_GameState_TomatoFight::K2Node_DynamicCast_bSuccess_15' has a wrong offset!");
static_assert(offsetof(BP_GameState_TomatoFight_C_ExecuteUbergraph_BP_GameState_TomatoFight, K2Node_CreateDelegate_OutputDelegate_1) == 0x0004F4, "Member 'BP_GameState_TomatoFight_C_ExecuteUbergraph_BP_GameState_TomatoFight::K2Node_CreateDelegate_OutputDelegate_1' has a wrong offset!");
static_assert(offsetof(BP_GameState_TomatoFight_C_ExecuteUbergraph_BP_GameState_TomatoFight, CallFunc_IsDedicatedServer_ReturnValue_10) == 0x000504, "Member 'BP_GameState_TomatoFight_C_ExecuteUbergraph_BP_GameState_TomatoFight::CallFunc_IsDedicatedServer_ReturnValue_10' has a wrong offset!");
static_assert(offsetof(BP_GameState_TomatoFight_C_ExecuteUbergraph_BP_GameState_TomatoFight, CallFunc_K2_SetTimerDelegate_ReturnValue_1) == 0x000508, "Member 'BP_GameState_TomatoFight_C_ExecuteUbergraph_BP_GameState_TomatoFight::CallFunc_K2_SetTimerDelegate_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_GameState_TomatoFight_C_ExecuteUbergraph_BP_GameState_TomatoFight, CallFunc_SpawnSound2D_ReturnValue) == 0x000510, "Member 'BP_GameState_TomatoFight_C_ExecuteUbergraph_BP_GameState_TomatoFight::CallFunc_SpawnSound2D_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_GameState_TomatoFight_C_ExecuteUbergraph_BP_GameState_TomatoFight, CallFunc_SpawnSound2D_ReturnValue_1) == 0x000518, "Member 'BP_GameState_TomatoFight_C_ExecuteUbergraph_BP_GameState_TomatoFight::CallFunc_SpawnSound2D_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_GameState_TomatoFight_C_ExecuteUbergraph_BP_GameState_TomatoFight, K2Node_CustomEvent_IsActive) == 0x000520, "Member 'BP_GameState_TomatoFight_C_ExecuteUbergraph_BP_GameState_TomatoFight::K2Node_CustomEvent_IsActive' has a wrong offset!");
static_assert(offsetof(BP_GameState_TomatoFight_C_ExecuteUbergraph_BP_GameState_TomatoFight, CallFunc_GetAllActorsOfClass_OutActors) == 0x000528, "Member 'BP_GameState_TomatoFight_C_ExecuteUbergraph_BP_GameState_TomatoFight::CallFunc_GetAllActorsOfClass_OutActors' has a wrong offset!");
static_assert(offsetof(BP_GameState_TomatoFight_C_ExecuteUbergraph_BP_GameState_TomatoFight, K2Node_CustomEvent_Origin) == 0x000538, "Member 'BP_GameState_TomatoFight_C_ExecuteUbergraph_BP_GameState_TomatoFight::K2Node_CustomEvent_Origin' has a wrong offset!");
static_assert(offsetof(BP_GameState_TomatoFight_C_ExecuteUbergraph_BP_GameState_TomatoFight, CallFunc_Array_Get_Item_4) == 0x000540, "Member 'BP_GameState_TomatoFight_C_ExecuteUbergraph_BP_GameState_TomatoFight::CallFunc_Array_Get_Item_4' has a wrong offset!");
static_assert(offsetof(BP_GameState_TomatoFight_C_ExecuteUbergraph_BP_GameState_TomatoFight, CallFunc_GetTransform_ReturnValue) == 0x000550, "Member 'BP_GameState_TomatoFight_C_ExecuteUbergraph_BP_GameState_TomatoFight::CallFunc_GetTransform_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_GameState_TomatoFight_C_ExecuteUbergraph_BP_GameState_TomatoFight, CallFunc_Array_Length_ReturnValue_4) == 0x000580, "Member 'BP_GameState_TomatoFight_C_ExecuteUbergraph_BP_GameState_TomatoFight::CallFunc_Array_Length_ReturnValue_4' has a wrong offset!");
static_assert(offsetof(BP_GameState_TomatoFight_C_ExecuteUbergraph_BP_GameState_TomatoFight, CallFunc_BeginDeferredActorSpawnFromClass_ReturnValue) == 0x000588, "Member 'BP_GameState_TomatoFight_C_ExecuteUbergraph_BP_GameState_TomatoFight::CallFunc_BeginDeferredActorSpawnFromClass_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_GameState_TomatoFight_C_ExecuteUbergraph_BP_GameState_TomatoFight, CallFunc_Less_IntInt_ReturnValue_4) == 0x000590, "Member 'BP_GameState_TomatoFight_C_ExecuteUbergraph_BP_GameState_TomatoFight::CallFunc_Less_IntInt_ReturnValue_4' has a wrong offset!");
static_assert(offsetof(BP_GameState_TomatoFight_C_ExecuteUbergraph_BP_GameState_TomatoFight, CallFunc_FinishSpawningActor_ReturnValue) == 0x000598, "Member 'BP_GameState_TomatoFight_C_ExecuteUbergraph_BP_GameState_TomatoFight::CallFunc_FinishSpawningActor_ReturnValue' has a wrong offset!");

// Function BP_GameState_TomatoFight.BP_GameState_TomatoFight_C.ReplaceWinnerScreen
// 0x0008 (0x0008 - 0x0000)
struct BP_GameState_TomatoFight_C_ReplaceWinnerScreen final
{
public:
	class ABP_WinnerScreen_Base_C*                Origin;                                            // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_GameState_TomatoFight_C_ReplaceWinnerScreen) == 0x000008, "Wrong alignment on BP_GameState_TomatoFight_C_ReplaceWinnerScreen");
static_assert(sizeof(BP_GameState_TomatoFight_C_ReplaceWinnerScreen) == 0x000008, "Wrong size on BP_GameState_TomatoFight_C_ReplaceWinnerScreen");
static_assert(offsetof(BP_GameState_TomatoFight_C_ReplaceWinnerScreen, Origin) == 0x000000, "Member 'BP_GameState_TomatoFight_C_ReplaceWinnerScreen::Origin' has a wrong offset!");

// Function BP_GameState_TomatoFight.BP_GameState_TomatoFight_C.Set Barricades Active State
// 0x0001 (0x0001 - 0x0000)
struct BP_GameState_TomatoFight_C_Set_Barricades_Active_State final
{
public:
	bool                                          IsActive;                                          // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_GameState_TomatoFight_C_Set_Barricades_Active_State) == 0x000001, "Wrong alignment on BP_GameState_TomatoFight_C_Set_Barricades_Active_State");
static_assert(sizeof(BP_GameState_TomatoFight_C_Set_Barricades_Active_State) == 0x000001, "Wrong size on BP_GameState_TomatoFight_C_Set_Barricades_Active_State");
static_assert(offsetof(BP_GameState_TomatoFight_C_Set_Barricades_Active_State, IsActive) == 0x000000, "Member 'BP_GameState_TomatoFight_C_Set_Barricades_Active_State::IsActive' has a wrong offset!");

// Function BP_GameState_TomatoFight.BP_GameState_TomatoFight_C.Handle Match Phase
// 0x0001 (0x0001 - 0x0000)
struct BP_GameState_TomatoFight_C_Handle_Match_Phase final
{
public:
	E_TeamsMatchPhase                             Match_Phase_0;                                     // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_GameState_TomatoFight_C_Handle_Match_Phase) == 0x000001, "Wrong alignment on BP_GameState_TomatoFight_C_Handle_Match_Phase");
static_assert(sizeof(BP_GameState_TomatoFight_C_Handle_Match_Phase) == 0x000001, "Wrong size on BP_GameState_TomatoFight_C_Handle_Match_Phase");
static_assert(offsetof(BP_GameState_TomatoFight_C_Handle_Match_Phase, Match_Phase_0) == 0x000000, "Member 'BP_GameState_TomatoFight_C_Handle_Match_Phase::Match_Phase_0' has a wrong offset!");

// Function BP_GameState_TomatoFight.BP_GameState_TomatoFight_C.Replicate Spawns
// 0x0028 (0x0028 - 0x0000)
struct BP_GameState_TomatoFight_C_Replicate_Spawns final
{
public:
	TArray<class ABP_PlayerStart_Raid_C*>         Attacker_Spawns;                                   // 0x0000(0x0010)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
	TArray<class ABP_PlayerStart_Raid_C*>         Defender_Spawns;                                   // 0x0010(0x0010)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
	int32                                         SelectedSettingID_0;                               // 0x0020(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_GameState_TomatoFight_C_Replicate_Spawns) == 0x000008, "Wrong alignment on BP_GameState_TomatoFight_C_Replicate_Spawns");
static_assert(sizeof(BP_GameState_TomatoFight_C_Replicate_Spawns) == 0x000028, "Wrong size on BP_GameState_TomatoFight_C_Replicate_Spawns");
static_assert(offsetof(BP_GameState_TomatoFight_C_Replicate_Spawns, Attacker_Spawns) == 0x000000, "Member 'BP_GameState_TomatoFight_C_Replicate_Spawns::Attacker_Spawns' has a wrong offset!");
static_assert(offsetof(BP_GameState_TomatoFight_C_Replicate_Spawns, Defender_Spawns) == 0x000010, "Member 'BP_GameState_TomatoFight_C_Replicate_Spawns::Defender_Spawns' has a wrong offset!");
static_assert(offsetof(BP_GameState_TomatoFight_C_Replicate_Spawns, SelectedSettingID_0) == 0x000020, "Member 'BP_GameState_TomatoFight_C_Replicate_Spawns::SelectedSettingID_0' has a wrong offset!");

// Function BP_GameState_TomatoFight.BP_GameState_TomatoFight_C.Set Spawn Sides Switched
// 0x0001 (0x0001 - 0x0000)
struct BP_GameState_TomatoFight_C_Set_Spawn_Sides_Switched final
{
public:
	bool                                          Sides_Switched;                                    // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_GameState_TomatoFight_C_Set_Spawn_Sides_Switched) == 0x000001, "Wrong alignment on BP_GameState_TomatoFight_C_Set_Spawn_Sides_Switched");
static_assert(sizeof(BP_GameState_TomatoFight_C_Set_Spawn_Sides_Switched) == 0x000001, "Wrong size on BP_GameState_TomatoFight_C_Set_Spawn_Sides_Switched");
static_assert(offsetof(BP_GameState_TomatoFight_C_Set_Spawn_Sides_Switched, Sides_Switched) == 0x000000, "Member 'BP_GameState_TomatoFight_C_Set_Spawn_Sides_Switched::Sides_Switched' has a wrong offset!");

// Function BP_GameState_TomatoFight.BP_GameState_TomatoFight_C.SetLoadoutStyle
// 0x0004 (0x0004 - 0x0000)
struct BP_GameState_TomatoFight_C_SetLoadoutStyle final
{
public:
	int32                                         Value;                                             // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_GameState_TomatoFight_C_SetLoadoutStyle) == 0x000004, "Wrong alignment on BP_GameState_TomatoFight_C_SetLoadoutStyle");
static_assert(sizeof(BP_GameState_TomatoFight_C_SetLoadoutStyle) == 0x000004, "Wrong size on BP_GameState_TomatoFight_C_SetLoadoutStyle");
static_assert(offsetof(BP_GameState_TomatoFight_C_SetLoadoutStyle, Value) == 0x000000, "Member 'BP_GameState_TomatoFight_C_SetLoadoutStyle::Value' has a wrong offset!");

// Function BP_GameState_TomatoFight.BP_GameState_TomatoFight_C.Objective Stage Started
// 0x0010 (0x0010 - 0x0000)
struct BP_GameState_TomatoFight_C_Objective_Stage_Started final
{
public:
	class ABP_Objective_TomatoFight_C*            Objective;                                         // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ABP_ObjectiveSpawnPoint_GunFight_C*     SpawnPoint;                                        // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_GameState_TomatoFight_C_Objective_Stage_Started) == 0x000008, "Wrong alignment on BP_GameState_TomatoFight_C_Objective_Stage_Started");
static_assert(sizeof(BP_GameState_TomatoFight_C_Objective_Stage_Started) == 0x000010, "Wrong size on BP_GameState_TomatoFight_C_Objective_Stage_Started");
static_assert(offsetof(BP_GameState_TomatoFight_C_Objective_Stage_Started, Objective) == 0x000000, "Member 'BP_GameState_TomatoFight_C_Objective_Stage_Started::Objective' has a wrong offset!");
static_assert(offsetof(BP_GameState_TomatoFight_C_Objective_Stage_Started, SpawnPoint) == 0x000008, "Member 'BP_GameState_TomatoFight_C_Objective_Stage_Started::SpawnPoint' has a wrong offset!");

// Function BP_GameState_TomatoFight.BP_GameState_TomatoFight_C.Update Survivor Count
// 0x0008 (0x0008 - 0x0000)
struct BP_GameState_TomatoFight_C_Update_Survivor_Count final
{
public:
	int32                                         Attacker_Survivors;                                // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Defender_Survivors;                                // 0x0004(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_GameState_TomatoFight_C_Update_Survivor_Count) == 0x000004, "Wrong alignment on BP_GameState_TomatoFight_C_Update_Survivor_Count");
static_assert(sizeof(BP_GameState_TomatoFight_C_Update_Survivor_Count) == 0x000008, "Wrong size on BP_GameState_TomatoFight_C_Update_Survivor_Count");
static_assert(offsetof(BP_GameState_TomatoFight_C_Update_Survivor_Count, Attacker_Survivors) == 0x000000, "Member 'BP_GameState_TomatoFight_C_Update_Survivor_Count::Attacker_Survivors' has a wrong offset!");
static_assert(offsetof(BP_GameState_TomatoFight_C_Update_Survivor_Count, Defender_Survivors) == 0x000004, "Member 'BP_GameState_TomatoFight_C_Update_Survivor_Count::Defender_Survivors' has a wrong offset!");

// Function BP_GameState_TomatoFight.BP_GameState_TomatoFight_C.Show Kill Feed
// 0x00C8 (0x00C8 - 0x0000)
struct BP_GameState_TomatoFight_C_Show_Kill_Feed final
{
public:
	struct FStruct_TVTDeathmatch_KillFeed         KillFeed;                                          // 0x0000(0x00C8)(BlueprintVisible, BlueprintReadOnly, Parm, HasGetValueTypeHash)
};
static_assert(alignof(BP_GameState_TomatoFight_C_Show_Kill_Feed) == 0x000008, "Wrong alignment on BP_GameState_TomatoFight_C_Show_Kill_Feed");
static_assert(sizeof(BP_GameState_TomatoFight_C_Show_Kill_Feed) == 0x0000C8, "Wrong size on BP_GameState_TomatoFight_C_Show_Kill_Feed");
static_assert(offsetof(BP_GameState_TomatoFight_C_Show_Kill_Feed, KillFeed) == 0x000000, "Member 'BP_GameState_TomatoFight_C_Show_Kill_Feed::KillFeed' has a wrong offset!");

// Function BP_GameState_TomatoFight.BP_GameState_TomatoFight_C.Set Round Win Reason
// 0x0010 (0x0010 - 0x0000)
struct BP_GameState_TomatoFight_C_Set_Round_Win_Reason final
{
public:
	EGunFightWinReason                            Win_Reason;                                        // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UBP_GSC_Team_Raid_C*                    Team_Who_Won;                                      // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_GameState_TomatoFight_C_Set_Round_Win_Reason) == 0x000008, "Wrong alignment on BP_GameState_TomatoFight_C_Set_Round_Win_Reason");
static_assert(sizeof(BP_GameState_TomatoFight_C_Set_Round_Win_Reason) == 0x000010, "Wrong size on BP_GameState_TomatoFight_C_Set_Round_Win_Reason");
static_assert(offsetof(BP_GameState_TomatoFight_C_Set_Round_Win_Reason, Win_Reason) == 0x000000, "Member 'BP_GameState_TomatoFight_C_Set_Round_Win_Reason::Win_Reason' has a wrong offset!");
static_assert(offsetof(BP_GameState_TomatoFight_C_Set_Round_Win_Reason, Team_Who_Won) == 0x000008, "Member 'BP_GameState_TomatoFight_C_Set_Round_Win_Reason::Team_Who_Won' has a wrong offset!");

// Function BP_GameState_TomatoFight.BP_GameState_TomatoFight_C.Players Update PreRound Time Remaining
// 0x0004 (0x0004 - 0x0000)
struct BP_GameState_TomatoFight_C_Players_Update_PreRound_Time_Remaining final
{
public:
	int32                                         Remaining_Time;                                    // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_GameState_TomatoFight_C_Players_Update_PreRound_Time_Remaining) == 0x000004, "Wrong alignment on BP_GameState_TomatoFight_C_Players_Update_PreRound_Time_Remaining");
static_assert(sizeof(BP_GameState_TomatoFight_C_Players_Update_PreRound_Time_Remaining) == 0x000004, "Wrong size on BP_GameState_TomatoFight_C_Players_Update_PreRound_Time_Remaining");
static_assert(offsetof(BP_GameState_TomatoFight_C_Players_Update_PreRound_Time_Remaining, Remaining_Time) == 0x000000, "Member 'BP_GameState_TomatoFight_C_Players_Update_PreRound_Time_Remaining::Remaining_Time' has a wrong offset!");

// Function BP_GameState_TomatoFight.BP_GameState_TomatoFight_C.Set PreRound Remaining Time
// 0x0004 (0x0004 - 0x0000)
struct BP_GameState_TomatoFight_C_Set_PreRound_Remaining_Time final
{
public:
	int32                                         Remaining_Time;                                    // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_GameState_TomatoFight_C_Set_PreRound_Remaining_Time) == 0x000004, "Wrong alignment on BP_GameState_TomatoFight_C_Set_PreRound_Remaining_Time");
static_assert(sizeof(BP_GameState_TomatoFight_C_Set_PreRound_Remaining_Time) == 0x000004, "Wrong size on BP_GameState_TomatoFight_C_Set_PreRound_Remaining_Time");
static_assert(offsetof(BP_GameState_TomatoFight_C_Set_PreRound_Remaining_Time, Remaining_Time) == 0x000000, "Member 'BP_GameState_TomatoFight_C_Set_PreRound_Remaining_Time::Remaining_Time' has a wrong offset!");

// Function BP_GameState_TomatoFight.BP_GameState_TomatoFight_C.Players Update Time Remaining
// 0x0004 (0x0004 - 0x0000)
struct BP_GameState_TomatoFight_C_Players_Update_Time_Remaining final
{
public:
	int32                                         Remaining_Time;                                    // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_GameState_TomatoFight_C_Players_Update_Time_Remaining) == 0x000004, "Wrong alignment on BP_GameState_TomatoFight_C_Players_Update_Time_Remaining");
static_assert(sizeof(BP_GameState_TomatoFight_C_Players_Update_Time_Remaining) == 0x000004, "Wrong size on BP_GameState_TomatoFight_C_Players_Update_Time_Remaining");
static_assert(offsetof(BP_GameState_TomatoFight_C_Players_Update_Time_Remaining, Remaining_Time) == 0x000000, "Member 'BP_GameState_TomatoFight_C_Players_Update_Time_Remaining::Remaining_Time' has a wrong offset!");

// Function BP_GameState_TomatoFight.BP_GameState_TomatoFight_C.Set Match Remaining Time
// 0x0004 (0x0004 - 0x0000)
struct BP_GameState_TomatoFight_C_Set_Match_Remaining_Time final
{
public:
	int32                                         Remaining_Time;                                    // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_GameState_TomatoFight_C_Set_Match_Remaining_Time) == 0x000004, "Wrong alignment on BP_GameState_TomatoFight_C_Set_Match_Remaining_Time");
static_assert(sizeof(BP_GameState_TomatoFight_C_Set_Match_Remaining_Time) == 0x000004, "Wrong size on BP_GameState_TomatoFight_C_Set_Match_Remaining_Time");
static_assert(offsetof(BP_GameState_TomatoFight_C_Set_Match_Remaining_Time, Remaining_Time) == 0x000000, "Member 'BP_GameState_TomatoFight_C_Set_Match_Remaining_Time::Remaining_Time' has a wrong offset!");

// Function BP_GameState_TomatoFight.BP_GameState_TomatoFight_C.Get Attacking Team
// 0x0048 (0x0048 - 0x0000)
struct BP_GameState_TomatoFight_C_Get_Attacking_Team final
{
public:
	class UBP_GSC_Team_Raid_C*                    Attacking_Team;                                    // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Array_Index_Variable;                     // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x000C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_D[0x3];                                        // 0x000D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class UBP_GSC_Team_C*>                 CallFunc_Get_Teams_Teams;                          // 0x0010(0x0010)(ReferenceParm, ContainsInstancedReference)
	class UBP_GSC_Team_C*                         CallFunc_Array_Get_Item;                           // 0x0020(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x0028(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2C[0x4];                                       // 0x002C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UBP_GSC_Team_Raid_C*                    K2Node_DynamicCast_AsBP_GSC_Team_Raid;             // 0x0030(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0038(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_39[0x3];                                       // 0x0039(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x003C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Is_Attacker_Is_Attacker;                  // 0x0040(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x0041(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_42[0x2];                                       // 0x0042(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x0044(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_GameState_TomatoFight_C_Get_Attacking_Team) == 0x000008, "Wrong alignment on BP_GameState_TomatoFight_C_Get_Attacking_Team");
static_assert(sizeof(BP_GameState_TomatoFight_C_Get_Attacking_Team) == 0x000048, "Wrong size on BP_GameState_TomatoFight_C_Get_Attacking_Team");
static_assert(offsetof(BP_GameState_TomatoFight_C_Get_Attacking_Team, Attacking_Team) == 0x000000, "Member 'BP_GameState_TomatoFight_C_Get_Attacking_Team::Attacking_Team' has a wrong offset!");
static_assert(offsetof(BP_GameState_TomatoFight_C_Get_Attacking_Team, Temp_int_Array_Index_Variable) == 0x000008, "Member 'BP_GameState_TomatoFight_C_Get_Attacking_Team::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(BP_GameState_TomatoFight_C_Get_Attacking_Team, CallFunc_IsValid_ReturnValue) == 0x00000C, "Member 'BP_GameState_TomatoFight_C_Get_Attacking_Team::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_GameState_TomatoFight_C_Get_Attacking_Team, CallFunc_Get_Teams_Teams) == 0x000010, "Member 'BP_GameState_TomatoFight_C_Get_Attacking_Team::CallFunc_Get_Teams_Teams' has a wrong offset!");
static_assert(offsetof(BP_GameState_TomatoFight_C_Get_Attacking_Team, CallFunc_Array_Get_Item) == 0x000020, "Member 'BP_GameState_TomatoFight_C_Get_Attacking_Team::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(BP_GameState_TomatoFight_C_Get_Attacking_Team, CallFunc_Array_Length_ReturnValue) == 0x000028, "Member 'BP_GameState_TomatoFight_C_Get_Attacking_Team::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_GameState_TomatoFight_C_Get_Attacking_Team, K2Node_DynamicCast_AsBP_GSC_Team_Raid) == 0x000030, "Member 'BP_GameState_TomatoFight_C_Get_Attacking_Team::K2Node_DynamicCast_AsBP_GSC_Team_Raid' has a wrong offset!");
static_assert(offsetof(BP_GameState_TomatoFight_C_Get_Attacking_Team, K2Node_DynamicCast_bSuccess) == 0x000038, "Member 'BP_GameState_TomatoFight_C_Get_Attacking_Team::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(BP_GameState_TomatoFight_C_Get_Attacking_Team, Temp_int_Loop_Counter_Variable) == 0x00003C, "Member 'BP_GameState_TomatoFight_C_Get_Attacking_Team::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(BP_GameState_TomatoFight_C_Get_Attacking_Team, CallFunc_Is_Attacker_Is_Attacker) == 0x000040, "Member 'BP_GameState_TomatoFight_C_Get_Attacking_Team::CallFunc_Is_Attacker_Is_Attacker' has a wrong offset!");
static_assert(offsetof(BP_GameState_TomatoFight_C_Get_Attacking_Team, CallFunc_Less_IntInt_ReturnValue) == 0x000041, "Member 'BP_GameState_TomatoFight_C_Get_Attacking_Team::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_GameState_TomatoFight_C_Get_Attacking_Team, CallFunc_Add_IntInt_ReturnValue) == 0x000044, "Member 'BP_GameState_TomatoFight_C_Get_Attacking_Team::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");

// Function BP_GameState_TomatoFight.BP_GameState_TomatoFight_C.Get Defending Team
// 0x0050 (0x0050 - 0x0000)
struct BP_GameState_TomatoFight_C_Get_Defending_Team final
{
public:
	class UBP_GSC_Team_Raid_C*                    Defending_Team;                                    // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Array_Index_Variable;                     // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x000C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_D[0x3];                                        // 0x000D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class UBP_GSC_Team_C*>                 CallFunc_Get_Teams_Teams;                          // 0x0010(0x0010)(ReferenceParm, ContainsInstancedReference)
	class UBP_GSC_Team_C*                         CallFunc_Array_Get_Item;                           // 0x0020(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x0028(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2C[0x4];                                       // 0x002C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UBP_GSC_Team_Raid_C*                    K2Node_DynamicCast_AsBP_GSC_Team_Raid;             // 0x0030(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0038(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_39[0x3];                                       // 0x0039(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x003C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x0040(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_41[0x3];                                       // 0x0041(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x0044(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Is_Attacker_Is_Attacker;                  // 0x0048(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Not_PreBool_ReturnValue;                  // 0x0049(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_GameState_TomatoFight_C_Get_Defending_Team) == 0x000008, "Wrong alignment on BP_GameState_TomatoFight_C_Get_Defending_Team");
static_assert(sizeof(BP_GameState_TomatoFight_C_Get_Defending_Team) == 0x000050, "Wrong size on BP_GameState_TomatoFight_C_Get_Defending_Team");
static_assert(offsetof(BP_GameState_TomatoFight_C_Get_Defending_Team, Defending_Team) == 0x000000, "Member 'BP_GameState_TomatoFight_C_Get_Defending_Team::Defending_Team' has a wrong offset!");
static_assert(offsetof(BP_GameState_TomatoFight_C_Get_Defending_Team, Temp_int_Array_Index_Variable) == 0x000008, "Member 'BP_GameState_TomatoFight_C_Get_Defending_Team::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(BP_GameState_TomatoFight_C_Get_Defending_Team, CallFunc_IsValid_ReturnValue) == 0x00000C, "Member 'BP_GameState_TomatoFight_C_Get_Defending_Team::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_GameState_TomatoFight_C_Get_Defending_Team, CallFunc_Get_Teams_Teams) == 0x000010, "Member 'BP_GameState_TomatoFight_C_Get_Defending_Team::CallFunc_Get_Teams_Teams' has a wrong offset!");
static_assert(offsetof(BP_GameState_TomatoFight_C_Get_Defending_Team, CallFunc_Array_Get_Item) == 0x000020, "Member 'BP_GameState_TomatoFight_C_Get_Defending_Team::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(BP_GameState_TomatoFight_C_Get_Defending_Team, CallFunc_Array_Length_ReturnValue) == 0x000028, "Member 'BP_GameState_TomatoFight_C_Get_Defending_Team::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_GameState_TomatoFight_C_Get_Defending_Team, K2Node_DynamicCast_AsBP_GSC_Team_Raid) == 0x000030, "Member 'BP_GameState_TomatoFight_C_Get_Defending_Team::K2Node_DynamicCast_AsBP_GSC_Team_Raid' has a wrong offset!");
static_assert(offsetof(BP_GameState_TomatoFight_C_Get_Defending_Team, K2Node_DynamicCast_bSuccess) == 0x000038, "Member 'BP_GameState_TomatoFight_C_Get_Defending_Team::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(BP_GameState_TomatoFight_C_Get_Defending_Team, Temp_int_Loop_Counter_Variable) == 0x00003C, "Member 'BP_GameState_TomatoFight_C_Get_Defending_Team::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(BP_GameState_TomatoFight_C_Get_Defending_Team, CallFunc_Less_IntInt_ReturnValue) == 0x000040, "Member 'BP_GameState_TomatoFight_C_Get_Defending_Team::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_GameState_TomatoFight_C_Get_Defending_Team, CallFunc_Add_IntInt_ReturnValue) == 0x000044, "Member 'BP_GameState_TomatoFight_C_Get_Defending_Team::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_GameState_TomatoFight_C_Get_Defending_Team, CallFunc_Is_Attacker_Is_Attacker) == 0x000048, "Member 'BP_GameState_TomatoFight_C_Get_Defending_Team::CallFunc_Is_Attacker_Is_Attacker' has a wrong offset!");
static_assert(offsetof(BP_GameState_TomatoFight_C_Get_Defending_Team, CallFunc_Not_PreBool_ReturnValue) == 0x000049, "Member 'BP_GameState_TomatoFight_C_Get_Defending_Team::CallFunc_Not_PreBool_ReturnValue' has a wrong offset!");

// Function BP_GameState_TomatoFight.BP_GameState_TomatoFight_C.GetWorldMinMax
// 0x0090 (0x0090 - 0x0000)
struct BP_GameState_TomatoFight_C_GetWorldMinMax final
{
public:
	struct FVector                                World_Min;                                         // 0x0000(0x000C)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                World_Max;                                         // 0x000C(0x000C)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ABP_MapCorner_C*                        CallFunc_Array_Get_Item;                           // 0x0018(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ABP_MapCorner_C*                        CallFunc_Array_Get_Item_1;                         // 0x0020(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0028(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue_1;                    // 0x0029(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_2A[0x2];                                       // 0x002A(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_K2_GetComponentLocation_ReturnValue;      // 0x002C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_K2_GetComponentLocation_ReturnValue_1;    // 0x0038(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_X;                            // 0x0044(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_Y;                            // 0x0048(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_Z;                            // 0x004C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_X_1;                          // 0x0050(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_Y_1;                          // 0x0054(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_Z_1;                          // 0x0058(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_FMin_ReturnValue;                         // 0x005C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_FMax_ReturnValue;                         // 0x0060(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_FMin_ReturnValue_1;                       // 0x0064(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_FMax_ReturnValue_1;                       // 0x0068(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_FMin_ReturnValue_2;                       // 0x006C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_FMax_ReturnValue_2;                       // 0x0070(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_MakeVector_ReturnValue;                   // 0x0074(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_MakeVector_ReturnValue_1;                 // 0x0080(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_GameState_TomatoFight_C_GetWorldMinMax) == 0x000008, "Wrong alignment on BP_GameState_TomatoFight_C_GetWorldMinMax");
static_assert(sizeof(BP_GameState_TomatoFight_C_GetWorldMinMax) == 0x000090, "Wrong size on BP_GameState_TomatoFight_C_GetWorldMinMax");
static_assert(offsetof(BP_GameState_TomatoFight_C_GetWorldMinMax, World_Min) == 0x000000, "Member 'BP_GameState_TomatoFight_C_GetWorldMinMax::World_Min' has a wrong offset!");
static_assert(offsetof(BP_GameState_TomatoFight_C_GetWorldMinMax, World_Max) == 0x00000C, "Member 'BP_GameState_TomatoFight_C_GetWorldMinMax::World_Max' has a wrong offset!");
static_assert(offsetof(BP_GameState_TomatoFight_C_GetWorldMinMax, CallFunc_Array_Get_Item) == 0x000018, "Member 'BP_GameState_TomatoFight_C_GetWorldMinMax::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(BP_GameState_TomatoFight_C_GetWorldMinMax, CallFunc_Array_Get_Item_1) == 0x000020, "Member 'BP_GameState_TomatoFight_C_GetWorldMinMax::CallFunc_Array_Get_Item_1' has a wrong offset!");
static_assert(offsetof(BP_GameState_TomatoFight_C_GetWorldMinMax, CallFunc_IsValid_ReturnValue) == 0x000028, "Member 'BP_GameState_TomatoFight_C_GetWorldMinMax::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_GameState_TomatoFight_C_GetWorldMinMax, CallFunc_IsValid_ReturnValue_1) == 0x000029, "Member 'BP_GameState_TomatoFight_C_GetWorldMinMax::CallFunc_IsValid_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_GameState_TomatoFight_C_GetWorldMinMax, CallFunc_K2_GetComponentLocation_ReturnValue) == 0x00002C, "Member 'BP_GameState_TomatoFight_C_GetWorldMinMax::CallFunc_K2_GetComponentLocation_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_GameState_TomatoFight_C_GetWorldMinMax, CallFunc_K2_GetComponentLocation_ReturnValue_1) == 0x000038, "Member 'BP_GameState_TomatoFight_C_GetWorldMinMax::CallFunc_K2_GetComponentLocation_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_GameState_TomatoFight_C_GetWorldMinMax, CallFunc_BreakVector_X) == 0x000044, "Member 'BP_GameState_TomatoFight_C_GetWorldMinMax::CallFunc_BreakVector_X' has a wrong offset!");
static_assert(offsetof(BP_GameState_TomatoFight_C_GetWorldMinMax, CallFunc_BreakVector_Y) == 0x000048, "Member 'BP_GameState_TomatoFight_C_GetWorldMinMax::CallFunc_BreakVector_Y' has a wrong offset!");
static_assert(offsetof(BP_GameState_TomatoFight_C_GetWorldMinMax, CallFunc_BreakVector_Z) == 0x00004C, "Member 'BP_GameState_TomatoFight_C_GetWorldMinMax::CallFunc_BreakVector_Z' has a wrong offset!");
static_assert(offsetof(BP_GameState_TomatoFight_C_GetWorldMinMax, CallFunc_BreakVector_X_1) == 0x000050, "Member 'BP_GameState_TomatoFight_C_GetWorldMinMax::CallFunc_BreakVector_X_1' has a wrong offset!");
static_assert(offsetof(BP_GameState_TomatoFight_C_GetWorldMinMax, CallFunc_BreakVector_Y_1) == 0x000054, "Member 'BP_GameState_TomatoFight_C_GetWorldMinMax::CallFunc_BreakVector_Y_1' has a wrong offset!");
static_assert(offsetof(BP_GameState_TomatoFight_C_GetWorldMinMax, CallFunc_BreakVector_Z_1) == 0x000058, "Member 'BP_GameState_TomatoFight_C_GetWorldMinMax::CallFunc_BreakVector_Z_1' has a wrong offset!");
static_assert(offsetof(BP_GameState_TomatoFight_C_GetWorldMinMax, CallFunc_FMin_ReturnValue) == 0x00005C, "Member 'BP_GameState_TomatoFight_C_GetWorldMinMax::CallFunc_FMin_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_GameState_TomatoFight_C_GetWorldMinMax, CallFunc_FMax_ReturnValue) == 0x000060, "Member 'BP_GameState_TomatoFight_C_GetWorldMinMax::CallFunc_FMax_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_GameState_TomatoFight_C_GetWorldMinMax, CallFunc_FMin_ReturnValue_1) == 0x000064, "Member 'BP_GameState_TomatoFight_C_GetWorldMinMax::CallFunc_FMin_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_GameState_TomatoFight_C_GetWorldMinMax, CallFunc_FMax_ReturnValue_1) == 0x000068, "Member 'BP_GameState_TomatoFight_C_GetWorldMinMax::CallFunc_FMax_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_GameState_TomatoFight_C_GetWorldMinMax, CallFunc_FMin_ReturnValue_2) == 0x00006C, "Member 'BP_GameState_TomatoFight_C_GetWorldMinMax::CallFunc_FMin_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BP_GameState_TomatoFight_C_GetWorldMinMax, CallFunc_FMax_ReturnValue_2) == 0x000070, "Member 'BP_GameState_TomatoFight_C_GetWorldMinMax::CallFunc_FMax_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BP_GameState_TomatoFight_C_GetWorldMinMax, CallFunc_MakeVector_ReturnValue) == 0x000074, "Member 'BP_GameState_TomatoFight_C_GetWorldMinMax::CallFunc_MakeVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_GameState_TomatoFight_C_GetWorldMinMax, CallFunc_MakeVector_ReturnValue_1) == 0x000080, "Member 'BP_GameState_TomatoFight_C_GetWorldMinMax::CallFunc_MakeVector_ReturnValue_1' has a wrong offset!");

// Function BP_GameState_TomatoFight.BP_GameState_TomatoFight_C.Check Remaining Time Sound Cues
// 0x0007 (0x0007 - 0x0000)
struct BP_GameState_TomatoFight_C_Check_Remaining_Time_Sound_Cues final
{
public:
	bool                                          CallFunc_Not_PreBool_ReturnValue;                  // 0x0000(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_LessEqual_IntInt_ReturnValue;             // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanAND_ReturnValue;                   // 0x0002(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Not_PreBool_ReturnValue_1;                // 0x0003(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_LessEqual_IntInt_ReturnValue_1;           // 0x0004(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanAND_ReturnValue_1;                 // 0x0005(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanAND_ReturnValue_2;                 // 0x0006(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_GameState_TomatoFight_C_Check_Remaining_Time_Sound_Cues) == 0x000001, "Wrong alignment on BP_GameState_TomatoFight_C_Check_Remaining_Time_Sound_Cues");
static_assert(sizeof(BP_GameState_TomatoFight_C_Check_Remaining_Time_Sound_Cues) == 0x000007, "Wrong size on BP_GameState_TomatoFight_C_Check_Remaining_Time_Sound_Cues");
static_assert(offsetof(BP_GameState_TomatoFight_C_Check_Remaining_Time_Sound_Cues, CallFunc_Not_PreBool_ReturnValue) == 0x000000, "Member 'BP_GameState_TomatoFight_C_Check_Remaining_Time_Sound_Cues::CallFunc_Not_PreBool_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_GameState_TomatoFight_C_Check_Remaining_Time_Sound_Cues, CallFunc_LessEqual_IntInt_ReturnValue) == 0x000001, "Member 'BP_GameState_TomatoFight_C_Check_Remaining_Time_Sound_Cues::CallFunc_LessEqual_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_GameState_TomatoFight_C_Check_Remaining_Time_Sound_Cues, CallFunc_BooleanAND_ReturnValue) == 0x000002, "Member 'BP_GameState_TomatoFight_C_Check_Remaining_Time_Sound_Cues::CallFunc_BooleanAND_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_GameState_TomatoFight_C_Check_Remaining_Time_Sound_Cues, CallFunc_Not_PreBool_ReturnValue_1) == 0x000003, "Member 'BP_GameState_TomatoFight_C_Check_Remaining_Time_Sound_Cues::CallFunc_Not_PreBool_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_GameState_TomatoFight_C_Check_Remaining_Time_Sound_Cues, CallFunc_LessEqual_IntInt_ReturnValue_1) == 0x000004, "Member 'BP_GameState_TomatoFight_C_Check_Remaining_Time_Sound_Cues::CallFunc_LessEqual_IntInt_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_GameState_TomatoFight_C_Check_Remaining_Time_Sound_Cues, CallFunc_BooleanAND_ReturnValue_1) == 0x000005, "Member 'BP_GameState_TomatoFight_C_Check_Remaining_Time_Sound_Cues::CallFunc_BooleanAND_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_GameState_TomatoFight_C_Check_Remaining_Time_Sound_Cues, CallFunc_BooleanAND_ReturnValue_2) == 0x000006, "Member 'BP_GameState_TomatoFight_C_Check_Remaining_Time_Sound_Cues::CallFunc_BooleanAND_ReturnValue_2' has a wrong offset!");

// Function BP_GameState_TomatoFight.BP_GameState_TomatoFight_C.Get Statistics
// 0x00A8 (0x00A8 - 0x0000)
struct BP_GameState_TomatoFight_C_Get_Statistics final
{
public:
	TArray<struct FStruct_GunFightStatistics>     Statistics;                                        // 0x0000(0x0010)(Parm, OutParm)
	TArray<struct FStruct_GunFightStatistics>     Stats;                                             // 0x0010(0x0010)(Edit, BlueprintVisible)
	int32                                         Temp_int_Array_Index_Variable;                     // 0x0020(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x0024(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x0028(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2C[0x4];                                       // 0x002C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class APlayerState*                           CallFunc_Array_Get_Item;                           // 0x0030(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x0038(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3C[0x4];                                       // 0x003C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class ABP_PlayerState_TomatoFight_C*          K2Node_DynamicCast_AsBP_Player_State_Tomato_Fight; // 0x0040(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0048(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x0049(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_4A[0x6];                                       // 0x004A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	struct FStruct_GunFightStatistics             CallFunc_GetStatisticGunFight_Statistic;           // 0x0050(0x0050)(HasGetValueTypeHash)
	int32                                         CallFunc_Array_Add_ReturnValue;                    // 0x00A0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_GameState_TomatoFight_C_Get_Statistics) == 0x000008, "Wrong alignment on BP_GameState_TomatoFight_C_Get_Statistics");
static_assert(sizeof(BP_GameState_TomatoFight_C_Get_Statistics) == 0x0000A8, "Wrong size on BP_GameState_TomatoFight_C_Get_Statistics");
static_assert(offsetof(BP_GameState_TomatoFight_C_Get_Statistics, Statistics) == 0x000000, "Member 'BP_GameState_TomatoFight_C_Get_Statistics::Statistics' has a wrong offset!");
static_assert(offsetof(BP_GameState_TomatoFight_C_Get_Statistics, Stats) == 0x000010, "Member 'BP_GameState_TomatoFight_C_Get_Statistics::Stats' has a wrong offset!");
static_assert(offsetof(BP_GameState_TomatoFight_C_Get_Statistics, Temp_int_Array_Index_Variable) == 0x000020, "Member 'BP_GameState_TomatoFight_C_Get_Statistics::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(BP_GameState_TomatoFight_C_Get_Statistics, Temp_int_Loop_Counter_Variable) == 0x000024, "Member 'BP_GameState_TomatoFight_C_Get_Statistics::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(BP_GameState_TomatoFight_C_Get_Statistics, CallFunc_Add_IntInt_ReturnValue) == 0x000028, "Member 'BP_GameState_TomatoFight_C_Get_Statistics::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_GameState_TomatoFight_C_Get_Statistics, CallFunc_Array_Get_Item) == 0x000030, "Member 'BP_GameState_TomatoFight_C_Get_Statistics::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(BP_GameState_TomatoFight_C_Get_Statistics, CallFunc_Array_Length_ReturnValue) == 0x000038, "Member 'BP_GameState_TomatoFight_C_Get_Statistics::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_GameState_TomatoFight_C_Get_Statistics, K2Node_DynamicCast_AsBP_Player_State_Tomato_Fight) == 0x000040, "Member 'BP_GameState_TomatoFight_C_Get_Statistics::K2Node_DynamicCast_AsBP_Player_State_Tomato_Fight' has a wrong offset!");
static_assert(offsetof(BP_GameState_TomatoFight_C_Get_Statistics, K2Node_DynamicCast_bSuccess) == 0x000048, "Member 'BP_GameState_TomatoFight_C_Get_Statistics::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(BP_GameState_TomatoFight_C_Get_Statistics, CallFunc_Less_IntInt_ReturnValue) == 0x000049, "Member 'BP_GameState_TomatoFight_C_Get_Statistics::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_GameState_TomatoFight_C_Get_Statistics, CallFunc_GetStatisticGunFight_Statistic) == 0x000050, "Member 'BP_GameState_TomatoFight_C_Get_Statistics::CallFunc_GetStatisticGunFight_Statistic' has a wrong offset!");
static_assert(offsetof(BP_GameState_TomatoFight_C_Get_Statistics, CallFunc_Array_Add_ReturnValue) == 0x0000A0, "Member 'BP_GameState_TomatoFight_C_Get_Statistics::CallFunc_Array_Add_ReturnValue' has a wrong offset!");

// Function BP_GameState_TomatoFight.BP_GameState_TomatoFight_C.Get Attacker Statistics
// 0x00B8 (0x00B8 - 0x0000)
struct BP_GameState_TomatoFight_C_Get_Attacker_Statistics final
{
public:
	TArray<struct FStruct_GunFightStatistics>     Statistics;                                        // 0x0000(0x0010)(Parm, OutParm)
	TArray<struct FStruct_GunFightStatistics>     Stats;                                             // 0x0010(0x0010)(Edit, BlueprintVisible)
	int32                                         Temp_int_Array_Index_Variable;                     // 0x0020(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x0024(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x0028(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2C[0x4];                                       // 0x002C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class APlayerState*                           CallFunc_Array_Get_Item;                           // 0x0030(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x0038(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3C[0x4];                                       // 0x003C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class ABP_PlayerState_TomatoFight_C*          K2Node_DynamicCast_AsBP_Player_State_Tomato_Fight; // 0x0040(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0048(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x0049(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_4A[0x6];                                       // 0x004A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	struct FStruct_GunFightStatistics             CallFunc_GetStatisticGunFight_Statistic;           // 0x0050(0x0050)(HasGetValueTypeHash)
	int32                                         CallFunc_Array_Add_ReturnValue;                    // 0x00A0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_A4[0x4];                                       // 0x00A4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UBP_GSC_Team_Raid_C*                    K2Node_DynamicCast_AsBP_GSC_Team_Raid;             // 0x00A8(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess_1;                     // 0x00B0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Is_Attacker_Is_Attacker;                  // 0x00B1(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_GameState_TomatoFight_C_Get_Attacker_Statistics) == 0x000008, "Wrong alignment on BP_GameState_TomatoFight_C_Get_Attacker_Statistics");
static_assert(sizeof(BP_GameState_TomatoFight_C_Get_Attacker_Statistics) == 0x0000B8, "Wrong size on BP_GameState_TomatoFight_C_Get_Attacker_Statistics");
static_assert(offsetof(BP_GameState_TomatoFight_C_Get_Attacker_Statistics, Statistics) == 0x000000, "Member 'BP_GameState_TomatoFight_C_Get_Attacker_Statistics::Statistics' has a wrong offset!");
static_assert(offsetof(BP_GameState_TomatoFight_C_Get_Attacker_Statistics, Stats) == 0x000010, "Member 'BP_GameState_TomatoFight_C_Get_Attacker_Statistics::Stats' has a wrong offset!");
static_assert(offsetof(BP_GameState_TomatoFight_C_Get_Attacker_Statistics, Temp_int_Array_Index_Variable) == 0x000020, "Member 'BP_GameState_TomatoFight_C_Get_Attacker_Statistics::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(BP_GameState_TomatoFight_C_Get_Attacker_Statistics, Temp_int_Loop_Counter_Variable) == 0x000024, "Member 'BP_GameState_TomatoFight_C_Get_Attacker_Statistics::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(BP_GameState_TomatoFight_C_Get_Attacker_Statistics, CallFunc_Add_IntInt_ReturnValue) == 0x000028, "Member 'BP_GameState_TomatoFight_C_Get_Attacker_Statistics::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_GameState_TomatoFight_C_Get_Attacker_Statistics, CallFunc_Array_Get_Item) == 0x000030, "Member 'BP_GameState_TomatoFight_C_Get_Attacker_Statistics::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(BP_GameState_TomatoFight_C_Get_Attacker_Statistics, CallFunc_Array_Length_ReturnValue) == 0x000038, "Member 'BP_GameState_TomatoFight_C_Get_Attacker_Statistics::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_GameState_TomatoFight_C_Get_Attacker_Statistics, K2Node_DynamicCast_AsBP_Player_State_Tomato_Fight) == 0x000040, "Member 'BP_GameState_TomatoFight_C_Get_Attacker_Statistics::K2Node_DynamicCast_AsBP_Player_State_Tomato_Fight' has a wrong offset!");
static_assert(offsetof(BP_GameState_TomatoFight_C_Get_Attacker_Statistics, K2Node_DynamicCast_bSuccess) == 0x000048, "Member 'BP_GameState_TomatoFight_C_Get_Attacker_Statistics::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(BP_GameState_TomatoFight_C_Get_Attacker_Statistics, CallFunc_Less_IntInt_ReturnValue) == 0x000049, "Member 'BP_GameState_TomatoFight_C_Get_Attacker_Statistics::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_GameState_TomatoFight_C_Get_Attacker_Statistics, CallFunc_GetStatisticGunFight_Statistic) == 0x000050, "Member 'BP_GameState_TomatoFight_C_Get_Attacker_Statistics::CallFunc_GetStatisticGunFight_Statistic' has a wrong offset!");
static_assert(offsetof(BP_GameState_TomatoFight_C_Get_Attacker_Statistics, CallFunc_Array_Add_ReturnValue) == 0x0000A0, "Member 'BP_GameState_TomatoFight_C_Get_Attacker_Statistics::CallFunc_Array_Add_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_GameState_TomatoFight_C_Get_Attacker_Statistics, K2Node_DynamicCast_AsBP_GSC_Team_Raid) == 0x0000A8, "Member 'BP_GameState_TomatoFight_C_Get_Attacker_Statistics::K2Node_DynamicCast_AsBP_GSC_Team_Raid' has a wrong offset!");
static_assert(offsetof(BP_GameState_TomatoFight_C_Get_Attacker_Statistics, K2Node_DynamicCast_bSuccess_1) == 0x0000B0, "Member 'BP_GameState_TomatoFight_C_Get_Attacker_Statistics::K2Node_DynamicCast_bSuccess_1' has a wrong offset!");
static_assert(offsetof(BP_GameState_TomatoFight_C_Get_Attacker_Statistics, CallFunc_Is_Attacker_Is_Attacker) == 0x0000B1, "Member 'BP_GameState_TomatoFight_C_Get_Attacker_Statistics::CallFunc_Is_Attacker_Is_Attacker' has a wrong offset!");

// Function BP_GameState_TomatoFight.BP_GameState_TomatoFight_C.Get Defender Statistics
// 0x00B8 (0x00B8 - 0x0000)
struct BP_GameState_TomatoFight_C_Get_Defender_Statistics final
{
public:
	TArray<struct FStruct_GunFightStatistics>     Statistics;                                        // 0x0000(0x0010)(Parm, OutParm)
	TArray<struct FStruct_GunFightStatistics>     Stats;                                             // 0x0010(0x0010)(Edit, BlueprintVisible)
	int32                                         Temp_int_Array_Index_Variable;                     // 0x0020(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x0024(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x0028(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2C[0x4];                                       // 0x002C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class APlayerState*                           CallFunc_Array_Get_Item;                           // 0x0030(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x0038(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3C[0x4];                                       // 0x003C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class ABP_PlayerState_TomatoFight_C*          K2Node_DynamicCast_AsBP_Player_State_Tomato_Fight; // 0x0040(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0048(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x0049(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_4A[0x6];                                       // 0x004A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	struct FStruct_GunFightStatistics             CallFunc_GetStatisticGunFight_Statistic;           // 0x0050(0x0050)(HasGetValueTypeHash)
	int32                                         CallFunc_Array_Add_ReturnValue;                    // 0x00A0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_A4[0x4];                                       // 0x00A4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UBP_GSC_Team_Raid_C*                    K2Node_DynamicCast_AsBP_GSC_Team_Raid;             // 0x00A8(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess_1;                     // 0x00B0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Is_Attacker_Is_Attacker;                  // 0x00B1(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_GameState_TomatoFight_C_Get_Defender_Statistics) == 0x000008, "Wrong alignment on BP_GameState_TomatoFight_C_Get_Defender_Statistics");
static_assert(sizeof(BP_GameState_TomatoFight_C_Get_Defender_Statistics) == 0x0000B8, "Wrong size on BP_GameState_TomatoFight_C_Get_Defender_Statistics");
static_assert(offsetof(BP_GameState_TomatoFight_C_Get_Defender_Statistics, Statistics) == 0x000000, "Member 'BP_GameState_TomatoFight_C_Get_Defender_Statistics::Statistics' has a wrong offset!");
static_assert(offsetof(BP_GameState_TomatoFight_C_Get_Defender_Statistics, Stats) == 0x000010, "Member 'BP_GameState_TomatoFight_C_Get_Defender_Statistics::Stats' has a wrong offset!");
static_assert(offsetof(BP_GameState_TomatoFight_C_Get_Defender_Statistics, Temp_int_Array_Index_Variable) == 0x000020, "Member 'BP_GameState_TomatoFight_C_Get_Defender_Statistics::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(BP_GameState_TomatoFight_C_Get_Defender_Statistics, Temp_int_Loop_Counter_Variable) == 0x000024, "Member 'BP_GameState_TomatoFight_C_Get_Defender_Statistics::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(BP_GameState_TomatoFight_C_Get_Defender_Statistics, CallFunc_Add_IntInt_ReturnValue) == 0x000028, "Member 'BP_GameState_TomatoFight_C_Get_Defender_Statistics::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_GameState_TomatoFight_C_Get_Defender_Statistics, CallFunc_Array_Get_Item) == 0x000030, "Member 'BP_GameState_TomatoFight_C_Get_Defender_Statistics::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(BP_GameState_TomatoFight_C_Get_Defender_Statistics, CallFunc_Array_Length_ReturnValue) == 0x000038, "Member 'BP_GameState_TomatoFight_C_Get_Defender_Statistics::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_GameState_TomatoFight_C_Get_Defender_Statistics, K2Node_DynamicCast_AsBP_Player_State_Tomato_Fight) == 0x000040, "Member 'BP_GameState_TomatoFight_C_Get_Defender_Statistics::K2Node_DynamicCast_AsBP_Player_State_Tomato_Fight' has a wrong offset!");
static_assert(offsetof(BP_GameState_TomatoFight_C_Get_Defender_Statistics, K2Node_DynamicCast_bSuccess) == 0x000048, "Member 'BP_GameState_TomatoFight_C_Get_Defender_Statistics::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(BP_GameState_TomatoFight_C_Get_Defender_Statistics, CallFunc_Less_IntInt_ReturnValue) == 0x000049, "Member 'BP_GameState_TomatoFight_C_Get_Defender_Statistics::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_GameState_TomatoFight_C_Get_Defender_Statistics, CallFunc_GetStatisticGunFight_Statistic) == 0x000050, "Member 'BP_GameState_TomatoFight_C_Get_Defender_Statistics::CallFunc_GetStatisticGunFight_Statistic' has a wrong offset!");
static_assert(offsetof(BP_GameState_TomatoFight_C_Get_Defender_Statistics, CallFunc_Array_Add_ReturnValue) == 0x0000A0, "Member 'BP_GameState_TomatoFight_C_Get_Defender_Statistics::CallFunc_Array_Add_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_GameState_TomatoFight_C_Get_Defender_Statistics, K2Node_DynamicCast_AsBP_GSC_Team_Raid) == 0x0000A8, "Member 'BP_GameState_TomatoFight_C_Get_Defender_Statistics::K2Node_DynamicCast_AsBP_GSC_Team_Raid' has a wrong offset!");
static_assert(offsetof(BP_GameState_TomatoFight_C_Get_Defender_Statistics, K2Node_DynamicCast_bSuccess_1) == 0x0000B0, "Member 'BP_GameState_TomatoFight_C_Get_Defender_Statistics::K2Node_DynamicCast_bSuccess_1' has a wrong offset!");
static_assert(offsetof(BP_GameState_TomatoFight_C_Get_Defender_Statistics, CallFunc_Is_Attacker_Is_Attacker) == 0x0000B1, "Member 'BP_GameState_TomatoFight_C_Get_Defender_Statistics::CallFunc_Is_Attacker_Is_Attacker' has a wrong offset!");

// Function BP_GameState_TomatoFight.BP_GameState_TomatoFight_C.Find Player Start Positions
// 0x0058 (0x0058 - 0x0000)
struct BP_GameState_TomatoFight_C_Find_Player_Start_Positions final
{
public:
	int32                                         SettingID;                                         // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Array_Index_Variable;                     // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x000C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AGameModeBase*                          CallFunc_GetGameMode_ReturnValue;                  // 0x0010(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<class ABP_PlayerStart_Raid_C*>         CallFunc_GetAllActorsOfClass_OutActors;            // 0x0018(0x0010)(ReferenceParm)
	class ABP_GameMode_TomatoFight_C*             K2Node_DynamicCast_AsBP_Game_Mode_Tomato_Fight;    // 0x0028(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0030(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_31[0x7];                                       // 0x0031(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class ABP_PlayerStart_Raid_C*                 CallFunc_Array_Get_Item;                           // 0x0038(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Add_ReturnValue;                    // 0x0040(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Add_ReturnValue_1;                  // 0x0044(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_IntInt_ReturnValue;            // 0x0048(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_49[0x3];                                       // 0x0049(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x004C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x0050(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_GameState_TomatoFight_C_Find_Player_Start_Positions) == 0x000008, "Wrong alignment on BP_GameState_TomatoFight_C_Find_Player_Start_Positions");
static_assert(sizeof(BP_GameState_TomatoFight_C_Find_Player_Start_Positions) == 0x000058, "Wrong size on BP_GameState_TomatoFight_C_Find_Player_Start_Positions");
static_assert(offsetof(BP_GameState_TomatoFight_C_Find_Player_Start_Positions, SettingID) == 0x000000, "Member 'BP_GameState_TomatoFight_C_Find_Player_Start_Positions::SettingID' has a wrong offset!");
static_assert(offsetof(BP_GameState_TomatoFight_C_Find_Player_Start_Positions, Temp_int_Array_Index_Variable) == 0x000004, "Member 'BP_GameState_TomatoFight_C_Find_Player_Start_Positions::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(BP_GameState_TomatoFight_C_Find_Player_Start_Positions, Temp_int_Loop_Counter_Variable) == 0x000008, "Member 'BP_GameState_TomatoFight_C_Find_Player_Start_Positions::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(BP_GameState_TomatoFight_C_Find_Player_Start_Positions, CallFunc_Add_IntInt_ReturnValue) == 0x00000C, "Member 'BP_GameState_TomatoFight_C_Find_Player_Start_Positions::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_GameState_TomatoFight_C_Find_Player_Start_Positions, CallFunc_GetGameMode_ReturnValue) == 0x000010, "Member 'BP_GameState_TomatoFight_C_Find_Player_Start_Positions::CallFunc_GetGameMode_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_GameState_TomatoFight_C_Find_Player_Start_Positions, CallFunc_GetAllActorsOfClass_OutActors) == 0x000018, "Member 'BP_GameState_TomatoFight_C_Find_Player_Start_Positions::CallFunc_GetAllActorsOfClass_OutActors' has a wrong offset!");
static_assert(offsetof(BP_GameState_TomatoFight_C_Find_Player_Start_Positions, K2Node_DynamicCast_AsBP_Game_Mode_Tomato_Fight) == 0x000028, "Member 'BP_GameState_TomatoFight_C_Find_Player_Start_Positions::K2Node_DynamicCast_AsBP_Game_Mode_Tomato_Fight' has a wrong offset!");
static_assert(offsetof(BP_GameState_TomatoFight_C_Find_Player_Start_Positions, K2Node_DynamicCast_bSuccess) == 0x000030, "Member 'BP_GameState_TomatoFight_C_Find_Player_Start_Positions::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(BP_GameState_TomatoFight_C_Find_Player_Start_Positions, CallFunc_Array_Get_Item) == 0x000038, "Member 'BP_GameState_TomatoFight_C_Find_Player_Start_Positions::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(BP_GameState_TomatoFight_C_Find_Player_Start_Positions, CallFunc_Array_Add_ReturnValue) == 0x000040, "Member 'BP_GameState_TomatoFight_C_Find_Player_Start_Positions::CallFunc_Array_Add_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_GameState_TomatoFight_C_Find_Player_Start_Positions, CallFunc_Array_Add_ReturnValue_1) == 0x000044, "Member 'BP_GameState_TomatoFight_C_Find_Player_Start_Positions::CallFunc_Array_Add_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_GameState_TomatoFight_C_Find_Player_Start_Positions, CallFunc_EqualEqual_IntInt_ReturnValue) == 0x000048, "Member 'BP_GameState_TomatoFight_C_Find_Player_Start_Positions::CallFunc_EqualEqual_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_GameState_TomatoFight_C_Find_Player_Start_Positions, CallFunc_Array_Length_ReturnValue) == 0x00004C, "Member 'BP_GameState_TomatoFight_C_Find_Player_Start_Positions::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_GameState_TomatoFight_C_Find_Player_Start_Positions, CallFunc_Less_IntInt_ReturnValue) == 0x000050, "Member 'BP_GameState_TomatoFight_C_Find_Player_Start_Positions::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");

// Function BP_GameState_TomatoFight.BP_GameState_TomatoFight_C.Get Winning and Losing Teams
// 0x0058 (0x0058 - 0x0000)
struct BP_GameState_TomatoFight_C_Get_Winning_and_Losing_Teams final
{
public:
	bool                                          Winner_Found;                                      // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UBP_GSC_Team_Raid_C*                    Winning_Team;                                      // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UBP_GSC_Team_Raid_C*                    Losing_Team;                                       // 0x0010(0x0008)(Parm, OutParm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          TeamsAreEqual;                                     // 0x0018(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          _TeamsAreEqual;                                    // 0x0019(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_1A[0x2];                                       // 0x001A(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Attacking_Team_Rounds_Won;                         // 0x001C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UBP_GSC_Team_Raid_C*                    _Losing_Team;                                      // 0x0020(0x0008)(Edit, BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UBP_GSC_Team_Raid_C*                    _Winning_Team;                                     // 0x0028(0x0008)(Edit, BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          _Winner_Found;                                     // 0x0030(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_31[0x7];                                       // 0x0031(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UBP_GSC_Team_Raid_C*                    CallFunc_Get_Defending_Team_Defending_Team;        // 0x0038(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_IntInt_ReturnValue;            // 0x0040(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0041(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x0042(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_GreaterEqual_IntInt_ReturnValue;          // 0x0043(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_44[0x4];                                       // 0x0044(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UBP_GSC_Team_Raid_C*                    CallFunc_Get_Attacking_Team_Attacking_Team;        // 0x0048(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanOR_ReturnValue;                    // 0x0050(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue_1;                    // 0x0051(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_GreaterEqual_IntInt_ReturnValue_1;        // 0x0052(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_GameState_TomatoFight_C_Get_Winning_and_Losing_Teams) == 0x000008, "Wrong alignment on BP_GameState_TomatoFight_C_Get_Winning_and_Losing_Teams");
static_assert(sizeof(BP_GameState_TomatoFight_C_Get_Winning_and_Losing_Teams) == 0x000058, "Wrong size on BP_GameState_TomatoFight_C_Get_Winning_and_Losing_Teams");
static_assert(offsetof(BP_GameState_TomatoFight_C_Get_Winning_and_Losing_Teams, Winner_Found) == 0x000000, "Member 'BP_GameState_TomatoFight_C_Get_Winning_and_Losing_Teams::Winner_Found' has a wrong offset!");
static_assert(offsetof(BP_GameState_TomatoFight_C_Get_Winning_and_Losing_Teams, Winning_Team) == 0x000008, "Member 'BP_GameState_TomatoFight_C_Get_Winning_and_Losing_Teams::Winning_Team' has a wrong offset!");
static_assert(offsetof(BP_GameState_TomatoFight_C_Get_Winning_and_Losing_Teams, Losing_Team) == 0x000010, "Member 'BP_GameState_TomatoFight_C_Get_Winning_and_Losing_Teams::Losing_Team' has a wrong offset!");
static_assert(offsetof(BP_GameState_TomatoFight_C_Get_Winning_and_Losing_Teams, TeamsAreEqual) == 0x000018, "Member 'BP_GameState_TomatoFight_C_Get_Winning_and_Losing_Teams::TeamsAreEqual' has a wrong offset!");
static_assert(offsetof(BP_GameState_TomatoFight_C_Get_Winning_and_Losing_Teams, _TeamsAreEqual) == 0x000019, "Member 'BP_GameState_TomatoFight_C_Get_Winning_and_Losing_Teams::_TeamsAreEqual' has a wrong offset!");
static_assert(offsetof(BP_GameState_TomatoFight_C_Get_Winning_and_Losing_Teams, Attacking_Team_Rounds_Won) == 0x00001C, "Member 'BP_GameState_TomatoFight_C_Get_Winning_and_Losing_Teams::Attacking_Team_Rounds_Won' has a wrong offset!");
static_assert(offsetof(BP_GameState_TomatoFight_C_Get_Winning_and_Losing_Teams, _Losing_Team) == 0x000020, "Member 'BP_GameState_TomatoFight_C_Get_Winning_and_Losing_Teams::_Losing_Team' has a wrong offset!");
static_assert(offsetof(BP_GameState_TomatoFight_C_Get_Winning_and_Losing_Teams, _Winning_Team) == 0x000028, "Member 'BP_GameState_TomatoFight_C_Get_Winning_and_Losing_Teams::_Winning_Team' has a wrong offset!");
static_assert(offsetof(BP_GameState_TomatoFight_C_Get_Winning_and_Losing_Teams, _Winner_Found) == 0x000030, "Member 'BP_GameState_TomatoFight_C_Get_Winning_and_Losing_Teams::_Winner_Found' has a wrong offset!");
static_assert(offsetof(BP_GameState_TomatoFight_C_Get_Winning_and_Losing_Teams, CallFunc_Get_Defending_Team_Defending_Team) == 0x000038, "Member 'BP_GameState_TomatoFight_C_Get_Winning_and_Losing_Teams::CallFunc_Get_Defending_Team_Defending_Team' has a wrong offset!");
static_assert(offsetof(BP_GameState_TomatoFight_C_Get_Winning_and_Losing_Teams, CallFunc_EqualEqual_IntInt_ReturnValue) == 0x000040, "Member 'BP_GameState_TomatoFight_C_Get_Winning_and_Losing_Teams::CallFunc_EqualEqual_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_GameState_TomatoFight_C_Get_Winning_and_Losing_Teams, CallFunc_IsValid_ReturnValue) == 0x000041, "Member 'BP_GameState_TomatoFight_C_Get_Winning_and_Losing_Teams::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_GameState_TomatoFight_C_Get_Winning_and_Losing_Teams, CallFunc_Less_IntInt_ReturnValue) == 0x000042, "Member 'BP_GameState_TomatoFight_C_Get_Winning_and_Losing_Teams::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_GameState_TomatoFight_C_Get_Winning_and_Losing_Teams, CallFunc_GreaterEqual_IntInt_ReturnValue) == 0x000043, "Member 'BP_GameState_TomatoFight_C_Get_Winning_and_Losing_Teams::CallFunc_GreaterEqual_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_GameState_TomatoFight_C_Get_Winning_and_Losing_Teams, CallFunc_Get_Attacking_Team_Attacking_Team) == 0x000048, "Member 'BP_GameState_TomatoFight_C_Get_Winning_and_Losing_Teams::CallFunc_Get_Attacking_Team_Attacking_Team' has a wrong offset!");
static_assert(offsetof(BP_GameState_TomatoFight_C_Get_Winning_and_Losing_Teams, CallFunc_BooleanOR_ReturnValue) == 0x000050, "Member 'BP_GameState_TomatoFight_C_Get_Winning_and_Losing_Teams::CallFunc_BooleanOR_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_GameState_TomatoFight_C_Get_Winning_and_Losing_Teams, CallFunc_IsValid_ReturnValue_1) == 0x000051, "Member 'BP_GameState_TomatoFight_C_Get_Winning_and_Losing_Teams::CallFunc_IsValid_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_GameState_TomatoFight_C_Get_Winning_and_Losing_Teams, CallFunc_GreaterEqual_IntInt_ReturnValue_1) == 0x000052, "Member 'BP_GameState_TomatoFight_C_Get_Winning_and_Losing_Teams::CallFunc_GreaterEqual_IntInt_ReturnValue_1' has a wrong offset!");

// Function BP_GameState_TomatoFight.BP_GameState_TomatoFight_C.Show End Turn Notification To Player
// 0x0268 (0x0268 - 0x0000)
struct BP_GameState_TomatoFight_C_Show_End_Turn_Notification_To_Player final
{
public:
	EGunFightWinReason                            Win_Reason;                                        // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UBP_GSC_Team_Raid_C*                    Winning_Team;                                      // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ABP_PlayerController_TomatoFight_C*     Player_Controller;                                 // 0x0010(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          PlayerWon;                                         // 0x0018(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   DefenderName;                                      // 0x0020(0x0018)(Edit, BlueprintVisible)
	class FText                                   AttackerName;                                      // 0x0038(0x0018)(Edit, BlueprintVisible)
	ERaidNotificationType                         NotificationType;                                  // 0x0050(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_51[0x7];                                       // 0x0051(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   Reason;                                            // 0x0058(0x0018)(Edit, BlueprintVisible)
	class FText                                   Title;                                             // 0x0070(0x0018)(Edit, BlueprintVisible)
	bool                                          Temp_bool_Variable;                                // 0x0088(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0089(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_8A[0x6];                                       // 0x008A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   Temp_text_Variable;                                // 0x0090(0x0018)()
	class FText                                   Temp_text_Variable_1;                              // 0x00A8(0x0018)()
	bool                                          Temp_bool_Variable_1;                              // 0x00C0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	ERaidNotificationType                         Temp_byte_Variable;                                // 0x00C1(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ERaidNotificationType                         Temp_byte_Variable_1;                              // 0x00C2(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable_2;                              // 0x00C3(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_C4[0x4];                                       // 0x00C4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   Temp_text_Variable_2;                              // 0x00C8(0x0018)()
	class FText                                   Temp_text_Variable_3;                              // 0x00E0(0x0018)()
	bool                                          Temp_bool_Variable_3;                              // 0x00F8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_F9[0x7];                                       // 0x00F9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   Temp_text_Variable_4;                              // 0x0100(0x0018)()
	class FText                                   Temp_text_Variable_5;                              // 0x0118(0x0018)()
	EGunFightWinReason                            Temp_byte_Variable_2;                              // 0x0130(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_131[0x7];                                      // 0x0131(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   Temp_text_Variable_6;                              // 0x0138(0x0018)()
	bool                                          Temp_bool_Variable_4;                              // 0x0150(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_151[0x7];                                      // 0x0151(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   Temp_text_Variable_7;                              // 0x0158(0x0018)()
	class FText                                   Temp_text_Variable_8;                              // 0x0170(0x0018)()
	bool                                          CallFunc_IsValid_ReturnValue_1;                    // 0x0188(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_189[0x7];                                      // 0x0189(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   K2Node_Select_Default;                             // 0x0190(0x0018)()
	bool                                          CallFunc_Is_Attacker_Is_Attacker;                  // 0x01A8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	ERaidNotificationType                         K2Node_Select_Default_1;                           // 0x01A9(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1AA[0x6];                                      // 0x01AA(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   K2Node_Select_Default_2;                           // 0x01B0(0x0018)()
	class FText                                   K2Node_Select_Default_3;                           // 0x01C8(0x0018)()
	class FText                                   K2Node_Select_Default_4;                           // 0x01E0(0x0018)()
	class FText                                   K2Node_Select_Default_5;                           // 0x01F8(0x0018)()
	bool                                          CallFunc_Is_Attacker_Is_Attacker_1;                // 0x0210(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_EqualEqual_BoolBool_ReturnValue;          // 0x0211(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue_2;                    // 0x0212(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_213[0x5];                                      // 0x0213(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	class UBP_GSC_Team_Raid_C*                    CallFunc_Get_Defending_Team_Defending_Team;        // 0x0218(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   CallFunc_Get_Side_Side;                            // 0x0220(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UBP_GSC_Team_Raid_C*                    CallFunc_Get_Attacking_Team_Attacking_Team;        // 0x0228(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FText                                   CallFunc_Conv_NameToText_ReturnValue;              // 0x0230(0x0018)()
	class FName                                   CallFunc_Get_Side_Side_1;                          // 0x0248(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FText                                   CallFunc_Conv_NameToText_ReturnValue_1;            // 0x0250(0x0018)()
};
static_assert(alignof(BP_GameState_TomatoFight_C_Show_End_Turn_Notification_To_Player) == 0x000008, "Wrong alignment on BP_GameState_TomatoFight_C_Show_End_Turn_Notification_To_Player");
static_assert(sizeof(BP_GameState_TomatoFight_C_Show_End_Turn_Notification_To_Player) == 0x000268, "Wrong size on BP_GameState_TomatoFight_C_Show_End_Turn_Notification_To_Player");
static_assert(offsetof(BP_GameState_TomatoFight_C_Show_End_Turn_Notification_To_Player, Win_Reason) == 0x000000, "Member 'BP_GameState_TomatoFight_C_Show_End_Turn_Notification_To_Player::Win_Reason' has a wrong offset!");
static_assert(offsetof(BP_GameState_TomatoFight_C_Show_End_Turn_Notification_To_Player, Winning_Team) == 0x000008, "Member 'BP_GameState_TomatoFight_C_Show_End_Turn_Notification_To_Player::Winning_Team' has a wrong offset!");
static_assert(offsetof(BP_GameState_TomatoFight_C_Show_End_Turn_Notification_To_Player, Player_Controller) == 0x000010, "Member 'BP_GameState_TomatoFight_C_Show_End_Turn_Notification_To_Player::Player_Controller' has a wrong offset!");
static_assert(offsetof(BP_GameState_TomatoFight_C_Show_End_Turn_Notification_To_Player, PlayerWon) == 0x000018, "Member 'BP_GameState_TomatoFight_C_Show_End_Turn_Notification_To_Player::PlayerWon' has a wrong offset!");
static_assert(offsetof(BP_GameState_TomatoFight_C_Show_End_Turn_Notification_To_Player, DefenderName) == 0x000020, "Member 'BP_GameState_TomatoFight_C_Show_End_Turn_Notification_To_Player::DefenderName' has a wrong offset!");
static_assert(offsetof(BP_GameState_TomatoFight_C_Show_End_Turn_Notification_To_Player, AttackerName) == 0x000038, "Member 'BP_GameState_TomatoFight_C_Show_End_Turn_Notification_To_Player::AttackerName' has a wrong offset!");
static_assert(offsetof(BP_GameState_TomatoFight_C_Show_End_Turn_Notification_To_Player, NotificationType) == 0x000050, "Member 'BP_GameState_TomatoFight_C_Show_End_Turn_Notification_To_Player::NotificationType' has a wrong offset!");
static_assert(offsetof(BP_GameState_TomatoFight_C_Show_End_Turn_Notification_To_Player, Reason) == 0x000058, "Member 'BP_GameState_TomatoFight_C_Show_End_Turn_Notification_To_Player::Reason' has a wrong offset!");
static_assert(offsetof(BP_GameState_TomatoFight_C_Show_End_Turn_Notification_To_Player, Title) == 0x000070, "Member 'BP_GameState_TomatoFight_C_Show_End_Turn_Notification_To_Player::Title' has a wrong offset!");
static_assert(offsetof(BP_GameState_TomatoFight_C_Show_End_Turn_Notification_To_Player, Temp_bool_Variable) == 0x000088, "Member 'BP_GameState_TomatoFight_C_Show_End_Turn_Notification_To_Player::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(BP_GameState_TomatoFight_C_Show_End_Turn_Notification_To_Player, CallFunc_IsValid_ReturnValue) == 0x000089, "Member 'BP_GameState_TomatoFight_C_Show_End_Turn_Notification_To_Player::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_GameState_TomatoFight_C_Show_End_Turn_Notification_To_Player, Temp_text_Variable) == 0x000090, "Member 'BP_GameState_TomatoFight_C_Show_End_Turn_Notification_To_Player::Temp_text_Variable' has a wrong offset!");
static_assert(offsetof(BP_GameState_TomatoFight_C_Show_End_Turn_Notification_To_Player, Temp_text_Variable_1) == 0x0000A8, "Member 'BP_GameState_TomatoFight_C_Show_End_Turn_Notification_To_Player::Temp_text_Variable_1' has a wrong offset!");
static_assert(offsetof(BP_GameState_TomatoFight_C_Show_End_Turn_Notification_To_Player, Temp_bool_Variable_1) == 0x0000C0, "Member 'BP_GameState_TomatoFight_C_Show_End_Turn_Notification_To_Player::Temp_bool_Variable_1' has a wrong offset!");
static_assert(offsetof(BP_GameState_TomatoFight_C_Show_End_Turn_Notification_To_Player, Temp_byte_Variable) == 0x0000C1, "Member 'BP_GameState_TomatoFight_C_Show_End_Turn_Notification_To_Player::Temp_byte_Variable' has a wrong offset!");
static_assert(offsetof(BP_GameState_TomatoFight_C_Show_End_Turn_Notification_To_Player, Temp_byte_Variable_1) == 0x0000C2, "Member 'BP_GameState_TomatoFight_C_Show_End_Turn_Notification_To_Player::Temp_byte_Variable_1' has a wrong offset!");
static_assert(offsetof(BP_GameState_TomatoFight_C_Show_End_Turn_Notification_To_Player, Temp_bool_Variable_2) == 0x0000C3, "Member 'BP_GameState_TomatoFight_C_Show_End_Turn_Notification_To_Player::Temp_bool_Variable_2' has a wrong offset!");
static_assert(offsetof(BP_GameState_TomatoFight_C_Show_End_Turn_Notification_To_Player, Temp_text_Variable_2) == 0x0000C8, "Member 'BP_GameState_TomatoFight_C_Show_End_Turn_Notification_To_Player::Temp_text_Variable_2' has a wrong offset!");
static_assert(offsetof(BP_GameState_TomatoFight_C_Show_End_Turn_Notification_To_Player, Temp_text_Variable_3) == 0x0000E0, "Member 'BP_GameState_TomatoFight_C_Show_End_Turn_Notification_To_Player::Temp_text_Variable_3' has a wrong offset!");
static_assert(offsetof(BP_GameState_TomatoFight_C_Show_End_Turn_Notification_To_Player, Temp_bool_Variable_3) == 0x0000F8, "Member 'BP_GameState_TomatoFight_C_Show_End_Turn_Notification_To_Player::Temp_bool_Variable_3' has a wrong offset!");
static_assert(offsetof(BP_GameState_TomatoFight_C_Show_End_Turn_Notification_To_Player, Temp_text_Variable_4) == 0x000100, "Member 'BP_GameState_TomatoFight_C_Show_End_Turn_Notification_To_Player::Temp_text_Variable_4' has a wrong offset!");
static_assert(offsetof(BP_GameState_TomatoFight_C_Show_End_Turn_Notification_To_Player, Temp_text_Variable_5) == 0x000118, "Member 'BP_GameState_TomatoFight_C_Show_End_Turn_Notification_To_Player::Temp_text_Variable_5' has a wrong offset!");
static_assert(offsetof(BP_GameState_TomatoFight_C_Show_End_Turn_Notification_To_Player, Temp_byte_Variable_2) == 0x000130, "Member 'BP_GameState_TomatoFight_C_Show_End_Turn_Notification_To_Player::Temp_byte_Variable_2' has a wrong offset!");
static_assert(offsetof(BP_GameState_TomatoFight_C_Show_End_Turn_Notification_To_Player, Temp_text_Variable_6) == 0x000138, "Member 'BP_GameState_TomatoFight_C_Show_End_Turn_Notification_To_Player::Temp_text_Variable_6' has a wrong offset!");
static_assert(offsetof(BP_GameState_TomatoFight_C_Show_End_Turn_Notification_To_Player, Temp_bool_Variable_4) == 0x000150, "Member 'BP_GameState_TomatoFight_C_Show_End_Turn_Notification_To_Player::Temp_bool_Variable_4' has a wrong offset!");
static_assert(offsetof(BP_GameState_TomatoFight_C_Show_End_Turn_Notification_To_Player, Temp_text_Variable_7) == 0x000158, "Member 'BP_GameState_TomatoFight_C_Show_End_Turn_Notification_To_Player::Temp_text_Variable_7' has a wrong offset!");
static_assert(offsetof(BP_GameState_TomatoFight_C_Show_End_Turn_Notification_To_Player, Temp_text_Variable_8) == 0x000170, "Member 'BP_GameState_TomatoFight_C_Show_End_Turn_Notification_To_Player::Temp_text_Variable_8' has a wrong offset!");
static_assert(offsetof(BP_GameState_TomatoFight_C_Show_End_Turn_Notification_To_Player, CallFunc_IsValid_ReturnValue_1) == 0x000188, "Member 'BP_GameState_TomatoFight_C_Show_End_Turn_Notification_To_Player::CallFunc_IsValid_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_GameState_TomatoFight_C_Show_End_Turn_Notification_To_Player, K2Node_Select_Default) == 0x000190, "Member 'BP_GameState_TomatoFight_C_Show_End_Turn_Notification_To_Player::K2Node_Select_Default' has a wrong offset!");
static_assert(offsetof(BP_GameState_TomatoFight_C_Show_End_Turn_Notification_To_Player, CallFunc_Is_Attacker_Is_Attacker) == 0x0001A8, "Member 'BP_GameState_TomatoFight_C_Show_End_Turn_Notification_To_Player::CallFunc_Is_Attacker_Is_Attacker' has a wrong offset!");
static_assert(offsetof(BP_GameState_TomatoFight_C_Show_End_Turn_Notification_To_Player, K2Node_Select_Default_1) == 0x0001A9, "Member 'BP_GameState_TomatoFight_C_Show_End_Turn_Notification_To_Player::K2Node_Select_Default_1' has a wrong offset!");
static_assert(offsetof(BP_GameState_TomatoFight_C_Show_End_Turn_Notification_To_Player, K2Node_Select_Default_2) == 0x0001B0, "Member 'BP_GameState_TomatoFight_C_Show_End_Turn_Notification_To_Player::K2Node_Select_Default_2' has a wrong offset!");
static_assert(offsetof(BP_GameState_TomatoFight_C_Show_End_Turn_Notification_To_Player, K2Node_Select_Default_3) == 0x0001C8, "Member 'BP_GameState_TomatoFight_C_Show_End_Turn_Notification_To_Player::K2Node_Select_Default_3' has a wrong offset!");
static_assert(offsetof(BP_GameState_TomatoFight_C_Show_End_Turn_Notification_To_Player, K2Node_Select_Default_4) == 0x0001E0, "Member 'BP_GameState_TomatoFight_C_Show_End_Turn_Notification_To_Player::K2Node_Select_Default_4' has a wrong offset!");
static_assert(offsetof(BP_GameState_TomatoFight_C_Show_End_Turn_Notification_To_Player, K2Node_Select_Default_5) == 0x0001F8, "Member 'BP_GameState_TomatoFight_C_Show_End_Turn_Notification_To_Player::K2Node_Select_Default_5' has a wrong offset!");
static_assert(offsetof(BP_GameState_TomatoFight_C_Show_End_Turn_Notification_To_Player, CallFunc_Is_Attacker_Is_Attacker_1) == 0x000210, "Member 'BP_GameState_TomatoFight_C_Show_End_Turn_Notification_To_Player::CallFunc_Is_Attacker_Is_Attacker_1' has a wrong offset!");
static_assert(offsetof(BP_GameState_TomatoFight_C_Show_End_Turn_Notification_To_Player, CallFunc_EqualEqual_BoolBool_ReturnValue) == 0x000211, "Member 'BP_GameState_TomatoFight_C_Show_End_Turn_Notification_To_Player::CallFunc_EqualEqual_BoolBool_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_GameState_TomatoFight_C_Show_End_Turn_Notification_To_Player, CallFunc_IsValid_ReturnValue_2) == 0x000212, "Member 'BP_GameState_TomatoFight_C_Show_End_Turn_Notification_To_Player::CallFunc_IsValid_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BP_GameState_TomatoFight_C_Show_End_Turn_Notification_To_Player, CallFunc_Get_Defending_Team_Defending_Team) == 0x000218, "Member 'BP_GameState_TomatoFight_C_Show_End_Turn_Notification_To_Player::CallFunc_Get_Defending_Team_Defending_Team' has a wrong offset!");
static_assert(offsetof(BP_GameState_TomatoFight_C_Show_End_Turn_Notification_To_Player, CallFunc_Get_Side_Side) == 0x000220, "Member 'BP_GameState_TomatoFight_C_Show_End_Turn_Notification_To_Player::CallFunc_Get_Side_Side' has a wrong offset!");
static_assert(offsetof(BP_GameState_TomatoFight_C_Show_End_Turn_Notification_To_Player, CallFunc_Get_Attacking_Team_Attacking_Team) == 0x000228, "Member 'BP_GameState_TomatoFight_C_Show_End_Turn_Notification_To_Player::CallFunc_Get_Attacking_Team_Attacking_Team' has a wrong offset!");
static_assert(offsetof(BP_GameState_TomatoFight_C_Show_End_Turn_Notification_To_Player, CallFunc_Conv_NameToText_ReturnValue) == 0x000230, "Member 'BP_GameState_TomatoFight_C_Show_End_Turn_Notification_To_Player::CallFunc_Conv_NameToText_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_GameState_TomatoFight_C_Show_End_Turn_Notification_To_Player, CallFunc_Get_Side_Side_1) == 0x000248, "Member 'BP_GameState_TomatoFight_C_Show_End_Turn_Notification_To_Player::CallFunc_Get_Side_Side_1' has a wrong offset!");
static_assert(offsetof(BP_GameState_TomatoFight_C_Show_End_Turn_Notification_To_Player, CallFunc_Conv_NameToText_ReturnValue_1) == 0x000250, "Member 'BP_GameState_TomatoFight_C_Show_End_Turn_Notification_To_Player::CallFunc_Conv_NameToText_ReturnValue_1' has a wrong offset!");

// Function BP_GameState_TomatoFight.BP_GameState_TomatoFight_C.Find Winner Screen
// 0x0028 (0x0028 - 0x0000)
struct BP_GameState_TomatoFight_C_Find_Winner_Screen final
{
public:
	TArray<class ABP_WinnerScreen_TomatoFight_C*> CallFunc_GetAllActorsOfClass_OutActors;            // 0x0000(0x0010)(ReferenceParm)
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class ABP_WinnerScreen_TomatoFight_C*         CallFunc_Array_Get_Item;                           // 0x0018(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Greater_IntInt_ReturnValue;               // 0x0020(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Not_PreBool_ReturnValue;                  // 0x0021(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_GameState_TomatoFight_C_Find_Winner_Screen) == 0x000008, "Wrong alignment on BP_GameState_TomatoFight_C_Find_Winner_Screen");
static_assert(sizeof(BP_GameState_TomatoFight_C_Find_Winner_Screen) == 0x000028, "Wrong size on BP_GameState_TomatoFight_C_Find_Winner_Screen");
static_assert(offsetof(BP_GameState_TomatoFight_C_Find_Winner_Screen, CallFunc_GetAllActorsOfClass_OutActors) == 0x000000, "Member 'BP_GameState_TomatoFight_C_Find_Winner_Screen::CallFunc_GetAllActorsOfClass_OutActors' has a wrong offset!");
static_assert(offsetof(BP_GameState_TomatoFight_C_Find_Winner_Screen, CallFunc_Array_Length_ReturnValue) == 0x000010, "Member 'BP_GameState_TomatoFight_C_Find_Winner_Screen::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_GameState_TomatoFight_C_Find_Winner_Screen, CallFunc_Array_Get_Item) == 0x000018, "Member 'BP_GameState_TomatoFight_C_Find_Winner_Screen::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(BP_GameState_TomatoFight_C_Find_Winner_Screen, CallFunc_Greater_IntInt_ReturnValue) == 0x000020, "Member 'BP_GameState_TomatoFight_C_Find_Winner_Screen::CallFunc_Greater_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_GameState_TomatoFight_C_Find_Winner_Screen, CallFunc_Not_PreBool_ReturnValue) == 0x000021, "Member 'BP_GameState_TomatoFight_C_Find_Winner_Screen::CallFunc_Not_PreBool_ReturnValue' has a wrong offset!");

// Function BP_GameState_TomatoFight.BP_GameState_TomatoFight_C.Display Winner Screen
// 0x0050 (0x0050 - 0x0000)
struct BP_GameState_TomatoFight_C_Display_Winner_Screen final
{
public:
	TArray<class AHumanPlayerController*>         WinningPlayers;                                    // 0x0000(0x0010)(Edit, BlueprintVisible, DisableEditOnTemplate)
	bool                                          PlayersToDisplay;                                  // 0x0010(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0011(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue_1;                    // 0x0012(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Get_Winning_and_Losing_Teams_Winner_Found; // 0x0013(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UBP_GSC_Team_Raid_C*                    CallFunc_Get_Winning_and_Losing_Teams_Winning_Team; // 0x0018(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UBP_GSC_Team_Raid_C*                    CallFunc_Get_Winning_and_Losing_Teams_Losing_Team; // 0x0020(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Get_Winning_and_Losing_Teams_TeamsAreEqual; // 0x0028(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_29[0x7];                                       // 0x0029(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class ABP_PlayerController_Teams_C*>   CallFunc_Get_Member_Controllers_Player_Controllers; // 0x0030(0x0010)(ReferenceParm)
	TArray<class ABP_PlayerController_Teams_C*>   CallFunc_Get_Member_Controllers_Player_Controllers_1; // 0x0040(0x0010)(ReferenceParm)
};
static_assert(alignof(BP_GameState_TomatoFight_C_Display_Winner_Screen) == 0x000008, "Wrong alignment on BP_GameState_TomatoFight_C_Display_Winner_Screen");
static_assert(sizeof(BP_GameState_TomatoFight_C_Display_Winner_Screen) == 0x000050, "Wrong size on BP_GameState_TomatoFight_C_Display_Winner_Screen");
static_assert(offsetof(BP_GameState_TomatoFight_C_Display_Winner_Screen, WinningPlayers) == 0x000000, "Member 'BP_GameState_TomatoFight_C_Display_Winner_Screen::WinningPlayers' has a wrong offset!");
static_assert(offsetof(BP_GameState_TomatoFight_C_Display_Winner_Screen, PlayersToDisplay) == 0x000010, "Member 'BP_GameState_TomatoFight_C_Display_Winner_Screen::PlayersToDisplay' has a wrong offset!");
static_assert(offsetof(BP_GameState_TomatoFight_C_Display_Winner_Screen, CallFunc_IsValid_ReturnValue) == 0x000011, "Member 'BP_GameState_TomatoFight_C_Display_Winner_Screen::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_GameState_TomatoFight_C_Display_Winner_Screen, CallFunc_IsValid_ReturnValue_1) == 0x000012, "Member 'BP_GameState_TomatoFight_C_Display_Winner_Screen::CallFunc_IsValid_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_GameState_TomatoFight_C_Display_Winner_Screen, CallFunc_Get_Winning_and_Losing_Teams_Winner_Found) == 0x000013, "Member 'BP_GameState_TomatoFight_C_Display_Winner_Screen::CallFunc_Get_Winning_and_Losing_Teams_Winner_Found' has a wrong offset!");
static_assert(offsetof(BP_GameState_TomatoFight_C_Display_Winner_Screen, CallFunc_Get_Winning_and_Losing_Teams_Winning_Team) == 0x000018, "Member 'BP_GameState_TomatoFight_C_Display_Winner_Screen::CallFunc_Get_Winning_and_Losing_Teams_Winning_Team' has a wrong offset!");
static_assert(offsetof(BP_GameState_TomatoFight_C_Display_Winner_Screen, CallFunc_Get_Winning_and_Losing_Teams_Losing_Team) == 0x000020, "Member 'BP_GameState_TomatoFight_C_Display_Winner_Screen::CallFunc_Get_Winning_and_Losing_Teams_Losing_Team' has a wrong offset!");
static_assert(offsetof(BP_GameState_TomatoFight_C_Display_Winner_Screen, CallFunc_Get_Winning_and_Losing_Teams_TeamsAreEqual) == 0x000028, "Member 'BP_GameState_TomatoFight_C_Display_Winner_Screen::CallFunc_Get_Winning_and_Losing_Teams_TeamsAreEqual' has a wrong offset!");
static_assert(offsetof(BP_GameState_TomatoFight_C_Display_Winner_Screen, CallFunc_Get_Member_Controllers_Player_Controllers) == 0x000030, "Member 'BP_GameState_TomatoFight_C_Display_Winner_Screen::CallFunc_Get_Member_Controllers_Player_Controllers' has a wrong offset!");
static_assert(offsetof(BP_GameState_TomatoFight_C_Display_Winner_Screen, CallFunc_Get_Member_Controllers_Player_Controllers_1) == 0x000040, "Member 'BP_GameState_TomatoFight_C_Display_Winner_Screen::CallFunc_Get_Member_Controllers_Player_Controllers_1' has a wrong offset!");

// Function BP_GameState_TomatoFight.BP_GameState_TomatoFight_C.GetScoreboardTabs
// 0x0520 (0x0520 - 0x0000)
struct BP_GameState_TomatoFight_C_GetScoreboardTabs final
{
public:
	TArray<struct FStruct_ScoreboardTab>          Tabs;                                              // 0x0000(0x0010)(Parm, OutParm)
	bool                                          LocalIsAttacker;                                   // 0x0010(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FStruct_ScoreboardRow>          CurrentScoreTabDefenderRows;                       // 0x0018(0x0010)(Edit, BlueprintVisible)
	TArray<int32>                                 AttackingIDs;                                      // 0x0028(0x0010)(Edit, BlueprintVisible)
	TArray<int32>                                 WinningIDs;                                        // 0x0038(0x0010)(Edit, BlueprintVisible)
	int32                                         CurrentTabIndex;                                   // 0x0048(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4C[0x4];                                       // 0x004C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FStruct_ScoreboardRow>          CurrentScoreTabAttackerRows;                       // 0x0050(0x0010)(Edit, BlueprintVisible)
	TArray<struct FStruct_ScoreboardTab>          ScoreboardTabs_0;                                  // 0x0060(0x0010)(Edit, BlueprintVisible)
	TArray<class FText>                           TabsToMake;                                        // 0x0070(0x0010)(Edit, BlueprintVisible)
	bool                                          Temp_bool_Variable;                                // 0x0080(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable_1;                              // 0x0081(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable_2;                              // 0x0082(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable_3;                              // 0x0083(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FLinearColor                           Temp_struct_Variable;                              // 0x0084(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           Temp_struct_Variable_1;                            // 0x0094(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable_4;                              // 0x00A4(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_A5[0x3];                                       // 0x00A5(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UTexture2D*                             Temp_object_Variable;                              // 0x00A8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UTexture2D*                             Temp_object_Variable_1;                            // 0x00B0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Variable;                                 // 0x00B8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_BC[0x4];                                       // 0x00BC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class FText>                           K2Node_MakeArray_Array;                            // 0x00C0(0x0010)(ReferenceParm)
	class FText                                   Temp_text_Variable;                                // 0x00D0(0x0018)()
	class FText                                   Temp_text_Variable_1;                              // 0x00E8(0x0018)()
	int32                                         Temp_int_Array_Index_Variable;                     // 0x0100(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x0104(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x0108(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Array_Index_Variable_1;                   // 0x010C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable_5;                              // 0x0110(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_111[0x3];                                      // 0x0111(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Temp_int_Loop_Counter_Variable_1;                  // 0x0114(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable_2;                  // 0x0118(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue_1;                 // 0x011C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue_2;                 // 0x0120(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Array_Index_Variable_2;                   // 0x0124(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FText                                   Temp_text_Variable_2;                              // 0x0128(0x0018)()
	int32                                         Temp_int_Loop_Counter_Variable_3;                  // 0x0140(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue_3;                 // 0x0144(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Array_Index_Variable_3;                   // 0x0148(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_GetUserControllerId_ReturnValue;          // 0x014C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AHumanPlayerController*                 CallFunc_GetHumanPlayerControllerByControllerId_ReturnValue; // 0x0150(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ABP_PlayerController_TomatoFight_C*     K2Node_DynamicCast_AsBP_Player_Controller_Tomato_Fight; // 0x0158(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0160(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Is_Attacker_Is_Attacker;                  // 0x0161(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_162[0x2];                                      // 0x0162(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Temp_int_Loop_Counter_Variable_4;                  // 0x0164(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue_4;                 // 0x0168(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_16C[0x4];                                      // 0x016C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UBP_GSC_Team_Raid_C*                    CallFunc_Get_Defending_Team_Defending_Team;        // 0x0170(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UBP_GSC_Team_Raid_C*                    CallFunc_Get_Attacking_Team_Attacking_Team;        // 0x0178(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable_6;                              // 0x0180(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_181[0x7];                                      // 0x0181(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   K2Node_Select_Default;                             // 0x0188(0x0018)()
	int32                                         Temp_int_Array_Index_Variable_4;                   // 0x01A0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1A4[0x4];                                      // 0x01A4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UBP_GSC_Team_Raid_C*                    CallFunc_Get_Attacking_Team_Attacking_Team_1;      // 0x01A8(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x01B0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_1B1[0x7];                                      // 0x01B1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class ABP_PlayerState_Teams_C*>        CallFunc_Get_Members_Member_States;                // 0x01B8(0x0010)(ReferenceParm)
	class ABP_PlayerState_Teams_C*                CallFunc_Array_Get_Item;                           // 0x01C8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x01D0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue_1;                    // 0x01D4(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x01D5(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_1D6[0x2];                                      // 0x01D6(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Array_Add_ReturnValue;                    // 0x01D8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Get_Winning_and_Losing_Teams_Winner_Found; // 0x01DC(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_1DD[0x3];                                      // 0x01DD(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UBP_GSC_Team_Raid_C*                    CallFunc_Get_Winning_and_Losing_Teams_Winning_Team; // 0x01E0(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UBP_GSC_Team_Raid_C*                    CallFunc_Get_Winning_and_Losing_Teams_Losing_Team; // 0x01E8(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Get_Winning_and_Losing_Teams_TeamsAreEqual; // 0x01F0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_NotEqual_IntInt_ReturnValue;              // 0x01F1(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_1F2[0x6];                                      // 0x01F2(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class ABP_PlayerState_Teams_C*>        CallFunc_Get_Members_Member_States_1;              // 0x01F8(0x0010)(ReferenceParm)
	TArray<class ABP_PlayerState_Teams_C*>        CallFunc_Get_Members_Member_States_2;              // 0x0208(0x0010)(ReferenceParm)
	class ABP_PlayerState_Teams_C*                CallFunc_Array_Get_Item_1;                         // 0x0218(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ABP_PlayerState_Teams_C*                CallFunc_Array_Get_Item_2;                         // 0x0220(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ABP_PlayerState_TomatoFight_C*          K2Node_DynamicCast_AsBP_Player_State_Tomato_Fight; // 0x0228(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess_1;                     // 0x0230(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_231[0x7];                                      // 0x0231(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class ABP_PlayerState_TomatoFight_C*          K2Node_DynamicCast_AsBP_Player_State_Tomato_Fight_1; // 0x0238(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess_2;                     // 0x0240(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_241[0x3];                                      // 0x0241(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Array_Add_ReturnValue_1;                  // 0x0244(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Add_ReturnValue_2;                  // 0x0248(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue_1;               // 0x024C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue_2;               // 0x0250(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue_1;                // 0x0254(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Less_IntInt_ReturnValue_2;                // 0x0255(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_256[0x2];                                      // 0x0256(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   Temp_text_Variable_3;                              // 0x0258(0x0018)()
	struct FStruct_ScoreboardSubTab               K2Node_MakeStruct_Struct_ScoreboardSubTab;         // 0x0270(0x0030)(HasGetValueTypeHash)
	class FText                                   K2Node_Select_Default_1;                           // 0x02A0(0x0018)()
	struct FStruct_ScoreboardSubTab               K2Node_MakeStruct_Struct_ScoreboardSubTab_1;       // 0x02B8(0x0030)(HasGetValueTypeHash)
	struct FStruct_ScoreboardSubTab               K2Node_Select_Default_2;                           // 0x02E8(0x0030)(HasGetValueTypeHash)
	struct FStruct_ScoreboardSubTab               K2Node_Select_Default_3;                           // 0x0318(0x0030)(HasGetValueTypeHash)
	TArray<struct FStruct_ScoreboardSubTab>       K2Node_MakeArray_Array_1;                          // 0x0348(0x0010)(ReferenceParm)
	class FText                                   CallFunc_Array_Get_Item_3;                         // 0x0358(0x0018)()
	int32                                         CallFunc_Array_Length_ReturnValue_3;               // 0x0370(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_374[0x4];                                      // 0x0374(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FStruct_ScoreboardTab                  K2Node_MakeStruct_Struct_ScoreboardTab;            // 0x0378(0x0058)(HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue_3;                // 0x03D0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_3D1[0x3];                                      // 0x03D1(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Array_Add_ReturnValue_3;                  // 0x03D4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<struct FStruct_GunFightStatistics>     CallFunc_Get_Statistics_Statistics;                // 0x03D8(0x0010)(ReferenceParm)
	int32                                         CallFunc_Array_Length_ReturnValue_4;               // 0x03E8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3EC[0x4];                                      // 0x03EC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FStruct_GunFightStatistics             CallFunc_Array_Get_Item_4;                         // 0x03F0(0x0050)(HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue_4;                // 0x0440(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_441[0x3];                                      // 0x0441(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         K2Node_Select_Default_4;                           // 0x0444(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_GetUniqueNetIdFromPlayerId_bIsActive;     // 0x0448(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_449[0x7];                                      // 0x0449(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FUniqueNetIdRepl                       CallFunc_GetUniqueNetIdFromPlayerId_ReturnValue;   // 0x0450(0x0028)(HasGetValueTypeHash)
	bool                                          CallFunc_GetPlatformFromPlayerId_bIsActive;        // 0x0478(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	EFlamePlatform                                CallFunc_GetPlatformFromPlayerId_ReturnValue;      // 0x0479(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Array_Contains_ReturnValue;               // 0x047A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Array_Contains_ReturnValue_1;             // 0x047B(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Not_PreBool_ReturnValue;                  // 0x047C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_Select_Default_5;                           // 0x047D(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_47E[0x2];                                      // 0x047E(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	class UTexture2D*                             K2Node_Select_Default_6;                           // 0x0480(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Array_Contains_ReturnValue_2;             // 0x0488(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_489[0x3];                                      // 0x0489(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FLinearColor                           K2Node_Select_Default_7;                           // 0x048C(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_49C[0x4];                                      // 0x049C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FStruct_ScoreboardRow                  K2Node_MakeStruct_Struct_ScoreboardRow;            // 0x04A0(0x0070)(HasGetValueTypeHash)
	bool                                          CallFunc_StringNotEmpty_ReturnValue;               // 0x0510(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_511[0x3];                                      // 0x0511(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Array_Add_ReturnValue_4;                  // 0x0514(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Add_ReturnValue_5;                  // 0x0518(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_GameState_TomatoFight_C_GetScoreboardTabs) == 0x000008, "Wrong alignment on BP_GameState_TomatoFight_C_GetScoreboardTabs");
static_assert(sizeof(BP_GameState_TomatoFight_C_GetScoreboardTabs) == 0x000520, "Wrong size on BP_GameState_TomatoFight_C_GetScoreboardTabs");
static_assert(offsetof(BP_GameState_TomatoFight_C_GetScoreboardTabs, Tabs) == 0x000000, "Member 'BP_GameState_TomatoFight_C_GetScoreboardTabs::Tabs' has a wrong offset!");
static_assert(offsetof(BP_GameState_TomatoFight_C_GetScoreboardTabs, LocalIsAttacker) == 0x000010, "Member 'BP_GameState_TomatoFight_C_GetScoreboardTabs::LocalIsAttacker' has a wrong offset!");
static_assert(offsetof(BP_GameState_TomatoFight_C_GetScoreboardTabs, CurrentScoreTabDefenderRows) == 0x000018, "Member 'BP_GameState_TomatoFight_C_GetScoreboardTabs::CurrentScoreTabDefenderRows' has a wrong offset!");
static_assert(offsetof(BP_GameState_TomatoFight_C_GetScoreboardTabs, AttackingIDs) == 0x000028, "Member 'BP_GameState_TomatoFight_C_GetScoreboardTabs::AttackingIDs' has a wrong offset!");
static_assert(offsetof(BP_GameState_TomatoFight_C_GetScoreboardTabs, WinningIDs) == 0x000038, "Member 'BP_GameState_TomatoFight_C_GetScoreboardTabs::WinningIDs' has a wrong offset!");
static_assert(offsetof(BP_GameState_TomatoFight_C_GetScoreboardTabs, CurrentTabIndex) == 0x000048, "Member 'BP_GameState_TomatoFight_C_GetScoreboardTabs::CurrentTabIndex' has a wrong offset!");
static_assert(offsetof(BP_GameState_TomatoFight_C_GetScoreboardTabs, CurrentScoreTabAttackerRows) == 0x000050, "Member 'BP_GameState_TomatoFight_C_GetScoreboardTabs::CurrentScoreTabAttackerRows' has a wrong offset!");
static_assert(offsetof(BP_GameState_TomatoFight_C_GetScoreboardTabs, ScoreboardTabs_0) == 0x000060, "Member 'BP_GameState_TomatoFight_C_GetScoreboardTabs::ScoreboardTabs_0' has a wrong offset!");
static_assert(offsetof(BP_GameState_TomatoFight_C_GetScoreboardTabs, TabsToMake) == 0x000070, "Member 'BP_GameState_TomatoFight_C_GetScoreboardTabs::TabsToMake' has a wrong offset!");
static_assert(offsetof(BP_GameState_TomatoFight_C_GetScoreboardTabs, Temp_bool_Variable) == 0x000080, "Member 'BP_GameState_TomatoFight_C_GetScoreboardTabs::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(BP_GameState_TomatoFight_C_GetScoreboardTabs, Temp_bool_Variable_1) == 0x000081, "Member 'BP_GameState_TomatoFight_C_GetScoreboardTabs::Temp_bool_Variable_1' has a wrong offset!");
static_assert(offsetof(BP_GameState_TomatoFight_C_GetScoreboardTabs, Temp_bool_Variable_2) == 0x000082, "Member 'BP_GameState_TomatoFight_C_GetScoreboardTabs::Temp_bool_Variable_2' has a wrong offset!");
static_assert(offsetof(BP_GameState_TomatoFight_C_GetScoreboardTabs, Temp_bool_Variable_3) == 0x000083, "Member 'BP_GameState_TomatoFight_C_GetScoreboardTabs::Temp_bool_Variable_3' has a wrong offset!");
static_assert(offsetof(BP_GameState_TomatoFight_C_GetScoreboardTabs, Temp_struct_Variable) == 0x000084, "Member 'BP_GameState_TomatoFight_C_GetScoreboardTabs::Temp_struct_Variable' has a wrong offset!");
static_assert(offsetof(BP_GameState_TomatoFight_C_GetScoreboardTabs, Temp_struct_Variable_1) == 0x000094, "Member 'BP_GameState_TomatoFight_C_GetScoreboardTabs::Temp_struct_Variable_1' has a wrong offset!");
static_assert(offsetof(BP_GameState_TomatoFight_C_GetScoreboardTabs, Temp_bool_Variable_4) == 0x0000A4, "Member 'BP_GameState_TomatoFight_C_GetScoreboardTabs::Temp_bool_Variable_4' has a wrong offset!");
static_assert(offsetof(BP_GameState_TomatoFight_C_GetScoreboardTabs, Temp_object_Variable) == 0x0000A8, "Member 'BP_GameState_TomatoFight_C_GetScoreboardTabs::Temp_object_Variable' has a wrong offset!");
static_assert(offsetof(BP_GameState_TomatoFight_C_GetScoreboardTabs, Temp_object_Variable_1) == 0x0000B0, "Member 'BP_GameState_TomatoFight_C_GetScoreboardTabs::Temp_object_Variable_1' has a wrong offset!");
static_assert(offsetof(BP_GameState_TomatoFight_C_GetScoreboardTabs, Temp_int_Variable) == 0x0000B8, "Member 'BP_GameState_TomatoFight_C_GetScoreboardTabs::Temp_int_Variable' has a wrong offset!");
static_assert(offsetof(BP_GameState_TomatoFight_C_GetScoreboardTabs, K2Node_MakeArray_Array) == 0x0000C0, "Member 'BP_GameState_TomatoFight_C_GetScoreboardTabs::K2Node_MakeArray_Array' has a wrong offset!");
static_assert(offsetof(BP_GameState_TomatoFight_C_GetScoreboardTabs, Temp_text_Variable) == 0x0000D0, "Member 'BP_GameState_TomatoFight_C_GetScoreboardTabs::Temp_text_Variable' has a wrong offset!");
static_assert(offsetof(BP_GameState_TomatoFight_C_GetScoreboardTabs, Temp_text_Variable_1) == 0x0000E8, "Member 'BP_GameState_TomatoFight_C_GetScoreboardTabs::Temp_text_Variable_1' has a wrong offset!");
static_assert(offsetof(BP_GameState_TomatoFight_C_GetScoreboardTabs, Temp_int_Array_Index_Variable) == 0x000100, "Member 'BP_GameState_TomatoFight_C_GetScoreboardTabs::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(BP_GameState_TomatoFight_C_GetScoreboardTabs, Temp_int_Loop_Counter_Variable) == 0x000104, "Member 'BP_GameState_TomatoFight_C_GetScoreboardTabs::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(BP_GameState_TomatoFight_C_GetScoreboardTabs, CallFunc_Add_IntInt_ReturnValue) == 0x000108, "Member 'BP_GameState_TomatoFight_C_GetScoreboardTabs::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_GameState_TomatoFight_C_GetScoreboardTabs, Temp_int_Array_Index_Variable_1) == 0x00010C, "Member 'BP_GameState_TomatoFight_C_GetScoreboardTabs::Temp_int_Array_Index_Variable_1' has a wrong offset!");
static_assert(offsetof(BP_GameState_TomatoFight_C_GetScoreboardTabs, Temp_bool_Variable_5) == 0x000110, "Member 'BP_GameState_TomatoFight_C_GetScoreboardTabs::Temp_bool_Variable_5' has a wrong offset!");
static_assert(offsetof(BP_GameState_TomatoFight_C_GetScoreboardTabs, Temp_int_Loop_Counter_Variable_1) == 0x000114, "Member 'BP_GameState_TomatoFight_C_GetScoreboardTabs::Temp_int_Loop_Counter_Variable_1' has a wrong offset!");
static_assert(offsetof(BP_GameState_TomatoFight_C_GetScoreboardTabs, Temp_int_Loop_Counter_Variable_2) == 0x000118, "Member 'BP_GameState_TomatoFight_C_GetScoreboardTabs::Temp_int_Loop_Counter_Variable_2' has a wrong offset!");
static_assert(offsetof(BP_GameState_TomatoFight_C_GetScoreboardTabs, CallFunc_Add_IntInt_ReturnValue_1) == 0x00011C, "Member 'BP_GameState_TomatoFight_C_GetScoreboardTabs::CallFunc_Add_IntInt_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_GameState_TomatoFight_C_GetScoreboardTabs, CallFunc_Add_IntInt_ReturnValue_2) == 0x000120, "Member 'BP_GameState_TomatoFight_C_GetScoreboardTabs::CallFunc_Add_IntInt_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BP_GameState_TomatoFight_C_GetScoreboardTabs, Temp_int_Array_Index_Variable_2) == 0x000124, "Member 'BP_GameState_TomatoFight_C_GetScoreboardTabs::Temp_int_Array_Index_Variable_2' has a wrong offset!");
static_assert(offsetof(BP_GameState_TomatoFight_C_GetScoreboardTabs, Temp_text_Variable_2) == 0x000128, "Member 'BP_GameState_TomatoFight_C_GetScoreboardTabs::Temp_text_Variable_2' has a wrong offset!");
static_assert(offsetof(BP_GameState_TomatoFight_C_GetScoreboardTabs, Temp_int_Loop_Counter_Variable_3) == 0x000140, "Member 'BP_GameState_TomatoFight_C_GetScoreboardTabs::Temp_int_Loop_Counter_Variable_3' has a wrong offset!");
static_assert(offsetof(BP_GameState_TomatoFight_C_GetScoreboardTabs, CallFunc_Add_IntInt_ReturnValue_3) == 0x000144, "Member 'BP_GameState_TomatoFight_C_GetScoreboardTabs::CallFunc_Add_IntInt_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(BP_GameState_TomatoFight_C_GetScoreboardTabs, Temp_int_Array_Index_Variable_3) == 0x000148, "Member 'BP_GameState_TomatoFight_C_GetScoreboardTabs::Temp_int_Array_Index_Variable_3' has a wrong offset!");
static_assert(offsetof(BP_GameState_TomatoFight_C_GetScoreboardTabs, CallFunc_GetUserControllerId_ReturnValue) == 0x00014C, "Member 'BP_GameState_TomatoFight_C_GetScoreboardTabs::CallFunc_GetUserControllerId_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_GameState_TomatoFight_C_GetScoreboardTabs, CallFunc_GetHumanPlayerControllerByControllerId_ReturnValue) == 0x000150, "Member 'BP_GameState_TomatoFight_C_GetScoreboardTabs::CallFunc_GetHumanPlayerControllerByControllerId_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_GameState_TomatoFight_C_GetScoreboardTabs, K2Node_DynamicCast_AsBP_Player_Controller_Tomato_Fight) == 0x000158, "Member 'BP_GameState_TomatoFight_C_GetScoreboardTabs::K2Node_DynamicCast_AsBP_Player_Controller_Tomato_Fight' has a wrong offset!");
static_assert(offsetof(BP_GameState_TomatoFight_C_GetScoreboardTabs, K2Node_DynamicCast_bSuccess) == 0x000160, "Member 'BP_GameState_TomatoFight_C_GetScoreboardTabs::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(BP_GameState_TomatoFight_C_GetScoreboardTabs, CallFunc_Is_Attacker_Is_Attacker) == 0x000161, "Member 'BP_GameState_TomatoFight_C_GetScoreboardTabs::CallFunc_Is_Attacker_Is_Attacker' has a wrong offset!");
static_assert(offsetof(BP_GameState_TomatoFight_C_GetScoreboardTabs, Temp_int_Loop_Counter_Variable_4) == 0x000164, "Member 'BP_GameState_TomatoFight_C_GetScoreboardTabs::Temp_int_Loop_Counter_Variable_4' has a wrong offset!");
static_assert(offsetof(BP_GameState_TomatoFight_C_GetScoreboardTabs, CallFunc_Add_IntInt_ReturnValue_4) == 0x000168, "Member 'BP_GameState_TomatoFight_C_GetScoreboardTabs::CallFunc_Add_IntInt_ReturnValue_4' has a wrong offset!");
static_assert(offsetof(BP_GameState_TomatoFight_C_GetScoreboardTabs, CallFunc_Get_Defending_Team_Defending_Team) == 0x000170, "Member 'BP_GameState_TomatoFight_C_GetScoreboardTabs::CallFunc_Get_Defending_Team_Defending_Team' has a wrong offset!");
static_assert(offsetof(BP_GameState_TomatoFight_C_GetScoreboardTabs, CallFunc_Get_Attacking_Team_Attacking_Team) == 0x000178, "Member 'BP_GameState_TomatoFight_C_GetScoreboardTabs::CallFunc_Get_Attacking_Team_Attacking_Team' has a wrong offset!");
static_assert(offsetof(BP_GameState_TomatoFight_C_GetScoreboardTabs, Temp_bool_Variable_6) == 0x000180, "Member 'BP_GameState_TomatoFight_C_GetScoreboardTabs::Temp_bool_Variable_6' has a wrong offset!");
static_assert(offsetof(BP_GameState_TomatoFight_C_GetScoreboardTabs, K2Node_Select_Default) == 0x000188, "Member 'BP_GameState_TomatoFight_C_GetScoreboardTabs::K2Node_Select_Default' has a wrong offset!");
static_assert(offsetof(BP_GameState_TomatoFight_C_GetScoreboardTabs, Temp_int_Array_Index_Variable_4) == 0x0001A0, "Member 'BP_GameState_TomatoFight_C_GetScoreboardTabs::Temp_int_Array_Index_Variable_4' has a wrong offset!");
static_assert(offsetof(BP_GameState_TomatoFight_C_GetScoreboardTabs, CallFunc_Get_Attacking_Team_Attacking_Team_1) == 0x0001A8, "Member 'BP_GameState_TomatoFight_C_GetScoreboardTabs::CallFunc_Get_Attacking_Team_Attacking_Team_1' has a wrong offset!");
static_assert(offsetof(BP_GameState_TomatoFight_C_GetScoreboardTabs, CallFunc_IsValid_ReturnValue) == 0x0001B0, "Member 'BP_GameState_TomatoFight_C_GetScoreboardTabs::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_GameState_TomatoFight_C_GetScoreboardTabs, CallFunc_Get_Members_Member_States) == 0x0001B8, "Member 'BP_GameState_TomatoFight_C_GetScoreboardTabs::CallFunc_Get_Members_Member_States' has a wrong offset!");
static_assert(offsetof(BP_GameState_TomatoFight_C_GetScoreboardTabs, CallFunc_Array_Get_Item) == 0x0001C8, "Member 'BP_GameState_TomatoFight_C_GetScoreboardTabs::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(BP_GameState_TomatoFight_C_GetScoreboardTabs, CallFunc_Array_Length_ReturnValue) == 0x0001D0, "Member 'BP_GameState_TomatoFight_C_GetScoreboardTabs::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_GameState_TomatoFight_C_GetScoreboardTabs, CallFunc_IsValid_ReturnValue_1) == 0x0001D4, "Member 'BP_GameState_TomatoFight_C_GetScoreboardTabs::CallFunc_IsValid_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_GameState_TomatoFight_C_GetScoreboardTabs, CallFunc_Less_IntInt_ReturnValue) == 0x0001D5, "Member 'BP_GameState_TomatoFight_C_GetScoreboardTabs::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_GameState_TomatoFight_C_GetScoreboardTabs, CallFunc_Array_Add_ReturnValue) == 0x0001D8, "Member 'BP_GameState_TomatoFight_C_GetScoreboardTabs::CallFunc_Array_Add_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_GameState_TomatoFight_C_GetScoreboardTabs, CallFunc_Get_Winning_and_Losing_Teams_Winner_Found) == 0x0001DC, "Member 'BP_GameState_TomatoFight_C_GetScoreboardTabs::CallFunc_Get_Winning_and_Losing_Teams_Winner_Found' has a wrong offset!");
static_assert(offsetof(BP_GameState_TomatoFight_C_GetScoreboardTabs, CallFunc_Get_Winning_and_Losing_Teams_Winning_Team) == 0x0001E0, "Member 'BP_GameState_TomatoFight_C_GetScoreboardTabs::CallFunc_Get_Winning_and_Losing_Teams_Winning_Team' has a wrong offset!");
static_assert(offsetof(BP_GameState_TomatoFight_C_GetScoreboardTabs, CallFunc_Get_Winning_and_Losing_Teams_Losing_Team) == 0x0001E8, "Member 'BP_GameState_TomatoFight_C_GetScoreboardTabs::CallFunc_Get_Winning_and_Losing_Teams_Losing_Team' has a wrong offset!");
static_assert(offsetof(BP_GameState_TomatoFight_C_GetScoreboardTabs, CallFunc_Get_Winning_and_Losing_Teams_TeamsAreEqual) == 0x0001F0, "Member 'BP_GameState_TomatoFight_C_GetScoreboardTabs::CallFunc_Get_Winning_and_Losing_Teams_TeamsAreEqual' has a wrong offset!");
static_assert(offsetof(BP_GameState_TomatoFight_C_GetScoreboardTabs, CallFunc_NotEqual_IntInt_ReturnValue) == 0x0001F1, "Member 'BP_GameState_TomatoFight_C_GetScoreboardTabs::CallFunc_NotEqual_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_GameState_TomatoFight_C_GetScoreboardTabs, CallFunc_Get_Members_Member_States_1) == 0x0001F8, "Member 'BP_GameState_TomatoFight_C_GetScoreboardTabs::CallFunc_Get_Members_Member_States_1' has a wrong offset!");
static_assert(offsetof(BP_GameState_TomatoFight_C_GetScoreboardTabs, CallFunc_Get_Members_Member_States_2) == 0x000208, "Member 'BP_GameState_TomatoFight_C_GetScoreboardTabs::CallFunc_Get_Members_Member_States_2' has a wrong offset!");
static_assert(offsetof(BP_GameState_TomatoFight_C_GetScoreboardTabs, CallFunc_Array_Get_Item_1) == 0x000218, "Member 'BP_GameState_TomatoFight_C_GetScoreboardTabs::CallFunc_Array_Get_Item_1' has a wrong offset!");
static_assert(offsetof(BP_GameState_TomatoFight_C_GetScoreboardTabs, CallFunc_Array_Get_Item_2) == 0x000220, "Member 'BP_GameState_TomatoFight_C_GetScoreboardTabs::CallFunc_Array_Get_Item_2' has a wrong offset!");
static_assert(offsetof(BP_GameState_TomatoFight_C_GetScoreboardTabs, K2Node_DynamicCast_AsBP_Player_State_Tomato_Fight) == 0x000228, "Member 'BP_GameState_TomatoFight_C_GetScoreboardTabs::K2Node_DynamicCast_AsBP_Player_State_Tomato_Fight' has a wrong offset!");
static_assert(offsetof(BP_GameState_TomatoFight_C_GetScoreboardTabs, K2Node_DynamicCast_bSuccess_1) == 0x000230, "Member 'BP_GameState_TomatoFight_C_GetScoreboardTabs::K2Node_DynamicCast_bSuccess_1' has a wrong offset!");
static_assert(offsetof(BP_GameState_TomatoFight_C_GetScoreboardTabs, K2Node_DynamicCast_AsBP_Player_State_Tomato_Fight_1) == 0x000238, "Member 'BP_GameState_TomatoFight_C_GetScoreboardTabs::K2Node_DynamicCast_AsBP_Player_State_Tomato_Fight_1' has a wrong offset!");
static_assert(offsetof(BP_GameState_TomatoFight_C_GetScoreboardTabs, K2Node_DynamicCast_bSuccess_2) == 0x000240, "Member 'BP_GameState_TomatoFight_C_GetScoreboardTabs::K2Node_DynamicCast_bSuccess_2' has a wrong offset!");
static_assert(offsetof(BP_GameState_TomatoFight_C_GetScoreboardTabs, CallFunc_Array_Add_ReturnValue_1) == 0x000244, "Member 'BP_GameState_TomatoFight_C_GetScoreboardTabs::CallFunc_Array_Add_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_GameState_TomatoFight_C_GetScoreboardTabs, CallFunc_Array_Add_ReturnValue_2) == 0x000248, "Member 'BP_GameState_TomatoFight_C_GetScoreboardTabs::CallFunc_Array_Add_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BP_GameState_TomatoFight_C_GetScoreboardTabs, CallFunc_Array_Length_ReturnValue_1) == 0x00024C, "Member 'BP_GameState_TomatoFight_C_GetScoreboardTabs::CallFunc_Array_Length_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_GameState_TomatoFight_C_GetScoreboardTabs, CallFunc_Array_Length_ReturnValue_2) == 0x000250, "Member 'BP_GameState_TomatoFight_C_GetScoreboardTabs::CallFunc_Array_Length_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BP_GameState_TomatoFight_C_GetScoreboardTabs, CallFunc_Less_IntInt_ReturnValue_1) == 0x000254, "Member 'BP_GameState_TomatoFight_C_GetScoreboardTabs::CallFunc_Less_IntInt_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_GameState_TomatoFight_C_GetScoreboardTabs, CallFunc_Less_IntInt_ReturnValue_2) == 0x000255, "Member 'BP_GameState_TomatoFight_C_GetScoreboardTabs::CallFunc_Less_IntInt_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BP_GameState_TomatoFight_C_GetScoreboardTabs, Temp_text_Variable_3) == 0x000258, "Member 'BP_GameState_TomatoFight_C_GetScoreboardTabs::Temp_text_Variable_3' has a wrong offset!");
static_assert(offsetof(BP_GameState_TomatoFight_C_GetScoreboardTabs, K2Node_MakeStruct_Struct_ScoreboardSubTab) == 0x000270, "Member 'BP_GameState_TomatoFight_C_GetScoreboardTabs::K2Node_MakeStruct_Struct_ScoreboardSubTab' has a wrong offset!");
static_assert(offsetof(BP_GameState_TomatoFight_C_GetScoreboardTabs, K2Node_Select_Default_1) == 0x0002A0, "Member 'BP_GameState_TomatoFight_C_GetScoreboardTabs::K2Node_Select_Default_1' has a wrong offset!");
static_assert(offsetof(BP_GameState_TomatoFight_C_GetScoreboardTabs, K2Node_MakeStruct_Struct_ScoreboardSubTab_1) == 0x0002B8, "Member 'BP_GameState_TomatoFight_C_GetScoreboardTabs::K2Node_MakeStruct_Struct_ScoreboardSubTab_1' has a wrong offset!");
static_assert(offsetof(BP_GameState_TomatoFight_C_GetScoreboardTabs, K2Node_Select_Default_2) == 0x0002E8, "Member 'BP_GameState_TomatoFight_C_GetScoreboardTabs::K2Node_Select_Default_2' has a wrong offset!");
static_assert(offsetof(BP_GameState_TomatoFight_C_GetScoreboardTabs, K2Node_Select_Default_3) == 0x000318, "Member 'BP_GameState_TomatoFight_C_GetScoreboardTabs::K2Node_Select_Default_3' has a wrong offset!");
static_assert(offsetof(BP_GameState_TomatoFight_C_GetScoreboardTabs, K2Node_MakeArray_Array_1) == 0x000348, "Member 'BP_GameState_TomatoFight_C_GetScoreboardTabs::K2Node_MakeArray_Array_1' has a wrong offset!");
static_assert(offsetof(BP_GameState_TomatoFight_C_GetScoreboardTabs, CallFunc_Array_Get_Item_3) == 0x000358, "Member 'BP_GameState_TomatoFight_C_GetScoreboardTabs::CallFunc_Array_Get_Item_3' has a wrong offset!");
static_assert(offsetof(BP_GameState_TomatoFight_C_GetScoreboardTabs, CallFunc_Array_Length_ReturnValue_3) == 0x000370, "Member 'BP_GameState_TomatoFight_C_GetScoreboardTabs::CallFunc_Array_Length_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(BP_GameState_TomatoFight_C_GetScoreboardTabs, K2Node_MakeStruct_Struct_ScoreboardTab) == 0x000378, "Member 'BP_GameState_TomatoFight_C_GetScoreboardTabs::K2Node_MakeStruct_Struct_ScoreboardTab' has a wrong offset!");
static_assert(offsetof(BP_GameState_TomatoFight_C_GetScoreboardTabs, CallFunc_Less_IntInt_ReturnValue_3) == 0x0003D0, "Member 'BP_GameState_TomatoFight_C_GetScoreboardTabs::CallFunc_Less_IntInt_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(BP_GameState_TomatoFight_C_GetScoreboardTabs, CallFunc_Array_Add_ReturnValue_3) == 0x0003D4, "Member 'BP_GameState_TomatoFight_C_GetScoreboardTabs::CallFunc_Array_Add_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(BP_GameState_TomatoFight_C_GetScoreboardTabs, CallFunc_Get_Statistics_Statistics) == 0x0003D8, "Member 'BP_GameState_TomatoFight_C_GetScoreboardTabs::CallFunc_Get_Statistics_Statistics' has a wrong offset!");
static_assert(offsetof(BP_GameState_TomatoFight_C_GetScoreboardTabs, CallFunc_Array_Length_ReturnValue_4) == 0x0003E8, "Member 'BP_GameState_TomatoFight_C_GetScoreboardTabs::CallFunc_Array_Length_ReturnValue_4' has a wrong offset!");
static_assert(offsetof(BP_GameState_TomatoFight_C_GetScoreboardTabs, CallFunc_Array_Get_Item_4) == 0x0003F0, "Member 'BP_GameState_TomatoFight_C_GetScoreboardTabs::CallFunc_Array_Get_Item_4' has a wrong offset!");
static_assert(offsetof(BP_GameState_TomatoFight_C_GetScoreboardTabs, CallFunc_Less_IntInt_ReturnValue_4) == 0x000440, "Member 'BP_GameState_TomatoFight_C_GetScoreboardTabs::CallFunc_Less_IntInt_ReturnValue_4' has a wrong offset!");
static_assert(offsetof(BP_GameState_TomatoFight_C_GetScoreboardTabs, K2Node_Select_Default_4) == 0x000444, "Member 'BP_GameState_TomatoFight_C_GetScoreboardTabs::K2Node_Select_Default_4' has a wrong offset!");
static_assert(offsetof(BP_GameState_TomatoFight_C_GetScoreboardTabs, CallFunc_GetUniqueNetIdFromPlayerId_bIsActive) == 0x000448, "Member 'BP_GameState_TomatoFight_C_GetScoreboardTabs::CallFunc_GetUniqueNetIdFromPlayerId_bIsActive' has a wrong offset!");
static_assert(offsetof(BP_GameState_TomatoFight_C_GetScoreboardTabs, CallFunc_GetUniqueNetIdFromPlayerId_ReturnValue) == 0x000450, "Member 'BP_GameState_TomatoFight_C_GetScoreboardTabs::CallFunc_GetUniqueNetIdFromPlayerId_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_GameState_TomatoFight_C_GetScoreboardTabs, CallFunc_GetPlatformFromPlayerId_bIsActive) == 0x000478, "Member 'BP_GameState_TomatoFight_C_GetScoreboardTabs::CallFunc_GetPlatformFromPlayerId_bIsActive' has a wrong offset!");
static_assert(offsetof(BP_GameState_TomatoFight_C_GetScoreboardTabs, CallFunc_GetPlatformFromPlayerId_ReturnValue) == 0x000479, "Member 'BP_GameState_TomatoFight_C_GetScoreboardTabs::CallFunc_GetPlatformFromPlayerId_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_GameState_TomatoFight_C_GetScoreboardTabs, CallFunc_Array_Contains_ReturnValue) == 0x00047A, "Member 'BP_GameState_TomatoFight_C_GetScoreboardTabs::CallFunc_Array_Contains_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_GameState_TomatoFight_C_GetScoreboardTabs, CallFunc_Array_Contains_ReturnValue_1) == 0x00047B, "Member 'BP_GameState_TomatoFight_C_GetScoreboardTabs::CallFunc_Array_Contains_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_GameState_TomatoFight_C_GetScoreboardTabs, CallFunc_Not_PreBool_ReturnValue) == 0x00047C, "Member 'BP_GameState_TomatoFight_C_GetScoreboardTabs::CallFunc_Not_PreBool_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_GameState_TomatoFight_C_GetScoreboardTabs, K2Node_Select_Default_5) == 0x00047D, "Member 'BP_GameState_TomatoFight_C_GetScoreboardTabs::K2Node_Select_Default_5' has a wrong offset!");
static_assert(offsetof(BP_GameState_TomatoFight_C_GetScoreboardTabs, K2Node_Select_Default_6) == 0x000480, "Member 'BP_GameState_TomatoFight_C_GetScoreboardTabs::K2Node_Select_Default_6' has a wrong offset!");
static_assert(offsetof(BP_GameState_TomatoFight_C_GetScoreboardTabs, CallFunc_Array_Contains_ReturnValue_2) == 0x000488, "Member 'BP_GameState_TomatoFight_C_GetScoreboardTabs::CallFunc_Array_Contains_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BP_GameState_TomatoFight_C_GetScoreboardTabs, K2Node_Select_Default_7) == 0x00048C, "Member 'BP_GameState_TomatoFight_C_GetScoreboardTabs::K2Node_Select_Default_7' has a wrong offset!");
static_assert(offsetof(BP_GameState_TomatoFight_C_GetScoreboardTabs, K2Node_MakeStruct_Struct_ScoreboardRow) == 0x0004A0, "Member 'BP_GameState_TomatoFight_C_GetScoreboardTabs::K2Node_MakeStruct_Struct_ScoreboardRow' has a wrong offset!");
static_assert(offsetof(BP_GameState_TomatoFight_C_GetScoreboardTabs, CallFunc_StringNotEmpty_ReturnValue) == 0x000510, "Member 'BP_GameState_TomatoFight_C_GetScoreboardTabs::CallFunc_StringNotEmpty_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_GameState_TomatoFight_C_GetScoreboardTabs, CallFunc_Array_Add_ReturnValue_4) == 0x000514, "Member 'BP_GameState_TomatoFight_C_GetScoreboardTabs::CallFunc_Array_Add_ReturnValue_4' has a wrong offset!");
static_assert(offsetof(BP_GameState_TomatoFight_C_GetScoreboardTabs, CallFunc_Array_Add_ReturnValue_5) == 0x000518, "Member 'BP_GameState_TomatoFight_C_GetScoreboardTabs::CallFunc_Array_Add_ReturnValue_5' has a wrong offset!");

// Function BP_GameState_TomatoFight.BP_GameState_TomatoFight_C.IsLocalPlayerWinning
// 0x0050 (0x0050 - 0x0000)
struct BP_GameState_TomatoFight_C_IsLocalPlayerWinning final
{
public:
	bool                                          IsWinning;                                         // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_GetUserControllerId_ReturnValue;          // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AHumanPlayerController*                 CallFunc_GetHumanPlayerControllerByControllerId_ReturnValue; // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Get_Winning_and_Losing_Teams_Winner_Found; // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UBP_GSC_Team_Raid_C*                    CallFunc_Get_Winning_and_Losing_Teams_Winning_Team; // 0x0018(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UBP_GSC_Team_Raid_C*                    CallFunc_Get_Winning_and_Losing_Teams_Losing_Team; // 0x0020(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Get_Winning_and_Losing_Teams_TeamsAreEqual; // 0x0028(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_29[0x7];                                       // 0x0029(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class ABP_PlayerController_TomatoFight_C*     K2Node_DynamicCast_AsBP_Player_Controller_Tomato_Fight; // 0x0030(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0038(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_39[0x7];                                       // 0x0039(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class ABP_PlayerState_TomatoFight_C*          K2Node_DynamicCast_AsBP_Player_State_Tomato_Fight; // 0x0040(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess_1;                     // 0x0048(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0049(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_EqualEqual_ObjectObject_ReturnValue;      // 0x004A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanOR_ReturnValue;                    // 0x004B(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_GameState_TomatoFight_C_IsLocalPlayerWinning) == 0x000008, "Wrong alignment on BP_GameState_TomatoFight_C_IsLocalPlayerWinning");
static_assert(sizeof(BP_GameState_TomatoFight_C_IsLocalPlayerWinning) == 0x000050, "Wrong size on BP_GameState_TomatoFight_C_IsLocalPlayerWinning");
static_assert(offsetof(BP_GameState_TomatoFight_C_IsLocalPlayerWinning, IsWinning) == 0x000000, "Member 'BP_GameState_TomatoFight_C_IsLocalPlayerWinning::IsWinning' has a wrong offset!");
static_assert(offsetof(BP_GameState_TomatoFight_C_IsLocalPlayerWinning, CallFunc_GetUserControllerId_ReturnValue) == 0x000004, "Member 'BP_GameState_TomatoFight_C_IsLocalPlayerWinning::CallFunc_GetUserControllerId_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_GameState_TomatoFight_C_IsLocalPlayerWinning, CallFunc_GetHumanPlayerControllerByControllerId_ReturnValue) == 0x000008, "Member 'BP_GameState_TomatoFight_C_IsLocalPlayerWinning::CallFunc_GetHumanPlayerControllerByControllerId_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_GameState_TomatoFight_C_IsLocalPlayerWinning, CallFunc_Get_Winning_and_Losing_Teams_Winner_Found) == 0x000010, "Member 'BP_GameState_TomatoFight_C_IsLocalPlayerWinning::CallFunc_Get_Winning_and_Losing_Teams_Winner_Found' has a wrong offset!");
static_assert(offsetof(BP_GameState_TomatoFight_C_IsLocalPlayerWinning, CallFunc_Get_Winning_and_Losing_Teams_Winning_Team) == 0x000018, "Member 'BP_GameState_TomatoFight_C_IsLocalPlayerWinning::CallFunc_Get_Winning_and_Losing_Teams_Winning_Team' has a wrong offset!");
static_assert(offsetof(BP_GameState_TomatoFight_C_IsLocalPlayerWinning, CallFunc_Get_Winning_and_Losing_Teams_Losing_Team) == 0x000020, "Member 'BP_GameState_TomatoFight_C_IsLocalPlayerWinning::CallFunc_Get_Winning_and_Losing_Teams_Losing_Team' has a wrong offset!");
static_assert(offsetof(BP_GameState_TomatoFight_C_IsLocalPlayerWinning, CallFunc_Get_Winning_and_Losing_Teams_TeamsAreEqual) == 0x000028, "Member 'BP_GameState_TomatoFight_C_IsLocalPlayerWinning::CallFunc_Get_Winning_and_Losing_Teams_TeamsAreEqual' has a wrong offset!");
static_assert(offsetof(BP_GameState_TomatoFight_C_IsLocalPlayerWinning, K2Node_DynamicCast_AsBP_Player_Controller_Tomato_Fight) == 0x000030, "Member 'BP_GameState_TomatoFight_C_IsLocalPlayerWinning::K2Node_DynamicCast_AsBP_Player_Controller_Tomato_Fight' has a wrong offset!");
static_assert(offsetof(BP_GameState_TomatoFight_C_IsLocalPlayerWinning, K2Node_DynamicCast_bSuccess) == 0x000038, "Member 'BP_GameState_TomatoFight_C_IsLocalPlayerWinning::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(BP_GameState_TomatoFight_C_IsLocalPlayerWinning, K2Node_DynamicCast_AsBP_Player_State_Tomato_Fight) == 0x000040, "Member 'BP_GameState_TomatoFight_C_IsLocalPlayerWinning::K2Node_DynamicCast_AsBP_Player_State_Tomato_Fight' has a wrong offset!");
static_assert(offsetof(BP_GameState_TomatoFight_C_IsLocalPlayerWinning, K2Node_DynamicCast_bSuccess_1) == 0x000048, "Member 'BP_GameState_TomatoFight_C_IsLocalPlayerWinning::K2Node_DynamicCast_bSuccess_1' has a wrong offset!");
static_assert(offsetof(BP_GameState_TomatoFight_C_IsLocalPlayerWinning, CallFunc_IsValid_ReturnValue) == 0x000049, "Member 'BP_GameState_TomatoFight_C_IsLocalPlayerWinning::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_GameState_TomatoFight_C_IsLocalPlayerWinning, CallFunc_EqualEqual_ObjectObject_ReturnValue) == 0x00004A, "Member 'BP_GameState_TomatoFight_C_IsLocalPlayerWinning::CallFunc_EqualEqual_ObjectObject_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_GameState_TomatoFight_C_IsLocalPlayerWinning, CallFunc_BooleanOR_ReturnValue) == 0x00004B, "Member 'BP_GameState_TomatoFight_C_IsLocalPlayerWinning::CallFunc_BooleanOR_ReturnValue' has a wrong offset!");

// Function BP_GameState_TomatoFight.BP_GameState_TomatoFight_C.Get Current Round Loadout
// 0x0060 (0x0060 - 0x0000)
struct BP_GameState_TomatoFight_C_Get_Current_Round_Loadout final
{
public:
	EFightVariant                                 FightVariant;                                      // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Found_Any;                                         // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_2[0x6];                                        // 0x0002(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	struct FStruct_GunFightLoadout                Loadout;                                           // 0x0008(0x0028)(Parm, OutParm, HasGetValueTypeHash)
	struct FStruct_GunFightLoadout                CallFunc_Map_Find_Value;                           // 0x0030(0x0028)(HasGetValueTypeHash)
	bool                                          CallFunc_Map_Find_ReturnValue;                     // 0x0058(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_GameState_TomatoFight_C_Get_Current_Round_Loadout) == 0x000008, "Wrong alignment on BP_GameState_TomatoFight_C_Get_Current_Round_Loadout");
static_assert(sizeof(BP_GameState_TomatoFight_C_Get_Current_Round_Loadout) == 0x000060, "Wrong size on BP_GameState_TomatoFight_C_Get_Current_Round_Loadout");
static_assert(offsetof(BP_GameState_TomatoFight_C_Get_Current_Round_Loadout, FightVariant) == 0x000000, "Member 'BP_GameState_TomatoFight_C_Get_Current_Round_Loadout::FightVariant' has a wrong offset!");
static_assert(offsetof(BP_GameState_TomatoFight_C_Get_Current_Round_Loadout, Found_Any) == 0x000001, "Member 'BP_GameState_TomatoFight_C_Get_Current_Round_Loadout::Found_Any' has a wrong offset!");
static_assert(offsetof(BP_GameState_TomatoFight_C_Get_Current_Round_Loadout, Loadout) == 0x000008, "Member 'BP_GameState_TomatoFight_C_Get_Current_Round_Loadout::Loadout' has a wrong offset!");
static_assert(offsetof(BP_GameState_TomatoFight_C_Get_Current_Round_Loadout, CallFunc_Map_Find_Value) == 0x000030, "Member 'BP_GameState_TomatoFight_C_Get_Current_Round_Loadout::CallFunc_Map_Find_Value' has a wrong offset!");
static_assert(offsetof(BP_GameState_TomatoFight_C_Get_Current_Round_Loadout, CallFunc_Map_Find_ReturnValue) == 0x000058, "Member 'BP_GameState_TomatoFight_C_Get_Current_Round_Loadout::CallFunc_Map_Find_ReturnValue' has a wrong offset!");

// Function BP_GameState_TomatoFight.BP_GameState_TomatoFight_C.Modify Kill Feed Color By Team
// 0x0300 (0x0300 - 0x0000)
struct BP_GameState_TomatoFight_C_Modify_Kill_Feed_Color_By_Team final
{
public:
	struct FStruct_TVTDeathmatch_KillFeed         Kill_Feed_In;                                      // 0x0000(0x00C8)(BlueprintVisible, BlueprintReadOnly, Parm, HasGetValueTypeHash)
	struct FStruct_TVTDeathmatch_KillFeed         Kill_Feed_Out;                                     // 0x00C8(0x00C8)(Parm, OutParm, HasGetValueTypeHash)
	TSet<int32>                                   Local_Team_Player_IDs;                             // 0x0190(0x0050)(Edit, BlueprintVisible)
	struct FStruct_TVTDeathmatch_KillFeed         _Kill_Feed_Out;                                    // 0x01E0(0x00C8)(Edit, BlueprintVisible, HasGetValueTypeHash)
	int32                                         Temp_int_Array_Index_Variable;                     // 0x02A8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x02AC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x02B0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_GetUserControllerId_ReturnValue;          // 0x02B4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AHumanPlayerController*                 CallFunc_GetHumanPlayerControllerByControllerId_ReturnValue; // 0x02B8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ABP_PlayerController_TomatoFight_C*     K2Node_DynamicCast_AsBP_Player_Controller_Tomato_Fight; // 0x02C0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x02C8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x02C9(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_2CA[0x6];                                      // 0x02CA(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class ABP_PlayerState_Teams_C*                K2Node_DynamicCast_AsBP_Player_State_Teams;        // 0x02D0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess_1;                     // 0x02D8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_2D9[0x7];                                      // 0x02D9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class ABP_PlayerState_C*>              CallFunc_FindTeammates_TeammatesPlayerStates;      // 0x02E0(0x0010)(ReferenceParm)
	class ABP_PlayerState_C*                      CallFunc_Array_Get_Item;                           // 0x02F0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x02F8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue_1;                    // 0x02FC(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x02FD(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Set_Contains_ReturnValue;                 // 0x02FE(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Set_Contains_ReturnValue_1;               // 0x02FF(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_GameState_TomatoFight_C_Modify_Kill_Feed_Color_By_Team) == 0x000008, "Wrong alignment on BP_GameState_TomatoFight_C_Modify_Kill_Feed_Color_By_Team");
static_assert(sizeof(BP_GameState_TomatoFight_C_Modify_Kill_Feed_Color_By_Team) == 0x000300, "Wrong size on BP_GameState_TomatoFight_C_Modify_Kill_Feed_Color_By_Team");
static_assert(offsetof(BP_GameState_TomatoFight_C_Modify_Kill_Feed_Color_By_Team, Kill_Feed_In) == 0x000000, "Member 'BP_GameState_TomatoFight_C_Modify_Kill_Feed_Color_By_Team::Kill_Feed_In' has a wrong offset!");
static_assert(offsetof(BP_GameState_TomatoFight_C_Modify_Kill_Feed_Color_By_Team, Kill_Feed_Out) == 0x0000C8, "Member 'BP_GameState_TomatoFight_C_Modify_Kill_Feed_Color_By_Team::Kill_Feed_Out' has a wrong offset!");
static_assert(offsetof(BP_GameState_TomatoFight_C_Modify_Kill_Feed_Color_By_Team, Local_Team_Player_IDs) == 0x000190, "Member 'BP_GameState_TomatoFight_C_Modify_Kill_Feed_Color_By_Team::Local_Team_Player_IDs' has a wrong offset!");
static_assert(offsetof(BP_GameState_TomatoFight_C_Modify_Kill_Feed_Color_By_Team, _Kill_Feed_Out) == 0x0001E0, "Member 'BP_GameState_TomatoFight_C_Modify_Kill_Feed_Color_By_Team::_Kill_Feed_Out' has a wrong offset!");
static_assert(offsetof(BP_GameState_TomatoFight_C_Modify_Kill_Feed_Color_By_Team, Temp_int_Array_Index_Variable) == 0x0002A8, "Member 'BP_GameState_TomatoFight_C_Modify_Kill_Feed_Color_By_Team::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(BP_GameState_TomatoFight_C_Modify_Kill_Feed_Color_By_Team, Temp_int_Loop_Counter_Variable) == 0x0002AC, "Member 'BP_GameState_TomatoFight_C_Modify_Kill_Feed_Color_By_Team::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(BP_GameState_TomatoFight_C_Modify_Kill_Feed_Color_By_Team, CallFunc_Add_IntInt_ReturnValue) == 0x0002B0, "Member 'BP_GameState_TomatoFight_C_Modify_Kill_Feed_Color_By_Team::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_GameState_TomatoFight_C_Modify_Kill_Feed_Color_By_Team, CallFunc_GetUserControllerId_ReturnValue) == 0x0002B4, "Member 'BP_GameState_TomatoFight_C_Modify_Kill_Feed_Color_By_Team::CallFunc_GetUserControllerId_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_GameState_TomatoFight_C_Modify_Kill_Feed_Color_By_Team, CallFunc_GetHumanPlayerControllerByControllerId_ReturnValue) == 0x0002B8, "Member 'BP_GameState_TomatoFight_C_Modify_Kill_Feed_Color_By_Team::CallFunc_GetHumanPlayerControllerByControllerId_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_GameState_TomatoFight_C_Modify_Kill_Feed_Color_By_Team, K2Node_DynamicCast_AsBP_Player_Controller_Tomato_Fight) == 0x0002C0, "Member 'BP_GameState_TomatoFight_C_Modify_Kill_Feed_Color_By_Team::K2Node_DynamicCast_AsBP_Player_Controller_Tomato_Fight' has a wrong offset!");
static_assert(offsetof(BP_GameState_TomatoFight_C_Modify_Kill_Feed_Color_By_Team, K2Node_DynamicCast_bSuccess) == 0x0002C8, "Member 'BP_GameState_TomatoFight_C_Modify_Kill_Feed_Color_By_Team::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(BP_GameState_TomatoFight_C_Modify_Kill_Feed_Color_By_Team, CallFunc_IsValid_ReturnValue) == 0x0002C9, "Member 'BP_GameState_TomatoFight_C_Modify_Kill_Feed_Color_By_Team::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_GameState_TomatoFight_C_Modify_Kill_Feed_Color_By_Team, K2Node_DynamicCast_AsBP_Player_State_Teams) == 0x0002D0, "Member 'BP_GameState_TomatoFight_C_Modify_Kill_Feed_Color_By_Team::K2Node_DynamicCast_AsBP_Player_State_Teams' has a wrong offset!");
static_assert(offsetof(BP_GameState_TomatoFight_C_Modify_Kill_Feed_Color_By_Team, K2Node_DynamicCast_bSuccess_1) == 0x0002D8, "Member 'BP_GameState_TomatoFight_C_Modify_Kill_Feed_Color_By_Team::K2Node_DynamicCast_bSuccess_1' has a wrong offset!");
static_assert(offsetof(BP_GameState_TomatoFight_C_Modify_Kill_Feed_Color_By_Team, CallFunc_FindTeammates_TeammatesPlayerStates) == 0x0002E0, "Member 'BP_GameState_TomatoFight_C_Modify_Kill_Feed_Color_By_Team::CallFunc_FindTeammates_TeammatesPlayerStates' has a wrong offset!");
static_assert(offsetof(BP_GameState_TomatoFight_C_Modify_Kill_Feed_Color_By_Team, CallFunc_Array_Get_Item) == 0x0002F0, "Member 'BP_GameState_TomatoFight_C_Modify_Kill_Feed_Color_By_Team::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(BP_GameState_TomatoFight_C_Modify_Kill_Feed_Color_By_Team, CallFunc_Array_Length_ReturnValue) == 0x0002F8, "Member 'BP_GameState_TomatoFight_C_Modify_Kill_Feed_Color_By_Team::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_GameState_TomatoFight_C_Modify_Kill_Feed_Color_By_Team, CallFunc_IsValid_ReturnValue_1) == 0x0002FC, "Member 'BP_GameState_TomatoFight_C_Modify_Kill_Feed_Color_By_Team::CallFunc_IsValid_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_GameState_TomatoFight_C_Modify_Kill_Feed_Color_By_Team, CallFunc_Less_IntInt_ReturnValue) == 0x0002FD, "Member 'BP_GameState_TomatoFight_C_Modify_Kill_Feed_Color_By_Team::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_GameState_TomatoFight_C_Modify_Kill_Feed_Color_By_Team, CallFunc_Set_Contains_ReturnValue) == 0x0002FE, "Member 'BP_GameState_TomatoFight_C_Modify_Kill_Feed_Color_By_Team::CallFunc_Set_Contains_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_GameState_TomatoFight_C_Modify_Kill_Feed_Color_By_Team, CallFunc_Set_Contains_ReturnValue_1) == 0x0002FF, "Member 'BP_GameState_TomatoFight_C_Modify_Kill_Feed_Color_By_Team::CallFunc_Set_Contains_ReturnValue_1' has a wrong offset!");

// Function BP_GameState_TomatoFight.BP_GameState_TomatoFight_C.Show or Hide Spawn Markers
// 0x0378 (0x0378 - 0x0000)
struct BP_GameState_TomatoFight_C_Show_or_Hide_Spawn_Markers final
{
public:
	bool                                          Show;                                              // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   New_Tag;                                           // 0x0004(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   Temp_text_Variable;                                // 0x0010(0x0018)()
	class FText                                   Temp_text_Variable_1;                              // 0x0028(0x0018)()
	bool                                          Temp_bool_Variable;                                // 0x0040(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_41[0x7];                                       // 0x0041(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   Temp_text_Variable_2;                              // 0x0048(0x0018)()
	class FText                                   Temp_text_Variable_3;                              // 0x0060(0x0018)()
	bool                                          Temp_bool_Variable_1;                              // 0x0078(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_79[0x7];                                       // 0x0079(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   Temp_text_Variable_4;                              // 0x0080(0x0018)()
	class FText                                   Temp_text_Variable_5;                              // 0x0098(0x0018)()
	bool                                          Temp_bool_Variable_2;                              // 0x00B0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	EMapMarkerType                                Temp_byte_Variable;                                // 0x00B1(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EMapMarkerType                                Temp_byte_Variable_1;                              // 0x00B2(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable_3;                              // 0x00B3(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	EMapMarkerType                                Temp_byte_Variable_2;                              // 0x00B4(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EMapMarkerType                                Temp_byte_Variable_3;                              // 0x00B5(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable_4;                              // 0x00B6(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	EMapMarkerType                                Temp_byte_Variable_4;                              // 0x00B7(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EMapMarkerType                                Temp_byte_Variable_5;                              // 0x00B8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable_5;                              // 0x00B9(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	EMapMarkerType                                Temp_byte_Variable_6;                              // 0x00BA(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EMapMarkerType                                Temp_byte_Variable_7;                              // 0x00BB(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable_6;                              // 0x00BC(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable_7;                              // 0x00BD(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_BE[0x2];                                       // 0x00BE(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x00C0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable_1;                  // 0x00C4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x00C8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue_1;                 // 0x00CC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Array_Index_Variable;                     // 0x00D0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable_8;                              // 0x00D4(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_D5[0x3];                                       // 0x00D5(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Temp_int_Array_Index_Variable_1;                   // 0x00D8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable_2;                  // 0x00DC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue_2;                 // 0x00E0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Array_Index_Variable_2;                   // 0x00E4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FText                                   Temp_text_Variable_6;                              // 0x00E8(0x0018)()
	int32                                         CallFunc_GetUserControllerId_ReturnValue;          // 0x0100(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_104[0x4];                                      // 0x0104(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class AHumanPlayerController*                 CallFunc_GetHumanPlayerControllerByControllerId_ReturnValue; // 0x0108(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FText                                   Temp_text_Variable_7;                              // 0x0110(0x0018)()
	class ABP_PlayerController_TomatoFight_C*     K2Node_DynamicCast_AsBP_Player_Controller_Tomato_Fight; // 0x0128(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0130(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Is_Attacker_Is_Attacker;                  // 0x0131(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Is_Attacker_Is_Attacker_1;                // 0x0132(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_133[0x5];                                      // 0x0133(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   K2Node_Select_Default;                             // 0x0138(0x0018)()
	class FText                                   K2Node_Select_Default_1;                           // 0x0150(0x0018)()
	class FText                                   K2Node_Select_Default_2;                           // 0x0168(0x0018)()
	EMapMarkerType                                K2Node_Select_Default_3;                           // 0x0180(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EMapMarkerType                                K2Node_Select_Default_4;                           // 0x0181(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EMapMarkerType                                K2Node_Select_Default_5;                           // 0x0182(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EMapMarkerType                                K2Node_Select_Default_6;                           // 0x0183(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable_9;                              // 0x0184(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_185[0x3];                                      // 0x0185(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   K2Node_Select_Default_7;                           // 0x0188(0x0018)()
	class ABP_PlayerStart_Raid_C*                 CallFunc_Array_Get_Item;                           // 0x01A0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x01A8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_K2_GetActorLocation_ReturnValue;          // 0x01AC(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x01B8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_1B9[0x7];                                      // 0x01B9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 CallFunc_GetDisplayName_ReturnValue;               // 0x01C0(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FName                                   CallFunc_Conv_StringToName_ReturnValue;            // 0x01D0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EMapMarkerType                                K2Node_Select_Default_8;                           // 0x01D8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable_10;                             // 0x01D9(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_1DA[0x2];                                      // 0x01DA(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Array_Add_ReturnValue;                    // 0x01DC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FText                                   K2Node_Select_Default_9;                           // 0x01E0(0x0018)()
	struct FS_CustomMapMarker                     K2Node_MakeStruct_S_CustomMapMarker;               // 0x01F8(0x0050)(HasGetValueTypeHash)
	EMapMarkerType                                K2Node_Select_Default_10;                          // 0x0248(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_249[0x7];                                      // 0x0249(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FS_CustomMapMarker_Optimized           CallFunc_EncodeMapMarker_Map_Marker_Optimized;     // 0x0250(0x0038)(HasGetValueTypeHash)
	bool                                          Temp_bool_Variable_11;                             // 0x0288(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_289[0x7];                                      // 0x0289(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   K2Node_Select_Default_11;                          // 0x0290(0x0018)()
	class ABP_PlayerStart_Raid_C*                 CallFunc_Array_Get_Item_1;                         // 0x02A8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   CallFunc_Array_Get_Item_2;                         // 0x02B0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_K2_GetActorLocation_ReturnValue_1;        // 0x02B8(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2C4[0x4];                                      // 0x02C4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FS_CustomMapMarker                     K2Node_MakeStruct_S_CustomMapMarker_1;             // 0x02C8(0x0050)(HasGetValueTypeHash)
	class FString                                 CallFunc_GetDisplayName_ReturnValue_1;             // 0x0318(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	struct FS_CustomMapMarker_Optimized           CallFunc_EncodeMapMarker_Map_Marker_Optimized_1;   // 0x0328(0x0038)(HasGetValueTypeHash)
	class FName                                   CallFunc_Conv_StringToName_ReturnValue_1;          // 0x0360(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue_1;               // 0x0368(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue_2;               // 0x036C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue_1;                // 0x0370(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Less_IntInt_ReturnValue_2;                // 0x0371(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_372[0x2];                                      // 0x0372(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Array_Add_ReturnValue_1;                  // 0x0374(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_GameState_TomatoFight_C_Show_or_Hide_Spawn_Markers) == 0x000008, "Wrong alignment on BP_GameState_TomatoFight_C_Show_or_Hide_Spawn_Markers");
static_assert(sizeof(BP_GameState_TomatoFight_C_Show_or_Hide_Spawn_Markers) == 0x000378, "Wrong size on BP_GameState_TomatoFight_C_Show_or_Hide_Spawn_Markers");
static_assert(offsetof(BP_GameState_TomatoFight_C_Show_or_Hide_Spawn_Markers, Show) == 0x000000, "Member 'BP_GameState_TomatoFight_C_Show_or_Hide_Spawn_Markers::Show' has a wrong offset!");
static_assert(offsetof(BP_GameState_TomatoFight_C_Show_or_Hide_Spawn_Markers, New_Tag) == 0x000004, "Member 'BP_GameState_TomatoFight_C_Show_or_Hide_Spawn_Markers::New_Tag' has a wrong offset!");
static_assert(offsetof(BP_GameState_TomatoFight_C_Show_or_Hide_Spawn_Markers, Temp_text_Variable) == 0x000010, "Member 'BP_GameState_TomatoFight_C_Show_or_Hide_Spawn_Markers::Temp_text_Variable' has a wrong offset!");
static_assert(offsetof(BP_GameState_TomatoFight_C_Show_or_Hide_Spawn_Markers, Temp_text_Variable_1) == 0x000028, "Member 'BP_GameState_TomatoFight_C_Show_or_Hide_Spawn_Markers::Temp_text_Variable_1' has a wrong offset!");
static_assert(offsetof(BP_GameState_TomatoFight_C_Show_or_Hide_Spawn_Markers, Temp_bool_Variable) == 0x000040, "Member 'BP_GameState_TomatoFight_C_Show_or_Hide_Spawn_Markers::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(BP_GameState_TomatoFight_C_Show_or_Hide_Spawn_Markers, Temp_text_Variable_2) == 0x000048, "Member 'BP_GameState_TomatoFight_C_Show_or_Hide_Spawn_Markers::Temp_text_Variable_2' has a wrong offset!");
static_assert(offsetof(BP_GameState_TomatoFight_C_Show_or_Hide_Spawn_Markers, Temp_text_Variable_3) == 0x000060, "Member 'BP_GameState_TomatoFight_C_Show_or_Hide_Spawn_Markers::Temp_text_Variable_3' has a wrong offset!");
static_assert(offsetof(BP_GameState_TomatoFight_C_Show_or_Hide_Spawn_Markers, Temp_bool_Variable_1) == 0x000078, "Member 'BP_GameState_TomatoFight_C_Show_or_Hide_Spawn_Markers::Temp_bool_Variable_1' has a wrong offset!");
static_assert(offsetof(BP_GameState_TomatoFight_C_Show_or_Hide_Spawn_Markers, Temp_text_Variable_4) == 0x000080, "Member 'BP_GameState_TomatoFight_C_Show_or_Hide_Spawn_Markers::Temp_text_Variable_4' has a wrong offset!");
static_assert(offsetof(BP_GameState_TomatoFight_C_Show_or_Hide_Spawn_Markers, Temp_text_Variable_5) == 0x000098, "Member 'BP_GameState_TomatoFight_C_Show_or_Hide_Spawn_Markers::Temp_text_Variable_5' has a wrong offset!");
static_assert(offsetof(BP_GameState_TomatoFight_C_Show_or_Hide_Spawn_Markers, Temp_bool_Variable_2) == 0x0000B0, "Member 'BP_GameState_TomatoFight_C_Show_or_Hide_Spawn_Markers::Temp_bool_Variable_2' has a wrong offset!");
static_assert(offsetof(BP_GameState_TomatoFight_C_Show_or_Hide_Spawn_Markers, Temp_byte_Variable) == 0x0000B1, "Member 'BP_GameState_TomatoFight_C_Show_or_Hide_Spawn_Markers::Temp_byte_Variable' has a wrong offset!");
static_assert(offsetof(BP_GameState_TomatoFight_C_Show_or_Hide_Spawn_Markers, Temp_byte_Variable_1) == 0x0000B2, "Member 'BP_GameState_TomatoFight_C_Show_or_Hide_Spawn_Markers::Temp_byte_Variable_1' has a wrong offset!");
static_assert(offsetof(BP_GameState_TomatoFight_C_Show_or_Hide_Spawn_Markers, Temp_bool_Variable_3) == 0x0000B3, "Member 'BP_GameState_TomatoFight_C_Show_or_Hide_Spawn_Markers::Temp_bool_Variable_3' has a wrong offset!");
static_assert(offsetof(BP_GameState_TomatoFight_C_Show_or_Hide_Spawn_Markers, Temp_byte_Variable_2) == 0x0000B4, "Member 'BP_GameState_TomatoFight_C_Show_or_Hide_Spawn_Markers::Temp_byte_Variable_2' has a wrong offset!");
static_assert(offsetof(BP_GameState_TomatoFight_C_Show_or_Hide_Spawn_Markers, Temp_byte_Variable_3) == 0x0000B5, "Member 'BP_GameState_TomatoFight_C_Show_or_Hide_Spawn_Markers::Temp_byte_Variable_3' has a wrong offset!");
static_assert(offsetof(BP_GameState_TomatoFight_C_Show_or_Hide_Spawn_Markers, Temp_bool_Variable_4) == 0x0000B6, "Member 'BP_GameState_TomatoFight_C_Show_or_Hide_Spawn_Markers::Temp_bool_Variable_4' has a wrong offset!");
static_assert(offsetof(BP_GameState_TomatoFight_C_Show_or_Hide_Spawn_Markers, Temp_byte_Variable_4) == 0x0000B7, "Member 'BP_GameState_TomatoFight_C_Show_or_Hide_Spawn_Markers::Temp_byte_Variable_4' has a wrong offset!");
static_assert(offsetof(BP_GameState_TomatoFight_C_Show_or_Hide_Spawn_Markers, Temp_byte_Variable_5) == 0x0000B8, "Member 'BP_GameState_TomatoFight_C_Show_or_Hide_Spawn_Markers::Temp_byte_Variable_5' has a wrong offset!");
static_assert(offsetof(BP_GameState_TomatoFight_C_Show_or_Hide_Spawn_Markers, Temp_bool_Variable_5) == 0x0000B9, "Member 'BP_GameState_TomatoFight_C_Show_or_Hide_Spawn_Markers::Temp_bool_Variable_5' has a wrong offset!");
static_assert(offsetof(BP_GameState_TomatoFight_C_Show_or_Hide_Spawn_Markers, Temp_byte_Variable_6) == 0x0000BA, "Member 'BP_GameState_TomatoFight_C_Show_or_Hide_Spawn_Markers::Temp_byte_Variable_6' has a wrong offset!");
static_assert(offsetof(BP_GameState_TomatoFight_C_Show_or_Hide_Spawn_Markers, Temp_byte_Variable_7) == 0x0000BB, "Member 'BP_GameState_TomatoFight_C_Show_or_Hide_Spawn_Markers::Temp_byte_Variable_7' has a wrong offset!");
static_assert(offsetof(BP_GameState_TomatoFight_C_Show_or_Hide_Spawn_Markers, Temp_bool_Variable_6) == 0x0000BC, "Member 'BP_GameState_TomatoFight_C_Show_or_Hide_Spawn_Markers::Temp_bool_Variable_6' has a wrong offset!");
static_assert(offsetof(BP_GameState_TomatoFight_C_Show_or_Hide_Spawn_Markers, Temp_bool_Variable_7) == 0x0000BD, "Member 'BP_GameState_TomatoFight_C_Show_or_Hide_Spawn_Markers::Temp_bool_Variable_7' has a wrong offset!");
static_assert(offsetof(BP_GameState_TomatoFight_C_Show_or_Hide_Spawn_Markers, Temp_int_Loop_Counter_Variable) == 0x0000C0, "Member 'BP_GameState_TomatoFight_C_Show_or_Hide_Spawn_Markers::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(BP_GameState_TomatoFight_C_Show_or_Hide_Spawn_Markers, Temp_int_Loop_Counter_Variable_1) == 0x0000C4, "Member 'BP_GameState_TomatoFight_C_Show_or_Hide_Spawn_Markers::Temp_int_Loop_Counter_Variable_1' has a wrong offset!");
static_assert(offsetof(BP_GameState_TomatoFight_C_Show_or_Hide_Spawn_Markers, CallFunc_Add_IntInt_ReturnValue) == 0x0000C8, "Member 'BP_GameState_TomatoFight_C_Show_or_Hide_Spawn_Markers::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_GameState_TomatoFight_C_Show_or_Hide_Spawn_Markers, CallFunc_Add_IntInt_ReturnValue_1) == 0x0000CC, "Member 'BP_GameState_TomatoFight_C_Show_or_Hide_Spawn_Markers::CallFunc_Add_IntInt_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_GameState_TomatoFight_C_Show_or_Hide_Spawn_Markers, Temp_int_Array_Index_Variable) == 0x0000D0, "Member 'BP_GameState_TomatoFight_C_Show_or_Hide_Spawn_Markers::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(BP_GameState_TomatoFight_C_Show_or_Hide_Spawn_Markers, Temp_bool_Variable_8) == 0x0000D4, "Member 'BP_GameState_TomatoFight_C_Show_or_Hide_Spawn_Markers::Temp_bool_Variable_8' has a wrong offset!");
static_assert(offsetof(BP_GameState_TomatoFight_C_Show_or_Hide_Spawn_Markers, Temp_int_Array_Index_Variable_1) == 0x0000D8, "Member 'BP_GameState_TomatoFight_C_Show_or_Hide_Spawn_Markers::Temp_int_Array_Index_Variable_1' has a wrong offset!");
static_assert(offsetof(BP_GameState_TomatoFight_C_Show_or_Hide_Spawn_Markers, Temp_int_Loop_Counter_Variable_2) == 0x0000DC, "Member 'BP_GameState_TomatoFight_C_Show_or_Hide_Spawn_Markers::Temp_int_Loop_Counter_Variable_2' has a wrong offset!");
static_assert(offsetof(BP_GameState_TomatoFight_C_Show_or_Hide_Spawn_Markers, CallFunc_Add_IntInt_ReturnValue_2) == 0x0000E0, "Member 'BP_GameState_TomatoFight_C_Show_or_Hide_Spawn_Markers::CallFunc_Add_IntInt_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BP_GameState_TomatoFight_C_Show_or_Hide_Spawn_Markers, Temp_int_Array_Index_Variable_2) == 0x0000E4, "Member 'BP_GameState_TomatoFight_C_Show_or_Hide_Spawn_Markers::Temp_int_Array_Index_Variable_2' has a wrong offset!");
static_assert(offsetof(BP_GameState_TomatoFight_C_Show_or_Hide_Spawn_Markers, Temp_text_Variable_6) == 0x0000E8, "Member 'BP_GameState_TomatoFight_C_Show_or_Hide_Spawn_Markers::Temp_text_Variable_6' has a wrong offset!");
static_assert(offsetof(BP_GameState_TomatoFight_C_Show_or_Hide_Spawn_Markers, CallFunc_GetUserControllerId_ReturnValue) == 0x000100, "Member 'BP_GameState_TomatoFight_C_Show_or_Hide_Spawn_Markers::CallFunc_GetUserControllerId_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_GameState_TomatoFight_C_Show_or_Hide_Spawn_Markers, CallFunc_GetHumanPlayerControllerByControllerId_ReturnValue) == 0x000108, "Member 'BP_GameState_TomatoFight_C_Show_or_Hide_Spawn_Markers::CallFunc_GetHumanPlayerControllerByControllerId_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_GameState_TomatoFight_C_Show_or_Hide_Spawn_Markers, Temp_text_Variable_7) == 0x000110, "Member 'BP_GameState_TomatoFight_C_Show_or_Hide_Spawn_Markers::Temp_text_Variable_7' has a wrong offset!");
static_assert(offsetof(BP_GameState_TomatoFight_C_Show_or_Hide_Spawn_Markers, K2Node_DynamicCast_AsBP_Player_Controller_Tomato_Fight) == 0x000128, "Member 'BP_GameState_TomatoFight_C_Show_or_Hide_Spawn_Markers::K2Node_DynamicCast_AsBP_Player_Controller_Tomato_Fight' has a wrong offset!");
static_assert(offsetof(BP_GameState_TomatoFight_C_Show_or_Hide_Spawn_Markers, K2Node_DynamicCast_bSuccess) == 0x000130, "Member 'BP_GameState_TomatoFight_C_Show_or_Hide_Spawn_Markers::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(BP_GameState_TomatoFight_C_Show_or_Hide_Spawn_Markers, CallFunc_Is_Attacker_Is_Attacker) == 0x000131, "Member 'BP_GameState_TomatoFight_C_Show_or_Hide_Spawn_Markers::CallFunc_Is_Attacker_Is_Attacker' has a wrong offset!");
static_assert(offsetof(BP_GameState_TomatoFight_C_Show_or_Hide_Spawn_Markers, CallFunc_Is_Attacker_Is_Attacker_1) == 0x000132, "Member 'BP_GameState_TomatoFight_C_Show_or_Hide_Spawn_Markers::CallFunc_Is_Attacker_Is_Attacker_1' has a wrong offset!");
static_assert(offsetof(BP_GameState_TomatoFight_C_Show_or_Hide_Spawn_Markers, K2Node_Select_Default) == 0x000138, "Member 'BP_GameState_TomatoFight_C_Show_or_Hide_Spawn_Markers::K2Node_Select_Default' has a wrong offset!");
static_assert(offsetof(BP_GameState_TomatoFight_C_Show_or_Hide_Spawn_Markers, K2Node_Select_Default_1) == 0x000150, "Member 'BP_GameState_TomatoFight_C_Show_or_Hide_Spawn_Markers::K2Node_Select_Default_1' has a wrong offset!");
static_assert(offsetof(BP_GameState_TomatoFight_C_Show_or_Hide_Spawn_Markers, K2Node_Select_Default_2) == 0x000168, "Member 'BP_GameState_TomatoFight_C_Show_or_Hide_Spawn_Markers::K2Node_Select_Default_2' has a wrong offset!");
static_assert(offsetof(BP_GameState_TomatoFight_C_Show_or_Hide_Spawn_Markers, K2Node_Select_Default_3) == 0x000180, "Member 'BP_GameState_TomatoFight_C_Show_or_Hide_Spawn_Markers::K2Node_Select_Default_3' has a wrong offset!");
static_assert(offsetof(BP_GameState_TomatoFight_C_Show_or_Hide_Spawn_Markers, K2Node_Select_Default_4) == 0x000181, "Member 'BP_GameState_TomatoFight_C_Show_or_Hide_Spawn_Markers::K2Node_Select_Default_4' has a wrong offset!");
static_assert(offsetof(BP_GameState_TomatoFight_C_Show_or_Hide_Spawn_Markers, K2Node_Select_Default_5) == 0x000182, "Member 'BP_GameState_TomatoFight_C_Show_or_Hide_Spawn_Markers::K2Node_Select_Default_5' has a wrong offset!");
static_assert(offsetof(BP_GameState_TomatoFight_C_Show_or_Hide_Spawn_Markers, K2Node_Select_Default_6) == 0x000183, "Member 'BP_GameState_TomatoFight_C_Show_or_Hide_Spawn_Markers::K2Node_Select_Default_6' has a wrong offset!");
static_assert(offsetof(BP_GameState_TomatoFight_C_Show_or_Hide_Spawn_Markers, Temp_bool_Variable_9) == 0x000184, "Member 'BP_GameState_TomatoFight_C_Show_or_Hide_Spawn_Markers::Temp_bool_Variable_9' has a wrong offset!");
static_assert(offsetof(BP_GameState_TomatoFight_C_Show_or_Hide_Spawn_Markers, K2Node_Select_Default_7) == 0x000188, "Member 'BP_GameState_TomatoFight_C_Show_or_Hide_Spawn_Markers::K2Node_Select_Default_7' has a wrong offset!");
static_assert(offsetof(BP_GameState_TomatoFight_C_Show_or_Hide_Spawn_Markers, CallFunc_Array_Get_Item) == 0x0001A0, "Member 'BP_GameState_TomatoFight_C_Show_or_Hide_Spawn_Markers::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(BP_GameState_TomatoFight_C_Show_or_Hide_Spawn_Markers, CallFunc_Array_Length_ReturnValue) == 0x0001A8, "Member 'BP_GameState_TomatoFight_C_Show_or_Hide_Spawn_Markers::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_GameState_TomatoFight_C_Show_or_Hide_Spawn_Markers, CallFunc_K2_GetActorLocation_ReturnValue) == 0x0001AC, "Member 'BP_GameState_TomatoFight_C_Show_or_Hide_Spawn_Markers::CallFunc_K2_GetActorLocation_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_GameState_TomatoFight_C_Show_or_Hide_Spawn_Markers, CallFunc_Less_IntInt_ReturnValue) == 0x0001B8, "Member 'BP_GameState_TomatoFight_C_Show_or_Hide_Spawn_Markers::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_GameState_TomatoFight_C_Show_or_Hide_Spawn_Markers, CallFunc_GetDisplayName_ReturnValue) == 0x0001C0, "Member 'BP_GameState_TomatoFight_C_Show_or_Hide_Spawn_Markers::CallFunc_GetDisplayName_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_GameState_TomatoFight_C_Show_or_Hide_Spawn_Markers, CallFunc_Conv_StringToName_ReturnValue) == 0x0001D0, "Member 'BP_GameState_TomatoFight_C_Show_or_Hide_Spawn_Markers::CallFunc_Conv_StringToName_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_GameState_TomatoFight_C_Show_or_Hide_Spawn_Markers, K2Node_Select_Default_8) == 0x0001D8, "Member 'BP_GameState_TomatoFight_C_Show_or_Hide_Spawn_Markers::K2Node_Select_Default_8' has a wrong offset!");
static_assert(offsetof(BP_GameState_TomatoFight_C_Show_or_Hide_Spawn_Markers, Temp_bool_Variable_10) == 0x0001D9, "Member 'BP_GameState_TomatoFight_C_Show_or_Hide_Spawn_Markers::Temp_bool_Variable_10' has a wrong offset!");
static_assert(offsetof(BP_GameState_TomatoFight_C_Show_or_Hide_Spawn_Markers, CallFunc_Array_Add_ReturnValue) == 0x0001DC, "Member 'BP_GameState_TomatoFight_C_Show_or_Hide_Spawn_Markers::CallFunc_Array_Add_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_GameState_TomatoFight_C_Show_or_Hide_Spawn_Markers, K2Node_Select_Default_9) == 0x0001E0, "Member 'BP_GameState_TomatoFight_C_Show_or_Hide_Spawn_Markers::K2Node_Select_Default_9' has a wrong offset!");
static_assert(offsetof(BP_GameState_TomatoFight_C_Show_or_Hide_Spawn_Markers, K2Node_MakeStruct_S_CustomMapMarker) == 0x0001F8, "Member 'BP_GameState_TomatoFight_C_Show_or_Hide_Spawn_Markers::K2Node_MakeStruct_S_CustomMapMarker' has a wrong offset!");
static_assert(offsetof(BP_GameState_TomatoFight_C_Show_or_Hide_Spawn_Markers, K2Node_Select_Default_10) == 0x000248, "Member 'BP_GameState_TomatoFight_C_Show_or_Hide_Spawn_Markers::K2Node_Select_Default_10' has a wrong offset!");
static_assert(offsetof(BP_GameState_TomatoFight_C_Show_or_Hide_Spawn_Markers, CallFunc_EncodeMapMarker_Map_Marker_Optimized) == 0x000250, "Member 'BP_GameState_TomatoFight_C_Show_or_Hide_Spawn_Markers::CallFunc_EncodeMapMarker_Map_Marker_Optimized' has a wrong offset!");
static_assert(offsetof(BP_GameState_TomatoFight_C_Show_or_Hide_Spawn_Markers, Temp_bool_Variable_11) == 0x000288, "Member 'BP_GameState_TomatoFight_C_Show_or_Hide_Spawn_Markers::Temp_bool_Variable_11' has a wrong offset!");
static_assert(offsetof(BP_GameState_TomatoFight_C_Show_or_Hide_Spawn_Markers, K2Node_Select_Default_11) == 0x000290, "Member 'BP_GameState_TomatoFight_C_Show_or_Hide_Spawn_Markers::K2Node_Select_Default_11' has a wrong offset!");
static_assert(offsetof(BP_GameState_TomatoFight_C_Show_or_Hide_Spawn_Markers, CallFunc_Array_Get_Item_1) == 0x0002A8, "Member 'BP_GameState_TomatoFight_C_Show_or_Hide_Spawn_Markers::CallFunc_Array_Get_Item_1' has a wrong offset!");
static_assert(offsetof(BP_GameState_TomatoFight_C_Show_or_Hide_Spawn_Markers, CallFunc_Array_Get_Item_2) == 0x0002B0, "Member 'BP_GameState_TomatoFight_C_Show_or_Hide_Spawn_Markers::CallFunc_Array_Get_Item_2' has a wrong offset!");
static_assert(offsetof(BP_GameState_TomatoFight_C_Show_or_Hide_Spawn_Markers, CallFunc_K2_GetActorLocation_ReturnValue_1) == 0x0002B8, "Member 'BP_GameState_TomatoFight_C_Show_or_Hide_Spawn_Markers::CallFunc_K2_GetActorLocation_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_GameState_TomatoFight_C_Show_or_Hide_Spawn_Markers, K2Node_MakeStruct_S_CustomMapMarker_1) == 0x0002C8, "Member 'BP_GameState_TomatoFight_C_Show_or_Hide_Spawn_Markers::K2Node_MakeStruct_S_CustomMapMarker_1' has a wrong offset!");
static_assert(offsetof(BP_GameState_TomatoFight_C_Show_or_Hide_Spawn_Markers, CallFunc_GetDisplayName_ReturnValue_1) == 0x000318, "Member 'BP_GameState_TomatoFight_C_Show_or_Hide_Spawn_Markers::CallFunc_GetDisplayName_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_GameState_TomatoFight_C_Show_or_Hide_Spawn_Markers, CallFunc_EncodeMapMarker_Map_Marker_Optimized_1) == 0x000328, "Member 'BP_GameState_TomatoFight_C_Show_or_Hide_Spawn_Markers::CallFunc_EncodeMapMarker_Map_Marker_Optimized_1' has a wrong offset!");
static_assert(offsetof(BP_GameState_TomatoFight_C_Show_or_Hide_Spawn_Markers, CallFunc_Conv_StringToName_ReturnValue_1) == 0x000360, "Member 'BP_GameState_TomatoFight_C_Show_or_Hide_Spawn_Markers::CallFunc_Conv_StringToName_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_GameState_TomatoFight_C_Show_or_Hide_Spawn_Markers, CallFunc_Array_Length_ReturnValue_1) == 0x000368, "Member 'BP_GameState_TomatoFight_C_Show_or_Hide_Spawn_Markers::CallFunc_Array_Length_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_GameState_TomatoFight_C_Show_or_Hide_Spawn_Markers, CallFunc_Array_Length_ReturnValue_2) == 0x00036C, "Member 'BP_GameState_TomatoFight_C_Show_or_Hide_Spawn_Markers::CallFunc_Array_Length_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BP_GameState_TomatoFight_C_Show_or_Hide_Spawn_Markers, CallFunc_Less_IntInt_ReturnValue_1) == 0x000370, "Member 'BP_GameState_TomatoFight_C_Show_or_Hide_Spawn_Markers::CallFunc_Less_IntInt_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_GameState_TomatoFight_C_Show_or_Hide_Spawn_Markers, CallFunc_Less_IntInt_ReturnValue_2) == 0x000371, "Member 'BP_GameState_TomatoFight_C_Show_or_Hide_Spawn_Markers::CallFunc_Less_IntInt_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BP_GameState_TomatoFight_C_Show_or_Hide_Spawn_Markers, CallFunc_Array_Add_ReturnValue_1) == 0x000374, "Member 'BP_GameState_TomatoFight_C_Show_or_Hide_Spawn_Markers::CallFunc_Array_Add_ReturnValue_1' has a wrong offset!");

// Function BP_GameState_TomatoFight.BP_GameState_TomatoFight_C.GetGameVariant
// 0x0001 (0x0001 - 0x0000)
struct BP_GameState_TomatoFight_C_GetGameVariant final
{
public:
	EFightVariant                                 Variant;                                           // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_GameState_TomatoFight_C_GetGameVariant) == 0x000001, "Wrong alignment on BP_GameState_TomatoFight_C_GetGameVariant");
static_assert(sizeof(BP_GameState_TomatoFight_C_GetGameVariant) == 0x000001, "Wrong size on BP_GameState_TomatoFight_C_GetGameVariant");
static_assert(offsetof(BP_GameState_TomatoFight_C_GetGameVariant, Variant) == 0x000000, "Member 'BP_GameState_TomatoFight_C_GetGameVariant::Variant' has a wrong offset!");

// Function BP_GameState_TomatoFight.BP_GameState_TomatoFight_C.SetGameVariant
// 0x0020 (0x0020 - 0x0000)
struct BP_GameState_TomatoFight_C_SetGameVariant final
{
public:
	class UFlameGameInstance*                     CallFunc_GetFlameGameInstance_ReturnValue;         // 0x0000(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FString                                 CallFunc_GetLastGameModeAlias_ReturnValue;         // 0x0008(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	bool                                          K2Node_SwitchString_CmpSuccess;                    // 0x0018(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_GameState_TomatoFight_C_SetGameVariant) == 0x000008, "Wrong alignment on BP_GameState_TomatoFight_C_SetGameVariant");
static_assert(sizeof(BP_GameState_TomatoFight_C_SetGameVariant) == 0x000020, "Wrong size on BP_GameState_TomatoFight_C_SetGameVariant");
static_assert(offsetof(BP_GameState_TomatoFight_C_SetGameVariant, CallFunc_GetFlameGameInstance_ReturnValue) == 0x000000, "Member 'BP_GameState_TomatoFight_C_SetGameVariant::CallFunc_GetFlameGameInstance_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_GameState_TomatoFight_C_SetGameVariant, CallFunc_GetLastGameModeAlias_ReturnValue) == 0x000008, "Member 'BP_GameState_TomatoFight_C_SetGameVariant::CallFunc_GetLastGameModeAlias_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_GameState_TomatoFight_C_SetGameVariant, K2Node_SwitchString_CmpSuccess) == 0x000018, "Member 'BP_GameState_TomatoFight_C_SetGameVariant::K2Node_SwitchString_CmpSuccess' has a wrong offset!");

// Function BP_GameState_TomatoFight.BP_GameState_TomatoFight_C.ReceivedMatchPhaseReplication
// 0x0028 (0x0028 - 0x0000)
struct BP_GameState_TomatoFight_C_ReceivedMatchPhaseReplication final
{
public:
	E_TeamsMatchPhase                             Match_Phase_0;                                     // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_GetUserControllerId_ReturnValue;          // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AHumanPlayerController*                 CallFunc_GetHumanPlayerControllerByControllerId_ReturnValue; // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsDedicatedServer_ReturnValue;            // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class ABP_PlayerController_TomatoFight_C*     K2Node_DynamicCast_AsBP_Player_Controller_Tomato_Fight; // 0x0018(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0020(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         CallFunc_MakeLiteralByte_ReturnValue;              // 0x0021(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         CallFunc_MakeLiteralByte_ReturnValue_1;            // 0x0022(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_ByteByte_ReturnValue;                // 0x0023(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Greater_ByteByte_ReturnValue;             // 0x0024(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanAND_ReturnValue;                   // 0x0025(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_GameState_TomatoFight_C_ReceivedMatchPhaseReplication) == 0x000008, "Wrong alignment on BP_GameState_TomatoFight_C_ReceivedMatchPhaseReplication");
static_assert(sizeof(BP_GameState_TomatoFight_C_ReceivedMatchPhaseReplication) == 0x000028, "Wrong size on BP_GameState_TomatoFight_C_ReceivedMatchPhaseReplication");
static_assert(offsetof(BP_GameState_TomatoFight_C_ReceivedMatchPhaseReplication, Match_Phase_0) == 0x000000, "Member 'BP_GameState_TomatoFight_C_ReceivedMatchPhaseReplication::Match_Phase_0' has a wrong offset!");
static_assert(offsetof(BP_GameState_TomatoFight_C_ReceivedMatchPhaseReplication, CallFunc_GetUserControllerId_ReturnValue) == 0x000004, "Member 'BP_GameState_TomatoFight_C_ReceivedMatchPhaseReplication::CallFunc_GetUserControllerId_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_GameState_TomatoFight_C_ReceivedMatchPhaseReplication, CallFunc_GetHumanPlayerControllerByControllerId_ReturnValue) == 0x000008, "Member 'BP_GameState_TomatoFight_C_ReceivedMatchPhaseReplication::CallFunc_GetHumanPlayerControllerByControllerId_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_GameState_TomatoFight_C_ReceivedMatchPhaseReplication, CallFunc_IsDedicatedServer_ReturnValue) == 0x000010, "Member 'BP_GameState_TomatoFight_C_ReceivedMatchPhaseReplication::CallFunc_IsDedicatedServer_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_GameState_TomatoFight_C_ReceivedMatchPhaseReplication, K2Node_DynamicCast_AsBP_Player_Controller_Tomato_Fight) == 0x000018, "Member 'BP_GameState_TomatoFight_C_ReceivedMatchPhaseReplication::K2Node_DynamicCast_AsBP_Player_Controller_Tomato_Fight' has a wrong offset!");
static_assert(offsetof(BP_GameState_TomatoFight_C_ReceivedMatchPhaseReplication, K2Node_DynamicCast_bSuccess) == 0x000020, "Member 'BP_GameState_TomatoFight_C_ReceivedMatchPhaseReplication::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(BP_GameState_TomatoFight_C_ReceivedMatchPhaseReplication, CallFunc_MakeLiteralByte_ReturnValue) == 0x000021, "Member 'BP_GameState_TomatoFight_C_ReceivedMatchPhaseReplication::CallFunc_MakeLiteralByte_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_GameState_TomatoFight_C_ReceivedMatchPhaseReplication, CallFunc_MakeLiteralByte_ReturnValue_1) == 0x000022, "Member 'BP_GameState_TomatoFight_C_ReceivedMatchPhaseReplication::CallFunc_MakeLiteralByte_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_GameState_TomatoFight_C_ReceivedMatchPhaseReplication, CallFunc_Less_ByteByte_ReturnValue) == 0x000023, "Member 'BP_GameState_TomatoFight_C_ReceivedMatchPhaseReplication::CallFunc_Less_ByteByte_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_GameState_TomatoFight_C_ReceivedMatchPhaseReplication, CallFunc_Greater_ByteByte_ReturnValue) == 0x000024, "Member 'BP_GameState_TomatoFight_C_ReceivedMatchPhaseReplication::CallFunc_Greater_ByteByte_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_GameState_TomatoFight_C_ReceivedMatchPhaseReplication, CallFunc_BooleanAND_ReturnValue) == 0x000025, "Member 'BP_GameState_TomatoFight_C_ReceivedMatchPhaseReplication::CallFunc_BooleanAND_ReturnValue' has a wrong offset!");

// Function BP_GameState_TomatoFight.BP_GameState_TomatoFight_C.GetGameModeStringName
// 0x0030 (0x0030 - 0x0000)
struct BP_GameState_TomatoFight_C_GetGameModeStringName final
{
public:
	class FString                                 StringName;                                        // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, HasGetValueTypeHash)
	class FString                                 CallFunc_Conv_IntToString_ReturnValue;             // 0x0010(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FString                                 CallFunc_Concat_StrStr_ReturnValue;                // 0x0020(0x0010)(ZeroConstructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_GameState_TomatoFight_C_GetGameModeStringName) == 0x000008, "Wrong alignment on BP_GameState_TomatoFight_C_GetGameModeStringName");
static_assert(sizeof(BP_GameState_TomatoFight_C_GetGameModeStringName) == 0x000030, "Wrong size on BP_GameState_TomatoFight_C_GetGameModeStringName");
static_assert(offsetof(BP_GameState_TomatoFight_C_GetGameModeStringName, StringName) == 0x000000, "Member 'BP_GameState_TomatoFight_C_GetGameModeStringName::StringName' has a wrong offset!");
static_assert(offsetof(BP_GameState_TomatoFight_C_GetGameModeStringName, CallFunc_Conv_IntToString_ReturnValue) == 0x000010, "Member 'BP_GameState_TomatoFight_C_GetGameModeStringName::CallFunc_Conv_IntToString_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_GameState_TomatoFight_C_GetGameModeStringName, CallFunc_Concat_StrStr_ReturnValue) == 0x000020, "Member 'BP_GameState_TomatoFight_C_GetGameModeStringName::CallFunc_Concat_StrStr_ReturnValue' has a wrong offset!");

}

