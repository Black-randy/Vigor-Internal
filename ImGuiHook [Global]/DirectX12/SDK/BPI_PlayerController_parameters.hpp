#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BPI_PlayerController

#include "Basic.hpp"

#include "CoreUObject_structs.hpp"


namespace SDK::Params
{

// Function BPI_PlayerController.BPI_PlayerController_C.AddUserMessage
// 0x0040 (0x0040 - 0x0000)
struct BPI_PlayerController_C_AddUserMessage final
{
public:
	class FText                                   Message;                                           // 0x0000(0x0018)(BlueprintVisible, BlueprintReadOnly, Parm)
	TSoftObjectPtr<class USoundBase>              Optional2D_Sound;                                  // 0x0018(0x0028)(BlueprintVisible, BlueprintReadOnly, Parm, HasGetValueTypeHash)
};
static_assert(alignof(BPI_PlayerController_C_AddUserMessage) == 0x000008, "Wrong alignment on BPI_PlayerController_C_AddUserMessage");
static_assert(sizeof(BPI_PlayerController_C_AddUserMessage) == 0x000040, "Wrong size on BPI_PlayerController_C_AddUserMessage");
static_assert(offsetof(BPI_PlayerController_C_AddUserMessage, Message) == 0x000000, "Member 'BPI_PlayerController_C_AddUserMessage::Message' has a wrong offset!");
static_assert(offsetof(BPI_PlayerController_C_AddUserMessage, Optional2D_Sound) == 0x000018, "Member 'BPI_PlayerController_C_AddUserMessage::Optional2D_Sound' has a wrong offset!");

// Function BPI_PlayerController.BPI_PlayerController_C.BPI_RegisterMapMarkedActor
// 0x0018 (0x0018 - 0x0000)
struct BPI_PlayerController_C_BPI_RegisterMapMarkedActor final
{
public:
	class UBP_MapMarkerComponent_C*               MarkerComponent;                                   // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bValid;                                            // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   UsedTag;                                           // 0x000C(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BPI_PlayerController_C_BPI_RegisterMapMarkedActor) == 0x000008, "Wrong alignment on BPI_PlayerController_C_BPI_RegisterMapMarkedActor");
static_assert(sizeof(BPI_PlayerController_C_BPI_RegisterMapMarkedActor) == 0x000018, "Wrong size on BPI_PlayerController_C_BPI_RegisterMapMarkedActor");
static_assert(offsetof(BPI_PlayerController_C_BPI_RegisterMapMarkedActor, MarkerComponent) == 0x000000, "Member 'BPI_PlayerController_C_BPI_RegisterMapMarkedActor::MarkerComponent' has a wrong offset!");
static_assert(offsetof(BPI_PlayerController_C_BPI_RegisterMapMarkedActor, bValid) == 0x000008, "Member 'BPI_PlayerController_C_BPI_RegisterMapMarkedActor::bValid' has a wrong offset!");
static_assert(offsetof(BPI_PlayerController_C_BPI_RegisterMapMarkedActor, UsedTag) == 0x00000C, "Member 'BPI_PlayerController_C_BPI_RegisterMapMarkedActor::UsedTag' has a wrong offset!");

// Function BPI_PlayerController.BPI_PlayerController_C.BPI_UnRegisterMapMarkedActor
// 0x0010 (0x0010 - 0x0000)
struct BPI_PlayerController_C_BPI_UnRegisterMapMarkedActor final
{
public:
	class UBP_MapMarkerComponent_C*               MarkerComponent;                                   // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Success;                                           // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BPI_PlayerController_C_BPI_UnRegisterMapMarkedActor) == 0x000008, "Wrong alignment on BPI_PlayerController_C_BPI_UnRegisterMapMarkedActor");
static_assert(sizeof(BPI_PlayerController_C_BPI_UnRegisterMapMarkedActor) == 0x000010, "Wrong size on BPI_PlayerController_C_BPI_UnRegisterMapMarkedActor");
static_assert(offsetof(BPI_PlayerController_C_BPI_UnRegisterMapMarkedActor, MarkerComponent) == 0x000000, "Member 'BPI_PlayerController_C_BPI_UnRegisterMapMarkedActor::MarkerComponent' has a wrong offset!");
static_assert(offsetof(BPI_PlayerController_C_BPI_UnRegisterMapMarkedActor, Success) == 0x000008, "Member 'BPI_PlayerController_C_BPI_UnRegisterMapMarkedActor::Success' has a wrong offset!");

// Function BPI_PlayerController.BPI_PlayerController_C.GetLobbyStateAndTimes
// 0x000C (0x000C - 0x0000)
struct BPI_PlayerController_C_GetLobbyStateAndTimes final
{
public:
	bool                                          Valid;                                             // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          HasMatchStarted;                                   // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          DelayedMatchStartIsInEffect;                       // 0x0002(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_3[0x1];                                        // 0x0003(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         RemainingTimeToEncounter;                          // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         TotalTimeToEncounter;                              // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BPI_PlayerController_C_GetLobbyStateAndTimes) == 0x000004, "Wrong alignment on BPI_PlayerController_C_GetLobbyStateAndTimes");
static_assert(sizeof(BPI_PlayerController_C_GetLobbyStateAndTimes) == 0x00000C, "Wrong size on BPI_PlayerController_C_GetLobbyStateAndTimes");
static_assert(offsetof(BPI_PlayerController_C_GetLobbyStateAndTimes, Valid) == 0x000000, "Member 'BPI_PlayerController_C_GetLobbyStateAndTimes::Valid' has a wrong offset!");
static_assert(offsetof(BPI_PlayerController_C_GetLobbyStateAndTimes, HasMatchStarted) == 0x000001, "Member 'BPI_PlayerController_C_GetLobbyStateAndTimes::HasMatchStarted' has a wrong offset!");
static_assert(offsetof(BPI_PlayerController_C_GetLobbyStateAndTimes, DelayedMatchStartIsInEffect) == 0x000002, "Member 'BPI_PlayerController_C_GetLobbyStateAndTimes::DelayedMatchStartIsInEffect' has a wrong offset!");
static_assert(offsetof(BPI_PlayerController_C_GetLobbyStateAndTimes, RemainingTimeToEncounter) == 0x000004, "Member 'BPI_PlayerController_C_GetLobbyStateAndTimes::RemainingTimeToEncounter' has a wrong offset!");
static_assert(offsetof(BPI_PlayerController_C_GetLobbyStateAndTimes, TotalTimeToEncounter) == 0x000008, "Member 'BPI_PlayerController_C_GetLobbyStateAndTimes::TotalTimeToEncounter' has a wrong offset!");

// Function BPI_PlayerController.BPI_PlayerController_C.GetGroupID
// 0x0018 (0x0018 - 0x0000)
struct BPI_PlayerController_C_GetGroupID final
{
public:
	bool                                          Valid;                                             // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 GroupId;                                           // 0x0008(0x0010)(Parm, OutParm, ZeroConstructor, HasGetValueTypeHash)
};
static_assert(alignof(BPI_PlayerController_C_GetGroupID) == 0x000008, "Wrong alignment on BPI_PlayerController_C_GetGroupID");
static_assert(sizeof(BPI_PlayerController_C_GetGroupID) == 0x000018, "Wrong size on BPI_PlayerController_C_GetGroupID");
static_assert(offsetof(BPI_PlayerController_C_GetGroupID, Valid) == 0x000000, "Member 'BPI_PlayerController_C_GetGroupID::Valid' has a wrong offset!");
static_assert(offsetof(BPI_PlayerController_C_GetGroupID, GroupId) == 0x000008, "Member 'BPI_PlayerController_C_GetGroupID::GroupId' has a wrong offset!");

// Function BPI_PlayerController.BPI_PlayerController_C.GetLastRespawnTime
// 0x0010 (0x0010 - 0x0000)
struct BPI_PlayerController_C_GetLastRespawnTime final
{
public:
	bool                                          Valid;                                             // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FDateTime                              LastRespawnTime;                                   // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BPI_PlayerController_C_GetLastRespawnTime) == 0x000008, "Wrong alignment on BPI_PlayerController_C_GetLastRespawnTime");
static_assert(sizeof(BPI_PlayerController_C_GetLastRespawnTime) == 0x000010, "Wrong size on BPI_PlayerController_C_GetLastRespawnTime");
static_assert(offsetof(BPI_PlayerController_C_GetLastRespawnTime, Valid) == 0x000000, "Member 'BPI_PlayerController_C_GetLastRespawnTime::Valid' has a wrong offset!");
static_assert(offsetof(BPI_PlayerController_C_GetLastRespawnTime, LastRespawnTime) == 0x000008, "Member 'BPI_PlayerController_C_GetLastRespawnTime::LastRespawnTime' has a wrong offset!");

// Function BPI_PlayerController.BPI_PlayerController_C.GetLastMatchID_Info
// 0x0018 (0x0018 - 0x0000)
struct BPI_PlayerController_C_GetLastMatchID_Info final
{
public:
	bool                                          Valid;                                             // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          LastMatchIDReset;                                  // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_2[0x6];                                        // 0x0002(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 MatchID_ToSave;                                    // 0x0008(0x0010)(Parm, OutParm, ZeroConstructor, HasGetValueTypeHash)
};
static_assert(alignof(BPI_PlayerController_C_GetLastMatchID_Info) == 0x000008, "Wrong alignment on BPI_PlayerController_C_GetLastMatchID_Info");
static_assert(sizeof(BPI_PlayerController_C_GetLastMatchID_Info) == 0x000018, "Wrong size on BPI_PlayerController_C_GetLastMatchID_Info");
static_assert(offsetof(BPI_PlayerController_C_GetLastMatchID_Info, Valid) == 0x000000, "Member 'BPI_PlayerController_C_GetLastMatchID_Info::Valid' has a wrong offset!");
static_assert(offsetof(BPI_PlayerController_C_GetLastMatchID_Info, LastMatchIDReset) == 0x000001, "Member 'BPI_PlayerController_C_GetLastMatchID_Info::LastMatchIDReset' has a wrong offset!");
static_assert(offsetof(BPI_PlayerController_C_GetLastMatchID_Info, MatchID_ToSave) == 0x000008, "Member 'BPI_PlayerController_C_GetLastMatchID_Info::MatchID_ToSave' has a wrong offset!");

}

