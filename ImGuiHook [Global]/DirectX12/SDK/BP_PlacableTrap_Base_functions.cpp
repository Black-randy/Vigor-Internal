#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_PlacableTrap_Base

#include "Basic.hpp"

#include "BP_PlacableTrap_Base_classes.hpp"
#include "BP_PlacableTrap_Base_parameters.hpp"


namespace SDK
{

// Function BP_PlacableTrap_Base.BP_PlacableTrap_Base_C.ExecuteUbergraph_BP_PlacableTrap_Base
// (Final, UbergraphFunction, HasDefaults)
// Parameters:
// int32                                   EntryPoint                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_PlacableTrap_Base_C::ExecuteUbergraph_BP_PlacableTrap_Base(int32 EntryPoint)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PlacableTrap_Base_C", "ExecuteUbergraph_BP_PlacableTrap_Base");

	Params::BP_PlacableTrap_Base_C_ExecuteUbergraph_BP_PlacableTrap_Base Parms{};

	Parms.EntryPoint = EntryPoint;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_PlacableTrap_Base.BP_PlacableTrap_Base_C.ReceiveDestroyed
// (Event, Public, BlueprintEvent)

void ABP_PlacableTrap_Base_C::ReceiveDestroyed()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PlacableTrap_Base_C", "ReceiveDestroyed");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_PlacableTrap_Base.BP_PlacableTrap_Base_C.OnUngotFromHandsImplementable
// (Event, Protected, BlueprintEvent)
// Parameters:
// class AHumanCharacter*                  ParentCharacter                                        (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_PlacableTrap_Base_C::OnUngotFromHandsImplementable(class AHumanCharacter* ParentCharacter)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PlacableTrap_Base_C", "OnUngotFromHandsImplementable");

	Params::BP_PlacableTrap_Base_C_OnUngotFromHandsImplementable Parms{};

	Parms.ParentCharacter = ParentCharacter;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_PlacableTrap_Base.BP_PlacableTrap_Base_C.OnGotIntoHandsImplementable
// (Event, Protected, BlueprintEvent)
// Parameters:
// class AHumanCharacter*                  ParentCharacter                                        (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_PlacableTrap_Base_C::OnGotIntoHandsImplementable(class AHumanCharacter* ParentCharacter)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PlacableTrap_Base_C", "OnGotIntoHandsImplementable");

	Params::BP_PlacableTrap_Base_C_OnGotIntoHandsImplementable Parms{};

	Parms.ParentCharacter = ParentCharacter;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_PlacableTrap_Base.BP_PlacableTrap_Base_C.Trap_Set_Variables
// (Net, NetReliable, NetServer, BlueprintCallable, BlueprintEvent)
// Parameters:
// class ABP_PlacableTrap_Object_Base_C*   PlacedTrap                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_PlacableTrap_Base_C::Trap_Set_Variables(class ABP_PlacableTrap_Object_Base_C* PlacedTrap)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PlacableTrap_Base_C", "Trap_Set_Variables");

	Params::BP_PlacableTrap_Base_C_Trap_Set_Variables Parms{};

	Parms.PlacedTrap = PlacedTrap;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_PlacableTrap_Base.BP_PlacableTrap_Base_C.ReplicateTrapCanBePlaced
// (Net, NetReliable, NetServer, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    TrapCanBePlaced                                        (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ABP_PlacableTrap_Base_C::ReplicateTrapCanBePlaced(bool TrapCanBePlaced)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PlacableTrap_Base_C", "ReplicateTrapCanBePlaced");

	Params::BP_PlacableTrap_Base_C_ReplicateTrapCanBePlaced Parms{};

	Parms.TrapCanBePlaced = TrapCanBePlaced;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_PlacableTrap_Base.BP_PlacableTrap_Base_C.ReceiveTick
// (Event, Public, BlueprintEvent)
// Parameters:
// float                                   DeltaSeconds                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_PlacableTrap_Base_C::ReceiveTick(float DeltaSeconds)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PlacableTrap_Base_C", "ReceiveTick");

	Params::BP_PlacableTrap_Base_C_ReceiveTick Parms{};

	Parms.DeltaSeconds = DeltaSeconds;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_PlacableTrap_Base.BP_PlacableTrap_Base_C.Trap_Hologram_Move
// (Net, NetReliable, NetClient, BlueprintCallable, BlueprintEvent)

void ABP_PlacableTrap_Base_C::Trap_Hologram_Move()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PlacableTrap_Base_C", "Trap_Hologram_Move");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_PlacableTrap_Base.BP_PlacableTrap_Base_C.HideHologram
// (Net, NetClient, BlueprintCallable, BlueprintEvent)

void ABP_PlacableTrap_Base_C::HideHologram()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PlacableTrap_Base_C", "HideHologram");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_PlacableTrap_Base.BP_PlacableTrap_Base_C.ShowHologram
// (Net, NetReliable, NetClient, BlueprintCallable, BlueprintEvent)

void ABP_PlacableTrap_Base_C::ShowHologram()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PlacableTrap_Base_C", "ShowHologram");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_PlacableTrap_Base.BP_PlacableTrap_Base_C.Trap_Object_Spawn
// (Net, NetReliable, NetServer, BlueprintCallable, BlueprintEvent)
// Parameters:
// class APlayerController*                PlayerController                                       (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_PlacableTrap_Base_C::Trap_Object_Spawn(class APlayerController* PlayerController)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PlacableTrap_Base_C", "Trap_Object_Spawn");

	Params::BP_PlacableTrap_Base_C_Trap_Object_Spawn Parms{};

	Parms.PlayerController = PlayerController;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_PlacableTrap_Base.BP_PlacableTrap_Base_C.BndEvt__Usable_K2Node_ComponentBoundEvent_0_Used__DelegateSignature
// (BlueprintAuthorityOnly, BlueprintEvent)
// Parameters:
// class AItem*                            Item                                                   (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class AHumanCharacter*                  ItemOwner                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class AActor*                           TargetActor                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_PlacableTrap_Base_C::BndEvt__Usable_K2Node_ComponentBoundEvent_0_Used__DelegateSignature(class AItem* Item, class AHumanCharacter* ItemOwner, class AActor* TargetActor)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PlacableTrap_Base_C", "BndEvt__Usable_K2Node_ComponentBoundEvent_0_Used__DelegateSignature");

	Params::BP_PlacableTrap_Base_C_BndEvt__Usable_K2Node_ComponentBoundEvent_0_Used__DelegateSignature Parms{};

	Parms.Item = Item;
	Parms.ItemOwner = ItemOwner;
	Parms.TargetActor = TargetActor;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_PlacableTrap_Base.BP_PlacableTrap_Base_C.PlayUsageAnimation
// (Public, BlueprintCallable, BlueprintEvent)

void ABP_PlacableTrap_Base_C::PlayUsageAnimation()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PlacableTrap_Base_C", "PlayUsageAnimation");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_PlacableTrap_Base.BP_PlacableTrap_Base_C.Trap_Placement_CanBePlaced
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FHitResult                       Hit                                                    (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, ContainsInstancedReference)
// float                                   MaxZNormal                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// TArray<TSoftClassPtr<class UClass>>     ActorsThatBlocksThePlacement                           (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
// TArray<EPhysicalSurface>                SurfacesThatBlocksThePlacement                         (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
// bool                                    Trap_CanBePlacedInWater                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// bool                                    Trap_CanBePlacedVertically                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// bool                                    CanBePlaced                                            (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ABP_PlacableTrap_Base_C::Trap_Placement_CanBePlaced(const struct FHitResult& Hit, float MaxZNormal, TArray<TSoftClassPtr<class UClass>>& ActorsThatBlocksThePlacement, TArray<EPhysicalSurface>& SurfacesThatBlocksThePlacement, bool Trap_CanBePlacedInWater, bool Trap_CanBePlacedVertically, bool* CanBePlaced)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PlacableTrap_Base_C", "Trap_Placement_CanBePlaced");

	Params::BP_PlacableTrap_Base_C_Trap_Placement_CanBePlaced Parms{};

	Parms.Hit = std::move(Hit);
	Parms.MaxZNormal = MaxZNormal;
	Parms.ActorsThatBlocksThePlacement = std::move(ActorsThatBlocksThePlacement);
	Parms.SurfacesThatBlocksThePlacement = std::move(SurfacesThatBlocksThePlacement);
	Parms.Trap_CanBePlacedInWater = Trap_CanBePlacedInWater;
	Parms.Trap_CanBePlacedVertically = Trap_CanBePlacedVertically;

	UObject::ProcessEvent(Func, &Parms);

	ActorsThatBlocksThePlacement = std::move(Parms.ActorsThatBlocksThePlacement);
	SurfacesThatBlocksThePlacement = std::move(Parms.SurfacesThatBlocksThePlacement);

	if (CanBePlaced != nullptr)
		*CanBePlaced = Parms.CanBePlaced;
}


// Function BP_PlacableTrap_Base.BP_PlacableTrap_Base_C.ChangeHologramVisuals
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class ABP_PlacableTrap_Hologram_Base_C* Target                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    CanBePlaced                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ABP_PlacableTrap_Base_C::ChangeHologramVisuals(class ABP_PlacableTrap_Hologram_Base_C* Target, bool CanBePlaced)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PlacableTrap_Base_C", "ChangeHologramVisuals");

	Params::BP_PlacableTrap_Base_C_ChangeHologramVisuals Parms{};

	Parms.Target = Target;
	Parms.CanBePlaced = CanBePlaced;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_PlacableTrap_Base.BP_PlacableTrap_Base_C.Trap_Placement_Calculate
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FHitResult                       ReturnValue                                            (Parm, OutParm, ReturnParm, IsPlainOldData, NoDestructor, ContainsInstancedReference)
// bool                                    WasHit                                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

struct FHitResult ABP_PlacableTrap_Base_C::Trap_Placement_Calculate(bool* WasHit)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PlacableTrap_Base_C", "Trap_Placement_Calculate");

	Params::BP_PlacableTrap_Base_C_Trap_Placement_Calculate Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (WasHit != nullptr)
		*WasHit = Parms.WasHit;

	return Parms.ReturnValue;
}


// Function BP_PlacableTrap_Base.BP_PlacableTrap_Base_C.Trap_Hologram_SetAndReplicateTransform
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FHitResult                       Hit                                                    (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, ContainsInstancedReference)

void ABP_PlacableTrap_Base_C::Trap_Hologram_SetAndReplicateTransform(const struct FHitResult& Hit)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PlacableTrap_Base_C", "Trap_Hologram_SetAndReplicateTransform");

	Params::BP_PlacableTrap_Base_C_Trap_Hologram_SetAndReplicateTransform Parms{};

	Parms.Hit = std::move(Hit);

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_PlacableTrap_Base.BP_PlacableTrap_Base_C.Trap_Placement_Debug
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FHitResult                       Hit                                                    (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, ContainsInstancedReference)
// bool                                    CanBePlaced                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ABP_PlacableTrap_Base_C::Trap_Placement_Debug(const struct FHitResult& Hit, bool CanBePlaced)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PlacableTrap_Base_C", "Trap_Placement_Debug");

	Params::BP_PlacableTrap_Base_C_Trap_Placement_Debug Parms{};

	Parms.Hit = std::move(Hit);
	Parms.CanBePlaced = CanBePlaced;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_PlacableTrap_Base.BP_PlacableTrap_Base_C.Trap_Hologram_ReplicateAndChangeVisuals
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    CanBePlaced                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// struct FHitResult                       Hit                                                    (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, ContainsInstancedReference)

void ABP_PlacableTrap_Base_C::Trap_Hologram_ReplicateAndChangeVisuals(bool CanBePlaced, const struct FHitResult& Hit)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PlacableTrap_Base_C", "Trap_Hologram_ReplicateAndChangeVisuals");

	Params::BP_PlacableTrap_Base_C_Trap_Hologram_ReplicateAndChangeVisuals Parms{};

	Parms.CanBePlaced = CanBePlaced;
	Parms.Hit = std::move(Hit);

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_PlacableTrap_Base.BP_PlacableTrap_Base_C.Trap_Hologram_Show
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)

void ABP_PlacableTrap_Base_C::Trap_Hologram_Show()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PlacableTrap_Base_C", "Trap_Hologram_Show");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_PlacableTrap_Base.BP_PlacableTrap_Base_C.Trap_Hologram_Hide
// (Public, BlueprintCallable, BlueprintEvent)

void ABP_PlacableTrap_Base_C::Trap_Hologram_Hide()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PlacableTrap_Base_C", "Trap_Hologram_Hide");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_PlacableTrap_Base.BP_PlacableTrap_Base_C.Trap_Placement_SpawnObject
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)

void ABP_PlacableTrap_Base_C::Trap_Placement_SpawnObject()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PlacableTrap_Base_C", "Trap_Placement_SpawnObject");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_PlacableTrap_Base.BP_PlacableTrap_Base_C.Trap_Placement_Calculate_Rotation
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FVector                          ImpactPoint                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FVector                          Normal                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FVector                          ActorLocation                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FRotator                         ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)

struct FRotator ABP_PlacableTrap_Base_C::Trap_Placement_Calculate_Rotation(const struct FVector& ImpactPoint, const struct FVector& Normal, const struct FVector& ActorLocation)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PlacableTrap_Base_C", "Trap_Placement_Calculate_Rotation");

	Params::BP_PlacableTrap_Base_C_Trap_Placement_Calculate_Rotation Parms{};

	Parms.ImpactPoint = std::move(ImpactPoint);
	Parms.Normal = std::move(Normal);
	Parms.ActorLocation = std::move(ActorLocation);

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function BP_PlacableTrap_Base.BP_PlacableTrap_Base_C.Trap_Placement_SetValidLocation
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    CanBePlaced                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ABP_PlacableTrap_Base_C::Trap_Placement_SetValidLocation(bool CanBePlaced)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PlacableTrap_Base_C", "Trap_Placement_SetValidLocation");

	Params::BP_PlacableTrap_Base_C_Trap_Placement_SetValidLocation Parms{};

	Parms.CanBePlaced = CanBePlaced;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_PlacableTrap_Base.BP_PlacableTrap_Base_C.GetCustomGripAnimation
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// class UAnimSequence*                    HandAnim                                               (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    Valid                                                  (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ABP_PlacableTrap_Base_C::GetCustomGripAnimation(class UAnimSequence** HandAnim, bool* Valid)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PlacableTrap_Base_C", "GetCustomGripAnimation");

	Params::BP_PlacableTrap_Base_C_GetCustomGripAnimation Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (HandAnim != nullptr)
		*HandAnim = Parms.HandAnim;

	if (Valid != nullptr)
		*Valid = Parms.Valid;
}


// Function BP_PlacableTrap_Base.BP_PlacableTrap_Base_C.CanBeUsedImpl
// (Event, Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)

bool ABP_PlacableTrap_Base_C::CanBeUsedImpl() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PlacableTrap_Base_C", "CanBeUsedImpl");

	Params::BP_PlacableTrap_Base_C_CanBeUsedImpl Parms{};

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}

}

