#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_FreeCameraSpectator

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "Engine_classes.hpp"


namespace SDK
{

// BlueprintGeneratedClass BP_FreeCameraSpectator.BP_FreeCameraSpectator_C
// 0x0050 (0x02F8 - 0x02A8)
class ABP_FreeCameraSpectator_C final : public ASpectatorPawn
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x02A8(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class UCameraComponent*                       Camera;                                            // 0x02B0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	float                                         Spectator_Speed;                                   // 0x02B8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          UseBoost;                                          // 0x02BC(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_2BD[0x3];                                      // 0x02BD(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Spectator_Aim_Multiplier;                          // 0x02C0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2C4[0x4];                                      // 0x02C4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class ABP_PlayerController_C*                 Possessed_Controller;                              // 0x02C8(0x0008)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FTimerHandle                           Water_Body_Timer;                                  // 0x02D0(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	bool                                          Touching_Water;                                    // 0x02D8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_2D9[0x7];                                      // 0x02D9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UWaterComponent*                        Last_Water_Component_Touched;                      // 0x02E0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         UpDownDirection;                                   // 0x02E8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2EC[0x4];                                      // 0x02EC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UUI_FreeCameraControls_C*               CameraControls;                                    // 0x02F0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

public:
	void ExecuteUbergraph_BP_FreeCameraSpectator(int32 EntryPoint);
	void Set_Pawn_Collision_Response_For_Owner();
	void Hide_Controls_UI();
	void ReceiveEndPlay(EEndPlayReason EndPlayReason);
	void Show_Controls_UI();
	void ReceiveBeginPlay();
	void BndEvt__CollisionComponent_K2Node_ComponentBoundEvent_1_ComponentEndOverlapSignature__DelegateSignature(class UPrimitiveComponent* OverlappedComponent, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, int32 OtherBodyIndex);
	void BndEvt__CollisionComponent_K2Node_ComponentBoundEvent_0_ComponentBeginOverlapSignature__DelegateSignature(class UPrimitiveComponent* OverlappedComponent, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, int32 OtherBodyIndex, bool bFromSweep, const struct FHitResult& SweepResult);
	void ReceiveUnpossessed(class AController* OldController);
	void ReceivePossessed(class AController* NewController);
	void ReceiveTick(float DeltaSeconds);
	void CameraRotation(float Delta_seconds);
	void CameraUpDownMovement(float Delta_seconds);
	void CameraMovement(float Delta_seconds);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BP_FreeCameraSpectator_C">();
	}
	static class ABP_FreeCameraSpectator_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<ABP_FreeCameraSpectator_C>();
	}
};
static_assert(alignof(ABP_FreeCameraSpectator_C) == 0x000008, "Wrong alignment on ABP_FreeCameraSpectator_C");
static_assert(sizeof(ABP_FreeCameraSpectator_C) == 0x0002F8, "Wrong size on ABP_FreeCameraSpectator_C");
static_assert(offsetof(ABP_FreeCameraSpectator_C, UberGraphFrame) == 0x0002A8, "Member 'ABP_FreeCameraSpectator_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(ABP_FreeCameraSpectator_C, Camera) == 0x0002B0, "Member 'ABP_FreeCameraSpectator_C::Camera' has a wrong offset!");
static_assert(offsetof(ABP_FreeCameraSpectator_C, Spectator_Speed) == 0x0002B8, "Member 'ABP_FreeCameraSpectator_C::Spectator_Speed' has a wrong offset!");
static_assert(offsetof(ABP_FreeCameraSpectator_C, UseBoost) == 0x0002BC, "Member 'ABP_FreeCameraSpectator_C::UseBoost' has a wrong offset!");
static_assert(offsetof(ABP_FreeCameraSpectator_C, Spectator_Aim_Multiplier) == 0x0002C0, "Member 'ABP_FreeCameraSpectator_C::Spectator_Aim_Multiplier' has a wrong offset!");
static_assert(offsetof(ABP_FreeCameraSpectator_C, Possessed_Controller) == 0x0002C8, "Member 'ABP_FreeCameraSpectator_C::Possessed_Controller' has a wrong offset!");
static_assert(offsetof(ABP_FreeCameraSpectator_C, Water_Body_Timer) == 0x0002D0, "Member 'ABP_FreeCameraSpectator_C::Water_Body_Timer' has a wrong offset!");
static_assert(offsetof(ABP_FreeCameraSpectator_C, Touching_Water) == 0x0002D8, "Member 'ABP_FreeCameraSpectator_C::Touching_Water' has a wrong offset!");
static_assert(offsetof(ABP_FreeCameraSpectator_C, Last_Water_Component_Touched) == 0x0002E0, "Member 'ABP_FreeCameraSpectator_C::Last_Water_Component_Touched' has a wrong offset!");
static_assert(offsetof(ABP_FreeCameraSpectator_C, UpDownDirection) == 0x0002E8, "Member 'ABP_FreeCameraSpectator_C::UpDownDirection' has a wrong offset!");
static_assert(offsetof(ABP_FreeCameraSpectator_C, CameraControls) == 0x0002F0, "Member 'ABP_FreeCameraSpectator_C::CameraControls' has a wrong offset!");

}

