#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: UI_PingHint

#include "Basic.hpp"

#include "Struct_PingInfo_structs.hpp"


namespace SDK::Params
{

// Function UI_PingHint.UI_PingHint_C.ExecuteUbergraph_UI_PingHint
// 0x0098 (0x0098 - 0x0000)
struct UI_PingHint_C_ExecuteUbergraph_UI_PingHint final
{
public:
	int32                                         EntryPoint;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable;                                // 0x0004(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   Temp_text_Variable;                                // 0x0008(0x0018)()
	class FText                                   Temp_text_Variable_1;                              // 0x0020(0x0018)()
	bool                                          K2Node_CustomEvent_Selected;                       // 0x0038(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_39[0x7];                                       // 0x0039(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FStruct_PingInfo                       K2Node_CustomEvent_PingInfo;                       // 0x0040(0x0038)(HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_IntInt_ReturnValue;            // 0x0078(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_79[0x7];                                       // 0x0079(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   K2Node_Select_Default;                             // 0x0080(0x0018)()
};
static_assert(alignof(UI_PingHint_C_ExecuteUbergraph_UI_PingHint) == 0x000008, "Wrong alignment on UI_PingHint_C_ExecuteUbergraph_UI_PingHint");
static_assert(sizeof(UI_PingHint_C_ExecuteUbergraph_UI_PingHint) == 0x000098, "Wrong size on UI_PingHint_C_ExecuteUbergraph_UI_PingHint");
static_assert(offsetof(UI_PingHint_C_ExecuteUbergraph_UI_PingHint, EntryPoint) == 0x000000, "Member 'UI_PingHint_C_ExecuteUbergraph_UI_PingHint::EntryPoint' has a wrong offset!");
static_assert(offsetof(UI_PingHint_C_ExecuteUbergraph_UI_PingHint, Temp_bool_Variable) == 0x000004, "Member 'UI_PingHint_C_ExecuteUbergraph_UI_PingHint::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(UI_PingHint_C_ExecuteUbergraph_UI_PingHint, Temp_text_Variable) == 0x000008, "Member 'UI_PingHint_C_ExecuteUbergraph_UI_PingHint::Temp_text_Variable' has a wrong offset!");
static_assert(offsetof(UI_PingHint_C_ExecuteUbergraph_UI_PingHint, Temp_text_Variable_1) == 0x000020, "Member 'UI_PingHint_C_ExecuteUbergraph_UI_PingHint::Temp_text_Variable_1' has a wrong offset!");
static_assert(offsetof(UI_PingHint_C_ExecuteUbergraph_UI_PingHint, K2Node_CustomEvent_Selected) == 0x000038, "Member 'UI_PingHint_C_ExecuteUbergraph_UI_PingHint::K2Node_CustomEvent_Selected' has a wrong offset!");
static_assert(offsetof(UI_PingHint_C_ExecuteUbergraph_UI_PingHint, K2Node_CustomEvent_PingInfo) == 0x000040, "Member 'UI_PingHint_C_ExecuteUbergraph_UI_PingHint::K2Node_CustomEvent_PingInfo' has a wrong offset!");
static_assert(offsetof(UI_PingHint_C_ExecuteUbergraph_UI_PingHint, CallFunc_EqualEqual_IntInt_ReturnValue) == 0x000078, "Member 'UI_PingHint_C_ExecuteUbergraph_UI_PingHint::CallFunc_EqualEqual_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(UI_PingHint_C_ExecuteUbergraph_UI_PingHint, K2Node_Select_Default) == 0x000080, "Member 'UI_PingHint_C_ExecuteUbergraph_UI_PingHint::K2Node_Select_Default' has a wrong offset!");

// Function UI_PingHint.UI_PingHint_C.Selected Ping
// 0x0040 (0x0040 - 0x0000)
struct UI_PingHint_C_Selected_Ping final
{
public:
	bool                                          Selected;                                          // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FStruct_PingInfo                       PingInfo;                                          // 0x0008(0x0038)(BlueprintVisible, BlueprintReadOnly, Parm, HasGetValueTypeHash)
};
static_assert(alignof(UI_PingHint_C_Selected_Ping) == 0x000008, "Wrong alignment on UI_PingHint_C_Selected_Ping");
static_assert(sizeof(UI_PingHint_C_Selected_Ping) == 0x000040, "Wrong size on UI_PingHint_C_Selected_Ping");
static_assert(offsetof(UI_PingHint_C_Selected_Ping, Selected) == 0x000000, "Member 'UI_PingHint_C_Selected_Ping::Selected' has a wrong offset!");
static_assert(offsetof(UI_PingHint_C_Selected_Ping, PingInfo) == 0x000008, "Member 'UI_PingHint_C_Selected_Ping::PingInfo' has a wrong offset!");

}

