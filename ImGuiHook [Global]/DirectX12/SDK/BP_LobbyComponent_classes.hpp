#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_LobbyComponent

#include "Basic.hpp"

#include "Flame_structs.hpp"
#include "Flame_classes.hpp"
#include "Engine_structs.hpp"
#include "EBooster_structs.hpp"


namespace SDK
{

// BlueprintGeneratedClass BP_LobbyComponent.BP_LobbyComponent_C
// 0x00F0 (0x02A0 - 0x01B0)
class UBP_LobbyComponent_C final : public ULobbyComponent
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x01B0(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class ABP_PlayerLobby_Base_C*                 OhMightyLobby;                                     // 0x01B8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash)
	class ULobbyBaseMenuWidget*                   BP_UILobby;                                        // 0x01C0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         TotalHC;                                           // 0x01C8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CloudGeneration;                                   // 0x01CC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         TotalTimeToEncounter;                              // 0x01D0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         RemainingTimeToEncounter;                          // 0x01D4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<struct FCloudPriceListItem>            PriceList;                                         // 0x01D8(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	TArray<class FString>                         WaitingFor;                                        // 0x01E8(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	bool                                          LobbyFinished;                                     // 0x01F8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          PlayerSetReady;                                    // 0x01F9(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_1FA[0x2];                                      // 0x01FA(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         BlockedHC;                                         // 0x01FC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TMap<EBooster, int32>                         UsedLobbyTickets;                                  // 0x0200(0x0050)(Edit, BlueprintVisible, DisableEditOnInstance)
	TMap<EBooster, int32>                         CrownBoughtTickets;                                // 0x0250(0x0050)(Edit, BlueprintVisible, DisableEditOnInstance)

public:
	void ExecuteUbergraph_BP_LobbyComponent(int32 EntryPoint);
	void Client_RequestCurrencyBlock(EBooster Booster, int32 Quantity, const class FString& MatchCloudId);
	void Server_BlockCurrencyForPersonalTickets(EBooster Booster, int32 Quantity, const class FString& MatchCloudId);
	void RequestUserInfoUpdate();
	void InMinusMatchCurrencyForItemBlocked(const struct FCloudRequestResult& RequestResult, const class AHumanPlayerController* Player, const class FString& MatchCloudId, const class FString& ProductSku);
	void InMinusMatchBlockCurrency(const class FString& MatchCloudId, EBooster BoosterType, int32 AlreadyOwnedAmount);
	void RefreshReadyUI(const TArray<int32>& ReadyIDs);
	void SetLobbyReadyState();
	void StartLobbyClient();
	void OnSetCloudUserId(const class FString& Userid);
	void StartLobbyServer(class ABP_PlayerLobby_Base_C* Lobby);
	void PriceReceived(const struct FCloudRequestResult& RequestResult, const struct FCloudPriceList& PriceList_0);
	void CloseUI();
	void SetRemainingTime_Encounter(int32 Seconds);
	void AckLockLobbyServer();
	void BalanceReceived(const struct FCloudRequestResult& RequestResult, const class AHumanPlayerController* Player, const struct FCloudUserBalance& Balance);
	void CurrencyBlocked(const struct FCloudRequestResult& RequestResult, const class AHumanPlayerController* Player, const class FString& MatchCloudId, const class FString& ProductSku);
	void LeaveLobbyConfirm();
	void LeaveLobbyAsk();
	void LockLobbyInComponent(const class FString& MatchCloudId);
	void SetRemainingTime(int32 Seconds);
	void SetBoosterState(EBooster Booster, int32 OrderedCount, int32 TotalActiveCount, int32 MaxCount, int32 TicketsUsed);
	void SetUI(class ULobbyBaseMenuWidget* UI);
	void RemoveBooster(EBooster Booster);
	void AddBooster(EBooster Booster, bool TicketUsedInsteadOfCrowns);
	void DebugLobbyMsg(const class FString& Message, bool IsError);
	void HandleSoundsOnStart();
	void HandleSoundsOnEnd();
	void RemovePlayerFromBlocking();
	void SetUsedBoosterTicketCount(const EBooster Booster, const int32 AmountOfActivatedTickets);
	void SetCrownBoughtBoosterTicketCount(const EBooster Booster, const int32 AmountOfActivatedTickets);
	void GetCrownBoughtBoosterTicketCount(const EBooster& Booster, int32* UsedTickets);

	void Get_Booster_SKU_BP(EBooster Booster, class FString* SKU) const;
	void GetBoosterCost(EBooster Booster, int32* Cost, int32* Cost_before_discount, int32* DiscountPercent, bool* Is_Discounted) const;
	void Get_Used_Booster_Ticket_Count_BP(const EBooster& Booster, int32* UsedTickets) const;
	const int32 GetUsedBoosterTicketCount(EBoosterTypes Booster) const;

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BP_LobbyComponent_C">();
	}
	static class UBP_LobbyComponent_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UBP_LobbyComponent_C>();
	}
};
static_assert(alignof(UBP_LobbyComponent_C) == 0x000008, "Wrong alignment on UBP_LobbyComponent_C");
static_assert(sizeof(UBP_LobbyComponent_C) == 0x0002A0, "Wrong size on UBP_LobbyComponent_C");
static_assert(offsetof(UBP_LobbyComponent_C, UberGraphFrame) == 0x0001B0, "Member 'UBP_LobbyComponent_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(UBP_LobbyComponent_C, OhMightyLobby) == 0x0001B8, "Member 'UBP_LobbyComponent_C::OhMightyLobby' has a wrong offset!");
static_assert(offsetof(UBP_LobbyComponent_C, BP_UILobby) == 0x0001C0, "Member 'UBP_LobbyComponent_C::BP_UILobby' has a wrong offset!");
static_assert(offsetof(UBP_LobbyComponent_C, TotalHC) == 0x0001C8, "Member 'UBP_LobbyComponent_C::TotalHC' has a wrong offset!");
static_assert(offsetof(UBP_LobbyComponent_C, CloudGeneration) == 0x0001CC, "Member 'UBP_LobbyComponent_C::CloudGeneration' has a wrong offset!");
static_assert(offsetof(UBP_LobbyComponent_C, TotalTimeToEncounter) == 0x0001D0, "Member 'UBP_LobbyComponent_C::TotalTimeToEncounter' has a wrong offset!");
static_assert(offsetof(UBP_LobbyComponent_C, RemainingTimeToEncounter) == 0x0001D4, "Member 'UBP_LobbyComponent_C::RemainingTimeToEncounter' has a wrong offset!");
static_assert(offsetof(UBP_LobbyComponent_C, PriceList) == 0x0001D8, "Member 'UBP_LobbyComponent_C::PriceList' has a wrong offset!");
static_assert(offsetof(UBP_LobbyComponent_C, WaitingFor) == 0x0001E8, "Member 'UBP_LobbyComponent_C::WaitingFor' has a wrong offset!");
static_assert(offsetof(UBP_LobbyComponent_C, LobbyFinished) == 0x0001F8, "Member 'UBP_LobbyComponent_C::LobbyFinished' has a wrong offset!");
static_assert(offsetof(UBP_LobbyComponent_C, PlayerSetReady) == 0x0001F9, "Member 'UBP_LobbyComponent_C::PlayerSetReady' has a wrong offset!");
static_assert(offsetof(UBP_LobbyComponent_C, BlockedHC) == 0x0001FC, "Member 'UBP_LobbyComponent_C::BlockedHC' has a wrong offset!");
static_assert(offsetof(UBP_LobbyComponent_C, UsedLobbyTickets) == 0x000200, "Member 'UBP_LobbyComponent_C::UsedLobbyTickets' has a wrong offset!");
static_assert(offsetof(UBP_LobbyComponent_C, CrownBoughtTickets) == 0x000250, "Member 'UBP_LobbyComponent_C::CrownBoughtTickets' has a wrong offset!");

}

