#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_BuoyantActor

#include "Basic.hpp"

#include "CoreUObject_structs.hpp"
#include "OceanPlugin_structs.hpp"
#include "Engine_structs.hpp"
#include "Engine_classes.hpp"


namespace SDK
{

// BlueprintGeneratedClass BP_BuoyantActor.BP_BuoyantActor_C
// 0x0098 (0x02C8 - 0x0230)
class ABP_BuoyantActor_C : public AStaticMeshActor
{
public:
	class UBuoyancyForceComponent*                BuoyancyForce;                                     // 0x0230(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	float                                         MeshDensity;                                       // 0x0238(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash)
	float                                         FluidDensity;                                      // 0x023C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash)
	float                                         FluidLinearDamping;                                // 0x0240(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash)
	float                                         FluidAngularDamping;                               // 0x0244(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash)
	bool                                          ClampUnderwaterVelocity;                           // 0x0248(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn)
	uint8                                         Pad_249[0x3];                                      // 0x0249(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         MaxUnderwaterVelocity;                             // 0x024C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash)
	float                                         PointRadius;                                       // 0x0250(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash)
	uint8                                         Pad_254[0x4];                                      // 0x0254(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FVector>                        TestPointArray;                                    // 0x0258(0x0010)(Edit, BlueprintVisible, ExposeOnSpawn)
	class AOceanManager*                          OceanManager;                                      // 0x0268(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                PointDirectionalVelocityDamper;                    // 0x0270(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_27C[0x4];                                      // 0x027C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<float>                                 PointDensityOverride;                              // 0x0280(0x0010)(Edit, BlueprintVisible)
	TArray<struct FStructBoneOverride>            BoneOverride;                                      // 0x0290(0x0010)(Edit, BlueprintVisible)
	bool                                          DrawDebugSpheres;                                  // 0x02A0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          EnableStayUprightConstraint;                       // 0x02A1(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_2A2[0x2];                                      // 0x02A2(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         StayUprightStiffness;                              // 0x02A4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         StayUprightDamping;                                // 0x02A8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               StayUprightDesiredRotation;                        // 0x02AC(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          EnableWaveForces;                                  // 0x02B8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_2B9[0x3];                                      // 0x02B9(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         WaveForceMultiplier;                               // 0x02BC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ETickingGroup                                 TickGroup;                                         // 0x02C0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          ApplyForceToBones;                                 // 0x02C1(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          SnapToSurfaceIfNoPhysics;                          // 0x02C2(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          TwoGerstnerIterations;                             // 0x02C3(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)

public:
	void UserConstructionScript();

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BP_BuoyantActor_C">();
	}
	static class ABP_BuoyantActor_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<ABP_BuoyantActor_C>();
	}
};
static_assert(alignof(ABP_BuoyantActor_C) == 0x000008, "Wrong alignment on ABP_BuoyantActor_C");
static_assert(sizeof(ABP_BuoyantActor_C) == 0x0002C8, "Wrong size on ABP_BuoyantActor_C");
static_assert(offsetof(ABP_BuoyantActor_C, BuoyancyForce) == 0x000230, "Member 'ABP_BuoyantActor_C::BuoyancyForce' has a wrong offset!");
static_assert(offsetof(ABP_BuoyantActor_C, MeshDensity) == 0x000238, "Member 'ABP_BuoyantActor_C::MeshDensity' has a wrong offset!");
static_assert(offsetof(ABP_BuoyantActor_C, FluidDensity) == 0x00023C, "Member 'ABP_BuoyantActor_C::FluidDensity' has a wrong offset!");
static_assert(offsetof(ABP_BuoyantActor_C, FluidLinearDamping) == 0x000240, "Member 'ABP_BuoyantActor_C::FluidLinearDamping' has a wrong offset!");
static_assert(offsetof(ABP_BuoyantActor_C, FluidAngularDamping) == 0x000244, "Member 'ABP_BuoyantActor_C::FluidAngularDamping' has a wrong offset!");
static_assert(offsetof(ABP_BuoyantActor_C, ClampUnderwaterVelocity) == 0x000248, "Member 'ABP_BuoyantActor_C::ClampUnderwaterVelocity' has a wrong offset!");
static_assert(offsetof(ABP_BuoyantActor_C, MaxUnderwaterVelocity) == 0x00024C, "Member 'ABP_BuoyantActor_C::MaxUnderwaterVelocity' has a wrong offset!");
static_assert(offsetof(ABP_BuoyantActor_C, PointRadius) == 0x000250, "Member 'ABP_BuoyantActor_C::PointRadius' has a wrong offset!");
static_assert(offsetof(ABP_BuoyantActor_C, TestPointArray) == 0x000258, "Member 'ABP_BuoyantActor_C::TestPointArray' has a wrong offset!");
static_assert(offsetof(ABP_BuoyantActor_C, OceanManager) == 0x000268, "Member 'ABP_BuoyantActor_C::OceanManager' has a wrong offset!");
static_assert(offsetof(ABP_BuoyantActor_C, PointDirectionalVelocityDamper) == 0x000270, "Member 'ABP_BuoyantActor_C::PointDirectionalVelocityDamper' has a wrong offset!");
static_assert(offsetof(ABP_BuoyantActor_C, PointDensityOverride) == 0x000280, "Member 'ABP_BuoyantActor_C::PointDensityOverride' has a wrong offset!");
static_assert(offsetof(ABP_BuoyantActor_C, BoneOverride) == 0x000290, "Member 'ABP_BuoyantActor_C::BoneOverride' has a wrong offset!");
static_assert(offsetof(ABP_BuoyantActor_C, DrawDebugSpheres) == 0x0002A0, "Member 'ABP_BuoyantActor_C::DrawDebugSpheres' has a wrong offset!");
static_assert(offsetof(ABP_BuoyantActor_C, EnableStayUprightConstraint) == 0x0002A1, "Member 'ABP_BuoyantActor_C::EnableStayUprightConstraint' has a wrong offset!");
static_assert(offsetof(ABP_BuoyantActor_C, StayUprightStiffness) == 0x0002A4, "Member 'ABP_BuoyantActor_C::StayUprightStiffness' has a wrong offset!");
static_assert(offsetof(ABP_BuoyantActor_C, StayUprightDamping) == 0x0002A8, "Member 'ABP_BuoyantActor_C::StayUprightDamping' has a wrong offset!");
static_assert(offsetof(ABP_BuoyantActor_C, StayUprightDesiredRotation) == 0x0002AC, "Member 'ABP_BuoyantActor_C::StayUprightDesiredRotation' has a wrong offset!");
static_assert(offsetof(ABP_BuoyantActor_C, EnableWaveForces) == 0x0002B8, "Member 'ABP_BuoyantActor_C::EnableWaveForces' has a wrong offset!");
static_assert(offsetof(ABP_BuoyantActor_C, WaveForceMultiplier) == 0x0002BC, "Member 'ABP_BuoyantActor_C::WaveForceMultiplier' has a wrong offset!");
static_assert(offsetof(ABP_BuoyantActor_C, TickGroup) == 0x0002C0, "Member 'ABP_BuoyantActor_C::TickGroup' has a wrong offset!");
static_assert(offsetof(ABP_BuoyantActor_C, ApplyForceToBones) == 0x0002C1, "Member 'ABP_BuoyantActor_C::ApplyForceToBones' has a wrong offset!");
static_assert(offsetof(ABP_BuoyantActor_C, SnapToSurfaceIfNoPhysics) == 0x0002C2, "Member 'ABP_BuoyantActor_C::SnapToSurfaceIfNoPhysics' has a wrong offset!");
static_assert(offsetof(ABP_BuoyantActor_C, TwoGerstnerIterations) == 0x0002C3, "Member 'ABP_BuoyantActor_C::TwoGerstnerIterations' has a wrong offset!");

}

