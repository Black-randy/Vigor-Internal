#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_BattlePassSystem

#include "Basic.hpp"

#include "E_BattlePassSeasonType_structs.hpp"
#include "Flame_structs.hpp"
#include "Flame_classes.hpp"
#include "Engine_structs.hpp"
#include "E_BattlePassSystem_State_structs.hpp"


namespace SDK
{

// BlueprintGeneratedClass BP_BattlePassSystem.BP_BattlePassSystem_C
// 0x0130 (0x01C8 - 0x0098)
class UBP_BattlePassSystem_C final : public UBattlePassSystem
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x0098(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class FName                                   Current_Season_Name;                               // 0x00A0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   Legacy_Season_Name;                                // 0x00A8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TMap<class FName, struct FCloudBattlePassSeasonState> Player_Progress;                                   // 0x00B0(0x0050)(Edit, BlueprintVisible, DisableEditOnInstance)
	E_BattlePassSystem_State                      State;                                             // 0x0100(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_101[0x7];                                      // 0x0101(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	FMulticastInlineDelegateProperty_             State_Changed;                                     // 0x0108(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	int32                                         Player_Level;                                      // 0x0118(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Player_XP_within_Level;                            // 0x011C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Player_XP_for_Next_Level;                          // 0x0120(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_124[0x4];                                      // 0x0124(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	FMulticastInlineDelegateProperty_             Level_Purchase_Result;                             // 0x0128(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	struct FTimerHandle                           Season_Start_Timer;                                // 0x0138(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	struct FTimerHandle                           Season_End_Timer;                                  // 0x0140(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	FMulticastInlineDelegateProperty_             Rewards_Claim_Result;                              // 0x0148(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	FMulticastInlineDelegateProperty_             System_Ready;                                      // 0x0158(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	FMulticastInlineDelegateProperty_             Premium_Purchase_Result;                           // 0x0168(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	int32                                         All_Seasons_State_Request_ID;                      // 0x0178(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Level_Purchase_Request_ID;                         // 0x017C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Rewards_Claim_Request_ID;                          // 0x0180(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Premium_Purchase_Request_ID;                       // 0x0184(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	FMulticastInlineDelegateProperty_             Player_Stats_Changed;                              // 0x0188(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	TArray<struct FCloudBattlePassExperienceEvent> Waiting_Experience_Events;                         // 0x0198(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	bool                                          FirstTimeInShelter;                                // 0x01A8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          Reload_Upon_Successful_Premium_Purchase;           // 0x01A9(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_1AA[0x2];                                      // 0x01AA(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Select_Legacy_Season_Request_ID;                   // 0x01AC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	FMulticastInlineDelegateProperty_             LegacySeasonSelected;                              // 0x01B0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	bool                                          ReloadUponSuccessfulLegacySeasonSelection;         // 0x01C0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          IsDoubleXPWeekend;                                 // 0x01C1(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)

public:
	void State_Changed__DelegateSignature(E_BattlePassSystem_State New_State);
	void Level_Purchase_Result__DelegateSignature(bool Success);
	void Rewards_Claim_Result__DelegateSignature(bool Success);
	void System_Ready__DelegateSignature();
	void Premium_Purchase_Result__DelegateSignature(bool Success);
	void Player_Stats_Changed__DelegateSignature();
	void LegacySeasonSelected__DelegateSignature(bool Success);
	void ExecuteUbergraph_BP_BattlePassSystem(int32 EntryPoint);
	void EventSelectLegacySeasonFinished(const struct FCloudRequestResult& RequestResult);
	void RequestLegacySeasonSelection(class FName Season);
	void Level_Entered();
	void Ready_to_End_Season();
	void Ready_to_Start_Season();
	void OnGameStorePurchase(EGameStorePurchaseType PurchaseType, const struct FUniqueNetIdRepl& InUserId, const int32 PurchaseRequestId, const struct FGameStoreProductId& RequestedProductId, const struct FCloudRequestResult& Result, const struct FGameStorePurchaseResult& PurchaseResult, const bool PurchaseListRefreshed);
	void Experience_Awarded(class AHumanPlayerController* Player, const struct FCloudBattlePassExperienceEvent& Event);
	void Request_Premium_Battle_Pass_Purchase(class FName Season, const class FString& PremiumBattlePassProductID);
	void Request_Rewards_Claim(bool IsLegacy);
	void Current_Season_Ended();
	void New_Season_Started();
	void Request_Level_Purchase(class FName SeasonName, int32 Levels);
	void Tick(float DeltaTime);
	void Reload_Local_Cache();
	void All_Battle_Pass_Seasons_State_Finished(const struct FCloudRequestResult& RequestResult, const struct FCloudBattlePassSeasonsState& Data);
	void Purchase_Battle_Pass_Level_Finished(const struct FCloudRequestResult& RequestResult, const struct FCloudBattlePassLevelPurchase& Data);
	void Claim_Battle_Pass_Rewards_Finished(const struct FCloudRequestResult& RequestResult, const struct FCloudBattlePassRewardsClaim& Data);
	void BlueprintDeInit();
	void BlueprintInit();
	void Get_Season_Name(E_BattlePassSeasonType SeasonType, class FName* Active_Season_Name);
	bool Is_Season_Active();
	void Process_Seasons_Data(const struct FCloudBattlePassSeasonsState& CloudBattlePassSeasonsState, bool* Success);
	void Get_Level(int32* Level);
	void Convert_Total_XP_to_Level(class FName Season, int32 Total_XP, int32* Level, int32* XP_within_Level, int32* XP_for_Next_Level);
	void Get_Unclaimed_Rewards(bool IsLegacy, TArray<class FName>* Seasons, TArray<struct FS_BattlePassLevelRewardFull>* Free_Rewards, TArray<struct FS_BattlePassLevelRewardFull>* Premium_Rewards);
	bool IsLegacySeasonInProgress(class FName Season);
	void Compile_Rewards_in_Level_Range(class FName Season_Name, int32 Min_Level, int32 Max_Level, bool Premium, TArray<struct FS_BattlePassLevelRewardFull>* Rewards);
	void Get_Current_Season_Number(int32* Number);
	void Get_Season_Title(class FName Season, class FText* Title);
	void Get_Current_Season_Description(class FText* Description);
	void Get_Current_Season_Image(class UTexture2D** Image);
	void Get_Current_Season_Start_Timestamp(struct FDateTime* Season_Start_Time);
	void Get_Current_Season_End_Timestamp(struct FDateTime* Season_End_Time);
	void Get_Season_Tier1_Premium_Product_ID(class FName Season, class FString* Premium_Battle_Pass_Product_ID);
	void Get_Premium_Status(class FName SeasonName, bool* Premium_Active);
	void Get_State(E_BattlePassSystem_State* State_0);
	void Get_Level_Purchase_Price(class FName SeasonName, int32* Level_Purchase_Price);
	void Process_Level_Purchase(const struct FCloudBattlePassLevelPurchase& CloudBattlePassLevelPurchase, bool* Success);
	void Process_Rewards_Claim(const struct FCloudBattlePassRewardsClaim& CloudBattlePassRewardsClaim, bool* Success);
	void Get_Previous_Season(class FName* Previous_Season_Name, int32* Previous_Season_Order);
	void GetLevelsPurchasePrice(class FName Season, int32 Levels, int32* Level_Purchase_Price);
	void GetUpdatedLevel(class FName Season, int32 Levels, bool ShouldSubtractPlayerLevel_, int32* UpdatedLevel);
	void Get_Level_in_Season(class FName Season, int32* Level);
	void Print_Status();
	void Get_Season_Number(class FName Season, int32* Number);
	void Get_XP_Within_Level(class FName Season, int32* Level);
	void Get_XP_For_Next_Level(class FName Season, int32* Level);
	void Process_Experience_Awarded(const struct FCloudBattlePassExperienceEvent& Event, bool* Success, bool* Player_Stats_Changed_0);
	void Get_Current_Season_Order(int32* Order);
	void Find_Levels_to_Claim(TArray<class FName>& Seasons, const TArray<struct FCloudBattlePassSeasonClaim>* Claims);
	void Get_Season_Max_Level(class FName SeasonName, int32* Max_Level);
	void Process_Premium_Purchase(const class FString& PremiumBattlePassProductID, bool* Success);
	void Get_XP_Booster(int32* XP_Booster);
	void Get_Season_Premium_Product_with_Lowest_Price(class FName Season, struct FGameStoreProductInfo* PremiumProduct);
	void Get_Locked_Rewards(TArray<struct FS_BattlePassLevelRewardFull>* Locked_Rewards);
	void Get_Total_XP(class FName SeasonName, int32* TotalXP);
	void Get_Unclaimed_Levels_in_Season(class FName Season, int32* Free_Levels, int32* Premium_Levels);
	void ShelterOnboardingSequenceFinished();
	void Get_newest_legacy_season(class FName* Newest_legacy_season, int32* Newest_legacy_season_number);
	class FName GetSeasonName(EBattlePassSeasonType SeasonType);
	int32 GetLevelInSeason(class FName SeasonName);
	bool GetPremiumStatus(class FName SeasonName);
	int32 GetTotalXP(class FName SeasonName);
	int32 GetXPBooster();
	int32 GetXPWithinLevel(class FName SeasonName);
	void ParseCodeReward_BP_Structure(TArray<struct FS_BattlePassLevelRewardFull>& In_BP_structure, TArray<struct FBattlePassLevelRewardFull>* OutCodeStructure);
	TArray<class FName> GetUnclaimedRewardsCode(bool IsLegacy, TArray<struct FBattlePassLevelRewardFull>* FreeRewards, TArray<struct FBattlePassLevelRewardFull>* PremiumRewards);

	void IsLegacySeason(class FName Season, bool* IsLegacy) const;
	void Get_Season_Premium_Products(class FName Season, bool* AreProductsValid, TArray<struct FBattlePassSeasonProducts>* PremiumBattlePassProducts) const;
	void Get_Current_Season_Level_Token(class UClass** LevelToken) const;
	void Get_Current_Season_Premium_Token(class UClass** PremiumToken) const;
	void GetFinalPremiumPrice(float Price, float DiscountPercent, int32* FinalPrice) const;
	void GetAvailableLegacySeasons(TArray<class FName>* AvailableLegacySeasons) const;
	void IsDoubleXpWeekendActive(bool* IsDoubleXpWeekendActive_0) const;

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BP_BattlePassSystem_C">();
	}
	static class UBP_BattlePassSystem_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UBP_BattlePassSystem_C>();
	}
};
static_assert(alignof(UBP_BattlePassSystem_C) == 0x000008, "Wrong alignment on UBP_BattlePassSystem_C");
static_assert(sizeof(UBP_BattlePassSystem_C) == 0x0001C8, "Wrong size on UBP_BattlePassSystem_C");
static_assert(offsetof(UBP_BattlePassSystem_C, UberGraphFrame) == 0x000098, "Member 'UBP_BattlePassSystem_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(UBP_BattlePassSystem_C, Current_Season_Name) == 0x0000A0, "Member 'UBP_BattlePassSystem_C::Current_Season_Name' has a wrong offset!");
static_assert(offsetof(UBP_BattlePassSystem_C, Legacy_Season_Name) == 0x0000A8, "Member 'UBP_BattlePassSystem_C::Legacy_Season_Name' has a wrong offset!");
static_assert(offsetof(UBP_BattlePassSystem_C, Player_Progress) == 0x0000B0, "Member 'UBP_BattlePassSystem_C::Player_Progress' has a wrong offset!");
static_assert(offsetof(UBP_BattlePassSystem_C, State) == 0x000100, "Member 'UBP_BattlePassSystem_C::State' has a wrong offset!");
static_assert(offsetof(UBP_BattlePassSystem_C, State_Changed) == 0x000108, "Member 'UBP_BattlePassSystem_C::State_Changed' has a wrong offset!");
static_assert(offsetof(UBP_BattlePassSystem_C, Player_Level) == 0x000118, "Member 'UBP_BattlePassSystem_C::Player_Level' has a wrong offset!");
static_assert(offsetof(UBP_BattlePassSystem_C, Player_XP_within_Level) == 0x00011C, "Member 'UBP_BattlePassSystem_C::Player_XP_within_Level' has a wrong offset!");
static_assert(offsetof(UBP_BattlePassSystem_C, Player_XP_for_Next_Level) == 0x000120, "Member 'UBP_BattlePassSystem_C::Player_XP_for_Next_Level' has a wrong offset!");
static_assert(offsetof(UBP_BattlePassSystem_C, Level_Purchase_Result) == 0x000128, "Member 'UBP_BattlePassSystem_C::Level_Purchase_Result' has a wrong offset!");
static_assert(offsetof(UBP_BattlePassSystem_C, Season_Start_Timer) == 0x000138, "Member 'UBP_BattlePassSystem_C::Season_Start_Timer' has a wrong offset!");
static_assert(offsetof(UBP_BattlePassSystem_C, Season_End_Timer) == 0x000140, "Member 'UBP_BattlePassSystem_C::Season_End_Timer' has a wrong offset!");
static_assert(offsetof(UBP_BattlePassSystem_C, Rewards_Claim_Result) == 0x000148, "Member 'UBP_BattlePassSystem_C::Rewards_Claim_Result' has a wrong offset!");
static_assert(offsetof(UBP_BattlePassSystem_C, System_Ready) == 0x000158, "Member 'UBP_BattlePassSystem_C::System_Ready' has a wrong offset!");
static_assert(offsetof(UBP_BattlePassSystem_C, Premium_Purchase_Result) == 0x000168, "Member 'UBP_BattlePassSystem_C::Premium_Purchase_Result' has a wrong offset!");
static_assert(offsetof(UBP_BattlePassSystem_C, All_Seasons_State_Request_ID) == 0x000178, "Member 'UBP_BattlePassSystem_C::All_Seasons_State_Request_ID' has a wrong offset!");
static_assert(offsetof(UBP_BattlePassSystem_C, Level_Purchase_Request_ID) == 0x00017C, "Member 'UBP_BattlePassSystem_C::Level_Purchase_Request_ID' has a wrong offset!");
static_assert(offsetof(UBP_BattlePassSystem_C, Rewards_Claim_Request_ID) == 0x000180, "Member 'UBP_BattlePassSystem_C::Rewards_Claim_Request_ID' has a wrong offset!");
static_assert(offsetof(UBP_BattlePassSystem_C, Premium_Purchase_Request_ID) == 0x000184, "Member 'UBP_BattlePassSystem_C::Premium_Purchase_Request_ID' has a wrong offset!");
static_assert(offsetof(UBP_BattlePassSystem_C, Player_Stats_Changed) == 0x000188, "Member 'UBP_BattlePassSystem_C::Player_Stats_Changed' has a wrong offset!");
static_assert(offsetof(UBP_BattlePassSystem_C, Waiting_Experience_Events) == 0x000198, "Member 'UBP_BattlePassSystem_C::Waiting_Experience_Events' has a wrong offset!");
static_assert(offsetof(UBP_BattlePassSystem_C, FirstTimeInShelter) == 0x0001A8, "Member 'UBP_BattlePassSystem_C::FirstTimeInShelter' has a wrong offset!");
static_assert(offsetof(UBP_BattlePassSystem_C, Reload_Upon_Successful_Premium_Purchase) == 0x0001A9, "Member 'UBP_BattlePassSystem_C::Reload_Upon_Successful_Premium_Purchase' has a wrong offset!");
static_assert(offsetof(UBP_BattlePassSystem_C, Select_Legacy_Season_Request_ID) == 0x0001AC, "Member 'UBP_BattlePassSystem_C::Select_Legacy_Season_Request_ID' has a wrong offset!");
static_assert(offsetof(UBP_BattlePassSystem_C, LegacySeasonSelected) == 0x0001B0, "Member 'UBP_BattlePassSystem_C::LegacySeasonSelected' has a wrong offset!");
static_assert(offsetof(UBP_BattlePassSystem_C, ReloadUponSuccessfulLegacySeasonSelection) == 0x0001C0, "Member 'UBP_BattlePassSystem_C::ReloadUponSuccessfulLegacySeasonSelection' has a wrong offset!");
static_assert(offsetof(UBP_BattlePassSystem_C, IsDoubleXPWeekend) == 0x0001C1, "Member 'UBP_BattlePassSystem_C::IsDoubleXPWeekend' has a wrong offset!");

}

