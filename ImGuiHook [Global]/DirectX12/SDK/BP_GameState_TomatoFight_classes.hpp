#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_GameState_TomatoFight

#include "Basic.hpp"

#include "E_TeamsMatchPhase_structs.hpp"
#include "CoreUObject_structs.hpp"
#include "Flame_structs.hpp"
#include "Engine_structs.hpp"
#include "EGunFightWinReason_structs.hpp"
#include "EFightVariant_structs.hpp"
#include "BP_GameState_Teams_classes.hpp"
#include "Struct_GunFightLoadout_structs.hpp"
#include "FlameUI_structs.hpp"
#include "ERaidNotificationType_structs.hpp"


namespace SDK
{

// BlueprintGeneratedClass BP_GameState_TomatoFight.BP_GameState_TomatoFight_C
// 0x0120 (0x05D8 - 0x04B8)
class ABP_GameState_TomatoFight_C final : public ABP_GameState_Teams_C
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame_BP_GameState_TomatoFight_C;         // 0x04B8(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	struct FVector                                WorldMin;                                          // 0x04C0(0x000C)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                WorldMax;                                          // 0x04CC(0x000C)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          WorldMinMaxInitialized;                            // 0x04D8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          Last_Two_Minutes_Played;                           // 0x04D9(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          Last_Minute_Played;                                // 0x04DA(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          Last_Ten_Seconds_Played;                           // 0x04DB(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	int32                                         RemainingTimePreRound;                             // 0x04DC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<class ABP_PlayerStart_Raid_C*>         Attacker_Starts;                                   // 0x04E0(0x0010)(Edit, BlueprintVisible, DisableEditOnTemplate, DisableEditOnInstance)
	TArray<class ABP_PlayerStart_Raid_C*>         Defender_Starts;                                   // 0x04F0(0x0010)(Edit, BlueprintVisible, DisableEditOnTemplate, DisableEditOnInstance)
	int32                                         PreMinusRound_Start_Time;                          // 0x0500(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Rounds_To_Win;                                     // 0x0504(0x0004)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EGunFightWinReason                            Last_Round_Win_Reason;                             // 0x0508(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_509[0x7];                                      // 0x0509(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class ABP_WinnerScreen_Base_C*                Winner_Screen;                                     // 0x0510(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Leave_Match_Time;                                  // 0x0518(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_51C[0x4];                                      // 0x051C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UBP_GSC_Team_Raid_C*                    Last_Round_Win_Team;                               // 0x0520(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UUI_TVTDeathmatch_KillFeed_C*           KillFeedUI;                                        // 0x0528(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UUI_GunFight_SurvivorCount_C*           SurvivorUI;                                        // 0x0530(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Is_Objective_Phase;                                // 0x0538(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          Spawn_Sides_Switched;                              // 0x0539(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_53A[0x6];                                      // 0x053A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class FName>                           Spawn_Markers;                                     // 0x0540(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	bool                                          Cheat_Match_Paused;                                // 0x0550(0x0001)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_551[0x7];                                      // 0x0551(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UAudioComponent*                        LastPlayingSoundCue;                               // 0x0558(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          FoundedSpawns;                                     // 0x0560(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_561[0x7];                                      // 0x0561(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TMap<EFightVariant, struct FStruct_GunFightLoadout> LoadoutsByVariants;                                // 0x0568(0x0050)(Edit, BlueprintVisible, DisableEditOnInstance)
	EFightVariant                                 GameVariant;                                       // 0x05B8(0x0001)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, RepNotify, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_5B9[0x3];                                      // 0x05B9(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         SelectedSettingID;                                 // 0x05BC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	FMulticastInlineDelegateProperty_             FightVariantSet;                                   // 0x05C0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	bool                                          FightVariantSetOnce;                               // 0x05D0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)

public:
	void FightVariantSet__DelegateSignature(EFightVariant NewVariant);
	void ExecuteUbergraph_BP_GameState_TomatoFight(int32 EntryPoint);
	void ReplaceWinnerScreen(class ABP_WinnerScreen_Base_C* Origin);
	void Set_Barricades_Active_State(bool IsActive);
	void Handle_Match_Phase(E_TeamsMatchPhase Match_Phase_0);
	void Replicate_Spawns(const TArray<class ABP_PlayerStart_Raid_C*>& Attacker_Spawns, const TArray<class ABP_PlayerStart_Raid_C*>& Defender_Spawns, int32 SelectedSettingID_0);
	void Set_Spawn_Sides_Switched(bool Sides_Switched);
	void Winner_Screen_Start();
	void SetLoadoutStyle(int32 Value);
	void Objective_Stage_Started(class ABP_Objective_TomatoFight_C* Objective, class ABP_ObjectiveSpawnPoint_GunFight_C* SpawnPoint);
	void Update_Survivor_Count(int32 Attacker_Survivors, int32 Defender_Survivors);
	void Show_Kill_Feed(const struct FStruct_TVTDeathmatch_KillFeed& KillFeed);
	void Last_Two_Minutes_In_Match();
	void Set_Round_Win_Reason(EGunFightWinReason Win_Reason, class UBP_GSC_Team_Raid_C* Team_Who_Won);
	void ReceiveBeginPlay();
	void Notify_Player_Statistics_Changed();
	void New_Round_Started();
	void Players_Update_PreRound_Time_Remaining(int32 Remaining_Time);
	void Set_PreRound_Remaining_Time(int32 Remaining_Time);
	void Last_Ten_Seconds_In_Match();
	void Players_Update_Time_Remaining(int32 Remaining_Time);
	void Set_Match_Remaining_Time(int32 Remaining_Time);
	void Debug_Switch_Pause_Match();
	void Get_Attacking_Team(class UBP_GSC_Team_Raid_C** Attacking_Team);
	void Get_Defending_Team(class UBP_GSC_Team_Raid_C** Defending_Team);
	void GetWorldMinMax(struct FVector* World_Min, struct FVector* World_Max);
	void Check_Remaining_Time_Sound_Cues();
	void Get_Statistics(TArray<struct FStruct_GunFightStatistics>* Statistics);
	void Get_Attacker_Statistics(TArray<struct FStruct_GunFightStatistics>* Statistics);
	void Get_Defender_Statistics(TArray<struct FStruct_GunFightStatistics>* Statistics);
	void Find_Player_Start_Positions();
	void Get_Winning_and_Losing_Teams(bool* Winner_Found, class UBP_GSC_Team_Raid_C** Winning_Team, class UBP_GSC_Team_Raid_C** Losing_Team, bool* TeamsAreEqual);
	void Show_End_Turn_Notification_To_Player(EGunFightWinReason Win_Reason, class UBP_GSC_Team_Raid_C* Winning_Team, class ABP_PlayerController_TomatoFight_C* Player_Controller);
	void Find_Winner_Screen();
	void Display_Winner_Screen();
	void GetScoreboardTabs(TArray<struct FStruct_ScoreboardTab>* Tabs);
	void IsLocalPlayerWinning(bool* IsWinning);
	void Get_Current_Round_Loadout(EFightVariant FightVariant, bool* Found_Any, struct FStruct_GunFightLoadout* Loadout);
	void Modify_Kill_Feed_Color_By_Team(const struct FStruct_TVTDeathmatch_KillFeed& Kill_Feed_In, struct FStruct_TVTDeathmatch_KillFeed* Kill_Feed_Out);
	void Show_or_Hide_Spawn_Markers(bool Show);
	void GetGameVariant(EFightVariant* Variant);
	void SetGameVariant();
	void ReceivedMatchPhaseReplication(E_TeamsMatchPhase Match_Phase_0);
	void GetGameModeStringName(class FString* StringName);
	void OnRep_GameVariant();

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BP_GameState_TomatoFight_C">();
	}
	static class ABP_GameState_TomatoFight_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<ABP_GameState_TomatoFight_C>();
	}
};
static_assert(alignof(ABP_GameState_TomatoFight_C) == 0x000008, "Wrong alignment on ABP_GameState_TomatoFight_C");
static_assert(sizeof(ABP_GameState_TomatoFight_C) == 0x0005D8, "Wrong size on ABP_GameState_TomatoFight_C");
static_assert(offsetof(ABP_GameState_TomatoFight_C, UberGraphFrame_BP_GameState_TomatoFight_C) == 0x0004B8, "Member 'ABP_GameState_TomatoFight_C::UberGraphFrame_BP_GameState_TomatoFight_C' has a wrong offset!");
static_assert(offsetof(ABP_GameState_TomatoFight_C, WorldMin) == 0x0004C0, "Member 'ABP_GameState_TomatoFight_C::WorldMin' has a wrong offset!");
static_assert(offsetof(ABP_GameState_TomatoFight_C, WorldMax) == 0x0004CC, "Member 'ABP_GameState_TomatoFight_C::WorldMax' has a wrong offset!");
static_assert(offsetof(ABP_GameState_TomatoFight_C, WorldMinMaxInitialized) == 0x0004D8, "Member 'ABP_GameState_TomatoFight_C::WorldMinMaxInitialized' has a wrong offset!");
static_assert(offsetof(ABP_GameState_TomatoFight_C, Last_Two_Minutes_Played) == 0x0004D9, "Member 'ABP_GameState_TomatoFight_C::Last_Two_Minutes_Played' has a wrong offset!");
static_assert(offsetof(ABP_GameState_TomatoFight_C, Last_Minute_Played) == 0x0004DA, "Member 'ABP_GameState_TomatoFight_C::Last_Minute_Played' has a wrong offset!");
static_assert(offsetof(ABP_GameState_TomatoFight_C, Last_Ten_Seconds_Played) == 0x0004DB, "Member 'ABP_GameState_TomatoFight_C::Last_Ten_Seconds_Played' has a wrong offset!");
static_assert(offsetof(ABP_GameState_TomatoFight_C, RemainingTimePreRound) == 0x0004DC, "Member 'ABP_GameState_TomatoFight_C::RemainingTimePreRound' has a wrong offset!");
static_assert(offsetof(ABP_GameState_TomatoFight_C, Attacker_Starts) == 0x0004E0, "Member 'ABP_GameState_TomatoFight_C::Attacker_Starts' has a wrong offset!");
static_assert(offsetof(ABP_GameState_TomatoFight_C, Defender_Starts) == 0x0004F0, "Member 'ABP_GameState_TomatoFight_C::Defender_Starts' has a wrong offset!");
static_assert(offsetof(ABP_GameState_TomatoFight_C, PreMinusRound_Start_Time) == 0x000500, "Member 'ABP_GameState_TomatoFight_C::PreMinusRound_Start_Time' has a wrong offset!");
static_assert(offsetof(ABP_GameState_TomatoFight_C, Rounds_To_Win) == 0x000504, "Member 'ABP_GameState_TomatoFight_C::Rounds_To_Win' has a wrong offset!");
static_assert(offsetof(ABP_GameState_TomatoFight_C, Last_Round_Win_Reason) == 0x000508, "Member 'ABP_GameState_TomatoFight_C::Last_Round_Win_Reason' has a wrong offset!");
static_assert(offsetof(ABP_GameState_TomatoFight_C, Winner_Screen) == 0x000510, "Member 'ABP_GameState_TomatoFight_C::Winner_Screen' has a wrong offset!");
static_assert(offsetof(ABP_GameState_TomatoFight_C, Leave_Match_Time) == 0x000518, "Member 'ABP_GameState_TomatoFight_C::Leave_Match_Time' has a wrong offset!");
static_assert(offsetof(ABP_GameState_TomatoFight_C, Last_Round_Win_Team) == 0x000520, "Member 'ABP_GameState_TomatoFight_C::Last_Round_Win_Team' has a wrong offset!");
static_assert(offsetof(ABP_GameState_TomatoFight_C, KillFeedUI) == 0x000528, "Member 'ABP_GameState_TomatoFight_C::KillFeedUI' has a wrong offset!");
static_assert(offsetof(ABP_GameState_TomatoFight_C, SurvivorUI) == 0x000530, "Member 'ABP_GameState_TomatoFight_C::SurvivorUI' has a wrong offset!");
static_assert(offsetof(ABP_GameState_TomatoFight_C, Is_Objective_Phase) == 0x000538, "Member 'ABP_GameState_TomatoFight_C::Is_Objective_Phase' has a wrong offset!");
static_assert(offsetof(ABP_GameState_TomatoFight_C, Spawn_Sides_Switched) == 0x000539, "Member 'ABP_GameState_TomatoFight_C::Spawn_Sides_Switched' has a wrong offset!");
static_assert(offsetof(ABP_GameState_TomatoFight_C, Spawn_Markers) == 0x000540, "Member 'ABP_GameState_TomatoFight_C::Spawn_Markers' has a wrong offset!");
static_assert(offsetof(ABP_GameState_TomatoFight_C, Cheat_Match_Paused) == 0x000550, "Member 'ABP_GameState_TomatoFight_C::Cheat_Match_Paused' has a wrong offset!");
static_assert(offsetof(ABP_GameState_TomatoFight_C, LastPlayingSoundCue) == 0x000558, "Member 'ABP_GameState_TomatoFight_C::LastPlayingSoundCue' has a wrong offset!");
static_assert(offsetof(ABP_GameState_TomatoFight_C, FoundedSpawns) == 0x000560, "Member 'ABP_GameState_TomatoFight_C::FoundedSpawns' has a wrong offset!");
static_assert(offsetof(ABP_GameState_TomatoFight_C, LoadoutsByVariants) == 0x000568, "Member 'ABP_GameState_TomatoFight_C::LoadoutsByVariants' has a wrong offset!");
static_assert(offsetof(ABP_GameState_TomatoFight_C, GameVariant) == 0x0005B8, "Member 'ABP_GameState_TomatoFight_C::GameVariant' has a wrong offset!");
static_assert(offsetof(ABP_GameState_TomatoFight_C, SelectedSettingID) == 0x0005BC, "Member 'ABP_GameState_TomatoFight_C::SelectedSettingID' has a wrong offset!");
static_assert(offsetof(ABP_GameState_TomatoFight_C, FightVariantSet) == 0x0005C0, "Member 'ABP_GameState_TomatoFight_C::FightVariantSet' has a wrong offset!");
static_assert(offsetof(ABP_GameState_TomatoFight_C, FightVariantSetOnce) == 0x0005D0, "Member 'ABP_GameState_TomatoFight_C::FightVariantSetOnce' has a wrong offset!");

}

