#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: OceanPlugin

#include "Basic.hpp"

#include "CoreUObject_structs.hpp"
#include "OceanPlugin_structs.hpp"
#include "Engine_structs.hpp"
#include "Engine_classes.hpp"
#include "ApexDestruction_classes.hpp"


namespace SDK
{

// Class OceanPlugin.FishManager
// 0x0058 (0x0278 - 0x0220)
class AFishManager final : public AActor
{
public:
	TArray<class UClass*>                         FlockTypes;                                        // 0x0220(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<float>                                 NumInFlock;                                        // 0x0230(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	float                                         MinZ;                                              // 0x0240(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MaxZ;                                              // 0x0244(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         UnderwaterBoxLength;                               // 0x0248(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          AttachToPlayer;                                    // 0x024C(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          DebugMode;                                         // 0x024D(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_24E[0x2];                                      // 0x024E(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	class UClass*                                 PlayerType;                                        // 0x0250(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_258[0x20];                                     // 0x0258(0x0020)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"FishManager">();
	}
	static class AFishManager* GetDefaultObj()
	{
		return GetDefaultObjImpl<AFishManager>();
	}
};
static_assert(alignof(AFishManager) == 0x000008, "Wrong alignment on AFishManager");
static_assert(sizeof(AFishManager) == 0x000278, "Wrong size on AFishManager");
static_assert(offsetof(AFishManager, FlockTypes) == 0x000220, "Member 'AFishManager::FlockTypes' has a wrong offset!");
static_assert(offsetof(AFishManager, NumInFlock) == 0x000230, "Member 'AFishManager::NumInFlock' has a wrong offset!");
static_assert(offsetof(AFishManager, MinZ) == 0x000240, "Member 'AFishManager::MinZ' has a wrong offset!");
static_assert(offsetof(AFishManager, MaxZ) == 0x000244, "Member 'AFishManager::MaxZ' has a wrong offset!");
static_assert(offsetof(AFishManager, UnderwaterBoxLength) == 0x000248, "Member 'AFishManager::UnderwaterBoxLength' has a wrong offset!");
static_assert(offsetof(AFishManager, AttachToPlayer) == 0x00024C, "Member 'AFishManager::AttachToPlayer' has a wrong offset!");
static_assert(offsetof(AFishManager, DebugMode) == 0x00024D, "Member 'AFishManager::DebugMode' has a wrong offset!");
static_assert(offsetof(AFishManager, PlayerType) == 0x000250, "Member 'AFishManager::PlayerType' has a wrong offset!");

// Class OceanPlugin.AdvancedBuoyancyComponent
// 0x0110 (0x0310 - 0x0200)
class UAdvancedBuoyancyComponent final : public USceneComponent
{
public:
	bool                                          bUseDrag;                                          // 0x01F8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bDebugOn;                                          // 0x01F9(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1FA[0x6];                                      // 0x01FA(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class AOceanManager*                          TheOcean;                                          // 0x0200(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         WaterDensity;                                      // 0x0208(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Gravity;                                           // 0x020C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MeshDensity;                                       // 0x0210(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_214[0x14];                                     // 0x0214(0x0014)(Fixing Size After Last Property [ Dumper-7 ])
	class UStaticMeshComponent*                   BuoyantMesh;                                       // 0x0228(0x0008)(Edit, BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FTransform                             MeshTransform;                                     // 0x0230(0x0030)(Edit, BlueprintVisible, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	float                                         FalseVolume;                                       // 0x0260(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         BuoyancyReductionCoefficient;                      // 0x0264(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         BuoyancyPitchReductionCoefficient;                 // 0x0268(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DensityCorrection;                                 // 0x026C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DensityCorrectionModifier;                         // 0x0270(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SubmergedVolume;                                   // 0x0274(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ImpactCoefficient;                                 // 0x0278(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                DragCoefficient;                                   // 0x027C(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                SuctionCoefficient;                                // 0x0288(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ViscousDragCoefficient;                            // 0x0294(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MaxSlamAcceleration;                               // 0x0298(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_29C[0x4];                                      // 0x029C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FVector>                        AdvancedGridHeight;                                // 0x02A0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FForceTriangle>                 SubmergedTris;                                     // 0x02B0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<float>                                 TriSizes;                                          // 0x02C0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<float>                                 TriSubmergedArea;                                  // 0x02D0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_2E0[0x30];                                     // 0x02E0(0x0030)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void ApplyForce(const struct FForceTriangle& TriForce);
	void ApplySlamForce(const struct FVector& SlamForce, const struct FVector& TriCenter);
	void DrawDebugStuff(const struct FForceTriangle& TriForce, const struct FColor& DebugColor);
	void GetOcean();
	float GetOceanDepthFromGrid(const struct FVector& Position, bool bJustGetHeightAtLocation);
	void SetMeshDensity(float NewDensity, float NewWaterDensity);
	TArray<struct FForceTriangle> SplitTriangle(const struct FBuoyancyVertex& H, const struct FBuoyancyVertex& M, const struct FBuoyancyVertex& L, const struct FVector& InArrow);
	float TriangleArea(const struct FVector& A, const struct FVector& B, const struct FVector& C);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"AdvancedBuoyancyComponent">();
	}
	static class UAdvancedBuoyancyComponent* GetDefaultObj()
	{
		return GetDefaultObjImpl<UAdvancedBuoyancyComponent>();
	}
};
static_assert(alignof(UAdvancedBuoyancyComponent) == 0x000010, "Wrong alignment on UAdvancedBuoyancyComponent");
static_assert(sizeof(UAdvancedBuoyancyComponent) == 0x000310, "Wrong size on UAdvancedBuoyancyComponent");
static_assert(offsetof(UAdvancedBuoyancyComponent, bUseDrag) == 0x0001F8, "Member 'UAdvancedBuoyancyComponent::bUseDrag' has a wrong offset!");
static_assert(offsetof(UAdvancedBuoyancyComponent, bDebugOn) == 0x0001F9, "Member 'UAdvancedBuoyancyComponent::bDebugOn' has a wrong offset!");
static_assert(offsetof(UAdvancedBuoyancyComponent, TheOcean) == 0x000200, "Member 'UAdvancedBuoyancyComponent::TheOcean' has a wrong offset!");
static_assert(offsetof(UAdvancedBuoyancyComponent, WaterDensity) == 0x000208, "Member 'UAdvancedBuoyancyComponent::WaterDensity' has a wrong offset!");
static_assert(offsetof(UAdvancedBuoyancyComponent, Gravity) == 0x00020C, "Member 'UAdvancedBuoyancyComponent::Gravity' has a wrong offset!");
static_assert(offsetof(UAdvancedBuoyancyComponent, MeshDensity) == 0x000210, "Member 'UAdvancedBuoyancyComponent::MeshDensity' has a wrong offset!");
static_assert(offsetof(UAdvancedBuoyancyComponent, BuoyantMesh) == 0x000228, "Member 'UAdvancedBuoyancyComponent::BuoyantMesh' has a wrong offset!");
static_assert(offsetof(UAdvancedBuoyancyComponent, MeshTransform) == 0x000230, "Member 'UAdvancedBuoyancyComponent::MeshTransform' has a wrong offset!");
static_assert(offsetof(UAdvancedBuoyancyComponent, FalseVolume) == 0x000260, "Member 'UAdvancedBuoyancyComponent::FalseVolume' has a wrong offset!");
static_assert(offsetof(UAdvancedBuoyancyComponent, BuoyancyReductionCoefficient) == 0x000264, "Member 'UAdvancedBuoyancyComponent::BuoyancyReductionCoefficient' has a wrong offset!");
static_assert(offsetof(UAdvancedBuoyancyComponent, BuoyancyPitchReductionCoefficient) == 0x000268, "Member 'UAdvancedBuoyancyComponent::BuoyancyPitchReductionCoefficient' has a wrong offset!");
static_assert(offsetof(UAdvancedBuoyancyComponent, DensityCorrection) == 0x00026C, "Member 'UAdvancedBuoyancyComponent::DensityCorrection' has a wrong offset!");
static_assert(offsetof(UAdvancedBuoyancyComponent, DensityCorrectionModifier) == 0x000270, "Member 'UAdvancedBuoyancyComponent::DensityCorrectionModifier' has a wrong offset!");
static_assert(offsetof(UAdvancedBuoyancyComponent, SubmergedVolume) == 0x000274, "Member 'UAdvancedBuoyancyComponent::SubmergedVolume' has a wrong offset!");
static_assert(offsetof(UAdvancedBuoyancyComponent, ImpactCoefficient) == 0x000278, "Member 'UAdvancedBuoyancyComponent::ImpactCoefficient' has a wrong offset!");
static_assert(offsetof(UAdvancedBuoyancyComponent, DragCoefficient) == 0x00027C, "Member 'UAdvancedBuoyancyComponent::DragCoefficient' has a wrong offset!");
static_assert(offsetof(UAdvancedBuoyancyComponent, SuctionCoefficient) == 0x000288, "Member 'UAdvancedBuoyancyComponent::SuctionCoefficient' has a wrong offset!");
static_assert(offsetof(UAdvancedBuoyancyComponent, ViscousDragCoefficient) == 0x000294, "Member 'UAdvancedBuoyancyComponent::ViscousDragCoefficient' has a wrong offset!");
static_assert(offsetof(UAdvancedBuoyancyComponent, MaxSlamAcceleration) == 0x000298, "Member 'UAdvancedBuoyancyComponent::MaxSlamAcceleration' has a wrong offset!");
static_assert(offsetof(UAdvancedBuoyancyComponent, AdvancedGridHeight) == 0x0002A0, "Member 'UAdvancedBuoyancyComponent::AdvancedGridHeight' has a wrong offset!");
static_assert(offsetof(UAdvancedBuoyancyComponent, SubmergedTris) == 0x0002B0, "Member 'UAdvancedBuoyancyComponent::SubmergedTris' has a wrong offset!");
static_assert(offsetof(UAdvancedBuoyancyComponent, TriSizes) == 0x0002C0, "Member 'UAdvancedBuoyancyComponent::TriSizes' has a wrong offset!");
static_assert(offsetof(UAdvancedBuoyancyComponent, TriSubmergedArea) == 0x0002D0, "Member 'UAdvancedBuoyancyComponent::TriSubmergedArea' has a wrong offset!");

// Class OceanPlugin.BuoyantDestructibleComponent
// 0x0050 (0x07E0 - 0x0790)
class UBuoyantDestructibleComponent final : public UDestructibleComponent
{
public:
	uint8                                         Pad_790[0x8];                                      // 0x0790(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	class AOceanManager*                          OceanManager;                                      // 0x0798(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ChunkDensity;                                      // 0x07A0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         FluidDensity;                                      // 0x07A4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         FluidLinearDamping;                                // 0x07A8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         FluidAngularDamping;                               // 0x07AC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                VelocityDamper;                                    // 0x07B0(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ClampMaxVelocity;                                  // 0x07BC(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_7BD[0x3];                                      // 0x07BD(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         MaxUnderwaterVelocity;                             // 0x07C0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TestPointRadius;                                   // 0x07C4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          DrawDebugPoints;                                   // 0x07C8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          EnableWaveForces;                                  // 0x07C9(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_7CA[0x2];                                      // 0x07CA(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         WaveForceMultiplier;                               // 0x07CC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ChunkSleepThreshold;                               // 0x07D0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ChunkStabilizationThreshold;                       // 0x07D4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_7D8[0x8];                                      // 0x07D8(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"BuoyantDestructibleComponent">();
	}
	static class UBuoyantDestructibleComponent* GetDefaultObj()
	{
		return GetDefaultObjImpl<UBuoyantDestructibleComponent>();
	}
};
static_assert(alignof(UBuoyantDestructibleComponent) == 0x000010, "Wrong alignment on UBuoyantDestructibleComponent");
static_assert(sizeof(UBuoyantDestructibleComponent) == 0x0007E0, "Wrong size on UBuoyantDestructibleComponent");
static_assert(offsetof(UBuoyantDestructibleComponent, OceanManager) == 0x000798, "Member 'UBuoyantDestructibleComponent::OceanManager' has a wrong offset!");
static_assert(offsetof(UBuoyantDestructibleComponent, ChunkDensity) == 0x0007A0, "Member 'UBuoyantDestructibleComponent::ChunkDensity' has a wrong offset!");
static_assert(offsetof(UBuoyantDestructibleComponent, FluidDensity) == 0x0007A4, "Member 'UBuoyantDestructibleComponent::FluidDensity' has a wrong offset!");
static_assert(offsetof(UBuoyantDestructibleComponent, FluidLinearDamping) == 0x0007A8, "Member 'UBuoyantDestructibleComponent::FluidLinearDamping' has a wrong offset!");
static_assert(offsetof(UBuoyantDestructibleComponent, FluidAngularDamping) == 0x0007AC, "Member 'UBuoyantDestructibleComponent::FluidAngularDamping' has a wrong offset!");
static_assert(offsetof(UBuoyantDestructibleComponent, VelocityDamper) == 0x0007B0, "Member 'UBuoyantDestructibleComponent::VelocityDamper' has a wrong offset!");
static_assert(offsetof(UBuoyantDestructibleComponent, ClampMaxVelocity) == 0x0007BC, "Member 'UBuoyantDestructibleComponent::ClampMaxVelocity' has a wrong offset!");
static_assert(offsetof(UBuoyantDestructibleComponent, MaxUnderwaterVelocity) == 0x0007C0, "Member 'UBuoyantDestructibleComponent::MaxUnderwaterVelocity' has a wrong offset!");
static_assert(offsetof(UBuoyantDestructibleComponent, TestPointRadius) == 0x0007C4, "Member 'UBuoyantDestructibleComponent::TestPointRadius' has a wrong offset!");
static_assert(offsetof(UBuoyantDestructibleComponent, DrawDebugPoints) == 0x0007C8, "Member 'UBuoyantDestructibleComponent::DrawDebugPoints' has a wrong offset!");
static_assert(offsetof(UBuoyantDestructibleComponent, EnableWaveForces) == 0x0007C9, "Member 'UBuoyantDestructibleComponent::EnableWaveForces' has a wrong offset!");
static_assert(offsetof(UBuoyantDestructibleComponent, WaveForceMultiplier) == 0x0007CC, "Member 'UBuoyantDestructibleComponent::WaveForceMultiplier' has a wrong offset!");
static_assert(offsetof(UBuoyantDestructibleComponent, ChunkSleepThreshold) == 0x0007D0, "Member 'UBuoyantDestructibleComponent::ChunkSleepThreshold' has a wrong offset!");
static_assert(offsetof(UBuoyantDestructibleComponent, ChunkStabilizationThreshold) == 0x0007D4, "Member 'UBuoyantDestructibleComponent::ChunkStabilizationThreshold' has a wrong offset!");

// Class OceanPlugin.BuoyancyComponent
// 0x0090 (0x0180 - 0x00F0)
class UBuoyancyComponent final : public UMovementComponent
{
public:
	class AOceanManager*                          OceanManager;                                      // 0x00F0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MeshDensity;                                       // 0x00F8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         FluidDensity;                                      // 0x00FC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         FluidLinearDamping;                                // 0x0100(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         FluidAngularDamping;                               // 0x0104(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                VelocityDamper;                                    // 0x0108(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ClampMaxVelocity;                                  // 0x0114(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_115[0x3];                                      // 0x0115(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         MaxUnderwaterVelocity;                             // 0x0118(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TestPointRadius;                                   // 0x011C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FVector>                        TestPoints;                                        // 0x0120(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<float>                                 PointDensityOverride;                              // 0x0130(0x0010)(Edit, BlueprintVisible, ZeroConstructor, AdvancedDisplay, NativeAccessSpecifierPublic)
	bool                                          DrawDebugPoints;                                   // 0x0140(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          EnableStayUprightConstraint;                       // 0x0141(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_142[0x2];                                      // 0x0142(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         StayUprightStiffness;                              // 0x0144(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         StayUprightDamping;                                // 0x0148(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRotator                               StayUprightDesiredRotation;                        // 0x014C(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, NativeAccessSpecifierPublic)
	bool                                          EnableWaveForces;                                  // 0x0158(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_159[0x3];                                      // 0x0159(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         WaveForceMultiplier;                               // 0x015C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_160[0x20];                                     // 0x0160(0x0020)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"BuoyancyComponent">();
	}
	static class UBuoyancyComponent* GetDefaultObj()
	{
		return GetDefaultObjImpl<UBuoyancyComponent>();
	}
};
static_assert(alignof(UBuoyancyComponent) == 0x000008, "Wrong alignment on UBuoyancyComponent");
static_assert(sizeof(UBuoyancyComponent) == 0x000180, "Wrong size on UBuoyancyComponent");
static_assert(offsetof(UBuoyancyComponent, OceanManager) == 0x0000F0, "Member 'UBuoyancyComponent::OceanManager' has a wrong offset!");
static_assert(offsetof(UBuoyancyComponent, MeshDensity) == 0x0000F8, "Member 'UBuoyancyComponent::MeshDensity' has a wrong offset!");
static_assert(offsetof(UBuoyancyComponent, FluidDensity) == 0x0000FC, "Member 'UBuoyancyComponent::FluidDensity' has a wrong offset!");
static_assert(offsetof(UBuoyancyComponent, FluidLinearDamping) == 0x000100, "Member 'UBuoyancyComponent::FluidLinearDamping' has a wrong offset!");
static_assert(offsetof(UBuoyancyComponent, FluidAngularDamping) == 0x000104, "Member 'UBuoyancyComponent::FluidAngularDamping' has a wrong offset!");
static_assert(offsetof(UBuoyancyComponent, VelocityDamper) == 0x000108, "Member 'UBuoyancyComponent::VelocityDamper' has a wrong offset!");
static_assert(offsetof(UBuoyancyComponent, ClampMaxVelocity) == 0x000114, "Member 'UBuoyancyComponent::ClampMaxVelocity' has a wrong offset!");
static_assert(offsetof(UBuoyancyComponent, MaxUnderwaterVelocity) == 0x000118, "Member 'UBuoyancyComponent::MaxUnderwaterVelocity' has a wrong offset!");
static_assert(offsetof(UBuoyancyComponent, TestPointRadius) == 0x00011C, "Member 'UBuoyancyComponent::TestPointRadius' has a wrong offset!");
static_assert(offsetof(UBuoyancyComponent, TestPoints) == 0x000120, "Member 'UBuoyancyComponent::TestPoints' has a wrong offset!");
static_assert(offsetof(UBuoyancyComponent, PointDensityOverride) == 0x000130, "Member 'UBuoyancyComponent::PointDensityOverride' has a wrong offset!");
static_assert(offsetof(UBuoyancyComponent, DrawDebugPoints) == 0x000140, "Member 'UBuoyancyComponent::DrawDebugPoints' has a wrong offset!");
static_assert(offsetof(UBuoyancyComponent, EnableStayUprightConstraint) == 0x000141, "Member 'UBuoyancyComponent::EnableStayUprightConstraint' has a wrong offset!");
static_assert(offsetof(UBuoyancyComponent, StayUprightStiffness) == 0x000144, "Member 'UBuoyancyComponent::StayUprightStiffness' has a wrong offset!");
static_assert(offsetof(UBuoyancyComponent, StayUprightDamping) == 0x000148, "Member 'UBuoyancyComponent::StayUprightDamping' has a wrong offset!");
static_assert(offsetof(UBuoyancyComponent, StayUprightDesiredRotation) == 0x00014C, "Member 'UBuoyancyComponent::StayUprightDesiredRotation' has a wrong offset!");
static_assert(offsetof(UBuoyancyComponent, EnableWaveForces) == 0x000158, "Member 'UBuoyancyComponent::EnableWaveForces' has a wrong offset!");
static_assert(offsetof(UBuoyancyComponent, WaveForceMultiplier) == 0x00015C, "Member 'UBuoyancyComponent::WaveForceMultiplier' has a wrong offset!");

// Class OceanPlugin.BuoyancyForceComponent
// 0x00A0 (0x02A0 - 0x0200)
class UBuoyancyForceComponent final : public USceneComponent
{
public:
	class AOceanManager*                          OceanManager;                                      // 0x01F8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MeshDensity;                                       // 0x0200(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         FluidDensity;                                      // 0x0204(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         FluidLinearDamping;                                // 0x0208(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         FluidAngularDamping;                               // 0x020C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                VelocityDamper;                                    // 0x0210(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ClampMaxVelocity;                                  // 0x021C(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_21D[0x3];                                      // 0x021D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         MaxUnderwaterVelocity;                             // 0x0220(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TestPointRadius;                                   // 0x0224(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FVector>                        TestPoints;                                        // 0x0228(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	bool                                          ApplyForceToBones;                                 // 0x0238(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          SnapToSurfaceIfNoPhysics;                          // 0x0239(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          TwoGerstnerIterations;                             // 0x023A(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_23B[0x5];                                      // 0x023B(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<float>                                 PointDensityOverride;                              // 0x0240(0x0010)(Edit, BlueprintVisible, ZeroConstructor, AdvancedDisplay, NativeAccessSpecifierPublic)
	TArray<struct FStructBoneOverride>            BoneOverride;                                      // 0x0250(0x0010)(Edit, BlueprintVisible, ZeroConstructor, AdvancedDisplay, NativeAccessSpecifierPublic)
	bool                                          DrawDebugPoints;                                   // 0x0260(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          EnableStayUprightConstraint;                       // 0x0261(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_262[0x2];                                      // 0x0262(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         StayUprightStiffness;                              // 0x0264(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         StayUprightDamping;                                // 0x0268(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRotator                               StayUprightDesiredRotation;                        // 0x026C(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, NativeAccessSpecifierPublic)
	bool                                          EnableWaveForces;                                  // 0x0278(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_279[0x3];                                      // 0x0279(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         WaveForceMultiplier;                               // 0x027C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETickingGroup                                 TickGroup;                                         // 0x0280(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_281[0x1F];                                     // 0x0281(0x001F)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"BuoyancyForceComponent">();
	}
	static class UBuoyancyForceComponent* GetDefaultObj()
	{
		return GetDefaultObjImpl<UBuoyancyForceComponent>();
	}
};
static_assert(alignof(UBuoyancyForceComponent) == 0x000010, "Wrong alignment on UBuoyancyForceComponent");
static_assert(sizeof(UBuoyancyForceComponent) == 0x0002A0, "Wrong size on UBuoyancyForceComponent");
static_assert(offsetof(UBuoyancyForceComponent, OceanManager) == 0x0001F8, "Member 'UBuoyancyForceComponent::OceanManager' has a wrong offset!");
static_assert(offsetof(UBuoyancyForceComponent, MeshDensity) == 0x000200, "Member 'UBuoyancyForceComponent::MeshDensity' has a wrong offset!");
static_assert(offsetof(UBuoyancyForceComponent, FluidDensity) == 0x000204, "Member 'UBuoyancyForceComponent::FluidDensity' has a wrong offset!");
static_assert(offsetof(UBuoyancyForceComponent, FluidLinearDamping) == 0x000208, "Member 'UBuoyancyForceComponent::FluidLinearDamping' has a wrong offset!");
static_assert(offsetof(UBuoyancyForceComponent, FluidAngularDamping) == 0x00020C, "Member 'UBuoyancyForceComponent::FluidAngularDamping' has a wrong offset!");
static_assert(offsetof(UBuoyancyForceComponent, VelocityDamper) == 0x000210, "Member 'UBuoyancyForceComponent::VelocityDamper' has a wrong offset!");
static_assert(offsetof(UBuoyancyForceComponent, ClampMaxVelocity) == 0x00021C, "Member 'UBuoyancyForceComponent::ClampMaxVelocity' has a wrong offset!");
static_assert(offsetof(UBuoyancyForceComponent, MaxUnderwaterVelocity) == 0x000220, "Member 'UBuoyancyForceComponent::MaxUnderwaterVelocity' has a wrong offset!");
static_assert(offsetof(UBuoyancyForceComponent, TestPointRadius) == 0x000224, "Member 'UBuoyancyForceComponent::TestPointRadius' has a wrong offset!");
static_assert(offsetof(UBuoyancyForceComponent, TestPoints) == 0x000228, "Member 'UBuoyancyForceComponent::TestPoints' has a wrong offset!");
static_assert(offsetof(UBuoyancyForceComponent, ApplyForceToBones) == 0x000238, "Member 'UBuoyancyForceComponent::ApplyForceToBones' has a wrong offset!");
static_assert(offsetof(UBuoyancyForceComponent, SnapToSurfaceIfNoPhysics) == 0x000239, "Member 'UBuoyancyForceComponent::SnapToSurfaceIfNoPhysics' has a wrong offset!");
static_assert(offsetof(UBuoyancyForceComponent, TwoGerstnerIterations) == 0x00023A, "Member 'UBuoyancyForceComponent::TwoGerstnerIterations' has a wrong offset!");
static_assert(offsetof(UBuoyancyForceComponent, PointDensityOverride) == 0x000240, "Member 'UBuoyancyForceComponent::PointDensityOverride' has a wrong offset!");
static_assert(offsetof(UBuoyancyForceComponent, BoneOverride) == 0x000250, "Member 'UBuoyancyForceComponent::BoneOverride' has a wrong offset!");
static_assert(offsetof(UBuoyancyForceComponent, DrawDebugPoints) == 0x000260, "Member 'UBuoyancyForceComponent::DrawDebugPoints' has a wrong offset!");
static_assert(offsetof(UBuoyancyForceComponent, EnableStayUprightConstraint) == 0x000261, "Member 'UBuoyancyForceComponent::EnableStayUprightConstraint' has a wrong offset!");
static_assert(offsetof(UBuoyancyForceComponent, StayUprightStiffness) == 0x000264, "Member 'UBuoyancyForceComponent::StayUprightStiffness' has a wrong offset!");
static_assert(offsetof(UBuoyancyForceComponent, StayUprightDamping) == 0x000268, "Member 'UBuoyancyForceComponent::StayUprightDamping' has a wrong offset!");
static_assert(offsetof(UBuoyancyForceComponent, StayUprightDesiredRotation) == 0x00026C, "Member 'UBuoyancyForceComponent::StayUprightDesiredRotation' has a wrong offset!");
static_assert(offsetof(UBuoyancyForceComponent, EnableWaveForces) == 0x000278, "Member 'UBuoyancyForceComponent::EnableWaveForces' has a wrong offset!");
static_assert(offsetof(UBuoyancyForceComponent, WaveForceMultiplier) == 0x00027C, "Member 'UBuoyancyForceComponent::WaveForceMultiplier' has a wrong offset!");
static_assert(offsetof(UBuoyancyForceComponent, TickGroup) == 0x000280, "Member 'UBuoyancyForceComponent::TickGroup' has a wrong offset!");

// Class OceanPlugin.BuoyantMeshComponent
// 0x0060 (0x0550 - 0x04F0)
class UBuoyantMeshComponent final : public UStaticMeshComponent
{
public:
	uint8                                         Pad_4E8[0x8];                                      // 0x04E8(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	bool                                          bVerticalForcesOnly;                               // 0x04F0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bUseWaterPatch;                                    // 0x04F1(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bUseStaticForces;                                  // 0x04F2(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bUseDynamicForces;                                 // 0x04F3(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4F4[0x4];                                      // 0x04F4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class AOceanManager*                          OceanManager;                                      // 0x04F8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bDrawForceArrows;                                  // 0x0500(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bDrawWaterline;                                    // 0x0501(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bDrawVertices;                                     // 0x0502(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bDrawTriangles;                                    // 0x0503(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bDrawSubtriangles;                                 // 0x0504(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_505[0x3];                                      // 0x0505(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         ForceArrowSize;                                    // 0x0508(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bOverrideMeshDensity;                              // 0x050C(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_50D[0x3];                                      // 0x050D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         MeshDensity;                                       // 0x0510(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bOverrideMass;                                     // 0x0514(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_515[0x3];                                      // 0x0515(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Mass;                                              // 0x0518(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         WaterDensity;                                      // 0x051C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_520[0x28];                                     // 0x0520(0x0028)(Fixing Size After Last Property [ Dumper-7 ])
	class UWaterHeightmapComponent*               WaterHeightmap;                                    // 0x0548(0x0008)(ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"BuoyantMeshComponent">();
	}
	static class UBuoyantMeshComponent* GetDefaultObj()
	{
		return GetDefaultObjImpl<UBuoyantMeshComponent>();
	}
};
static_assert(alignof(UBuoyantMeshComponent) == 0x000010, "Wrong alignment on UBuoyantMeshComponent");
static_assert(sizeof(UBuoyantMeshComponent) == 0x000550, "Wrong size on UBuoyantMeshComponent");
static_assert(offsetof(UBuoyantMeshComponent, bVerticalForcesOnly) == 0x0004F0, "Member 'UBuoyantMeshComponent::bVerticalForcesOnly' has a wrong offset!");
static_assert(offsetof(UBuoyantMeshComponent, bUseWaterPatch) == 0x0004F1, "Member 'UBuoyantMeshComponent::bUseWaterPatch' has a wrong offset!");
static_assert(offsetof(UBuoyantMeshComponent, bUseStaticForces) == 0x0004F2, "Member 'UBuoyantMeshComponent::bUseStaticForces' has a wrong offset!");
static_assert(offsetof(UBuoyantMeshComponent, bUseDynamicForces) == 0x0004F3, "Member 'UBuoyantMeshComponent::bUseDynamicForces' has a wrong offset!");
static_assert(offsetof(UBuoyantMeshComponent, OceanManager) == 0x0004F8, "Member 'UBuoyantMeshComponent::OceanManager' has a wrong offset!");
static_assert(offsetof(UBuoyantMeshComponent, bDrawForceArrows) == 0x000500, "Member 'UBuoyantMeshComponent::bDrawForceArrows' has a wrong offset!");
static_assert(offsetof(UBuoyantMeshComponent, bDrawWaterline) == 0x000501, "Member 'UBuoyantMeshComponent::bDrawWaterline' has a wrong offset!");
static_assert(offsetof(UBuoyantMeshComponent, bDrawVertices) == 0x000502, "Member 'UBuoyantMeshComponent::bDrawVertices' has a wrong offset!");
static_assert(offsetof(UBuoyantMeshComponent, bDrawTriangles) == 0x000503, "Member 'UBuoyantMeshComponent::bDrawTriangles' has a wrong offset!");
static_assert(offsetof(UBuoyantMeshComponent, bDrawSubtriangles) == 0x000504, "Member 'UBuoyantMeshComponent::bDrawSubtriangles' has a wrong offset!");
static_assert(offsetof(UBuoyantMeshComponent, ForceArrowSize) == 0x000508, "Member 'UBuoyantMeshComponent::ForceArrowSize' has a wrong offset!");
static_assert(offsetof(UBuoyantMeshComponent, bOverrideMeshDensity) == 0x00050C, "Member 'UBuoyantMeshComponent::bOverrideMeshDensity' has a wrong offset!");
static_assert(offsetof(UBuoyantMeshComponent, MeshDensity) == 0x000510, "Member 'UBuoyantMeshComponent::MeshDensity' has a wrong offset!");
static_assert(offsetof(UBuoyantMeshComponent, bOverrideMass) == 0x000514, "Member 'UBuoyantMeshComponent::bOverrideMass' has a wrong offset!");
static_assert(offsetof(UBuoyantMeshComponent, Mass) == 0x000518, "Member 'UBuoyantMeshComponent::Mass' has a wrong offset!");
static_assert(offsetof(UBuoyantMeshComponent, WaterDensity) == 0x00051C, "Member 'UBuoyantMeshComponent::WaterDensity' has a wrong offset!");
static_assert(offsetof(UBuoyantMeshComponent, WaterHeightmap) == 0x000548, "Member 'UBuoyantMeshComponent::WaterHeightmap' has a wrong offset!");

// Class OceanPlugin.BuoyantDestructible
// 0x0008 (0x0228 - 0x0220)
class ABuoyantDestructible final : public AActor
{
public:
	class UBuoyantDestructibleComponent*          BuoyantDestructibleComponent;                      // 0x0220(0x0008)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"BuoyantDestructible">();
	}
	static class ABuoyantDestructible* GetDefaultObj()
	{
		return GetDefaultObjImpl<ABuoyantDestructible>();
	}
};
static_assert(alignof(ABuoyantDestructible) == 0x000008, "Wrong alignment on ABuoyantDestructible");
static_assert(sizeof(ABuoyantDestructible) == 0x000228, "Wrong size on ABuoyantDestructible");
static_assert(offsetof(ABuoyantDestructible, BuoyantDestructibleComponent) == 0x000220, "Member 'ABuoyantDestructible::BuoyantDestructibleComponent' has a wrong offset!");

// Class OceanPlugin.CustomVehicleController
// 0x0008 (0x0588 - 0x0580)
class ACustomVehicleController final : public APlayerController
{
public:
	class APawn*                                  PlayerPawn;                                        // 0x0580(0x0008)(Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)

public:
	void DrawBuoyancyPoints();
	void EnableBuoyancy();
	void EnterVehicle(class APawn* Vehicle);
	void ExitVehicle();
	bool GetIsDriving();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"CustomVehicleController">();
	}
	static class ACustomVehicleController* GetDefaultObj()
	{
		return GetDefaultObjImpl<ACustomVehicleController>();
	}
};
static_assert(alignof(ACustomVehicleController) == 0x000008, "Wrong alignment on ACustomVehicleController");
static_assert(sizeof(ACustomVehicleController) == 0x000588, "Wrong size on ACustomVehicleController");
static_assert(offsetof(ACustomVehicleController, PlayerPawn) == 0x000580, "Member 'ACustomVehicleController::PlayerPawn' has a wrong offset!");

// Class OceanPlugin.FlockFish
// 0x0180 (0x0400 - 0x0280)
class AFlockFish final : public APawn
{
public:
	uint8                                         Pad_280[0x10];                                     // 0x0280(0x0010)(Fixing Size After Last Property [ Dumper-7 ])
	class USphereComponent*                       FishInteractionSphere;                             // 0x0290(0x0008)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsLeader;                                          // 0x0298(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_299[0x7];                                      // 0x0299(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class UClass*>                         EnemyTypes;                                        // 0x02A0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<class UClass*>                         PreyTypes;                                         // 0x02B0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	class UClass*                                 NeighborType;                                      // 0x02C0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         FollowDist;                                        // 0x02C8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Speed;                                             // 0x02CC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MaxSpeed;                                          // 0x02D0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TurnSpeed;                                         // 0x02D4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TurnFrequency;                                     // 0x02D8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         HungerResetTime;                                   // 0x02DC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DistBehindSpeedUpRange;                            // 0x02E0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SeperationDistanceMultiplier;                      // 0x02E4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         FleeDistanceMultiplier;                            // 0x02E8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         FleeAccelerationMultiplier;                        // 0x02EC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ChaseAccelerationMultiplier;                       // 0x02F0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SeekDecelerationMultiplier;                        // 0x02F4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         AvoidForceMultiplier;                              // 0x02F8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         AvoidanceForce;                                    // 0x02FC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UClass*                                 PlayerType;                                        // 0x0300(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                UnderwaterMin;                                     // 0x0308(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                UnderwaterMax;                                     // 0x0314(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         CustomZSeekMin;                                    // 0x0320(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         CustomZSeekMax;                                    // 0x0324(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         NumNeighborsToEvaluate;                            // 0x0328(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         UpdateEveryTick;                                   // 0x032C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_330[0x10];                                     // 0x0330(0x0010)(Fixing Size After Last Property [ Dumper-7 ])
	bool                                          DebugMode;                                         // 0x0340(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_341[0xBF];                                     // 0x0341(0x00BF)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void OnBeginOverlap(class UPrimitiveComponent* ActivatedComp, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, int32 OtherBodyIndex, bool bFromSweep, const struct FHitResult& SweepResult);
	void OnEndOverlap(class UPrimitiveComponent* ActivatedComp, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, int32 OtherBodyIndex);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"FlockFish">();
	}
	static class AFlockFish* GetDefaultObj()
	{
		return GetDefaultObjImpl<AFlockFish>();
	}
};
static_assert(alignof(AFlockFish) == 0x000008, "Wrong alignment on AFlockFish");
static_assert(sizeof(AFlockFish) == 0x000400, "Wrong size on AFlockFish");
static_assert(offsetof(AFlockFish, FishInteractionSphere) == 0x000290, "Member 'AFlockFish::FishInteractionSphere' has a wrong offset!");
static_assert(offsetof(AFlockFish, IsLeader) == 0x000298, "Member 'AFlockFish::IsLeader' has a wrong offset!");
static_assert(offsetof(AFlockFish, EnemyTypes) == 0x0002A0, "Member 'AFlockFish::EnemyTypes' has a wrong offset!");
static_assert(offsetof(AFlockFish, PreyTypes) == 0x0002B0, "Member 'AFlockFish::PreyTypes' has a wrong offset!");
static_assert(offsetof(AFlockFish, NeighborType) == 0x0002C0, "Member 'AFlockFish::NeighborType' has a wrong offset!");
static_assert(offsetof(AFlockFish, FollowDist) == 0x0002C8, "Member 'AFlockFish::FollowDist' has a wrong offset!");
static_assert(offsetof(AFlockFish, Speed) == 0x0002CC, "Member 'AFlockFish::Speed' has a wrong offset!");
static_assert(offsetof(AFlockFish, MaxSpeed) == 0x0002D0, "Member 'AFlockFish::MaxSpeed' has a wrong offset!");
static_assert(offsetof(AFlockFish, TurnSpeed) == 0x0002D4, "Member 'AFlockFish::TurnSpeed' has a wrong offset!");
static_assert(offsetof(AFlockFish, TurnFrequency) == 0x0002D8, "Member 'AFlockFish::TurnFrequency' has a wrong offset!");
static_assert(offsetof(AFlockFish, HungerResetTime) == 0x0002DC, "Member 'AFlockFish::HungerResetTime' has a wrong offset!");
static_assert(offsetof(AFlockFish, DistBehindSpeedUpRange) == 0x0002E0, "Member 'AFlockFish::DistBehindSpeedUpRange' has a wrong offset!");
static_assert(offsetof(AFlockFish, SeperationDistanceMultiplier) == 0x0002E4, "Member 'AFlockFish::SeperationDistanceMultiplier' has a wrong offset!");
static_assert(offsetof(AFlockFish, FleeDistanceMultiplier) == 0x0002E8, "Member 'AFlockFish::FleeDistanceMultiplier' has a wrong offset!");
static_assert(offsetof(AFlockFish, FleeAccelerationMultiplier) == 0x0002EC, "Member 'AFlockFish::FleeAccelerationMultiplier' has a wrong offset!");
static_assert(offsetof(AFlockFish, ChaseAccelerationMultiplier) == 0x0002F0, "Member 'AFlockFish::ChaseAccelerationMultiplier' has a wrong offset!");
static_assert(offsetof(AFlockFish, SeekDecelerationMultiplier) == 0x0002F4, "Member 'AFlockFish::SeekDecelerationMultiplier' has a wrong offset!");
static_assert(offsetof(AFlockFish, AvoidForceMultiplier) == 0x0002F8, "Member 'AFlockFish::AvoidForceMultiplier' has a wrong offset!");
static_assert(offsetof(AFlockFish, AvoidanceForce) == 0x0002FC, "Member 'AFlockFish::AvoidanceForce' has a wrong offset!");
static_assert(offsetof(AFlockFish, PlayerType) == 0x000300, "Member 'AFlockFish::PlayerType' has a wrong offset!");
static_assert(offsetof(AFlockFish, UnderwaterMin) == 0x000308, "Member 'AFlockFish::UnderwaterMin' has a wrong offset!");
static_assert(offsetof(AFlockFish, UnderwaterMax) == 0x000314, "Member 'AFlockFish::UnderwaterMax' has a wrong offset!");
static_assert(offsetof(AFlockFish, CustomZSeekMin) == 0x000320, "Member 'AFlockFish::CustomZSeekMin' has a wrong offset!");
static_assert(offsetof(AFlockFish, CustomZSeekMax) == 0x000324, "Member 'AFlockFish::CustomZSeekMax' has a wrong offset!");
static_assert(offsetof(AFlockFish, NumNeighborsToEvaluate) == 0x000328, "Member 'AFlockFish::NumNeighborsToEvaluate' has a wrong offset!");
static_assert(offsetof(AFlockFish, UpdateEveryTick) == 0x00032C, "Member 'AFlockFish::UpdateEveryTick' has a wrong offset!");
static_assert(offsetof(AFlockFish, DebugMode) == 0x000340, "Member 'AFlockFish::DebugMode' has a wrong offset!");

// Class OceanPlugin.InfiniteSystemComponent
// 0x0020 (0x0220 - 0x0200)
class UInfiniteSystemComponent final : public USceneComponent
{
public:
	bool                                          UpdateInEditor;                                    // 0x01F8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EFollowMethod                                 FollowMethod;                                      // 0x01F9(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1FA[0x2];                                      // 0x01FA(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         GridSnapSize;                                      // 0x01FC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MaxLookAtDistance;                                 // 0x0200(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ScaleByDistance;                                   // 0x0204(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_205[0x3];                                      // 0x0205(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         ScaleDistanceFactor;                               // 0x0208(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ScaleStartDistance;                                // 0x020C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ScaleMin;                                          // 0x0210(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ScaleMax;                                          // 0x0214(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UWorld*                                 World;                                             // 0x0218(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"InfiniteSystemComponent">();
	}
	static class UInfiniteSystemComponent* GetDefaultObj()
	{
		return GetDefaultObjImpl<UInfiniteSystemComponent>();
	}
};
static_assert(alignof(UInfiniteSystemComponent) == 0x000010, "Wrong alignment on UInfiniteSystemComponent");
static_assert(sizeof(UInfiniteSystemComponent) == 0x000220, "Wrong size on UInfiniteSystemComponent");
static_assert(offsetof(UInfiniteSystemComponent, UpdateInEditor) == 0x0001F8, "Member 'UInfiniteSystemComponent::UpdateInEditor' has a wrong offset!");
static_assert(offsetof(UInfiniteSystemComponent, FollowMethod) == 0x0001F9, "Member 'UInfiniteSystemComponent::FollowMethod' has a wrong offset!");
static_assert(offsetof(UInfiniteSystemComponent, GridSnapSize) == 0x0001FC, "Member 'UInfiniteSystemComponent::GridSnapSize' has a wrong offset!");
static_assert(offsetof(UInfiniteSystemComponent, MaxLookAtDistance) == 0x000200, "Member 'UInfiniteSystemComponent::MaxLookAtDistance' has a wrong offset!");
static_assert(offsetof(UInfiniteSystemComponent, ScaleByDistance) == 0x000204, "Member 'UInfiniteSystemComponent::ScaleByDistance' has a wrong offset!");
static_assert(offsetof(UInfiniteSystemComponent, ScaleDistanceFactor) == 0x000208, "Member 'UInfiniteSystemComponent::ScaleDistanceFactor' has a wrong offset!");
static_assert(offsetof(UInfiniteSystemComponent, ScaleStartDistance) == 0x00020C, "Member 'UInfiniteSystemComponent::ScaleStartDistance' has a wrong offset!");
static_assert(offsetof(UInfiniteSystemComponent, ScaleMin) == 0x000210, "Member 'UInfiniteSystemComponent::ScaleMin' has a wrong offset!");
static_assert(offsetof(UInfiniteSystemComponent, ScaleMax) == 0x000214, "Member 'UInfiniteSystemComponent::ScaleMax' has a wrong offset!");
static_assert(offsetof(UInfiniteSystemComponent, World) == 0x000218, "Member 'UInfiniteSystemComponent::World' has a wrong offset!");

// Class OceanPlugin.OceanManager
// 0x0088 (0x02A8 - 0x0220)
class AOceanManager : public AActor
{
public:
	bool                                          EnableGerstnerWaves;                               // 0x0220(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_221[0x3];                                      // 0x0221(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector2D                              GlobalWaveDirection;                               // 0x0224(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         GlobalWaveSpeed;                                   // 0x022C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         GlobalWaveAmplitude;                               // 0x0230(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DistanceCheck;                                     // 0x0234(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FWaveParameter>                 WaveClusters;                                      // 0x0238(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FWaveSetParameters>             WaveSetOffsetsOverride;                            // 0x0248(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	float                                         NetWorkTimeOffset;                                 // 0x0258(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bEnableLandscapeModulation;                        // 0x025C(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_25D[0x3];                                      // 0x025D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         ModulationStartHeight;                             // 0x0260(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ModulationMaxHeight;                               // 0x0264(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ModulationPower;                                   // 0x0268(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_26C[0x4];                                      // 0x026C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class ALandscape*                             Landscape;                                         // 0x0270(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UTexture2D*                             HeightmapTexture;                                  // 0x0278(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_280[0x28];                                     // 0x0280(0x0028)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	struct FVector GetWaveHeightValue(const struct FVector& Location, const class UWorld* World, bool HeightOnly, bool TwoIterations);
	void LoadLandscapeHeightmap(class UTexture2D* Tex2D);

	struct FLinearColor GetHeightmapPixel(float U, float V) const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"OceanManager">();
	}
	static class AOceanManager* GetDefaultObj()
	{
		return GetDefaultObjImpl<AOceanManager>();
	}
};
static_assert(alignof(AOceanManager) == 0x000008, "Wrong alignment on AOceanManager");
static_assert(sizeof(AOceanManager) == 0x0002A8, "Wrong size on AOceanManager");
static_assert(offsetof(AOceanManager, EnableGerstnerWaves) == 0x000220, "Member 'AOceanManager::EnableGerstnerWaves' has a wrong offset!");
static_assert(offsetof(AOceanManager, GlobalWaveDirection) == 0x000224, "Member 'AOceanManager::GlobalWaveDirection' has a wrong offset!");
static_assert(offsetof(AOceanManager, GlobalWaveSpeed) == 0x00022C, "Member 'AOceanManager::GlobalWaveSpeed' has a wrong offset!");
static_assert(offsetof(AOceanManager, GlobalWaveAmplitude) == 0x000230, "Member 'AOceanManager::GlobalWaveAmplitude' has a wrong offset!");
static_assert(offsetof(AOceanManager, DistanceCheck) == 0x000234, "Member 'AOceanManager::DistanceCheck' has a wrong offset!");
static_assert(offsetof(AOceanManager, WaveClusters) == 0x000238, "Member 'AOceanManager::WaveClusters' has a wrong offset!");
static_assert(offsetof(AOceanManager, WaveSetOffsetsOverride) == 0x000248, "Member 'AOceanManager::WaveSetOffsetsOverride' has a wrong offset!");
static_assert(offsetof(AOceanManager, NetWorkTimeOffset) == 0x000258, "Member 'AOceanManager::NetWorkTimeOffset' has a wrong offset!");
static_assert(offsetof(AOceanManager, bEnableLandscapeModulation) == 0x00025C, "Member 'AOceanManager::bEnableLandscapeModulation' has a wrong offset!");
static_assert(offsetof(AOceanManager, ModulationStartHeight) == 0x000260, "Member 'AOceanManager::ModulationStartHeight' has a wrong offset!");
static_assert(offsetof(AOceanManager, ModulationMaxHeight) == 0x000264, "Member 'AOceanManager::ModulationMaxHeight' has a wrong offset!");
static_assert(offsetof(AOceanManager, ModulationPower) == 0x000268, "Member 'AOceanManager::ModulationPower' has a wrong offset!");
static_assert(offsetof(AOceanManager, Landscape) == 0x000270, "Member 'AOceanManager::Landscape' has a wrong offset!");
static_assert(offsetof(AOceanManager, HeightmapTexture) == 0x000278, "Member 'AOceanManager::HeightmapTexture' has a wrong offset!");

// Class OceanPlugin.TimeManager
// 0x00C8 (0x02E8 - 0x0220)
class ATimeManager final : public AActor
{
public:
	struct FTimeDate                              CurrentLocalTime;                                  // 0x0220(0x001C)(BlueprintVisible, BlueprintReadOnly, NoDestructor, NativeAccessSpecifierPublic)
	float                                         Latitude;                                          // 0x023C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Longitude;                                         // 0x0240(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         OffsetUTC;                                         // 0x0244(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         OffsetDST;                                         // 0x0248(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bAllowDaylightSavings;                             // 0x024C(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bDaylightSavingsActive;                            // 0x024D(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_24E[0x2];                                      // 0x024E(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         TimeScaleMultiplier;                               // 0x0250(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SolarTime;                                         // 0x0254(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         LocalClockTime;                                    // 0x0258(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TimeCorrection;                                    // 0x025C(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         LSTM;                                              // 0x0260(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         DayOfYear;                                         // 0x0264(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         EoT;                                               // 0x0268(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SolarAltAngle;                                     // 0x026C(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SolarDeclination;                                  // 0x0270(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SolarAzimuth;                                      // 0x0274(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SolarHRA;                                          // 0x0278(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SiderealTime;                                      // 0x027C(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         LunarAltAngle;                                     // 0x0280(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         LunarHRA;                                          // 0x0284(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         LunarDeclination;                                  // 0x0288(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         LunarAzimuth;                                      // 0x028C(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         LunarRightAsc;                                     // 0x0290(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         LunarElapsedDays;                                  // 0x0294(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         EcLongitude;                                       // 0x0298(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         EcLatitude;                                        // 0x029C(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         EcDistance;                                        // 0x02A0(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         PartL;                                             // 0x02A4(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         PartM;                                             // 0x02A8(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         PartF;                                             // 0x02AC(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2B0[0x38];                                     // 0x02B0(0x0038)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	struct FRotator CalculateMoonAngle();
	float CalculateMoonPhase();
	struct FRotator CalculateSunAngle();
	int32 GetDayOfYear(const struct FTimeDate& Time);
	float GetDayPhase();
	int32 GetDaysInMonth(int32 Year, int32 Month);
	int32 GetDaysInYear(int32 Year);
	float GetElapsedDayInMinutes();
	float GetYearPhase();
	void IncrementTime(float DeltaSeconds);
	void InitializeCalendar(const struct FTimeDate& Time);
	bool IsLeapYear(int32 Year);
	void SetCurrentLocalTime(float Time);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"TimeManager">();
	}
	static class ATimeManager* GetDefaultObj()
	{
		return GetDefaultObjImpl<ATimeManager>();
	}
};
static_assert(alignof(ATimeManager) == 0x000008, "Wrong alignment on ATimeManager");
static_assert(sizeof(ATimeManager) == 0x0002E8, "Wrong size on ATimeManager");
static_assert(offsetof(ATimeManager, CurrentLocalTime) == 0x000220, "Member 'ATimeManager::CurrentLocalTime' has a wrong offset!");
static_assert(offsetof(ATimeManager, Latitude) == 0x00023C, "Member 'ATimeManager::Latitude' has a wrong offset!");
static_assert(offsetof(ATimeManager, Longitude) == 0x000240, "Member 'ATimeManager::Longitude' has a wrong offset!");
static_assert(offsetof(ATimeManager, OffsetUTC) == 0x000244, "Member 'ATimeManager::OffsetUTC' has a wrong offset!");
static_assert(offsetof(ATimeManager, OffsetDST) == 0x000248, "Member 'ATimeManager::OffsetDST' has a wrong offset!");
static_assert(offsetof(ATimeManager, bAllowDaylightSavings) == 0x00024C, "Member 'ATimeManager::bAllowDaylightSavings' has a wrong offset!");
static_assert(offsetof(ATimeManager, bDaylightSavingsActive) == 0x00024D, "Member 'ATimeManager::bDaylightSavingsActive' has a wrong offset!");
static_assert(offsetof(ATimeManager, TimeScaleMultiplier) == 0x000250, "Member 'ATimeManager::TimeScaleMultiplier' has a wrong offset!");
static_assert(offsetof(ATimeManager, SolarTime) == 0x000254, "Member 'ATimeManager::SolarTime' has a wrong offset!");
static_assert(offsetof(ATimeManager, LocalClockTime) == 0x000258, "Member 'ATimeManager::LocalClockTime' has a wrong offset!");
static_assert(offsetof(ATimeManager, TimeCorrection) == 0x00025C, "Member 'ATimeManager::TimeCorrection' has a wrong offset!");
static_assert(offsetof(ATimeManager, LSTM) == 0x000260, "Member 'ATimeManager::LSTM' has a wrong offset!");
static_assert(offsetof(ATimeManager, DayOfYear) == 0x000264, "Member 'ATimeManager::DayOfYear' has a wrong offset!");
static_assert(offsetof(ATimeManager, EoT) == 0x000268, "Member 'ATimeManager::EoT' has a wrong offset!");
static_assert(offsetof(ATimeManager, SolarAltAngle) == 0x00026C, "Member 'ATimeManager::SolarAltAngle' has a wrong offset!");
static_assert(offsetof(ATimeManager, SolarDeclination) == 0x000270, "Member 'ATimeManager::SolarDeclination' has a wrong offset!");
static_assert(offsetof(ATimeManager, SolarAzimuth) == 0x000274, "Member 'ATimeManager::SolarAzimuth' has a wrong offset!");
static_assert(offsetof(ATimeManager, SolarHRA) == 0x000278, "Member 'ATimeManager::SolarHRA' has a wrong offset!");
static_assert(offsetof(ATimeManager, SiderealTime) == 0x00027C, "Member 'ATimeManager::SiderealTime' has a wrong offset!");
static_assert(offsetof(ATimeManager, LunarAltAngle) == 0x000280, "Member 'ATimeManager::LunarAltAngle' has a wrong offset!");
static_assert(offsetof(ATimeManager, LunarHRA) == 0x000284, "Member 'ATimeManager::LunarHRA' has a wrong offset!");
static_assert(offsetof(ATimeManager, LunarDeclination) == 0x000288, "Member 'ATimeManager::LunarDeclination' has a wrong offset!");
static_assert(offsetof(ATimeManager, LunarAzimuth) == 0x00028C, "Member 'ATimeManager::LunarAzimuth' has a wrong offset!");
static_assert(offsetof(ATimeManager, LunarRightAsc) == 0x000290, "Member 'ATimeManager::LunarRightAsc' has a wrong offset!");
static_assert(offsetof(ATimeManager, LunarElapsedDays) == 0x000294, "Member 'ATimeManager::LunarElapsedDays' has a wrong offset!");
static_assert(offsetof(ATimeManager, EcLongitude) == 0x000298, "Member 'ATimeManager::EcLongitude' has a wrong offset!");
static_assert(offsetof(ATimeManager, EcLatitude) == 0x00029C, "Member 'ATimeManager::EcLatitude' has a wrong offset!");
static_assert(offsetof(ATimeManager, EcDistance) == 0x0002A0, "Member 'ATimeManager::EcDistance' has a wrong offset!");
static_assert(offsetof(ATimeManager, PartL) == 0x0002A4, "Member 'ATimeManager::PartL' has a wrong offset!");
static_assert(offsetof(ATimeManager, PartM) == 0x0002A8, "Member 'ATimeManager::PartM' has a wrong offset!");
static_assert(offsetof(ATimeManager, PartF) == 0x0002AC, "Member 'ATimeManager::PartF' has a wrong offset!");

// Class OceanPlugin.WaterHeightmapComponent
// 0x0078 (0x0128 - 0x00B0)
class UWaterHeightmapComponent final : public UActorComponent
{
public:
	float                                         DesiredCellSize;                                   // 0x00B0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bOnlyCollidingComponents;                          // 0x00B4(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_B5[0x3];                                       // 0x00B5(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         GridSizeMultiplier;                                // 0x00B8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bDrawUsedTriangles;                                // 0x00BC(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bDrawHeightmap;                                    // 0x00BD(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_BE[0x62];                                      // 0x00BE(0x0062)(Fixing Size After Last Property [ Dumper-7 ])
	class AOceanManager*                          OceanManager;                                      // 0x0120(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"WaterHeightmapComponent">();
	}
	static class UWaterHeightmapComponent* GetDefaultObj()
	{
		return GetDefaultObjImpl<UWaterHeightmapComponent>();
	}
};
static_assert(alignof(UWaterHeightmapComponent) == 0x000008, "Wrong alignment on UWaterHeightmapComponent");
static_assert(sizeof(UWaterHeightmapComponent) == 0x000128, "Wrong size on UWaterHeightmapComponent");
static_assert(offsetof(UWaterHeightmapComponent, DesiredCellSize) == 0x0000B0, "Member 'UWaterHeightmapComponent::DesiredCellSize' has a wrong offset!");
static_assert(offsetof(UWaterHeightmapComponent, bOnlyCollidingComponents) == 0x0000B4, "Member 'UWaterHeightmapComponent::bOnlyCollidingComponents' has a wrong offset!");
static_assert(offsetof(UWaterHeightmapComponent, GridSizeMultiplier) == 0x0000B8, "Member 'UWaterHeightmapComponent::GridSizeMultiplier' has a wrong offset!");
static_assert(offsetof(UWaterHeightmapComponent, bDrawUsedTriangles) == 0x0000BC, "Member 'UWaterHeightmapComponent::bDrawUsedTriangles' has a wrong offset!");
static_assert(offsetof(UWaterHeightmapComponent, bDrawHeightmap) == 0x0000BD, "Member 'UWaterHeightmapComponent::bDrawHeightmap' has a wrong offset!");
static_assert(offsetof(UWaterHeightmapComponent, OceanManager) == 0x000120, "Member 'UWaterHeightmapComponent::OceanManager' has a wrong offset!");

}

