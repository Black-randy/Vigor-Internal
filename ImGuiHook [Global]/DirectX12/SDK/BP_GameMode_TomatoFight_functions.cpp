#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_GameMode_TomatoFight

#include "Basic.hpp"

#include "BP_GameMode_TomatoFight_classes.hpp"
#include "BP_GameMode_TomatoFight_parameters.hpp"


namespace SDK
{

// Function BP_GameMode_TomatoFight.BP_GameMode_TomatoFight_C.ExecuteUbergraph_BP_GameMode_TomatoFight
// (Final, UbergraphFunction, HasDefaults)
// Parameters:
// int32                                   EntryPoint                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_GameMode_TomatoFight_C::ExecuteUbergraph_BP_GameMode_TomatoFight(int32 EntryPoint)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_GameMode_TomatoFight_C", "ExecuteUbergraph_BP_GameMode_TomatoFight");

	Params::BP_GameMode_TomatoFight_C_ExecuteUbergraph_BP_GameMode_TomatoFight Parms{};

	Parms.EntryPoint = EntryPoint;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_GameMode_TomatoFight.BP_GameMode_TomatoFight_C.K2_PostLogin
// (Event, Public, BlueprintEvent)
// Parameters:
// class APlayerController*                NewPlayer                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_GameMode_TomatoFight_C::K2_PostLogin(class APlayerController* NewPlayer)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_GameMode_TomatoFight_C", "K2_PostLogin");

	Params::BP_GameMode_TomatoFight_C_K2_PostLogin Parms{};

	Parms.NewPlayer = NewPlayer;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_GameMode_TomatoFight.BP_GameMode_TomatoFight_C.Report Enemy Hit
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// float                                   Damage                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class AHumanCharacter*                  Attacking_Character                                    (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_GameMode_TomatoFight_C::Report_Enemy_Hit(float Damage, class AHumanCharacter* Attacking_Character)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_GameMode_TomatoFight_C", "Report Enemy Hit");

	Params::BP_GameMode_TomatoFight_C_Report_Enemy_Hit Parms{};

	Parms.Damage = Damage;
	Parms.Attacking_Character = Attacking_Character;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_GameMode_TomatoFight.BP_GameMode_TomatoFight_C.K2_OnLogout
// (Event, Public, BlueprintEvent)
// Parameters:
// class AController*                      ExitingController                                      (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_GameMode_TomatoFight_C::K2_OnLogout(class AController* ExitingController)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_GameMode_TomatoFight_C", "K2_OnLogout");

	Params::BP_GameMode_TomatoFight_C_K2_OnLogout Parms{};

	Parms.ExitingController = ExitingController;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_GameMode_TomatoFight.BP_GameMode_TomatoFight_C.Kick Player For Teamkilling
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// class ABP_PlayerState_TomatoFight_C*    Player_State                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_GameMode_TomatoFight_C::Kick_Player_For_Teamkilling(class ABP_PlayerState_TomatoFight_C* Player_State)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_GameMode_TomatoFight_C", "Kick Player For Teamkilling");

	Params::BP_GameMode_TomatoFight_C_Kick_Player_For_Teamkilling Parms{};

	Parms.Player_State = Player_State;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_GameMode_TomatoFight.BP_GameMode_TomatoFight_C.Report Team Damage
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// float                                   Damage                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class AHumanCharacter*                  Attacking_Character                                    (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_GameMode_TomatoFight_C::Report_Team_Damage(float Damage, class AHumanCharacter* Attacking_Character)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_GameMode_TomatoFight_C", "Report Team Damage");

	Params::BP_GameMode_TomatoFight_C_Report_Team_Damage Parms{};

	Parms.Damage = Damage;
	Parms.Attacking_Character = Attacking_Character;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_GameMode_TomatoFight.BP_GameMode_TomatoFight_C.None Won
// (BlueprintCallable, BlueprintEvent)

void ABP_GameMode_TomatoFight_C::None_Won()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_GameMode_TomatoFight_C", "None Won");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_GameMode_TomatoFight.BP_GameMode_TomatoFight_C.Objective Used
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// class AHumanCharacter*                  Character                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_GameMode_TomatoFight_C::Objective_Used(class AHumanCharacter* Character)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_GameMode_TomatoFight_C", "Objective Used");

	Params::BP_GameMode_TomatoFight_C_Objective_Used Parms{};

	Parms.Character = Character;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_GameMode_TomatoFight.BP_GameMode_TomatoFight_C.Increment Rounds and assign sides to teams
// (BlueprintCallable, BlueprintEvent)

void ABP_GameMode_TomatoFight_C::Increment_Rounds_and_assign_sides_to_teams()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_GameMode_TomatoFight_C", "Increment Rounds and assign sides to teams");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_GameMode_TomatoFight.BP_GameMode_TomatoFight_C.ReceiveTick
// (Event, Public, BlueprintEvent)
// Parameters:
// float                                   DeltaSeconds                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_GameMode_TomatoFight_C::ReceiveTick(float DeltaSeconds)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_GameMode_TomatoFight_C", "ReceiveTick");

	Params::BP_GameMode_TomatoFight_C_ReceiveTick Parms{};

	Parms.DeltaSeconds = DeltaSeconds;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_GameMode_TomatoFight.BP_GameMode_TomatoFight_C.Second On Server Passed
// (BlueprintCallable, BlueprintEvent)

void ABP_GameMode_TomatoFight_C::Second_On_Server_Passed()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_GameMode_TomatoFight_C", "Second On Server Passed");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_GameMode_TomatoFight.BP_GameMode_TomatoFight_C.ReceiveBeginPlay
// (Event, Protected, BlueprintEvent)

void ABP_GameMode_TomatoFight_C::ReceiveBeginPlay()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_GameMode_TomatoFight_C", "ReceiveBeginPlay");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_GameMode_TomatoFight.BP_GameMode_TomatoFight_C.Player Connected To Match
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// class ABP_PlayerController_TomatoFight_C*Player_Controller                                      (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_GameMode_TomatoFight_C::Player_Connected_To_Match(class ABP_PlayerController_TomatoFight_C* Player_Controller)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_GameMode_TomatoFight_C", "Player Connected To Match");

	Params::BP_GameMode_TomatoFight_C_Player_Connected_To_Match Parms{};

	Parms.Player_Controller = Player_Controller;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_GameMode_TomatoFight.BP_GameMode_TomatoFight_C.Attackers Won
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// EGunFightWinReason                      Win_Reason                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_GameMode_TomatoFight_C::Attackers_Won(EGunFightWinReason Win_Reason)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_GameMode_TomatoFight_C", "Attackers Won");

	Params::BP_GameMode_TomatoFight_C_Attackers_Won Parms{};

	Parms.Win_Reason = Win_Reason;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_GameMode_TomatoFight.BP_GameMode_TomatoFight_C.Defenders Won
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// EGunFightWinReason                      Win_Reason                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_GameMode_TomatoFight_C::Defenders_Won(EGunFightWinReason Win_Reason)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_GameMode_TomatoFight_C", "Defenders Won");

	Params::BP_GameMode_TomatoFight_C_Defenders_Won Parms{};

	Parms.Win_Reason = Win_Reason;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_GameMode_TomatoFight.BP_GameMode_TomatoFight_C.Player Died
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// class ABP_Character_TomatoFight_C*      Victim_Character                                       (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class AHumanCharacter*                  Killer_Character                                       (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// EDamageType                             DamageType                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class UClass*                           Instigating_Item                                       (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    IsHeadshot                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ABP_GameMode_TomatoFight_C::Player_Died(class ABP_Character_TomatoFight_C* Victim_Character, class AHumanCharacter* Killer_Character, EDamageType DamageType, class UClass* Instigating_Item, bool IsHeadshot)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_GameMode_TomatoFight_C", "Player Died");

	Params::BP_GameMode_TomatoFight_C_Player_Died Parms{};

	Parms.Victim_Character = Victim_Character;
	Parms.Killer_Character = Killer_Character;
	Parms.DamageType = DamageType;
	Parms.Instigating_Item = Instigating_Item;
	Parms.IsHeadshot = IsHeadshot;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_GameMode_TomatoFight.BP_GameMode_TomatoFight_C.Move To Next Phase
// (BlueprintCallable, BlueprintEvent)

void ABP_GameMode_TomatoFight_C::Move_To_Next_Phase()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_GameMode_TomatoFight_C", "Move To Next Phase");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_GameMode_TomatoFight.BP_GameMode_TomatoFight_C.Match Finish
// (BlueprintCallable, BlueprintEvent)

void ABP_GameMode_TomatoFight_C::Match_Finish()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_GameMode_TomatoFight_C", "Match Finish");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_GameMode_TomatoFight.BP_GameMode_TomatoFight_C.Match Cleanup
// (BlueprintCallable, BlueprintEvent)

void ABP_GameMode_TomatoFight_C::Match_Cleanup()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_GameMode_TomatoFight_C", "Match Cleanup");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_GameMode_TomatoFight.BP_GameMode_TomatoFight_C.Match Initialization
// (BlueprintCallable, BlueprintEvent)

void ABP_GameMode_TomatoFight_C::Match_Initialization()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_GameMode_TomatoFight_C", "Match Initialization");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_GameMode_TomatoFight.BP_GameMode_TomatoFight_C.Start the Round
// (BlueprintCallable, BlueprintEvent)

void ABP_GameMode_TomatoFight_C::Start_the_Round()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_GameMode_TomatoFight_C", "Start the Round");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_GameMode_TomatoFight.BP_GameMode_TomatoFight_C.Spawn Objective
// (BlueprintCallable, BlueprintEvent)

void ABP_GameMode_TomatoFight_C::Spawn_Objective()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_GameMode_TomatoFight_C", "Spawn Objective");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_GameMode_TomatoFight.BP_GameMode_TomatoFight_C.Initialize New Round
// (BlueprintCallable, BlueprintEvent)

void ABP_GameMode_TomatoFight_C::Initialize_New_Round()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_GameMode_TomatoFight_C", "Initialize New Round");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_GameMode_TomatoFight.BP_GameMode_TomatoFight_C.Round Timer Expired
// (BlueprintCallable, BlueprintEvent)

void ABP_GameMode_TomatoFight_C::Round_Timer_Expired()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_GameMode_TomatoFight_C", "Round Timer Expired");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_GameMode_TomatoFight.BP_GameMode_TomatoFight_C.Round In Progress
// (BlueprintCallable, BlueprintEvent)

void ABP_GameMode_TomatoFight_C::Round_In_Progress()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_GameMode_TomatoFight_C", "Round In Progress");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_GameMode_TomatoFight.BP_GameMode_TomatoFight_C.Round Start
// (BlueprintCallable, BlueprintEvent)

void ABP_GameMode_TomatoFight_C::Round_Start()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_GameMode_TomatoFight_C", "Round Start");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_GameMode_TomatoFight.BP_GameMode_TomatoFight_C.Round Finish
// (BlueprintCallable, BlueprintEvent)

void ABP_GameMode_TomatoFight_C::Round_Finish()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_GameMode_TomatoFight_C", "Round Finish");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_GameMode_TomatoFight.BP_GameMode_TomatoFight_C.Round Cleanup
// (BlueprintCallable, BlueprintEvent)

void ABP_GameMode_TomatoFight_C::Round_Cleanup()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_GameMode_TomatoFight_C", "Round Cleanup");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_GameMode_TomatoFight.BP_GameMode_TomatoFight_C.Round Initialization
// (BlueprintCallable, BlueprintEvent)

void ABP_GameMode_TomatoFight_C::Round_Initialization()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_GameMode_TomatoFight_C", "Round Initialization");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_GameMode_TomatoFight.BP_GameMode_TomatoFight_C.Players Result Sent To Cloud
// (HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FCloudRequestResult              RequestResult                                          (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
// class AHumanPlayerController*           Player                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FUserMatchReward                 Reward                                                 (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)

void ABP_GameMode_TomatoFight_C::Players_Result_Sent_To_Cloud(const struct FCloudRequestResult& RequestResult, class AHumanPlayerController* Player, const struct FUserMatchReward& Reward)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_GameMode_TomatoFight_C", "Players Result Sent To Cloud");

	Params::BP_GameMode_TomatoFight_C_Players_Result_Sent_To_Cloud Parms{};

	Parms.RequestResult = std::move(RequestResult);
	Parms.Player = Player;
	Parms.Reward = std::move(Reward);

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_GameMode_TomatoFight.BP_GameMode_TomatoFight_C.Match ID Available
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// class FString                           Match_ID                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)

void ABP_GameMode_TomatoFight_C::Match_ID_Available(const class FString& Match_ID)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_GameMode_TomatoFight_C", "Match ID Available");

	Params::BP_GameMode_TomatoFight_C_Match_ID_Available Parms{};

	Parms.Match_ID = std::move(Match_ID);

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_GameMode_TomatoFight.BP_GameMode_TomatoFight_C.Player Cloud Id available
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// class FString                           Userid                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)

void ABP_GameMode_TomatoFight_C::Player_Cloud_Id_available(const class FString& Userid)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_GameMode_TomatoFight_C", "Player Cloud Id available");

	Params::BP_GameMode_TomatoFight_C_Player_Cloud_Id_available Parms{};

	Parms.Userid = std::move(Userid);

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_GameMode_TomatoFight.BP_GameMode_TomatoFight_C.Register Player Match ID
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// class ABP_PlayerController_TomatoFight_C*Player_Controller                                      (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_GameMode_TomatoFight_C::Register_Player_Match_ID(class ABP_PlayerController_TomatoFight_C* Player_Controller)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_GameMode_TomatoFight_C", "Register Player Match ID");

	Params::BP_GameMode_TomatoFight_C_Register_Player_Match_ID Parms{};

	Parms.Player_Controller = Player_Controller;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_GameMode_TomatoFight.BP_GameMode_TomatoFight_C.All Player Results Sent
// (BlueprintCallable, BlueprintEvent)

void ABP_GameMode_TomatoFight_C::All_Player_Results_Sent()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_GameMode_TomatoFight_C", "All Player Results Sent");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_GameMode_TomatoFight.BP_GameMode_TomatoFight_C.Match Unregistered From Cloud
// (HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FCloudRequestResult              RequestResult                                          (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)

void ABP_GameMode_TomatoFight_C::Match_Unregistered_From_Cloud(const struct FCloudRequestResult& RequestResult)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_GameMode_TomatoFight_C", "Match Unregistered From Cloud");

	Params::BP_GameMode_TomatoFight_C_Match_Unregistered_From_Cloud Parms{};

	Parms.RequestResult = std::move(RequestResult);

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_GameMode_TomatoFight.BP_GameMode_TomatoFight_C.Match Registered To Cloud
// (HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FCloudRequestResult              RequestResult                                          (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
// class FString                           MatchID                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)

void ABP_GameMode_TomatoFight_C::Match_Registered_To_Cloud(const struct FCloudRequestResult& RequestResult, const class FString& MatchID)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_GameMode_TomatoFight_C", "Match Registered To Cloud");

	Params::BP_GameMode_TomatoFight_C_Match_Registered_To_Cloud Parms{};

	Parms.RequestResult = std::move(RequestResult);
	Parms.MatchID = std::move(MatchID);

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_GameMode_TomatoFight.BP_GameMode_TomatoFight_C.User Registered To Cloud
// (HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FCloudRequestResult              RequestResult                                          (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
// class AHumanPlayerController*           Player                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_GameMode_TomatoFight_C::User_Registered_To_Cloud(const struct FCloudRequestResult& RequestResult, class AHumanPlayerController* Player)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_GameMode_TomatoFight_C", "User Registered To Cloud");

	Params::BP_GameMode_TomatoFight_C_User_Registered_To_Cloud Parms{};

	Parms.RequestResult = std::move(RequestResult);
	Parms.Player = Player;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_GameMode_TomatoFight.BP_GameMode_TomatoFight_C.Cheat_SkipMatch
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    bAttackersWon                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ABP_GameMode_TomatoFight_C::Cheat_SkipMatch(bool bAttackersWon)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_GameMode_TomatoFight_C", "Cheat_SkipMatch");

	Params::BP_GameMode_TomatoFight_C_Cheat_SkipMatch Parms{};

	Parms.bAttackersWon = bAttackersWon;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_GameMode_TomatoFight.BP_GameMode_TomatoFight_C.Cheat_AddScore
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// class ABP_PlayerController_TomatoFight_C*Controller                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class FName                             ScoreEvent                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_GameMode_TomatoFight_C::Cheat_AddScore(class ABP_PlayerController_TomatoFight_C* Controller, class FName ScoreEvent)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_GameMode_TomatoFight_C", "Cheat_AddScore");

	Params::BP_GameMode_TomatoFight_C_Cheat_AddScore Parms{};

	Parms.Controller = Controller;
	Parms.ScoreEvent = ScoreEvent;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_GameMode_TomatoFight.BP_GameMode_TomatoFight_C.Set Pause Match
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    Pause                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ABP_GameMode_TomatoFight_C::Set_Pause_Match(bool Pause)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_GameMode_TomatoFight_C", "Set Pause Match");

	Params::BP_GameMode_TomatoFight_C_Set_Pause_Match Parms{};

	Parms.Pause = Pause;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_GameMode_TomatoFight.BP_GameMode_TomatoFight_C.CheatEndMatch
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// int32                                   WinnerTeam                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_GameMode_TomatoFight_C::CheatEndMatch(int32 WinnerTeam)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_GameMode_TomatoFight_C", "CheatEndMatch");

	Params::BP_GameMode_TomatoFight_C_CheatEndMatch Parms{};

	Parms.WinnerTeam = WinnerTeam;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_GameMode_TomatoFight.BP_GameMode_TomatoFight_C.SetSettingID
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// int32                                   Input                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_GameMode_TomatoFight_C::SetSettingID(int32 Input)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_GameMode_TomatoFight_C", "SetSettingID");

	Params::BP_GameMode_TomatoFight_C_SetSettingID Parms{};

	Parms.Input = Input;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_GameMode_TomatoFight.BP_GameMode_TomatoFight_C.Find Objective Spawn Positions
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)

void ABP_GameMode_TomatoFight_C::Find_Objective_Spawn_Positions()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_GameMode_TomatoFight_C", "Find Objective Spawn Positions");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_GameMode_TomatoFight.BP_GameMode_TomatoFight_C.Spawn Objective On Server
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)

void ABP_GameMode_TomatoFight_C::Spawn_Objective_On_Server()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_GameMode_TomatoFight_C", "Spawn Objective On Server");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_GameMode_TomatoFight.BP_GameMode_TomatoFight_C.Destroy Objective On Server
// (Public, BlueprintCallable, BlueprintEvent)

void ABP_GameMode_TomatoFight_C::Destroy_Objective_On_Server()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_GameMode_TomatoFight_C", "Destroy Objective On Server");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_GameMode_TomatoFight.BP_GameMode_TomatoFight_C.Check for Winner
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    Winner_Found                                           (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ABP_GameMode_TomatoFight_C::Check_for_Winner(bool* Winner_Found)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_GameMode_TomatoFight_C", "Check for Winner");

	Params::BP_GameMode_TomatoFight_C_Check_for_Winner Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Winner_Found != nullptr)
		*Winner_Found = Parms.Winner_Found;
}


// Function BP_GameMode_TomatoFight.BP_GameMode_TomatoFight_C.Get Attacking Team
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// class UBP_GSC_Team_Raid_C*              Attacking_Team                                         (Parm, OutParm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_GameMode_TomatoFight_C::Get_Attacking_Team(class UBP_GSC_Team_Raid_C** Attacking_Team)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_GameMode_TomatoFight_C", "Get Attacking Team");

	Params::BP_GameMode_TomatoFight_C_Get_Attacking_Team Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Attacking_Team != nullptr)
		*Attacking_Team = Parms.Attacking_Team;
}


// Function BP_GameMode_TomatoFight.BP_GameMode_TomatoFight_C.Get Defending Team
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// class UBP_GSC_Team_Raid_C*              Defending_Team                                         (Parm, OutParm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_GameMode_TomatoFight_C::Get_Defending_Team(class UBP_GSC_Team_Raid_C** Defending_Team)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_GameMode_TomatoFight_C", "Get Defending Team");

	Params::BP_GameMode_TomatoFight_C_Get_Defending_Team Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Defending_Team != nullptr)
		*Defending_Team = Parms.Defending_Team;
}


// Function BP_GameMode_TomatoFight.BP_GameMode_TomatoFight_C.Spawn All Players
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)

void ABP_GameMode_TomatoFight_C::Spawn_All_Players()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_GameMode_TomatoFight_C", "Spawn All Players");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_GameMode_TomatoFight.BP_GameMode_TomatoFight_C.Get Round Winner by Player Elimination
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// class ABP_PlayerController_Teams_C*     Killed_Player_Controller                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    Attackers_Won                                          (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
// bool                                    Defenders_Won                                          (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ABP_GameMode_TomatoFight_C::Get_Round_Winner_by_Player_Elimination(class ABP_PlayerController_Teams_C* Killed_Player_Controller, bool* Attackers_Won, bool* Defenders_Won)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_GameMode_TomatoFight_C", "Get Round Winner by Player Elimination");

	Params::BP_GameMode_TomatoFight_C_Get_Round_Winner_by_Player_Elimination Parms{};

	Parms.Killed_Player_Controller = Killed_Player_Controller;

	UObject::ProcessEvent(Func, &Parms);

	if (Attackers_Won != nullptr)
		*Attackers_Won = Parms.Attackers_Won;

	if (Defenders_Won != nullptr)
		*Defenders_Won = Parms.Defenders_Won;
}


// Function BP_GameMode_TomatoFight.BP_GameMode_TomatoFight_C.Get All Players
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// TArray<class ABP_PlayerController_TomatoFight_C*>All_Players                                            (Parm, OutParm)

void ABP_GameMode_TomatoFight_C::Get_All_Players(TArray<class ABP_PlayerController_TomatoFight_C*>* All_Players)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_GameMode_TomatoFight_C", "Get All Players");

	Params::BP_GameMode_TomatoFight_C_Get_All_Players Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (All_Players != nullptr)
		*All_Players = std::move(Parms.All_Players);
}


// Function BP_GameMode_TomatoFight.BP_GameMode_TomatoFight_C.Spawn Player
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class AActor*                           Player_Start                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class ABP_PlayerController_C*           Player_Controller                                      (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_GameMode_TomatoFight_C::Spawn_Player(class AActor* Player_Start, class ABP_PlayerController_C* Player_Controller)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_GameMode_TomatoFight_C", "Spawn Player");

	Params::BP_GameMode_TomatoFight_C_Spawn_Player Parms{};

	Parms.Player_Start = Player_Start;
	Parms.Player_Controller = Player_Controller;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_GameMode_TomatoFight.BP_GameMode_TomatoFight_C.Get Player Spawn Position
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// class ABP_PlayerController_TomatoFight_C*Player_Controller                                      (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class AActor*                           Spawn_Position                                         (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_GameMode_TomatoFight_C::Get_Player_Spawn_Position(class ABP_PlayerController_TomatoFight_C* Player_Controller, class AActor** Spawn_Position)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_GameMode_TomatoFight_C", "Get Player Spawn Position");

	Params::BP_GameMode_TomatoFight_C_Get_Player_Spawn_Position Parms{};

	Parms.Player_Controller = Player_Controller;

	UObject::ProcessEvent(Func, &Parms);

	if (Spawn_Position != nullptr)
		*Spawn_Position = Parms.Spawn_Position;
}


// Function BP_GameMode_TomatoFight.BP_GameMode_TomatoFight_C.Remove Objective Markers
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)

void ABP_GameMode_TomatoFight_C::Remove_Objective_Markers()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_GameMode_TomatoFight_C", "Remove Objective Markers");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_GameMode_TomatoFight.BP_GameMode_TomatoFight_C.Clean Map Of Corpse Containers
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)

void ABP_GameMode_TomatoFight_C::Clean_Map_Of_Corpse_Containers()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_GameMode_TomatoFight_C", "Clean Map Of Corpse Containers");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_GameMode_TomatoFight.BP_GameMode_TomatoFight_C.Get Player Statistics
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// class AHumanPlayerController*           Player_Controller                                      (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    Found                                                  (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
// struct FStruct_GunFightStatistics       Statistic                                              (Parm, OutParm, HasGetValueTypeHash)

void ABP_GameMode_TomatoFight_C::Get_Player_Statistics(class AHumanPlayerController* Player_Controller, bool* Found, struct FStruct_GunFightStatistics* Statistic)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_GameMode_TomatoFight_C", "Get Player Statistics");

	Params::BP_GameMode_TomatoFight_C_Get_Player_Statistics Parms{};

	Parms.Player_Controller = Player_Controller;

	UObject::ProcessEvent(Func, &Parms);

	if (Found != nullptr)
		*Found = Parms.Found;

	if (Statistic != nullptr)
		*Statistic = std::move(Parms.Statistic);
}


// Function BP_GameMode_TomatoFight.BP_GameMode_TomatoFight_C.Teleport All Players To Random Spawn
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)

void ABP_GameMode_TomatoFight_C::Teleport_All_Players_To_Random_Spawn()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_GameMode_TomatoFight_C", "Teleport All Players To Random Spawn");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_GameMode_TomatoFight.BP_GameMode_TomatoFight_C.Get Random Spawn Position
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// class AActor*                           Spawn_Position                                         (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_GameMode_TomatoFight_C::Get_Random_Spawn_Position(class AActor** Spawn_Position)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_GameMode_TomatoFight_C", "Get Random Spawn Position");

	Params::BP_GameMode_TomatoFight_C_Get_Random_Spawn_Position Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Spawn_Position != nullptr)
		*Spawn_Position = Parms.Spawn_Position;
}


// Function BP_GameMode_TomatoFight.BP_GameMode_TomatoFight_C.Set All Players Invicibility
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    Set_Invincible                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// bool                                    bLockMovement                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ABP_GameMode_TomatoFight_C::Set_All_Players_Invicibility(bool Set_Invincible, bool bLockMovement)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_GameMode_TomatoFight_C", "Set All Players Invicibility");

	Params::BP_GameMode_TomatoFight_C_Set_All_Players_Invicibility Parms{};

	Parms.Set_Invincible = Set_Invincible;
	Parms.bLockMovement = bLockMovement;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_GameMode_TomatoFight.BP_GameMode_TomatoFight_C.Are Teams Full
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    Teams_Full                                             (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ABP_GameMode_TomatoFight_C::Are_Teams_Full(bool* Teams_Full)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_GameMode_TomatoFight_C", "Are Teams Full");

	Params::BP_GameMode_TomatoFight_C_Are_Teams_Full Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Teams_Full != nullptr)
		*Teams_Full = Parms.Teams_Full;
}


// Function BP_GameMode_TomatoFight.BP_GameMode_TomatoFight_C.PlayerCanRestart
// (Event, Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// class APlayerController*                Player                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)

bool ABP_GameMode_TomatoFight_C::PlayerCanRestart(class APlayerController* Player)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_GameMode_TomatoFight_C", "PlayerCanRestart");

	Params::BP_GameMode_TomatoFight_C_PlayerCanRestart Parms{};

	Parms.Player = Player;

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function BP_GameMode_TomatoFight.BP_GameMode_TomatoFight_C.Player Died Update Statistic
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// class AHumanCharacter*                  Victim_Character                                       (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class AHumanCharacter*                  Killer_Character                                       (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    Is_Headshot                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ABP_GameMode_TomatoFight_C::Player_Died_Update_Statistic(class AHumanCharacter* Victim_Character, class AHumanCharacter* Killer_Character, bool Is_Headshot)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_GameMode_TomatoFight_C", "Player Died Update Statistic");

	Params::BP_GameMode_TomatoFight_C_Player_Died_Update_Statistic Parms{};

	Parms.Victim_Character = Victim_Character;
	Parms.Killer_Character = Killer_Character;
	Parms.Is_Headshot = Is_Headshot;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_GameMode_TomatoFight.BP_GameMode_TomatoFight_C.Increase Objective Statistic
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// class AHumanCharacter*                  Character                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_GameMode_TomatoFight_C::Increase_Objective_Statistic(class AHumanCharacter* Character)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_GameMode_TomatoFight_C", "Increase Objective Statistic");

	Params::BP_GameMode_TomatoFight_C_Increase_Objective_Statistic Parms{};

	Parms.Character = Character;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_GameMode_TomatoFight.BP_GameMode_TomatoFight_C.Get Team With More Health
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// class UBP_GSC_Team_Raid_C*              Team_With_More_Health                                  (Parm, OutParm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_GameMode_TomatoFight_C::Get_Team_With_More_Health(class UBP_GSC_Team_Raid_C** Team_With_More_Health)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_GameMode_TomatoFight_C", "Get Team With More Health");

	Params::BP_GameMode_TomatoFight_C_Get_Team_With_More_Health Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Team_With_More_Health != nullptr)
		*Team_With_More_Health = Parms.Team_With_More_Health;
}


// Function BP_GameMode_TomatoFight.BP_GameMode_TomatoFight_C.Assign New Setting ID
// (Public, BlueprintCallable, BlueprintEvent)

void ABP_GameMode_TomatoFight_C::Assign_New_Setting_ID()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_GameMode_TomatoFight_C", "Assign New Setting ID");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_GameMode_TomatoFight.BP_GameMode_TomatoFight_C.Replicate Players Kill Feed
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// class AHumanCharacter*                  Victim                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class AHumanCharacter*                  Killer                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// EDamageType                             Damage_Type                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class UClass*                           Instigating_Item                                       (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    Is_Headshot                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ABP_GameMode_TomatoFight_C::Replicate_Players_Kill_Feed(class AHumanCharacter* Victim, class AHumanCharacter* Killer, EDamageType Damage_Type, class UClass* Instigating_Item, bool Is_Headshot)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_GameMode_TomatoFight_C", "Replicate Players Kill Feed");

	Params::BP_GameMode_TomatoFight_C_Replicate_Players_Kill_Feed Parms{};

	Parms.Victim = Victim;
	Parms.Killer = Killer;
	Parms.Damage_Type = Damage_Type;
	Parms.Instigating_Item = Instigating_Item;
	Parms.Is_Headshot = Is_Headshot;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_GameMode_TomatoFight.BP_GameMode_TomatoFight_C.Evaluate Score
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// struct FStruct_GunFightStatistics       Statistic                                              (BlueprintVisible, BlueprintReadOnly, Parm, HasGetValueTypeHash)
// struct FStruct_GunFightStatistics       Evaluated_Statistic                                    (Parm, OutParm, HasGetValueTypeHash)

void ABP_GameMode_TomatoFight_C::Evaluate_Score(const struct FStruct_GunFightStatistics& Statistic, struct FStruct_GunFightStatistics* Evaluated_Statistic)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_GameMode_TomatoFight_C", "Evaluate Score");

	Params::BP_GameMode_TomatoFight_C_Evaluate_Score Parms{};

	Parms.Statistic = std::move(Statistic);

	UObject::ProcessEvent(Func, &Parms);

	if (Evaluated_Statistic != nullptr)
		*Evaluated_Statistic = std::move(Parms.Evaluated_Statistic);
}


// Function BP_GameMode_TomatoFight.BP_GameMode_TomatoFight_C.Get Score Value From Table
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// class FName                             Score_Type                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   Score                                                  (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_GameMode_TomatoFight_C::Get_Score_Value_From_Table(class FName Score_Type, int32* Score)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_GameMode_TomatoFight_C", "Get Score Value From Table");

	Params::BP_GameMode_TomatoFight_C_Get_Score_Value_From_Table Parms{};

	Parms.Score_Type = Score_Type;

	UObject::ProcessEvent(Func, &Parms);

	if (Score != nullptr)
		*Score = Parms.Score;
}


// Function BP_GameMode_TomatoFight.BP_GameMode_TomatoFight_C.Find Barricades
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)

void ABP_GameMode_TomatoFight_C::Find_Barricades()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_GameMode_TomatoFight_C", "Find Barricades");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_GameMode_TomatoFight.BP_GameMode_TomatoFight_C.Set Barricades Active State
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    Is_active                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ABP_GameMode_TomatoFight_C::Set_Barricades_Active_State(bool Is_active)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_GameMode_TomatoFight_C", "Set Barricades Active State");

	Params::BP_GameMode_TomatoFight_C_Set_Barricades_Active_State Parms{};

	Parms.Is_active = Is_active;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_GameMode_TomatoFight.BP_GameMode_TomatoFight_C.Get Survivor Count
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// int32                                   Attacker_Survivors                                     (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   Defender_Survivors                                     (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_GameMode_TomatoFight_C::Get_Survivor_Count(int32* Attacker_Survivors, int32* Defender_Survivors)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_GameMode_TomatoFight_C", "Get Survivor Count");

	Params::BP_GameMode_TomatoFight_C_Get_Survivor_Count Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Attacker_Survivors != nullptr)
		*Attacker_Survivors = Parms.Attacker_Survivors;

	if (Defender_Survivors != nullptr)
		*Defender_Survivors = Parms.Defender_Survivors;
}


// Function BP_GameMode_TomatoFight.BP_GameMode_TomatoFight_C.Increase TeamDamage Statistic
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// float                                   Damage                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class AHumanCharacter*                  Character                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_GameMode_TomatoFight_C::Increase_TeamDamage_Statistic(float Damage, class AHumanCharacter* Character)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_GameMode_TomatoFight_C", "Increase TeamDamage Statistic");

	Params::BP_GameMode_TomatoFight_C_Increase_TeamDamage_Statistic Parms{};

	Parms.Damage = Damage;
	Parms.Character = Character;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_GameMode_TomatoFight.BP_GameMode_TomatoFight_C.Assign Roles To Players
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)

void ABP_GameMode_TomatoFight_C::Assign_Roles_To_Players()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_GameMode_TomatoFight_C", "Assign Roles To Players");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_GameMode_TomatoFight.BP_GameMode_TomatoFight_C.Select Objective Spawn Point
// (Public, BlueprintCallable, BlueprintEvent)

void ABP_GameMode_TomatoFight_C::Select_Objective_Spawn_Point()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_GameMode_TomatoFight_C", "Select Objective Spawn Point");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_GameMode_TomatoFight.BP_GameMode_TomatoFight_C.Show Players Objective Spawn Position
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)

void ABP_GameMode_TomatoFight_C::Show_Players_Objective_Spawn_Position()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_GameMode_TomatoFight_C", "Show Players Objective Spawn Position");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_GameMode_TomatoFight.BP_GameMode_TomatoFight_C.Increase EnemyHit Statistic
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// float                                   Damage                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class AHumanCharacter*                  Character                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_GameMode_TomatoFight_C::Increase_EnemyHit_Statistic(float Damage, class AHumanCharacter* Character)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_GameMode_TomatoFight_C", "Increase EnemyHit Statistic");

	Params::BP_GameMode_TomatoFight_C_Increase_EnemyHit_Statistic Parms{};

	Parms.Damage = Damage;
	Parms.Character = Character;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_GameMode_TomatoFight.BP_GameMode_TomatoFight_C.Process All Player Results on Match End
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)

void ABP_GameMode_TomatoFight_C::Process_All_Player_Results_on_Match_End()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_GameMode_TomatoFight_C", "Process All Player Results on Match End");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_GameMode_TomatoFight.BP_GameMode_TomatoFight_C.Process Single Player Result
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// class ABP_PlayerState_TomatoFight_C*    Player_State                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    Is_Winner                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// bool                                    End_Of_Match                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ABP_GameMode_TomatoFight_C::Process_Single_Player_Result(class ABP_PlayerState_TomatoFight_C* Player_State, bool Is_Winner, bool End_Of_Match)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_GameMode_TomatoFight_C", "Process Single Player Result");

	Params::BP_GameMode_TomatoFight_C_Process_Single_Player_Result Parms{};

	Parms.Player_State = Player_State;
	Parms.Is_Winner = Is_Winner;
	Parms.End_Of_Match = End_Of_Match;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_GameMode_TomatoFight.BP_GameMode_TomatoFight_C.OnPlayerDied
// (Event, Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// class AHumanCharacter*                  Player                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class AHumanCharacter*                  Killer                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)

bool ABP_GameMode_TomatoFight_C::OnPlayerDied(class AHumanCharacter* Player, class AHumanCharacter* Killer)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_GameMode_TomatoFight_C", "OnPlayerDied");

	Params::BP_GameMode_TomatoFight_C_OnPlayerDied Parms{};

	Parms.Player = Player;
	Parms.Killer = Killer;

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function BP_GameMode_TomatoFight.BP_GameMode_TomatoFight_C.GetTeammates
// (Event, Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// class AHumanPlayerController*           Player                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// TArray<class AHumanPlayerController*>   OutControllerList                                      (Parm, OutParm)

void ABP_GameMode_TomatoFight_C::GetTeammates(class AHumanPlayerController* Player, TArray<class AHumanPlayerController*>* OutControllerList)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_GameMode_TomatoFight_C", "GetTeammates");

	Params::BP_GameMode_TomatoFight_C_GetTeammates Parms{};

	Parms.Player = Player;

	UObject::ProcessEvent(Func, &Parms);

	if (OutControllerList != nullptr)
		*OutControllerList = std::move(Parms.OutControllerList);
}


// Function BP_GameMode_TomatoFight.BP_GameMode_TomatoFight_C.ResetAllSpawns
// (Public, BlueprintCallable, BlueprintEvent)

void ABP_GameMode_TomatoFight_C::ResetAllSpawns()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_GameMode_TomatoFight_C", "ResetAllSpawns");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_GameMode_TomatoFight.BP_GameMode_TomatoFight_C.GetSpawnForTeam
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// TArray<class ABP_PlayerStart_Raid_C*>   PlayerStarts_0                                         (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
// class ABP_PlayerController_TomatoFight_C*PlayerController                                       (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class AActor*                           Random_Secondary_Start                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_GameMode_TomatoFight_C::GetSpawnForTeam(TArray<class ABP_PlayerStart_Raid_C*>& PlayerStarts_0, class ABP_PlayerController_TomatoFight_C* PlayerController, class AActor** Random_Secondary_Start)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_GameMode_TomatoFight_C", "GetSpawnForTeam");

	Params::BP_GameMode_TomatoFight_C_GetSpawnForTeam Parms{};

	Parms.PlayerStarts_0 = std::move(PlayerStarts_0);
	Parms.PlayerController = PlayerController;

	UObject::ProcessEvent(Func, &Parms);

	PlayerStarts_0 = std::move(Parms.PlayerStarts_0);

	if (Random_Secondary_Start != nullptr)
		*Random_Secondary_Start = Parms.Random_Secondary_Start;
}


// Function BP_GameMode_TomatoFight.BP_GameMode_TomatoFight_C.GetPlayerTierOfReward
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// class ABP_PlayerController_C*           Player                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class FName                             Tier                                                   (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_GameMode_TomatoFight_C::GetPlayerTierOfReward(class ABP_PlayerController_C* Player, class FName* Tier)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_GameMode_TomatoFight_C", "GetPlayerTierOfReward");

	Params::BP_GameMode_TomatoFight_C_GetPlayerTierOfReward Parms{};

	Parms.Player = Player;

	UObject::ProcessEvent(Func, &Parms);

	if (Tier != nullptr)
		*Tier = Parms.Tier;
}


// Function BP_GameMode_TomatoFight.BP_GameMode_TomatoFight_C.CheatIncreaseScore
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// class ABP_PlayerController_TomatoFight_C*Controller                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class FName                             ScoreEvent                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_GameMode_TomatoFight_C::CheatIncreaseScore(class ABP_PlayerController_TomatoFight_C* Controller, class FName ScoreEvent)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_GameMode_TomatoFight_C", "CheatIncreaseScore");

	Params::BP_GameMode_TomatoFight_C_CheatIncreaseScore Parms{};

	Parms.Controller = Controller;
	Parms.ScoreEvent = ScoreEvent;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_GameMode_TomatoFight.BP_GameMode_TomatoFight_C.GetGameModeVariant
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// EFightVariant                           Variant                                                (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_GameMode_TomatoFight_C::GetGameModeVariant(EFightVariant* Variant)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_GameMode_TomatoFight_C", "GetGameModeVariant");

	Params::BP_GameMode_TomatoFight_C_GetGameModeVariant Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Variant != nullptr)
		*Variant = Parms.Variant;
}


// Function BP_GameMode_TomatoFight.BP_GameMode_TomatoFight_C.TomatoFightRewardsDecision
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    IsWinner                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// int32                                   Score                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// TArray<class FString>                   Rewards                                                (Parm, OutParm)

void ABP_GameMode_TomatoFight_C::TomatoFightRewardsDecision(bool IsWinner, int32 Score, TArray<class FString>* Rewards)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_GameMode_TomatoFight_C", "TomatoFightRewardsDecision");

	Params::BP_GameMode_TomatoFight_C_TomatoFightRewardsDecision Parms{};

	Parms.IsWinner = IsWinner;
	Parms.Score = Score;

	UObject::ProcessEvent(Func, &Parms);

	if (Rewards != nullptr)
		*Rewards = std::move(Parms.Rewards);
}


// Function BP_GameMode_TomatoFight.BP_GameMode_TomatoFight_C.SnowballFightRewardsDecision
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    IsWinner                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// int32                                   Score                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// TArray<class FString>                   Rewards                                                (Parm, OutParm)

void ABP_GameMode_TomatoFight_C::SnowballFightRewardsDecision(bool IsWinner, int32 Score, TArray<class FString>* Rewards)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_GameMode_TomatoFight_C", "SnowballFightRewardsDecision");

	Params::BP_GameMode_TomatoFight_C_SnowballFightRewardsDecision Parms{};

	Parms.IsWinner = IsWinner;
	Parms.Score = Score;

	UObject::ProcessEvent(Func, &Parms);

	if (Rewards != nullptr)
		*Rewards = std::move(Parms.Rewards);
}


// Function BP_GameMode_TomatoFight.BP_GameMode_TomatoFight_C.SendRoundFinishAnalytics
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)

void ABP_GameMode_TomatoFight_C::SendRoundFinishAnalytics()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_GameMode_TomatoFight_C", "SendRoundFinishAnalytics");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_GameMode_TomatoFight.BP_GameMode_TomatoFight_C.PumpkinFightRewardsDecision
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    IsWinner                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// int32                                   Score                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// TArray<class FString>                   Rewards                                                (Parm, OutParm)

void ABP_GameMode_TomatoFight_C::PumpkinFightRewardsDecision(bool IsWinner, int32 Score, TArray<class FString>* Rewards)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_GameMode_TomatoFight_C", "PumpkinFightRewardsDecision");

	Params::BP_GameMode_TomatoFight_C_PumpkinFightRewardsDecision Parms{};

	Parms.IsWinner = IsWinner;
	Parms.Score = Score;

	UObject::ProcessEvent(Func, &Parms);

	if (Rewards != nullptr)
		*Rewards = std::move(Parms.Rewards);
}

}

