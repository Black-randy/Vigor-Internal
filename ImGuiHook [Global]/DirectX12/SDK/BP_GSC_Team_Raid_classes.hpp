#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_GSC_Team_Raid

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "BP_GSC_Team_classes.hpp"


namespace SDK
{

// BlueprintGeneratedClass BP_GSC_Team_Raid.BP_GSC_Team_Raid_C
// 0x0018 (0x0108 - 0x00F0)
class UBP_GSC_Team_Raid_C final : public UBP_GSC_Team_C
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame_BP_GSC_Team_Raid_C;                 // 0x00F0(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	int32                                         WonRounds;                                         // 0x00F8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Attacking_Team;                                    // 0x00FC(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_FD[0x3];                                       // 0x00FD(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         PlayersJoinedTeam;                                 // 0x0100(0x0004)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

public:
	void ExecuteUbergraph_BP_GSC_Team_Raid(int32 EntryPoint);
	void Set_Is_Attacking_Team(bool Is_Attacker_0);
	void Set_Won_Rounds(int32 New_Rounds_Won);
	void ReceiveBeginPlay();
	void Is_Attacker(bool* Is_Attacker_0);
	void Is_Everyone_Dead(bool* AllDead);
	void Get_Member_Controllers(TArray<class ABP_PlayerController_Teams_C*>* Player_Controllers);
	void Set_Side(class FName Side_0, bool* Success);
	void Add_Player(class ABP_PlayerController_Teams_C* Player, bool* Success);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BP_GSC_Team_Raid_C">();
	}
	static class UBP_GSC_Team_Raid_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UBP_GSC_Team_Raid_C>();
	}
};
static_assert(alignof(UBP_GSC_Team_Raid_C) == 0x000008, "Wrong alignment on UBP_GSC_Team_Raid_C");
static_assert(sizeof(UBP_GSC_Team_Raid_C) == 0x000108, "Wrong size on UBP_GSC_Team_Raid_C");
static_assert(offsetof(UBP_GSC_Team_Raid_C, UberGraphFrame_BP_GSC_Team_Raid_C) == 0x0000F0, "Member 'UBP_GSC_Team_Raid_C::UberGraphFrame_BP_GSC_Team_Raid_C' has a wrong offset!");
static_assert(offsetof(UBP_GSC_Team_Raid_C, WonRounds) == 0x0000F8, "Member 'UBP_GSC_Team_Raid_C::WonRounds' has a wrong offset!");
static_assert(offsetof(UBP_GSC_Team_Raid_C, Attacking_Team) == 0x0000FC, "Member 'UBP_GSC_Team_Raid_C::Attacking_Team' has a wrong offset!");
static_assert(offsetof(UBP_GSC_Team_Raid_C, PlayersJoinedTeam) == 0x000100, "Member 'UBP_GSC_Team_Raid_C::PlayersJoinedTeam' has a wrong offset!");

}

