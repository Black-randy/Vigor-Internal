#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_ChallengeManager

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "Flame_structs.hpp"
#include "Struct_ChallengeSlotsCategory_structs.hpp"
#include "E_ChallengeSlotState_structs.hpp"
#include "E_ChallengeManagerState_structs.hpp"
#include "CoreUObject_structs.hpp"


namespace SDK::Params
{

// Function BP_ChallengeManager.BP_ChallengeManager_C.ChallengeManagerDailyReseted__DelegateSignature
// 0x0008 (0x0008 - 0x0000)
struct BP_ChallengeManager_C_ChallengeManagerDailyReseted__DelegateSignature final
{
public:
	struct FDateTime                              Next_Reset_Timestamp;                              // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_ChallengeManager_C_ChallengeManagerDailyReseted__DelegateSignature) == 0x000008, "Wrong alignment on BP_ChallengeManager_C_ChallengeManagerDailyReseted__DelegateSignature");
static_assert(sizeof(BP_ChallengeManager_C_ChallengeManagerDailyReseted__DelegateSignature) == 0x000008, "Wrong size on BP_ChallengeManager_C_ChallengeManagerDailyReseted__DelegateSignature");
static_assert(offsetof(BP_ChallengeManager_C_ChallengeManagerDailyReseted__DelegateSignature, Next_Reset_Timestamp) == 0x000000, "Member 'BP_ChallengeManager_C_ChallengeManagerDailyReseted__DelegateSignature::Next_Reset_Timestamp' has a wrong offset!");

// Function BP_ChallengeManager.BP_ChallengeManager_C.NewChallengeSlotInitialized__DelegateSignature
// 0x0008 (0x0008 - 0x0000)
struct BP_ChallengeManager_C_NewChallengeSlotInitialized__DelegateSignature final
{
public:
	class ABP_ChallengeSlot_C*                    ChallengeSlot;                                     // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_ChallengeManager_C_NewChallengeSlotInitialized__DelegateSignature) == 0x000008, "Wrong alignment on BP_ChallengeManager_C_NewChallengeSlotInitialized__DelegateSignature");
static_assert(sizeof(BP_ChallengeManager_C_NewChallengeSlotInitialized__DelegateSignature) == 0x000008, "Wrong size on BP_ChallengeManager_C_NewChallengeSlotInitialized__DelegateSignature");
static_assert(offsetof(BP_ChallengeManager_C_NewChallengeSlotInitialized__DelegateSignature, ChallengeSlot) == 0x000000, "Member 'BP_ChallengeManager_C_NewChallengeSlotInitialized__DelegateSignature::ChallengeSlot' has a wrong offset!");

// Function BP_ChallengeManager.BP_ChallengeManager_C.ExecuteUbergraph_BP_ChallengeManager
// 0x0A50 (0x0A50 - 0x0000)
struct BP_ChallengeManager_C_ExecuteUbergraph_BP_ChallengeManager final
{
public:
	int32                                         EntryPoint;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UDataProvider*                          CallFunc_GetDataProvider_ReturnValue;              // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EDataProviderState                            K2Node_CustomEvent_OldState;                       // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EDataProviderState                            K2Node_CustomEvent_NewState;                       // 0x0011(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EDataProviderState                            CallFunc_GetState_ReturnValue;                     // 0x0012(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_13[0x1];                                       // 0x0013(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Temp_int_Array_Index_Variable;                     // 0x0014(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue;          // 0x0018(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable;                                // 0x0019(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_1A[0x2];                                       // 0x001A(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Temp_int_Array_Index_Variable_1;                   // 0x001C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x0020(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x0024(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TDelegate<void(EDataProviderState OldState, EDataProviderState NewState)> K2Node_CreateDelegate_OutputDelegate;              // 0x0028(0x0010)(ZeroConstructor, NoDestructor)
	class ABP_ChallengeSlot_C*                    K2Node_CustomEvent_Slot_1;                         // 0x0038(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable_1;                              // 0x0040(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_41[0x7];                                       // 0x0041(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AChallengeSlot*                         CallFunc_Array_Get_Item;                           // 0x0048(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0050(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_51[0x7];                                       // 0x0051(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class ABP_ChallengeSlot_C*                    K2Node_DynamicCast_AsBP_Challenge_Slot;            // 0x0058(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0060(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	E_ChallengeSlotState                          CallFunc_Get_Slot_State_Slot_State;                // 0x0061(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_62[0x2];                                       // 0x0062(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x0064(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_True_if_break_was_hit_Variable;          // 0x0068(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_69[0x7];                                       // 0x0069(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 K2Node_CustomEvent_UserId;                         // 0x0070(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	TSubclassOf<class UObject>                    K2Node_CustomEvent_Loaded;                         // 0x0080(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash)
	int32                                         Temp_int_Array_Index_Variable_2;                   // 0x0088(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable_1;                  // 0x008C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x0090(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_91[0x3];                                       // 0x0091(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Add_IntInt_ReturnValue_1;                 // 0x0094(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EEndPlayReason                                K2Node_Event_EndPlayReason;                        // 0x0098(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_99[0x3];                                       // 0x0099(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Array_Length_ReturnValue_1;               // 0x009C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<class AChallengePrerequisite*>         CallFunc_Map_Values_Values;                        // 0x00A0(0x0010)(ReferenceParm)
	int32                                         CallFunc_Array_Length_ReturnValue_2;               // 0x00B0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_B4[0x4];                                       // 0x00B4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TSoftClassPtr<class UClass>                   CallFunc_Array_Get_Item_1;                         // 0x00B8(0x0028)(HasGetValueTypeHash)
	TSubclassOf<class UObject>                    CallFunc_Conv_SoftClassReferenceToClass_ReturnValue; // 0x00E0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash)
	bool                                          CallFunc_IsValidSoftClassReference_ReturnValue;    // 0x00E8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_E9[0x7];                                       // 0x00E9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UClass*                                 K2Node_ClassDynamicCast_AsChallenge_Prerequisite;  // 0x00F0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_ClassDynamicCast_bSuccess;                  // 0x00F8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValidClass_ReturnValue;                 // 0x00F9(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_FA[0x2];                                       // 0x00FA(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Array_Length_ReturnValue_3;               // 0x00FC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Greater_IntInt_ReturnValue;               // 0x0100(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Not_PreBool_ReturnValue;                  // 0x0101(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_102[0x6];                                      // 0x0102(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	TSoftClassPtr<class UClass>                   CallFunc_Array_Get_Item_2;                         // 0x0108(0x0028)(HasGetValueTypeHash)
	int32                                         Temp_int_Array_Index_Variable_3;                   // 0x0130(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_134[0x4];                                      // 0x0134(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class AChallengePrerequisite*                 CallFunc_Array_Get_Item_3;                         // 0x0138(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue_1;                    // 0x0140(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_141[0x7];                                      // 0x0141(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FDateTime                              CallFunc_GetCloudTime_ReturnValue;                 // 0x0148(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	struct FDateTime                              CallFunc_Get_Next_Reset_Timestamp_Next_Reset_Timestamp; // 0x0150(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	struct FTimespan                              CallFunc_Subtract_DateTimeDateTime_ReturnValue;    // 0x0158(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_GetTotalSeconds_ReturnValue;              // 0x0160(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable_2;                  // 0x0164(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue_2;                 // 0x0168(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_16C[0x4];                                      // 0x016C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FDateTime                              CallFunc_Get_Next_Reset_Timestamp_Next_Reset_Timestamp_1; // 0x0170(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_GetUserControllerId_ReturnValue;          // 0x0178(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_17C[0x4];                                      // 0x017C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class AHumanPlayerController*                 CallFunc_GetHumanPlayerControllerByControllerId_ReturnValue; // 0x0180(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_GetUserControllerId_ReturnValue_1;        // 0x0188(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue_2;                    // 0x018C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_18D[0x3];                                      // 0x018D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class AHumanPlayerController*                 CallFunc_GetHumanPlayerControllerByControllerId_ReturnValue_1; // 0x0190(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue_3;                    // 0x0198(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsCloudUserIdSet_ReturnValue;             // 0x0199(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_19A[0x6];                                      // 0x019A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class UClass*                                 Temp_class_Variable;                               // 0x01A0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable_3;                  // 0x01A8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1AC[0x4];                                      // 0x01AC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UClass*                                 K2Node_Select_Default;                             // 0x01B0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UClass*                                 K2Node_ClassDynamicCast_AsChallenge_Prerequisite_1; // 0x01B8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_ClassDynamicCast_bSuccess_1;                // 0x01C0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Less_IntInt_ReturnValue_1;                // 0x01C1(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_1C2[0x2];                                      // 0x01C2(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Add_IntInt_ReturnValue_3;                 // 0x01C4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Variable;                                 // 0x01C8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1CC[0x4];                                      // 0x01CC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class AHumanPlayerController*                 CallFunc_GetFlameController_ReturnValue;           // 0x01D0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_GetUserChallengeSlots_ReturnValue;        // 0x01D8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1DC[0x4];                                      // 0x01DC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FFormatArgumentData                    K2Node_MakeStruct_FormatArgumentData;              // 0x01E0(0x0040)(HasGetValueTypeHash)
	struct FCloudRequestResult                    K2Node_ComponentBoundEvent_RequestResult_6;        // 0x0220(0x0058)(ConstParm)
	struct FCloudGetChallengeResponse             K2Node_ComponentBoundEvent_Response_3;             // 0x0278(0x0058)(ConstParm)
	struct FCloudRequestResult                    K2Node_ComponentBoundEvent_RequestResult_5;        // 0x02D0(0x0058)(ConstParm)
	struct FCloudChallengeClaimResult             K2Node_ComponentBoundEvent_Response_2;             // 0x0328(0x0070)(ConstParm)
	TArray<class FString>                         CallFunc_Map_Keys_Keys;                            // 0x0398(0x0010)(ReferenceParm)
	int32                                         CallFunc_Array_Length_ReturnValue_4;               // 0x03A8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3AC[0x4];                                      // 0x03AC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class ABP_ChallengeSlot_C*>            CallFunc_GetChallengeSlotsByCategory_ChallengeSlots; // 0x03B0(0x0010)(ReferenceParm)
	TArray<class ABP_ChallengeSlot_C*>            CallFunc_GetChallengeSlotsByCategory_ChallengeSlots_1; // 0x03C0(0x0010)(ReferenceParm)
	int32                                         CallFunc_Subtract_IntInt_ReturnValue;              // 0x03D0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Subtract_IntInt_ReturnValue_1;            // 0x03D4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ABP_ChallengeSlot_C*                    CallFunc_Array_Get_Item_4;                         // 0x03D8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ABP_ChallengeSlot_C*                    CallFunc_Array_Get_Item_5;                         // 0x03E0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue_1;        // 0x03E8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue_2;        // 0x03E9(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_3EA[0x6];                                      // 0x03EA(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   CallFunc_Conv_StringToText_ReturnValue;            // 0x03F0(0x0018)()
	struct FFormatArgumentData                    K2Node_MakeStruct_FormatArgumentData_1;            // 0x0408(0x0040)(HasGetValueTypeHash)
	TArray<struct FFormatArgumentData>            K2Node_MakeArray_Array;                            // 0x0448(0x0010)(ReferenceParm)
	class FText                                   CallFunc_Format_ReturnValue;                       // 0x0458(0x0018)()
	int32                                         Temp_int_Array_Index_Variable_4;                   // 0x0470(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_474[0x4];                                      // 0x0474(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FCloudRequestResult                    K2Node_ComponentBoundEvent_RequestResult_4;        // 0x0478(0x0058)(ConstParm)
	struct FCloudChallengeSlotInfo                K2Node_ComponentBoundEvent_ProgressResult;         // 0x04D0(0x0050)(ConstParm)
	class AChallengeSlot*                         CallFunc_Array_Get_Item_6;                         // 0x0520(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue_4;                    // 0x0528(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_529[0x3];                                      // 0x0529(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Subtract_IntInt_ReturnValue_2;            // 0x052C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue_3;        // 0x0530(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Send_Challenge_Progress_Set_Event_ReturnValue; // 0x0531(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_532[0x6];                                      // 0x0532(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	struct FCloudRequestResult                    K2Node_ComponentBoundEvent_RequestResult_3;        // 0x0538(0x0058)(ConstParm)
	struct FCloudChallengeClaimResult             K2Node_ComponentBoundEvent_ClaimResult_1;          // 0x0590(0x0070)(ConstParm)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue_4;        // 0x0600(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_601[0x7];                                      // 0x0601(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class ABP_ChallengeSlot_C*>            CallFunc_GetChallengeSlotsByCategory_ChallengeSlots_2; // 0x0608(0x0010)(ReferenceParm)
	int32                                         CallFunc_Subtract_IntInt_ReturnValue_3;            // 0x0618(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_61C[0x4];                                      // 0x061C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class ABP_ChallengeSlot_C*                    CallFunc_Array_Get_Item_7;                         // 0x0620(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AHumanPlayerController*                 CallFunc_GetFlameController_ReturnValue_1;         // 0x0628(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<struct FChallengeReward>               CallFunc_Get_Rewards_List_Rewards;                 // 0x0630(0x0010)(ReferenceParm)
	int32                                         CallFunc_GetUserChallengeSlots_ReturnValue_1;      // 0x0640(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_644[0x4];                                      // 0x0644(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class AHumanPlayerController*                 CallFunc_GetFlameController_ReturnValue_2;         // 0x0648(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_GetUserChallengeSlots_ReturnValue_2;      // 0x0650(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_GreaterEqual_IntInt_ReturnValue;          // 0x0654(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_655[0x3];                                      // 0x0655(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Add_IntInt_ReturnValue_4;                 // 0x0658(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue_5;                 // 0x065C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable_4;                  // 0x0660(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_664[0x4];                                      // 0x0664(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FFormatArgumentData                    K2Node_MakeStruct_FormatArgumentData_2;            // 0x0668(0x0040)(HasGetValueTypeHash)
	TArray<struct FFormatArgumentData>            K2Node_MakeArray_Array_1;                          // 0x06A8(0x0010)(ReferenceParm)
	bool                                          CallFunc_Less_IntInt_ReturnValue_2;                // 0x06B8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_6B9[0x7];                                      // 0x06B9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   CallFunc_Format_ReturnValue_1;                     // 0x06C0(0x0018)()
	int32                                         CallFunc_Add_IntInt_ReturnValue_6;                 // 0x06D8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Array_Index_Variable_5;                   // 0x06DC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Send_Challenge_Rewards_Claimed_Event_ReturnValue; // 0x06E0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_6E1[0x7];                                      // 0x06E1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 CallFunc_Array_Get_Item_8;                         // 0x06E8(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	struct FCloudChallengeCategorySlots           CallFunc_Map_Find_Value;                           // 0x06F8(0x0010)()
	bool                                          CallFunc_Map_Find_ReturnValue;                     // 0x0708(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_709[0x7];                                      // 0x0709(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FStruct_ChallengeSlotsCategory         CallFunc_Map_Find_Value_1;                         // 0x0710(0x0010)(HasGetValueTypeHash)
	bool                                          CallFunc_Map_Find_ReturnValue_1;                   // 0x0720(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_721[0x3];                                      // 0x0721(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Temp_int_Loop_Counter_Variable_5;                  // 0x0724(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ABP_ChallengeSlot_C*                    CallFunc_Array_Get_Item_9;                         // 0x0728(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue_3;                // 0x0730(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_731[0x3];                                      // 0x0731(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Add_IntInt_ReturnValue_7;                 // 0x0734(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Map_Contains_ReturnValue;                 // 0x0738(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_739[0x7];                                      // 0x0739(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FStruct_ChallengeSlotsCategory         CallFunc_Map_Find_Value_2;                         // 0x0740(0x0010)(HasGetValueTypeHash)
	bool                                          CallFunc_Map_Find_ReturnValue_2;                   // 0x0750(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_751[0x3];                                      // 0x0751(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	TDelegate<void(class ABP_ChallengeSlot_C* Slot)> K2Node_CreateDelegate_OutputDelegate_1;            // 0x0754(0x0010)(ZeroConstructor, NoDestructor)
	uint8                                         Pad_764[0x4];                                      // 0x0764(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class ABP_ChallengeSlot_C*>            CallFunc_InitializeChallengesFromCloud_Challenge_Slots; // 0x0768(0x0010)(ReferenceParm)
	struct FStruct_ChallengeSlotsCategory         K2Node_MakeStruct_Struct_ChallengeSlotsCategory;   // 0x0778(0x0010)(HasGetValueTypeHash)
	TArray<class ABP_ChallengeSlot_C*>            K2Node_MakeArray_Array_2;                          // 0x0788(0x0010)(ReferenceParm)
	struct FStruct_ChallengeSlotsCategory         K2Node_MakeStruct_Struct_ChallengeSlotsCategory_1; // 0x0798(0x0010)(HasGetValueTypeHash)
	uint8                                         CallFunc_MakeLiteralByte_ReturnValue;              // 0x07A8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_ByteByte_ReturnValue;                // 0x07A9(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_7AA[0x2];                                      // 0x07AA(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	TDelegate<void()>                             K2Node_CreateDelegate_OutputDelegate_2;            // 0x07AC(0x0010)(ZeroConstructor, NoDestructor)
	uint8                                         Pad_7BC[0x4];                                      // 0x07BC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 Temp_string_Variable;                              // 0x07C0(0x0010)(ConstParm, ZeroConstructor, HasGetValueTypeHash)
	struct FTimerHandle                           CallFunc_K2_SetTimerDelegate_ReturnValue;          // 0x07D0(0x0008)(NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Add_ReturnValue;                    // 0x07D8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TDelegate<void()>                             K2Node_CreateDelegate_OutputDelegate_3;            // 0x07DC(0x0010)(ZeroConstructor, NoDestructor)
	uint8                                         Pad_7EC[0x4];                                      // 0x07EC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FDateTime                              CallFunc_Now_ReturnValue;                          // 0x07F0(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	struct FTimerHandle                           CallFunc_K2_SetTimerDelegate_ReturnValue_1;        // 0x07F8(0x0008)(NoDestructor, HasGetValueTypeHash)
	struct FTransform                             CallFunc_MakeTransform_ReturnValue;                // 0x0800(0x0030)(IsPlainOldData, NoDestructor)
	class AActor*                                 CallFunc_BeginDeferredActorSpawnFromClass_ReturnValue; // 0x0830(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TDelegate<void()>                             K2Node_CreateDelegate_OutputDelegate_4;            // 0x0838(0x0010)(ZeroConstructor, NoDestructor)
	class AChallengePrerequisite*                 CallFunc_FinishSpawningActor_ReturnValue;          // 0x0848(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FTimerHandle                           CallFunc_K2_SetTimerDelegate_ReturnValue_2;        // 0x0850(0x0008)(NoDestructor, HasGetValueTypeHash)
	struct FCloudRequestResult                    K2Node_ComponentBoundEvent_RequestResult_2;        // 0x0858(0x0058)(ConstParm)
	struct FCloudSeasonChallengeProgressResult    K2Node_ComponentBoundEvent_Response_1;             // 0x08B0(0x000C)(ConstParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	TDelegate<void(const class FString& Userid)>  K2Node_CreateDelegate_OutputDelegate_5;            // 0x08BC(0x0010)(ZeroConstructor, NoDestructor)
	uint8                                         Pad_8CC[0x4];                                      // 0x08CC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FCloudRequestResult                    K2Node_ComponentBoundEvent_RequestResult_1;        // 0x08D0(0x0058)(ConstParm)
	struct FCloudSeasonChallengeRewardsResult     K2Node_ComponentBoundEvent_Response;               // 0x0928(0x0010)(ConstParm)
	struct FCloudRequestResult                    K2Node_ComponentBoundEvent_RequestResult;          // 0x0938(0x0058)(ConstParm)
	struct FCloudSeasonChallengeClaimResult       K2Node_ComponentBoundEvent_ClaimResult;            // 0x0990(0x0020)(ConstParm)
	struct FCloudItemInfo                         CallFunc_Array_Get_Item_10;                        // 0x09B0(0x0018)()
	struct FCloudItemInfo                         CallFunc_Array_Get_Item_11;                        // 0x09C8(0x0018)()
	int32                                         CallFunc_Array_Length_ReturnValue_5;               // 0x09E0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue_6;               // 0x09E4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue_4;                // 0x09E8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Less_IntInt_ReturnValue_5;                // 0x09E9(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue_5;        // 0x09EA(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue_6;        // 0x09EB(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	TDelegate<void(TSubclassOf<class UObject> Loaded)> K2Node_CreateDelegate_OutputDelegate_6;            // 0x09EC(0x0010)(ZeroConstructor, NoDestructor)
	uint8                                         Pad_9FC[0x4];                                      // 0x09FC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class AHumanPlayerController*                 CallFunc_GetFlameController_ReturnValue_3;         // 0x0A00(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_GetUserSeasonChallengeRewards_ReturnValue; // 0x0A08(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_A0C[0x4];                                      // 0x0A0C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class AHumanPlayerController*                 CallFunc_GetFlameController_ReturnValue_4;         // 0x0A10(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ABP_ChallengeSlot_C*                    K2Node_CustomEvent_Slot;                           // 0x0A18(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         K2Node_CustomEvent_New_Progress;                   // 0x0A20(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_GetUserSeasonChallengeProgress_ReturnValue; // 0x0A24(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<class ABP_ChallengeSlot_C*>            CallFunc_GetChallengeSlotsByProgress_Sorted_Challenge_Slots; // 0x0A28(0x0010)(ReferenceParm)
	TArray<class ABP_ChallengeSlot_C*>            CallFunc_GetChallengeSlotsByProgress_Sorted_Challenge_Slots_1; // 0x0A38(0x0010)(ReferenceParm)
};
static_assert(alignof(BP_ChallengeManager_C_ExecuteUbergraph_BP_ChallengeManager) == 0x000010, "Wrong alignment on BP_ChallengeManager_C_ExecuteUbergraph_BP_ChallengeManager");
static_assert(sizeof(BP_ChallengeManager_C_ExecuteUbergraph_BP_ChallengeManager) == 0x000A50, "Wrong size on BP_ChallengeManager_C_ExecuteUbergraph_BP_ChallengeManager");
static_assert(offsetof(BP_ChallengeManager_C_ExecuteUbergraph_BP_ChallengeManager, EntryPoint) == 0x000000, "Member 'BP_ChallengeManager_C_ExecuteUbergraph_BP_ChallengeManager::EntryPoint' has a wrong offset!");
static_assert(offsetof(BP_ChallengeManager_C_ExecuteUbergraph_BP_ChallengeManager, CallFunc_GetDataProvider_ReturnValue) == 0x000008, "Member 'BP_ChallengeManager_C_ExecuteUbergraph_BP_ChallengeManager::CallFunc_GetDataProvider_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_ChallengeManager_C_ExecuteUbergraph_BP_ChallengeManager, K2Node_CustomEvent_OldState) == 0x000010, "Member 'BP_ChallengeManager_C_ExecuteUbergraph_BP_ChallengeManager::K2Node_CustomEvent_OldState' has a wrong offset!");
static_assert(offsetof(BP_ChallengeManager_C_ExecuteUbergraph_BP_ChallengeManager, K2Node_CustomEvent_NewState) == 0x000011, "Member 'BP_ChallengeManager_C_ExecuteUbergraph_BP_ChallengeManager::K2Node_CustomEvent_NewState' has a wrong offset!");
static_assert(offsetof(BP_ChallengeManager_C_ExecuteUbergraph_BP_ChallengeManager, CallFunc_GetState_ReturnValue) == 0x000012, "Member 'BP_ChallengeManager_C_ExecuteUbergraph_BP_ChallengeManager::CallFunc_GetState_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_ChallengeManager_C_ExecuteUbergraph_BP_ChallengeManager, Temp_int_Array_Index_Variable) == 0x000014, "Member 'BP_ChallengeManager_C_ExecuteUbergraph_BP_ChallengeManager::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(BP_ChallengeManager_C_ExecuteUbergraph_BP_ChallengeManager, CallFunc_EqualEqual_ByteByte_ReturnValue) == 0x000018, "Member 'BP_ChallengeManager_C_ExecuteUbergraph_BP_ChallengeManager::CallFunc_EqualEqual_ByteByte_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_ChallengeManager_C_ExecuteUbergraph_BP_ChallengeManager, Temp_bool_Variable) == 0x000019, "Member 'BP_ChallengeManager_C_ExecuteUbergraph_BP_ChallengeManager::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(BP_ChallengeManager_C_ExecuteUbergraph_BP_ChallengeManager, Temp_int_Array_Index_Variable_1) == 0x00001C, "Member 'BP_ChallengeManager_C_ExecuteUbergraph_BP_ChallengeManager::Temp_int_Array_Index_Variable_1' has a wrong offset!");
static_assert(offsetof(BP_ChallengeManager_C_ExecuteUbergraph_BP_ChallengeManager, Temp_int_Loop_Counter_Variable) == 0x000020, "Member 'BP_ChallengeManager_C_ExecuteUbergraph_BP_ChallengeManager::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(BP_ChallengeManager_C_ExecuteUbergraph_BP_ChallengeManager, CallFunc_Add_IntInt_ReturnValue) == 0x000024, "Member 'BP_ChallengeManager_C_ExecuteUbergraph_BP_ChallengeManager::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_ChallengeManager_C_ExecuteUbergraph_BP_ChallengeManager, K2Node_CreateDelegate_OutputDelegate) == 0x000028, "Member 'BP_ChallengeManager_C_ExecuteUbergraph_BP_ChallengeManager::K2Node_CreateDelegate_OutputDelegate' has a wrong offset!");
static_assert(offsetof(BP_ChallengeManager_C_ExecuteUbergraph_BP_ChallengeManager, K2Node_CustomEvent_Slot_1) == 0x000038, "Member 'BP_ChallengeManager_C_ExecuteUbergraph_BP_ChallengeManager::K2Node_CustomEvent_Slot_1' has a wrong offset!");
static_assert(offsetof(BP_ChallengeManager_C_ExecuteUbergraph_BP_ChallengeManager, Temp_bool_Variable_1) == 0x000040, "Member 'BP_ChallengeManager_C_ExecuteUbergraph_BP_ChallengeManager::Temp_bool_Variable_1' has a wrong offset!");
static_assert(offsetof(BP_ChallengeManager_C_ExecuteUbergraph_BP_ChallengeManager, CallFunc_Array_Get_Item) == 0x000048, "Member 'BP_ChallengeManager_C_ExecuteUbergraph_BP_ChallengeManager::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(BP_ChallengeManager_C_ExecuteUbergraph_BP_ChallengeManager, CallFunc_IsValid_ReturnValue) == 0x000050, "Member 'BP_ChallengeManager_C_ExecuteUbergraph_BP_ChallengeManager::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_ChallengeManager_C_ExecuteUbergraph_BP_ChallengeManager, K2Node_DynamicCast_AsBP_Challenge_Slot) == 0x000058, "Member 'BP_ChallengeManager_C_ExecuteUbergraph_BP_ChallengeManager::K2Node_DynamicCast_AsBP_Challenge_Slot' has a wrong offset!");
static_assert(offsetof(BP_ChallengeManager_C_ExecuteUbergraph_BP_ChallengeManager, K2Node_DynamicCast_bSuccess) == 0x000060, "Member 'BP_ChallengeManager_C_ExecuteUbergraph_BP_ChallengeManager::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(BP_ChallengeManager_C_ExecuteUbergraph_BP_ChallengeManager, CallFunc_Get_Slot_State_Slot_State) == 0x000061, "Member 'BP_ChallengeManager_C_ExecuteUbergraph_BP_ChallengeManager::CallFunc_Get_Slot_State_Slot_State' has a wrong offset!");
static_assert(offsetof(BP_ChallengeManager_C_ExecuteUbergraph_BP_ChallengeManager, CallFunc_Array_Length_ReturnValue) == 0x000064, "Member 'BP_ChallengeManager_C_ExecuteUbergraph_BP_ChallengeManager::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_ChallengeManager_C_ExecuteUbergraph_BP_ChallengeManager, Temp_bool_True_if_break_was_hit_Variable) == 0x000068, "Member 'BP_ChallengeManager_C_ExecuteUbergraph_BP_ChallengeManager::Temp_bool_True_if_break_was_hit_Variable' has a wrong offset!");
static_assert(offsetof(BP_ChallengeManager_C_ExecuteUbergraph_BP_ChallengeManager, K2Node_CustomEvent_UserId) == 0x000070, "Member 'BP_ChallengeManager_C_ExecuteUbergraph_BP_ChallengeManager::K2Node_CustomEvent_UserId' has a wrong offset!");
static_assert(offsetof(BP_ChallengeManager_C_ExecuteUbergraph_BP_ChallengeManager, K2Node_CustomEvent_Loaded) == 0x000080, "Member 'BP_ChallengeManager_C_ExecuteUbergraph_BP_ChallengeManager::K2Node_CustomEvent_Loaded' has a wrong offset!");
static_assert(offsetof(BP_ChallengeManager_C_ExecuteUbergraph_BP_ChallengeManager, Temp_int_Array_Index_Variable_2) == 0x000088, "Member 'BP_ChallengeManager_C_ExecuteUbergraph_BP_ChallengeManager::Temp_int_Array_Index_Variable_2' has a wrong offset!");
static_assert(offsetof(BP_ChallengeManager_C_ExecuteUbergraph_BP_ChallengeManager, Temp_int_Loop_Counter_Variable_1) == 0x00008C, "Member 'BP_ChallengeManager_C_ExecuteUbergraph_BP_ChallengeManager::Temp_int_Loop_Counter_Variable_1' has a wrong offset!");
static_assert(offsetof(BP_ChallengeManager_C_ExecuteUbergraph_BP_ChallengeManager, CallFunc_Less_IntInt_ReturnValue) == 0x000090, "Member 'BP_ChallengeManager_C_ExecuteUbergraph_BP_ChallengeManager::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_ChallengeManager_C_ExecuteUbergraph_BP_ChallengeManager, CallFunc_Add_IntInt_ReturnValue_1) == 0x000094, "Member 'BP_ChallengeManager_C_ExecuteUbergraph_BP_ChallengeManager::CallFunc_Add_IntInt_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_ChallengeManager_C_ExecuteUbergraph_BP_ChallengeManager, K2Node_Event_EndPlayReason) == 0x000098, "Member 'BP_ChallengeManager_C_ExecuteUbergraph_BP_ChallengeManager::K2Node_Event_EndPlayReason' has a wrong offset!");
static_assert(offsetof(BP_ChallengeManager_C_ExecuteUbergraph_BP_ChallengeManager, CallFunc_Array_Length_ReturnValue_1) == 0x00009C, "Member 'BP_ChallengeManager_C_ExecuteUbergraph_BP_ChallengeManager::CallFunc_Array_Length_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_ChallengeManager_C_ExecuteUbergraph_BP_ChallengeManager, CallFunc_Map_Values_Values) == 0x0000A0, "Member 'BP_ChallengeManager_C_ExecuteUbergraph_BP_ChallengeManager::CallFunc_Map_Values_Values' has a wrong offset!");
static_assert(offsetof(BP_ChallengeManager_C_ExecuteUbergraph_BP_ChallengeManager, CallFunc_Array_Length_ReturnValue_2) == 0x0000B0, "Member 'BP_ChallengeManager_C_ExecuteUbergraph_BP_ChallengeManager::CallFunc_Array_Length_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BP_ChallengeManager_C_ExecuteUbergraph_BP_ChallengeManager, CallFunc_Array_Get_Item_1) == 0x0000B8, "Member 'BP_ChallengeManager_C_ExecuteUbergraph_BP_ChallengeManager::CallFunc_Array_Get_Item_1' has a wrong offset!");
static_assert(offsetof(BP_ChallengeManager_C_ExecuteUbergraph_BP_ChallengeManager, CallFunc_Conv_SoftClassReferenceToClass_ReturnValue) == 0x0000E0, "Member 'BP_ChallengeManager_C_ExecuteUbergraph_BP_ChallengeManager::CallFunc_Conv_SoftClassReferenceToClass_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_ChallengeManager_C_ExecuteUbergraph_BP_ChallengeManager, CallFunc_IsValidSoftClassReference_ReturnValue) == 0x0000E8, "Member 'BP_ChallengeManager_C_ExecuteUbergraph_BP_ChallengeManager::CallFunc_IsValidSoftClassReference_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_ChallengeManager_C_ExecuteUbergraph_BP_ChallengeManager, K2Node_ClassDynamicCast_AsChallenge_Prerequisite) == 0x0000F0, "Member 'BP_ChallengeManager_C_ExecuteUbergraph_BP_ChallengeManager::K2Node_ClassDynamicCast_AsChallenge_Prerequisite' has a wrong offset!");
static_assert(offsetof(BP_ChallengeManager_C_ExecuteUbergraph_BP_ChallengeManager, K2Node_ClassDynamicCast_bSuccess) == 0x0000F8, "Member 'BP_ChallengeManager_C_ExecuteUbergraph_BP_ChallengeManager::K2Node_ClassDynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(BP_ChallengeManager_C_ExecuteUbergraph_BP_ChallengeManager, CallFunc_IsValidClass_ReturnValue) == 0x0000F9, "Member 'BP_ChallengeManager_C_ExecuteUbergraph_BP_ChallengeManager::CallFunc_IsValidClass_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_ChallengeManager_C_ExecuteUbergraph_BP_ChallengeManager, CallFunc_Array_Length_ReturnValue_3) == 0x0000FC, "Member 'BP_ChallengeManager_C_ExecuteUbergraph_BP_ChallengeManager::CallFunc_Array_Length_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(BP_ChallengeManager_C_ExecuteUbergraph_BP_ChallengeManager, CallFunc_Greater_IntInt_ReturnValue) == 0x000100, "Member 'BP_ChallengeManager_C_ExecuteUbergraph_BP_ChallengeManager::CallFunc_Greater_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_ChallengeManager_C_ExecuteUbergraph_BP_ChallengeManager, CallFunc_Not_PreBool_ReturnValue) == 0x000101, "Member 'BP_ChallengeManager_C_ExecuteUbergraph_BP_ChallengeManager::CallFunc_Not_PreBool_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_ChallengeManager_C_ExecuteUbergraph_BP_ChallengeManager, CallFunc_Array_Get_Item_2) == 0x000108, "Member 'BP_ChallengeManager_C_ExecuteUbergraph_BP_ChallengeManager::CallFunc_Array_Get_Item_2' has a wrong offset!");
static_assert(offsetof(BP_ChallengeManager_C_ExecuteUbergraph_BP_ChallengeManager, Temp_int_Array_Index_Variable_3) == 0x000130, "Member 'BP_ChallengeManager_C_ExecuteUbergraph_BP_ChallengeManager::Temp_int_Array_Index_Variable_3' has a wrong offset!");
static_assert(offsetof(BP_ChallengeManager_C_ExecuteUbergraph_BP_ChallengeManager, CallFunc_Array_Get_Item_3) == 0x000138, "Member 'BP_ChallengeManager_C_ExecuteUbergraph_BP_ChallengeManager::CallFunc_Array_Get_Item_3' has a wrong offset!");
static_assert(offsetof(BP_ChallengeManager_C_ExecuteUbergraph_BP_ChallengeManager, CallFunc_IsValid_ReturnValue_1) == 0x000140, "Member 'BP_ChallengeManager_C_ExecuteUbergraph_BP_ChallengeManager::CallFunc_IsValid_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_ChallengeManager_C_ExecuteUbergraph_BP_ChallengeManager, CallFunc_GetCloudTime_ReturnValue) == 0x000148, "Member 'BP_ChallengeManager_C_ExecuteUbergraph_BP_ChallengeManager::CallFunc_GetCloudTime_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_ChallengeManager_C_ExecuteUbergraph_BP_ChallengeManager, CallFunc_Get_Next_Reset_Timestamp_Next_Reset_Timestamp) == 0x000150, "Member 'BP_ChallengeManager_C_ExecuteUbergraph_BP_ChallengeManager::CallFunc_Get_Next_Reset_Timestamp_Next_Reset_Timestamp' has a wrong offset!");
static_assert(offsetof(BP_ChallengeManager_C_ExecuteUbergraph_BP_ChallengeManager, CallFunc_Subtract_DateTimeDateTime_ReturnValue) == 0x000158, "Member 'BP_ChallengeManager_C_ExecuteUbergraph_BP_ChallengeManager::CallFunc_Subtract_DateTimeDateTime_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_ChallengeManager_C_ExecuteUbergraph_BP_ChallengeManager, CallFunc_GetTotalSeconds_ReturnValue) == 0x000160, "Member 'BP_ChallengeManager_C_ExecuteUbergraph_BP_ChallengeManager::CallFunc_GetTotalSeconds_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_ChallengeManager_C_ExecuteUbergraph_BP_ChallengeManager, Temp_int_Loop_Counter_Variable_2) == 0x000164, "Member 'BP_ChallengeManager_C_ExecuteUbergraph_BP_ChallengeManager::Temp_int_Loop_Counter_Variable_2' has a wrong offset!");
static_assert(offsetof(BP_ChallengeManager_C_ExecuteUbergraph_BP_ChallengeManager, CallFunc_Add_IntInt_ReturnValue_2) == 0x000168, "Member 'BP_ChallengeManager_C_ExecuteUbergraph_BP_ChallengeManager::CallFunc_Add_IntInt_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BP_ChallengeManager_C_ExecuteUbergraph_BP_ChallengeManager, CallFunc_Get_Next_Reset_Timestamp_Next_Reset_Timestamp_1) == 0x000170, "Member 'BP_ChallengeManager_C_ExecuteUbergraph_BP_ChallengeManager::CallFunc_Get_Next_Reset_Timestamp_Next_Reset_Timestamp_1' has a wrong offset!");
static_assert(offsetof(BP_ChallengeManager_C_ExecuteUbergraph_BP_ChallengeManager, CallFunc_GetUserControllerId_ReturnValue) == 0x000178, "Member 'BP_ChallengeManager_C_ExecuteUbergraph_BP_ChallengeManager::CallFunc_GetUserControllerId_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_ChallengeManager_C_ExecuteUbergraph_BP_ChallengeManager, CallFunc_GetHumanPlayerControllerByControllerId_ReturnValue) == 0x000180, "Member 'BP_ChallengeManager_C_ExecuteUbergraph_BP_ChallengeManager::CallFunc_GetHumanPlayerControllerByControllerId_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_ChallengeManager_C_ExecuteUbergraph_BP_ChallengeManager, CallFunc_GetUserControllerId_ReturnValue_1) == 0x000188, "Member 'BP_ChallengeManager_C_ExecuteUbergraph_BP_ChallengeManager::CallFunc_GetUserControllerId_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_ChallengeManager_C_ExecuteUbergraph_BP_ChallengeManager, CallFunc_IsValid_ReturnValue_2) == 0x00018C, "Member 'BP_ChallengeManager_C_ExecuteUbergraph_BP_ChallengeManager::CallFunc_IsValid_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BP_ChallengeManager_C_ExecuteUbergraph_BP_ChallengeManager, CallFunc_GetHumanPlayerControllerByControllerId_ReturnValue_1) == 0x000190, "Member 'BP_ChallengeManager_C_ExecuteUbergraph_BP_ChallengeManager::CallFunc_GetHumanPlayerControllerByControllerId_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_ChallengeManager_C_ExecuteUbergraph_BP_ChallengeManager, CallFunc_IsValid_ReturnValue_3) == 0x000198, "Member 'BP_ChallengeManager_C_ExecuteUbergraph_BP_ChallengeManager::CallFunc_IsValid_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(BP_ChallengeManager_C_ExecuteUbergraph_BP_ChallengeManager, CallFunc_IsCloudUserIdSet_ReturnValue) == 0x000199, "Member 'BP_ChallengeManager_C_ExecuteUbergraph_BP_ChallengeManager::CallFunc_IsCloudUserIdSet_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_ChallengeManager_C_ExecuteUbergraph_BP_ChallengeManager, Temp_class_Variable) == 0x0001A0, "Member 'BP_ChallengeManager_C_ExecuteUbergraph_BP_ChallengeManager::Temp_class_Variable' has a wrong offset!");
static_assert(offsetof(BP_ChallengeManager_C_ExecuteUbergraph_BP_ChallengeManager, Temp_int_Loop_Counter_Variable_3) == 0x0001A8, "Member 'BP_ChallengeManager_C_ExecuteUbergraph_BP_ChallengeManager::Temp_int_Loop_Counter_Variable_3' has a wrong offset!");
static_assert(offsetof(BP_ChallengeManager_C_ExecuteUbergraph_BP_ChallengeManager, K2Node_Select_Default) == 0x0001B0, "Member 'BP_ChallengeManager_C_ExecuteUbergraph_BP_ChallengeManager::K2Node_Select_Default' has a wrong offset!");
static_assert(offsetof(BP_ChallengeManager_C_ExecuteUbergraph_BP_ChallengeManager, K2Node_ClassDynamicCast_AsChallenge_Prerequisite_1) == 0x0001B8, "Member 'BP_ChallengeManager_C_ExecuteUbergraph_BP_ChallengeManager::K2Node_ClassDynamicCast_AsChallenge_Prerequisite_1' has a wrong offset!");
static_assert(offsetof(BP_ChallengeManager_C_ExecuteUbergraph_BP_ChallengeManager, K2Node_ClassDynamicCast_bSuccess_1) == 0x0001C0, "Member 'BP_ChallengeManager_C_ExecuteUbergraph_BP_ChallengeManager::K2Node_ClassDynamicCast_bSuccess_1' has a wrong offset!");
static_assert(offsetof(BP_ChallengeManager_C_ExecuteUbergraph_BP_ChallengeManager, CallFunc_Less_IntInt_ReturnValue_1) == 0x0001C1, "Member 'BP_ChallengeManager_C_ExecuteUbergraph_BP_ChallengeManager::CallFunc_Less_IntInt_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_ChallengeManager_C_ExecuteUbergraph_BP_ChallengeManager, CallFunc_Add_IntInt_ReturnValue_3) == 0x0001C4, "Member 'BP_ChallengeManager_C_ExecuteUbergraph_BP_ChallengeManager::CallFunc_Add_IntInt_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(BP_ChallengeManager_C_ExecuteUbergraph_BP_ChallengeManager, Temp_int_Variable) == 0x0001C8, "Member 'BP_ChallengeManager_C_ExecuteUbergraph_BP_ChallengeManager::Temp_int_Variable' has a wrong offset!");
static_assert(offsetof(BP_ChallengeManager_C_ExecuteUbergraph_BP_ChallengeManager, CallFunc_GetFlameController_ReturnValue) == 0x0001D0, "Member 'BP_ChallengeManager_C_ExecuteUbergraph_BP_ChallengeManager::CallFunc_GetFlameController_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_ChallengeManager_C_ExecuteUbergraph_BP_ChallengeManager, CallFunc_GetUserChallengeSlots_ReturnValue) == 0x0001D8, "Member 'BP_ChallengeManager_C_ExecuteUbergraph_BP_ChallengeManager::CallFunc_GetUserChallengeSlots_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_ChallengeManager_C_ExecuteUbergraph_BP_ChallengeManager, K2Node_MakeStruct_FormatArgumentData) == 0x0001E0, "Member 'BP_ChallengeManager_C_ExecuteUbergraph_BP_ChallengeManager::K2Node_MakeStruct_FormatArgumentData' has a wrong offset!");
static_assert(offsetof(BP_ChallengeManager_C_ExecuteUbergraph_BP_ChallengeManager, K2Node_ComponentBoundEvent_RequestResult_6) == 0x000220, "Member 'BP_ChallengeManager_C_ExecuteUbergraph_BP_ChallengeManager::K2Node_ComponentBoundEvent_RequestResult_6' has a wrong offset!");
static_assert(offsetof(BP_ChallengeManager_C_ExecuteUbergraph_BP_ChallengeManager, K2Node_ComponentBoundEvent_Response_3) == 0x000278, "Member 'BP_ChallengeManager_C_ExecuteUbergraph_BP_ChallengeManager::K2Node_ComponentBoundEvent_Response_3' has a wrong offset!");
static_assert(offsetof(BP_ChallengeManager_C_ExecuteUbergraph_BP_ChallengeManager, K2Node_ComponentBoundEvent_RequestResult_5) == 0x0002D0, "Member 'BP_ChallengeManager_C_ExecuteUbergraph_BP_ChallengeManager::K2Node_ComponentBoundEvent_RequestResult_5' has a wrong offset!");
static_assert(offsetof(BP_ChallengeManager_C_ExecuteUbergraph_BP_ChallengeManager, K2Node_ComponentBoundEvent_Response_2) == 0x000328, "Member 'BP_ChallengeManager_C_ExecuteUbergraph_BP_ChallengeManager::K2Node_ComponentBoundEvent_Response_2' has a wrong offset!");
static_assert(offsetof(BP_ChallengeManager_C_ExecuteUbergraph_BP_ChallengeManager, CallFunc_Map_Keys_Keys) == 0x000398, "Member 'BP_ChallengeManager_C_ExecuteUbergraph_BP_ChallengeManager::CallFunc_Map_Keys_Keys' has a wrong offset!");
static_assert(offsetof(BP_ChallengeManager_C_ExecuteUbergraph_BP_ChallengeManager, CallFunc_Array_Length_ReturnValue_4) == 0x0003A8, "Member 'BP_ChallengeManager_C_ExecuteUbergraph_BP_ChallengeManager::CallFunc_Array_Length_ReturnValue_4' has a wrong offset!");
static_assert(offsetof(BP_ChallengeManager_C_ExecuteUbergraph_BP_ChallengeManager, CallFunc_GetChallengeSlotsByCategory_ChallengeSlots) == 0x0003B0, "Member 'BP_ChallengeManager_C_ExecuteUbergraph_BP_ChallengeManager::CallFunc_GetChallengeSlotsByCategory_ChallengeSlots' has a wrong offset!");
static_assert(offsetof(BP_ChallengeManager_C_ExecuteUbergraph_BP_ChallengeManager, CallFunc_GetChallengeSlotsByCategory_ChallengeSlots_1) == 0x0003C0, "Member 'BP_ChallengeManager_C_ExecuteUbergraph_BP_ChallengeManager::CallFunc_GetChallengeSlotsByCategory_ChallengeSlots_1' has a wrong offset!");
static_assert(offsetof(BP_ChallengeManager_C_ExecuteUbergraph_BP_ChallengeManager, CallFunc_Subtract_IntInt_ReturnValue) == 0x0003D0, "Member 'BP_ChallengeManager_C_ExecuteUbergraph_BP_ChallengeManager::CallFunc_Subtract_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_ChallengeManager_C_ExecuteUbergraph_BP_ChallengeManager, CallFunc_Subtract_IntInt_ReturnValue_1) == 0x0003D4, "Member 'BP_ChallengeManager_C_ExecuteUbergraph_BP_ChallengeManager::CallFunc_Subtract_IntInt_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_ChallengeManager_C_ExecuteUbergraph_BP_ChallengeManager, CallFunc_Array_Get_Item_4) == 0x0003D8, "Member 'BP_ChallengeManager_C_ExecuteUbergraph_BP_ChallengeManager::CallFunc_Array_Get_Item_4' has a wrong offset!");
static_assert(offsetof(BP_ChallengeManager_C_ExecuteUbergraph_BP_ChallengeManager, CallFunc_Array_Get_Item_5) == 0x0003E0, "Member 'BP_ChallengeManager_C_ExecuteUbergraph_BP_ChallengeManager::CallFunc_Array_Get_Item_5' has a wrong offset!");
static_assert(offsetof(BP_ChallengeManager_C_ExecuteUbergraph_BP_ChallengeManager, CallFunc_EqualEqual_ByteByte_ReturnValue_1) == 0x0003E8, "Member 'BP_ChallengeManager_C_ExecuteUbergraph_BP_ChallengeManager::CallFunc_EqualEqual_ByteByte_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_ChallengeManager_C_ExecuteUbergraph_BP_ChallengeManager, CallFunc_EqualEqual_ByteByte_ReturnValue_2) == 0x0003E9, "Member 'BP_ChallengeManager_C_ExecuteUbergraph_BP_ChallengeManager::CallFunc_EqualEqual_ByteByte_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BP_ChallengeManager_C_ExecuteUbergraph_BP_ChallengeManager, CallFunc_Conv_StringToText_ReturnValue) == 0x0003F0, "Member 'BP_ChallengeManager_C_ExecuteUbergraph_BP_ChallengeManager::CallFunc_Conv_StringToText_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_ChallengeManager_C_ExecuteUbergraph_BP_ChallengeManager, K2Node_MakeStruct_FormatArgumentData_1) == 0x000408, "Member 'BP_ChallengeManager_C_ExecuteUbergraph_BP_ChallengeManager::K2Node_MakeStruct_FormatArgumentData_1' has a wrong offset!");
static_assert(offsetof(BP_ChallengeManager_C_ExecuteUbergraph_BP_ChallengeManager, K2Node_MakeArray_Array) == 0x000448, "Member 'BP_ChallengeManager_C_ExecuteUbergraph_BP_ChallengeManager::K2Node_MakeArray_Array' has a wrong offset!");
static_assert(offsetof(BP_ChallengeManager_C_ExecuteUbergraph_BP_ChallengeManager, CallFunc_Format_ReturnValue) == 0x000458, "Member 'BP_ChallengeManager_C_ExecuteUbergraph_BP_ChallengeManager::CallFunc_Format_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_ChallengeManager_C_ExecuteUbergraph_BP_ChallengeManager, Temp_int_Array_Index_Variable_4) == 0x000470, "Member 'BP_ChallengeManager_C_ExecuteUbergraph_BP_ChallengeManager::Temp_int_Array_Index_Variable_4' has a wrong offset!");
static_assert(offsetof(BP_ChallengeManager_C_ExecuteUbergraph_BP_ChallengeManager, K2Node_ComponentBoundEvent_RequestResult_4) == 0x000478, "Member 'BP_ChallengeManager_C_ExecuteUbergraph_BP_ChallengeManager::K2Node_ComponentBoundEvent_RequestResult_4' has a wrong offset!");
static_assert(offsetof(BP_ChallengeManager_C_ExecuteUbergraph_BP_ChallengeManager, K2Node_ComponentBoundEvent_ProgressResult) == 0x0004D0, "Member 'BP_ChallengeManager_C_ExecuteUbergraph_BP_ChallengeManager::K2Node_ComponentBoundEvent_ProgressResult' has a wrong offset!");
static_assert(offsetof(BP_ChallengeManager_C_ExecuteUbergraph_BP_ChallengeManager, CallFunc_Array_Get_Item_6) == 0x000520, "Member 'BP_ChallengeManager_C_ExecuteUbergraph_BP_ChallengeManager::CallFunc_Array_Get_Item_6' has a wrong offset!");
static_assert(offsetof(BP_ChallengeManager_C_ExecuteUbergraph_BP_ChallengeManager, CallFunc_IsValid_ReturnValue_4) == 0x000528, "Member 'BP_ChallengeManager_C_ExecuteUbergraph_BP_ChallengeManager::CallFunc_IsValid_ReturnValue_4' has a wrong offset!");
static_assert(offsetof(BP_ChallengeManager_C_ExecuteUbergraph_BP_ChallengeManager, CallFunc_Subtract_IntInt_ReturnValue_2) == 0x00052C, "Member 'BP_ChallengeManager_C_ExecuteUbergraph_BP_ChallengeManager::CallFunc_Subtract_IntInt_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BP_ChallengeManager_C_ExecuteUbergraph_BP_ChallengeManager, CallFunc_EqualEqual_ByteByte_ReturnValue_3) == 0x000530, "Member 'BP_ChallengeManager_C_ExecuteUbergraph_BP_ChallengeManager::CallFunc_EqualEqual_ByteByte_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(BP_ChallengeManager_C_ExecuteUbergraph_BP_ChallengeManager, CallFunc_Send_Challenge_Progress_Set_Event_ReturnValue) == 0x000531, "Member 'BP_ChallengeManager_C_ExecuteUbergraph_BP_ChallengeManager::CallFunc_Send_Challenge_Progress_Set_Event_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_ChallengeManager_C_ExecuteUbergraph_BP_ChallengeManager, K2Node_ComponentBoundEvent_RequestResult_3) == 0x000538, "Member 'BP_ChallengeManager_C_ExecuteUbergraph_BP_ChallengeManager::K2Node_ComponentBoundEvent_RequestResult_3' has a wrong offset!");
static_assert(offsetof(BP_ChallengeManager_C_ExecuteUbergraph_BP_ChallengeManager, K2Node_ComponentBoundEvent_ClaimResult_1) == 0x000590, "Member 'BP_ChallengeManager_C_ExecuteUbergraph_BP_ChallengeManager::K2Node_ComponentBoundEvent_ClaimResult_1' has a wrong offset!");
static_assert(offsetof(BP_ChallengeManager_C_ExecuteUbergraph_BP_ChallengeManager, CallFunc_EqualEqual_ByteByte_ReturnValue_4) == 0x000600, "Member 'BP_ChallengeManager_C_ExecuteUbergraph_BP_ChallengeManager::CallFunc_EqualEqual_ByteByte_ReturnValue_4' has a wrong offset!");
static_assert(offsetof(BP_ChallengeManager_C_ExecuteUbergraph_BP_ChallengeManager, CallFunc_GetChallengeSlotsByCategory_ChallengeSlots_2) == 0x000608, "Member 'BP_ChallengeManager_C_ExecuteUbergraph_BP_ChallengeManager::CallFunc_GetChallengeSlotsByCategory_ChallengeSlots_2' has a wrong offset!");
static_assert(offsetof(BP_ChallengeManager_C_ExecuteUbergraph_BP_ChallengeManager, CallFunc_Subtract_IntInt_ReturnValue_3) == 0x000618, "Member 'BP_ChallengeManager_C_ExecuteUbergraph_BP_ChallengeManager::CallFunc_Subtract_IntInt_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(BP_ChallengeManager_C_ExecuteUbergraph_BP_ChallengeManager, CallFunc_Array_Get_Item_7) == 0x000620, "Member 'BP_ChallengeManager_C_ExecuteUbergraph_BP_ChallengeManager::CallFunc_Array_Get_Item_7' has a wrong offset!");
static_assert(offsetof(BP_ChallengeManager_C_ExecuteUbergraph_BP_ChallengeManager, CallFunc_GetFlameController_ReturnValue_1) == 0x000628, "Member 'BP_ChallengeManager_C_ExecuteUbergraph_BP_ChallengeManager::CallFunc_GetFlameController_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_ChallengeManager_C_ExecuteUbergraph_BP_ChallengeManager, CallFunc_Get_Rewards_List_Rewards) == 0x000630, "Member 'BP_ChallengeManager_C_ExecuteUbergraph_BP_ChallengeManager::CallFunc_Get_Rewards_List_Rewards' has a wrong offset!");
static_assert(offsetof(BP_ChallengeManager_C_ExecuteUbergraph_BP_ChallengeManager, CallFunc_GetUserChallengeSlots_ReturnValue_1) == 0x000640, "Member 'BP_ChallengeManager_C_ExecuteUbergraph_BP_ChallengeManager::CallFunc_GetUserChallengeSlots_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_ChallengeManager_C_ExecuteUbergraph_BP_ChallengeManager, CallFunc_GetFlameController_ReturnValue_2) == 0x000648, "Member 'BP_ChallengeManager_C_ExecuteUbergraph_BP_ChallengeManager::CallFunc_GetFlameController_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BP_ChallengeManager_C_ExecuteUbergraph_BP_ChallengeManager, CallFunc_GetUserChallengeSlots_ReturnValue_2) == 0x000650, "Member 'BP_ChallengeManager_C_ExecuteUbergraph_BP_ChallengeManager::CallFunc_GetUserChallengeSlots_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BP_ChallengeManager_C_ExecuteUbergraph_BP_ChallengeManager, CallFunc_GreaterEqual_IntInt_ReturnValue) == 0x000654, "Member 'BP_ChallengeManager_C_ExecuteUbergraph_BP_ChallengeManager::CallFunc_GreaterEqual_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_ChallengeManager_C_ExecuteUbergraph_BP_ChallengeManager, CallFunc_Add_IntInt_ReturnValue_4) == 0x000658, "Member 'BP_ChallengeManager_C_ExecuteUbergraph_BP_ChallengeManager::CallFunc_Add_IntInt_ReturnValue_4' has a wrong offset!");
static_assert(offsetof(BP_ChallengeManager_C_ExecuteUbergraph_BP_ChallengeManager, CallFunc_Add_IntInt_ReturnValue_5) == 0x00065C, "Member 'BP_ChallengeManager_C_ExecuteUbergraph_BP_ChallengeManager::CallFunc_Add_IntInt_ReturnValue_5' has a wrong offset!");
static_assert(offsetof(BP_ChallengeManager_C_ExecuteUbergraph_BP_ChallengeManager, Temp_int_Loop_Counter_Variable_4) == 0x000660, "Member 'BP_ChallengeManager_C_ExecuteUbergraph_BP_ChallengeManager::Temp_int_Loop_Counter_Variable_4' has a wrong offset!");
static_assert(offsetof(BP_ChallengeManager_C_ExecuteUbergraph_BP_ChallengeManager, K2Node_MakeStruct_FormatArgumentData_2) == 0x000668, "Member 'BP_ChallengeManager_C_ExecuteUbergraph_BP_ChallengeManager::K2Node_MakeStruct_FormatArgumentData_2' has a wrong offset!");
static_assert(offsetof(BP_ChallengeManager_C_ExecuteUbergraph_BP_ChallengeManager, K2Node_MakeArray_Array_1) == 0x0006A8, "Member 'BP_ChallengeManager_C_ExecuteUbergraph_BP_ChallengeManager::K2Node_MakeArray_Array_1' has a wrong offset!");
static_assert(offsetof(BP_ChallengeManager_C_ExecuteUbergraph_BP_ChallengeManager, CallFunc_Less_IntInt_ReturnValue_2) == 0x0006B8, "Member 'BP_ChallengeManager_C_ExecuteUbergraph_BP_ChallengeManager::CallFunc_Less_IntInt_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BP_ChallengeManager_C_ExecuteUbergraph_BP_ChallengeManager, CallFunc_Format_ReturnValue_1) == 0x0006C0, "Member 'BP_ChallengeManager_C_ExecuteUbergraph_BP_ChallengeManager::CallFunc_Format_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_ChallengeManager_C_ExecuteUbergraph_BP_ChallengeManager, CallFunc_Add_IntInt_ReturnValue_6) == 0x0006D8, "Member 'BP_ChallengeManager_C_ExecuteUbergraph_BP_ChallengeManager::CallFunc_Add_IntInt_ReturnValue_6' has a wrong offset!");
static_assert(offsetof(BP_ChallengeManager_C_ExecuteUbergraph_BP_ChallengeManager, Temp_int_Array_Index_Variable_5) == 0x0006DC, "Member 'BP_ChallengeManager_C_ExecuteUbergraph_BP_ChallengeManager::Temp_int_Array_Index_Variable_5' has a wrong offset!");
static_assert(offsetof(BP_ChallengeManager_C_ExecuteUbergraph_BP_ChallengeManager, CallFunc_Send_Challenge_Rewards_Claimed_Event_ReturnValue) == 0x0006E0, "Member 'BP_ChallengeManager_C_ExecuteUbergraph_BP_ChallengeManager::CallFunc_Send_Challenge_Rewards_Claimed_Event_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_ChallengeManager_C_ExecuteUbergraph_BP_ChallengeManager, CallFunc_Array_Get_Item_8) == 0x0006E8, "Member 'BP_ChallengeManager_C_ExecuteUbergraph_BP_ChallengeManager::CallFunc_Array_Get_Item_8' has a wrong offset!");
static_assert(offsetof(BP_ChallengeManager_C_ExecuteUbergraph_BP_ChallengeManager, CallFunc_Map_Find_Value) == 0x0006F8, "Member 'BP_ChallengeManager_C_ExecuteUbergraph_BP_ChallengeManager::CallFunc_Map_Find_Value' has a wrong offset!");
static_assert(offsetof(BP_ChallengeManager_C_ExecuteUbergraph_BP_ChallengeManager, CallFunc_Map_Find_ReturnValue) == 0x000708, "Member 'BP_ChallengeManager_C_ExecuteUbergraph_BP_ChallengeManager::CallFunc_Map_Find_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_ChallengeManager_C_ExecuteUbergraph_BP_ChallengeManager, CallFunc_Map_Find_Value_1) == 0x000710, "Member 'BP_ChallengeManager_C_ExecuteUbergraph_BP_ChallengeManager::CallFunc_Map_Find_Value_1' has a wrong offset!");
static_assert(offsetof(BP_ChallengeManager_C_ExecuteUbergraph_BP_ChallengeManager, CallFunc_Map_Find_ReturnValue_1) == 0x000720, "Member 'BP_ChallengeManager_C_ExecuteUbergraph_BP_ChallengeManager::CallFunc_Map_Find_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_ChallengeManager_C_ExecuteUbergraph_BP_ChallengeManager, Temp_int_Loop_Counter_Variable_5) == 0x000724, "Member 'BP_ChallengeManager_C_ExecuteUbergraph_BP_ChallengeManager::Temp_int_Loop_Counter_Variable_5' has a wrong offset!");
static_assert(offsetof(BP_ChallengeManager_C_ExecuteUbergraph_BP_ChallengeManager, CallFunc_Array_Get_Item_9) == 0x000728, "Member 'BP_ChallengeManager_C_ExecuteUbergraph_BP_ChallengeManager::CallFunc_Array_Get_Item_9' has a wrong offset!");
static_assert(offsetof(BP_ChallengeManager_C_ExecuteUbergraph_BP_ChallengeManager, CallFunc_Less_IntInt_ReturnValue_3) == 0x000730, "Member 'BP_ChallengeManager_C_ExecuteUbergraph_BP_ChallengeManager::CallFunc_Less_IntInt_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(BP_ChallengeManager_C_ExecuteUbergraph_BP_ChallengeManager, CallFunc_Add_IntInt_ReturnValue_7) == 0x000734, "Member 'BP_ChallengeManager_C_ExecuteUbergraph_BP_ChallengeManager::CallFunc_Add_IntInt_ReturnValue_7' has a wrong offset!");
static_assert(offsetof(BP_ChallengeManager_C_ExecuteUbergraph_BP_ChallengeManager, CallFunc_Map_Contains_ReturnValue) == 0x000738, "Member 'BP_ChallengeManager_C_ExecuteUbergraph_BP_ChallengeManager::CallFunc_Map_Contains_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_ChallengeManager_C_ExecuteUbergraph_BP_ChallengeManager, CallFunc_Map_Find_Value_2) == 0x000740, "Member 'BP_ChallengeManager_C_ExecuteUbergraph_BP_ChallengeManager::CallFunc_Map_Find_Value_2' has a wrong offset!");
static_assert(offsetof(BP_ChallengeManager_C_ExecuteUbergraph_BP_ChallengeManager, CallFunc_Map_Find_ReturnValue_2) == 0x000750, "Member 'BP_ChallengeManager_C_ExecuteUbergraph_BP_ChallengeManager::CallFunc_Map_Find_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BP_ChallengeManager_C_ExecuteUbergraph_BP_ChallengeManager, K2Node_CreateDelegate_OutputDelegate_1) == 0x000754, "Member 'BP_ChallengeManager_C_ExecuteUbergraph_BP_ChallengeManager::K2Node_CreateDelegate_OutputDelegate_1' has a wrong offset!");
static_assert(offsetof(BP_ChallengeManager_C_ExecuteUbergraph_BP_ChallengeManager, CallFunc_InitializeChallengesFromCloud_Challenge_Slots) == 0x000768, "Member 'BP_ChallengeManager_C_ExecuteUbergraph_BP_ChallengeManager::CallFunc_InitializeChallengesFromCloud_Challenge_Slots' has a wrong offset!");
static_assert(offsetof(BP_ChallengeManager_C_ExecuteUbergraph_BP_ChallengeManager, K2Node_MakeStruct_Struct_ChallengeSlotsCategory) == 0x000778, "Member 'BP_ChallengeManager_C_ExecuteUbergraph_BP_ChallengeManager::K2Node_MakeStruct_Struct_ChallengeSlotsCategory' has a wrong offset!");
static_assert(offsetof(BP_ChallengeManager_C_ExecuteUbergraph_BP_ChallengeManager, K2Node_MakeArray_Array_2) == 0x000788, "Member 'BP_ChallengeManager_C_ExecuteUbergraph_BP_ChallengeManager::K2Node_MakeArray_Array_2' has a wrong offset!");
static_assert(offsetof(BP_ChallengeManager_C_ExecuteUbergraph_BP_ChallengeManager, K2Node_MakeStruct_Struct_ChallengeSlotsCategory_1) == 0x000798, "Member 'BP_ChallengeManager_C_ExecuteUbergraph_BP_ChallengeManager::K2Node_MakeStruct_Struct_ChallengeSlotsCategory_1' has a wrong offset!");
static_assert(offsetof(BP_ChallengeManager_C_ExecuteUbergraph_BP_ChallengeManager, CallFunc_MakeLiteralByte_ReturnValue) == 0x0007A8, "Member 'BP_ChallengeManager_C_ExecuteUbergraph_BP_ChallengeManager::CallFunc_MakeLiteralByte_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_ChallengeManager_C_ExecuteUbergraph_BP_ChallengeManager, CallFunc_Less_ByteByte_ReturnValue) == 0x0007A9, "Member 'BP_ChallengeManager_C_ExecuteUbergraph_BP_ChallengeManager::CallFunc_Less_ByteByte_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_ChallengeManager_C_ExecuteUbergraph_BP_ChallengeManager, K2Node_CreateDelegate_OutputDelegate_2) == 0x0007AC, "Member 'BP_ChallengeManager_C_ExecuteUbergraph_BP_ChallengeManager::K2Node_CreateDelegate_OutputDelegate_2' has a wrong offset!");
static_assert(offsetof(BP_ChallengeManager_C_ExecuteUbergraph_BP_ChallengeManager, Temp_string_Variable) == 0x0007C0, "Member 'BP_ChallengeManager_C_ExecuteUbergraph_BP_ChallengeManager::Temp_string_Variable' has a wrong offset!");
static_assert(offsetof(BP_ChallengeManager_C_ExecuteUbergraph_BP_ChallengeManager, CallFunc_K2_SetTimerDelegate_ReturnValue) == 0x0007D0, "Member 'BP_ChallengeManager_C_ExecuteUbergraph_BP_ChallengeManager::CallFunc_K2_SetTimerDelegate_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_ChallengeManager_C_ExecuteUbergraph_BP_ChallengeManager, CallFunc_Array_Add_ReturnValue) == 0x0007D8, "Member 'BP_ChallengeManager_C_ExecuteUbergraph_BP_ChallengeManager::CallFunc_Array_Add_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_ChallengeManager_C_ExecuteUbergraph_BP_ChallengeManager, K2Node_CreateDelegate_OutputDelegate_3) == 0x0007DC, "Member 'BP_ChallengeManager_C_ExecuteUbergraph_BP_ChallengeManager::K2Node_CreateDelegate_OutputDelegate_3' has a wrong offset!");
static_assert(offsetof(BP_ChallengeManager_C_ExecuteUbergraph_BP_ChallengeManager, CallFunc_Now_ReturnValue) == 0x0007F0, "Member 'BP_ChallengeManager_C_ExecuteUbergraph_BP_ChallengeManager::CallFunc_Now_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_ChallengeManager_C_ExecuteUbergraph_BP_ChallengeManager, CallFunc_K2_SetTimerDelegate_ReturnValue_1) == 0x0007F8, "Member 'BP_ChallengeManager_C_ExecuteUbergraph_BP_ChallengeManager::CallFunc_K2_SetTimerDelegate_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_ChallengeManager_C_ExecuteUbergraph_BP_ChallengeManager, CallFunc_MakeTransform_ReturnValue) == 0x000800, "Member 'BP_ChallengeManager_C_ExecuteUbergraph_BP_ChallengeManager::CallFunc_MakeTransform_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_ChallengeManager_C_ExecuteUbergraph_BP_ChallengeManager, CallFunc_BeginDeferredActorSpawnFromClass_ReturnValue) == 0x000830, "Member 'BP_ChallengeManager_C_ExecuteUbergraph_BP_ChallengeManager::CallFunc_BeginDeferredActorSpawnFromClass_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_ChallengeManager_C_ExecuteUbergraph_BP_ChallengeManager, K2Node_CreateDelegate_OutputDelegate_4) == 0x000838, "Member 'BP_ChallengeManager_C_ExecuteUbergraph_BP_ChallengeManager::K2Node_CreateDelegate_OutputDelegate_4' has a wrong offset!");
static_assert(offsetof(BP_ChallengeManager_C_ExecuteUbergraph_BP_ChallengeManager, CallFunc_FinishSpawningActor_ReturnValue) == 0x000848, "Member 'BP_ChallengeManager_C_ExecuteUbergraph_BP_ChallengeManager::CallFunc_FinishSpawningActor_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_ChallengeManager_C_ExecuteUbergraph_BP_ChallengeManager, CallFunc_K2_SetTimerDelegate_ReturnValue_2) == 0x000850, "Member 'BP_ChallengeManager_C_ExecuteUbergraph_BP_ChallengeManager::CallFunc_K2_SetTimerDelegate_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BP_ChallengeManager_C_ExecuteUbergraph_BP_ChallengeManager, K2Node_ComponentBoundEvent_RequestResult_2) == 0x000858, "Member 'BP_ChallengeManager_C_ExecuteUbergraph_BP_ChallengeManager::K2Node_ComponentBoundEvent_RequestResult_2' has a wrong offset!");
static_assert(offsetof(BP_ChallengeManager_C_ExecuteUbergraph_BP_ChallengeManager, K2Node_ComponentBoundEvent_Response_1) == 0x0008B0, "Member 'BP_ChallengeManager_C_ExecuteUbergraph_BP_ChallengeManager::K2Node_ComponentBoundEvent_Response_1' has a wrong offset!");
static_assert(offsetof(BP_ChallengeManager_C_ExecuteUbergraph_BP_ChallengeManager, K2Node_CreateDelegate_OutputDelegate_5) == 0x0008BC, "Member 'BP_ChallengeManager_C_ExecuteUbergraph_BP_ChallengeManager::K2Node_CreateDelegate_OutputDelegate_5' has a wrong offset!");
static_assert(offsetof(BP_ChallengeManager_C_ExecuteUbergraph_BP_ChallengeManager, K2Node_ComponentBoundEvent_RequestResult_1) == 0x0008D0, "Member 'BP_ChallengeManager_C_ExecuteUbergraph_BP_ChallengeManager::K2Node_ComponentBoundEvent_RequestResult_1' has a wrong offset!");
static_assert(offsetof(BP_ChallengeManager_C_ExecuteUbergraph_BP_ChallengeManager, K2Node_ComponentBoundEvent_Response) == 0x000928, "Member 'BP_ChallengeManager_C_ExecuteUbergraph_BP_ChallengeManager::K2Node_ComponentBoundEvent_Response' has a wrong offset!");
static_assert(offsetof(BP_ChallengeManager_C_ExecuteUbergraph_BP_ChallengeManager, K2Node_ComponentBoundEvent_RequestResult) == 0x000938, "Member 'BP_ChallengeManager_C_ExecuteUbergraph_BP_ChallengeManager::K2Node_ComponentBoundEvent_RequestResult' has a wrong offset!");
static_assert(offsetof(BP_ChallengeManager_C_ExecuteUbergraph_BP_ChallengeManager, K2Node_ComponentBoundEvent_ClaimResult) == 0x000990, "Member 'BP_ChallengeManager_C_ExecuteUbergraph_BP_ChallengeManager::K2Node_ComponentBoundEvent_ClaimResult' has a wrong offset!");
static_assert(offsetof(BP_ChallengeManager_C_ExecuteUbergraph_BP_ChallengeManager, CallFunc_Array_Get_Item_10) == 0x0009B0, "Member 'BP_ChallengeManager_C_ExecuteUbergraph_BP_ChallengeManager::CallFunc_Array_Get_Item_10' has a wrong offset!");
static_assert(offsetof(BP_ChallengeManager_C_ExecuteUbergraph_BP_ChallengeManager, CallFunc_Array_Get_Item_11) == 0x0009C8, "Member 'BP_ChallengeManager_C_ExecuteUbergraph_BP_ChallengeManager::CallFunc_Array_Get_Item_11' has a wrong offset!");
static_assert(offsetof(BP_ChallengeManager_C_ExecuteUbergraph_BP_ChallengeManager, CallFunc_Array_Length_ReturnValue_5) == 0x0009E0, "Member 'BP_ChallengeManager_C_ExecuteUbergraph_BP_ChallengeManager::CallFunc_Array_Length_ReturnValue_5' has a wrong offset!");
static_assert(offsetof(BP_ChallengeManager_C_ExecuteUbergraph_BP_ChallengeManager, CallFunc_Array_Length_ReturnValue_6) == 0x0009E4, "Member 'BP_ChallengeManager_C_ExecuteUbergraph_BP_ChallengeManager::CallFunc_Array_Length_ReturnValue_6' has a wrong offset!");
static_assert(offsetof(BP_ChallengeManager_C_ExecuteUbergraph_BP_ChallengeManager, CallFunc_Less_IntInt_ReturnValue_4) == 0x0009E8, "Member 'BP_ChallengeManager_C_ExecuteUbergraph_BP_ChallengeManager::CallFunc_Less_IntInt_ReturnValue_4' has a wrong offset!");
static_assert(offsetof(BP_ChallengeManager_C_ExecuteUbergraph_BP_ChallengeManager, CallFunc_Less_IntInt_ReturnValue_5) == 0x0009E9, "Member 'BP_ChallengeManager_C_ExecuteUbergraph_BP_ChallengeManager::CallFunc_Less_IntInt_ReturnValue_5' has a wrong offset!");
static_assert(offsetof(BP_ChallengeManager_C_ExecuteUbergraph_BP_ChallengeManager, CallFunc_EqualEqual_ByteByte_ReturnValue_5) == 0x0009EA, "Member 'BP_ChallengeManager_C_ExecuteUbergraph_BP_ChallengeManager::CallFunc_EqualEqual_ByteByte_ReturnValue_5' has a wrong offset!");
static_assert(offsetof(BP_ChallengeManager_C_ExecuteUbergraph_BP_ChallengeManager, CallFunc_EqualEqual_ByteByte_ReturnValue_6) == 0x0009EB, "Member 'BP_ChallengeManager_C_ExecuteUbergraph_BP_ChallengeManager::CallFunc_EqualEqual_ByteByte_ReturnValue_6' has a wrong offset!");
static_assert(offsetof(BP_ChallengeManager_C_ExecuteUbergraph_BP_ChallengeManager, K2Node_CreateDelegate_OutputDelegate_6) == 0x0009EC, "Member 'BP_ChallengeManager_C_ExecuteUbergraph_BP_ChallengeManager::K2Node_CreateDelegate_OutputDelegate_6' has a wrong offset!");
static_assert(offsetof(BP_ChallengeManager_C_ExecuteUbergraph_BP_ChallengeManager, CallFunc_GetFlameController_ReturnValue_3) == 0x000A00, "Member 'BP_ChallengeManager_C_ExecuteUbergraph_BP_ChallengeManager::CallFunc_GetFlameController_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(BP_ChallengeManager_C_ExecuteUbergraph_BP_ChallengeManager, CallFunc_GetUserSeasonChallengeRewards_ReturnValue) == 0x000A08, "Member 'BP_ChallengeManager_C_ExecuteUbergraph_BP_ChallengeManager::CallFunc_GetUserSeasonChallengeRewards_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_ChallengeManager_C_ExecuteUbergraph_BP_ChallengeManager, CallFunc_GetFlameController_ReturnValue_4) == 0x000A10, "Member 'BP_ChallengeManager_C_ExecuteUbergraph_BP_ChallengeManager::CallFunc_GetFlameController_ReturnValue_4' has a wrong offset!");
static_assert(offsetof(BP_ChallengeManager_C_ExecuteUbergraph_BP_ChallengeManager, K2Node_CustomEvent_Slot) == 0x000A18, "Member 'BP_ChallengeManager_C_ExecuteUbergraph_BP_ChallengeManager::K2Node_CustomEvent_Slot' has a wrong offset!");
static_assert(offsetof(BP_ChallengeManager_C_ExecuteUbergraph_BP_ChallengeManager, K2Node_CustomEvent_New_Progress) == 0x000A20, "Member 'BP_ChallengeManager_C_ExecuteUbergraph_BP_ChallengeManager::K2Node_CustomEvent_New_Progress' has a wrong offset!");
static_assert(offsetof(BP_ChallengeManager_C_ExecuteUbergraph_BP_ChallengeManager, CallFunc_GetUserSeasonChallengeProgress_ReturnValue) == 0x000A24, "Member 'BP_ChallengeManager_C_ExecuteUbergraph_BP_ChallengeManager::CallFunc_GetUserSeasonChallengeProgress_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_ChallengeManager_C_ExecuteUbergraph_BP_ChallengeManager, CallFunc_GetChallengeSlotsByProgress_Sorted_Challenge_Slots) == 0x000A28, "Member 'BP_ChallengeManager_C_ExecuteUbergraph_BP_ChallengeManager::CallFunc_GetChallengeSlotsByProgress_Sorted_Challenge_Slots' has a wrong offset!");
static_assert(offsetof(BP_ChallengeManager_C_ExecuteUbergraph_BP_ChallengeManager, CallFunc_GetChallengeSlotsByProgress_Sorted_Challenge_Slots_1) == 0x000A38, "Member 'BP_ChallengeManager_C_ExecuteUbergraph_BP_ChallengeManager::CallFunc_GetChallengeSlotsByProgress_Sorted_Challenge_Slots_1' has a wrong offset!");

// Function BP_ChallengeManager.BP_ChallengeManager_C.OnChallengeProgressUpdated
// 0x0010 (0x0010 - 0x0000)
struct BP_ChallengeManager_C_OnChallengeProgressUpdated final
{
public:
	class ABP_ChallengeSlot_C*                    Slot;                                              // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         New_Progress;                                      // 0x0008(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_ChallengeManager_C_OnChallengeProgressUpdated) == 0x000008, "Wrong alignment on BP_ChallengeManager_C_OnChallengeProgressUpdated");
static_assert(sizeof(BP_ChallengeManager_C_OnChallengeProgressUpdated) == 0x000010, "Wrong size on BP_ChallengeManager_C_OnChallengeProgressUpdated");
static_assert(offsetof(BP_ChallengeManager_C_OnChallengeProgressUpdated, Slot) == 0x000000, "Member 'BP_ChallengeManager_C_OnChallengeProgressUpdated::Slot' has a wrong offset!");
static_assert(offsetof(BP_ChallengeManager_C_OnChallengeProgressUpdated, New_Progress) == 0x000008, "Member 'BP_ChallengeManager_C_OnChallengeProgressUpdated::New_Progress' has a wrong offset!");

// Function BP_ChallengeManager.BP_ChallengeManager_C.BndEvt__BP_OnlineChallengesComponent_K2Node_ComponentBoundEvent_5_ClaimUserSeasonChallengeDelegate__DelegateSignature
// 0x0078 (0x0078 - 0x0000)
struct BP_ChallengeManager_C_BndEvt__BP_OnlineChallengesComponent_K2Node_ComponentBoundEvent_5_ClaimUserSeasonChallengeDelegate__DelegateSignature final
{
public:
	struct FCloudRequestResult                    RequestResult;                                     // 0x0000(0x0058)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
	struct FCloudSeasonChallengeClaimResult       ClaimResult;                                       // 0x0058(0x0020)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
};
static_assert(alignof(BP_ChallengeManager_C_BndEvt__BP_OnlineChallengesComponent_K2Node_ComponentBoundEvent_5_ClaimUserSeasonChallengeDelegate__DelegateSignature) == 0x000008, "Wrong alignment on BP_ChallengeManager_C_BndEvt__BP_OnlineChallengesComponent_K2Node_ComponentBoundEvent_5_ClaimUserSeasonChallengeDelegate__DelegateSignature");
static_assert(sizeof(BP_ChallengeManager_C_BndEvt__BP_OnlineChallengesComponent_K2Node_ComponentBoundEvent_5_ClaimUserSeasonChallengeDelegate__DelegateSignature) == 0x000078, "Wrong size on BP_ChallengeManager_C_BndEvt__BP_OnlineChallengesComponent_K2Node_ComponentBoundEvent_5_ClaimUserSeasonChallengeDelegate__DelegateSignature");
static_assert(offsetof(BP_ChallengeManager_C_BndEvt__BP_OnlineChallengesComponent_K2Node_ComponentBoundEvent_5_ClaimUserSeasonChallengeDelegate__DelegateSignature, RequestResult) == 0x000000, "Member 'BP_ChallengeManager_C_BndEvt__BP_OnlineChallengesComponent_K2Node_ComponentBoundEvent_5_ClaimUserSeasonChallengeDelegate__DelegateSignature::RequestResult' has a wrong offset!");
static_assert(offsetof(BP_ChallengeManager_C_BndEvt__BP_OnlineChallengesComponent_K2Node_ComponentBoundEvent_5_ClaimUserSeasonChallengeDelegate__DelegateSignature, ClaimResult) == 0x000058, "Member 'BP_ChallengeManager_C_BndEvt__BP_OnlineChallengesComponent_K2Node_ComponentBoundEvent_5_ClaimUserSeasonChallengeDelegate__DelegateSignature::ClaimResult' has a wrong offset!");

// Function BP_ChallengeManager.BP_ChallengeManager_C.BndEvt__BP_OnlineChallengesComponent_K2Node_ComponentBoundEvent_1_GetUserSeasonChallengeRewardsDelegate__DelegateSignature
// 0x0068 (0x0068 - 0x0000)
struct BP_ChallengeManager_C_BndEvt__BP_OnlineChallengesComponent_K2Node_ComponentBoundEvent_1_GetUserSeasonChallengeRewardsDelegate__DelegateSignature final
{
public:
	struct FCloudRequestResult                    RequestResult;                                     // 0x0000(0x0058)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
	struct FCloudSeasonChallengeRewardsResult     Response;                                          // 0x0058(0x0010)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
};
static_assert(alignof(BP_ChallengeManager_C_BndEvt__BP_OnlineChallengesComponent_K2Node_ComponentBoundEvent_1_GetUserSeasonChallengeRewardsDelegate__DelegateSignature) == 0x000008, "Wrong alignment on BP_ChallengeManager_C_BndEvt__BP_OnlineChallengesComponent_K2Node_ComponentBoundEvent_1_GetUserSeasonChallengeRewardsDelegate__DelegateSignature");
static_assert(sizeof(BP_ChallengeManager_C_BndEvt__BP_OnlineChallengesComponent_K2Node_ComponentBoundEvent_1_GetUserSeasonChallengeRewardsDelegate__DelegateSignature) == 0x000068, "Wrong size on BP_ChallengeManager_C_BndEvt__BP_OnlineChallengesComponent_K2Node_ComponentBoundEvent_1_GetUserSeasonChallengeRewardsDelegate__DelegateSignature");
static_assert(offsetof(BP_ChallengeManager_C_BndEvt__BP_OnlineChallengesComponent_K2Node_ComponentBoundEvent_1_GetUserSeasonChallengeRewardsDelegate__DelegateSignature, RequestResult) == 0x000000, "Member 'BP_ChallengeManager_C_BndEvt__BP_OnlineChallengesComponent_K2Node_ComponentBoundEvent_1_GetUserSeasonChallengeRewardsDelegate__DelegateSignature::RequestResult' has a wrong offset!");
static_assert(offsetof(BP_ChallengeManager_C_BndEvt__BP_OnlineChallengesComponent_K2Node_ComponentBoundEvent_1_GetUserSeasonChallengeRewardsDelegate__DelegateSignature, Response) == 0x000058, "Member 'BP_ChallengeManager_C_BndEvt__BP_OnlineChallengesComponent_K2Node_ComponentBoundEvent_1_GetUserSeasonChallengeRewardsDelegate__DelegateSignature::Response' has a wrong offset!");

// Function BP_ChallengeManager.BP_ChallengeManager_C.BndEvt__BP_OnlineChallengesComponent_K2Node_ComponentBoundEvent_0_GetUserSeasonChallengeProgressDelegate__DelegateSignature
// 0x0068 (0x0068 - 0x0000)
struct BP_ChallengeManager_C_BndEvt__BP_OnlineChallengesComponent_K2Node_ComponentBoundEvent_0_GetUserSeasonChallengeProgressDelegate__DelegateSignature final
{
public:
	struct FCloudRequestResult                    RequestResult;                                     // 0x0000(0x0058)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
	struct FCloudSeasonChallengeProgressResult    Response;                                          // 0x0058(0x000C)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_ChallengeManager_C_BndEvt__BP_OnlineChallengesComponent_K2Node_ComponentBoundEvent_0_GetUserSeasonChallengeProgressDelegate__DelegateSignature) == 0x000008, "Wrong alignment on BP_ChallengeManager_C_BndEvt__BP_OnlineChallengesComponent_K2Node_ComponentBoundEvent_0_GetUserSeasonChallengeProgressDelegate__DelegateSignature");
static_assert(sizeof(BP_ChallengeManager_C_BndEvt__BP_OnlineChallengesComponent_K2Node_ComponentBoundEvent_0_GetUserSeasonChallengeProgressDelegate__DelegateSignature) == 0x000068, "Wrong size on BP_ChallengeManager_C_BndEvt__BP_OnlineChallengesComponent_K2Node_ComponentBoundEvent_0_GetUserSeasonChallengeProgressDelegate__DelegateSignature");
static_assert(offsetof(BP_ChallengeManager_C_BndEvt__BP_OnlineChallengesComponent_K2Node_ComponentBoundEvent_0_GetUserSeasonChallengeProgressDelegate__DelegateSignature, RequestResult) == 0x000000, "Member 'BP_ChallengeManager_C_BndEvt__BP_OnlineChallengesComponent_K2Node_ComponentBoundEvent_0_GetUserSeasonChallengeProgressDelegate__DelegateSignature::RequestResult' has a wrong offset!");
static_assert(offsetof(BP_ChallengeManager_C_BndEvt__BP_OnlineChallengesComponent_K2Node_ComponentBoundEvent_0_GetUserSeasonChallengeProgressDelegate__DelegateSignature, Response) == 0x000058, "Member 'BP_ChallengeManager_C_BndEvt__BP_OnlineChallengesComponent_K2Node_ComponentBoundEvent_0_GetUserSeasonChallengeProgressDelegate__DelegateSignature::Response' has a wrong offset!");

// Function BP_ChallengeManager.BP_ChallengeManager_C.BndEvt__BP_OnlineChallengesComponent_K2Node_ComponentBoundEvent_4_ClaimUserChallengeDelegate__DelegateSignature
// 0x00C8 (0x00C8 - 0x0000)
struct BP_ChallengeManager_C_BndEvt__BP_OnlineChallengesComponent_K2Node_ComponentBoundEvent_4_ClaimUserChallengeDelegate__DelegateSignature final
{
public:
	struct FCloudRequestResult                    RequestResult;                                     // 0x0000(0x0058)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
	struct FCloudChallengeClaimResult             ClaimResult;                                       // 0x0058(0x0070)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
};
static_assert(alignof(BP_ChallengeManager_C_BndEvt__BP_OnlineChallengesComponent_K2Node_ComponentBoundEvent_4_ClaimUserChallengeDelegate__DelegateSignature) == 0x000008, "Wrong alignment on BP_ChallengeManager_C_BndEvt__BP_OnlineChallengesComponent_K2Node_ComponentBoundEvent_4_ClaimUserChallengeDelegate__DelegateSignature");
static_assert(sizeof(BP_ChallengeManager_C_BndEvt__BP_OnlineChallengesComponent_K2Node_ComponentBoundEvent_4_ClaimUserChallengeDelegate__DelegateSignature) == 0x0000C8, "Wrong size on BP_ChallengeManager_C_BndEvt__BP_OnlineChallengesComponent_K2Node_ComponentBoundEvent_4_ClaimUserChallengeDelegate__DelegateSignature");
static_assert(offsetof(BP_ChallengeManager_C_BndEvt__BP_OnlineChallengesComponent_K2Node_ComponentBoundEvent_4_ClaimUserChallengeDelegate__DelegateSignature, RequestResult) == 0x000000, "Member 'BP_ChallengeManager_C_BndEvt__BP_OnlineChallengesComponent_K2Node_ComponentBoundEvent_4_ClaimUserChallengeDelegate__DelegateSignature::RequestResult' has a wrong offset!");
static_assert(offsetof(BP_ChallengeManager_C_BndEvt__BP_OnlineChallengesComponent_K2Node_ComponentBoundEvent_4_ClaimUserChallengeDelegate__DelegateSignature, ClaimResult) == 0x000058, "Member 'BP_ChallengeManager_C_BndEvt__BP_OnlineChallengesComponent_K2Node_ComponentBoundEvent_4_ClaimUserChallengeDelegate__DelegateSignature::ClaimResult' has a wrong offset!");

// Function BP_ChallengeManager.BP_ChallengeManager_C.BndEvt__BP_OnlineChallengesComponent_K2Node_ComponentBoundEvent_3_SetUserChallengeProgressDelegate__DelegateSignature
// 0x00A8 (0x00A8 - 0x0000)
struct BP_ChallengeManager_C_BndEvt__BP_OnlineChallengesComponent_K2Node_ComponentBoundEvent_3_SetUserChallengeProgressDelegate__DelegateSignature final
{
public:
	struct FCloudRequestResult                    RequestResult;                                     // 0x0000(0x0058)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
	struct FCloudChallengeSlotInfo                ProgressResult;                                    // 0x0058(0x0050)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
};
static_assert(alignof(BP_ChallengeManager_C_BndEvt__BP_OnlineChallengesComponent_K2Node_ComponentBoundEvent_3_SetUserChallengeProgressDelegate__DelegateSignature) == 0x000008, "Wrong alignment on BP_ChallengeManager_C_BndEvt__BP_OnlineChallengesComponent_K2Node_ComponentBoundEvent_3_SetUserChallengeProgressDelegate__DelegateSignature");
static_assert(sizeof(BP_ChallengeManager_C_BndEvt__BP_OnlineChallengesComponent_K2Node_ComponentBoundEvent_3_SetUserChallengeProgressDelegate__DelegateSignature) == 0x0000A8, "Wrong size on BP_ChallengeManager_C_BndEvt__BP_OnlineChallengesComponent_K2Node_ComponentBoundEvent_3_SetUserChallengeProgressDelegate__DelegateSignature");
static_assert(offsetof(BP_ChallengeManager_C_BndEvt__BP_OnlineChallengesComponent_K2Node_ComponentBoundEvent_3_SetUserChallengeProgressDelegate__DelegateSignature, RequestResult) == 0x000000, "Member 'BP_ChallengeManager_C_BndEvt__BP_OnlineChallengesComponent_K2Node_ComponentBoundEvent_3_SetUserChallengeProgressDelegate__DelegateSignature::RequestResult' has a wrong offset!");
static_assert(offsetof(BP_ChallengeManager_C_BndEvt__BP_OnlineChallengesComponent_K2Node_ComponentBoundEvent_3_SetUserChallengeProgressDelegate__DelegateSignature, ProgressResult) == 0x000058, "Member 'BP_ChallengeManager_C_BndEvt__BP_OnlineChallengesComponent_K2Node_ComponentBoundEvent_3_SetUserChallengeProgressDelegate__DelegateSignature::ProgressResult' has a wrong offset!");

// Function BP_ChallengeManager.BP_ChallengeManager_C.BndEvt__BP_OnlineChallengesComponent_K2Node_ComponentBoundEvent_4_ReRollUserChallengeDelegate__DelegateSignature
// 0x00C8 (0x00C8 - 0x0000)
struct BP_ChallengeManager_C_BndEvt__BP_OnlineChallengesComponent_K2Node_ComponentBoundEvent_4_ReRollUserChallengeDelegate__DelegateSignature final
{
public:
	struct FCloudRequestResult                    RequestResult;                                     // 0x0000(0x0058)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
	struct FCloudChallengeClaimResult             Response;                                          // 0x0058(0x0070)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
};
static_assert(alignof(BP_ChallengeManager_C_BndEvt__BP_OnlineChallengesComponent_K2Node_ComponentBoundEvent_4_ReRollUserChallengeDelegate__DelegateSignature) == 0x000008, "Wrong alignment on BP_ChallengeManager_C_BndEvt__BP_OnlineChallengesComponent_K2Node_ComponentBoundEvent_4_ReRollUserChallengeDelegate__DelegateSignature");
static_assert(sizeof(BP_ChallengeManager_C_BndEvt__BP_OnlineChallengesComponent_K2Node_ComponentBoundEvent_4_ReRollUserChallengeDelegate__DelegateSignature) == 0x0000C8, "Wrong size on BP_ChallengeManager_C_BndEvt__BP_OnlineChallengesComponent_K2Node_ComponentBoundEvent_4_ReRollUserChallengeDelegate__DelegateSignature");
static_assert(offsetof(BP_ChallengeManager_C_BndEvt__BP_OnlineChallengesComponent_K2Node_ComponentBoundEvent_4_ReRollUserChallengeDelegate__DelegateSignature, RequestResult) == 0x000000, "Member 'BP_ChallengeManager_C_BndEvt__BP_OnlineChallengesComponent_K2Node_ComponentBoundEvent_4_ReRollUserChallengeDelegate__DelegateSignature::RequestResult' has a wrong offset!");
static_assert(offsetof(BP_ChallengeManager_C_BndEvt__BP_OnlineChallengesComponent_K2Node_ComponentBoundEvent_4_ReRollUserChallengeDelegate__DelegateSignature, Response) == 0x000058, "Member 'BP_ChallengeManager_C_BndEvt__BP_OnlineChallengesComponent_K2Node_ComponentBoundEvent_4_ReRollUserChallengeDelegate__DelegateSignature::Response' has a wrong offset!");

// Function BP_ChallengeManager.BP_ChallengeManager_C.BndEvt__BP_OnlineChallengesComponent_K2Node_ComponentBoundEvent_2_GetUserChallengeSlotsDelegate__DelegateSignature
// 0x00B0 (0x00B0 - 0x0000)
struct BP_ChallengeManager_C_BndEvt__BP_OnlineChallengesComponent_K2Node_ComponentBoundEvent_2_GetUserChallengeSlotsDelegate__DelegateSignature final
{
public:
	struct FCloudRequestResult                    RequestResult;                                     // 0x0000(0x0058)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
	struct FCloudGetChallengeResponse             Response;                                          // 0x0058(0x0058)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
};
static_assert(alignof(BP_ChallengeManager_C_BndEvt__BP_OnlineChallengesComponent_K2Node_ComponentBoundEvent_2_GetUserChallengeSlotsDelegate__DelegateSignature) == 0x000008, "Wrong alignment on BP_ChallengeManager_C_BndEvt__BP_OnlineChallengesComponent_K2Node_ComponentBoundEvent_2_GetUserChallengeSlotsDelegate__DelegateSignature");
static_assert(sizeof(BP_ChallengeManager_C_BndEvt__BP_OnlineChallengesComponent_K2Node_ComponentBoundEvent_2_GetUserChallengeSlotsDelegate__DelegateSignature) == 0x0000B0, "Wrong size on BP_ChallengeManager_C_BndEvt__BP_OnlineChallengesComponent_K2Node_ComponentBoundEvent_2_GetUserChallengeSlotsDelegate__DelegateSignature");
static_assert(offsetof(BP_ChallengeManager_C_BndEvt__BP_OnlineChallengesComponent_K2Node_ComponentBoundEvent_2_GetUserChallengeSlotsDelegate__DelegateSignature, RequestResult) == 0x000000, "Member 'BP_ChallengeManager_C_BndEvt__BP_OnlineChallengesComponent_K2Node_ComponentBoundEvent_2_GetUserChallengeSlotsDelegate__DelegateSignature::RequestResult' has a wrong offset!");
static_assert(offsetof(BP_ChallengeManager_C_BndEvt__BP_OnlineChallengesComponent_K2Node_ComponentBoundEvent_2_GetUserChallengeSlotsDelegate__DelegateSignature, Response) == 0x000058, "Member 'BP_ChallengeManager_C_BndEvt__BP_OnlineChallengesComponent_K2Node_ComponentBoundEvent_2_GetUserChallengeSlotsDelegate__DelegateSignature::Response' has a wrong offset!");

// Function BP_ChallengeManager.BP_ChallengeManager_C.ReceiveEndPlay
// 0x0001 (0x0001 - 0x0000)
struct BP_ChallengeManager_C_ReceiveEndPlay final
{
public:
	EEndPlayReason                                EndPlayReason;                                     // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_ChallengeManager_C_ReceiveEndPlay) == 0x000001, "Wrong alignment on BP_ChallengeManager_C_ReceiveEndPlay");
static_assert(sizeof(BP_ChallengeManager_C_ReceiveEndPlay) == 0x000001, "Wrong size on BP_ChallengeManager_C_ReceiveEndPlay");
static_assert(offsetof(BP_ChallengeManager_C_ReceiveEndPlay, EndPlayReason) == 0x000000, "Member 'BP_ChallengeManager_C_ReceiveEndPlay::EndPlayReason' has a wrong offset!");

// Function BP_ChallengeManager.BP_ChallengeManager_C.Wait for Cloud ID
// 0x0010 (0x0010 - 0x0000)
struct BP_ChallengeManager_C_Wait_for_Cloud_ID final
{
public:
	class FString                                 Userid;                                            // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_ChallengeManager_C_Wait_for_Cloud_ID) == 0x000008, "Wrong alignment on BP_ChallengeManager_C_Wait_for_Cloud_ID");
static_assert(sizeof(BP_ChallengeManager_C_Wait_for_Cloud_ID) == 0x000010, "Wrong size on BP_ChallengeManager_C_Wait_for_Cloud_ID");
static_assert(offsetof(BP_ChallengeManager_C_Wait_for_Cloud_ID, Userid) == 0x000000, "Member 'BP_ChallengeManager_C_Wait_for_Cloud_ID::Userid' has a wrong offset!");

// Function BP_ChallengeManager.BP_ChallengeManager_C.Slot Initialized
// 0x0008 (0x0008 - 0x0000)
struct BP_ChallengeManager_C_Slot_Initialized final
{
public:
	class ABP_ChallengeSlot_C*                    Slot;                                              // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_ChallengeManager_C_Slot_Initialized) == 0x000008, "Wrong alignment on BP_ChallengeManager_C_Slot_Initialized");
static_assert(sizeof(BP_ChallengeManager_C_Slot_Initialized) == 0x000008, "Wrong size on BP_ChallengeManager_C_Slot_Initialized");
static_assert(offsetof(BP_ChallengeManager_C_Slot_Initialized, Slot) == 0x000000, "Member 'BP_ChallengeManager_C_Slot_Initialized::Slot' has a wrong offset!");

// Function BP_ChallengeManager.BP_ChallengeManager_C.Wait for Data Tables
// 0x0002 (0x0002 - 0x0000)
struct BP_ChallengeManager_C_Wait_for_Data_Tables final
{
public:
	EDataProviderState                            OldState;                                          // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EDataProviderState                            NewState;                                          // 0x0001(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_ChallengeManager_C_Wait_for_Data_Tables) == 0x000001, "Wrong alignment on BP_ChallengeManager_C_Wait_for_Data_Tables");
static_assert(sizeof(BP_ChallengeManager_C_Wait_for_Data_Tables) == 0x000002, "Wrong size on BP_ChallengeManager_C_Wait_for_Data_Tables");
static_assert(offsetof(BP_ChallengeManager_C_Wait_for_Data_Tables, OldState) == 0x000000, "Member 'BP_ChallengeManager_C_Wait_for_Data_Tables::OldState' has a wrong offset!");
static_assert(offsetof(BP_ChallengeManager_C_Wait_for_Data_Tables, NewState) == 0x000001, "Member 'BP_ChallengeManager_C_Wait_for_Data_Tables::NewState' has a wrong offset!");

// Function BP_ChallengeManager.BP_ChallengeManager_C.OnLoaded_B08996E843B69641864BC48B08A89CC2
// 0x0008 (0x0008 - 0x0000)
struct BP_ChallengeManager_C_OnLoaded_B08996E843B69641864BC48B08A89CC2 final
{
public:
	TSubclassOf<class UObject>                    Loaded;                                            // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash)
};
static_assert(alignof(BP_ChallengeManager_C_OnLoaded_B08996E843B69641864BC48B08A89CC2) == 0x000008, "Wrong alignment on BP_ChallengeManager_C_OnLoaded_B08996E843B69641864BC48B08A89CC2");
static_assert(sizeof(BP_ChallengeManager_C_OnLoaded_B08996E843B69641864BC48B08A89CC2) == 0x000008, "Wrong size on BP_ChallengeManager_C_OnLoaded_B08996E843B69641864BC48B08A89CC2");
static_assert(offsetof(BP_ChallengeManager_C_OnLoaded_B08996E843B69641864BC48B08A89CC2, Loaded) == 0x000000, "Member 'BP_ChallengeManager_C_OnLoaded_B08996E843B69641864BC48B08A89CC2::Loaded' has a wrong offset!");

// Function BP_ChallengeManager.BP_ChallengeManager_C.Check Prerequisite
// 0x0058 (0x0058 - 0x0000)
struct BP_ChallengeManager_C_Check_Prerequisite final
{
public:
	struct FChallengePrerequisiteInfo             Prerequisite;                                      // 0x0000(0x0040)(BlueprintVisible, BlueprintReadOnly, Parm)
	bool                                          Passed;                                            // 0x0040(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_41[0x7];                                       // 0x0041(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AChallengePrerequisite*                 CallFunc_Map_Find_Value;                           // 0x0048(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Map_Find_ReturnValue;                     // 0x0050(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsPrerequisiteMet_ReturnValue;            // 0x0051(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_ChallengeManager_C_Check_Prerequisite) == 0x000008, "Wrong alignment on BP_ChallengeManager_C_Check_Prerequisite");
static_assert(sizeof(BP_ChallengeManager_C_Check_Prerequisite) == 0x000058, "Wrong size on BP_ChallengeManager_C_Check_Prerequisite");
static_assert(offsetof(BP_ChallengeManager_C_Check_Prerequisite, Prerequisite) == 0x000000, "Member 'BP_ChallengeManager_C_Check_Prerequisite::Prerequisite' has a wrong offset!");
static_assert(offsetof(BP_ChallengeManager_C_Check_Prerequisite, Passed) == 0x000040, "Member 'BP_ChallengeManager_C_Check_Prerequisite::Passed' has a wrong offset!");
static_assert(offsetof(BP_ChallengeManager_C_Check_Prerequisite, CallFunc_Map_Find_Value) == 0x000048, "Member 'BP_ChallengeManager_C_Check_Prerequisite::CallFunc_Map_Find_Value' has a wrong offset!");
static_assert(offsetof(BP_ChallengeManager_C_Check_Prerequisite, CallFunc_Map_Find_ReturnValue) == 0x000050, "Member 'BP_ChallengeManager_C_Check_Prerequisite::CallFunc_Map_Find_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_ChallengeManager_C_Check_Prerequisite, CallFunc_IsPrerequisiteMet_ReturnValue) == 0x000051, "Member 'BP_ChallengeManager_C_Check_Prerequisite::CallFunc_IsPrerequisiteMet_ReturnValue' has a wrong offset!");

// Function BP_ChallengeManager.BP_ChallengeManager_C.Validate Challenge Name
// 0x0250 (0x0250 - 0x0000)
struct BP_ChallengeManager_C_Validate_Challenge_Name final
{
public:
	class FName                                   Input_Name;                                        // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   Output_Name;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Input_Was_Valid;                                   // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Input_Enabled;                                     // 0x0011(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Input_Condition_Valid;                             // 0x0012(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Is_Condition_Valid;                                // 0x0013(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Is_Enabled;                                        // 0x0014(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_15[0x3];                                       // 0x0015(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   Fallback_Challenge_Name;                           // 0x0018(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_NotEqual_NameName_ReturnValue;            // 0x0020(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_21[0x7];                                       // 0x0021(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UDataTable*                             CallFunc_DataProviderFindTableByAssetTable_ReturnValue; // 0x0028(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanAND_ReturnValue;                   // 0x0030(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_31[0x7];                                       // 0x0031(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UDataTable*                             CallFunc_DataProviderFindTableByAssetTable_ReturnValue_1; // 0x0038(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FChallengeList                         CallFunc_GetDataTableRowFromName_OutRow;           // 0x0040(0x0100)()
	bool                                          CallFunc_GetDataTableRowFromName_ReturnValue;      // 0x0140(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_NotEqual_NameName_ReturnValue_1;          // 0x0141(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValidSoftClassReference_ReturnValue;    // 0x0142(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_143[0x5];                                      // 0x0143(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	struct FChallengeList                         CallFunc_GetDataTableRowFromName_OutRow_1;         // 0x0148(0x0100)()
	bool                                          CallFunc_GetDataTableRowFromName_ReturnValue_1;    // 0x0248(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValidSoftClassReference_ReturnValue_1;  // 0x0249(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanAND_ReturnValue_1;                 // 0x024A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_ChallengeManager_C_Validate_Challenge_Name) == 0x000008, "Wrong alignment on BP_ChallengeManager_C_Validate_Challenge_Name");
static_assert(sizeof(BP_ChallengeManager_C_Validate_Challenge_Name) == 0x000250, "Wrong size on BP_ChallengeManager_C_Validate_Challenge_Name");
static_assert(offsetof(BP_ChallengeManager_C_Validate_Challenge_Name, Input_Name) == 0x000000, "Member 'BP_ChallengeManager_C_Validate_Challenge_Name::Input_Name' has a wrong offset!");
static_assert(offsetof(BP_ChallengeManager_C_Validate_Challenge_Name, Output_Name) == 0x000008, "Member 'BP_ChallengeManager_C_Validate_Challenge_Name::Output_Name' has a wrong offset!");
static_assert(offsetof(BP_ChallengeManager_C_Validate_Challenge_Name, Input_Was_Valid) == 0x000010, "Member 'BP_ChallengeManager_C_Validate_Challenge_Name::Input_Was_Valid' has a wrong offset!");
static_assert(offsetof(BP_ChallengeManager_C_Validate_Challenge_Name, Input_Enabled) == 0x000011, "Member 'BP_ChallengeManager_C_Validate_Challenge_Name::Input_Enabled' has a wrong offset!");
static_assert(offsetof(BP_ChallengeManager_C_Validate_Challenge_Name, Input_Condition_Valid) == 0x000012, "Member 'BP_ChallengeManager_C_Validate_Challenge_Name::Input_Condition_Valid' has a wrong offset!");
static_assert(offsetof(BP_ChallengeManager_C_Validate_Challenge_Name, Is_Condition_Valid) == 0x000013, "Member 'BP_ChallengeManager_C_Validate_Challenge_Name::Is_Condition_Valid' has a wrong offset!");
static_assert(offsetof(BP_ChallengeManager_C_Validate_Challenge_Name, Is_Enabled) == 0x000014, "Member 'BP_ChallengeManager_C_Validate_Challenge_Name::Is_Enabled' has a wrong offset!");
static_assert(offsetof(BP_ChallengeManager_C_Validate_Challenge_Name, Fallback_Challenge_Name) == 0x000018, "Member 'BP_ChallengeManager_C_Validate_Challenge_Name::Fallback_Challenge_Name' has a wrong offset!");
static_assert(offsetof(BP_ChallengeManager_C_Validate_Challenge_Name, CallFunc_NotEqual_NameName_ReturnValue) == 0x000020, "Member 'BP_ChallengeManager_C_Validate_Challenge_Name::CallFunc_NotEqual_NameName_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_ChallengeManager_C_Validate_Challenge_Name, CallFunc_DataProviderFindTableByAssetTable_ReturnValue) == 0x000028, "Member 'BP_ChallengeManager_C_Validate_Challenge_Name::CallFunc_DataProviderFindTableByAssetTable_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_ChallengeManager_C_Validate_Challenge_Name, CallFunc_BooleanAND_ReturnValue) == 0x000030, "Member 'BP_ChallengeManager_C_Validate_Challenge_Name::CallFunc_BooleanAND_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_ChallengeManager_C_Validate_Challenge_Name, CallFunc_DataProviderFindTableByAssetTable_ReturnValue_1) == 0x000038, "Member 'BP_ChallengeManager_C_Validate_Challenge_Name::CallFunc_DataProviderFindTableByAssetTable_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_ChallengeManager_C_Validate_Challenge_Name, CallFunc_GetDataTableRowFromName_OutRow) == 0x000040, "Member 'BP_ChallengeManager_C_Validate_Challenge_Name::CallFunc_GetDataTableRowFromName_OutRow' has a wrong offset!");
static_assert(offsetof(BP_ChallengeManager_C_Validate_Challenge_Name, CallFunc_GetDataTableRowFromName_ReturnValue) == 0x000140, "Member 'BP_ChallengeManager_C_Validate_Challenge_Name::CallFunc_GetDataTableRowFromName_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_ChallengeManager_C_Validate_Challenge_Name, CallFunc_NotEqual_NameName_ReturnValue_1) == 0x000141, "Member 'BP_ChallengeManager_C_Validate_Challenge_Name::CallFunc_NotEqual_NameName_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_ChallengeManager_C_Validate_Challenge_Name, CallFunc_IsValidSoftClassReference_ReturnValue) == 0x000142, "Member 'BP_ChallengeManager_C_Validate_Challenge_Name::CallFunc_IsValidSoftClassReference_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_ChallengeManager_C_Validate_Challenge_Name, CallFunc_GetDataTableRowFromName_OutRow_1) == 0x000148, "Member 'BP_ChallengeManager_C_Validate_Challenge_Name::CallFunc_GetDataTableRowFromName_OutRow_1' has a wrong offset!");
static_assert(offsetof(BP_ChallengeManager_C_Validate_Challenge_Name, CallFunc_GetDataTableRowFromName_ReturnValue_1) == 0x000248, "Member 'BP_ChallengeManager_C_Validate_Challenge_Name::CallFunc_GetDataTableRowFromName_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_ChallengeManager_C_Validate_Challenge_Name, CallFunc_IsValidSoftClassReference_ReturnValue_1) == 0x000249, "Member 'BP_ChallengeManager_C_Validate_Challenge_Name::CallFunc_IsValidSoftClassReference_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_ChallengeManager_C_Validate_Challenge_Name, CallFunc_BooleanAND_ReturnValue_1) == 0x00024A, "Member 'BP_ChallengeManager_C_Validate_Challenge_Name::CallFunc_BooleanAND_ReturnValue_1' has a wrong offset!");

// Function BP_ChallengeManager.BP_ChallengeManager_C.Initialize Slots
// 0x0078 (0x0078 - 0x0000)
struct BP_ChallengeManager_C_Initialize_Slots final
{
public:
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x0000(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Array_Index_Variable;                     // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable_1;                  // 0x000C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue_1;                 // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         CallFunc_MakeLiteralByte_ReturnValue;              // 0x0014(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_15[0x3];                                       // 0x0015(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FCloudChallengeSlotInfo>        K2Node_MakeArray_Array;                            // 0x0018(0x0010)(ReferenceParm)
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x0028(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_True_if_break_was_hit_Variable;          // 0x002C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x002D(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_2E[0x2];                                       // 0x002E(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	TDelegate<void(class ABP_ChallengeSlot_C* Slot)> K2Node_CreateDelegate_OutputDelegate;              // 0x0030(0x0010)(ZeroConstructor, NoDestructor)
	int32                                         Temp_int_Array_Index_Variable_1;                   // 0x0040(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_44[0x4];                                       // 0x0044(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class AChallengeSlot*                         CallFunc_Array_Get_Item;                           // 0x0048(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0050(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_51[0x7];                                       // 0x0051(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class ABP_ChallengeSlot_C*                    K2Node_DynamicCast_AsBP_Challenge_Slot;            // 0x0058(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0060(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_61[0x3];                                       // 0x0061(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Get_Slot_ID_Slot_ID;                      // 0x0064(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	E_ChallengeSlotState                          CallFunc_Get_Slot_State_Slot_State;                // 0x0068(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_ByteByte_ReturnValue;                // 0x0069(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_EqualEqual_IntInt_ReturnValue;            // 0x006A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_6B[0x1];                                       // 0x006B(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Array_Length_ReturnValue_1;               // 0x006C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue_1;                // 0x0070(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_ChallengeManager_C_Initialize_Slots) == 0x000008, "Wrong alignment on BP_ChallengeManager_C_Initialize_Slots");
static_assert(sizeof(BP_ChallengeManager_C_Initialize_Slots) == 0x000078, "Wrong size on BP_ChallengeManager_C_Initialize_Slots");
static_assert(offsetof(BP_ChallengeManager_C_Initialize_Slots, Temp_int_Loop_Counter_Variable) == 0x000000, "Member 'BP_ChallengeManager_C_Initialize_Slots::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(BP_ChallengeManager_C_Initialize_Slots, CallFunc_Add_IntInt_ReturnValue) == 0x000004, "Member 'BP_ChallengeManager_C_Initialize_Slots::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_ChallengeManager_C_Initialize_Slots, Temp_int_Array_Index_Variable) == 0x000008, "Member 'BP_ChallengeManager_C_Initialize_Slots::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(BP_ChallengeManager_C_Initialize_Slots, Temp_int_Loop_Counter_Variable_1) == 0x00000C, "Member 'BP_ChallengeManager_C_Initialize_Slots::Temp_int_Loop_Counter_Variable_1' has a wrong offset!");
static_assert(offsetof(BP_ChallengeManager_C_Initialize_Slots, CallFunc_Add_IntInt_ReturnValue_1) == 0x000010, "Member 'BP_ChallengeManager_C_Initialize_Slots::CallFunc_Add_IntInt_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_ChallengeManager_C_Initialize_Slots, CallFunc_MakeLiteralByte_ReturnValue) == 0x000014, "Member 'BP_ChallengeManager_C_Initialize_Slots::CallFunc_MakeLiteralByte_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_ChallengeManager_C_Initialize_Slots, K2Node_MakeArray_Array) == 0x000018, "Member 'BP_ChallengeManager_C_Initialize_Slots::K2Node_MakeArray_Array' has a wrong offset!");
static_assert(offsetof(BP_ChallengeManager_C_Initialize_Slots, CallFunc_Array_Length_ReturnValue) == 0x000028, "Member 'BP_ChallengeManager_C_Initialize_Slots::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_ChallengeManager_C_Initialize_Slots, Temp_bool_True_if_break_was_hit_Variable) == 0x00002C, "Member 'BP_ChallengeManager_C_Initialize_Slots::Temp_bool_True_if_break_was_hit_Variable' has a wrong offset!");
static_assert(offsetof(BP_ChallengeManager_C_Initialize_Slots, CallFunc_Less_IntInt_ReturnValue) == 0x00002D, "Member 'BP_ChallengeManager_C_Initialize_Slots::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_ChallengeManager_C_Initialize_Slots, K2Node_CreateDelegate_OutputDelegate) == 0x000030, "Member 'BP_ChallengeManager_C_Initialize_Slots::K2Node_CreateDelegate_OutputDelegate' has a wrong offset!");
static_assert(offsetof(BP_ChallengeManager_C_Initialize_Slots, Temp_int_Array_Index_Variable_1) == 0x000040, "Member 'BP_ChallengeManager_C_Initialize_Slots::Temp_int_Array_Index_Variable_1' has a wrong offset!");
static_assert(offsetof(BP_ChallengeManager_C_Initialize_Slots, CallFunc_Array_Get_Item) == 0x000048, "Member 'BP_ChallengeManager_C_Initialize_Slots::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(BP_ChallengeManager_C_Initialize_Slots, CallFunc_IsValid_ReturnValue) == 0x000050, "Member 'BP_ChallengeManager_C_Initialize_Slots::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_ChallengeManager_C_Initialize_Slots, K2Node_DynamicCast_AsBP_Challenge_Slot) == 0x000058, "Member 'BP_ChallengeManager_C_Initialize_Slots::K2Node_DynamicCast_AsBP_Challenge_Slot' has a wrong offset!");
static_assert(offsetof(BP_ChallengeManager_C_Initialize_Slots, K2Node_DynamicCast_bSuccess) == 0x000060, "Member 'BP_ChallengeManager_C_Initialize_Slots::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(BP_ChallengeManager_C_Initialize_Slots, CallFunc_Get_Slot_ID_Slot_ID) == 0x000064, "Member 'BP_ChallengeManager_C_Initialize_Slots::CallFunc_Get_Slot_ID_Slot_ID' has a wrong offset!");
static_assert(offsetof(BP_ChallengeManager_C_Initialize_Slots, CallFunc_Get_Slot_State_Slot_State) == 0x000068, "Member 'BP_ChallengeManager_C_Initialize_Slots::CallFunc_Get_Slot_State_Slot_State' has a wrong offset!");
static_assert(offsetof(BP_ChallengeManager_C_Initialize_Slots, CallFunc_Less_ByteByte_ReturnValue) == 0x000069, "Member 'BP_ChallengeManager_C_Initialize_Slots::CallFunc_Less_ByteByte_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_ChallengeManager_C_Initialize_Slots, CallFunc_EqualEqual_IntInt_ReturnValue) == 0x00006A, "Member 'BP_ChallengeManager_C_Initialize_Slots::CallFunc_EqualEqual_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_ChallengeManager_C_Initialize_Slots, CallFunc_Array_Length_ReturnValue_1) == 0x00006C, "Member 'BP_ChallengeManager_C_Initialize_Slots::CallFunc_Array_Length_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_ChallengeManager_C_Initialize_Slots, CallFunc_Less_IntInt_ReturnValue_1) == 0x000070, "Member 'BP_ChallengeManager_C_Initialize_Slots::CallFunc_Less_IntInt_ReturnValue_1' has a wrong offset!");

// Function BP_ChallengeManager.BP_ChallengeManager_C.Is Story Challenge Active
// 0x0038 (0x0038 - 0x0000)
struct BP_ChallengeManager_C_Is_Story_Challenge_Active final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Temp_int_Array_Index_Variable;                     // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x000C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class AChallengeSlot*                         CallFunc_Array_Get_Item;                           // 0x0018(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x0020(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_21[0x7];                                       // 0x0021(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class ABP_ChallengeSlot_C*                    K2Node_DynamicCast_AsBP_Challenge_Slot;            // 0x0028(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0030(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	EChallengeCategory                            CallFunc_Get_Challenge_Category_Category;          // 0x0031(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue;          // 0x0032(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_ChallengeManager_C_Is_Story_Challenge_Active) == 0x000008, "Wrong alignment on BP_ChallengeManager_C_Is_Story_Challenge_Active");
static_assert(sizeof(BP_ChallengeManager_C_Is_Story_Challenge_Active) == 0x000038, "Wrong size on BP_ChallengeManager_C_Is_Story_Challenge_Active");
static_assert(offsetof(BP_ChallengeManager_C_Is_Story_Challenge_Active, ReturnValue) == 0x000000, "Member 'BP_ChallengeManager_C_Is_Story_Challenge_Active::ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_ChallengeManager_C_Is_Story_Challenge_Active, Temp_int_Array_Index_Variable) == 0x000004, "Member 'BP_ChallengeManager_C_Is_Story_Challenge_Active::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(BP_ChallengeManager_C_Is_Story_Challenge_Active, Temp_int_Loop_Counter_Variable) == 0x000008, "Member 'BP_ChallengeManager_C_Is_Story_Challenge_Active::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(BP_ChallengeManager_C_Is_Story_Challenge_Active, CallFunc_Add_IntInt_ReturnValue) == 0x00000C, "Member 'BP_ChallengeManager_C_Is_Story_Challenge_Active::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_ChallengeManager_C_Is_Story_Challenge_Active, CallFunc_Array_Length_ReturnValue) == 0x000010, "Member 'BP_ChallengeManager_C_Is_Story_Challenge_Active::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_ChallengeManager_C_Is_Story_Challenge_Active, CallFunc_Array_Get_Item) == 0x000018, "Member 'BP_ChallengeManager_C_Is_Story_Challenge_Active::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(BP_ChallengeManager_C_Is_Story_Challenge_Active, CallFunc_Less_IntInt_ReturnValue) == 0x000020, "Member 'BP_ChallengeManager_C_Is_Story_Challenge_Active::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_ChallengeManager_C_Is_Story_Challenge_Active, K2Node_DynamicCast_AsBP_Challenge_Slot) == 0x000028, "Member 'BP_ChallengeManager_C_Is_Story_Challenge_Active::K2Node_DynamicCast_AsBP_Challenge_Slot' has a wrong offset!");
static_assert(offsetof(BP_ChallengeManager_C_Is_Story_Challenge_Active, K2Node_DynamicCast_bSuccess) == 0x000030, "Member 'BP_ChallengeManager_C_Is_Story_Challenge_Active::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(BP_ChallengeManager_C_Is_Story_Challenge_Active, CallFunc_Get_Challenge_Category_Category) == 0x000031, "Member 'BP_ChallengeManager_C_Is_Story_Challenge_Active::CallFunc_Get_Challenge_Category_Category' has a wrong offset!");
static_assert(offsetof(BP_ChallengeManager_C_Is_Story_Challenge_Active, CallFunc_EqualEqual_ByteByte_ReturnValue) == 0x000032, "Member 'BP_ChallengeManager_C_Is_Story_Challenge_Active::CallFunc_EqualEqual_ByteByte_ReturnValue' has a wrong offset!");

// Function BP_ChallengeManager.BP_ChallengeManager_C.Is Any Slot Empty
// 0x0038 (0x0038 - 0x0000)
struct BP_ChallengeManager_C_Is_Any_Slot_Empty final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Temp_int_Array_Index_Variable;                     // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x000C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class AChallengeSlot*                         CallFunc_Array_Get_Item;                           // 0x0018(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x0020(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_21[0x7];                                       // 0x0021(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class ABP_ChallengeSlot_C*                    K2Node_DynamicCast_AsBP_Challenge_Slot;            // 0x0028(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0030(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	E_ChallengeSlotState                          CallFunc_Get_Slot_State_Slot_State;                // 0x0031(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue;          // 0x0032(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_ChallengeManager_C_Is_Any_Slot_Empty) == 0x000008, "Wrong alignment on BP_ChallengeManager_C_Is_Any_Slot_Empty");
static_assert(sizeof(BP_ChallengeManager_C_Is_Any_Slot_Empty) == 0x000038, "Wrong size on BP_ChallengeManager_C_Is_Any_Slot_Empty");
static_assert(offsetof(BP_ChallengeManager_C_Is_Any_Slot_Empty, ReturnValue) == 0x000000, "Member 'BP_ChallengeManager_C_Is_Any_Slot_Empty::ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_ChallengeManager_C_Is_Any_Slot_Empty, Temp_int_Array_Index_Variable) == 0x000004, "Member 'BP_ChallengeManager_C_Is_Any_Slot_Empty::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(BP_ChallengeManager_C_Is_Any_Slot_Empty, Temp_int_Loop_Counter_Variable) == 0x000008, "Member 'BP_ChallengeManager_C_Is_Any_Slot_Empty::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(BP_ChallengeManager_C_Is_Any_Slot_Empty, CallFunc_Add_IntInt_ReturnValue) == 0x00000C, "Member 'BP_ChallengeManager_C_Is_Any_Slot_Empty::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_ChallengeManager_C_Is_Any_Slot_Empty, CallFunc_Array_Length_ReturnValue) == 0x000010, "Member 'BP_ChallengeManager_C_Is_Any_Slot_Empty::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_ChallengeManager_C_Is_Any_Slot_Empty, CallFunc_Array_Get_Item) == 0x000018, "Member 'BP_ChallengeManager_C_Is_Any_Slot_Empty::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(BP_ChallengeManager_C_Is_Any_Slot_Empty, CallFunc_Less_IntInt_ReturnValue) == 0x000020, "Member 'BP_ChallengeManager_C_Is_Any_Slot_Empty::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_ChallengeManager_C_Is_Any_Slot_Empty, K2Node_DynamicCast_AsBP_Challenge_Slot) == 0x000028, "Member 'BP_ChallengeManager_C_Is_Any_Slot_Empty::K2Node_DynamicCast_AsBP_Challenge_Slot' has a wrong offset!");
static_assert(offsetof(BP_ChallengeManager_C_Is_Any_Slot_Empty, K2Node_DynamicCast_bSuccess) == 0x000030, "Member 'BP_ChallengeManager_C_Is_Any_Slot_Empty::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(BP_ChallengeManager_C_Is_Any_Slot_Empty, CallFunc_Get_Slot_State_Slot_State) == 0x000031, "Member 'BP_ChallengeManager_C_Is_Any_Slot_Empty::CallFunc_Get_Slot_State_Slot_State' has a wrong offset!");
static_assert(offsetof(BP_ChallengeManager_C_Is_Any_Slot_Empty, CallFunc_EqualEqual_ByteByte_ReturnValue) == 0x000032, "Member 'BP_ChallengeManager_C_Is_Any_Slot_Empty::CallFunc_EqualEqual_ByteByte_ReturnValue' has a wrong offset!");

// Function BP_ChallengeManager.BP_ChallengeManager_C.Validate Cloud Data
// 0x0168 (0x0168 - 0x0000)
struct BP_ChallengeManager_C_Validate_Cloud_Data final
{
public:
	class FName                                   Original_Challenge_Name;                           // 0x0000(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<class FName>                           Used_Valid_Challenge_Names;                        // 0x0008(0x0010)(Edit, BlueprintVisible)
	class FString                                 Temp_string_Variable;                              // 0x0018(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FString                                 Temp_string_Variable_1;                            // 0x0028(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	bool                                          Temp_bool_True_if_break_was_hit_Variable;          // 0x0038(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_39[0x3];                                       // 0x0039(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Temp_int_Array_Index_Variable;                     // 0x003C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x0040(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_44[0x4];                                       // 0x0044(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FCloudChallengeSlotInfo                CallFunc_Array_Get_Item;                           // 0x0048(0x0050)()
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x0098(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x009C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_9D[0x3];                                       // 0x009D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   CallFunc_Validate_Challenge_Name_Output_Name;      // 0x00A0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Validate_Challenge_Name_Input_Was_Valid;  // 0x00A8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Validate_Challenge_Name_Input_Enabled;    // 0x00A9(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Validate_Challenge_Name_Input_Condition_Valid; // 0x00AA(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_NotEqual_NameName_ReturnValue;            // 0x00AB(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x00AC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable;                                // 0x00B0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_B1[0x7];                                       // 0x00B1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 Temp_string_Variable_2;                            // 0x00B8(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FString                                 K2Node_Select_Default;                             // 0x00C8(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FString                                 Temp_string_Variable_3;                            // 0x00D8(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable_1;                              // 0x00E8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable_2;                              // 0x00E9(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_EA[0x6];                                       // 0x00EA(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 K2Node_Select_Default_1;                           // 0x00F0(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FString                                 CallFunc_Concat_StrStr_ReturnValue;                // 0x0100(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FString                                 Temp_string_Variable_4;                            // 0x0110(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Add_ReturnValue;                    // 0x0120(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Array_Contains_ReturnValue;               // 0x0124(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_125[0x3];                                      // 0x0125(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 Temp_string_Variable_5;                            // 0x0128(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanAND_ReturnValue;                   // 0x0138(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable_3;                              // 0x0139(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_13A[0x6];                                      // 0x013A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 K2Node_Select_Default_2;                           // 0x0140(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FString                                 CallFunc_Concat_StrStr_ReturnValue_1;              // 0x0150(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	bool                                          CallFunc_Send_Challenge_Replacement_Event_ReturnValue; // 0x0160(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_ChallengeManager_C_Validate_Cloud_Data) == 0x000008, "Wrong alignment on BP_ChallengeManager_C_Validate_Cloud_Data");
static_assert(sizeof(BP_ChallengeManager_C_Validate_Cloud_Data) == 0x000168, "Wrong size on BP_ChallengeManager_C_Validate_Cloud_Data");
static_assert(offsetof(BP_ChallengeManager_C_Validate_Cloud_Data, Original_Challenge_Name) == 0x000000, "Member 'BP_ChallengeManager_C_Validate_Cloud_Data::Original_Challenge_Name' has a wrong offset!");
static_assert(offsetof(BP_ChallengeManager_C_Validate_Cloud_Data, Used_Valid_Challenge_Names) == 0x000008, "Member 'BP_ChallengeManager_C_Validate_Cloud_Data::Used_Valid_Challenge_Names' has a wrong offset!");
static_assert(offsetof(BP_ChallengeManager_C_Validate_Cloud_Data, Temp_string_Variable) == 0x000018, "Member 'BP_ChallengeManager_C_Validate_Cloud_Data::Temp_string_Variable' has a wrong offset!");
static_assert(offsetof(BP_ChallengeManager_C_Validate_Cloud_Data, Temp_string_Variable_1) == 0x000028, "Member 'BP_ChallengeManager_C_Validate_Cloud_Data::Temp_string_Variable_1' has a wrong offset!");
static_assert(offsetof(BP_ChallengeManager_C_Validate_Cloud_Data, Temp_bool_True_if_break_was_hit_Variable) == 0x000038, "Member 'BP_ChallengeManager_C_Validate_Cloud_Data::Temp_bool_True_if_break_was_hit_Variable' has a wrong offset!");
static_assert(offsetof(BP_ChallengeManager_C_Validate_Cloud_Data, Temp_int_Array_Index_Variable) == 0x00003C, "Member 'BP_ChallengeManager_C_Validate_Cloud_Data::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(BP_ChallengeManager_C_Validate_Cloud_Data, Temp_int_Loop_Counter_Variable) == 0x000040, "Member 'BP_ChallengeManager_C_Validate_Cloud_Data::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(BP_ChallengeManager_C_Validate_Cloud_Data, CallFunc_Array_Get_Item) == 0x000048, "Member 'BP_ChallengeManager_C_Validate_Cloud_Data::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(BP_ChallengeManager_C_Validate_Cloud_Data, CallFunc_Array_Length_ReturnValue) == 0x000098, "Member 'BP_ChallengeManager_C_Validate_Cloud_Data::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_ChallengeManager_C_Validate_Cloud_Data, CallFunc_Less_IntInt_ReturnValue) == 0x00009C, "Member 'BP_ChallengeManager_C_Validate_Cloud_Data::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_ChallengeManager_C_Validate_Cloud_Data, CallFunc_Validate_Challenge_Name_Output_Name) == 0x0000A0, "Member 'BP_ChallengeManager_C_Validate_Cloud_Data::CallFunc_Validate_Challenge_Name_Output_Name' has a wrong offset!");
static_assert(offsetof(BP_ChallengeManager_C_Validate_Cloud_Data, CallFunc_Validate_Challenge_Name_Input_Was_Valid) == 0x0000A8, "Member 'BP_ChallengeManager_C_Validate_Cloud_Data::CallFunc_Validate_Challenge_Name_Input_Was_Valid' has a wrong offset!");
static_assert(offsetof(BP_ChallengeManager_C_Validate_Cloud_Data, CallFunc_Validate_Challenge_Name_Input_Enabled) == 0x0000A9, "Member 'BP_ChallengeManager_C_Validate_Cloud_Data::CallFunc_Validate_Challenge_Name_Input_Enabled' has a wrong offset!");
static_assert(offsetof(BP_ChallengeManager_C_Validate_Cloud_Data, CallFunc_Validate_Challenge_Name_Input_Condition_Valid) == 0x0000AA, "Member 'BP_ChallengeManager_C_Validate_Cloud_Data::CallFunc_Validate_Challenge_Name_Input_Condition_Valid' has a wrong offset!");
static_assert(offsetof(BP_ChallengeManager_C_Validate_Cloud_Data, CallFunc_NotEqual_NameName_ReturnValue) == 0x0000AB, "Member 'BP_ChallengeManager_C_Validate_Cloud_Data::CallFunc_NotEqual_NameName_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_ChallengeManager_C_Validate_Cloud_Data, CallFunc_Add_IntInt_ReturnValue) == 0x0000AC, "Member 'BP_ChallengeManager_C_Validate_Cloud_Data::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_ChallengeManager_C_Validate_Cloud_Data, Temp_bool_Variable) == 0x0000B0, "Member 'BP_ChallengeManager_C_Validate_Cloud_Data::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(BP_ChallengeManager_C_Validate_Cloud_Data, Temp_string_Variable_2) == 0x0000B8, "Member 'BP_ChallengeManager_C_Validate_Cloud_Data::Temp_string_Variable_2' has a wrong offset!");
static_assert(offsetof(BP_ChallengeManager_C_Validate_Cloud_Data, K2Node_Select_Default) == 0x0000C8, "Member 'BP_ChallengeManager_C_Validate_Cloud_Data::K2Node_Select_Default' has a wrong offset!");
static_assert(offsetof(BP_ChallengeManager_C_Validate_Cloud_Data, Temp_string_Variable_3) == 0x0000D8, "Member 'BP_ChallengeManager_C_Validate_Cloud_Data::Temp_string_Variable_3' has a wrong offset!");
static_assert(offsetof(BP_ChallengeManager_C_Validate_Cloud_Data, Temp_bool_Variable_1) == 0x0000E8, "Member 'BP_ChallengeManager_C_Validate_Cloud_Data::Temp_bool_Variable_1' has a wrong offset!");
static_assert(offsetof(BP_ChallengeManager_C_Validate_Cloud_Data, Temp_bool_Variable_2) == 0x0000E9, "Member 'BP_ChallengeManager_C_Validate_Cloud_Data::Temp_bool_Variable_2' has a wrong offset!");
static_assert(offsetof(BP_ChallengeManager_C_Validate_Cloud_Data, K2Node_Select_Default_1) == 0x0000F0, "Member 'BP_ChallengeManager_C_Validate_Cloud_Data::K2Node_Select_Default_1' has a wrong offset!");
static_assert(offsetof(BP_ChallengeManager_C_Validate_Cloud_Data, CallFunc_Concat_StrStr_ReturnValue) == 0x000100, "Member 'BP_ChallengeManager_C_Validate_Cloud_Data::CallFunc_Concat_StrStr_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_ChallengeManager_C_Validate_Cloud_Data, Temp_string_Variable_4) == 0x000110, "Member 'BP_ChallengeManager_C_Validate_Cloud_Data::Temp_string_Variable_4' has a wrong offset!");
static_assert(offsetof(BP_ChallengeManager_C_Validate_Cloud_Data, CallFunc_Array_Add_ReturnValue) == 0x000120, "Member 'BP_ChallengeManager_C_Validate_Cloud_Data::CallFunc_Array_Add_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_ChallengeManager_C_Validate_Cloud_Data, CallFunc_Array_Contains_ReturnValue) == 0x000124, "Member 'BP_ChallengeManager_C_Validate_Cloud_Data::CallFunc_Array_Contains_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_ChallengeManager_C_Validate_Cloud_Data, Temp_string_Variable_5) == 0x000128, "Member 'BP_ChallengeManager_C_Validate_Cloud_Data::Temp_string_Variable_5' has a wrong offset!");
static_assert(offsetof(BP_ChallengeManager_C_Validate_Cloud_Data, CallFunc_BooleanAND_ReturnValue) == 0x000138, "Member 'BP_ChallengeManager_C_Validate_Cloud_Data::CallFunc_BooleanAND_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_ChallengeManager_C_Validate_Cloud_Data, Temp_bool_Variable_3) == 0x000139, "Member 'BP_ChallengeManager_C_Validate_Cloud_Data::Temp_bool_Variable_3' has a wrong offset!");
static_assert(offsetof(BP_ChallengeManager_C_Validate_Cloud_Data, K2Node_Select_Default_2) == 0x000140, "Member 'BP_ChallengeManager_C_Validate_Cloud_Data::K2Node_Select_Default_2' has a wrong offset!");
static_assert(offsetof(BP_ChallengeManager_C_Validate_Cloud_Data, CallFunc_Concat_StrStr_ReturnValue_1) == 0x000150, "Member 'BP_ChallengeManager_C_Validate_Cloud_Data::CallFunc_Concat_StrStr_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_ChallengeManager_C_Validate_Cloud_Data, CallFunc_Send_Challenge_Replacement_Event_ReturnValue) == 0x000160, "Member 'BP_ChallengeManager_C_Validate_Cloud_Data::CallFunc_Send_Challenge_Replacement_Event_ReturnValue' has a wrong offset!");

// Function BP_ChallengeManager.BP_ChallengeManager_C.Update Slot Content
// 0x0348 (0x0348 - 0x0000)
struct BP_ChallengeManager_C_Update_Slot_Content final
{
public:
	TArray<struct FCloudChallengeSlotInfo>        NewLocalVar_2;                                     // 0x0000(0x0010)(Edit, BlueprintVisible)
	TArray<struct FCloudChallengeSlotInfo>        NewLocalVar_1;                                     // 0x0010(0x0010)(Edit, BlueprintVisible)
	EChallengeCategory                            Chosen_Challenge_Category;                         // 0x0020(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_21[0x7];                                       // 0x0021(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<EChallengeCategory>                    Categories_in_Slots;                               // 0x0028(0x0010)(Edit, BlueprintVisible)
	int32                                         Temp_int_Array_Index_Variable;                     // 0x0038(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_True_if_break_was_hit_Variable;          // 0x003C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_3D[0x3];                                       // 0x003D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UDataTable*                             CallFunc_DataProviderFindTableByAssetTable_ReturnValue; // 0x0040(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UDataTable*                             CallFunc_DataProviderFindTableByAssetTable_ReturnValue_1; // 0x0048(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_True_if_break_was_hit_Variable_1;        // 0x0050(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_51[0x7];                                       // 0x0051(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FCloudChallengeSlotInfo>        K2Node_MakeArray_Array;                            // 0x0058(0x0010)(ReferenceParm)
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x0068(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Not_PreBool_ReturnValue;                  // 0x006C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         CallFunc_MakeLiteralByte_ReturnValue;              // 0x006D(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_6E[0x2];                                       // 0x006E(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Temp_int_Array_Index_Variable_1;                   // 0x0070(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_74[0x4];                                       // 0x0074(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FCloudChallengeSlotInfo                CallFunc_Array_Get_Item;                           // 0x0078(0x0050)()
	struct FChallengeList                         CallFunc_GetDataTableRowFromName_OutRow;           // 0x00C8(0x0100)()
	bool                                          CallFunc_GetDataTableRowFromName_ReturnValue;      // 0x01C8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_NotEqual_NameName_ReturnValue;            // 0x01C9(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue;          // 0x01CA(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_1CB[0x1];                                      // 0x01CB(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x01CC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue_1;        // 0x01D0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue_2;        // 0x01D1(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_1D2[0x2];                                      // 0x01D2(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x01D4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanOR_ReturnValue;                    // 0x01D8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_1D9[0x3];                                      // 0x01D9(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_GetUserControllerId_ReturnValue;          // 0x01DC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AHumanPlayerController*                 CallFunc_GetHumanPlayerControllerByControllerId_ReturnValue; // 0x01E0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x01E8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	EGameScenario                                 CallFunc_GetGameScenario_ReturnValue;              // 0x01E9(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue_3;        // 0x01EA(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_1EB[0x1];                                      // 0x01EB(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Temp_int_Loop_Counter_Variable_1;                  // 0x01EC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   CallFunc_Choose_Daily_Challenge_Challenge_Name;    // 0x01F0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FChallengeList                         CallFunc_GetDataTableRowFromName_OutRow_1;         // 0x01F8(0x0100)()
	bool                                          CallFunc_GetDataTableRowFromName_ReturnValue_1;    // 0x02F8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_NotEqual_NameName_ReturnValue_1;          // 0x02F9(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x02FA(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanAND_ReturnValue;                   // 0x02FB(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	int32                                         CallFunc_Add_IntInt_ReturnValue_1;                 // 0x02FC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Is_Story_Challenge_Active_ReturnValue;    // 0x0300(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_301[0x3];                                      // 0x0301(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   CallFunc_Find_Next_Story_Challenge_Challenge_Name; // 0x0304(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_NameName_ReturnValue;          // 0x030C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_30D[0x3];                                      // 0x030D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class AChallengeSlot*                         CallFunc_Array_Get_Item_1;                         // 0x0310(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue_1;               // 0x0318(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue_1;                    // 0x031C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Less_IntInt_ReturnValue_1;                // 0x031D(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_31E[0x2];                                      // 0x031E(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	class ABP_ChallengeSlot_C*                    K2Node_DynamicCast_AsBP_Challenge_Slot;            // 0x0320(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0328(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	E_ChallengeSlotState                          CallFunc_Get_Slot_State_Slot_State;                // 0x0329(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_32A[0x2];                                      // 0x032A(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Get_Slot_ID_Slot_ID;                      // 0x032C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue_4;        // 0x0330(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Send_Bad_Challenge_Chosen_Event_ReturnValue; // 0x0331(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_332[0x2];                                      // 0x0332(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Assign_Challenge_ReturnValue;             // 0x0334(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Is_Slot_Past_Daily_Reset_ReturnValue;     // 0x0338(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_339[0x3];                                      // 0x0339(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Get_Slot_ID_Slot_ID_1;                    // 0x033C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanOR_ReturnValue_1;                  // 0x0340(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_341[0x3];                                      // 0x0341(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Assign_Challenge_ReturnValue_1;           // 0x0344(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_ChallengeManager_C_Update_Slot_Content) == 0x000008, "Wrong alignment on BP_ChallengeManager_C_Update_Slot_Content");
static_assert(sizeof(BP_ChallengeManager_C_Update_Slot_Content) == 0x000348, "Wrong size on BP_ChallengeManager_C_Update_Slot_Content");
static_assert(offsetof(BP_ChallengeManager_C_Update_Slot_Content, NewLocalVar_2) == 0x000000, "Member 'BP_ChallengeManager_C_Update_Slot_Content::NewLocalVar_2' has a wrong offset!");
static_assert(offsetof(BP_ChallengeManager_C_Update_Slot_Content, NewLocalVar_1) == 0x000010, "Member 'BP_ChallengeManager_C_Update_Slot_Content::NewLocalVar_1' has a wrong offset!");
static_assert(offsetof(BP_ChallengeManager_C_Update_Slot_Content, Chosen_Challenge_Category) == 0x000020, "Member 'BP_ChallengeManager_C_Update_Slot_Content::Chosen_Challenge_Category' has a wrong offset!");
static_assert(offsetof(BP_ChallengeManager_C_Update_Slot_Content, Categories_in_Slots) == 0x000028, "Member 'BP_ChallengeManager_C_Update_Slot_Content::Categories_in_Slots' has a wrong offset!");
static_assert(offsetof(BP_ChallengeManager_C_Update_Slot_Content, Temp_int_Array_Index_Variable) == 0x000038, "Member 'BP_ChallengeManager_C_Update_Slot_Content::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(BP_ChallengeManager_C_Update_Slot_Content, Temp_bool_True_if_break_was_hit_Variable) == 0x00003C, "Member 'BP_ChallengeManager_C_Update_Slot_Content::Temp_bool_True_if_break_was_hit_Variable' has a wrong offset!");
static_assert(offsetof(BP_ChallengeManager_C_Update_Slot_Content, CallFunc_DataProviderFindTableByAssetTable_ReturnValue) == 0x000040, "Member 'BP_ChallengeManager_C_Update_Slot_Content::CallFunc_DataProviderFindTableByAssetTable_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_ChallengeManager_C_Update_Slot_Content, CallFunc_DataProviderFindTableByAssetTable_ReturnValue_1) == 0x000048, "Member 'BP_ChallengeManager_C_Update_Slot_Content::CallFunc_DataProviderFindTableByAssetTable_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_ChallengeManager_C_Update_Slot_Content, Temp_bool_True_if_break_was_hit_Variable_1) == 0x000050, "Member 'BP_ChallengeManager_C_Update_Slot_Content::Temp_bool_True_if_break_was_hit_Variable_1' has a wrong offset!");
static_assert(offsetof(BP_ChallengeManager_C_Update_Slot_Content, K2Node_MakeArray_Array) == 0x000058, "Member 'BP_ChallengeManager_C_Update_Slot_Content::K2Node_MakeArray_Array' has a wrong offset!");
static_assert(offsetof(BP_ChallengeManager_C_Update_Slot_Content, CallFunc_Array_Length_ReturnValue) == 0x000068, "Member 'BP_ChallengeManager_C_Update_Slot_Content::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_ChallengeManager_C_Update_Slot_Content, CallFunc_Not_PreBool_ReturnValue) == 0x00006C, "Member 'BP_ChallengeManager_C_Update_Slot_Content::CallFunc_Not_PreBool_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_ChallengeManager_C_Update_Slot_Content, CallFunc_MakeLiteralByte_ReturnValue) == 0x00006D, "Member 'BP_ChallengeManager_C_Update_Slot_Content::CallFunc_MakeLiteralByte_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_ChallengeManager_C_Update_Slot_Content, Temp_int_Array_Index_Variable_1) == 0x000070, "Member 'BP_ChallengeManager_C_Update_Slot_Content::Temp_int_Array_Index_Variable_1' has a wrong offset!");
static_assert(offsetof(BP_ChallengeManager_C_Update_Slot_Content, CallFunc_Array_Get_Item) == 0x000078, "Member 'BP_ChallengeManager_C_Update_Slot_Content::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(BP_ChallengeManager_C_Update_Slot_Content, CallFunc_GetDataTableRowFromName_OutRow) == 0x0000C8, "Member 'BP_ChallengeManager_C_Update_Slot_Content::CallFunc_GetDataTableRowFromName_OutRow' has a wrong offset!");
static_assert(offsetof(BP_ChallengeManager_C_Update_Slot_Content, CallFunc_GetDataTableRowFromName_ReturnValue) == 0x0001C8, "Member 'BP_ChallengeManager_C_Update_Slot_Content::CallFunc_GetDataTableRowFromName_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_ChallengeManager_C_Update_Slot_Content, CallFunc_NotEqual_NameName_ReturnValue) == 0x0001C9, "Member 'BP_ChallengeManager_C_Update_Slot_Content::CallFunc_NotEqual_NameName_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_ChallengeManager_C_Update_Slot_Content, CallFunc_EqualEqual_ByteByte_ReturnValue) == 0x0001CA, "Member 'BP_ChallengeManager_C_Update_Slot_Content::CallFunc_EqualEqual_ByteByte_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_ChallengeManager_C_Update_Slot_Content, Temp_int_Loop_Counter_Variable) == 0x0001CC, "Member 'BP_ChallengeManager_C_Update_Slot_Content::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(BP_ChallengeManager_C_Update_Slot_Content, CallFunc_EqualEqual_ByteByte_ReturnValue_1) == 0x0001D0, "Member 'BP_ChallengeManager_C_Update_Slot_Content::CallFunc_EqualEqual_ByteByte_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_ChallengeManager_C_Update_Slot_Content, CallFunc_EqualEqual_ByteByte_ReturnValue_2) == 0x0001D1, "Member 'BP_ChallengeManager_C_Update_Slot_Content::CallFunc_EqualEqual_ByteByte_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BP_ChallengeManager_C_Update_Slot_Content, CallFunc_Add_IntInt_ReturnValue) == 0x0001D4, "Member 'BP_ChallengeManager_C_Update_Slot_Content::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_ChallengeManager_C_Update_Slot_Content, CallFunc_BooleanOR_ReturnValue) == 0x0001D8, "Member 'BP_ChallengeManager_C_Update_Slot_Content::CallFunc_BooleanOR_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_ChallengeManager_C_Update_Slot_Content, CallFunc_GetUserControllerId_ReturnValue) == 0x0001DC, "Member 'BP_ChallengeManager_C_Update_Slot_Content::CallFunc_GetUserControllerId_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_ChallengeManager_C_Update_Slot_Content, CallFunc_GetHumanPlayerControllerByControllerId_ReturnValue) == 0x0001E0, "Member 'BP_ChallengeManager_C_Update_Slot_Content::CallFunc_GetHumanPlayerControllerByControllerId_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_ChallengeManager_C_Update_Slot_Content, CallFunc_IsValid_ReturnValue) == 0x0001E8, "Member 'BP_ChallengeManager_C_Update_Slot_Content::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_ChallengeManager_C_Update_Slot_Content, CallFunc_GetGameScenario_ReturnValue) == 0x0001E9, "Member 'BP_ChallengeManager_C_Update_Slot_Content::CallFunc_GetGameScenario_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_ChallengeManager_C_Update_Slot_Content, CallFunc_EqualEqual_ByteByte_ReturnValue_3) == 0x0001EA, "Member 'BP_ChallengeManager_C_Update_Slot_Content::CallFunc_EqualEqual_ByteByte_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(BP_ChallengeManager_C_Update_Slot_Content, Temp_int_Loop_Counter_Variable_1) == 0x0001EC, "Member 'BP_ChallengeManager_C_Update_Slot_Content::Temp_int_Loop_Counter_Variable_1' has a wrong offset!");
static_assert(offsetof(BP_ChallengeManager_C_Update_Slot_Content, CallFunc_Choose_Daily_Challenge_Challenge_Name) == 0x0001F0, "Member 'BP_ChallengeManager_C_Update_Slot_Content::CallFunc_Choose_Daily_Challenge_Challenge_Name' has a wrong offset!");
static_assert(offsetof(BP_ChallengeManager_C_Update_Slot_Content, CallFunc_GetDataTableRowFromName_OutRow_1) == 0x0001F8, "Member 'BP_ChallengeManager_C_Update_Slot_Content::CallFunc_GetDataTableRowFromName_OutRow_1' has a wrong offset!");
static_assert(offsetof(BP_ChallengeManager_C_Update_Slot_Content, CallFunc_GetDataTableRowFromName_ReturnValue_1) == 0x0002F8, "Member 'BP_ChallengeManager_C_Update_Slot_Content::CallFunc_GetDataTableRowFromName_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_ChallengeManager_C_Update_Slot_Content, CallFunc_NotEqual_NameName_ReturnValue_1) == 0x0002F9, "Member 'BP_ChallengeManager_C_Update_Slot_Content::CallFunc_NotEqual_NameName_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_ChallengeManager_C_Update_Slot_Content, CallFunc_Less_IntInt_ReturnValue) == 0x0002FA, "Member 'BP_ChallengeManager_C_Update_Slot_Content::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_ChallengeManager_C_Update_Slot_Content, CallFunc_BooleanAND_ReturnValue) == 0x0002FB, "Member 'BP_ChallengeManager_C_Update_Slot_Content::CallFunc_BooleanAND_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_ChallengeManager_C_Update_Slot_Content, CallFunc_Add_IntInt_ReturnValue_1) == 0x0002FC, "Member 'BP_ChallengeManager_C_Update_Slot_Content::CallFunc_Add_IntInt_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_ChallengeManager_C_Update_Slot_Content, CallFunc_Is_Story_Challenge_Active_ReturnValue) == 0x000300, "Member 'BP_ChallengeManager_C_Update_Slot_Content::CallFunc_Is_Story_Challenge_Active_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_ChallengeManager_C_Update_Slot_Content, CallFunc_Find_Next_Story_Challenge_Challenge_Name) == 0x000304, "Member 'BP_ChallengeManager_C_Update_Slot_Content::CallFunc_Find_Next_Story_Challenge_Challenge_Name' has a wrong offset!");
static_assert(offsetof(BP_ChallengeManager_C_Update_Slot_Content, CallFunc_EqualEqual_NameName_ReturnValue) == 0x00030C, "Member 'BP_ChallengeManager_C_Update_Slot_Content::CallFunc_EqualEqual_NameName_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_ChallengeManager_C_Update_Slot_Content, CallFunc_Array_Get_Item_1) == 0x000310, "Member 'BP_ChallengeManager_C_Update_Slot_Content::CallFunc_Array_Get_Item_1' has a wrong offset!");
static_assert(offsetof(BP_ChallengeManager_C_Update_Slot_Content, CallFunc_Array_Length_ReturnValue_1) == 0x000318, "Member 'BP_ChallengeManager_C_Update_Slot_Content::CallFunc_Array_Length_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_ChallengeManager_C_Update_Slot_Content, CallFunc_IsValid_ReturnValue_1) == 0x00031C, "Member 'BP_ChallengeManager_C_Update_Slot_Content::CallFunc_IsValid_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_ChallengeManager_C_Update_Slot_Content, CallFunc_Less_IntInt_ReturnValue_1) == 0x00031D, "Member 'BP_ChallengeManager_C_Update_Slot_Content::CallFunc_Less_IntInt_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_ChallengeManager_C_Update_Slot_Content, K2Node_DynamicCast_AsBP_Challenge_Slot) == 0x000320, "Member 'BP_ChallengeManager_C_Update_Slot_Content::K2Node_DynamicCast_AsBP_Challenge_Slot' has a wrong offset!");
static_assert(offsetof(BP_ChallengeManager_C_Update_Slot_Content, K2Node_DynamicCast_bSuccess) == 0x000328, "Member 'BP_ChallengeManager_C_Update_Slot_Content::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(BP_ChallengeManager_C_Update_Slot_Content, CallFunc_Get_Slot_State_Slot_State) == 0x000329, "Member 'BP_ChallengeManager_C_Update_Slot_Content::CallFunc_Get_Slot_State_Slot_State' has a wrong offset!");
static_assert(offsetof(BP_ChallengeManager_C_Update_Slot_Content, CallFunc_Get_Slot_ID_Slot_ID) == 0x00032C, "Member 'BP_ChallengeManager_C_Update_Slot_Content::CallFunc_Get_Slot_ID_Slot_ID' has a wrong offset!");
static_assert(offsetof(BP_ChallengeManager_C_Update_Slot_Content, CallFunc_EqualEqual_ByteByte_ReturnValue_4) == 0x000330, "Member 'BP_ChallengeManager_C_Update_Slot_Content::CallFunc_EqualEqual_ByteByte_ReturnValue_4' has a wrong offset!");
static_assert(offsetof(BP_ChallengeManager_C_Update_Slot_Content, CallFunc_Send_Bad_Challenge_Chosen_Event_ReturnValue) == 0x000331, "Member 'BP_ChallengeManager_C_Update_Slot_Content::CallFunc_Send_Bad_Challenge_Chosen_Event_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_ChallengeManager_C_Update_Slot_Content, CallFunc_Assign_Challenge_ReturnValue) == 0x000334, "Member 'BP_ChallengeManager_C_Update_Slot_Content::CallFunc_Assign_Challenge_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_ChallengeManager_C_Update_Slot_Content, CallFunc_Is_Slot_Past_Daily_Reset_ReturnValue) == 0x000338, "Member 'BP_ChallengeManager_C_Update_Slot_Content::CallFunc_Is_Slot_Past_Daily_Reset_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_ChallengeManager_C_Update_Slot_Content, CallFunc_Get_Slot_ID_Slot_ID_1) == 0x00033C, "Member 'BP_ChallengeManager_C_Update_Slot_Content::CallFunc_Get_Slot_ID_Slot_ID_1' has a wrong offset!");
static_assert(offsetof(BP_ChallengeManager_C_Update_Slot_Content, CallFunc_BooleanOR_ReturnValue_1) == 0x000340, "Member 'BP_ChallengeManager_C_Update_Slot_Content::CallFunc_BooleanOR_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_ChallengeManager_C_Update_Slot_Content, CallFunc_Assign_Challenge_ReturnValue_1) == 0x000344, "Member 'BP_ChallengeManager_C_Update_Slot_Content::CallFunc_Assign_Challenge_ReturnValue_1' has a wrong offset!");

// Function BP_ChallengeManager.BP_ChallengeManager_C.Find Next Story Challenge
// 0x01B8 (0x01B8 - 0x0000)
struct BP_ChallengeManager_C_Find_Next_Story_Challenge final
{
public:
	class FName                                   Challenge_Name;                                    // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   Chosen_Challenge_Name;                             // 0x0008(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x0014(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_True_if_break_was_hit_Variable;          // 0x0018(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_19[0x3];                                       // 0x0019(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Temp_int_Array_Index_Variable;                     // 0x001C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UDataTable*                             CallFunc_DataProviderFindTableByAssetTable_ReturnValue; // 0x0020(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UDataTable*                             CallFunc_DataProviderFindTableByAssetTable_ReturnValue_1; // 0x0028(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_True_if_break_was_hit_Variable_1;        // 0x0030(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_31[0x7];                                       // 0x0031(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class FName>                           CallFunc_GetDataTableRowNames_OutRowNames;         // 0x0038(0x0010)(ReferenceParm)
	class FName                                   CallFunc_Array_Get_Item;                           // 0x0048(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x0050(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_54[0x4];                                       // 0x0054(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FChallengeList                         CallFunc_GetDataTableRowFromName_OutRow;           // 0x0058(0x0100)()
	bool                                          CallFunc_GetDataTableRowFromName_ReturnValue;      // 0x0158(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x0159(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_15A[0x2];                                      // 0x015A(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Array_Length_ReturnValue_1;               // 0x015C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValidSoftClassReference_ReturnValue;    // 0x0160(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue;          // 0x0161(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanAND_ReturnValue;                   // 0x0162(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanAND_ReturnValue_1;                 // 0x0163(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	int32                                         Temp_int_Array_Index_Variable_1;                   // 0x0164(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FChallengePrerequisiteInfo             CallFunc_Array_Get_Item_1;                         // 0x0168(0x0040)()
	bool                                          CallFunc_Check_Prerequisite_Passed;                // 0x01A8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_1A9[0x3];                                      // 0x01A9(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Temp_int_Loop_Counter_Variable_1;                  // 0x01AC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Map_Contains_ReturnValue;                 // 0x01B0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Less_IntInt_ReturnValue_1;                // 0x01B1(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_1B2[0x2];                                      // 0x01B2(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Add_IntInt_ReturnValue_1;                 // 0x01B4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_ChallengeManager_C_Find_Next_Story_Challenge) == 0x000008, "Wrong alignment on BP_ChallengeManager_C_Find_Next_Story_Challenge");
static_assert(sizeof(BP_ChallengeManager_C_Find_Next_Story_Challenge) == 0x0001B8, "Wrong size on BP_ChallengeManager_C_Find_Next_Story_Challenge");
static_assert(offsetof(BP_ChallengeManager_C_Find_Next_Story_Challenge, Challenge_Name) == 0x000000, "Member 'BP_ChallengeManager_C_Find_Next_Story_Challenge::Challenge_Name' has a wrong offset!");
static_assert(offsetof(BP_ChallengeManager_C_Find_Next_Story_Challenge, Chosen_Challenge_Name) == 0x000008, "Member 'BP_ChallengeManager_C_Find_Next_Story_Challenge::Chosen_Challenge_Name' has a wrong offset!");
static_assert(offsetof(BP_ChallengeManager_C_Find_Next_Story_Challenge, Temp_int_Loop_Counter_Variable) == 0x000010, "Member 'BP_ChallengeManager_C_Find_Next_Story_Challenge::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(BP_ChallengeManager_C_Find_Next_Story_Challenge, CallFunc_Add_IntInt_ReturnValue) == 0x000014, "Member 'BP_ChallengeManager_C_Find_Next_Story_Challenge::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_ChallengeManager_C_Find_Next_Story_Challenge, Temp_bool_True_if_break_was_hit_Variable) == 0x000018, "Member 'BP_ChallengeManager_C_Find_Next_Story_Challenge::Temp_bool_True_if_break_was_hit_Variable' has a wrong offset!");
static_assert(offsetof(BP_ChallengeManager_C_Find_Next_Story_Challenge, Temp_int_Array_Index_Variable) == 0x00001C, "Member 'BP_ChallengeManager_C_Find_Next_Story_Challenge::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(BP_ChallengeManager_C_Find_Next_Story_Challenge, CallFunc_DataProviderFindTableByAssetTable_ReturnValue) == 0x000020, "Member 'BP_ChallengeManager_C_Find_Next_Story_Challenge::CallFunc_DataProviderFindTableByAssetTable_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_ChallengeManager_C_Find_Next_Story_Challenge, CallFunc_DataProviderFindTableByAssetTable_ReturnValue_1) == 0x000028, "Member 'BP_ChallengeManager_C_Find_Next_Story_Challenge::CallFunc_DataProviderFindTableByAssetTable_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_ChallengeManager_C_Find_Next_Story_Challenge, Temp_bool_True_if_break_was_hit_Variable_1) == 0x000030, "Member 'BP_ChallengeManager_C_Find_Next_Story_Challenge::Temp_bool_True_if_break_was_hit_Variable_1' has a wrong offset!");
static_assert(offsetof(BP_ChallengeManager_C_Find_Next_Story_Challenge, CallFunc_GetDataTableRowNames_OutRowNames) == 0x000038, "Member 'BP_ChallengeManager_C_Find_Next_Story_Challenge::CallFunc_GetDataTableRowNames_OutRowNames' has a wrong offset!");
static_assert(offsetof(BP_ChallengeManager_C_Find_Next_Story_Challenge, CallFunc_Array_Get_Item) == 0x000048, "Member 'BP_ChallengeManager_C_Find_Next_Story_Challenge::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(BP_ChallengeManager_C_Find_Next_Story_Challenge, CallFunc_Array_Length_ReturnValue) == 0x000050, "Member 'BP_ChallengeManager_C_Find_Next_Story_Challenge::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_ChallengeManager_C_Find_Next_Story_Challenge, CallFunc_GetDataTableRowFromName_OutRow) == 0x000058, "Member 'BP_ChallengeManager_C_Find_Next_Story_Challenge::CallFunc_GetDataTableRowFromName_OutRow' has a wrong offset!");
static_assert(offsetof(BP_ChallengeManager_C_Find_Next_Story_Challenge, CallFunc_GetDataTableRowFromName_ReturnValue) == 0x000158, "Member 'BP_ChallengeManager_C_Find_Next_Story_Challenge::CallFunc_GetDataTableRowFromName_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_ChallengeManager_C_Find_Next_Story_Challenge, CallFunc_Less_IntInt_ReturnValue) == 0x000159, "Member 'BP_ChallengeManager_C_Find_Next_Story_Challenge::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_ChallengeManager_C_Find_Next_Story_Challenge, CallFunc_Array_Length_ReturnValue_1) == 0x00015C, "Member 'BP_ChallengeManager_C_Find_Next_Story_Challenge::CallFunc_Array_Length_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_ChallengeManager_C_Find_Next_Story_Challenge, CallFunc_IsValidSoftClassReference_ReturnValue) == 0x000160, "Member 'BP_ChallengeManager_C_Find_Next_Story_Challenge::CallFunc_IsValidSoftClassReference_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_ChallengeManager_C_Find_Next_Story_Challenge, CallFunc_EqualEqual_ByteByte_ReturnValue) == 0x000161, "Member 'BP_ChallengeManager_C_Find_Next_Story_Challenge::CallFunc_EqualEqual_ByteByte_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_ChallengeManager_C_Find_Next_Story_Challenge, CallFunc_BooleanAND_ReturnValue) == 0x000162, "Member 'BP_ChallengeManager_C_Find_Next_Story_Challenge::CallFunc_BooleanAND_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_ChallengeManager_C_Find_Next_Story_Challenge, CallFunc_BooleanAND_ReturnValue_1) == 0x000163, "Member 'BP_ChallengeManager_C_Find_Next_Story_Challenge::CallFunc_BooleanAND_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_ChallengeManager_C_Find_Next_Story_Challenge, Temp_int_Array_Index_Variable_1) == 0x000164, "Member 'BP_ChallengeManager_C_Find_Next_Story_Challenge::Temp_int_Array_Index_Variable_1' has a wrong offset!");
static_assert(offsetof(BP_ChallengeManager_C_Find_Next_Story_Challenge, CallFunc_Array_Get_Item_1) == 0x000168, "Member 'BP_ChallengeManager_C_Find_Next_Story_Challenge::CallFunc_Array_Get_Item_1' has a wrong offset!");
static_assert(offsetof(BP_ChallengeManager_C_Find_Next_Story_Challenge, CallFunc_Check_Prerequisite_Passed) == 0x0001A8, "Member 'BP_ChallengeManager_C_Find_Next_Story_Challenge::CallFunc_Check_Prerequisite_Passed' has a wrong offset!");
static_assert(offsetof(BP_ChallengeManager_C_Find_Next_Story_Challenge, Temp_int_Loop_Counter_Variable_1) == 0x0001AC, "Member 'BP_ChallengeManager_C_Find_Next_Story_Challenge::Temp_int_Loop_Counter_Variable_1' has a wrong offset!");
static_assert(offsetof(BP_ChallengeManager_C_Find_Next_Story_Challenge, CallFunc_Map_Contains_ReturnValue) == 0x0001B0, "Member 'BP_ChallengeManager_C_Find_Next_Story_Challenge::CallFunc_Map_Contains_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_ChallengeManager_C_Find_Next_Story_Challenge, CallFunc_Less_IntInt_ReturnValue_1) == 0x0001B1, "Member 'BP_ChallengeManager_C_Find_Next_Story_Challenge::CallFunc_Less_IntInt_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_ChallengeManager_C_Find_Next_Story_Challenge, CallFunc_Add_IntInt_ReturnValue_1) == 0x0001B4, "Member 'BP_ChallengeManager_C_Find_Next_Story_Challenge::CallFunc_Add_IntInt_ReturnValue_1' has a wrong offset!");

// Function BP_ChallengeManager.BP_ChallengeManager_C.Choose Daily Challenge
// 0x1BC0 (0x1BC0 - 0x0000)
struct BP_ChallengeManager_C_Choose_Daily_Challenge final
{
public:
	bool                                          Log_Progress;                                      // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   Challenge_Name;                                    // 0x0004(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   NewLocalVar_0;                                     // 0x000C(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<EChallengeCategory>                    Category_of_Currently_Assigned_Challenges;         // 0x0018(0x0010)(Edit, BlueprintVisible)
	TArray<EChallengeDifficulty>                  Difficulty_of_Currently_Assigned_Challenges;       // 0x0028(0x0010)(Edit, BlueprintVisible)
	class FName                                   Final_Result;                                      // 0x0038(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<class FName>                           Never_Finished_Candidates;                         // 0x0040(0x0010)(Edit, BlueprintVisible)
	bool                                          Logging;                                           // 0x0050(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_51[0x7];                                       // 0x0051(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class FString>                         Group_of_Currently_Assigned_Challenges;            // 0x0058(0x0010)(Edit, BlueprintVisible)
	TArray<EChallengeCategory>                    Candidate_Categories;                              // 0x0068(0x0010)(Edit, BlueprintVisible)
	int32                                         Oldest_Candidate_Index;                            // 0x0078(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   Oldest_Candidate;                                  // 0x007C(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_84[0x4];                                       // 0x0084(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class FName>                           Second_Round_Candidates;                           // 0x0088(0x0010)(Edit, BlueprintVisible)
	int32                                         Second_Round_Candidate_Count;                      // 0x0098(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_9C[0x4];                                       // 0x009C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FDateTime>                      Candidate_Array_Timestamps;                        // 0x00A0(0x0010)(Edit, BlueprintVisible)
	TSet<class FName>                             Ever_Finished_Challenges;                          // 0x00B0(0x0050)(Edit, BlueprintVisible)
	TSet<class FName>                             Candidates_Set;                                    // 0x0100(0x0050)(Edit, BlueprintVisible)
	struct FDateTime                              Oldest_Timestamp;                                  // 0x0150(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	EChallengeCategory                            Oldest_Category;                                   // 0x0158(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_159[0x7];                                      // 0x0159(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class FName>                           Candidate_Array;                                   // 0x0160(0x0010)(Edit, BlueprintVisible)
	TMap<EChallengeCategory, struct FDateTime>    Most_Recent_Challenge_Timestamp_by_Category;       // 0x0170(0x0050)(Edit, BlueprintVisible)
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x01C0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x01C4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Array_Index_Variable;                     // 0x01C8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable_1;                  // 0x01CC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue_1;                 // 0x01D0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1D4[0x4];                                      // 0x01D4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FCloudChallengeSlotInfo>        K2Node_MakeArray_Array;                            // 0x01D8(0x0010)(ReferenceParm)
	int32                                         Temp_int_Loop_Counter_Variable_2;                  // 0x01E8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x01EC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Subtract_IntInt_ReturnValue;              // 0x01F0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_GreaterEqual_IntInt_ReturnValue;          // 0x01F4(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_1F5[0x3];                                      // 0x01F5(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Temp_int_Array_Index_Variable_1;                   // 0x01F8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable_3;                  // 0x01FC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FCloudChallengeSlotInfo                CallFunc_Array_Get_Item;                           // 0x0200(0x0050)()
	int32                                         CallFunc_Add_IntInt_ReturnValue_2;                 // 0x0250(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_NotEqual_NameName_ReturnValue;            // 0x0254(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_255[0x3];                                      // 0x0255(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class ABP_ChallengeSlot_C*                    CallFunc_Find_Slot_by_ID_Slot;                     // 0x0258(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Find_Slot_by_ID_Success;                  // 0x0260(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_261[0x3];                                      // 0x0261(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Temp_int_Array_Index_Variable_2;                   // 0x0264(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable_4;                  // 0x0268(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Subtract_IntInt_ReturnValue_1;            // 0x026C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_GreaterEqual_IntInt_ReturnValue_1;        // 0x0270(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_271[0x3];                                      // 0x0271(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Temp_int_Array_Index_Variable_3;                   // 0x0274(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable_5;                  // 0x0278(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x027C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_27D[0x3];                                      // 0x027D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Add_IntInt_ReturnValue_3;                 // 0x0280(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable;                                // 0x0284(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_285[0x3];                                      // 0x0285(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Temp_int_Loop_Counter_Variable_6;                  // 0x0288(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue_4;                 // 0x028C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Not_PreBool_ReturnValue;                  // 0x0290(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_291[0x3];                                      // 0x0291(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Temp_int_Array_Index_Variable_4;                   // 0x0294(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<struct FCloudChallengeSlotInfo>        K2Node_MakeArray_Array_1;                          // 0x0298(0x0010)(ReferenceParm)
	int32                                         CallFunc_Array_Length_ReturnValue_1;               // 0x02A8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Array_Index_Variable_5;                   // 0x02AC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable_7;                  // 0x02B0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2B4[0x4];                                      // 0x02B4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FCloudChallengeSlotInfo                CallFunc_Array_Get_Item_1;                         // 0x02B8(0x0050)()
	int32                                         CallFunc_Add_IntInt_ReturnValue_5;                 // 0x0308(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_30C[0x4];                                      // 0x030C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class ABP_ChallengeSlot_C*                    CallFunc_Find_Slot_by_ID_Slot_1;                   // 0x0310(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Find_Slot_by_ID_Success_1;                // 0x0318(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_319[0x3];                                      // 0x0319(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Temp_int_Array_Index_Variable_6;                   // 0x031C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<struct FCloudChallengeSlotInfo>        K2Node_MakeArray_Array_2;                          // 0x0320(0x0010)(ReferenceParm)
	struct FCloudChallengeSlotInfo                CallFunc_Array_Get_Item_2;                         // 0x0330(0x0050)()
	int32                                         CallFunc_Array_Length_ReturnValue_2;               // 0x0380(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue_1;                // 0x0384(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_385[0x3];                                      // 0x0385(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 CallFunc_Conv_NameToString_ReturnValue;            // 0x0388(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FString                                 CallFunc_Concat_StrStr_ReturnValue;                // 0x0398(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class ABP_ChallengeSlot_C*                    CallFunc_Find_Slot_by_ID_Slot_2;                   // 0x03A8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Find_Slot_by_ID_Success_2;                // 0x03B0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_3B1[0x7];                                      // 0x03B1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 CallFunc_Concat_StrStr_ReturnValue_1;              // 0x03B8(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable_8;                  // 0x03C8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable_9;                  // 0x03CC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue_6;                 // 0x03D0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue_2;                // 0x03D4(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_3D5[0x3];                                      // 0x03D5(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Add_IntInt_ReturnValue_7;                 // 0x03D8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Array_Index_Variable_7;                   // 0x03DC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable_10;                 // 0x03E0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue_8;                 // 0x03E4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_True_if_break_was_hit_Variable;          // 0x03E8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_3E9[0x3];                                      // 0x03E9(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Temp_int_Array_Index_Variable_8;                   // 0x03EC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FString                                 CallFunc_Conv_IntToString_ReturnValue;             // 0x03F0(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	int32                                         Temp_int_Array_Index_Variable_9;                   // 0x0400(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable_11;                 // 0x0404(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue_9;                 // 0x0408(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Array_Index_Variable_10;                  // 0x040C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_NotEqual_NameName_ReturnValue_1;          // 0x0410(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanAND_ReturnValue;                   // 0x0411(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_412[0x2];                                      // 0x0412(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Temp_int_Loop_Counter_Variable_12;                 // 0x0414(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Subtract_IntInt_ReturnValue_2;            // 0x0418(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_GreaterEqual_IntInt_ReturnValue_2;        // 0x041C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_41D[0x3];                                      // 0x041D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Temp_int_Variable;                                 // 0x0420(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue_10;                // 0x0424(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue_3;               // 0x0428(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Greater_IntInt_ReturnValue;               // 0x042C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Not_PreBool_ReturnValue_1;                // 0x042D(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_42E[0x2];                                      // 0x042E(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	class UDataTable*                             CallFunc_DataProviderFindTableByAssetTable_ReturnValue; // 0x0430(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue_4;               // 0x0438(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_43C[0x4];                                      // 0x043C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UDataTable*                             CallFunc_DataProviderFindTableByAssetTable_ReturnValue_1; // 0x0440(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Subtract_IntInt_ReturnValue_3;            // 0x0448(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Array_Index_Variable_11;                  // 0x044C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Max_ReturnValue;                          // 0x0450(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   CallFunc_Array_Get_Item_3;                         // 0x0454(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_45C[0x4];                                      // 0x045C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FChallengeList                         CallFunc_GetDataTableRowFromName_OutRow;           // 0x0460(0x0100)()
	bool                                          CallFunc_GetDataTableRowFromName_ReturnValue;      // 0x0560(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_561[0x7];                                      // 0x0561(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 CallFunc_Conv_NameToString_ReturnValue_1;          // 0x0568(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FString                                 CallFunc_Concat_StrStr_ReturnValue_2;              // 0x0578(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FString                                 CallFunc_Concat_StrStr_ReturnValue_3;              // 0x0588(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FString                                 CallFunc_GetEnumeratorUserFriendlyName_ReturnValue; // 0x0598(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	bool                                          CallFunc_Array_Contains_ReturnValue;               // 0x05A8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_5A9[0x7];                                      // 0x05A9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 CallFunc_Concat_StrStr_ReturnValue_4;              // 0x05B0(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FString                                 CallFunc_Concat_StrStr_ReturnValue_5;              // 0x05C0(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanOR_ReturnValue;                    // 0x05D0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_5D1[0x7];                                      // 0x05D1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FCloudChallengeSlotInfo>        K2Node_MakeArray_Array_3;                          // 0x05D8(0x0010)(ReferenceParm)
	int32                                         CallFunc_Array_Length_ReturnValue_5;               // 0x05E8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue_6;               // 0x05EC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Array_Index_Variable_12;                  // 0x05F0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Greater_IntInt_ReturnValue_1;             // 0x05F4(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_5F5[0x3];                                      // 0x05F5(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FCloudChallengeSlotInfo                CallFunc_Array_Get_Item_4;                         // 0x05F8(0x0050)()
	bool                                          CallFunc_Not_PreBool_ReturnValue_2;                // 0x0648(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_649[0x7];                                      // 0x0649(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class ABP_ChallengeSlot_C*                    CallFunc_Find_Slot_by_ID_Slot_3;                   // 0x0650(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Find_Slot_by_ID_Success_3;                // 0x0658(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_659[0x3];                                      // 0x0659(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Temp_int_Loop_Counter_Variable_13;                 // 0x065C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Array_Index_Variable_13;                  // 0x0660(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue_3;                // 0x0664(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_665[0x3];                                      // 0x0665(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Add_IntInt_ReturnValue_11;                // 0x0668(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   CallFunc_Array_Get_Item_5;                         // 0x066C(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue_7;               // 0x0674(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FString                                 CallFunc_Conv_NameToString_ReturnValue_2;          // 0x0678(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	int32                                         CallFunc_Subtract_IntInt_ReturnValue_4;            // 0x0688(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_68C[0x4];                                      // 0x068C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 CallFunc_Concat_StrStr_ReturnValue_6;              // 0x0690(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	int32                                         CallFunc_Max_ReturnValue_1;                        // 0x06A0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_6A4[0x4];                                      // 0x06A4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 CallFunc_Concat_StrStr_ReturnValue_7;              // 0x06A8(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class UDataTable*                             CallFunc_DataProviderFindTableByAssetTable_ReturnValue_2; // 0x06B8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UDataTable*                             CallFunc_DataProviderFindTableByAssetTable_ReturnValue_3; // 0x06C0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FChallengeList                         CallFunc_GetDataTableRowFromName_OutRow_1;         // 0x06C8(0x0100)()
	bool                                          CallFunc_GetDataTableRowFromName_ReturnValue_1;    // 0x07C8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_7C9[0x7];                                      // 0x07C9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FChallengeList                         CallFunc_GetDataTableRowFromName_OutRow_2;         // 0x07D0(0x0100)()
	bool                                          CallFunc_GetDataTableRowFromName_ReturnValue_2;    // 0x08D0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_8D1[0x7];                                      // 0x08D1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 CallFunc_GetEnumeratorUserFriendlyName_ReturnValue_1; // 0x08D8(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	bool                                          CallFunc_NotEqual_ByteByte_ReturnValue;            // 0x08E8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_8E9[0x7];                                      // 0x08E9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 CallFunc_Concat_StrStr_ReturnValue_8;              // 0x08F0(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Add_ReturnValue;                    // 0x0900(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_904[0x4];                                      // 0x0904(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 CallFunc_Concat_StrStr_ReturnValue_9;              // 0x0908(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	bool                                          CallFunc_NotEqual_ByteByte_ReturnValue_1;          // 0x0918(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_NotEqual_ByteByte_ReturnValue_2;          // 0x0919(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Array_Contains_ReturnValue_1;             // 0x091A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanAND_ReturnValue_1;                 // 0x091B(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanAND_ReturnValue_2;                 // 0x091C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_91D[0x3];                                      // 0x091D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Temp_int_Loop_Counter_Variable_14;                 // 0x0920(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_924[0x4];                                      // 0x0924(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UDataTable*                             CallFunc_DataProviderFindTableByAssetTable_ReturnValue_4; // 0x0928(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue_12;                // 0x0930(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_934[0x4];                                      // 0x0934(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FChallengeList                         CallFunc_GetDataTableRowFromName_OutRow_3;         // 0x0938(0x0100)()
	bool                                          CallFunc_GetDataTableRowFromName_ReturnValue_3;    // 0x0A38(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_NotEqual_ByteByte_ReturnValue_3;          // 0x0A39(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_NotEqual_ByteByte_ReturnValue_4;          // 0x0A3A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanAND_ReturnValue_3;                 // 0x0A3B(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_A3C[0x4];                                      // 0x0A3C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FDateTime                              CallFunc_Map_Find_Value;                           // 0x0A40(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Map_Find_ReturnValue;                     // 0x0A48(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Less_DateTimeDateTime_ReturnValue;        // 0x0A49(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_A4A[0x2];                                      // 0x0A4A(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Temp_int_Array_Index_Variable_14;                  // 0x0A4C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue_8;               // 0x0A50(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_A54[0x4];                                      // 0x0A54(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 CallFunc_Conv_IntToString_ReturnValue_1;           // 0x0A58(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FString                                 CallFunc_Concat_StrStr_ReturnValue_10;             // 0x0A68(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FString                                 CallFunc_Concat_StrStr_ReturnValue_11;             // 0x0A78(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FString                                 CallFunc_Conv_NameToString_ReturnValue_3;          // 0x0A88(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FString                                 CallFunc_Concat_StrStr_ReturnValue_12;             // 0x0A98(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable_15;                 // 0x0AA8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_AAC[0x4];                                      // 0x0AAC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 CallFunc_Concat_StrStr_ReturnValue_13;             // 0x0AB0(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	int32                                         CallFunc_Subtract_IntInt_ReturnValue_5;            // 0x0AC0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_GreaterEqual_IntInt_ReturnValue_3;        // 0x0AC4(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_AC5[0x3];                                      // 0x0AC5(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 CallFunc_ToString__DateTime__String;               // 0x0AC8(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FString                                 CallFunc_Conv_IntToString_ReturnValue_2;           // 0x0AD8(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FString                                 CallFunc_Concat_StrStr_ReturnValue_14;             // 0x0AE8(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FString                                 CallFunc_Concat_StrStr_ReturnValue_15;             // 0x0AF8(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	bool                                          CallFunc_LessEqual_IntInt_ReturnValue;             // 0x0B08(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_B09[0x3];                                      // 0x0B09(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_MakeLiteralInt_ReturnValue;               // 0x0B0C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanAND_ReturnValue_4;                 // 0x0B10(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_B11[0x7];                                      // 0x0B11(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 CallFunc_Conv_IntToString_ReturnValue_3;           // 0x0B18(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	int32                                         CallFunc_MakeLiteralInt_ReturnValue_1;             // 0x0B28(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_B2C[0x4];                                      // 0x0B2C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 CallFunc_Conv_IntToString_ReturnValue_4;           // 0x0B30(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	int32                                         Temp_int_Array_Index_Variable_15;                  // 0x0B40(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_B44[0x4];                                      // 0x0B44(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 CallFunc_Conv_NameToString_ReturnValue_4;          // 0x0B48(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FString                                 CallFunc_Concat_StrStr_ReturnValue_16;             // 0x0B58(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FString                                 CallFunc_Concat_StrStr_ReturnValue_17;             // 0x0B68(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	struct FDateTime                              Temp_struct_Variable;                              // 0x0B78(0x0008)(ConstParm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class FName                                   CallFunc_Array_Get_Item_6;                         // 0x0B80(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue_9;               // 0x0B88(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_B8C[0x4];                                      // 0x0B8C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 CallFunc_Conv_NameToString_ReturnValue_5;          // 0x0B90(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue_4;                // 0x0BA0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_BA1[0x7];                                      // 0x0BA1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 CallFunc_Concat_StrStr_ReturnValue_18;             // 0x0BA8(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue_10;              // 0x0BB8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_BBC[0x4];                                      // 0x0BBC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 CallFunc_Conv_IntToString_ReturnValue_5;           // 0x0BC0(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	bool                                          CallFunc_Greater_IntInt_ReturnValue_2;             // 0x0BD0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_BD1[0x7];                                      // 0x0BD1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 CallFunc_Concat_StrStr_ReturnValue_19;             // 0x0BD8(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	bool                                          CallFunc_Not_PreBool_ReturnValue_3;                // 0x0BE8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_BE9[0x7];                                      // 0x0BE9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 CallFunc_Concat_StrStr_ReturnValue_20;             // 0x0BF0(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue_11;              // 0x0C00(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_RandomInteger_ReturnValue;                // 0x0C04(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   CallFunc_Array_Get_Item_7;                         // 0x0C08(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FString                                 CallFunc_ToString__DateTime__String_1;             // 0x0C10(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FString                                 CallFunc_GetEnumeratorUserFriendlyName_ReturnValue_2; // 0x0C20(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FString                                 CallFunc_Concat_StrStr_ReturnValue_21;             // 0x0C30(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FString                                 CallFunc_Concat_StrStr_ReturnValue_22;             // 0x0C40(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FString                                 CallFunc_Concat_StrStr_ReturnValue_23;             // 0x0C50(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FString                                 CallFunc_Concat_StrStr_ReturnValue_24;             // 0x0C60(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FName                                   CallFunc_Array_Get_Item_8;                         // 0x0C70(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue_12;              // 0x0C78(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_C7C[0x4];                                      // 0x0C7C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 CallFunc_Conv_NameToString_ReturnValue_6;          // 0x0C80(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue_5;                // 0x0C90(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_C91[0x7];                                      // 0x0C91(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 CallFunc_Concat_StrStr_ReturnValue_25;             // 0x0C98(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FString                                 CallFunc_Concat_StrStr_ReturnValue_26;             // 0x0CA8(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	int32                                         Temp_int_Variable_1;                               // 0x0CB8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue_13;                // 0x0CBC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         CallFunc_Conv_IntToByte_ReturnValue;               // 0x0CC0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         CallFunc_GetEnumeratorValueFromIndex_ReturnValue;  // 0x0CC1(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_CC2[0x2];                                      // 0x0CC2(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Conv_ByteToInt_ReturnValue;               // 0x0CC4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Variable_2;                               // 0x0CC8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         CallFunc_Conv_IntToByte_ReturnValue_1;             // 0x0CCC(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         CallFunc_GetValidValue_ReturnValue;                // 0x0CCD(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_CCE[0x2];                                      // 0x0CCE(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 CallFunc_GetEnumeratorUserFriendlyName_ReturnValue_3; // 0x0CD0(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	struct FDateTime                              CallFunc_Map_Find_Value_1;                         // 0x0CE0(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Map_Find_ReturnValue_1;                   // 0x0CE8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_CE9[0x7];                                      // 0x0CE9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 CallFunc_Concat_StrStr_ReturnValue_27;             // 0x0CF0(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FString                                 CallFunc_ToString__DateTime__String_2;             // 0x0D00(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FString                                 CallFunc_Concat_StrStr_ReturnValue_28;             // 0x0D10(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsShipping_ReturnValue;                   // 0x0D20(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Not_PreBool_ReturnValue_4;                // 0x0D21(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_D22[0x6];                                      // 0x0D22(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 Temp_string_Variable;                              // 0x0D28(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanAND_ReturnValue_5;                 // 0x0D38(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable_1;                              // 0x0D39(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_D3A[0x6];                                      // 0x0D3A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 K2Node_Select_Default;                             // 0x0D40(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FString                                 CallFunc_Concat_StrStr_ReturnValue_29;             // 0x0D50(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FName                                   CallFunc_Array_Get_Item_9;                         // 0x0D60(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue_13;              // 0x0D68(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_D6C[0x4];                                      // 0x0D6C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 CallFunc_Conv_NameToString_ReturnValue_7;          // 0x0D70(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	int32                                         CallFunc_Subtract_IntInt_ReturnValue_6;            // 0x0D80(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_D84[0x4];                                      // 0x0D84(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 CallFunc_Concat_StrStr_ReturnValue_30;             // 0x0D88(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	int32                                         CallFunc_Max_ReturnValue_2;                        // 0x0D98(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_D9C[0x4];                                      // 0x0D9C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 CallFunc_Concat_StrStr_ReturnValue_31;             // 0x0DA0(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class UDataTable*                             CallFunc_DataProviderFindTableByAssetTable_ReturnValue_5; // 0x0DB0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Array_Index_Variable_16;                  // 0x0DB8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_DBC[0x4];                                      // 0x0DBC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FChallengeList                         CallFunc_GetDataTableRowFromName_OutRow_4;         // 0x0DC0(0x0100)()
	bool                                          CallFunc_GetDataTableRowFromName_ReturnValue_4;    // 0x0EC0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_EC1[0x7];                                      // 0x0EC1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UDataTable*                             CallFunc_DataProviderFindTableByAssetTable_ReturnValue_6; // 0x0EC8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Add_ReturnValue_1;                  // 0x0ED0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_ED4[0x4];                                      // 0x0ED4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FChallengeList                         CallFunc_GetDataTableRowFromName_OutRow_5;         // 0x0ED8(0x0100)()
	bool                                          CallFunc_GetDataTableRowFromName_ReturnValue_5;    // 0x0FD8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_FD9[0x3];                                      // 0x0FD9(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Len_ReturnValue;                          // 0x0FDC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Greater_IntInt_ReturnValue_3;             // 0x0FE0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_FE1[0x7];                                      // 0x0FE1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 CallFunc_Concat_StrStr_ReturnValue_32;             // 0x0FE8(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	bool                                          CallFunc_Array_Contains_ReturnValue_2;             // 0x0FF8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_FF9[0x7];                                      // 0x0FF9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 CallFunc_Concat_StrStr_ReturnValue_33;             // 0x1000(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	int32                                         CallFunc_Len_ReturnValue_1;                        // 0x1010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1014[0x4];                                     // 0x1014(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UDataTable*                             CallFunc_DataProviderFindTableByAssetTable_ReturnValue_7; // 0x1018(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Greater_IntInt_ReturnValue_4;             // 0x1020(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_1021[0x7];                                     // 0x1021(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UDataTable*                             CallFunc_DataProviderFindTableByAssetTable_ReturnValue_8; // 0x1028(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UDataTable*                             CallFunc_DataProviderFindTableByAssetTable_ReturnValue_9; // 0x1030(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UDataTable*                             CallFunc_DataProviderFindTableByAssetTable_ReturnValue_10; // 0x1038(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<class FName>                           CallFunc_GetDataTableRowNames_OutRowNames;         // 0x1040(0x0010)(ReferenceParm)
	EChallengeCategory                            CallFunc_Array_Get_Item_10;                        // 0x1050(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1051[0x3];                                     // 0x1051(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   CallFunc_Array_Get_Item_11;                        // 0x1054(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_105C[0x4];                                     // 0x105C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FChallengeList                         CallFunc_GetDataTableRowFromName_OutRow_6;         // 0x1060(0x0100)()
	bool                                          CallFunc_GetDataTableRowFromName_ReturnValue_6;    // 0x1160(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_1161[0x7];                                     // 0x1161(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 CallFunc_Conv_NameToString_ReturnValue_8;          // 0x1168(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FString                                 CallFunc_Concat_StrStr_ReturnValue_34;             // 0x1178(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FString                                 CallFunc_Concat_StrStr_ReturnValue_35;             // 0x1188(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	struct FChallengePrerequisiteInfo             CallFunc_Array_Get_Item_12;                        // 0x1198(0x0040)()
	class FString                                 CallFunc_Concat_StrStr_ReturnValue_36;             // 0x11D8(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FString                                 CallFunc_Concat_StrStr_ReturnValue_37;             // 0x11E8(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FString                                 CallFunc_Conv_NameToString_ReturnValue_9;          // 0x11F8(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FString                                 CallFunc_GetEnumeratorUserFriendlyName_ReturnValue_4; // 0x1208(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FString                                 CallFunc_Conv_IntToString_ReturnValue_6;           // 0x1218(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FString                                 CallFunc_GetClassDisplayName_ReturnValue;          // 0x1228(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	TSubclassOf<class UObject>                    CallFunc_Conv_SoftClassReferenceToClass_ReturnValue; // 0x1238(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash)
	bool                                          CallFunc_Check_Prerequisite_Passed;                // 0x1240(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_1241[0x7];                                     // 0x1241(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UClass*                                 K2Node_ClassDynamicCast_AsChallenge_Prerequisite;  // 0x1248(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_ClassDynamicCast_bSuccess;                  // 0x1250(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_1251[0x7];                                     // 0x1251(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 CallFunc_GetClassDisplayName_ReturnValue_1;        // 0x1258(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue_14;              // 0x1268(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_126C[0x4];                                     // 0x126C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 CallFunc_Concat_StrStr_ReturnValue_38;             // 0x1270(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue_6;                // 0x1280(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_1281[0x7];                                     // 0x1281(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 CallFunc_Concat_StrStr_ReturnValue_39;             // 0x1288(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FString                                 CallFunc_Concat_StrStr_ReturnValue_40;             // 0x1298(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValidSoftClassReference_ReturnValue;    // 0x12A8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_12A9[0x7];                                     // 0x12A9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 CallFunc_Concat_StrStr_ReturnValue_41;             // 0x12B0(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FString                                 CallFunc_Conv_BoolToString_ReturnValue;            // 0x12C0(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FString                                 CallFunc_Concat_StrStr_ReturnValue_42;             // 0x12D0(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	bool                                          CallFunc_NotEqual_ByteByte_ReturnValue_5;          // 0x12E0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_12E1[0x7];                                     // 0x12E1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 CallFunc_Concat_StrStr_ReturnValue_43;             // 0x12E8(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FString                                 CallFunc_Conv_BoolToString_ReturnValue_1;          // 0x12F8(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FString                                 CallFunc_Concat_StrStr_ReturnValue_44;             // 0x1308(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	bool                                          CallFunc_NotEqual_ByteByte_ReturnValue_6;          // 0x1318(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_1319[0x7];                                     // 0x1319(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 CallFunc_Concat_StrStr_ReturnValue_45;             // 0x1320(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanAND_ReturnValue_6;                 // 0x1330(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_1331[0x7];                                     // 0x1331(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 CallFunc_Concat_StrStr_ReturnValue_46;             // 0x1338(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanAND_ReturnValue_7;                 // 0x1348(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_1349[0x7];                                     // 0x1349(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 CallFunc_Concat_StrStr_ReturnValue_47;             // 0x1350(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanAND_ReturnValue_8;                 // 0x1360(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_1361[0x7];                                     // 0x1361(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 CallFunc_Conv_BoolToString_ReturnValue_2;          // 0x1368(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FString                                 CallFunc_Conv_BoolToString_ReturnValue_3;          // 0x1378(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FString                                 CallFunc_Conv_NameToString_ReturnValue_10;         // 0x1388(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FString                                 CallFunc_Conv_NameToString_ReturnValue_11;         // 0x1398(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FString                                 CallFunc_Concat_StrStr_ReturnValue_48;             // 0x13A8(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FString                                 CallFunc_Concat_StrStr_ReturnValue_49;             // 0x13B8(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FString                                 CallFunc_Concat_StrStr_ReturnValue_50;             // 0x13C8(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FString                                 CallFunc_Concat_StrStr_ReturnValue_51;             // 0x13D8(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FString                                 CallFunc_Concat_StrStr_ReturnValue_52;             // 0x13E8(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	struct FDateTime                              CallFunc_Map_Find_Value_2;                         // 0x13F8(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Map_Find_ReturnValue_2;                   // 0x1400(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_1401[0x7];                                     // 0x1401(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 CallFunc_Concat_StrStr_ReturnValue_53;             // 0x1408(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FString                                 CallFunc_Concat_StrStr_ReturnValue_54;             // 0x1418(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue_15;              // 0x1428(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_142C[0x4];                                     // 0x142C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 CallFunc_Concat_StrStr_ReturnValue_55;             // 0x1430(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue_7;                // 0x1440(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_1441[0x7];                                     // 0x1441(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 CallFunc_Concat_StrStr_ReturnValue_56;             // 0x1448(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FString                                 CallFunc_Concat_StrStr_ReturnValue_57;             // 0x1458(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue_16;              // 0x1468(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_146C[0x4];                                     // 0x146C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 CallFunc_Concat_StrStr_ReturnValue_58;             // 0x1470(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue_8;                // 0x1480(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_1481[0x7];                                     // 0x1481(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 CallFunc_Concat_StrStr_ReturnValue_59;             // 0x1488(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	TArray<struct FCloudChallengeSlotInfo>        K2Node_MakeArray_Array_4;                          // 0x1498(0x0010)(ReferenceParm)
	int32                                         CallFunc_Array_Length_ReturnValue_17;              // 0x14A8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_14AC[0x4];                                     // 0x14AC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 CallFunc_Conv_NameToString_ReturnValue_12;         // 0x14B0(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	int32                                         Temp_int_Array_Index_Variable_17;                  // 0x14C0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_14C4[0x4];                                     // 0x14C4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 CallFunc_Concat_StrStr_ReturnValue_60;             // 0x14C8(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	struct FCloudChallengeSlotInfo                CallFunc_Array_Get_Item_13;                        // 0x14D8(0x0050)()
	struct FChallengeList                         CallFunc_GetDataTableRowFromName_OutRow_7;         // 0x1528(0x0100)()
	bool                                          CallFunc_GetDataTableRowFromName_ReturnValue_7;    // 0x1628(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_1629[0x7];                                     // 0x1629(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class ABP_ChallengeSlot_C*                    CallFunc_Find_Slot_by_ID_Slot_4;                   // 0x1630(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Find_Slot_by_ID_Success_4;                // 0x1638(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_NotEqual_ByteByte_ReturnValue_7;          // 0x1639(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_NotEqual_ByteByte_ReturnValue_8;          // 0x163A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_163B[0x1];                                     // 0x163B(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Array_Add_ReturnValue_2;                  // 0x163C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanAND_ReturnValue_9;                 // 0x1640(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_1641[0x3];                                     // 0x1641(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Array_Length_ReturnValue_18;              // 0x1644(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue_19;              // 0x1648(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Greater_IntInt_ReturnValue_5;             // 0x164C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_164D[0x3];                                     // 0x164D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_RandomInteger_ReturnValue_1;              // 0x1650(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Not_PreBool_ReturnValue_5;                // 0x1654(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_1655[0x3];                                     // 0x1655(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   CallFunc_Array_Get_Item_14;                        // 0x1658(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   CallFunc_Array_Get_Item_15;                        // 0x1660(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FString                                 CallFunc_Conv_NameToString_ReturnValue_13;         // 0x1668(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	struct FDateTime                              CallFunc_Array_Get_Item_16;                        // 0x1678(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class FString                                 CallFunc_Concat_StrStr_ReturnValue_61;             // 0x1680(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FString                                 CallFunc_Concat_StrStr_ReturnValue_62;             // 0x1690(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FString                                 CallFunc_Concat_StrStr_ReturnValue_63;             // 0x16A0(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FString                                 CallFunc_Concat_StrStr_ReturnValue_64;             // 0x16B0(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_AddUnique_ReturnValue;              // 0x16C0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_16C4[0x4];                                     // 0x16C4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FDateTime                              CallFunc_Array_Get_Item_17;                        // 0x16C8(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue_20;              // 0x16D0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Greater_IntInt_ReturnValue_6;             // 0x16D4(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Less_DateTimeDateTime_ReturnValue_1;      // 0x16D5(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Not_PreBool_ReturnValue_6;                // 0x16D6(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_16D7[0x1];                                     // 0x16D7(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Array_Length_ReturnValue_21;              // 0x16D8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue_22;              // 0x16DC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue_9;                // 0x16E0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_16E1[0x3];                                     // 0x16E1(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Array_Length_ReturnValue_23;              // 0x16E4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_IntInt_ReturnValue;            // 0x16E8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_16E9[0x3];                                     // 0x16E9(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Array_Length_ReturnValue_24;              // 0x16EC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Greater_IntInt_ReturnValue_7;             // 0x16F0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Not_PreBool_ReturnValue_7;                // 0x16F1(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_16F2[0x2];                                     // 0x16F2(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Array_Length_ReturnValue_25;              // 0x16F4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FString                                 CallFunc_Conv_IntToString_ReturnValue_7;           // 0x16F8(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	int32                                         CallFunc_Min_ReturnValue;                          // 0x1708(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_170C[0x4];                                     // 0x170C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 CallFunc_Concat_StrStr_ReturnValue_65;             // 0x1710(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	int32                                         CallFunc_Divide_IntInt_ReturnValue;                // 0x1720(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1724[0x4];                                     // 0x1724(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 CallFunc_Concat_StrStr_ReturnValue_66;             // 0x1728(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	int32                                         CallFunc_Max_ReturnValue_3;                        // 0x1738(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_173C[0x4];                                     // 0x173C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 CallFunc_Concat_StrStr_ReturnValue_67;             // 0x1740(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FString                                 CallFunc_Concat_StrStr_ReturnValue_68;             // 0x1750(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FString                                 CallFunc_Concat_StrStr_ReturnValue_69;             // 0x1760(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FString                                 CallFunc_Concat_StrStr_ReturnValue_70;             // 0x1770(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable_16;                 // 0x1780(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue_14;                // 0x1784(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   CallFunc_Array_Get_Item_18;                        // 0x1788(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue_26;              // 0x1790(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1794[0x4];                                     // 0x1794(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 CallFunc_Conv_NameToString_ReturnValue_14;         // 0x1798(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue_10;               // 0x17A8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_17A9[0x7];                                     // 0x17A9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 CallFunc_Concat_StrStr_ReturnValue_71;             // 0x17B0(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FString                                 CallFunc_Concat_StrStr_ReturnValue_72;             // 0x17C0(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	struct FDateTime                              CallFunc_Map_Find_Value_3;                         // 0x17D0(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Map_Find_ReturnValue_3;                   // 0x17D8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_17D9[0x7];                                     // 0x17D9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TSet<class FName>                             CallFunc_Set_Difference_Result;                    // 0x17E0(0x0050)()
	class FString                                 CallFunc_ToString__DateTime__String_3;             // 0x1830(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	TArray<class FName>                           CallFunc_Set_ToArray_Result;                       // 0x1840(0x0010)(ReferenceParm)
	class FString                                 CallFunc_Concat_StrStr_ReturnValue_73;             // 0x1850(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Add_ReturnValue_3;                  // 0x1860(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1864[0x4];                                     // 0x1864(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class FName>                           CallFunc_Map_Keys_Keys;                            // 0x1868(0x0010)(ReferenceParm)
	struct FDateTime                              CallFunc_GetCloudTime_ReturnValue;                 // 0x1878(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class FString                                 CallFunc_GetEnumeratorUserFriendlyName_ReturnValue_5; // 0x1880(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FName                                   CallFunc_Array_Get_Item_19;                        // 0x1890(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue_27;              // 0x1898(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_189C[0x4];                                     // 0x189C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FChallengeList                         CallFunc_GetDataTableRowFromName_OutRow_8;         // 0x18A0(0x0100)()
	bool                                          CallFunc_GetDataTableRowFromName_ReturnValue_8;    // 0x19A0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_19A1[0x3];                                     // 0x19A1(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Subtract_IntInt_ReturnValue_7;            // 0x19A4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Max_ReturnValue_4;                        // 0x19A8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_19AC[0x4];                                     // 0x19AC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 CallFunc_Conv_NameToString_ReturnValue_15;         // 0x19B0(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FString                                 CallFunc_GetEnumeratorUserFriendlyName_ReturnValue_6; // 0x19C0(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FString                                 CallFunc_Concat_StrStr_ReturnValue_74;             // 0x19D0(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	bool                                          CallFunc_NotEqual_ByteByte_ReturnValue_9;          // 0x19E0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_19E1[0x7];                                     // 0x19E1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 CallFunc_Concat_StrStr_ReturnValue_75;             // 0x19E8(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FString                                 CallFunc_Concat_StrStr_ReturnValue_76;             // 0x19F8(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FString                                 CallFunc_Concat_StrStr_ReturnValue_77;             // 0x1A08(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_DateTimeDateTime_ReturnValue_2;      // 0x1A18(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_1A19[0x7];                                     // 0x1A19(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 CallFunc_Concat_StrStr_ReturnValue_78;             // 0x1A20(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FString                                 CallFunc_Concat_StrStr_ReturnValue_79;             // 0x1A30(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	TArray<EChallengeCategory>                    CallFunc_Map_Keys_Keys_1;                          // 0x1A40(0x0010)(ReferenceParm)
	EChallengeCategory                            CallFunc_Array_Get_Item_20;                        // 0x1A50(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Array_RemoveItem_ReturnValue;             // 0x1A51(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_1A52[0x2];                                     // 0x1A52(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Array_Add_ReturnValue_4;                  // 0x1A54(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanAND_ReturnValue_10;                // 0x1A58(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_CheckCategoryAgainstCandidates_Valid;     // 0x1A59(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_1A5A[0x2];                                     // 0x1A5A(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Array_Length_ReturnValue_28;              // 0x1A5C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue_11;               // 0x1A60(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_1A61[0x3];                                     // 0x1A61(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_MakeLiteralInt_ReturnValue_2;             // 0x1A64(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue_12;               // 0x1A68(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_1A69[0x3];                                     // 0x1A69(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   CallFunc_Array_Get_Item_21;                        // 0x1A6C(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue_29;              // 0x1A74(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FChallengeList                         CallFunc_GetDataTableRowFromName_OutRow_9;         // 0x1A78(0x0100)()
	bool                                          CallFunc_GetDataTableRowFromName_ReturnValue_9;    // 0x1B78(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Less_IntInt_ReturnValue_13;               // 0x1B79(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_1B7A[0x6];                                     // 0x1B7A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	struct FDateTime                              CallFunc_Map_Find_Value_4;                         // 0x1B80(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Map_Find_ReturnValue_4;                   // 0x1B88(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_1B89[0x7];                                     // 0x1B89(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FDateTime                              CallFunc_Map_Find_Value_5;                         // 0x1B90(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Map_Find_ReturnValue_5;                   // 0x1B98(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_1B99[0x7];                                     // 0x1B99(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FDateTime                              CallFunc_Map_Find_Value_6;                         // 0x1BA0(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Map_Find_ReturnValue_6;                   // 0x1BA8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Less_DateTimeDateTime_ReturnValue_3;      // 0x1BA9(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_1BAA[0x2];                                     // 0x1BAA(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Temp_int_Loop_Counter_Variable_17;                 // 0x1BAC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Add_ReturnValue_5;                  // 0x1BB0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue_14;               // 0x1BB4(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_1BB5[0x3];                                     // 0x1BB5(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Add_IntInt_ReturnValue_15;                // 0x1BB8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_ChallengeManager_C_Choose_Daily_Challenge) == 0x000008, "Wrong alignment on BP_ChallengeManager_C_Choose_Daily_Challenge");
static_assert(sizeof(BP_ChallengeManager_C_Choose_Daily_Challenge) == 0x001BC0, "Wrong size on BP_ChallengeManager_C_Choose_Daily_Challenge");
static_assert(offsetof(BP_ChallengeManager_C_Choose_Daily_Challenge, Log_Progress) == 0x000000, "Member 'BP_ChallengeManager_C_Choose_Daily_Challenge::Log_Progress' has a wrong offset!");
static_assert(offsetof(BP_ChallengeManager_C_Choose_Daily_Challenge, Challenge_Name) == 0x000004, "Member 'BP_ChallengeManager_C_Choose_Daily_Challenge::Challenge_Name' has a wrong offset!");
static_assert(offsetof(BP_ChallengeManager_C_Choose_Daily_Challenge, NewLocalVar_0) == 0x00000C, "Member 'BP_ChallengeManager_C_Choose_Daily_Challenge::NewLocalVar_0' has a wrong offset!");
static_assert(offsetof(BP_ChallengeManager_C_Choose_Daily_Challenge, Category_of_Currently_Assigned_Challenges) == 0x000018, "Member 'BP_ChallengeManager_C_Choose_Daily_Challenge::Category_of_Currently_Assigned_Challenges' has a wrong offset!");
static_assert(offsetof(BP_ChallengeManager_C_Choose_Daily_Challenge, Difficulty_of_Currently_Assigned_Challenges) == 0x000028, "Member 'BP_ChallengeManager_C_Choose_Daily_Challenge::Difficulty_of_Currently_Assigned_Challenges' has a wrong offset!");
static_assert(offsetof(BP_ChallengeManager_C_Choose_Daily_Challenge, Final_Result) == 0x000038, "Member 'BP_ChallengeManager_C_Choose_Daily_Challenge::Final_Result' has a wrong offset!");
static_assert(offsetof(BP_ChallengeManager_C_Choose_Daily_Challenge, Never_Finished_Candidates) == 0x000040, "Member 'BP_ChallengeManager_C_Choose_Daily_Challenge::Never_Finished_Candidates' has a wrong offset!");
static_assert(offsetof(BP_ChallengeManager_C_Choose_Daily_Challenge, Logging) == 0x000050, "Member 'BP_ChallengeManager_C_Choose_Daily_Challenge::Logging' has a wrong offset!");
static_assert(offsetof(BP_ChallengeManager_C_Choose_Daily_Challenge, Group_of_Currently_Assigned_Challenges) == 0x000058, "Member 'BP_ChallengeManager_C_Choose_Daily_Challenge::Group_of_Currently_Assigned_Challenges' has a wrong offset!");
static_assert(offsetof(BP_ChallengeManager_C_Choose_Daily_Challenge, Candidate_Categories) == 0x000068, "Member 'BP_ChallengeManager_C_Choose_Daily_Challenge::Candidate_Categories' has a wrong offset!");
static_assert(offsetof(BP_ChallengeManager_C_Choose_Daily_Challenge, Oldest_Candidate_Index) == 0x000078, "Member 'BP_ChallengeManager_C_Choose_Daily_Challenge::Oldest_Candidate_Index' has a wrong offset!");
static_assert(offsetof(BP_ChallengeManager_C_Choose_Daily_Challenge, Oldest_Candidate) == 0x00007C, "Member 'BP_ChallengeManager_C_Choose_Daily_Challenge::Oldest_Candidate' has a wrong offset!");
static_assert(offsetof(BP_ChallengeManager_C_Choose_Daily_Challenge, Second_Round_Candidates) == 0x000088, "Member 'BP_ChallengeManager_C_Choose_Daily_Challenge::Second_Round_Candidates' has a wrong offset!");
static_assert(offsetof(BP_ChallengeManager_C_Choose_Daily_Challenge, Second_Round_Candidate_Count) == 0x000098, "Member 'BP_ChallengeManager_C_Choose_Daily_Challenge::Second_Round_Candidate_Count' has a wrong offset!");
static_assert(offsetof(BP_ChallengeManager_C_Choose_Daily_Challenge, Candidate_Array_Timestamps) == 0x0000A0, "Member 'BP_ChallengeManager_C_Choose_Daily_Challenge::Candidate_Array_Timestamps' has a wrong offset!");
static_assert(offsetof(BP_ChallengeManager_C_Choose_Daily_Challenge, Ever_Finished_Challenges) == 0x0000B0, "Member 'BP_ChallengeManager_C_Choose_Daily_Challenge::Ever_Finished_Challenges' has a wrong offset!");
static_assert(offsetof(BP_ChallengeManager_C_Choose_Daily_Challenge, Candidates_Set) == 0x000100, "Member 'BP_ChallengeManager_C_Choose_Daily_Challenge::Candidates_Set' has a wrong offset!");
static_assert(offsetof(BP_ChallengeManager_C_Choose_Daily_Challenge, Oldest_Timestamp) == 0x000150, "Member 'BP_ChallengeManager_C_Choose_Daily_Challenge::Oldest_Timestamp' has a wrong offset!");
static_assert(offsetof(BP_ChallengeManager_C_Choose_Daily_Challenge, Oldest_Category) == 0x000158, "Member 'BP_ChallengeManager_C_Choose_Daily_Challenge::Oldest_Category' has a wrong offset!");
static_assert(offsetof(BP_ChallengeManager_C_Choose_Daily_Challenge, Candidate_Array) == 0x000160, "Member 'BP_ChallengeManager_C_Choose_Daily_Challenge::Candidate_Array' has a wrong offset!");
static_assert(offsetof(BP_ChallengeManager_C_Choose_Daily_Challenge, Most_Recent_Challenge_Timestamp_by_Category) == 0x000170, "Member 'BP_ChallengeManager_C_Choose_Daily_Challenge::Most_Recent_Challenge_Timestamp_by_Category' has a wrong offset!");
static_assert(offsetof(BP_ChallengeManager_C_Choose_Daily_Challenge, Temp_int_Loop_Counter_Variable) == 0x0001C0, "Member 'BP_ChallengeManager_C_Choose_Daily_Challenge::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(BP_ChallengeManager_C_Choose_Daily_Challenge, CallFunc_Add_IntInt_ReturnValue) == 0x0001C4, "Member 'BP_ChallengeManager_C_Choose_Daily_Challenge::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_ChallengeManager_C_Choose_Daily_Challenge, Temp_int_Array_Index_Variable) == 0x0001C8, "Member 'BP_ChallengeManager_C_Choose_Daily_Challenge::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(BP_ChallengeManager_C_Choose_Daily_Challenge, Temp_int_Loop_Counter_Variable_1) == 0x0001CC, "Member 'BP_ChallengeManager_C_Choose_Daily_Challenge::Temp_int_Loop_Counter_Variable_1' has a wrong offset!");
static_assert(offsetof(BP_ChallengeManager_C_Choose_Daily_Challenge, CallFunc_Add_IntInt_ReturnValue_1) == 0x0001D0, "Member 'BP_ChallengeManager_C_Choose_Daily_Challenge::CallFunc_Add_IntInt_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_ChallengeManager_C_Choose_Daily_Challenge, K2Node_MakeArray_Array) == 0x0001D8, "Member 'BP_ChallengeManager_C_Choose_Daily_Challenge::K2Node_MakeArray_Array' has a wrong offset!");
static_assert(offsetof(BP_ChallengeManager_C_Choose_Daily_Challenge, Temp_int_Loop_Counter_Variable_2) == 0x0001E8, "Member 'BP_ChallengeManager_C_Choose_Daily_Challenge::Temp_int_Loop_Counter_Variable_2' has a wrong offset!");
static_assert(offsetof(BP_ChallengeManager_C_Choose_Daily_Challenge, CallFunc_Array_Length_ReturnValue) == 0x0001EC, "Member 'BP_ChallengeManager_C_Choose_Daily_Challenge::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_ChallengeManager_C_Choose_Daily_Challenge, CallFunc_Subtract_IntInt_ReturnValue) == 0x0001F0, "Member 'BP_ChallengeManager_C_Choose_Daily_Challenge::CallFunc_Subtract_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_ChallengeManager_C_Choose_Daily_Challenge, CallFunc_GreaterEqual_IntInt_ReturnValue) == 0x0001F4, "Member 'BP_ChallengeManager_C_Choose_Daily_Challenge::CallFunc_GreaterEqual_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_ChallengeManager_C_Choose_Daily_Challenge, Temp_int_Array_Index_Variable_1) == 0x0001F8, "Member 'BP_ChallengeManager_C_Choose_Daily_Challenge::Temp_int_Array_Index_Variable_1' has a wrong offset!");
static_assert(offsetof(BP_ChallengeManager_C_Choose_Daily_Challenge, Temp_int_Loop_Counter_Variable_3) == 0x0001FC, "Member 'BP_ChallengeManager_C_Choose_Daily_Challenge::Temp_int_Loop_Counter_Variable_3' has a wrong offset!");
static_assert(offsetof(BP_ChallengeManager_C_Choose_Daily_Challenge, CallFunc_Array_Get_Item) == 0x000200, "Member 'BP_ChallengeManager_C_Choose_Daily_Challenge::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(BP_ChallengeManager_C_Choose_Daily_Challenge, CallFunc_Add_IntInt_ReturnValue_2) == 0x000250, "Member 'BP_ChallengeManager_C_Choose_Daily_Challenge::CallFunc_Add_IntInt_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BP_ChallengeManager_C_Choose_Daily_Challenge, CallFunc_NotEqual_NameName_ReturnValue) == 0x000254, "Member 'BP_ChallengeManager_C_Choose_Daily_Challenge::CallFunc_NotEqual_NameName_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_ChallengeManager_C_Choose_Daily_Challenge, CallFunc_Find_Slot_by_ID_Slot) == 0x000258, "Member 'BP_ChallengeManager_C_Choose_Daily_Challenge::CallFunc_Find_Slot_by_ID_Slot' has a wrong offset!");
static_assert(offsetof(BP_ChallengeManager_C_Choose_Daily_Challenge, CallFunc_Find_Slot_by_ID_Success) == 0x000260, "Member 'BP_ChallengeManager_C_Choose_Daily_Challenge::CallFunc_Find_Slot_by_ID_Success' has a wrong offset!");
static_assert(offsetof(BP_ChallengeManager_C_Choose_Daily_Challenge, Temp_int_Array_Index_Variable_2) == 0x000264, "Member 'BP_ChallengeManager_C_Choose_Daily_Challenge::Temp_int_Array_Index_Variable_2' has a wrong offset!");
static_assert(offsetof(BP_ChallengeManager_C_Choose_Daily_Challenge, Temp_int_Loop_Counter_Variable_4) == 0x000268, "Member 'BP_ChallengeManager_C_Choose_Daily_Challenge::Temp_int_Loop_Counter_Variable_4' has a wrong offset!");
static_assert(offsetof(BP_ChallengeManager_C_Choose_Daily_Challenge, CallFunc_Subtract_IntInt_ReturnValue_1) == 0x00026C, "Member 'BP_ChallengeManager_C_Choose_Daily_Challenge::CallFunc_Subtract_IntInt_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_ChallengeManager_C_Choose_Daily_Challenge, CallFunc_GreaterEqual_IntInt_ReturnValue_1) == 0x000270, "Member 'BP_ChallengeManager_C_Choose_Daily_Challenge::CallFunc_GreaterEqual_IntInt_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_ChallengeManager_C_Choose_Daily_Challenge, Temp_int_Array_Index_Variable_3) == 0x000274, "Member 'BP_ChallengeManager_C_Choose_Daily_Challenge::Temp_int_Array_Index_Variable_3' has a wrong offset!");
static_assert(offsetof(BP_ChallengeManager_C_Choose_Daily_Challenge, Temp_int_Loop_Counter_Variable_5) == 0x000278, "Member 'BP_ChallengeManager_C_Choose_Daily_Challenge::Temp_int_Loop_Counter_Variable_5' has a wrong offset!");
static_assert(offsetof(BP_ChallengeManager_C_Choose_Daily_Challenge, CallFunc_Less_IntInt_ReturnValue) == 0x00027C, "Member 'BP_ChallengeManager_C_Choose_Daily_Challenge::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_ChallengeManager_C_Choose_Daily_Challenge, CallFunc_Add_IntInt_ReturnValue_3) == 0x000280, "Member 'BP_ChallengeManager_C_Choose_Daily_Challenge::CallFunc_Add_IntInt_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(BP_ChallengeManager_C_Choose_Daily_Challenge, Temp_bool_Variable) == 0x000284, "Member 'BP_ChallengeManager_C_Choose_Daily_Challenge::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(BP_ChallengeManager_C_Choose_Daily_Challenge, Temp_int_Loop_Counter_Variable_6) == 0x000288, "Member 'BP_ChallengeManager_C_Choose_Daily_Challenge::Temp_int_Loop_Counter_Variable_6' has a wrong offset!");
static_assert(offsetof(BP_ChallengeManager_C_Choose_Daily_Challenge, CallFunc_Add_IntInt_ReturnValue_4) == 0x00028C, "Member 'BP_ChallengeManager_C_Choose_Daily_Challenge::CallFunc_Add_IntInt_ReturnValue_4' has a wrong offset!");
static_assert(offsetof(BP_ChallengeManager_C_Choose_Daily_Challenge, CallFunc_Not_PreBool_ReturnValue) == 0x000290, "Member 'BP_ChallengeManager_C_Choose_Daily_Challenge::CallFunc_Not_PreBool_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_ChallengeManager_C_Choose_Daily_Challenge, Temp_int_Array_Index_Variable_4) == 0x000294, "Member 'BP_ChallengeManager_C_Choose_Daily_Challenge::Temp_int_Array_Index_Variable_4' has a wrong offset!");
static_assert(offsetof(BP_ChallengeManager_C_Choose_Daily_Challenge, K2Node_MakeArray_Array_1) == 0x000298, "Member 'BP_ChallengeManager_C_Choose_Daily_Challenge::K2Node_MakeArray_Array_1' has a wrong offset!");
static_assert(offsetof(BP_ChallengeManager_C_Choose_Daily_Challenge, CallFunc_Array_Length_ReturnValue_1) == 0x0002A8, "Member 'BP_ChallengeManager_C_Choose_Daily_Challenge::CallFunc_Array_Length_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_ChallengeManager_C_Choose_Daily_Challenge, Temp_int_Array_Index_Variable_5) == 0x0002AC, "Member 'BP_ChallengeManager_C_Choose_Daily_Challenge::Temp_int_Array_Index_Variable_5' has a wrong offset!");
static_assert(offsetof(BP_ChallengeManager_C_Choose_Daily_Challenge, Temp_int_Loop_Counter_Variable_7) == 0x0002B0, "Member 'BP_ChallengeManager_C_Choose_Daily_Challenge::Temp_int_Loop_Counter_Variable_7' has a wrong offset!");
static_assert(offsetof(BP_ChallengeManager_C_Choose_Daily_Challenge, CallFunc_Array_Get_Item_1) == 0x0002B8, "Member 'BP_ChallengeManager_C_Choose_Daily_Challenge::CallFunc_Array_Get_Item_1' has a wrong offset!");
static_assert(offsetof(BP_ChallengeManager_C_Choose_Daily_Challenge, CallFunc_Add_IntInt_ReturnValue_5) == 0x000308, "Member 'BP_ChallengeManager_C_Choose_Daily_Challenge::CallFunc_Add_IntInt_ReturnValue_5' has a wrong offset!");
static_assert(offsetof(BP_ChallengeManager_C_Choose_Daily_Challenge, CallFunc_Find_Slot_by_ID_Slot_1) == 0x000310, "Member 'BP_ChallengeManager_C_Choose_Daily_Challenge::CallFunc_Find_Slot_by_ID_Slot_1' has a wrong offset!");
static_assert(offsetof(BP_ChallengeManager_C_Choose_Daily_Challenge, CallFunc_Find_Slot_by_ID_Success_1) == 0x000318, "Member 'BP_ChallengeManager_C_Choose_Daily_Challenge::CallFunc_Find_Slot_by_ID_Success_1' has a wrong offset!");
static_assert(offsetof(BP_ChallengeManager_C_Choose_Daily_Challenge, Temp_int_Array_Index_Variable_6) == 0x00031C, "Member 'BP_ChallengeManager_C_Choose_Daily_Challenge::Temp_int_Array_Index_Variable_6' has a wrong offset!");
static_assert(offsetof(BP_ChallengeManager_C_Choose_Daily_Challenge, K2Node_MakeArray_Array_2) == 0x000320, "Member 'BP_ChallengeManager_C_Choose_Daily_Challenge::K2Node_MakeArray_Array_2' has a wrong offset!");
static_assert(offsetof(BP_ChallengeManager_C_Choose_Daily_Challenge, CallFunc_Array_Get_Item_2) == 0x000330, "Member 'BP_ChallengeManager_C_Choose_Daily_Challenge::CallFunc_Array_Get_Item_2' has a wrong offset!");
static_assert(offsetof(BP_ChallengeManager_C_Choose_Daily_Challenge, CallFunc_Array_Length_ReturnValue_2) == 0x000380, "Member 'BP_ChallengeManager_C_Choose_Daily_Challenge::CallFunc_Array_Length_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BP_ChallengeManager_C_Choose_Daily_Challenge, CallFunc_Less_IntInt_ReturnValue_1) == 0x000384, "Member 'BP_ChallengeManager_C_Choose_Daily_Challenge::CallFunc_Less_IntInt_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_ChallengeManager_C_Choose_Daily_Challenge, CallFunc_Conv_NameToString_ReturnValue) == 0x000388, "Member 'BP_ChallengeManager_C_Choose_Daily_Challenge::CallFunc_Conv_NameToString_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_ChallengeManager_C_Choose_Daily_Challenge, CallFunc_Concat_StrStr_ReturnValue) == 0x000398, "Member 'BP_ChallengeManager_C_Choose_Daily_Challenge::CallFunc_Concat_StrStr_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_ChallengeManager_C_Choose_Daily_Challenge, CallFunc_Find_Slot_by_ID_Slot_2) == 0x0003A8, "Member 'BP_ChallengeManager_C_Choose_Daily_Challenge::CallFunc_Find_Slot_by_ID_Slot_2' has a wrong offset!");
static_assert(offsetof(BP_ChallengeManager_C_Choose_Daily_Challenge, CallFunc_Find_Slot_by_ID_Success_2) == 0x0003B0, "Member 'BP_ChallengeManager_C_Choose_Daily_Challenge::CallFunc_Find_Slot_by_ID_Success_2' has a wrong offset!");
static_assert(offsetof(BP_ChallengeManager_C_Choose_Daily_Challenge, CallFunc_Concat_StrStr_ReturnValue_1) == 0x0003B8, "Member 'BP_ChallengeManager_C_Choose_Daily_Challenge::CallFunc_Concat_StrStr_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_ChallengeManager_C_Choose_Daily_Challenge, Temp_int_Loop_Counter_Variable_8) == 0x0003C8, "Member 'BP_ChallengeManager_C_Choose_Daily_Challenge::Temp_int_Loop_Counter_Variable_8' has a wrong offset!");
static_assert(offsetof(BP_ChallengeManager_C_Choose_Daily_Challenge, Temp_int_Loop_Counter_Variable_9) == 0x0003CC, "Member 'BP_ChallengeManager_C_Choose_Daily_Challenge::Temp_int_Loop_Counter_Variable_9' has a wrong offset!");
static_assert(offsetof(BP_ChallengeManager_C_Choose_Daily_Challenge, CallFunc_Add_IntInt_ReturnValue_6) == 0x0003D0, "Member 'BP_ChallengeManager_C_Choose_Daily_Challenge::CallFunc_Add_IntInt_ReturnValue_6' has a wrong offset!");
static_assert(offsetof(BP_ChallengeManager_C_Choose_Daily_Challenge, CallFunc_Less_IntInt_ReturnValue_2) == 0x0003D4, "Member 'BP_ChallengeManager_C_Choose_Daily_Challenge::CallFunc_Less_IntInt_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BP_ChallengeManager_C_Choose_Daily_Challenge, CallFunc_Add_IntInt_ReturnValue_7) == 0x0003D8, "Member 'BP_ChallengeManager_C_Choose_Daily_Challenge::CallFunc_Add_IntInt_ReturnValue_7' has a wrong offset!");
static_assert(offsetof(BP_ChallengeManager_C_Choose_Daily_Challenge, Temp_int_Array_Index_Variable_7) == 0x0003DC, "Member 'BP_ChallengeManager_C_Choose_Daily_Challenge::Temp_int_Array_Index_Variable_7' has a wrong offset!");
static_assert(offsetof(BP_ChallengeManager_C_Choose_Daily_Challenge, Temp_int_Loop_Counter_Variable_10) == 0x0003E0, "Member 'BP_ChallengeManager_C_Choose_Daily_Challenge::Temp_int_Loop_Counter_Variable_10' has a wrong offset!");
static_assert(offsetof(BP_ChallengeManager_C_Choose_Daily_Challenge, CallFunc_Add_IntInt_ReturnValue_8) == 0x0003E4, "Member 'BP_ChallengeManager_C_Choose_Daily_Challenge::CallFunc_Add_IntInt_ReturnValue_8' has a wrong offset!");
static_assert(offsetof(BP_ChallengeManager_C_Choose_Daily_Challenge, Temp_bool_True_if_break_was_hit_Variable) == 0x0003E8, "Member 'BP_ChallengeManager_C_Choose_Daily_Challenge::Temp_bool_True_if_break_was_hit_Variable' has a wrong offset!");
static_assert(offsetof(BP_ChallengeManager_C_Choose_Daily_Challenge, Temp_int_Array_Index_Variable_8) == 0x0003EC, "Member 'BP_ChallengeManager_C_Choose_Daily_Challenge::Temp_int_Array_Index_Variable_8' has a wrong offset!");
static_assert(offsetof(BP_ChallengeManager_C_Choose_Daily_Challenge, CallFunc_Conv_IntToString_ReturnValue) == 0x0003F0, "Member 'BP_ChallengeManager_C_Choose_Daily_Challenge::CallFunc_Conv_IntToString_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_ChallengeManager_C_Choose_Daily_Challenge, Temp_int_Array_Index_Variable_9) == 0x000400, "Member 'BP_ChallengeManager_C_Choose_Daily_Challenge::Temp_int_Array_Index_Variable_9' has a wrong offset!");
static_assert(offsetof(BP_ChallengeManager_C_Choose_Daily_Challenge, Temp_int_Loop_Counter_Variable_11) == 0x000404, "Member 'BP_ChallengeManager_C_Choose_Daily_Challenge::Temp_int_Loop_Counter_Variable_11' has a wrong offset!");
static_assert(offsetof(BP_ChallengeManager_C_Choose_Daily_Challenge, CallFunc_Add_IntInt_ReturnValue_9) == 0x000408, "Member 'BP_ChallengeManager_C_Choose_Daily_Challenge::CallFunc_Add_IntInt_ReturnValue_9' has a wrong offset!");
static_assert(offsetof(BP_ChallengeManager_C_Choose_Daily_Challenge, Temp_int_Array_Index_Variable_10) == 0x00040C, "Member 'BP_ChallengeManager_C_Choose_Daily_Challenge::Temp_int_Array_Index_Variable_10' has a wrong offset!");
static_assert(offsetof(BP_ChallengeManager_C_Choose_Daily_Challenge, CallFunc_NotEqual_NameName_ReturnValue_1) == 0x000410, "Member 'BP_ChallengeManager_C_Choose_Daily_Challenge::CallFunc_NotEqual_NameName_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_ChallengeManager_C_Choose_Daily_Challenge, CallFunc_BooleanAND_ReturnValue) == 0x000411, "Member 'BP_ChallengeManager_C_Choose_Daily_Challenge::CallFunc_BooleanAND_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_ChallengeManager_C_Choose_Daily_Challenge, Temp_int_Loop_Counter_Variable_12) == 0x000414, "Member 'BP_ChallengeManager_C_Choose_Daily_Challenge::Temp_int_Loop_Counter_Variable_12' has a wrong offset!");
static_assert(offsetof(BP_ChallengeManager_C_Choose_Daily_Challenge, CallFunc_Subtract_IntInt_ReturnValue_2) == 0x000418, "Member 'BP_ChallengeManager_C_Choose_Daily_Challenge::CallFunc_Subtract_IntInt_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BP_ChallengeManager_C_Choose_Daily_Challenge, CallFunc_GreaterEqual_IntInt_ReturnValue_2) == 0x00041C, "Member 'BP_ChallengeManager_C_Choose_Daily_Challenge::CallFunc_GreaterEqual_IntInt_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BP_ChallengeManager_C_Choose_Daily_Challenge, Temp_int_Variable) == 0x000420, "Member 'BP_ChallengeManager_C_Choose_Daily_Challenge::Temp_int_Variable' has a wrong offset!");
static_assert(offsetof(BP_ChallengeManager_C_Choose_Daily_Challenge, CallFunc_Add_IntInt_ReturnValue_10) == 0x000424, "Member 'BP_ChallengeManager_C_Choose_Daily_Challenge::CallFunc_Add_IntInt_ReturnValue_10' has a wrong offset!");
static_assert(offsetof(BP_ChallengeManager_C_Choose_Daily_Challenge, CallFunc_Array_Length_ReturnValue_3) == 0x000428, "Member 'BP_ChallengeManager_C_Choose_Daily_Challenge::CallFunc_Array_Length_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(BP_ChallengeManager_C_Choose_Daily_Challenge, CallFunc_Greater_IntInt_ReturnValue) == 0x00042C, "Member 'BP_ChallengeManager_C_Choose_Daily_Challenge::CallFunc_Greater_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_ChallengeManager_C_Choose_Daily_Challenge, CallFunc_Not_PreBool_ReturnValue_1) == 0x00042D, "Member 'BP_ChallengeManager_C_Choose_Daily_Challenge::CallFunc_Not_PreBool_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_ChallengeManager_C_Choose_Daily_Challenge, CallFunc_DataProviderFindTableByAssetTable_ReturnValue) == 0x000430, "Member 'BP_ChallengeManager_C_Choose_Daily_Challenge::CallFunc_DataProviderFindTableByAssetTable_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_ChallengeManager_C_Choose_Daily_Challenge, CallFunc_Array_Length_ReturnValue_4) == 0x000438, "Member 'BP_ChallengeManager_C_Choose_Daily_Challenge::CallFunc_Array_Length_ReturnValue_4' has a wrong offset!");
static_assert(offsetof(BP_ChallengeManager_C_Choose_Daily_Challenge, CallFunc_DataProviderFindTableByAssetTable_ReturnValue_1) == 0x000440, "Member 'BP_ChallengeManager_C_Choose_Daily_Challenge::CallFunc_DataProviderFindTableByAssetTable_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_ChallengeManager_C_Choose_Daily_Challenge, CallFunc_Subtract_IntInt_ReturnValue_3) == 0x000448, "Member 'BP_ChallengeManager_C_Choose_Daily_Challenge::CallFunc_Subtract_IntInt_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(BP_ChallengeManager_C_Choose_Daily_Challenge, Temp_int_Array_Index_Variable_11) == 0x00044C, "Member 'BP_ChallengeManager_C_Choose_Daily_Challenge::Temp_int_Array_Index_Variable_11' has a wrong offset!");
static_assert(offsetof(BP_ChallengeManager_C_Choose_Daily_Challenge, CallFunc_Max_ReturnValue) == 0x000450, "Member 'BP_ChallengeManager_C_Choose_Daily_Challenge::CallFunc_Max_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_ChallengeManager_C_Choose_Daily_Challenge, CallFunc_Array_Get_Item_3) == 0x000454, "Member 'BP_ChallengeManager_C_Choose_Daily_Challenge::CallFunc_Array_Get_Item_3' has a wrong offset!");
static_assert(offsetof(BP_ChallengeManager_C_Choose_Daily_Challenge, CallFunc_GetDataTableRowFromName_OutRow) == 0x000460, "Member 'BP_ChallengeManager_C_Choose_Daily_Challenge::CallFunc_GetDataTableRowFromName_OutRow' has a wrong offset!");
static_assert(offsetof(BP_ChallengeManager_C_Choose_Daily_Challenge, CallFunc_GetDataTableRowFromName_ReturnValue) == 0x000560, "Member 'BP_ChallengeManager_C_Choose_Daily_Challenge::CallFunc_GetDataTableRowFromName_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_ChallengeManager_C_Choose_Daily_Challenge, CallFunc_Conv_NameToString_ReturnValue_1) == 0x000568, "Member 'BP_ChallengeManager_C_Choose_Daily_Challenge::CallFunc_Conv_NameToString_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_ChallengeManager_C_Choose_Daily_Challenge, CallFunc_Concat_StrStr_ReturnValue_2) == 0x000578, "Member 'BP_ChallengeManager_C_Choose_Daily_Challenge::CallFunc_Concat_StrStr_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BP_ChallengeManager_C_Choose_Daily_Challenge, CallFunc_Concat_StrStr_ReturnValue_3) == 0x000588, "Member 'BP_ChallengeManager_C_Choose_Daily_Challenge::CallFunc_Concat_StrStr_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(BP_ChallengeManager_C_Choose_Daily_Challenge, CallFunc_GetEnumeratorUserFriendlyName_ReturnValue) == 0x000598, "Member 'BP_ChallengeManager_C_Choose_Daily_Challenge::CallFunc_GetEnumeratorUserFriendlyName_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_ChallengeManager_C_Choose_Daily_Challenge, CallFunc_Array_Contains_ReturnValue) == 0x0005A8, "Member 'BP_ChallengeManager_C_Choose_Daily_Challenge::CallFunc_Array_Contains_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_ChallengeManager_C_Choose_Daily_Challenge, CallFunc_Concat_StrStr_ReturnValue_4) == 0x0005B0, "Member 'BP_ChallengeManager_C_Choose_Daily_Challenge::CallFunc_Concat_StrStr_ReturnValue_4' has a wrong offset!");
static_assert(offsetof(BP_ChallengeManager_C_Choose_Daily_Challenge, CallFunc_Concat_StrStr_ReturnValue_5) == 0x0005C0, "Member 'BP_ChallengeManager_C_Choose_Daily_Challenge::CallFunc_Concat_StrStr_ReturnValue_5' has a wrong offset!");
static_assert(offsetof(BP_ChallengeManager_C_Choose_Daily_Challenge, CallFunc_BooleanOR_ReturnValue) == 0x0005D0, "Member 'BP_ChallengeManager_C_Choose_Daily_Challenge::CallFunc_BooleanOR_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_ChallengeManager_C_Choose_Daily_Challenge, K2Node_MakeArray_Array_3) == 0x0005D8, "Member 'BP_ChallengeManager_C_Choose_Daily_Challenge::K2Node_MakeArray_Array_3' has a wrong offset!");
static_assert(offsetof(BP_ChallengeManager_C_Choose_Daily_Challenge, CallFunc_Array_Length_ReturnValue_5) == 0x0005E8, "Member 'BP_ChallengeManager_C_Choose_Daily_Challenge::CallFunc_Array_Length_ReturnValue_5' has a wrong offset!");
static_assert(offsetof(BP_ChallengeManager_C_Choose_Daily_Challenge, CallFunc_Array_Length_ReturnValue_6) == 0x0005EC, "Member 'BP_ChallengeManager_C_Choose_Daily_Challenge::CallFunc_Array_Length_ReturnValue_6' has a wrong offset!");
static_assert(offsetof(BP_ChallengeManager_C_Choose_Daily_Challenge, Temp_int_Array_Index_Variable_12) == 0x0005F0, "Member 'BP_ChallengeManager_C_Choose_Daily_Challenge::Temp_int_Array_Index_Variable_12' has a wrong offset!");
static_assert(offsetof(BP_ChallengeManager_C_Choose_Daily_Challenge, CallFunc_Greater_IntInt_ReturnValue_1) == 0x0005F4, "Member 'BP_ChallengeManager_C_Choose_Daily_Challenge::CallFunc_Greater_IntInt_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_ChallengeManager_C_Choose_Daily_Challenge, CallFunc_Array_Get_Item_4) == 0x0005F8, "Member 'BP_ChallengeManager_C_Choose_Daily_Challenge::CallFunc_Array_Get_Item_4' has a wrong offset!");
static_assert(offsetof(BP_ChallengeManager_C_Choose_Daily_Challenge, CallFunc_Not_PreBool_ReturnValue_2) == 0x000648, "Member 'BP_ChallengeManager_C_Choose_Daily_Challenge::CallFunc_Not_PreBool_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BP_ChallengeManager_C_Choose_Daily_Challenge, CallFunc_Find_Slot_by_ID_Slot_3) == 0x000650, "Member 'BP_ChallengeManager_C_Choose_Daily_Challenge::CallFunc_Find_Slot_by_ID_Slot_3' has a wrong offset!");
static_assert(offsetof(BP_ChallengeManager_C_Choose_Daily_Challenge, CallFunc_Find_Slot_by_ID_Success_3) == 0x000658, "Member 'BP_ChallengeManager_C_Choose_Daily_Challenge::CallFunc_Find_Slot_by_ID_Success_3' has a wrong offset!");
static_assert(offsetof(BP_ChallengeManager_C_Choose_Daily_Challenge, Temp_int_Loop_Counter_Variable_13) == 0x00065C, "Member 'BP_ChallengeManager_C_Choose_Daily_Challenge::Temp_int_Loop_Counter_Variable_13' has a wrong offset!");
static_assert(offsetof(BP_ChallengeManager_C_Choose_Daily_Challenge, Temp_int_Array_Index_Variable_13) == 0x000660, "Member 'BP_ChallengeManager_C_Choose_Daily_Challenge::Temp_int_Array_Index_Variable_13' has a wrong offset!");
static_assert(offsetof(BP_ChallengeManager_C_Choose_Daily_Challenge, CallFunc_Less_IntInt_ReturnValue_3) == 0x000664, "Member 'BP_ChallengeManager_C_Choose_Daily_Challenge::CallFunc_Less_IntInt_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(BP_ChallengeManager_C_Choose_Daily_Challenge, CallFunc_Add_IntInt_ReturnValue_11) == 0x000668, "Member 'BP_ChallengeManager_C_Choose_Daily_Challenge::CallFunc_Add_IntInt_ReturnValue_11' has a wrong offset!");
static_assert(offsetof(BP_ChallengeManager_C_Choose_Daily_Challenge, CallFunc_Array_Get_Item_5) == 0x00066C, "Member 'BP_ChallengeManager_C_Choose_Daily_Challenge::CallFunc_Array_Get_Item_5' has a wrong offset!");
static_assert(offsetof(BP_ChallengeManager_C_Choose_Daily_Challenge, CallFunc_Array_Length_ReturnValue_7) == 0x000674, "Member 'BP_ChallengeManager_C_Choose_Daily_Challenge::CallFunc_Array_Length_ReturnValue_7' has a wrong offset!");
static_assert(offsetof(BP_ChallengeManager_C_Choose_Daily_Challenge, CallFunc_Conv_NameToString_ReturnValue_2) == 0x000678, "Member 'BP_ChallengeManager_C_Choose_Daily_Challenge::CallFunc_Conv_NameToString_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BP_ChallengeManager_C_Choose_Daily_Challenge, CallFunc_Subtract_IntInt_ReturnValue_4) == 0x000688, "Member 'BP_ChallengeManager_C_Choose_Daily_Challenge::CallFunc_Subtract_IntInt_ReturnValue_4' has a wrong offset!");
static_assert(offsetof(BP_ChallengeManager_C_Choose_Daily_Challenge, CallFunc_Concat_StrStr_ReturnValue_6) == 0x000690, "Member 'BP_ChallengeManager_C_Choose_Daily_Challenge::CallFunc_Concat_StrStr_ReturnValue_6' has a wrong offset!");
static_assert(offsetof(BP_ChallengeManager_C_Choose_Daily_Challenge, CallFunc_Max_ReturnValue_1) == 0x0006A0, "Member 'BP_ChallengeManager_C_Choose_Daily_Challenge::CallFunc_Max_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_ChallengeManager_C_Choose_Daily_Challenge, CallFunc_Concat_StrStr_ReturnValue_7) == 0x0006A8, "Member 'BP_ChallengeManager_C_Choose_Daily_Challenge::CallFunc_Concat_StrStr_ReturnValue_7' has a wrong offset!");
static_assert(offsetof(BP_ChallengeManager_C_Choose_Daily_Challenge, CallFunc_DataProviderFindTableByAssetTable_ReturnValue_2) == 0x0006B8, "Member 'BP_ChallengeManager_C_Choose_Daily_Challenge::CallFunc_DataProviderFindTableByAssetTable_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BP_ChallengeManager_C_Choose_Daily_Challenge, CallFunc_DataProviderFindTableByAssetTable_ReturnValue_3) == 0x0006C0, "Member 'BP_ChallengeManager_C_Choose_Daily_Challenge::CallFunc_DataProviderFindTableByAssetTable_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(BP_ChallengeManager_C_Choose_Daily_Challenge, CallFunc_GetDataTableRowFromName_OutRow_1) == 0x0006C8, "Member 'BP_ChallengeManager_C_Choose_Daily_Challenge::CallFunc_GetDataTableRowFromName_OutRow_1' has a wrong offset!");
static_assert(offsetof(BP_ChallengeManager_C_Choose_Daily_Challenge, CallFunc_GetDataTableRowFromName_ReturnValue_1) == 0x0007C8, "Member 'BP_ChallengeManager_C_Choose_Daily_Challenge::CallFunc_GetDataTableRowFromName_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_ChallengeManager_C_Choose_Daily_Challenge, CallFunc_GetDataTableRowFromName_OutRow_2) == 0x0007D0, "Member 'BP_ChallengeManager_C_Choose_Daily_Challenge::CallFunc_GetDataTableRowFromName_OutRow_2' has a wrong offset!");
static_assert(offsetof(BP_ChallengeManager_C_Choose_Daily_Challenge, CallFunc_GetDataTableRowFromName_ReturnValue_2) == 0x0008D0, "Member 'BP_ChallengeManager_C_Choose_Daily_Challenge::CallFunc_GetDataTableRowFromName_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BP_ChallengeManager_C_Choose_Daily_Challenge, CallFunc_GetEnumeratorUserFriendlyName_ReturnValue_1) == 0x0008D8, "Member 'BP_ChallengeManager_C_Choose_Daily_Challenge::CallFunc_GetEnumeratorUserFriendlyName_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_ChallengeManager_C_Choose_Daily_Challenge, CallFunc_NotEqual_ByteByte_ReturnValue) == 0x0008E8, "Member 'BP_ChallengeManager_C_Choose_Daily_Challenge::CallFunc_NotEqual_ByteByte_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_ChallengeManager_C_Choose_Daily_Challenge, CallFunc_Concat_StrStr_ReturnValue_8) == 0x0008F0, "Member 'BP_ChallengeManager_C_Choose_Daily_Challenge::CallFunc_Concat_StrStr_ReturnValue_8' has a wrong offset!");
static_assert(offsetof(BP_ChallengeManager_C_Choose_Daily_Challenge, CallFunc_Array_Add_ReturnValue) == 0x000900, "Member 'BP_ChallengeManager_C_Choose_Daily_Challenge::CallFunc_Array_Add_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_ChallengeManager_C_Choose_Daily_Challenge, CallFunc_Concat_StrStr_ReturnValue_9) == 0x000908, "Member 'BP_ChallengeManager_C_Choose_Daily_Challenge::CallFunc_Concat_StrStr_ReturnValue_9' has a wrong offset!");
static_assert(offsetof(BP_ChallengeManager_C_Choose_Daily_Challenge, CallFunc_NotEqual_ByteByte_ReturnValue_1) == 0x000918, "Member 'BP_ChallengeManager_C_Choose_Daily_Challenge::CallFunc_NotEqual_ByteByte_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_ChallengeManager_C_Choose_Daily_Challenge, CallFunc_NotEqual_ByteByte_ReturnValue_2) == 0x000919, "Member 'BP_ChallengeManager_C_Choose_Daily_Challenge::CallFunc_NotEqual_ByteByte_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BP_ChallengeManager_C_Choose_Daily_Challenge, CallFunc_Array_Contains_ReturnValue_1) == 0x00091A, "Member 'BP_ChallengeManager_C_Choose_Daily_Challenge::CallFunc_Array_Contains_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_ChallengeManager_C_Choose_Daily_Challenge, CallFunc_BooleanAND_ReturnValue_1) == 0x00091B, "Member 'BP_ChallengeManager_C_Choose_Daily_Challenge::CallFunc_BooleanAND_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_ChallengeManager_C_Choose_Daily_Challenge, CallFunc_BooleanAND_ReturnValue_2) == 0x00091C, "Member 'BP_ChallengeManager_C_Choose_Daily_Challenge::CallFunc_BooleanAND_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BP_ChallengeManager_C_Choose_Daily_Challenge, Temp_int_Loop_Counter_Variable_14) == 0x000920, "Member 'BP_ChallengeManager_C_Choose_Daily_Challenge::Temp_int_Loop_Counter_Variable_14' has a wrong offset!");
static_assert(offsetof(BP_ChallengeManager_C_Choose_Daily_Challenge, CallFunc_DataProviderFindTableByAssetTable_ReturnValue_4) == 0x000928, "Member 'BP_ChallengeManager_C_Choose_Daily_Challenge::CallFunc_DataProviderFindTableByAssetTable_ReturnValue_4' has a wrong offset!");
static_assert(offsetof(BP_ChallengeManager_C_Choose_Daily_Challenge, CallFunc_Add_IntInt_ReturnValue_12) == 0x000930, "Member 'BP_ChallengeManager_C_Choose_Daily_Challenge::CallFunc_Add_IntInt_ReturnValue_12' has a wrong offset!");
static_assert(offsetof(BP_ChallengeManager_C_Choose_Daily_Challenge, CallFunc_GetDataTableRowFromName_OutRow_3) == 0x000938, "Member 'BP_ChallengeManager_C_Choose_Daily_Challenge::CallFunc_GetDataTableRowFromName_OutRow_3' has a wrong offset!");
static_assert(offsetof(BP_ChallengeManager_C_Choose_Daily_Challenge, CallFunc_GetDataTableRowFromName_ReturnValue_3) == 0x000A38, "Member 'BP_ChallengeManager_C_Choose_Daily_Challenge::CallFunc_GetDataTableRowFromName_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(BP_ChallengeManager_C_Choose_Daily_Challenge, CallFunc_NotEqual_ByteByte_ReturnValue_3) == 0x000A39, "Member 'BP_ChallengeManager_C_Choose_Daily_Challenge::CallFunc_NotEqual_ByteByte_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(BP_ChallengeManager_C_Choose_Daily_Challenge, CallFunc_NotEqual_ByteByte_ReturnValue_4) == 0x000A3A, "Member 'BP_ChallengeManager_C_Choose_Daily_Challenge::CallFunc_NotEqual_ByteByte_ReturnValue_4' has a wrong offset!");
static_assert(offsetof(BP_ChallengeManager_C_Choose_Daily_Challenge, CallFunc_BooleanAND_ReturnValue_3) == 0x000A3B, "Member 'BP_ChallengeManager_C_Choose_Daily_Challenge::CallFunc_BooleanAND_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(BP_ChallengeManager_C_Choose_Daily_Challenge, CallFunc_Map_Find_Value) == 0x000A40, "Member 'BP_ChallengeManager_C_Choose_Daily_Challenge::CallFunc_Map_Find_Value' has a wrong offset!");
static_assert(offsetof(BP_ChallengeManager_C_Choose_Daily_Challenge, CallFunc_Map_Find_ReturnValue) == 0x000A48, "Member 'BP_ChallengeManager_C_Choose_Daily_Challenge::CallFunc_Map_Find_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_ChallengeManager_C_Choose_Daily_Challenge, CallFunc_Less_DateTimeDateTime_ReturnValue) == 0x000A49, "Member 'BP_ChallengeManager_C_Choose_Daily_Challenge::CallFunc_Less_DateTimeDateTime_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_ChallengeManager_C_Choose_Daily_Challenge, Temp_int_Array_Index_Variable_14) == 0x000A4C, "Member 'BP_ChallengeManager_C_Choose_Daily_Challenge::Temp_int_Array_Index_Variable_14' has a wrong offset!");
static_assert(offsetof(BP_ChallengeManager_C_Choose_Daily_Challenge, CallFunc_Array_Length_ReturnValue_8) == 0x000A50, "Member 'BP_ChallengeManager_C_Choose_Daily_Challenge::CallFunc_Array_Length_ReturnValue_8' has a wrong offset!");
static_assert(offsetof(BP_ChallengeManager_C_Choose_Daily_Challenge, CallFunc_Conv_IntToString_ReturnValue_1) == 0x000A58, "Member 'BP_ChallengeManager_C_Choose_Daily_Challenge::CallFunc_Conv_IntToString_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_ChallengeManager_C_Choose_Daily_Challenge, CallFunc_Concat_StrStr_ReturnValue_10) == 0x000A68, "Member 'BP_ChallengeManager_C_Choose_Daily_Challenge::CallFunc_Concat_StrStr_ReturnValue_10' has a wrong offset!");
static_assert(offsetof(BP_ChallengeManager_C_Choose_Daily_Challenge, CallFunc_Concat_StrStr_ReturnValue_11) == 0x000A78, "Member 'BP_ChallengeManager_C_Choose_Daily_Challenge::CallFunc_Concat_StrStr_ReturnValue_11' has a wrong offset!");
static_assert(offsetof(BP_ChallengeManager_C_Choose_Daily_Challenge, CallFunc_Conv_NameToString_ReturnValue_3) == 0x000A88, "Member 'BP_ChallengeManager_C_Choose_Daily_Challenge::CallFunc_Conv_NameToString_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(BP_ChallengeManager_C_Choose_Daily_Challenge, CallFunc_Concat_StrStr_ReturnValue_12) == 0x000A98, "Member 'BP_ChallengeManager_C_Choose_Daily_Challenge::CallFunc_Concat_StrStr_ReturnValue_12' has a wrong offset!");
static_assert(offsetof(BP_ChallengeManager_C_Choose_Daily_Challenge, Temp_int_Loop_Counter_Variable_15) == 0x000AA8, "Member 'BP_ChallengeManager_C_Choose_Daily_Challenge::Temp_int_Loop_Counter_Variable_15' has a wrong offset!");
static_assert(offsetof(BP_ChallengeManager_C_Choose_Daily_Challenge, CallFunc_Concat_StrStr_ReturnValue_13) == 0x000AB0, "Member 'BP_ChallengeManager_C_Choose_Daily_Challenge::CallFunc_Concat_StrStr_ReturnValue_13' has a wrong offset!");
static_assert(offsetof(BP_ChallengeManager_C_Choose_Daily_Challenge, CallFunc_Subtract_IntInt_ReturnValue_5) == 0x000AC0, "Member 'BP_ChallengeManager_C_Choose_Daily_Challenge::CallFunc_Subtract_IntInt_ReturnValue_5' has a wrong offset!");
static_assert(offsetof(BP_ChallengeManager_C_Choose_Daily_Challenge, CallFunc_GreaterEqual_IntInt_ReturnValue_3) == 0x000AC4, "Member 'BP_ChallengeManager_C_Choose_Daily_Challenge::CallFunc_GreaterEqual_IntInt_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(BP_ChallengeManager_C_Choose_Daily_Challenge, CallFunc_ToString__DateTime__String) == 0x000AC8, "Member 'BP_ChallengeManager_C_Choose_Daily_Challenge::CallFunc_ToString__DateTime__String' has a wrong offset!");
static_assert(offsetof(BP_ChallengeManager_C_Choose_Daily_Challenge, CallFunc_Conv_IntToString_ReturnValue_2) == 0x000AD8, "Member 'BP_ChallengeManager_C_Choose_Daily_Challenge::CallFunc_Conv_IntToString_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BP_ChallengeManager_C_Choose_Daily_Challenge, CallFunc_Concat_StrStr_ReturnValue_14) == 0x000AE8, "Member 'BP_ChallengeManager_C_Choose_Daily_Challenge::CallFunc_Concat_StrStr_ReturnValue_14' has a wrong offset!");
static_assert(offsetof(BP_ChallengeManager_C_Choose_Daily_Challenge, CallFunc_Concat_StrStr_ReturnValue_15) == 0x000AF8, "Member 'BP_ChallengeManager_C_Choose_Daily_Challenge::CallFunc_Concat_StrStr_ReturnValue_15' has a wrong offset!");
static_assert(offsetof(BP_ChallengeManager_C_Choose_Daily_Challenge, CallFunc_LessEqual_IntInt_ReturnValue) == 0x000B08, "Member 'BP_ChallengeManager_C_Choose_Daily_Challenge::CallFunc_LessEqual_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_ChallengeManager_C_Choose_Daily_Challenge, CallFunc_MakeLiteralInt_ReturnValue) == 0x000B0C, "Member 'BP_ChallengeManager_C_Choose_Daily_Challenge::CallFunc_MakeLiteralInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_ChallengeManager_C_Choose_Daily_Challenge, CallFunc_BooleanAND_ReturnValue_4) == 0x000B10, "Member 'BP_ChallengeManager_C_Choose_Daily_Challenge::CallFunc_BooleanAND_ReturnValue_4' has a wrong offset!");
static_assert(offsetof(BP_ChallengeManager_C_Choose_Daily_Challenge, CallFunc_Conv_IntToString_ReturnValue_3) == 0x000B18, "Member 'BP_ChallengeManager_C_Choose_Daily_Challenge::CallFunc_Conv_IntToString_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(BP_ChallengeManager_C_Choose_Daily_Challenge, CallFunc_MakeLiteralInt_ReturnValue_1) == 0x000B28, "Member 'BP_ChallengeManager_C_Choose_Daily_Challenge::CallFunc_MakeLiteralInt_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_ChallengeManager_C_Choose_Daily_Challenge, CallFunc_Conv_IntToString_ReturnValue_4) == 0x000B30, "Member 'BP_ChallengeManager_C_Choose_Daily_Challenge::CallFunc_Conv_IntToString_ReturnValue_4' has a wrong offset!");
static_assert(offsetof(BP_ChallengeManager_C_Choose_Daily_Challenge, Temp_int_Array_Index_Variable_15) == 0x000B40, "Member 'BP_ChallengeManager_C_Choose_Daily_Challenge::Temp_int_Array_Index_Variable_15' has a wrong offset!");
static_assert(offsetof(BP_ChallengeManager_C_Choose_Daily_Challenge, CallFunc_Conv_NameToString_ReturnValue_4) == 0x000B48, "Member 'BP_ChallengeManager_C_Choose_Daily_Challenge::CallFunc_Conv_NameToString_ReturnValue_4' has a wrong offset!");
static_assert(offsetof(BP_ChallengeManager_C_Choose_Daily_Challenge, CallFunc_Concat_StrStr_ReturnValue_16) == 0x000B58, "Member 'BP_ChallengeManager_C_Choose_Daily_Challenge::CallFunc_Concat_StrStr_ReturnValue_16' has a wrong offset!");
static_assert(offsetof(BP_ChallengeManager_C_Choose_Daily_Challenge, CallFunc_Concat_StrStr_ReturnValue_17) == 0x000B68, "Member 'BP_ChallengeManager_C_Choose_Daily_Challenge::CallFunc_Concat_StrStr_ReturnValue_17' has a wrong offset!");
static_assert(offsetof(BP_ChallengeManager_C_Choose_Daily_Challenge, Temp_struct_Variable) == 0x000B78, "Member 'BP_ChallengeManager_C_Choose_Daily_Challenge::Temp_struct_Variable' has a wrong offset!");
static_assert(offsetof(BP_ChallengeManager_C_Choose_Daily_Challenge, CallFunc_Array_Get_Item_6) == 0x000B80, "Member 'BP_ChallengeManager_C_Choose_Daily_Challenge::CallFunc_Array_Get_Item_6' has a wrong offset!");
static_assert(offsetof(BP_ChallengeManager_C_Choose_Daily_Challenge, CallFunc_Array_Length_ReturnValue_9) == 0x000B88, "Member 'BP_ChallengeManager_C_Choose_Daily_Challenge::CallFunc_Array_Length_ReturnValue_9' has a wrong offset!");
static_assert(offsetof(BP_ChallengeManager_C_Choose_Daily_Challenge, CallFunc_Conv_NameToString_ReturnValue_5) == 0x000B90, "Member 'BP_ChallengeManager_C_Choose_Daily_Challenge::CallFunc_Conv_NameToString_ReturnValue_5' has a wrong offset!");
static_assert(offsetof(BP_ChallengeManager_C_Choose_Daily_Challenge, CallFunc_Less_IntInt_ReturnValue_4) == 0x000BA0, "Member 'BP_ChallengeManager_C_Choose_Daily_Challenge::CallFunc_Less_IntInt_ReturnValue_4' has a wrong offset!");
static_assert(offsetof(BP_ChallengeManager_C_Choose_Daily_Challenge, CallFunc_Concat_StrStr_ReturnValue_18) == 0x000BA8, "Member 'BP_ChallengeManager_C_Choose_Daily_Challenge::CallFunc_Concat_StrStr_ReturnValue_18' has a wrong offset!");
static_assert(offsetof(BP_ChallengeManager_C_Choose_Daily_Challenge, CallFunc_Array_Length_ReturnValue_10) == 0x000BB8, "Member 'BP_ChallengeManager_C_Choose_Daily_Challenge::CallFunc_Array_Length_ReturnValue_10' has a wrong offset!");
static_assert(offsetof(BP_ChallengeManager_C_Choose_Daily_Challenge, CallFunc_Conv_IntToString_ReturnValue_5) == 0x000BC0, "Member 'BP_ChallengeManager_C_Choose_Daily_Challenge::CallFunc_Conv_IntToString_ReturnValue_5' has a wrong offset!");
static_assert(offsetof(BP_ChallengeManager_C_Choose_Daily_Challenge, CallFunc_Greater_IntInt_ReturnValue_2) == 0x000BD0, "Member 'BP_ChallengeManager_C_Choose_Daily_Challenge::CallFunc_Greater_IntInt_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BP_ChallengeManager_C_Choose_Daily_Challenge, CallFunc_Concat_StrStr_ReturnValue_19) == 0x000BD8, "Member 'BP_ChallengeManager_C_Choose_Daily_Challenge::CallFunc_Concat_StrStr_ReturnValue_19' has a wrong offset!");
static_assert(offsetof(BP_ChallengeManager_C_Choose_Daily_Challenge, CallFunc_Not_PreBool_ReturnValue_3) == 0x000BE8, "Member 'BP_ChallengeManager_C_Choose_Daily_Challenge::CallFunc_Not_PreBool_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(BP_ChallengeManager_C_Choose_Daily_Challenge, CallFunc_Concat_StrStr_ReturnValue_20) == 0x000BF0, "Member 'BP_ChallengeManager_C_Choose_Daily_Challenge::CallFunc_Concat_StrStr_ReturnValue_20' has a wrong offset!");
static_assert(offsetof(BP_ChallengeManager_C_Choose_Daily_Challenge, CallFunc_Array_Length_ReturnValue_11) == 0x000C00, "Member 'BP_ChallengeManager_C_Choose_Daily_Challenge::CallFunc_Array_Length_ReturnValue_11' has a wrong offset!");
static_assert(offsetof(BP_ChallengeManager_C_Choose_Daily_Challenge, CallFunc_RandomInteger_ReturnValue) == 0x000C04, "Member 'BP_ChallengeManager_C_Choose_Daily_Challenge::CallFunc_RandomInteger_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_ChallengeManager_C_Choose_Daily_Challenge, CallFunc_Array_Get_Item_7) == 0x000C08, "Member 'BP_ChallengeManager_C_Choose_Daily_Challenge::CallFunc_Array_Get_Item_7' has a wrong offset!");
static_assert(offsetof(BP_ChallengeManager_C_Choose_Daily_Challenge, CallFunc_ToString__DateTime__String_1) == 0x000C10, "Member 'BP_ChallengeManager_C_Choose_Daily_Challenge::CallFunc_ToString__DateTime__String_1' has a wrong offset!");
static_assert(offsetof(BP_ChallengeManager_C_Choose_Daily_Challenge, CallFunc_GetEnumeratorUserFriendlyName_ReturnValue_2) == 0x000C20, "Member 'BP_ChallengeManager_C_Choose_Daily_Challenge::CallFunc_GetEnumeratorUserFriendlyName_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BP_ChallengeManager_C_Choose_Daily_Challenge, CallFunc_Concat_StrStr_ReturnValue_21) == 0x000C30, "Member 'BP_ChallengeManager_C_Choose_Daily_Challenge::CallFunc_Concat_StrStr_ReturnValue_21' has a wrong offset!");
static_assert(offsetof(BP_ChallengeManager_C_Choose_Daily_Challenge, CallFunc_Concat_StrStr_ReturnValue_22) == 0x000C40, "Member 'BP_ChallengeManager_C_Choose_Daily_Challenge::CallFunc_Concat_StrStr_ReturnValue_22' has a wrong offset!");
static_assert(offsetof(BP_ChallengeManager_C_Choose_Daily_Challenge, CallFunc_Concat_StrStr_ReturnValue_23) == 0x000C50, "Member 'BP_ChallengeManager_C_Choose_Daily_Challenge::CallFunc_Concat_StrStr_ReturnValue_23' has a wrong offset!");
static_assert(offsetof(BP_ChallengeManager_C_Choose_Daily_Challenge, CallFunc_Concat_StrStr_ReturnValue_24) == 0x000C60, "Member 'BP_ChallengeManager_C_Choose_Daily_Challenge::CallFunc_Concat_StrStr_ReturnValue_24' has a wrong offset!");
static_assert(offsetof(BP_ChallengeManager_C_Choose_Daily_Challenge, CallFunc_Array_Get_Item_8) == 0x000C70, "Member 'BP_ChallengeManager_C_Choose_Daily_Challenge::CallFunc_Array_Get_Item_8' has a wrong offset!");
static_assert(offsetof(BP_ChallengeManager_C_Choose_Daily_Challenge, CallFunc_Array_Length_ReturnValue_12) == 0x000C78, "Member 'BP_ChallengeManager_C_Choose_Daily_Challenge::CallFunc_Array_Length_ReturnValue_12' has a wrong offset!");
static_assert(offsetof(BP_ChallengeManager_C_Choose_Daily_Challenge, CallFunc_Conv_NameToString_ReturnValue_6) == 0x000C80, "Member 'BP_ChallengeManager_C_Choose_Daily_Challenge::CallFunc_Conv_NameToString_ReturnValue_6' has a wrong offset!");
static_assert(offsetof(BP_ChallengeManager_C_Choose_Daily_Challenge, CallFunc_Less_IntInt_ReturnValue_5) == 0x000C90, "Member 'BP_ChallengeManager_C_Choose_Daily_Challenge::CallFunc_Less_IntInt_ReturnValue_5' has a wrong offset!");
static_assert(offsetof(BP_ChallengeManager_C_Choose_Daily_Challenge, CallFunc_Concat_StrStr_ReturnValue_25) == 0x000C98, "Member 'BP_ChallengeManager_C_Choose_Daily_Challenge::CallFunc_Concat_StrStr_ReturnValue_25' has a wrong offset!");
static_assert(offsetof(BP_ChallengeManager_C_Choose_Daily_Challenge, CallFunc_Concat_StrStr_ReturnValue_26) == 0x000CA8, "Member 'BP_ChallengeManager_C_Choose_Daily_Challenge::CallFunc_Concat_StrStr_ReturnValue_26' has a wrong offset!");
static_assert(offsetof(BP_ChallengeManager_C_Choose_Daily_Challenge, Temp_int_Variable_1) == 0x000CB8, "Member 'BP_ChallengeManager_C_Choose_Daily_Challenge::Temp_int_Variable_1' has a wrong offset!");
static_assert(offsetof(BP_ChallengeManager_C_Choose_Daily_Challenge, CallFunc_Add_IntInt_ReturnValue_13) == 0x000CBC, "Member 'BP_ChallengeManager_C_Choose_Daily_Challenge::CallFunc_Add_IntInt_ReturnValue_13' has a wrong offset!");
static_assert(offsetof(BP_ChallengeManager_C_Choose_Daily_Challenge, CallFunc_Conv_IntToByte_ReturnValue) == 0x000CC0, "Member 'BP_ChallengeManager_C_Choose_Daily_Challenge::CallFunc_Conv_IntToByte_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_ChallengeManager_C_Choose_Daily_Challenge, CallFunc_GetEnumeratorValueFromIndex_ReturnValue) == 0x000CC1, "Member 'BP_ChallengeManager_C_Choose_Daily_Challenge::CallFunc_GetEnumeratorValueFromIndex_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_ChallengeManager_C_Choose_Daily_Challenge, CallFunc_Conv_ByteToInt_ReturnValue) == 0x000CC4, "Member 'BP_ChallengeManager_C_Choose_Daily_Challenge::CallFunc_Conv_ByteToInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_ChallengeManager_C_Choose_Daily_Challenge, Temp_int_Variable_2) == 0x000CC8, "Member 'BP_ChallengeManager_C_Choose_Daily_Challenge::Temp_int_Variable_2' has a wrong offset!");
static_assert(offsetof(BP_ChallengeManager_C_Choose_Daily_Challenge, CallFunc_Conv_IntToByte_ReturnValue_1) == 0x000CCC, "Member 'BP_ChallengeManager_C_Choose_Daily_Challenge::CallFunc_Conv_IntToByte_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_ChallengeManager_C_Choose_Daily_Challenge, CallFunc_GetValidValue_ReturnValue) == 0x000CCD, "Member 'BP_ChallengeManager_C_Choose_Daily_Challenge::CallFunc_GetValidValue_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_ChallengeManager_C_Choose_Daily_Challenge, CallFunc_GetEnumeratorUserFriendlyName_ReturnValue_3) == 0x000CD0, "Member 'BP_ChallengeManager_C_Choose_Daily_Challenge::CallFunc_GetEnumeratorUserFriendlyName_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(BP_ChallengeManager_C_Choose_Daily_Challenge, CallFunc_Map_Find_Value_1) == 0x000CE0, "Member 'BP_ChallengeManager_C_Choose_Daily_Challenge::CallFunc_Map_Find_Value_1' has a wrong offset!");
static_assert(offsetof(BP_ChallengeManager_C_Choose_Daily_Challenge, CallFunc_Map_Find_ReturnValue_1) == 0x000CE8, "Member 'BP_ChallengeManager_C_Choose_Daily_Challenge::CallFunc_Map_Find_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_ChallengeManager_C_Choose_Daily_Challenge, CallFunc_Concat_StrStr_ReturnValue_27) == 0x000CF0, "Member 'BP_ChallengeManager_C_Choose_Daily_Challenge::CallFunc_Concat_StrStr_ReturnValue_27' has a wrong offset!");
static_assert(offsetof(BP_ChallengeManager_C_Choose_Daily_Challenge, CallFunc_ToString__DateTime__String_2) == 0x000D00, "Member 'BP_ChallengeManager_C_Choose_Daily_Challenge::CallFunc_ToString__DateTime__String_2' has a wrong offset!");
static_assert(offsetof(BP_ChallengeManager_C_Choose_Daily_Challenge, CallFunc_Concat_StrStr_ReturnValue_28) == 0x000D10, "Member 'BP_ChallengeManager_C_Choose_Daily_Challenge::CallFunc_Concat_StrStr_ReturnValue_28' has a wrong offset!");
static_assert(offsetof(BP_ChallengeManager_C_Choose_Daily_Challenge, CallFunc_IsShipping_ReturnValue) == 0x000D20, "Member 'BP_ChallengeManager_C_Choose_Daily_Challenge::CallFunc_IsShipping_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_ChallengeManager_C_Choose_Daily_Challenge, CallFunc_Not_PreBool_ReturnValue_4) == 0x000D21, "Member 'BP_ChallengeManager_C_Choose_Daily_Challenge::CallFunc_Not_PreBool_ReturnValue_4' has a wrong offset!");
static_assert(offsetof(BP_ChallengeManager_C_Choose_Daily_Challenge, Temp_string_Variable) == 0x000D28, "Member 'BP_ChallengeManager_C_Choose_Daily_Challenge::Temp_string_Variable' has a wrong offset!");
static_assert(offsetof(BP_ChallengeManager_C_Choose_Daily_Challenge, CallFunc_BooleanAND_ReturnValue_5) == 0x000D38, "Member 'BP_ChallengeManager_C_Choose_Daily_Challenge::CallFunc_BooleanAND_ReturnValue_5' has a wrong offset!");
static_assert(offsetof(BP_ChallengeManager_C_Choose_Daily_Challenge, Temp_bool_Variable_1) == 0x000D39, "Member 'BP_ChallengeManager_C_Choose_Daily_Challenge::Temp_bool_Variable_1' has a wrong offset!");
static_assert(offsetof(BP_ChallengeManager_C_Choose_Daily_Challenge, K2Node_Select_Default) == 0x000D40, "Member 'BP_ChallengeManager_C_Choose_Daily_Challenge::K2Node_Select_Default' has a wrong offset!");
static_assert(offsetof(BP_ChallengeManager_C_Choose_Daily_Challenge, CallFunc_Concat_StrStr_ReturnValue_29) == 0x000D50, "Member 'BP_ChallengeManager_C_Choose_Daily_Challenge::CallFunc_Concat_StrStr_ReturnValue_29' has a wrong offset!");
static_assert(offsetof(BP_ChallengeManager_C_Choose_Daily_Challenge, CallFunc_Array_Get_Item_9) == 0x000D60, "Member 'BP_ChallengeManager_C_Choose_Daily_Challenge::CallFunc_Array_Get_Item_9' has a wrong offset!");
static_assert(offsetof(BP_ChallengeManager_C_Choose_Daily_Challenge, CallFunc_Array_Length_ReturnValue_13) == 0x000D68, "Member 'BP_ChallengeManager_C_Choose_Daily_Challenge::CallFunc_Array_Length_ReturnValue_13' has a wrong offset!");
static_assert(offsetof(BP_ChallengeManager_C_Choose_Daily_Challenge, CallFunc_Conv_NameToString_ReturnValue_7) == 0x000D70, "Member 'BP_ChallengeManager_C_Choose_Daily_Challenge::CallFunc_Conv_NameToString_ReturnValue_7' has a wrong offset!");
static_assert(offsetof(BP_ChallengeManager_C_Choose_Daily_Challenge, CallFunc_Subtract_IntInt_ReturnValue_6) == 0x000D80, "Member 'BP_ChallengeManager_C_Choose_Daily_Challenge::CallFunc_Subtract_IntInt_ReturnValue_6' has a wrong offset!");
static_assert(offsetof(BP_ChallengeManager_C_Choose_Daily_Challenge, CallFunc_Concat_StrStr_ReturnValue_30) == 0x000D88, "Member 'BP_ChallengeManager_C_Choose_Daily_Challenge::CallFunc_Concat_StrStr_ReturnValue_30' has a wrong offset!");
static_assert(offsetof(BP_ChallengeManager_C_Choose_Daily_Challenge, CallFunc_Max_ReturnValue_2) == 0x000D98, "Member 'BP_ChallengeManager_C_Choose_Daily_Challenge::CallFunc_Max_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BP_ChallengeManager_C_Choose_Daily_Challenge, CallFunc_Concat_StrStr_ReturnValue_31) == 0x000DA0, "Member 'BP_ChallengeManager_C_Choose_Daily_Challenge::CallFunc_Concat_StrStr_ReturnValue_31' has a wrong offset!");
static_assert(offsetof(BP_ChallengeManager_C_Choose_Daily_Challenge, CallFunc_DataProviderFindTableByAssetTable_ReturnValue_5) == 0x000DB0, "Member 'BP_ChallengeManager_C_Choose_Daily_Challenge::CallFunc_DataProviderFindTableByAssetTable_ReturnValue_5' has a wrong offset!");
static_assert(offsetof(BP_ChallengeManager_C_Choose_Daily_Challenge, Temp_int_Array_Index_Variable_16) == 0x000DB8, "Member 'BP_ChallengeManager_C_Choose_Daily_Challenge::Temp_int_Array_Index_Variable_16' has a wrong offset!");
static_assert(offsetof(BP_ChallengeManager_C_Choose_Daily_Challenge, CallFunc_GetDataTableRowFromName_OutRow_4) == 0x000DC0, "Member 'BP_ChallengeManager_C_Choose_Daily_Challenge::CallFunc_GetDataTableRowFromName_OutRow_4' has a wrong offset!");
static_assert(offsetof(BP_ChallengeManager_C_Choose_Daily_Challenge, CallFunc_GetDataTableRowFromName_ReturnValue_4) == 0x000EC0, "Member 'BP_ChallengeManager_C_Choose_Daily_Challenge::CallFunc_GetDataTableRowFromName_ReturnValue_4' has a wrong offset!");
static_assert(offsetof(BP_ChallengeManager_C_Choose_Daily_Challenge, CallFunc_DataProviderFindTableByAssetTable_ReturnValue_6) == 0x000EC8, "Member 'BP_ChallengeManager_C_Choose_Daily_Challenge::CallFunc_DataProviderFindTableByAssetTable_ReturnValue_6' has a wrong offset!");
static_assert(offsetof(BP_ChallengeManager_C_Choose_Daily_Challenge, CallFunc_Array_Add_ReturnValue_1) == 0x000ED0, "Member 'BP_ChallengeManager_C_Choose_Daily_Challenge::CallFunc_Array_Add_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_ChallengeManager_C_Choose_Daily_Challenge, CallFunc_GetDataTableRowFromName_OutRow_5) == 0x000ED8, "Member 'BP_ChallengeManager_C_Choose_Daily_Challenge::CallFunc_GetDataTableRowFromName_OutRow_5' has a wrong offset!");
static_assert(offsetof(BP_ChallengeManager_C_Choose_Daily_Challenge, CallFunc_GetDataTableRowFromName_ReturnValue_5) == 0x000FD8, "Member 'BP_ChallengeManager_C_Choose_Daily_Challenge::CallFunc_GetDataTableRowFromName_ReturnValue_5' has a wrong offset!");
static_assert(offsetof(BP_ChallengeManager_C_Choose_Daily_Challenge, CallFunc_Len_ReturnValue) == 0x000FDC, "Member 'BP_ChallengeManager_C_Choose_Daily_Challenge::CallFunc_Len_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_ChallengeManager_C_Choose_Daily_Challenge, CallFunc_Greater_IntInt_ReturnValue_3) == 0x000FE0, "Member 'BP_ChallengeManager_C_Choose_Daily_Challenge::CallFunc_Greater_IntInt_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(BP_ChallengeManager_C_Choose_Daily_Challenge, CallFunc_Concat_StrStr_ReturnValue_32) == 0x000FE8, "Member 'BP_ChallengeManager_C_Choose_Daily_Challenge::CallFunc_Concat_StrStr_ReturnValue_32' has a wrong offset!");
static_assert(offsetof(BP_ChallengeManager_C_Choose_Daily_Challenge, CallFunc_Array_Contains_ReturnValue_2) == 0x000FF8, "Member 'BP_ChallengeManager_C_Choose_Daily_Challenge::CallFunc_Array_Contains_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BP_ChallengeManager_C_Choose_Daily_Challenge, CallFunc_Concat_StrStr_ReturnValue_33) == 0x001000, "Member 'BP_ChallengeManager_C_Choose_Daily_Challenge::CallFunc_Concat_StrStr_ReturnValue_33' has a wrong offset!");
static_assert(offsetof(BP_ChallengeManager_C_Choose_Daily_Challenge, CallFunc_Len_ReturnValue_1) == 0x001010, "Member 'BP_ChallengeManager_C_Choose_Daily_Challenge::CallFunc_Len_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_ChallengeManager_C_Choose_Daily_Challenge, CallFunc_DataProviderFindTableByAssetTable_ReturnValue_7) == 0x001018, "Member 'BP_ChallengeManager_C_Choose_Daily_Challenge::CallFunc_DataProviderFindTableByAssetTable_ReturnValue_7' has a wrong offset!");
static_assert(offsetof(BP_ChallengeManager_C_Choose_Daily_Challenge, CallFunc_Greater_IntInt_ReturnValue_4) == 0x001020, "Member 'BP_ChallengeManager_C_Choose_Daily_Challenge::CallFunc_Greater_IntInt_ReturnValue_4' has a wrong offset!");
static_assert(offsetof(BP_ChallengeManager_C_Choose_Daily_Challenge, CallFunc_DataProviderFindTableByAssetTable_ReturnValue_8) == 0x001028, "Member 'BP_ChallengeManager_C_Choose_Daily_Challenge::CallFunc_DataProviderFindTableByAssetTable_ReturnValue_8' has a wrong offset!");
static_assert(offsetof(BP_ChallengeManager_C_Choose_Daily_Challenge, CallFunc_DataProviderFindTableByAssetTable_ReturnValue_9) == 0x001030, "Member 'BP_ChallengeManager_C_Choose_Daily_Challenge::CallFunc_DataProviderFindTableByAssetTable_ReturnValue_9' has a wrong offset!");
static_assert(offsetof(BP_ChallengeManager_C_Choose_Daily_Challenge, CallFunc_DataProviderFindTableByAssetTable_ReturnValue_10) == 0x001038, "Member 'BP_ChallengeManager_C_Choose_Daily_Challenge::CallFunc_DataProviderFindTableByAssetTable_ReturnValue_10' has a wrong offset!");
static_assert(offsetof(BP_ChallengeManager_C_Choose_Daily_Challenge, CallFunc_GetDataTableRowNames_OutRowNames) == 0x001040, "Member 'BP_ChallengeManager_C_Choose_Daily_Challenge::CallFunc_GetDataTableRowNames_OutRowNames' has a wrong offset!");
static_assert(offsetof(BP_ChallengeManager_C_Choose_Daily_Challenge, CallFunc_Array_Get_Item_10) == 0x001050, "Member 'BP_ChallengeManager_C_Choose_Daily_Challenge::CallFunc_Array_Get_Item_10' has a wrong offset!");
static_assert(offsetof(BP_ChallengeManager_C_Choose_Daily_Challenge, CallFunc_Array_Get_Item_11) == 0x001054, "Member 'BP_ChallengeManager_C_Choose_Daily_Challenge::CallFunc_Array_Get_Item_11' has a wrong offset!");
static_assert(offsetof(BP_ChallengeManager_C_Choose_Daily_Challenge, CallFunc_GetDataTableRowFromName_OutRow_6) == 0x001060, "Member 'BP_ChallengeManager_C_Choose_Daily_Challenge::CallFunc_GetDataTableRowFromName_OutRow_6' has a wrong offset!");
static_assert(offsetof(BP_ChallengeManager_C_Choose_Daily_Challenge, CallFunc_GetDataTableRowFromName_ReturnValue_6) == 0x001160, "Member 'BP_ChallengeManager_C_Choose_Daily_Challenge::CallFunc_GetDataTableRowFromName_ReturnValue_6' has a wrong offset!");
static_assert(offsetof(BP_ChallengeManager_C_Choose_Daily_Challenge, CallFunc_Conv_NameToString_ReturnValue_8) == 0x001168, "Member 'BP_ChallengeManager_C_Choose_Daily_Challenge::CallFunc_Conv_NameToString_ReturnValue_8' has a wrong offset!");
static_assert(offsetof(BP_ChallengeManager_C_Choose_Daily_Challenge, CallFunc_Concat_StrStr_ReturnValue_34) == 0x001178, "Member 'BP_ChallengeManager_C_Choose_Daily_Challenge::CallFunc_Concat_StrStr_ReturnValue_34' has a wrong offset!");
static_assert(offsetof(BP_ChallengeManager_C_Choose_Daily_Challenge, CallFunc_Concat_StrStr_ReturnValue_35) == 0x001188, "Member 'BP_ChallengeManager_C_Choose_Daily_Challenge::CallFunc_Concat_StrStr_ReturnValue_35' has a wrong offset!");
static_assert(offsetof(BP_ChallengeManager_C_Choose_Daily_Challenge, CallFunc_Array_Get_Item_12) == 0x001198, "Member 'BP_ChallengeManager_C_Choose_Daily_Challenge::CallFunc_Array_Get_Item_12' has a wrong offset!");
static_assert(offsetof(BP_ChallengeManager_C_Choose_Daily_Challenge, CallFunc_Concat_StrStr_ReturnValue_36) == 0x0011D8, "Member 'BP_ChallengeManager_C_Choose_Daily_Challenge::CallFunc_Concat_StrStr_ReturnValue_36' has a wrong offset!");
static_assert(offsetof(BP_ChallengeManager_C_Choose_Daily_Challenge, CallFunc_Concat_StrStr_ReturnValue_37) == 0x0011E8, "Member 'BP_ChallengeManager_C_Choose_Daily_Challenge::CallFunc_Concat_StrStr_ReturnValue_37' has a wrong offset!");
static_assert(offsetof(BP_ChallengeManager_C_Choose_Daily_Challenge, CallFunc_Conv_NameToString_ReturnValue_9) == 0x0011F8, "Member 'BP_ChallengeManager_C_Choose_Daily_Challenge::CallFunc_Conv_NameToString_ReturnValue_9' has a wrong offset!");
static_assert(offsetof(BP_ChallengeManager_C_Choose_Daily_Challenge, CallFunc_GetEnumeratorUserFriendlyName_ReturnValue_4) == 0x001208, "Member 'BP_ChallengeManager_C_Choose_Daily_Challenge::CallFunc_GetEnumeratorUserFriendlyName_ReturnValue_4' has a wrong offset!");
static_assert(offsetof(BP_ChallengeManager_C_Choose_Daily_Challenge, CallFunc_Conv_IntToString_ReturnValue_6) == 0x001218, "Member 'BP_ChallengeManager_C_Choose_Daily_Challenge::CallFunc_Conv_IntToString_ReturnValue_6' has a wrong offset!");
static_assert(offsetof(BP_ChallengeManager_C_Choose_Daily_Challenge, CallFunc_GetClassDisplayName_ReturnValue) == 0x001228, "Member 'BP_ChallengeManager_C_Choose_Daily_Challenge::CallFunc_GetClassDisplayName_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_ChallengeManager_C_Choose_Daily_Challenge, CallFunc_Conv_SoftClassReferenceToClass_ReturnValue) == 0x001238, "Member 'BP_ChallengeManager_C_Choose_Daily_Challenge::CallFunc_Conv_SoftClassReferenceToClass_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_ChallengeManager_C_Choose_Daily_Challenge, CallFunc_Check_Prerequisite_Passed) == 0x001240, "Member 'BP_ChallengeManager_C_Choose_Daily_Challenge::CallFunc_Check_Prerequisite_Passed' has a wrong offset!");
static_assert(offsetof(BP_ChallengeManager_C_Choose_Daily_Challenge, K2Node_ClassDynamicCast_AsChallenge_Prerequisite) == 0x001248, "Member 'BP_ChallengeManager_C_Choose_Daily_Challenge::K2Node_ClassDynamicCast_AsChallenge_Prerequisite' has a wrong offset!");
static_assert(offsetof(BP_ChallengeManager_C_Choose_Daily_Challenge, K2Node_ClassDynamicCast_bSuccess) == 0x001250, "Member 'BP_ChallengeManager_C_Choose_Daily_Challenge::K2Node_ClassDynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(BP_ChallengeManager_C_Choose_Daily_Challenge, CallFunc_GetClassDisplayName_ReturnValue_1) == 0x001258, "Member 'BP_ChallengeManager_C_Choose_Daily_Challenge::CallFunc_GetClassDisplayName_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_ChallengeManager_C_Choose_Daily_Challenge, CallFunc_Array_Length_ReturnValue_14) == 0x001268, "Member 'BP_ChallengeManager_C_Choose_Daily_Challenge::CallFunc_Array_Length_ReturnValue_14' has a wrong offset!");
static_assert(offsetof(BP_ChallengeManager_C_Choose_Daily_Challenge, CallFunc_Concat_StrStr_ReturnValue_38) == 0x001270, "Member 'BP_ChallengeManager_C_Choose_Daily_Challenge::CallFunc_Concat_StrStr_ReturnValue_38' has a wrong offset!");
static_assert(offsetof(BP_ChallengeManager_C_Choose_Daily_Challenge, CallFunc_Less_IntInt_ReturnValue_6) == 0x001280, "Member 'BP_ChallengeManager_C_Choose_Daily_Challenge::CallFunc_Less_IntInt_ReturnValue_6' has a wrong offset!");
static_assert(offsetof(BP_ChallengeManager_C_Choose_Daily_Challenge, CallFunc_Concat_StrStr_ReturnValue_39) == 0x001288, "Member 'BP_ChallengeManager_C_Choose_Daily_Challenge::CallFunc_Concat_StrStr_ReturnValue_39' has a wrong offset!");
static_assert(offsetof(BP_ChallengeManager_C_Choose_Daily_Challenge, CallFunc_Concat_StrStr_ReturnValue_40) == 0x001298, "Member 'BP_ChallengeManager_C_Choose_Daily_Challenge::CallFunc_Concat_StrStr_ReturnValue_40' has a wrong offset!");
static_assert(offsetof(BP_ChallengeManager_C_Choose_Daily_Challenge, CallFunc_IsValidSoftClassReference_ReturnValue) == 0x0012A8, "Member 'BP_ChallengeManager_C_Choose_Daily_Challenge::CallFunc_IsValidSoftClassReference_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_ChallengeManager_C_Choose_Daily_Challenge, CallFunc_Concat_StrStr_ReturnValue_41) == 0x0012B0, "Member 'BP_ChallengeManager_C_Choose_Daily_Challenge::CallFunc_Concat_StrStr_ReturnValue_41' has a wrong offset!");
static_assert(offsetof(BP_ChallengeManager_C_Choose_Daily_Challenge, CallFunc_Conv_BoolToString_ReturnValue) == 0x0012C0, "Member 'BP_ChallengeManager_C_Choose_Daily_Challenge::CallFunc_Conv_BoolToString_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_ChallengeManager_C_Choose_Daily_Challenge, CallFunc_Concat_StrStr_ReturnValue_42) == 0x0012D0, "Member 'BP_ChallengeManager_C_Choose_Daily_Challenge::CallFunc_Concat_StrStr_ReturnValue_42' has a wrong offset!");
static_assert(offsetof(BP_ChallengeManager_C_Choose_Daily_Challenge, CallFunc_NotEqual_ByteByte_ReturnValue_5) == 0x0012E0, "Member 'BP_ChallengeManager_C_Choose_Daily_Challenge::CallFunc_NotEqual_ByteByte_ReturnValue_5' has a wrong offset!");
static_assert(offsetof(BP_ChallengeManager_C_Choose_Daily_Challenge, CallFunc_Concat_StrStr_ReturnValue_43) == 0x0012E8, "Member 'BP_ChallengeManager_C_Choose_Daily_Challenge::CallFunc_Concat_StrStr_ReturnValue_43' has a wrong offset!");
static_assert(offsetof(BP_ChallengeManager_C_Choose_Daily_Challenge, CallFunc_Conv_BoolToString_ReturnValue_1) == 0x0012F8, "Member 'BP_ChallengeManager_C_Choose_Daily_Challenge::CallFunc_Conv_BoolToString_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_ChallengeManager_C_Choose_Daily_Challenge, CallFunc_Concat_StrStr_ReturnValue_44) == 0x001308, "Member 'BP_ChallengeManager_C_Choose_Daily_Challenge::CallFunc_Concat_StrStr_ReturnValue_44' has a wrong offset!");
static_assert(offsetof(BP_ChallengeManager_C_Choose_Daily_Challenge, CallFunc_NotEqual_ByteByte_ReturnValue_6) == 0x001318, "Member 'BP_ChallengeManager_C_Choose_Daily_Challenge::CallFunc_NotEqual_ByteByte_ReturnValue_6' has a wrong offset!");
static_assert(offsetof(BP_ChallengeManager_C_Choose_Daily_Challenge, CallFunc_Concat_StrStr_ReturnValue_45) == 0x001320, "Member 'BP_ChallengeManager_C_Choose_Daily_Challenge::CallFunc_Concat_StrStr_ReturnValue_45' has a wrong offset!");
static_assert(offsetof(BP_ChallengeManager_C_Choose_Daily_Challenge, CallFunc_BooleanAND_ReturnValue_6) == 0x001330, "Member 'BP_ChallengeManager_C_Choose_Daily_Challenge::CallFunc_BooleanAND_ReturnValue_6' has a wrong offset!");
static_assert(offsetof(BP_ChallengeManager_C_Choose_Daily_Challenge, CallFunc_Concat_StrStr_ReturnValue_46) == 0x001338, "Member 'BP_ChallengeManager_C_Choose_Daily_Challenge::CallFunc_Concat_StrStr_ReturnValue_46' has a wrong offset!");
static_assert(offsetof(BP_ChallengeManager_C_Choose_Daily_Challenge, CallFunc_BooleanAND_ReturnValue_7) == 0x001348, "Member 'BP_ChallengeManager_C_Choose_Daily_Challenge::CallFunc_BooleanAND_ReturnValue_7' has a wrong offset!");
static_assert(offsetof(BP_ChallengeManager_C_Choose_Daily_Challenge, CallFunc_Concat_StrStr_ReturnValue_47) == 0x001350, "Member 'BP_ChallengeManager_C_Choose_Daily_Challenge::CallFunc_Concat_StrStr_ReturnValue_47' has a wrong offset!");
static_assert(offsetof(BP_ChallengeManager_C_Choose_Daily_Challenge, CallFunc_BooleanAND_ReturnValue_8) == 0x001360, "Member 'BP_ChallengeManager_C_Choose_Daily_Challenge::CallFunc_BooleanAND_ReturnValue_8' has a wrong offset!");
static_assert(offsetof(BP_ChallengeManager_C_Choose_Daily_Challenge, CallFunc_Conv_BoolToString_ReturnValue_2) == 0x001368, "Member 'BP_ChallengeManager_C_Choose_Daily_Challenge::CallFunc_Conv_BoolToString_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BP_ChallengeManager_C_Choose_Daily_Challenge, CallFunc_Conv_BoolToString_ReturnValue_3) == 0x001378, "Member 'BP_ChallengeManager_C_Choose_Daily_Challenge::CallFunc_Conv_BoolToString_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(BP_ChallengeManager_C_Choose_Daily_Challenge, CallFunc_Conv_NameToString_ReturnValue_10) == 0x001388, "Member 'BP_ChallengeManager_C_Choose_Daily_Challenge::CallFunc_Conv_NameToString_ReturnValue_10' has a wrong offset!");
static_assert(offsetof(BP_ChallengeManager_C_Choose_Daily_Challenge, CallFunc_Conv_NameToString_ReturnValue_11) == 0x001398, "Member 'BP_ChallengeManager_C_Choose_Daily_Challenge::CallFunc_Conv_NameToString_ReturnValue_11' has a wrong offset!");
static_assert(offsetof(BP_ChallengeManager_C_Choose_Daily_Challenge, CallFunc_Concat_StrStr_ReturnValue_48) == 0x0013A8, "Member 'BP_ChallengeManager_C_Choose_Daily_Challenge::CallFunc_Concat_StrStr_ReturnValue_48' has a wrong offset!");
static_assert(offsetof(BP_ChallengeManager_C_Choose_Daily_Challenge, CallFunc_Concat_StrStr_ReturnValue_49) == 0x0013B8, "Member 'BP_ChallengeManager_C_Choose_Daily_Challenge::CallFunc_Concat_StrStr_ReturnValue_49' has a wrong offset!");
static_assert(offsetof(BP_ChallengeManager_C_Choose_Daily_Challenge, CallFunc_Concat_StrStr_ReturnValue_50) == 0x0013C8, "Member 'BP_ChallengeManager_C_Choose_Daily_Challenge::CallFunc_Concat_StrStr_ReturnValue_50' has a wrong offset!");
static_assert(offsetof(BP_ChallengeManager_C_Choose_Daily_Challenge, CallFunc_Concat_StrStr_ReturnValue_51) == 0x0013D8, "Member 'BP_ChallengeManager_C_Choose_Daily_Challenge::CallFunc_Concat_StrStr_ReturnValue_51' has a wrong offset!");
static_assert(offsetof(BP_ChallengeManager_C_Choose_Daily_Challenge, CallFunc_Concat_StrStr_ReturnValue_52) == 0x0013E8, "Member 'BP_ChallengeManager_C_Choose_Daily_Challenge::CallFunc_Concat_StrStr_ReturnValue_52' has a wrong offset!");
static_assert(offsetof(BP_ChallengeManager_C_Choose_Daily_Challenge, CallFunc_Map_Find_Value_2) == 0x0013F8, "Member 'BP_ChallengeManager_C_Choose_Daily_Challenge::CallFunc_Map_Find_Value_2' has a wrong offset!");
static_assert(offsetof(BP_ChallengeManager_C_Choose_Daily_Challenge, CallFunc_Map_Find_ReturnValue_2) == 0x001400, "Member 'BP_ChallengeManager_C_Choose_Daily_Challenge::CallFunc_Map_Find_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BP_ChallengeManager_C_Choose_Daily_Challenge, CallFunc_Concat_StrStr_ReturnValue_53) == 0x001408, "Member 'BP_ChallengeManager_C_Choose_Daily_Challenge::CallFunc_Concat_StrStr_ReturnValue_53' has a wrong offset!");
static_assert(offsetof(BP_ChallengeManager_C_Choose_Daily_Challenge, CallFunc_Concat_StrStr_ReturnValue_54) == 0x001418, "Member 'BP_ChallengeManager_C_Choose_Daily_Challenge::CallFunc_Concat_StrStr_ReturnValue_54' has a wrong offset!");
static_assert(offsetof(BP_ChallengeManager_C_Choose_Daily_Challenge, CallFunc_Array_Length_ReturnValue_15) == 0x001428, "Member 'BP_ChallengeManager_C_Choose_Daily_Challenge::CallFunc_Array_Length_ReturnValue_15' has a wrong offset!");
static_assert(offsetof(BP_ChallengeManager_C_Choose_Daily_Challenge, CallFunc_Concat_StrStr_ReturnValue_55) == 0x001430, "Member 'BP_ChallengeManager_C_Choose_Daily_Challenge::CallFunc_Concat_StrStr_ReturnValue_55' has a wrong offset!");
static_assert(offsetof(BP_ChallengeManager_C_Choose_Daily_Challenge, CallFunc_Less_IntInt_ReturnValue_7) == 0x001440, "Member 'BP_ChallengeManager_C_Choose_Daily_Challenge::CallFunc_Less_IntInt_ReturnValue_7' has a wrong offset!");
static_assert(offsetof(BP_ChallengeManager_C_Choose_Daily_Challenge, CallFunc_Concat_StrStr_ReturnValue_56) == 0x001448, "Member 'BP_ChallengeManager_C_Choose_Daily_Challenge::CallFunc_Concat_StrStr_ReturnValue_56' has a wrong offset!");
static_assert(offsetof(BP_ChallengeManager_C_Choose_Daily_Challenge, CallFunc_Concat_StrStr_ReturnValue_57) == 0x001458, "Member 'BP_ChallengeManager_C_Choose_Daily_Challenge::CallFunc_Concat_StrStr_ReturnValue_57' has a wrong offset!");
static_assert(offsetof(BP_ChallengeManager_C_Choose_Daily_Challenge, CallFunc_Array_Length_ReturnValue_16) == 0x001468, "Member 'BP_ChallengeManager_C_Choose_Daily_Challenge::CallFunc_Array_Length_ReturnValue_16' has a wrong offset!");
static_assert(offsetof(BP_ChallengeManager_C_Choose_Daily_Challenge, CallFunc_Concat_StrStr_ReturnValue_58) == 0x001470, "Member 'BP_ChallengeManager_C_Choose_Daily_Challenge::CallFunc_Concat_StrStr_ReturnValue_58' has a wrong offset!");
static_assert(offsetof(BP_ChallengeManager_C_Choose_Daily_Challenge, CallFunc_Less_IntInt_ReturnValue_8) == 0x001480, "Member 'BP_ChallengeManager_C_Choose_Daily_Challenge::CallFunc_Less_IntInt_ReturnValue_8' has a wrong offset!");
static_assert(offsetof(BP_ChallengeManager_C_Choose_Daily_Challenge, CallFunc_Concat_StrStr_ReturnValue_59) == 0x001488, "Member 'BP_ChallengeManager_C_Choose_Daily_Challenge::CallFunc_Concat_StrStr_ReturnValue_59' has a wrong offset!");
static_assert(offsetof(BP_ChallengeManager_C_Choose_Daily_Challenge, K2Node_MakeArray_Array_4) == 0x001498, "Member 'BP_ChallengeManager_C_Choose_Daily_Challenge::K2Node_MakeArray_Array_4' has a wrong offset!");
static_assert(offsetof(BP_ChallengeManager_C_Choose_Daily_Challenge, CallFunc_Array_Length_ReturnValue_17) == 0x0014A8, "Member 'BP_ChallengeManager_C_Choose_Daily_Challenge::CallFunc_Array_Length_ReturnValue_17' has a wrong offset!");
static_assert(offsetof(BP_ChallengeManager_C_Choose_Daily_Challenge, CallFunc_Conv_NameToString_ReturnValue_12) == 0x0014B0, "Member 'BP_ChallengeManager_C_Choose_Daily_Challenge::CallFunc_Conv_NameToString_ReturnValue_12' has a wrong offset!");
static_assert(offsetof(BP_ChallengeManager_C_Choose_Daily_Challenge, Temp_int_Array_Index_Variable_17) == 0x0014C0, "Member 'BP_ChallengeManager_C_Choose_Daily_Challenge::Temp_int_Array_Index_Variable_17' has a wrong offset!");
static_assert(offsetof(BP_ChallengeManager_C_Choose_Daily_Challenge, CallFunc_Concat_StrStr_ReturnValue_60) == 0x0014C8, "Member 'BP_ChallengeManager_C_Choose_Daily_Challenge::CallFunc_Concat_StrStr_ReturnValue_60' has a wrong offset!");
static_assert(offsetof(BP_ChallengeManager_C_Choose_Daily_Challenge, CallFunc_Array_Get_Item_13) == 0x0014D8, "Member 'BP_ChallengeManager_C_Choose_Daily_Challenge::CallFunc_Array_Get_Item_13' has a wrong offset!");
static_assert(offsetof(BP_ChallengeManager_C_Choose_Daily_Challenge, CallFunc_GetDataTableRowFromName_OutRow_7) == 0x001528, "Member 'BP_ChallengeManager_C_Choose_Daily_Challenge::CallFunc_GetDataTableRowFromName_OutRow_7' has a wrong offset!");
static_assert(offsetof(BP_ChallengeManager_C_Choose_Daily_Challenge, CallFunc_GetDataTableRowFromName_ReturnValue_7) == 0x001628, "Member 'BP_ChallengeManager_C_Choose_Daily_Challenge::CallFunc_GetDataTableRowFromName_ReturnValue_7' has a wrong offset!");
static_assert(offsetof(BP_ChallengeManager_C_Choose_Daily_Challenge, CallFunc_Find_Slot_by_ID_Slot_4) == 0x001630, "Member 'BP_ChallengeManager_C_Choose_Daily_Challenge::CallFunc_Find_Slot_by_ID_Slot_4' has a wrong offset!");
static_assert(offsetof(BP_ChallengeManager_C_Choose_Daily_Challenge, CallFunc_Find_Slot_by_ID_Success_4) == 0x001638, "Member 'BP_ChallengeManager_C_Choose_Daily_Challenge::CallFunc_Find_Slot_by_ID_Success_4' has a wrong offset!");
static_assert(offsetof(BP_ChallengeManager_C_Choose_Daily_Challenge, CallFunc_NotEqual_ByteByte_ReturnValue_7) == 0x001639, "Member 'BP_ChallengeManager_C_Choose_Daily_Challenge::CallFunc_NotEqual_ByteByte_ReturnValue_7' has a wrong offset!");
static_assert(offsetof(BP_ChallengeManager_C_Choose_Daily_Challenge, CallFunc_NotEqual_ByteByte_ReturnValue_8) == 0x00163A, "Member 'BP_ChallengeManager_C_Choose_Daily_Challenge::CallFunc_NotEqual_ByteByte_ReturnValue_8' has a wrong offset!");
static_assert(offsetof(BP_ChallengeManager_C_Choose_Daily_Challenge, CallFunc_Array_Add_ReturnValue_2) == 0x00163C, "Member 'BP_ChallengeManager_C_Choose_Daily_Challenge::CallFunc_Array_Add_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BP_ChallengeManager_C_Choose_Daily_Challenge, CallFunc_BooleanAND_ReturnValue_9) == 0x001640, "Member 'BP_ChallengeManager_C_Choose_Daily_Challenge::CallFunc_BooleanAND_ReturnValue_9' has a wrong offset!");
static_assert(offsetof(BP_ChallengeManager_C_Choose_Daily_Challenge, CallFunc_Array_Length_ReturnValue_18) == 0x001644, "Member 'BP_ChallengeManager_C_Choose_Daily_Challenge::CallFunc_Array_Length_ReturnValue_18' has a wrong offset!");
static_assert(offsetof(BP_ChallengeManager_C_Choose_Daily_Challenge, CallFunc_Array_Length_ReturnValue_19) == 0x001648, "Member 'BP_ChallengeManager_C_Choose_Daily_Challenge::CallFunc_Array_Length_ReturnValue_19' has a wrong offset!");
static_assert(offsetof(BP_ChallengeManager_C_Choose_Daily_Challenge, CallFunc_Greater_IntInt_ReturnValue_5) == 0x00164C, "Member 'BP_ChallengeManager_C_Choose_Daily_Challenge::CallFunc_Greater_IntInt_ReturnValue_5' has a wrong offset!");
static_assert(offsetof(BP_ChallengeManager_C_Choose_Daily_Challenge, CallFunc_RandomInteger_ReturnValue_1) == 0x001650, "Member 'BP_ChallengeManager_C_Choose_Daily_Challenge::CallFunc_RandomInteger_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_ChallengeManager_C_Choose_Daily_Challenge, CallFunc_Not_PreBool_ReturnValue_5) == 0x001654, "Member 'BP_ChallengeManager_C_Choose_Daily_Challenge::CallFunc_Not_PreBool_ReturnValue_5' has a wrong offset!");
static_assert(offsetof(BP_ChallengeManager_C_Choose_Daily_Challenge, CallFunc_Array_Get_Item_14) == 0x001658, "Member 'BP_ChallengeManager_C_Choose_Daily_Challenge::CallFunc_Array_Get_Item_14' has a wrong offset!");
static_assert(offsetof(BP_ChallengeManager_C_Choose_Daily_Challenge, CallFunc_Array_Get_Item_15) == 0x001660, "Member 'BP_ChallengeManager_C_Choose_Daily_Challenge::CallFunc_Array_Get_Item_15' has a wrong offset!");
static_assert(offsetof(BP_ChallengeManager_C_Choose_Daily_Challenge, CallFunc_Conv_NameToString_ReturnValue_13) == 0x001668, "Member 'BP_ChallengeManager_C_Choose_Daily_Challenge::CallFunc_Conv_NameToString_ReturnValue_13' has a wrong offset!");
static_assert(offsetof(BP_ChallengeManager_C_Choose_Daily_Challenge, CallFunc_Array_Get_Item_16) == 0x001678, "Member 'BP_ChallengeManager_C_Choose_Daily_Challenge::CallFunc_Array_Get_Item_16' has a wrong offset!");
static_assert(offsetof(BP_ChallengeManager_C_Choose_Daily_Challenge, CallFunc_Concat_StrStr_ReturnValue_61) == 0x001680, "Member 'BP_ChallengeManager_C_Choose_Daily_Challenge::CallFunc_Concat_StrStr_ReturnValue_61' has a wrong offset!");
static_assert(offsetof(BP_ChallengeManager_C_Choose_Daily_Challenge, CallFunc_Concat_StrStr_ReturnValue_62) == 0x001690, "Member 'BP_ChallengeManager_C_Choose_Daily_Challenge::CallFunc_Concat_StrStr_ReturnValue_62' has a wrong offset!");
static_assert(offsetof(BP_ChallengeManager_C_Choose_Daily_Challenge, CallFunc_Concat_StrStr_ReturnValue_63) == 0x0016A0, "Member 'BP_ChallengeManager_C_Choose_Daily_Challenge::CallFunc_Concat_StrStr_ReturnValue_63' has a wrong offset!");
static_assert(offsetof(BP_ChallengeManager_C_Choose_Daily_Challenge, CallFunc_Concat_StrStr_ReturnValue_64) == 0x0016B0, "Member 'BP_ChallengeManager_C_Choose_Daily_Challenge::CallFunc_Concat_StrStr_ReturnValue_64' has a wrong offset!");
static_assert(offsetof(BP_ChallengeManager_C_Choose_Daily_Challenge, CallFunc_Array_AddUnique_ReturnValue) == 0x0016C0, "Member 'BP_ChallengeManager_C_Choose_Daily_Challenge::CallFunc_Array_AddUnique_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_ChallengeManager_C_Choose_Daily_Challenge, CallFunc_Array_Get_Item_17) == 0x0016C8, "Member 'BP_ChallengeManager_C_Choose_Daily_Challenge::CallFunc_Array_Get_Item_17' has a wrong offset!");
static_assert(offsetof(BP_ChallengeManager_C_Choose_Daily_Challenge, CallFunc_Array_Length_ReturnValue_20) == 0x0016D0, "Member 'BP_ChallengeManager_C_Choose_Daily_Challenge::CallFunc_Array_Length_ReturnValue_20' has a wrong offset!");
static_assert(offsetof(BP_ChallengeManager_C_Choose_Daily_Challenge, CallFunc_Greater_IntInt_ReturnValue_6) == 0x0016D4, "Member 'BP_ChallengeManager_C_Choose_Daily_Challenge::CallFunc_Greater_IntInt_ReturnValue_6' has a wrong offset!");
static_assert(offsetof(BP_ChallengeManager_C_Choose_Daily_Challenge, CallFunc_Less_DateTimeDateTime_ReturnValue_1) == 0x0016D5, "Member 'BP_ChallengeManager_C_Choose_Daily_Challenge::CallFunc_Less_DateTimeDateTime_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_ChallengeManager_C_Choose_Daily_Challenge, CallFunc_Not_PreBool_ReturnValue_6) == 0x0016D6, "Member 'BP_ChallengeManager_C_Choose_Daily_Challenge::CallFunc_Not_PreBool_ReturnValue_6' has a wrong offset!");
static_assert(offsetof(BP_ChallengeManager_C_Choose_Daily_Challenge, CallFunc_Array_Length_ReturnValue_21) == 0x0016D8, "Member 'BP_ChallengeManager_C_Choose_Daily_Challenge::CallFunc_Array_Length_ReturnValue_21' has a wrong offset!");
static_assert(offsetof(BP_ChallengeManager_C_Choose_Daily_Challenge, CallFunc_Array_Length_ReturnValue_22) == 0x0016DC, "Member 'BP_ChallengeManager_C_Choose_Daily_Challenge::CallFunc_Array_Length_ReturnValue_22' has a wrong offset!");
static_assert(offsetof(BP_ChallengeManager_C_Choose_Daily_Challenge, CallFunc_Less_IntInt_ReturnValue_9) == 0x0016E0, "Member 'BP_ChallengeManager_C_Choose_Daily_Challenge::CallFunc_Less_IntInt_ReturnValue_9' has a wrong offset!");
static_assert(offsetof(BP_ChallengeManager_C_Choose_Daily_Challenge, CallFunc_Array_Length_ReturnValue_23) == 0x0016E4, "Member 'BP_ChallengeManager_C_Choose_Daily_Challenge::CallFunc_Array_Length_ReturnValue_23' has a wrong offset!");
static_assert(offsetof(BP_ChallengeManager_C_Choose_Daily_Challenge, CallFunc_EqualEqual_IntInt_ReturnValue) == 0x0016E8, "Member 'BP_ChallengeManager_C_Choose_Daily_Challenge::CallFunc_EqualEqual_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_ChallengeManager_C_Choose_Daily_Challenge, CallFunc_Array_Length_ReturnValue_24) == 0x0016EC, "Member 'BP_ChallengeManager_C_Choose_Daily_Challenge::CallFunc_Array_Length_ReturnValue_24' has a wrong offset!");
static_assert(offsetof(BP_ChallengeManager_C_Choose_Daily_Challenge, CallFunc_Greater_IntInt_ReturnValue_7) == 0x0016F0, "Member 'BP_ChallengeManager_C_Choose_Daily_Challenge::CallFunc_Greater_IntInt_ReturnValue_7' has a wrong offset!");
static_assert(offsetof(BP_ChallengeManager_C_Choose_Daily_Challenge, CallFunc_Not_PreBool_ReturnValue_7) == 0x0016F1, "Member 'BP_ChallengeManager_C_Choose_Daily_Challenge::CallFunc_Not_PreBool_ReturnValue_7' has a wrong offset!");
static_assert(offsetof(BP_ChallengeManager_C_Choose_Daily_Challenge, CallFunc_Array_Length_ReturnValue_25) == 0x0016F4, "Member 'BP_ChallengeManager_C_Choose_Daily_Challenge::CallFunc_Array_Length_ReturnValue_25' has a wrong offset!");
static_assert(offsetof(BP_ChallengeManager_C_Choose_Daily_Challenge, CallFunc_Conv_IntToString_ReturnValue_7) == 0x0016F8, "Member 'BP_ChallengeManager_C_Choose_Daily_Challenge::CallFunc_Conv_IntToString_ReturnValue_7' has a wrong offset!");
static_assert(offsetof(BP_ChallengeManager_C_Choose_Daily_Challenge, CallFunc_Min_ReturnValue) == 0x001708, "Member 'BP_ChallengeManager_C_Choose_Daily_Challenge::CallFunc_Min_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_ChallengeManager_C_Choose_Daily_Challenge, CallFunc_Concat_StrStr_ReturnValue_65) == 0x001710, "Member 'BP_ChallengeManager_C_Choose_Daily_Challenge::CallFunc_Concat_StrStr_ReturnValue_65' has a wrong offset!");
static_assert(offsetof(BP_ChallengeManager_C_Choose_Daily_Challenge, CallFunc_Divide_IntInt_ReturnValue) == 0x001720, "Member 'BP_ChallengeManager_C_Choose_Daily_Challenge::CallFunc_Divide_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_ChallengeManager_C_Choose_Daily_Challenge, CallFunc_Concat_StrStr_ReturnValue_66) == 0x001728, "Member 'BP_ChallengeManager_C_Choose_Daily_Challenge::CallFunc_Concat_StrStr_ReturnValue_66' has a wrong offset!");
static_assert(offsetof(BP_ChallengeManager_C_Choose_Daily_Challenge, CallFunc_Max_ReturnValue_3) == 0x001738, "Member 'BP_ChallengeManager_C_Choose_Daily_Challenge::CallFunc_Max_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(BP_ChallengeManager_C_Choose_Daily_Challenge, CallFunc_Concat_StrStr_ReturnValue_67) == 0x001740, "Member 'BP_ChallengeManager_C_Choose_Daily_Challenge::CallFunc_Concat_StrStr_ReturnValue_67' has a wrong offset!");
static_assert(offsetof(BP_ChallengeManager_C_Choose_Daily_Challenge, CallFunc_Concat_StrStr_ReturnValue_68) == 0x001750, "Member 'BP_ChallengeManager_C_Choose_Daily_Challenge::CallFunc_Concat_StrStr_ReturnValue_68' has a wrong offset!");
static_assert(offsetof(BP_ChallengeManager_C_Choose_Daily_Challenge, CallFunc_Concat_StrStr_ReturnValue_69) == 0x001760, "Member 'BP_ChallengeManager_C_Choose_Daily_Challenge::CallFunc_Concat_StrStr_ReturnValue_69' has a wrong offset!");
static_assert(offsetof(BP_ChallengeManager_C_Choose_Daily_Challenge, CallFunc_Concat_StrStr_ReturnValue_70) == 0x001770, "Member 'BP_ChallengeManager_C_Choose_Daily_Challenge::CallFunc_Concat_StrStr_ReturnValue_70' has a wrong offset!");
static_assert(offsetof(BP_ChallengeManager_C_Choose_Daily_Challenge, Temp_int_Loop_Counter_Variable_16) == 0x001780, "Member 'BP_ChallengeManager_C_Choose_Daily_Challenge::Temp_int_Loop_Counter_Variable_16' has a wrong offset!");
static_assert(offsetof(BP_ChallengeManager_C_Choose_Daily_Challenge, CallFunc_Add_IntInt_ReturnValue_14) == 0x001784, "Member 'BP_ChallengeManager_C_Choose_Daily_Challenge::CallFunc_Add_IntInt_ReturnValue_14' has a wrong offset!");
static_assert(offsetof(BP_ChallengeManager_C_Choose_Daily_Challenge, CallFunc_Array_Get_Item_18) == 0x001788, "Member 'BP_ChallengeManager_C_Choose_Daily_Challenge::CallFunc_Array_Get_Item_18' has a wrong offset!");
static_assert(offsetof(BP_ChallengeManager_C_Choose_Daily_Challenge, CallFunc_Array_Length_ReturnValue_26) == 0x001790, "Member 'BP_ChallengeManager_C_Choose_Daily_Challenge::CallFunc_Array_Length_ReturnValue_26' has a wrong offset!");
static_assert(offsetof(BP_ChallengeManager_C_Choose_Daily_Challenge, CallFunc_Conv_NameToString_ReturnValue_14) == 0x001798, "Member 'BP_ChallengeManager_C_Choose_Daily_Challenge::CallFunc_Conv_NameToString_ReturnValue_14' has a wrong offset!");
static_assert(offsetof(BP_ChallengeManager_C_Choose_Daily_Challenge, CallFunc_Less_IntInt_ReturnValue_10) == 0x0017A8, "Member 'BP_ChallengeManager_C_Choose_Daily_Challenge::CallFunc_Less_IntInt_ReturnValue_10' has a wrong offset!");
static_assert(offsetof(BP_ChallengeManager_C_Choose_Daily_Challenge, CallFunc_Concat_StrStr_ReturnValue_71) == 0x0017B0, "Member 'BP_ChallengeManager_C_Choose_Daily_Challenge::CallFunc_Concat_StrStr_ReturnValue_71' has a wrong offset!");
static_assert(offsetof(BP_ChallengeManager_C_Choose_Daily_Challenge, CallFunc_Concat_StrStr_ReturnValue_72) == 0x0017C0, "Member 'BP_ChallengeManager_C_Choose_Daily_Challenge::CallFunc_Concat_StrStr_ReturnValue_72' has a wrong offset!");
static_assert(offsetof(BP_ChallengeManager_C_Choose_Daily_Challenge, CallFunc_Map_Find_Value_3) == 0x0017D0, "Member 'BP_ChallengeManager_C_Choose_Daily_Challenge::CallFunc_Map_Find_Value_3' has a wrong offset!");
static_assert(offsetof(BP_ChallengeManager_C_Choose_Daily_Challenge, CallFunc_Map_Find_ReturnValue_3) == 0x0017D8, "Member 'BP_ChallengeManager_C_Choose_Daily_Challenge::CallFunc_Map_Find_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(BP_ChallengeManager_C_Choose_Daily_Challenge, CallFunc_Set_Difference_Result) == 0x0017E0, "Member 'BP_ChallengeManager_C_Choose_Daily_Challenge::CallFunc_Set_Difference_Result' has a wrong offset!");
static_assert(offsetof(BP_ChallengeManager_C_Choose_Daily_Challenge, CallFunc_ToString__DateTime__String_3) == 0x001830, "Member 'BP_ChallengeManager_C_Choose_Daily_Challenge::CallFunc_ToString__DateTime__String_3' has a wrong offset!");
static_assert(offsetof(BP_ChallengeManager_C_Choose_Daily_Challenge, CallFunc_Set_ToArray_Result) == 0x001840, "Member 'BP_ChallengeManager_C_Choose_Daily_Challenge::CallFunc_Set_ToArray_Result' has a wrong offset!");
static_assert(offsetof(BP_ChallengeManager_C_Choose_Daily_Challenge, CallFunc_Concat_StrStr_ReturnValue_73) == 0x001850, "Member 'BP_ChallengeManager_C_Choose_Daily_Challenge::CallFunc_Concat_StrStr_ReturnValue_73' has a wrong offset!");
static_assert(offsetof(BP_ChallengeManager_C_Choose_Daily_Challenge, CallFunc_Array_Add_ReturnValue_3) == 0x001860, "Member 'BP_ChallengeManager_C_Choose_Daily_Challenge::CallFunc_Array_Add_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(BP_ChallengeManager_C_Choose_Daily_Challenge, CallFunc_Map_Keys_Keys) == 0x001868, "Member 'BP_ChallengeManager_C_Choose_Daily_Challenge::CallFunc_Map_Keys_Keys' has a wrong offset!");
static_assert(offsetof(BP_ChallengeManager_C_Choose_Daily_Challenge, CallFunc_GetCloudTime_ReturnValue) == 0x001878, "Member 'BP_ChallengeManager_C_Choose_Daily_Challenge::CallFunc_GetCloudTime_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_ChallengeManager_C_Choose_Daily_Challenge, CallFunc_GetEnumeratorUserFriendlyName_ReturnValue_5) == 0x001880, "Member 'BP_ChallengeManager_C_Choose_Daily_Challenge::CallFunc_GetEnumeratorUserFriendlyName_ReturnValue_5' has a wrong offset!");
static_assert(offsetof(BP_ChallengeManager_C_Choose_Daily_Challenge, CallFunc_Array_Get_Item_19) == 0x001890, "Member 'BP_ChallengeManager_C_Choose_Daily_Challenge::CallFunc_Array_Get_Item_19' has a wrong offset!");
static_assert(offsetof(BP_ChallengeManager_C_Choose_Daily_Challenge, CallFunc_Array_Length_ReturnValue_27) == 0x001898, "Member 'BP_ChallengeManager_C_Choose_Daily_Challenge::CallFunc_Array_Length_ReturnValue_27' has a wrong offset!");
static_assert(offsetof(BP_ChallengeManager_C_Choose_Daily_Challenge, CallFunc_GetDataTableRowFromName_OutRow_8) == 0x0018A0, "Member 'BP_ChallengeManager_C_Choose_Daily_Challenge::CallFunc_GetDataTableRowFromName_OutRow_8' has a wrong offset!");
static_assert(offsetof(BP_ChallengeManager_C_Choose_Daily_Challenge, CallFunc_GetDataTableRowFromName_ReturnValue_8) == 0x0019A0, "Member 'BP_ChallengeManager_C_Choose_Daily_Challenge::CallFunc_GetDataTableRowFromName_ReturnValue_8' has a wrong offset!");
static_assert(offsetof(BP_ChallengeManager_C_Choose_Daily_Challenge, CallFunc_Subtract_IntInt_ReturnValue_7) == 0x0019A4, "Member 'BP_ChallengeManager_C_Choose_Daily_Challenge::CallFunc_Subtract_IntInt_ReturnValue_7' has a wrong offset!");
static_assert(offsetof(BP_ChallengeManager_C_Choose_Daily_Challenge, CallFunc_Max_ReturnValue_4) == 0x0019A8, "Member 'BP_ChallengeManager_C_Choose_Daily_Challenge::CallFunc_Max_ReturnValue_4' has a wrong offset!");
static_assert(offsetof(BP_ChallengeManager_C_Choose_Daily_Challenge, CallFunc_Conv_NameToString_ReturnValue_15) == 0x0019B0, "Member 'BP_ChallengeManager_C_Choose_Daily_Challenge::CallFunc_Conv_NameToString_ReturnValue_15' has a wrong offset!");
static_assert(offsetof(BP_ChallengeManager_C_Choose_Daily_Challenge, CallFunc_GetEnumeratorUserFriendlyName_ReturnValue_6) == 0x0019C0, "Member 'BP_ChallengeManager_C_Choose_Daily_Challenge::CallFunc_GetEnumeratorUserFriendlyName_ReturnValue_6' has a wrong offset!");
static_assert(offsetof(BP_ChallengeManager_C_Choose_Daily_Challenge, CallFunc_Concat_StrStr_ReturnValue_74) == 0x0019D0, "Member 'BP_ChallengeManager_C_Choose_Daily_Challenge::CallFunc_Concat_StrStr_ReturnValue_74' has a wrong offset!");
static_assert(offsetof(BP_ChallengeManager_C_Choose_Daily_Challenge, CallFunc_NotEqual_ByteByte_ReturnValue_9) == 0x0019E0, "Member 'BP_ChallengeManager_C_Choose_Daily_Challenge::CallFunc_NotEqual_ByteByte_ReturnValue_9' has a wrong offset!");
static_assert(offsetof(BP_ChallengeManager_C_Choose_Daily_Challenge, CallFunc_Concat_StrStr_ReturnValue_75) == 0x0019E8, "Member 'BP_ChallengeManager_C_Choose_Daily_Challenge::CallFunc_Concat_StrStr_ReturnValue_75' has a wrong offset!");
static_assert(offsetof(BP_ChallengeManager_C_Choose_Daily_Challenge, CallFunc_Concat_StrStr_ReturnValue_76) == 0x0019F8, "Member 'BP_ChallengeManager_C_Choose_Daily_Challenge::CallFunc_Concat_StrStr_ReturnValue_76' has a wrong offset!");
static_assert(offsetof(BP_ChallengeManager_C_Choose_Daily_Challenge, CallFunc_Concat_StrStr_ReturnValue_77) == 0x001A08, "Member 'BP_ChallengeManager_C_Choose_Daily_Challenge::CallFunc_Concat_StrStr_ReturnValue_77' has a wrong offset!");
static_assert(offsetof(BP_ChallengeManager_C_Choose_Daily_Challenge, CallFunc_Less_DateTimeDateTime_ReturnValue_2) == 0x001A18, "Member 'BP_ChallengeManager_C_Choose_Daily_Challenge::CallFunc_Less_DateTimeDateTime_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BP_ChallengeManager_C_Choose_Daily_Challenge, CallFunc_Concat_StrStr_ReturnValue_78) == 0x001A20, "Member 'BP_ChallengeManager_C_Choose_Daily_Challenge::CallFunc_Concat_StrStr_ReturnValue_78' has a wrong offset!");
static_assert(offsetof(BP_ChallengeManager_C_Choose_Daily_Challenge, CallFunc_Concat_StrStr_ReturnValue_79) == 0x001A30, "Member 'BP_ChallengeManager_C_Choose_Daily_Challenge::CallFunc_Concat_StrStr_ReturnValue_79' has a wrong offset!");
static_assert(offsetof(BP_ChallengeManager_C_Choose_Daily_Challenge, CallFunc_Map_Keys_Keys_1) == 0x001A40, "Member 'BP_ChallengeManager_C_Choose_Daily_Challenge::CallFunc_Map_Keys_Keys_1' has a wrong offset!");
static_assert(offsetof(BP_ChallengeManager_C_Choose_Daily_Challenge, CallFunc_Array_Get_Item_20) == 0x001A50, "Member 'BP_ChallengeManager_C_Choose_Daily_Challenge::CallFunc_Array_Get_Item_20' has a wrong offset!");
static_assert(offsetof(BP_ChallengeManager_C_Choose_Daily_Challenge, CallFunc_Array_RemoveItem_ReturnValue) == 0x001A51, "Member 'BP_ChallengeManager_C_Choose_Daily_Challenge::CallFunc_Array_RemoveItem_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_ChallengeManager_C_Choose_Daily_Challenge, CallFunc_Array_Add_ReturnValue_4) == 0x001A54, "Member 'BP_ChallengeManager_C_Choose_Daily_Challenge::CallFunc_Array_Add_ReturnValue_4' has a wrong offset!");
static_assert(offsetof(BP_ChallengeManager_C_Choose_Daily_Challenge, CallFunc_BooleanAND_ReturnValue_10) == 0x001A58, "Member 'BP_ChallengeManager_C_Choose_Daily_Challenge::CallFunc_BooleanAND_ReturnValue_10' has a wrong offset!");
static_assert(offsetof(BP_ChallengeManager_C_Choose_Daily_Challenge, CallFunc_CheckCategoryAgainstCandidates_Valid) == 0x001A59, "Member 'BP_ChallengeManager_C_Choose_Daily_Challenge::CallFunc_CheckCategoryAgainstCandidates_Valid' has a wrong offset!");
static_assert(offsetof(BP_ChallengeManager_C_Choose_Daily_Challenge, CallFunc_Array_Length_ReturnValue_28) == 0x001A5C, "Member 'BP_ChallengeManager_C_Choose_Daily_Challenge::CallFunc_Array_Length_ReturnValue_28' has a wrong offset!");
static_assert(offsetof(BP_ChallengeManager_C_Choose_Daily_Challenge, CallFunc_Less_IntInt_ReturnValue_11) == 0x001A60, "Member 'BP_ChallengeManager_C_Choose_Daily_Challenge::CallFunc_Less_IntInt_ReturnValue_11' has a wrong offset!");
static_assert(offsetof(BP_ChallengeManager_C_Choose_Daily_Challenge, CallFunc_MakeLiteralInt_ReturnValue_2) == 0x001A64, "Member 'BP_ChallengeManager_C_Choose_Daily_Challenge::CallFunc_MakeLiteralInt_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BP_ChallengeManager_C_Choose_Daily_Challenge, CallFunc_Less_IntInt_ReturnValue_12) == 0x001A68, "Member 'BP_ChallengeManager_C_Choose_Daily_Challenge::CallFunc_Less_IntInt_ReturnValue_12' has a wrong offset!");
static_assert(offsetof(BP_ChallengeManager_C_Choose_Daily_Challenge, CallFunc_Array_Get_Item_21) == 0x001A6C, "Member 'BP_ChallengeManager_C_Choose_Daily_Challenge::CallFunc_Array_Get_Item_21' has a wrong offset!");
static_assert(offsetof(BP_ChallengeManager_C_Choose_Daily_Challenge, CallFunc_Array_Length_ReturnValue_29) == 0x001A74, "Member 'BP_ChallengeManager_C_Choose_Daily_Challenge::CallFunc_Array_Length_ReturnValue_29' has a wrong offset!");
static_assert(offsetof(BP_ChallengeManager_C_Choose_Daily_Challenge, CallFunc_GetDataTableRowFromName_OutRow_9) == 0x001A78, "Member 'BP_ChallengeManager_C_Choose_Daily_Challenge::CallFunc_GetDataTableRowFromName_OutRow_9' has a wrong offset!");
static_assert(offsetof(BP_ChallengeManager_C_Choose_Daily_Challenge, CallFunc_GetDataTableRowFromName_ReturnValue_9) == 0x001B78, "Member 'BP_ChallengeManager_C_Choose_Daily_Challenge::CallFunc_GetDataTableRowFromName_ReturnValue_9' has a wrong offset!");
static_assert(offsetof(BP_ChallengeManager_C_Choose_Daily_Challenge, CallFunc_Less_IntInt_ReturnValue_13) == 0x001B79, "Member 'BP_ChallengeManager_C_Choose_Daily_Challenge::CallFunc_Less_IntInt_ReturnValue_13' has a wrong offset!");
static_assert(offsetof(BP_ChallengeManager_C_Choose_Daily_Challenge, CallFunc_Map_Find_Value_4) == 0x001B80, "Member 'BP_ChallengeManager_C_Choose_Daily_Challenge::CallFunc_Map_Find_Value_4' has a wrong offset!");
static_assert(offsetof(BP_ChallengeManager_C_Choose_Daily_Challenge, CallFunc_Map_Find_ReturnValue_4) == 0x001B88, "Member 'BP_ChallengeManager_C_Choose_Daily_Challenge::CallFunc_Map_Find_ReturnValue_4' has a wrong offset!");
static_assert(offsetof(BP_ChallengeManager_C_Choose_Daily_Challenge, CallFunc_Map_Find_Value_5) == 0x001B90, "Member 'BP_ChallengeManager_C_Choose_Daily_Challenge::CallFunc_Map_Find_Value_5' has a wrong offset!");
static_assert(offsetof(BP_ChallengeManager_C_Choose_Daily_Challenge, CallFunc_Map_Find_ReturnValue_5) == 0x001B98, "Member 'BP_ChallengeManager_C_Choose_Daily_Challenge::CallFunc_Map_Find_ReturnValue_5' has a wrong offset!");
static_assert(offsetof(BP_ChallengeManager_C_Choose_Daily_Challenge, CallFunc_Map_Find_Value_6) == 0x001BA0, "Member 'BP_ChallengeManager_C_Choose_Daily_Challenge::CallFunc_Map_Find_Value_6' has a wrong offset!");
static_assert(offsetof(BP_ChallengeManager_C_Choose_Daily_Challenge, CallFunc_Map_Find_ReturnValue_6) == 0x001BA8, "Member 'BP_ChallengeManager_C_Choose_Daily_Challenge::CallFunc_Map_Find_ReturnValue_6' has a wrong offset!");
static_assert(offsetof(BP_ChallengeManager_C_Choose_Daily_Challenge, CallFunc_Less_DateTimeDateTime_ReturnValue_3) == 0x001BA9, "Member 'BP_ChallengeManager_C_Choose_Daily_Challenge::CallFunc_Less_DateTimeDateTime_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(BP_ChallengeManager_C_Choose_Daily_Challenge, Temp_int_Loop_Counter_Variable_17) == 0x001BAC, "Member 'BP_ChallengeManager_C_Choose_Daily_Challenge::Temp_int_Loop_Counter_Variable_17' has a wrong offset!");
static_assert(offsetof(BP_ChallengeManager_C_Choose_Daily_Challenge, CallFunc_Array_Add_ReturnValue_5) == 0x001BB0, "Member 'BP_ChallengeManager_C_Choose_Daily_Challenge::CallFunc_Array_Add_ReturnValue_5' has a wrong offset!");
static_assert(offsetof(BP_ChallengeManager_C_Choose_Daily_Challenge, CallFunc_Less_IntInt_ReturnValue_14) == 0x001BB4, "Member 'BP_ChallengeManager_C_Choose_Daily_Challenge::CallFunc_Less_IntInt_ReturnValue_14' has a wrong offset!");
static_assert(offsetof(BP_ChallengeManager_C_Choose_Daily_Challenge, CallFunc_Add_IntInt_ReturnValue_15) == 0x001BB8, "Member 'BP_ChallengeManager_C_Choose_Daily_Challenge::CallFunc_Add_IntInt_ReturnValue_15' has a wrong offset!");

// Function BP_ChallengeManager.BP_ChallengeManager_C.Is Slot Past Daily Reset
// 0x0028 (0x0028 - 0x0000)
struct BP_ChallengeManager_C_Is_Slot_Past_Daily_Reset final
{
public:
	class ABP_ChallengeSlot_C*                    Slot;                                              // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FDateTime                              CallFunc_Get_Last_Reset_Timestamp_Last_Reset_Timestamp; // 0x0010(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	struct FDateTime                              CallFunc_Get_Timestamp_Timestamp;                  // 0x0018(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	E_ChallengeSlotState                          CallFunc_Get_Slot_State_Slot_State;                // 0x0020(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Greater_DateTimeDateTime_ReturnValue;     // 0x0021(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue;          // 0x0022(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_ChallengeManager_C_Is_Slot_Past_Daily_Reset) == 0x000008, "Wrong alignment on BP_ChallengeManager_C_Is_Slot_Past_Daily_Reset");
static_assert(sizeof(BP_ChallengeManager_C_Is_Slot_Past_Daily_Reset) == 0x000028, "Wrong size on BP_ChallengeManager_C_Is_Slot_Past_Daily_Reset");
static_assert(offsetof(BP_ChallengeManager_C_Is_Slot_Past_Daily_Reset, Slot) == 0x000000, "Member 'BP_ChallengeManager_C_Is_Slot_Past_Daily_Reset::Slot' has a wrong offset!");
static_assert(offsetof(BP_ChallengeManager_C_Is_Slot_Past_Daily_Reset, ReturnValue) == 0x000008, "Member 'BP_ChallengeManager_C_Is_Slot_Past_Daily_Reset::ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_ChallengeManager_C_Is_Slot_Past_Daily_Reset, CallFunc_Get_Last_Reset_Timestamp_Last_Reset_Timestamp) == 0x000010, "Member 'BP_ChallengeManager_C_Is_Slot_Past_Daily_Reset::CallFunc_Get_Last_Reset_Timestamp_Last_Reset_Timestamp' has a wrong offset!");
static_assert(offsetof(BP_ChallengeManager_C_Is_Slot_Past_Daily_Reset, CallFunc_Get_Timestamp_Timestamp) == 0x000018, "Member 'BP_ChallengeManager_C_Is_Slot_Past_Daily_Reset::CallFunc_Get_Timestamp_Timestamp' has a wrong offset!");
static_assert(offsetof(BP_ChallengeManager_C_Is_Slot_Past_Daily_Reset, CallFunc_Get_Slot_State_Slot_State) == 0x000020, "Member 'BP_ChallengeManager_C_Is_Slot_Past_Daily_Reset::CallFunc_Get_Slot_State_Slot_State' has a wrong offset!");
static_assert(offsetof(BP_ChallengeManager_C_Is_Slot_Past_Daily_Reset, CallFunc_Greater_DateTimeDateTime_ReturnValue) == 0x000021, "Member 'BP_ChallengeManager_C_Is_Slot_Past_Daily_Reset::CallFunc_Greater_DateTimeDateTime_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_ChallengeManager_C_Is_Slot_Past_Daily_Reset, CallFunc_EqualEqual_ByteByte_ReturnValue) == 0x000022, "Member 'BP_ChallengeManager_C_Is_Slot_Past_Daily_Reset::CallFunc_EqualEqual_ByteByte_ReturnValue' has a wrong offset!");

// Function BP_ChallengeManager.BP_ChallengeManager_C.Get Cloud Stats
// 0x0050 (0x0050 - 0x0000)
struct BP_ChallengeManager_C_Get_Cloud_Stats final
{
public:
	TMap<class FName, struct FDateTime>           Cloud_Stats_Data_0;                                // 0x0000(0x0050)(Parm, OutParm)
};
static_assert(alignof(BP_ChallengeManager_C_Get_Cloud_Stats) == 0x000008, "Wrong alignment on BP_ChallengeManager_C_Get_Cloud_Stats");
static_assert(sizeof(BP_ChallengeManager_C_Get_Cloud_Stats) == 0x000050, "Wrong size on BP_ChallengeManager_C_Get_Cloud_Stats");
static_assert(offsetof(BP_ChallengeManager_C_Get_Cloud_Stats, Cloud_Stats_Data_0) == 0x000000, "Member 'BP_ChallengeManager_C_Get_Cloud_Stats::Cloud_Stats_Data_0' has a wrong offset!");

// Function BP_ChallengeManager.BP_ChallengeManager_C.Are Cloud Stats Loaded
// 0x0001 (0x0001 - 0x0000)
struct BP_ChallengeManager_C_Are_Cloud_Stats_Loaded final
{
public:
	bool                                          Stats_Loaded_0;                                    // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_ChallengeManager_C_Are_Cloud_Stats_Loaded) == 0x000001, "Wrong alignment on BP_ChallengeManager_C_Are_Cloud_Stats_Loaded");
static_assert(sizeof(BP_ChallengeManager_C_Are_Cloud_Stats_Loaded) == 0x000001, "Wrong size on BP_ChallengeManager_C_Are_Cloud_Stats_Loaded");
static_assert(offsetof(BP_ChallengeManager_C_Are_Cloud_Stats_Loaded, Stats_Loaded_0) == 0x000000, "Member 'BP_ChallengeManager_C_Are_Cloud_Stats_Loaded::Stats_Loaded_0' has a wrong offset!");

// Function BP_ChallengeManager.BP_ChallengeManager_C.Assign Slot IDs
// 0x00C0 (0x00C0 - 0x0000)
struct BP_ChallengeManager_C_Assign_Slot_IDs final
{
public:
	bool                                          Success;                                           // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<int32>                                 Slot_IDs;                                          // 0x0008(0x0010)(Edit, BlueprintVisible)
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x0018(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x001C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Array_Index_Variable;                     // 0x0020(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x0024(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Get_Item;                           // 0x0028(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue_1;               // 0x002C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x0030(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_31[0x3];                                       // 0x0031(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Array_Length_ReturnValue_2;               // 0x0034(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue_3;               // 0x0038(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue_1;                // 0x003C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_3D[0x3];                                       // 0x003D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Temp_int_Loop_Counter_Variable_1;                  // 0x0040(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue_2;                // 0x0044(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_45[0x3];                                       // 0x0045(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Add_IntInt_ReturnValue_1;                 // 0x0048(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Array_Index_Variable_1;                   // 0x004C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FCloudChallengeSlotInfo                CallFunc_Array_Get_Item_1;                         // 0x0050(0x0050)()
	class AChallengeSlot*                         CallFunc_Array_Get_Item_2;                         // 0x00A0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ABP_ChallengeSlot_C*                    K2Node_DynamicCast_AsBP_Challenge_Slot;            // 0x00A8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x00B0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_B1[0x3];                                       // 0x00B1(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Array_AddUnique_ReturnValue;              // 0x00B4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Array_IsValidIndex_ReturnValue;           // 0x00B8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_ChallengeManager_C_Assign_Slot_IDs) == 0x000008, "Wrong alignment on BP_ChallengeManager_C_Assign_Slot_IDs");
static_assert(sizeof(BP_ChallengeManager_C_Assign_Slot_IDs) == 0x0000C0, "Wrong size on BP_ChallengeManager_C_Assign_Slot_IDs");
static_assert(offsetof(BP_ChallengeManager_C_Assign_Slot_IDs, Success) == 0x000000, "Member 'BP_ChallengeManager_C_Assign_Slot_IDs::Success' has a wrong offset!");
static_assert(offsetof(BP_ChallengeManager_C_Assign_Slot_IDs, Slot_IDs) == 0x000008, "Member 'BP_ChallengeManager_C_Assign_Slot_IDs::Slot_IDs' has a wrong offset!");
static_assert(offsetof(BP_ChallengeManager_C_Assign_Slot_IDs, Temp_int_Loop_Counter_Variable) == 0x000018, "Member 'BP_ChallengeManager_C_Assign_Slot_IDs::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(BP_ChallengeManager_C_Assign_Slot_IDs, CallFunc_Add_IntInt_ReturnValue) == 0x00001C, "Member 'BP_ChallengeManager_C_Assign_Slot_IDs::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_ChallengeManager_C_Assign_Slot_IDs, Temp_int_Array_Index_Variable) == 0x000020, "Member 'BP_ChallengeManager_C_Assign_Slot_IDs::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(BP_ChallengeManager_C_Assign_Slot_IDs, CallFunc_Array_Length_ReturnValue) == 0x000024, "Member 'BP_ChallengeManager_C_Assign_Slot_IDs::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_ChallengeManager_C_Assign_Slot_IDs, CallFunc_Array_Get_Item) == 0x000028, "Member 'BP_ChallengeManager_C_Assign_Slot_IDs::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(BP_ChallengeManager_C_Assign_Slot_IDs, CallFunc_Array_Length_ReturnValue_1) == 0x00002C, "Member 'BP_ChallengeManager_C_Assign_Slot_IDs::CallFunc_Array_Length_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_ChallengeManager_C_Assign_Slot_IDs, CallFunc_Less_IntInt_ReturnValue) == 0x000030, "Member 'BP_ChallengeManager_C_Assign_Slot_IDs::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_ChallengeManager_C_Assign_Slot_IDs, CallFunc_Array_Length_ReturnValue_2) == 0x000034, "Member 'BP_ChallengeManager_C_Assign_Slot_IDs::CallFunc_Array_Length_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BP_ChallengeManager_C_Assign_Slot_IDs, CallFunc_Array_Length_ReturnValue_3) == 0x000038, "Member 'BP_ChallengeManager_C_Assign_Slot_IDs::CallFunc_Array_Length_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(BP_ChallengeManager_C_Assign_Slot_IDs, CallFunc_Less_IntInt_ReturnValue_1) == 0x00003C, "Member 'BP_ChallengeManager_C_Assign_Slot_IDs::CallFunc_Less_IntInt_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_ChallengeManager_C_Assign_Slot_IDs, Temp_int_Loop_Counter_Variable_1) == 0x000040, "Member 'BP_ChallengeManager_C_Assign_Slot_IDs::Temp_int_Loop_Counter_Variable_1' has a wrong offset!");
static_assert(offsetof(BP_ChallengeManager_C_Assign_Slot_IDs, CallFunc_Less_IntInt_ReturnValue_2) == 0x000044, "Member 'BP_ChallengeManager_C_Assign_Slot_IDs::CallFunc_Less_IntInt_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BP_ChallengeManager_C_Assign_Slot_IDs, CallFunc_Add_IntInt_ReturnValue_1) == 0x000048, "Member 'BP_ChallengeManager_C_Assign_Slot_IDs::CallFunc_Add_IntInt_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_ChallengeManager_C_Assign_Slot_IDs, Temp_int_Array_Index_Variable_1) == 0x00004C, "Member 'BP_ChallengeManager_C_Assign_Slot_IDs::Temp_int_Array_Index_Variable_1' has a wrong offset!");
static_assert(offsetof(BP_ChallengeManager_C_Assign_Slot_IDs, CallFunc_Array_Get_Item_1) == 0x000050, "Member 'BP_ChallengeManager_C_Assign_Slot_IDs::CallFunc_Array_Get_Item_1' has a wrong offset!");
static_assert(offsetof(BP_ChallengeManager_C_Assign_Slot_IDs, CallFunc_Array_Get_Item_2) == 0x0000A0, "Member 'BP_ChallengeManager_C_Assign_Slot_IDs::CallFunc_Array_Get_Item_2' has a wrong offset!");
static_assert(offsetof(BP_ChallengeManager_C_Assign_Slot_IDs, K2Node_DynamicCast_AsBP_Challenge_Slot) == 0x0000A8, "Member 'BP_ChallengeManager_C_Assign_Slot_IDs::K2Node_DynamicCast_AsBP_Challenge_Slot' has a wrong offset!");
static_assert(offsetof(BP_ChallengeManager_C_Assign_Slot_IDs, K2Node_DynamicCast_bSuccess) == 0x0000B0, "Member 'BP_ChallengeManager_C_Assign_Slot_IDs::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(BP_ChallengeManager_C_Assign_Slot_IDs, CallFunc_Array_AddUnique_ReturnValue) == 0x0000B4, "Member 'BP_ChallengeManager_C_Assign_Slot_IDs::CallFunc_Array_AddUnique_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_ChallengeManager_C_Assign_Slot_IDs, CallFunc_Array_IsValidIndex_ReturnValue) == 0x0000B8, "Member 'BP_ChallengeManager_C_Assign_Slot_IDs::CallFunc_Array_IsValidIndex_ReturnValue' has a wrong offset!");

// Function BP_ChallengeManager.BP_ChallengeManager_C.Find Slot by ID
// 0x0058 (0x0058 - 0x0000)
struct BP_ChallengeManager_C_Find_Slot_by_ID final
{
public:
	int32                                         Slot_ID;                                           // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class ABP_ChallengeSlot_C*                    Slot;                                              // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Success;                                           // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class ABP_ChallengeSlot_C*                    Found_Slot_Object;                                 // 0x0018(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_True_if_break_was_hit_Variable;          // 0x0020(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_21[0x3];                                       // 0x0021(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Temp_int_Array_Index_Variable;                     // 0x0024(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x0028(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2C[0x4];                                       // 0x002C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class AChallengeSlot*                         CallFunc_Array_Get_Item;                           // 0x0030(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x0038(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x003C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x003D(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_3E[0x2];                                       // 0x003E(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	class ABP_ChallengeSlot_C*                    K2Node_DynamicCast_AsBP_Challenge_Slot;            // 0x0040(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0048(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_49[0x3];                                       // 0x0049(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x004C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Get_Slot_ID_Slot_ID;                      // 0x0050(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_IntInt_ReturnValue;            // 0x0054(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_ChallengeManager_C_Find_Slot_by_ID) == 0x000008, "Wrong alignment on BP_ChallengeManager_C_Find_Slot_by_ID");
static_assert(sizeof(BP_ChallengeManager_C_Find_Slot_by_ID) == 0x000058, "Wrong size on BP_ChallengeManager_C_Find_Slot_by_ID");
static_assert(offsetof(BP_ChallengeManager_C_Find_Slot_by_ID, Slot_ID) == 0x000000, "Member 'BP_ChallengeManager_C_Find_Slot_by_ID::Slot_ID' has a wrong offset!");
static_assert(offsetof(BP_ChallengeManager_C_Find_Slot_by_ID, Slot) == 0x000008, "Member 'BP_ChallengeManager_C_Find_Slot_by_ID::Slot' has a wrong offset!");
static_assert(offsetof(BP_ChallengeManager_C_Find_Slot_by_ID, Success) == 0x000010, "Member 'BP_ChallengeManager_C_Find_Slot_by_ID::Success' has a wrong offset!");
static_assert(offsetof(BP_ChallengeManager_C_Find_Slot_by_ID, Found_Slot_Object) == 0x000018, "Member 'BP_ChallengeManager_C_Find_Slot_by_ID::Found_Slot_Object' has a wrong offset!");
static_assert(offsetof(BP_ChallengeManager_C_Find_Slot_by_ID, Temp_bool_True_if_break_was_hit_Variable) == 0x000020, "Member 'BP_ChallengeManager_C_Find_Slot_by_ID::Temp_bool_True_if_break_was_hit_Variable' has a wrong offset!");
static_assert(offsetof(BP_ChallengeManager_C_Find_Slot_by_ID, Temp_int_Array_Index_Variable) == 0x000024, "Member 'BP_ChallengeManager_C_Find_Slot_by_ID::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(BP_ChallengeManager_C_Find_Slot_by_ID, Temp_int_Loop_Counter_Variable) == 0x000028, "Member 'BP_ChallengeManager_C_Find_Slot_by_ID::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(BP_ChallengeManager_C_Find_Slot_by_ID, CallFunc_Array_Get_Item) == 0x000030, "Member 'BP_ChallengeManager_C_Find_Slot_by_ID::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(BP_ChallengeManager_C_Find_Slot_by_ID, CallFunc_Array_Length_ReturnValue) == 0x000038, "Member 'BP_ChallengeManager_C_Find_Slot_by_ID::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_ChallengeManager_C_Find_Slot_by_ID, CallFunc_IsValid_ReturnValue) == 0x00003C, "Member 'BP_ChallengeManager_C_Find_Slot_by_ID::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_ChallengeManager_C_Find_Slot_by_ID, CallFunc_Less_IntInt_ReturnValue) == 0x00003D, "Member 'BP_ChallengeManager_C_Find_Slot_by_ID::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_ChallengeManager_C_Find_Slot_by_ID, K2Node_DynamicCast_AsBP_Challenge_Slot) == 0x000040, "Member 'BP_ChallengeManager_C_Find_Slot_by_ID::K2Node_DynamicCast_AsBP_Challenge_Slot' has a wrong offset!");
static_assert(offsetof(BP_ChallengeManager_C_Find_Slot_by_ID, K2Node_DynamicCast_bSuccess) == 0x000048, "Member 'BP_ChallengeManager_C_Find_Slot_by_ID::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(BP_ChallengeManager_C_Find_Slot_by_ID, CallFunc_Add_IntInt_ReturnValue) == 0x00004C, "Member 'BP_ChallengeManager_C_Find_Slot_by_ID::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_ChallengeManager_C_Find_Slot_by_ID, CallFunc_Get_Slot_ID_Slot_ID) == 0x000050, "Member 'BP_ChallengeManager_C_Find_Slot_by_ID::CallFunc_Get_Slot_ID_Slot_ID' has a wrong offset!");
static_assert(offsetof(BP_ChallengeManager_C_Find_Slot_by_ID, CallFunc_EqualEqual_IntInt_ReturnValue) == 0x000054, "Member 'BP_ChallengeManager_C_Find_Slot_by_ID::CallFunc_EqualEqual_IntInt_ReturnValue' has a wrong offset!");

// Function BP_ChallengeManager.BP_ChallengeManager_C.Print Status
// 0x01B8 (0x01B8 - 0x0000)
struct BP_ChallengeManager_C_Print_Status final
{
public:
	TArray<class FString>                         Prerequisite_List;                                 // 0x0000(0x0010)(Edit, BlueprintVisible)
	int32                                         Temp_int_Array_Index_Variable;                     // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x0014(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x0018(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTimespan                              CallFunc_Get_Time_to_Next_Reset_ReturnValue;       // 0x0020(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	struct FTimespan                              CallFunc_Get_Time_since_Last_Reset_ReturnValue;    // 0x0028(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class FString                                 CallFunc_ToString__Timespan__String;               // 0x0030(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FString                                 CallFunc_ToString__Timespan__String_1;             // 0x0040(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FString                                 CallFunc_Conv_BoolToString_ReturnValue;            // 0x0050(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FString                                 CallFunc_JoinStringArray_ReturnValue;              // 0x0060(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	TArray<TSoftClassPtr<class UClass>>           CallFunc_Map_Keys_Keys;                            // 0x0070(0x0010)(ReferenceParm)
	class FString                                 CallFunc_GetEnumeratorUserFriendlyName_ReturnValue; // 0x0080(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	TSoftClassPtr<class UClass>                   CallFunc_Array_Get_Item;                           // 0x0090(0x0028)(HasGetValueTypeHash)
	class FString                                 CallFunc_Concat_StrStr_ReturnValue;                // 0x00B8(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FString                                 CallFunc_Conv_SoftClassReferenceToString_ReturnValue; // 0x00C8(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FString                                 CallFunc_Concat_StrStr_ReturnValue_1;              // 0x00D8(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FString                                 CallFunc_Concat_StrStr_ReturnValue_2;              // 0x00E8(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FString                                 CallFunc_Concat_StrStr_ReturnValue_3;              // 0x00F8(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class AChallengePrerequisite*                 CallFunc_Map_Find_Value;                           // 0x0108(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Map_Find_ReturnValue;                     // 0x0110(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_111[0x7];                                      // 0x0111(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 CallFunc_Concat_StrStr_ReturnValue_4;              // 0x0118(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0128(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_129[0x7];                                      // 0x0129(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 CallFunc_Concat_StrStr_ReturnValue_5;              // 0x0130(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FString                                 CallFunc_Conv_BoolToString_ReturnValue_1;          // 0x0140(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FString                                 CallFunc_Concat_StrStr_ReturnValue_6;              // 0x0150(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FString                                 CallFunc_Concat_StrStr_ReturnValue_7;              // 0x0160(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FString                                 CallFunc_Concat_StrStr_ReturnValue_8;              // 0x0170(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Add_ReturnValue;                    // 0x0180(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_184[0x4];                                      // 0x0184(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 CallFunc_Concat_StrStr_ReturnValue_9;              // 0x0188(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x0198(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_19C[0x4];                                      // 0x019C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 CallFunc_Concat_StrStr_ReturnValue_10;             // 0x01A0(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x01B0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_ChallengeManager_C_Print_Status) == 0x000008, "Wrong alignment on BP_ChallengeManager_C_Print_Status");
static_assert(sizeof(BP_ChallengeManager_C_Print_Status) == 0x0001B8, "Wrong size on BP_ChallengeManager_C_Print_Status");
static_assert(offsetof(BP_ChallengeManager_C_Print_Status, Prerequisite_List) == 0x000000, "Member 'BP_ChallengeManager_C_Print_Status::Prerequisite_List' has a wrong offset!");
static_assert(offsetof(BP_ChallengeManager_C_Print_Status, Temp_int_Array_Index_Variable) == 0x000010, "Member 'BP_ChallengeManager_C_Print_Status::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(BP_ChallengeManager_C_Print_Status, Temp_int_Loop_Counter_Variable) == 0x000014, "Member 'BP_ChallengeManager_C_Print_Status::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(BP_ChallengeManager_C_Print_Status, CallFunc_Add_IntInt_ReturnValue) == 0x000018, "Member 'BP_ChallengeManager_C_Print_Status::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_ChallengeManager_C_Print_Status, CallFunc_Get_Time_to_Next_Reset_ReturnValue) == 0x000020, "Member 'BP_ChallengeManager_C_Print_Status::CallFunc_Get_Time_to_Next_Reset_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_ChallengeManager_C_Print_Status, CallFunc_Get_Time_since_Last_Reset_ReturnValue) == 0x000028, "Member 'BP_ChallengeManager_C_Print_Status::CallFunc_Get_Time_since_Last_Reset_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_ChallengeManager_C_Print_Status, CallFunc_ToString__Timespan__String) == 0x000030, "Member 'BP_ChallengeManager_C_Print_Status::CallFunc_ToString__Timespan__String' has a wrong offset!");
static_assert(offsetof(BP_ChallengeManager_C_Print_Status, CallFunc_ToString__Timespan__String_1) == 0x000040, "Member 'BP_ChallengeManager_C_Print_Status::CallFunc_ToString__Timespan__String_1' has a wrong offset!");
static_assert(offsetof(BP_ChallengeManager_C_Print_Status, CallFunc_Conv_BoolToString_ReturnValue) == 0x000050, "Member 'BP_ChallengeManager_C_Print_Status::CallFunc_Conv_BoolToString_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_ChallengeManager_C_Print_Status, CallFunc_JoinStringArray_ReturnValue) == 0x000060, "Member 'BP_ChallengeManager_C_Print_Status::CallFunc_JoinStringArray_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_ChallengeManager_C_Print_Status, CallFunc_Map_Keys_Keys) == 0x000070, "Member 'BP_ChallengeManager_C_Print_Status::CallFunc_Map_Keys_Keys' has a wrong offset!");
static_assert(offsetof(BP_ChallengeManager_C_Print_Status, CallFunc_GetEnumeratorUserFriendlyName_ReturnValue) == 0x000080, "Member 'BP_ChallengeManager_C_Print_Status::CallFunc_GetEnumeratorUserFriendlyName_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_ChallengeManager_C_Print_Status, CallFunc_Array_Get_Item) == 0x000090, "Member 'BP_ChallengeManager_C_Print_Status::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(BP_ChallengeManager_C_Print_Status, CallFunc_Concat_StrStr_ReturnValue) == 0x0000B8, "Member 'BP_ChallengeManager_C_Print_Status::CallFunc_Concat_StrStr_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_ChallengeManager_C_Print_Status, CallFunc_Conv_SoftClassReferenceToString_ReturnValue) == 0x0000C8, "Member 'BP_ChallengeManager_C_Print_Status::CallFunc_Conv_SoftClassReferenceToString_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_ChallengeManager_C_Print_Status, CallFunc_Concat_StrStr_ReturnValue_1) == 0x0000D8, "Member 'BP_ChallengeManager_C_Print_Status::CallFunc_Concat_StrStr_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_ChallengeManager_C_Print_Status, CallFunc_Concat_StrStr_ReturnValue_2) == 0x0000E8, "Member 'BP_ChallengeManager_C_Print_Status::CallFunc_Concat_StrStr_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BP_ChallengeManager_C_Print_Status, CallFunc_Concat_StrStr_ReturnValue_3) == 0x0000F8, "Member 'BP_ChallengeManager_C_Print_Status::CallFunc_Concat_StrStr_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(BP_ChallengeManager_C_Print_Status, CallFunc_Map_Find_Value) == 0x000108, "Member 'BP_ChallengeManager_C_Print_Status::CallFunc_Map_Find_Value' has a wrong offset!");
static_assert(offsetof(BP_ChallengeManager_C_Print_Status, CallFunc_Map_Find_ReturnValue) == 0x000110, "Member 'BP_ChallengeManager_C_Print_Status::CallFunc_Map_Find_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_ChallengeManager_C_Print_Status, CallFunc_Concat_StrStr_ReturnValue_4) == 0x000118, "Member 'BP_ChallengeManager_C_Print_Status::CallFunc_Concat_StrStr_ReturnValue_4' has a wrong offset!");
static_assert(offsetof(BP_ChallengeManager_C_Print_Status, CallFunc_IsValid_ReturnValue) == 0x000128, "Member 'BP_ChallengeManager_C_Print_Status::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_ChallengeManager_C_Print_Status, CallFunc_Concat_StrStr_ReturnValue_5) == 0x000130, "Member 'BP_ChallengeManager_C_Print_Status::CallFunc_Concat_StrStr_ReturnValue_5' has a wrong offset!");
static_assert(offsetof(BP_ChallengeManager_C_Print_Status, CallFunc_Conv_BoolToString_ReturnValue_1) == 0x000140, "Member 'BP_ChallengeManager_C_Print_Status::CallFunc_Conv_BoolToString_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_ChallengeManager_C_Print_Status, CallFunc_Concat_StrStr_ReturnValue_6) == 0x000150, "Member 'BP_ChallengeManager_C_Print_Status::CallFunc_Concat_StrStr_ReturnValue_6' has a wrong offset!");
static_assert(offsetof(BP_ChallengeManager_C_Print_Status, CallFunc_Concat_StrStr_ReturnValue_7) == 0x000160, "Member 'BP_ChallengeManager_C_Print_Status::CallFunc_Concat_StrStr_ReturnValue_7' has a wrong offset!");
static_assert(offsetof(BP_ChallengeManager_C_Print_Status, CallFunc_Concat_StrStr_ReturnValue_8) == 0x000170, "Member 'BP_ChallengeManager_C_Print_Status::CallFunc_Concat_StrStr_ReturnValue_8' has a wrong offset!");
static_assert(offsetof(BP_ChallengeManager_C_Print_Status, CallFunc_Array_Add_ReturnValue) == 0x000180, "Member 'BP_ChallengeManager_C_Print_Status::CallFunc_Array_Add_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_ChallengeManager_C_Print_Status, CallFunc_Concat_StrStr_ReturnValue_9) == 0x000188, "Member 'BP_ChallengeManager_C_Print_Status::CallFunc_Concat_StrStr_ReturnValue_9' has a wrong offset!");
static_assert(offsetof(BP_ChallengeManager_C_Print_Status, CallFunc_Array_Length_ReturnValue) == 0x000198, "Member 'BP_ChallengeManager_C_Print_Status::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_ChallengeManager_C_Print_Status, CallFunc_Concat_StrStr_ReturnValue_10) == 0x0001A0, "Member 'BP_ChallengeManager_C_Print_Status::CallFunc_Concat_StrStr_ReturnValue_10' has a wrong offset!");
static_assert(offsetof(BP_ChallengeManager_C_Print_Status, CallFunc_Less_IntInt_ReturnValue) == 0x0001B0, "Member 'BP_ChallengeManager_C_Print_Status::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");

// Function BP_ChallengeManager.BP_ChallengeManager_C.Print Challenge Slots Received Result
// 0x0300 (0x0300 - 0x0000)
struct BP_ChallengeManager_C_Print_Challenge_Slots_Received_Result final
{
public:
	struct FCloudRequestResult                    CloudRequestResult;                                // 0x0000(0x0058)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
	struct FLinearColor                           Temp_struct_Variable;                              // 0x0058(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FString                                 CallFunc_Conv_IntToString_ReturnValue;             // 0x0068(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FString                                 CallFunc_Conv_IntToString_ReturnValue_1;           // 0x0078(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FString                                 CallFunc_Conv_IntToString_ReturnValue_2;           // 0x0088(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue;          // 0x0098(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_99[0x7];                                       // 0x0099(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 CallFunc_GetEnumeratorUserFriendlyName_ReturnValue; // 0x00A0(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FString                                 CallFunc_Concat_StrStr_ReturnValue;                // 0x00B0(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	int32                                         Temp_int_Array_Index_Variable;                     // 0x00C0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_C4[0x4];                                       // 0x00C4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 CallFunc_Concat_StrStr_ReturnValue_1;              // 0x00C8(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FString                                 CallFunc_Concat_StrStr_ReturnValue_2;              // 0x00D8(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FString                                 CallFunc_Concat_StrStr_ReturnValue_3;              // 0x00E8(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	struct FCloudChallengeSlotInfo                CallFunc_Array_Get_Item;                           // 0x00F8(0x0050)()
	class FString                                 CallFunc_Concat_StrStr_ReturnValue_4;              // 0x0148(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FString                                 CallFunc_Concat_StrStr_ReturnValue_5;              // 0x0158(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FString                                 CallFunc_ToString__DateTime__String;               // 0x0168(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FString                                 CallFunc_Concat_StrStr_ReturnValue_6;              // 0x0178(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FString                                 CallFunc_ToString__DateTime__String_1;             // 0x0188(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FString                                 CallFunc_Concat_StrStr_ReturnValue_7;              // 0x0198(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FString                                 CallFunc_Conv_IntToString_ReturnValue_3;           // 0x01A8(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FString                                 CallFunc_Concat_StrStr_ReturnValue_8;              // 0x01B8(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FString                                 CallFunc_Conv_NameToString_ReturnValue;            // 0x01C8(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FString                                 CallFunc_Concat_StrStr_ReturnValue_9;              // 0x01D8(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FString                                 CallFunc_Conv_IntToString_ReturnValue_4;           // 0x01E8(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x01F8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1FC[0x4];                                      // 0x01FC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 CallFunc_Concat_StrStr_ReturnValue_10;             // 0x0200(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	struct FLinearColor                           Temp_struct_Variable_1;                            // 0x0210(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FString                                 CallFunc_Concat_StrStr_ReturnValue_11;             // 0x0220(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FString                                 CallFunc_Concat_StrStr_ReturnValue_12;             // 0x0230(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x0240(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_244[0x4];                                      // 0x0244(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 CallFunc_Concat_StrStr_ReturnValue_13;             // 0x0248(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FString                                 CallFunc_Concat_StrStr_ReturnValue_14;             // 0x0258(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x0268(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_269[0x7];                                      // 0x0269(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 CallFunc_Concat_StrStr_ReturnValue_15;             // 0x0270(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FString                                 CallFunc_Concat_StrStr_ReturnValue_16;             // 0x0280(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x0290(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_294[0x4];                                      // 0x0294(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 CallFunc_Concat_StrStr_ReturnValue_17;             // 0x0298(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FString                                 CallFunc_Concat_StrStr_ReturnValue_18;             // 0x02A8(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FString                                 CallFunc_Concat_StrStr_ReturnValue_19;             // 0x02B8(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable;                                // 0x02C8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_2C9[0x7];                                      // 0x02C9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 CallFunc_Concat_StrStr_ReturnValue_20;             // 0x02D0(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FString                                 CallFunc_Concat_StrStr_ReturnValue_21;             // 0x02E0(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	struct FLinearColor                           K2Node_Select_Default;                             // 0x02F0(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_ChallengeManager_C_Print_Challenge_Slots_Received_Result) == 0x000008, "Wrong alignment on BP_ChallengeManager_C_Print_Challenge_Slots_Received_Result");
static_assert(sizeof(BP_ChallengeManager_C_Print_Challenge_Slots_Received_Result) == 0x000300, "Wrong size on BP_ChallengeManager_C_Print_Challenge_Slots_Received_Result");
static_assert(offsetof(BP_ChallengeManager_C_Print_Challenge_Slots_Received_Result, CloudRequestResult) == 0x000000, "Member 'BP_ChallengeManager_C_Print_Challenge_Slots_Received_Result::CloudRequestResult' has a wrong offset!");
static_assert(offsetof(BP_ChallengeManager_C_Print_Challenge_Slots_Received_Result, Temp_struct_Variable) == 0x000058, "Member 'BP_ChallengeManager_C_Print_Challenge_Slots_Received_Result::Temp_struct_Variable' has a wrong offset!");
static_assert(offsetof(BP_ChallengeManager_C_Print_Challenge_Slots_Received_Result, CallFunc_Conv_IntToString_ReturnValue) == 0x000068, "Member 'BP_ChallengeManager_C_Print_Challenge_Slots_Received_Result::CallFunc_Conv_IntToString_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_ChallengeManager_C_Print_Challenge_Slots_Received_Result, CallFunc_Conv_IntToString_ReturnValue_1) == 0x000078, "Member 'BP_ChallengeManager_C_Print_Challenge_Slots_Received_Result::CallFunc_Conv_IntToString_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_ChallengeManager_C_Print_Challenge_Slots_Received_Result, CallFunc_Conv_IntToString_ReturnValue_2) == 0x000088, "Member 'BP_ChallengeManager_C_Print_Challenge_Slots_Received_Result::CallFunc_Conv_IntToString_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BP_ChallengeManager_C_Print_Challenge_Slots_Received_Result, CallFunc_EqualEqual_ByteByte_ReturnValue) == 0x000098, "Member 'BP_ChallengeManager_C_Print_Challenge_Slots_Received_Result::CallFunc_EqualEqual_ByteByte_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_ChallengeManager_C_Print_Challenge_Slots_Received_Result, CallFunc_GetEnumeratorUserFriendlyName_ReturnValue) == 0x0000A0, "Member 'BP_ChallengeManager_C_Print_Challenge_Slots_Received_Result::CallFunc_GetEnumeratorUserFriendlyName_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_ChallengeManager_C_Print_Challenge_Slots_Received_Result, CallFunc_Concat_StrStr_ReturnValue) == 0x0000B0, "Member 'BP_ChallengeManager_C_Print_Challenge_Slots_Received_Result::CallFunc_Concat_StrStr_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_ChallengeManager_C_Print_Challenge_Slots_Received_Result, Temp_int_Array_Index_Variable) == 0x0000C0, "Member 'BP_ChallengeManager_C_Print_Challenge_Slots_Received_Result::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(BP_ChallengeManager_C_Print_Challenge_Slots_Received_Result, CallFunc_Concat_StrStr_ReturnValue_1) == 0x0000C8, "Member 'BP_ChallengeManager_C_Print_Challenge_Slots_Received_Result::CallFunc_Concat_StrStr_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_ChallengeManager_C_Print_Challenge_Slots_Received_Result, CallFunc_Concat_StrStr_ReturnValue_2) == 0x0000D8, "Member 'BP_ChallengeManager_C_Print_Challenge_Slots_Received_Result::CallFunc_Concat_StrStr_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BP_ChallengeManager_C_Print_Challenge_Slots_Received_Result, CallFunc_Concat_StrStr_ReturnValue_3) == 0x0000E8, "Member 'BP_ChallengeManager_C_Print_Challenge_Slots_Received_Result::CallFunc_Concat_StrStr_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(BP_ChallengeManager_C_Print_Challenge_Slots_Received_Result, CallFunc_Array_Get_Item) == 0x0000F8, "Member 'BP_ChallengeManager_C_Print_Challenge_Slots_Received_Result::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(BP_ChallengeManager_C_Print_Challenge_Slots_Received_Result, CallFunc_Concat_StrStr_ReturnValue_4) == 0x000148, "Member 'BP_ChallengeManager_C_Print_Challenge_Slots_Received_Result::CallFunc_Concat_StrStr_ReturnValue_4' has a wrong offset!");
static_assert(offsetof(BP_ChallengeManager_C_Print_Challenge_Slots_Received_Result, CallFunc_Concat_StrStr_ReturnValue_5) == 0x000158, "Member 'BP_ChallengeManager_C_Print_Challenge_Slots_Received_Result::CallFunc_Concat_StrStr_ReturnValue_5' has a wrong offset!");
static_assert(offsetof(BP_ChallengeManager_C_Print_Challenge_Slots_Received_Result, CallFunc_ToString__DateTime__String) == 0x000168, "Member 'BP_ChallengeManager_C_Print_Challenge_Slots_Received_Result::CallFunc_ToString__DateTime__String' has a wrong offset!");
static_assert(offsetof(BP_ChallengeManager_C_Print_Challenge_Slots_Received_Result, CallFunc_Concat_StrStr_ReturnValue_6) == 0x000178, "Member 'BP_ChallengeManager_C_Print_Challenge_Slots_Received_Result::CallFunc_Concat_StrStr_ReturnValue_6' has a wrong offset!");
static_assert(offsetof(BP_ChallengeManager_C_Print_Challenge_Slots_Received_Result, CallFunc_ToString__DateTime__String_1) == 0x000188, "Member 'BP_ChallengeManager_C_Print_Challenge_Slots_Received_Result::CallFunc_ToString__DateTime__String_1' has a wrong offset!");
static_assert(offsetof(BP_ChallengeManager_C_Print_Challenge_Slots_Received_Result, CallFunc_Concat_StrStr_ReturnValue_7) == 0x000198, "Member 'BP_ChallengeManager_C_Print_Challenge_Slots_Received_Result::CallFunc_Concat_StrStr_ReturnValue_7' has a wrong offset!");
static_assert(offsetof(BP_ChallengeManager_C_Print_Challenge_Slots_Received_Result, CallFunc_Conv_IntToString_ReturnValue_3) == 0x0001A8, "Member 'BP_ChallengeManager_C_Print_Challenge_Slots_Received_Result::CallFunc_Conv_IntToString_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(BP_ChallengeManager_C_Print_Challenge_Slots_Received_Result, CallFunc_Concat_StrStr_ReturnValue_8) == 0x0001B8, "Member 'BP_ChallengeManager_C_Print_Challenge_Slots_Received_Result::CallFunc_Concat_StrStr_ReturnValue_8' has a wrong offset!");
static_assert(offsetof(BP_ChallengeManager_C_Print_Challenge_Slots_Received_Result, CallFunc_Conv_NameToString_ReturnValue) == 0x0001C8, "Member 'BP_ChallengeManager_C_Print_Challenge_Slots_Received_Result::CallFunc_Conv_NameToString_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_ChallengeManager_C_Print_Challenge_Slots_Received_Result, CallFunc_Concat_StrStr_ReturnValue_9) == 0x0001D8, "Member 'BP_ChallengeManager_C_Print_Challenge_Slots_Received_Result::CallFunc_Concat_StrStr_ReturnValue_9' has a wrong offset!");
static_assert(offsetof(BP_ChallengeManager_C_Print_Challenge_Slots_Received_Result, CallFunc_Conv_IntToString_ReturnValue_4) == 0x0001E8, "Member 'BP_ChallengeManager_C_Print_Challenge_Slots_Received_Result::CallFunc_Conv_IntToString_ReturnValue_4' has a wrong offset!");
static_assert(offsetof(BP_ChallengeManager_C_Print_Challenge_Slots_Received_Result, CallFunc_Array_Length_ReturnValue) == 0x0001F8, "Member 'BP_ChallengeManager_C_Print_Challenge_Slots_Received_Result::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_ChallengeManager_C_Print_Challenge_Slots_Received_Result, CallFunc_Concat_StrStr_ReturnValue_10) == 0x000200, "Member 'BP_ChallengeManager_C_Print_Challenge_Slots_Received_Result::CallFunc_Concat_StrStr_ReturnValue_10' has a wrong offset!");
static_assert(offsetof(BP_ChallengeManager_C_Print_Challenge_Slots_Received_Result, Temp_struct_Variable_1) == 0x000210, "Member 'BP_ChallengeManager_C_Print_Challenge_Slots_Received_Result::Temp_struct_Variable_1' has a wrong offset!");
static_assert(offsetof(BP_ChallengeManager_C_Print_Challenge_Slots_Received_Result, CallFunc_Concat_StrStr_ReturnValue_11) == 0x000220, "Member 'BP_ChallengeManager_C_Print_Challenge_Slots_Received_Result::CallFunc_Concat_StrStr_ReturnValue_11' has a wrong offset!");
static_assert(offsetof(BP_ChallengeManager_C_Print_Challenge_Slots_Received_Result, CallFunc_Concat_StrStr_ReturnValue_12) == 0x000230, "Member 'BP_ChallengeManager_C_Print_Challenge_Slots_Received_Result::CallFunc_Concat_StrStr_ReturnValue_12' has a wrong offset!");
static_assert(offsetof(BP_ChallengeManager_C_Print_Challenge_Slots_Received_Result, Temp_int_Loop_Counter_Variable) == 0x000240, "Member 'BP_ChallengeManager_C_Print_Challenge_Slots_Received_Result::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(BP_ChallengeManager_C_Print_Challenge_Slots_Received_Result, CallFunc_Concat_StrStr_ReturnValue_13) == 0x000248, "Member 'BP_ChallengeManager_C_Print_Challenge_Slots_Received_Result::CallFunc_Concat_StrStr_ReturnValue_13' has a wrong offset!");
static_assert(offsetof(BP_ChallengeManager_C_Print_Challenge_Slots_Received_Result, CallFunc_Concat_StrStr_ReturnValue_14) == 0x000258, "Member 'BP_ChallengeManager_C_Print_Challenge_Slots_Received_Result::CallFunc_Concat_StrStr_ReturnValue_14' has a wrong offset!");
static_assert(offsetof(BP_ChallengeManager_C_Print_Challenge_Slots_Received_Result, CallFunc_Less_IntInt_ReturnValue) == 0x000268, "Member 'BP_ChallengeManager_C_Print_Challenge_Slots_Received_Result::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_ChallengeManager_C_Print_Challenge_Slots_Received_Result, CallFunc_Concat_StrStr_ReturnValue_15) == 0x000270, "Member 'BP_ChallengeManager_C_Print_Challenge_Slots_Received_Result::CallFunc_Concat_StrStr_ReturnValue_15' has a wrong offset!");
static_assert(offsetof(BP_ChallengeManager_C_Print_Challenge_Slots_Received_Result, CallFunc_Concat_StrStr_ReturnValue_16) == 0x000280, "Member 'BP_ChallengeManager_C_Print_Challenge_Slots_Received_Result::CallFunc_Concat_StrStr_ReturnValue_16' has a wrong offset!");
static_assert(offsetof(BP_ChallengeManager_C_Print_Challenge_Slots_Received_Result, CallFunc_Add_IntInt_ReturnValue) == 0x000290, "Member 'BP_ChallengeManager_C_Print_Challenge_Slots_Received_Result::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_ChallengeManager_C_Print_Challenge_Slots_Received_Result, CallFunc_Concat_StrStr_ReturnValue_17) == 0x000298, "Member 'BP_ChallengeManager_C_Print_Challenge_Slots_Received_Result::CallFunc_Concat_StrStr_ReturnValue_17' has a wrong offset!");
static_assert(offsetof(BP_ChallengeManager_C_Print_Challenge_Slots_Received_Result, CallFunc_Concat_StrStr_ReturnValue_18) == 0x0002A8, "Member 'BP_ChallengeManager_C_Print_Challenge_Slots_Received_Result::CallFunc_Concat_StrStr_ReturnValue_18' has a wrong offset!");
static_assert(offsetof(BP_ChallengeManager_C_Print_Challenge_Slots_Received_Result, CallFunc_Concat_StrStr_ReturnValue_19) == 0x0002B8, "Member 'BP_ChallengeManager_C_Print_Challenge_Slots_Received_Result::CallFunc_Concat_StrStr_ReturnValue_19' has a wrong offset!");
static_assert(offsetof(BP_ChallengeManager_C_Print_Challenge_Slots_Received_Result, Temp_bool_Variable) == 0x0002C8, "Member 'BP_ChallengeManager_C_Print_Challenge_Slots_Received_Result::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(BP_ChallengeManager_C_Print_Challenge_Slots_Received_Result, CallFunc_Concat_StrStr_ReturnValue_20) == 0x0002D0, "Member 'BP_ChallengeManager_C_Print_Challenge_Slots_Received_Result::CallFunc_Concat_StrStr_ReturnValue_20' has a wrong offset!");
static_assert(offsetof(BP_ChallengeManager_C_Print_Challenge_Slots_Received_Result, CallFunc_Concat_StrStr_ReturnValue_21) == 0x0002E0, "Member 'BP_ChallengeManager_C_Print_Challenge_Slots_Received_Result::CallFunc_Concat_StrStr_ReturnValue_21' has a wrong offset!");
static_assert(offsetof(BP_ChallengeManager_C_Print_Challenge_Slots_Received_Result, K2Node_Select_Default) == 0x0002F0, "Member 'BP_ChallengeManager_C_Print_Challenge_Slots_Received_Result::K2Node_Select_Default' has a wrong offset!");

// Function BP_ChallengeManager.BP_ChallengeManager_C.Print Challenge Stats Received Result
// 0x0178 (0x0178 - 0x0000)
struct BP_ChallengeManager_C_Print_Challenge_Stats_Received_Result final
{
public:
	struct FCloudRequestResult                    CloudRequestResult;                                // 0x0000(0x0058)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
	struct FLinearColor                           Temp_struct_Variable;                              // 0x0058(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FString                                 CallFunc_Conv_IntToString_ReturnValue;             // 0x0068(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FString                                 CallFunc_Conv_IntToString_ReturnValue_1;           // 0x0078(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FString                                 CallFunc_Conv_IntToString_ReturnValue_2;           // 0x0088(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue;          // 0x0098(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_99[0x7];                                       // 0x0099(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 CallFunc_GetEnumeratorUserFriendlyName_ReturnValue; // 0x00A0(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	struct FLinearColor                           Temp_struct_Variable_1;                            // 0x00B0(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FString                                 CallFunc_Concat_StrStr_ReturnValue;                // 0x00C0(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FString                                 CallFunc_Concat_StrStr_ReturnValue_1;              // 0x00D0(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable;                                // 0x00E0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_E1[0x7];                                       // 0x00E1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 CallFunc_Concat_StrStr_ReturnValue_2;              // 0x00E8(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FString                                 CallFunc_Concat_StrStr_ReturnValue_3;              // 0x00F8(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	struct FLinearColor                           K2Node_Select_Default;                             // 0x0108(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FString                                 CallFunc_Concat_StrStr_ReturnValue_4;              // 0x0118(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FString                                 CallFunc_Concat_StrStr_ReturnValue_5;              // 0x0128(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FString                                 CallFunc_Concat_StrStr_ReturnValue_6;              // 0x0138(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FString                                 CallFunc_Concat_StrStr_ReturnValue_7;              // 0x0148(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FString                                 CallFunc_Concat_StrStr_ReturnValue_8;              // 0x0158(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FString                                 CallFunc_Concat_StrStr_ReturnValue_9;              // 0x0168(0x0010)(ZeroConstructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_ChallengeManager_C_Print_Challenge_Stats_Received_Result) == 0x000008, "Wrong alignment on BP_ChallengeManager_C_Print_Challenge_Stats_Received_Result");
static_assert(sizeof(BP_ChallengeManager_C_Print_Challenge_Stats_Received_Result) == 0x000178, "Wrong size on BP_ChallengeManager_C_Print_Challenge_Stats_Received_Result");
static_assert(offsetof(BP_ChallengeManager_C_Print_Challenge_Stats_Received_Result, CloudRequestResult) == 0x000000, "Member 'BP_ChallengeManager_C_Print_Challenge_Stats_Received_Result::CloudRequestResult' has a wrong offset!");
static_assert(offsetof(BP_ChallengeManager_C_Print_Challenge_Stats_Received_Result, Temp_struct_Variable) == 0x000058, "Member 'BP_ChallengeManager_C_Print_Challenge_Stats_Received_Result::Temp_struct_Variable' has a wrong offset!");
static_assert(offsetof(BP_ChallengeManager_C_Print_Challenge_Stats_Received_Result, CallFunc_Conv_IntToString_ReturnValue) == 0x000068, "Member 'BP_ChallengeManager_C_Print_Challenge_Stats_Received_Result::CallFunc_Conv_IntToString_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_ChallengeManager_C_Print_Challenge_Stats_Received_Result, CallFunc_Conv_IntToString_ReturnValue_1) == 0x000078, "Member 'BP_ChallengeManager_C_Print_Challenge_Stats_Received_Result::CallFunc_Conv_IntToString_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_ChallengeManager_C_Print_Challenge_Stats_Received_Result, CallFunc_Conv_IntToString_ReturnValue_2) == 0x000088, "Member 'BP_ChallengeManager_C_Print_Challenge_Stats_Received_Result::CallFunc_Conv_IntToString_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BP_ChallengeManager_C_Print_Challenge_Stats_Received_Result, CallFunc_EqualEqual_ByteByte_ReturnValue) == 0x000098, "Member 'BP_ChallengeManager_C_Print_Challenge_Stats_Received_Result::CallFunc_EqualEqual_ByteByte_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_ChallengeManager_C_Print_Challenge_Stats_Received_Result, CallFunc_GetEnumeratorUserFriendlyName_ReturnValue) == 0x0000A0, "Member 'BP_ChallengeManager_C_Print_Challenge_Stats_Received_Result::CallFunc_GetEnumeratorUserFriendlyName_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_ChallengeManager_C_Print_Challenge_Stats_Received_Result, Temp_struct_Variable_1) == 0x0000B0, "Member 'BP_ChallengeManager_C_Print_Challenge_Stats_Received_Result::Temp_struct_Variable_1' has a wrong offset!");
static_assert(offsetof(BP_ChallengeManager_C_Print_Challenge_Stats_Received_Result, CallFunc_Concat_StrStr_ReturnValue) == 0x0000C0, "Member 'BP_ChallengeManager_C_Print_Challenge_Stats_Received_Result::CallFunc_Concat_StrStr_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_ChallengeManager_C_Print_Challenge_Stats_Received_Result, CallFunc_Concat_StrStr_ReturnValue_1) == 0x0000D0, "Member 'BP_ChallengeManager_C_Print_Challenge_Stats_Received_Result::CallFunc_Concat_StrStr_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_ChallengeManager_C_Print_Challenge_Stats_Received_Result, Temp_bool_Variable) == 0x0000E0, "Member 'BP_ChallengeManager_C_Print_Challenge_Stats_Received_Result::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(BP_ChallengeManager_C_Print_Challenge_Stats_Received_Result, CallFunc_Concat_StrStr_ReturnValue_2) == 0x0000E8, "Member 'BP_ChallengeManager_C_Print_Challenge_Stats_Received_Result::CallFunc_Concat_StrStr_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BP_ChallengeManager_C_Print_Challenge_Stats_Received_Result, CallFunc_Concat_StrStr_ReturnValue_3) == 0x0000F8, "Member 'BP_ChallengeManager_C_Print_Challenge_Stats_Received_Result::CallFunc_Concat_StrStr_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(BP_ChallengeManager_C_Print_Challenge_Stats_Received_Result, K2Node_Select_Default) == 0x000108, "Member 'BP_ChallengeManager_C_Print_Challenge_Stats_Received_Result::K2Node_Select_Default' has a wrong offset!");
static_assert(offsetof(BP_ChallengeManager_C_Print_Challenge_Stats_Received_Result, CallFunc_Concat_StrStr_ReturnValue_4) == 0x000118, "Member 'BP_ChallengeManager_C_Print_Challenge_Stats_Received_Result::CallFunc_Concat_StrStr_ReturnValue_4' has a wrong offset!");
static_assert(offsetof(BP_ChallengeManager_C_Print_Challenge_Stats_Received_Result, CallFunc_Concat_StrStr_ReturnValue_5) == 0x000128, "Member 'BP_ChallengeManager_C_Print_Challenge_Stats_Received_Result::CallFunc_Concat_StrStr_ReturnValue_5' has a wrong offset!");
static_assert(offsetof(BP_ChallengeManager_C_Print_Challenge_Stats_Received_Result, CallFunc_Concat_StrStr_ReturnValue_6) == 0x000138, "Member 'BP_ChallengeManager_C_Print_Challenge_Stats_Received_Result::CallFunc_Concat_StrStr_ReturnValue_6' has a wrong offset!");
static_assert(offsetof(BP_ChallengeManager_C_Print_Challenge_Stats_Received_Result, CallFunc_Concat_StrStr_ReturnValue_7) == 0x000148, "Member 'BP_ChallengeManager_C_Print_Challenge_Stats_Received_Result::CallFunc_Concat_StrStr_ReturnValue_7' has a wrong offset!");
static_assert(offsetof(BP_ChallengeManager_C_Print_Challenge_Stats_Received_Result, CallFunc_Concat_StrStr_ReturnValue_8) == 0x000158, "Member 'BP_ChallengeManager_C_Print_Challenge_Stats_Received_Result::CallFunc_Concat_StrStr_ReturnValue_8' has a wrong offset!");
static_assert(offsetof(BP_ChallengeManager_C_Print_Challenge_Stats_Received_Result, CallFunc_Concat_StrStr_ReturnValue_9) == 0x000168, "Member 'BP_ChallengeManager_C_Print_Challenge_Stats_Received_Result::CallFunc_Concat_StrStr_ReturnValue_9' has a wrong offset!");

// Function BP_ChallengeManager.BP_ChallengeManager_C.Print Challenge Assigned Result
// 0x02D8 (0x02D8 - 0x0000)
struct BP_ChallengeManager_C_Print_Challenge_Assigned_Result final
{
public:
	struct FCloudRequestResult                    CloudRequestResult;                                // 0x0000(0x0058)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
	struct FCloudChallengeSlotInfo                CloudChallengeSlotInfo;                            // 0x0058(0x0050)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
	struct FLinearColor                           Temp_struct_Variable;                              // 0x00A8(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FString                                 CallFunc_ToString__DateTime__String;               // 0x00B8(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FString                                 CallFunc_ToString__DateTime__String_1;             // 0x00C8(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FString                                 CallFunc_Conv_IntToString_ReturnValue;             // 0x00D8(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FString                                 CallFunc_Conv_NameToString_ReturnValue;            // 0x00E8(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FString                                 CallFunc_Conv_IntToString_ReturnValue_1;           // 0x00F8(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FString                                 CallFunc_Concat_StrStr_ReturnValue;                // 0x0108(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FString                                 CallFunc_Conv_IntToString_ReturnValue_2;           // 0x0118(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FString                                 CallFunc_Concat_StrStr_ReturnValue_1;              // 0x0128(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FString                                 CallFunc_Conv_IntToString_ReturnValue_3;           // 0x0138(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FString                                 CallFunc_Concat_StrStr_ReturnValue_2;              // 0x0148(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FString                                 CallFunc_Conv_IntToString_ReturnValue_4;           // 0x0158(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FString                                 CallFunc_Concat_StrStr_ReturnValue_3;              // 0x0168(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue;          // 0x0178(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_179[0x7];                                      // 0x0179(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 CallFunc_Concat_StrStr_ReturnValue_4;              // 0x0180(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FString                                 CallFunc_GetEnumeratorUserFriendlyName_ReturnValue; // 0x0190(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FString                                 CallFunc_Concat_StrStr_ReturnValue_5;              // 0x01A0(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FString                                 CallFunc_Concat_StrStr_ReturnValue_6;              // 0x01B0(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FString                                 CallFunc_Concat_StrStr_ReturnValue_7;              // 0x01C0(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FString                                 CallFunc_Concat_StrStr_ReturnValue_8;              // 0x01D0(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FString                                 CallFunc_Concat_StrStr_ReturnValue_9;              // 0x01E0(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FString                                 CallFunc_Concat_StrStr_ReturnValue_10;             // 0x01F0(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FString                                 CallFunc_Concat_StrStr_ReturnValue_11;             // 0x0200(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FString                                 CallFunc_Concat_StrStr_ReturnValue_12;             // 0x0210(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FString                                 CallFunc_Concat_StrStr_ReturnValue_13;             // 0x0220(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FString                                 CallFunc_Concat_StrStr_ReturnValue_14;             // 0x0230(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FString                                 CallFunc_Concat_StrStr_ReturnValue_15;             // 0x0240(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FString                                 CallFunc_Concat_StrStr_ReturnValue_16;             // 0x0250(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FString                                 CallFunc_Concat_StrStr_ReturnValue_17;             // 0x0260(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FString                                 CallFunc_Concat_StrStr_ReturnValue_18;             // 0x0270(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	struct FLinearColor                           Temp_struct_Variable_1;                            // 0x0280(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FString                                 CallFunc_Concat_StrStr_ReturnValue_19;             // 0x0290(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FString                                 CallFunc_Concat_StrStr_ReturnValue_20;             // 0x02A0(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable;                                // 0x02B0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_2B1[0x7];                                      // 0x02B1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 CallFunc_Concat_StrStr_ReturnValue_21;             // 0x02B8(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	struct FLinearColor                           K2Node_Select_Default;                             // 0x02C8(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_ChallengeManager_C_Print_Challenge_Assigned_Result) == 0x000008, "Wrong alignment on BP_ChallengeManager_C_Print_Challenge_Assigned_Result");
static_assert(sizeof(BP_ChallengeManager_C_Print_Challenge_Assigned_Result) == 0x0002D8, "Wrong size on BP_ChallengeManager_C_Print_Challenge_Assigned_Result");
static_assert(offsetof(BP_ChallengeManager_C_Print_Challenge_Assigned_Result, CloudRequestResult) == 0x000000, "Member 'BP_ChallengeManager_C_Print_Challenge_Assigned_Result::CloudRequestResult' has a wrong offset!");
static_assert(offsetof(BP_ChallengeManager_C_Print_Challenge_Assigned_Result, CloudChallengeSlotInfo) == 0x000058, "Member 'BP_ChallengeManager_C_Print_Challenge_Assigned_Result::CloudChallengeSlotInfo' has a wrong offset!");
static_assert(offsetof(BP_ChallengeManager_C_Print_Challenge_Assigned_Result, Temp_struct_Variable) == 0x0000A8, "Member 'BP_ChallengeManager_C_Print_Challenge_Assigned_Result::Temp_struct_Variable' has a wrong offset!");
static_assert(offsetof(BP_ChallengeManager_C_Print_Challenge_Assigned_Result, CallFunc_ToString__DateTime__String) == 0x0000B8, "Member 'BP_ChallengeManager_C_Print_Challenge_Assigned_Result::CallFunc_ToString__DateTime__String' has a wrong offset!");
static_assert(offsetof(BP_ChallengeManager_C_Print_Challenge_Assigned_Result, CallFunc_ToString__DateTime__String_1) == 0x0000C8, "Member 'BP_ChallengeManager_C_Print_Challenge_Assigned_Result::CallFunc_ToString__DateTime__String_1' has a wrong offset!");
static_assert(offsetof(BP_ChallengeManager_C_Print_Challenge_Assigned_Result, CallFunc_Conv_IntToString_ReturnValue) == 0x0000D8, "Member 'BP_ChallengeManager_C_Print_Challenge_Assigned_Result::CallFunc_Conv_IntToString_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_ChallengeManager_C_Print_Challenge_Assigned_Result, CallFunc_Conv_NameToString_ReturnValue) == 0x0000E8, "Member 'BP_ChallengeManager_C_Print_Challenge_Assigned_Result::CallFunc_Conv_NameToString_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_ChallengeManager_C_Print_Challenge_Assigned_Result, CallFunc_Conv_IntToString_ReturnValue_1) == 0x0000F8, "Member 'BP_ChallengeManager_C_Print_Challenge_Assigned_Result::CallFunc_Conv_IntToString_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_ChallengeManager_C_Print_Challenge_Assigned_Result, CallFunc_Concat_StrStr_ReturnValue) == 0x000108, "Member 'BP_ChallengeManager_C_Print_Challenge_Assigned_Result::CallFunc_Concat_StrStr_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_ChallengeManager_C_Print_Challenge_Assigned_Result, CallFunc_Conv_IntToString_ReturnValue_2) == 0x000118, "Member 'BP_ChallengeManager_C_Print_Challenge_Assigned_Result::CallFunc_Conv_IntToString_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BP_ChallengeManager_C_Print_Challenge_Assigned_Result, CallFunc_Concat_StrStr_ReturnValue_1) == 0x000128, "Member 'BP_ChallengeManager_C_Print_Challenge_Assigned_Result::CallFunc_Concat_StrStr_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_ChallengeManager_C_Print_Challenge_Assigned_Result, CallFunc_Conv_IntToString_ReturnValue_3) == 0x000138, "Member 'BP_ChallengeManager_C_Print_Challenge_Assigned_Result::CallFunc_Conv_IntToString_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(BP_ChallengeManager_C_Print_Challenge_Assigned_Result, CallFunc_Concat_StrStr_ReturnValue_2) == 0x000148, "Member 'BP_ChallengeManager_C_Print_Challenge_Assigned_Result::CallFunc_Concat_StrStr_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BP_ChallengeManager_C_Print_Challenge_Assigned_Result, CallFunc_Conv_IntToString_ReturnValue_4) == 0x000158, "Member 'BP_ChallengeManager_C_Print_Challenge_Assigned_Result::CallFunc_Conv_IntToString_ReturnValue_4' has a wrong offset!");
static_assert(offsetof(BP_ChallengeManager_C_Print_Challenge_Assigned_Result, CallFunc_Concat_StrStr_ReturnValue_3) == 0x000168, "Member 'BP_ChallengeManager_C_Print_Challenge_Assigned_Result::CallFunc_Concat_StrStr_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(BP_ChallengeManager_C_Print_Challenge_Assigned_Result, CallFunc_EqualEqual_ByteByte_ReturnValue) == 0x000178, "Member 'BP_ChallengeManager_C_Print_Challenge_Assigned_Result::CallFunc_EqualEqual_ByteByte_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_ChallengeManager_C_Print_Challenge_Assigned_Result, CallFunc_Concat_StrStr_ReturnValue_4) == 0x000180, "Member 'BP_ChallengeManager_C_Print_Challenge_Assigned_Result::CallFunc_Concat_StrStr_ReturnValue_4' has a wrong offset!");
static_assert(offsetof(BP_ChallengeManager_C_Print_Challenge_Assigned_Result, CallFunc_GetEnumeratorUserFriendlyName_ReturnValue) == 0x000190, "Member 'BP_ChallengeManager_C_Print_Challenge_Assigned_Result::CallFunc_GetEnumeratorUserFriendlyName_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_ChallengeManager_C_Print_Challenge_Assigned_Result, CallFunc_Concat_StrStr_ReturnValue_5) == 0x0001A0, "Member 'BP_ChallengeManager_C_Print_Challenge_Assigned_Result::CallFunc_Concat_StrStr_ReturnValue_5' has a wrong offset!");
static_assert(offsetof(BP_ChallengeManager_C_Print_Challenge_Assigned_Result, CallFunc_Concat_StrStr_ReturnValue_6) == 0x0001B0, "Member 'BP_ChallengeManager_C_Print_Challenge_Assigned_Result::CallFunc_Concat_StrStr_ReturnValue_6' has a wrong offset!");
static_assert(offsetof(BP_ChallengeManager_C_Print_Challenge_Assigned_Result, CallFunc_Concat_StrStr_ReturnValue_7) == 0x0001C0, "Member 'BP_ChallengeManager_C_Print_Challenge_Assigned_Result::CallFunc_Concat_StrStr_ReturnValue_7' has a wrong offset!");
static_assert(offsetof(BP_ChallengeManager_C_Print_Challenge_Assigned_Result, CallFunc_Concat_StrStr_ReturnValue_8) == 0x0001D0, "Member 'BP_ChallengeManager_C_Print_Challenge_Assigned_Result::CallFunc_Concat_StrStr_ReturnValue_8' has a wrong offset!");
static_assert(offsetof(BP_ChallengeManager_C_Print_Challenge_Assigned_Result, CallFunc_Concat_StrStr_ReturnValue_9) == 0x0001E0, "Member 'BP_ChallengeManager_C_Print_Challenge_Assigned_Result::CallFunc_Concat_StrStr_ReturnValue_9' has a wrong offset!");
static_assert(offsetof(BP_ChallengeManager_C_Print_Challenge_Assigned_Result, CallFunc_Concat_StrStr_ReturnValue_10) == 0x0001F0, "Member 'BP_ChallengeManager_C_Print_Challenge_Assigned_Result::CallFunc_Concat_StrStr_ReturnValue_10' has a wrong offset!");
static_assert(offsetof(BP_ChallengeManager_C_Print_Challenge_Assigned_Result, CallFunc_Concat_StrStr_ReturnValue_11) == 0x000200, "Member 'BP_ChallengeManager_C_Print_Challenge_Assigned_Result::CallFunc_Concat_StrStr_ReturnValue_11' has a wrong offset!");
static_assert(offsetof(BP_ChallengeManager_C_Print_Challenge_Assigned_Result, CallFunc_Concat_StrStr_ReturnValue_12) == 0x000210, "Member 'BP_ChallengeManager_C_Print_Challenge_Assigned_Result::CallFunc_Concat_StrStr_ReturnValue_12' has a wrong offset!");
static_assert(offsetof(BP_ChallengeManager_C_Print_Challenge_Assigned_Result, CallFunc_Concat_StrStr_ReturnValue_13) == 0x000220, "Member 'BP_ChallengeManager_C_Print_Challenge_Assigned_Result::CallFunc_Concat_StrStr_ReturnValue_13' has a wrong offset!");
static_assert(offsetof(BP_ChallengeManager_C_Print_Challenge_Assigned_Result, CallFunc_Concat_StrStr_ReturnValue_14) == 0x000230, "Member 'BP_ChallengeManager_C_Print_Challenge_Assigned_Result::CallFunc_Concat_StrStr_ReturnValue_14' has a wrong offset!");
static_assert(offsetof(BP_ChallengeManager_C_Print_Challenge_Assigned_Result, CallFunc_Concat_StrStr_ReturnValue_15) == 0x000240, "Member 'BP_ChallengeManager_C_Print_Challenge_Assigned_Result::CallFunc_Concat_StrStr_ReturnValue_15' has a wrong offset!");
static_assert(offsetof(BP_ChallengeManager_C_Print_Challenge_Assigned_Result, CallFunc_Concat_StrStr_ReturnValue_16) == 0x000250, "Member 'BP_ChallengeManager_C_Print_Challenge_Assigned_Result::CallFunc_Concat_StrStr_ReturnValue_16' has a wrong offset!");
static_assert(offsetof(BP_ChallengeManager_C_Print_Challenge_Assigned_Result, CallFunc_Concat_StrStr_ReturnValue_17) == 0x000260, "Member 'BP_ChallengeManager_C_Print_Challenge_Assigned_Result::CallFunc_Concat_StrStr_ReturnValue_17' has a wrong offset!");
static_assert(offsetof(BP_ChallengeManager_C_Print_Challenge_Assigned_Result, CallFunc_Concat_StrStr_ReturnValue_18) == 0x000270, "Member 'BP_ChallengeManager_C_Print_Challenge_Assigned_Result::CallFunc_Concat_StrStr_ReturnValue_18' has a wrong offset!");
static_assert(offsetof(BP_ChallengeManager_C_Print_Challenge_Assigned_Result, Temp_struct_Variable_1) == 0x000280, "Member 'BP_ChallengeManager_C_Print_Challenge_Assigned_Result::Temp_struct_Variable_1' has a wrong offset!");
static_assert(offsetof(BP_ChallengeManager_C_Print_Challenge_Assigned_Result, CallFunc_Concat_StrStr_ReturnValue_19) == 0x000290, "Member 'BP_ChallengeManager_C_Print_Challenge_Assigned_Result::CallFunc_Concat_StrStr_ReturnValue_19' has a wrong offset!");
static_assert(offsetof(BP_ChallengeManager_C_Print_Challenge_Assigned_Result, CallFunc_Concat_StrStr_ReturnValue_20) == 0x0002A0, "Member 'BP_ChallengeManager_C_Print_Challenge_Assigned_Result::CallFunc_Concat_StrStr_ReturnValue_20' has a wrong offset!");
static_assert(offsetof(BP_ChallengeManager_C_Print_Challenge_Assigned_Result, Temp_bool_Variable) == 0x0002B0, "Member 'BP_ChallengeManager_C_Print_Challenge_Assigned_Result::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(BP_ChallengeManager_C_Print_Challenge_Assigned_Result, CallFunc_Concat_StrStr_ReturnValue_21) == 0x0002B8, "Member 'BP_ChallengeManager_C_Print_Challenge_Assigned_Result::CallFunc_Concat_StrStr_ReturnValue_21' has a wrong offset!");
static_assert(offsetof(BP_ChallengeManager_C_Print_Challenge_Assigned_Result, K2Node_Select_Default) == 0x0002C8, "Member 'BP_ChallengeManager_C_Print_Challenge_Assigned_Result::K2Node_Select_Default' has a wrong offset!");

// Function BP_ChallengeManager.BP_ChallengeManager_C.Print Challenge Progress Set Result
// 0x02D8 (0x02D8 - 0x0000)
struct BP_ChallengeManager_C_Print_Challenge_Progress_Set_Result final
{
public:
	struct FCloudRequestResult                    CloudRequestResult;                                // 0x0000(0x0058)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
	struct FCloudChallengeSlotInfo                CloudChallengeSlotInfo;                            // 0x0058(0x0050)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
	struct FLinearColor                           Temp_struct_Variable;                              // 0x00A8(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FString                                 CallFunc_ToString__DateTime__String;               // 0x00B8(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FString                                 CallFunc_ToString__DateTime__String_1;             // 0x00C8(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FString                                 CallFunc_Conv_IntToString_ReturnValue;             // 0x00D8(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FString                                 CallFunc_Conv_NameToString_ReturnValue;            // 0x00E8(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FString                                 CallFunc_Conv_IntToString_ReturnValue_1;           // 0x00F8(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FString                                 CallFunc_Concat_StrStr_ReturnValue;                // 0x0108(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FString                                 CallFunc_Conv_IntToString_ReturnValue_2;           // 0x0118(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FString                                 CallFunc_Concat_StrStr_ReturnValue_1;              // 0x0128(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FString                                 CallFunc_Conv_IntToString_ReturnValue_3;           // 0x0138(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FString                                 CallFunc_Concat_StrStr_ReturnValue_2;              // 0x0148(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FString                                 CallFunc_Conv_IntToString_ReturnValue_4;           // 0x0158(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FString                                 CallFunc_Concat_StrStr_ReturnValue_3;              // 0x0168(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue;          // 0x0178(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_179[0x7];                                      // 0x0179(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 CallFunc_Concat_StrStr_ReturnValue_4;              // 0x0180(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FString                                 CallFunc_GetEnumeratorUserFriendlyName_ReturnValue; // 0x0190(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FString                                 CallFunc_Concat_StrStr_ReturnValue_5;              // 0x01A0(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FString                                 CallFunc_Concat_StrStr_ReturnValue_6;              // 0x01B0(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FString                                 CallFunc_Concat_StrStr_ReturnValue_7;              // 0x01C0(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FString                                 CallFunc_Concat_StrStr_ReturnValue_8;              // 0x01D0(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FString                                 CallFunc_Concat_StrStr_ReturnValue_9;              // 0x01E0(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FString                                 CallFunc_Concat_StrStr_ReturnValue_10;             // 0x01F0(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FString                                 CallFunc_Concat_StrStr_ReturnValue_11;             // 0x0200(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FString                                 CallFunc_Concat_StrStr_ReturnValue_12;             // 0x0210(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FString                                 CallFunc_Concat_StrStr_ReturnValue_13;             // 0x0220(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FString                                 CallFunc_Concat_StrStr_ReturnValue_14;             // 0x0230(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FString                                 CallFunc_Concat_StrStr_ReturnValue_15;             // 0x0240(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FString                                 CallFunc_Concat_StrStr_ReturnValue_16;             // 0x0250(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FString                                 CallFunc_Concat_StrStr_ReturnValue_17;             // 0x0260(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FString                                 CallFunc_Concat_StrStr_ReturnValue_18;             // 0x0270(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	struct FLinearColor                           Temp_struct_Variable_1;                            // 0x0280(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FString                                 CallFunc_Concat_StrStr_ReturnValue_19;             // 0x0290(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FString                                 CallFunc_Concat_StrStr_ReturnValue_20;             // 0x02A0(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable;                                // 0x02B0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_2B1[0x7];                                      // 0x02B1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 CallFunc_Concat_StrStr_ReturnValue_21;             // 0x02B8(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	struct FLinearColor                           K2Node_Select_Default;                             // 0x02C8(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_ChallengeManager_C_Print_Challenge_Progress_Set_Result) == 0x000008, "Wrong alignment on BP_ChallengeManager_C_Print_Challenge_Progress_Set_Result");
static_assert(sizeof(BP_ChallengeManager_C_Print_Challenge_Progress_Set_Result) == 0x0002D8, "Wrong size on BP_ChallengeManager_C_Print_Challenge_Progress_Set_Result");
static_assert(offsetof(BP_ChallengeManager_C_Print_Challenge_Progress_Set_Result, CloudRequestResult) == 0x000000, "Member 'BP_ChallengeManager_C_Print_Challenge_Progress_Set_Result::CloudRequestResult' has a wrong offset!");
static_assert(offsetof(BP_ChallengeManager_C_Print_Challenge_Progress_Set_Result, CloudChallengeSlotInfo) == 0x000058, "Member 'BP_ChallengeManager_C_Print_Challenge_Progress_Set_Result::CloudChallengeSlotInfo' has a wrong offset!");
static_assert(offsetof(BP_ChallengeManager_C_Print_Challenge_Progress_Set_Result, Temp_struct_Variable) == 0x0000A8, "Member 'BP_ChallengeManager_C_Print_Challenge_Progress_Set_Result::Temp_struct_Variable' has a wrong offset!");
static_assert(offsetof(BP_ChallengeManager_C_Print_Challenge_Progress_Set_Result, CallFunc_ToString__DateTime__String) == 0x0000B8, "Member 'BP_ChallengeManager_C_Print_Challenge_Progress_Set_Result::CallFunc_ToString__DateTime__String' has a wrong offset!");
static_assert(offsetof(BP_ChallengeManager_C_Print_Challenge_Progress_Set_Result, CallFunc_ToString__DateTime__String_1) == 0x0000C8, "Member 'BP_ChallengeManager_C_Print_Challenge_Progress_Set_Result::CallFunc_ToString__DateTime__String_1' has a wrong offset!");
static_assert(offsetof(BP_ChallengeManager_C_Print_Challenge_Progress_Set_Result, CallFunc_Conv_IntToString_ReturnValue) == 0x0000D8, "Member 'BP_ChallengeManager_C_Print_Challenge_Progress_Set_Result::CallFunc_Conv_IntToString_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_ChallengeManager_C_Print_Challenge_Progress_Set_Result, CallFunc_Conv_NameToString_ReturnValue) == 0x0000E8, "Member 'BP_ChallengeManager_C_Print_Challenge_Progress_Set_Result::CallFunc_Conv_NameToString_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_ChallengeManager_C_Print_Challenge_Progress_Set_Result, CallFunc_Conv_IntToString_ReturnValue_1) == 0x0000F8, "Member 'BP_ChallengeManager_C_Print_Challenge_Progress_Set_Result::CallFunc_Conv_IntToString_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_ChallengeManager_C_Print_Challenge_Progress_Set_Result, CallFunc_Concat_StrStr_ReturnValue) == 0x000108, "Member 'BP_ChallengeManager_C_Print_Challenge_Progress_Set_Result::CallFunc_Concat_StrStr_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_ChallengeManager_C_Print_Challenge_Progress_Set_Result, CallFunc_Conv_IntToString_ReturnValue_2) == 0x000118, "Member 'BP_ChallengeManager_C_Print_Challenge_Progress_Set_Result::CallFunc_Conv_IntToString_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BP_ChallengeManager_C_Print_Challenge_Progress_Set_Result, CallFunc_Concat_StrStr_ReturnValue_1) == 0x000128, "Member 'BP_ChallengeManager_C_Print_Challenge_Progress_Set_Result::CallFunc_Concat_StrStr_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_ChallengeManager_C_Print_Challenge_Progress_Set_Result, CallFunc_Conv_IntToString_ReturnValue_3) == 0x000138, "Member 'BP_ChallengeManager_C_Print_Challenge_Progress_Set_Result::CallFunc_Conv_IntToString_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(BP_ChallengeManager_C_Print_Challenge_Progress_Set_Result, CallFunc_Concat_StrStr_ReturnValue_2) == 0x000148, "Member 'BP_ChallengeManager_C_Print_Challenge_Progress_Set_Result::CallFunc_Concat_StrStr_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BP_ChallengeManager_C_Print_Challenge_Progress_Set_Result, CallFunc_Conv_IntToString_ReturnValue_4) == 0x000158, "Member 'BP_ChallengeManager_C_Print_Challenge_Progress_Set_Result::CallFunc_Conv_IntToString_ReturnValue_4' has a wrong offset!");
static_assert(offsetof(BP_ChallengeManager_C_Print_Challenge_Progress_Set_Result, CallFunc_Concat_StrStr_ReturnValue_3) == 0x000168, "Member 'BP_ChallengeManager_C_Print_Challenge_Progress_Set_Result::CallFunc_Concat_StrStr_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(BP_ChallengeManager_C_Print_Challenge_Progress_Set_Result, CallFunc_EqualEqual_ByteByte_ReturnValue) == 0x000178, "Member 'BP_ChallengeManager_C_Print_Challenge_Progress_Set_Result::CallFunc_EqualEqual_ByteByte_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_ChallengeManager_C_Print_Challenge_Progress_Set_Result, CallFunc_Concat_StrStr_ReturnValue_4) == 0x000180, "Member 'BP_ChallengeManager_C_Print_Challenge_Progress_Set_Result::CallFunc_Concat_StrStr_ReturnValue_4' has a wrong offset!");
static_assert(offsetof(BP_ChallengeManager_C_Print_Challenge_Progress_Set_Result, CallFunc_GetEnumeratorUserFriendlyName_ReturnValue) == 0x000190, "Member 'BP_ChallengeManager_C_Print_Challenge_Progress_Set_Result::CallFunc_GetEnumeratorUserFriendlyName_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_ChallengeManager_C_Print_Challenge_Progress_Set_Result, CallFunc_Concat_StrStr_ReturnValue_5) == 0x0001A0, "Member 'BP_ChallengeManager_C_Print_Challenge_Progress_Set_Result::CallFunc_Concat_StrStr_ReturnValue_5' has a wrong offset!");
static_assert(offsetof(BP_ChallengeManager_C_Print_Challenge_Progress_Set_Result, CallFunc_Concat_StrStr_ReturnValue_6) == 0x0001B0, "Member 'BP_ChallengeManager_C_Print_Challenge_Progress_Set_Result::CallFunc_Concat_StrStr_ReturnValue_6' has a wrong offset!");
static_assert(offsetof(BP_ChallengeManager_C_Print_Challenge_Progress_Set_Result, CallFunc_Concat_StrStr_ReturnValue_7) == 0x0001C0, "Member 'BP_ChallengeManager_C_Print_Challenge_Progress_Set_Result::CallFunc_Concat_StrStr_ReturnValue_7' has a wrong offset!");
static_assert(offsetof(BP_ChallengeManager_C_Print_Challenge_Progress_Set_Result, CallFunc_Concat_StrStr_ReturnValue_8) == 0x0001D0, "Member 'BP_ChallengeManager_C_Print_Challenge_Progress_Set_Result::CallFunc_Concat_StrStr_ReturnValue_8' has a wrong offset!");
static_assert(offsetof(BP_ChallengeManager_C_Print_Challenge_Progress_Set_Result, CallFunc_Concat_StrStr_ReturnValue_9) == 0x0001E0, "Member 'BP_ChallengeManager_C_Print_Challenge_Progress_Set_Result::CallFunc_Concat_StrStr_ReturnValue_9' has a wrong offset!");
static_assert(offsetof(BP_ChallengeManager_C_Print_Challenge_Progress_Set_Result, CallFunc_Concat_StrStr_ReturnValue_10) == 0x0001F0, "Member 'BP_ChallengeManager_C_Print_Challenge_Progress_Set_Result::CallFunc_Concat_StrStr_ReturnValue_10' has a wrong offset!");
static_assert(offsetof(BP_ChallengeManager_C_Print_Challenge_Progress_Set_Result, CallFunc_Concat_StrStr_ReturnValue_11) == 0x000200, "Member 'BP_ChallengeManager_C_Print_Challenge_Progress_Set_Result::CallFunc_Concat_StrStr_ReturnValue_11' has a wrong offset!");
static_assert(offsetof(BP_ChallengeManager_C_Print_Challenge_Progress_Set_Result, CallFunc_Concat_StrStr_ReturnValue_12) == 0x000210, "Member 'BP_ChallengeManager_C_Print_Challenge_Progress_Set_Result::CallFunc_Concat_StrStr_ReturnValue_12' has a wrong offset!");
static_assert(offsetof(BP_ChallengeManager_C_Print_Challenge_Progress_Set_Result, CallFunc_Concat_StrStr_ReturnValue_13) == 0x000220, "Member 'BP_ChallengeManager_C_Print_Challenge_Progress_Set_Result::CallFunc_Concat_StrStr_ReturnValue_13' has a wrong offset!");
static_assert(offsetof(BP_ChallengeManager_C_Print_Challenge_Progress_Set_Result, CallFunc_Concat_StrStr_ReturnValue_14) == 0x000230, "Member 'BP_ChallengeManager_C_Print_Challenge_Progress_Set_Result::CallFunc_Concat_StrStr_ReturnValue_14' has a wrong offset!");
static_assert(offsetof(BP_ChallengeManager_C_Print_Challenge_Progress_Set_Result, CallFunc_Concat_StrStr_ReturnValue_15) == 0x000240, "Member 'BP_ChallengeManager_C_Print_Challenge_Progress_Set_Result::CallFunc_Concat_StrStr_ReturnValue_15' has a wrong offset!");
static_assert(offsetof(BP_ChallengeManager_C_Print_Challenge_Progress_Set_Result, CallFunc_Concat_StrStr_ReturnValue_16) == 0x000250, "Member 'BP_ChallengeManager_C_Print_Challenge_Progress_Set_Result::CallFunc_Concat_StrStr_ReturnValue_16' has a wrong offset!");
static_assert(offsetof(BP_ChallengeManager_C_Print_Challenge_Progress_Set_Result, CallFunc_Concat_StrStr_ReturnValue_17) == 0x000260, "Member 'BP_ChallengeManager_C_Print_Challenge_Progress_Set_Result::CallFunc_Concat_StrStr_ReturnValue_17' has a wrong offset!");
static_assert(offsetof(BP_ChallengeManager_C_Print_Challenge_Progress_Set_Result, CallFunc_Concat_StrStr_ReturnValue_18) == 0x000270, "Member 'BP_ChallengeManager_C_Print_Challenge_Progress_Set_Result::CallFunc_Concat_StrStr_ReturnValue_18' has a wrong offset!");
static_assert(offsetof(BP_ChallengeManager_C_Print_Challenge_Progress_Set_Result, Temp_struct_Variable_1) == 0x000280, "Member 'BP_ChallengeManager_C_Print_Challenge_Progress_Set_Result::Temp_struct_Variable_1' has a wrong offset!");
static_assert(offsetof(BP_ChallengeManager_C_Print_Challenge_Progress_Set_Result, CallFunc_Concat_StrStr_ReturnValue_19) == 0x000290, "Member 'BP_ChallengeManager_C_Print_Challenge_Progress_Set_Result::CallFunc_Concat_StrStr_ReturnValue_19' has a wrong offset!");
static_assert(offsetof(BP_ChallengeManager_C_Print_Challenge_Progress_Set_Result, CallFunc_Concat_StrStr_ReturnValue_20) == 0x0002A0, "Member 'BP_ChallengeManager_C_Print_Challenge_Progress_Set_Result::CallFunc_Concat_StrStr_ReturnValue_20' has a wrong offset!");
static_assert(offsetof(BP_ChallengeManager_C_Print_Challenge_Progress_Set_Result, Temp_bool_Variable) == 0x0002B0, "Member 'BP_ChallengeManager_C_Print_Challenge_Progress_Set_Result::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(BP_ChallengeManager_C_Print_Challenge_Progress_Set_Result, CallFunc_Concat_StrStr_ReturnValue_21) == 0x0002B8, "Member 'BP_ChallengeManager_C_Print_Challenge_Progress_Set_Result::CallFunc_Concat_StrStr_ReturnValue_21' has a wrong offset!");
static_assert(offsetof(BP_ChallengeManager_C_Print_Challenge_Progress_Set_Result, K2Node_Select_Default) == 0x0002C8, "Member 'BP_ChallengeManager_C_Print_Challenge_Progress_Set_Result::K2Node_Select_Default' has a wrong offset!");

// Function BP_ChallengeManager.BP_ChallengeManager_C.Print Challenge Rewards Claimed Result
// 0x0360 (0x0360 - 0x0000)
struct BP_ChallengeManager_C_Print_Challenge_Rewards_Claimed_Result final
{
public:
	struct FCloudRequestResult                    CloudRequestResult;                                // 0x0000(0x0058)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
	struct FCloudChallengeClaimResult             CloudChallengeClaimResult;                         // 0x0058(0x0070)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
	struct FLinearColor                           Temp_struct_Variable;                              // 0x00C8(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x00D8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_DC[0x4];                                       // 0x00DC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 CallFunc_Conv_IntToString_ReturnValue;             // 0x00E0(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FString                                 CallFunc_ToString__DateTime__String;               // 0x00F0(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FString                                 CallFunc_ToString__DateTime__String_1;             // 0x0100(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FString                                 CallFunc_Conv_IntToString_ReturnValue_1;           // 0x0110(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FString                                 CallFunc_Conv_NameToString_ReturnValue;            // 0x0120(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FString                                 CallFunc_Conv_IntToString_ReturnValue_2;           // 0x0130(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FString                                 CallFunc_Concat_StrStr_ReturnValue;                // 0x0140(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FString                                 CallFunc_Conv_IntToString_ReturnValue_3;           // 0x0150(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FString                                 CallFunc_Concat_StrStr_ReturnValue_1;              // 0x0160(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FString                                 CallFunc_Conv_IntToString_ReturnValue_4;           // 0x0170(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FString                                 CallFunc_Concat_StrStr_ReturnValue_2;              // 0x0180(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FString                                 CallFunc_Conv_IntToString_ReturnValue_5;           // 0x0190(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FString                                 CallFunc_Concat_StrStr_ReturnValue_3;              // 0x01A0(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue;          // 0x01B0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_1B1[0x7];                                      // 0x01B1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 CallFunc_Concat_StrStr_ReturnValue_4;              // 0x01B8(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FString                                 CallFunc_GetEnumeratorUserFriendlyName_ReturnValue; // 0x01C8(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FString                                 CallFunc_Concat_StrStr_ReturnValue_5;              // 0x01D8(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FString                                 CallFunc_Concat_StrStr_ReturnValue_6;              // 0x01E8(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FString                                 CallFunc_Concat_StrStr_ReturnValue_7;              // 0x01F8(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FString                                 CallFunc_Concat_StrStr_ReturnValue_8;              // 0x0208(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FString                                 CallFunc_Concat_StrStr_ReturnValue_9;              // 0x0218(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FString                                 CallFunc_Concat_StrStr_ReturnValue_10;             // 0x0228(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FString                                 CallFunc_Concat_StrStr_ReturnValue_11;             // 0x0238(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FString                                 CallFunc_Concat_StrStr_ReturnValue_12;             // 0x0248(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FString                                 CallFunc_Concat_StrStr_ReturnValue_13;             // 0x0258(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FString                                 CallFunc_Concat_StrStr_ReturnValue_14;             // 0x0268(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FString                                 CallFunc_Concat_StrStr_ReturnValue_15;             // 0x0278(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FString                                 CallFunc_Concat_StrStr_ReturnValue_16;             // 0x0288(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FString                                 CallFunc_Concat_StrStr_ReturnValue_17;             // 0x0298(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FString                                 CallFunc_Concat_StrStr_ReturnValue_18;             // 0x02A8(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	struct FLinearColor                           Temp_struct_Variable_1;                            // 0x02B8(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FString                                 CallFunc_Concat_StrStr_ReturnValue_19;             // 0x02C8(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FString                                 CallFunc_Concat_StrStr_ReturnValue_20;             // 0x02D8(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FString                                 CallFunc_Conv_NameToString_ReturnValue_1;          // 0x02E8(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FString                                 CallFunc_Concat_StrStr_ReturnValue_21;             // 0x02F8(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FString                                 CallFunc_Concat_StrStr_ReturnValue_22;             // 0x0308(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable;                                // 0x0318(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_319[0x7];                                      // 0x0319(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 CallFunc_Concat_StrStr_ReturnValue_23;             // 0x0320(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FString                                 CallFunc_Concat_StrStr_ReturnValue_24;             // 0x0330(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	struct FLinearColor                           K2Node_Select_Default;                             // 0x0340(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FString                                 CallFunc_Concat_StrStr_ReturnValue_25;             // 0x0350(0x0010)(ZeroConstructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_ChallengeManager_C_Print_Challenge_Rewards_Claimed_Result) == 0x000008, "Wrong alignment on BP_ChallengeManager_C_Print_Challenge_Rewards_Claimed_Result");
static_assert(sizeof(BP_ChallengeManager_C_Print_Challenge_Rewards_Claimed_Result) == 0x000360, "Wrong size on BP_ChallengeManager_C_Print_Challenge_Rewards_Claimed_Result");
static_assert(offsetof(BP_ChallengeManager_C_Print_Challenge_Rewards_Claimed_Result, CloudRequestResult) == 0x000000, "Member 'BP_ChallengeManager_C_Print_Challenge_Rewards_Claimed_Result::CloudRequestResult' has a wrong offset!");
static_assert(offsetof(BP_ChallengeManager_C_Print_Challenge_Rewards_Claimed_Result, CloudChallengeClaimResult) == 0x000058, "Member 'BP_ChallengeManager_C_Print_Challenge_Rewards_Claimed_Result::CloudChallengeClaimResult' has a wrong offset!");
static_assert(offsetof(BP_ChallengeManager_C_Print_Challenge_Rewards_Claimed_Result, Temp_struct_Variable) == 0x0000C8, "Member 'BP_ChallengeManager_C_Print_Challenge_Rewards_Claimed_Result::Temp_struct_Variable' has a wrong offset!");
static_assert(offsetof(BP_ChallengeManager_C_Print_Challenge_Rewards_Claimed_Result, CallFunc_Array_Length_ReturnValue) == 0x0000D8, "Member 'BP_ChallengeManager_C_Print_Challenge_Rewards_Claimed_Result::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_ChallengeManager_C_Print_Challenge_Rewards_Claimed_Result, CallFunc_Conv_IntToString_ReturnValue) == 0x0000E0, "Member 'BP_ChallengeManager_C_Print_Challenge_Rewards_Claimed_Result::CallFunc_Conv_IntToString_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_ChallengeManager_C_Print_Challenge_Rewards_Claimed_Result, CallFunc_ToString__DateTime__String) == 0x0000F0, "Member 'BP_ChallengeManager_C_Print_Challenge_Rewards_Claimed_Result::CallFunc_ToString__DateTime__String' has a wrong offset!");
static_assert(offsetof(BP_ChallengeManager_C_Print_Challenge_Rewards_Claimed_Result, CallFunc_ToString__DateTime__String_1) == 0x000100, "Member 'BP_ChallengeManager_C_Print_Challenge_Rewards_Claimed_Result::CallFunc_ToString__DateTime__String_1' has a wrong offset!");
static_assert(offsetof(BP_ChallengeManager_C_Print_Challenge_Rewards_Claimed_Result, CallFunc_Conv_IntToString_ReturnValue_1) == 0x000110, "Member 'BP_ChallengeManager_C_Print_Challenge_Rewards_Claimed_Result::CallFunc_Conv_IntToString_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_ChallengeManager_C_Print_Challenge_Rewards_Claimed_Result, CallFunc_Conv_NameToString_ReturnValue) == 0x000120, "Member 'BP_ChallengeManager_C_Print_Challenge_Rewards_Claimed_Result::CallFunc_Conv_NameToString_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_ChallengeManager_C_Print_Challenge_Rewards_Claimed_Result, CallFunc_Conv_IntToString_ReturnValue_2) == 0x000130, "Member 'BP_ChallengeManager_C_Print_Challenge_Rewards_Claimed_Result::CallFunc_Conv_IntToString_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BP_ChallengeManager_C_Print_Challenge_Rewards_Claimed_Result, CallFunc_Concat_StrStr_ReturnValue) == 0x000140, "Member 'BP_ChallengeManager_C_Print_Challenge_Rewards_Claimed_Result::CallFunc_Concat_StrStr_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_ChallengeManager_C_Print_Challenge_Rewards_Claimed_Result, CallFunc_Conv_IntToString_ReturnValue_3) == 0x000150, "Member 'BP_ChallengeManager_C_Print_Challenge_Rewards_Claimed_Result::CallFunc_Conv_IntToString_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(BP_ChallengeManager_C_Print_Challenge_Rewards_Claimed_Result, CallFunc_Concat_StrStr_ReturnValue_1) == 0x000160, "Member 'BP_ChallengeManager_C_Print_Challenge_Rewards_Claimed_Result::CallFunc_Concat_StrStr_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_ChallengeManager_C_Print_Challenge_Rewards_Claimed_Result, CallFunc_Conv_IntToString_ReturnValue_4) == 0x000170, "Member 'BP_ChallengeManager_C_Print_Challenge_Rewards_Claimed_Result::CallFunc_Conv_IntToString_ReturnValue_4' has a wrong offset!");
static_assert(offsetof(BP_ChallengeManager_C_Print_Challenge_Rewards_Claimed_Result, CallFunc_Concat_StrStr_ReturnValue_2) == 0x000180, "Member 'BP_ChallengeManager_C_Print_Challenge_Rewards_Claimed_Result::CallFunc_Concat_StrStr_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BP_ChallengeManager_C_Print_Challenge_Rewards_Claimed_Result, CallFunc_Conv_IntToString_ReturnValue_5) == 0x000190, "Member 'BP_ChallengeManager_C_Print_Challenge_Rewards_Claimed_Result::CallFunc_Conv_IntToString_ReturnValue_5' has a wrong offset!");
static_assert(offsetof(BP_ChallengeManager_C_Print_Challenge_Rewards_Claimed_Result, CallFunc_Concat_StrStr_ReturnValue_3) == 0x0001A0, "Member 'BP_ChallengeManager_C_Print_Challenge_Rewards_Claimed_Result::CallFunc_Concat_StrStr_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(BP_ChallengeManager_C_Print_Challenge_Rewards_Claimed_Result, CallFunc_EqualEqual_ByteByte_ReturnValue) == 0x0001B0, "Member 'BP_ChallengeManager_C_Print_Challenge_Rewards_Claimed_Result::CallFunc_EqualEqual_ByteByte_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_ChallengeManager_C_Print_Challenge_Rewards_Claimed_Result, CallFunc_Concat_StrStr_ReturnValue_4) == 0x0001B8, "Member 'BP_ChallengeManager_C_Print_Challenge_Rewards_Claimed_Result::CallFunc_Concat_StrStr_ReturnValue_4' has a wrong offset!");
static_assert(offsetof(BP_ChallengeManager_C_Print_Challenge_Rewards_Claimed_Result, CallFunc_GetEnumeratorUserFriendlyName_ReturnValue) == 0x0001C8, "Member 'BP_ChallengeManager_C_Print_Challenge_Rewards_Claimed_Result::CallFunc_GetEnumeratorUserFriendlyName_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_ChallengeManager_C_Print_Challenge_Rewards_Claimed_Result, CallFunc_Concat_StrStr_ReturnValue_5) == 0x0001D8, "Member 'BP_ChallengeManager_C_Print_Challenge_Rewards_Claimed_Result::CallFunc_Concat_StrStr_ReturnValue_5' has a wrong offset!");
static_assert(offsetof(BP_ChallengeManager_C_Print_Challenge_Rewards_Claimed_Result, CallFunc_Concat_StrStr_ReturnValue_6) == 0x0001E8, "Member 'BP_ChallengeManager_C_Print_Challenge_Rewards_Claimed_Result::CallFunc_Concat_StrStr_ReturnValue_6' has a wrong offset!");
static_assert(offsetof(BP_ChallengeManager_C_Print_Challenge_Rewards_Claimed_Result, CallFunc_Concat_StrStr_ReturnValue_7) == 0x0001F8, "Member 'BP_ChallengeManager_C_Print_Challenge_Rewards_Claimed_Result::CallFunc_Concat_StrStr_ReturnValue_7' has a wrong offset!");
static_assert(offsetof(BP_ChallengeManager_C_Print_Challenge_Rewards_Claimed_Result, CallFunc_Concat_StrStr_ReturnValue_8) == 0x000208, "Member 'BP_ChallengeManager_C_Print_Challenge_Rewards_Claimed_Result::CallFunc_Concat_StrStr_ReturnValue_8' has a wrong offset!");
static_assert(offsetof(BP_ChallengeManager_C_Print_Challenge_Rewards_Claimed_Result, CallFunc_Concat_StrStr_ReturnValue_9) == 0x000218, "Member 'BP_ChallengeManager_C_Print_Challenge_Rewards_Claimed_Result::CallFunc_Concat_StrStr_ReturnValue_9' has a wrong offset!");
static_assert(offsetof(BP_ChallengeManager_C_Print_Challenge_Rewards_Claimed_Result, CallFunc_Concat_StrStr_ReturnValue_10) == 0x000228, "Member 'BP_ChallengeManager_C_Print_Challenge_Rewards_Claimed_Result::CallFunc_Concat_StrStr_ReturnValue_10' has a wrong offset!");
static_assert(offsetof(BP_ChallengeManager_C_Print_Challenge_Rewards_Claimed_Result, CallFunc_Concat_StrStr_ReturnValue_11) == 0x000238, "Member 'BP_ChallengeManager_C_Print_Challenge_Rewards_Claimed_Result::CallFunc_Concat_StrStr_ReturnValue_11' has a wrong offset!");
static_assert(offsetof(BP_ChallengeManager_C_Print_Challenge_Rewards_Claimed_Result, CallFunc_Concat_StrStr_ReturnValue_12) == 0x000248, "Member 'BP_ChallengeManager_C_Print_Challenge_Rewards_Claimed_Result::CallFunc_Concat_StrStr_ReturnValue_12' has a wrong offset!");
static_assert(offsetof(BP_ChallengeManager_C_Print_Challenge_Rewards_Claimed_Result, CallFunc_Concat_StrStr_ReturnValue_13) == 0x000258, "Member 'BP_ChallengeManager_C_Print_Challenge_Rewards_Claimed_Result::CallFunc_Concat_StrStr_ReturnValue_13' has a wrong offset!");
static_assert(offsetof(BP_ChallengeManager_C_Print_Challenge_Rewards_Claimed_Result, CallFunc_Concat_StrStr_ReturnValue_14) == 0x000268, "Member 'BP_ChallengeManager_C_Print_Challenge_Rewards_Claimed_Result::CallFunc_Concat_StrStr_ReturnValue_14' has a wrong offset!");
static_assert(offsetof(BP_ChallengeManager_C_Print_Challenge_Rewards_Claimed_Result, CallFunc_Concat_StrStr_ReturnValue_15) == 0x000278, "Member 'BP_ChallengeManager_C_Print_Challenge_Rewards_Claimed_Result::CallFunc_Concat_StrStr_ReturnValue_15' has a wrong offset!");
static_assert(offsetof(BP_ChallengeManager_C_Print_Challenge_Rewards_Claimed_Result, CallFunc_Concat_StrStr_ReturnValue_16) == 0x000288, "Member 'BP_ChallengeManager_C_Print_Challenge_Rewards_Claimed_Result::CallFunc_Concat_StrStr_ReturnValue_16' has a wrong offset!");
static_assert(offsetof(BP_ChallengeManager_C_Print_Challenge_Rewards_Claimed_Result, CallFunc_Concat_StrStr_ReturnValue_17) == 0x000298, "Member 'BP_ChallengeManager_C_Print_Challenge_Rewards_Claimed_Result::CallFunc_Concat_StrStr_ReturnValue_17' has a wrong offset!");
static_assert(offsetof(BP_ChallengeManager_C_Print_Challenge_Rewards_Claimed_Result, CallFunc_Concat_StrStr_ReturnValue_18) == 0x0002A8, "Member 'BP_ChallengeManager_C_Print_Challenge_Rewards_Claimed_Result::CallFunc_Concat_StrStr_ReturnValue_18' has a wrong offset!");
static_assert(offsetof(BP_ChallengeManager_C_Print_Challenge_Rewards_Claimed_Result, Temp_struct_Variable_1) == 0x0002B8, "Member 'BP_ChallengeManager_C_Print_Challenge_Rewards_Claimed_Result::Temp_struct_Variable_1' has a wrong offset!");
static_assert(offsetof(BP_ChallengeManager_C_Print_Challenge_Rewards_Claimed_Result, CallFunc_Concat_StrStr_ReturnValue_19) == 0x0002C8, "Member 'BP_ChallengeManager_C_Print_Challenge_Rewards_Claimed_Result::CallFunc_Concat_StrStr_ReturnValue_19' has a wrong offset!");
static_assert(offsetof(BP_ChallengeManager_C_Print_Challenge_Rewards_Claimed_Result, CallFunc_Concat_StrStr_ReturnValue_20) == 0x0002D8, "Member 'BP_ChallengeManager_C_Print_Challenge_Rewards_Claimed_Result::CallFunc_Concat_StrStr_ReturnValue_20' has a wrong offset!");
static_assert(offsetof(BP_ChallengeManager_C_Print_Challenge_Rewards_Claimed_Result, CallFunc_Conv_NameToString_ReturnValue_1) == 0x0002E8, "Member 'BP_ChallengeManager_C_Print_Challenge_Rewards_Claimed_Result::CallFunc_Conv_NameToString_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_ChallengeManager_C_Print_Challenge_Rewards_Claimed_Result, CallFunc_Concat_StrStr_ReturnValue_21) == 0x0002F8, "Member 'BP_ChallengeManager_C_Print_Challenge_Rewards_Claimed_Result::CallFunc_Concat_StrStr_ReturnValue_21' has a wrong offset!");
static_assert(offsetof(BP_ChallengeManager_C_Print_Challenge_Rewards_Claimed_Result, CallFunc_Concat_StrStr_ReturnValue_22) == 0x000308, "Member 'BP_ChallengeManager_C_Print_Challenge_Rewards_Claimed_Result::CallFunc_Concat_StrStr_ReturnValue_22' has a wrong offset!");
static_assert(offsetof(BP_ChallengeManager_C_Print_Challenge_Rewards_Claimed_Result, Temp_bool_Variable) == 0x000318, "Member 'BP_ChallengeManager_C_Print_Challenge_Rewards_Claimed_Result::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(BP_ChallengeManager_C_Print_Challenge_Rewards_Claimed_Result, CallFunc_Concat_StrStr_ReturnValue_23) == 0x000320, "Member 'BP_ChallengeManager_C_Print_Challenge_Rewards_Claimed_Result::CallFunc_Concat_StrStr_ReturnValue_23' has a wrong offset!");
static_assert(offsetof(BP_ChallengeManager_C_Print_Challenge_Rewards_Claimed_Result, CallFunc_Concat_StrStr_ReturnValue_24) == 0x000330, "Member 'BP_ChallengeManager_C_Print_Challenge_Rewards_Claimed_Result::CallFunc_Concat_StrStr_ReturnValue_24' has a wrong offset!");
static_assert(offsetof(BP_ChallengeManager_C_Print_Challenge_Rewards_Claimed_Result, K2Node_Select_Default) == 0x000340, "Member 'BP_ChallengeManager_C_Print_Challenge_Rewards_Claimed_Result::K2Node_Select_Default' has a wrong offset!");
static_assert(offsetof(BP_ChallengeManager_C_Print_Challenge_Rewards_Claimed_Result, CallFunc_Concat_StrStr_ReturnValue_25) == 0x000350, "Member 'BP_ChallengeManager_C_Print_Challenge_Rewards_Claimed_Result::CallFunc_Concat_StrStr_ReturnValue_25' has a wrong offset!");

// Function BP_ChallengeManager.BP_ChallengeManager_C.Print Challenge Cancelled Result
// 0x0058 (0x0058 - 0x0000)
struct BP_ChallengeManager_C_Print_Challenge_Cancelled_Result final
{
public:
	struct FCloudRequestResult                    CloudRequestResult;                                // 0x0000(0x0058)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
};
static_assert(alignof(BP_ChallengeManager_C_Print_Challenge_Cancelled_Result) == 0x000008, "Wrong alignment on BP_ChallengeManager_C_Print_Challenge_Cancelled_Result");
static_assert(sizeof(BP_ChallengeManager_C_Print_Challenge_Cancelled_Result) == 0x000058, "Wrong size on BP_ChallengeManager_C_Print_Challenge_Cancelled_Result");
static_assert(offsetof(BP_ChallengeManager_C_Print_Challenge_Cancelled_Result, CloudRequestResult) == 0x000000, "Member 'BP_ChallengeManager_C_Print_Challenge_Cancelled_Result::CloudRequestResult' has a wrong offset!");

// Function BP_ChallengeManager.BP_ChallengeManager_C.Get Next Reset Timestamp
// 0x0078 (0x0078 - 0x0000)
struct BP_ChallengeManager_C_Get_Next_Reset_Timestamp final
{
public:
	struct FDateTime                              Next_Reset_Timestamp;                              // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	struct FDateTime                              Next_Reset;                                        // 0x0008(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	struct FTimespan                              CallFunc_MakeTimespan_ReturnValue;                 // 0x0010(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	struct FDateTime                              CallFunc_Add_DateTimeTimespan_ReturnValue;         // 0x0018(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	struct FDateTime                              CallFunc_GetCloudTime_ReturnValue;                 // 0x0020(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	struct FDateTime                              CallFunc_GetCloudTime_ReturnValue_1;               // 0x0028(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Greater_DateTimeDateTime_ReturnValue;     // 0x0030(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_31[0x3];                                       // 0x0031(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_BreakDateTime_Year;                       // 0x0034(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_BreakDateTime_Month;                      // 0x0038(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_BreakDateTime_Day;                        // 0x003C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_BreakDateTime_Hour;                       // 0x0040(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_BreakDateTime_Minute;                     // 0x0044(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_BreakDateTime_Second;                     // 0x0048(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_BreakDateTime_Millisecond;                // 0x004C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_BreakDateTime_Year_1;                     // 0x0050(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_BreakDateTime_Month_1;                    // 0x0054(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_BreakDateTime_Day_1;                      // 0x0058(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_BreakDateTime_Hour_1;                     // 0x005C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_BreakDateTime_Minute_1;                   // 0x0060(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_BreakDateTime_Second_1;                   // 0x0064(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_BreakDateTime_Millisecond_1;              // 0x0068(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_6C[0x4];                                       // 0x006C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FDateTime                              CallFunc_MakeDateTime_ReturnValue;                 // 0x0070(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_ChallengeManager_C_Get_Next_Reset_Timestamp) == 0x000008, "Wrong alignment on BP_ChallengeManager_C_Get_Next_Reset_Timestamp");
static_assert(sizeof(BP_ChallengeManager_C_Get_Next_Reset_Timestamp) == 0x000078, "Wrong size on BP_ChallengeManager_C_Get_Next_Reset_Timestamp");
static_assert(offsetof(BP_ChallengeManager_C_Get_Next_Reset_Timestamp, Next_Reset_Timestamp) == 0x000000, "Member 'BP_ChallengeManager_C_Get_Next_Reset_Timestamp::Next_Reset_Timestamp' has a wrong offset!");
static_assert(offsetof(BP_ChallengeManager_C_Get_Next_Reset_Timestamp, Next_Reset) == 0x000008, "Member 'BP_ChallengeManager_C_Get_Next_Reset_Timestamp::Next_Reset' has a wrong offset!");
static_assert(offsetof(BP_ChallengeManager_C_Get_Next_Reset_Timestamp, CallFunc_MakeTimespan_ReturnValue) == 0x000010, "Member 'BP_ChallengeManager_C_Get_Next_Reset_Timestamp::CallFunc_MakeTimespan_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_ChallengeManager_C_Get_Next_Reset_Timestamp, CallFunc_Add_DateTimeTimespan_ReturnValue) == 0x000018, "Member 'BP_ChallengeManager_C_Get_Next_Reset_Timestamp::CallFunc_Add_DateTimeTimespan_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_ChallengeManager_C_Get_Next_Reset_Timestamp, CallFunc_GetCloudTime_ReturnValue) == 0x000020, "Member 'BP_ChallengeManager_C_Get_Next_Reset_Timestamp::CallFunc_GetCloudTime_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_ChallengeManager_C_Get_Next_Reset_Timestamp, CallFunc_GetCloudTime_ReturnValue_1) == 0x000028, "Member 'BP_ChallengeManager_C_Get_Next_Reset_Timestamp::CallFunc_GetCloudTime_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_ChallengeManager_C_Get_Next_Reset_Timestamp, CallFunc_Greater_DateTimeDateTime_ReturnValue) == 0x000030, "Member 'BP_ChallengeManager_C_Get_Next_Reset_Timestamp::CallFunc_Greater_DateTimeDateTime_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_ChallengeManager_C_Get_Next_Reset_Timestamp, CallFunc_BreakDateTime_Year) == 0x000034, "Member 'BP_ChallengeManager_C_Get_Next_Reset_Timestamp::CallFunc_BreakDateTime_Year' has a wrong offset!");
static_assert(offsetof(BP_ChallengeManager_C_Get_Next_Reset_Timestamp, CallFunc_BreakDateTime_Month) == 0x000038, "Member 'BP_ChallengeManager_C_Get_Next_Reset_Timestamp::CallFunc_BreakDateTime_Month' has a wrong offset!");
static_assert(offsetof(BP_ChallengeManager_C_Get_Next_Reset_Timestamp, CallFunc_BreakDateTime_Day) == 0x00003C, "Member 'BP_ChallengeManager_C_Get_Next_Reset_Timestamp::CallFunc_BreakDateTime_Day' has a wrong offset!");
static_assert(offsetof(BP_ChallengeManager_C_Get_Next_Reset_Timestamp, CallFunc_BreakDateTime_Hour) == 0x000040, "Member 'BP_ChallengeManager_C_Get_Next_Reset_Timestamp::CallFunc_BreakDateTime_Hour' has a wrong offset!");
static_assert(offsetof(BP_ChallengeManager_C_Get_Next_Reset_Timestamp, CallFunc_BreakDateTime_Minute) == 0x000044, "Member 'BP_ChallengeManager_C_Get_Next_Reset_Timestamp::CallFunc_BreakDateTime_Minute' has a wrong offset!");
static_assert(offsetof(BP_ChallengeManager_C_Get_Next_Reset_Timestamp, CallFunc_BreakDateTime_Second) == 0x000048, "Member 'BP_ChallengeManager_C_Get_Next_Reset_Timestamp::CallFunc_BreakDateTime_Second' has a wrong offset!");
static_assert(offsetof(BP_ChallengeManager_C_Get_Next_Reset_Timestamp, CallFunc_BreakDateTime_Millisecond) == 0x00004C, "Member 'BP_ChallengeManager_C_Get_Next_Reset_Timestamp::CallFunc_BreakDateTime_Millisecond' has a wrong offset!");
static_assert(offsetof(BP_ChallengeManager_C_Get_Next_Reset_Timestamp, CallFunc_BreakDateTime_Year_1) == 0x000050, "Member 'BP_ChallengeManager_C_Get_Next_Reset_Timestamp::CallFunc_BreakDateTime_Year_1' has a wrong offset!");
static_assert(offsetof(BP_ChallengeManager_C_Get_Next_Reset_Timestamp, CallFunc_BreakDateTime_Month_1) == 0x000054, "Member 'BP_ChallengeManager_C_Get_Next_Reset_Timestamp::CallFunc_BreakDateTime_Month_1' has a wrong offset!");
static_assert(offsetof(BP_ChallengeManager_C_Get_Next_Reset_Timestamp, CallFunc_BreakDateTime_Day_1) == 0x000058, "Member 'BP_ChallengeManager_C_Get_Next_Reset_Timestamp::CallFunc_BreakDateTime_Day_1' has a wrong offset!");
static_assert(offsetof(BP_ChallengeManager_C_Get_Next_Reset_Timestamp, CallFunc_BreakDateTime_Hour_1) == 0x00005C, "Member 'BP_ChallengeManager_C_Get_Next_Reset_Timestamp::CallFunc_BreakDateTime_Hour_1' has a wrong offset!");
static_assert(offsetof(BP_ChallengeManager_C_Get_Next_Reset_Timestamp, CallFunc_BreakDateTime_Minute_1) == 0x000060, "Member 'BP_ChallengeManager_C_Get_Next_Reset_Timestamp::CallFunc_BreakDateTime_Minute_1' has a wrong offset!");
static_assert(offsetof(BP_ChallengeManager_C_Get_Next_Reset_Timestamp, CallFunc_BreakDateTime_Second_1) == 0x000064, "Member 'BP_ChallengeManager_C_Get_Next_Reset_Timestamp::CallFunc_BreakDateTime_Second_1' has a wrong offset!");
static_assert(offsetof(BP_ChallengeManager_C_Get_Next_Reset_Timestamp, CallFunc_BreakDateTime_Millisecond_1) == 0x000068, "Member 'BP_ChallengeManager_C_Get_Next_Reset_Timestamp::CallFunc_BreakDateTime_Millisecond_1' has a wrong offset!");
static_assert(offsetof(BP_ChallengeManager_C_Get_Next_Reset_Timestamp, CallFunc_MakeDateTime_ReturnValue) == 0x000070, "Member 'BP_ChallengeManager_C_Get_Next_Reset_Timestamp::CallFunc_MakeDateTime_ReturnValue' has a wrong offset!");

// Function BP_ChallengeManager.BP_ChallengeManager_C.Get Time to Next Reset
// 0x0020 (0x0020 - 0x0000)
struct BP_ChallengeManager_C_Get_Time_to_Next_Reset final
{
public:
	struct FTimespan                              ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_K2_GetTimerRemainingTimeHandle_ReturnValue; // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTimespan                              CallFunc_FromSeconds_ReturnValue;                  // 0x0010(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Handle_Valid_and_Timer_Exists_Return_Value; // 0x0018(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_ChallengeManager_C_Get_Time_to_Next_Reset) == 0x000008, "Wrong alignment on BP_ChallengeManager_C_Get_Time_to_Next_Reset");
static_assert(sizeof(BP_ChallengeManager_C_Get_Time_to_Next_Reset) == 0x000020, "Wrong size on BP_ChallengeManager_C_Get_Time_to_Next_Reset");
static_assert(offsetof(BP_ChallengeManager_C_Get_Time_to_Next_Reset, ReturnValue) == 0x000000, "Member 'BP_ChallengeManager_C_Get_Time_to_Next_Reset::ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_ChallengeManager_C_Get_Time_to_Next_Reset, CallFunc_K2_GetTimerRemainingTimeHandle_ReturnValue) == 0x000008, "Member 'BP_ChallengeManager_C_Get_Time_to_Next_Reset::CallFunc_K2_GetTimerRemainingTimeHandle_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_ChallengeManager_C_Get_Time_to_Next_Reset, CallFunc_FromSeconds_ReturnValue) == 0x000010, "Member 'BP_ChallengeManager_C_Get_Time_to_Next_Reset::CallFunc_FromSeconds_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_ChallengeManager_C_Get_Time_to_Next_Reset, CallFunc_Handle_Valid_and_Timer_Exists_Return_Value) == 0x000018, "Member 'BP_ChallengeManager_C_Get_Time_to_Next_Reset::CallFunc_Handle_Valid_and_Timer_Exists_Return_Value' has a wrong offset!");

// Function BP_ChallengeManager.BP_ChallengeManager_C.Get Last Reset Timestamp
// 0x0078 (0x0078 - 0x0000)
struct BP_ChallengeManager_C_Get_Last_Reset_Timestamp final
{
public:
	struct FDateTime                              Last_Reset_Timestamp;                              // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	struct FDateTime                              Last_Reset;                                        // 0x0008(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	struct FTimespan                              CallFunc_MakeTimespan_ReturnValue;                 // 0x0010(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	struct FDateTime                              CallFunc_Subtract_DateTimeTimespan_ReturnValue;    // 0x0018(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	struct FDateTime                              CallFunc_GetCloudTime_ReturnValue;                 // 0x0020(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	struct FDateTime                              CallFunc_GetCloudTime_ReturnValue_1;               // 0x0028(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Greater_DateTimeDateTime_ReturnValue;     // 0x0030(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_31[0x3];                                       // 0x0031(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_BreakDateTime_Year;                       // 0x0034(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_BreakDateTime_Month;                      // 0x0038(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_BreakDateTime_Day;                        // 0x003C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_BreakDateTime_Hour;                       // 0x0040(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_BreakDateTime_Minute;                     // 0x0044(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_BreakDateTime_Second;                     // 0x0048(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_BreakDateTime_Millisecond;                // 0x004C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_BreakDateTime_Year_1;                     // 0x0050(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_BreakDateTime_Month_1;                    // 0x0054(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_BreakDateTime_Day_1;                      // 0x0058(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_BreakDateTime_Hour_1;                     // 0x005C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_BreakDateTime_Minute_1;                   // 0x0060(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_BreakDateTime_Second_1;                   // 0x0064(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_BreakDateTime_Millisecond_1;              // 0x0068(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_6C[0x4];                                       // 0x006C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FDateTime                              CallFunc_MakeDateTime_ReturnValue;                 // 0x0070(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_ChallengeManager_C_Get_Last_Reset_Timestamp) == 0x000008, "Wrong alignment on BP_ChallengeManager_C_Get_Last_Reset_Timestamp");
static_assert(sizeof(BP_ChallengeManager_C_Get_Last_Reset_Timestamp) == 0x000078, "Wrong size on BP_ChallengeManager_C_Get_Last_Reset_Timestamp");
static_assert(offsetof(BP_ChallengeManager_C_Get_Last_Reset_Timestamp, Last_Reset_Timestamp) == 0x000000, "Member 'BP_ChallengeManager_C_Get_Last_Reset_Timestamp::Last_Reset_Timestamp' has a wrong offset!");
static_assert(offsetof(BP_ChallengeManager_C_Get_Last_Reset_Timestamp, Last_Reset) == 0x000008, "Member 'BP_ChallengeManager_C_Get_Last_Reset_Timestamp::Last_Reset' has a wrong offset!");
static_assert(offsetof(BP_ChallengeManager_C_Get_Last_Reset_Timestamp, CallFunc_MakeTimespan_ReturnValue) == 0x000010, "Member 'BP_ChallengeManager_C_Get_Last_Reset_Timestamp::CallFunc_MakeTimespan_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_ChallengeManager_C_Get_Last_Reset_Timestamp, CallFunc_Subtract_DateTimeTimespan_ReturnValue) == 0x000018, "Member 'BP_ChallengeManager_C_Get_Last_Reset_Timestamp::CallFunc_Subtract_DateTimeTimespan_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_ChallengeManager_C_Get_Last_Reset_Timestamp, CallFunc_GetCloudTime_ReturnValue) == 0x000020, "Member 'BP_ChallengeManager_C_Get_Last_Reset_Timestamp::CallFunc_GetCloudTime_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_ChallengeManager_C_Get_Last_Reset_Timestamp, CallFunc_GetCloudTime_ReturnValue_1) == 0x000028, "Member 'BP_ChallengeManager_C_Get_Last_Reset_Timestamp::CallFunc_GetCloudTime_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_ChallengeManager_C_Get_Last_Reset_Timestamp, CallFunc_Greater_DateTimeDateTime_ReturnValue) == 0x000030, "Member 'BP_ChallengeManager_C_Get_Last_Reset_Timestamp::CallFunc_Greater_DateTimeDateTime_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_ChallengeManager_C_Get_Last_Reset_Timestamp, CallFunc_BreakDateTime_Year) == 0x000034, "Member 'BP_ChallengeManager_C_Get_Last_Reset_Timestamp::CallFunc_BreakDateTime_Year' has a wrong offset!");
static_assert(offsetof(BP_ChallengeManager_C_Get_Last_Reset_Timestamp, CallFunc_BreakDateTime_Month) == 0x000038, "Member 'BP_ChallengeManager_C_Get_Last_Reset_Timestamp::CallFunc_BreakDateTime_Month' has a wrong offset!");
static_assert(offsetof(BP_ChallengeManager_C_Get_Last_Reset_Timestamp, CallFunc_BreakDateTime_Day) == 0x00003C, "Member 'BP_ChallengeManager_C_Get_Last_Reset_Timestamp::CallFunc_BreakDateTime_Day' has a wrong offset!");
static_assert(offsetof(BP_ChallengeManager_C_Get_Last_Reset_Timestamp, CallFunc_BreakDateTime_Hour) == 0x000040, "Member 'BP_ChallengeManager_C_Get_Last_Reset_Timestamp::CallFunc_BreakDateTime_Hour' has a wrong offset!");
static_assert(offsetof(BP_ChallengeManager_C_Get_Last_Reset_Timestamp, CallFunc_BreakDateTime_Minute) == 0x000044, "Member 'BP_ChallengeManager_C_Get_Last_Reset_Timestamp::CallFunc_BreakDateTime_Minute' has a wrong offset!");
static_assert(offsetof(BP_ChallengeManager_C_Get_Last_Reset_Timestamp, CallFunc_BreakDateTime_Second) == 0x000048, "Member 'BP_ChallengeManager_C_Get_Last_Reset_Timestamp::CallFunc_BreakDateTime_Second' has a wrong offset!");
static_assert(offsetof(BP_ChallengeManager_C_Get_Last_Reset_Timestamp, CallFunc_BreakDateTime_Millisecond) == 0x00004C, "Member 'BP_ChallengeManager_C_Get_Last_Reset_Timestamp::CallFunc_BreakDateTime_Millisecond' has a wrong offset!");
static_assert(offsetof(BP_ChallengeManager_C_Get_Last_Reset_Timestamp, CallFunc_BreakDateTime_Year_1) == 0x000050, "Member 'BP_ChallengeManager_C_Get_Last_Reset_Timestamp::CallFunc_BreakDateTime_Year_1' has a wrong offset!");
static_assert(offsetof(BP_ChallengeManager_C_Get_Last_Reset_Timestamp, CallFunc_BreakDateTime_Month_1) == 0x000054, "Member 'BP_ChallengeManager_C_Get_Last_Reset_Timestamp::CallFunc_BreakDateTime_Month_1' has a wrong offset!");
static_assert(offsetof(BP_ChallengeManager_C_Get_Last_Reset_Timestamp, CallFunc_BreakDateTime_Day_1) == 0x000058, "Member 'BP_ChallengeManager_C_Get_Last_Reset_Timestamp::CallFunc_BreakDateTime_Day_1' has a wrong offset!");
static_assert(offsetof(BP_ChallengeManager_C_Get_Last_Reset_Timestamp, CallFunc_BreakDateTime_Hour_1) == 0x00005C, "Member 'BP_ChallengeManager_C_Get_Last_Reset_Timestamp::CallFunc_BreakDateTime_Hour_1' has a wrong offset!");
static_assert(offsetof(BP_ChallengeManager_C_Get_Last_Reset_Timestamp, CallFunc_BreakDateTime_Minute_1) == 0x000060, "Member 'BP_ChallengeManager_C_Get_Last_Reset_Timestamp::CallFunc_BreakDateTime_Minute_1' has a wrong offset!");
static_assert(offsetof(BP_ChallengeManager_C_Get_Last_Reset_Timestamp, CallFunc_BreakDateTime_Second_1) == 0x000064, "Member 'BP_ChallengeManager_C_Get_Last_Reset_Timestamp::CallFunc_BreakDateTime_Second_1' has a wrong offset!");
static_assert(offsetof(BP_ChallengeManager_C_Get_Last_Reset_Timestamp, CallFunc_BreakDateTime_Millisecond_1) == 0x000068, "Member 'BP_ChallengeManager_C_Get_Last_Reset_Timestamp::CallFunc_BreakDateTime_Millisecond_1' has a wrong offset!");
static_assert(offsetof(BP_ChallengeManager_C_Get_Last_Reset_Timestamp, CallFunc_MakeDateTime_ReturnValue) == 0x000070, "Member 'BP_ChallengeManager_C_Get_Last_Reset_Timestamp::CallFunc_MakeDateTime_ReturnValue' has a wrong offset!");

// Function BP_ChallengeManager.BP_ChallengeManager_C.Get Time since Last Reset
// 0x0030 (0x0030 - 0x0000)
struct BP_ChallengeManager_C_Get_Time_since_Last_Reset final
{
public:
	struct FTimespan                              ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash)
	struct FTimespan                              CallFunc_MakeTimespan_ReturnValue;                 // 0x0008(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_K2_GetTimerRemainingTimeHandle_ReturnValue; // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTimespan                              CallFunc_FromSeconds_ReturnValue;                  // 0x0018(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Handle_Valid_and_Timer_Exists_Return_Value; // 0x0020(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_21[0x7];                                       // 0x0021(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTimespan                              CallFunc_Subtract_TimespanTimespan_ReturnValue;    // 0x0028(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_ChallengeManager_C_Get_Time_since_Last_Reset) == 0x000008, "Wrong alignment on BP_ChallengeManager_C_Get_Time_since_Last_Reset");
static_assert(sizeof(BP_ChallengeManager_C_Get_Time_since_Last_Reset) == 0x000030, "Wrong size on BP_ChallengeManager_C_Get_Time_since_Last_Reset");
static_assert(offsetof(BP_ChallengeManager_C_Get_Time_since_Last_Reset, ReturnValue) == 0x000000, "Member 'BP_ChallengeManager_C_Get_Time_since_Last_Reset::ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_ChallengeManager_C_Get_Time_since_Last_Reset, CallFunc_MakeTimespan_ReturnValue) == 0x000008, "Member 'BP_ChallengeManager_C_Get_Time_since_Last_Reset::CallFunc_MakeTimespan_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_ChallengeManager_C_Get_Time_since_Last_Reset, CallFunc_K2_GetTimerRemainingTimeHandle_ReturnValue) == 0x000010, "Member 'BP_ChallengeManager_C_Get_Time_since_Last_Reset::CallFunc_K2_GetTimerRemainingTimeHandle_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_ChallengeManager_C_Get_Time_since_Last_Reset, CallFunc_FromSeconds_ReturnValue) == 0x000018, "Member 'BP_ChallengeManager_C_Get_Time_since_Last_Reset::CallFunc_FromSeconds_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_ChallengeManager_C_Get_Time_since_Last_Reset, CallFunc_Handle_Valid_and_Timer_Exists_Return_Value) == 0x000020, "Member 'BP_ChallengeManager_C_Get_Time_since_Last_Reset::CallFunc_Handle_Valid_and_Timer_Exists_Return_Value' has a wrong offset!");
static_assert(offsetof(BP_ChallengeManager_C_Get_Time_since_Last_Reset, CallFunc_Subtract_TimespanTimespan_ReturnValue) == 0x000028, "Member 'BP_ChallengeManager_C_Get_Time_since_Last_Reset::CallFunc_Subtract_TimespanTimespan_ReturnValue' has a wrong offset!");

// Function BP_ChallengeManager.BP_ChallengeManager_C.Get Challenge Manager State
// 0x0001 (0x0001 - 0x0000)
struct BP_ChallengeManager_C_Get_Challenge_Manager_State final
{
public:
	E_ChallengeManagerState                       State_0;                                           // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_ChallengeManager_C_Get_Challenge_Manager_State) == 0x000001, "Wrong alignment on BP_ChallengeManager_C_Get_Challenge_Manager_State");
static_assert(sizeof(BP_ChallengeManager_C_Get_Challenge_Manager_State) == 0x000001, "Wrong size on BP_ChallengeManager_C_Get_Challenge_Manager_State");
static_assert(offsetof(BP_ChallengeManager_C_Get_Challenge_Manager_State, State_0) == 0x000000, "Member 'BP_ChallengeManager_C_Get_Challenge_Manager_State::State_0' has a wrong offset!");

// Function BP_ChallengeManager.BP_ChallengeManager_C.Toggle Daily Reset Constraint
// 0x0005 (0x0005 - 0x0000)
struct BP_ChallengeManager_C_Toggle_Daily_Reset_Constraint final
{
public:
	bool                                          Ignore_Limit;                                      // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable;                                // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable_1;                              // 0x0002(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsShipping_ReturnValue;                   // 0x0003(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_Select_Default;                             // 0x0004(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_ChallengeManager_C_Toggle_Daily_Reset_Constraint) == 0x000001, "Wrong alignment on BP_ChallengeManager_C_Toggle_Daily_Reset_Constraint");
static_assert(sizeof(BP_ChallengeManager_C_Toggle_Daily_Reset_Constraint) == 0x000005, "Wrong size on BP_ChallengeManager_C_Toggle_Daily_Reset_Constraint");
static_assert(offsetof(BP_ChallengeManager_C_Toggle_Daily_Reset_Constraint, Ignore_Limit) == 0x000000, "Member 'BP_ChallengeManager_C_Toggle_Daily_Reset_Constraint::Ignore_Limit' has a wrong offset!");
static_assert(offsetof(BP_ChallengeManager_C_Toggle_Daily_Reset_Constraint, Temp_bool_Variable) == 0x000001, "Member 'BP_ChallengeManager_C_Toggle_Daily_Reset_Constraint::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(BP_ChallengeManager_C_Toggle_Daily_Reset_Constraint, Temp_bool_Variable_1) == 0x000002, "Member 'BP_ChallengeManager_C_Toggle_Daily_Reset_Constraint::Temp_bool_Variable_1' has a wrong offset!");
static_assert(offsetof(BP_ChallengeManager_C_Toggle_Daily_Reset_Constraint, CallFunc_IsShipping_ReturnValue) == 0x000003, "Member 'BP_ChallengeManager_C_Toggle_Daily_Reset_Constraint::CallFunc_IsShipping_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_ChallengeManager_C_Toggle_Daily_Reset_Constraint, K2Node_Select_Default) == 0x000004, "Member 'BP_ChallengeManager_C_Toggle_Daily_Reset_Constraint::K2Node_Select_Default' has a wrong offset!");

// Function BP_ChallengeManager.BP_ChallengeManager_C.CheckCategoryAgainstCandidates
// 0x0150 (0x0150 - 0x0000)
struct BP_ChallengeManager_C_CheckCategoryAgainstCandidates final
{
public:
	EChallengeCategory                            Challenge_Category;                                // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class FName>                           CandidateArray;                                    // 0x0008(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
	bool                                          Valid;                                             // 0x0018(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_19[0x3];                                       // 0x0019(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x001C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_True_if_break_was_hit_Variable;          // 0x0020(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_21[0x3];                                       // 0x0021(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Temp_int_Array_Index_Variable;                     // 0x0024(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   CallFunc_Array_Get_Item;                           // 0x0028(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x0030(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x0034(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_35[0x3];                                       // 0x0035(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x0038(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3C[0x4];                                       // 0x003C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UDataTable*                             CallFunc_DataProviderFindTableByAssetTable_ReturnValue; // 0x0040(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FChallengeList                         CallFunc_GetDataTableRowFromName_OutRow;           // 0x0048(0x0100)()
	bool                                          CallFunc_GetDataTableRowFromName_ReturnValue;      // 0x0148(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue;          // 0x0149(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_ChallengeManager_C_CheckCategoryAgainstCandidates) == 0x000008, "Wrong alignment on BP_ChallengeManager_C_CheckCategoryAgainstCandidates");
static_assert(sizeof(BP_ChallengeManager_C_CheckCategoryAgainstCandidates) == 0x000150, "Wrong size on BP_ChallengeManager_C_CheckCategoryAgainstCandidates");
static_assert(offsetof(BP_ChallengeManager_C_CheckCategoryAgainstCandidates, Challenge_Category) == 0x000000, "Member 'BP_ChallengeManager_C_CheckCategoryAgainstCandidates::Challenge_Category' has a wrong offset!");
static_assert(offsetof(BP_ChallengeManager_C_CheckCategoryAgainstCandidates, CandidateArray) == 0x000008, "Member 'BP_ChallengeManager_C_CheckCategoryAgainstCandidates::CandidateArray' has a wrong offset!");
static_assert(offsetof(BP_ChallengeManager_C_CheckCategoryAgainstCandidates, Valid) == 0x000018, "Member 'BP_ChallengeManager_C_CheckCategoryAgainstCandidates::Valid' has a wrong offset!");
static_assert(offsetof(BP_ChallengeManager_C_CheckCategoryAgainstCandidates, CallFunc_Array_Length_ReturnValue) == 0x00001C, "Member 'BP_ChallengeManager_C_CheckCategoryAgainstCandidates::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_ChallengeManager_C_CheckCategoryAgainstCandidates, Temp_bool_True_if_break_was_hit_Variable) == 0x000020, "Member 'BP_ChallengeManager_C_CheckCategoryAgainstCandidates::Temp_bool_True_if_break_was_hit_Variable' has a wrong offset!");
static_assert(offsetof(BP_ChallengeManager_C_CheckCategoryAgainstCandidates, Temp_int_Array_Index_Variable) == 0x000024, "Member 'BP_ChallengeManager_C_CheckCategoryAgainstCandidates::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(BP_ChallengeManager_C_CheckCategoryAgainstCandidates, CallFunc_Array_Get_Item) == 0x000028, "Member 'BP_ChallengeManager_C_CheckCategoryAgainstCandidates::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(BP_ChallengeManager_C_CheckCategoryAgainstCandidates, Temp_int_Loop_Counter_Variable) == 0x000030, "Member 'BP_ChallengeManager_C_CheckCategoryAgainstCandidates::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(BP_ChallengeManager_C_CheckCategoryAgainstCandidates, CallFunc_Less_IntInt_ReturnValue) == 0x000034, "Member 'BP_ChallengeManager_C_CheckCategoryAgainstCandidates::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_ChallengeManager_C_CheckCategoryAgainstCandidates, CallFunc_Add_IntInt_ReturnValue) == 0x000038, "Member 'BP_ChallengeManager_C_CheckCategoryAgainstCandidates::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_ChallengeManager_C_CheckCategoryAgainstCandidates, CallFunc_DataProviderFindTableByAssetTable_ReturnValue) == 0x000040, "Member 'BP_ChallengeManager_C_CheckCategoryAgainstCandidates::CallFunc_DataProviderFindTableByAssetTable_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_ChallengeManager_C_CheckCategoryAgainstCandidates, CallFunc_GetDataTableRowFromName_OutRow) == 0x000048, "Member 'BP_ChallengeManager_C_CheckCategoryAgainstCandidates::CallFunc_GetDataTableRowFromName_OutRow' has a wrong offset!");
static_assert(offsetof(BP_ChallengeManager_C_CheckCategoryAgainstCandidates, CallFunc_GetDataTableRowFromName_ReturnValue) == 0x000148, "Member 'BP_ChallengeManager_C_CheckCategoryAgainstCandidates::CallFunc_GetDataTableRowFromName_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_ChallengeManager_C_CheckCategoryAgainstCandidates, CallFunc_EqualEqual_ByteByte_ReturnValue) == 0x000149, "Member 'BP_ChallengeManager_C_CheckCategoryAgainstCandidates::CallFunc_EqualEqual_ByteByte_ReturnValue' has a wrong offset!");

// Function BP_ChallengeManager.BP_ChallengeManager_C.InitializeChallengesFromCloud
// 0x0130 (0x0130 - 0x0000)
struct BP_ChallengeManager_C_InitializeChallengesFromCloud final
{
public:
	struct FCloudChallengeCategorySlots           Challenges_Category;                               // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm)
	TArray<class ABP_ChallengeSlot_C*>            ChallengeCategorySlots;                            // 0x0010(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
	TArray<class ABP_ChallengeSlot_C*>            Challenge_Slots;                                   // 0x0020(0x0010)(Parm, OutParm)
	TArray<class ABP_ChallengeSlot_C*>            ChallengeSlotList;                                 // 0x0030(0x0010)(Edit, BlueprintVisible, DisableEditOnTemplate)
	bool                                          IsStoryChallengeInitialized;                       // 0x0040(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_41[0x3];                                       // 0x0041(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x0044(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TDelegate<void(class ABP_ChallengeSlot_C* Slot, int32 New_Progress)> K2Node_CreateDelegate_OutputDelegate;              // 0x0048(0x0010)(ZeroConstructor, NoDestructor)
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x0058(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Array_Index_Variable;                     // 0x005C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x0060(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_61[0x7];                                       // 0x0061(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FCloudChallengeSlotInfo                CallFunc_Array_Get_Item;                           // 0x0068(0x0050)()
	bool                                          CallFunc_NotEqual_NameName_ReturnValue;            // 0x00B8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_B9[0x3];                                       // 0x00B9(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Subtract_IntInt_ReturnValue;              // 0x00BC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ABP_ChallengeSlot_C*                    CallFunc_Array_Get_Item_1;                         // 0x00C0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Subtract_IntInt_ReturnValue_1;            // 0x00C8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Array_IsValidIndex_ReturnValue;           // 0x00CC(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_CD[0x3];                                       // 0x00CD(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x00D0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_D4[0xC];                                       // 0x00D4(0x000C)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             CallFunc_MakeTransform_ReturnValue;                // 0x00E0(0x0030)(IsPlainOldData, NoDestructor)
	class AActor*                                 CallFunc_BeginDeferredActorSpawnFromClass_ReturnValue; // 0x0110(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ABP_ChallengeSlot_C*                    CallFunc_FinishSpawningActor_ReturnValue;          // 0x0118(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Add_ReturnValue;                    // 0x0120(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Add_ReturnValue_1;                  // 0x0124(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_ChallengeManager_C_InitializeChallengesFromCloud) == 0x000010, "Wrong alignment on BP_ChallengeManager_C_InitializeChallengesFromCloud");
static_assert(sizeof(BP_ChallengeManager_C_InitializeChallengesFromCloud) == 0x000130, "Wrong size on BP_ChallengeManager_C_InitializeChallengesFromCloud");
static_assert(offsetof(BP_ChallengeManager_C_InitializeChallengesFromCloud, Challenges_Category) == 0x000000, "Member 'BP_ChallengeManager_C_InitializeChallengesFromCloud::Challenges_Category' has a wrong offset!");
static_assert(offsetof(BP_ChallengeManager_C_InitializeChallengesFromCloud, ChallengeCategorySlots) == 0x000010, "Member 'BP_ChallengeManager_C_InitializeChallengesFromCloud::ChallengeCategorySlots' has a wrong offset!");
static_assert(offsetof(BP_ChallengeManager_C_InitializeChallengesFromCloud, Challenge_Slots) == 0x000020, "Member 'BP_ChallengeManager_C_InitializeChallengesFromCloud::Challenge_Slots' has a wrong offset!");
static_assert(offsetof(BP_ChallengeManager_C_InitializeChallengesFromCloud, ChallengeSlotList) == 0x000030, "Member 'BP_ChallengeManager_C_InitializeChallengesFromCloud::ChallengeSlotList' has a wrong offset!");
static_assert(offsetof(BP_ChallengeManager_C_InitializeChallengesFromCloud, IsStoryChallengeInitialized) == 0x000040, "Member 'BP_ChallengeManager_C_InitializeChallengesFromCloud::IsStoryChallengeInitialized' has a wrong offset!");
static_assert(offsetof(BP_ChallengeManager_C_InitializeChallengesFromCloud, CallFunc_Array_Length_ReturnValue) == 0x000044, "Member 'BP_ChallengeManager_C_InitializeChallengesFromCloud::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_ChallengeManager_C_InitializeChallengesFromCloud, K2Node_CreateDelegate_OutputDelegate) == 0x000048, "Member 'BP_ChallengeManager_C_InitializeChallengesFromCloud::K2Node_CreateDelegate_OutputDelegate' has a wrong offset!");
static_assert(offsetof(BP_ChallengeManager_C_InitializeChallengesFromCloud, Temp_int_Loop_Counter_Variable) == 0x000058, "Member 'BP_ChallengeManager_C_InitializeChallengesFromCloud::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(BP_ChallengeManager_C_InitializeChallengesFromCloud, Temp_int_Array_Index_Variable) == 0x00005C, "Member 'BP_ChallengeManager_C_InitializeChallengesFromCloud::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(BP_ChallengeManager_C_InitializeChallengesFromCloud, CallFunc_Less_IntInt_ReturnValue) == 0x000060, "Member 'BP_ChallengeManager_C_InitializeChallengesFromCloud::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_ChallengeManager_C_InitializeChallengesFromCloud, CallFunc_Array_Get_Item) == 0x000068, "Member 'BP_ChallengeManager_C_InitializeChallengesFromCloud::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(BP_ChallengeManager_C_InitializeChallengesFromCloud, CallFunc_NotEqual_NameName_ReturnValue) == 0x0000B8, "Member 'BP_ChallengeManager_C_InitializeChallengesFromCloud::CallFunc_NotEqual_NameName_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_ChallengeManager_C_InitializeChallengesFromCloud, CallFunc_Subtract_IntInt_ReturnValue) == 0x0000BC, "Member 'BP_ChallengeManager_C_InitializeChallengesFromCloud::CallFunc_Subtract_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_ChallengeManager_C_InitializeChallengesFromCloud, CallFunc_Array_Get_Item_1) == 0x0000C0, "Member 'BP_ChallengeManager_C_InitializeChallengesFromCloud::CallFunc_Array_Get_Item_1' has a wrong offset!");
static_assert(offsetof(BP_ChallengeManager_C_InitializeChallengesFromCloud, CallFunc_Subtract_IntInt_ReturnValue_1) == 0x0000C8, "Member 'BP_ChallengeManager_C_InitializeChallengesFromCloud::CallFunc_Subtract_IntInt_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_ChallengeManager_C_InitializeChallengesFromCloud, CallFunc_Array_IsValidIndex_ReturnValue) == 0x0000CC, "Member 'BP_ChallengeManager_C_InitializeChallengesFromCloud::CallFunc_Array_IsValidIndex_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_ChallengeManager_C_InitializeChallengesFromCloud, CallFunc_Add_IntInt_ReturnValue) == 0x0000D0, "Member 'BP_ChallengeManager_C_InitializeChallengesFromCloud::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_ChallengeManager_C_InitializeChallengesFromCloud, CallFunc_MakeTransform_ReturnValue) == 0x0000E0, "Member 'BP_ChallengeManager_C_InitializeChallengesFromCloud::CallFunc_MakeTransform_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_ChallengeManager_C_InitializeChallengesFromCloud, CallFunc_BeginDeferredActorSpawnFromClass_ReturnValue) == 0x000110, "Member 'BP_ChallengeManager_C_InitializeChallengesFromCloud::CallFunc_BeginDeferredActorSpawnFromClass_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_ChallengeManager_C_InitializeChallengesFromCloud, CallFunc_FinishSpawningActor_ReturnValue) == 0x000118, "Member 'BP_ChallengeManager_C_InitializeChallengesFromCloud::CallFunc_FinishSpawningActor_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_ChallengeManager_C_InitializeChallengesFromCloud, CallFunc_Array_Add_ReturnValue) == 0x000120, "Member 'BP_ChallengeManager_C_InitializeChallengesFromCloud::CallFunc_Array_Add_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_ChallengeManager_C_InitializeChallengesFromCloud, CallFunc_Array_Add_ReturnValue_1) == 0x000124, "Member 'BP_ChallengeManager_C_InitializeChallengesFromCloud::CallFunc_Array_Add_ReturnValue_1' has a wrong offset!");

// Function BP_ChallengeManager.BP_ChallengeManager_C.GetChallengeSlotsByProgress
// 0x0040 (0x0040 - 0x0000)
struct BP_ChallengeManager_C_GetChallengeSlotsByProgress final
{
public:
	TArray<class ABP_ChallengeSlot_C*>            Challenge_Slots;                                   // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
	TArray<class ABP_ChallengeSlot_C*>            Sorted_Challenge_Slots;                            // 0x0010(0x0010)(Parm, OutParm)
	TArray<class ABP_ChallengeSlot_C*>            SortedArray;                                       // 0x0020(0x0010)(Edit, BlueprintVisible, DisableEditOnTemplate)
	TDelegate<void(class UObject* ObjectA, class UObject* ObjectB, bool* Result)> K2Node_CreateDelegate_OutputDelegate;              // 0x0030(0x0010)(ZeroConstructor, NoDestructor)
};
static_assert(alignof(BP_ChallengeManager_C_GetChallengeSlotsByProgress) == 0x000008, "Wrong alignment on BP_ChallengeManager_C_GetChallengeSlotsByProgress");
static_assert(sizeof(BP_ChallengeManager_C_GetChallengeSlotsByProgress) == 0x000040, "Wrong size on BP_ChallengeManager_C_GetChallengeSlotsByProgress");
static_assert(offsetof(BP_ChallengeManager_C_GetChallengeSlotsByProgress, Challenge_Slots) == 0x000000, "Member 'BP_ChallengeManager_C_GetChallengeSlotsByProgress::Challenge_Slots' has a wrong offset!");
static_assert(offsetof(BP_ChallengeManager_C_GetChallengeSlotsByProgress, Sorted_Challenge_Slots) == 0x000010, "Member 'BP_ChallengeManager_C_GetChallengeSlotsByProgress::Sorted_Challenge_Slots' has a wrong offset!");
static_assert(offsetof(BP_ChallengeManager_C_GetChallengeSlotsByProgress, SortedArray) == 0x000020, "Member 'BP_ChallengeManager_C_GetChallengeSlotsByProgress::SortedArray' has a wrong offset!");
static_assert(offsetof(BP_ChallengeManager_C_GetChallengeSlotsByProgress, K2Node_CreateDelegate_OutputDelegate) == 0x000030, "Member 'BP_ChallengeManager_C_GetChallengeSlotsByProgress::K2Node_CreateDelegate_OutputDelegate' has a wrong offset!");

// Function BP_ChallengeManager.BP_ChallengeManager_C.ChallengeSlotComparatorByProgress
// 0x0048 (0x0048 - 0x0000)
struct BP_ChallengeManager_C_ChallengeSlotComparatorByProgress final
{
public:
	class UObject*                                ObjectA;                                           // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UObject*                                ObjectB;                                           // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Return;                                            // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class ABP_ChallengeSlot_C*                    K2Node_DynamicCast_AsBP_Challenge_Slot;            // 0x0018(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0020(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_21[0x7];                                       // 0x0021(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class ABP_ChallengeSlot_C*                    K2Node_DynamicCast_AsBP_Challenge_Slot_1;          // 0x0028(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess_1;                     // 0x0030(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_31[0x3];                                       // 0x0031(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_GetRelativeProgress_RelativeProgress;     // 0x0034(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_GetRelativeProgress_RelativeProgress_1;   // 0x0038(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	E_ChallengeSlotState                          CallFunc_Get_Slot_State_Slot_State;                // 0x003C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_FloatFloat_ReturnValue;              // 0x003D(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue;          // 0x003E(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	E_ChallengeSlotState                          CallFunc_Get_Slot_State_Slot_State_1;              // 0x003F(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue_1;        // 0x0040(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanXOR_ReturnValue;                   // 0x0041(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanAND_ReturnValue;                   // 0x0042(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Not_PreBool_ReturnValue;                  // 0x0043(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanAND_ReturnValue_1;                 // 0x0044(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanOR_ReturnValue;                    // 0x0045(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_ChallengeManager_C_ChallengeSlotComparatorByProgress) == 0x000008, "Wrong alignment on BP_ChallengeManager_C_ChallengeSlotComparatorByProgress");
static_assert(sizeof(BP_ChallengeManager_C_ChallengeSlotComparatorByProgress) == 0x000048, "Wrong size on BP_ChallengeManager_C_ChallengeSlotComparatorByProgress");
static_assert(offsetof(BP_ChallengeManager_C_ChallengeSlotComparatorByProgress, ObjectA) == 0x000000, "Member 'BP_ChallengeManager_C_ChallengeSlotComparatorByProgress::ObjectA' has a wrong offset!");
static_assert(offsetof(BP_ChallengeManager_C_ChallengeSlotComparatorByProgress, ObjectB) == 0x000008, "Member 'BP_ChallengeManager_C_ChallengeSlotComparatorByProgress::ObjectB' has a wrong offset!");
static_assert(offsetof(BP_ChallengeManager_C_ChallengeSlotComparatorByProgress, Return) == 0x000010, "Member 'BP_ChallengeManager_C_ChallengeSlotComparatorByProgress::Return' has a wrong offset!");
static_assert(offsetof(BP_ChallengeManager_C_ChallengeSlotComparatorByProgress, K2Node_DynamicCast_AsBP_Challenge_Slot) == 0x000018, "Member 'BP_ChallengeManager_C_ChallengeSlotComparatorByProgress::K2Node_DynamicCast_AsBP_Challenge_Slot' has a wrong offset!");
static_assert(offsetof(BP_ChallengeManager_C_ChallengeSlotComparatorByProgress, K2Node_DynamicCast_bSuccess) == 0x000020, "Member 'BP_ChallengeManager_C_ChallengeSlotComparatorByProgress::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(BP_ChallengeManager_C_ChallengeSlotComparatorByProgress, K2Node_DynamicCast_AsBP_Challenge_Slot_1) == 0x000028, "Member 'BP_ChallengeManager_C_ChallengeSlotComparatorByProgress::K2Node_DynamicCast_AsBP_Challenge_Slot_1' has a wrong offset!");
static_assert(offsetof(BP_ChallengeManager_C_ChallengeSlotComparatorByProgress, K2Node_DynamicCast_bSuccess_1) == 0x000030, "Member 'BP_ChallengeManager_C_ChallengeSlotComparatorByProgress::K2Node_DynamicCast_bSuccess_1' has a wrong offset!");
static_assert(offsetof(BP_ChallengeManager_C_ChallengeSlotComparatorByProgress, CallFunc_GetRelativeProgress_RelativeProgress) == 0x000034, "Member 'BP_ChallengeManager_C_ChallengeSlotComparatorByProgress::CallFunc_GetRelativeProgress_RelativeProgress' has a wrong offset!");
static_assert(offsetof(BP_ChallengeManager_C_ChallengeSlotComparatorByProgress, CallFunc_GetRelativeProgress_RelativeProgress_1) == 0x000038, "Member 'BP_ChallengeManager_C_ChallengeSlotComparatorByProgress::CallFunc_GetRelativeProgress_RelativeProgress_1' has a wrong offset!");
static_assert(offsetof(BP_ChallengeManager_C_ChallengeSlotComparatorByProgress, CallFunc_Get_Slot_State_Slot_State) == 0x00003C, "Member 'BP_ChallengeManager_C_ChallengeSlotComparatorByProgress::CallFunc_Get_Slot_State_Slot_State' has a wrong offset!");
static_assert(offsetof(BP_ChallengeManager_C_ChallengeSlotComparatorByProgress, CallFunc_Less_FloatFloat_ReturnValue) == 0x00003D, "Member 'BP_ChallengeManager_C_ChallengeSlotComparatorByProgress::CallFunc_Less_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_ChallengeManager_C_ChallengeSlotComparatorByProgress, CallFunc_EqualEqual_ByteByte_ReturnValue) == 0x00003E, "Member 'BP_ChallengeManager_C_ChallengeSlotComparatorByProgress::CallFunc_EqualEqual_ByteByte_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_ChallengeManager_C_ChallengeSlotComparatorByProgress, CallFunc_Get_Slot_State_Slot_State_1) == 0x00003F, "Member 'BP_ChallengeManager_C_ChallengeSlotComparatorByProgress::CallFunc_Get_Slot_State_Slot_State_1' has a wrong offset!");
static_assert(offsetof(BP_ChallengeManager_C_ChallengeSlotComparatorByProgress, CallFunc_EqualEqual_ByteByte_ReturnValue_1) == 0x000040, "Member 'BP_ChallengeManager_C_ChallengeSlotComparatorByProgress::CallFunc_EqualEqual_ByteByte_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_ChallengeManager_C_ChallengeSlotComparatorByProgress, CallFunc_BooleanXOR_ReturnValue) == 0x000041, "Member 'BP_ChallengeManager_C_ChallengeSlotComparatorByProgress::CallFunc_BooleanXOR_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_ChallengeManager_C_ChallengeSlotComparatorByProgress, CallFunc_BooleanAND_ReturnValue) == 0x000042, "Member 'BP_ChallengeManager_C_ChallengeSlotComparatorByProgress::CallFunc_BooleanAND_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_ChallengeManager_C_ChallengeSlotComparatorByProgress, CallFunc_Not_PreBool_ReturnValue) == 0x000043, "Member 'BP_ChallengeManager_C_ChallengeSlotComparatorByProgress::CallFunc_Not_PreBool_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_ChallengeManager_C_ChallengeSlotComparatorByProgress, CallFunc_BooleanAND_ReturnValue_1) == 0x000044, "Member 'BP_ChallengeManager_C_ChallengeSlotComparatorByProgress::CallFunc_BooleanAND_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_ChallengeManager_C_ChallengeSlotComparatorByProgress, CallFunc_BooleanOR_ReturnValue) == 0x000045, "Member 'BP_ChallengeManager_C_ChallengeSlotComparatorByProgress::CallFunc_BooleanOR_ReturnValue' has a wrong offset!");

// Function BP_ChallengeManager.BP_ChallengeManager_C.GetChallengeSlotsByCategory
// 0x0038 (0x0038 - 0x0000)
struct BP_ChallengeManager_C_GetChallengeSlotsByCategory final
{
public:
	class FString                                 Slot_Category;                                     // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)
	TArray<class ABP_ChallengeSlot_C*>            ChallengeSlots_0;                                  // 0x0010(0x0010)(Parm, OutParm)
	struct FStruct_ChallengeSlotsCategory         CallFunc_Map_Find_Value;                           // 0x0020(0x0010)(HasGetValueTypeHash)
	bool                                          CallFunc_Map_Find_ReturnValue;                     // 0x0030(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_ChallengeManager_C_GetChallengeSlotsByCategory) == 0x000008, "Wrong alignment on BP_ChallengeManager_C_GetChallengeSlotsByCategory");
static_assert(sizeof(BP_ChallengeManager_C_GetChallengeSlotsByCategory) == 0x000038, "Wrong size on BP_ChallengeManager_C_GetChallengeSlotsByCategory");
static_assert(offsetof(BP_ChallengeManager_C_GetChallengeSlotsByCategory, Slot_Category) == 0x000000, "Member 'BP_ChallengeManager_C_GetChallengeSlotsByCategory::Slot_Category' has a wrong offset!");
static_assert(offsetof(BP_ChallengeManager_C_GetChallengeSlotsByCategory, ChallengeSlots_0) == 0x000010, "Member 'BP_ChallengeManager_C_GetChallengeSlotsByCategory::ChallengeSlots_0' has a wrong offset!");
static_assert(offsetof(BP_ChallengeManager_C_GetChallengeSlotsByCategory, CallFunc_Map_Find_Value) == 0x000020, "Member 'BP_ChallengeManager_C_GetChallengeSlotsByCategory::CallFunc_Map_Find_Value' has a wrong offset!");
static_assert(offsetof(BP_ChallengeManager_C_GetChallengeSlotsByCategory, CallFunc_Map_Find_ReturnValue) == 0x000030, "Member 'BP_ChallengeManager_C_GetChallengeSlotsByCategory::CallFunc_Map_Find_ReturnValue' has a wrong offset!");

// Function BP_ChallengeManager.BP_ChallengeManager_C.GetChallengeSlotsByMultipleCategories
// 0x00B8 (0x00B8 - 0x0000)
struct BP_ChallengeManager_C_GetChallengeSlotsByMultipleCategories final
{
public:
	TSet<class FString>                           Slot_Categories;                                   // 0x0000(0x0050)(BlueprintVisible, BlueprintReadOnly, Parm)
	TArray<class ABP_ChallengeSlot_C*>            Challenge_Slots;                                   // 0x0050(0x0010)(Parm, OutParm)
	TArray<class ABP_ChallengeSlot_C*>            FilteredChallengeSlots;                            // 0x0060(0x0010)(Edit, BlueprintVisible, DisableEditOnTemplate)
	TArray<class FString>                         CallFunc_Set_ToArray_Result;                       // 0x0070(0x0010)(ReferenceParm)
	int32                                         Temp_int_Array_Index_Variable;                     // 0x0080(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x0084(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FString                                 CallFunc_Array_Get_Item;                           // 0x0088(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	TArray<class ABP_ChallengeSlot_C*>            CallFunc_GetChallengeSlotsByCategory_ChallengeSlots; // 0x0098(0x0010)(ReferenceParm)
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x00A8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x00AC(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_AD[0x3];                                       // 0x00AD(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x00B0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_ChallengeManager_C_GetChallengeSlotsByMultipleCategories) == 0x000008, "Wrong alignment on BP_ChallengeManager_C_GetChallengeSlotsByMultipleCategories");
static_assert(sizeof(BP_ChallengeManager_C_GetChallengeSlotsByMultipleCategories) == 0x0000B8, "Wrong size on BP_ChallengeManager_C_GetChallengeSlotsByMultipleCategories");
static_assert(offsetof(BP_ChallengeManager_C_GetChallengeSlotsByMultipleCategories, Slot_Categories) == 0x000000, "Member 'BP_ChallengeManager_C_GetChallengeSlotsByMultipleCategories::Slot_Categories' has a wrong offset!");
static_assert(offsetof(BP_ChallengeManager_C_GetChallengeSlotsByMultipleCategories, Challenge_Slots) == 0x000050, "Member 'BP_ChallengeManager_C_GetChallengeSlotsByMultipleCategories::Challenge_Slots' has a wrong offset!");
static_assert(offsetof(BP_ChallengeManager_C_GetChallengeSlotsByMultipleCategories, FilteredChallengeSlots) == 0x000060, "Member 'BP_ChallengeManager_C_GetChallengeSlotsByMultipleCategories::FilteredChallengeSlots' has a wrong offset!");
static_assert(offsetof(BP_ChallengeManager_C_GetChallengeSlotsByMultipleCategories, CallFunc_Set_ToArray_Result) == 0x000070, "Member 'BP_ChallengeManager_C_GetChallengeSlotsByMultipleCategories::CallFunc_Set_ToArray_Result' has a wrong offset!");
static_assert(offsetof(BP_ChallengeManager_C_GetChallengeSlotsByMultipleCategories, Temp_int_Array_Index_Variable) == 0x000080, "Member 'BP_ChallengeManager_C_GetChallengeSlotsByMultipleCategories::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(BP_ChallengeManager_C_GetChallengeSlotsByMultipleCategories, CallFunc_Array_Length_ReturnValue) == 0x000084, "Member 'BP_ChallengeManager_C_GetChallengeSlotsByMultipleCategories::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_ChallengeManager_C_GetChallengeSlotsByMultipleCategories, CallFunc_Array_Get_Item) == 0x000088, "Member 'BP_ChallengeManager_C_GetChallengeSlotsByMultipleCategories::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(BP_ChallengeManager_C_GetChallengeSlotsByMultipleCategories, CallFunc_GetChallengeSlotsByCategory_ChallengeSlots) == 0x000098, "Member 'BP_ChallengeManager_C_GetChallengeSlotsByMultipleCategories::CallFunc_GetChallengeSlotsByCategory_ChallengeSlots' has a wrong offset!");
static_assert(offsetof(BP_ChallengeManager_C_GetChallengeSlotsByMultipleCategories, Temp_int_Loop_Counter_Variable) == 0x0000A8, "Member 'BP_ChallengeManager_C_GetChallengeSlotsByMultipleCategories::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(BP_ChallengeManager_C_GetChallengeSlotsByMultipleCategories, CallFunc_Less_IntInt_ReturnValue) == 0x0000AC, "Member 'BP_ChallengeManager_C_GetChallengeSlotsByMultipleCategories::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_ChallengeManager_C_GetChallengeSlotsByMultipleCategories, CallFunc_Add_IntInt_ReturnValue) == 0x0000B0, "Member 'BP_ChallengeManager_C_GetChallengeSlotsByMultipleCategories::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");

// Function BP_ChallengeManager.BP_ChallengeManager_C.GetAllChallengeSlots
// 0x0078 (0x0078 - 0x0000)
struct BP_ChallengeManager_C_GetAllChallengeSlots final
{
public:
	TArray<class ABP_ChallengeSlot_C*>            Challenge_Slots;                                   // 0x0000(0x0010)(Parm, OutParm)
	TArray<class ABP_ChallengeSlot_C*>            ChallengeSlotList;                                 // 0x0010(0x0010)(Edit, BlueprintVisible, DisableEditOnTemplate)
	int32                                         Temp_int_Array_Index_Variable;                     // 0x0020(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x0024(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x0028(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2C[0x4];                                       // 0x002C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class FString>                         CallFunc_Map_Keys_Keys;                            // 0x0030(0x0010)(ReferenceParm)
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x0040(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_44[0x4];                                       // 0x0044(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 CallFunc_Array_Get_Item;                           // 0x0048(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x0058(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_59[0x7];                                       // 0x0059(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FStruct_ChallengeSlotsCategory         CallFunc_Map_Find_Value;                           // 0x0060(0x0010)(HasGetValueTypeHash)
	bool                                          CallFunc_Map_Find_ReturnValue;                     // 0x0070(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_ChallengeManager_C_GetAllChallengeSlots) == 0x000008, "Wrong alignment on BP_ChallengeManager_C_GetAllChallengeSlots");
static_assert(sizeof(BP_ChallengeManager_C_GetAllChallengeSlots) == 0x000078, "Wrong size on BP_ChallengeManager_C_GetAllChallengeSlots");
static_assert(offsetof(BP_ChallengeManager_C_GetAllChallengeSlots, Challenge_Slots) == 0x000000, "Member 'BP_ChallengeManager_C_GetAllChallengeSlots::Challenge_Slots' has a wrong offset!");
static_assert(offsetof(BP_ChallengeManager_C_GetAllChallengeSlots, ChallengeSlotList) == 0x000010, "Member 'BP_ChallengeManager_C_GetAllChallengeSlots::ChallengeSlotList' has a wrong offset!");
static_assert(offsetof(BP_ChallengeManager_C_GetAllChallengeSlots, Temp_int_Array_Index_Variable) == 0x000020, "Member 'BP_ChallengeManager_C_GetAllChallengeSlots::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(BP_ChallengeManager_C_GetAllChallengeSlots, Temp_int_Loop_Counter_Variable) == 0x000024, "Member 'BP_ChallengeManager_C_GetAllChallengeSlots::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(BP_ChallengeManager_C_GetAllChallengeSlots, CallFunc_Add_IntInt_ReturnValue) == 0x000028, "Member 'BP_ChallengeManager_C_GetAllChallengeSlots::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_ChallengeManager_C_GetAllChallengeSlots, CallFunc_Map_Keys_Keys) == 0x000030, "Member 'BP_ChallengeManager_C_GetAllChallengeSlots::CallFunc_Map_Keys_Keys' has a wrong offset!");
static_assert(offsetof(BP_ChallengeManager_C_GetAllChallengeSlots, CallFunc_Array_Length_ReturnValue) == 0x000040, "Member 'BP_ChallengeManager_C_GetAllChallengeSlots::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_ChallengeManager_C_GetAllChallengeSlots, CallFunc_Array_Get_Item) == 0x000048, "Member 'BP_ChallengeManager_C_GetAllChallengeSlots::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(BP_ChallengeManager_C_GetAllChallengeSlots, CallFunc_Less_IntInt_ReturnValue) == 0x000058, "Member 'BP_ChallengeManager_C_GetAllChallengeSlots::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_ChallengeManager_C_GetAllChallengeSlots, CallFunc_Map_Find_Value) == 0x000060, "Member 'BP_ChallengeManager_C_GetAllChallengeSlots::CallFunc_Map_Find_Value' has a wrong offset!");
static_assert(offsetof(BP_ChallengeManager_C_GetAllChallengeSlots, CallFunc_Map_Find_ReturnValue) == 0x000070, "Member 'BP_ChallengeManager_C_GetAllChallengeSlots::CallFunc_Map_Find_ReturnValue' has a wrong offset!");

// Function BP_ChallengeManager.BP_ChallengeManager_C.GetAllChallengeSlotsSorted
// 0x0020 (0x0020 - 0x0000)
struct BP_ChallengeManager_C_GetAllChallengeSlotsSorted final
{
public:
	TArray<class ABP_ChallengeSlot_C*>            ChallengeSlotsSorted_0;                            // 0x0000(0x0010)(Parm, OutParm)
	TArray<class ABP_ChallengeSlot_C*>            CallFunc_GetChallengeSlotsByProgress_Sorted_Challenge_Slots; // 0x0010(0x0010)(ReferenceParm)
};
static_assert(alignof(BP_ChallengeManager_C_GetAllChallengeSlotsSorted) == 0x000008, "Wrong alignment on BP_ChallengeManager_C_GetAllChallengeSlotsSorted");
static_assert(sizeof(BP_ChallengeManager_C_GetAllChallengeSlotsSorted) == 0x000020, "Wrong size on BP_ChallengeManager_C_GetAllChallengeSlotsSorted");
static_assert(offsetof(BP_ChallengeManager_C_GetAllChallengeSlotsSorted, ChallengeSlotsSorted_0) == 0x000000, "Member 'BP_ChallengeManager_C_GetAllChallengeSlotsSorted::ChallengeSlotsSorted_0' has a wrong offset!");
static_assert(offsetof(BP_ChallengeManager_C_GetAllChallengeSlotsSorted, CallFunc_GetChallengeSlotsByProgress_Sorted_Challenge_Slots) == 0x000010, "Member 'BP_ChallengeManager_C_GetAllChallengeSlotsSorted::CallFunc_GetChallengeSlotsByProgress_Sorted_Challenge_Slots' has a wrong offset!");

}

