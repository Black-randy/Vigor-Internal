#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_GameState_GunFight

#include "Basic.hpp"

#include "E_TeamsMatchPhase_structs.hpp"
#include "EGunFight_LoadoutState_structs.hpp"
#include "CoreUObject_structs.hpp"
#include "Engine_structs.hpp"
#include "EGunFightWinReason_structs.hpp"
#include "Struct_ScoreboardRow_structs.hpp"
#include "Struct_GunFightLoadout_structs.hpp"
#include "BP_GameState_Teams_classes.hpp"
#include "EGunFightRole_structs.hpp"
#include "Struct_GunFight_RoleLoadouts_structs.hpp"
#include "S_GunFightLoadoutSlot_structs.hpp"
#include "S_Gunfight_LoadoutSlotInfo_structs.hpp"
#include "FlameUI_structs.hpp"
#include "Flame_structs.hpp"
#include "ERaidNotificationType_structs.hpp"


namespace SDK
{

// BlueprintGeneratedClass BP_GameState_GunFight.BP_GameState_GunFight_C
// 0x0470 (0x0928 - 0x04B8)
class ABP_GameState_GunFight_C final : public ABP_GameState_Teams_C
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame_BP_GameState_GunFight_C;            // 0x04B8(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	struct FVector                                WorldMin;                                          // 0x04C0(0x000C)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                WorldMax;                                          // 0x04CC(0x000C)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          WorldMinMaxInitialized;                            // 0x04D8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          Last_Two_Minutes_Played;                           // 0x04D9(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          Last_Minute_Played;                                // 0x04DA(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          Last_Ten_Seconds_Played;                           // 0x04DB(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	int32                                         RemainingTimePreRound;                             // 0x04DC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CurrentSettingID;                                  // 0x04E0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4E4[0x4];                                      // 0x04E4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class ABP_PlayerStart_Raid_C*>         Attacker_Starts;                                   // 0x04E8(0x0010)(Edit, BlueprintVisible, DisableEditOnTemplate, DisableEditOnInstance)
	TArray<class ABP_PlayerStart_Raid_C*>         Defender_Starts;                                   // 0x04F8(0x0010)(Edit, BlueprintVisible, DisableEditOnTemplate, DisableEditOnInstance)
	int32                                         PreMinusRound_Start_Time;                          // 0x0508(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         FirstRound_Start_Time;                             // 0x050C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Rounds_To_Win;                                     // 0x0510(0x0004)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EGunFightWinReason                            Last_Round_Win_Reason;                             // 0x0514(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_515[0x3];                                      // 0x0515(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class ABP_WinnerScreen_Base_C*                Winner_Screen;                                     // 0x0518(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Leave_Match_Time;                                  // 0x0520(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_524[0x4];                                      // 0x0524(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UBP_GSC_Team_Raid_C*                    Last_Round_Win_Team;                               // 0x0528(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TMap<EGunFightRole, struct FStruct_GunFightLoadout> CurrentRoundLoadouts_Attackers;                    // 0x0530(0x0050)(Edit, BlueprintVisible, DisableEditOnInstance)
	class UUI_TVTDeathmatch_KillFeed_C*           KillFeedUI;                                        // 0x0580(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UUI_GunFight_SurvivorCount_C*           SurvivorUI;                                        // 0x0588(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Is_Objective_Phase;                                // 0x0590(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_591[0x7];                                      // 0x0591(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TMap<EGunFightRole, struct FStruct_GunFight_RoleLoadouts> PossibleRoundLoadouts_Attackers;                   // 0x0598(0x0050)(Edit, BlueprintVisible, DisableEditOnInstance)
	TMap<EGunFightRole, struct FStruct_GunFightLoadout> CurrentRoundLoadouts_Defenders;                    // 0x05E8(0x0050)(Edit, BlueprintVisible, DisableEditOnInstance)
	TMap<EGunFightRole, struct FStruct_GunFight_RoleLoadouts> PossibleRoundLoadouts_Defenders;                   // 0x0638(0x0050)(Edit, BlueprintVisible, DisableEditOnInstance)
	bool                                          Give_Players_Same_Loadouts;                        // 0x0688(0x0001)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          Spawn_Sides_Switched;                              // 0x0689(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          Cheat_Match_Paused;                                // 0x068A(0x0001)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_68B[0x5];                                      // 0x068B(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	class UAudioComponent*                        LastPlayingSoundCue;                               // 0x0690(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<class FName>                           Spawn_Markers;                                     // 0x0698(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	int32                                         LoadoutCount;                                      // 0x06A8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         LoadoutPickerEndBufferTime;                        // 0x06AC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         PreRoundStartInputBufferTime;                      // 0x06B0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_6B4[0x4];                                      // 0x06B4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TMap<int32, EGunFight_LoadoutState>           LoadoutIndex_To_LoadoutState;                      // 0x06B8(0x0050)(Edit, BlueprintVisible, DisableEditOnInstance, AdvancedDisplay)
	TArray<struct FS_GunFightLoadoutSlot>         DefenderLoadoutSlots;                              // 0x0708(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance, AdvancedDisplay)
	TArray<struct FS_GunFightLoadoutSlot>         AttackerLoadoutSlots;                              // 0x0718(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance, AdvancedDisplay)
	TArray<struct FS_Gunfight_LoadoutSlotInfo>    LoadoutSlotOptions;                                // 0x0728(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance, AdvancedDisplay)
	FMulticastInlineDelegateProperty_             LoadoutsReplicated;                                // 0x0738(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	int32                                         ScoreBoosterTeam1_Count;                           // 0x0748(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         ScoreBoosterTeam2_Count;                           // 0x074C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TMap<struct FStruct_ScoreboardRow, int32>     DisconnectedAttackerPlayerScores;                  // 0x0750(0x0050)(Edit, BlueprintVisible, DisableEditOnInstance)
	TMap<struct FStruct_ScoreboardRow, int32>     DisconnectedDefenderPlayerScores;                  // 0x07A0(0x0050)(Edit, BlueprintVisible, DisableEditOnInstance)
	TMap<class AHumanPlayerState*, class FString> PlayerStateToPickType;                             // 0x07F0(0x0050)(Edit, BlueprintVisible, DisableEditOnTemplate, DisableEditOnInstance, AdvancedDisplay)
	TMap<int32, bool>                             Round_To_LocalPlayerLoadoutChecked;                // 0x0840(0x0050)(Edit, BlueprintVisible, DisableEditOnInstance)
	TArray<class ABP_PlayerController_GunFight_C*> PlayersToReallyKick;                               // 0x0890(0x0010)(Edit, BlueprintVisible, DisableEditOnTemplate, DisableEditOnInstance)
	TArray<class ABP_PlayerController_GunFight_C*> PlayersProposedToKick;                             // 0x08A0(0x0010)(Edit, BlueprintVisible, DisableEditOnTemplate, DisableEditOnInstance)
	int32                                         InitialVoteKickCooldownTime;                       // 0x08B0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         TotalTimeForPlayerVoting;                          // 0x08B4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bCanVoteKick;                                      // 0x08B8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          Team1_ActiveVoting;                                // 0x08B9(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          Team2_ActiveVoting;                                // 0x08BA(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_8BB[0x1];                                      // 0x08BB(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Team1_TotalElapsedTimeForNextVoteKick;             // 0x08BC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Team2_TotalElapsedTimeForNextVoteKick;             // 0x08C0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Team1_VoteKickStartTime;                           // 0x08C4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Team2_VoteKickStartTime;                           // 0x08C8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         TimeToKickAfterResultReached;                      // 0x08CC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	FMulticastInlineDelegateProperty_             SecondInMatchHasPassed;                            // 0x08D0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	FMulticastInlineDelegateProperty_             VoteKickRulesChanged;                              // 0x08E0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	TArray<int32>                                 Team1_KickedPlayersID;                             // 0x08F0(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	FMulticastInlineDelegateProperty_             VoteKick_KickedPlayersUpdated;                     // 0x0900(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	TArray<int32>                                 Team2_KickedPlayersID;                             // 0x0910(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	bool                                          bShouldDisplayAFK_Check_CLIENT;                    // 0x0920(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_921[0x3];                                      // 0x0921(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         PreRoundStartAFK_CheckTime;                        // 0x0924(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

public:
	void LoadoutsReplicated__DelegateSignature(class ABP_PlayerController_GunFight_C* PlayerController, int32 PreRoundTime);
	void SecondInMatchHasPassed__DelegateSignature();
	void VoteKickRulesChanged__DelegateSignature();
	void VoteKick_KickedPlayersUpdated__DelegateSignature();
	void ExecuteUbergraph_BP_GameState_GunFight(int32 EntryPoint);
	void ClearKickVotingUponMatchEnd();
	void AFKKickAfterDelay();
	void HandleAFK_CheckResult(class ABP_PlayerController_GunFight_C* PlayerToKick, bool ShouldKick, int32 TeamID);
	void ShowAFK_CheckIfNeeded();
	void ClearKickVoting_AfterAFK_Check();
	void ReplicateKickedPlayers(const int32& KickedPlayerID, int32 TeamID);
	void Team1_EnableKickVotingAfterDelay();
	void Team2_EnableKickVotingAfterDelay();
	void Replicate_EnableVoteKick(bool bCanVoteKick_0);
	void OnKickVotingStarted(int32 TeamIndex);
	void SecondOnServerPassed();
	void KickAfterDelay();
	void ResolveVoteKick(bool bShouldDisplayAFKCheck, class ABP_PlayerController_GunFight_C* PlayerToKick, int32 TeamID);
	void VoteKickPlayer(class ABP_PlayerController_GunFight_C* PlayerToKick);
	void Replicate_VoteKickCooldown(int32 CooldownStartTime, bool ActiveVoteKick, int32 TeamIndex);
	void VoteKickGracePeriodEnded();
	void InitialKickCooldown();
	void CheckLocalPlayerRoundLoadout();
	void ReplicateDisconnectedPlayerStatistics(const struct FStruct_GunFightStatistics& ScoreboardRow, bool WasKicked, bool Attacker);
	void ReplicateMatchBoosters(int32 ScoreBoosterTeam1_Count_0, int32 ScoreBoosterTeam2_Count_0);
	void ShowScoreEventFeed(const class FString& ScoreEventStringKey, int32 Awarded_Points);
	void ShowChosenLoadout();
	void HideLoadoutAfterDelay();
	void ShowLoadoutOptionsDelayed();
	void ReplicateLoadoutSlots(const TArray<struct FS_GunFightLoadoutSlot>& Loadout_slots, bool IsAttacker);
	void ReplicateLoadoutOptions(TArray<struct FS_Gunfight_LoadoutSlotInfo>& Loadouts);
	void Set_Barricades_Active_State(bool IsActive);
	void Handle_Match_Phase(E_TeamsMatchPhase Match_Phase_0);
	void Replicate_Spawns(const TArray<class ABP_PlayerStart_Raid_C*>& Attacker_Spawns, const TArray<class ABP_PlayerStart_Raid_C*>& Defender_Spawns, int32 CurrentSettingID_0);
	void Set_Spawn_Sides_Switched(bool Sides_Switched);
	void Winner_Screen_Start();
	void SetLoadoutStyle(int32 Value);
	void Objective_Stage_Started(class ABP_Objective_GunFight_C* Objective, class ABP_ObjectiveSpawnPoint_GunFight_C* SpawnPoint);
	void Update_Survivor_Count(int32 Attacker_Survivors, int32 Defender_Survivors);
	void Show_Kill_Feed(const struct FStruct_TVTDeathmatch_KillFeed& KillFeed);
	void Replicate_Current_Round_Weapons(const TArray<struct FStruct_GunFightLoadout>& InCurrentRoundLoadouts_Attackers, const TArray<struct FStruct_GunFightLoadout>& InCurrentRoundLoadouts_Defenders);
	void Last_Two_Minutes_In_Match();
	void Set_Round_Win_Reason(EGunFightWinReason Win_Reason, class UBP_GSC_Team_Raid_C* Team_Who_Won);
	void ReceiveBeginPlay();
	void Notify_Player_Statistics_Changed();
	void New_Round_Started();
	void Players_Update_PreRound_Time_Remaining(int32 Remaining_Time);
	void Set_PreRound_Remaining_Time(int32 Remaining_Time);
	void Last_Ten_Seconds_In_Match();
	void Players_Update_Time_Remaining(int32 Remaining_Time);
	void Set_Match_Remaining_Time(int32 Remaining_Time);
	void Cheat_SetRoundsToWin(int32 RoundsToWin);
	void Cheat_UpdateNewLoadouts();
	void Debug_Switch_Pause_Match();
	void Get_Attacking_Team(class UBP_GSC_Team_Raid_C** Attacking_Team);
	void Get_Defending_Team(class UBP_GSC_Team_Raid_C** Defending_Team);
	void GetWorldMinMax(struct FVector* World_Min, struct FVector* World_Max);
	void Check_Remaining_Time_Sound_Cues();
	void Get_Statistics(TArray<struct FStruct_GunFightStatistics>* Statistics);
	void Get_Attacker_Statistics(TArray<struct FStruct_GunFightStatistics>* Statistics);
	void Get_Defender_Statistics(TArray<struct FStruct_GunFightStatistics>* Statistics);
	void Find_Player_Start_Positions();
	void Get_Winning_and_Losing_Teams(bool* Winner_Found, class UBP_GSC_Team_Raid_C** Winning_Team, class UBP_GSC_Team_Raid_C** Losing_Team, bool* TeamsAreEqual);
	void DidAttackersWin(bool* AttackersWon);
	void Show_End_Turn_Notification_To_Player(EGunFightWinReason Win_Reason, class UBP_GSC_Team_Raid_C* Winning_Team, class ABP_PlayerController_GunFight_C* Player_Controller);
	void Find_Winner_Screen();
	void Display_Winner_Screen();
	void GetScoreboardTabs(TArray<struct FStruct_ScoreboardTab>* Tabs);
	void IsLocalPlayerWinning(bool* IsWinning);
	void Get_Current_Round_Loadout(bool Is_Attacker, EGunFightRole Role_0, bool* Found_Any, struct FStruct_GunFightLoadout* Loadout);
	void Modify_Kill_Feed_Color_By_Team(const struct FStruct_TVTDeathmatch_KillFeed& Kill_Feed_In, struct FStruct_TVTDeathmatch_KillFeed* Kill_Feed_Out);
	void Show_or_Hide_Spawn_Markers(bool Show);
	void Clean_Loadout_Slots();
	void Clean_Loadout_Pick_Types();
	void SetPlayerStateToLoadoutSlot(int32 LoadoutIndex, class ABP_PlayerState_GunFight_C* PlayerState, bool bIsAttacker);
	void GetLoadoutByPlayerState(class ABP_PlayerState_GunFight_C* PlayerState, bool bIsAttacker, bool* bFoundAny, struct FS_GunFightLoadouts_S12* Loadout, int32* FoundLoadoutIndex);
	void GetLoadoutStateByIndex(int32 Index_0, bool bIsAttacker, bool* Valid, EGunFight_LoadoutState* State);
	void GetCleanLoadoutStates(int32 LoadoutCount_0, TArray<struct FS_GunFightLoadoutSlot>* NewParam);
	void SelectMatchLoadouts();
	void ShowLoadoutPicker(class ABP_PlayerController_GunFight_C* PlayerController, int32 PreRoundTime);
	void Get_Pre_Round_Time(int32* Time);
	void SavePreviousLoadout();
	void ReceivedMatchPhaseReplication(E_TeamsMatchPhase Match_Phase_0);
	void Set_Lowest_Available_Index_Loadout(class ABP_PlayerState_GunFight_C* PlayerState, bool bIsAttacker);
	void GetCountOfPlayersWithLoadout(int32 Index_0, bool bIsAttacker, bool* Valid, int32* PlayerCount_0);
	void GetDisconnectedScoreboardRow(const struct FStruct_GunFightStatistics& Statistics, bool WasKicked, struct FStruct_ScoreboardRow* ScoreboardRow);
	void GetDisconnectedPlayerScoreboardRows(bool IsAttacker, TArray<struct FStruct_ScoreboardRow>* DisconnectedPlayers);
	void GetThresholdMultiplierForDisconnectedPlayers(bool Attacker, float* Multiplier);
	void GetGameModeStringName(class FString* StringName);
	void SetPickTypeByPlayerState(const class FString& PickType, class ABP_PlayerState_GunFight_C* PlayerState);
	void GetPickTypeByPlayerState(class ABP_PlayerState_GunFight_C* PlayerState, class FString* PickType);
	void CheckLocalPlayerForLoadout(bool* HasLoadout);
	void GetRemainingKickVotingTime(int32 TeamIndex, int32* RemainingTime_0, bool* VotingActive);
	void Get_Remaining_Kick_Vote_Grace_Time(int32 TeamIndex, int32* RemainingTime_0);
	void GetVoteKickStartTime(int32 TeamIndex, int32* StartElapsedTime);
	void GetTotalElapsedTimeForNextVoteKick(int32 TeamIndex, int32* StartElapsedTime);
	bool GetIsActiveKickVoting(int32 TeamIndex);
	void Check_if_Every_Player_Picked_aLoadout(bool* EveryPlayerPicked);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BP_GameState_GunFight_C">();
	}
	static class ABP_GameState_GunFight_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<ABP_GameState_GunFight_C>();
	}
};
static_assert(alignof(ABP_GameState_GunFight_C) == 0x000008, "Wrong alignment on ABP_GameState_GunFight_C");
static_assert(sizeof(ABP_GameState_GunFight_C) == 0x000928, "Wrong size on ABP_GameState_GunFight_C");
static_assert(offsetof(ABP_GameState_GunFight_C, UberGraphFrame_BP_GameState_GunFight_C) == 0x0004B8, "Member 'ABP_GameState_GunFight_C::UberGraphFrame_BP_GameState_GunFight_C' has a wrong offset!");
static_assert(offsetof(ABP_GameState_GunFight_C, WorldMin) == 0x0004C0, "Member 'ABP_GameState_GunFight_C::WorldMin' has a wrong offset!");
static_assert(offsetof(ABP_GameState_GunFight_C, WorldMax) == 0x0004CC, "Member 'ABP_GameState_GunFight_C::WorldMax' has a wrong offset!");
static_assert(offsetof(ABP_GameState_GunFight_C, WorldMinMaxInitialized) == 0x0004D8, "Member 'ABP_GameState_GunFight_C::WorldMinMaxInitialized' has a wrong offset!");
static_assert(offsetof(ABP_GameState_GunFight_C, Last_Two_Minutes_Played) == 0x0004D9, "Member 'ABP_GameState_GunFight_C::Last_Two_Minutes_Played' has a wrong offset!");
static_assert(offsetof(ABP_GameState_GunFight_C, Last_Minute_Played) == 0x0004DA, "Member 'ABP_GameState_GunFight_C::Last_Minute_Played' has a wrong offset!");
static_assert(offsetof(ABP_GameState_GunFight_C, Last_Ten_Seconds_Played) == 0x0004DB, "Member 'ABP_GameState_GunFight_C::Last_Ten_Seconds_Played' has a wrong offset!");
static_assert(offsetof(ABP_GameState_GunFight_C, RemainingTimePreRound) == 0x0004DC, "Member 'ABP_GameState_GunFight_C::RemainingTimePreRound' has a wrong offset!");
static_assert(offsetof(ABP_GameState_GunFight_C, CurrentSettingID) == 0x0004E0, "Member 'ABP_GameState_GunFight_C::CurrentSettingID' has a wrong offset!");
static_assert(offsetof(ABP_GameState_GunFight_C, Attacker_Starts) == 0x0004E8, "Member 'ABP_GameState_GunFight_C::Attacker_Starts' has a wrong offset!");
static_assert(offsetof(ABP_GameState_GunFight_C, Defender_Starts) == 0x0004F8, "Member 'ABP_GameState_GunFight_C::Defender_Starts' has a wrong offset!");
static_assert(offsetof(ABP_GameState_GunFight_C, PreMinusRound_Start_Time) == 0x000508, "Member 'ABP_GameState_GunFight_C::PreMinusRound_Start_Time' has a wrong offset!");
static_assert(offsetof(ABP_GameState_GunFight_C, FirstRound_Start_Time) == 0x00050C, "Member 'ABP_GameState_GunFight_C::FirstRound_Start_Time' has a wrong offset!");
static_assert(offsetof(ABP_GameState_GunFight_C, Rounds_To_Win) == 0x000510, "Member 'ABP_GameState_GunFight_C::Rounds_To_Win' has a wrong offset!");
static_assert(offsetof(ABP_GameState_GunFight_C, Last_Round_Win_Reason) == 0x000514, "Member 'ABP_GameState_GunFight_C::Last_Round_Win_Reason' has a wrong offset!");
static_assert(offsetof(ABP_GameState_GunFight_C, Winner_Screen) == 0x000518, "Member 'ABP_GameState_GunFight_C::Winner_Screen' has a wrong offset!");
static_assert(offsetof(ABP_GameState_GunFight_C, Leave_Match_Time) == 0x000520, "Member 'ABP_GameState_GunFight_C::Leave_Match_Time' has a wrong offset!");
static_assert(offsetof(ABP_GameState_GunFight_C, Last_Round_Win_Team) == 0x000528, "Member 'ABP_GameState_GunFight_C::Last_Round_Win_Team' has a wrong offset!");
static_assert(offsetof(ABP_GameState_GunFight_C, CurrentRoundLoadouts_Attackers) == 0x000530, "Member 'ABP_GameState_GunFight_C::CurrentRoundLoadouts_Attackers' has a wrong offset!");
static_assert(offsetof(ABP_GameState_GunFight_C, KillFeedUI) == 0x000580, "Member 'ABP_GameState_GunFight_C::KillFeedUI' has a wrong offset!");
static_assert(offsetof(ABP_GameState_GunFight_C, SurvivorUI) == 0x000588, "Member 'ABP_GameState_GunFight_C::SurvivorUI' has a wrong offset!");
static_assert(offsetof(ABP_GameState_GunFight_C, Is_Objective_Phase) == 0x000590, "Member 'ABP_GameState_GunFight_C::Is_Objective_Phase' has a wrong offset!");
static_assert(offsetof(ABP_GameState_GunFight_C, PossibleRoundLoadouts_Attackers) == 0x000598, "Member 'ABP_GameState_GunFight_C::PossibleRoundLoadouts_Attackers' has a wrong offset!");
static_assert(offsetof(ABP_GameState_GunFight_C, CurrentRoundLoadouts_Defenders) == 0x0005E8, "Member 'ABP_GameState_GunFight_C::CurrentRoundLoadouts_Defenders' has a wrong offset!");
static_assert(offsetof(ABP_GameState_GunFight_C, PossibleRoundLoadouts_Defenders) == 0x000638, "Member 'ABP_GameState_GunFight_C::PossibleRoundLoadouts_Defenders' has a wrong offset!");
static_assert(offsetof(ABP_GameState_GunFight_C, Give_Players_Same_Loadouts) == 0x000688, "Member 'ABP_GameState_GunFight_C::Give_Players_Same_Loadouts' has a wrong offset!");
static_assert(offsetof(ABP_GameState_GunFight_C, Spawn_Sides_Switched) == 0x000689, "Member 'ABP_GameState_GunFight_C::Spawn_Sides_Switched' has a wrong offset!");
static_assert(offsetof(ABP_GameState_GunFight_C, Cheat_Match_Paused) == 0x00068A, "Member 'ABP_GameState_GunFight_C::Cheat_Match_Paused' has a wrong offset!");
static_assert(offsetof(ABP_GameState_GunFight_C, LastPlayingSoundCue) == 0x000690, "Member 'ABP_GameState_GunFight_C::LastPlayingSoundCue' has a wrong offset!");
static_assert(offsetof(ABP_GameState_GunFight_C, Spawn_Markers) == 0x000698, "Member 'ABP_GameState_GunFight_C::Spawn_Markers' has a wrong offset!");
static_assert(offsetof(ABP_GameState_GunFight_C, LoadoutCount) == 0x0006A8, "Member 'ABP_GameState_GunFight_C::LoadoutCount' has a wrong offset!");
static_assert(offsetof(ABP_GameState_GunFight_C, LoadoutPickerEndBufferTime) == 0x0006AC, "Member 'ABP_GameState_GunFight_C::LoadoutPickerEndBufferTime' has a wrong offset!");
static_assert(offsetof(ABP_GameState_GunFight_C, PreRoundStartInputBufferTime) == 0x0006B0, "Member 'ABP_GameState_GunFight_C::PreRoundStartInputBufferTime' has a wrong offset!");
static_assert(offsetof(ABP_GameState_GunFight_C, LoadoutIndex_To_LoadoutState) == 0x0006B8, "Member 'ABP_GameState_GunFight_C::LoadoutIndex_To_LoadoutState' has a wrong offset!");
static_assert(offsetof(ABP_GameState_GunFight_C, DefenderLoadoutSlots) == 0x000708, "Member 'ABP_GameState_GunFight_C::DefenderLoadoutSlots' has a wrong offset!");
static_assert(offsetof(ABP_GameState_GunFight_C, AttackerLoadoutSlots) == 0x000718, "Member 'ABP_GameState_GunFight_C::AttackerLoadoutSlots' has a wrong offset!");
static_assert(offsetof(ABP_GameState_GunFight_C, LoadoutSlotOptions) == 0x000728, "Member 'ABP_GameState_GunFight_C::LoadoutSlotOptions' has a wrong offset!");
static_assert(offsetof(ABP_GameState_GunFight_C, LoadoutsReplicated) == 0x000738, "Member 'ABP_GameState_GunFight_C::LoadoutsReplicated' has a wrong offset!");
static_assert(offsetof(ABP_GameState_GunFight_C, ScoreBoosterTeam1_Count) == 0x000748, "Member 'ABP_GameState_GunFight_C::ScoreBoosterTeam1_Count' has a wrong offset!");
static_assert(offsetof(ABP_GameState_GunFight_C, ScoreBoosterTeam2_Count) == 0x00074C, "Member 'ABP_GameState_GunFight_C::ScoreBoosterTeam2_Count' has a wrong offset!");
static_assert(offsetof(ABP_GameState_GunFight_C, DisconnectedAttackerPlayerScores) == 0x000750, "Member 'ABP_GameState_GunFight_C::DisconnectedAttackerPlayerScores' has a wrong offset!");
static_assert(offsetof(ABP_GameState_GunFight_C, DisconnectedDefenderPlayerScores) == 0x0007A0, "Member 'ABP_GameState_GunFight_C::DisconnectedDefenderPlayerScores' has a wrong offset!");
static_assert(offsetof(ABP_GameState_GunFight_C, PlayerStateToPickType) == 0x0007F0, "Member 'ABP_GameState_GunFight_C::PlayerStateToPickType' has a wrong offset!");
static_assert(offsetof(ABP_GameState_GunFight_C, Round_To_LocalPlayerLoadoutChecked) == 0x000840, "Member 'ABP_GameState_GunFight_C::Round_To_LocalPlayerLoadoutChecked' has a wrong offset!");
static_assert(offsetof(ABP_GameState_GunFight_C, PlayersToReallyKick) == 0x000890, "Member 'ABP_GameState_GunFight_C::PlayersToReallyKick' has a wrong offset!");
static_assert(offsetof(ABP_GameState_GunFight_C, PlayersProposedToKick) == 0x0008A0, "Member 'ABP_GameState_GunFight_C::PlayersProposedToKick' has a wrong offset!");
static_assert(offsetof(ABP_GameState_GunFight_C, InitialVoteKickCooldownTime) == 0x0008B0, "Member 'ABP_GameState_GunFight_C::InitialVoteKickCooldownTime' has a wrong offset!");
static_assert(offsetof(ABP_GameState_GunFight_C, TotalTimeForPlayerVoting) == 0x0008B4, "Member 'ABP_GameState_GunFight_C::TotalTimeForPlayerVoting' has a wrong offset!");
static_assert(offsetof(ABP_GameState_GunFight_C, bCanVoteKick) == 0x0008B8, "Member 'ABP_GameState_GunFight_C::bCanVoteKick' has a wrong offset!");
static_assert(offsetof(ABP_GameState_GunFight_C, Team1_ActiveVoting) == 0x0008B9, "Member 'ABP_GameState_GunFight_C::Team1_ActiveVoting' has a wrong offset!");
static_assert(offsetof(ABP_GameState_GunFight_C, Team2_ActiveVoting) == 0x0008BA, "Member 'ABP_GameState_GunFight_C::Team2_ActiveVoting' has a wrong offset!");
static_assert(offsetof(ABP_GameState_GunFight_C, Team1_TotalElapsedTimeForNextVoteKick) == 0x0008BC, "Member 'ABP_GameState_GunFight_C::Team1_TotalElapsedTimeForNextVoteKick' has a wrong offset!");
static_assert(offsetof(ABP_GameState_GunFight_C, Team2_TotalElapsedTimeForNextVoteKick) == 0x0008C0, "Member 'ABP_GameState_GunFight_C::Team2_TotalElapsedTimeForNextVoteKick' has a wrong offset!");
static_assert(offsetof(ABP_GameState_GunFight_C, Team1_VoteKickStartTime) == 0x0008C4, "Member 'ABP_GameState_GunFight_C::Team1_VoteKickStartTime' has a wrong offset!");
static_assert(offsetof(ABP_GameState_GunFight_C, Team2_VoteKickStartTime) == 0x0008C8, "Member 'ABP_GameState_GunFight_C::Team2_VoteKickStartTime' has a wrong offset!");
static_assert(offsetof(ABP_GameState_GunFight_C, TimeToKickAfterResultReached) == 0x0008CC, "Member 'ABP_GameState_GunFight_C::TimeToKickAfterResultReached' has a wrong offset!");
static_assert(offsetof(ABP_GameState_GunFight_C, SecondInMatchHasPassed) == 0x0008D0, "Member 'ABP_GameState_GunFight_C::SecondInMatchHasPassed' has a wrong offset!");
static_assert(offsetof(ABP_GameState_GunFight_C, VoteKickRulesChanged) == 0x0008E0, "Member 'ABP_GameState_GunFight_C::VoteKickRulesChanged' has a wrong offset!");
static_assert(offsetof(ABP_GameState_GunFight_C, Team1_KickedPlayersID) == 0x0008F0, "Member 'ABP_GameState_GunFight_C::Team1_KickedPlayersID' has a wrong offset!");
static_assert(offsetof(ABP_GameState_GunFight_C, VoteKick_KickedPlayersUpdated) == 0x000900, "Member 'ABP_GameState_GunFight_C::VoteKick_KickedPlayersUpdated' has a wrong offset!");
static_assert(offsetof(ABP_GameState_GunFight_C, Team2_KickedPlayersID) == 0x000910, "Member 'ABP_GameState_GunFight_C::Team2_KickedPlayersID' has a wrong offset!");
static_assert(offsetof(ABP_GameState_GunFight_C, bShouldDisplayAFK_Check_CLIENT) == 0x000920, "Member 'ABP_GameState_GunFight_C::bShouldDisplayAFK_Check_CLIENT' has a wrong offset!");
static_assert(offsetof(ABP_GameState_GunFight_C, PreRoundStartAFK_CheckTime) == 0x000924, "Member 'ABP_GameState_GunFight_C::PreRoundStartAFK_CheckTime' has a wrong offset!");

}

