#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_GameMode_Teams

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "E_TeamsMatchPhase_structs.hpp"
#include "BP_GameMode_classes.hpp"


namespace SDK
{

// BlueprintGeneratedClass BP_GameMode_Teams.BP_GameMode_Teams_C
// 0x0098 (0x04D8 - 0x0440)
class ABP_GameMode_Teams_C : public ABP_GameMode_C
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame_BP_GameMode_Teams_C;                // 0x0440(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	bool                                          First_Ready_To_Start_Match_Done;                   // 0x0448(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          First_Ready_To_End_Match_Done;                     // 0x0449(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_44A[0x2];                                      // 0x044A(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Team_Size;                                         // 0x044C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<class FName>                           Sides;                                             // 0x0450(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance)
	int32                                         Total_Rounds;                                      // 0x0460(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_464[0x4];                                      // 0x0464(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	FMulticastInlineDelegateProperty_             Match_Phase_Changed;                               // 0x0468(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	TArray<E_TeamsMatchPhase>                     Phase_Queue;                                       // 0x0478(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	TArray<class ABP_PlayerStart_C*>              All_Player_Starts;                                 // 0x0488(0x0010)(Edit, BlueprintVisible, DisableEditOnTemplate, DisableEditOnInstance)
	int32                                         Respawns_Per_Round;                                // 0x0498(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Shared_Respawns_in_Team;                           // 0x049C(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_49D[0x3];                                      // 0x049D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UClass*                                 Team_Manager_Class;                                // 0x04A0(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Maximum_Wait_Time_to_Start_Match;                  // 0x04A8(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4AC[0x4];                                      // 0x04AC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTimerHandle                           Waiting_at_Start_Timer;                            // 0x04B0(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	bool                                          bSubLevelsLoaded;                                  // 0x04B8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_4B9[0x7];                                      // 0x04B9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class APlayerController*>              DelayedLoginPC;                                    // 0x04C0(0x0010)(Edit, BlueprintVisible, DisableEditOnTemplate, DisableEditOnInstance)
	bool                                          IsTeamKillingEnabled;                              // 0x04D0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)

public:
	void Match_Phase_Changed__DelegateSignature(E_TeamsMatchPhase Old_Phase, E_TeamsMatchPhase New_Phase);
	void ExecuteUbergraph_BP_GameMode_Teams(int32 EntryPoint);
	void SLM_Delayed_begin_play();
	void PostLogin(const class APlayerController*& NewItem);
	void SubLevelsReturned(bool SLM_Load_Complete);
	void CheckForSubLevels();
	void Waiting_at_Start_Expired();
	void Respawn_Player(class ABP_PlayerController_Teams_C* Player_Controller);
	void K2_OnRestartPlayer(class AController* NewPlayer);
	void Check_Loadout_Readiness();
	void Match_Cleanup();
	void Match_Finish();
	void Round_Cleanup();
	void Round_Finish();
	void Round_In_Progress();
	void Round_Start();
	void Round_Initialization();
	void Match_Start();
	void Match_Initialization();
	void On_Match_Phase_Changed(E_TeamsMatchPhase Old_Phase, E_TeamsMatchPhase New_Phase);
	void ReceiveTick(float DeltaSeconds);
	void ReceiveBeginPlay();
	void K2_OnSetMatchState(class FName NewState);
	void K2_PostLogin(class APlayerController* NewPlayer);
	class AActor* ChoosePlayerStart(class AController* Player);
	bool ReadyToStartMatch();
	void Get_Sides(TArray<class FName>* Sides_0);
	int32 Get_Sides_Count();
	void Store_Initial_Loadouts();
	void Request_Transition_to_Phase(E_TeamsMatchPhase New_Phase, bool* Success);
	void Request_Transition_to_Next_Phase(bool* Success);
	void Is_Match_Phase_Transition_Valid(E_TeamsMatchPhase From, E_TeamsMatchPhase To, bool* Transition_Valid);
	void Change_Phase(bool* Phase_Changed);
	bool ReadyToEndMatch();
	void Are_Loadouts_Loaded(bool* Loadouts_Loaded);
	bool PlayerCanRestart(class APlayerController* Player);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BP_GameMode_Teams_C">();
	}
	static class ABP_GameMode_Teams_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<ABP_GameMode_Teams_C>();
	}
};
static_assert(alignof(ABP_GameMode_Teams_C) == 0x000008, "Wrong alignment on ABP_GameMode_Teams_C");
static_assert(sizeof(ABP_GameMode_Teams_C) == 0x0004D8, "Wrong size on ABP_GameMode_Teams_C");
static_assert(offsetof(ABP_GameMode_Teams_C, UberGraphFrame_BP_GameMode_Teams_C) == 0x000440, "Member 'ABP_GameMode_Teams_C::UberGraphFrame_BP_GameMode_Teams_C' has a wrong offset!");
static_assert(offsetof(ABP_GameMode_Teams_C, First_Ready_To_Start_Match_Done) == 0x000448, "Member 'ABP_GameMode_Teams_C::First_Ready_To_Start_Match_Done' has a wrong offset!");
static_assert(offsetof(ABP_GameMode_Teams_C, First_Ready_To_End_Match_Done) == 0x000449, "Member 'ABP_GameMode_Teams_C::First_Ready_To_End_Match_Done' has a wrong offset!");
static_assert(offsetof(ABP_GameMode_Teams_C, Team_Size) == 0x00044C, "Member 'ABP_GameMode_Teams_C::Team_Size' has a wrong offset!");
static_assert(offsetof(ABP_GameMode_Teams_C, Sides) == 0x000450, "Member 'ABP_GameMode_Teams_C::Sides' has a wrong offset!");
static_assert(offsetof(ABP_GameMode_Teams_C, Total_Rounds) == 0x000460, "Member 'ABP_GameMode_Teams_C::Total_Rounds' has a wrong offset!");
static_assert(offsetof(ABP_GameMode_Teams_C, Match_Phase_Changed) == 0x000468, "Member 'ABP_GameMode_Teams_C::Match_Phase_Changed' has a wrong offset!");
static_assert(offsetof(ABP_GameMode_Teams_C, Phase_Queue) == 0x000478, "Member 'ABP_GameMode_Teams_C::Phase_Queue' has a wrong offset!");
static_assert(offsetof(ABP_GameMode_Teams_C, All_Player_Starts) == 0x000488, "Member 'ABP_GameMode_Teams_C::All_Player_Starts' has a wrong offset!");
static_assert(offsetof(ABP_GameMode_Teams_C, Respawns_Per_Round) == 0x000498, "Member 'ABP_GameMode_Teams_C::Respawns_Per_Round' has a wrong offset!");
static_assert(offsetof(ABP_GameMode_Teams_C, Shared_Respawns_in_Team) == 0x00049C, "Member 'ABP_GameMode_Teams_C::Shared_Respawns_in_Team' has a wrong offset!");
static_assert(offsetof(ABP_GameMode_Teams_C, Team_Manager_Class) == 0x0004A0, "Member 'ABP_GameMode_Teams_C::Team_Manager_Class' has a wrong offset!");
static_assert(offsetof(ABP_GameMode_Teams_C, Maximum_Wait_Time_to_Start_Match) == 0x0004A8, "Member 'ABP_GameMode_Teams_C::Maximum_Wait_Time_to_Start_Match' has a wrong offset!");
static_assert(offsetof(ABP_GameMode_Teams_C, Waiting_at_Start_Timer) == 0x0004B0, "Member 'ABP_GameMode_Teams_C::Waiting_at_Start_Timer' has a wrong offset!");
static_assert(offsetof(ABP_GameMode_Teams_C, bSubLevelsLoaded) == 0x0004B8, "Member 'ABP_GameMode_Teams_C::bSubLevelsLoaded' has a wrong offset!");
static_assert(offsetof(ABP_GameMode_Teams_C, DelayedLoginPC) == 0x0004C0, "Member 'ABP_GameMode_Teams_C::DelayedLoginPC' has a wrong offset!");
static_assert(offsetof(ABP_GameMode_Teams_C, IsTeamKillingEnabled) == 0x0004D0, "Member 'ABP_GameMode_Teams_C::IsTeamKillingEnabled' has a wrong offset!");

}

