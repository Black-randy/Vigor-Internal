#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_GameMode

#include "Basic.hpp"

#include "Flame_classes.hpp"
#include "Engine_structs.hpp"


namespace SDK
{

// BlueprintGeneratedClass BP_GameMode.BP_GameMode_C
// 0x0050 (0x0440 - 0x03F0)
class ABP_GameMode_C : public AGameModeFlame
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x03F0(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class USceneComponent*                        DefaultSceneRoot;                                  // 0x03F8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class FText                                   GameModeName;                                      // 0x0400(0x0018)(Edit, BlueprintVisible)
	class FText                                   GameModeDescription;                               // 0x0418(0x0018)(Edit, BlueprintVisible, DisableEditOnInstance)
	class UClass*                                 DebugWidgetClass;                                  // 0x0430(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ABP_GeneralLootManager_C*               MainLootManager;                                   // 0x0438(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

public:
	void ExecuteUbergraph_BP_GameMode(int32 EntryPoint);
	void CancelMatch(class UBP_MatchInfoComponent_C* MatchInfoComponent);
	void PlayerSendToShelter(class AHumanPlayerController* Player);
	void ReceiveBeginPlay();
	void Debug_Multicast_SetClientAnalyticsTime(int32 PeriodTime);
	void Get_Game_Mode_Description(class FText* Game_Mode_Description);
	void Set_Game_Mode_Description(const class FText& New_Game_Mode_Description, bool* Duplicated_to_Game_State);
	void Reset_Onboarding_Save_Object(class UBP_Shelter_SaveGame_C** Save_Game);
	void GetShelterSaveFile(bool* Valid, class UBP_PersistentShelter_SaveGame_C** SaveFile);

	void Get_Default_Game_Mode_Description(class FText* Game_Mode_Description) const;

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BP_GameMode_C">();
	}
	static class ABP_GameMode_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<ABP_GameMode_C>();
	}
};
static_assert(alignof(ABP_GameMode_C) == 0x000008, "Wrong alignment on ABP_GameMode_C");
static_assert(sizeof(ABP_GameMode_C) == 0x000440, "Wrong size on ABP_GameMode_C");
static_assert(offsetof(ABP_GameMode_C, UberGraphFrame) == 0x0003F0, "Member 'ABP_GameMode_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(ABP_GameMode_C, DefaultSceneRoot) == 0x0003F8, "Member 'ABP_GameMode_C::DefaultSceneRoot' has a wrong offset!");
static_assert(offsetof(ABP_GameMode_C, GameModeName) == 0x000400, "Member 'ABP_GameMode_C::GameModeName' has a wrong offset!");
static_assert(offsetof(ABP_GameMode_C, GameModeDescription) == 0x000418, "Member 'ABP_GameMode_C::GameModeDescription' has a wrong offset!");
static_assert(offsetof(ABP_GameMode_C, DebugWidgetClass) == 0x000430, "Member 'ABP_GameMode_C::DebugWidgetClass' has a wrong offset!");
static_assert(offsetof(ABP_GameMode_C, MainLootManager) == 0x000438, "Member 'ABP_GameMode_C::MainLootManager' has a wrong offset!");

}

