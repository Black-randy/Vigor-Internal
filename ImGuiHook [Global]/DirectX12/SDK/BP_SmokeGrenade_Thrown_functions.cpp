#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_SmokeGrenade_Thrown

#include "Basic.hpp"

#include "BP_SmokeGrenade_Thrown_classes.hpp"
#include "BP_SmokeGrenade_Thrown_parameters.hpp"


namespace SDK
{

// Function BP_SmokeGrenade_Thrown.BP_SmokeGrenade_Thrown_C.ExecuteUbergraph_BP_SmokeGrenade_Thrown
// (Final, UbergraphFunction, HasDefaults)
// Parameters:
// int32                                   EntryPoint                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_SmokeGrenade_Thrown_C::ExecuteUbergraph_BP_SmokeGrenade_Thrown(int32 EntryPoint)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_SmokeGrenade_Thrown_C", "ExecuteUbergraph_BP_SmokeGrenade_Thrown");

	Params::BP_SmokeGrenade_Thrown_C_ExecuteUbergraph_BP_SmokeGrenade_Thrown Parms{};

	Parms.EntryPoint = EntryPoint;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_SmokeGrenade_Thrown.BP_SmokeGrenade_Thrown_C.OnGrenadeExplode
// (Event, Public, HasOutParams, BlueprintEvent)
// Parameters:
// TArray<struct FExplosionEffect>         ExplosionEffects                                       (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)

void ABP_SmokeGrenade_Thrown_C::OnGrenadeExplode(const TArray<struct FExplosionEffect>& ExplosionEffects)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_SmokeGrenade_Thrown_C", "OnGrenadeExplode");

	Params::BP_SmokeGrenade_Thrown_C_OnGrenadeExplode Parms{};

	Parms.ExplosionEffects = std::move(ExplosionEffects);

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_SmokeGrenade_Thrown.BP_SmokeGrenade_Thrown_C.OnComponentBeginOverlap_Event_0
// (HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// class UPrimitiveComponent*              OverlappedComponent                                    (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class AActor*                           OtherActor                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class UPrimitiveComponent*              OtherComp                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   OtherBodyIndex                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    bFromSweep                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// struct FHitResult                       SweepResult                                            (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, ContainsInstancedReference)

void ABP_SmokeGrenade_Thrown_C::OnComponentBeginOverlap_Event_0(class UPrimitiveComponent* OverlappedComponent, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, int32 OtherBodyIndex, bool bFromSweep, const struct FHitResult& SweepResult)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_SmokeGrenade_Thrown_C", "OnComponentBeginOverlap_Event_0");

	Params::BP_SmokeGrenade_Thrown_C_OnComponentBeginOverlap_Event_0 Parms{};

	Parms.OverlappedComponent = OverlappedComponent;
	Parms.OtherActor = OtherActor;
	Parms.OtherComp = OtherComp;
	Parms.OtherBodyIndex = OtherBodyIndex;
	Parms.bFromSweep = bFromSweep;
	Parms.SweepResult = std::move(SweepResult);

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_SmokeGrenade_Thrown.BP_SmokeGrenade_Thrown_C.ReceiveDestroyed
// (Event, Public, BlueprintEvent)

void ABP_SmokeGrenade_Thrown_C::ReceiveDestroyed()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_SmokeGrenade_Thrown_C", "ReceiveDestroyed");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_SmokeGrenade_Thrown.BP_SmokeGrenade_Thrown_C.DestroyAfterRoundFinish
// (BlueprintCallable, BlueprintEvent)

void ABP_SmokeGrenade_Thrown_C::DestroyAfterRoundFinish()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_SmokeGrenade_Thrown_C", "DestroyAfterRoundFinish");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_SmokeGrenade_Thrown.BP_SmokeGrenade_Thrown_C.ReceiveBeginPlay
// (Event, Protected, BlueprintEvent)

void ABP_SmokeGrenade_Thrown_C::ReceiveBeginPlay()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_SmokeGrenade_Thrown_C", "ReceiveBeginPlay");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_SmokeGrenade_Thrown.BP_SmokeGrenade_Thrown_C.SpawnLeverParticle
// (BlueprintCallable, BlueprintEvent)

void ABP_SmokeGrenade_Thrown_C::SpawnLeverParticle()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_SmokeGrenade_Thrown_C", "SpawnLeverParticle");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_SmokeGrenade_Thrown.BP_SmokeGrenade_Thrown_C.OnThrow
// (Event, Public, BlueprintEvent)

void ABP_SmokeGrenade_Thrown_C::OnThrow()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_SmokeGrenade_Thrown_C", "OnThrow");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_SmokeGrenade_Thrown.BP_SmokeGrenade_Thrown_C.OnImpact
// (Event, Public, HasOutParams, BlueprintEvent)
// Parameters:
// struct FVector                          HitLocation                                            (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FVector                          NormalImpulse                                          (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_SmokeGrenade_Thrown_C::OnImpact(const struct FVector& HitLocation, const struct FVector& NormalImpulse)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_SmokeGrenade_Thrown_C", "OnImpact");

	Params::BP_SmokeGrenade_Thrown_C_OnImpact Parms{};

	Parms.HitLocation = std::move(HitLocation);
	Parms.NormalImpulse = std::move(NormalImpulse);

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_SmokeGrenade_Thrown.BP_SmokeGrenade_Thrown_C.Select correct particle effect
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// class UParticleSystem*                  Selected_particle_effect                               (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_SmokeGrenade_Thrown_C::Select_correct_particle_effect(class UParticleSystem** Selected_particle_effect)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_SmokeGrenade_Thrown_C", "Select correct particle effect");

	Params::BP_SmokeGrenade_Thrown_C_Select_correct_particle_effect Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Selected_particle_effect != nullptr)
		*Selected_particle_effect = Parms.Selected_particle_effect;
}


// Function BP_SmokeGrenade_Thrown.BP_SmokeGrenade_Thrown_C.Check for non friendly character
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// class AHumanCharacter*                  Hit_Character                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class AHumanCharacter*                  Character_that_threw_grenade                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    Non_friendly_character                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ABP_SmokeGrenade_Thrown_C::Check_for_non_friendly_character(class AHumanCharacter* Hit_Character, class AHumanCharacter* Character_that_threw_grenade, bool* Non_friendly_character)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_SmokeGrenade_Thrown_C", "Check for non friendly character");

	Params::BP_SmokeGrenade_Thrown_C_Check_for_non_friendly_character Parms{};

	Parms.Hit_Character = Hit_Character;
	Parms.Character_that_threw_grenade = Character_that_threw_grenade;

	UObject::ProcessEvent(Func, &Parms);

	if (Non_friendly_character != nullptr)
		*Non_friendly_character = Parms.Non_friendly_character;
}


// Function BP_SmokeGrenade_Thrown.BP_SmokeGrenade_Thrown_C.Check for multiple non-friendly hits
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// TArray<class AActor*>                   Hit_Characters                                         (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
// class ABP_Character_Script_C*           Character_that_threw_grenade                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   NonMinusfriendly_characters                            (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_SmokeGrenade_Thrown_C::Check_for_multiple_nonMinusfriendly_hits(TArray<class AActor*>& Hit_Characters, class ABP_Character_Script_C* Character_that_threw_grenade, int32* NonMinusfriendly_characters)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_SmokeGrenade_Thrown_C", "Check for multiple non-friendly hits");

	Params::BP_SmokeGrenade_Thrown_C_Check_for_multiple_nonMinusfriendly_hits Parms{};

	Parms.Hit_Characters = std::move(Hit_Characters);
	Parms.Character_that_threw_grenade = Character_that_threw_grenade;

	UObject::ProcessEvent(Func, &Parms);

	Hit_Characters = std::move(Parms.Hit_Characters);

	if (NonMinusfriendly_characters != nullptr)
		*NonMinusfriendly_characters = Parms.NonMinusfriendly_characters;
}

}

