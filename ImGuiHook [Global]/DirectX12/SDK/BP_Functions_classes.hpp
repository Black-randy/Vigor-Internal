#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_Functions

#include "Basic.hpp"

#include "Flame_structs.hpp"
#include "Engine_classes.hpp"
#include "LoadingScreen_structs.hpp"
#include "FlameUI_structs.hpp"
#include "EBooster_structs.hpp"
#include "E_WeaponCheckResult_structs.hpp"


namespace SDK
{

// BlueprintGeneratedClass BP_Functions.BP_Functions_C
// 0x0000 (0x0028 - 0x0028)
class UBP_Functions_C final : public UBlueprintFunctionLibrary
{
public:
	static void FormatTimeFloatMMSS(float Time, class UObject* __WorldContext, class FText* TimeText);
	static void TimeTickToZero(float Time, const struct FTimerHandle& TimerHandler, class UObject* __WorldContext, float* NewTime);
	static void RandomLocationFromInterval(const struct FVector& MinLocation, const struct FVector& MaxLocation, class UObject* __WorldContext, struct FVector* RandomLocation);
	static class FText FormatTimeFloatMMSSmm(float Time, class UObject* __WorldContext);
	static class FText GetAmmo(class AWeapon* Weapon, class UObject* __WorldContext);
	static void SetPlayerVisibility(bool NoSee, class AHumanCharacter* HumanCharacter, class UObject* __WorldContext);
	static void IsChildOf(class UWidget* Child, class UWidget* Parent, int32 MaxIterations, class UObject* __WorldContext, bool* IsChildOf_0);
	static void FindGridCoordinatesVector(const struct FVector& ZeroPilar, const struct FVector& MaxPilar, int32 X_precision, int32 Y_Precision, const struct FVector& ObjectWorldLocation, int32 X_offset, int32 Y_offset, class UObject* __WorldContext, class FString* Coordinates, class FString* X, class FString* Y);
	static void GetRationForGridCoordinatesVector(const struct FVector& Min, const struct FVector& Max, int32 X_precision, int32 Y_Precision, class UObject* __WorldContext, float* XZero, float* YZero, float* XRatio, float* YRation);
	static void Get_Item_Names_from_Item_Array(TArray<class UClass*>& Items_List, class UObject* __WorldContext, TArray<class FText>* Names_List);
	static void Get_Normalized_Map_Coordinates(class AActor* Actor, class UObject* __WorldContext, struct FVector2D* Normalized_Coordinates);
	static void MaxBoundsToDrawDistance(class AActor* Actor, float DrawDistanceMultiplier, bool Toggle_Debug, class UObject* __WorldContext);
	static void Find_Most_2DMinusDistant_Object_from_Object(class AActor* Origin, TArray<class AActor*>& Candidates, class UObject* __WorldContext, class AActor** Most_Distant_Object, float* Distance);
	static void Convert_from_World_to_Game(const struct FRotator& Rotator_in_World_Space, class UObject* __WorldContext, struct FRotator* Rotator_in_Game_Space);
	static void Convert_from_Game_to_World(const struct FRotator& Rotator_in_Game_Space, class UObject* __WorldContext, struct FRotator* Rotator_in_World_Space);
	static void Find_Most_2DMinusDistant_Object_from_Location(const struct FVector& Location, TArray<class AActor*>& Candidates, class UObject* __WorldContext, class AActor** Most_Distant_Object, float* Distance);
	static void Find_Most_2DMinusDistant_Location_from_Location(const struct FVector& Location, TArray<struct FVector>& Candidates, class UObject* __WorldContext, struct FVector* Most_Distant_Location, float* Distance);
	static void Handle_Valid_and_Timer_Exists(const struct FTimerHandle& Handle, class UObject* __WorldContext, bool* Return_Value);
	static void Get_Center_of_Map(class UObject* __WorldContext, struct FVector2D* Location, bool* Output_Valid);
	static void Find_Least_2DMinusDistant_Object_from_Object(class AActor* Origin, TArray<class AActor*>& Candidates, class UObject* __WorldContext, class AActor** Least_Distant_Object, float* Distance);
	static float Get_Game_Azimuth(const struct FVector& Start, const struct FVector& Target, class UObject* __WorldContext);
	static void Get_All_Weapons_Count(class UEquipmentStorageComponent* Equipment_Storage, class UObject* __WorldContext, int32* Number_of_Weapons);
	static void Get_Primary_Weapons_Count(class UEquipmentStorageComponent* Equipment_Storage, class UObject* __WorldContext, int32* Number_of_Primary_Weapons);
	static void Get_Secondary_Weapons_Count(class UEquipmentStorageComponent* Equipment_Storage, class UObject* __WorldContext, int32* Number_of_Secondary_Weapons);
	static void Get_Firearms_Count(class UEquipmentStorageComponent* Equipment_Storage, class UObject* __WorldContext, int32* Number_of_Firearms);
	static void Get_Melee_Weapons_Count(class UEquipmentStorageComponent* Equipment_Storage, class UObject* __WorldContext, int32* Number_of_Melee_Weapons);
	static void Get_Throwable_Weapons_Count(class UEquipmentStorageComponent* Equipment_Storage, class UObject* __WorldContext, int32* Number_of_Throwable_Weapons);
	static void Get_All_Ammo_Count(class UEquipmentStorageComponent* Equipment_Storage, class UObject* __WorldContext, int32* Amount_of_Ammunition);
	static void Get_Item_Count(class UEquipmentStorageComponent* Equipment_Storage, class UClass* Item_Type, class UObject* __WorldContext, int32* Sum_of_Items_Found, TArray<class UClass*>* Types_of_Items_Found);
	static void Convert_Damage_Type_to_Cause_of_Death(EDamageType Damage_Type, class UObject* __WorldContext, ECloudDeathCauseType* Cause_of_Death);
	static void Get_Full_Customization_Name(const struct FCustomizationPair& Customization_pair, class UObject* __WorldContext, class FString* Name_0);
	static void Get_Full_Customization_Class_Name(const struct FCustomizationPair& Customization_pair, class UObject* __WorldContext, class FString* Name_0);
	static void Convert_Cause_of_Death_to_Damage_Type(ECloudDeathCauseType Cause_of_Death, class UObject* __WorldContext, EDamageType* Damage_Type);
	static void Get_Actor_Locations(TArray<class AActor*>& Actors, bool Skip_Invalid, class UObject* __WorldContext, TArray<struct FVector>* Locations);
	static void PlayerUserMessage(const class FText& Message, class AController* Controller, bool IncludeDeadChars, TSoftObjectPtr<class USoundBase> Optional2D_Sound, class UObject* __WorldContext);
	static void PlayerCharacterUserMessage(const class FText& Message, class ACharacter* Character, class UObject* __WorldContext);
	static void PrintAllTimes(class AHumanPlayerController* PlayerController, const struct FLinearColor& TextColor, float Duration, class UObject* __WorldContext);
	static void PrintDebugMessage(const class FString& InString, const struct FLinearColor& TextColor, class FName Category, float Duration, class UObject* __WorldContext);
	static void RotationBetweenVectors(const struct FVector& A, const struct FVector& B, class UObject* __WorldContext, struct FRotator* Rotator, struct FVector* Axis, float* Angle);
	static void GetBoosterCount(const TArray<struct FCloudUserLobbyInfo>& PlayersBoosters, const class FString& BoosterSKU, class UObject* __WorldContext, int32* Count);
	static void Get_First_Occupied_Weapon_Slot(class UInventoryComponent* Inventory, class UObject* __WorldContext, EWeaponSlotType* Slot);
	static class FText Join_Text_Array(const TArray<class FText>& SourceArray, const class FText& Separator, class UObject* __WorldContext);
	static void Increase_Achievement_Progress(class FName Achievement_Name, float Increase_Progress_By, class UObject* __WorldContext, int32* Result_Code);
	static void Has_Achievement_Already_Been_Achieved(class FName Achievement_Name, class UObject* __WorldContext, bool* Already_Achieved);
	static void FormatTimespanDHMS(const struct FTimespan& TimespanIn, class UObject* __WorldContext, class FText* TimespanDHMSOut);
	static struct FVector2D Lerp__vector2D_(const struct FVector2D& A, const struct FVector2D& B, float Alpha, class UObject* __WorldContext);
	static void ToString__DateTime_(const struct FDateTime& DateTime, class UObject* __WorldContext, class FString* String);
	static void ToString__Timespan_(const struct FTimespan& DateTime, class UObject* __WorldContext, class FString* String);
	static void IsPlanUnlocked(class UClass* PlanClassIn, class APlayerController* PlayerControllerIn, class UObject* __WorldContext, bool* OutputValid, bool* PlanUnlocked);
	static void ChooseOpticBlur(EOpticsType OpticType, class UCameraComponent* AimPoint, class UObject* __WorldContext);
	static void ApplyWeaponSkin(class UClass* WeaponSkin, class UMeshComponent* Mesh, class AWeapon* Weaspon, class UObject* __WorldContext);
	static void ClearWeaponSkinVisual(class UMeshComponent* Mesh, class AWeapon* Weapon, class FName ExtraMaterialSkinElementName, class UObject* __WorldContext);
	static bool Cloud_Request_Result_Equal_To(const struct FCloudRequestResult& A, ECloudRequestResult B, class UObject* __WorldContext);
	static void Are_Characters_in_Group(class AHumanCharacter* Character_A, class AHumanCharacter* Character_B, class UObject* __WorldContext, bool* Are_in_Group, bool* Output_Valid);
	static void FormatTimespanDHMS_ZeroClamped_(const struct FTimespan& TimespanIn, class UObject* __WorldContext, class FText* TimespanDHMSOut);
	static void Count__String_(TArray<class FString>& Array, const class FString& Item, class UObject* __WorldContext, int32* Count);
	static void ToString__CloudRequestResult_(const struct FCloudRequestResult& Cloud_Request_Result, bool Inline, class UObject* __WorldContext, class FString* String);
	static void SkinSetDefaultMaterial(class AWeapon* Weapon, class FName ExtraSlot, class UObject* __WorldContext);
	static void PlayerAcquiredCrowns(int32 Crown_Amount, int32 Crown_Bonus_Amount, class UObject* __WorldContext);
	static void ItemClassToTable(class UClass* ItemClass, class UObject* __WorldContext, class UDataTable** RelatedDataTable);
	static void HasOwnedLabelInShop(class UClass* StoreItemClass, class AHumanPlayerController* HumanPlayerController, class UObject* __WorldContext, bool* OwnedOut);
	static void GetExclusiveOffers(class UObject* __WorldContext, TArray<struct FGameStoreOfferInfo>* ExclusiveOffers);
	static void Get_Weapon_Ammo_and_Magazine_Size(class UClass* Weapon_Class, class UObject* __WorldContext, class UClass** Ammo_Item, int32* Magazine_Size);
	static void GetUserPawn(class UObject* __WorldContext, class APawn** Pawn);
	static class AHumanPlayerController* GetFlameController(class UObject* __WorldContext);
	static void GetBitwiseMask(int32 Length, class UObject* __WorldContext, int32* Mask);
	static void Pack_Integers(TArray<int32>& Ints, TArray<int32>& BitLengths, class UObject* __WorldContext, int32* Int);
	static void Unpack_Integers(int32 Int, TArray<int32>& BitLengths, class UObject* __WorldContext, TArray<int32>* Ints);
	static class FString Join_Integer_Array(const TArray<int32>& SourceArray, const class FString& Separator, class UObject* __WorldContext);
	static void GetAchievementProgress(class FName AchievementName, class UObject* __WorldContext, bool* IsProgressValid, float* Progress);
	static void ConvertTransformToPasteFriendlyFormat(const struct FTransform& Transform, class UObject* __WorldContext, class FString* PasteFriendlyString);
	static void ConvertRotatorToPasteFriendlyFormat(const struct FRotator& Rotator, class UObject* __WorldContext, class FString* PasteFriendlyString);
	static void CopyToClipboardPlayerCustomizationContainer(class UObject* __WorldContext);
	static void SetFadeInMaterialVisibility(class FName MeshActor_TAG, bool Visibility, class UObject* __WorldContext);
	static void Set_Material_VisibilityActors_with_Tag(bool bNewVisibility, const struct FS_ActorTagVisibilityMapWrap& Tag_to_count, class UObject* __WorldContext);
	static void SetHiddenActorByTag(const TMap<class FString, int32>& Tag_to_Max_Count, class UObject* __WorldContext);
	static void Get_Booster_Ticket_State(const TArray<struct FBoosterDetails>& BoosterDetails, const class FString& BoosterSKU, class UObject* __WorldContext, bool* Found, struct FBoosterDetails* BoosterDetail);
	static void Get_Booster_Sku_Class_Info(class UObject* __WorldContext, TMap<class FString, class UClass*>* SKU_To_Currency, TMap<class UClass*, class FString>* Currency_To_SKU, TMap<class UClass*, class FString>* Currency_To_Gamemode);
	static class FString GetBoosterSkuFromEnum(EBooster Booster, bool ChopTeamScoreSku, class UObject* __WorldContext);
	static EBooster Get_Booster_Enum_From_Sku(const class FString& BoosterSKU, class UObject* __WorldContext, bool* Found);
	static void Decimal_to_Short_Format(float Value, bool DisplayAsInteger, class UObject* __WorldContext, class FText* FormattedValue);
	static void CheckForNoWeapon(class APawn*& Owning_Player_Pawn, EOnlineGameMode Online_Game_Mode, class UObject* __WorldContext, E_WeaponCheckResult* Check_result);
	static void HasEachWeaponAmmo(class UInventoryComponent* Inventory, class UObject* __WorldContext, bool* AllWeaponsWithoutAmmo, int32* NumberOfWeaponsWithoutAmmo);
	static void ShowNoWeaponMsgBox(E_WeaponCheckResult& Weapon_check_result, class APlayerController* Owning_Player, class UUI_ShelterMap_C* UIShelterMap__Optional_, class UObject* __WorldContext);
	static void JoinMPSession(class APlayerController* Owning_Player, const class FString& LevelName, const class FString& GamemodeAlias, int32 Matchmaking_Slot, bool Quick_Play, class UObject* __WorldContext);
	static void GetInputIcons(TArray<EInputIcon>& InputIcons, class UObject* __WorldContext, TArray<EInputIcon>* Icons);
	static void GetInputIcon(EInputIcon InputIconConsole, EInputIcon InputIconPCWithGamepad, class FName InputIconPC, class UObject* __WorldContext, EInputIcon* InputIcon);
	static void GetInputIconText(EInputIcon InputIconConsole, class FName InputIconPC, class UObject* __WorldContext, class FString* InputIconString);
	static void SoundClassToString(class USoundClass* SoundClass, class UObject* __WorldContext, class FString* SoundClassString);
	static void GetWindowsInputIcon(EInputIcon InputIcon, class UObject* __WorldContext, EInputIcon* Icon, bool* IsWide);
	static void ShouldOverrideActionName(EInputIcon InputIcon, class UObject* __WorldContext, bool* ShouldOverride, class FName* New_Action_Name);
	static void ShouldOverrideActionNameString(const class FText& InputIcon, class UObject* __WorldContext, bool* ShouldOverride, class FName* NewName);
	static void GetInputIconsText(TArray<class FText>& InInputIconsText, class UObject* __WorldContext, TArray<class FText>* InputIconsText);
	static void SetAllNicknameStylesInRichText(class URichTextBlock* In_Rich_Text_Block, const struct FTextBlockStyle& Nickname_Style, class UObject* __WorldContext);
	static void SetAllNicknameWidgetsInRichText(class URichTextBlock* In_Rich_Text_Block, class AHumanPlayerState* Player_State, class UObject* __WorldContext);
	static void SetAllNicknameBottomPaddingInRichText(class URichTextBlock* In_Rich_Text_Block, float Bottom_padding, class UObject* __WorldContext);
	static void Increase_Achievement_Progress_by_Value(class FName Achievement_Name, int32 Value, int32 Target_Value, class UObject* __WorldContext);
	static void SetAllNicknameMaxCharactersInRichText(class URichTextBlock* In_Rich_Text_Block, int32 Max_Characters, class UObject* __WorldContext);
	static void ShowProfile(const struct FUniqueNetIdRepl& ProfileToShowId, class UObject* __WorldContext);
	static void GetBlockedPlayersText(bool UseParentheses, class ABP_PlayerController_Script_C* BP_Player_Controlle_Script, class UObject* __WorldContext, class FText* PlayersBlocked);
	static void StringToEFlamePlatform(const class FString& PlatformString, class UObject* __WorldContext, EFlamePlatform* NewParam);
	static void SetFrameRate(const struct FVideoSaveSettings& VideoSettings, float OverrideFrameRate, bool ShouldApply_, class UObject* __WorldContext);
	static void Is_Input_Action_Gamepad(const class FString& Input, class UObject* __WorldContext, bool* IsGamepad);
	static bool IsMatchmakingAllowedForGameMode(EOnlineGameMode GameMode, class UObject* __WorldContext);

	static void UnwindDegrees(float Input, class UObject* __WorldContext, float* Return);
	static void PlayersUserMessage(const class FText& Message, TArray<class APlayerController*>& Players, bool DisplayToAll, TSoftObjectPtr<class USoundBase> Optional2D_Sound, class UObject* __WorldContext);
	static void Is_Equipment_Storage_Empty(class UEquipmentStorageComponent* Equipment_Storage, class UObject* __WorldContext, bool* Is_Empty);
	static void Get_One_Frame_Skip_Time(class UObject* __WorldContext, float* SkipTime);
	static void FindValidOffer(const struct FDateTime& ShopOriginTime, const struct FGameStoreSlotInfo& GameStoreSlotInfo, const struct FDateTime& Now, class UObject* __WorldContext, bool* ValidOfferFound, struct FGameStoreOfferInfo* ValidOffer, struct FDateTime* ValidUntil, int32* RemainingSeconds, int32* OfferIndex);
	static void Nearly_Equal__Vector_ElementMinuswise_(const struct FVector& A, const struct FVector& B, float ErrorTolerance, class UObject* __WorldContext, bool* EqualX, bool* EqualY, bool* EqualZ);
	static void IsTemporarySellingPointActive(const struct FDateTime& CurrentTime, const struct FS_TemporarySellingPointTimeInfo& ValidTimes, class UObject* __WorldContext, bool* bIsActive, bool* bIsTemporary);
	static bool Is_on_A_Console(class UObject* __WorldContext);

	void Find_Ancestor_Of_User_Widget_Class(TSoftObjectPtr<class UUserWidget> ChildWidget, TSoftClassPtr<class UClass> Desired_Ancestor_Class, class UObject* __WorldContext, bool* Success_, class UWidget** Ancestor_Widget);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BP_Functions_C">();
	}
	static class UBP_Functions_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UBP_Functions_C>();
	}
};
static_assert(alignof(UBP_Functions_C) == 0x000008, "Wrong alignment on UBP_Functions_C");
static_assert(sizeof(UBP_Functions_C) == 0x000028, "Wrong size on UBP_Functions_C");

}

