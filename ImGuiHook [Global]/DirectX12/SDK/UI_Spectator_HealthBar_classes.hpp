#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: UI_Spectator_HealthBar

#include "Basic.hpp"

#include "Flame_classes.hpp"
#include "Engine_structs.hpp"


namespace SDK
{

// WidgetBlueprintGeneratedClass UI_Spectator_HealthBar.UI_Spectator_HealthBar_C
// 0x0050 (0x0308 - 0x02B8)
class UUI_Spectator_HealthBar_C final : public UFlameWidget
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x02B8(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class UImage*                                 HealthBackground;                                  // 0x02C0(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UProgressBar*                           HealthBar;                                         // 0x02C8(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	float                                         OldDownedHealth;                                   // 0x02D0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          ShowPermanently;                                   // 0x02D4(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_2D5[0x3];                                      // 0x02D5(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         ExpectedHealingAmount;                             // 0x02D8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2DC[0x4];                                      // 0x02DC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UMaterialInstanceDynamic*               HealthBarDynMat;                                   // 0x02E0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UMaterialInstanceDynamic*               DownedHealthBarDynMat;                             // 0x02E8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         TempHealthAmount;                                  // 0x02F0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2F4[0x4];                                      // 0x02F4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UAudioComponent*                        Sound_Effect;                                      // 0x02F8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Sound_Effect_Is_Active;                            // 0x0300(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)

public:
	void ExecuteUbergraph_UI_Spectator_HealthBar(int32 EntryPoint);
	void OnGameSettingsChanged(const struct FGameSaveSettings& GameSettings);
	void Tick(const struct FGeometry& MyGeometry, float InDeltaTime);
	void Construct();
	void UpdateHealthBar(float DeltaTime);
	void ComputeHealthBarParameters(float HealthIn, float DownedHealthIn, float ExpectedHealingIn, float MaxHealth, float TempHealthIn, float* HealthOut, float* ExpectedHealingOut, float* TempHealthOut);
	void UpdateShowPermanentlyBasedOnSavegame(const struct FGameSaveSettings& GameSettings);
	void AddTempHealthAmount(float A);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"UI_Spectator_HealthBar_C">();
	}
	static class UUI_Spectator_HealthBar_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UUI_Spectator_HealthBar_C>();
	}
};
static_assert(alignof(UUI_Spectator_HealthBar_C) == 0x000008, "Wrong alignment on UUI_Spectator_HealthBar_C");
static_assert(sizeof(UUI_Spectator_HealthBar_C) == 0x000308, "Wrong size on UUI_Spectator_HealthBar_C");
static_assert(offsetof(UUI_Spectator_HealthBar_C, UberGraphFrame) == 0x0002B8, "Member 'UUI_Spectator_HealthBar_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(UUI_Spectator_HealthBar_C, HealthBackground) == 0x0002C0, "Member 'UUI_Spectator_HealthBar_C::HealthBackground' has a wrong offset!");
static_assert(offsetof(UUI_Spectator_HealthBar_C, HealthBar) == 0x0002C8, "Member 'UUI_Spectator_HealthBar_C::HealthBar' has a wrong offset!");
static_assert(offsetof(UUI_Spectator_HealthBar_C, OldDownedHealth) == 0x0002D0, "Member 'UUI_Spectator_HealthBar_C::OldDownedHealth' has a wrong offset!");
static_assert(offsetof(UUI_Spectator_HealthBar_C, ShowPermanently) == 0x0002D4, "Member 'UUI_Spectator_HealthBar_C::ShowPermanently' has a wrong offset!");
static_assert(offsetof(UUI_Spectator_HealthBar_C, ExpectedHealingAmount) == 0x0002D8, "Member 'UUI_Spectator_HealthBar_C::ExpectedHealingAmount' has a wrong offset!");
static_assert(offsetof(UUI_Spectator_HealthBar_C, HealthBarDynMat) == 0x0002E0, "Member 'UUI_Spectator_HealthBar_C::HealthBarDynMat' has a wrong offset!");
static_assert(offsetof(UUI_Spectator_HealthBar_C, DownedHealthBarDynMat) == 0x0002E8, "Member 'UUI_Spectator_HealthBar_C::DownedHealthBarDynMat' has a wrong offset!");
static_assert(offsetof(UUI_Spectator_HealthBar_C, TempHealthAmount) == 0x0002F0, "Member 'UUI_Spectator_HealthBar_C::TempHealthAmount' has a wrong offset!");
static_assert(offsetof(UUI_Spectator_HealthBar_C, Sound_Effect) == 0x0002F8, "Member 'UUI_Spectator_HealthBar_C::Sound_Effect' has a wrong offset!");
static_assert(offsetof(UUI_Spectator_HealthBar_C, Sound_Effect_Is_Active) == 0x000300, "Member 'UUI_Spectator_HealthBar_C::Sound_Effect_Is_Active' has a wrong offset!");

}

