#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_GameState

#include "Basic.hpp"

#include "Flame_structs.hpp"
#include "Flame_classes.hpp"


namespace SDK
{

// BlueprintGeneratedClass BP_GameState.BP_GameState_C
// 0x0078 (0x0398 - 0x0320)
class ABP_GameState_C : public AGameStateFlame
{
public:
	class USceneComponent*                        DefaultSceneRoot;                                  // 0x0320(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class ABP_CompasLevelSetting_C*               CompassLevelSetting;                               // 0x0328(0x0008)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<class ABP_MapCorner_C*>                MapCorners;                                        // 0x0330(0x0010)(Edit, BlueprintVisible, Net, DisableEditOnTemplate, DisableEditOnInstance)
	class FText                                   Game_Mode_Description;                             // 0x0340(0x0018)(Edit, BlueprintVisible, Net, DisableEditOnInstance)
	TArray<class ABP_RadiationWave_C*>            RadiationWaves;                                    // 0x0358(0x0010)(Edit, BlueprintVisible, DisableEditOnTemplate, DisableEditOnInstance)
	class ABP_MapTexture_C*                       MapTexture;                                        // 0x0368(0x0008)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FCloudMatchSettingsInfo                Cloud_Match_Info;                                  // 0x0370(0x0028)(Edit, BlueprintVisible, Net, DisableEditOnInstance)

public:
	void Get_Game_Mode_Description(class FText* Game_Mode_Description_0);
	void Set_Game_Mode_Description(const class FText& New_Game_Mode_Description);
	void GetMapTexture(class UTexture2D** TwoD_MapTexture);
	void GetGameModeStringName(class FString* StringName);
	void GetMapOverlayTexture(class UTexture2D** TwoD_MapTexture);
	void GetCustomZoomLimits(struct FLinearColor* LowerLimit, struct FLinearColor* UpperLimit, struct FLinearColor* StartPosition);
	void BPI_GetCompassRotator(bool* bValid, struct FRotator* CompasRotator);
	void BPI_GetMapCorners(bool* bValid, TArray<class AActor*>* MapCorners_0);

	struct FCloudMatchSettingsInfo GetCloudMatchSettingsInfo() const;

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BP_GameState_C">();
	}
	static class ABP_GameState_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<ABP_GameState_C>();
	}
};
static_assert(alignof(ABP_GameState_C) == 0x000008, "Wrong alignment on ABP_GameState_C");
static_assert(sizeof(ABP_GameState_C) == 0x000398, "Wrong size on ABP_GameState_C");
static_assert(offsetof(ABP_GameState_C, DefaultSceneRoot) == 0x000320, "Member 'ABP_GameState_C::DefaultSceneRoot' has a wrong offset!");
static_assert(offsetof(ABP_GameState_C, CompassLevelSetting) == 0x000328, "Member 'ABP_GameState_C::CompassLevelSetting' has a wrong offset!");
static_assert(offsetof(ABP_GameState_C, MapCorners) == 0x000330, "Member 'ABP_GameState_C::MapCorners' has a wrong offset!");
static_assert(offsetof(ABP_GameState_C, Game_Mode_Description) == 0x000340, "Member 'ABP_GameState_C::Game_Mode_Description' has a wrong offset!");
static_assert(offsetof(ABP_GameState_C, RadiationWaves) == 0x000358, "Member 'ABP_GameState_C::RadiationWaves' has a wrong offset!");
static_assert(offsetof(ABP_GameState_C, MapTexture) == 0x000368, "Member 'ABP_GameState_C::MapTexture' has a wrong offset!");
static_assert(offsetof(ABP_GameState_C, Cloud_Match_Info) == 0x000370, "Member 'ABP_GameState_C::Cloud_Match_Info' has a wrong offset!");

}

