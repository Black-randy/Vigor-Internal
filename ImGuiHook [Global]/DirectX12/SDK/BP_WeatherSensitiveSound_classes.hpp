#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_WeatherSensitiveSound

#include "Basic.hpp"

#include "Flame_classes.hpp"
#include "Engine_structs.hpp"


namespace SDK
{

// BlueprintGeneratedClass BP_WeatherSensitiveSound.BP_WeatherSensitiveSound_C
// 0x0018 (0x0240 - 0x0228)
class ABP_WeatherSensitiveSound_C final : public AAmbientSoundExtended
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x0228(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	bool                                          PlayWhenRaining;                                   // 0x0230(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          PlayWhenNotRaining;                                // 0x0231(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_232[0x2];                                      // 0x0232(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         FadeInTime;                                        // 0x0234(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         FadeOutTime;                                       // 0x0238(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

public:
	void Initialize();
	void HandleRainChange(float RainAmount, float WetnessAmount, bool IsRaining);
	void AdjustWindIntensity(float CurrentWindIntensity);
	void AdjustWindDirection(const struct FVector& CurrentWindDirection);
	void SetHeavyRain(bool HeavyRain);
	void ReceiveBeginPlay();
	void AdjustRainIntensity(float CurrentRainAmount, float CurrentWetnessAmount);
	void AdjustWeather(float CurrentRainAmount, float CurrentWindIntensity, const struct FVector& CurrentWindDirection, float CurrentWetnessAmount);
	void ExecuteUbergraph_BP_WeatherSensitiveSound(int32 EntryPoint);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BP_WeatherSensitiveSound_C">();
	}
	static class ABP_WeatherSensitiveSound_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<ABP_WeatherSensitiveSound_C>();
	}
};
static_assert(alignof(ABP_WeatherSensitiveSound_C) == 0x000008, "Wrong alignment on ABP_WeatherSensitiveSound_C");
static_assert(sizeof(ABP_WeatherSensitiveSound_C) == 0x000240, "Wrong size on ABP_WeatherSensitiveSound_C");
static_assert(offsetof(ABP_WeatherSensitiveSound_C, UberGraphFrame) == 0x000228, "Member 'ABP_WeatherSensitiveSound_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(ABP_WeatherSensitiveSound_C, PlayWhenRaining) == 0x000230, "Member 'ABP_WeatherSensitiveSound_C::PlayWhenRaining' has a wrong offset!");
static_assert(offsetof(ABP_WeatherSensitiveSound_C, PlayWhenNotRaining) == 0x000231, "Member 'ABP_WeatherSensitiveSound_C::PlayWhenNotRaining' has a wrong offset!");
static_assert(offsetof(ABP_WeatherSensitiveSound_C, FadeInTime) == 0x000234, "Member 'ABP_WeatherSensitiveSound_C::FadeInTime' has a wrong offset!");
static_assert(offsetof(ABP_WeatherSensitiveSound_C, FadeOutTime) == 0x000238, "Member 'ABP_WeatherSensitiveSound_C::FadeOutTime' has a wrong offset!");

}

