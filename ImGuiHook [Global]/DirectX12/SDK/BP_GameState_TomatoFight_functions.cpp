#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_GameState_TomatoFight

#include "Basic.hpp"

#include "BP_GameState_TomatoFight_classes.hpp"
#include "BP_GameState_TomatoFight_parameters.hpp"


namespace SDK
{

// Function BP_GameState_TomatoFight.BP_GameState_TomatoFight_C.FightVariantSet__DelegateSignature
// (Public, Delegate, BlueprintCallable, BlueprintEvent)
// Parameters:
// EFightVariant                           NewVariant                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_GameState_TomatoFight_C::FightVariantSet__DelegateSignature(EFightVariant NewVariant)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_GameState_TomatoFight_C", "FightVariantSet__DelegateSignature");

	Params::BP_GameState_TomatoFight_C_FightVariantSet__DelegateSignature Parms{};

	Parms.NewVariant = NewVariant;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_GameState_TomatoFight.BP_GameState_TomatoFight_C.ExecuteUbergraph_BP_GameState_TomatoFight
// (Final, UbergraphFunction, HasDefaults)
// Parameters:
// int32                                   EntryPoint                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_GameState_TomatoFight_C::ExecuteUbergraph_BP_GameState_TomatoFight(int32 EntryPoint)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_GameState_TomatoFight_C", "ExecuteUbergraph_BP_GameState_TomatoFight");

	Params::BP_GameState_TomatoFight_C_ExecuteUbergraph_BP_GameState_TomatoFight Parms{};

	Parms.EntryPoint = EntryPoint;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_GameState_TomatoFight.BP_GameState_TomatoFight_C.ReplaceWinnerScreen
// (Net, NetServer, BlueprintCallable, BlueprintEvent)
// Parameters:
// class ABP_WinnerScreen_Base_C*          Origin                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_GameState_TomatoFight_C::ReplaceWinnerScreen(class ABP_WinnerScreen_Base_C* Origin)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_GameState_TomatoFight_C", "ReplaceWinnerScreen");

	Params::BP_GameState_TomatoFight_C_ReplaceWinnerScreen Parms{};

	Parms.Origin = Origin;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_GameState_TomatoFight.BP_GameState_TomatoFight_C.Set Barricades Active State
// (Net, NetReliable, NetMulticast, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    IsActive                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ABP_GameState_TomatoFight_C::Set_Barricades_Active_State(bool IsActive)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_GameState_TomatoFight_C", "Set Barricades Active State");

	Params::BP_GameState_TomatoFight_C_Set_Barricades_Active_State Parms{};

	Parms.IsActive = IsActive;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_GameState_TomatoFight.BP_GameState_TomatoFight_C.Handle Match Phase
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// E_TeamsMatchPhase                       Match_Phase_0                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_GameState_TomatoFight_C::Handle_Match_Phase(E_TeamsMatchPhase Match_Phase_0)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_GameState_TomatoFight_C", "Handle Match Phase");

	Params::BP_GameState_TomatoFight_C_Handle_Match_Phase Parms{};

	Parms.Match_Phase_0 = Match_Phase_0;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_GameState_TomatoFight.BP_GameState_TomatoFight_C.Replicate Spawns
// (Net, NetReliable, NetMulticast, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// TArray<class ABP_PlayerStart_Raid_C*>   Attacker_Spawns                                        (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
// TArray<class ABP_PlayerStart_Raid_C*>   Defender_Spawns                                        (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
// int32                                   SelectedSettingID_0                                    (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_GameState_TomatoFight_C::Replicate_Spawns(const TArray<class ABP_PlayerStart_Raid_C*>& Attacker_Spawns, const TArray<class ABP_PlayerStart_Raid_C*>& Defender_Spawns, int32 SelectedSettingID_0)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_GameState_TomatoFight_C", "Replicate Spawns");

	Params::BP_GameState_TomatoFight_C_Replicate_Spawns Parms{};

	Parms.Attacker_Spawns = std::move(Attacker_Spawns);
	Parms.Defender_Spawns = std::move(Defender_Spawns);
	Parms.SelectedSettingID_0 = SelectedSettingID_0;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_GameState_TomatoFight.BP_GameState_TomatoFight_C.Set Spawn Sides Switched
// (Net, NetReliable, NetMulticast, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    Sides_Switched                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ABP_GameState_TomatoFight_C::Set_Spawn_Sides_Switched(bool Sides_Switched)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_GameState_TomatoFight_C", "Set Spawn Sides Switched");

	Params::BP_GameState_TomatoFight_C_Set_Spawn_Sides_Switched Parms{};

	Parms.Sides_Switched = Sides_Switched;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_GameState_TomatoFight.BP_GameState_TomatoFight_C.Winner Screen Start
// (BlueprintCallable, BlueprintEvent)

void ABP_GameState_TomatoFight_C::Winner_Screen_Start()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_GameState_TomatoFight_C", "Winner Screen Start");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_GameState_TomatoFight.BP_GameState_TomatoFight_C.SetLoadoutStyle
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// int32                                   Value                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_GameState_TomatoFight_C::SetLoadoutStyle(int32 Value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_GameState_TomatoFight_C", "SetLoadoutStyle");

	Params::BP_GameState_TomatoFight_C_SetLoadoutStyle Parms{};

	Parms.Value = Value;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_GameState_TomatoFight.BP_GameState_TomatoFight_C.Objective Stage Started
// (Net, NetReliable, NetMulticast, BlueprintCallable, BlueprintEvent)
// Parameters:
// class ABP_Objective_TomatoFight_C*      Objective                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class ABP_ObjectiveSpawnPoint_GunFight_C*SpawnPoint                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_GameState_TomatoFight_C::Objective_Stage_Started(class ABP_Objective_TomatoFight_C* Objective, class ABP_ObjectiveSpawnPoint_GunFight_C* SpawnPoint)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_GameState_TomatoFight_C", "Objective Stage Started");

	Params::BP_GameState_TomatoFight_C_Objective_Stage_Started Parms{};

	Parms.Objective = Objective;
	Parms.SpawnPoint = SpawnPoint;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_GameState_TomatoFight.BP_GameState_TomatoFight_C.Update Survivor Count
// (Net, NetReliable, NetMulticast, BlueprintCallable, BlueprintEvent)
// Parameters:
// int32                                   Attacker_Survivors                                     (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   Defender_Survivors                                     (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_GameState_TomatoFight_C::Update_Survivor_Count(int32 Attacker_Survivors, int32 Defender_Survivors)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_GameState_TomatoFight_C", "Update Survivor Count");

	Params::BP_GameState_TomatoFight_C_Update_Survivor_Count Parms{};

	Parms.Attacker_Survivors = Attacker_Survivors;
	Parms.Defender_Survivors = Defender_Survivors;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_GameState_TomatoFight.BP_GameState_TomatoFight_C.Show Kill Feed
// (Net, NetReliable, NetMulticast, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FStruct_TVTDeathmatch_KillFeed   KillFeed                                               (BlueprintVisible, BlueprintReadOnly, Parm, HasGetValueTypeHash)

void ABP_GameState_TomatoFight_C::Show_Kill_Feed(const struct FStruct_TVTDeathmatch_KillFeed& KillFeed)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_GameState_TomatoFight_C", "Show Kill Feed");

	Params::BP_GameState_TomatoFight_C_Show_Kill_Feed Parms{};

	Parms.KillFeed = std::move(KillFeed);

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_GameState_TomatoFight.BP_GameState_TomatoFight_C.Last Two Minutes In Match
// (Net, NetReliable, NetMulticast, BlueprintCallable, BlueprintEvent)

void ABP_GameState_TomatoFight_C::Last_Two_Minutes_In_Match()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_GameState_TomatoFight_C", "Last Two Minutes In Match");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_GameState_TomatoFight.BP_GameState_TomatoFight_C.Set Round Win Reason
// (Net, NetReliable, NetMulticast, BlueprintCallable, BlueprintEvent)
// Parameters:
// EGunFightWinReason                      Win_Reason                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class UBP_GSC_Team_Raid_C*              Team_Who_Won                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_GameState_TomatoFight_C::Set_Round_Win_Reason(EGunFightWinReason Win_Reason, class UBP_GSC_Team_Raid_C* Team_Who_Won)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_GameState_TomatoFight_C", "Set Round Win Reason");

	Params::BP_GameState_TomatoFight_C_Set_Round_Win_Reason Parms{};

	Parms.Win_Reason = Win_Reason;
	Parms.Team_Who_Won = Team_Who_Won;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_GameState_TomatoFight.BP_GameState_TomatoFight_C.ReceiveBeginPlay
// (Event, Protected, BlueprintEvent)

void ABP_GameState_TomatoFight_C::ReceiveBeginPlay()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_GameState_TomatoFight_C", "ReceiveBeginPlay");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_GameState_TomatoFight.BP_GameState_TomatoFight_C.Notify Player Statistics Changed
// (BlueprintCallable, BlueprintEvent)

void ABP_GameState_TomatoFight_C::Notify_Player_Statistics_Changed()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_GameState_TomatoFight_C", "Notify Player Statistics Changed");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_GameState_TomatoFight.BP_GameState_TomatoFight_C.New Round Started
// (Net, NetReliable, NetMulticast, BlueprintCallable, BlueprintEvent)

void ABP_GameState_TomatoFight_C::New_Round_Started()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_GameState_TomatoFight_C", "New Round Started");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_GameState_TomatoFight.BP_GameState_TomatoFight_C.Players Update PreRound Time Remaining
// (Net, NetReliable, NetMulticast, BlueprintCallable, BlueprintEvent)
// Parameters:
// int32                                   Remaining_Time                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_GameState_TomatoFight_C::Players_Update_PreRound_Time_Remaining(int32 Remaining_Time)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_GameState_TomatoFight_C", "Players Update PreRound Time Remaining");

	Params::BP_GameState_TomatoFight_C_Players_Update_PreRound_Time_Remaining Parms{};

	Parms.Remaining_Time = Remaining_Time;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_GameState_TomatoFight.BP_GameState_TomatoFight_C.Set PreRound Remaining Time
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// int32                                   Remaining_Time                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_GameState_TomatoFight_C::Set_PreRound_Remaining_Time(int32 Remaining_Time)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_GameState_TomatoFight_C", "Set PreRound Remaining Time");

	Params::BP_GameState_TomatoFight_C_Set_PreRound_Remaining_Time Parms{};

	Parms.Remaining_Time = Remaining_Time;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_GameState_TomatoFight.BP_GameState_TomatoFight_C.Last Ten Seconds In Match
// (Net, NetReliable, NetMulticast, BlueprintCallable, BlueprintEvent)

void ABP_GameState_TomatoFight_C::Last_Ten_Seconds_In_Match()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_GameState_TomatoFight_C", "Last Ten Seconds In Match");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_GameState_TomatoFight.BP_GameState_TomatoFight_C.Players Update Time Remaining
// (Net, NetReliable, NetMulticast, BlueprintCallable, BlueprintEvent)
// Parameters:
// int32                                   Remaining_Time                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_GameState_TomatoFight_C::Players_Update_Time_Remaining(int32 Remaining_Time)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_GameState_TomatoFight_C", "Players Update Time Remaining");

	Params::BP_GameState_TomatoFight_C_Players_Update_Time_Remaining Parms{};

	Parms.Remaining_Time = Remaining_Time;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_GameState_TomatoFight.BP_GameState_TomatoFight_C.Set Match Remaining Time
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// int32                                   Remaining_Time                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_GameState_TomatoFight_C::Set_Match_Remaining_Time(int32 Remaining_Time)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_GameState_TomatoFight_C", "Set Match Remaining Time");

	Params::BP_GameState_TomatoFight_C_Set_Match_Remaining_Time Parms{};

	Parms.Remaining_Time = Remaining_Time;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_GameState_TomatoFight.BP_GameState_TomatoFight_C.Debug Switch Pause Match
// (BlueprintCallable, BlueprintEvent)

void ABP_GameState_TomatoFight_C::Debug_Switch_Pause_Match()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_GameState_TomatoFight_C", "Debug Switch Pause Match");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_GameState_TomatoFight.BP_GameState_TomatoFight_C.Get Attacking Team
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// class UBP_GSC_Team_Raid_C*              Attacking_Team                                         (Parm, OutParm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_GameState_TomatoFight_C::Get_Attacking_Team(class UBP_GSC_Team_Raid_C** Attacking_Team)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_GameState_TomatoFight_C", "Get Attacking Team");

	Params::BP_GameState_TomatoFight_C_Get_Attacking_Team Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Attacking_Team != nullptr)
		*Attacking_Team = Parms.Attacking_Team;
}


// Function BP_GameState_TomatoFight.BP_GameState_TomatoFight_C.Get Defending Team
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// class UBP_GSC_Team_Raid_C*              Defending_Team                                         (Parm, OutParm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_GameState_TomatoFight_C::Get_Defending_Team(class UBP_GSC_Team_Raid_C** Defending_Team)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_GameState_TomatoFight_C", "Get Defending Team");

	Params::BP_GameState_TomatoFight_C_Get_Defending_Team Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Defending_Team != nullptr)
		*Defending_Team = Parms.Defending_Team;
}


// Function BP_GameState_TomatoFight.BP_GameState_TomatoFight_C.GetWorldMinMax
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FVector                          World_Min                                              (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FVector                          World_Max                                              (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_GameState_TomatoFight_C::GetWorldMinMax(struct FVector* World_Min, struct FVector* World_Max)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_GameState_TomatoFight_C", "GetWorldMinMax");

	Params::BP_GameState_TomatoFight_C_GetWorldMinMax Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (World_Min != nullptr)
		*World_Min = std::move(Parms.World_Min);

	if (World_Max != nullptr)
		*World_Max = std::move(Parms.World_Max);
}


// Function BP_GameState_TomatoFight.BP_GameState_TomatoFight_C.Check Remaining Time Sound Cues
// (Public, BlueprintCallable, BlueprintEvent)

void ABP_GameState_TomatoFight_C::Check_Remaining_Time_Sound_Cues()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_GameState_TomatoFight_C", "Check Remaining Time Sound Cues");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_GameState_TomatoFight.BP_GameState_TomatoFight_C.Get Statistics
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// TArray<struct FStruct_GunFightStatistics>Statistics                                             (Parm, OutParm)

void ABP_GameState_TomatoFight_C::Get_Statistics(TArray<struct FStruct_GunFightStatistics>* Statistics)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_GameState_TomatoFight_C", "Get Statistics");

	Params::BP_GameState_TomatoFight_C_Get_Statistics Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Statistics != nullptr)
		*Statistics = std::move(Parms.Statistics);
}


// Function BP_GameState_TomatoFight.BP_GameState_TomatoFight_C.Get Attacker Statistics
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// TArray<struct FStruct_GunFightStatistics>Statistics                                             (Parm, OutParm)

void ABP_GameState_TomatoFight_C::Get_Attacker_Statistics(TArray<struct FStruct_GunFightStatistics>* Statistics)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_GameState_TomatoFight_C", "Get Attacker Statistics");

	Params::BP_GameState_TomatoFight_C_Get_Attacker_Statistics Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Statistics != nullptr)
		*Statistics = std::move(Parms.Statistics);
}


// Function BP_GameState_TomatoFight.BP_GameState_TomatoFight_C.Get Defender Statistics
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// TArray<struct FStruct_GunFightStatistics>Statistics                                             (Parm, OutParm)

void ABP_GameState_TomatoFight_C::Get_Defender_Statistics(TArray<struct FStruct_GunFightStatistics>* Statistics)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_GameState_TomatoFight_C", "Get Defender Statistics");

	Params::BP_GameState_TomatoFight_C_Get_Defender_Statistics Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Statistics != nullptr)
		*Statistics = std::move(Parms.Statistics);
}


// Function BP_GameState_TomatoFight.BP_GameState_TomatoFight_C.Find Player Start Positions
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)

void ABP_GameState_TomatoFight_C::Find_Player_Start_Positions()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_GameState_TomatoFight_C", "Find Player Start Positions");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_GameState_TomatoFight.BP_GameState_TomatoFight_C.Get Winning and Losing Teams
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    Winner_Found                                           (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
// class UBP_GSC_Team_Raid_C*              Winning_Team                                           (Parm, OutParm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class UBP_GSC_Team_Raid_C*              Losing_Team                                            (Parm, OutParm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    TeamsAreEqual                                          (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ABP_GameState_TomatoFight_C::Get_Winning_and_Losing_Teams(bool* Winner_Found, class UBP_GSC_Team_Raid_C** Winning_Team, class UBP_GSC_Team_Raid_C** Losing_Team, bool* TeamsAreEqual)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_GameState_TomatoFight_C", "Get Winning and Losing Teams");

	Params::BP_GameState_TomatoFight_C_Get_Winning_and_Losing_Teams Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Winner_Found != nullptr)
		*Winner_Found = Parms.Winner_Found;

	if (Winning_Team != nullptr)
		*Winning_Team = Parms.Winning_Team;

	if (Losing_Team != nullptr)
		*Losing_Team = Parms.Losing_Team;

	if (TeamsAreEqual != nullptr)
		*TeamsAreEqual = Parms.TeamsAreEqual;
}


// Function BP_GameState_TomatoFight.BP_GameState_TomatoFight_C.Show End Turn Notification To Player
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// EGunFightWinReason                      Win_Reason                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class UBP_GSC_Team_Raid_C*              Winning_Team                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class ABP_PlayerController_TomatoFight_C*Player_Controller                                      (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_GameState_TomatoFight_C::Show_End_Turn_Notification_To_Player(EGunFightWinReason Win_Reason, class UBP_GSC_Team_Raid_C* Winning_Team, class ABP_PlayerController_TomatoFight_C* Player_Controller)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_GameState_TomatoFight_C", "Show End Turn Notification To Player");

	Params::BP_GameState_TomatoFight_C_Show_End_Turn_Notification_To_Player Parms{};

	Parms.Win_Reason = Win_Reason;
	Parms.Winning_Team = Winning_Team;
	Parms.Player_Controller = Player_Controller;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_GameState_TomatoFight.BP_GameState_TomatoFight_C.Find Winner Screen
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)

void ABP_GameState_TomatoFight_C::Find_Winner_Screen()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_GameState_TomatoFight_C", "Find Winner Screen");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_GameState_TomatoFight.BP_GameState_TomatoFight_C.Display Winner Screen
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)

void ABP_GameState_TomatoFight_C::Display_Winner_Screen()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_GameState_TomatoFight_C", "Display Winner Screen");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_GameState_TomatoFight.BP_GameState_TomatoFight_C.GetScoreboardTabs
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// TArray<struct FStruct_ScoreboardTab>    Tabs                                                   (Parm, OutParm)

void ABP_GameState_TomatoFight_C::GetScoreboardTabs(TArray<struct FStruct_ScoreboardTab>* Tabs)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_GameState_TomatoFight_C", "GetScoreboardTabs");

	Params::BP_GameState_TomatoFight_C_GetScoreboardTabs Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Tabs != nullptr)
		*Tabs = std::move(Parms.Tabs);
}


// Function BP_GameState_TomatoFight.BP_GameState_TomatoFight_C.IsLocalPlayerWinning
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    IsWinning                                              (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ABP_GameState_TomatoFight_C::IsLocalPlayerWinning(bool* IsWinning)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_GameState_TomatoFight_C", "IsLocalPlayerWinning");

	Params::BP_GameState_TomatoFight_C_IsLocalPlayerWinning Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (IsWinning != nullptr)
		*IsWinning = Parms.IsWinning;
}


// Function BP_GameState_TomatoFight.BP_GameState_TomatoFight_C.Get Current Round Loadout
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// EFightVariant                           FightVariant                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    Found_Any                                              (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
// struct FStruct_GunFightLoadout          Loadout                                                (Parm, OutParm, HasGetValueTypeHash)

void ABP_GameState_TomatoFight_C::Get_Current_Round_Loadout(EFightVariant FightVariant, bool* Found_Any, struct FStruct_GunFightLoadout* Loadout)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_GameState_TomatoFight_C", "Get Current Round Loadout");

	Params::BP_GameState_TomatoFight_C_Get_Current_Round_Loadout Parms{};

	Parms.FightVariant = FightVariant;

	UObject::ProcessEvent(Func, &Parms);

	if (Found_Any != nullptr)
		*Found_Any = Parms.Found_Any;

	if (Loadout != nullptr)
		*Loadout = std::move(Parms.Loadout);
}


// Function BP_GameState_TomatoFight.BP_GameState_TomatoFight_C.Modify Kill Feed Color By Team
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// struct FStruct_TVTDeathmatch_KillFeed   Kill_Feed_In                                           (BlueprintVisible, BlueprintReadOnly, Parm, HasGetValueTypeHash)
// struct FStruct_TVTDeathmatch_KillFeed   Kill_Feed_Out                                          (Parm, OutParm, HasGetValueTypeHash)

void ABP_GameState_TomatoFight_C::Modify_Kill_Feed_Color_By_Team(const struct FStruct_TVTDeathmatch_KillFeed& Kill_Feed_In, struct FStruct_TVTDeathmatch_KillFeed* Kill_Feed_Out)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_GameState_TomatoFight_C", "Modify Kill Feed Color By Team");

	Params::BP_GameState_TomatoFight_C_Modify_Kill_Feed_Color_By_Team Parms{};

	Parms.Kill_Feed_In = std::move(Kill_Feed_In);

	UObject::ProcessEvent(Func, &Parms);

	if (Kill_Feed_Out != nullptr)
		*Kill_Feed_Out = std::move(Parms.Kill_Feed_Out);
}


// Function BP_GameState_TomatoFight.BP_GameState_TomatoFight_C.Show or Hide Spawn Markers
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    Show                                                   (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ABP_GameState_TomatoFight_C::Show_or_Hide_Spawn_Markers(bool Show)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_GameState_TomatoFight_C", "Show or Hide Spawn Markers");

	Params::BP_GameState_TomatoFight_C_Show_or_Hide_Spawn_Markers Parms{};

	Parms.Show = Show;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_GameState_TomatoFight.BP_GameState_TomatoFight_C.GetGameVariant
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// EFightVariant                           Variant                                                (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_GameState_TomatoFight_C::GetGameVariant(EFightVariant* Variant)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_GameState_TomatoFight_C", "GetGameVariant");

	Params::BP_GameState_TomatoFight_C_GetGameVariant Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Variant != nullptr)
		*Variant = Parms.Variant;
}


// Function BP_GameState_TomatoFight.BP_GameState_TomatoFight_C.SetGameVariant
// (Public, BlueprintCallable, BlueprintEvent)

void ABP_GameState_TomatoFight_C::SetGameVariant()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_GameState_TomatoFight_C", "SetGameVariant");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_GameState_TomatoFight.BP_GameState_TomatoFight_C.ReceivedMatchPhaseReplication
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// E_TeamsMatchPhase                       Match_Phase_0                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_GameState_TomatoFight_C::ReceivedMatchPhaseReplication(E_TeamsMatchPhase Match_Phase_0)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_GameState_TomatoFight_C", "ReceivedMatchPhaseReplication");

	Params::BP_GameState_TomatoFight_C_ReceivedMatchPhaseReplication Parms{};

	Parms.Match_Phase_0 = Match_Phase_0;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_GameState_TomatoFight.BP_GameState_TomatoFight_C.GetGameModeStringName
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// class FString                           StringName                                             (Parm, OutParm, ZeroConstructor, HasGetValueTypeHash)

void ABP_GameState_TomatoFight_C::GetGameModeStringName(class FString* StringName)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_GameState_TomatoFight_C", "GetGameModeStringName");

	Params::BP_GameState_TomatoFight_C_GetGameModeStringName Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (StringName != nullptr)
		*StringName = std::move(Parms.StringName);
}


// Function BP_GameState_TomatoFight.BP_GameState_TomatoFight_C.OnRep_GameVariant
// (BlueprintCallable, BlueprintEvent)

void ABP_GameState_TomatoFight_C::OnRep_GameVariant()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_GameState_TomatoFight_C", "OnRep_GameVariant");

	UObject::ProcessEvent(Func, nullptr);
}

}

