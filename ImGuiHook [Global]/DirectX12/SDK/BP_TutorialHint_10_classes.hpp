#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_TutorialHint_10

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "Engine_classes.hpp"
#include "FlameUI_structs.hpp"


namespace SDK
{

// BlueprintGeneratedClass BP_TutorialHint_10.BP_TutorialHint_10_C
// 0x0060 (0x0110 - 0x00B0)
class UBP_TutorialHint_10_C final : public UActorComponent
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x00B0(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class FText                                   HintText;                                          // 0x00B8(0x0018)(Edit, BlueprintVisible, ExposeOnSpawn)
	EInputIcon                                    Icon;                                              // 0x00D0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash)
	bool                                          IsHoldable;                                        // 0x00D1(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn)
	uint8                                         Pad_D2[0x2];                                       // 0x00D2(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Duration;                                          // 0x00D4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash)
	bool                                          ShowOnlyOnce;                                      // 0x00D8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn)
	uint8                                         Pad_D9[0x3];                                       // 0x00D9(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         HintUsed;                                          // 0x00DC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsShown;                                           // 0x00E0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          CloseOnPressed;                                    // 0x00E1(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn)
	bool                                          CloseOnHold;                                       // 0x00E2(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn)
	bool                                          CloseOnRelease;                                    // 0x00E3(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn)
	uint8                                         Pad_E4[0x4];                                       // 0x00E4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UUI_TutorialHint_10_C*                  OpenedUI;                                          // 0x00E8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<EInputIcon>                            VisualIcons;                                       // 0x00F0(0x0010)(Edit, BlueprintVisible, ExposeOnSpawn)
	FMulticastInlineDelegateProperty_             HintHidden;                                        // 0x0100(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)

public:
	void HintHidden__DelegateSignature();
	void ExecuteUbergraph_BP_TutorialHint_10(int32 EntryPoint);
	void OnHintWidgetClosed(class UFlameWidget* FlameWidget);
	void ShowHint();
	void CloseHint();

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BP_TutorialHint_10_C">();
	}
	static class UBP_TutorialHint_10_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UBP_TutorialHint_10_C>();
	}
};
static_assert(alignof(UBP_TutorialHint_10_C) == 0x000008, "Wrong alignment on UBP_TutorialHint_10_C");
static_assert(sizeof(UBP_TutorialHint_10_C) == 0x000110, "Wrong size on UBP_TutorialHint_10_C");
static_assert(offsetof(UBP_TutorialHint_10_C, UberGraphFrame) == 0x0000B0, "Member 'UBP_TutorialHint_10_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(UBP_TutorialHint_10_C, HintText) == 0x0000B8, "Member 'UBP_TutorialHint_10_C::HintText' has a wrong offset!");
static_assert(offsetof(UBP_TutorialHint_10_C, Icon) == 0x0000D0, "Member 'UBP_TutorialHint_10_C::Icon' has a wrong offset!");
static_assert(offsetof(UBP_TutorialHint_10_C, IsHoldable) == 0x0000D1, "Member 'UBP_TutorialHint_10_C::IsHoldable' has a wrong offset!");
static_assert(offsetof(UBP_TutorialHint_10_C, Duration) == 0x0000D4, "Member 'UBP_TutorialHint_10_C::Duration' has a wrong offset!");
static_assert(offsetof(UBP_TutorialHint_10_C, ShowOnlyOnce) == 0x0000D8, "Member 'UBP_TutorialHint_10_C::ShowOnlyOnce' has a wrong offset!");
static_assert(offsetof(UBP_TutorialHint_10_C, HintUsed) == 0x0000DC, "Member 'UBP_TutorialHint_10_C::HintUsed' has a wrong offset!");
static_assert(offsetof(UBP_TutorialHint_10_C, IsShown) == 0x0000E0, "Member 'UBP_TutorialHint_10_C::IsShown' has a wrong offset!");
static_assert(offsetof(UBP_TutorialHint_10_C, CloseOnPressed) == 0x0000E1, "Member 'UBP_TutorialHint_10_C::CloseOnPressed' has a wrong offset!");
static_assert(offsetof(UBP_TutorialHint_10_C, CloseOnHold) == 0x0000E2, "Member 'UBP_TutorialHint_10_C::CloseOnHold' has a wrong offset!");
static_assert(offsetof(UBP_TutorialHint_10_C, CloseOnRelease) == 0x0000E3, "Member 'UBP_TutorialHint_10_C::CloseOnRelease' has a wrong offset!");
static_assert(offsetof(UBP_TutorialHint_10_C, OpenedUI) == 0x0000E8, "Member 'UBP_TutorialHint_10_C::OpenedUI' has a wrong offset!");
static_assert(offsetof(UBP_TutorialHint_10_C, VisualIcons) == 0x0000F0, "Member 'UBP_TutorialHint_10_C::VisualIcons' has a wrong offset!");
static_assert(offsetof(UBP_TutorialHint_10_C, HintHidden) == 0x000100, "Member 'UBP_TutorialHint_10_C::HintHidden' has a wrong offset!");

}

