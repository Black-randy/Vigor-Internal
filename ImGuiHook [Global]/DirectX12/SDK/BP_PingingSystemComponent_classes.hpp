#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_PingingSystemComponent

#include "Basic.hpp"

#include "EPingType_structs.hpp"
#include "Flame_structs.hpp"
#include "Engine_structs.hpp"
#include "Engine_classes.hpp"
#include "Struct_PingInfo_structs.hpp"
#include "PhysicsCore_structs.hpp"


namespace SDK
{

// BlueprintGeneratedClass BP_PingingSystemComponent.BP_PingingSystemComponent_C
// 0x00A8 (0x0158 - 0x00B0)
class UBP_PingingSystemComponent_C final : public UActorComponent
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x00B0(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	int32                                         PingDistance;                                      // 0x00B8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Ping_Cooldown;                                     // 0x00BC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CanPing;                                           // 0x00C0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_C1[0x7];                                       // 0x00C1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TMap<struct FStruct_PingInfo, class ABP_PingActor_C*> PingsPerPlayer;                                    // 0x00C8(0x0050)(Edit, BlueprintVisible, DisableEditOnInstance)
	class UUI_PingHint_C*                         PingHintUI;                                        // 0x0118(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         DoTProductThreshold;                               // 0x0120(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_124[0x4];                                      // 0x0124(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class UClass*>                         Legit_Actor_Classes_To_Ping;                       // 0x0128(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	struct FTimerHandle                           Make_Ping_Timer;                                   // 0x0138(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	int32                                         Ping_Tap_Count;                                    // 0x0140(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_144[0x4];                                      // 0x0144(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<TSoftClassPtr<class UClass>>           Legit_Actor_Classes_To_Ping_SoftRefs;              // 0x0148(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)

public:
	void ExecuteUbergraph_BP_PingingSystemComponent(int32 EntryPoint);
	void Make_Ping();
	void Ping_Action_Pressed();
	void Create_Widget_Hint_UI();
	void ReceiveBeginPlay();
	void ReceiveTick(float DeltaSeconds);
	void Local_Action_Confirmation(const struct FStruct_PingInfo& Ping_Info);
	void Destroy_Ping_SERVER(class ABP_PlayerState_C* Player_State, const struct FStruct_PingInfo& Ping_Info);
	void Ping_Confirmation_SERVER(class ABP_PlayerState_C* Confirming_Player, const struct FStruct_PingInfo& Ping_Info);
	void Replicate_Ping_SERVER(class ABP_PlayerState_C* Player_State, const struct FStruct_PingInfo& PingInfo);
	void Local_Action_Destroy_Ping(const struct FStruct_PingInfo& Ping_Info);
	void Ping_Confirmation(const struct FStruct_PingInfo& Ping_Info, class APlayerState* Confirming_Player);
	void Destroy_Ping(const struct FStruct_PingInfo& Ping_Info);
	void Local_Action_Spawn_Ping(EPingType Type, const struct FVector& Location, class UClass* Item);
	void Cooldown_Expired();
	void Replicate_Ping(const struct FStruct_PingInfo& Ping_Info);
	void Make_Ping_Action(bool Is_Danger);
	void GetPingLocation(bool* Success, class ABP_PingActor_C** Hit_Ping, class AActor** Pinged_Actor, struct FVector* Hit_Location);
	void SpawnPing(const struct FStruct_PingInfo& Ping_Info);
	void Destroy_Ping_From_Ping_Info(const struct FStruct_PingInfo& PingInfo);
	void Clean_Destroyed_Pings();
	void Confirm_Ping_From_Ping_Info(const struct FStruct_PingInfo& PingInfo, class APlayerState* Confirming_Player);
	void Delete_Excesive_Pings(EPingType PingType, int32 PlayerId);
	void Remove_All_Pings();
	void Is_Item_Already_Pinged(const struct FStruct_PingInfo& Ping_Info, bool* Already_Pinged);
	void Check_Aiming_At_Ping();
	void Find_Legit_Actor_Classes();
	void Is_Ping_Local(const struct FStruct_PingInfo& Ping_Info, bool* Is_Local);
	void Is_Ping_Not_Hitting_Openable_Actor_Opened_Doors(const struct FHitResult& Hit, bool* Success);
	void Are_Pings_Same(const struct FStruct_PingInfo& Ping_A, const struct FStruct_PingInfo& Ping_B, bool* Pings_Are_Same);
	void Get_Actor_Socket_Location(class AActor* Actor, struct FVector* Socket_Location);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BP_PingingSystemComponent_C">();
	}
	static class UBP_PingingSystemComponent_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UBP_PingingSystemComponent_C>();
	}
};
static_assert(alignof(UBP_PingingSystemComponent_C) == 0x000008, "Wrong alignment on UBP_PingingSystemComponent_C");
static_assert(sizeof(UBP_PingingSystemComponent_C) == 0x000158, "Wrong size on UBP_PingingSystemComponent_C");
static_assert(offsetof(UBP_PingingSystemComponent_C, UberGraphFrame) == 0x0000B0, "Member 'UBP_PingingSystemComponent_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(UBP_PingingSystemComponent_C, PingDistance) == 0x0000B8, "Member 'UBP_PingingSystemComponent_C::PingDistance' has a wrong offset!");
static_assert(offsetof(UBP_PingingSystemComponent_C, Ping_Cooldown) == 0x0000BC, "Member 'UBP_PingingSystemComponent_C::Ping_Cooldown' has a wrong offset!");
static_assert(offsetof(UBP_PingingSystemComponent_C, CanPing) == 0x0000C0, "Member 'UBP_PingingSystemComponent_C::CanPing' has a wrong offset!");
static_assert(offsetof(UBP_PingingSystemComponent_C, PingsPerPlayer) == 0x0000C8, "Member 'UBP_PingingSystemComponent_C::PingsPerPlayer' has a wrong offset!");
static_assert(offsetof(UBP_PingingSystemComponent_C, PingHintUI) == 0x000118, "Member 'UBP_PingingSystemComponent_C::PingHintUI' has a wrong offset!");
static_assert(offsetof(UBP_PingingSystemComponent_C, DoTProductThreshold) == 0x000120, "Member 'UBP_PingingSystemComponent_C::DoTProductThreshold' has a wrong offset!");
static_assert(offsetof(UBP_PingingSystemComponent_C, Legit_Actor_Classes_To_Ping) == 0x000128, "Member 'UBP_PingingSystemComponent_C::Legit_Actor_Classes_To_Ping' has a wrong offset!");
static_assert(offsetof(UBP_PingingSystemComponent_C, Make_Ping_Timer) == 0x000138, "Member 'UBP_PingingSystemComponent_C::Make_Ping_Timer' has a wrong offset!");
static_assert(offsetof(UBP_PingingSystemComponent_C, Ping_Tap_Count) == 0x000140, "Member 'UBP_PingingSystemComponent_C::Ping_Tap_Count' has a wrong offset!");
static_assert(offsetof(UBP_PingingSystemComponent_C, Legit_Actor_Classes_To_Ping_SoftRefs) == 0x000148, "Member 'UBP_PingingSystemComponent_C::Legit_Actor_Classes_To_Ping_SoftRefs' has a wrong offset!");

}

