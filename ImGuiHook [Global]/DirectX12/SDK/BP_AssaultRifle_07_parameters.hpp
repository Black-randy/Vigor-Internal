#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_AssaultRifle_07

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "CoreUObject_structs.hpp"


namespace SDK::Params
{

// Function BP_AssaultRifle_07.BP_AssaultRifle_07_C.ExecuteUbergraph_BP_AssaultRifle_07
// 0x0030 (0x0030 - 0x0000)
struct BP_AssaultRifle_07_C_ExecuteUbergraph_BP_AssaultRifle_07 final
{
public:
	int32                                         EntryPoint;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0004(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	TDelegate<void()>                             K2Node_CreateDelegate_OutputDelegate;              // 0x0008(0x0010)(ZeroConstructor, NoDestructor)
	bool                                          CallFunc_GreaterEqual_FloatFloat_ReturnValue;      // 0x0018(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTimerHandle                           CallFunc_K2_SetTimerDelegate_ReturnValue;          // 0x0020(0x0008)(NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Divide_FloatFloat_ReturnValue;            // 0x0028(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Subtract_FloatFloat_ReturnValue;          // 0x002C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_AssaultRifle_07_C_ExecuteUbergraph_BP_AssaultRifle_07) == 0x000008, "Wrong alignment on BP_AssaultRifle_07_C_ExecuteUbergraph_BP_AssaultRifle_07");
static_assert(sizeof(BP_AssaultRifle_07_C_ExecuteUbergraph_BP_AssaultRifle_07) == 0x000030, "Wrong size on BP_AssaultRifle_07_C_ExecuteUbergraph_BP_AssaultRifle_07");
static_assert(offsetof(BP_AssaultRifle_07_C_ExecuteUbergraph_BP_AssaultRifle_07, EntryPoint) == 0x000000, "Member 'BP_AssaultRifle_07_C_ExecuteUbergraph_BP_AssaultRifle_07::EntryPoint' has a wrong offset!");
static_assert(offsetof(BP_AssaultRifle_07_C_ExecuteUbergraph_BP_AssaultRifle_07, CallFunc_IsValid_ReturnValue) == 0x000004, "Member 'BP_AssaultRifle_07_C_ExecuteUbergraph_BP_AssaultRifle_07::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AssaultRifle_07_C_ExecuteUbergraph_BP_AssaultRifle_07, K2Node_CreateDelegate_OutputDelegate) == 0x000008, "Member 'BP_AssaultRifle_07_C_ExecuteUbergraph_BP_AssaultRifle_07::K2Node_CreateDelegate_OutputDelegate' has a wrong offset!");
static_assert(offsetof(BP_AssaultRifle_07_C_ExecuteUbergraph_BP_AssaultRifle_07, CallFunc_GreaterEqual_FloatFloat_ReturnValue) == 0x000018, "Member 'BP_AssaultRifle_07_C_ExecuteUbergraph_BP_AssaultRifle_07::CallFunc_GreaterEqual_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AssaultRifle_07_C_ExecuteUbergraph_BP_AssaultRifle_07, CallFunc_K2_SetTimerDelegate_ReturnValue) == 0x000020, "Member 'BP_AssaultRifle_07_C_ExecuteUbergraph_BP_AssaultRifle_07::CallFunc_K2_SetTimerDelegate_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AssaultRifle_07_C_ExecuteUbergraph_BP_AssaultRifle_07, CallFunc_Divide_FloatFloat_ReturnValue) == 0x000028, "Member 'BP_AssaultRifle_07_C_ExecuteUbergraph_BP_AssaultRifle_07::CallFunc_Divide_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AssaultRifle_07_C_ExecuteUbergraph_BP_AssaultRifle_07, CallFunc_Subtract_FloatFloat_ReturnValue) == 0x00002C, "Member 'BP_AssaultRifle_07_C_ExecuteUbergraph_BP_AssaultRifle_07::CallFunc_Subtract_FloatFloat_ReturnValue' has a wrong offset!");

// Function BP_AssaultRifle_07.BP_AssaultRifle_07_C.SimulateMagDrop
// 0x0038 (0x0038 - 0x0000)
struct BP_AssaultRifle_07_C_SimulateMagDrop final
{
public:
	TDelegate<void()>                             K2Node_CreateDelegate_OutputDelegate;              // 0x0000(0x0010)(ZeroConstructor, NoDestructor)
	struct FVector                                CallFunc_GetForwardVector_ReturnValue;             // 0x0010(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Multiply_VectorFloat_ReturnValue;         // 0x001C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0028(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_29[0x7];                                       // 0x0029(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTimerHandle                           CallFunc_K2_SetTimerDelegate_ReturnValue;          // 0x0030(0x0008)(NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_AssaultRifle_07_C_SimulateMagDrop) == 0x000008, "Wrong alignment on BP_AssaultRifle_07_C_SimulateMagDrop");
static_assert(sizeof(BP_AssaultRifle_07_C_SimulateMagDrop) == 0x000038, "Wrong size on BP_AssaultRifle_07_C_SimulateMagDrop");
static_assert(offsetof(BP_AssaultRifle_07_C_SimulateMagDrop, K2Node_CreateDelegate_OutputDelegate) == 0x000000, "Member 'BP_AssaultRifle_07_C_SimulateMagDrop::K2Node_CreateDelegate_OutputDelegate' has a wrong offset!");
static_assert(offsetof(BP_AssaultRifle_07_C_SimulateMagDrop, CallFunc_GetForwardVector_ReturnValue) == 0x000010, "Member 'BP_AssaultRifle_07_C_SimulateMagDrop::CallFunc_GetForwardVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AssaultRifle_07_C_SimulateMagDrop, CallFunc_Multiply_VectorFloat_ReturnValue) == 0x00001C, "Member 'BP_AssaultRifle_07_C_SimulateMagDrop::CallFunc_Multiply_VectorFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AssaultRifle_07_C_SimulateMagDrop, CallFunc_IsValid_ReturnValue) == 0x000028, "Member 'BP_AssaultRifle_07_C_SimulateMagDrop::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AssaultRifle_07_C_SimulateMagDrop, CallFunc_K2_SetTimerDelegate_ReturnValue) == 0x000030, "Member 'BP_AssaultRifle_07_C_SimulateMagDrop::CallFunc_K2_SetTimerDelegate_ReturnValue' has a wrong offset!");

// Function BP_AssaultRifle_07.BP_AssaultRifle_07_C.ResetDroppedMagPosition
// 0x0090 (0x0090 - 0x0000)
struct BP_AssaultRifle_07_C_ResetDroppedMagPosition final
{
public:
	bool                                          Enable;                                            // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          FirstTime;                                         // 0x0001(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0002(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_K2_AttachToComponent_ReturnValue;         // 0x0003(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FHitResult                             CallFunc_K2_SetRelativeRotation_SweepHitResult;    // 0x0004(0x008C)(IsPlainOldData, NoDestructor, ContainsInstancedReference)
};
static_assert(alignof(BP_AssaultRifle_07_C_ResetDroppedMagPosition) == 0x000004, "Wrong alignment on BP_AssaultRifle_07_C_ResetDroppedMagPosition");
static_assert(sizeof(BP_AssaultRifle_07_C_ResetDroppedMagPosition) == 0x000090, "Wrong size on BP_AssaultRifle_07_C_ResetDroppedMagPosition");
static_assert(offsetof(BP_AssaultRifle_07_C_ResetDroppedMagPosition, Enable) == 0x000000, "Member 'BP_AssaultRifle_07_C_ResetDroppedMagPosition::Enable' has a wrong offset!");
static_assert(offsetof(BP_AssaultRifle_07_C_ResetDroppedMagPosition, FirstTime) == 0x000001, "Member 'BP_AssaultRifle_07_C_ResetDroppedMagPosition::FirstTime' has a wrong offset!");
static_assert(offsetof(BP_AssaultRifle_07_C_ResetDroppedMagPosition, CallFunc_IsValid_ReturnValue) == 0x000002, "Member 'BP_AssaultRifle_07_C_ResetDroppedMagPosition::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AssaultRifle_07_C_ResetDroppedMagPosition, CallFunc_K2_AttachToComponent_ReturnValue) == 0x000003, "Member 'BP_AssaultRifle_07_C_ResetDroppedMagPosition::CallFunc_K2_AttachToComponent_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AssaultRifle_07_C_ResetDroppedMagPosition, CallFunc_K2_SetRelativeRotation_SweepHitResult) == 0x000004, "Member 'BP_AssaultRifle_07_C_ResetDroppedMagPosition::CallFunc_K2_SetRelativeRotation_SweepHitResult' has a wrong offset!");

// Function BP_AssaultRifle_07.BP_AssaultRifle_07_C.MagInitiate
// 0x0030 (0x0030 - 0x0000)
struct BP_AssaultRifle_07_C_MagInitiate final
{
public:
	class UObject*                                CallFunc_LoadAsset_Blocking_ReturnValue;           // 0x0000(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0008(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UStaticMesh*                            K2Node_DynamicCast_AsStatic_Mesh;                  // 0x0010(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0018(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue_1;                    // 0x0019(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValidSoftObjectReference_ReturnValue;   // 0x001A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_1B[0x5];                                       // 0x001B(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	TSubclassOf<class AItemSkin>                  CallFunc_GetSkin_ReturnValue;                      // 0x0020(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash)
	bool                                          CallFunc_SetStaticMesh_ReturnValue;                // 0x0028(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_AssaultRifle_07_C_MagInitiate) == 0x000008, "Wrong alignment on BP_AssaultRifle_07_C_MagInitiate");
static_assert(sizeof(BP_AssaultRifle_07_C_MagInitiate) == 0x000030, "Wrong size on BP_AssaultRifle_07_C_MagInitiate");
static_assert(offsetof(BP_AssaultRifle_07_C_MagInitiate, CallFunc_LoadAsset_Blocking_ReturnValue) == 0x000000, "Member 'BP_AssaultRifle_07_C_MagInitiate::CallFunc_LoadAsset_Blocking_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AssaultRifle_07_C_MagInitiate, CallFunc_IsValid_ReturnValue) == 0x000008, "Member 'BP_AssaultRifle_07_C_MagInitiate::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AssaultRifle_07_C_MagInitiate, K2Node_DynamicCast_AsStatic_Mesh) == 0x000010, "Member 'BP_AssaultRifle_07_C_MagInitiate::K2Node_DynamicCast_AsStatic_Mesh' has a wrong offset!");
static_assert(offsetof(BP_AssaultRifle_07_C_MagInitiate, K2Node_DynamicCast_bSuccess) == 0x000018, "Member 'BP_AssaultRifle_07_C_MagInitiate::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(BP_AssaultRifle_07_C_MagInitiate, CallFunc_IsValid_ReturnValue_1) == 0x000019, "Member 'BP_AssaultRifle_07_C_MagInitiate::CallFunc_IsValid_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_AssaultRifle_07_C_MagInitiate, CallFunc_IsValidSoftObjectReference_ReturnValue) == 0x00001A, "Member 'BP_AssaultRifle_07_C_MagInitiate::CallFunc_IsValidSoftObjectReference_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AssaultRifle_07_C_MagInitiate, CallFunc_GetSkin_ReturnValue) == 0x000020, "Member 'BP_AssaultRifle_07_C_MagInitiate::CallFunc_GetSkin_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AssaultRifle_07_C_MagInitiate, CallFunc_SetStaticMesh_ReturnValue) == 0x000028, "Member 'BP_AssaultRifle_07_C_MagInitiate::CallFunc_SetStaticMesh_ReturnValue' has a wrong offset!");

// Function BP_AssaultRifle_07.BP_AssaultRifle_07_C.CheckSkin
// 0x0018 (0x0018 - 0x0000)
struct BP_AssaultRifle_07_C_CheckSkin final
{
public:
	bool                                          IsTheSame;                                         // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TSubclassOf<class AItemSkin>                  CallFunc_GetSkin_ReturnValue;                      // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_ClassClass_ReturnValue;        // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_AssaultRifle_07_C_CheckSkin) == 0x000008, "Wrong alignment on BP_AssaultRifle_07_C_CheckSkin");
static_assert(sizeof(BP_AssaultRifle_07_C_CheckSkin) == 0x000018, "Wrong size on BP_AssaultRifle_07_C_CheckSkin");
static_assert(offsetof(BP_AssaultRifle_07_C_CheckSkin, IsTheSame) == 0x000000, "Member 'BP_AssaultRifle_07_C_CheckSkin::IsTheSame' has a wrong offset!");
static_assert(offsetof(BP_AssaultRifle_07_C_CheckSkin, CallFunc_GetSkin_ReturnValue) == 0x000008, "Member 'BP_AssaultRifle_07_C_CheckSkin::CallFunc_GetSkin_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AssaultRifle_07_C_CheckSkin, CallFunc_EqualEqual_ClassClass_ReturnValue) == 0x000010, "Member 'BP_AssaultRifle_07_C_CheckSkin::CallFunc_EqualEqual_ClassClass_ReturnValue' has a wrong offset!");

}

