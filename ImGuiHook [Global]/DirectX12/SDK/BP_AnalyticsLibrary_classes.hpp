#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_AnalyticsLibrary

#include "Basic.hpp"

#include "Engine_classes.hpp"
#include "EGunFightWinReason_structs.hpp"
#include "Flame_structs.hpp"
#include "ECommStationAction_structs.hpp"
#include "LoadingScreen_structs.hpp"
#include "EBooster_structs.hpp"
#include "E_LeaderboardsStatsTypes_structs.hpp"
#include "E_ChallengeManagerState_structs.hpp"
#include "E_ShootingChallengeResult_structs.hpp"


namespace SDK
{

// BlueprintGeneratedClass BP_AnalyticsLibrary.BP_AnalyticsLibrary_C
// 0x0000 (0x0028 - 0x0028)
class UBP_AnalyticsLibrary_C final : public UBlueprintFunctionLibrary
{
public:
	static void Set_User_ID(class UJsonObject* Target, const class FString& FieldName, const class FString& Analytics_User_ID, class UObject* __WorldContext, class UJsonObject** Return_Value);
	static void Set_Match_ID(class UJsonObject* Target, const class FString& FieldName, class UObject* __WorldContext, class UJsonObject** Return_Value);
	static void Set_Version_Number(class UJsonObject* Target, const class FString& FieldName, class UObject* __WorldContext, class UJsonObject** Return_Value);
	static void Set_Time_Since_App_Start(class UJsonObject* Target, const class FString& FieldName, class UObject* __WorldContext, class UJsonObject** Return_Value);
	static void Set_Tutorial_Step_Completed(class UJsonObject* Target, int32 Tutorial_Step_ID, class UObject* __WorldContext, class UJsonObject** Return_Value);
	static void Set_Level_Name(class UJsonObject* Target, const class FString& FieldName, const class FString& Level_Name, class UObject* __WorldContext, class UJsonObject** Return_Value);
	static void Set_Matchmaking_Waiting_Time(class UJsonObject* Target, const class FString& FieldName, int32 Waiting_Time, class UObject* __WorldContext, class UJsonObject** Return_Value);
	static void Set_Elapsed_Match_Time(class UJsonObject* Target, const class FString& FieldName, class UObject* __WorldContext, class UJsonObject** Return_Value);
	static void Set_Vector_Field(class UJsonObject* Target, const class FString& Field_Name, const struct FVector& Vector, float Rounding_Factor, class UObject* __WorldContext, class UJsonObject** Return_Value);
	static void Set_Location_of_Spawned_Player(class UJsonObject* Target, const class FString& Field_Name, class ACharacter* Spawned_Character, class UObject* __WorldContext, class UJsonObject** Return_Value);
	static void Set_Weapon_Name(class UJsonObject* Target, const class FString& FieldName, class UClass* Item, class UObject* __WorldContext, class UJsonObject** Return_Value);
	static void Set_Equipment_Value(class UJsonObject* Target, const class FString& FieldName, class UInventoryComponent* Inventory, class UObject* __WorldContext, class UJsonObject** Return_Value);
	static void Set_Location_of_Victim(class UJsonObject* Target, const class FString& Field_Name, class ACharacter* Victim, class UObject* __WorldContext, class UJsonObject** Return_Value);
	static void Set_Location_of_Killer(class UJsonObject* Target, const class FString& Field_Name, class ACharacter* Killer, class UObject* __WorldContext, class UJsonObject** Return_Value);
	static bool Send_Tutorial_Step_Event(int32 Tutorial_Step_ID, class UObject* __WorldContext);
	static bool Send_Join_Requested_Event(const class FString& Level_Name, bool LoneWolfButtonState, int32 Matchmaking_Slot, bool QuickPlay, class UObject* __WorldContext);
	static bool Send_Join_Cancelled_Event(const class FString& Level_Name, int32 Waiting_Time, class UObject* __WorldContext);
	static bool Send_Player_Spawned_Event(class AHumanCharacter* Spawned_Player, class FName SpawnPointName, class UObject* __WorldContext);
	static void Set_Inventory_Weapons_Count(class UJsonObject* Target, const class FString& FieldName, class UInventoryComponent* Inventory, class UObject* __WorldContext, class UJsonObject** Return_Value);
	static bool Send_Player_Scored_Kill_Event(class AHumanCharacter* Killer, class AHumanCharacter* Victim, class UClass* Instigating_Item, bool Headshot, bool Teamkill, class UObject* __WorldContext);
	static void Set_Kill_Distance(class UJsonObject* Target, const class FString& FieldName, class ACharacter* Killer, class AHumanCharacter* Victim, class UObject* __WorldContext, class UJsonObject** Return_Value);
	static bool Send_Player_Results_Event(bool Player_Escaped, bool Player_Won, const class FString& Exit_Name, bool Exit_Prevented_Radiation_Kill, class UInventoryComponent* Inventory, int32 Accuracy, class APlayerState* Player_State, TArray<class FString>& Rewards, TArray<struct FCloudBattlePassMatchEventInfo>& Events, int32 Distance_Traveled, int32 Meaningful_Distance_Traveled, int32 TotalTeamScore, float Average_Ping, class UObject* __WorldContext);
	static bool Send_Player_Death_Event(class AHumanCharacter* Victim, class AHumanCharacter* Killer, ECloudDeathCauseType Cause_of_Death, class UClass* Instigating_Item, class UObject* __WorldContext);
	static void Set_Cause_of_Death(class UJsonObject* Target, const class FString& FieldName, ECloudDeathCauseType Cause_of_Death, class UObject* __WorldContext, class UJsonObject** Return_Value);
	static void Set_Inventory_Shelter_Resources_Value(class UJsonObject* Target, const class FString& FieldName, class UInventoryComponent* Inventory, class APlayerState* Player_State, class UObject* __WorldContext, class UJsonObject** Return_Value);
	static void Set_Player_Escaped(class UJsonObject* Target, const class FString& FieldName, bool Player_Escaped, class UObject* __WorldContext, class UJsonObject** Return_Value);
	static void Set_Player_Won(class UJsonObject* Target, const class FString& FieldName, bool Player_Won, class UObject* __WorldContext, class UJsonObject** Return_Value);
	static void Set_Exit_Name(class UJsonObject* Target, const class FString& FieldName, const class FString& Exit_Name, class UObject* __WorldContext, class UJsonObject** Return_Value);
	static void Set_Inventory_Ammo_Count(class UJsonObject* Target, const class FString& FieldName, class UInventoryComponent* Inventory, class UObject* __WorldContext, class UJsonObject** Return_Value);
	static void Set_Inventory_Consumables_Count(class UJsonObject* Target, const class FString& FieldName, class UInventoryComponent* Inventory, class UObject* __WorldContext, class UJsonObject** Return_Value);
	static void Set_Inventory_Shelter_Resources_List(class UJsonObject* Target, const class FString& FieldName, class UInventoryComponent* Inventory, class UObject* __WorldContext, class UJsonObject** Return_Value);
	static bool Send_Air_Drop_Looted_Event(const class FString& Drop_Zone_Name, class AActor* Air_Drop_Container, class UObject* __WorldContext);
	static void Set_Drop_Zone_Name(class UJsonObject* Target, const class FString& FieldName, const class FString& Drop_Zone_Name, class UObject* __WorldContext, class UJsonObject** Return_Value);
	static void Set_Air_Drop_Location(class UJsonObject* Target, const class FString& Field_Name, class AActor* Air_Drop_Container, class UObject* __WorldContext, class UJsonObject** Return_Value);
	static bool Send_Player_Measures_Event(int32 Elapsed_Time_Interval, float Distance_Traveled, const struct FVector& Start_Location, const struct FVector& End_Location, int32 Used_Ammo, int32 Used_Explosives, int32 Used_Medkits, int32 Firemodes_Switched, bool Ladder_Used, bool ADS_Used, int32 Time_in_UI, bool Advanced_Options_Accessed, int32 Lootables_Accessed, class UInventoryComponent* Inventory, class AHumanCharacter* Character, TArray<int32>& SecondsUnder25_Stamina, TArray<int32>& SecondsAt0_Stamina, class UObject* __WorldContext);
	static void Set_Elapsed_Time_Interval(class UJsonObject* Target, const class FString& FieldName, int32 Elapsed_Time_Interval, class UObject* __WorldContext, class UJsonObject** Return_Value);
	static void Set_Distance_Traveled(class UJsonObject* Target, const class FString& FieldName, float Distance_Traveled, class UObject* __WorldContext, class UJsonObject** Return_Value);
	static void Set_Start_Location(class UJsonObject* Target, const class FString& Field_Name, const struct FVector& Start_Location, class UObject* __WorldContext, class UJsonObject** Return_Value);
	static void Set_End_Location(class UJsonObject* Target, const class FString& Field_Name, const struct FVector& End_Location, class UObject* __WorldContext, class UJsonObject** Return_Value);
	static void Set_Used_Ammo_Count(class UJsonObject* Target, const class FString& FieldName, int32 Used_Ammo, class UObject* __WorldContext, class UJsonObject** Return_Value);
	static void Set_Used_Explosives_Count(class UJsonObject* Target, const class FString& FieldName, int32 Used_Explosives, class UObject* __WorldContext, class UJsonObject** Return_Value);
	static void Set_Used_Medkit_Count(class UJsonObject* Target, const class FString& FieldName, int32 Used_Medkits, class UObject* __WorldContext, class UJsonObject** Return_Value);
	static void Set_Firemode_Switched_Count(class UJsonObject* Target, const class FString& FieldName, int32 Firemodes_Switched, class UObject* __WorldContext, class UJsonObject** Return_Value);
	static void Set_Ladder_Used(class UJsonObject* Target, const class FString& FieldName, bool Ladder_Used, class UObject* __WorldContext, class UJsonObject** Return_Value);
	static void Set_ADS_Used(class UJsonObject* Target, const class FString& FieldName, bool ADS_Used, class UObject* __WorldContext, class UJsonObject** Return_Value);
	static void Set_Time_in_UI(class UJsonObject* Target, const class FString& FieldName, int32 Time_in_UI, class UObject* __WorldContext, class UJsonObject** Return_Value);
	static void Set_Advanced_Options_Accessed(class UJsonObject* Target, const class FString& FieldName, bool Advanced_Options_Accessed, class UObject* __WorldContext, class UJsonObject** Return_Value);
	static bool Send_Player_Status_Event(class AHumanPlayerController* Player_Controller, TMap<class UClass*, struct FLootBoxInfoCloud>& Crates_Cache, class ABP_TitlesManager_C* Titles_Manager, class UObject* __WorldContext);
	static void Set_Stash_Shelter_Resources_List(class UJsonObject* Target, const class FString& FieldName, class AStash* Stash, class UObject* __WorldContext, class UJsonObject** Return_Value);
	static void Set_Stash_Materials_Count(class UJsonObject* Target, const class FString& FieldName, class AStash* Stash, class UObject* __WorldContext, class UJsonObject** Return_Value);
	static void Set_All_Firearms_Count(class UJsonObject* Target, const class FString& FieldName, class AHumanPlayerController* Player_Controller, class UObject* __WorldContext, class UJsonObject** Return_Value);
	static void Set_All_Ammo_Count(class UJsonObject* Target, const class FString& FieldName, class AHumanPlayerController* Player_Controller, class UObject* __WorldContext, class UJsonObject** Return_Value);
	static void Set_All_Consumables_Count(class UJsonObject* Target, const class FString& FieldName, class AHumanPlayerController* Player_Controller, class UObject* __WorldContext, class UJsonObject** Return_Value);
	static void Set_Shelter_Improvements_Count(class UJsonObject* Target, const class FString& FieldName, class AHumanPlayerController* Player_Controller, class UObject* __WorldContext, class UJsonObject** Return_Value);
	static void Set_All_Plans_Count(class UJsonObject* Target, const class FString& FieldName, class AHumanPlayerController* Player_Controller, class UObject* __WorldContext, class UJsonObject** Return_Value);
	static bool Send_Shelter_Improved_Event(class UClass* Shelter_Slot, class AStash* Stash, class UObject* __WorldContext);
	static void Set_Shelter_Improvement_Name(class UJsonObject* Target, const class FString& FieldName, class UClass* Shelter_Slot, class AStash* Stash, class UObject* __WorldContext, class UJsonObject** Return_Value);
	static void Set_Shelter_Improvement_Level(class UJsonObject* Target, const class FString& FieldName, class UClass* Shelter_Slot, class AStash* Stash, class UObject* __WorldContext, class UJsonObject** Return_Value);
	static void Set_Shelter_Improvement_Resources_List(class UJsonObject* Target, const class FString& FieldName, class UClass* Shelter_Slot, class AStash* Stash, class UObject* __WorldContext, class UJsonObject** Return_Value);
	static bool Send_Item_Disassembled_Event(class UClass* Item_Type, int32 Received_Materials, int32 Item_count, class UClass* Shelter_Slot, class AStash* Stash, class UObject* __WorldContext);
	static void Set_Item_Name(class UJsonObject* Target, const class FString& FieldName, class UClass* Item_Type, class UObject* __WorldContext, class UJsonObject** Return_Value);
	static void Set_Received_Material_Count(class UJsonObject* Target, const class FString& FieldName, int32 Received_Mateials, class UObject* __WorldContext, class UJsonObject** Return_Value);
	static bool Send_Item_Crafted_Event(class UClass* Item_Type, class UObject* __WorldContext);
	static void Set_Item_Category(class UJsonObject* Target, const class FString& FieldName, class UClass* Item_Type, class UObject* __WorldContext, class UJsonObject** Return_Value);
	static void Set_Materials_Amount(class UJsonObject* Target, const class FString& FieldName, int32 Amount_of_Materials, class UObject* __WorldContext, class UJsonObject** Return_Value);
	static void Set_Parts_Used(class UJsonObject* Target, const class FString& FieldName, bool Crafted_from_Parts, class UObject* __WorldContext, class UJsonObject** Return_Value);
	static bool Send_Crate_Rewards_Event(int32 Lootbox_Tier, class UClass* Lootbox_Class, TArray<class UClass*>& Item_Types, TArray<int32>& Item_Amounts, class UObject* __WorldContext);
	static void Set_Crate_Tier(class UJsonObject* Target, const class FString& FieldName, int32 Lootbox_Tier, class UObject* __WorldContext, class UJsonObject** Return_Value);
	static void Set_List_of_Rewards(class UJsonObject* Target, const class FString& FieldName, TArray<class UClass*>& Item_Types, TArray<int32>& Item_Amounts, class UObject* __WorldContext, class UJsonObject** Return_Value);
	static bool Send_Match_Start_Event(class UObject* __WorldContext);
	static bool Send_Match_Finished_Event(bool Had_a_Winner, class UObject* __WorldContext);
	static void Set_Match_Had_Winner(class UJsonObject* Target, const class FString& FieldName, bool Had_a_Winner, class UObject* __WorldContext, class UJsonObject** Return_Value);
	static bool Send_Air_Drop_Landed_Event(const class FString& Drop_Zone_Name, class AActor* Air_Drop_Container, class UObject* __WorldContext);
	static bool Send_Player_Disconnected_Event(class AHumanPlayerController* Player_Controller, class UObject* __WorldContext);
	static bool Send_Server_Measures(class UObject* __WorldContext);
	static bool Finish_Analytics_Event(const class FString& EventName, class UJsonObject* EventData, bool DebugPrint, class UObject* __WorldContext);
	static void Set_Used_Character_Customizations(class UJsonObject* Target, class AHumanPlayerController* Controller, class UObject* __WorldContext, class UJsonObject** Return_Value);
	static void Set_Group_ID_from_Start_of_the_Match(class UJsonObject* Target, const class FString& FieldName, class UObject* __WorldContext, class UJsonObject** Return_Value);
	static void Set_Inventory_Weapons_List(class UJsonObject* Target, const class FString& FieldName, class UInventoryComponent* Inventory, class UObject* __WorldContext, class UJsonObject** Return_Value);
	static void Set_Air_Drop_in_Inventory(class UJsonObject* Target, const class FString& FieldName, class UInventoryComponent* Inventory, class UObject* __WorldContext, class UJsonObject** Return_Value);
	static void Set_Inventory_Consumables_List(class UJsonObject* Target, const class FString& FieldName, class UInventoryComponent* Inventory, class UObject* __WorldContext, class UJsonObject** Return_Value);
	static void Set_Inventory_Weapon_Parts_List(class UJsonObject* Target, const class FString& FieldName, class UInventoryComponent* Inventory, class UObject* __WorldContext, class UJsonObject** Return_Value);
	static void Set_Inventory_Consumable_Parts_List(class UJsonObject* Target, const class FString& FieldName, class UInventoryComponent* Inventory, class UObject* __WorldContext, class UJsonObject** Return_Value);
	static void Set_Waiting_for_Match(class UJsonObject* Target, const class FString& FieldName, class UObject* __WorldContext, class UJsonObject** Return_Value);
	static void Set_Lootables_Accessed(class UJsonObject* Target, const class FString& FieldName, int32 Lootables_Accessed, class UObject* __WorldContext, class UJsonObject** Return_Value);
	static void Set_Current_Weapon_Name(class UJsonObject* Target, const class FString& FieldName, class UInventoryComponent* Inventory, class UObject* __WorldContext, class UJsonObject** Return_Value);
	static void Set_Current_Weapon_Value(class UJsonObject* Target, const class FString& FieldName, class UInventoryComponent* Inventory, class UObject* __WorldContext, class UJsonObject** Return_Value);
	static void Set_All_Weapons_Count(class UJsonObject* Target, const class FString& FieldName, class AHumanPlayerController* Player_Controller, class UObject* __WorldContext, class UJsonObject** Return_Value);
	static bool Send_Shelter_Improvement_Requested_Event(class UClass* Shelter_Slot, class AStash* Stash, class UObject* __WorldContext);
	static bool Send_Shelter_Improvement_Cancelled_Event(class UClass* Shelter_Slot, class AStash* Stash, class UObject* __WorldContext);
	static bool Send_Shelter_Level_Improved_Event(class AStash* Stash, class UObject* __WorldContext);
	static void Set_Shelter_Level(class UJsonObject* Target, const class FString& FieldName, class AStash* Stash, class UObject* __WorldContext, class UJsonObject** Return_Value);
	static bool Send_Item_Crafting_Requested_Event(class UClass* Item_Type, bool bInstaCrafted, bool Crafted_from_Parts, int32 Used_Materials, int32 Used_Parts, class AStash* Stash, int32 Items_Amount, class UObject* __WorldContext);
	static void Set_Parts_Amount(class UJsonObject* Target, const class FString& FieldName, int32 Amount_of_Parts, class UObject* __WorldContext, class UJsonObject** Return_Value);
	static void Set_Crafting_Table_Level(class UJsonObject* Target, const class FString& FieldName, class AStash* Stash, class UObject* __WorldContext, class UJsonObject** Return_Value);
	static bool Send_Item_Crafting_Cancelled_Event(class UClass* Item_Type, bool Crafted_from_Parts, int32 Used_Materials, int32 Used_Parts, class AStash* Stash, class UObject* __WorldContext);
	static void Set_Array_Shelter_Resources_List(class UJsonObject* Target, const class FString& FieldName, TArray<class UClass*>& Item_Types, TArray<int32>& Item_Amounts, class UObject* __WorldContext, class UJsonObject** Return_Value);
	static void Set_Array_Weapons_Count(class UJsonObject* Target, const class FString& FieldName, TArray<class UClass*>& Item_Types, TArray<int32>& Item_Amounts, class UObject* __WorldContext, class UJsonObject** Return_Value);
	static void Set_Array_Ammo_Count(class UJsonObject* Target, const class FString& FieldName, TArray<class UClass*>& Item_Types, TArray<int32>& Item_Amounts, class UObject* __WorldContext, class UJsonObject** Return_Value);
	static void Set_Array_Consumables_Count(class UJsonObject* Target, const class FString& FieldName, TArray<class UClass*>& Item_Types, TArray<int32>& Item_Amounts, class UObject* __WorldContext, class UJsonObject** Return_Value);
	static bool Send_Generator_Used_Event(class UClass* Shelter_Slot, class AStash* Stash, class UObject* __WorldContext);
	static void Set_Accumulated_Resource_Amount(class UJsonObject* Target, const class FString& FieldName, class UClass* Shelter_Slot, class AStash* Stash, class UObject* __WorldContext, class UJsonObject** Return_Value);
	static void Set_Generator_Capacity(class UJsonObject* Target, const class FString& FieldName, class UClass* Shelter_Slot, class AStash* Stash, class UObject* __WorldContext, class UJsonObject** Return_Value);
	static void Set_Generator_Resource_Name(class UJsonObject* Target, const class FString& FieldName, class UClass* Shelter_Slot, class AStash* Stash, class UObject* __WorldContext, class UJsonObject** Return_Value);
	static bool Send_Character_Customized_Event(class UClass* Customization_Slot, class UClass* Customization, class UClass* Customization_Variant, class UObject* __WorldContext);
	static void Set_Customization_Slot_Name(class UJsonObject* Target, const class FString& FieldName, class UClass* Customization_Slot, class UObject* __WorldContext, class UJsonObject** Return_Value);
	static void Set_Customization_Name(class UJsonObject* Target, const class FString& FieldName, class UClass* Customization, class UClass* Customization_Variant, class UObject* __WorldContext, class UJsonObject** Return_Value);
	static bool Send_Screen_Tip_Displayed_Event(const class FString& Tip_Name, class UClass* Tip_Widget, class UObject* __WorldContext);
	static void Set_Tip_Name(class UJsonObject* Target, const class FString& FieldName, const class FString& Tip_Name, class UObject* __WorldContext, class UJsonObject** Return_Value);
	static void Set_Widget_Name(class UJsonObject* Target, const class FString& FieldName, class UClass* Widget_Type, class UObject* __WorldContext, class UJsonObject** Return_Value);
	static bool Send_Group_Invitation_Sent_Event(class UObject* __WorldContext);
	static bool Send_Group_Joined_Event(const class FString& Group_ID, const class FString& Analytics_User_ID, class UObject* __WorldContext);
	static bool Send_Group_Left_Event(const class FString& Group_ID, const class FString& Analytics_User_ID, class UObject* __WorldContext);
	static bool Send_Item_Destroyed_Event(class UClass* Item_Type, class UClass* Widget_Type, class UObject* __WorldContext);
	static void Set_Array_Weapons_List(class UJsonObject* Target, const class FString& FieldName, TArray<class UClass*>& Item_Types, TArray<int32>& Item_Amounts, class UObject* __WorldContext, class UJsonObject** Return_Value);
	static void Set_Array_Ammo_List(class UJsonObject* Target, const class FString& FieldName, TArray<class UClass*>& Item_Types, TArray<int32>& Item_Amounts, class UObject* __WorldContext, class UJsonObject** Return_Value);
	static void Set_Array_Consumables_List(class UJsonObject* Target, const class FString& FieldName, TArray<class UClass*>& Item_Types, TArray<int32>& Item_Amounts, class UObject* __WorldContext, class UJsonObject** Return_Value);
	static void Set_Array_Weapon_Parts_List(class UJsonObject* Target, const class FString& FieldName, TArray<class UClass*>& Item_Types, TArray<int32>& Item_Amounts, class UObject* __WorldContext, class UJsonObject** Return_Value);
	static void Set_Array_Consumable_Parts_List(class UJsonObject* Target, const class FString& FieldName, TArray<class UClass*>& Item_Types, TArray<int32>& Item_Amounts, class UObject* __WorldContext, class UJsonObject** Return_Value);
	static void Set_Array_Weapon_Plans_List(class UJsonObject* Target, const class FString& FieldName, TArray<class UClass*>& Item_Types, TArray<int32>& Item_Amounts, class UObject* __WorldContext, class UJsonObject** Return_Value);
	static void Set_Array_Consumable_Plans_List(class UJsonObject* Target, const class FString& FieldName, TArray<class UClass*>& Item_Types, TArray<int32>& Item_Amounts, class UObject* __WorldContext, class UJsonObject** Return_Value);
	static void Set_Array_Materials_Count(class UJsonObject* Target, const class FString& FieldName, TArray<class UClass*>& Item_Types, TArray<int32>& Item_Amounts, class UObject* __WorldContext, class UJsonObject** Return_Value);
	static void Set_Group_ID_from_Game_Instance(class UJsonObject* Target, const class FString& FieldName, class UObject* __WorldContext, class UJsonObject** Return_Value);
	static void Set_Group_ID_by_Context(class UJsonObject* Target, const class FString& FieldName, class UObject* __WorldContext, class UJsonObject** Return_Value);
	static void Set_Group_Count(class UJsonObject* Target, const class FString& FieldName, class UObject* __WorldContext, class UJsonObject** Return_Value);
	static void Set_Group_ID_Manually(class UJsonObject* Target, const class FString& FieldName, const class FString& Group_ID, class UObject* __WorldContext, class UJsonObject** Return_Value);
	static void Set_Shots_Accuracy(class UJsonObject* Target, const class FString& FieldName, int32 Accuracy, class UObject* __WorldContext, class UJsonObject** Return_Value);
	static void Set_Items_Amount(class UJsonObject* Target, const class FString& FieldName, int32 Items_Amount, class UObject* __WorldContext, class UJsonObject** Return_Value);
	static bool Send_Plank_Removed_Event(class UBP_ADM_DoorBarricade_Component_C* Barricade, class UObject* __WorldContext);
	static bool Send_Vault_Start_Unlocking_Event(float Unlock_Duration, class UObject* __WorldContext);
	static bool Send_Vault_Item_Looted_Event(class UClass* Item_Type, int32 Items_Amount, class UObject* __WorldContext);
	static bool Send_Cube_Solved_Event(int32 Time_Since_Last_Suffle, int32 Moves_Count, class UObject* __WorldContext);
	static bool Send_Cube_Closed_Event(int32 Time_in_Cube_UI, int32 Solved_Button_Used_Count, int32 Shuffle_Button_Used_Count, class UObject* __WorldContext);
	static bool Send_Vault_Spawned_Event(class ABP_ADM_BarredVaultLocation_C* Barred_Vault_Location, class ABP_ADM_BarredVault_C* Barred_Vault, class UObject* __WorldContext);
	static void Set_Equipment_Storage_Content_List(class UJsonObject* Target, const class FString& FieldName, class UEquipmentStorageComponent* Equipemnt_Storage, class UObject* __WorldContext, class UJsonObject** Return_Value);
	static bool Send_Vault_Emptied_Event(class ABP_ADM_BarredVaultLocation_C* Barred_Vault_Location, class ABP_ADM_BarredVault_C* Barred_Vault, class UObject* __WorldContext);
	static class UJsonObject* Set_Insurance_Booster_Status(class UJsonObject* Target, const class FString& FieldName, class APlayerState* Player_State, class UObject* __WorldContext);
	static class UJsonObject* Set_Loot_Booster_Status(class UJsonObject* Target, const class FString& FieldName, class APlayerState* Player_State, class UObject* __WorldContext);
	static class UJsonObject* Set_Crate_Booster_Status(class UJsonObject* Target, const class FString& FieldName, class APlayerState* Player_State, class UObject* __WorldContext);
	static void Set_Kill_Was_Headshot(class UJsonObject* Target, const class FString& FieldName, bool Headshot, class UObject* __WorldContext, class UJsonObject** Return_Value);
	static bool Send_Lobby_Entered_Event(class AHumanCharacter* Character, class UObject* __WorldContext);
	static void Set_Rewards_List(class UJsonObject* Target, const class FString& FieldName, TArray<class FString>& Rewards, class UObject* __WorldContext, class UJsonObject** Return_Value);
	static bool Send_Result_Screen_Event(TArray<class FString>& Rewards, int32 Received_Mateials, int32 TimeSpent, class UObject* __WorldContext);
	static bool Send_Lobby_Player_Focused_Event(class ABP_PlayerState_C* Player_State, class UObject* __WorldContext);
	static void Set_Lobby_Times(class UJsonObject* Target, class UObject* __WorldContext, class UJsonObject** Return_Value);
	static bool Send_Booster_Switched_On_Event(EBooster Booster_Type, bool Player_Is_Ready, bool UsedTicketInsteadOfCrowns, class UObject* __WorldContext);
	static class UJsonObject* Set_Booster_Name(class UJsonObject* Target, const class FString& FieldName, EBooster Booster_Type, bool UsedTicket, class UObject* __WorldContext);
	static class UJsonObject* Set_Booster_Type(class UJsonObject* Target, const class FString& FieldName, EBooster Booster_Type, class UObject* __WorldContext);
	static bool Send_Booster_Switched_Off_Event(EBooster Booster_Type, class UObject* __WorldContext);
	static bool Send_Antenna_Used_Event(int32 Player_Amount, class UObject* __WorldContext);
	static bool Send_Store_Opened_Event(const class FString& Product_ID, class UObject* __WorldContext);
	static bool Send_Shooting_Challenge_Finished_Event(class UClass* Weapon, const class FString& Challange_Name, bool Success, E_ShootingChallengeResult Result, float Time, const TMap<class UClass*, int32>& Rewards, class UObject* __WorldContext);
	static bool Send_Comm_Station_Used_Event(class ABP_AirDropLocation_C* New_Drop_Zone, class UObject* __WorldContext);
	static bool Send_Combination_Lock_Chest_Unlocked_Event(class ABP_ADM_CombinationChest_C* Unlocked_Container, class UObject* __WorldContext);
	static bool Send_Combination_Lock_Chest_Looted_Event(class ABP_ADM_CombinationChest_C* Looted_Container, class UObject* __WorldContext);
	static bool Send_Antenna_Spawned_Event(class ABP_ADM_AntennaLocation_C* Antenna_Location, class UObject* __WorldContext);
	static bool Send_Comm_Station_Spawned_Event(class ABP_ADM_CommStation_Location_C* Comm_Station_Location, class UObject* __WorldContext);
	static bool Send_Combination_Lock_Chest_Spawned_Event(class ABP_ADM_CombinationChest_C* Container, class UObject* __WorldContext);
	static bool Send_Lobby_Started_Event(class UObject* __WorldContext);
	static bool Send_Lobby_Finished_Event(ECloudRequestResult Result, class ABP_PlayerLobby_Base_C* Player_Lobby, class UObject* __WorldContext);
	static bool Send_Match_Cancelled_Event(class UObject* __WorldContext);
	static class UJsonObject* Set_Cloud_Request_Result(class UJsonObject* Target, const class FString& FieldName, ECloudRequestResult Result, class UObject* __WorldContext);
	static bool Send_Gesture_Used_Event(class UClass* Gesture, class UObject* __WorldContext);
	static bool Send_Achievement_Queue_Result_Event(class FName Achievement_ID, float New_Progress, float Old_Progress, int32 Result, class UObject* __WorldContext);
	static class UJsonObject* Set_Character_Stance(class UJsonObject* Target, const class FString& FieldName, class AHumanCharacter* Character, class UObject* __WorldContext);
	static bool Send_Challenge_Assigned_Event(int32 Slot_ID, E_ChallengeManagerState Challenge_Manager_State, class FName Challenge_Name, class UObject* __WorldContext);
	static bool Send_Challenge_Rewards_Claimed_Event(int32 Slot_ID, const class FString& Slot_Category, E_ChallengeManagerState Challenge_Manager_State, class FName Challenge_Name, TArray<struct FChallengeReward>& Challenge_Rewards, class UObject* __WorldContext);
	static bool Send_Challenge_Cancelled_Event(int32 Slot_ID, const class FString& Slot_Category, E_ChallengeManagerState Challenge_Manager_State, class FName Challenge_Name, class UObject* __WorldContext);
	static bool Send_Challenge_Replacement_Event(int32 Slot_ID, E_ChallengeManagerState Challenge_Manager_State, class FName Old_Challenge_Name, class FName New_Challenge_Name, const class FString& Context, class UObject* __WorldContext);
	static bool Send_Challenge_Progress_Set_Event(int32 Slot_ID, const class FString& Slot_Category, E_ChallengeManagerState Challenge_Manager_State, class FName Challenge_Name, int32 New_Progress, class UObject* __WorldContext);
	static bool Send_Shop_Item_Detail_Closed_Event(class UClass* ItemType, int32 ShopTileID, int32 TimeInDetail, class UObject* __WorldContext);
	static class UJsonObject* SetHardCurrencyBalance(class UJsonObject* Target, const class FString& FieldName, class AStash* Stash, class UObject* __WorldContext);
	static bool Send_Shop_Closed_Event(class AStash* Stash, int32 TimeInShop, class UObject* __WorldContext);
	static bool Send_Shop_Entered_Event(class AStash* Stash, class UObject* __WorldContext);
	static void Set_Inventory_Weapons_Skins_List(class UJsonObject* Target, const class FString& FieldName, class UInventoryComponent* Inventory, class UObject* __WorldContext, class UJsonObject** Return_Value);
	static void Set_Array_Weapon_Skins_List(class UJsonObject* Target, const class FString& FieldName, TArray<class UClass*>& Item_Types, TArray<int32>& Item_Amounts, class UObject* __WorldContext, class UJsonObject** Return_Value);
	static bool Send_Charity_Box_Donation_Event(int32 DonatedFood, int32 DonatedInSeason, const class FString& SeasonName, class UObject* __WorldContext);
	static void Set_Stash_Weapons_Skins_List(class UJsonObject* Target, const class FString& FieldName, class AHumanPlayerController* PlayerController, class UObject* __WorldContext, class UJsonObject** Return_Value);
	static void Set_Inventory_Food_Item_Count(class UJsonObject* Target, const class FString& FieldName, class UInventoryComponent* Inventory, class UObject* __WorldContext, class UJsonObject** Return_Value);
	static void Set_All_Food_Item_Count(class UJsonObject* Target, const class FString& FieldName, class AHumanPlayerController* Player_Controller, class UObject* __WorldContext, class UJsonObject** Return_Value);
	static void Set_All_Weapons_List(class UJsonObject* Target, const class FString& FieldName, class AHumanPlayerController* Player_Controller, class UObject* __WorldContext, class UJsonObject** Return_Value);
	static void Set_Array_Currencies_List(class UJsonObject* Target, const class FString& FieldName, TArray<class UClass*>& Item_Types, TArray<int32>& Item_Amounts, class UObject* __WorldContext, class UJsonObject** Return_Value);
	static void Set_Used_Gestures(class UJsonObject* Target, const class FString& Field_Name, class AHumanPlayerController* Controller, class UObject* __WorldContext, class UJsonObject** Return_Value);
	static void Set_All_Currencies_List(class UJsonObject* Target, const class FString& FieldName, class AHumanPlayerController* Player_Controller, class UObject* __WorldContext, class UJsonObject** Return_Value);
	static void Set_Array_Character_Customizations_List(class UJsonObject* Target, const class FString& FieldName, TArray<class UClass*>& Item_Types, TArray<int32>& Item_Amounts, class UObject* __WorldContext, class UJsonObject** Return_Value);
	static void Set_Array_Gestures_List(class UJsonObject* Target, const class FString& FieldName, TArray<class UClass*>& Item_Types, TArray<int32>& Item_Amounts, class UObject* __WorldContext, class UJsonObject** Return_Value);
	static bool Send_Polaroid_Acquired_Event(class UClass* Polaroid_Item, class UObject* __WorldContext);
	static bool Send_Polaroid_Destroyed_Event(class UClass* Polaroid_Item, class UObject* __WorldContext);
	static bool Send_Buried_Cache_Opened_Event(bool Polaroid_in_Inventory, bool Already_Excavated, class UObject* __WorldContext);
	static bool Send_Buried_Cache_Spawned_Event(class ABP_ADM_BuriedCache_C* Buried_Cache, class UObject* __WorldContext);
	static class UJsonObject* Set_Character_Orientation(class UJsonObject* Target, const class FString& FieldName, class AHumanCharacter* Character, class UObject* __WorldContext);
	static bool Send_Polaroid_Observed_Event(class UClass* Polaroid_Item, class UObject* __WorldContext);
	static bool Send_Spectating_Finished(int32 Time, class UObject* __WorldContext);
	static bool Send_Spectating_Switched(int32 TimeSpentSpectating, const class FString& Spectated_Player_Analytics_ID, class UObject* __WorldContext);
	static bool Send_craftingBoosterUsed_Event(class UClass* Item_Type, class UObject* __WorldContext);
	static bool Send_Tutorial_Locations_Collected(const TMap<float, struct FVector>& LocationsCollected, const class FString& Reson, class UObject* __WorldContext);
	static bool Send_Tool_Planted_Event(class UClass* Item_Type, class UObject* __WorldContext);
	static bool Send_Tool_Triggered_Event(class UClass* Item_Type, const class FString& Owner_name, class UObject* __WorldContext);
	static bool Send_Tool_Destroyed_Event(class UClass* Item_Type, const class FString& Owner_name, class UObject* __WorldContext);
	static bool Send_Gained_Battle_Pass_XP_Event(class FName GameplayEventName, class FName SeasonName, bool IsLegacy, int32 GainedBaseXp, int32 GainedBonusXp, class UObject* __WorldContext);
	static class UJsonObject* Add_Item_Descriptor_to_Json_Dictionary(class UJsonObject* Target, class UClass* Class_0, int32 Amount, class UObject* __WorldContext);
	static void Set_Battle_Pass_Season_Name(class UJsonObject* Target, const class FString& FieldName, class FName SeasonNameID, class UObject* __WorldContext, class UJsonObject** Return_Value);
	static void Set_Battle_Pass_Current_Season_Name(class UJsonObject* Target, const class FString& FieldName, class UObject* __WorldContext, class UJsonObject** Return_Value);
	static void Set_Battle_Pass_Premium_Status(class UJsonObject* Target, const class FString& FieldName, class FName SeasonNameID, class UObject* __WorldContext, class UJsonObject** Return_Value);
	static void Set_Battle_Pass_Total_XP(class UJsonObject* Target, const class FString& FieldName, class FName SeasonNameID, class UObject* __WorldContext, class UJsonObject** Return_Value);
	static void Set_Battle_Pass_Level(class UJsonObject* Target, const class FString& FieldName, class FName SeasonNameID, class UObject* __WorldContext, class UJsonObject** Return_Value);
	static void Set_Battle_Pass_XP_within_Level(class UJsonObject* Target, const class FString& FieldName, class FName SeasonNameID, class UObject* __WorldContext, class UJsonObject** Return_Value);
	static bool Send_Purchased_Battle_Pass_Level_Up_Event(int32 XP_Bought, int32 Price, class UObject* __WorldContext);
	static bool Send_Battle_Pass_Status_Event(class UObject* __WorldContext);
	static void Set_Battle_Pass_Rewards_List(class UJsonObject* Target, const class FString& FieldName, TArray<struct FBattlePassLevelRewardFull>& Rewards, bool IsPremiumRewards, class UObject* __WorldContext, class UJsonObject** Return_Value);
	static bool Send_Collected_Battle_Pass_Rewards_Event(TArray<class FName>& Seasons, TArray<struct FS_BattlePassLevelRewardFull>& Free_Rewards, TArray<struct FS_BattlePassLevelRewardFull>& Premium_Rewards, class UObject* __WorldContext);
	static void Set_Match_Events_List(class UJsonObject* Json_Object, const class FString& FieldName, TArray<struct FCloudBattlePassMatchEventInfo>& Events, int32 Booster, class UObject* __WorldContext, class UJsonObject** Json);
	static bool Send_Battle_Pass_Level_Up_Event_from_Shelter(class FName SeasonName, int32 Gained_Levels, int32 Gained_XP, bool Level_Purchased, class UObject* __WorldContext);
	static bool Send_Battle_Pass_Level_Up_Event_from_Result_Screen(class FName Season_Name, bool Premium_Status, int32 Total_XP, int32 Level, int32 XP_within_Level, int32 Gained_Levels, int32 Gained_XP, class UObject* __WorldContext);
	static class UJsonObject* Set_Time_Since_Respawn(class UJsonObject* Target, const class FString& Field_Name, class UObject* __WorldContext);
	static class UJsonObject* Set_GameMode_Name(class UJsonObject* Target, const class FString& Field_Name, class UObject* __WorldContext);
	static bool Send_Consumable_Used(class UClass* Consumable, class APlayerState* Player_State, class UObject* __WorldContext);
	static class UJsonObject* Set_Character_Camera_State(class UJsonObject* Target, const class FString& FieldName, class AHumanCharacter* Character, class UObject* __WorldContext);
	static void Set_Currency_Count(class UJsonObject* Target, const class FString& FieldName, class AHumanPlayerController* Player_Controller, class UClass* CurrencyClass, class UObject* __WorldContext, class UJsonObject** Return_Value);
	static void Set_Crates_List(class UJsonObject* Target, const class FString& FieldName, TMap<class UClass*, struct FLootBoxInfoCloud>& Crates_Cache, class UObject* __WorldContext, class UJsonObject** Return_Value);
	static void Set_Death_Match_Statistic(class UJsonObject* Json_Object, const class FString& FieldName, const struct FStruct_TVTDeathmatchStatistics& Statistic, class UObject* __WorldContext, class UJsonObject** Json);
	static bool Send_Bad_Challenge_Chosen_Event(int32 Slot_ID, EChallengeCategory Challenge_Category, class FName Challenge_Name, E_ChallengeManagerState Challenge_Manager_State, TArray<struct FCloudChallengeSlotInfo>& Cloud_Slots, const TMap<class FName, struct FDateTime>& Cloud_Stats, TArray<class FString>& Log, class UObject* __WorldContext);
	static class UJsonObject* Set_Challenge_Cloud_Slots(class UJsonObject* Target, TArray<struct FCloudChallengeSlotInfo>& Slots, class UObject* __WorldContext);
	static class UJsonObject* Set_Challenge_Cloud_Stats(class UJsonObject* Target, const class FString& FieldName, const TMap<class FName, struct FDateTime>& Stats, class UObject* __WorldContext);
	static bool Send_Duplicate_Challenge_Category_Spotted_Event(EChallengeCategory Challenge_Category, E_ChallengeManagerState Challenge_Manager_State, TArray<struct FCloudChallengeSlotInfo>& Cloud_Slots, const TMap<class FName, struct FDateTime>& Cloud_Stats, TArray<class FString>& Log, class UObject* __WorldContext);
	static bool Send_Leaderboards_Tab_Closed(int32 Time_Spent_In_Leaderboards, EShelterMainTab Initial_Tab, const TMap<E_LeaderboardsStatsTypes, int32>& Focused_Stats, int32 Scrolled_To_First, int32 Scrolled_To_Last, int32 Filtering_AroundPlayer, int32 Filtering_Friends, int32 Filtering_TopTen, class UObject* __WorldContext);
	static void Set_Leaderboard_Stats_Integer_Dictionary(class UJsonObject* Json, const class FString& Field_Name, const TMap<E_LeaderboardsStatsTypes, int32>& StatsIntegerDictionary, class UObject* __WorldContext, class UJsonObject** JSON_Output);
	static void Set_Owned_Titles_List(class UJsonObject* Target, const class FString& FieldName, class ABP_TitlesManager_C* Titles_Manager, class APlayerState* Player_State, class UObject* __WorldContext, class UJsonObject** Return_Value);
	static void Set_Selected_Titles_List(class UJsonObject* Target, const class FString& FieldName, class APlayerState* Player_State, class UObject* __WorldContext, class UJsonObject** Return_Value);
	static void Set_Shelter_Repair_Level(class UJsonObject* Target, class AStash* Stash, class UObject* __WorldContext, class UJsonObject** Return_Value);
	static bool Send_Shelter_Appearance_Changed_Event(class APlayerState* PlayerState, class UObject* __WorldContext);
	static bool Send_Mementos_Spawned_Event(TArray<class UClass*>& Mementos, class UObject* __WorldContext);
	static void Set_Array_Items_List(class UJsonObject* Target, const class FString& FieldName, TArray<class UClass*>& Items, class UObject* __WorldContext, class UJsonObject** Return_Value);
	static bool Send_Memento_Acquired_Event(class UClass* Memento_Item, int32 Memento_Amount, class UObject* __WorldContext);
	static void Set_Stash_Mementos_List(class UJsonObject* Target, const class FString& FieldName, class AStash* Stash, class UObject* __WorldContext, class UJsonObject** Return_Value);
	static void Set_Inventory_Mementos_List(class UJsonObject* Target, const class FString& FieldName, class UInventoryComponent* Inventory, class UObject* __WorldContext, class UJsonObject** Return_Value);
	static bool Send_CommStation_Action_Taken(ECommStationAction Action, class UObject* __WorldContext);
	static bool Send_Phone_Call_Started(class AHumanCharacter* Interacted_Character, class UObject* __WorldContext);
	static bool Send_Phone_Call_Answered(class AHumanCharacter* Interacting_Character, const class FString& EnemyID, class UObject* __WorldContext);
	static bool Send_Phone_Duel_Completed(const class FString& CallerID, const class FString& EnemyID, bool InitiatorWon, class UObject* __WorldContext);
	static bool Send_Phone_Call_Unanswered(const class FString& Caller_User_ID, class UObject* __WorldContext);
	static bool Send_Phone_Duel_Abandoned(const class FString& CallerID, const class FString& EnemyID, class UObject* __WorldContext);
	static bool Send_Signal_Jammer_Used(class UObject* __WorldContext);
	static bool Send_Player_Pinged(const struct FStruct_PingInfo& Ping_Info, class UObject* __WorldContext);
	static bool Send_Signal_Jammer_Ended(int32 PlayersJammed, int32 UniquePlayersJammed, class UObject* __WorldContext);
	static void Set_Match_Weather(class UJsonObject* Json_Object, const class FString& FieldName, class UObject* __WorldContext, class UJsonObject** Json);
	static bool Send_Battle_Pass_Buy_Premium_Closed_Event(class FName SeasonName, bool IsLegacy, bool WasPremiumPurchased, class UObject* __WorldContext);
	static bool Send_Shelter_Left(class AHumanPlayerController* Player_Controller, class UObject* __WorldContext);
	static bool Send_GunFight_Round_Ended(class UBP_GSC_Team_Raid_C* Winning_Team, EGunFightWinReason Win_Reason, const class FString& WinnerSpawnStart, int32 ArenaSettingID, int32 TimeInRound, const class FString& RoundPhase, class UObject* __WorldContext);
	static bool Send_BoobyTrap_Finished(int32 Amt_Time_Triggered, int32 Defusal_Exit_Time, bool Trap_Defused, bool Defusal_Exited, int32 Defusal_Time_Left, int32 Amt_Characters_Damaged, const class FString& Analytics_ID, int32 Trap_Count, class UObject* __WorldContext);
	static bool Send_New_Titles_Unlocked_Event(const TMap<class FName, int32>& NewOwnedTitles, class UObject* __WorldContext);
	static class UJsonObject* SetTitlesList(class UJsonObject* Target, const class FString& FieldName, const TMap<class FName, int32>& NewOwnedTitles, class UObject* __WorldContext);
	static bool SendArmoryTimeSpent(int32 TimeSpent_Seconds, class UObject* __WorldContext);
	static bool Send_ExitTell_Triggered(TArray<class AHumanCharacter*>& Campers, bool TellFired, class UObject* __WorldContext);
	static void Start_ClientSide_Analytics_Event(class UObject* __WorldContext, class UJsonObject** Return_Value);
	static void Send_Review_Completed_Event(int32 ErrorCode, const struct FUserReviewResult& Result, int32 AmountOfReviewsOpened, int32 AmountOfReviewsFulfilled, int32 DaysCounter, const class FString& SourceEvent, class UObject* __WorldContext);
	static bool Send_BoobyTrap_Placed(const struct FVector& Lootable_Location, class UObject* __WorldContext);
	static bool Send_Shelter_DMinusPad_Used(class UObject* __WorldContext);
	static bool Send_Music_Player_Interacted(class UObject* __WorldContext);
	static bool Send_Music_Player_Track_Played(const struct FMusicTrackRow& TrackInfo, class UObject* __WorldContext);
	static bool Send_TicTacToe_Played_Event(int32 Result, const class FString& GameLog, int32 Wins, int32 Losses, class UObject* __WorldContext);
	static bool Send_Shelter_Stash_Interactions(class FName ShelterStashInteraction, class UObject* __WorldContext);
	static bool Send_Favorite_Loadout_Used(const class FString& Called_By, class UInventoryComponent* Inventory, class UObject* __WorldContext);
	static void Set_Ammo_Type_List(class UJsonObject* Target, const class FString& FieldName, class UInventoryComponent* Inventory, class UObject* __WorldContext, class UJsonObject** Return_Value);
	static void Set_Disassembled_Items(class UJsonObject* Target, const class FString& FieldName, int32 Disassembled_items, class UObject* __WorldContext, class UJsonObject** Return_Value);
	static void Set_Inventory_List(class UJsonObject* Target, const class FString& FieldName, class UInventoryComponent* Inventory, class UObject* __WorldContext, class UJsonObject** Return_Value);
	static bool Send_Timed_Safe_Spawned_Event(class AActor* Timed_Safe_Location, class ABP_Lootable_Base_C* Timed_Safe_, TArray<class AActor*>& Timed_Switches, class UObject* __WorldContext);
	static bool Send_Timed_Safe_Looted_Event(class AHumanCharacter* Looting_character, class UObject* __WorldContext);
	static bool Send_Locked_Container_Looted_Event(class AHumanCharacter* Looting_character, bool Did_bombardment_happen, class UObject* __WorldContext);
	static bool Send_Timed_Safe_Switch_Opened(class AActor* Switch, class AActor* Linked_location, class AHumanCharacter* Interacting_Character, class UObject* __WorldContext);
	static bool Send_Locked_Container_Spawned_Event(class ABP_ADM_LockedContainer_Location_C* Locked_container_location, class ABP_ADM_LockedContainer_Crate_C* Locked_crate, class UObject* __WorldContext);
	static bool Send_Lone_Wolf_Button_Pressed(bool LoneWolfButtonState, class UObject* __WorldContext);
	static bool Send_Red_chest_Spawned_Event(class AActor* Red_chest_location, class ABP_Lootable_Base_C* Spawned_red_chest, class UObject* __WorldContext);
	static bool Send_Red_chest_Looted_Event(class UClass* Item_Type, int32 Items_Amount, class AActor* Red_chest_location, class UObject* __WorldContext);
	static void Set_Wardrobe_Customization_Variants_List(class UJsonObject* Target, const class FString& FieldName, class AHumanPlayerController* PlayerController, class UObject* __WorldContext, class UJsonObject** Return_Value);
	static void Set_User_Locale(class UJsonObject* Target, const class FString& Field_Name, const class FString& Locale, class UObject* __WorldContext, class UJsonObject** Return_Value);
	static void Set_Player_Downtime(class AHumanPlayerController* Controller, class UJsonObject* Target, class UObject* __WorldContext);
	static void Set_Elimination_Statistics(class UJsonObject* Target, const class FString& Field_Name, TArray<struct FStruct_GunfightRoundStats>& RoundStatistics, class UObject* __WorldContext, class UJsonObject** Result);
	static bool Send_Cassette_Player_Track_Played(const struct FS_CassetteTrackInfo& CassetteTrackInfo, class UObject* __WorldContext);
	static bool Send_Cassette_Player_Interacted(class UObject* __WorldContext);
	static void Set_Elimination_Score(class UJsonObject* Target, const class FString& Field_Name, TArray<struct FStruct_GunfightRoundStats>& RoundStatistics, class UObject* __WorldContext, class UJsonObject** Result);
	static void Collect_loot_data(class UObject* __WorldContext, TArray<class FString>* List_of_spawned_loot);
	static void Send_Player_Connection_Analytics(class AHumanPlayerController* Controller, class UObject* __WorldContext);
	static void Set_Player_Denied_Hits(class AHumanPlayerController* Controller, class UJsonObject* Target, class UObject* __WorldContext);
	static void Set_Challenge_Rewards_List(TArray<struct FChallengeReward>& Challenge_Rewards, class UObject* __WorldContext, TArray<class UJsonObject*>* Object);
	static void Set_Elimination_Loadout_Stats(class UJsonObject* Target, const class FString& Field_Name, TArray<struct FStruct_Gunfight_LoadoutAnalyticsInfo>& LoadoutsStats, class UObject* __WorldContext, class UJsonObject** Result);
	static void Set_Elimination_Loadout_Dictionary(class UJsonObject*& JsonObjectIn, const class FString& FieldName, const struct FS_GunFightLoadouts_S12& LoadoutsStats, class UObject* __WorldContext, class UJsonObject** JsonObjectOut);
	static bool Send_Elimination_Loadouts_For_Match_Selected(TArray<struct FS_Gunfight_LoadoutSlotInfo>& Loadouts, class UObject* __WorldContext);
	static void Set_Elimination_Match_Loadouts_Dictionary(class UJsonObject*& JsonObjectIn, const class FString& FieldName, TArray<struct FS_GunFightLoadouts_S12>& LoadoutsStats, class UObject* __WorldContext, class UJsonObject** JsonObjectOut);
	static bool Send_Tutorial_Skip_Measures(const struct FVector& End_Location, class UInventoryComponent* Inventory, class AHumanCharacter* Character, class UObject* __WorldContext);
	static void Set_MatchmaikingMatch_ID(class UJsonObject* Target, const class FString& FieldName, class UObject* __WorldContext, class UJsonObject** Return_Value);
	static bool Send_Elimination_Vote_Kick_Ended(class UBP_GSC_Team_C* VotingTeam, const class FString& Kick_result, const class FString& AFK_check_result, const TMap<int32, bool>& PlayerID_To_Vote, const class FString& Kickee, const class FString& Kicker, class UObject* __WorldContext);
	static bool SendPlayerEliminationTelemetry(const TMap<int32, class UJsonObject*>& PlayerTelemetry, const class FString& MatchID, class UObject* __WorldContext);
	static bool Send_Onboarding_Login_Rewards_Claimed_Event(int32 EventDay, TArray<struct FCloudItemInfo>& Rewards, class UObject* __WorldContext);
	static bool SendPlayerEncounterTelemetry(const TMap<float, class UJsonObject*>& PlayerTelemetry, const class FString& MatchID, class UObject* __WorldContext);
	static void Set_All_Active_Booster_Tickets_List(class UJsonObject* Target, const class FString& FieldName, class AHumanPlayerController* Player_Controller, class UObject* __WorldContext, class UJsonObject** Return_Value);
	static void Set_All_Unused_Booster_Tickets_List(class UJsonObject* Target, const class FString& FieldName, class AHumanPlayerController* Player_Controller, class UObject* __WorldContext, class UJsonObject** Return_Value);
	static class UJsonObject* Set_Used_Tickets_Counts(class UJsonObject* Target, const class FString& FieldName, class APlayerState* Player_State, EBooster Booster, class AHumanPlayerController* PlayerController, class UObject* __WorldContext);
	static void Send_Hit_Registration_Event(class AHumanPlayerController* Controller, class UObject* __WorldContext);
	static void Send_Network_Stability_Event(class AHumanPlayerController* Controller, class UObject* __WorldContext);
	static void ParseBattlePassReward_BP_Structure_To_Code(TArray<struct FS_BattlePassLevelRewardFull>& Rewards, class UObject* __WorldContext, TArray<struct FBattlePassLevelRewardFull>* NewParam);
	static void SetPlayerLeaderboardsData(class UJsonObject* Target, class AHumanPlayerController* PlayerController, class UObject* __WorldContext, class UJsonObject** Return_object);
	static class UJsonObject* SetPlayerLeaderboardsSkillRating(const struct FCloudUserStatistics& CloudUserStatistics, class UObject* __WorldContext);
	static class UJsonObject* SetPlayerLeaderboardsRanks(class UBP_OnlineUserLeaderBoardsComponent_C* LeaderboardsComponent, EOnlineGameMode Game_Mode, class UObject* __WorldContext);
	static void IsMatchID_Special(class UObject* __WorldContext, bool* IsSpecial);
	static void Set_Stamina_Consumption_Dict(class UJsonObject* Target_, const class FString& FieldName, class AHumanCharacter* Char_, class UObject* __WorldContext, class UJsonObject** Return_Value);
	static bool SendNewsAnalytics(TArray<struct FS_NewsAnalyticsStructure>& AnalyticsData, class UObject* __WorldContext);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BP_AnalyticsLibrary_C">();
	}
	static class UBP_AnalyticsLibrary_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UBP_AnalyticsLibrary_C>();
	}
};
static_assert(alignof(UBP_AnalyticsLibrary_C) == 0x000008, "Wrong alignment on UBP_AnalyticsLibrary_C");
static_assert(sizeof(UBP_AnalyticsLibrary_C) == 0x000028, "Wrong size on UBP_AnalyticsLibrary_C");

}

