#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: UI_Options_LicenseInfo

#include "Basic.hpp"

#include "SlateCore_structs.hpp"
#include "CoreUObject_structs.hpp"


namespace SDK::Params
{

// Function UI_Options_LicenseInfo.UI_Options_LicenseInfo_C.ExecuteUbergraph_UI_Options_LicenseInfo
// 0x0034 (0x0034 - 0x0000)
struct UI_Options_LicenseInfo_C_ExecuteUbergraph_UI_Options_LicenseInfo final
{
public:
	int32                                         EntryPoint;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TDelegate<void(float AxisValue)>              K2Node_CreateDelegate_OutputDelegate;              // 0x0004(0x0010)(ZeroConstructor, NoDestructor)
	TDelegate<void(float AxisValue)>              K2Node_CreateDelegate_OutputDelegate_1;            // 0x0014(0x0010)(ZeroConstructor, NoDestructor)
	float                                         K2Node_CustomEvent_AxisValue_1;                    // 0x0024(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_CustomEvent_AxisValue;                      // 0x0028(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue;          // 0x002C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue_1;        // 0x0030(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(UI_Options_LicenseInfo_C_ExecuteUbergraph_UI_Options_LicenseInfo) == 0x000004, "Wrong alignment on UI_Options_LicenseInfo_C_ExecuteUbergraph_UI_Options_LicenseInfo");
static_assert(sizeof(UI_Options_LicenseInfo_C_ExecuteUbergraph_UI_Options_LicenseInfo) == 0x000034, "Wrong size on UI_Options_LicenseInfo_C_ExecuteUbergraph_UI_Options_LicenseInfo");
static_assert(offsetof(UI_Options_LicenseInfo_C_ExecuteUbergraph_UI_Options_LicenseInfo, EntryPoint) == 0x000000, "Member 'UI_Options_LicenseInfo_C_ExecuteUbergraph_UI_Options_LicenseInfo::EntryPoint' has a wrong offset!");
static_assert(offsetof(UI_Options_LicenseInfo_C_ExecuteUbergraph_UI_Options_LicenseInfo, K2Node_CreateDelegate_OutputDelegate) == 0x000004, "Member 'UI_Options_LicenseInfo_C_ExecuteUbergraph_UI_Options_LicenseInfo::K2Node_CreateDelegate_OutputDelegate' has a wrong offset!");
static_assert(offsetof(UI_Options_LicenseInfo_C_ExecuteUbergraph_UI_Options_LicenseInfo, K2Node_CreateDelegate_OutputDelegate_1) == 0x000014, "Member 'UI_Options_LicenseInfo_C_ExecuteUbergraph_UI_Options_LicenseInfo::K2Node_CreateDelegate_OutputDelegate_1' has a wrong offset!");
static_assert(offsetof(UI_Options_LicenseInfo_C_ExecuteUbergraph_UI_Options_LicenseInfo, K2Node_CustomEvent_AxisValue_1) == 0x000024, "Member 'UI_Options_LicenseInfo_C_ExecuteUbergraph_UI_Options_LicenseInfo::K2Node_CustomEvent_AxisValue_1' has a wrong offset!");
static_assert(offsetof(UI_Options_LicenseInfo_C_ExecuteUbergraph_UI_Options_LicenseInfo, K2Node_CustomEvent_AxisValue) == 0x000028, "Member 'UI_Options_LicenseInfo_C_ExecuteUbergraph_UI_Options_LicenseInfo::K2Node_CustomEvent_AxisValue' has a wrong offset!");
static_assert(offsetof(UI_Options_LicenseInfo_C_ExecuteUbergraph_UI_Options_LicenseInfo, CallFunc_Multiply_FloatFloat_ReturnValue) == 0x00002C, "Member 'UI_Options_LicenseInfo_C_ExecuteUbergraph_UI_Options_LicenseInfo::CallFunc_Multiply_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(UI_Options_LicenseInfo_C_ExecuteUbergraph_UI_Options_LicenseInfo, CallFunc_Multiply_FloatFloat_ReturnValue_1) == 0x000030, "Member 'UI_Options_LicenseInfo_C_ExecuteUbergraph_UI_Options_LicenseInfo::CallFunc_Multiply_FloatFloat_ReturnValue_1' has a wrong offset!");

// Function UI_Options_LicenseInfo.UI_Options_LicenseInfo_C.ScrollText
// 0x0004 (0x0004 - 0x0000)
struct UI_Options_LicenseInfo_C_ScrollText final
{
public:
	float                                         AxisValue;                                         // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(UI_Options_LicenseInfo_C_ScrollText) == 0x000004, "Wrong alignment on UI_Options_LicenseInfo_C_ScrollText");
static_assert(sizeof(UI_Options_LicenseInfo_C_ScrollText) == 0x000004, "Wrong size on UI_Options_LicenseInfo_C_ScrollText");
static_assert(offsetof(UI_Options_LicenseInfo_C_ScrollText, AxisValue) == 0x000000, "Member 'UI_Options_LicenseInfo_C_ScrollText::AxisValue' has a wrong offset!");

// Function UI_Options_LicenseInfo.UI_Options_LicenseInfo_C.LookUpRate
// 0x0004 (0x0004 - 0x0000)
struct UI_Options_LicenseInfo_C_LookUpRate final
{
public:
	float                                         AxisValue;                                         // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(UI_Options_LicenseInfo_C_LookUpRate) == 0x000004, "Wrong alignment on UI_Options_LicenseInfo_C_LookUpRate");
static_assert(sizeof(UI_Options_LicenseInfo_C_LookUpRate) == 0x000004, "Wrong size on UI_Options_LicenseInfo_C_LookUpRate");
static_assert(offsetof(UI_Options_LicenseInfo_C_LookUpRate, AxisValue) == 0x000000, "Member 'UI_Options_LicenseInfo_C_LookUpRate::AxisValue' has a wrong offset!");

// Function UI_Options_LicenseInfo.UI_Options_LicenseInfo_C.Scroll
// 0x006C (0x006C - 0x0000)
struct UI_Options_LicenseInfo_C_Scroll final
{
public:
	float                                         Delta;                                             // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FGeometry                              CallFunc_GetCachedGeometry_ReturnValue;            // 0x0004(0x0038)(ConstParm, IsPlainOldData, NoDestructor)
	float                                         CallFunc_GetScrollOffset_ReturnValue;              // 0x003C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector2D                              CallFunc_GetLocalSize_ReturnValue;                 // 0x0040(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Add_FloatFloat_ReturnValue;               // 0x0048(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector2D_X;                          // 0x004C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector2D_Y;                          // 0x0050(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector2D                              CallFunc_GetDesiredSize_ReturnValue;               // 0x0054(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector2D_X_1;                        // 0x005C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector2D_Y_1;                        // 0x0060(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Subtract_FloatFloat_ReturnValue;          // 0x0064(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_FClamp_ReturnValue;                       // 0x0068(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(UI_Options_LicenseInfo_C_Scroll) == 0x000004, "Wrong alignment on UI_Options_LicenseInfo_C_Scroll");
static_assert(sizeof(UI_Options_LicenseInfo_C_Scroll) == 0x00006C, "Wrong size on UI_Options_LicenseInfo_C_Scroll");
static_assert(offsetof(UI_Options_LicenseInfo_C_Scroll, Delta) == 0x000000, "Member 'UI_Options_LicenseInfo_C_Scroll::Delta' has a wrong offset!");
static_assert(offsetof(UI_Options_LicenseInfo_C_Scroll, CallFunc_GetCachedGeometry_ReturnValue) == 0x000004, "Member 'UI_Options_LicenseInfo_C_Scroll::CallFunc_GetCachedGeometry_ReturnValue' has a wrong offset!");
static_assert(offsetof(UI_Options_LicenseInfo_C_Scroll, CallFunc_GetScrollOffset_ReturnValue) == 0x00003C, "Member 'UI_Options_LicenseInfo_C_Scroll::CallFunc_GetScrollOffset_ReturnValue' has a wrong offset!");
static_assert(offsetof(UI_Options_LicenseInfo_C_Scroll, CallFunc_GetLocalSize_ReturnValue) == 0x000040, "Member 'UI_Options_LicenseInfo_C_Scroll::CallFunc_GetLocalSize_ReturnValue' has a wrong offset!");
static_assert(offsetof(UI_Options_LicenseInfo_C_Scroll, CallFunc_Add_FloatFloat_ReturnValue) == 0x000048, "Member 'UI_Options_LicenseInfo_C_Scroll::CallFunc_Add_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(UI_Options_LicenseInfo_C_Scroll, CallFunc_BreakVector2D_X) == 0x00004C, "Member 'UI_Options_LicenseInfo_C_Scroll::CallFunc_BreakVector2D_X' has a wrong offset!");
static_assert(offsetof(UI_Options_LicenseInfo_C_Scroll, CallFunc_BreakVector2D_Y) == 0x000050, "Member 'UI_Options_LicenseInfo_C_Scroll::CallFunc_BreakVector2D_Y' has a wrong offset!");
static_assert(offsetof(UI_Options_LicenseInfo_C_Scroll, CallFunc_GetDesiredSize_ReturnValue) == 0x000054, "Member 'UI_Options_LicenseInfo_C_Scroll::CallFunc_GetDesiredSize_ReturnValue' has a wrong offset!");
static_assert(offsetof(UI_Options_LicenseInfo_C_Scroll, CallFunc_BreakVector2D_X_1) == 0x00005C, "Member 'UI_Options_LicenseInfo_C_Scroll::CallFunc_BreakVector2D_X_1' has a wrong offset!");
static_assert(offsetof(UI_Options_LicenseInfo_C_Scroll, CallFunc_BreakVector2D_Y_1) == 0x000060, "Member 'UI_Options_LicenseInfo_C_Scroll::CallFunc_BreakVector2D_Y_1' has a wrong offset!");
static_assert(offsetof(UI_Options_LicenseInfo_C_Scroll, CallFunc_Subtract_FloatFloat_ReturnValue) == 0x000064, "Member 'UI_Options_LicenseInfo_C_Scroll::CallFunc_Subtract_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(UI_Options_LicenseInfo_C_Scroll, CallFunc_FClamp_ReturnValue) == 0x000068, "Member 'UI_Options_LicenseInfo_C_Scroll::CallFunc_FClamp_ReturnValue' has a wrong offset!");

}

