#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_PlayerController_TomatoFight

#include "Basic.hpp"

#include "CoreUObject_structs.hpp"
#include "S_CustomMapMarker_Optimized_structs.hpp"
#include "S_CustomMapMarker_structs.hpp"
#include "Flame_structs.hpp"
#include "Engine_structs.hpp"
#include "ERaidNotificationType_structs.hpp"


namespace SDK::Params
{

// Function BP_PlayerController_TomatoFight.BP_PlayerController_TomatoFight_C.ExecuteUbergraph_BP_PlayerController_TomatoFight
// 0x03D0 (0x03D0 - 0x0000)
struct BP_PlayerController_TomatoFight_C_ExecuteUbergraph_BP_PlayerController_TomatoFight final
{
public:
	int32                                         EntryPoint;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0004(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue_1;                    // 0x0005(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsDedicatedServer_ReturnValue;            // 0x0006(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsServer_ReturnValue;                     // 0x0007(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	class AGameModeBase*                          CallFunc_GetGameMode_ReturnValue;                  // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ABP_GameMode_TomatoFight_C*             K2Node_DynamicCast_AsBP_Game_Mode_Tomato_Fight;    // 0x0010(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0018(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_CustomEvent_LocalPlayerWins;                // 0x0019(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Is_Attacker_Is_Attacker;                  // 0x001A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanAND_ReturnValue;                   // 0x001B(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue_2;                    // 0x001C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_1D[0x3];                                       // 0x001D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   K2Node_CustomEvent_Title;                          // 0x0020(0x0018)()
	class FText                                   K2Node_CustomEvent_Reason;                         // 0x0038(0x0018)()
	ERaidNotificationType                         K2Node_CustomEvent_Type;                           // 0x0050(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_51[0x3];                                       // 0x0051(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         K2Node_CustomEvent_Round_Time_1;                   // 0x0054(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         K2Node_CustomEvent_Attackers_Won_Rounds_1;         // 0x0058(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         K2Node_CustomEvent_Defenders_Won_Rounds_1;         // 0x005C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsServer_ReturnValue_1;                   // 0x0060(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue_3;                    // 0x0061(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_62[0x2];                                       // 0x0062(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Temp_int_Array_Index_Variable;                     // 0x0064(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         K2Node_CustomEvent_Attackers_Won_Rounds;           // 0x0068(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         K2Node_CustomEvent_Defenders_Won_Rounds;           // 0x006C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue_4;                    // 0x0070(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_71[0x7];                                       // 0x0071(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UUI_GunFight_MatchProgress_C*           CallFunc_Create_ReturnValue;                       // 0x0078(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UUI_Raid_Notification_C*                CallFunc_Create_ReturnValue_1;                     // 0x0080(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x0088(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x008C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue_5;                    // 0x0090(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_91[0x7];                                       // 0x0091(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UUI_GunFight_PreRoundCountDown_InputBlock_C* CallFunc_Create_ReturnValue_2;                     // 0x0098(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Array_Index_Variable_1;                   // 0x00A0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         K2Node_CustomEvent_Round_Starts_In_1;              // 0x00A4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UUI_Raid_WaitingForMatchStart_C*        CallFunc_Create_ReturnValue_3;                     // 0x00A8(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue_6;                    // 0x00B0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue_7;                    // 0x00B1(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue_8;                    // 0x00B2(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_B3[0x1];                                       // 0x00B3(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         K2Node_CustomEvent_Time;                           // 0x00B4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_CustomEvent_All_Connected;                  // 0x00B8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_B9[0x3];                                       // 0x00B9(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         K2Node_CustomEvent_Round_Time;                     // 0x00BC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_CustomEvent_Is_Objective_Phase;             // 0x00C0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_C1[0x3];                                       // 0x00C1(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         K2Node_CustomEvent_Round_Starts_In;                // 0x00C4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue_9;                    // 0x00C8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsDedicatedServer_ReturnValue_1;          // 0x00C9(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue_10;                   // 0x00CA(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_CB[0x5];                                       // 0x00CB(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	class AHumanCharacter*                        K2Node_Event_Killer;                               // 0x00D0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AHumanCharacter*                        K2Node_Event_Victim;                               // 0x00D8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UClass*                                 K2Node_Event_Instigating_Item;                     // 0x00E0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_Event_Headshot;                             // 0x00E8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_Event_Teamkill;                             // 0x00E9(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_EA[0x6];                                       // 0x00EA(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class UUI_TomatoFight_ScorePopUp_C*           CallFunc_Create_ReturnValue_4;                     // 0x00F0(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue_11;                   // 0x00F8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue_12;                   // 0x00F9(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_FA[0x6];                                       // 0x00FA(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class ABP_PlayerState_C*                      K2Node_DynamicCast_AsBP_Player_State;              // 0x0100(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess_1;                     // 0x0108(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_109[0x3];                                      // 0x0109(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Temp_int_Array_Index_Variable_2;                   // 0x010C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable_1;                  // 0x0110(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue_13;                   // 0x0114(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_115[0x3];                                      // 0x0115(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Add_IntInt_ReturnValue_1;                 // 0x0118(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsDedicatedServer_ReturnValue_2;          // 0x011C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_11D[0x3];                                      // 0x011D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class AGameStateBase*                         CallFunc_GetGameState_ReturnValue;                 // 0x0120(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ABP_GameState_TomatoFight_C*            K2Node_DynamicCast_AsBP_Game_State_Tomato_Fight;   // 0x0128(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess_2;                     // 0x0130(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue_14;                   // 0x0131(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_Event_Hide;                                 // 0x0132(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_133[0x5];                                      // 0x0133(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	class UUI_GunFight_MatchProgress_C*           CallFunc_Create_ReturnValue_5;                     // 0x0138(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 K2Node_CustomEvent_Located_Actor_1;                // 0x0140(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 K2Node_CustomEvent_Located_Actor;                  // 0x0148(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsDedicatedServer_ReturnValue_3;          // 0x0150(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_CustomEvent_New_Invincibility;              // 0x0151(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_152[0x6];                                      // 0x0152(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class APawn*                                  CallFunc_K2_GetPawn_ReturnValue;                   // 0x0158(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ABP_Character_Teams_C*                  K2Node_DynamicCast_AsBP_Character_Teams;           // 0x0160(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess_3;                     // 0x0168(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_169[0x7];                                      // 0x0169(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class ABP_Character_C*                        K2Node_CustomEvent_Possessed_Character;            // 0x0170(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ABP_Character_Teams_C*                  K2Node_DynamicCast_AsBP_Character_Teams_1;         // 0x0178(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess_4;                     // 0x0180(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue_15;                   // 0x0181(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue_16;                   // 0x0182(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_SetInvincibility_ReturnValue;             // 0x0183(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_SetInvincibility_ReturnValue_1;           // 0x0184(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_185[0x3];                                      // 0x0185(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class ABP_Character_C*                        K2Node_CustomEvent_Character_to_mark;              // 0x0188(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue_17;                   // 0x0190(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue_18;                   // 0x0191(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_192[0x6];                                      // 0x0192(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class ABP_PlayerState_C*                      K2Node_DynamicCast_AsBP_Player_State_1;            // 0x0198(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess_5;                     // 0x01A0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_1A1[0x7];                                      // 0x01A1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class ABP_PlayerState_C*>              CallFunc_FindTeammates_TeammatesPlayerStates;      // 0x01A8(0x0010)(ReferenceParm)
	class AGameModeBase*                          CallFunc_GetGameMode_ReturnValue_1;                // 0x01B8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Array_Contains_ReturnValue;               // 0x01C0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_1C1[0x7];                                      // 0x01C1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class ABP_GameMode_TomatoFight_C*             K2Node_DynamicCast_AsBP_Game_Mode_Tomato_Fight_1;  // 0x01C8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess_6;                     // 0x01D0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsDedicatedServer_ReturnValue_4;          // 0x01D1(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_1D2[0x6];                                      // 0x01D2(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class AGameStateBase*                         CallFunc_GetGameState_ReturnValue_1;               // 0x01D8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ABP_GameState_TomatoFight_C*            K2Node_DynamicCast_AsBP_Game_State_Tomato_Fight_1; // 0x01E0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess_7;                     // 0x01E8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_1E9[0x7];                                      // 0x01E9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class ABP_Character_C*                        K2Node_CustomEvent_Marked_character;               // 0x01F0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue_19;                   // 0x01F8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue_20;                   // 0x01F9(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_1FA[0x6];                                      // 0x01FA(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class UWidgetComponent*                       CallFunc_Array_Get_Item;                           // 0x0200(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x0208(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue_21;                   // 0x020C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_20D[0x3];                                      // 0x020D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UUserWidget*                            CallFunc_GetUserWidgetObject_ReturnValue;          // 0x0210(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UUI_TvT_PlayerWidget_C*                 K2Node_DynamicCast_AsUI_Tv_T_Player_Widget;        // 0x0218(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess_8;                     // 0x0220(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Array_RemoveItem_ReturnValue;             // 0x0221(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_EqualEqual_ObjectObject_ReturnValue;      // 0x0222(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Less_ByteByte_ReturnValue;                // 0x0223(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_224[0x4];                                      // 0x0224(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class ABP_Character_C*                        K2Node_Event_Possessed_Character;                  // 0x0228(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ABP_Character_Teams_C*                  K2Node_DynamicCast_AsBP_Character_Teams_2;         // 0x0230(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess_9;                     // 0x0238(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue_22;                   // 0x0239(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_23A[0x6];                                      // 0x023A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class ABP_PlayerState_Teams_C*                K2Node_DynamicCast_AsBP_Player_State_Teams;        // 0x0240(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess_10;                    // 0x0248(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_249[0x7];                                      // 0x0249(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             CallFunc_MakeTransform_ReturnValue;                // 0x0250(0x0030)(IsPlainOldData, NoDestructor)
	class UWidgetComponent*                       CallFunc_Array_Get_Item_1;                         // 0x0280(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UWidgetComponent*                       CallFunc_AddComponent_ReturnValue;                 // 0x0288(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UUserWidget*                            CallFunc_GetUserWidgetObject_ReturnValue_1;        // 0x0290(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Add_ReturnValue;                    // 0x0298(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue_23;                   // 0x029C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_29D[0x3];                                      // 0x029D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UUserWidget*                            CallFunc_GetUserWidgetObject_ReturnValue_2;        // 0x02A0(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_K2_AttachToComponent_ReturnValue;         // 0x02A8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_2A9[0x7];                                      // 0x02A9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UUI_TvT_PlayerWidget_C*                 K2Node_DynamicCast_AsUI_Tv_T_Player_Widget_1;      // 0x02B0(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess_11;                    // 0x02B8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_2B9[0x3];                                      // 0x02B9(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Array_Length_ReturnValue_1;               // 0x02BC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x02C0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_2C1[0x3];                                      // 0x02C1(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	TDelegate<void(class ABP_Character_C* Possessed_Character)> K2Node_CreateDelegate_OutputDelegate;              // 0x02C4(0x0010)(ZeroConstructor, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue_24;                   // 0x02D4(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_2D5[0x3];                                      // 0x02D5(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class AGameModeBase*                          CallFunc_GetGameMode_ReturnValue_2;                // 0x02D8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ABP_GameMode_TomatoFight_C*             K2Node_DynamicCast_AsBP_Game_Mode_Tomato_Fight_2;  // 0x02E0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess_12;                    // 0x02E8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_2E9[0x7];                                      // 0x02E9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UUI_GunFight_KickTeamkiller_C*          CallFunc_Create_ReturnValue_6;                     // 0x02F0(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AHumanPlayerCharacter*                  CallFunc_GetHumanCharacter_ReturnValue;            // 0x02F8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue_25;                   // 0x0300(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_301[0x7];                                      // 0x0301(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 K2Node_CustomEvent_Match_ID;                       // 0x0308(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class UGameInstance*                          CallFunc_GetGameInstance_ReturnValue;              // 0x0318(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UFlameGameInstance*                     K2Node_DynamicCast_AsFlame_Game_Instance;          // 0x0320(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess_13;                    // 0x0328(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_329[0x3];                                      // 0x0329(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	TDelegate<void()>                             K2Node_CreateDelegate_OutputDelegate_1;            // 0x032C(0x0010)(ZeroConstructor, NoDestructor)
	uint8                                         Pad_33C[0x4];                                      // 0x033C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTimerHandle                           CallFunc_K2_SetTimerDelegate_ReturnValue;          // 0x0340(0x0008)(NoDestructor, HasGetValueTypeHash)
	TArray<class UUI_SelectionWheel_C*>           CallFunc_GetAllWidgetsOfClass_FoundWidgets;        // 0x0348(0x0010)(ReferenceParm, ContainsInstancedReference)
	class UUI_SelectionWheel_C*                   CallFunc_Array_Get_Item_2;                         // 0x0358(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue_2;               // 0x0360(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue_1;                // 0x0364(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_365[0x3];                                      // 0x0365(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class AGameStateBase*                         CallFunc_GetGameState_ReturnValue_2;               // 0x0368(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AHUD*                                   CallFunc_GetHUD_ReturnValue;                       // 0x0370(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ABP_GameState_TomatoFight_C*            K2Node_DynamicCast_AsBP_Game_State_Tomato_Fight_2; // 0x0378(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess_14;                    // 0x0380(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_381[0x7];                                      // 0x0381(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AFlameHUD*                              K2Node_DynamicCast_AsFlame_HUD;                    // 0x0388(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess_15;                    // 0x0390(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_391[0x7];                                      // 0x0391(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UUI_Crosshair_C*                        K2Node_DynamicCast_AsUI_Crosshair;                 // 0x0398(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess_16;                    // 0x03A0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_CustomEvent_Disable_1;                      // 0x03A1(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsMoveInputIgnored_ReturnValue;           // 0x03A2(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_3A3[0x1];                                      // 0x03A3(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   K2Node_CustomEvent_ScoreEvent;                     // 0x03A4(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_Event_DeltaSeconds;                         // 0x03AC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsMoveInputIgnored_ReturnValue_1;         // 0x03B0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_NotEqual_BoolBool_ReturnValue;            // 0x03B1(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_3B2[0x2];                                      // 0x03B2(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Temp_int_Loop_Counter_Variable_2;                  // 0x03B4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_CustomEvent_Disable;                        // 0x03B8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_NotEqual_BoolBool_ReturnValue_1;          // 0x03B9(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Less_IntInt_ReturnValue_2;                // 0x03BA(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_3BB[0x1];                                      // 0x03BB(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Add_IntInt_ReturnValue_2;                 // 0x03BC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ENetRole                                      CallFunc_GetLocalRole_ReturnValue;                 // 0x03C0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue;          // 0x03C1(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_PlayerController_TomatoFight_C_ExecuteUbergraph_BP_PlayerController_TomatoFight) == 0x000010, "Wrong alignment on BP_PlayerController_TomatoFight_C_ExecuteUbergraph_BP_PlayerController_TomatoFight");
static_assert(sizeof(BP_PlayerController_TomatoFight_C_ExecuteUbergraph_BP_PlayerController_TomatoFight) == 0x0003D0, "Wrong size on BP_PlayerController_TomatoFight_C_ExecuteUbergraph_BP_PlayerController_TomatoFight");
static_assert(offsetof(BP_PlayerController_TomatoFight_C_ExecuteUbergraph_BP_PlayerController_TomatoFight, EntryPoint) == 0x000000, "Member 'BP_PlayerController_TomatoFight_C_ExecuteUbergraph_BP_PlayerController_TomatoFight::EntryPoint' has a wrong offset!");
static_assert(offsetof(BP_PlayerController_TomatoFight_C_ExecuteUbergraph_BP_PlayerController_TomatoFight, CallFunc_IsValid_ReturnValue) == 0x000004, "Member 'BP_PlayerController_TomatoFight_C_ExecuteUbergraph_BP_PlayerController_TomatoFight::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerController_TomatoFight_C_ExecuteUbergraph_BP_PlayerController_TomatoFight, CallFunc_IsValid_ReturnValue_1) == 0x000005, "Member 'BP_PlayerController_TomatoFight_C_ExecuteUbergraph_BP_PlayerController_TomatoFight::CallFunc_IsValid_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_PlayerController_TomatoFight_C_ExecuteUbergraph_BP_PlayerController_TomatoFight, CallFunc_IsDedicatedServer_ReturnValue) == 0x000006, "Member 'BP_PlayerController_TomatoFight_C_ExecuteUbergraph_BP_PlayerController_TomatoFight::CallFunc_IsDedicatedServer_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerController_TomatoFight_C_ExecuteUbergraph_BP_PlayerController_TomatoFight, CallFunc_IsServer_ReturnValue) == 0x000007, "Member 'BP_PlayerController_TomatoFight_C_ExecuteUbergraph_BP_PlayerController_TomatoFight::CallFunc_IsServer_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerController_TomatoFight_C_ExecuteUbergraph_BP_PlayerController_TomatoFight, CallFunc_GetGameMode_ReturnValue) == 0x000008, "Member 'BP_PlayerController_TomatoFight_C_ExecuteUbergraph_BP_PlayerController_TomatoFight::CallFunc_GetGameMode_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerController_TomatoFight_C_ExecuteUbergraph_BP_PlayerController_TomatoFight, K2Node_DynamicCast_AsBP_Game_Mode_Tomato_Fight) == 0x000010, "Member 'BP_PlayerController_TomatoFight_C_ExecuteUbergraph_BP_PlayerController_TomatoFight::K2Node_DynamicCast_AsBP_Game_Mode_Tomato_Fight' has a wrong offset!");
static_assert(offsetof(BP_PlayerController_TomatoFight_C_ExecuteUbergraph_BP_PlayerController_TomatoFight, K2Node_DynamicCast_bSuccess) == 0x000018, "Member 'BP_PlayerController_TomatoFight_C_ExecuteUbergraph_BP_PlayerController_TomatoFight::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(BP_PlayerController_TomatoFight_C_ExecuteUbergraph_BP_PlayerController_TomatoFight, K2Node_CustomEvent_LocalPlayerWins) == 0x000019, "Member 'BP_PlayerController_TomatoFight_C_ExecuteUbergraph_BP_PlayerController_TomatoFight::K2Node_CustomEvent_LocalPlayerWins' has a wrong offset!");
static_assert(offsetof(BP_PlayerController_TomatoFight_C_ExecuteUbergraph_BP_PlayerController_TomatoFight, CallFunc_Is_Attacker_Is_Attacker) == 0x00001A, "Member 'BP_PlayerController_TomatoFight_C_ExecuteUbergraph_BP_PlayerController_TomatoFight::CallFunc_Is_Attacker_Is_Attacker' has a wrong offset!");
static_assert(offsetof(BP_PlayerController_TomatoFight_C_ExecuteUbergraph_BP_PlayerController_TomatoFight, CallFunc_BooleanAND_ReturnValue) == 0x00001B, "Member 'BP_PlayerController_TomatoFight_C_ExecuteUbergraph_BP_PlayerController_TomatoFight::CallFunc_BooleanAND_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerController_TomatoFight_C_ExecuteUbergraph_BP_PlayerController_TomatoFight, CallFunc_IsValid_ReturnValue_2) == 0x00001C, "Member 'BP_PlayerController_TomatoFight_C_ExecuteUbergraph_BP_PlayerController_TomatoFight::CallFunc_IsValid_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BP_PlayerController_TomatoFight_C_ExecuteUbergraph_BP_PlayerController_TomatoFight, K2Node_CustomEvent_Title) == 0x000020, "Member 'BP_PlayerController_TomatoFight_C_ExecuteUbergraph_BP_PlayerController_TomatoFight::K2Node_CustomEvent_Title' has a wrong offset!");
static_assert(offsetof(BP_PlayerController_TomatoFight_C_ExecuteUbergraph_BP_PlayerController_TomatoFight, K2Node_CustomEvent_Reason) == 0x000038, "Member 'BP_PlayerController_TomatoFight_C_ExecuteUbergraph_BP_PlayerController_TomatoFight::K2Node_CustomEvent_Reason' has a wrong offset!");
static_assert(offsetof(BP_PlayerController_TomatoFight_C_ExecuteUbergraph_BP_PlayerController_TomatoFight, K2Node_CustomEvent_Type) == 0x000050, "Member 'BP_PlayerController_TomatoFight_C_ExecuteUbergraph_BP_PlayerController_TomatoFight::K2Node_CustomEvent_Type' has a wrong offset!");
static_assert(offsetof(BP_PlayerController_TomatoFight_C_ExecuteUbergraph_BP_PlayerController_TomatoFight, K2Node_CustomEvent_Round_Time_1) == 0x000054, "Member 'BP_PlayerController_TomatoFight_C_ExecuteUbergraph_BP_PlayerController_TomatoFight::K2Node_CustomEvent_Round_Time_1' has a wrong offset!");
static_assert(offsetof(BP_PlayerController_TomatoFight_C_ExecuteUbergraph_BP_PlayerController_TomatoFight, K2Node_CustomEvent_Attackers_Won_Rounds_1) == 0x000058, "Member 'BP_PlayerController_TomatoFight_C_ExecuteUbergraph_BP_PlayerController_TomatoFight::K2Node_CustomEvent_Attackers_Won_Rounds_1' has a wrong offset!");
static_assert(offsetof(BP_PlayerController_TomatoFight_C_ExecuteUbergraph_BP_PlayerController_TomatoFight, K2Node_CustomEvent_Defenders_Won_Rounds_1) == 0x00005C, "Member 'BP_PlayerController_TomatoFight_C_ExecuteUbergraph_BP_PlayerController_TomatoFight::K2Node_CustomEvent_Defenders_Won_Rounds_1' has a wrong offset!");
static_assert(offsetof(BP_PlayerController_TomatoFight_C_ExecuteUbergraph_BP_PlayerController_TomatoFight, CallFunc_IsServer_ReturnValue_1) == 0x000060, "Member 'BP_PlayerController_TomatoFight_C_ExecuteUbergraph_BP_PlayerController_TomatoFight::CallFunc_IsServer_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_PlayerController_TomatoFight_C_ExecuteUbergraph_BP_PlayerController_TomatoFight, CallFunc_IsValid_ReturnValue_3) == 0x000061, "Member 'BP_PlayerController_TomatoFight_C_ExecuteUbergraph_BP_PlayerController_TomatoFight::CallFunc_IsValid_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(BP_PlayerController_TomatoFight_C_ExecuteUbergraph_BP_PlayerController_TomatoFight, Temp_int_Array_Index_Variable) == 0x000064, "Member 'BP_PlayerController_TomatoFight_C_ExecuteUbergraph_BP_PlayerController_TomatoFight::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(BP_PlayerController_TomatoFight_C_ExecuteUbergraph_BP_PlayerController_TomatoFight, K2Node_CustomEvent_Attackers_Won_Rounds) == 0x000068, "Member 'BP_PlayerController_TomatoFight_C_ExecuteUbergraph_BP_PlayerController_TomatoFight::K2Node_CustomEvent_Attackers_Won_Rounds' has a wrong offset!");
static_assert(offsetof(BP_PlayerController_TomatoFight_C_ExecuteUbergraph_BP_PlayerController_TomatoFight, K2Node_CustomEvent_Defenders_Won_Rounds) == 0x00006C, "Member 'BP_PlayerController_TomatoFight_C_ExecuteUbergraph_BP_PlayerController_TomatoFight::K2Node_CustomEvent_Defenders_Won_Rounds' has a wrong offset!");
static_assert(offsetof(BP_PlayerController_TomatoFight_C_ExecuteUbergraph_BP_PlayerController_TomatoFight, CallFunc_IsValid_ReturnValue_4) == 0x000070, "Member 'BP_PlayerController_TomatoFight_C_ExecuteUbergraph_BP_PlayerController_TomatoFight::CallFunc_IsValid_ReturnValue_4' has a wrong offset!");
static_assert(offsetof(BP_PlayerController_TomatoFight_C_ExecuteUbergraph_BP_PlayerController_TomatoFight, CallFunc_Create_ReturnValue) == 0x000078, "Member 'BP_PlayerController_TomatoFight_C_ExecuteUbergraph_BP_PlayerController_TomatoFight::CallFunc_Create_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerController_TomatoFight_C_ExecuteUbergraph_BP_PlayerController_TomatoFight, CallFunc_Create_ReturnValue_1) == 0x000080, "Member 'BP_PlayerController_TomatoFight_C_ExecuteUbergraph_BP_PlayerController_TomatoFight::CallFunc_Create_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_PlayerController_TomatoFight_C_ExecuteUbergraph_BP_PlayerController_TomatoFight, Temp_int_Loop_Counter_Variable) == 0x000088, "Member 'BP_PlayerController_TomatoFight_C_ExecuteUbergraph_BP_PlayerController_TomatoFight::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(BP_PlayerController_TomatoFight_C_ExecuteUbergraph_BP_PlayerController_TomatoFight, CallFunc_Add_IntInt_ReturnValue) == 0x00008C, "Member 'BP_PlayerController_TomatoFight_C_ExecuteUbergraph_BP_PlayerController_TomatoFight::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerController_TomatoFight_C_ExecuteUbergraph_BP_PlayerController_TomatoFight, CallFunc_IsValid_ReturnValue_5) == 0x000090, "Member 'BP_PlayerController_TomatoFight_C_ExecuteUbergraph_BP_PlayerController_TomatoFight::CallFunc_IsValid_ReturnValue_5' has a wrong offset!");
static_assert(offsetof(BP_PlayerController_TomatoFight_C_ExecuteUbergraph_BP_PlayerController_TomatoFight, CallFunc_Create_ReturnValue_2) == 0x000098, "Member 'BP_PlayerController_TomatoFight_C_ExecuteUbergraph_BP_PlayerController_TomatoFight::CallFunc_Create_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BP_PlayerController_TomatoFight_C_ExecuteUbergraph_BP_PlayerController_TomatoFight, Temp_int_Array_Index_Variable_1) == 0x0000A0, "Member 'BP_PlayerController_TomatoFight_C_ExecuteUbergraph_BP_PlayerController_TomatoFight::Temp_int_Array_Index_Variable_1' has a wrong offset!");
static_assert(offsetof(BP_PlayerController_TomatoFight_C_ExecuteUbergraph_BP_PlayerController_TomatoFight, K2Node_CustomEvent_Round_Starts_In_1) == 0x0000A4, "Member 'BP_PlayerController_TomatoFight_C_ExecuteUbergraph_BP_PlayerController_TomatoFight::K2Node_CustomEvent_Round_Starts_In_1' has a wrong offset!");
static_assert(offsetof(BP_PlayerController_TomatoFight_C_ExecuteUbergraph_BP_PlayerController_TomatoFight, CallFunc_Create_ReturnValue_3) == 0x0000A8, "Member 'BP_PlayerController_TomatoFight_C_ExecuteUbergraph_BP_PlayerController_TomatoFight::CallFunc_Create_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(BP_PlayerController_TomatoFight_C_ExecuteUbergraph_BP_PlayerController_TomatoFight, CallFunc_IsValid_ReturnValue_6) == 0x0000B0, "Member 'BP_PlayerController_TomatoFight_C_ExecuteUbergraph_BP_PlayerController_TomatoFight::CallFunc_IsValid_ReturnValue_6' has a wrong offset!");
static_assert(offsetof(BP_PlayerController_TomatoFight_C_ExecuteUbergraph_BP_PlayerController_TomatoFight, CallFunc_IsValid_ReturnValue_7) == 0x0000B1, "Member 'BP_PlayerController_TomatoFight_C_ExecuteUbergraph_BP_PlayerController_TomatoFight::CallFunc_IsValid_ReturnValue_7' has a wrong offset!");
static_assert(offsetof(BP_PlayerController_TomatoFight_C_ExecuteUbergraph_BP_PlayerController_TomatoFight, CallFunc_IsValid_ReturnValue_8) == 0x0000B2, "Member 'BP_PlayerController_TomatoFight_C_ExecuteUbergraph_BP_PlayerController_TomatoFight::CallFunc_IsValid_ReturnValue_8' has a wrong offset!");
static_assert(offsetof(BP_PlayerController_TomatoFight_C_ExecuteUbergraph_BP_PlayerController_TomatoFight, K2Node_CustomEvent_Time) == 0x0000B4, "Member 'BP_PlayerController_TomatoFight_C_ExecuteUbergraph_BP_PlayerController_TomatoFight::K2Node_CustomEvent_Time' has a wrong offset!");
static_assert(offsetof(BP_PlayerController_TomatoFight_C_ExecuteUbergraph_BP_PlayerController_TomatoFight, K2Node_CustomEvent_All_Connected) == 0x0000B8, "Member 'BP_PlayerController_TomatoFight_C_ExecuteUbergraph_BP_PlayerController_TomatoFight::K2Node_CustomEvent_All_Connected' has a wrong offset!");
static_assert(offsetof(BP_PlayerController_TomatoFight_C_ExecuteUbergraph_BP_PlayerController_TomatoFight, K2Node_CustomEvent_Round_Time) == 0x0000BC, "Member 'BP_PlayerController_TomatoFight_C_ExecuteUbergraph_BP_PlayerController_TomatoFight::K2Node_CustomEvent_Round_Time' has a wrong offset!");
static_assert(offsetof(BP_PlayerController_TomatoFight_C_ExecuteUbergraph_BP_PlayerController_TomatoFight, K2Node_CustomEvent_Is_Objective_Phase) == 0x0000C0, "Member 'BP_PlayerController_TomatoFight_C_ExecuteUbergraph_BP_PlayerController_TomatoFight::K2Node_CustomEvent_Is_Objective_Phase' has a wrong offset!");
static_assert(offsetof(BP_PlayerController_TomatoFight_C_ExecuteUbergraph_BP_PlayerController_TomatoFight, K2Node_CustomEvent_Round_Starts_In) == 0x0000C4, "Member 'BP_PlayerController_TomatoFight_C_ExecuteUbergraph_BP_PlayerController_TomatoFight::K2Node_CustomEvent_Round_Starts_In' has a wrong offset!");
static_assert(offsetof(BP_PlayerController_TomatoFight_C_ExecuteUbergraph_BP_PlayerController_TomatoFight, CallFunc_IsValid_ReturnValue_9) == 0x0000C8, "Member 'BP_PlayerController_TomatoFight_C_ExecuteUbergraph_BP_PlayerController_TomatoFight::CallFunc_IsValid_ReturnValue_9' has a wrong offset!");
static_assert(offsetof(BP_PlayerController_TomatoFight_C_ExecuteUbergraph_BP_PlayerController_TomatoFight, CallFunc_IsDedicatedServer_ReturnValue_1) == 0x0000C9, "Member 'BP_PlayerController_TomatoFight_C_ExecuteUbergraph_BP_PlayerController_TomatoFight::CallFunc_IsDedicatedServer_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_PlayerController_TomatoFight_C_ExecuteUbergraph_BP_PlayerController_TomatoFight, CallFunc_IsValid_ReturnValue_10) == 0x0000CA, "Member 'BP_PlayerController_TomatoFight_C_ExecuteUbergraph_BP_PlayerController_TomatoFight::CallFunc_IsValid_ReturnValue_10' has a wrong offset!");
static_assert(offsetof(BP_PlayerController_TomatoFight_C_ExecuteUbergraph_BP_PlayerController_TomatoFight, K2Node_Event_Killer) == 0x0000D0, "Member 'BP_PlayerController_TomatoFight_C_ExecuteUbergraph_BP_PlayerController_TomatoFight::K2Node_Event_Killer' has a wrong offset!");
static_assert(offsetof(BP_PlayerController_TomatoFight_C_ExecuteUbergraph_BP_PlayerController_TomatoFight, K2Node_Event_Victim) == 0x0000D8, "Member 'BP_PlayerController_TomatoFight_C_ExecuteUbergraph_BP_PlayerController_TomatoFight::K2Node_Event_Victim' has a wrong offset!");
static_assert(offsetof(BP_PlayerController_TomatoFight_C_ExecuteUbergraph_BP_PlayerController_TomatoFight, K2Node_Event_Instigating_Item) == 0x0000E0, "Member 'BP_PlayerController_TomatoFight_C_ExecuteUbergraph_BP_PlayerController_TomatoFight::K2Node_Event_Instigating_Item' has a wrong offset!");
static_assert(offsetof(BP_PlayerController_TomatoFight_C_ExecuteUbergraph_BP_PlayerController_TomatoFight, K2Node_Event_Headshot) == 0x0000E8, "Member 'BP_PlayerController_TomatoFight_C_ExecuteUbergraph_BP_PlayerController_TomatoFight::K2Node_Event_Headshot' has a wrong offset!");
static_assert(offsetof(BP_PlayerController_TomatoFight_C_ExecuteUbergraph_BP_PlayerController_TomatoFight, K2Node_Event_Teamkill) == 0x0000E9, "Member 'BP_PlayerController_TomatoFight_C_ExecuteUbergraph_BP_PlayerController_TomatoFight::K2Node_Event_Teamkill' has a wrong offset!");
static_assert(offsetof(BP_PlayerController_TomatoFight_C_ExecuteUbergraph_BP_PlayerController_TomatoFight, CallFunc_Create_ReturnValue_4) == 0x0000F0, "Member 'BP_PlayerController_TomatoFight_C_ExecuteUbergraph_BP_PlayerController_TomatoFight::CallFunc_Create_ReturnValue_4' has a wrong offset!");
static_assert(offsetof(BP_PlayerController_TomatoFight_C_ExecuteUbergraph_BP_PlayerController_TomatoFight, CallFunc_IsValid_ReturnValue_11) == 0x0000F8, "Member 'BP_PlayerController_TomatoFight_C_ExecuteUbergraph_BP_PlayerController_TomatoFight::CallFunc_IsValid_ReturnValue_11' has a wrong offset!");
static_assert(offsetof(BP_PlayerController_TomatoFight_C_ExecuteUbergraph_BP_PlayerController_TomatoFight, CallFunc_IsValid_ReturnValue_12) == 0x0000F9, "Member 'BP_PlayerController_TomatoFight_C_ExecuteUbergraph_BP_PlayerController_TomatoFight::CallFunc_IsValid_ReturnValue_12' has a wrong offset!");
static_assert(offsetof(BP_PlayerController_TomatoFight_C_ExecuteUbergraph_BP_PlayerController_TomatoFight, K2Node_DynamicCast_AsBP_Player_State) == 0x000100, "Member 'BP_PlayerController_TomatoFight_C_ExecuteUbergraph_BP_PlayerController_TomatoFight::K2Node_DynamicCast_AsBP_Player_State' has a wrong offset!");
static_assert(offsetof(BP_PlayerController_TomatoFight_C_ExecuteUbergraph_BP_PlayerController_TomatoFight, K2Node_DynamicCast_bSuccess_1) == 0x000108, "Member 'BP_PlayerController_TomatoFight_C_ExecuteUbergraph_BP_PlayerController_TomatoFight::K2Node_DynamicCast_bSuccess_1' has a wrong offset!");
static_assert(offsetof(BP_PlayerController_TomatoFight_C_ExecuteUbergraph_BP_PlayerController_TomatoFight, Temp_int_Array_Index_Variable_2) == 0x00010C, "Member 'BP_PlayerController_TomatoFight_C_ExecuteUbergraph_BP_PlayerController_TomatoFight::Temp_int_Array_Index_Variable_2' has a wrong offset!");
static_assert(offsetof(BP_PlayerController_TomatoFight_C_ExecuteUbergraph_BP_PlayerController_TomatoFight, Temp_int_Loop_Counter_Variable_1) == 0x000110, "Member 'BP_PlayerController_TomatoFight_C_ExecuteUbergraph_BP_PlayerController_TomatoFight::Temp_int_Loop_Counter_Variable_1' has a wrong offset!");
static_assert(offsetof(BP_PlayerController_TomatoFight_C_ExecuteUbergraph_BP_PlayerController_TomatoFight, CallFunc_IsValid_ReturnValue_13) == 0x000114, "Member 'BP_PlayerController_TomatoFight_C_ExecuteUbergraph_BP_PlayerController_TomatoFight::CallFunc_IsValid_ReturnValue_13' has a wrong offset!");
static_assert(offsetof(BP_PlayerController_TomatoFight_C_ExecuteUbergraph_BP_PlayerController_TomatoFight, CallFunc_Add_IntInt_ReturnValue_1) == 0x000118, "Member 'BP_PlayerController_TomatoFight_C_ExecuteUbergraph_BP_PlayerController_TomatoFight::CallFunc_Add_IntInt_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_PlayerController_TomatoFight_C_ExecuteUbergraph_BP_PlayerController_TomatoFight, CallFunc_IsDedicatedServer_ReturnValue_2) == 0x00011C, "Member 'BP_PlayerController_TomatoFight_C_ExecuteUbergraph_BP_PlayerController_TomatoFight::CallFunc_IsDedicatedServer_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BP_PlayerController_TomatoFight_C_ExecuteUbergraph_BP_PlayerController_TomatoFight, CallFunc_GetGameState_ReturnValue) == 0x000120, "Member 'BP_PlayerController_TomatoFight_C_ExecuteUbergraph_BP_PlayerController_TomatoFight::CallFunc_GetGameState_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerController_TomatoFight_C_ExecuteUbergraph_BP_PlayerController_TomatoFight, K2Node_DynamicCast_AsBP_Game_State_Tomato_Fight) == 0x000128, "Member 'BP_PlayerController_TomatoFight_C_ExecuteUbergraph_BP_PlayerController_TomatoFight::K2Node_DynamicCast_AsBP_Game_State_Tomato_Fight' has a wrong offset!");
static_assert(offsetof(BP_PlayerController_TomatoFight_C_ExecuteUbergraph_BP_PlayerController_TomatoFight, K2Node_DynamicCast_bSuccess_2) == 0x000130, "Member 'BP_PlayerController_TomatoFight_C_ExecuteUbergraph_BP_PlayerController_TomatoFight::K2Node_DynamicCast_bSuccess_2' has a wrong offset!");
static_assert(offsetof(BP_PlayerController_TomatoFight_C_ExecuteUbergraph_BP_PlayerController_TomatoFight, CallFunc_IsValid_ReturnValue_14) == 0x000131, "Member 'BP_PlayerController_TomatoFight_C_ExecuteUbergraph_BP_PlayerController_TomatoFight::CallFunc_IsValid_ReturnValue_14' has a wrong offset!");
static_assert(offsetof(BP_PlayerController_TomatoFight_C_ExecuteUbergraph_BP_PlayerController_TomatoFight, K2Node_Event_Hide) == 0x000132, "Member 'BP_PlayerController_TomatoFight_C_ExecuteUbergraph_BP_PlayerController_TomatoFight::K2Node_Event_Hide' has a wrong offset!");
static_assert(offsetof(BP_PlayerController_TomatoFight_C_ExecuteUbergraph_BP_PlayerController_TomatoFight, CallFunc_Create_ReturnValue_5) == 0x000138, "Member 'BP_PlayerController_TomatoFight_C_ExecuteUbergraph_BP_PlayerController_TomatoFight::CallFunc_Create_ReturnValue_5' has a wrong offset!");
static_assert(offsetof(BP_PlayerController_TomatoFight_C_ExecuteUbergraph_BP_PlayerController_TomatoFight, K2Node_CustomEvent_Located_Actor_1) == 0x000140, "Member 'BP_PlayerController_TomatoFight_C_ExecuteUbergraph_BP_PlayerController_TomatoFight::K2Node_CustomEvent_Located_Actor_1' has a wrong offset!");
static_assert(offsetof(BP_PlayerController_TomatoFight_C_ExecuteUbergraph_BP_PlayerController_TomatoFight, K2Node_CustomEvent_Located_Actor) == 0x000148, "Member 'BP_PlayerController_TomatoFight_C_ExecuteUbergraph_BP_PlayerController_TomatoFight::K2Node_CustomEvent_Located_Actor' has a wrong offset!");
static_assert(offsetof(BP_PlayerController_TomatoFight_C_ExecuteUbergraph_BP_PlayerController_TomatoFight, CallFunc_IsDedicatedServer_ReturnValue_3) == 0x000150, "Member 'BP_PlayerController_TomatoFight_C_ExecuteUbergraph_BP_PlayerController_TomatoFight::CallFunc_IsDedicatedServer_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(BP_PlayerController_TomatoFight_C_ExecuteUbergraph_BP_PlayerController_TomatoFight, K2Node_CustomEvent_New_Invincibility) == 0x000151, "Member 'BP_PlayerController_TomatoFight_C_ExecuteUbergraph_BP_PlayerController_TomatoFight::K2Node_CustomEvent_New_Invincibility' has a wrong offset!");
static_assert(offsetof(BP_PlayerController_TomatoFight_C_ExecuteUbergraph_BP_PlayerController_TomatoFight, CallFunc_K2_GetPawn_ReturnValue) == 0x000158, "Member 'BP_PlayerController_TomatoFight_C_ExecuteUbergraph_BP_PlayerController_TomatoFight::CallFunc_K2_GetPawn_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerController_TomatoFight_C_ExecuteUbergraph_BP_PlayerController_TomatoFight, K2Node_DynamicCast_AsBP_Character_Teams) == 0x000160, "Member 'BP_PlayerController_TomatoFight_C_ExecuteUbergraph_BP_PlayerController_TomatoFight::K2Node_DynamicCast_AsBP_Character_Teams' has a wrong offset!");
static_assert(offsetof(BP_PlayerController_TomatoFight_C_ExecuteUbergraph_BP_PlayerController_TomatoFight, K2Node_DynamicCast_bSuccess_3) == 0x000168, "Member 'BP_PlayerController_TomatoFight_C_ExecuteUbergraph_BP_PlayerController_TomatoFight::K2Node_DynamicCast_bSuccess_3' has a wrong offset!");
static_assert(offsetof(BP_PlayerController_TomatoFight_C_ExecuteUbergraph_BP_PlayerController_TomatoFight, K2Node_CustomEvent_Possessed_Character) == 0x000170, "Member 'BP_PlayerController_TomatoFight_C_ExecuteUbergraph_BP_PlayerController_TomatoFight::K2Node_CustomEvent_Possessed_Character' has a wrong offset!");
static_assert(offsetof(BP_PlayerController_TomatoFight_C_ExecuteUbergraph_BP_PlayerController_TomatoFight, K2Node_DynamicCast_AsBP_Character_Teams_1) == 0x000178, "Member 'BP_PlayerController_TomatoFight_C_ExecuteUbergraph_BP_PlayerController_TomatoFight::K2Node_DynamicCast_AsBP_Character_Teams_1' has a wrong offset!");
static_assert(offsetof(BP_PlayerController_TomatoFight_C_ExecuteUbergraph_BP_PlayerController_TomatoFight, K2Node_DynamicCast_bSuccess_4) == 0x000180, "Member 'BP_PlayerController_TomatoFight_C_ExecuteUbergraph_BP_PlayerController_TomatoFight::K2Node_DynamicCast_bSuccess_4' has a wrong offset!");
static_assert(offsetof(BP_PlayerController_TomatoFight_C_ExecuteUbergraph_BP_PlayerController_TomatoFight, CallFunc_IsValid_ReturnValue_15) == 0x000181, "Member 'BP_PlayerController_TomatoFight_C_ExecuteUbergraph_BP_PlayerController_TomatoFight::CallFunc_IsValid_ReturnValue_15' has a wrong offset!");
static_assert(offsetof(BP_PlayerController_TomatoFight_C_ExecuteUbergraph_BP_PlayerController_TomatoFight, CallFunc_IsValid_ReturnValue_16) == 0x000182, "Member 'BP_PlayerController_TomatoFight_C_ExecuteUbergraph_BP_PlayerController_TomatoFight::CallFunc_IsValid_ReturnValue_16' has a wrong offset!");
static_assert(offsetof(BP_PlayerController_TomatoFight_C_ExecuteUbergraph_BP_PlayerController_TomatoFight, CallFunc_SetInvincibility_ReturnValue) == 0x000183, "Member 'BP_PlayerController_TomatoFight_C_ExecuteUbergraph_BP_PlayerController_TomatoFight::CallFunc_SetInvincibility_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerController_TomatoFight_C_ExecuteUbergraph_BP_PlayerController_TomatoFight, CallFunc_SetInvincibility_ReturnValue_1) == 0x000184, "Member 'BP_PlayerController_TomatoFight_C_ExecuteUbergraph_BP_PlayerController_TomatoFight::CallFunc_SetInvincibility_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_PlayerController_TomatoFight_C_ExecuteUbergraph_BP_PlayerController_TomatoFight, K2Node_CustomEvent_Character_to_mark) == 0x000188, "Member 'BP_PlayerController_TomatoFight_C_ExecuteUbergraph_BP_PlayerController_TomatoFight::K2Node_CustomEvent_Character_to_mark' has a wrong offset!");
static_assert(offsetof(BP_PlayerController_TomatoFight_C_ExecuteUbergraph_BP_PlayerController_TomatoFight, CallFunc_IsValid_ReturnValue_17) == 0x000190, "Member 'BP_PlayerController_TomatoFight_C_ExecuteUbergraph_BP_PlayerController_TomatoFight::CallFunc_IsValid_ReturnValue_17' has a wrong offset!");
static_assert(offsetof(BP_PlayerController_TomatoFight_C_ExecuteUbergraph_BP_PlayerController_TomatoFight, CallFunc_IsValid_ReturnValue_18) == 0x000191, "Member 'BP_PlayerController_TomatoFight_C_ExecuteUbergraph_BP_PlayerController_TomatoFight::CallFunc_IsValid_ReturnValue_18' has a wrong offset!");
static_assert(offsetof(BP_PlayerController_TomatoFight_C_ExecuteUbergraph_BP_PlayerController_TomatoFight, K2Node_DynamicCast_AsBP_Player_State_1) == 0x000198, "Member 'BP_PlayerController_TomatoFight_C_ExecuteUbergraph_BP_PlayerController_TomatoFight::K2Node_DynamicCast_AsBP_Player_State_1' has a wrong offset!");
static_assert(offsetof(BP_PlayerController_TomatoFight_C_ExecuteUbergraph_BP_PlayerController_TomatoFight, K2Node_DynamicCast_bSuccess_5) == 0x0001A0, "Member 'BP_PlayerController_TomatoFight_C_ExecuteUbergraph_BP_PlayerController_TomatoFight::K2Node_DynamicCast_bSuccess_5' has a wrong offset!");
static_assert(offsetof(BP_PlayerController_TomatoFight_C_ExecuteUbergraph_BP_PlayerController_TomatoFight, CallFunc_FindTeammates_TeammatesPlayerStates) == 0x0001A8, "Member 'BP_PlayerController_TomatoFight_C_ExecuteUbergraph_BP_PlayerController_TomatoFight::CallFunc_FindTeammates_TeammatesPlayerStates' has a wrong offset!");
static_assert(offsetof(BP_PlayerController_TomatoFight_C_ExecuteUbergraph_BP_PlayerController_TomatoFight, CallFunc_GetGameMode_ReturnValue_1) == 0x0001B8, "Member 'BP_PlayerController_TomatoFight_C_ExecuteUbergraph_BP_PlayerController_TomatoFight::CallFunc_GetGameMode_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_PlayerController_TomatoFight_C_ExecuteUbergraph_BP_PlayerController_TomatoFight, CallFunc_Array_Contains_ReturnValue) == 0x0001C0, "Member 'BP_PlayerController_TomatoFight_C_ExecuteUbergraph_BP_PlayerController_TomatoFight::CallFunc_Array_Contains_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerController_TomatoFight_C_ExecuteUbergraph_BP_PlayerController_TomatoFight, K2Node_DynamicCast_AsBP_Game_Mode_Tomato_Fight_1) == 0x0001C8, "Member 'BP_PlayerController_TomatoFight_C_ExecuteUbergraph_BP_PlayerController_TomatoFight::K2Node_DynamicCast_AsBP_Game_Mode_Tomato_Fight_1' has a wrong offset!");
static_assert(offsetof(BP_PlayerController_TomatoFight_C_ExecuteUbergraph_BP_PlayerController_TomatoFight, K2Node_DynamicCast_bSuccess_6) == 0x0001D0, "Member 'BP_PlayerController_TomatoFight_C_ExecuteUbergraph_BP_PlayerController_TomatoFight::K2Node_DynamicCast_bSuccess_6' has a wrong offset!");
static_assert(offsetof(BP_PlayerController_TomatoFight_C_ExecuteUbergraph_BP_PlayerController_TomatoFight, CallFunc_IsDedicatedServer_ReturnValue_4) == 0x0001D1, "Member 'BP_PlayerController_TomatoFight_C_ExecuteUbergraph_BP_PlayerController_TomatoFight::CallFunc_IsDedicatedServer_ReturnValue_4' has a wrong offset!");
static_assert(offsetof(BP_PlayerController_TomatoFight_C_ExecuteUbergraph_BP_PlayerController_TomatoFight, CallFunc_GetGameState_ReturnValue_1) == 0x0001D8, "Member 'BP_PlayerController_TomatoFight_C_ExecuteUbergraph_BP_PlayerController_TomatoFight::CallFunc_GetGameState_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_PlayerController_TomatoFight_C_ExecuteUbergraph_BP_PlayerController_TomatoFight, K2Node_DynamicCast_AsBP_Game_State_Tomato_Fight_1) == 0x0001E0, "Member 'BP_PlayerController_TomatoFight_C_ExecuteUbergraph_BP_PlayerController_TomatoFight::K2Node_DynamicCast_AsBP_Game_State_Tomato_Fight_1' has a wrong offset!");
static_assert(offsetof(BP_PlayerController_TomatoFight_C_ExecuteUbergraph_BP_PlayerController_TomatoFight, K2Node_DynamicCast_bSuccess_7) == 0x0001E8, "Member 'BP_PlayerController_TomatoFight_C_ExecuteUbergraph_BP_PlayerController_TomatoFight::K2Node_DynamicCast_bSuccess_7' has a wrong offset!");
static_assert(offsetof(BP_PlayerController_TomatoFight_C_ExecuteUbergraph_BP_PlayerController_TomatoFight, K2Node_CustomEvent_Marked_character) == 0x0001F0, "Member 'BP_PlayerController_TomatoFight_C_ExecuteUbergraph_BP_PlayerController_TomatoFight::K2Node_CustomEvent_Marked_character' has a wrong offset!");
static_assert(offsetof(BP_PlayerController_TomatoFight_C_ExecuteUbergraph_BP_PlayerController_TomatoFight, CallFunc_IsValid_ReturnValue_19) == 0x0001F8, "Member 'BP_PlayerController_TomatoFight_C_ExecuteUbergraph_BP_PlayerController_TomatoFight::CallFunc_IsValid_ReturnValue_19' has a wrong offset!");
static_assert(offsetof(BP_PlayerController_TomatoFight_C_ExecuteUbergraph_BP_PlayerController_TomatoFight, CallFunc_IsValid_ReturnValue_20) == 0x0001F9, "Member 'BP_PlayerController_TomatoFight_C_ExecuteUbergraph_BP_PlayerController_TomatoFight::CallFunc_IsValid_ReturnValue_20' has a wrong offset!");
static_assert(offsetof(BP_PlayerController_TomatoFight_C_ExecuteUbergraph_BP_PlayerController_TomatoFight, CallFunc_Array_Get_Item) == 0x000200, "Member 'BP_PlayerController_TomatoFight_C_ExecuteUbergraph_BP_PlayerController_TomatoFight::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(BP_PlayerController_TomatoFight_C_ExecuteUbergraph_BP_PlayerController_TomatoFight, CallFunc_Array_Length_ReturnValue) == 0x000208, "Member 'BP_PlayerController_TomatoFight_C_ExecuteUbergraph_BP_PlayerController_TomatoFight::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerController_TomatoFight_C_ExecuteUbergraph_BP_PlayerController_TomatoFight, CallFunc_IsValid_ReturnValue_21) == 0x00020C, "Member 'BP_PlayerController_TomatoFight_C_ExecuteUbergraph_BP_PlayerController_TomatoFight::CallFunc_IsValid_ReturnValue_21' has a wrong offset!");
static_assert(offsetof(BP_PlayerController_TomatoFight_C_ExecuteUbergraph_BP_PlayerController_TomatoFight, CallFunc_GetUserWidgetObject_ReturnValue) == 0x000210, "Member 'BP_PlayerController_TomatoFight_C_ExecuteUbergraph_BP_PlayerController_TomatoFight::CallFunc_GetUserWidgetObject_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerController_TomatoFight_C_ExecuteUbergraph_BP_PlayerController_TomatoFight, K2Node_DynamicCast_AsUI_Tv_T_Player_Widget) == 0x000218, "Member 'BP_PlayerController_TomatoFight_C_ExecuteUbergraph_BP_PlayerController_TomatoFight::K2Node_DynamicCast_AsUI_Tv_T_Player_Widget' has a wrong offset!");
static_assert(offsetof(BP_PlayerController_TomatoFight_C_ExecuteUbergraph_BP_PlayerController_TomatoFight, K2Node_DynamicCast_bSuccess_8) == 0x000220, "Member 'BP_PlayerController_TomatoFight_C_ExecuteUbergraph_BP_PlayerController_TomatoFight::K2Node_DynamicCast_bSuccess_8' has a wrong offset!");
static_assert(offsetof(BP_PlayerController_TomatoFight_C_ExecuteUbergraph_BP_PlayerController_TomatoFight, CallFunc_Array_RemoveItem_ReturnValue) == 0x000221, "Member 'BP_PlayerController_TomatoFight_C_ExecuteUbergraph_BP_PlayerController_TomatoFight::CallFunc_Array_RemoveItem_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerController_TomatoFight_C_ExecuteUbergraph_BP_PlayerController_TomatoFight, CallFunc_EqualEqual_ObjectObject_ReturnValue) == 0x000222, "Member 'BP_PlayerController_TomatoFight_C_ExecuteUbergraph_BP_PlayerController_TomatoFight::CallFunc_EqualEqual_ObjectObject_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerController_TomatoFight_C_ExecuteUbergraph_BP_PlayerController_TomatoFight, CallFunc_Less_ByteByte_ReturnValue) == 0x000223, "Member 'BP_PlayerController_TomatoFight_C_ExecuteUbergraph_BP_PlayerController_TomatoFight::CallFunc_Less_ByteByte_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerController_TomatoFight_C_ExecuteUbergraph_BP_PlayerController_TomatoFight, K2Node_Event_Possessed_Character) == 0x000228, "Member 'BP_PlayerController_TomatoFight_C_ExecuteUbergraph_BP_PlayerController_TomatoFight::K2Node_Event_Possessed_Character' has a wrong offset!");
static_assert(offsetof(BP_PlayerController_TomatoFight_C_ExecuteUbergraph_BP_PlayerController_TomatoFight, K2Node_DynamicCast_AsBP_Character_Teams_2) == 0x000230, "Member 'BP_PlayerController_TomatoFight_C_ExecuteUbergraph_BP_PlayerController_TomatoFight::K2Node_DynamicCast_AsBP_Character_Teams_2' has a wrong offset!");
static_assert(offsetof(BP_PlayerController_TomatoFight_C_ExecuteUbergraph_BP_PlayerController_TomatoFight, K2Node_DynamicCast_bSuccess_9) == 0x000238, "Member 'BP_PlayerController_TomatoFight_C_ExecuteUbergraph_BP_PlayerController_TomatoFight::K2Node_DynamicCast_bSuccess_9' has a wrong offset!");
static_assert(offsetof(BP_PlayerController_TomatoFight_C_ExecuteUbergraph_BP_PlayerController_TomatoFight, CallFunc_IsValid_ReturnValue_22) == 0x000239, "Member 'BP_PlayerController_TomatoFight_C_ExecuteUbergraph_BP_PlayerController_TomatoFight::CallFunc_IsValid_ReturnValue_22' has a wrong offset!");
static_assert(offsetof(BP_PlayerController_TomatoFight_C_ExecuteUbergraph_BP_PlayerController_TomatoFight, K2Node_DynamicCast_AsBP_Player_State_Teams) == 0x000240, "Member 'BP_PlayerController_TomatoFight_C_ExecuteUbergraph_BP_PlayerController_TomatoFight::K2Node_DynamicCast_AsBP_Player_State_Teams' has a wrong offset!");
static_assert(offsetof(BP_PlayerController_TomatoFight_C_ExecuteUbergraph_BP_PlayerController_TomatoFight, K2Node_DynamicCast_bSuccess_10) == 0x000248, "Member 'BP_PlayerController_TomatoFight_C_ExecuteUbergraph_BP_PlayerController_TomatoFight::K2Node_DynamicCast_bSuccess_10' has a wrong offset!");
static_assert(offsetof(BP_PlayerController_TomatoFight_C_ExecuteUbergraph_BP_PlayerController_TomatoFight, CallFunc_MakeTransform_ReturnValue) == 0x000250, "Member 'BP_PlayerController_TomatoFight_C_ExecuteUbergraph_BP_PlayerController_TomatoFight::CallFunc_MakeTransform_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerController_TomatoFight_C_ExecuteUbergraph_BP_PlayerController_TomatoFight, CallFunc_Array_Get_Item_1) == 0x000280, "Member 'BP_PlayerController_TomatoFight_C_ExecuteUbergraph_BP_PlayerController_TomatoFight::CallFunc_Array_Get_Item_1' has a wrong offset!");
static_assert(offsetof(BP_PlayerController_TomatoFight_C_ExecuteUbergraph_BP_PlayerController_TomatoFight, CallFunc_AddComponent_ReturnValue) == 0x000288, "Member 'BP_PlayerController_TomatoFight_C_ExecuteUbergraph_BP_PlayerController_TomatoFight::CallFunc_AddComponent_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerController_TomatoFight_C_ExecuteUbergraph_BP_PlayerController_TomatoFight, CallFunc_GetUserWidgetObject_ReturnValue_1) == 0x000290, "Member 'BP_PlayerController_TomatoFight_C_ExecuteUbergraph_BP_PlayerController_TomatoFight::CallFunc_GetUserWidgetObject_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_PlayerController_TomatoFight_C_ExecuteUbergraph_BP_PlayerController_TomatoFight, CallFunc_Array_Add_ReturnValue) == 0x000298, "Member 'BP_PlayerController_TomatoFight_C_ExecuteUbergraph_BP_PlayerController_TomatoFight::CallFunc_Array_Add_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerController_TomatoFight_C_ExecuteUbergraph_BP_PlayerController_TomatoFight, CallFunc_IsValid_ReturnValue_23) == 0x00029C, "Member 'BP_PlayerController_TomatoFight_C_ExecuteUbergraph_BP_PlayerController_TomatoFight::CallFunc_IsValid_ReturnValue_23' has a wrong offset!");
static_assert(offsetof(BP_PlayerController_TomatoFight_C_ExecuteUbergraph_BP_PlayerController_TomatoFight, CallFunc_GetUserWidgetObject_ReturnValue_2) == 0x0002A0, "Member 'BP_PlayerController_TomatoFight_C_ExecuteUbergraph_BP_PlayerController_TomatoFight::CallFunc_GetUserWidgetObject_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BP_PlayerController_TomatoFight_C_ExecuteUbergraph_BP_PlayerController_TomatoFight, CallFunc_K2_AttachToComponent_ReturnValue) == 0x0002A8, "Member 'BP_PlayerController_TomatoFight_C_ExecuteUbergraph_BP_PlayerController_TomatoFight::CallFunc_K2_AttachToComponent_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerController_TomatoFight_C_ExecuteUbergraph_BP_PlayerController_TomatoFight, K2Node_DynamicCast_AsUI_Tv_T_Player_Widget_1) == 0x0002B0, "Member 'BP_PlayerController_TomatoFight_C_ExecuteUbergraph_BP_PlayerController_TomatoFight::K2Node_DynamicCast_AsUI_Tv_T_Player_Widget_1' has a wrong offset!");
static_assert(offsetof(BP_PlayerController_TomatoFight_C_ExecuteUbergraph_BP_PlayerController_TomatoFight, K2Node_DynamicCast_bSuccess_11) == 0x0002B8, "Member 'BP_PlayerController_TomatoFight_C_ExecuteUbergraph_BP_PlayerController_TomatoFight::K2Node_DynamicCast_bSuccess_11' has a wrong offset!");
static_assert(offsetof(BP_PlayerController_TomatoFight_C_ExecuteUbergraph_BP_PlayerController_TomatoFight, CallFunc_Array_Length_ReturnValue_1) == 0x0002BC, "Member 'BP_PlayerController_TomatoFight_C_ExecuteUbergraph_BP_PlayerController_TomatoFight::CallFunc_Array_Length_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_PlayerController_TomatoFight_C_ExecuteUbergraph_BP_PlayerController_TomatoFight, CallFunc_Less_IntInt_ReturnValue) == 0x0002C0, "Member 'BP_PlayerController_TomatoFight_C_ExecuteUbergraph_BP_PlayerController_TomatoFight::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerController_TomatoFight_C_ExecuteUbergraph_BP_PlayerController_TomatoFight, K2Node_CreateDelegate_OutputDelegate) == 0x0002C4, "Member 'BP_PlayerController_TomatoFight_C_ExecuteUbergraph_BP_PlayerController_TomatoFight::K2Node_CreateDelegate_OutputDelegate' has a wrong offset!");
static_assert(offsetof(BP_PlayerController_TomatoFight_C_ExecuteUbergraph_BP_PlayerController_TomatoFight, CallFunc_IsValid_ReturnValue_24) == 0x0002D4, "Member 'BP_PlayerController_TomatoFight_C_ExecuteUbergraph_BP_PlayerController_TomatoFight::CallFunc_IsValid_ReturnValue_24' has a wrong offset!");
static_assert(offsetof(BP_PlayerController_TomatoFight_C_ExecuteUbergraph_BP_PlayerController_TomatoFight, CallFunc_GetGameMode_ReturnValue_2) == 0x0002D8, "Member 'BP_PlayerController_TomatoFight_C_ExecuteUbergraph_BP_PlayerController_TomatoFight::CallFunc_GetGameMode_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BP_PlayerController_TomatoFight_C_ExecuteUbergraph_BP_PlayerController_TomatoFight, K2Node_DynamicCast_AsBP_Game_Mode_Tomato_Fight_2) == 0x0002E0, "Member 'BP_PlayerController_TomatoFight_C_ExecuteUbergraph_BP_PlayerController_TomatoFight::K2Node_DynamicCast_AsBP_Game_Mode_Tomato_Fight_2' has a wrong offset!");
static_assert(offsetof(BP_PlayerController_TomatoFight_C_ExecuteUbergraph_BP_PlayerController_TomatoFight, K2Node_DynamicCast_bSuccess_12) == 0x0002E8, "Member 'BP_PlayerController_TomatoFight_C_ExecuteUbergraph_BP_PlayerController_TomatoFight::K2Node_DynamicCast_bSuccess_12' has a wrong offset!");
static_assert(offsetof(BP_PlayerController_TomatoFight_C_ExecuteUbergraph_BP_PlayerController_TomatoFight, CallFunc_Create_ReturnValue_6) == 0x0002F0, "Member 'BP_PlayerController_TomatoFight_C_ExecuteUbergraph_BP_PlayerController_TomatoFight::CallFunc_Create_ReturnValue_6' has a wrong offset!");
static_assert(offsetof(BP_PlayerController_TomatoFight_C_ExecuteUbergraph_BP_PlayerController_TomatoFight, CallFunc_GetHumanCharacter_ReturnValue) == 0x0002F8, "Member 'BP_PlayerController_TomatoFight_C_ExecuteUbergraph_BP_PlayerController_TomatoFight::CallFunc_GetHumanCharacter_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerController_TomatoFight_C_ExecuteUbergraph_BP_PlayerController_TomatoFight, CallFunc_IsValid_ReturnValue_25) == 0x000300, "Member 'BP_PlayerController_TomatoFight_C_ExecuteUbergraph_BP_PlayerController_TomatoFight::CallFunc_IsValid_ReturnValue_25' has a wrong offset!");
static_assert(offsetof(BP_PlayerController_TomatoFight_C_ExecuteUbergraph_BP_PlayerController_TomatoFight, K2Node_CustomEvent_Match_ID) == 0x000308, "Member 'BP_PlayerController_TomatoFight_C_ExecuteUbergraph_BP_PlayerController_TomatoFight::K2Node_CustomEvent_Match_ID' has a wrong offset!");
static_assert(offsetof(BP_PlayerController_TomatoFight_C_ExecuteUbergraph_BP_PlayerController_TomatoFight, CallFunc_GetGameInstance_ReturnValue) == 0x000318, "Member 'BP_PlayerController_TomatoFight_C_ExecuteUbergraph_BP_PlayerController_TomatoFight::CallFunc_GetGameInstance_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerController_TomatoFight_C_ExecuteUbergraph_BP_PlayerController_TomatoFight, K2Node_DynamicCast_AsFlame_Game_Instance) == 0x000320, "Member 'BP_PlayerController_TomatoFight_C_ExecuteUbergraph_BP_PlayerController_TomatoFight::K2Node_DynamicCast_AsFlame_Game_Instance' has a wrong offset!");
static_assert(offsetof(BP_PlayerController_TomatoFight_C_ExecuteUbergraph_BP_PlayerController_TomatoFight, K2Node_DynamicCast_bSuccess_13) == 0x000328, "Member 'BP_PlayerController_TomatoFight_C_ExecuteUbergraph_BP_PlayerController_TomatoFight::K2Node_DynamicCast_bSuccess_13' has a wrong offset!");
static_assert(offsetof(BP_PlayerController_TomatoFight_C_ExecuteUbergraph_BP_PlayerController_TomatoFight, K2Node_CreateDelegate_OutputDelegate_1) == 0x00032C, "Member 'BP_PlayerController_TomatoFight_C_ExecuteUbergraph_BP_PlayerController_TomatoFight::K2Node_CreateDelegate_OutputDelegate_1' has a wrong offset!");
static_assert(offsetof(BP_PlayerController_TomatoFight_C_ExecuteUbergraph_BP_PlayerController_TomatoFight, CallFunc_K2_SetTimerDelegate_ReturnValue) == 0x000340, "Member 'BP_PlayerController_TomatoFight_C_ExecuteUbergraph_BP_PlayerController_TomatoFight::CallFunc_K2_SetTimerDelegate_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerController_TomatoFight_C_ExecuteUbergraph_BP_PlayerController_TomatoFight, CallFunc_GetAllWidgetsOfClass_FoundWidgets) == 0x000348, "Member 'BP_PlayerController_TomatoFight_C_ExecuteUbergraph_BP_PlayerController_TomatoFight::CallFunc_GetAllWidgetsOfClass_FoundWidgets' has a wrong offset!");
static_assert(offsetof(BP_PlayerController_TomatoFight_C_ExecuteUbergraph_BP_PlayerController_TomatoFight, CallFunc_Array_Get_Item_2) == 0x000358, "Member 'BP_PlayerController_TomatoFight_C_ExecuteUbergraph_BP_PlayerController_TomatoFight::CallFunc_Array_Get_Item_2' has a wrong offset!");
static_assert(offsetof(BP_PlayerController_TomatoFight_C_ExecuteUbergraph_BP_PlayerController_TomatoFight, CallFunc_Array_Length_ReturnValue_2) == 0x000360, "Member 'BP_PlayerController_TomatoFight_C_ExecuteUbergraph_BP_PlayerController_TomatoFight::CallFunc_Array_Length_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BP_PlayerController_TomatoFight_C_ExecuteUbergraph_BP_PlayerController_TomatoFight, CallFunc_Less_IntInt_ReturnValue_1) == 0x000364, "Member 'BP_PlayerController_TomatoFight_C_ExecuteUbergraph_BP_PlayerController_TomatoFight::CallFunc_Less_IntInt_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_PlayerController_TomatoFight_C_ExecuteUbergraph_BP_PlayerController_TomatoFight, CallFunc_GetGameState_ReturnValue_2) == 0x000368, "Member 'BP_PlayerController_TomatoFight_C_ExecuteUbergraph_BP_PlayerController_TomatoFight::CallFunc_GetGameState_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BP_PlayerController_TomatoFight_C_ExecuteUbergraph_BP_PlayerController_TomatoFight, CallFunc_GetHUD_ReturnValue) == 0x000370, "Member 'BP_PlayerController_TomatoFight_C_ExecuteUbergraph_BP_PlayerController_TomatoFight::CallFunc_GetHUD_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerController_TomatoFight_C_ExecuteUbergraph_BP_PlayerController_TomatoFight, K2Node_DynamicCast_AsBP_Game_State_Tomato_Fight_2) == 0x000378, "Member 'BP_PlayerController_TomatoFight_C_ExecuteUbergraph_BP_PlayerController_TomatoFight::K2Node_DynamicCast_AsBP_Game_State_Tomato_Fight_2' has a wrong offset!");
static_assert(offsetof(BP_PlayerController_TomatoFight_C_ExecuteUbergraph_BP_PlayerController_TomatoFight, K2Node_DynamicCast_bSuccess_14) == 0x000380, "Member 'BP_PlayerController_TomatoFight_C_ExecuteUbergraph_BP_PlayerController_TomatoFight::K2Node_DynamicCast_bSuccess_14' has a wrong offset!");
static_assert(offsetof(BP_PlayerController_TomatoFight_C_ExecuteUbergraph_BP_PlayerController_TomatoFight, K2Node_DynamicCast_AsFlame_HUD) == 0x000388, "Member 'BP_PlayerController_TomatoFight_C_ExecuteUbergraph_BP_PlayerController_TomatoFight::K2Node_DynamicCast_AsFlame_HUD' has a wrong offset!");
static_assert(offsetof(BP_PlayerController_TomatoFight_C_ExecuteUbergraph_BP_PlayerController_TomatoFight, K2Node_DynamicCast_bSuccess_15) == 0x000390, "Member 'BP_PlayerController_TomatoFight_C_ExecuteUbergraph_BP_PlayerController_TomatoFight::K2Node_DynamicCast_bSuccess_15' has a wrong offset!");
static_assert(offsetof(BP_PlayerController_TomatoFight_C_ExecuteUbergraph_BP_PlayerController_TomatoFight, K2Node_DynamicCast_AsUI_Crosshair) == 0x000398, "Member 'BP_PlayerController_TomatoFight_C_ExecuteUbergraph_BP_PlayerController_TomatoFight::K2Node_DynamicCast_AsUI_Crosshair' has a wrong offset!");
static_assert(offsetof(BP_PlayerController_TomatoFight_C_ExecuteUbergraph_BP_PlayerController_TomatoFight, K2Node_DynamicCast_bSuccess_16) == 0x0003A0, "Member 'BP_PlayerController_TomatoFight_C_ExecuteUbergraph_BP_PlayerController_TomatoFight::K2Node_DynamicCast_bSuccess_16' has a wrong offset!");
static_assert(offsetof(BP_PlayerController_TomatoFight_C_ExecuteUbergraph_BP_PlayerController_TomatoFight, K2Node_CustomEvent_Disable_1) == 0x0003A1, "Member 'BP_PlayerController_TomatoFight_C_ExecuteUbergraph_BP_PlayerController_TomatoFight::K2Node_CustomEvent_Disable_1' has a wrong offset!");
static_assert(offsetof(BP_PlayerController_TomatoFight_C_ExecuteUbergraph_BP_PlayerController_TomatoFight, CallFunc_IsMoveInputIgnored_ReturnValue) == 0x0003A2, "Member 'BP_PlayerController_TomatoFight_C_ExecuteUbergraph_BP_PlayerController_TomatoFight::CallFunc_IsMoveInputIgnored_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerController_TomatoFight_C_ExecuteUbergraph_BP_PlayerController_TomatoFight, K2Node_CustomEvent_ScoreEvent) == 0x0003A4, "Member 'BP_PlayerController_TomatoFight_C_ExecuteUbergraph_BP_PlayerController_TomatoFight::K2Node_CustomEvent_ScoreEvent' has a wrong offset!");
static_assert(offsetof(BP_PlayerController_TomatoFight_C_ExecuteUbergraph_BP_PlayerController_TomatoFight, K2Node_Event_DeltaSeconds) == 0x0003AC, "Member 'BP_PlayerController_TomatoFight_C_ExecuteUbergraph_BP_PlayerController_TomatoFight::K2Node_Event_DeltaSeconds' has a wrong offset!");
static_assert(offsetof(BP_PlayerController_TomatoFight_C_ExecuteUbergraph_BP_PlayerController_TomatoFight, CallFunc_IsMoveInputIgnored_ReturnValue_1) == 0x0003B0, "Member 'BP_PlayerController_TomatoFight_C_ExecuteUbergraph_BP_PlayerController_TomatoFight::CallFunc_IsMoveInputIgnored_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_PlayerController_TomatoFight_C_ExecuteUbergraph_BP_PlayerController_TomatoFight, CallFunc_NotEqual_BoolBool_ReturnValue) == 0x0003B1, "Member 'BP_PlayerController_TomatoFight_C_ExecuteUbergraph_BP_PlayerController_TomatoFight::CallFunc_NotEqual_BoolBool_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerController_TomatoFight_C_ExecuteUbergraph_BP_PlayerController_TomatoFight, Temp_int_Loop_Counter_Variable_2) == 0x0003B4, "Member 'BP_PlayerController_TomatoFight_C_ExecuteUbergraph_BP_PlayerController_TomatoFight::Temp_int_Loop_Counter_Variable_2' has a wrong offset!");
static_assert(offsetof(BP_PlayerController_TomatoFight_C_ExecuteUbergraph_BP_PlayerController_TomatoFight, K2Node_CustomEvent_Disable) == 0x0003B8, "Member 'BP_PlayerController_TomatoFight_C_ExecuteUbergraph_BP_PlayerController_TomatoFight::K2Node_CustomEvent_Disable' has a wrong offset!");
static_assert(offsetof(BP_PlayerController_TomatoFight_C_ExecuteUbergraph_BP_PlayerController_TomatoFight, CallFunc_NotEqual_BoolBool_ReturnValue_1) == 0x0003B9, "Member 'BP_PlayerController_TomatoFight_C_ExecuteUbergraph_BP_PlayerController_TomatoFight::CallFunc_NotEqual_BoolBool_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_PlayerController_TomatoFight_C_ExecuteUbergraph_BP_PlayerController_TomatoFight, CallFunc_Less_IntInt_ReturnValue_2) == 0x0003BA, "Member 'BP_PlayerController_TomatoFight_C_ExecuteUbergraph_BP_PlayerController_TomatoFight::CallFunc_Less_IntInt_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BP_PlayerController_TomatoFight_C_ExecuteUbergraph_BP_PlayerController_TomatoFight, CallFunc_Add_IntInt_ReturnValue_2) == 0x0003BC, "Member 'BP_PlayerController_TomatoFight_C_ExecuteUbergraph_BP_PlayerController_TomatoFight::CallFunc_Add_IntInt_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BP_PlayerController_TomatoFight_C_ExecuteUbergraph_BP_PlayerController_TomatoFight, CallFunc_GetLocalRole_ReturnValue) == 0x0003C0, "Member 'BP_PlayerController_TomatoFight_C_ExecuteUbergraph_BP_PlayerController_TomatoFight::CallFunc_GetLocalRole_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerController_TomatoFight_C_ExecuteUbergraph_BP_PlayerController_TomatoFight, CallFunc_EqualEqual_ByteByte_ReturnValue) == 0x0003C1, "Member 'BP_PlayerController_TomatoFight_C_ExecuteUbergraph_BP_PlayerController_TomatoFight::CallFunc_EqualEqual_ByteByte_ReturnValue' has a wrong offset!");

// Function BP_PlayerController_TomatoFight.BP_PlayerController_TomatoFight_C.DisableMovement_Client
// 0x0001 (0x0001 - 0x0000)
struct BP_PlayerController_TomatoFight_C_DisableMovement_Client final
{
public:
	bool                                          Disable;                                           // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_PlayerController_TomatoFight_C_DisableMovement_Client) == 0x000001, "Wrong alignment on BP_PlayerController_TomatoFight_C_DisableMovement_Client");
static_assert(sizeof(BP_PlayerController_TomatoFight_C_DisableMovement_Client) == 0x000001, "Wrong size on BP_PlayerController_TomatoFight_C_DisableMovement_Client");
static_assert(offsetof(BP_PlayerController_TomatoFight_C_DisableMovement_Client, Disable) == 0x000000, "Member 'BP_PlayerController_TomatoFight_C_DisableMovement_Client::Disable' has a wrong offset!");

// Function BP_PlayerController_TomatoFight.BP_PlayerController_TomatoFight_C.ReceiveTick
// 0x0004 (0x0004 - 0x0000)
struct BP_PlayerController_TomatoFight_C_ReceiveTick final
{
public:
	float                                         DeltaSeconds;                                      // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_PlayerController_TomatoFight_C_ReceiveTick) == 0x000004, "Wrong alignment on BP_PlayerController_TomatoFight_C_ReceiveTick");
static_assert(sizeof(BP_PlayerController_TomatoFight_C_ReceiveTick) == 0x000004, "Wrong size on BP_PlayerController_TomatoFight_C_ReceiveTick");
static_assert(offsetof(BP_PlayerController_TomatoFight_C_ReceiveTick, DeltaSeconds) == 0x000000, "Member 'BP_PlayerController_TomatoFight_C_ReceiveTick::DeltaSeconds' has a wrong offset!");

// Function BP_PlayerController_TomatoFight.BP_PlayerController_TomatoFight_C.Cheat_AddScore
// 0x0008 (0x0008 - 0x0000)
struct BP_PlayerController_TomatoFight_C_Cheat_AddScore final
{
public:
	class FName                                   ScoreEvent;                                        // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_PlayerController_TomatoFight_C_Cheat_AddScore) == 0x000004, "Wrong alignment on BP_PlayerController_TomatoFight_C_Cheat_AddScore");
static_assert(sizeof(BP_PlayerController_TomatoFight_C_Cheat_AddScore) == 0x000008, "Wrong size on BP_PlayerController_TomatoFight_C_Cheat_AddScore");
static_assert(offsetof(BP_PlayerController_TomatoFight_C_Cheat_AddScore, ScoreEvent) == 0x000000, "Member 'BP_PlayerController_TomatoFight_C_Cheat_AddScore::ScoreEvent' has a wrong offset!");

// Function BP_PlayerController_TomatoFight.BP_PlayerController_TomatoFight_C.DisableMovement_FromServer
// 0x0001 (0x0001 - 0x0000)
struct BP_PlayerController_TomatoFight_C_DisableMovement_FromServer final
{
public:
	bool                                          Disable;                                           // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_PlayerController_TomatoFight_C_DisableMovement_FromServer) == 0x000001, "Wrong alignment on BP_PlayerController_TomatoFight_C_DisableMovement_FromServer");
static_assert(sizeof(BP_PlayerController_TomatoFight_C_DisableMovement_FromServer) == 0x000001, "Wrong size on BP_PlayerController_TomatoFight_C_DisableMovement_FromServer");
static_assert(offsetof(BP_PlayerController_TomatoFight_C_DisableMovement_FromServer, Disable) == 0x000000, "Member 'BP_PlayerController_TomatoFight_C_DisableMovement_FromServer::Disable' has a wrong offset!");

// Function BP_PlayerController_TomatoFight.BP_PlayerController_TomatoFight_C.Save Match ID on Client
// 0x0010 (0x0010 - 0x0000)
struct BP_PlayerController_TomatoFight_C_Save_Match_ID_on_Client final
{
public:
	class FString                                 Match_ID;                                          // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_PlayerController_TomatoFight_C_Save_Match_ID_on_Client) == 0x000008, "Wrong alignment on BP_PlayerController_TomatoFight_C_Save_Match_ID_on_Client");
static_assert(sizeof(BP_PlayerController_TomatoFight_C_Save_Match_ID_on_Client) == 0x000010, "Wrong size on BP_PlayerController_TomatoFight_C_Save_Match_ID_on_Client");
static_assert(offsetof(BP_PlayerController_TomatoFight_C_Save_Match_ID_on_Client, Match_ID) == 0x000000, "Member 'BP_PlayerController_TomatoFight_C_Save_Match_ID_on_Client::Match_ID' has a wrong offset!");

// Function BP_PlayerController_TomatoFight.BP_PlayerController_TomatoFight_C.PossessedServer
// 0x0008 (0x0008 - 0x0000)
struct BP_PlayerController_TomatoFight_C_PossessedServer final
{
public:
	class ABP_Character_C*                        Possessed_Character;                               // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_PlayerController_TomatoFight_C_PossessedServer) == 0x000008, "Wrong alignment on BP_PlayerController_TomatoFight_C_PossessedServer");
static_assert(sizeof(BP_PlayerController_TomatoFight_C_PossessedServer) == 0x000008, "Wrong size on BP_PlayerController_TomatoFight_C_PossessedServer");
static_assert(offsetof(BP_PlayerController_TomatoFight_C_PossessedServer, Possessed_Character) == 0x000000, "Member 'BP_PlayerController_TomatoFight_C_PossessedServer::Possessed_Character' has a wrong offset!");

// Function BP_PlayerController_TomatoFight.BP_PlayerController_TomatoFight_C.Delete the Player widget
// 0x0008 (0x0008 - 0x0000)
struct BP_PlayerController_TomatoFight_C_Delete_the_Player_widget final
{
public:
	class ABP_Character_C*                        Marked_character;                                  // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_PlayerController_TomatoFight_C_Delete_the_Player_widget) == 0x000008, "Wrong alignment on BP_PlayerController_TomatoFight_C_Delete_the_Player_widget");
static_assert(sizeof(BP_PlayerController_TomatoFight_C_Delete_the_Player_widget) == 0x000008, "Wrong size on BP_PlayerController_TomatoFight_C_Delete_the_Player_widget");
static_assert(offsetof(BP_PlayerController_TomatoFight_C_Delete_the_Player_widget, Marked_character) == 0x000000, "Member 'BP_PlayerController_TomatoFight_C_Delete_the_Player_widget::Marked_character' has a wrong offset!");

// Function BP_PlayerController_TomatoFight.BP_PlayerController_TomatoFight_C.Create the Player widget
// 0x0008 (0x0008 - 0x0000)
struct BP_PlayerController_TomatoFight_C_Create_the_Player_widget final
{
public:
	class ABP_Character_C*                        Character_to_mark;                                 // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_PlayerController_TomatoFight_C_Create_the_Player_widget) == 0x000008, "Wrong alignment on BP_PlayerController_TomatoFight_C_Create_the_Player_widget");
static_assert(sizeof(BP_PlayerController_TomatoFight_C_Create_the_Player_widget) == 0x000008, "Wrong size on BP_PlayerController_TomatoFight_C_Create_the_Player_widget");
static_assert(offsetof(BP_PlayerController_TomatoFight_C_Create_the_Player_widget, Character_to_mark) == 0x000000, "Member 'BP_PlayerController_TomatoFight_C_Create_the_Player_widget::Character_to_mark' has a wrong offset!");

// Function BP_PlayerController_TomatoFight.BP_PlayerController_TomatoFight_C.Set Invincibility at Possesed
// 0x0008 (0x0008 - 0x0000)
struct BP_PlayerController_TomatoFight_C_Set_Invincibility_at_Possesed final
{
public:
	class ABP_Character_C*                        Possessed_Character;                               // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_PlayerController_TomatoFight_C_Set_Invincibility_at_Possesed) == 0x000008, "Wrong alignment on BP_PlayerController_TomatoFight_C_Set_Invincibility_at_Possesed");
static_assert(sizeof(BP_PlayerController_TomatoFight_C_Set_Invincibility_at_Possesed) == 0x000008, "Wrong size on BP_PlayerController_TomatoFight_C_Set_Invincibility_at_Possesed");
static_assert(offsetof(BP_PlayerController_TomatoFight_C_Set_Invincibility_at_Possesed, Possessed_Character) == 0x000000, "Member 'BP_PlayerController_TomatoFight_C_Set_Invincibility_at_Possesed::Possessed_Character' has a wrong offset!");

// Function BP_PlayerController_TomatoFight.BP_PlayerController_TomatoFight_C.Set Invincibility
// 0x0001 (0x0001 - 0x0000)
struct BP_PlayerController_TomatoFight_C_Set_Invincibility final
{
public:
	bool                                          New_Invincibility;                                 // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_PlayerController_TomatoFight_C_Set_Invincibility) == 0x000001, "Wrong alignment on BP_PlayerController_TomatoFight_C_Set_Invincibility");
static_assert(sizeof(BP_PlayerController_TomatoFight_C_Set_Invincibility) == 0x000001, "Wrong size on BP_PlayerController_TomatoFight_C_Set_Invincibility");
static_assert(offsetof(BP_PlayerController_TomatoFight_C_Set_Invincibility, New_Invincibility) == 0x000000, "Member 'BP_PlayerController_TomatoFight_C_Set_Invincibility::New_Invincibility' has a wrong offset!");

// Function BP_PlayerController_TomatoFight.BP_PlayerController_TomatoFight_C.Remove Objective Marker
// 0x0008 (0x0008 - 0x0000)
struct BP_PlayerController_TomatoFight_C_Remove_Objective_Marker final
{
public:
	class AActor*                                 Located_Actor;                                     // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_PlayerController_TomatoFight_C_Remove_Objective_Marker) == 0x000008, "Wrong alignment on BP_PlayerController_TomatoFight_C_Remove_Objective_Marker");
static_assert(sizeof(BP_PlayerController_TomatoFight_C_Remove_Objective_Marker) == 0x000008, "Wrong size on BP_PlayerController_TomatoFight_C_Remove_Objective_Marker");
static_assert(offsetof(BP_PlayerController_TomatoFight_C_Remove_Objective_Marker, Located_Actor) == 0x000000, "Member 'BP_PlayerController_TomatoFight_C_Remove_Objective_Marker::Located_Actor' has a wrong offset!");

// Function BP_PlayerController_TomatoFight.BP_PlayerController_TomatoFight_C.Add Objective Marker
// 0x0008 (0x0008 - 0x0000)
struct BP_PlayerController_TomatoFight_C_Add_Objective_Marker final
{
public:
	class AActor*                                 Located_Actor;                                     // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_PlayerController_TomatoFight_C_Add_Objective_Marker) == 0x000008, "Wrong alignment on BP_PlayerController_TomatoFight_C_Add_Objective_Marker");
static_assert(sizeof(BP_PlayerController_TomatoFight_C_Add_Objective_Marker) == 0x000008, "Wrong size on BP_PlayerController_TomatoFight_C_Add_Objective_Marker");
static_assert(offsetof(BP_PlayerController_TomatoFight_C_Add_Objective_Marker, Located_Actor) == 0x000000, "Member 'BP_PlayerController_TomatoFight_C_Add_Objective_Marker::Located_Actor' has a wrong offset!");

// Function BP_PlayerController_TomatoFight.BP_PlayerController_TomatoFight_C.Update Round Start Countdown UI
// 0x0004 (0x0004 - 0x0000)
struct BP_PlayerController_TomatoFight_C_Update_Round_Start_Countdown_UI final
{
public:
	int32                                         Round_Starts_In;                                   // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_PlayerController_TomatoFight_C_Update_Round_Start_Countdown_UI) == 0x000004, "Wrong alignment on BP_PlayerController_TomatoFight_C_Update_Round_Start_Countdown_UI");
static_assert(sizeof(BP_PlayerController_TomatoFight_C_Update_Round_Start_Countdown_UI) == 0x000004, "Wrong size on BP_PlayerController_TomatoFight_C_Update_Round_Start_Countdown_UI");
static_assert(offsetof(BP_PlayerController_TomatoFight_C_Update_Round_Start_Countdown_UI, Round_Starts_In) == 0x000000, "Member 'BP_PlayerController_TomatoFight_C_Update_Round_Start_Countdown_UI::Round_Starts_In' has a wrong offset!");

// Function BP_PlayerController_TomatoFight.BP_PlayerController_TomatoFight_C.Set Round Time
// 0x0008 (0x0008 - 0x0000)
struct BP_PlayerController_TomatoFight_C_Set_Round_Time final
{
public:
	int32                                         Round_Time;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Is_Objective_Phase;                                // 0x0004(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_PlayerController_TomatoFight_C_Set_Round_Time) == 0x000004, "Wrong alignment on BP_PlayerController_TomatoFight_C_Set_Round_Time");
static_assert(sizeof(BP_PlayerController_TomatoFight_C_Set_Round_Time) == 0x000008, "Wrong size on BP_PlayerController_TomatoFight_C_Set_Round_Time");
static_assert(offsetof(BP_PlayerController_TomatoFight_C_Set_Round_Time, Round_Time) == 0x000000, "Member 'BP_PlayerController_TomatoFight_C_Set_Round_Time::Round_Time' has a wrong offset!");
static_assert(offsetof(BP_PlayerController_TomatoFight_C_Set_Round_Time, Is_Objective_Phase) == 0x000004, "Member 'BP_PlayerController_TomatoFight_C_Set_Round_Time::Is_Objective_Phase' has a wrong offset!");

// Function BP_PlayerController_TomatoFight.BP_PlayerController_TomatoFight_C.Start Countdown in Waiting for Match
// 0x0008 (0x0008 - 0x0000)
struct BP_PlayerController_TomatoFight_C_Start_Countdown_in_Waiting_for_Match final
{
public:
	int32                                         Time;                                              // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          All_Connected;                                     // 0x0004(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_PlayerController_TomatoFight_C_Start_Countdown_in_Waiting_for_Match) == 0x000004, "Wrong alignment on BP_PlayerController_TomatoFight_C_Start_Countdown_in_Waiting_for_Match");
static_assert(sizeof(BP_PlayerController_TomatoFight_C_Start_Countdown_in_Waiting_for_Match) == 0x000008, "Wrong size on BP_PlayerController_TomatoFight_C_Start_Countdown_in_Waiting_for_Match");
static_assert(offsetof(BP_PlayerController_TomatoFight_C_Start_Countdown_in_Waiting_for_Match, Time) == 0x000000, "Member 'BP_PlayerController_TomatoFight_C_Start_Countdown_in_Waiting_for_Match::Time' has a wrong offset!");
static_assert(offsetof(BP_PlayerController_TomatoFight_C_Start_Countdown_in_Waiting_for_Match, All_Connected) == 0x000004, "Member 'BP_PlayerController_TomatoFight_C_Start_Countdown_in_Waiting_for_Match::All_Connected' has a wrong offset!");

// Function BP_PlayerController_TomatoFight.BP_PlayerController_TomatoFight_C.Show Round Start Countdown UI
// 0x0004 (0x0004 - 0x0000)
struct BP_PlayerController_TomatoFight_C_Show_Round_Start_Countdown_UI final
{
public:
	int32                                         Round_Starts_In;                                   // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_PlayerController_TomatoFight_C_Show_Round_Start_Countdown_UI) == 0x000004, "Wrong alignment on BP_PlayerController_TomatoFight_C_Show_Round_Start_Countdown_UI");
static_assert(sizeof(BP_PlayerController_TomatoFight_C_Show_Round_Start_Countdown_UI) == 0x000004, "Wrong size on BP_PlayerController_TomatoFight_C_Show_Round_Start_Countdown_UI");
static_assert(offsetof(BP_PlayerController_TomatoFight_C_Show_Round_Start_Countdown_UI, Round_Starts_In) == 0x000000, "Member 'BP_PlayerController_TomatoFight_C_Show_Round_Start_Countdown_UI::Round_Starts_In' has a wrong offset!");

// Function BP_PlayerController_TomatoFight.BP_PlayerController_TomatoFight_C.Update Match Progress
// 0x0008 (0x0008 - 0x0000)
struct BP_PlayerController_TomatoFight_C_Update_Match_Progress final
{
public:
	int32                                         Attackers_Won_Rounds;                              // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Defenders_Won_Rounds;                              // 0x0004(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_PlayerController_TomatoFight_C_Update_Match_Progress) == 0x000004, "Wrong alignment on BP_PlayerController_TomatoFight_C_Update_Match_Progress");
static_assert(sizeof(BP_PlayerController_TomatoFight_C_Update_Match_Progress) == 0x000008, "Wrong size on BP_PlayerController_TomatoFight_C_Update_Match_Progress");
static_assert(offsetof(BP_PlayerController_TomatoFight_C_Update_Match_Progress, Attackers_Won_Rounds) == 0x000000, "Member 'BP_PlayerController_TomatoFight_C_Update_Match_Progress::Attackers_Won_Rounds' has a wrong offset!");
static_assert(offsetof(BP_PlayerController_TomatoFight_C_Update_Match_Progress, Defenders_Won_Rounds) == 0x000004, "Member 'BP_PlayerController_TomatoFight_C_Update_Match_Progress::Defenders_Won_Rounds' has a wrong offset!");

// Function BP_PlayerController_TomatoFight.BP_PlayerController_TomatoFight_C.Show Match Progress UI
// 0x000C (0x000C - 0x0000)
struct BP_PlayerController_TomatoFight_C_Show_Match_Progress_UI final
{
public:
	int32                                         Round_Time;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Attackers_Won_Rounds;                              // 0x0004(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Defenders_Won_Rounds;                              // 0x0008(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_PlayerController_TomatoFight_C_Show_Match_Progress_UI) == 0x000004, "Wrong alignment on BP_PlayerController_TomatoFight_C_Show_Match_Progress_UI");
static_assert(sizeof(BP_PlayerController_TomatoFight_C_Show_Match_Progress_UI) == 0x00000C, "Wrong size on BP_PlayerController_TomatoFight_C_Show_Match_Progress_UI");
static_assert(offsetof(BP_PlayerController_TomatoFight_C_Show_Match_Progress_UI, Round_Time) == 0x000000, "Member 'BP_PlayerController_TomatoFight_C_Show_Match_Progress_UI::Round_Time' has a wrong offset!");
static_assert(offsetof(BP_PlayerController_TomatoFight_C_Show_Match_Progress_UI, Attackers_Won_Rounds) == 0x000004, "Member 'BP_PlayerController_TomatoFight_C_Show_Match_Progress_UI::Attackers_Won_Rounds' has a wrong offset!");
static_assert(offsetof(BP_PlayerController_TomatoFight_C_Show_Match_Progress_UI, Defenders_Won_Rounds) == 0x000008, "Member 'BP_PlayerController_TomatoFight_C_Show_Match_Progress_UI::Defenders_Won_Rounds' has a wrong offset!");

// Function BP_PlayerController_TomatoFight.BP_PlayerController_TomatoFight_C.Show Player Notification
// 0x0038 (0x0038 - 0x0000)
struct BP_PlayerController_TomatoFight_C_Show_Player_Notification final
{
public:
	class FText                                   Title;                                             // 0x0000(0x0018)(BlueprintVisible, BlueprintReadOnly, Parm)
	class FText                                   Reason;                                            // 0x0018(0x0018)(BlueprintVisible, BlueprintReadOnly, Parm)
	ERaidNotificationType                         Type;                                              // 0x0030(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_PlayerController_TomatoFight_C_Show_Player_Notification) == 0x000008, "Wrong alignment on BP_PlayerController_TomatoFight_C_Show_Player_Notification");
static_assert(sizeof(BP_PlayerController_TomatoFight_C_Show_Player_Notification) == 0x000038, "Wrong size on BP_PlayerController_TomatoFight_C_Show_Player_Notification");
static_assert(offsetof(BP_PlayerController_TomatoFight_C_Show_Player_Notification, Title) == 0x000000, "Member 'BP_PlayerController_TomatoFight_C_Show_Player_Notification::Title' has a wrong offset!");
static_assert(offsetof(BP_PlayerController_TomatoFight_C_Show_Player_Notification, Reason) == 0x000018, "Member 'BP_PlayerController_TomatoFight_C_Show_Player_Notification::Reason' has a wrong offset!");
static_assert(offsetof(BP_PlayerController_TomatoFight_C_Show_Player_Notification, Type) == 0x000030, "Member 'BP_PlayerController_TomatoFight_C_Show_Player_Notification::Type' has a wrong offset!");

// Function BP_PlayerController_TomatoFight.BP_PlayerController_TomatoFight_C.Cheat_SkipMatch
// 0x0001 (0x0001 - 0x0000)
struct BP_PlayerController_TomatoFight_C_Cheat_SkipMatch final
{
public:
	bool                                          LocalPlayerWins;                                   // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_PlayerController_TomatoFight_C_Cheat_SkipMatch) == 0x000001, "Wrong alignment on BP_PlayerController_TomatoFight_C_Cheat_SkipMatch");
static_assert(sizeof(BP_PlayerController_TomatoFight_C_Cheat_SkipMatch) == 0x000001, "Wrong size on BP_PlayerController_TomatoFight_C_Cheat_SkipMatch");
static_assert(offsetof(BP_PlayerController_TomatoFight_C_Cheat_SkipMatch, LocalPlayerWins) == 0x000000, "Member 'BP_PlayerController_TomatoFight_C_Cheat_SkipMatch::LocalPlayerWins' has a wrong offset!");

// Function BP_PlayerController_TomatoFight.BP_PlayerController_TomatoFight_C.Add or Remove Objective Marker
// 0x01A0 (0x01A0 - 0x0000)
struct BP_PlayerController_TomatoFight_C_Add_or_Remove_Objective_Marker final
{
public:
	class AActor*                                 Located_Actor;                                     // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Add;                                               // 0x0008(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	EMapMarkerType                                Temp_byte_Variable;                                // 0x0009(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x000A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	EMapMarkerType                                Temp_byte_Variable_1;                              // 0x000B(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UClass*                                 CallFunc_GetObjectClass_ReturnValue;               // 0x0010(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_ClassIsChildOf_ReturnValue;               // 0x0018(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_19[0x3];                                       // 0x0019(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_K2_GetActorLocation_ReturnValue;          // 0x001C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FString                                 CallFunc_GetDisplayName_ReturnValue;               // 0x0028(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FName                                   CallFunc_Conv_StringToName_ReturnValue;            // 0x0038(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FString                                 CallFunc_GetDisplayName_ReturnValue_1;             // 0x0040(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FName                                   CallFunc_Conv_StringToName_ReturnValue_1;          // 0x0050(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_K2_GetActorLocation_ReturnValue_1;        // 0x0058(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable;                                // 0x0064(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_65[0x3];                                       // 0x0065(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 CallFunc_GetDisplayName_ReturnValue_2;             // 0x0068(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FName                                   CallFunc_Conv_StringToName_ReturnValue_2;          // 0x0078(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EMapMarkerType                                K2Node_Select_Default;                             // 0x0080(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_81[0x7];                                       // 0x0081(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FS_CustomMapMarker                     K2Node_MakeStruct_S_CustomMapMarker;               // 0x0088(0x0050)(HasGetValueTypeHash)
	struct FS_CustomMapMarker                     CallFunc_Map_Find_Value;                           // 0x00D8(0x0050)(HasGetValueTypeHash)
	bool                                          CallFunc_Map_Find_ReturnValue;                     // 0x0128(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_129[0x7];                                      // 0x0129(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FS_CustomMapMarker_Optimized           CallFunc_EncodeMapMarker_Map_Marker_Optimized;     // 0x0130(0x0038)(HasGetValueTypeHash)
	struct FS_CustomMapMarker_Optimized           CallFunc_EncodeMapMarker_Map_Marker_Optimized_1;   // 0x0168(0x0038)(HasGetValueTypeHash)
};
static_assert(alignof(BP_PlayerController_TomatoFight_C_Add_or_Remove_Objective_Marker) == 0x000008, "Wrong alignment on BP_PlayerController_TomatoFight_C_Add_or_Remove_Objective_Marker");
static_assert(sizeof(BP_PlayerController_TomatoFight_C_Add_or_Remove_Objective_Marker) == 0x0001A0, "Wrong size on BP_PlayerController_TomatoFight_C_Add_or_Remove_Objective_Marker");
static_assert(offsetof(BP_PlayerController_TomatoFight_C_Add_or_Remove_Objective_Marker, Located_Actor) == 0x000000, "Member 'BP_PlayerController_TomatoFight_C_Add_or_Remove_Objective_Marker::Located_Actor' has a wrong offset!");
static_assert(offsetof(BP_PlayerController_TomatoFight_C_Add_or_Remove_Objective_Marker, Add) == 0x000008, "Member 'BP_PlayerController_TomatoFight_C_Add_or_Remove_Objective_Marker::Add' has a wrong offset!");
static_assert(offsetof(BP_PlayerController_TomatoFight_C_Add_or_Remove_Objective_Marker, Temp_byte_Variable) == 0x000009, "Member 'BP_PlayerController_TomatoFight_C_Add_or_Remove_Objective_Marker::Temp_byte_Variable' has a wrong offset!");
static_assert(offsetof(BP_PlayerController_TomatoFight_C_Add_or_Remove_Objective_Marker, CallFunc_IsValid_ReturnValue) == 0x00000A, "Member 'BP_PlayerController_TomatoFight_C_Add_or_Remove_Objective_Marker::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerController_TomatoFight_C_Add_or_Remove_Objective_Marker, Temp_byte_Variable_1) == 0x00000B, "Member 'BP_PlayerController_TomatoFight_C_Add_or_Remove_Objective_Marker::Temp_byte_Variable_1' has a wrong offset!");
static_assert(offsetof(BP_PlayerController_TomatoFight_C_Add_or_Remove_Objective_Marker, CallFunc_GetObjectClass_ReturnValue) == 0x000010, "Member 'BP_PlayerController_TomatoFight_C_Add_or_Remove_Objective_Marker::CallFunc_GetObjectClass_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerController_TomatoFight_C_Add_or_Remove_Objective_Marker, CallFunc_ClassIsChildOf_ReturnValue) == 0x000018, "Member 'BP_PlayerController_TomatoFight_C_Add_or_Remove_Objective_Marker::CallFunc_ClassIsChildOf_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerController_TomatoFight_C_Add_or_Remove_Objective_Marker, CallFunc_K2_GetActorLocation_ReturnValue) == 0x00001C, "Member 'BP_PlayerController_TomatoFight_C_Add_or_Remove_Objective_Marker::CallFunc_K2_GetActorLocation_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerController_TomatoFight_C_Add_or_Remove_Objective_Marker, CallFunc_GetDisplayName_ReturnValue) == 0x000028, "Member 'BP_PlayerController_TomatoFight_C_Add_or_Remove_Objective_Marker::CallFunc_GetDisplayName_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerController_TomatoFight_C_Add_or_Remove_Objective_Marker, CallFunc_Conv_StringToName_ReturnValue) == 0x000038, "Member 'BP_PlayerController_TomatoFight_C_Add_or_Remove_Objective_Marker::CallFunc_Conv_StringToName_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerController_TomatoFight_C_Add_or_Remove_Objective_Marker, CallFunc_GetDisplayName_ReturnValue_1) == 0x000040, "Member 'BP_PlayerController_TomatoFight_C_Add_or_Remove_Objective_Marker::CallFunc_GetDisplayName_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_PlayerController_TomatoFight_C_Add_or_Remove_Objective_Marker, CallFunc_Conv_StringToName_ReturnValue_1) == 0x000050, "Member 'BP_PlayerController_TomatoFight_C_Add_or_Remove_Objective_Marker::CallFunc_Conv_StringToName_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_PlayerController_TomatoFight_C_Add_or_Remove_Objective_Marker, CallFunc_K2_GetActorLocation_ReturnValue_1) == 0x000058, "Member 'BP_PlayerController_TomatoFight_C_Add_or_Remove_Objective_Marker::CallFunc_K2_GetActorLocation_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_PlayerController_TomatoFight_C_Add_or_Remove_Objective_Marker, Temp_bool_Variable) == 0x000064, "Member 'BP_PlayerController_TomatoFight_C_Add_or_Remove_Objective_Marker::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(BP_PlayerController_TomatoFight_C_Add_or_Remove_Objective_Marker, CallFunc_GetDisplayName_ReturnValue_2) == 0x000068, "Member 'BP_PlayerController_TomatoFight_C_Add_or_Remove_Objective_Marker::CallFunc_GetDisplayName_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BP_PlayerController_TomatoFight_C_Add_or_Remove_Objective_Marker, CallFunc_Conv_StringToName_ReturnValue_2) == 0x000078, "Member 'BP_PlayerController_TomatoFight_C_Add_or_Remove_Objective_Marker::CallFunc_Conv_StringToName_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BP_PlayerController_TomatoFight_C_Add_or_Remove_Objective_Marker, K2Node_Select_Default) == 0x000080, "Member 'BP_PlayerController_TomatoFight_C_Add_or_Remove_Objective_Marker::K2Node_Select_Default' has a wrong offset!");
static_assert(offsetof(BP_PlayerController_TomatoFight_C_Add_or_Remove_Objective_Marker, K2Node_MakeStruct_S_CustomMapMarker) == 0x000088, "Member 'BP_PlayerController_TomatoFight_C_Add_or_Remove_Objective_Marker::K2Node_MakeStruct_S_CustomMapMarker' has a wrong offset!");
static_assert(offsetof(BP_PlayerController_TomatoFight_C_Add_or_Remove_Objective_Marker, CallFunc_Map_Find_Value) == 0x0000D8, "Member 'BP_PlayerController_TomatoFight_C_Add_or_Remove_Objective_Marker::CallFunc_Map_Find_Value' has a wrong offset!");
static_assert(offsetof(BP_PlayerController_TomatoFight_C_Add_or_Remove_Objective_Marker, CallFunc_Map_Find_ReturnValue) == 0x000128, "Member 'BP_PlayerController_TomatoFight_C_Add_or_Remove_Objective_Marker::CallFunc_Map_Find_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerController_TomatoFight_C_Add_or_Remove_Objective_Marker, CallFunc_EncodeMapMarker_Map_Marker_Optimized) == 0x000130, "Member 'BP_PlayerController_TomatoFight_C_Add_or_Remove_Objective_Marker::CallFunc_EncodeMapMarker_Map_Marker_Optimized' has a wrong offset!");
static_assert(offsetof(BP_PlayerController_TomatoFight_C_Add_or_Remove_Objective_Marker, CallFunc_EncodeMapMarker_Map_Marker_Optimized_1) == 0x000168, "Member 'BP_PlayerController_TomatoFight_C_Add_or_Remove_Objective_Marker::CallFunc_EncodeMapMarker_Map_Marker_Optimized_1' has a wrong offset!");

// Function BP_PlayerController_TomatoFight.BP_PlayerController_TomatoFight_C.Start Spectating
// 0x0270 (0x0270 - 0x0000)
struct BP_PlayerController_TomatoFight_C_Start_Spectating final
{
public:
	struct FTransform                             Spectator_Transform;                               // 0x0000(0x0030)(Edit, BlueprintVisible, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsServer_ReturnValue;                     // 0x0030(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_31[0x3];                                       // 0x0031(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x0034(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x0038(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3C[0x4];                                       // 0x003C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class APawn*                                  CallFunc_K2_GetPawn_ReturnValue;                   // 0x0040(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<class APlayerController*>              CallFunc_GetPlayerControllers_ReturnValue;         // 0x0048(0x0010)(ReferenceParm)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0058(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_59[0x3];                                       // 0x0059(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x005C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x0060(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_61[0xF];                                       // 0x0061(0x000F)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             CallFunc_GetTransform_ReturnValue;                 // 0x0070(0x0030)(ConstParm, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_True_if_break_was_hit_Variable;          // 0x00A0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_A1[0x3];                                       // 0x00A1(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_BreakTransform_Location;                  // 0x00A4(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               CallFunc_BreakTransform_Rotation;                  // 0x00B0(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FVector                                CallFunc_BreakTransform_Scale;                     // 0x00BC(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Add_VectorVector_ReturnValue;             // 0x00C8(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Not_PreBool_ReturnValue;                  // 0x00D4(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_D5[0xB];                                       // 0x00D5(0x000B)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             CallFunc_MakeTransform_ReturnValue;                // 0x00E0(0x0030)(IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanAND_ReturnValue;                   // 0x0110(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_111[0x3];                                      // 0x0111(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Temp_int_Array_Index_Variable;                     // 0x0114(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class APlayerController*                      CallFunc_Array_Get_Item;                           // 0x0118(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 CallFunc_BeginDeferredActorSpawnFromClass_ReturnValue; // 0x0120(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class APawn*                                  CallFunc_K2_GetPawn_ReturnValue_1;                 // 0x0128(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ABP_FreeCameraSpectator_C*              CallFunc_FinishSpawningActor_ReturnValue;          // 0x0130(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AHumanCharacter*                        K2Node_DynamicCast_AsHuman_Character;              // 0x0138(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0140(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_141[0xF];                                      // 0x0141(0x000F)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             CallFunc_GetTransform_ReturnValue_1;               // 0x0150(0x0030)(ConstParm, IsPlainOldData, NoDestructor)
	struct FVector                                CallFunc_BreakTransform_Location_1;                // 0x0180(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               CallFunc_BreakTransform_Rotation_1;                // 0x018C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FVector                                CallFunc_BreakTransform_Scale_1;                   // 0x0198(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Add_VectorVector_ReturnValue_1;           // 0x01A4(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FTransform                             CallFunc_MakeTransform_ReturnValue_1;              // 0x01B0(0x0030)(IsPlainOldData, NoDestructor)
	struct FHitResult                             CallFunc_K2_SetActorTransform_SweepHitResult;      // 0x01E0(0x008C)(IsPlainOldData, NoDestructor, ContainsInstancedReference)
	bool                                          CallFunc_K2_SetActorTransform_ReturnValue;         // 0x026C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue_1;                    // 0x026D(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue_2;                    // 0x026E(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_PlayerController_TomatoFight_C_Start_Spectating) == 0x000010, "Wrong alignment on BP_PlayerController_TomatoFight_C_Start_Spectating");
static_assert(sizeof(BP_PlayerController_TomatoFight_C_Start_Spectating) == 0x000270, "Wrong size on BP_PlayerController_TomatoFight_C_Start_Spectating");
static_assert(offsetof(BP_PlayerController_TomatoFight_C_Start_Spectating, Spectator_Transform) == 0x000000, "Member 'BP_PlayerController_TomatoFight_C_Start_Spectating::Spectator_Transform' has a wrong offset!");
static_assert(offsetof(BP_PlayerController_TomatoFight_C_Start_Spectating, CallFunc_IsServer_ReturnValue) == 0x000030, "Member 'BP_PlayerController_TomatoFight_C_Start_Spectating::CallFunc_IsServer_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerController_TomatoFight_C_Start_Spectating, Temp_int_Loop_Counter_Variable) == 0x000034, "Member 'BP_PlayerController_TomatoFight_C_Start_Spectating::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(BP_PlayerController_TomatoFight_C_Start_Spectating, CallFunc_Add_IntInt_ReturnValue) == 0x000038, "Member 'BP_PlayerController_TomatoFight_C_Start_Spectating::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerController_TomatoFight_C_Start_Spectating, CallFunc_K2_GetPawn_ReturnValue) == 0x000040, "Member 'BP_PlayerController_TomatoFight_C_Start_Spectating::CallFunc_K2_GetPawn_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerController_TomatoFight_C_Start_Spectating, CallFunc_GetPlayerControllers_ReturnValue) == 0x000048, "Member 'BP_PlayerController_TomatoFight_C_Start_Spectating::CallFunc_GetPlayerControllers_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerController_TomatoFight_C_Start_Spectating, CallFunc_IsValid_ReturnValue) == 0x000058, "Member 'BP_PlayerController_TomatoFight_C_Start_Spectating::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerController_TomatoFight_C_Start_Spectating, CallFunc_Array_Length_ReturnValue) == 0x00005C, "Member 'BP_PlayerController_TomatoFight_C_Start_Spectating::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerController_TomatoFight_C_Start_Spectating, CallFunc_Less_IntInt_ReturnValue) == 0x000060, "Member 'BP_PlayerController_TomatoFight_C_Start_Spectating::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerController_TomatoFight_C_Start_Spectating, CallFunc_GetTransform_ReturnValue) == 0x000070, "Member 'BP_PlayerController_TomatoFight_C_Start_Spectating::CallFunc_GetTransform_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerController_TomatoFight_C_Start_Spectating, Temp_bool_True_if_break_was_hit_Variable) == 0x0000A0, "Member 'BP_PlayerController_TomatoFight_C_Start_Spectating::Temp_bool_True_if_break_was_hit_Variable' has a wrong offset!");
static_assert(offsetof(BP_PlayerController_TomatoFight_C_Start_Spectating, CallFunc_BreakTransform_Location) == 0x0000A4, "Member 'BP_PlayerController_TomatoFight_C_Start_Spectating::CallFunc_BreakTransform_Location' has a wrong offset!");
static_assert(offsetof(BP_PlayerController_TomatoFight_C_Start_Spectating, CallFunc_BreakTransform_Rotation) == 0x0000B0, "Member 'BP_PlayerController_TomatoFight_C_Start_Spectating::CallFunc_BreakTransform_Rotation' has a wrong offset!");
static_assert(offsetof(BP_PlayerController_TomatoFight_C_Start_Spectating, CallFunc_BreakTransform_Scale) == 0x0000BC, "Member 'BP_PlayerController_TomatoFight_C_Start_Spectating::CallFunc_BreakTransform_Scale' has a wrong offset!");
static_assert(offsetof(BP_PlayerController_TomatoFight_C_Start_Spectating, CallFunc_Add_VectorVector_ReturnValue) == 0x0000C8, "Member 'BP_PlayerController_TomatoFight_C_Start_Spectating::CallFunc_Add_VectorVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerController_TomatoFight_C_Start_Spectating, CallFunc_Not_PreBool_ReturnValue) == 0x0000D4, "Member 'BP_PlayerController_TomatoFight_C_Start_Spectating::CallFunc_Not_PreBool_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerController_TomatoFight_C_Start_Spectating, CallFunc_MakeTransform_ReturnValue) == 0x0000E0, "Member 'BP_PlayerController_TomatoFight_C_Start_Spectating::CallFunc_MakeTransform_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerController_TomatoFight_C_Start_Spectating, CallFunc_BooleanAND_ReturnValue) == 0x000110, "Member 'BP_PlayerController_TomatoFight_C_Start_Spectating::CallFunc_BooleanAND_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerController_TomatoFight_C_Start_Spectating, Temp_int_Array_Index_Variable) == 0x000114, "Member 'BP_PlayerController_TomatoFight_C_Start_Spectating::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(BP_PlayerController_TomatoFight_C_Start_Spectating, CallFunc_Array_Get_Item) == 0x000118, "Member 'BP_PlayerController_TomatoFight_C_Start_Spectating::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(BP_PlayerController_TomatoFight_C_Start_Spectating, CallFunc_BeginDeferredActorSpawnFromClass_ReturnValue) == 0x000120, "Member 'BP_PlayerController_TomatoFight_C_Start_Spectating::CallFunc_BeginDeferredActorSpawnFromClass_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerController_TomatoFight_C_Start_Spectating, CallFunc_K2_GetPawn_ReturnValue_1) == 0x000128, "Member 'BP_PlayerController_TomatoFight_C_Start_Spectating::CallFunc_K2_GetPawn_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_PlayerController_TomatoFight_C_Start_Spectating, CallFunc_FinishSpawningActor_ReturnValue) == 0x000130, "Member 'BP_PlayerController_TomatoFight_C_Start_Spectating::CallFunc_FinishSpawningActor_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerController_TomatoFight_C_Start_Spectating, K2Node_DynamicCast_AsHuman_Character) == 0x000138, "Member 'BP_PlayerController_TomatoFight_C_Start_Spectating::K2Node_DynamicCast_AsHuman_Character' has a wrong offset!");
static_assert(offsetof(BP_PlayerController_TomatoFight_C_Start_Spectating, K2Node_DynamicCast_bSuccess) == 0x000140, "Member 'BP_PlayerController_TomatoFight_C_Start_Spectating::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(BP_PlayerController_TomatoFight_C_Start_Spectating, CallFunc_GetTransform_ReturnValue_1) == 0x000150, "Member 'BP_PlayerController_TomatoFight_C_Start_Spectating::CallFunc_GetTransform_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_PlayerController_TomatoFight_C_Start_Spectating, CallFunc_BreakTransform_Location_1) == 0x000180, "Member 'BP_PlayerController_TomatoFight_C_Start_Spectating::CallFunc_BreakTransform_Location_1' has a wrong offset!");
static_assert(offsetof(BP_PlayerController_TomatoFight_C_Start_Spectating, CallFunc_BreakTransform_Rotation_1) == 0x00018C, "Member 'BP_PlayerController_TomatoFight_C_Start_Spectating::CallFunc_BreakTransform_Rotation_1' has a wrong offset!");
static_assert(offsetof(BP_PlayerController_TomatoFight_C_Start_Spectating, CallFunc_BreakTransform_Scale_1) == 0x000198, "Member 'BP_PlayerController_TomatoFight_C_Start_Spectating::CallFunc_BreakTransform_Scale_1' has a wrong offset!");
static_assert(offsetof(BP_PlayerController_TomatoFight_C_Start_Spectating, CallFunc_Add_VectorVector_ReturnValue_1) == 0x0001A4, "Member 'BP_PlayerController_TomatoFight_C_Start_Spectating::CallFunc_Add_VectorVector_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_PlayerController_TomatoFight_C_Start_Spectating, CallFunc_MakeTransform_ReturnValue_1) == 0x0001B0, "Member 'BP_PlayerController_TomatoFight_C_Start_Spectating::CallFunc_MakeTransform_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_PlayerController_TomatoFight_C_Start_Spectating, CallFunc_K2_SetActorTransform_SweepHitResult) == 0x0001E0, "Member 'BP_PlayerController_TomatoFight_C_Start_Spectating::CallFunc_K2_SetActorTransform_SweepHitResult' has a wrong offset!");
static_assert(offsetof(BP_PlayerController_TomatoFight_C_Start_Spectating, CallFunc_K2_SetActorTransform_ReturnValue) == 0x00026C, "Member 'BP_PlayerController_TomatoFight_C_Start_Spectating::CallFunc_K2_SetActorTransform_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerController_TomatoFight_C_Start_Spectating, CallFunc_IsValid_ReturnValue_1) == 0x00026D, "Member 'BP_PlayerController_TomatoFight_C_Start_Spectating::CallFunc_IsValid_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_PlayerController_TomatoFight_C_Start_Spectating, CallFunc_IsValid_ReturnValue_2) == 0x00026E, "Member 'BP_PlayerController_TomatoFight_C_Start_Spectating::CallFunc_IsValid_ReturnValue_2' has a wrong offset!");

// Function BP_PlayerController_TomatoFight.BP_PlayerController_TomatoFight_C.Is Attacker
// 0x0028 (0x0028 - 0x0000)
struct BP_PlayerController_TomatoFight_C_Is_Attacker final
{
public:
	bool                                          Is_Attacker_0;                                     // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class ABP_PlayerState_Teams_C*                K2Node_DynamicCast_AsBP_Player_State_Teams;        // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UBP_GSC_Team_Raid_C*                    K2Node_DynamicCast_AsBP_GSC_Team_Raid;             // 0x0018(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess_1;                     // 0x0020(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Is_Attacker_Is_Attacker;                  // 0x0021(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_PlayerController_TomatoFight_C_Is_Attacker) == 0x000008, "Wrong alignment on BP_PlayerController_TomatoFight_C_Is_Attacker");
static_assert(sizeof(BP_PlayerController_TomatoFight_C_Is_Attacker) == 0x000028, "Wrong size on BP_PlayerController_TomatoFight_C_Is_Attacker");
static_assert(offsetof(BP_PlayerController_TomatoFight_C_Is_Attacker, Is_Attacker_0) == 0x000000, "Member 'BP_PlayerController_TomatoFight_C_Is_Attacker::Is_Attacker_0' has a wrong offset!");
static_assert(offsetof(BP_PlayerController_TomatoFight_C_Is_Attacker, K2Node_DynamicCast_AsBP_Player_State_Teams) == 0x000008, "Member 'BP_PlayerController_TomatoFight_C_Is_Attacker::K2Node_DynamicCast_AsBP_Player_State_Teams' has a wrong offset!");
static_assert(offsetof(BP_PlayerController_TomatoFight_C_Is_Attacker, K2Node_DynamicCast_bSuccess) == 0x000010, "Member 'BP_PlayerController_TomatoFight_C_Is_Attacker::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(BP_PlayerController_TomatoFight_C_Is_Attacker, K2Node_DynamicCast_AsBP_GSC_Team_Raid) == 0x000018, "Member 'BP_PlayerController_TomatoFight_C_Is_Attacker::K2Node_DynamicCast_AsBP_GSC_Team_Raid' has a wrong offset!");
static_assert(offsetof(BP_PlayerController_TomatoFight_C_Is_Attacker, K2Node_DynamicCast_bSuccess_1) == 0x000020, "Member 'BP_PlayerController_TomatoFight_C_Is_Attacker::K2Node_DynamicCast_bSuccess_1' has a wrong offset!");
static_assert(offsetof(BP_PlayerController_TomatoFight_C_Is_Attacker, CallFunc_Is_Attacker_Is_Attacker) == 0x000021, "Member 'BP_PlayerController_TomatoFight_C_Is_Attacker::CallFunc_Is_Attacker_Is_Attacker' has a wrong offset!");

// Function BP_PlayerController_TomatoFight.BP_PlayerController_TomatoFight_C.Add Teammate Markers
// 0x0170 (0x0170 - 0x0000)
struct BP_PlayerController_TomatoFight_C_Add_Teammate_Markers final
{
public:
	TArray<class FName>                           Teammate_Markers_This_Tick;                        // 0x0000(0x0010)(Edit, BlueprintVisible)
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x0014(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Array_Index_Variable;                     // 0x0018(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Array_Index_Variable_1;                   // 0x001C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable_1;                  // 0x0020(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   CallFunc_Array_Get_Item;                           // 0x0024(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x002C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x0030(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Array_Contains_ReturnValue;               // 0x0031(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Not_PreBool_ReturnValue;                  // 0x0032(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_33[0x1];                                       // 0x0033(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Add_IntInt_ReturnValue_1;                 // 0x0034(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ABP_PlayerState_Teams_C*                K2Node_DynamicCast_AsBP_Player_State_Teams;        // 0x0038(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0040(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0041(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_42[0x6];                                       // 0x0042(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class ABP_PlayerState_C*>              CallFunc_FindTeammates_TeammatesPlayerStates;      // 0x0048(0x0010)(ReferenceParm)
	class ABP_PlayerState_C*                      CallFunc_Array_Get_Item_1;                         // 0x0058(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue_1;               // 0x0060(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_64[0x4];                                       // 0x0064(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class ABP_PlayerState_Teams_C*                K2Node_DynamicCast_AsBP_Player_State_Teams_1;      // 0x0068(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess_1;                     // 0x0070(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Less_IntInt_ReturnValue_1;                // 0x0071(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue_1;                    // 0x0072(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_73[0x1];                                       // 0x0073(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_K2_GetActorLocation_ReturnValue;          // 0x0074(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               CallFunc_GetBaseAimRotation_ReturnValue;           // 0x0080(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FRotator                               CallFunc_NormalizedDeltaRotator_ReturnValue;       // 0x008C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_GetIsDead_ReturnValue;                    // 0x0098(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_99[0x3];                                       // 0x0099(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_BreakRotator_Roll;                        // 0x009C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakRotator_Pitch;                       // 0x00A0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakRotator_Yaw;                         // 0x00A4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Not_PreBool_ReturnValue_1;                // 0x00A8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_A9[0x7];                                       // 0x00A9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 CallFunc_GetPlayerName_ReturnValue;                // 0x00B0(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	bool                                          CallFunc_StringNotEmpty_ReturnValue;               // 0x00C0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_C1[0x3];                                       // 0x00C1(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   CallFunc_Conv_StringToName_ReturnValue;            // 0x00C4(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Add_ReturnValue;                    // 0x00CC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FText                                   CallFunc_Conv_StringToText_ReturnValue;            // 0x00D0(0x0018)()
	struct FS_CustomMapMarker                     K2Node_MakeStruct_S_CustomMapMarker;               // 0x00E8(0x0050)(HasGetValueTypeHash)
	struct FS_CustomMapMarker_Optimized           CallFunc_EncodeMapMarker_Map_Marker_Optimized;     // 0x0138(0x0038)(HasGetValueTypeHash)
};
static_assert(alignof(BP_PlayerController_TomatoFight_C_Add_Teammate_Markers) == 0x000008, "Wrong alignment on BP_PlayerController_TomatoFight_C_Add_Teammate_Markers");
static_assert(sizeof(BP_PlayerController_TomatoFight_C_Add_Teammate_Markers) == 0x000170, "Wrong size on BP_PlayerController_TomatoFight_C_Add_Teammate_Markers");
static_assert(offsetof(BP_PlayerController_TomatoFight_C_Add_Teammate_Markers, Teammate_Markers_This_Tick) == 0x000000, "Member 'BP_PlayerController_TomatoFight_C_Add_Teammate_Markers::Teammate_Markers_This_Tick' has a wrong offset!");
static_assert(offsetof(BP_PlayerController_TomatoFight_C_Add_Teammate_Markers, Temp_int_Loop_Counter_Variable) == 0x000010, "Member 'BP_PlayerController_TomatoFight_C_Add_Teammate_Markers::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(BP_PlayerController_TomatoFight_C_Add_Teammate_Markers, CallFunc_Add_IntInt_ReturnValue) == 0x000014, "Member 'BP_PlayerController_TomatoFight_C_Add_Teammate_Markers::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerController_TomatoFight_C_Add_Teammate_Markers, Temp_int_Array_Index_Variable) == 0x000018, "Member 'BP_PlayerController_TomatoFight_C_Add_Teammate_Markers::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(BP_PlayerController_TomatoFight_C_Add_Teammate_Markers, Temp_int_Array_Index_Variable_1) == 0x00001C, "Member 'BP_PlayerController_TomatoFight_C_Add_Teammate_Markers::Temp_int_Array_Index_Variable_1' has a wrong offset!");
static_assert(offsetof(BP_PlayerController_TomatoFight_C_Add_Teammate_Markers, Temp_int_Loop_Counter_Variable_1) == 0x000020, "Member 'BP_PlayerController_TomatoFight_C_Add_Teammate_Markers::Temp_int_Loop_Counter_Variable_1' has a wrong offset!");
static_assert(offsetof(BP_PlayerController_TomatoFight_C_Add_Teammate_Markers, CallFunc_Array_Get_Item) == 0x000024, "Member 'BP_PlayerController_TomatoFight_C_Add_Teammate_Markers::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(BP_PlayerController_TomatoFight_C_Add_Teammate_Markers, CallFunc_Array_Length_ReturnValue) == 0x00002C, "Member 'BP_PlayerController_TomatoFight_C_Add_Teammate_Markers::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerController_TomatoFight_C_Add_Teammate_Markers, CallFunc_Less_IntInt_ReturnValue) == 0x000030, "Member 'BP_PlayerController_TomatoFight_C_Add_Teammate_Markers::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerController_TomatoFight_C_Add_Teammate_Markers, CallFunc_Array_Contains_ReturnValue) == 0x000031, "Member 'BP_PlayerController_TomatoFight_C_Add_Teammate_Markers::CallFunc_Array_Contains_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerController_TomatoFight_C_Add_Teammate_Markers, CallFunc_Not_PreBool_ReturnValue) == 0x000032, "Member 'BP_PlayerController_TomatoFight_C_Add_Teammate_Markers::CallFunc_Not_PreBool_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerController_TomatoFight_C_Add_Teammate_Markers, CallFunc_Add_IntInt_ReturnValue_1) == 0x000034, "Member 'BP_PlayerController_TomatoFight_C_Add_Teammate_Markers::CallFunc_Add_IntInt_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_PlayerController_TomatoFight_C_Add_Teammate_Markers, K2Node_DynamicCast_AsBP_Player_State_Teams) == 0x000038, "Member 'BP_PlayerController_TomatoFight_C_Add_Teammate_Markers::K2Node_DynamicCast_AsBP_Player_State_Teams' has a wrong offset!");
static_assert(offsetof(BP_PlayerController_TomatoFight_C_Add_Teammate_Markers, K2Node_DynamicCast_bSuccess) == 0x000040, "Member 'BP_PlayerController_TomatoFight_C_Add_Teammate_Markers::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(BP_PlayerController_TomatoFight_C_Add_Teammate_Markers, CallFunc_IsValid_ReturnValue) == 0x000041, "Member 'BP_PlayerController_TomatoFight_C_Add_Teammate_Markers::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerController_TomatoFight_C_Add_Teammate_Markers, CallFunc_FindTeammates_TeammatesPlayerStates) == 0x000048, "Member 'BP_PlayerController_TomatoFight_C_Add_Teammate_Markers::CallFunc_FindTeammates_TeammatesPlayerStates' has a wrong offset!");
static_assert(offsetof(BP_PlayerController_TomatoFight_C_Add_Teammate_Markers, CallFunc_Array_Get_Item_1) == 0x000058, "Member 'BP_PlayerController_TomatoFight_C_Add_Teammate_Markers::CallFunc_Array_Get_Item_1' has a wrong offset!");
static_assert(offsetof(BP_PlayerController_TomatoFight_C_Add_Teammate_Markers, CallFunc_Array_Length_ReturnValue_1) == 0x000060, "Member 'BP_PlayerController_TomatoFight_C_Add_Teammate_Markers::CallFunc_Array_Length_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_PlayerController_TomatoFight_C_Add_Teammate_Markers, K2Node_DynamicCast_AsBP_Player_State_Teams_1) == 0x000068, "Member 'BP_PlayerController_TomatoFight_C_Add_Teammate_Markers::K2Node_DynamicCast_AsBP_Player_State_Teams_1' has a wrong offset!");
static_assert(offsetof(BP_PlayerController_TomatoFight_C_Add_Teammate_Markers, K2Node_DynamicCast_bSuccess_1) == 0x000070, "Member 'BP_PlayerController_TomatoFight_C_Add_Teammate_Markers::K2Node_DynamicCast_bSuccess_1' has a wrong offset!");
static_assert(offsetof(BP_PlayerController_TomatoFight_C_Add_Teammate_Markers, CallFunc_Less_IntInt_ReturnValue_1) == 0x000071, "Member 'BP_PlayerController_TomatoFight_C_Add_Teammate_Markers::CallFunc_Less_IntInt_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_PlayerController_TomatoFight_C_Add_Teammate_Markers, CallFunc_IsValid_ReturnValue_1) == 0x000072, "Member 'BP_PlayerController_TomatoFight_C_Add_Teammate_Markers::CallFunc_IsValid_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_PlayerController_TomatoFight_C_Add_Teammate_Markers, CallFunc_K2_GetActorLocation_ReturnValue) == 0x000074, "Member 'BP_PlayerController_TomatoFight_C_Add_Teammate_Markers::CallFunc_K2_GetActorLocation_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerController_TomatoFight_C_Add_Teammate_Markers, CallFunc_GetBaseAimRotation_ReturnValue) == 0x000080, "Member 'BP_PlayerController_TomatoFight_C_Add_Teammate_Markers::CallFunc_GetBaseAimRotation_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerController_TomatoFight_C_Add_Teammate_Markers, CallFunc_NormalizedDeltaRotator_ReturnValue) == 0x00008C, "Member 'BP_PlayerController_TomatoFight_C_Add_Teammate_Markers::CallFunc_NormalizedDeltaRotator_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerController_TomatoFight_C_Add_Teammate_Markers, CallFunc_GetIsDead_ReturnValue) == 0x000098, "Member 'BP_PlayerController_TomatoFight_C_Add_Teammate_Markers::CallFunc_GetIsDead_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerController_TomatoFight_C_Add_Teammate_Markers, CallFunc_BreakRotator_Roll) == 0x00009C, "Member 'BP_PlayerController_TomatoFight_C_Add_Teammate_Markers::CallFunc_BreakRotator_Roll' has a wrong offset!");
static_assert(offsetof(BP_PlayerController_TomatoFight_C_Add_Teammate_Markers, CallFunc_BreakRotator_Pitch) == 0x0000A0, "Member 'BP_PlayerController_TomatoFight_C_Add_Teammate_Markers::CallFunc_BreakRotator_Pitch' has a wrong offset!");
static_assert(offsetof(BP_PlayerController_TomatoFight_C_Add_Teammate_Markers, CallFunc_BreakRotator_Yaw) == 0x0000A4, "Member 'BP_PlayerController_TomatoFight_C_Add_Teammate_Markers::CallFunc_BreakRotator_Yaw' has a wrong offset!");
static_assert(offsetof(BP_PlayerController_TomatoFight_C_Add_Teammate_Markers, CallFunc_Not_PreBool_ReturnValue_1) == 0x0000A8, "Member 'BP_PlayerController_TomatoFight_C_Add_Teammate_Markers::CallFunc_Not_PreBool_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_PlayerController_TomatoFight_C_Add_Teammate_Markers, CallFunc_GetPlayerName_ReturnValue) == 0x0000B0, "Member 'BP_PlayerController_TomatoFight_C_Add_Teammate_Markers::CallFunc_GetPlayerName_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerController_TomatoFight_C_Add_Teammate_Markers, CallFunc_StringNotEmpty_ReturnValue) == 0x0000C0, "Member 'BP_PlayerController_TomatoFight_C_Add_Teammate_Markers::CallFunc_StringNotEmpty_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerController_TomatoFight_C_Add_Teammate_Markers, CallFunc_Conv_StringToName_ReturnValue) == 0x0000C4, "Member 'BP_PlayerController_TomatoFight_C_Add_Teammate_Markers::CallFunc_Conv_StringToName_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerController_TomatoFight_C_Add_Teammate_Markers, CallFunc_Array_Add_ReturnValue) == 0x0000CC, "Member 'BP_PlayerController_TomatoFight_C_Add_Teammate_Markers::CallFunc_Array_Add_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerController_TomatoFight_C_Add_Teammate_Markers, CallFunc_Conv_StringToText_ReturnValue) == 0x0000D0, "Member 'BP_PlayerController_TomatoFight_C_Add_Teammate_Markers::CallFunc_Conv_StringToText_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerController_TomatoFight_C_Add_Teammate_Markers, K2Node_MakeStruct_S_CustomMapMarker) == 0x0000E8, "Member 'BP_PlayerController_TomatoFight_C_Add_Teammate_Markers::K2Node_MakeStruct_S_CustomMapMarker' has a wrong offset!");
static_assert(offsetof(BP_PlayerController_TomatoFight_C_Add_Teammate_Markers, CallFunc_EncodeMapMarker_Map_Marker_Optimized) == 0x000138, "Member 'BP_PlayerController_TomatoFight_C_Add_Teammate_Markers::CallFunc_EncodeMapMarker_Map_Marker_Optimized' has a wrong offset!");

// Function BP_PlayerController_TomatoFight.BP_PlayerController_TomatoFight_C.CheatHideUI
// 0x0001 (0x0001 - 0x0000)
struct BP_PlayerController_TomatoFight_C_CheatHideUI final
{
public:
	bool                                          Hide;                                              // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_PlayerController_TomatoFight_C_CheatHideUI) == 0x000001, "Wrong alignment on BP_PlayerController_TomatoFight_C_CheatHideUI");
static_assert(sizeof(BP_PlayerController_TomatoFight_C_CheatHideUI) == 0x000001, "Wrong size on BP_PlayerController_TomatoFight_C_CheatHideUI");
static_assert(offsetof(BP_PlayerController_TomatoFight_C_CheatHideUI, Hide) == 0x000000, "Member 'BP_PlayerController_TomatoFight_C_CheatHideUI::Hide' has a wrong offset!");

// Function BP_PlayerController_TomatoFight.BP_PlayerController_TomatoFight_C.Send Kill Scored Event
// 0x0020 (0x0020 - 0x0000)
struct BP_PlayerController_TomatoFight_C_Send_Kill_Scored_Event final
{
public:
	class AHumanCharacter*                        Killer;                                            // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AHumanCharacter*                        Victim;                                            // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UClass*                                 Instigating_Item;                                  // 0x0010(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Headshot;                                          // 0x0018(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Teamkill;                                          // 0x0019(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_PlayerController_TomatoFight_C_Send_Kill_Scored_Event) == 0x000008, "Wrong alignment on BP_PlayerController_TomatoFight_C_Send_Kill_Scored_Event");
static_assert(sizeof(BP_PlayerController_TomatoFight_C_Send_Kill_Scored_Event) == 0x000020, "Wrong size on BP_PlayerController_TomatoFight_C_Send_Kill_Scored_Event");
static_assert(offsetof(BP_PlayerController_TomatoFight_C_Send_Kill_Scored_Event, Killer) == 0x000000, "Member 'BP_PlayerController_TomatoFight_C_Send_Kill_Scored_Event::Killer' has a wrong offset!");
static_assert(offsetof(BP_PlayerController_TomatoFight_C_Send_Kill_Scored_Event, Victim) == 0x000008, "Member 'BP_PlayerController_TomatoFight_C_Send_Kill_Scored_Event::Victim' has a wrong offset!");
static_assert(offsetof(BP_PlayerController_TomatoFight_C_Send_Kill_Scored_Event, Instigating_Item) == 0x000010, "Member 'BP_PlayerController_TomatoFight_C_Send_Kill_Scored_Event::Instigating_Item' has a wrong offset!");
static_assert(offsetof(BP_PlayerController_TomatoFight_C_Send_Kill_Scored_Event, Headshot) == 0x000018, "Member 'BP_PlayerController_TomatoFight_C_Send_Kill_Scored_Event::Headshot' has a wrong offset!");
static_assert(offsetof(BP_PlayerController_TomatoFight_C_Send_Kill_Scored_Event, Teamkill) == 0x000019, "Member 'BP_PlayerController_TomatoFight_C_Send_Kill_Scored_Event::Teamkill' has a wrong offset!");

}

