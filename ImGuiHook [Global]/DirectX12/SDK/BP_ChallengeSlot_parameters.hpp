#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_ChallengeSlot

#include "Basic.hpp"

#include "E_ChallengeSlotState_structs.hpp"
#include "Engine_structs.hpp"
#include "Flame_structs.hpp"
#include "E_ChallengeManagerState_structs.hpp"
#include "CoreUObject_structs.hpp"


namespace SDK::Params
{

// Function BP_ChallengeSlot.BP_ChallengeSlot_C.State Has Changed__DelegateSignature
// 0x0008 (0x0008 - 0x0000)
struct BP_ChallengeSlot_C_State_Has_Changed__DelegateSignature final
{
public:
	class ABP_ChallengeSlot_C*                    Slot;                                              // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_ChallengeSlot_C_State_Has_Changed__DelegateSignature) == 0x000008, "Wrong alignment on BP_ChallengeSlot_C_State_Has_Changed__DelegateSignature");
static_assert(sizeof(BP_ChallengeSlot_C_State_Has_Changed__DelegateSignature) == 0x000008, "Wrong size on BP_ChallengeSlot_C_State_Has_Changed__DelegateSignature");
static_assert(offsetof(BP_ChallengeSlot_C_State_Has_Changed__DelegateSignature, Slot) == 0x000000, "Member 'BP_ChallengeSlot_C_State_Has_Changed__DelegateSignature::Slot' has a wrong offset!");

// Function BP_ChallengeSlot.BP_ChallengeSlot_C.Initialization Is Complete__DelegateSignature
// 0x0008 (0x0008 - 0x0000)
struct BP_ChallengeSlot_C_Initialization_Is_Complete__DelegateSignature final
{
public:
	class ABP_ChallengeSlot_C*                    Slot;                                              // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_ChallengeSlot_C_Initialization_Is_Complete__DelegateSignature) == 0x000008, "Wrong alignment on BP_ChallengeSlot_C_Initialization_Is_Complete__DelegateSignature");
static_assert(sizeof(BP_ChallengeSlot_C_Initialization_Is_Complete__DelegateSignature) == 0x000008, "Wrong size on BP_ChallengeSlot_C_Initialization_Is_Complete__DelegateSignature");
static_assert(offsetof(BP_ChallengeSlot_C_Initialization_Is_Complete__DelegateSignature, Slot) == 0x000000, "Member 'BP_ChallengeSlot_C_Initialization_Is_Complete__DelegateSignature::Slot' has a wrong offset!");

// Function BP_ChallengeSlot.BP_ChallengeSlot_C.Rewards Claim Reply__DelegateSignature
// 0x0018 (0x0018 - 0x0000)
struct BP_ChallengeSlot_C_Rewards_Claim_Reply__DelegateSignature final
{
public:
	bool                                          Success;                                           // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FCloudItemInfo>                 Rewards;                                           // 0x0008(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
};
static_assert(alignof(BP_ChallengeSlot_C_Rewards_Claim_Reply__DelegateSignature) == 0x000008, "Wrong alignment on BP_ChallengeSlot_C_Rewards_Claim_Reply__DelegateSignature");
static_assert(sizeof(BP_ChallengeSlot_C_Rewards_Claim_Reply__DelegateSignature) == 0x000018, "Wrong size on BP_ChallengeSlot_C_Rewards_Claim_Reply__DelegateSignature");
static_assert(offsetof(BP_ChallengeSlot_C_Rewards_Claim_Reply__DelegateSignature, Success) == 0x000000, "Member 'BP_ChallengeSlot_C_Rewards_Claim_Reply__DelegateSignature::Success' has a wrong offset!");
static_assert(offsetof(BP_ChallengeSlot_C_Rewards_Claim_Reply__DelegateSignature, Rewards) == 0x000008, "Member 'BP_ChallengeSlot_C_Rewards_Claim_Reply__DelegateSignature::Rewards' has a wrong offset!");

// Function BP_ChallengeSlot.BP_ChallengeSlot_C.Challenge Cancellation Reply__DelegateSignature
// 0x0001 (0x0001 - 0x0000)
struct BP_ChallengeSlot_C_Challenge_Cancellation_Reply__DelegateSignature final
{
public:
	bool                                          Success;                                           // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_ChallengeSlot_C_Challenge_Cancellation_Reply__DelegateSignature) == 0x000001, "Wrong alignment on BP_ChallengeSlot_C_Challenge_Cancellation_Reply__DelegateSignature");
static_assert(sizeof(BP_ChallengeSlot_C_Challenge_Cancellation_Reply__DelegateSignature) == 0x000001, "Wrong size on BP_ChallengeSlot_C_Challenge_Cancellation_Reply__DelegateSignature");
static_assert(offsetof(BP_ChallengeSlot_C_Challenge_Cancellation_Reply__DelegateSignature, Success) == 0x000000, "Member 'BP_ChallengeSlot_C_Challenge_Cancellation_Reply__DelegateSignature::Success' has a wrong offset!");

// Function BP_ChallengeSlot.BP_ChallengeSlot_C.Challenge Progress Updated__DelegateSignature
// 0x0010 (0x0010 - 0x0000)
struct BP_ChallengeSlot_C_Challenge_Progress_Updated__DelegateSignature final
{
public:
	class ABP_ChallengeSlot_C*                    Slot;                                              // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         New_Progress;                                      // 0x0008(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_ChallengeSlot_C_Challenge_Progress_Updated__DelegateSignature) == 0x000008, "Wrong alignment on BP_ChallengeSlot_C_Challenge_Progress_Updated__DelegateSignature");
static_assert(sizeof(BP_ChallengeSlot_C_Challenge_Progress_Updated__DelegateSignature) == 0x000010, "Wrong size on BP_ChallengeSlot_C_Challenge_Progress_Updated__DelegateSignature");
static_assert(offsetof(BP_ChallengeSlot_C_Challenge_Progress_Updated__DelegateSignature, Slot) == 0x000000, "Member 'BP_ChallengeSlot_C_Challenge_Progress_Updated__DelegateSignature::Slot' has a wrong offset!");
static_assert(offsetof(BP_ChallengeSlot_C_Challenge_Progress_Updated__DelegateSignature, New_Progress) == 0x000008, "Member 'BP_ChallengeSlot_C_Challenge_Progress_Updated__DelegateSignature::New_Progress' has a wrong offset!");

// Function BP_ChallengeSlot.BP_ChallengeSlot_C.ExecuteUbergraph_BP_ChallengeSlot
// 0x02D0 (0x02D0 - 0x0000)
struct BP_ChallengeSlot_C_ExecuteUbergraph_BP_ChallengeSlot final
{
public:
	int32                                         EntryPoint;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         CallFunc_MakeLiteralByte_ReturnValue;              // 0x0004(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable;                                // 0x0005(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_NotEqual_ByteByte_ReturnValue;            // 0x0006(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable_1;                              // 0x0007(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	E_ChallengeSlotState                          Temp_byte_Variable;                                // 0x0008(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable_2;                              // 0x0009(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x000A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue_1;                    // 0x000B(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	E_ChallengeSlotState                          Temp_byte_Variable_1;                              // 0x000C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable_3;                              // 0x000D(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	E_ChallengeSlotState                          Temp_byte_Variable_2;                              // 0x000E(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable_4;                              // 0x000F(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	class UClass*                                 Temp_class_Variable;                               // 0x0010(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_18[0x8];                                       // 0x0018(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             CallFunc_MakeTransform_ReturnValue;                // 0x0020(0x0030)(IsPlainOldData, NoDestructor)
	int32                                         CallFunc_Get_Maximum_Progress_Maximum_Progress;    // 0x0050(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Get_Current_Progress_Current_Progress;    // 0x0054(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Get_Maximum_Progress_Maximum_Progress_1;  // 0x0058(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_GetUserControllerId_ReturnValue;          // 0x005C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x0060(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_61[0x7];                                       // 0x0061(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AHumanPlayerController*                 CallFunc_GetHumanPlayerControllerByControllerId_ReturnValue; // 0x0068(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_GreaterEqual_IntInt_ReturnValue;          // 0x0070(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue_2;                    // 0x0071(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	E_ChallengeSlotState                          K2Node_Select_Default;                             // 0x0072(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EGameScenario                                 CallFunc_GetGameScenario_ReturnValue;              // 0x0073(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         K2Node_CustomEvent_SlotID;                         // 0x0074(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FString                                 K2Node_CustomEvent_SlotCategory;                   // 0x0078(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FName                                   K2Node_CustomEvent_Challenge_Name;                 // 0x0088(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FDateTime                              K2Node_CustomEvent_Timestamp;                      // 0x0090(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	struct FDateTime                              K2Node_CustomEvent_Time_Completed;                 // 0x0098(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	int32                                         K2Node_CustomEvent_Progress;                       // 0x00A0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         K2Node_CustomEvent_RerollPrice;                    // 0x00A4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TSubclassOf<class UObject>                    CallFunc_Conv_SoftClassReferenceToClass_ReturnValue; // 0x00A8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash)
	bool                                          CallFunc_IsValidSoftClassReference_ReturnValue;    // 0x00B0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_B1[0x7];                                       // 0x00B1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UClass*                                 K2Node_ClassDynamicCast_AsChallenge_Condition;     // 0x00B8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_ClassDynamicCast_bSuccess;                  // 0x00C0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_C1[0x7];                                       // 0x00C1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UClass*                                 K2Node_Select_Default_1;                           // 0x00C8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValidClass_ReturnValue;                 // 0x00D0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_D1[0x7];                                       // 0x00D1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UClass*                                 K2Node_ClassDynamicCast_AsBP_Challenge_Condition_Base; // 0x00D8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_ClassDynamicCast_bSuccess_1;                // 0x00E0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_E1[0x7];                                       // 0x00E1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 CallFunc_BeginDeferredActorSpawnFromClass_ReturnValue; // 0x00E8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FString                                 CallFunc_Conv_SoftClassReferenceToString_ReturnValue; // 0x00F0(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class ABP_ChallengeCondition_Base_C*          CallFunc_FinishSpawningActor_ReturnValue;          // 0x0100(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FString                                 CallFunc_Concat_StrStr_ReturnValue;                // 0x0108(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	TSubclassOf<class UObject>                    K2Node_CustomEvent_Loaded_1;                       // 0x0118(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash)
	bool                                          CallFunc_NotEqual_NameName_ReturnValue;            // 0x0120(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         CallFunc_MakeLiteralByte_ReturnValue_1;            // 0x0121(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue;          // 0x0122(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_123[0x1];                                      // 0x0123(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	TDelegate<void(class UObject* Loaded)>        K2Node_CreateDelegate_OutputDelegate;              // 0x0124(0x0010)(ZeroConstructor, NoDestructor)
	bool                                          Temp_bool_Variable_5;                              // 0x0134(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_135[0x3];                                      // 0x0135(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Get_Slot_ID_Slot_ID;                      // 0x0138(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TDelegate<void(int32 New_Progress)>           K2Node_CreateDelegate_OutputDelegate_1;            // 0x013C(0x0010)(ZeroConstructor, NoDestructor)
	EEndPlayReason                                K2Node_Event_EndPlayReason;                        // 0x014C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_14D[0x3];                                      // 0x014D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	TDelegate<void(TSubclassOf<class UObject> Loaded)> K2Node_CreateDelegate_OutputDelegate_2;            // 0x0150(0x0010)(ZeroConstructor, NoDestructor)
	class UDataTable*                             CallFunc_DataProviderFindTableByAssetTable_ReturnValue; // 0x0160(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FChallengeList                         CallFunc_GetDataTableRowFromName_OutRow;           // 0x0168(0x0100)()
	bool                                          CallFunc_GetDataTableRowFromName_ReturnValue;      // 0x0268(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_269[0x7];                                      // 0x0269(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UObject*                                CallFunc_Conv_SoftObjectReferenceToObject_ReturnValue; // 0x0270(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValidSoftObjectReference_ReturnValue;   // 0x0278(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_279[0x7];                                      // 0x0279(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class USoundWave*                             K2Node_DynamicCast_AsSound_Wave;                   // 0x0280(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0288(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue_3;                    // 0x0289(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_28A[0x6];                                      // 0x028A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class UObject*                                Temp_object_Variable;                              // 0x0290(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UObject*                                K2Node_Select_Default_2;                           // 0x0298(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class USoundWave*                             K2Node_DynamicCast_AsSound_Wave_1;                 // 0x02A0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess_1;                     // 0x02A8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_2A9[0x7];                                      // 0x02A9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FDateTime                              CallFunc_MakeDateTime_ReturnValue;                 // 0x02B0(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Greater_DateTimeDateTime_ReturnValue;     // 0x02B8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue_1;        // 0x02B9(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanAND_ReturnValue;                   // 0x02BA(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	E_ChallengeSlotState                          K2Node_Select_Default_3;                           // 0x02BB(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_NotEqual_ByteByte_ReturnValue_1;          // 0x02BC(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_2BD[0x3];                                      // 0x02BD(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UObject*                                K2Node_CustomEvent_Loaded;                         // 0x02C0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         CallFunc_MakeLiteralByte_ReturnValue_2;            // 0x02C8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_NotEqual_ByteByte_ReturnValue_2;          // 0x02C9(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_ChallengeSlot_C_ExecuteUbergraph_BP_ChallengeSlot) == 0x000010, "Wrong alignment on BP_ChallengeSlot_C_ExecuteUbergraph_BP_ChallengeSlot");
static_assert(sizeof(BP_ChallengeSlot_C_ExecuteUbergraph_BP_ChallengeSlot) == 0x0002D0, "Wrong size on BP_ChallengeSlot_C_ExecuteUbergraph_BP_ChallengeSlot");
static_assert(offsetof(BP_ChallengeSlot_C_ExecuteUbergraph_BP_ChallengeSlot, EntryPoint) == 0x000000, "Member 'BP_ChallengeSlot_C_ExecuteUbergraph_BP_ChallengeSlot::EntryPoint' has a wrong offset!");
static_assert(offsetof(BP_ChallengeSlot_C_ExecuteUbergraph_BP_ChallengeSlot, CallFunc_MakeLiteralByte_ReturnValue) == 0x000004, "Member 'BP_ChallengeSlot_C_ExecuteUbergraph_BP_ChallengeSlot::CallFunc_MakeLiteralByte_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_ChallengeSlot_C_ExecuteUbergraph_BP_ChallengeSlot, Temp_bool_Variable) == 0x000005, "Member 'BP_ChallengeSlot_C_ExecuteUbergraph_BP_ChallengeSlot::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(BP_ChallengeSlot_C_ExecuteUbergraph_BP_ChallengeSlot, CallFunc_NotEqual_ByteByte_ReturnValue) == 0x000006, "Member 'BP_ChallengeSlot_C_ExecuteUbergraph_BP_ChallengeSlot::CallFunc_NotEqual_ByteByte_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_ChallengeSlot_C_ExecuteUbergraph_BP_ChallengeSlot, Temp_bool_Variable_1) == 0x000007, "Member 'BP_ChallengeSlot_C_ExecuteUbergraph_BP_ChallengeSlot::Temp_bool_Variable_1' has a wrong offset!");
static_assert(offsetof(BP_ChallengeSlot_C_ExecuteUbergraph_BP_ChallengeSlot, Temp_byte_Variable) == 0x000008, "Member 'BP_ChallengeSlot_C_ExecuteUbergraph_BP_ChallengeSlot::Temp_byte_Variable' has a wrong offset!");
static_assert(offsetof(BP_ChallengeSlot_C_ExecuteUbergraph_BP_ChallengeSlot, Temp_bool_Variable_2) == 0x000009, "Member 'BP_ChallengeSlot_C_ExecuteUbergraph_BP_ChallengeSlot::Temp_bool_Variable_2' has a wrong offset!");
static_assert(offsetof(BP_ChallengeSlot_C_ExecuteUbergraph_BP_ChallengeSlot, CallFunc_IsValid_ReturnValue) == 0x00000A, "Member 'BP_ChallengeSlot_C_ExecuteUbergraph_BP_ChallengeSlot::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_ChallengeSlot_C_ExecuteUbergraph_BP_ChallengeSlot, CallFunc_IsValid_ReturnValue_1) == 0x00000B, "Member 'BP_ChallengeSlot_C_ExecuteUbergraph_BP_ChallengeSlot::CallFunc_IsValid_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_ChallengeSlot_C_ExecuteUbergraph_BP_ChallengeSlot, Temp_byte_Variable_1) == 0x00000C, "Member 'BP_ChallengeSlot_C_ExecuteUbergraph_BP_ChallengeSlot::Temp_byte_Variable_1' has a wrong offset!");
static_assert(offsetof(BP_ChallengeSlot_C_ExecuteUbergraph_BP_ChallengeSlot, Temp_bool_Variable_3) == 0x00000D, "Member 'BP_ChallengeSlot_C_ExecuteUbergraph_BP_ChallengeSlot::Temp_bool_Variable_3' has a wrong offset!");
static_assert(offsetof(BP_ChallengeSlot_C_ExecuteUbergraph_BP_ChallengeSlot, Temp_byte_Variable_2) == 0x00000E, "Member 'BP_ChallengeSlot_C_ExecuteUbergraph_BP_ChallengeSlot::Temp_byte_Variable_2' has a wrong offset!");
static_assert(offsetof(BP_ChallengeSlot_C_ExecuteUbergraph_BP_ChallengeSlot, Temp_bool_Variable_4) == 0x00000F, "Member 'BP_ChallengeSlot_C_ExecuteUbergraph_BP_ChallengeSlot::Temp_bool_Variable_4' has a wrong offset!");
static_assert(offsetof(BP_ChallengeSlot_C_ExecuteUbergraph_BP_ChallengeSlot, Temp_class_Variable) == 0x000010, "Member 'BP_ChallengeSlot_C_ExecuteUbergraph_BP_ChallengeSlot::Temp_class_Variable' has a wrong offset!");
static_assert(offsetof(BP_ChallengeSlot_C_ExecuteUbergraph_BP_ChallengeSlot, CallFunc_MakeTransform_ReturnValue) == 0x000020, "Member 'BP_ChallengeSlot_C_ExecuteUbergraph_BP_ChallengeSlot::CallFunc_MakeTransform_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_ChallengeSlot_C_ExecuteUbergraph_BP_ChallengeSlot, CallFunc_Get_Maximum_Progress_Maximum_Progress) == 0x000050, "Member 'BP_ChallengeSlot_C_ExecuteUbergraph_BP_ChallengeSlot::CallFunc_Get_Maximum_Progress_Maximum_Progress' has a wrong offset!");
static_assert(offsetof(BP_ChallengeSlot_C_ExecuteUbergraph_BP_ChallengeSlot, CallFunc_Get_Current_Progress_Current_Progress) == 0x000054, "Member 'BP_ChallengeSlot_C_ExecuteUbergraph_BP_ChallengeSlot::CallFunc_Get_Current_Progress_Current_Progress' has a wrong offset!");
static_assert(offsetof(BP_ChallengeSlot_C_ExecuteUbergraph_BP_ChallengeSlot, CallFunc_Get_Maximum_Progress_Maximum_Progress_1) == 0x000058, "Member 'BP_ChallengeSlot_C_ExecuteUbergraph_BP_ChallengeSlot::CallFunc_Get_Maximum_Progress_Maximum_Progress_1' has a wrong offset!");
static_assert(offsetof(BP_ChallengeSlot_C_ExecuteUbergraph_BP_ChallengeSlot, CallFunc_GetUserControllerId_ReturnValue) == 0x00005C, "Member 'BP_ChallengeSlot_C_ExecuteUbergraph_BP_ChallengeSlot::CallFunc_GetUserControllerId_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_ChallengeSlot_C_ExecuteUbergraph_BP_ChallengeSlot, CallFunc_Less_IntInt_ReturnValue) == 0x000060, "Member 'BP_ChallengeSlot_C_ExecuteUbergraph_BP_ChallengeSlot::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_ChallengeSlot_C_ExecuteUbergraph_BP_ChallengeSlot, CallFunc_GetHumanPlayerControllerByControllerId_ReturnValue) == 0x000068, "Member 'BP_ChallengeSlot_C_ExecuteUbergraph_BP_ChallengeSlot::CallFunc_GetHumanPlayerControllerByControllerId_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_ChallengeSlot_C_ExecuteUbergraph_BP_ChallengeSlot, CallFunc_GreaterEqual_IntInt_ReturnValue) == 0x000070, "Member 'BP_ChallengeSlot_C_ExecuteUbergraph_BP_ChallengeSlot::CallFunc_GreaterEqual_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_ChallengeSlot_C_ExecuteUbergraph_BP_ChallengeSlot, CallFunc_IsValid_ReturnValue_2) == 0x000071, "Member 'BP_ChallengeSlot_C_ExecuteUbergraph_BP_ChallengeSlot::CallFunc_IsValid_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BP_ChallengeSlot_C_ExecuteUbergraph_BP_ChallengeSlot, K2Node_Select_Default) == 0x000072, "Member 'BP_ChallengeSlot_C_ExecuteUbergraph_BP_ChallengeSlot::K2Node_Select_Default' has a wrong offset!");
static_assert(offsetof(BP_ChallengeSlot_C_ExecuteUbergraph_BP_ChallengeSlot, CallFunc_GetGameScenario_ReturnValue) == 0x000073, "Member 'BP_ChallengeSlot_C_ExecuteUbergraph_BP_ChallengeSlot::CallFunc_GetGameScenario_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_ChallengeSlot_C_ExecuteUbergraph_BP_ChallengeSlot, K2Node_CustomEvent_SlotID) == 0x000074, "Member 'BP_ChallengeSlot_C_ExecuteUbergraph_BP_ChallengeSlot::K2Node_CustomEvent_SlotID' has a wrong offset!");
static_assert(offsetof(BP_ChallengeSlot_C_ExecuteUbergraph_BP_ChallengeSlot, K2Node_CustomEvent_SlotCategory) == 0x000078, "Member 'BP_ChallengeSlot_C_ExecuteUbergraph_BP_ChallengeSlot::K2Node_CustomEvent_SlotCategory' has a wrong offset!");
static_assert(offsetof(BP_ChallengeSlot_C_ExecuteUbergraph_BP_ChallengeSlot, K2Node_CustomEvent_Challenge_Name) == 0x000088, "Member 'BP_ChallengeSlot_C_ExecuteUbergraph_BP_ChallengeSlot::K2Node_CustomEvent_Challenge_Name' has a wrong offset!");
static_assert(offsetof(BP_ChallengeSlot_C_ExecuteUbergraph_BP_ChallengeSlot, K2Node_CustomEvent_Timestamp) == 0x000090, "Member 'BP_ChallengeSlot_C_ExecuteUbergraph_BP_ChallengeSlot::K2Node_CustomEvent_Timestamp' has a wrong offset!");
static_assert(offsetof(BP_ChallengeSlot_C_ExecuteUbergraph_BP_ChallengeSlot, K2Node_CustomEvent_Time_Completed) == 0x000098, "Member 'BP_ChallengeSlot_C_ExecuteUbergraph_BP_ChallengeSlot::K2Node_CustomEvent_Time_Completed' has a wrong offset!");
static_assert(offsetof(BP_ChallengeSlot_C_ExecuteUbergraph_BP_ChallengeSlot, K2Node_CustomEvent_Progress) == 0x0000A0, "Member 'BP_ChallengeSlot_C_ExecuteUbergraph_BP_ChallengeSlot::K2Node_CustomEvent_Progress' has a wrong offset!");
static_assert(offsetof(BP_ChallengeSlot_C_ExecuteUbergraph_BP_ChallengeSlot, K2Node_CustomEvent_RerollPrice) == 0x0000A4, "Member 'BP_ChallengeSlot_C_ExecuteUbergraph_BP_ChallengeSlot::K2Node_CustomEvent_RerollPrice' has a wrong offset!");
static_assert(offsetof(BP_ChallengeSlot_C_ExecuteUbergraph_BP_ChallengeSlot, CallFunc_Conv_SoftClassReferenceToClass_ReturnValue) == 0x0000A8, "Member 'BP_ChallengeSlot_C_ExecuteUbergraph_BP_ChallengeSlot::CallFunc_Conv_SoftClassReferenceToClass_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_ChallengeSlot_C_ExecuteUbergraph_BP_ChallengeSlot, CallFunc_IsValidSoftClassReference_ReturnValue) == 0x0000B0, "Member 'BP_ChallengeSlot_C_ExecuteUbergraph_BP_ChallengeSlot::CallFunc_IsValidSoftClassReference_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_ChallengeSlot_C_ExecuteUbergraph_BP_ChallengeSlot, K2Node_ClassDynamicCast_AsChallenge_Condition) == 0x0000B8, "Member 'BP_ChallengeSlot_C_ExecuteUbergraph_BP_ChallengeSlot::K2Node_ClassDynamicCast_AsChallenge_Condition' has a wrong offset!");
static_assert(offsetof(BP_ChallengeSlot_C_ExecuteUbergraph_BP_ChallengeSlot, K2Node_ClassDynamicCast_bSuccess) == 0x0000C0, "Member 'BP_ChallengeSlot_C_ExecuteUbergraph_BP_ChallengeSlot::K2Node_ClassDynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(BP_ChallengeSlot_C_ExecuteUbergraph_BP_ChallengeSlot, K2Node_Select_Default_1) == 0x0000C8, "Member 'BP_ChallengeSlot_C_ExecuteUbergraph_BP_ChallengeSlot::K2Node_Select_Default_1' has a wrong offset!");
static_assert(offsetof(BP_ChallengeSlot_C_ExecuteUbergraph_BP_ChallengeSlot, CallFunc_IsValidClass_ReturnValue) == 0x0000D0, "Member 'BP_ChallengeSlot_C_ExecuteUbergraph_BP_ChallengeSlot::CallFunc_IsValidClass_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_ChallengeSlot_C_ExecuteUbergraph_BP_ChallengeSlot, K2Node_ClassDynamicCast_AsBP_Challenge_Condition_Base) == 0x0000D8, "Member 'BP_ChallengeSlot_C_ExecuteUbergraph_BP_ChallengeSlot::K2Node_ClassDynamicCast_AsBP_Challenge_Condition_Base' has a wrong offset!");
static_assert(offsetof(BP_ChallengeSlot_C_ExecuteUbergraph_BP_ChallengeSlot, K2Node_ClassDynamicCast_bSuccess_1) == 0x0000E0, "Member 'BP_ChallengeSlot_C_ExecuteUbergraph_BP_ChallengeSlot::K2Node_ClassDynamicCast_bSuccess_1' has a wrong offset!");
static_assert(offsetof(BP_ChallengeSlot_C_ExecuteUbergraph_BP_ChallengeSlot, CallFunc_BeginDeferredActorSpawnFromClass_ReturnValue) == 0x0000E8, "Member 'BP_ChallengeSlot_C_ExecuteUbergraph_BP_ChallengeSlot::CallFunc_BeginDeferredActorSpawnFromClass_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_ChallengeSlot_C_ExecuteUbergraph_BP_ChallengeSlot, CallFunc_Conv_SoftClassReferenceToString_ReturnValue) == 0x0000F0, "Member 'BP_ChallengeSlot_C_ExecuteUbergraph_BP_ChallengeSlot::CallFunc_Conv_SoftClassReferenceToString_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_ChallengeSlot_C_ExecuteUbergraph_BP_ChallengeSlot, CallFunc_FinishSpawningActor_ReturnValue) == 0x000100, "Member 'BP_ChallengeSlot_C_ExecuteUbergraph_BP_ChallengeSlot::CallFunc_FinishSpawningActor_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_ChallengeSlot_C_ExecuteUbergraph_BP_ChallengeSlot, CallFunc_Concat_StrStr_ReturnValue) == 0x000108, "Member 'BP_ChallengeSlot_C_ExecuteUbergraph_BP_ChallengeSlot::CallFunc_Concat_StrStr_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_ChallengeSlot_C_ExecuteUbergraph_BP_ChallengeSlot, K2Node_CustomEvent_Loaded_1) == 0x000118, "Member 'BP_ChallengeSlot_C_ExecuteUbergraph_BP_ChallengeSlot::K2Node_CustomEvent_Loaded_1' has a wrong offset!");
static_assert(offsetof(BP_ChallengeSlot_C_ExecuteUbergraph_BP_ChallengeSlot, CallFunc_NotEqual_NameName_ReturnValue) == 0x000120, "Member 'BP_ChallengeSlot_C_ExecuteUbergraph_BP_ChallengeSlot::CallFunc_NotEqual_NameName_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_ChallengeSlot_C_ExecuteUbergraph_BP_ChallengeSlot, CallFunc_MakeLiteralByte_ReturnValue_1) == 0x000121, "Member 'BP_ChallengeSlot_C_ExecuteUbergraph_BP_ChallengeSlot::CallFunc_MakeLiteralByte_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_ChallengeSlot_C_ExecuteUbergraph_BP_ChallengeSlot, CallFunc_EqualEqual_ByteByte_ReturnValue) == 0x000122, "Member 'BP_ChallengeSlot_C_ExecuteUbergraph_BP_ChallengeSlot::CallFunc_EqualEqual_ByteByte_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_ChallengeSlot_C_ExecuteUbergraph_BP_ChallengeSlot, K2Node_CreateDelegate_OutputDelegate) == 0x000124, "Member 'BP_ChallengeSlot_C_ExecuteUbergraph_BP_ChallengeSlot::K2Node_CreateDelegate_OutputDelegate' has a wrong offset!");
static_assert(offsetof(BP_ChallengeSlot_C_ExecuteUbergraph_BP_ChallengeSlot, Temp_bool_Variable_5) == 0x000134, "Member 'BP_ChallengeSlot_C_ExecuteUbergraph_BP_ChallengeSlot::Temp_bool_Variable_5' has a wrong offset!");
static_assert(offsetof(BP_ChallengeSlot_C_ExecuteUbergraph_BP_ChallengeSlot, CallFunc_Get_Slot_ID_Slot_ID) == 0x000138, "Member 'BP_ChallengeSlot_C_ExecuteUbergraph_BP_ChallengeSlot::CallFunc_Get_Slot_ID_Slot_ID' has a wrong offset!");
static_assert(offsetof(BP_ChallengeSlot_C_ExecuteUbergraph_BP_ChallengeSlot, K2Node_CreateDelegate_OutputDelegate_1) == 0x00013C, "Member 'BP_ChallengeSlot_C_ExecuteUbergraph_BP_ChallengeSlot::K2Node_CreateDelegate_OutputDelegate_1' has a wrong offset!");
static_assert(offsetof(BP_ChallengeSlot_C_ExecuteUbergraph_BP_ChallengeSlot, K2Node_Event_EndPlayReason) == 0x00014C, "Member 'BP_ChallengeSlot_C_ExecuteUbergraph_BP_ChallengeSlot::K2Node_Event_EndPlayReason' has a wrong offset!");
static_assert(offsetof(BP_ChallengeSlot_C_ExecuteUbergraph_BP_ChallengeSlot, K2Node_CreateDelegate_OutputDelegate_2) == 0x000150, "Member 'BP_ChallengeSlot_C_ExecuteUbergraph_BP_ChallengeSlot::K2Node_CreateDelegate_OutputDelegate_2' has a wrong offset!");
static_assert(offsetof(BP_ChallengeSlot_C_ExecuteUbergraph_BP_ChallengeSlot, CallFunc_DataProviderFindTableByAssetTable_ReturnValue) == 0x000160, "Member 'BP_ChallengeSlot_C_ExecuteUbergraph_BP_ChallengeSlot::CallFunc_DataProviderFindTableByAssetTable_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_ChallengeSlot_C_ExecuteUbergraph_BP_ChallengeSlot, CallFunc_GetDataTableRowFromName_OutRow) == 0x000168, "Member 'BP_ChallengeSlot_C_ExecuteUbergraph_BP_ChallengeSlot::CallFunc_GetDataTableRowFromName_OutRow' has a wrong offset!");
static_assert(offsetof(BP_ChallengeSlot_C_ExecuteUbergraph_BP_ChallengeSlot, CallFunc_GetDataTableRowFromName_ReturnValue) == 0x000268, "Member 'BP_ChallengeSlot_C_ExecuteUbergraph_BP_ChallengeSlot::CallFunc_GetDataTableRowFromName_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_ChallengeSlot_C_ExecuteUbergraph_BP_ChallengeSlot, CallFunc_Conv_SoftObjectReferenceToObject_ReturnValue) == 0x000270, "Member 'BP_ChallengeSlot_C_ExecuteUbergraph_BP_ChallengeSlot::CallFunc_Conv_SoftObjectReferenceToObject_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_ChallengeSlot_C_ExecuteUbergraph_BP_ChallengeSlot, CallFunc_IsValidSoftObjectReference_ReturnValue) == 0x000278, "Member 'BP_ChallengeSlot_C_ExecuteUbergraph_BP_ChallengeSlot::CallFunc_IsValidSoftObjectReference_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_ChallengeSlot_C_ExecuteUbergraph_BP_ChallengeSlot, K2Node_DynamicCast_AsSound_Wave) == 0x000280, "Member 'BP_ChallengeSlot_C_ExecuteUbergraph_BP_ChallengeSlot::K2Node_DynamicCast_AsSound_Wave' has a wrong offset!");
static_assert(offsetof(BP_ChallengeSlot_C_ExecuteUbergraph_BP_ChallengeSlot, K2Node_DynamicCast_bSuccess) == 0x000288, "Member 'BP_ChallengeSlot_C_ExecuteUbergraph_BP_ChallengeSlot::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(BP_ChallengeSlot_C_ExecuteUbergraph_BP_ChallengeSlot, CallFunc_IsValid_ReturnValue_3) == 0x000289, "Member 'BP_ChallengeSlot_C_ExecuteUbergraph_BP_ChallengeSlot::CallFunc_IsValid_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(BP_ChallengeSlot_C_ExecuteUbergraph_BP_ChallengeSlot, Temp_object_Variable) == 0x000290, "Member 'BP_ChallengeSlot_C_ExecuteUbergraph_BP_ChallengeSlot::Temp_object_Variable' has a wrong offset!");
static_assert(offsetof(BP_ChallengeSlot_C_ExecuteUbergraph_BP_ChallengeSlot, K2Node_Select_Default_2) == 0x000298, "Member 'BP_ChallengeSlot_C_ExecuteUbergraph_BP_ChallengeSlot::K2Node_Select_Default_2' has a wrong offset!");
static_assert(offsetof(BP_ChallengeSlot_C_ExecuteUbergraph_BP_ChallengeSlot, K2Node_DynamicCast_AsSound_Wave_1) == 0x0002A0, "Member 'BP_ChallengeSlot_C_ExecuteUbergraph_BP_ChallengeSlot::K2Node_DynamicCast_AsSound_Wave_1' has a wrong offset!");
static_assert(offsetof(BP_ChallengeSlot_C_ExecuteUbergraph_BP_ChallengeSlot, K2Node_DynamicCast_bSuccess_1) == 0x0002A8, "Member 'BP_ChallengeSlot_C_ExecuteUbergraph_BP_ChallengeSlot::K2Node_DynamicCast_bSuccess_1' has a wrong offset!");
static_assert(offsetof(BP_ChallengeSlot_C_ExecuteUbergraph_BP_ChallengeSlot, CallFunc_MakeDateTime_ReturnValue) == 0x0002B0, "Member 'BP_ChallengeSlot_C_ExecuteUbergraph_BP_ChallengeSlot::CallFunc_MakeDateTime_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_ChallengeSlot_C_ExecuteUbergraph_BP_ChallengeSlot, CallFunc_Greater_DateTimeDateTime_ReturnValue) == 0x0002B8, "Member 'BP_ChallengeSlot_C_ExecuteUbergraph_BP_ChallengeSlot::CallFunc_Greater_DateTimeDateTime_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_ChallengeSlot_C_ExecuteUbergraph_BP_ChallengeSlot, CallFunc_EqualEqual_ByteByte_ReturnValue_1) == 0x0002B9, "Member 'BP_ChallengeSlot_C_ExecuteUbergraph_BP_ChallengeSlot::CallFunc_EqualEqual_ByteByte_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_ChallengeSlot_C_ExecuteUbergraph_BP_ChallengeSlot, CallFunc_BooleanAND_ReturnValue) == 0x0002BA, "Member 'BP_ChallengeSlot_C_ExecuteUbergraph_BP_ChallengeSlot::CallFunc_BooleanAND_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_ChallengeSlot_C_ExecuteUbergraph_BP_ChallengeSlot, K2Node_Select_Default_3) == 0x0002BB, "Member 'BP_ChallengeSlot_C_ExecuteUbergraph_BP_ChallengeSlot::K2Node_Select_Default_3' has a wrong offset!");
static_assert(offsetof(BP_ChallengeSlot_C_ExecuteUbergraph_BP_ChallengeSlot, CallFunc_NotEqual_ByteByte_ReturnValue_1) == 0x0002BC, "Member 'BP_ChallengeSlot_C_ExecuteUbergraph_BP_ChallengeSlot::CallFunc_NotEqual_ByteByte_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_ChallengeSlot_C_ExecuteUbergraph_BP_ChallengeSlot, K2Node_CustomEvent_Loaded) == 0x0002C0, "Member 'BP_ChallengeSlot_C_ExecuteUbergraph_BP_ChallengeSlot::K2Node_CustomEvent_Loaded' has a wrong offset!");
static_assert(offsetof(BP_ChallengeSlot_C_ExecuteUbergraph_BP_ChallengeSlot, CallFunc_MakeLiteralByte_ReturnValue_2) == 0x0002C8, "Member 'BP_ChallengeSlot_C_ExecuteUbergraph_BP_ChallengeSlot::CallFunc_MakeLiteralByte_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BP_ChallengeSlot_C_ExecuteUbergraph_BP_ChallengeSlot, CallFunc_NotEqual_ByteByte_ReturnValue_2) == 0x0002C9, "Member 'BP_ChallengeSlot_C_ExecuteUbergraph_BP_ChallengeSlot::CallFunc_NotEqual_ByteByte_ReturnValue_2' has a wrong offset!");

// Function BP_ChallengeSlot.BP_ChallengeSlot_C.ReceiveEndPlay
// 0x0001 (0x0001 - 0x0000)
struct BP_ChallengeSlot_C_ReceiveEndPlay final
{
public:
	EEndPlayReason                                EndPlayReason;                                     // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_ChallengeSlot_C_ReceiveEndPlay) == 0x000001, "Wrong alignment on BP_ChallengeSlot_C_ReceiveEndPlay");
static_assert(sizeof(BP_ChallengeSlot_C_ReceiveEndPlay) == 0x000001, "Wrong size on BP_ChallengeSlot_C_ReceiveEndPlay");
static_assert(offsetof(BP_ChallengeSlot_C_ReceiveEndPlay, EndPlayReason) == 0x000000, "Member 'BP_ChallengeSlot_C_ReceiveEndPlay::EndPlayReason' has a wrong offset!");

// Function BP_ChallengeSlot.BP_ChallengeSlot_C.Initialize Slot
// 0x0038 (0x0038 - 0x0000)
struct BP_ChallengeSlot_C_Initialize_Slot final
{
public:
	int32                                         SlotId;                                            // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 SlotCategory_0;                                    // 0x0008(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)
	class FName                                   Challenge_Name_0;                                  // 0x0018(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FDateTime                              Timestamp_0;                                       // 0x0020(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	struct FDateTime                              Time_Completed;                                    // 0x0028(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	int32                                         Progress;                                          // 0x0030(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         ReRollPrice_0;                                     // 0x0034(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_ChallengeSlot_C_Initialize_Slot) == 0x000008, "Wrong alignment on BP_ChallengeSlot_C_Initialize_Slot");
static_assert(sizeof(BP_ChallengeSlot_C_Initialize_Slot) == 0x000038, "Wrong size on BP_ChallengeSlot_C_Initialize_Slot");
static_assert(offsetof(BP_ChallengeSlot_C_Initialize_Slot, SlotId) == 0x000000, "Member 'BP_ChallengeSlot_C_Initialize_Slot::SlotId' has a wrong offset!");
static_assert(offsetof(BP_ChallengeSlot_C_Initialize_Slot, SlotCategory_0) == 0x000008, "Member 'BP_ChallengeSlot_C_Initialize_Slot::SlotCategory_0' has a wrong offset!");
static_assert(offsetof(BP_ChallengeSlot_C_Initialize_Slot, Challenge_Name_0) == 0x000018, "Member 'BP_ChallengeSlot_C_Initialize_Slot::Challenge_Name_0' has a wrong offset!");
static_assert(offsetof(BP_ChallengeSlot_C_Initialize_Slot, Timestamp_0) == 0x000020, "Member 'BP_ChallengeSlot_C_Initialize_Slot::Timestamp_0' has a wrong offset!");
static_assert(offsetof(BP_ChallengeSlot_C_Initialize_Slot, Time_Completed) == 0x000028, "Member 'BP_ChallengeSlot_C_Initialize_Slot::Time_Completed' has a wrong offset!");
static_assert(offsetof(BP_ChallengeSlot_C_Initialize_Slot, Progress) == 0x000030, "Member 'BP_ChallengeSlot_C_Initialize_Slot::Progress' has a wrong offset!");
static_assert(offsetof(BP_ChallengeSlot_C_Initialize_Slot, ReRollPrice_0) == 0x000034, "Member 'BP_ChallengeSlot_C_Initialize_Slot::ReRollPrice_0' has a wrong offset!");

// Function BP_ChallengeSlot.BP_ChallengeSlot_C.OnLoaded_303A9E7341428F48F05BE78A27BD16A5
// 0x0008 (0x0008 - 0x0000)
struct BP_ChallengeSlot_C_OnLoaded_303A9E7341428F48F05BE78A27BD16A5 final
{
public:
	class UObject*                                Loaded;                                            // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_ChallengeSlot_C_OnLoaded_303A9E7341428F48F05BE78A27BD16A5) == 0x000008, "Wrong alignment on BP_ChallengeSlot_C_OnLoaded_303A9E7341428F48F05BE78A27BD16A5");
static_assert(sizeof(BP_ChallengeSlot_C_OnLoaded_303A9E7341428F48F05BE78A27BD16A5) == 0x000008, "Wrong size on BP_ChallengeSlot_C_OnLoaded_303A9E7341428F48F05BE78A27BD16A5");
static_assert(offsetof(BP_ChallengeSlot_C_OnLoaded_303A9E7341428F48F05BE78A27BD16A5, Loaded) == 0x000000, "Member 'BP_ChallengeSlot_C_OnLoaded_303A9E7341428F48F05BE78A27BD16A5::Loaded' has a wrong offset!");

// Function BP_ChallengeSlot.BP_ChallengeSlot_C.OnLoaded_B08996E843B69641864BC48BCA5FB88E
// 0x0008 (0x0008 - 0x0000)
struct BP_ChallengeSlot_C_OnLoaded_B08996E843B69641864BC48BCA5FB88E final
{
public:
	TSubclassOf<class UObject>                    Loaded;                                            // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash)
};
static_assert(alignof(BP_ChallengeSlot_C_OnLoaded_B08996E843B69641864BC48BCA5FB88E) == 0x000008, "Wrong alignment on BP_ChallengeSlot_C_OnLoaded_B08996E843B69641864BC48BCA5FB88E");
static_assert(sizeof(BP_ChallengeSlot_C_OnLoaded_B08996E843B69641864BC48BCA5FB88E) == 0x000008, "Wrong size on BP_ChallengeSlot_C_OnLoaded_B08996E843B69641864BC48BCA5FB88E");
static_assert(offsetof(BP_ChallengeSlot_C_OnLoaded_B08996E843B69641864BC48BCA5FB88E, Loaded) == 0x000000, "Member 'BP_ChallengeSlot_C_OnLoaded_B08996E843B69641864BC48BCA5FB88E::Loaded' has a wrong offset!");

// Function BP_ChallengeSlot.BP_ChallengeSlot_C.Get Slot ID
// 0x0004 (0x0004 - 0x0000)
struct BP_ChallengeSlot_C_Get_Slot_ID final
{
public:
	int32                                         Slot_ID_0;                                         // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_ChallengeSlot_C_Get_Slot_ID) == 0x000004, "Wrong alignment on BP_ChallengeSlot_C_Get_Slot_ID");
static_assert(sizeof(BP_ChallengeSlot_C_Get_Slot_ID) == 0x000004, "Wrong size on BP_ChallengeSlot_C_Get_Slot_ID");
static_assert(offsetof(BP_ChallengeSlot_C_Get_Slot_ID, Slot_ID_0) == 0x000000, "Member 'BP_ChallengeSlot_C_Get_Slot_ID::Slot_ID_0' has a wrong offset!");

// Function BP_ChallengeSlot.BP_ChallengeSlot_C.Get Slot State
// 0x0001 (0x0001 - 0x0000)
struct BP_ChallengeSlot_C_Get_Slot_State final
{
public:
	E_ChallengeSlotState                          Slot_State;                                        // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_ChallengeSlot_C_Get_Slot_State) == 0x000001, "Wrong alignment on BP_ChallengeSlot_C_Get_Slot_State");
static_assert(sizeof(BP_ChallengeSlot_C_Get_Slot_State) == 0x000001, "Wrong size on BP_ChallengeSlot_C_Get_Slot_State");
static_assert(offsetof(BP_ChallengeSlot_C_Get_Slot_State, Slot_State) == 0x000000, "Member 'BP_ChallengeSlot_C_Get_Slot_State::Slot_State' has a wrong offset!");

// Function BP_ChallengeSlot.BP_ChallengeSlot_C.Get Challenge Category
// 0x0020 (0x0020 - 0x0000)
struct BP_ChallengeSlot_C_Get_Challenge_Category final
{
public:
	EChallengeCategory                            Category;                                          // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<E_ChallengeSlotState>                  K2Node_MakeArray_Array;                            // 0x0008(0x0010)(ConstParm, ReferenceParm)
	bool                                          CallFunc_Array_Contains_ReturnValue;               // 0x0018(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_ChallengeSlot_C_Get_Challenge_Category) == 0x000008, "Wrong alignment on BP_ChallengeSlot_C_Get_Challenge_Category");
static_assert(sizeof(BP_ChallengeSlot_C_Get_Challenge_Category) == 0x000020, "Wrong size on BP_ChallengeSlot_C_Get_Challenge_Category");
static_assert(offsetof(BP_ChallengeSlot_C_Get_Challenge_Category, Category) == 0x000000, "Member 'BP_ChallengeSlot_C_Get_Challenge_Category::Category' has a wrong offset!");
static_assert(offsetof(BP_ChallengeSlot_C_Get_Challenge_Category, K2Node_MakeArray_Array) == 0x000008, "Member 'BP_ChallengeSlot_C_Get_Challenge_Category::K2Node_MakeArray_Array' has a wrong offset!");
static_assert(offsetof(BP_ChallengeSlot_C_Get_Challenge_Category, CallFunc_Array_Contains_ReturnValue) == 0x000018, "Member 'BP_ChallengeSlot_C_Get_Challenge_Category::CallFunc_Array_Contains_ReturnValue' has a wrong offset!");

// Function BP_ChallengeSlot.BP_ChallengeSlot_C.Get Current Progress
// 0x0020 (0x0020 - 0x0000)
struct BP_ChallengeSlot_C_Get_Current_Progress final
{
public:
	int32                                         Current_Progress;                                  // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<E_ChallengeSlotState>                  K2Node_MakeArray_Array;                            // 0x0008(0x0010)(ConstParm, ReferenceParm)
	bool                                          CallFunc_Array_Contains_ReturnValue;               // 0x0018(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0019(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_1A[0x2];                                       // 0x001A(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Get_Current_Progress_Current_Progress;    // 0x001C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_ChallengeSlot_C_Get_Current_Progress) == 0x000008, "Wrong alignment on BP_ChallengeSlot_C_Get_Current_Progress");
static_assert(sizeof(BP_ChallengeSlot_C_Get_Current_Progress) == 0x000020, "Wrong size on BP_ChallengeSlot_C_Get_Current_Progress");
static_assert(offsetof(BP_ChallengeSlot_C_Get_Current_Progress, Current_Progress) == 0x000000, "Member 'BP_ChallengeSlot_C_Get_Current_Progress::Current_Progress' has a wrong offset!");
static_assert(offsetof(BP_ChallengeSlot_C_Get_Current_Progress, K2Node_MakeArray_Array) == 0x000008, "Member 'BP_ChallengeSlot_C_Get_Current_Progress::K2Node_MakeArray_Array' has a wrong offset!");
static_assert(offsetof(BP_ChallengeSlot_C_Get_Current_Progress, CallFunc_Array_Contains_ReturnValue) == 0x000018, "Member 'BP_ChallengeSlot_C_Get_Current_Progress::CallFunc_Array_Contains_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_ChallengeSlot_C_Get_Current_Progress, CallFunc_IsValid_ReturnValue) == 0x000019, "Member 'BP_ChallengeSlot_C_Get_Current_Progress::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_ChallengeSlot_C_Get_Current_Progress, CallFunc_Get_Current_Progress_Current_Progress) == 0x00001C, "Member 'BP_ChallengeSlot_C_Get_Current_Progress::CallFunc_Get_Current_Progress_Current_Progress' has a wrong offset!");

// Function BP_ChallengeSlot.BP_ChallengeSlot_C.Get Maximum Progress
// 0x0020 (0x0020 - 0x0000)
struct BP_ChallengeSlot_C_Get_Maximum_Progress final
{
public:
	int32                                         Maximum_Progress;                                  // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<E_ChallengeSlotState>                  K2Node_MakeArray_Array;                            // 0x0008(0x0010)(ConstParm, ReferenceParm)
	bool                                          CallFunc_Array_Contains_ReturnValue;               // 0x0018(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0019(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_1A[0x2];                                       // 0x001A(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Get_Maximum_Progress_Maximum_Progress;    // 0x001C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_ChallengeSlot_C_Get_Maximum_Progress) == 0x000008, "Wrong alignment on BP_ChallengeSlot_C_Get_Maximum_Progress");
static_assert(sizeof(BP_ChallengeSlot_C_Get_Maximum_Progress) == 0x000020, "Wrong size on BP_ChallengeSlot_C_Get_Maximum_Progress");
static_assert(offsetof(BP_ChallengeSlot_C_Get_Maximum_Progress, Maximum_Progress) == 0x000000, "Member 'BP_ChallengeSlot_C_Get_Maximum_Progress::Maximum_Progress' has a wrong offset!");
static_assert(offsetof(BP_ChallengeSlot_C_Get_Maximum_Progress, K2Node_MakeArray_Array) == 0x000008, "Member 'BP_ChallengeSlot_C_Get_Maximum_Progress::K2Node_MakeArray_Array' has a wrong offset!");
static_assert(offsetof(BP_ChallengeSlot_C_Get_Maximum_Progress, CallFunc_Array_Contains_ReturnValue) == 0x000018, "Member 'BP_ChallengeSlot_C_Get_Maximum_Progress::CallFunc_Array_Contains_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_ChallengeSlot_C_Get_Maximum_Progress, CallFunc_IsValid_ReturnValue) == 0x000019, "Member 'BP_ChallengeSlot_C_Get_Maximum_Progress::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_ChallengeSlot_C_Get_Maximum_Progress, CallFunc_Get_Maximum_Progress_Maximum_Progress) == 0x00001C, "Member 'BP_ChallengeSlot_C_Get_Maximum_Progress::CallFunc_Get_Maximum_Progress_Maximum_Progress' has a wrong offset!");

// Function BP_ChallengeSlot.BP_ChallengeSlot_C.Get Title Text
// 0x0048 (0x0048 - 0x0000)
struct BP_ChallengeSlot_C_Get_Title_Text final
{
public:
	class FText                                   Title_Text;                                        // 0x0000(0x0018)(Parm, OutParm)
	TArray<E_ChallengeSlotState>                  K2Node_MakeArray_Array;                            // 0x0018(0x0010)(ConstParm, ReferenceParm)
	bool                                          CallFunc_Array_Contains_ReturnValue;               // 0x0028(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0029(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_2A[0x6];                                       // 0x002A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   CallFunc_Get_Title_Text_Title_Text;                // 0x0030(0x0018)()
};
static_assert(alignof(BP_ChallengeSlot_C_Get_Title_Text) == 0x000008, "Wrong alignment on BP_ChallengeSlot_C_Get_Title_Text");
static_assert(sizeof(BP_ChallengeSlot_C_Get_Title_Text) == 0x000048, "Wrong size on BP_ChallengeSlot_C_Get_Title_Text");
static_assert(offsetof(BP_ChallengeSlot_C_Get_Title_Text, Title_Text) == 0x000000, "Member 'BP_ChallengeSlot_C_Get_Title_Text::Title_Text' has a wrong offset!");
static_assert(offsetof(BP_ChallengeSlot_C_Get_Title_Text, K2Node_MakeArray_Array) == 0x000018, "Member 'BP_ChallengeSlot_C_Get_Title_Text::K2Node_MakeArray_Array' has a wrong offset!");
static_assert(offsetof(BP_ChallengeSlot_C_Get_Title_Text, CallFunc_Array_Contains_ReturnValue) == 0x000028, "Member 'BP_ChallengeSlot_C_Get_Title_Text::CallFunc_Array_Contains_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_ChallengeSlot_C_Get_Title_Text, CallFunc_IsValid_ReturnValue) == 0x000029, "Member 'BP_ChallengeSlot_C_Get_Title_Text::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_ChallengeSlot_C_Get_Title_Text, CallFunc_Get_Title_Text_Title_Text) == 0x000030, "Member 'BP_ChallengeSlot_C_Get_Title_Text::CallFunc_Get_Title_Text_Title_Text' has a wrong offset!");

// Function BP_ChallengeSlot.BP_ChallengeSlot_C.Get Condition Text
// 0x0048 (0x0048 - 0x0000)
struct BP_ChallengeSlot_C_Get_Condition_Text final
{
public:
	class FText                                   Condition_Text;                                    // 0x0000(0x0018)(Parm, OutParm)
	TArray<E_ChallengeSlotState>                  K2Node_MakeArray_Array;                            // 0x0018(0x0010)(ConstParm, ReferenceParm)
	bool                                          CallFunc_Array_Contains_ReturnValue;               // 0x0028(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0029(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_2A[0x6];                                       // 0x002A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   CallFunc_Get_Condition_Text_Condition_Text;        // 0x0030(0x0018)()
};
static_assert(alignof(BP_ChallengeSlot_C_Get_Condition_Text) == 0x000008, "Wrong alignment on BP_ChallengeSlot_C_Get_Condition_Text");
static_assert(sizeof(BP_ChallengeSlot_C_Get_Condition_Text) == 0x000048, "Wrong size on BP_ChallengeSlot_C_Get_Condition_Text");
static_assert(offsetof(BP_ChallengeSlot_C_Get_Condition_Text, Condition_Text) == 0x000000, "Member 'BP_ChallengeSlot_C_Get_Condition_Text::Condition_Text' has a wrong offset!");
static_assert(offsetof(BP_ChallengeSlot_C_Get_Condition_Text, K2Node_MakeArray_Array) == 0x000018, "Member 'BP_ChallengeSlot_C_Get_Condition_Text::K2Node_MakeArray_Array' has a wrong offset!");
static_assert(offsetof(BP_ChallengeSlot_C_Get_Condition_Text, CallFunc_Array_Contains_ReturnValue) == 0x000028, "Member 'BP_ChallengeSlot_C_Get_Condition_Text::CallFunc_Array_Contains_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_ChallengeSlot_C_Get_Condition_Text, CallFunc_IsValid_ReturnValue) == 0x000029, "Member 'BP_ChallengeSlot_C_Get_Condition_Text::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_ChallengeSlot_C_Get_Condition_Text, CallFunc_Get_Condition_Text_Condition_Text) == 0x000030, "Member 'BP_ChallengeSlot_C_Get_Condition_Text::CallFunc_Get_Condition_Text_Condition_Text' has a wrong offset!");

// Function BP_ChallengeSlot.BP_ChallengeSlot_C.Get Description Text
// 0x0048 (0x0048 - 0x0000)
struct BP_ChallengeSlot_C_Get_Description_Text final
{
public:
	class FText                                   Description_Text;                                  // 0x0000(0x0018)(Parm, OutParm)
	TArray<E_ChallengeSlotState>                  K2Node_MakeArray_Array;                            // 0x0018(0x0010)(ConstParm, ReferenceParm)
	bool                                          CallFunc_Array_Contains_ReturnValue;               // 0x0028(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0029(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_2A[0x6];                                       // 0x002A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   CallFunc_Get_Description_Text_Description_Text;    // 0x0030(0x0018)()
};
static_assert(alignof(BP_ChallengeSlot_C_Get_Description_Text) == 0x000008, "Wrong alignment on BP_ChallengeSlot_C_Get_Description_Text");
static_assert(sizeof(BP_ChallengeSlot_C_Get_Description_Text) == 0x000048, "Wrong size on BP_ChallengeSlot_C_Get_Description_Text");
static_assert(offsetof(BP_ChallengeSlot_C_Get_Description_Text, Description_Text) == 0x000000, "Member 'BP_ChallengeSlot_C_Get_Description_Text::Description_Text' has a wrong offset!");
static_assert(offsetof(BP_ChallengeSlot_C_Get_Description_Text, K2Node_MakeArray_Array) == 0x000018, "Member 'BP_ChallengeSlot_C_Get_Description_Text::K2Node_MakeArray_Array' has a wrong offset!");
static_assert(offsetof(BP_ChallengeSlot_C_Get_Description_Text, CallFunc_Array_Contains_ReturnValue) == 0x000028, "Member 'BP_ChallengeSlot_C_Get_Description_Text::CallFunc_Array_Contains_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_ChallengeSlot_C_Get_Description_Text, CallFunc_IsValid_ReturnValue) == 0x000029, "Member 'BP_ChallengeSlot_C_Get_Description_Text::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_ChallengeSlot_C_Get_Description_Text, CallFunc_Get_Description_Text_Description_Text) == 0x000030, "Member 'BP_ChallengeSlot_C_Get_Description_Text::CallFunc_Get_Description_Text_Description_Text' has a wrong offset!");

// Function BP_ChallengeSlot.BP_ChallengeSlot_C.Get Rewards List
// 0x0028 (0x0028 - 0x0000)
struct BP_ChallengeSlot_C_Get_Rewards_List final
{
public:
	TArray<struct FChallengeReward>               Rewards;                                           // 0x0000(0x0010)(Parm, OutParm)
	TArray<E_ChallengeSlotState>                  K2Node_MakeArray_Array;                            // 0x0010(0x0010)(ConstParm, ReferenceParm)
	bool                                          CallFunc_Array_Contains_ReturnValue;               // 0x0020(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_ChallengeSlot_C_Get_Rewards_List) == 0x000008, "Wrong alignment on BP_ChallengeSlot_C_Get_Rewards_List");
static_assert(sizeof(BP_ChallengeSlot_C_Get_Rewards_List) == 0x000028, "Wrong size on BP_ChallengeSlot_C_Get_Rewards_List");
static_assert(offsetof(BP_ChallengeSlot_C_Get_Rewards_List, Rewards) == 0x000000, "Member 'BP_ChallengeSlot_C_Get_Rewards_List::Rewards' has a wrong offset!");
static_assert(offsetof(BP_ChallengeSlot_C_Get_Rewards_List, K2Node_MakeArray_Array) == 0x000010, "Member 'BP_ChallengeSlot_C_Get_Rewards_List::K2Node_MakeArray_Array' has a wrong offset!");
static_assert(offsetof(BP_ChallengeSlot_C_Get_Rewards_List, CallFunc_Array_Contains_ReturnValue) == 0x000020, "Member 'BP_ChallengeSlot_C_Get_Rewards_List::CallFunc_Array_Contains_ReturnValue' has a wrong offset!");

// Function BP_ChallengeSlot.BP_ChallengeSlot_C.Request Rewards Claim
// 0x0038 (0x0038 - 0x0000)
struct BP_ChallengeSlot_C_Request_Rewards_Claim final
{
public:
	uint8                                         CallFunc_MakeLiteralByte_ReturnValue;              // 0x0000(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_NotEqual_ByteByte_ReturnValue;            // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_2[0x6];                                        // 0x0002(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FCloudItemInfo>                 K2Node_MakeArray_Array;                            // 0x0008(0x0010)(ReferenceParm)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue;          // 0x0018(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_19[0x3];                                       // 0x0019(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Get_Slot_ID_Slot_ID;                      // 0x001C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AChallengeManager*                      CallFunc_GetChallengeManager_ReturnValue;          // 0x0020(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ABP_ChallengeManager_C*                 K2Node_DynamicCast_AsBP_Challenge_Manager;         // 0x0028(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0030(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_31[0x3];                                       // 0x0031(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Claim_Challenge_Rewards_ReturnValue;      // 0x0034(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_ChallengeSlot_C_Request_Rewards_Claim) == 0x000008, "Wrong alignment on BP_ChallengeSlot_C_Request_Rewards_Claim");
static_assert(sizeof(BP_ChallengeSlot_C_Request_Rewards_Claim) == 0x000038, "Wrong size on BP_ChallengeSlot_C_Request_Rewards_Claim");
static_assert(offsetof(BP_ChallengeSlot_C_Request_Rewards_Claim, CallFunc_MakeLiteralByte_ReturnValue) == 0x000000, "Member 'BP_ChallengeSlot_C_Request_Rewards_Claim::CallFunc_MakeLiteralByte_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_ChallengeSlot_C_Request_Rewards_Claim, CallFunc_NotEqual_ByteByte_ReturnValue) == 0x000001, "Member 'BP_ChallengeSlot_C_Request_Rewards_Claim::CallFunc_NotEqual_ByteByte_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_ChallengeSlot_C_Request_Rewards_Claim, K2Node_MakeArray_Array) == 0x000008, "Member 'BP_ChallengeSlot_C_Request_Rewards_Claim::K2Node_MakeArray_Array' has a wrong offset!");
static_assert(offsetof(BP_ChallengeSlot_C_Request_Rewards_Claim, CallFunc_EqualEqual_ByteByte_ReturnValue) == 0x000018, "Member 'BP_ChallengeSlot_C_Request_Rewards_Claim::CallFunc_EqualEqual_ByteByte_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_ChallengeSlot_C_Request_Rewards_Claim, CallFunc_Get_Slot_ID_Slot_ID) == 0x00001C, "Member 'BP_ChallengeSlot_C_Request_Rewards_Claim::CallFunc_Get_Slot_ID_Slot_ID' has a wrong offset!");
static_assert(offsetof(BP_ChallengeSlot_C_Request_Rewards_Claim, CallFunc_GetChallengeManager_ReturnValue) == 0x000020, "Member 'BP_ChallengeSlot_C_Request_Rewards_Claim::CallFunc_GetChallengeManager_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_ChallengeSlot_C_Request_Rewards_Claim, K2Node_DynamicCast_AsBP_Challenge_Manager) == 0x000028, "Member 'BP_ChallengeSlot_C_Request_Rewards_Claim::K2Node_DynamicCast_AsBP_Challenge_Manager' has a wrong offset!");
static_assert(offsetof(BP_ChallengeSlot_C_Request_Rewards_Claim, K2Node_DynamicCast_bSuccess) == 0x000030, "Member 'BP_ChallengeSlot_C_Request_Rewards_Claim::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(BP_ChallengeSlot_C_Request_Rewards_Claim, CallFunc_Claim_Challenge_Rewards_ReturnValue) == 0x000034, "Member 'BP_ChallengeSlot_C_Request_Rewards_Claim::CallFunc_Claim_Challenge_Rewards_ReturnValue' has a wrong offset!");

// Function BP_ChallengeSlot.BP_ChallengeSlot_C.Request Challenge Cancellation
// 0x0028 (0x0028 - 0x0000)
struct BP_ChallengeSlot_C_Request_Challenge_Cancellation final
{
public:
	uint8                                         CallFunc_MakeLiteralByte_ReturnValue;              // 0x0000(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_NotEqual_ByteByte_ReturnValue;            // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_2[0x2];                                        // 0x0002(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Get_Slot_ID_Slot_ID;                      // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AChallengeManager*                      CallFunc_GetChallengeManager_ReturnValue;          // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_NotEqual_ByteByte_ReturnValue_1;          // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class ABP_ChallengeManager_C*                 K2Node_DynamicCast_AsBP_Challenge_Manager;         // 0x0018(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0020(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	E_ChallengeManagerState                       CallFunc_Get_Challenge_Manager_State_State;        // 0x0021(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Send_Challenge_Cancelled_Event_ReturnValue; // 0x0022(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_23[0x1];                                       // 0x0023(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Cancel_Challenge_ReturnValue;             // 0x0024(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_ChallengeSlot_C_Request_Challenge_Cancellation) == 0x000008, "Wrong alignment on BP_ChallengeSlot_C_Request_Challenge_Cancellation");
static_assert(sizeof(BP_ChallengeSlot_C_Request_Challenge_Cancellation) == 0x000028, "Wrong size on BP_ChallengeSlot_C_Request_Challenge_Cancellation");
static_assert(offsetof(BP_ChallengeSlot_C_Request_Challenge_Cancellation, CallFunc_MakeLiteralByte_ReturnValue) == 0x000000, "Member 'BP_ChallengeSlot_C_Request_Challenge_Cancellation::CallFunc_MakeLiteralByte_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_ChallengeSlot_C_Request_Challenge_Cancellation, CallFunc_NotEqual_ByteByte_ReturnValue) == 0x000001, "Member 'BP_ChallengeSlot_C_Request_Challenge_Cancellation::CallFunc_NotEqual_ByteByte_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_ChallengeSlot_C_Request_Challenge_Cancellation, CallFunc_Get_Slot_ID_Slot_ID) == 0x000004, "Member 'BP_ChallengeSlot_C_Request_Challenge_Cancellation::CallFunc_Get_Slot_ID_Slot_ID' has a wrong offset!");
static_assert(offsetof(BP_ChallengeSlot_C_Request_Challenge_Cancellation, CallFunc_GetChallengeManager_ReturnValue) == 0x000008, "Member 'BP_ChallengeSlot_C_Request_Challenge_Cancellation::CallFunc_GetChallengeManager_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_ChallengeSlot_C_Request_Challenge_Cancellation, CallFunc_NotEqual_ByteByte_ReturnValue_1) == 0x000010, "Member 'BP_ChallengeSlot_C_Request_Challenge_Cancellation::CallFunc_NotEqual_ByteByte_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_ChallengeSlot_C_Request_Challenge_Cancellation, K2Node_DynamicCast_AsBP_Challenge_Manager) == 0x000018, "Member 'BP_ChallengeSlot_C_Request_Challenge_Cancellation::K2Node_DynamicCast_AsBP_Challenge_Manager' has a wrong offset!");
static_assert(offsetof(BP_ChallengeSlot_C_Request_Challenge_Cancellation, K2Node_DynamicCast_bSuccess) == 0x000020, "Member 'BP_ChallengeSlot_C_Request_Challenge_Cancellation::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(BP_ChallengeSlot_C_Request_Challenge_Cancellation, CallFunc_Get_Challenge_Manager_State_State) == 0x000021, "Member 'BP_ChallengeSlot_C_Request_Challenge_Cancellation::CallFunc_Get_Challenge_Manager_State_State' has a wrong offset!");
static_assert(offsetof(BP_ChallengeSlot_C_Request_Challenge_Cancellation, CallFunc_Send_Challenge_Cancelled_Event_ReturnValue) == 0x000022, "Member 'BP_ChallengeSlot_C_Request_Challenge_Cancellation::CallFunc_Send_Challenge_Cancelled_Event_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_ChallengeSlot_C_Request_Challenge_Cancellation, CallFunc_Cancel_Challenge_ReturnValue) == 0x000024, "Member 'BP_ChallengeSlot_C_Request_Challenge_Cancellation::CallFunc_Cancel_Challenge_ReturnValue' has a wrong offset!");

// Function BP_ChallengeSlot.BP_ChallengeSlot_C.Claim Rewards
// 0x0088 (0x0088 - 0x0000)
struct BP_ChallengeSlot_C_Claim_Rewards final
{
public:
	bool                                          Success;                                           // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FDateTime                              Timestamp_0;                                       // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	TArray<struct FChallengeReward>               Rewards;                                           // 0x0010(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
	TArray<struct FCloudItemInfo>                 ChallengesCloudInfo;                               // 0x0020(0x0010)(Edit, BlueprintVisible)
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x0030(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Array_Index_Variable;                     // 0x0034(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x0038(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3C[0x4];                                       // 0x003C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FChallengeReward                       CallFunc_Array_Get_Item;                           // 0x0040(0x0010)(NoDestructor)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x0050(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_51[0x7];                                       // 0x0051(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FCloudItemInfo                         K2Node_MakeStruct_CloudItemInfo;                   // 0x0058(0x0018)()
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x0070(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Add_ReturnValue;                    // 0x0074(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<struct FCloudItemInfo>                 K2Node_MakeArray_Array;                            // 0x0078(0x0010)(ReferenceParm)
};
static_assert(alignof(BP_ChallengeSlot_C_Claim_Rewards) == 0x000008, "Wrong alignment on BP_ChallengeSlot_C_Claim_Rewards");
static_assert(sizeof(BP_ChallengeSlot_C_Claim_Rewards) == 0x000088, "Wrong size on BP_ChallengeSlot_C_Claim_Rewards");
static_assert(offsetof(BP_ChallengeSlot_C_Claim_Rewards, Success) == 0x000000, "Member 'BP_ChallengeSlot_C_Claim_Rewards::Success' has a wrong offset!");
static_assert(offsetof(BP_ChallengeSlot_C_Claim_Rewards, Timestamp_0) == 0x000008, "Member 'BP_ChallengeSlot_C_Claim_Rewards::Timestamp_0' has a wrong offset!");
static_assert(offsetof(BP_ChallengeSlot_C_Claim_Rewards, Rewards) == 0x000010, "Member 'BP_ChallengeSlot_C_Claim_Rewards::Rewards' has a wrong offset!");
static_assert(offsetof(BP_ChallengeSlot_C_Claim_Rewards, ChallengesCloudInfo) == 0x000020, "Member 'BP_ChallengeSlot_C_Claim_Rewards::ChallengesCloudInfo' has a wrong offset!");
static_assert(offsetof(BP_ChallengeSlot_C_Claim_Rewards, CallFunc_Array_Length_ReturnValue) == 0x000030, "Member 'BP_ChallengeSlot_C_Claim_Rewards::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_ChallengeSlot_C_Claim_Rewards, Temp_int_Array_Index_Variable) == 0x000034, "Member 'BP_ChallengeSlot_C_Claim_Rewards::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(BP_ChallengeSlot_C_Claim_Rewards, Temp_int_Loop_Counter_Variable) == 0x000038, "Member 'BP_ChallengeSlot_C_Claim_Rewards::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(BP_ChallengeSlot_C_Claim_Rewards, CallFunc_Array_Get_Item) == 0x000040, "Member 'BP_ChallengeSlot_C_Claim_Rewards::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(BP_ChallengeSlot_C_Claim_Rewards, CallFunc_Less_IntInt_ReturnValue) == 0x000050, "Member 'BP_ChallengeSlot_C_Claim_Rewards::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_ChallengeSlot_C_Claim_Rewards, K2Node_MakeStruct_CloudItemInfo) == 0x000058, "Member 'BP_ChallengeSlot_C_Claim_Rewards::K2Node_MakeStruct_CloudItemInfo' has a wrong offset!");
static_assert(offsetof(BP_ChallengeSlot_C_Claim_Rewards, CallFunc_Add_IntInt_ReturnValue) == 0x000070, "Member 'BP_ChallengeSlot_C_Claim_Rewards::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_ChallengeSlot_C_Claim_Rewards, CallFunc_Array_Add_ReturnValue) == 0x000074, "Member 'BP_ChallengeSlot_C_Claim_Rewards::CallFunc_Array_Add_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_ChallengeSlot_C_Claim_Rewards, K2Node_MakeArray_Array) == 0x000078, "Member 'BP_ChallengeSlot_C_Claim_Rewards::K2Node_MakeArray_Array' has a wrong offset!");

// Function BP_ChallengeSlot.BP_ChallengeSlot_C.Cancel Challenge
// 0x0010 (0x0010 - 0x0000)
struct BP_ChallengeSlot_C_Cancel_Challenge final
{
public:
	bool                                          Success;                                           // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FDateTime                              Timestamp_0;                                       // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_ChallengeSlot_C_Cancel_Challenge) == 0x000008, "Wrong alignment on BP_ChallengeSlot_C_Cancel_Challenge");
static_assert(sizeof(BP_ChallengeSlot_C_Cancel_Challenge) == 0x000010, "Wrong size on BP_ChallengeSlot_C_Cancel_Challenge");
static_assert(offsetof(BP_ChallengeSlot_C_Cancel_Challenge, Success) == 0x000000, "Member 'BP_ChallengeSlot_C_Cancel_Challenge::Success' has a wrong offset!");
static_assert(offsetof(BP_ChallengeSlot_C_Cancel_Challenge, Timestamp_0) == 0x000008, "Member 'BP_ChallengeSlot_C_Cancel_Challenge::Timestamp_0' has a wrong offset!");

// Function BP_ChallengeSlot.BP_ChallengeSlot_C.Get Timestamp
// 0x0008 (0x0008 - 0x0000)
struct BP_ChallengeSlot_C_Get_Timestamp final
{
public:
	struct FDateTime                              Timestamp_0;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_ChallengeSlot_C_Get_Timestamp) == 0x000008, "Wrong alignment on BP_ChallengeSlot_C_Get_Timestamp");
static_assert(sizeof(BP_ChallengeSlot_C_Get_Timestamp) == 0x000008, "Wrong size on BP_ChallengeSlot_C_Get_Timestamp");
static_assert(offsetof(BP_ChallengeSlot_C_Get_Timestamp, Timestamp_0) == 0x000000, "Member 'BP_ChallengeSlot_C_Get_Timestamp::Timestamp_0' has a wrong offset!");

// Function BP_ChallengeSlot.BP_ChallengeSlot_C.Update Progress
// 0x000C (0x000C - 0x0000)
struct BP_ChallengeSlot_C_Update_Progress final
{
public:
	bool                                          Success;                                           // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         New_Progress;                                      // 0x0004(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0008(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_ChallengeSlot_C_Update_Progress) == 0x000004, "Wrong alignment on BP_ChallengeSlot_C_Update_Progress");
static_assert(sizeof(BP_ChallengeSlot_C_Update_Progress) == 0x00000C, "Wrong size on BP_ChallengeSlot_C_Update_Progress");
static_assert(offsetof(BP_ChallengeSlot_C_Update_Progress, Success) == 0x000000, "Member 'BP_ChallengeSlot_C_Update_Progress::Success' has a wrong offset!");
static_assert(offsetof(BP_ChallengeSlot_C_Update_Progress, New_Progress) == 0x000004, "Member 'BP_ChallengeSlot_C_Update_Progress::New_Progress' has a wrong offset!");
static_assert(offsetof(BP_ChallengeSlot_C_Update_Progress, CallFunc_IsValid_ReturnValue) == 0x000008, "Member 'BP_ChallengeSlot_C_Update_Progress::CallFunc_IsValid_ReturnValue' has a wrong offset!");

// Function BP_ChallengeSlot.BP_ChallengeSlot_C.Get Challenge Name
// 0x0008 (0x0008 - 0x0000)
struct BP_ChallengeSlot_C_Get_Challenge_Name final
{
public:
	class FName                                   Challenge_Name_0;                                  // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_ChallengeSlot_C_Get_Challenge_Name) == 0x000004, "Wrong alignment on BP_ChallengeSlot_C_Get_Challenge_Name");
static_assert(sizeof(BP_ChallengeSlot_C_Get_Challenge_Name) == 0x000008, "Wrong size on BP_ChallengeSlot_C_Get_Challenge_Name");
static_assert(offsetof(BP_ChallengeSlot_C_Get_Challenge_Name, Challenge_Name_0) == 0x000000, "Member 'BP_ChallengeSlot_C_Get_Challenge_Name::Challenge_Name_0' has a wrong offset!");

// Function BP_ChallengeSlot.BP_ChallengeSlot_C.Condition Progress Updated
// 0x0028 (0x0028 - 0x0000)
struct BP_ChallengeSlot_C_Condition_Progress_Updated final
{
public:
	int32                                         New_Progress;                                      // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	E_ChallengeSlotState                          Temp_byte_Variable;                                // 0x0004(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0005(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_6[0x2];                                        // 0x0006(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Get_Maximum_Progress_Maximum_Progress;    // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Get_Current_Progress_Current_Progress;    // 0x000C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_GreaterEqual_IntInt_ReturnValue;          // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	E_ChallengeSlotState                          Temp_byte_Variable_1;                              // 0x0011(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable;                                // 0x0012(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	E_ChallengeSlotState                          Temp_byte_Variable_2;                              // 0x0013(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	E_ChallengeSlotState                          K2Node_Select_Default;                             // 0x0014(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_15[0x3];                                       // 0x0015(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FDateTime                              CallFunc_MakeDateTime_ReturnValue;                 // 0x0018(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable_1;                              // 0x0020(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Greater_DateTimeDateTime_ReturnValue;     // 0x0021(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	E_ChallengeSlotState                          K2Node_Select_Default_1;                           // 0x0022(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_NotEqual_ByteByte_ReturnValue;            // 0x0023(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_ChallengeSlot_C_Condition_Progress_Updated) == 0x000008, "Wrong alignment on BP_ChallengeSlot_C_Condition_Progress_Updated");
static_assert(sizeof(BP_ChallengeSlot_C_Condition_Progress_Updated) == 0x000028, "Wrong size on BP_ChallengeSlot_C_Condition_Progress_Updated");
static_assert(offsetof(BP_ChallengeSlot_C_Condition_Progress_Updated, New_Progress) == 0x000000, "Member 'BP_ChallengeSlot_C_Condition_Progress_Updated::New_Progress' has a wrong offset!");
static_assert(offsetof(BP_ChallengeSlot_C_Condition_Progress_Updated, Temp_byte_Variable) == 0x000004, "Member 'BP_ChallengeSlot_C_Condition_Progress_Updated::Temp_byte_Variable' has a wrong offset!");
static_assert(offsetof(BP_ChallengeSlot_C_Condition_Progress_Updated, CallFunc_IsValid_ReturnValue) == 0x000005, "Member 'BP_ChallengeSlot_C_Condition_Progress_Updated::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_ChallengeSlot_C_Condition_Progress_Updated, CallFunc_Get_Maximum_Progress_Maximum_Progress) == 0x000008, "Member 'BP_ChallengeSlot_C_Condition_Progress_Updated::CallFunc_Get_Maximum_Progress_Maximum_Progress' has a wrong offset!");
static_assert(offsetof(BP_ChallengeSlot_C_Condition_Progress_Updated, CallFunc_Get_Current_Progress_Current_Progress) == 0x00000C, "Member 'BP_ChallengeSlot_C_Condition_Progress_Updated::CallFunc_Get_Current_Progress_Current_Progress' has a wrong offset!");
static_assert(offsetof(BP_ChallengeSlot_C_Condition_Progress_Updated, CallFunc_GreaterEqual_IntInt_ReturnValue) == 0x000010, "Member 'BP_ChallengeSlot_C_Condition_Progress_Updated::CallFunc_GreaterEqual_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_ChallengeSlot_C_Condition_Progress_Updated, Temp_byte_Variable_1) == 0x000011, "Member 'BP_ChallengeSlot_C_Condition_Progress_Updated::Temp_byte_Variable_1' has a wrong offset!");
static_assert(offsetof(BP_ChallengeSlot_C_Condition_Progress_Updated, Temp_bool_Variable) == 0x000012, "Member 'BP_ChallengeSlot_C_Condition_Progress_Updated::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(BP_ChallengeSlot_C_Condition_Progress_Updated, Temp_byte_Variable_2) == 0x000013, "Member 'BP_ChallengeSlot_C_Condition_Progress_Updated::Temp_byte_Variable_2' has a wrong offset!");
static_assert(offsetof(BP_ChallengeSlot_C_Condition_Progress_Updated, K2Node_Select_Default) == 0x000014, "Member 'BP_ChallengeSlot_C_Condition_Progress_Updated::K2Node_Select_Default' has a wrong offset!");
static_assert(offsetof(BP_ChallengeSlot_C_Condition_Progress_Updated, CallFunc_MakeDateTime_ReturnValue) == 0x000018, "Member 'BP_ChallengeSlot_C_Condition_Progress_Updated::CallFunc_MakeDateTime_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_ChallengeSlot_C_Condition_Progress_Updated, Temp_bool_Variable_1) == 0x000020, "Member 'BP_ChallengeSlot_C_Condition_Progress_Updated::Temp_bool_Variable_1' has a wrong offset!");
static_assert(offsetof(BP_ChallengeSlot_C_Condition_Progress_Updated, CallFunc_Greater_DateTimeDateTime_ReturnValue) == 0x000021, "Member 'BP_ChallengeSlot_C_Condition_Progress_Updated::CallFunc_Greater_DateTimeDateTime_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_ChallengeSlot_C_Condition_Progress_Updated, K2Node_Select_Default_1) == 0x000022, "Member 'BP_ChallengeSlot_C_Condition_Progress_Updated::K2Node_Select_Default_1' has a wrong offset!");
static_assert(offsetof(BP_ChallengeSlot_C_Condition_Progress_Updated, CallFunc_NotEqual_ByteByte_ReturnValue) == 0x000023, "Member 'BP_ChallengeSlot_C_Condition_Progress_Updated::CallFunc_NotEqual_ByteByte_ReturnValue' has a wrong offset!");

// Function BP_ChallengeSlot.BP_ChallengeSlot_C.Assign Slot ID
// 0x0004 (0x0004 - 0x0000)
struct BP_ChallengeSlot_C_Assign_Slot_ID final
{
public:
	int32                                         Slot_ID_0;                                         // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_ChallengeSlot_C_Assign_Slot_ID) == 0x000004, "Wrong alignment on BP_ChallengeSlot_C_Assign_Slot_ID");
static_assert(sizeof(BP_ChallengeSlot_C_Assign_Slot_ID) == 0x000004, "Wrong size on BP_ChallengeSlot_C_Assign_Slot_ID");
static_assert(offsetof(BP_ChallengeSlot_C_Assign_Slot_ID, Slot_ID_0) == 0x000000, "Member 'BP_ChallengeSlot_C_Assign_Slot_ID::Slot_ID_0' has a wrong offset!");

// Function BP_ChallengeSlot.BP_ChallengeSlot_C.Print Status
// 0x0368 (0x0368 - 0x0000)
struct BP_ChallengeSlot_C_Print_Status final
{
public:
	TArray<class FString>                         Params_0;                                          // 0x0000(0x0010)(Edit, BlueprintVisible)
	bool                                          Temp_bool_Variable;                                // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 Temp_string_Variable;                              // 0x0018(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	int32                                         Temp_int_Array_Index_Variable;                     // 0x0028(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x002C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x0030(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_34[0x4];                                       // 0x0034(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 CallFunc_JoinStringArray_ReturnValue;              // 0x0038(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FString                                 CallFunc_Concat_StrStr_ReturnValue;                // 0x0048(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FString                                 CallFunc_Concat_StrStr_ReturnValue_1;              // 0x0058(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	struct FChallengeParameter                    CallFunc_Array_Get_Item;                           // 0x0068(0x0010)(NoDestructor)
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x0078(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x007C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_7D[0x3];                                       // 0x007D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 CallFunc_GetEnumeratorUserFriendlyName_ReturnValue; // 0x0080(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FString                                 CallFunc_Conv_IntToString_ReturnValue;             // 0x0090(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FString                                 CallFunc_GetClassDisplayName_ReturnValue;          // 0x00A0(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	int32                                         CallFunc_Get_Maximum_Progress_Maximum_Progress;    // 0x00B0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_B4[0x4];                                       // 0x00B4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 CallFunc_Concat_StrStr_ReturnValue_2;              // 0x00B8(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FString                                 CallFunc_Conv_IntToString_ReturnValue_1;           // 0x00C8(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FString                                 CallFunc_Concat_StrStr_ReturnValue_3;              // 0x00D8(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	int32                                         CallFunc_Get_Current_Progress_Current_Progress;    // 0x00E8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_EC[0x4];                                       // 0x00EC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 CallFunc_Concat_StrStr_ReturnValue_4;              // 0x00F0(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FString                                 CallFunc_Conv_IntToString_ReturnValue_2;           // 0x0100(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FString                                 CallFunc_Concat_StrStr_ReturnValue_5;              // 0x0110(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Add_ReturnValue;                    // 0x0120(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_124[0x4];                                      // 0x0124(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 CallFunc_GetEnumeratorUserFriendlyName_ReturnValue_1; // 0x0128(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FString                                 CallFunc_GetDisplayName_ReturnValue;               // 0x0138(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	int32                                         CallFunc_BreakDateTime_Year;                       // 0x0148(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_BreakDateTime_Month;                      // 0x014C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_BreakDateTime_Day;                        // 0x0150(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_BreakDateTime_Hour;                       // 0x0154(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_BreakDateTime_Minute;                     // 0x0158(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_BreakDateTime_Second;                     // 0x015C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_BreakDateTime_Millisecond;                // 0x0160(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0164(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_165[0x3];                                      // 0x0165(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 CallFunc_Conv_IntToString_ReturnValue_3;           // 0x0168(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FString                                 CallFunc_Conv_IntToString_ReturnValue_4;           // 0x0178(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FString                                 K2Node_Select_Default;                             // 0x0188(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FString                                 CallFunc_Conv_IntToString_ReturnValue_5;           // 0x0198(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FString                                 CallFunc_Conv_IntToString_ReturnValue_6;           // 0x01A8(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FString                                 CallFunc_Conv_IntToString_ReturnValue_7;           // 0x01B8(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FString                                 CallFunc_Conv_IntToString_ReturnValue_8;           // 0x01C8(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FString                                 CallFunc_Conv_NameToString_ReturnValue;            // 0x01D8(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FString                                 CallFunc_Conv_IntToString_ReturnValue_9;           // 0x01E8(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FString                                 CallFunc_Concat_StrStr_ReturnValue_6;              // 0x01F8(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FString                                 CallFunc_Concat_StrStr_ReturnValue_7;              // 0x0208(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FString                                 CallFunc_Concat_StrStr_ReturnValue_8;              // 0x0218(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FString                                 CallFunc_Concat_StrStr_ReturnValue_9;              // 0x0228(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FString                                 CallFunc_Concat_StrStr_ReturnValue_10;             // 0x0238(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FString                                 CallFunc_Concat_StrStr_ReturnValue_11;             // 0x0248(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FString                                 CallFunc_Concat_StrStr_ReturnValue_12;             // 0x0258(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FString                                 CallFunc_Concat_StrStr_ReturnValue_13;             // 0x0268(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FString                                 CallFunc_Concat_StrStr_ReturnValue_14;             // 0x0278(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FString                                 CallFunc_Concat_StrStr_ReturnValue_15;             // 0x0288(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FString                                 CallFunc_Concat_StrStr_ReturnValue_16;             // 0x0298(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FString                                 CallFunc_Concat_StrStr_ReturnValue_17;             // 0x02A8(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FString                                 CallFunc_Concat_StrStr_ReturnValue_18;             // 0x02B8(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FString                                 CallFunc_Concat_StrStr_ReturnValue_19;             // 0x02C8(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FString                                 CallFunc_Concat_StrStr_ReturnValue_20;             // 0x02D8(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FString                                 CallFunc_Concat_StrStr_ReturnValue_21;             // 0x02E8(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FString                                 CallFunc_Concat_StrStr_ReturnValue_22;             // 0x02F8(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FString                                 CallFunc_Concat_StrStr_ReturnValue_23;             // 0x0308(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FString                                 CallFunc_Concat_StrStr_ReturnValue_24;             // 0x0318(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FString                                 CallFunc_Concat_StrStr_ReturnValue_25;             // 0x0328(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FString                                 CallFunc_Concat_StrStr_ReturnValue_26;             // 0x0338(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FString                                 CallFunc_Concat_StrStr_ReturnValue_27;             // 0x0348(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FString                                 CallFunc_Concat_StrStr_ReturnValue_28;             // 0x0358(0x0010)(ZeroConstructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_ChallengeSlot_C_Print_Status) == 0x000008, "Wrong alignment on BP_ChallengeSlot_C_Print_Status");
static_assert(sizeof(BP_ChallengeSlot_C_Print_Status) == 0x000368, "Wrong size on BP_ChallengeSlot_C_Print_Status");
static_assert(offsetof(BP_ChallengeSlot_C_Print_Status, Params_0) == 0x000000, "Member 'BP_ChallengeSlot_C_Print_Status::Params_0' has a wrong offset!");
static_assert(offsetof(BP_ChallengeSlot_C_Print_Status, Temp_bool_Variable) == 0x000010, "Member 'BP_ChallengeSlot_C_Print_Status::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(BP_ChallengeSlot_C_Print_Status, Temp_string_Variable) == 0x000018, "Member 'BP_ChallengeSlot_C_Print_Status::Temp_string_Variable' has a wrong offset!");
static_assert(offsetof(BP_ChallengeSlot_C_Print_Status, Temp_int_Array_Index_Variable) == 0x000028, "Member 'BP_ChallengeSlot_C_Print_Status::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(BP_ChallengeSlot_C_Print_Status, Temp_int_Loop_Counter_Variable) == 0x00002C, "Member 'BP_ChallengeSlot_C_Print_Status::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(BP_ChallengeSlot_C_Print_Status, CallFunc_Add_IntInt_ReturnValue) == 0x000030, "Member 'BP_ChallengeSlot_C_Print_Status::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_ChallengeSlot_C_Print_Status, CallFunc_JoinStringArray_ReturnValue) == 0x000038, "Member 'BP_ChallengeSlot_C_Print_Status::CallFunc_JoinStringArray_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_ChallengeSlot_C_Print_Status, CallFunc_Concat_StrStr_ReturnValue) == 0x000048, "Member 'BP_ChallengeSlot_C_Print_Status::CallFunc_Concat_StrStr_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_ChallengeSlot_C_Print_Status, CallFunc_Concat_StrStr_ReturnValue_1) == 0x000058, "Member 'BP_ChallengeSlot_C_Print_Status::CallFunc_Concat_StrStr_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_ChallengeSlot_C_Print_Status, CallFunc_Array_Get_Item) == 0x000068, "Member 'BP_ChallengeSlot_C_Print_Status::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(BP_ChallengeSlot_C_Print_Status, CallFunc_Array_Length_ReturnValue) == 0x000078, "Member 'BP_ChallengeSlot_C_Print_Status::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_ChallengeSlot_C_Print_Status, CallFunc_Less_IntInt_ReturnValue) == 0x00007C, "Member 'BP_ChallengeSlot_C_Print_Status::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_ChallengeSlot_C_Print_Status, CallFunc_GetEnumeratorUserFriendlyName_ReturnValue) == 0x000080, "Member 'BP_ChallengeSlot_C_Print_Status::CallFunc_GetEnumeratorUserFriendlyName_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_ChallengeSlot_C_Print_Status, CallFunc_Conv_IntToString_ReturnValue) == 0x000090, "Member 'BP_ChallengeSlot_C_Print_Status::CallFunc_Conv_IntToString_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_ChallengeSlot_C_Print_Status, CallFunc_GetClassDisplayName_ReturnValue) == 0x0000A0, "Member 'BP_ChallengeSlot_C_Print_Status::CallFunc_GetClassDisplayName_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_ChallengeSlot_C_Print_Status, CallFunc_Get_Maximum_Progress_Maximum_Progress) == 0x0000B0, "Member 'BP_ChallengeSlot_C_Print_Status::CallFunc_Get_Maximum_Progress_Maximum_Progress' has a wrong offset!");
static_assert(offsetof(BP_ChallengeSlot_C_Print_Status, CallFunc_Concat_StrStr_ReturnValue_2) == 0x0000B8, "Member 'BP_ChallengeSlot_C_Print_Status::CallFunc_Concat_StrStr_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BP_ChallengeSlot_C_Print_Status, CallFunc_Conv_IntToString_ReturnValue_1) == 0x0000C8, "Member 'BP_ChallengeSlot_C_Print_Status::CallFunc_Conv_IntToString_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_ChallengeSlot_C_Print_Status, CallFunc_Concat_StrStr_ReturnValue_3) == 0x0000D8, "Member 'BP_ChallengeSlot_C_Print_Status::CallFunc_Concat_StrStr_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(BP_ChallengeSlot_C_Print_Status, CallFunc_Get_Current_Progress_Current_Progress) == 0x0000E8, "Member 'BP_ChallengeSlot_C_Print_Status::CallFunc_Get_Current_Progress_Current_Progress' has a wrong offset!");
static_assert(offsetof(BP_ChallengeSlot_C_Print_Status, CallFunc_Concat_StrStr_ReturnValue_4) == 0x0000F0, "Member 'BP_ChallengeSlot_C_Print_Status::CallFunc_Concat_StrStr_ReturnValue_4' has a wrong offset!");
static_assert(offsetof(BP_ChallengeSlot_C_Print_Status, CallFunc_Conv_IntToString_ReturnValue_2) == 0x000100, "Member 'BP_ChallengeSlot_C_Print_Status::CallFunc_Conv_IntToString_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BP_ChallengeSlot_C_Print_Status, CallFunc_Concat_StrStr_ReturnValue_5) == 0x000110, "Member 'BP_ChallengeSlot_C_Print_Status::CallFunc_Concat_StrStr_ReturnValue_5' has a wrong offset!");
static_assert(offsetof(BP_ChallengeSlot_C_Print_Status, CallFunc_Array_Add_ReturnValue) == 0x000120, "Member 'BP_ChallengeSlot_C_Print_Status::CallFunc_Array_Add_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_ChallengeSlot_C_Print_Status, CallFunc_GetEnumeratorUserFriendlyName_ReturnValue_1) == 0x000128, "Member 'BP_ChallengeSlot_C_Print_Status::CallFunc_GetEnumeratorUserFriendlyName_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_ChallengeSlot_C_Print_Status, CallFunc_GetDisplayName_ReturnValue) == 0x000138, "Member 'BP_ChallengeSlot_C_Print_Status::CallFunc_GetDisplayName_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_ChallengeSlot_C_Print_Status, CallFunc_BreakDateTime_Year) == 0x000148, "Member 'BP_ChallengeSlot_C_Print_Status::CallFunc_BreakDateTime_Year' has a wrong offset!");
static_assert(offsetof(BP_ChallengeSlot_C_Print_Status, CallFunc_BreakDateTime_Month) == 0x00014C, "Member 'BP_ChallengeSlot_C_Print_Status::CallFunc_BreakDateTime_Month' has a wrong offset!");
static_assert(offsetof(BP_ChallengeSlot_C_Print_Status, CallFunc_BreakDateTime_Day) == 0x000150, "Member 'BP_ChallengeSlot_C_Print_Status::CallFunc_BreakDateTime_Day' has a wrong offset!");
static_assert(offsetof(BP_ChallengeSlot_C_Print_Status, CallFunc_BreakDateTime_Hour) == 0x000154, "Member 'BP_ChallengeSlot_C_Print_Status::CallFunc_BreakDateTime_Hour' has a wrong offset!");
static_assert(offsetof(BP_ChallengeSlot_C_Print_Status, CallFunc_BreakDateTime_Minute) == 0x000158, "Member 'BP_ChallengeSlot_C_Print_Status::CallFunc_BreakDateTime_Minute' has a wrong offset!");
static_assert(offsetof(BP_ChallengeSlot_C_Print_Status, CallFunc_BreakDateTime_Second) == 0x00015C, "Member 'BP_ChallengeSlot_C_Print_Status::CallFunc_BreakDateTime_Second' has a wrong offset!");
static_assert(offsetof(BP_ChallengeSlot_C_Print_Status, CallFunc_BreakDateTime_Millisecond) == 0x000160, "Member 'BP_ChallengeSlot_C_Print_Status::CallFunc_BreakDateTime_Millisecond' has a wrong offset!");
static_assert(offsetof(BP_ChallengeSlot_C_Print_Status, CallFunc_IsValid_ReturnValue) == 0x000164, "Member 'BP_ChallengeSlot_C_Print_Status::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_ChallengeSlot_C_Print_Status, CallFunc_Conv_IntToString_ReturnValue_3) == 0x000168, "Member 'BP_ChallengeSlot_C_Print_Status::CallFunc_Conv_IntToString_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(BP_ChallengeSlot_C_Print_Status, CallFunc_Conv_IntToString_ReturnValue_4) == 0x000178, "Member 'BP_ChallengeSlot_C_Print_Status::CallFunc_Conv_IntToString_ReturnValue_4' has a wrong offset!");
static_assert(offsetof(BP_ChallengeSlot_C_Print_Status, K2Node_Select_Default) == 0x000188, "Member 'BP_ChallengeSlot_C_Print_Status::K2Node_Select_Default' has a wrong offset!");
static_assert(offsetof(BP_ChallengeSlot_C_Print_Status, CallFunc_Conv_IntToString_ReturnValue_5) == 0x000198, "Member 'BP_ChallengeSlot_C_Print_Status::CallFunc_Conv_IntToString_ReturnValue_5' has a wrong offset!");
static_assert(offsetof(BP_ChallengeSlot_C_Print_Status, CallFunc_Conv_IntToString_ReturnValue_6) == 0x0001A8, "Member 'BP_ChallengeSlot_C_Print_Status::CallFunc_Conv_IntToString_ReturnValue_6' has a wrong offset!");
static_assert(offsetof(BP_ChallengeSlot_C_Print_Status, CallFunc_Conv_IntToString_ReturnValue_7) == 0x0001B8, "Member 'BP_ChallengeSlot_C_Print_Status::CallFunc_Conv_IntToString_ReturnValue_7' has a wrong offset!");
static_assert(offsetof(BP_ChallengeSlot_C_Print_Status, CallFunc_Conv_IntToString_ReturnValue_8) == 0x0001C8, "Member 'BP_ChallengeSlot_C_Print_Status::CallFunc_Conv_IntToString_ReturnValue_8' has a wrong offset!");
static_assert(offsetof(BP_ChallengeSlot_C_Print_Status, CallFunc_Conv_NameToString_ReturnValue) == 0x0001D8, "Member 'BP_ChallengeSlot_C_Print_Status::CallFunc_Conv_NameToString_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_ChallengeSlot_C_Print_Status, CallFunc_Conv_IntToString_ReturnValue_9) == 0x0001E8, "Member 'BP_ChallengeSlot_C_Print_Status::CallFunc_Conv_IntToString_ReturnValue_9' has a wrong offset!");
static_assert(offsetof(BP_ChallengeSlot_C_Print_Status, CallFunc_Concat_StrStr_ReturnValue_6) == 0x0001F8, "Member 'BP_ChallengeSlot_C_Print_Status::CallFunc_Concat_StrStr_ReturnValue_6' has a wrong offset!");
static_assert(offsetof(BP_ChallengeSlot_C_Print_Status, CallFunc_Concat_StrStr_ReturnValue_7) == 0x000208, "Member 'BP_ChallengeSlot_C_Print_Status::CallFunc_Concat_StrStr_ReturnValue_7' has a wrong offset!");
static_assert(offsetof(BP_ChallengeSlot_C_Print_Status, CallFunc_Concat_StrStr_ReturnValue_8) == 0x000218, "Member 'BP_ChallengeSlot_C_Print_Status::CallFunc_Concat_StrStr_ReturnValue_8' has a wrong offset!");
static_assert(offsetof(BP_ChallengeSlot_C_Print_Status, CallFunc_Concat_StrStr_ReturnValue_9) == 0x000228, "Member 'BP_ChallengeSlot_C_Print_Status::CallFunc_Concat_StrStr_ReturnValue_9' has a wrong offset!");
static_assert(offsetof(BP_ChallengeSlot_C_Print_Status, CallFunc_Concat_StrStr_ReturnValue_10) == 0x000238, "Member 'BP_ChallengeSlot_C_Print_Status::CallFunc_Concat_StrStr_ReturnValue_10' has a wrong offset!");
static_assert(offsetof(BP_ChallengeSlot_C_Print_Status, CallFunc_Concat_StrStr_ReturnValue_11) == 0x000248, "Member 'BP_ChallengeSlot_C_Print_Status::CallFunc_Concat_StrStr_ReturnValue_11' has a wrong offset!");
static_assert(offsetof(BP_ChallengeSlot_C_Print_Status, CallFunc_Concat_StrStr_ReturnValue_12) == 0x000258, "Member 'BP_ChallengeSlot_C_Print_Status::CallFunc_Concat_StrStr_ReturnValue_12' has a wrong offset!");
static_assert(offsetof(BP_ChallengeSlot_C_Print_Status, CallFunc_Concat_StrStr_ReturnValue_13) == 0x000268, "Member 'BP_ChallengeSlot_C_Print_Status::CallFunc_Concat_StrStr_ReturnValue_13' has a wrong offset!");
static_assert(offsetof(BP_ChallengeSlot_C_Print_Status, CallFunc_Concat_StrStr_ReturnValue_14) == 0x000278, "Member 'BP_ChallengeSlot_C_Print_Status::CallFunc_Concat_StrStr_ReturnValue_14' has a wrong offset!");
static_assert(offsetof(BP_ChallengeSlot_C_Print_Status, CallFunc_Concat_StrStr_ReturnValue_15) == 0x000288, "Member 'BP_ChallengeSlot_C_Print_Status::CallFunc_Concat_StrStr_ReturnValue_15' has a wrong offset!");
static_assert(offsetof(BP_ChallengeSlot_C_Print_Status, CallFunc_Concat_StrStr_ReturnValue_16) == 0x000298, "Member 'BP_ChallengeSlot_C_Print_Status::CallFunc_Concat_StrStr_ReturnValue_16' has a wrong offset!");
static_assert(offsetof(BP_ChallengeSlot_C_Print_Status, CallFunc_Concat_StrStr_ReturnValue_17) == 0x0002A8, "Member 'BP_ChallengeSlot_C_Print_Status::CallFunc_Concat_StrStr_ReturnValue_17' has a wrong offset!");
static_assert(offsetof(BP_ChallengeSlot_C_Print_Status, CallFunc_Concat_StrStr_ReturnValue_18) == 0x0002B8, "Member 'BP_ChallengeSlot_C_Print_Status::CallFunc_Concat_StrStr_ReturnValue_18' has a wrong offset!");
static_assert(offsetof(BP_ChallengeSlot_C_Print_Status, CallFunc_Concat_StrStr_ReturnValue_19) == 0x0002C8, "Member 'BP_ChallengeSlot_C_Print_Status::CallFunc_Concat_StrStr_ReturnValue_19' has a wrong offset!");
static_assert(offsetof(BP_ChallengeSlot_C_Print_Status, CallFunc_Concat_StrStr_ReturnValue_20) == 0x0002D8, "Member 'BP_ChallengeSlot_C_Print_Status::CallFunc_Concat_StrStr_ReturnValue_20' has a wrong offset!");
static_assert(offsetof(BP_ChallengeSlot_C_Print_Status, CallFunc_Concat_StrStr_ReturnValue_21) == 0x0002E8, "Member 'BP_ChallengeSlot_C_Print_Status::CallFunc_Concat_StrStr_ReturnValue_21' has a wrong offset!");
static_assert(offsetof(BP_ChallengeSlot_C_Print_Status, CallFunc_Concat_StrStr_ReturnValue_22) == 0x0002F8, "Member 'BP_ChallengeSlot_C_Print_Status::CallFunc_Concat_StrStr_ReturnValue_22' has a wrong offset!");
static_assert(offsetof(BP_ChallengeSlot_C_Print_Status, CallFunc_Concat_StrStr_ReturnValue_23) == 0x000308, "Member 'BP_ChallengeSlot_C_Print_Status::CallFunc_Concat_StrStr_ReturnValue_23' has a wrong offset!");
static_assert(offsetof(BP_ChallengeSlot_C_Print_Status, CallFunc_Concat_StrStr_ReturnValue_24) == 0x000318, "Member 'BP_ChallengeSlot_C_Print_Status::CallFunc_Concat_StrStr_ReturnValue_24' has a wrong offset!");
static_assert(offsetof(BP_ChallengeSlot_C_Print_Status, CallFunc_Concat_StrStr_ReturnValue_25) == 0x000328, "Member 'BP_ChallengeSlot_C_Print_Status::CallFunc_Concat_StrStr_ReturnValue_25' has a wrong offset!");
static_assert(offsetof(BP_ChallengeSlot_C_Print_Status, CallFunc_Concat_StrStr_ReturnValue_26) == 0x000338, "Member 'BP_ChallengeSlot_C_Print_Status::CallFunc_Concat_StrStr_ReturnValue_26' has a wrong offset!");
static_assert(offsetof(BP_ChallengeSlot_C_Print_Status, CallFunc_Concat_StrStr_ReturnValue_27) == 0x000348, "Member 'BP_ChallengeSlot_C_Print_Status::CallFunc_Concat_StrStr_ReturnValue_27' has a wrong offset!");
static_assert(offsetof(BP_ChallengeSlot_C_Print_Status, CallFunc_Concat_StrStr_ReturnValue_28) == 0x000358, "Member 'BP_ChallengeSlot_C_Print_Status::CallFunc_Concat_StrStr_ReturnValue_28' has a wrong offset!");

// Function BP_ChallengeSlot.BP_ChallengeSlot_C.Get Challenge Condition Type
// 0x0010 (0x0010 - 0x0000)
struct BP_ChallengeSlot_C_Get_Challenge_Condition_Type final
{
public:
	class UClass*                                 Challenge_Name_0;                                  // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UClass*                                 CallFunc_GetObjectClass_ReturnValue;               // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_ChallengeSlot_C_Get_Challenge_Condition_Type) == 0x000008, "Wrong alignment on BP_ChallengeSlot_C_Get_Challenge_Condition_Type");
static_assert(sizeof(BP_ChallengeSlot_C_Get_Challenge_Condition_Type) == 0x000010, "Wrong size on BP_ChallengeSlot_C_Get_Challenge_Condition_Type");
static_assert(offsetof(BP_ChallengeSlot_C_Get_Challenge_Condition_Type, Challenge_Name_0) == 0x000000, "Member 'BP_ChallengeSlot_C_Get_Challenge_Condition_Type::Challenge_Name_0' has a wrong offset!");
static_assert(offsetof(BP_ChallengeSlot_C_Get_Challenge_Condition_Type, CallFunc_GetObjectClass_ReturnValue) == 0x000008, "Member 'BP_ChallengeSlot_C_Get_Challenge_Condition_Type::CallFunc_GetObjectClass_ReturnValue' has a wrong offset!");

// Function BP_ChallengeSlot.BP_ChallengeSlot_C.Get Challenge Settings
// 0x0100 (0x0100 - 0x0000)
struct BP_ChallengeSlot_C_Get_Challenge_Settings final
{
public:
	struct FChallengeList                         Challenge_Settings_0;                              // 0x0000(0x0100)(Parm, OutParm)
};
static_assert(alignof(BP_ChallengeSlot_C_Get_Challenge_Settings) == 0x000008, "Wrong alignment on BP_ChallengeSlot_C_Get_Challenge_Settings");
static_assert(sizeof(BP_ChallengeSlot_C_Get_Challenge_Settings) == 0x000100, "Wrong size on BP_ChallengeSlot_C_Get_Challenge_Settings");
static_assert(offsetof(BP_ChallengeSlot_C_Get_Challenge_Settings, Challenge_Settings_0) == 0x000000, "Member 'BP_ChallengeSlot_C_Get_Challenge_Settings::Challenge_Settings_0' has a wrong offset!");

// Function BP_ChallengeSlot.BP_ChallengeSlot_C.Get Challenge Voice Line
// 0x0020 (0x0020 - 0x0000)
struct BP_ChallengeSlot_C_Get_Challenge_Voice_Line final
{
public:
	class USoundWave*                             Voice_Line_0;                                      // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<E_ChallengeSlotState>                  K2Node_MakeArray_Array;                            // 0x0008(0x0010)(ConstParm, ReferenceParm)
	bool                                          CallFunc_Array_Contains_ReturnValue;               // 0x0018(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_ChallengeSlot_C_Get_Challenge_Voice_Line) == 0x000008, "Wrong alignment on BP_ChallengeSlot_C_Get_Challenge_Voice_Line");
static_assert(sizeof(BP_ChallengeSlot_C_Get_Challenge_Voice_Line) == 0x000020, "Wrong size on BP_ChallengeSlot_C_Get_Challenge_Voice_Line");
static_assert(offsetof(BP_ChallengeSlot_C_Get_Challenge_Voice_Line, Voice_Line_0) == 0x000000, "Member 'BP_ChallengeSlot_C_Get_Challenge_Voice_Line::Voice_Line_0' has a wrong offset!");
static_assert(offsetof(BP_ChallengeSlot_C_Get_Challenge_Voice_Line, K2Node_MakeArray_Array) == 0x000008, "Member 'BP_ChallengeSlot_C_Get_Challenge_Voice_Line::K2Node_MakeArray_Array' has a wrong offset!");
static_assert(offsetof(BP_ChallengeSlot_C_Get_Challenge_Voice_Line, CallFunc_Array_Contains_ReturnValue) == 0x000018, "Member 'BP_ChallengeSlot_C_Get_Challenge_Voice_Line::CallFunc_Array_Contains_ReturnValue' has a wrong offset!");

// Function BP_ChallengeSlot.BP_ChallengeSlot_C.ResetAfterRerollFailed
// 0x0002 (0x0002 - 0x0000)
struct BP_ChallengeSlot_C_ResetAfterRerollFailed final
{
public:
	uint8                                         CallFunc_MakeLiteralByte_ReturnValue;              // 0x0000(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_NotEqual_ByteByte_ReturnValue;            // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_ChallengeSlot_C_ResetAfterRerollFailed) == 0x000001, "Wrong alignment on BP_ChallengeSlot_C_ResetAfterRerollFailed");
static_assert(sizeof(BP_ChallengeSlot_C_ResetAfterRerollFailed) == 0x000002, "Wrong size on BP_ChallengeSlot_C_ResetAfterRerollFailed");
static_assert(offsetof(BP_ChallengeSlot_C_ResetAfterRerollFailed, CallFunc_MakeLiteralByte_ReturnValue) == 0x000000, "Member 'BP_ChallengeSlot_C_ResetAfterRerollFailed::CallFunc_MakeLiteralByte_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_ChallengeSlot_C_ResetAfterRerollFailed, CallFunc_NotEqual_ByteByte_ReturnValue) == 0x000001, "Member 'BP_ChallengeSlot_C_ResetAfterRerollFailed::CallFunc_NotEqual_ByteByte_ReturnValue' has a wrong offset!");

// Function BP_ChallengeSlot.BP_ChallengeSlot_C.GetRelativeProgress
// 0x001C (0x001C - 0x0000)
struct BP_ChallengeSlot_C_GetRelativeProgress final
{
public:
	float                                         RelativeProgress;                                  // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Get_Maximum_Progress_Maximum_Progress;    // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Get_Current_Progress_Current_Progress;    // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_IntInt_ReturnValue;            // 0x000C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_D[0x3];                                        // 0x000D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_Conv_IntToFloat_ReturnValue;              // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Conv_IntToFloat_ReturnValue_1;            // 0x0014(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Divide_FloatFloat_ReturnValue;            // 0x0018(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_ChallengeSlot_C_GetRelativeProgress) == 0x000004, "Wrong alignment on BP_ChallengeSlot_C_GetRelativeProgress");
static_assert(sizeof(BP_ChallengeSlot_C_GetRelativeProgress) == 0x00001C, "Wrong size on BP_ChallengeSlot_C_GetRelativeProgress");
static_assert(offsetof(BP_ChallengeSlot_C_GetRelativeProgress, RelativeProgress) == 0x000000, "Member 'BP_ChallengeSlot_C_GetRelativeProgress::RelativeProgress' has a wrong offset!");
static_assert(offsetof(BP_ChallengeSlot_C_GetRelativeProgress, CallFunc_Get_Maximum_Progress_Maximum_Progress) == 0x000004, "Member 'BP_ChallengeSlot_C_GetRelativeProgress::CallFunc_Get_Maximum_Progress_Maximum_Progress' has a wrong offset!");
static_assert(offsetof(BP_ChallengeSlot_C_GetRelativeProgress, CallFunc_Get_Current_Progress_Current_Progress) == 0x000008, "Member 'BP_ChallengeSlot_C_GetRelativeProgress::CallFunc_Get_Current_Progress_Current_Progress' has a wrong offset!");
static_assert(offsetof(BP_ChallengeSlot_C_GetRelativeProgress, CallFunc_EqualEqual_IntInt_ReturnValue) == 0x00000C, "Member 'BP_ChallengeSlot_C_GetRelativeProgress::CallFunc_EqualEqual_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_ChallengeSlot_C_GetRelativeProgress, CallFunc_Conv_IntToFloat_ReturnValue) == 0x000010, "Member 'BP_ChallengeSlot_C_GetRelativeProgress::CallFunc_Conv_IntToFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_ChallengeSlot_C_GetRelativeProgress, CallFunc_Conv_IntToFloat_ReturnValue_1) == 0x000014, "Member 'BP_ChallengeSlot_C_GetRelativeProgress::CallFunc_Conv_IntToFloat_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_ChallengeSlot_C_GetRelativeProgress, CallFunc_Divide_FloatFloat_ReturnValue) == 0x000018, "Member 'BP_ChallengeSlot_C_GetRelativeProgress::CallFunc_Divide_FloatFloat_ReturnValue' has a wrong offset!");

}

