#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: UI_InputChoiceText

#include "Basic.hpp"

#include "UI_InputChoiceText_classes.hpp"
#include "UI_InputChoiceText_parameters.hpp"


namespace SDK
{

// Function UI_InputChoiceText.UI_InputChoiceText_C.ExecuteUbergraph_UI_InputChoiceText
// (Final, UbergraphFunction, HasDefaults)
// Parameters:
// int32                                   EntryPoint                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UUI_InputChoiceText_C::ExecuteUbergraph_UI_InputChoiceText(int32 EntryPoint)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UI_InputChoiceText_C", "ExecuteUbergraph_UI_InputChoiceText");

	Params::UI_InputChoiceText_C_ExecuteUbergraph_UI_InputChoiceText Parms{};

	Parms.EntryPoint = EntryPoint;

	UObject::ProcessEvent(Func, &Parms);
}


// Function UI_InputChoiceText.UI_InputChoiceText_C.IconChanged
// (BlueprintCallable, BlueprintEvent)

void UUI_InputChoiceText_C::IconChanged()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UI_InputChoiceText_C", "IconChanged");

	UObject::ProcessEvent(Func, nullptr);
}


// Function UI_InputChoiceText.UI_InputChoiceText_C.InputModeChanged
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// int32                                   PlayerIndex                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// EInputMode                              InputMode                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UUI_InputChoiceText_C::InputModeChanged(int32 PlayerIndex, EInputMode InputMode)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UI_InputChoiceText_C", "InputModeChanged");

	Params::UI_InputChoiceText_C_InputModeChanged Parms{};

	Parms.PlayerIndex = PlayerIndex;
	Parms.InputMode = InputMode;

	UObject::ProcessEvent(Func, &Parms);
}


// Function UI_InputChoiceText.UI_InputChoiceText_C.Construct
// (BlueprintCosmetic, Event, Public, BlueprintEvent)

void UUI_InputChoiceText_C::Construct()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UI_InputChoiceText_C", "Construct");

	UObject::ProcessEvent(Func, nullptr);
}


// Function UI_InputChoiceText.UI_InputChoiceText_C.OnMouseLeave
// (BlueprintCosmetic, Event, Public, HasOutParams, BlueprintEvent)
// Parameters:
// struct FPointerEvent                    MouseEvent                                             (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)

void UUI_InputChoiceText_C::OnMouseLeave(const struct FPointerEvent& MouseEvent)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UI_InputChoiceText_C", "OnMouseLeave");

	Params::UI_InputChoiceText_C_OnMouseLeave Parms{};

	Parms.MouseEvent = std::move(MouseEvent);

	UObject::ProcessEvent(Func, &Parms);
}


// Function UI_InputChoiceText.UI_InputChoiceText_C.OnMouseEnter
// (BlueprintCosmetic, Event, Public, HasOutParams, BlueprintEvent)
// Parameters:
// struct FGeometry                        MyGeometry                                             (BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor)
// struct FPointerEvent                    MouseEvent                                             (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)

void UUI_InputChoiceText_C::OnMouseEnter(const struct FGeometry& MyGeometry, const struct FPointerEvent& MouseEvent)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UI_InputChoiceText_C", "OnMouseEnter");

	Params::UI_InputChoiceText_C_OnMouseEnter Parms{};

	Parms.MyGeometry = std::move(MyGeometry);
	Parms.MouseEvent = std::move(MouseEvent);

	UObject::ProcessEvent(Func, &Parms);
}


// Function UI_InputChoiceText.UI_InputChoiceText_C.Select index
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// int32                                   SelectedAmountIndex_0                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UUI_InputChoiceText_C::Select_index(int32 SelectedAmountIndex_0)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UI_InputChoiceText_C", "Select index");

	Params::UI_InputChoiceText_C_Select_index Parms{};

	Parms.SelectedAmountIndex_0 = SelectedAmountIndex_0;

	UObject::ProcessEvent(Func, &Parms);
}


// Function UI_InputChoiceText.UI_InputChoiceText_C.OnActionPressed
// (Event, Protected, BlueprintEvent)

void UUI_InputChoiceText_C::OnActionPressed()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UI_InputChoiceText_C", "OnActionPressed");

	UObject::ProcessEvent(Func, nullptr);
}


// Function UI_InputChoiceText.UI_InputChoiceText_C.PreConstruct
// (BlueprintCosmetic, Event, Public, BlueprintEvent)
// Parameters:
// bool                                    IsDesignTime                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void UUI_InputChoiceText_C::PreConstruct(bool IsDesignTime)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UI_InputChoiceText_C", "PreConstruct");

	Params::UI_InputChoiceText_C_PreConstruct Parms{};

	Parms.IsDesignTime = IsDesignTime;

	UObject::ProcessEvent(Func, &Parms);
}


// Function UI_InputChoiceText.UI_InputChoiceText_C.AddValueWidget
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class FText                             Value                                                  (BlueprintVisible, BlueprintReadOnly, Parm)

void UUI_InputChoiceText_C::AddValueWidget(const class FText& Value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UI_InputChoiceText_C", "AddValueWidget");

	Params::UI_InputChoiceText_C_AddValueWidget Parms{};

	Parms.Value = std::move(Value);

	UObject::ProcessEvent(Func, &Parms);
}


// Function UI_InputChoiceText.UI_InputChoiceText_C.AddSeparatorWidget
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)

void UUI_InputChoiceText_C::AddSeparatorWidget()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UI_InputChoiceText_C", "AddSeparatorWidget");

	UObject::ProcessEvent(Func, nullptr);
}


// Function UI_InputChoiceText.UI_InputChoiceText_C.GetSelectedValue
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// class FText                             Value                                                  (Parm, OutParm)

void UUI_InputChoiceText_C::GetSelectedValue(class FText* Value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UI_InputChoiceText_C", "GetSelectedValue");

	Params::UI_InputChoiceText_C_GetSelectedValue Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Value != nullptr)
		*Value = std::move(Parms.Value);
}


// Function UI_InputChoiceText.UI_InputChoiceText_C.CreateTextWidget
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// class FText                             TextValue                                              (BlueprintVisible, BlueprintReadOnly, Parm)
// class UFlameTextBlock*                  ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

class UFlameTextBlock* UUI_InputChoiceText_C::CreateTextWidget(const class FText& TextValue)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UI_InputChoiceText_C", "CreateTextWidget");

	Params::UI_InputChoiceText_C_CreateTextWidget Parms{};

	Parms.TextValue = std::move(TextValue);

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function UI_InputChoiceText.UI_InputChoiceText_C.SetWindowsIcon
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)

void UUI_InputChoiceText_C::SetWindowsIcon()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UI_InputChoiceText_C", "SetWindowsIcon");

	UObject::ProcessEvent(Func, nullptr);
}


// Function UI_InputChoiceText.UI_InputChoiceText_C.GetSelectedIndex
// (Event, Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure, Const)
// Parameters:
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

int32 UUI_InputChoiceText_C::GetSelectedIndex() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UI_InputChoiceText_C", "GetSelectedIndex");

	Params::UI_InputChoiceText_C_GetSelectedIndex Parms{};

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}

}

