#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_PlacableTrap_Object_Base

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "Engine_classes.hpp"


namespace SDK
{

// BlueprintGeneratedClass BP_PlacableTrap_Object_Base.BP_PlacableTrap_Object_Base_C
// 0x0248 (0x0468 - 0x0220)
class ABP_PlacableTrap_Object_Base_C : public AActor
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x0220(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class UAudioComponentExtended*                AmbientAudio;                                      // 0x0228(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UAudioComponentExtended*                Audio;                                             // 0x0230(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UStaticMeshComponent*                   StaticMesh;                                        // 0x0238(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USceneComponent*                        DefaultSceneRoot;                                  // 0x0240(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	TSoftObjectPtr<class UStaticMesh>             Trap_Mesh_Placed;                                  // 0x0248(0x0028)(Edit, BlueprintVisible, DisableEditOnInstance, HasGetValueTypeHash)
	TSoftObjectPtr<class UStaticMesh>             Trap_Mesh_Active;                                  // 0x0270(0x0028)(Edit, BlueprintVisible, Net, DisableEditOnInstance, HasGetValueTypeHash)
	TSoftObjectPtr<class UStaticMesh>             Trap_Mesh_Broken;                                  // 0x0298(0x0028)(Edit, BlueprintVisible, DisableEditOnInstance, HasGetValueTypeHash)
	TSoftObjectPtr<class USoundBase>              Trap_Sound_Placed;                                 // 0x02C0(0x0028)(Edit, BlueprintVisible, DisableEditOnInstance, HasGetValueTypeHash)
	TSoftObjectPtr<class USoundBase>              Trap_Sound_Activated;                              // 0x02E8(0x0028)(Edit, BlueprintVisible, DisableEditOnInstance, HasGetValueTypeHash)
	TSoftObjectPtr<class USoundBase>              Trap_Sound_Broken;                                 // 0x0310(0x0028)(Edit, BlueprintVisible, DisableEditOnInstance, HasGetValueTypeHash)
	TSoftObjectPtr<class USoundBase>              Trap_Sound_Triggered;                              // 0x0338(0x0028)(Edit, BlueprintVisible, DisableEditOnInstance, HasGetValueTypeHash)
	float                                         Trap_Range_Trigger;                                // 0x0360(0x0004)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Trap_Timer_Activation;                             // 0x0364(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Trap_Timer_Despawn;                                // 0x0368(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Trap_Timer_AutoSelfDestroy;                        // 0x036C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Trap_HealthPoints;                                 // 0x0370(0x0004)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Trap_IsPlaced;                                     // 0x0374(0x0001)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          Trap_IsActive;                                     // 0x0375(0x0001)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          Trap_IsBroken;                                     // 0x0376(0x0001)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_377[0x1];                                      // 0x0377(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class UClass*>                         Trap_ClassesThatTriggerTrap;                       // 0x0378(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	bool                                          Trap_IsTriggered;                                  // 0x0388(0x0001)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_389[0x7];                                      // 0x0389(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TSoftObjectPtr<class UStaticMesh>             Trap_Mesh_Triggered;                               // 0x0390(0x0028)(Edit, BlueprintVisible, DisableEditOnInstance, HasGetValueTypeHash)
	TSoftObjectPtr<class USoundBase>              Trap_Sound_Despawn;                                // 0x03B8(0x0028)(Edit, BlueprintVisible, DisableEditOnInstance, HasGetValueTypeHash)
	bool                                          Trap_Activation_TimerOn;                           // 0x03E0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_3E1[0x7];                                      // 0x03E1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TSoftObjectPtr<class USoundBase>              Trap_Sound_Ambient;                                // 0x03E8(0x0028)(Edit, BlueprintVisible, DisableEditOnInstance, HasGetValueTypeHash)
	struct FTimerHandle                           Activation_timer;                                  // 0x0410(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	struct FTimerHandle                           Auto_self_destroy_timer;                           // 0x0418(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	struct FTimerHandle                           Despawn_timer;                                     // 0x0420(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	class UClass*                                 Tool_item;                                         // 0x0428(0x0008)(Edit, BlueprintVisible, Net, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash)
	struct FTimerHandle                           Trap_lifetime_after_activation;                    // 0x0430(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	class FString                                 Owner_name;                                        // 0x0438(0x0010)(Edit, BlueprintVisible, Net, ZeroConstructor, ExposeOnSpawn, HasGetValueTypeHash)
	class AController*                            Controller_that_hit_the_trap;                      // 0x0448(0x0008)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         OwningPlayerID;                                    // 0x0450(0x0004)(Edit, BlueprintVisible, Net, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash)
	uint8                                         Pad_454[0x4];                                      // 0x0454(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class ABP_PlayerState_C*                      Owning_Player_State;                               // 0x0458(0x0008)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash)
	bool                                          Destroyed_analytics_and_event_sent;                // 0x0460(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)

public:
	void ExecuteUbergraph_BP_PlacableTrap_Object_Base(int32 EntryPoint);
	void EventStopAmbientSounds();
	void ProccessExplosion(const struct FVector& Location, float ExplosionRadius, class AController* InstigatorController, class AActor* DamageCauser, bool DamagingExplosion, float EnviromentDamageMultiplier);
	void Send_Player_destroyed_trap(class ABP_PlayerController_Script_C* Player_that_destroyed_trap);
	void Trap_play_effects_triggered();
	void Trap_Break(class UObject* Player_that_destroyed_the_trap);
	void Send_analytics_tool_placed();
	void Trap_load_ambient_sound_and_play(TSoftObjectPtr<class UObject> SoftObject, float FadeInDuration);
	void Trap_Despawn();
	void Trap_load_sound_and_play(TSoftObjectPtr<class UObject> SoftSound, float FadeInDuration);
	void ReceiveAnyDamage(float Damage, const class UDamageType* DamageType, class AController* InstigatedBy, class AActor* DamageCauser);
	void Trap_Triggered(class UObject* ObjectThatTriggeredTrap);
	void Trap_GotHit(float Damage, class AController* PlayerControllerThatHitTheTrap, bool Delayed_Trigger);
	void Trap_Overlaps(const class UObject* ObjectThatOverlappedTrap);
	void Trap_Placed();
	void Trap_AutoBreak();
	void Trap_Activate();
	void Trap_SetStaticMesh(TSoftObjectPtr<class UStaticMesh> SoftMesh);
	void OnLoaded_303A9E7341428F48F05BE78AE7D6A9A7(class UObject* Loaded);
	void OnLoaded_303A9E7341428F48F05BE78A2D154574(class UObject* Loaded);
	void OnLoaded_303A9E7341428F48F05BE78AC1E2D764(class UObject* Loaded);
	void Trap_SetUpVariablesFromTool(float Trap_Range_Trigger_0, float Trap_Timer_Activation_0, float Trap_Timer_Despawn_0, float Trap_Timer_AutoSelfDestroy_0, float Trap_HealthPoints_0, TSoftObjectPtr<class UStaticMesh> Trap_Mesh_Placed_0, TSoftObjectPtr<class UStaticMesh> Trap_Mesh_Active_0, TSoftObjectPtr<class UStaticMesh> Trap_Mesh_Broken_0, TSoftObjectPtr<class UStaticMesh> Trap_Mesh_Triggered_0, TSoftObjectPtr<class USoundBase> Trap_Sound_Placement, TSoftObjectPtr<class USoundBase> Trap_Sound_Break, TSoftObjectPtr<class USoundBase> Trap_Sound_TrapActivated, TSoftObjectPtr<class USoundBase> Trap_Sound_TrapTriggered, TSoftObjectPtr<class USoundBase> Trap_Sound_Despawn_0, TSoftObjectPtr<class USoundBase> Trap_Sound_Ambient_0);
	void Trap_Phase_Placed();
	void Trap_Phase_Activated();
	void Trap_Phase_Broken();
	void Trap_Phase_Trigger(class UObject* ObjectThatTriggeredTrap);
	void Trap_PlayEffects_Placement();
	void Trap_PlayEffects_Activated();
	void Trap_PlayEffects_Broken();
	void Trap_PlayEffects_Despawn();
	void Trap_Phase_Despawn();

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BP_PlacableTrap_Object_Base_C">();
	}
	static class ABP_PlacableTrap_Object_Base_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<ABP_PlacableTrap_Object_Base_C>();
	}
};
static_assert(alignof(ABP_PlacableTrap_Object_Base_C) == 0x000008, "Wrong alignment on ABP_PlacableTrap_Object_Base_C");
static_assert(sizeof(ABP_PlacableTrap_Object_Base_C) == 0x000468, "Wrong size on ABP_PlacableTrap_Object_Base_C");
static_assert(offsetof(ABP_PlacableTrap_Object_Base_C, UberGraphFrame) == 0x000220, "Member 'ABP_PlacableTrap_Object_Base_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(ABP_PlacableTrap_Object_Base_C, AmbientAudio) == 0x000228, "Member 'ABP_PlacableTrap_Object_Base_C::AmbientAudio' has a wrong offset!");
static_assert(offsetof(ABP_PlacableTrap_Object_Base_C, Audio) == 0x000230, "Member 'ABP_PlacableTrap_Object_Base_C::Audio' has a wrong offset!");
static_assert(offsetof(ABP_PlacableTrap_Object_Base_C, StaticMesh) == 0x000238, "Member 'ABP_PlacableTrap_Object_Base_C::StaticMesh' has a wrong offset!");
static_assert(offsetof(ABP_PlacableTrap_Object_Base_C, DefaultSceneRoot) == 0x000240, "Member 'ABP_PlacableTrap_Object_Base_C::DefaultSceneRoot' has a wrong offset!");
static_assert(offsetof(ABP_PlacableTrap_Object_Base_C, Trap_Mesh_Placed) == 0x000248, "Member 'ABP_PlacableTrap_Object_Base_C::Trap_Mesh_Placed' has a wrong offset!");
static_assert(offsetof(ABP_PlacableTrap_Object_Base_C, Trap_Mesh_Active) == 0x000270, "Member 'ABP_PlacableTrap_Object_Base_C::Trap_Mesh_Active' has a wrong offset!");
static_assert(offsetof(ABP_PlacableTrap_Object_Base_C, Trap_Mesh_Broken) == 0x000298, "Member 'ABP_PlacableTrap_Object_Base_C::Trap_Mesh_Broken' has a wrong offset!");
static_assert(offsetof(ABP_PlacableTrap_Object_Base_C, Trap_Sound_Placed) == 0x0002C0, "Member 'ABP_PlacableTrap_Object_Base_C::Trap_Sound_Placed' has a wrong offset!");
static_assert(offsetof(ABP_PlacableTrap_Object_Base_C, Trap_Sound_Activated) == 0x0002E8, "Member 'ABP_PlacableTrap_Object_Base_C::Trap_Sound_Activated' has a wrong offset!");
static_assert(offsetof(ABP_PlacableTrap_Object_Base_C, Trap_Sound_Broken) == 0x000310, "Member 'ABP_PlacableTrap_Object_Base_C::Trap_Sound_Broken' has a wrong offset!");
static_assert(offsetof(ABP_PlacableTrap_Object_Base_C, Trap_Sound_Triggered) == 0x000338, "Member 'ABP_PlacableTrap_Object_Base_C::Trap_Sound_Triggered' has a wrong offset!");
static_assert(offsetof(ABP_PlacableTrap_Object_Base_C, Trap_Range_Trigger) == 0x000360, "Member 'ABP_PlacableTrap_Object_Base_C::Trap_Range_Trigger' has a wrong offset!");
static_assert(offsetof(ABP_PlacableTrap_Object_Base_C, Trap_Timer_Activation) == 0x000364, "Member 'ABP_PlacableTrap_Object_Base_C::Trap_Timer_Activation' has a wrong offset!");
static_assert(offsetof(ABP_PlacableTrap_Object_Base_C, Trap_Timer_Despawn) == 0x000368, "Member 'ABP_PlacableTrap_Object_Base_C::Trap_Timer_Despawn' has a wrong offset!");
static_assert(offsetof(ABP_PlacableTrap_Object_Base_C, Trap_Timer_AutoSelfDestroy) == 0x00036C, "Member 'ABP_PlacableTrap_Object_Base_C::Trap_Timer_AutoSelfDestroy' has a wrong offset!");
static_assert(offsetof(ABP_PlacableTrap_Object_Base_C, Trap_HealthPoints) == 0x000370, "Member 'ABP_PlacableTrap_Object_Base_C::Trap_HealthPoints' has a wrong offset!");
static_assert(offsetof(ABP_PlacableTrap_Object_Base_C, Trap_IsPlaced) == 0x000374, "Member 'ABP_PlacableTrap_Object_Base_C::Trap_IsPlaced' has a wrong offset!");
static_assert(offsetof(ABP_PlacableTrap_Object_Base_C, Trap_IsActive) == 0x000375, "Member 'ABP_PlacableTrap_Object_Base_C::Trap_IsActive' has a wrong offset!");
static_assert(offsetof(ABP_PlacableTrap_Object_Base_C, Trap_IsBroken) == 0x000376, "Member 'ABP_PlacableTrap_Object_Base_C::Trap_IsBroken' has a wrong offset!");
static_assert(offsetof(ABP_PlacableTrap_Object_Base_C, Trap_ClassesThatTriggerTrap) == 0x000378, "Member 'ABP_PlacableTrap_Object_Base_C::Trap_ClassesThatTriggerTrap' has a wrong offset!");
static_assert(offsetof(ABP_PlacableTrap_Object_Base_C, Trap_IsTriggered) == 0x000388, "Member 'ABP_PlacableTrap_Object_Base_C::Trap_IsTriggered' has a wrong offset!");
static_assert(offsetof(ABP_PlacableTrap_Object_Base_C, Trap_Mesh_Triggered) == 0x000390, "Member 'ABP_PlacableTrap_Object_Base_C::Trap_Mesh_Triggered' has a wrong offset!");
static_assert(offsetof(ABP_PlacableTrap_Object_Base_C, Trap_Sound_Despawn) == 0x0003B8, "Member 'ABP_PlacableTrap_Object_Base_C::Trap_Sound_Despawn' has a wrong offset!");
static_assert(offsetof(ABP_PlacableTrap_Object_Base_C, Trap_Activation_TimerOn) == 0x0003E0, "Member 'ABP_PlacableTrap_Object_Base_C::Trap_Activation_TimerOn' has a wrong offset!");
static_assert(offsetof(ABP_PlacableTrap_Object_Base_C, Trap_Sound_Ambient) == 0x0003E8, "Member 'ABP_PlacableTrap_Object_Base_C::Trap_Sound_Ambient' has a wrong offset!");
static_assert(offsetof(ABP_PlacableTrap_Object_Base_C, Activation_timer) == 0x000410, "Member 'ABP_PlacableTrap_Object_Base_C::Activation_timer' has a wrong offset!");
static_assert(offsetof(ABP_PlacableTrap_Object_Base_C, Auto_self_destroy_timer) == 0x000418, "Member 'ABP_PlacableTrap_Object_Base_C::Auto_self_destroy_timer' has a wrong offset!");
static_assert(offsetof(ABP_PlacableTrap_Object_Base_C, Despawn_timer) == 0x000420, "Member 'ABP_PlacableTrap_Object_Base_C::Despawn_timer' has a wrong offset!");
static_assert(offsetof(ABP_PlacableTrap_Object_Base_C, Tool_item) == 0x000428, "Member 'ABP_PlacableTrap_Object_Base_C::Tool_item' has a wrong offset!");
static_assert(offsetof(ABP_PlacableTrap_Object_Base_C, Trap_lifetime_after_activation) == 0x000430, "Member 'ABP_PlacableTrap_Object_Base_C::Trap_lifetime_after_activation' has a wrong offset!");
static_assert(offsetof(ABP_PlacableTrap_Object_Base_C, Owner_name) == 0x000438, "Member 'ABP_PlacableTrap_Object_Base_C::Owner_name' has a wrong offset!");
static_assert(offsetof(ABP_PlacableTrap_Object_Base_C, Controller_that_hit_the_trap) == 0x000448, "Member 'ABP_PlacableTrap_Object_Base_C::Controller_that_hit_the_trap' has a wrong offset!");
static_assert(offsetof(ABP_PlacableTrap_Object_Base_C, OwningPlayerID) == 0x000450, "Member 'ABP_PlacableTrap_Object_Base_C::OwningPlayerID' has a wrong offset!");
static_assert(offsetof(ABP_PlacableTrap_Object_Base_C, Owning_Player_State) == 0x000458, "Member 'ABP_PlacableTrap_Object_Base_C::Owning_Player_State' has a wrong offset!");
static_assert(offsetof(ABP_PlacableTrap_Object_Base_C, Destroyed_analytics_and_event_sent) == 0x000460, "Member 'ABP_PlacableTrap_Object_Base_C::Destroyed_analytics_and_event_sent' has a wrong offset!");

}

