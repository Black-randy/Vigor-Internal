#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_WeatherSpecificParticles

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "Engine_classes.hpp"


namespace SDK
{

// BlueprintGeneratedClass BP_WeatherSpecificParticles.BP_WeatherSpecificParticles_C
// 0x0068 (0x0288 - 0x0220)
class ABP_WeatherSpecificParticles_C final : public AActor
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x0220(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class UPointLightComponent*                   PointLight;                                        // 0x0228(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UParticleSystemComponent*               ParticleSystem;                                    // 0x0230(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USceneComponent*                        DefaultSceneRoot;                                  // 0x0238(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class ABP_LightingScenarioSwitcher_C*         LightingScenario;                                  // 0x0240(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TSoftObjectPtr<class UParticleSystem>         SoftVar_ParticleEffect;                            // 0x0248(0x0028)(Edit, BlueprintVisible, HasGetValueTypeHash)
	TArray<class FString>                         LightingToBeUsedIn;                                // 0x0270(0x0010)(Edit, BlueprintVisible, ExposeOnSpawn)
	bool                                          BoundToWeatherChange;                              // 0x0280(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          CurrentlyActive;                                   // 0x0281(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)

public:
	void DEBUG_INMinusEDITOR_Toggle_Visibility();
	void ReceiveBeginPlay();
	void GetWeatherSwitcher();
	void CheckForScenario(const class FString& ItemToFind);
	void CheckWeatherBound();
	void NewLightingLoaded_Event(const class FString& NewScenario);
	void RetryInit();
	void ActivateComponents(const class FString& LightningTag);
	void DisableComponents(const class FString& LightningTag);
	void ExecuteUbergraph_BP_WeatherSpecificParticles(int32 EntryPoint);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BP_WeatherSpecificParticles_C">();
	}
	static class ABP_WeatherSpecificParticles_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<ABP_WeatherSpecificParticles_C>();
	}
};
static_assert(alignof(ABP_WeatherSpecificParticles_C) == 0x000008, "Wrong alignment on ABP_WeatherSpecificParticles_C");
static_assert(sizeof(ABP_WeatherSpecificParticles_C) == 0x000288, "Wrong size on ABP_WeatherSpecificParticles_C");
static_assert(offsetof(ABP_WeatherSpecificParticles_C, UberGraphFrame) == 0x000220, "Member 'ABP_WeatherSpecificParticles_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(ABP_WeatherSpecificParticles_C, PointLight) == 0x000228, "Member 'ABP_WeatherSpecificParticles_C::PointLight' has a wrong offset!");
static_assert(offsetof(ABP_WeatherSpecificParticles_C, ParticleSystem) == 0x000230, "Member 'ABP_WeatherSpecificParticles_C::ParticleSystem' has a wrong offset!");
static_assert(offsetof(ABP_WeatherSpecificParticles_C, DefaultSceneRoot) == 0x000238, "Member 'ABP_WeatherSpecificParticles_C::DefaultSceneRoot' has a wrong offset!");
static_assert(offsetof(ABP_WeatherSpecificParticles_C, LightingScenario) == 0x000240, "Member 'ABP_WeatherSpecificParticles_C::LightingScenario' has a wrong offset!");
static_assert(offsetof(ABP_WeatherSpecificParticles_C, SoftVar_ParticleEffect) == 0x000248, "Member 'ABP_WeatherSpecificParticles_C::SoftVar_ParticleEffect' has a wrong offset!");
static_assert(offsetof(ABP_WeatherSpecificParticles_C, LightingToBeUsedIn) == 0x000270, "Member 'ABP_WeatherSpecificParticles_C::LightingToBeUsedIn' has a wrong offset!");
static_assert(offsetof(ABP_WeatherSpecificParticles_C, BoundToWeatherChange) == 0x000280, "Member 'ABP_WeatherSpecificParticles_C::BoundToWeatherChange' has a wrong offset!");
static_assert(offsetof(ABP_WeatherSpecificParticles_C, CurrentlyActive) == 0x000281, "Member 'ABP_WeatherSpecificParticles_C::CurrentlyActive' has a wrong offset!");

}

