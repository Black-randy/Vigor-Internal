#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_ElectricSparks

#include "Basic.hpp"

#include "CoreUObject_structs.hpp"
#include "Engine_structs.hpp"


namespace SDK::Params
{

// Function BP_ElectricSparks.BP_ElectricSparks_C.ExecuteUbergraph_BP_ElectricSparks
// 0x0058 (0x0058 - 0x0000)
struct BP_ElectricSparks_C_ExecuteUbergraph_BP_ElectricSparks final
{
public:
	int32                                         EntryPoint;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TDelegate<void()>                             K2Node_CreateDelegate_OutputDelegate;              // 0x0004(0x0010)(ZeroConstructor, NoDestructor)
	TDelegate<void(class FName EventName, float EmitterTime, const struct FVector& Location, const struct FVector& Velocity)> K2Node_CreateDelegate_OutputDelegate_1;            // 0x0014(0x0010)(ZeroConstructor, NoDestructor)
	float                                         CallFunc_RandomFloatInRange_ReturnValue;           // 0x0024(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FTimerHandle                           CallFunc_K2_SetTimerDelegate_ReturnValue;          // 0x0028(0x0008)(NoDestructor, HasGetValueTypeHash)
	class FName                                   K2Node_CustomEvent_EventName;                      // 0x0030(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_CustomEvent_EmitterTime;                    // 0x0038(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                K2Node_CustomEvent_Location;                       // 0x003C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                K2Node_CustomEvent_Velocity;                       // 0x0048(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_ElectricSparks_C_ExecuteUbergraph_BP_ElectricSparks) == 0x000008, "Wrong alignment on BP_ElectricSparks_C_ExecuteUbergraph_BP_ElectricSparks");
static_assert(sizeof(BP_ElectricSparks_C_ExecuteUbergraph_BP_ElectricSparks) == 0x000058, "Wrong size on BP_ElectricSparks_C_ExecuteUbergraph_BP_ElectricSparks");
static_assert(offsetof(BP_ElectricSparks_C_ExecuteUbergraph_BP_ElectricSparks, EntryPoint) == 0x000000, "Member 'BP_ElectricSparks_C_ExecuteUbergraph_BP_ElectricSparks::EntryPoint' has a wrong offset!");
static_assert(offsetof(BP_ElectricSparks_C_ExecuteUbergraph_BP_ElectricSparks, K2Node_CreateDelegate_OutputDelegate) == 0x000004, "Member 'BP_ElectricSparks_C_ExecuteUbergraph_BP_ElectricSparks::K2Node_CreateDelegate_OutputDelegate' has a wrong offset!");
static_assert(offsetof(BP_ElectricSparks_C_ExecuteUbergraph_BP_ElectricSparks, K2Node_CreateDelegate_OutputDelegate_1) == 0x000014, "Member 'BP_ElectricSparks_C_ExecuteUbergraph_BP_ElectricSparks::K2Node_CreateDelegate_OutputDelegate_1' has a wrong offset!");
static_assert(offsetof(BP_ElectricSparks_C_ExecuteUbergraph_BP_ElectricSparks, CallFunc_RandomFloatInRange_ReturnValue) == 0x000024, "Member 'BP_ElectricSparks_C_ExecuteUbergraph_BP_ElectricSparks::CallFunc_RandomFloatInRange_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_ElectricSparks_C_ExecuteUbergraph_BP_ElectricSparks, CallFunc_K2_SetTimerDelegate_ReturnValue) == 0x000028, "Member 'BP_ElectricSparks_C_ExecuteUbergraph_BP_ElectricSparks::CallFunc_K2_SetTimerDelegate_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_ElectricSparks_C_ExecuteUbergraph_BP_ElectricSparks, K2Node_CustomEvent_EventName) == 0x000030, "Member 'BP_ElectricSparks_C_ExecuteUbergraph_BP_ElectricSparks::K2Node_CustomEvent_EventName' has a wrong offset!");
static_assert(offsetof(BP_ElectricSparks_C_ExecuteUbergraph_BP_ElectricSparks, K2Node_CustomEvent_EmitterTime) == 0x000038, "Member 'BP_ElectricSparks_C_ExecuteUbergraph_BP_ElectricSparks::K2Node_CustomEvent_EmitterTime' has a wrong offset!");
static_assert(offsetof(BP_ElectricSparks_C_ExecuteUbergraph_BP_ElectricSparks, K2Node_CustomEvent_Location) == 0x00003C, "Member 'BP_ElectricSparks_C_ExecuteUbergraph_BP_ElectricSparks::K2Node_CustomEvent_Location' has a wrong offset!");
static_assert(offsetof(BP_ElectricSparks_C_ExecuteUbergraph_BP_ElectricSparks, K2Node_CustomEvent_Velocity) == 0x000048, "Member 'BP_ElectricSparks_C_ExecuteUbergraph_BP_ElectricSparks::K2Node_CustomEvent_Velocity' has a wrong offset!");

// Function BP_ElectricSparks.BP_ElectricSparks_C.OnSpark
// 0x0024 (0x0024 - 0x0000)
struct BP_ElectricSparks_C_OnSpark final
{
public:
	class FName                                   EventName;                                         // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         EmitterTime;                                       // 0x0008(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                Location;                                          // 0x000C(0x000C)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                Velocity;                                          // 0x0018(0x000C)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_ElectricSparks_C_OnSpark) == 0x000004, "Wrong alignment on BP_ElectricSparks_C_OnSpark");
static_assert(sizeof(BP_ElectricSparks_C_OnSpark) == 0x000024, "Wrong size on BP_ElectricSparks_C_OnSpark");
static_assert(offsetof(BP_ElectricSparks_C_OnSpark, EventName) == 0x000000, "Member 'BP_ElectricSparks_C_OnSpark::EventName' has a wrong offset!");
static_assert(offsetof(BP_ElectricSparks_C_OnSpark, EmitterTime) == 0x000008, "Member 'BP_ElectricSparks_C_OnSpark::EmitterTime' has a wrong offset!");
static_assert(offsetof(BP_ElectricSparks_C_OnSpark, Location) == 0x00000C, "Member 'BP_ElectricSparks_C_OnSpark::Location' has a wrong offset!");
static_assert(offsetof(BP_ElectricSparks_C_OnSpark, Velocity) == 0x000018, "Member 'BP_ElectricSparks_C_OnSpark::Velocity' has a wrong offset!");

}

