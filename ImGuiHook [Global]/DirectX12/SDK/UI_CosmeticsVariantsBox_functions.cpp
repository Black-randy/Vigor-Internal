#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: UI_CosmeticsVariantsBox

#include "Basic.hpp"

#include "UI_CosmeticsVariantsBox_classes.hpp"
#include "UI_CosmeticsVariantsBox_parameters.hpp"


namespace SDK
{

// Function UI_CosmeticsVariantsBox.UI_CosmeticsVariantsBox_C.ExecuteUbergraph_UI_CosmeticsVariantsBox
// (Final, UbergraphFunction)
// Parameters:
// int32                                   EntryPoint                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UUI_CosmeticsVariantsBox_C::ExecuteUbergraph_UI_CosmeticsVariantsBox(int32 EntryPoint)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UI_CosmeticsVariantsBox_C", "ExecuteUbergraph_UI_CosmeticsVariantsBox");

	Params::UI_CosmeticsVariantsBox_C_ExecuteUbergraph_UI_CosmeticsVariantsBox Parms{};

	Parms.EntryPoint = EntryPoint;

	UObject::ProcessEvent(Func, &Parms);
}


// Function UI_CosmeticsVariantsBox.UI_CosmeticsVariantsBox_C.PlayNoTicketsAnimation
// (BlueprintCallable, BlueprintEvent)

void UUI_CosmeticsVariantsBox_C::PlayNoTicketsAnimation()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UI_CosmeticsVariantsBox_C", "PlayNoTicketsAnimation");

	UObject::ProcessEvent(Func, nullptr);
}


// Function UI_CosmeticsVariantsBox.UI_CosmeticsVariantsBox_C.SetVariantsBoxVisibility
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    NewVisibility                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void UUI_CosmeticsVariantsBox_C::SetVariantsBoxVisibility(bool NewVisibility)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UI_CosmeticsVariantsBox_C", "SetVariantsBoxVisibility");

	Params::UI_CosmeticsVariantsBox_C_SetVariantsBoxVisibility Parms{};

	Parms.NewVisibility = NewVisibility;

	UObject::ProcessEvent(Func, &Parms);
}


// Function UI_CosmeticsVariantsBox.UI_CosmeticsVariantsBox_C.Fill Content
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// class UClass*                           BaseItem_0                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class FString                           OrangeDotPrefix                                        (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)
// TMap<class UClass*, struct FGameStoreSellingPointDetail>VariantItemsSellingPointInfo                           (BlueprintVisible, BlueprintReadOnly, Parm)
// class UUI_CosmeticsShop_C*              CosmeticsShop                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// TArray<class UClass*>                   VisibleVariants                                        (Parm, OutParm)

void UUI_CosmeticsVariantsBox_C::Fill_Content(class UClass* BaseItem_0, const class FString& OrangeDotPrefix, const TMap<class UClass*, struct FGameStoreSellingPointDetail>& VariantItemsSellingPointInfo, class UUI_CosmeticsShop_C* CosmeticsShop, TArray<class UClass*>* VisibleVariants)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UI_CosmeticsVariantsBox_C", "Fill Content");

	Params::UI_CosmeticsVariantsBox_C_Fill_Content Parms{};

	Parms.BaseItem_0 = BaseItem_0;
	Parms.OrangeDotPrefix = std::move(OrangeDotPrefix);
	Parms.VariantItemsSellingPointInfo = std::move(VariantItemsSellingPointInfo);
	Parms.CosmeticsShop = CosmeticsShop;

	UObject::ProcessEvent(Func, &Parms);

	if (VisibleVariants != nullptr)
		*VisibleVariants = std::move(Parms.VisibleVariants);
}


// Function UI_CosmeticsVariantsBox.UI_CosmeticsVariantsBox_C.SetFocusByIndex
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// int32                                   SlotIndex                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    IsCraftingPlan                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// ESellingPointType                       SellingPointType                                       (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    UpdateFocus                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// class UClass*                           OutFocusedVariant                                      (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class UClass*                           OutFocusedBaseItem                                     (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   OutSelectedIndex                                       (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UUI_CosmeticsVariantsBox_C::SetFocusByIndex(int32 SlotIndex, bool IsCraftingPlan, ESellingPointType SellingPointType, bool UpdateFocus, class UClass** OutFocusedVariant, class UClass** OutFocusedBaseItem, int32* OutSelectedIndex)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UI_CosmeticsVariantsBox_C", "SetFocusByIndex");

	Params::UI_CosmeticsVariantsBox_C_SetFocusByIndex Parms{};

	Parms.SlotIndex = SlotIndex;
	Parms.IsCraftingPlan = IsCraftingPlan;
	Parms.SellingPointType = SellingPointType;
	Parms.UpdateFocus = UpdateFocus;

	UObject::ProcessEvent(Func, &Parms);

	if (OutFocusedVariant != nullptr)
		*OutFocusedVariant = Parms.OutFocusedVariant;

	if (OutFocusedBaseItem != nullptr)
		*OutFocusedBaseItem = Parms.OutFocusedBaseItem;

	if (OutSelectedIndex != nullptr)
		*OutSelectedIndex = Parms.OutSelectedIndex;
}


// Function UI_CosmeticsVariantsBox.UI_CosmeticsVariantsBox_C.UpdateTics
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// int32                                   TickedIndex                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UUI_CosmeticsVariantsBox_C::UpdateTics(int32 TickedIndex)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UI_CosmeticsVariantsBox_C", "UpdateTics");

	Params::UI_CosmeticsVariantsBox_C_UpdateTics Parms{};

	Parms.TickedIndex = TickedIndex;

	UObject::ProcessEvent(Func, &Parms);
}


// Function UI_CosmeticsVariantsBox.UI_CosmeticsVariantsBox_C.ClearContent
// (Public, BlueprintCallable, BlueprintEvent)

void UUI_CosmeticsVariantsBox_C::ClearContent()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UI_CosmeticsVariantsBox_C", "ClearContent");

	UObject::ProcessEvent(Func, nullptr);
}


// Function UI_CosmeticsVariantsBox.UI_CosmeticsVariantsBox_C.GetIndexOfVariant
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// class UClass*                           Variant                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   Index_0                                                (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    bFound                                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void UUI_CosmeticsVariantsBox_C::GetIndexOfVariant(class UClass* Variant, int32* Index_0, bool* bFound)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UI_CosmeticsVariantsBox_C", "GetIndexOfVariant");

	Params::UI_CosmeticsVariantsBox_C_GetIndexOfVariant Parms{};

	Parms.Variant = Variant;

	UObject::ProcessEvent(Func, &Parms);

	if (Index_0 != nullptr)
		*Index_0 = Parms.Index_0;

	if (bFound != nullptr)
		*bFound = Parms.bFound;
}


// Function UI_CosmeticsVariantsBox.UI_CosmeticsVariantsBox_C.SetCosmeticsRoot
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class UUI_CosmeticsShop_C*              CosmeticsRoot                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UUI_CosmeticsVariantsBox_C::SetCosmeticsRoot(class UUI_CosmeticsShop_C* CosmeticsRoot)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UI_CosmeticsVariantsBox_C", "SetCosmeticsRoot");

	Params::UI_CosmeticsVariantsBox_C_SetCosmeticsRoot Parms{};

	Parms.CosmeticsRoot = CosmeticsRoot;

	UObject::ProcessEvent(Func, &Parms);
}


// Function UI_CosmeticsVariantsBox.UI_CosmeticsVariantsBox_C.SetCurrentSkinVariant
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class UUI_Shop_VariantSlot_C*           TargetVariant                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UUI_CosmeticsVariantsBox_C::SetCurrentSkinVariant(class UUI_Shop_VariantSlot_C* TargetVariant)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UI_CosmeticsVariantsBox_C", "SetCurrentSkinVariant");

	Params::UI_CosmeticsVariantsBox_C_SetCurrentSkinVariant Parms{};

	Parms.TargetVariant = TargetVariant;

	UObject::ProcessEvent(Func, &Parms);
}

}

