#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: UI_ItemInfo_Ammo

#include "Basic.hpp"

#include "Flame_structs.hpp"
#include "Engine_structs.hpp"


namespace SDK::Params
{

// Function UI_ItemInfo_Ammo.UI_ItemInfo_Ammo_C.ExecuteUbergraph_UI_ItemInfo_Ammo
// 0x0050 (0x0050 - 0x0000)
struct UI_ItemInfo_Ammo_C_ExecuteUbergraph_UI_ItemInfo_Ammo final
{
public:
	int32                                         EntryPoint;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UClass*                                 K2Node_CustomEvent_AmmoClass;                      // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValidClass_ReturnValue;                 // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UClass*                                 K2Node_ClassDynamicCast_AsAmmo_Item;               // 0x0018(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_ClassDynamicCast_bSuccess;                  // 0x0020(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_21[0x7];                                       // 0x0021(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class UClass*>                         CallFunc_FindCompatibleWeapons_CompatibleWpnClasses; // 0x0028(0x0010)(ReferenceParm)
	class FText                                   CallFunc_MakeCompatibleWeaponsList_WeaponListOutput; // 0x0038(0x0018)()
};
static_assert(alignof(UI_ItemInfo_Ammo_C_ExecuteUbergraph_UI_ItemInfo_Ammo) == 0x000008, "Wrong alignment on UI_ItemInfo_Ammo_C_ExecuteUbergraph_UI_ItemInfo_Ammo");
static_assert(sizeof(UI_ItemInfo_Ammo_C_ExecuteUbergraph_UI_ItemInfo_Ammo) == 0x000050, "Wrong size on UI_ItemInfo_Ammo_C_ExecuteUbergraph_UI_ItemInfo_Ammo");
static_assert(offsetof(UI_ItemInfo_Ammo_C_ExecuteUbergraph_UI_ItemInfo_Ammo, EntryPoint) == 0x000000, "Member 'UI_ItemInfo_Ammo_C_ExecuteUbergraph_UI_ItemInfo_Ammo::EntryPoint' has a wrong offset!");
static_assert(offsetof(UI_ItemInfo_Ammo_C_ExecuteUbergraph_UI_ItemInfo_Ammo, K2Node_CustomEvent_AmmoClass) == 0x000008, "Member 'UI_ItemInfo_Ammo_C_ExecuteUbergraph_UI_ItemInfo_Ammo::K2Node_CustomEvent_AmmoClass' has a wrong offset!");
static_assert(offsetof(UI_ItemInfo_Ammo_C_ExecuteUbergraph_UI_ItemInfo_Ammo, CallFunc_IsValidClass_ReturnValue) == 0x000010, "Member 'UI_ItemInfo_Ammo_C_ExecuteUbergraph_UI_ItemInfo_Ammo::CallFunc_IsValidClass_ReturnValue' has a wrong offset!");
static_assert(offsetof(UI_ItemInfo_Ammo_C_ExecuteUbergraph_UI_ItemInfo_Ammo, K2Node_ClassDynamicCast_AsAmmo_Item) == 0x000018, "Member 'UI_ItemInfo_Ammo_C_ExecuteUbergraph_UI_ItemInfo_Ammo::K2Node_ClassDynamicCast_AsAmmo_Item' has a wrong offset!");
static_assert(offsetof(UI_ItemInfo_Ammo_C_ExecuteUbergraph_UI_ItemInfo_Ammo, K2Node_ClassDynamicCast_bSuccess) == 0x000020, "Member 'UI_ItemInfo_Ammo_C_ExecuteUbergraph_UI_ItemInfo_Ammo::K2Node_ClassDynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(UI_ItemInfo_Ammo_C_ExecuteUbergraph_UI_ItemInfo_Ammo, CallFunc_FindCompatibleWeapons_CompatibleWpnClasses) == 0x000028, "Member 'UI_ItemInfo_Ammo_C_ExecuteUbergraph_UI_ItemInfo_Ammo::CallFunc_FindCompatibleWeapons_CompatibleWpnClasses' has a wrong offset!");
static_assert(offsetof(UI_ItemInfo_Ammo_C_ExecuteUbergraph_UI_ItemInfo_Ammo, CallFunc_MakeCompatibleWeaponsList_WeaponListOutput) == 0x000038, "Member 'UI_ItemInfo_Ammo_C_ExecuteUbergraph_UI_ItemInfo_Ammo::CallFunc_MakeCompatibleWeaponsList_WeaponListOutput' has a wrong offset!");

// Function UI_ItemInfo_Ammo.UI_ItemInfo_Ammo_C.Update
// 0x0008 (0x0008 - 0x0000)
struct UI_ItemInfo_Ammo_C_Update final
{
public:
	class UClass*                                 AmmoClass;                                         // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(UI_ItemInfo_Ammo_C_Update) == 0x000008, "Wrong alignment on UI_ItemInfo_Ammo_C_Update");
static_assert(sizeof(UI_ItemInfo_Ammo_C_Update) == 0x000008, "Wrong size on UI_ItemInfo_Ammo_C_Update");
static_assert(offsetof(UI_ItemInfo_Ammo_C_Update, AmmoClass) == 0x000000, "Member 'UI_ItemInfo_Ammo_C_Update::AmmoClass' has a wrong offset!");

// Function UI_ItemInfo_Ammo.UI_ItemInfo_Ammo_C.MakeCompatibleWeaponsList
// 0x0210 (0x0210 - 0x0000)
struct UI_ItemInfo_Ammo_C_MakeCompatibleWeaponsList final
{
public:
	TArray<class UClass*>                         CompatibleWeapons;                                 // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
	class FText                                   WeaponListOutput;                                  // 0x0010(0x0018)(Parm, OutParm)
	class FText                                   WeaponList;                                        // 0x0028(0x0018)(Edit, BlueprintVisible)
	int32                                         Temp_int_Array_Index_Variable;                     // 0x0040(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_LastIndex_ReturnValue;              // 0x0044(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UClass*                                 CallFunc_Array_Get_Item;                           // 0x0048(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_IntInt_ReturnValue;            // 0x0050(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_51[0x7];                                       // 0x0051(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AWeapon*                                CallFunc_GetClassDefaultObject_ReturnValue;        // 0x0058(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Not_PreBool_ReturnValue;                  // 0x0060(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_61[0x7];                                       // 0x0061(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   CallFunc_GetItemName_ReturnValue;                  // 0x0068(0x0018)()
	struct FFormatArgumentData                    K2Node_MakeStruct_FormatArgumentData;              // 0x0080(0x0040)(HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x00C0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x00C4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FFormatArgumentData                    K2Node_MakeStruct_FormatArgumentData_1;            // 0x00C8(0x0040)(HasGetValueTypeHash)
	TArray<struct FFormatArgumentData>            K2Node_MakeArray_Array;                            // 0x0108(0x0010)(ReferenceParm)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x0118(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_119[0x7];                                      // 0x0119(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   CallFunc_Format_ReturnValue;                       // 0x0120(0x0018)()
	struct FFormatArgumentData                    K2Node_MakeStruct_FormatArgumentData_2;            // 0x0138(0x0040)(HasGetValueTypeHash)
	struct FFormatArgumentData                    K2Node_MakeStruct_FormatArgumentData_3;            // 0x0178(0x0040)(HasGetValueTypeHash)
	TArray<struct FFormatArgumentData>            K2Node_MakeArray_Array_1;                          // 0x01B8(0x0010)(ReferenceParm)
	TArray<struct FFormatArgumentData>            K2Node_MakeArray_Array_2;                          // 0x01C8(0x0010)(ReferenceParm)
	class FText                                   CallFunc_Format_ReturnValue_1;                     // 0x01D8(0x0018)()
	class FText                                   CallFunc_Format_ReturnValue_2;                     // 0x01F0(0x0018)()
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x0208(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(UI_ItemInfo_Ammo_C_MakeCompatibleWeaponsList) == 0x000008, "Wrong alignment on UI_ItemInfo_Ammo_C_MakeCompatibleWeaponsList");
static_assert(sizeof(UI_ItemInfo_Ammo_C_MakeCompatibleWeaponsList) == 0x000210, "Wrong size on UI_ItemInfo_Ammo_C_MakeCompatibleWeaponsList");
static_assert(offsetof(UI_ItemInfo_Ammo_C_MakeCompatibleWeaponsList, CompatibleWeapons) == 0x000000, "Member 'UI_ItemInfo_Ammo_C_MakeCompatibleWeaponsList::CompatibleWeapons' has a wrong offset!");
static_assert(offsetof(UI_ItemInfo_Ammo_C_MakeCompatibleWeaponsList, WeaponListOutput) == 0x000010, "Member 'UI_ItemInfo_Ammo_C_MakeCompatibleWeaponsList::WeaponListOutput' has a wrong offset!");
static_assert(offsetof(UI_ItemInfo_Ammo_C_MakeCompatibleWeaponsList, WeaponList) == 0x000028, "Member 'UI_ItemInfo_Ammo_C_MakeCompatibleWeaponsList::WeaponList' has a wrong offset!");
static_assert(offsetof(UI_ItemInfo_Ammo_C_MakeCompatibleWeaponsList, Temp_int_Array_Index_Variable) == 0x000040, "Member 'UI_ItemInfo_Ammo_C_MakeCompatibleWeaponsList::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(UI_ItemInfo_Ammo_C_MakeCompatibleWeaponsList, CallFunc_Array_LastIndex_ReturnValue) == 0x000044, "Member 'UI_ItemInfo_Ammo_C_MakeCompatibleWeaponsList::CallFunc_Array_LastIndex_ReturnValue' has a wrong offset!");
static_assert(offsetof(UI_ItemInfo_Ammo_C_MakeCompatibleWeaponsList, CallFunc_Array_Get_Item) == 0x000048, "Member 'UI_ItemInfo_Ammo_C_MakeCompatibleWeaponsList::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(UI_ItemInfo_Ammo_C_MakeCompatibleWeaponsList, CallFunc_EqualEqual_IntInt_ReturnValue) == 0x000050, "Member 'UI_ItemInfo_Ammo_C_MakeCompatibleWeaponsList::CallFunc_EqualEqual_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(UI_ItemInfo_Ammo_C_MakeCompatibleWeaponsList, CallFunc_GetClassDefaultObject_ReturnValue) == 0x000058, "Member 'UI_ItemInfo_Ammo_C_MakeCompatibleWeaponsList::CallFunc_GetClassDefaultObject_ReturnValue' has a wrong offset!");
static_assert(offsetof(UI_ItemInfo_Ammo_C_MakeCompatibleWeaponsList, CallFunc_Not_PreBool_ReturnValue) == 0x000060, "Member 'UI_ItemInfo_Ammo_C_MakeCompatibleWeaponsList::CallFunc_Not_PreBool_ReturnValue' has a wrong offset!");
static_assert(offsetof(UI_ItemInfo_Ammo_C_MakeCompatibleWeaponsList, CallFunc_GetItemName_ReturnValue) == 0x000068, "Member 'UI_ItemInfo_Ammo_C_MakeCompatibleWeaponsList::CallFunc_GetItemName_ReturnValue' has a wrong offset!");
static_assert(offsetof(UI_ItemInfo_Ammo_C_MakeCompatibleWeaponsList, K2Node_MakeStruct_FormatArgumentData) == 0x000080, "Member 'UI_ItemInfo_Ammo_C_MakeCompatibleWeaponsList::K2Node_MakeStruct_FormatArgumentData' has a wrong offset!");
static_assert(offsetof(UI_ItemInfo_Ammo_C_MakeCompatibleWeaponsList, CallFunc_Array_Length_ReturnValue) == 0x0000C0, "Member 'UI_ItemInfo_Ammo_C_MakeCompatibleWeaponsList::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(UI_ItemInfo_Ammo_C_MakeCompatibleWeaponsList, Temp_int_Loop_Counter_Variable) == 0x0000C4, "Member 'UI_ItemInfo_Ammo_C_MakeCompatibleWeaponsList::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(UI_ItemInfo_Ammo_C_MakeCompatibleWeaponsList, K2Node_MakeStruct_FormatArgumentData_1) == 0x0000C8, "Member 'UI_ItemInfo_Ammo_C_MakeCompatibleWeaponsList::K2Node_MakeStruct_FormatArgumentData_1' has a wrong offset!");
static_assert(offsetof(UI_ItemInfo_Ammo_C_MakeCompatibleWeaponsList, K2Node_MakeArray_Array) == 0x000108, "Member 'UI_ItemInfo_Ammo_C_MakeCompatibleWeaponsList::K2Node_MakeArray_Array' has a wrong offset!");
static_assert(offsetof(UI_ItemInfo_Ammo_C_MakeCompatibleWeaponsList, CallFunc_Less_IntInt_ReturnValue) == 0x000118, "Member 'UI_ItemInfo_Ammo_C_MakeCompatibleWeaponsList::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(UI_ItemInfo_Ammo_C_MakeCompatibleWeaponsList, CallFunc_Format_ReturnValue) == 0x000120, "Member 'UI_ItemInfo_Ammo_C_MakeCompatibleWeaponsList::CallFunc_Format_ReturnValue' has a wrong offset!");
static_assert(offsetof(UI_ItemInfo_Ammo_C_MakeCompatibleWeaponsList, K2Node_MakeStruct_FormatArgumentData_2) == 0x000138, "Member 'UI_ItemInfo_Ammo_C_MakeCompatibleWeaponsList::K2Node_MakeStruct_FormatArgumentData_2' has a wrong offset!");
static_assert(offsetof(UI_ItemInfo_Ammo_C_MakeCompatibleWeaponsList, K2Node_MakeStruct_FormatArgumentData_3) == 0x000178, "Member 'UI_ItemInfo_Ammo_C_MakeCompatibleWeaponsList::K2Node_MakeStruct_FormatArgumentData_3' has a wrong offset!");
static_assert(offsetof(UI_ItemInfo_Ammo_C_MakeCompatibleWeaponsList, K2Node_MakeArray_Array_1) == 0x0001B8, "Member 'UI_ItemInfo_Ammo_C_MakeCompatibleWeaponsList::K2Node_MakeArray_Array_1' has a wrong offset!");
static_assert(offsetof(UI_ItemInfo_Ammo_C_MakeCompatibleWeaponsList, K2Node_MakeArray_Array_2) == 0x0001C8, "Member 'UI_ItemInfo_Ammo_C_MakeCompatibleWeaponsList::K2Node_MakeArray_Array_2' has a wrong offset!");
static_assert(offsetof(UI_ItemInfo_Ammo_C_MakeCompatibleWeaponsList, CallFunc_Format_ReturnValue_1) == 0x0001D8, "Member 'UI_ItemInfo_Ammo_C_MakeCompatibleWeaponsList::CallFunc_Format_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(UI_ItemInfo_Ammo_C_MakeCompatibleWeaponsList, CallFunc_Format_ReturnValue_2) == 0x0001F0, "Member 'UI_ItemInfo_Ammo_C_MakeCompatibleWeaponsList::CallFunc_Format_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(UI_ItemInfo_Ammo_C_MakeCompatibleWeaponsList, CallFunc_Add_IntInt_ReturnValue) == 0x000208, "Member 'UI_ItemInfo_Ammo_C_MakeCompatibleWeaponsList::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");

// Function UI_ItemInfo_Ammo.UI_ItemInfo_Ammo_C.FindCompatibleWeapons
// 0x0498 (0x0498 - 0x0000)
struct UI_ItemInfo_Ammo_C_FindCompatibleWeapons final
{
public:
	class UClass*                                 AmmoItem;                                          // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<class UClass*>                         CompatibleWpnClasses;                              // 0x0008(0x0010)(Parm, OutParm)
	TArray<class UClass*>                         CompatibleWeapons;                                 // 0x0018(0x0010)(Edit, BlueprintVisible)
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x0028(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x002C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Array_Index_Variable;                     // 0x0030(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_34[0x4];                                       // 0x0034(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UDataProvider*                          CallFunc_GetDataProvider_ReturnValue;              // 0x0038(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UCloudDataTables*                       CallFunc_GetCloudTables_ReturnValue;               // 0x0040(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UDataTable*                             CallFunc_FindTableByName_ReturnValue;              // 0x0048(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<class FName>                           CallFunc_GetDataTableRowNames_OutRowNames;         // 0x0050(0x0010)(ReferenceParm)
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x0060(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   CallFunc_Array_Get_Item;                           // 0x0064(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x006C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_6D[0x3];                                       // 0x006D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FFirearmWeaponConfiguration            CallFunc_GetDataTableRowFromName_OutRow;           // 0x0070(0x0418)()
	bool                                          CallFunc_GetDataTableRowFromName_ReturnValue;      // 0x0488(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_489[0x3];                                      // 0x0489(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Array_AddUnique_ReturnValue;              // 0x048C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_AreWeaponAndAmmoCompatible_ReturnValue;   // 0x0490(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(UI_ItemInfo_Ammo_C_FindCompatibleWeapons) == 0x000008, "Wrong alignment on UI_ItemInfo_Ammo_C_FindCompatibleWeapons");
static_assert(sizeof(UI_ItemInfo_Ammo_C_FindCompatibleWeapons) == 0x000498, "Wrong size on UI_ItemInfo_Ammo_C_FindCompatibleWeapons");
static_assert(offsetof(UI_ItemInfo_Ammo_C_FindCompatibleWeapons, AmmoItem) == 0x000000, "Member 'UI_ItemInfo_Ammo_C_FindCompatibleWeapons::AmmoItem' has a wrong offset!");
static_assert(offsetof(UI_ItemInfo_Ammo_C_FindCompatibleWeapons, CompatibleWpnClasses) == 0x000008, "Member 'UI_ItemInfo_Ammo_C_FindCompatibleWeapons::CompatibleWpnClasses' has a wrong offset!");
static_assert(offsetof(UI_ItemInfo_Ammo_C_FindCompatibleWeapons, CompatibleWeapons) == 0x000018, "Member 'UI_ItemInfo_Ammo_C_FindCompatibleWeapons::CompatibleWeapons' has a wrong offset!");
static_assert(offsetof(UI_ItemInfo_Ammo_C_FindCompatibleWeapons, Temp_int_Loop_Counter_Variable) == 0x000028, "Member 'UI_ItemInfo_Ammo_C_FindCompatibleWeapons::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(UI_ItemInfo_Ammo_C_FindCompatibleWeapons, CallFunc_Add_IntInt_ReturnValue) == 0x00002C, "Member 'UI_ItemInfo_Ammo_C_FindCompatibleWeapons::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(UI_ItemInfo_Ammo_C_FindCompatibleWeapons, Temp_int_Array_Index_Variable) == 0x000030, "Member 'UI_ItemInfo_Ammo_C_FindCompatibleWeapons::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(UI_ItemInfo_Ammo_C_FindCompatibleWeapons, CallFunc_GetDataProvider_ReturnValue) == 0x000038, "Member 'UI_ItemInfo_Ammo_C_FindCompatibleWeapons::CallFunc_GetDataProvider_ReturnValue' has a wrong offset!");
static_assert(offsetof(UI_ItemInfo_Ammo_C_FindCompatibleWeapons, CallFunc_GetCloudTables_ReturnValue) == 0x000040, "Member 'UI_ItemInfo_Ammo_C_FindCompatibleWeapons::CallFunc_GetCloudTables_ReturnValue' has a wrong offset!");
static_assert(offsetof(UI_ItemInfo_Ammo_C_FindCompatibleWeapons, CallFunc_FindTableByName_ReturnValue) == 0x000048, "Member 'UI_ItemInfo_Ammo_C_FindCompatibleWeapons::CallFunc_FindTableByName_ReturnValue' has a wrong offset!");
static_assert(offsetof(UI_ItemInfo_Ammo_C_FindCompatibleWeapons, CallFunc_GetDataTableRowNames_OutRowNames) == 0x000050, "Member 'UI_ItemInfo_Ammo_C_FindCompatibleWeapons::CallFunc_GetDataTableRowNames_OutRowNames' has a wrong offset!");
static_assert(offsetof(UI_ItemInfo_Ammo_C_FindCompatibleWeapons, CallFunc_Array_Length_ReturnValue) == 0x000060, "Member 'UI_ItemInfo_Ammo_C_FindCompatibleWeapons::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(UI_ItemInfo_Ammo_C_FindCompatibleWeapons, CallFunc_Array_Get_Item) == 0x000064, "Member 'UI_ItemInfo_Ammo_C_FindCompatibleWeapons::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(UI_ItemInfo_Ammo_C_FindCompatibleWeapons, CallFunc_Less_IntInt_ReturnValue) == 0x00006C, "Member 'UI_ItemInfo_Ammo_C_FindCompatibleWeapons::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(UI_ItemInfo_Ammo_C_FindCompatibleWeapons, CallFunc_GetDataTableRowFromName_OutRow) == 0x000070, "Member 'UI_ItemInfo_Ammo_C_FindCompatibleWeapons::CallFunc_GetDataTableRowFromName_OutRow' has a wrong offset!");
static_assert(offsetof(UI_ItemInfo_Ammo_C_FindCompatibleWeapons, CallFunc_GetDataTableRowFromName_ReturnValue) == 0x000488, "Member 'UI_ItemInfo_Ammo_C_FindCompatibleWeapons::CallFunc_GetDataTableRowFromName_ReturnValue' has a wrong offset!");
static_assert(offsetof(UI_ItemInfo_Ammo_C_FindCompatibleWeapons, CallFunc_Array_AddUnique_ReturnValue) == 0x00048C, "Member 'UI_ItemInfo_Ammo_C_FindCompatibleWeapons::CallFunc_Array_AddUnique_ReturnValue' has a wrong offset!");
static_assert(offsetof(UI_ItemInfo_Ammo_C_FindCompatibleWeapons, CallFunc_AreWeaponAndAmmoCompatible_ReturnValue) == 0x000490, "Member 'UI_ItemInfo_Ammo_C_FindCompatibleWeapons::CallFunc_AreWeaponAndAmmoCompatible_ReturnValue' has a wrong offset!");

// Function UI_ItemInfo_Ammo.UI_ItemInfo_Ammo_C.SetTheCompatibleWeaponList
// 0x01A8 (0x01A8 - 0x0000)
struct UI_ItemInfo_Ammo_C_SetTheCompatibleWeaponList final
{
public:
	class FText                                   CompatibleWeaponList;                              // 0x0000(0x0018)(BlueprintVisible, BlueprintReadOnly, Parm)
	struct FFormatArgumentData                    K2Node_MakeStruct_FormatArgumentData;              // 0x0018(0x0040)(HasGetValueTypeHash)
	bool                                          CallFunc_TextIsEmpty_ReturnValue;                  // 0x0058(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_59[0x7];                                       // 0x0059(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   CallFunc_MakeLiteralText_ReturnValue;              // 0x0060(0x0018)()
	bool                                          CallFunc_Not_PreBool_ReturnValue;                  // 0x0078(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_79[0x7];                                       // 0x0079(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FFormatArgumentData                    K2Node_MakeStruct_FormatArgumentData_1;            // 0x0080(0x0040)(HasGetValueTypeHash)
	TArray<struct FFormatArgumentData>            K2Node_MakeArray_Array;                            // 0x00C0(0x0010)(ReferenceParm)
	struct FFormatArgumentData                    K2Node_MakeStruct_FormatArgumentData_2;            // 0x00D0(0x0040)(HasGetValueTypeHash)
	class FText                                   CallFunc_Format_ReturnValue;                       // 0x0110(0x0018)()
	class FText                                   CallFunc_MakeLiteralText_ReturnValue_1;            // 0x0128(0x0018)()
	struct FFormatArgumentData                    K2Node_MakeStruct_FormatArgumentData_3;            // 0x0140(0x0040)(HasGetValueTypeHash)
	TArray<struct FFormatArgumentData>            K2Node_MakeArray_Array_1;                          // 0x0180(0x0010)(ReferenceParm)
	class FText                                   CallFunc_Format_ReturnValue_1;                     // 0x0190(0x0018)()
};
static_assert(alignof(UI_ItemInfo_Ammo_C_SetTheCompatibleWeaponList) == 0x000008, "Wrong alignment on UI_ItemInfo_Ammo_C_SetTheCompatibleWeaponList");
static_assert(sizeof(UI_ItemInfo_Ammo_C_SetTheCompatibleWeaponList) == 0x0001A8, "Wrong size on UI_ItemInfo_Ammo_C_SetTheCompatibleWeaponList");
static_assert(offsetof(UI_ItemInfo_Ammo_C_SetTheCompatibleWeaponList, CompatibleWeaponList) == 0x000000, "Member 'UI_ItemInfo_Ammo_C_SetTheCompatibleWeaponList::CompatibleWeaponList' has a wrong offset!");
static_assert(offsetof(UI_ItemInfo_Ammo_C_SetTheCompatibleWeaponList, K2Node_MakeStruct_FormatArgumentData) == 0x000018, "Member 'UI_ItemInfo_Ammo_C_SetTheCompatibleWeaponList::K2Node_MakeStruct_FormatArgumentData' has a wrong offset!");
static_assert(offsetof(UI_ItemInfo_Ammo_C_SetTheCompatibleWeaponList, CallFunc_TextIsEmpty_ReturnValue) == 0x000058, "Member 'UI_ItemInfo_Ammo_C_SetTheCompatibleWeaponList::CallFunc_TextIsEmpty_ReturnValue' has a wrong offset!");
static_assert(offsetof(UI_ItemInfo_Ammo_C_SetTheCompatibleWeaponList, CallFunc_MakeLiteralText_ReturnValue) == 0x000060, "Member 'UI_ItemInfo_Ammo_C_SetTheCompatibleWeaponList::CallFunc_MakeLiteralText_ReturnValue' has a wrong offset!");
static_assert(offsetof(UI_ItemInfo_Ammo_C_SetTheCompatibleWeaponList, CallFunc_Not_PreBool_ReturnValue) == 0x000078, "Member 'UI_ItemInfo_Ammo_C_SetTheCompatibleWeaponList::CallFunc_Not_PreBool_ReturnValue' has a wrong offset!");
static_assert(offsetof(UI_ItemInfo_Ammo_C_SetTheCompatibleWeaponList, K2Node_MakeStruct_FormatArgumentData_1) == 0x000080, "Member 'UI_ItemInfo_Ammo_C_SetTheCompatibleWeaponList::K2Node_MakeStruct_FormatArgumentData_1' has a wrong offset!");
static_assert(offsetof(UI_ItemInfo_Ammo_C_SetTheCompatibleWeaponList, K2Node_MakeArray_Array) == 0x0000C0, "Member 'UI_ItemInfo_Ammo_C_SetTheCompatibleWeaponList::K2Node_MakeArray_Array' has a wrong offset!");
static_assert(offsetof(UI_ItemInfo_Ammo_C_SetTheCompatibleWeaponList, K2Node_MakeStruct_FormatArgumentData_2) == 0x0000D0, "Member 'UI_ItemInfo_Ammo_C_SetTheCompatibleWeaponList::K2Node_MakeStruct_FormatArgumentData_2' has a wrong offset!");
static_assert(offsetof(UI_ItemInfo_Ammo_C_SetTheCompatibleWeaponList, CallFunc_Format_ReturnValue) == 0x000110, "Member 'UI_ItemInfo_Ammo_C_SetTheCompatibleWeaponList::CallFunc_Format_ReturnValue' has a wrong offset!");
static_assert(offsetof(UI_ItemInfo_Ammo_C_SetTheCompatibleWeaponList, CallFunc_MakeLiteralText_ReturnValue_1) == 0x000128, "Member 'UI_ItemInfo_Ammo_C_SetTheCompatibleWeaponList::CallFunc_MakeLiteralText_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(UI_ItemInfo_Ammo_C_SetTheCompatibleWeaponList, K2Node_MakeStruct_FormatArgumentData_3) == 0x000140, "Member 'UI_ItemInfo_Ammo_C_SetTheCompatibleWeaponList::K2Node_MakeStruct_FormatArgumentData_3' has a wrong offset!");
static_assert(offsetof(UI_ItemInfo_Ammo_C_SetTheCompatibleWeaponList, K2Node_MakeArray_Array_1) == 0x000180, "Member 'UI_ItemInfo_Ammo_C_SetTheCompatibleWeaponList::K2Node_MakeArray_Array_1' has a wrong offset!");
static_assert(offsetof(UI_ItemInfo_Ammo_C_SetTheCompatibleWeaponList, CallFunc_Format_ReturnValue_1) == 0x000190, "Member 'UI_ItemInfo_Ammo_C_SetTheCompatibleWeaponList::CallFunc_Format_ReturnValue_1' has a wrong offset!");

}

