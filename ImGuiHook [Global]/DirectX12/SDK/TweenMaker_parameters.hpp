#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: TweenMaker

#include "Basic.hpp"

#include "CoreUObject_structs.hpp"
#include "TweenMaker_structs.hpp"
#include "Engine_structs.hpp"


namespace SDK::Params
{

// Function TweenMaker.BaseTween.AppendTweenActorFollowSpline
// 0x0038 (0x0038 - 0x0000)
struct BaseTween_AppendTweenActorFollowSpline final
{
public:
	class AActor*                                 TweenTarget;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USplineComponent*                       Spline;                                            // 0x0008(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Duration;                                          // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ApplyRotation;                                     // 0x0014(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ApplyScale;                                        // 0x0015(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          UseConstantSpeed;                                  // 0x0016(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETweenEaseType                                EaseType;                                          // 0x0017(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          DeleteTweenOnHit;                                  // 0x0018(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          DeleteTweenOnOverlap;                              // 0x0019(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1A[0x2];                                       // 0x001A(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         NumLoops;                                          // 0x001C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETweenLoopType                                LoopType;                                          // 0x0020(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_21[0x3];                                       // 0x0021(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Delay;                                             // 0x0024(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TimeScale;                                         // 0x0028(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          TweenWhileGameIsPaused;                            // 0x002C(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2D[0x3];                                       // 0x002D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UTweenFloat*                            ReturnValue;                                       // 0x0030(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BaseTween_AppendTweenActorFollowSpline) == 0x000008, "Wrong alignment on BaseTween_AppendTweenActorFollowSpline");
static_assert(sizeof(BaseTween_AppendTweenActorFollowSpline) == 0x000038, "Wrong size on BaseTween_AppendTweenActorFollowSpline");
static_assert(offsetof(BaseTween_AppendTweenActorFollowSpline, TweenTarget) == 0x000000, "Member 'BaseTween_AppendTweenActorFollowSpline::TweenTarget' has a wrong offset!");
static_assert(offsetof(BaseTween_AppendTweenActorFollowSpline, Spline) == 0x000008, "Member 'BaseTween_AppendTweenActorFollowSpline::Spline' has a wrong offset!");
static_assert(offsetof(BaseTween_AppendTweenActorFollowSpline, Duration) == 0x000010, "Member 'BaseTween_AppendTweenActorFollowSpline::Duration' has a wrong offset!");
static_assert(offsetof(BaseTween_AppendTweenActorFollowSpline, ApplyRotation) == 0x000014, "Member 'BaseTween_AppendTweenActorFollowSpline::ApplyRotation' has a wrong offset!");
static_assert(offsetof(BaseTween_AppendTweenActorFollowSpline, ApplyScale) == 0x000015, "Member 'BaseTween_AppendTweenActorFollowSpline::ApplyScale' has a wrong offset!");
static_assert(offsetof(BaseTween_AppendTweenActorFollowSpline, UseConstantSpeed) == 0x000016, "Member 'BaseTween_AppendTweenActorFollowSpline::UseConstantSpeed' has a wrong offset!");
static_assert(offsetof(BaseTween_AppendTweenActorFollowSpline, EaseType) == 0x000017, "Member 'BaseTween_AppendTweenActorFollowSpline::EaseType' has a wrong offset!");
static_assert(offsetof(BaseTween_AppendTweenActorFollowSpline, DeleteTweenOnHit) == 0x000018, "Member 'BaseTween_AppendTweenActorFollowSpline::DeleteTweenOnHit' has a wrong offset!");
static_assert(offsetof(BaseTween_AppendTweenActorFollowSpline, DeleteTweenOnOverlap) == 0x000019, "Member 'BaseTween_AppendTweenActorFollowSpline::DeleteTweenOnOverlap' has a wrong offset!");
static_assert(offsetof(BaseTween_AppendTweenActorFollowSpline, NumLoops) == 0x00001C, "Member 'BaseTween_AppendTweenActorFollowSpline::NumLoops' has a wrong offset!");
static_assert(offsetof(BaseTween_AppendTweenActorFollowSpline, LoopType) == 0x000020, "Member 'BaseTween_AppendTweenActorFollowSpline::LoopType' has a wrong offset!");
static_assert(offsetof(BaseTween_AppendTweenActorFollowSpline, Delay) == 0x000024, "Member 'BaseTween_AppendTweenActorFollowSpline::Delay' has a wrong offset!");
static_assert(offsetof(BaseTween_AppendTweenActorFollowSpline, TimeScale) == 0x000028, "Member 'BaseTween_AppendTweenActorFollowSpline::TimeScale' has a wrong offset!");
static_assert(offsetof(BaseTween_AppendTweenActorFollowSpline, TweenWhileGameIsPaused) == 0x00002C, "Member 'BaseTween_AppendTweenActorFollowSpline::TweenWhileGameIsPaused' has a wrong offset!");
static_assert(offsetof(BaseTween_AppendTweenActorFollowSpline, ReturnValue) == 0x000030, "Member 'BaseTween_AppendTweenActorFollowSpline::ReturnValue' has a wrong offset!");

// Function TweenMaker.BaseTween.AppendTweenCustomFloat
// 0x0038 (0x0038 - 0x0000)
struct BaseTween_AppendTweenCustomFloat final
{
public:
	class UObject*                                TweenTarget;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         From;                                              // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         To;                                                // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Duration;                                          // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETweenEaseType                                EaseType;                                          // 0x0014(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_15[0x3];                                       // 0x0015(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         NumLoops;                                          // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETweenLoopType                                LoopType;                                          // 0x001C(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1D[0x3];                                       // 0x001D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Delay;                                             // 0x0020(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TimeScale;                                         // 0x0024(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          TweenWhileGameIsPaused;                            // 0x0028(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_29[0x7];                                       // 0x0029(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UTweenFloat*                            ReturnValue;                                       // 0x0030(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BaseTween_AppendTweenCustomFloat) == 0x000008, "Wrong alignment on BaseTween_AppendTweenCustomFloat");
static_assert(sizeof(BaseTween_AppendTweenCustomFloat) == 0x000038, "Wrong size on BaseTween_AppendTweenCustomFloat");
static_assert(offsetof(BaseTween_AppendTweenCustomFloat, TweenTarget) == 0x000000, "Member 'BaseTween_AppendTweenCustomFloat::TweenTarget' has a wrong offset!");
static_assert(offsetof(BaseTween_AppendTweenCustomFloat, From) == 0x000008, "Member 'BaseTween_AppendTweenCustomFloat::From' has a wrong offset!");
static_assert(offsetof(BaseTween_AppendTweenCustomFloat, To) == 0x00000C, "Member 'BaseTween_AppendTweenCustomFloat::To' has a wrong offset!");
static_assert(offsetof(BaseTween_AppendTweenCustomFloat, Duration) == 0x000010, "Member 'BaseTween_AppendTweenCustomFloat::Duration' has a wrong offset!");
static_assert(offsetof(BaseTween_AppendTweenCustomFloat, EaseType) == 0x000014, "Member 'BaseTween_AppendTweenCustomFloat::EaseType' has a wrong offset!");
static_assert(offsetof(BaseTween_AppendTweenCustomFloat, NumLoops) == 0x000018, "Member 'BaseTween_AppendTweenCustomFloat::NumLoops' has a wrong offset!");
static_assert(offsetof(BaseTween_AppendTweenCustomFloat, LoopType) == 0x00001C, "Member 'BaseTween_AppendTweenCustomFloat::LoopType' has a wrong offset!");
static_assert(offsetof(BaseTween_AppendTweenCustomFloat, Delay) == 0x000020, "Member 'BaseTween_AppendTweenCustomFloat::Delay' has a wrong offset!");
static_assert(offsetof(BaseTween_AppendTweenCustomFloat, TimeScale) == 0x000024, "Member 'BaseTween_AppendTweenCustomFloat::TimeScale' has a wrong offset!");
static_assert(offsetof(BaseTween_AppendTweenCustomFloat, TweenWhileGameIsPaused) == 0x000028, "Member 'BaseTween_AppendTweenCustomFloat::TweenWhileGameIsPaused' has a wrong offset!");
static_assert(offsetof(BaseTween_AppendTweenCustomFloat, ReturnValue) == 0x000030, "Member 'BaseTween_AppendTweenCustomFloat::ReturnValue' has a wrong offset!");

// Function TweenMaker.BaseTween.AppendTweenCustomVector
// 0x0048 (0x0048 - 0x0000)
struct BaseTween_AppendTweenCustomVector final
{
public:
	class UObject*                                TweenTarget;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                From;                                              // 0x0008(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                To;                                                // 0x0014(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Duration;                                          // 0x0020(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETweenEaseType                                EaseType;                                          // 0x0024(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_25[0x3];                                       // 0x0025(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         NumLoops;                                          // 0x0028(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETweenLoopType                                LoopType;                                          // 0x002C(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2D[0x3];                                       // 0x002D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Delay;                                             // 0x0030(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TimeScale;                                         // 0x0034(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          TweenWhileGameIsPaused;                            // 0x0038(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_39[0x7];                                       // 0x0039(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UTweenVector*                           ReturnValue;                                       // 0x0040(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BaseTween_AppendTweenCustomVector) == 0x000008, "Wrong alignment on BaseTween_AppendTweenCustomVector");
static_assert(sizeof(BaseTween_AppendTweenCustomVector) == 0x000048, "Wrong size on BaseTween_AppendTweenCustomVector");
static_assert(offsetof(BaseTween_AppendTweenCustomVector, TweenTarget) == 0x000000, "Member 'BaseTween_AppendTweenCustomVector::TweenTarget' has a wrong offset!");
static_assert(offsetof(BaseTween_AppendTweenCustomVector, From) == 0x000008, "Member 'BaseTween_AppendTweenCustomVector::From' has a wrong offset!");
static_assert(offsetof(BaseTween_AppendTweenCustomVector, To) == 0x000014, "Member 'BaseTween_AppendTweenCustomVector::To' has a wrong offset!");
static_assert(offsetof(BaseTween_AppendTweenCustomVector, Duration) == 0x000020, "Member 'BaseTween_AppendTweenCustomVector::Duration' has a wrong offset!");
static_assert(offsetof(BaseTween_AppendTweenCustomVector, EaseType) == 0x000024, "Member 'BaseTween_AppendTweenCustomVector::EaseType' has a wrong offset!");
static_assert(offsetof(BaseTween_AppendTweenCustomVector, NumLoops) == 0x000028, "Member 'BaseTween_AppendTweenCustomVector::NumLoops' has a wrong offset!");
static_assert(offsetof(BaseTween_AppendTweenCustomVector, LoopType) == 0x00002C, "Member 'BaseTween_AppendTweenCustomVector::LoopType' has a wrong offset!");
static_assert(offsetof(BaseTween_AppendTweenCustomVector, Delay) == 0x000030, "Member 'BaseTween_AppendTweenCustomVector::Delay' has a wrong offset!");
static_assert(offsetof(BaseTween_AppendTweenCustomVector, TimeScale) == 0x000034, "Member 'BaseTween_AppendTweenCustomVector::TimeScale' has a wrong offset!");
static_assert(offsetof(BaseTween_AppendTweenCustomVector, TweenWhileGameIsPaused) == 0x000038, "Member 'BaseTween_AppendTweenCustomVector::TweenWhileGameIsPaused' has a wrong offset!");
static_assert(offsetof(BaseTween_AppendTweenCustomVector, ReturnValue) == 0x000040, "Member 'BaseTween_AppendTweenCustomVector::ReturnValue' has a wrong offset!");

// Function TweenMaker.BaseTween.AppendTweenCustomVector2D
// 0x0040 (0x0040 - 0x0000)
struct BaseTween_AppendTweenCustomVector2D final
{
public:
	class UObject*                                TweenTarget;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2D                              From;                                              // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2D                              To;                                                // 0x0010(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Duration;                                          // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETweenEaseType                                EaseType;                                          // 0x001C(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1D[0x3];                                       // 0x001D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         NumLoops;                                          // 0x0020(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETweenLoopType                                LoopType;                                          // 0x0024(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_25[0x3];                                       // 0x0025(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Delay;                                             // 0x0028(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TimeScale;                                         // 0x002C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          TweenWhileGameIsPaused;                            // 0x0030(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_31[0x7];                                       // 0x0031(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UTweenVector2D*                         ReturnValue;                                       // 0x0038(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BaseTween_AppendTweenCustomVector2D) == 0x000008, "Wrong alignment on BaseTween_AppendTweenCustomVector2D");
static_assert(sizeof(BaseTween_AppendTweenCustomVector2D) == 0x000040, "Wrong size on BaseTween_AppendTweenCustomVector2D");
static_assert(offsetof(BaseTween_AppendTweenCustomVector2D, TweenTarget) == 0x000000, "Member 'BaseTween_AppendTweenCustomVector2D::TweenTarget' has a wrong offset!");
static_assert(offsetof(BaseTween_AppendTweenCustomVector2D, From) == 0x000008, "Member 'BaseTween_AppendTweenCustomVector2D::From' has a wrong offset!");
static_assert(offsetof(BaseTween_AppendTweenCustomVector2D, To) == 0x000010, "Member 'BaseTween_AppendTweenCustomVector2D::To' has a wrong offset!");
static_assert(offsetof(BaseTween_AppendTweenCustomVector2D, Duration) == 0x000018, "Member 'BaseTween_AppendTweenCustomVector2D::Duration' has a wrong offset!");
static_assert(offsetof(BaseTween_AppendTweenCustomVector2D, EaseType) == 0x00001C, "Member 'BaseTween_AppendTweenCustomVector2D::EaseType' has a wrong offset!");
static_assert(offsetof(BaseTween_AppendTweenCustomVector2D, NumLoops) == 0x000020, "Member 'BaseTween_AppendTweenCustomVector2D::NumLoops' has a wrong offset!");
static_assert(offsetof(BaseTween_AppendTweenCustomVector2D, LoopType) == 0x000024, "Member 'BaseTween_AppendTweenCustomVector2D::LoopType' has a wrong offset!");
static_assert(offsetof(BaseTween_AppendTweenCustomVector2D, Delay) == 0x000028, "Member 'BaseTween_AppendTweenCustomVector2D::Delay' has a wrong offset!");
static_assert(offsetof(BaseTween_AppendTweenCustomVector2D, TimeScale) == 0x00002C, "Member 'BaseTween_AppendTweenCustomVector2D::TimeScale' has a wrong offset!");
static_assert(offsetof(BaseTween_AppendTweenCustomVector2D, TweenWhileGameIsPaused) == 0x000030, "Member 'BaseTween_AppendTweenCustomVector2D::TweenWhileGameIsPaused' has a wrong offset!");
static_assert(offsetof(BaseTween_AppendTweenCustomVector2D, ReturnValue) == 0x000038, "Member 'BaseTween_AppendTweenCustomVector2D::ReturnValue' has a wrong offset!");

// Function TweenMaker.BaseTween.AppendTweenMaterialFloatFromTo
// 0x0040 (0x0040 - 0x0000)
struct BaseTween_AppendTweenMaterialFloatFromTo final
{
public:
	class UMaterialInstanceDynamic*               TweenTarget;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   ParameterName;                                     // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         From;                                              // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         To;                                                // 0x0014(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Duration;                                          // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETweenEaseType                                EaseType;                                          // 0x001C(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1D[0x3];                                       // 0x001D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         NumLoops;                                          // 0x0020(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETweenLoopType                                LoopType;                                          // 0x0024(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_25[0x3];                                       // 0x0025(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Delay;                                             // 0x0028(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TimeScale;                                         // 0x002C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          TweenWhileGameIsPaused;                            // 0x0030(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_31[0x7];                                       // 0x0031(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UTweenFloat*                            ReturnValue;                                       // 0x0038(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BaseTween_AppendTweenMaterialFloatFromTo) == 0x000008, "Wrong alignment on BaseTween_AppendTweenMaterialFloatFromTo");
static_assert(sizeof(BaseTween_AppendTweenMaterialFloatFromTo) == 0x000040, "Wrong size on BaseTween_AppendTweenMaterialFloatFromTo");
static_assert(offsetof(BaseTween_AppendTweenMaterialFloatFromTo, TweenTarget) == 0x000000, "Member 'BaseTween_AppendTweenMaterialFloatFromTo::TweenTarget' has a wrong offset!");
static_assert(offsetof(BaseTween_AppendTweenMaterialFloatFromTo, ParameterName) == 0x000008, "Member 'BaseTween_AppendTweenMaterialFloatFromTo::ParameterName' has a wrong offset!");
static_assert(offsetof(BaseTween_AppendTweenMaterialFloatFromTo, From) == 0x000010, "Member 'BaseTween_AppendTweenMaterialFloatFromTo::From' has a wrong offset!");
static_assert(offsetof(BaseTween_AppendTweenMaterialFloatFromTo, To) == 0x000014, "Member 'BaseTween_AppendTweenMaterialFloatFromTo::To' has a wrong offset!");
static_assert(offsetof(BaseTween_AppendTweenMaterialFloatFromTo, Duration) == 0x000018, "Member 'BaseTween_AppendTweenMaterialFloatFromTo::Duration' has a wrong offset!");
static_assert(offsetof(BaseTween_AppendTweenMaterialFloatFromTo, EaseType) == 0x00001C, "Member 'BaseTween_AppendTweenMaterialFloatFromTo::EaseType' has a wrong offset!");
static_assert(offsetof(BaseTween_AppendTweenMaterialFloatFromTo, NumLoops) == 0x000020, "Member 'BaseTween_AppendTweenMaterialFloatFromTo::NumLoops' has a wrong offset!");
static_assert(offsetof(BaseTween_AppendTweenMaterialFloatFromTo, LoopType) == 0x000024, "Member 'BaseTween_AppendTweenMaterialFloatFromTo::LoopType' has a wrong offset!");
static_assert(offsetof(BaseTween_AppendTweenMaterialFloatFromTo, Delay) == 0x000028, "Member 'BaseTween_AppendTweenMaterialFloatFromTo::Delay' has a wrong offset!");
static_assert(offsetof(BaseTween_AppendTweenMaterialFloatFromTo, TimeScale) == 0x00002C, "Member 'BaseTween_AppendTweenMaterialFloatFromTo::TimeScale' has a wrong offset!");
static_assert(offsetof(BaseTween_AppendTweenMaterialFloatFromTo, TweenWhileGameIsPaused) == 0x000030, "Member 'BaseTween_AppendTweenMaterialFloatFromTo::TweenWhileGameIsPaused' has a wrong offset!");
static_assert(offsetof(BaseTween_AppendTweenMaterialFloatFromTo, ReturnValue) == 0x000038, "Member 'BaseTween_AppendTweenMaterialFloatFromTo::ReturnValue' has a wrong offset!");

// Function TweenMaker.BaseTween.AppendTweenMaterialFloatTo
// 0x0038 (0x0038 - 0x0000)
struct BaseTween_AppendTweenMaterialFloatTo final
{
public:
	class UMaterialInstanceDynamic*               TweenTarget;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   ParameterName;                                     // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         To;                                                // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Duration;                                          // 0x0014(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETweenEaseType                                EaseType;                                          // 0x0018(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x3];                                       // 0x0019(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         NumLoops;                                          // 0x001C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETweenLoopType                                LoopType;                                          // 0x0020(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_21[0x3];                                       // 0x0021(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Delay;                                             // 0x0024(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TimeScale;                                         // 0x0028(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          TweenWhileGameIsPaused;                            // 0x002C(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2D[0x3];                                       // 0x002D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UTweenFloat*                            ReturnValue;                                       // 0x0030(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BaseTween_AppendTweenMaterialFloatTo) == 0x000008, "Wrong alignment on BaseTween_AppendTweenMaterialFloatTo");
static_assert(sizeof(BaseTween_AppendTweenMaterialFloatTo) == 0x000038, "Wrong size on BaseTween_AppendTweenMaterialFloatTo");
static_assert(offsetof(BaseTween_AppendTweenMaterialFloatTo, TweenTarget) == 0x000000, "Member 'BaseTween_AppendTweenMaterialFloatTo::TweenTarget' has a wrong offset!");
static_assert(offsetof(BaseTween_AppendTweenMaterialFloatTo, ParameterName) == 0x000008, "Member 'BaseTween_AppendTweenMaterialFloatTo::ParameterName' has a wrong offset!");
static_assert(offsetof(BaseTween_AppendTweenMaterialFloatTo, To) == 0x000010, "Member 'BaseTween_AppendTweenMaterialFloatTo::To' has a wrong offset!");
static_assert(offsetof(BaseTween_AppendTweenMaterialFloatTo, Duration) == 0x000014, "Member 'BaseTween_AppendTweenMaterialFloatTo::Duration' has a wrong offset!");
static_assert(offsetof(BaseTween_AppendTweenMaterialFloatTo, EaseType) == 0x000018, "Member 'BaseTween_AppendTweenMaterialFloatTo::EaseType' has a wrong offset!");
static_assert(offsetof(BaseTween_AppendTweenMaterialFloatTo, NumLoops) == 0x00001C, "Member 'BaseTween_AppendTweenMaterialFloatTo::NumLoops' has a wrong offset!");
static_assert(offsetof(BaseTween_AppendTweenMaterialFloatTo, LoopType) == 0x000020, "Member 'BaseTween_AppendTweenMaterialFloatTo::LoopType' has a wrong offset!");
static_assert(offsetof(BaseTween_AppendTweenMaterialFloatTo, Delay) == 0x000024, "Member 'BaseTween_AppendTweenMaterialFloatTo::Delay' has a wrong offset!");
static_assert(offsetof(BaseTween_AppendTweenMaterialFloatTo, TimeScale) == 0x000028, "Member 'BaseTween_AppendTweenMaterialFloatTo::TimeScale' has a wrong offset!");
static_assert(offsetof(BaseTween_AppendTweenMaterialFloatTo, TweenWhileGameIsPaused) == 0x00002C, "Member 'BaseTween_AppendTweenMaterialFloatTo::TweenWhileGameIsPaused' has a wrong offset!");
static_assert(offsetof(BaseTween_AppendTweenMaterialFloatTo, ReturnValue) == 0x000030, "Member 'BaseTween_AppendTweenMaterialFloatTo::ReturnValue' has a wrong offset!");

// Function TweenMaker.BaseTween.AppendTweenMaterialVectorFromTo
// 0x0058 (0x0058 - 0x0000)
struct BaseTween_AppendTweenMaterialVectorFromTo final
{
public:
	class UMaterialInstanceDynamic*               TweenTarget;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   ParameterName;                                     // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           From;                                              // 0x0010(0x0010)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           To;                                                // 0x0020(0x0010)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Duration;                                          // 0x0030(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETweenEaseType                                EaseType;                                          // 0x0034(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_35[0x3];                                       // 0x0035(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         NumLoops;                                          // 0x0038(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETweenLoopType                                LoopType;                                          // 0x003C(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_3D[0x3];                                       // 0x003D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Delay;                                             // 0x0040(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TimeScale;                                         // 0x0044(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          TweenWhileGameIsPaused;                            // 0x0048(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_49[0x7];                                       // 0x0049(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UTweenLinearColor*                      ReturnValue;                                       // 0x0050(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BaseTween_AppendTweenMaterialVectorFromTo) == 0x000008, "Wrong alignment on BaseTween_AppendTweenMaterialVectorFromTo");
static_assert(sizeof(BaseTween_AppendTweenMaterialVectorFromTo) == 0x000058, "Wrong size on BaseTween_AppendTweenMaterialVectorFromTo");
static_assert(offsetof(BaseTween_AppendTweenMaterialVectorFromTo, TweenTarget) == 0x000000, "Member 'BaseTween_AppendTweenMaterialVectorFromTo::TweenTarget' has a wrong offset!");
static_assert(offsetof(BaseTween_AppendTweenMaterialVectorFromTo, ParameterName) == 0x000008, "Member 'BaseTween_AppendTweenMaterialVectorFromTo::ParameterName' has a wrong offset!");
static_assert(offsetof(BaseTween_AppendTweenMaterialVectorFromTo, From) == 0x000010, "Member 'BaseTween_AppendTweenMaterialVectorFromTo::From' has a wrong offset!");
static_assert(offsetof(BaseTween_AppendTweenMaterialVectorFromTo, To) == 0x000020, "Member 'BaseTween_AppendTweenMaterialVectorFromTo::To' has a wrong offset!");
static_assert(offsetof(BaseTween_AppendTweenMaterialVectorFromTo, Duration) == 0x000030, "Member 'BaseTween_AppendTweenMaterialVectorFromTo::Duration' has a wrong offset!");
static_assert(offsetof(BaseTween_AppendTweenMaterialVectorFromTo, EaseType) == 0x000034, "Member 'BaseTween_AppendTweenMaterialVectorFromTo::EaseType' has a wrong offset!");
static_assert(offsetof(BaseTween_AppendTweenMaterialVectorFromTo, NumLoops) == 0x000038, "Member 'BaseTween_AppendTweenMaterialVectorFromTo::NumLoops' has a wrong offset!");
static_assert(offsetof(BaseTween_AppendTweenMaterialVectorFromTo, LoopType) == 0x00003C, "Member 'BaseTween_AppendTweenMaterialVectorFromTo::LoopType' has a wrong offset!");
static_assert(offsetof(BaseTween_AppendTweenMaterialVectorFromTo, Delay) == 0x000040, "Member 'BaseTween_AppendTweenMaterialVectorFromTo::Delay' has a wrong offset!");
static_assert(offsetof(BaseTween_AppendTweenMaterialVectorFromTo, TimeScale) == 0x000044, "Member 'BaseTween_AppendTweenMaterialVectorFromTo::TimeScale' has a wrong offset!");
static_assert(offsetof(BaseTween_AppendTweenMaterialVectorFromTo, TweenWhileGameIsPaused) == 0x000048, "Member 'BaseTween_AppendTweenMaterialVectorFromTo::TweenWhileGameIsPaused' has a wrong offset!");
static_assert(offsetof(BaseTween_AppendTweenMaterialVectorFromTo, ReturnValue) == 0x000050, "Member 'BaseTween_AppendTweenMaterialVectorFromTo::ReturnValue' has a wrong offset!");

// Function TweenMaker.BaseTween.AppendTweenMaterialVectorTo
// 0x0048 (0x0048 - 0x0000)
struct BaseTween_AppendTweenMaterialVectorTo final
{
public:
	class UMaterialInstanceDynamic*               TweenTarget;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   ParameterName;                                     // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           To;                                                // 0x0010(0x0010)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Duration;                                          // 0x0020(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETweenEaseType                                EaseType;                                          // 0x0024(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_25[0x3];                                       // 0x0025(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         NumLoops;                                          // 0x0028(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETweenLoopType                                LoopType;                                          // 0x002C(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2D[0x3];                                       // 0x002D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Delay;                                             // 0x0030(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TimeScale;                                         // 0x0034(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          TweenWhileGameIsPaused;                            // 0x0038(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_39[0x7];                                       // 0x0039(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UTweenLinearColor*                      ReturnValue;                                       // 0x0040(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BaseTween_AppendTweenMaterialVectorTo) == 0x000008, "Wrong alignment on BaseTween_AppendTweenMaterialVectorTo");
static_assert(sizeof(BaseTween_AppendTweenMaterialVectorTo) == 0x000048, "Wrong size on BaseTween_AppendTweenMaterialVectorTo");
static_assert(offsetof(BaseTween_AppendTweenMaterialVectorTo, TweenTarget) == 0x000000, "Member 'BaseTween_AppendTweenMaterialVectorTo::TweenTarget' has a wrong offset!");
static_assert(offsetof(BaseTween_AppendTweenMaterialVectorTo, ParameterName) == 0x000008, "Member 'BaseTween_AppendTweenMaterialVectorTo::ParameterName' has a wrong offset!");
static_assert(offsetof(BaseTween_AppendTweenMaterialVectorTo, To) == 0x000010, "Member 'BaseTween_AppendTweenMaterialVectorTo::To' has a wrong offset!");
static_assert(offsetof(BaseTween_AppendTweenMaterialVectorTo, Duration) == 0x000020, "Member 'BaseTween_AppendTweenMaterialVectorTo::Duration' has a wrong offset!");
static_assert(offsetof(BaseTween_AppendTweenMaterialVectorTo, EaseType) == 0x000024, "Member 'BaseTween_AppendTweenMaterialVectorTo::EaseType' has a wrong offset!");
static_assert(offsetof(BaseTween_AppendTweenMaterialVectorTo, NumLoops) == 0x000028, "Member 'BaseTween_AppendTweenMaterialVectorTo::NumLoops' has a wrong offset!");
static_assert(offsetof(BaseTween_AppendTweenMaterialVectorTo, LoopType) == 0x00002C, "Member 'BaseTween_AppendTweenMaterialVectorTo::LoopType' has a wrong offset!");
static_assert(offsetof(BaseTween_AppendTweenMaterialVectorTo, Delay) == 0x000030, "Member 'BaseTween_AppendTweenMaterialVectorTo::Delay' has a wrong offset!");
static_assert(offsetof(BaseTween_AppendTweenMaterialVectorTo, TimeScale) == 0x000034, "Member 'BaseTween_AppendTweenMaterialVectorTo::TimeScale' has a wrong offset!");
static_assert(offsetof(BaseTween_AppendTweenMaterialVectorTo, TweenWhileGameIsPaused) == 0x000038, "Member 'BaseTween_AppendTweenMaterialVectorTo::TweenWhileGameIsPaused' has a wrong offset!");
static_assert(offsetof(BaseTween_AppendTweenMaterialVectorTo, ReturnValue) == 0x000040, "Member 'BaseTween_AppendTweenMaterialVectorTo::ReturnValue' has a wrong offset!");

// Function TweenMaker.BaseTween.AppendTweenMoveActorBy
// 0x0038 (0x0038 - 0x0000)
struct BaseTween_AppendTweenMoveActorBy final
{
public:
	class AActor*                                 TweenTarget;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                bY;                                                // 0x0008(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Duration;                                          // 0x0014(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETweenEaseType                                EaseType;                                          // 0x0018(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          DeleteTweenOnHit;                                  // 0x0019(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          DeleteTweenOnOverlap;                              // 0x001A(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1B[0x1];                                       // 0x001B(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         NumLoops;                                          // 0x001C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETweenLoopType                                LoopType;                                          // 0x0020(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_21[0x3];                                       // 0x0021(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Delay;                                             // 0x0024(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TimeScale;                                         // 0x0028(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          TweenWhileGameIsPaused;                            // 0x002C(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2D[0x3];                                       // 0x002D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UTweenVector*                           ReturnValue;                                       // 0x0030(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BaseTween_AppendTweenMoveActorBy) == 0x000008, "Wrong alignment on BaseTween_AppendTweenMoveActorBy");
static_assert(sizeof(BaseTween_AppendTweenMoveActorBy) == 0x000038, "Wrong size on BaseTween_AppendTweenMoveActorBy");
static_assert(offsetof(BaseTween_AppendTweenMoveActorBy, TweenTarget) == 0x000000, "Member 'BaseTween_AppendTweenMoveActorBy::TweenTarget' has a wrong offset!");
static_assert(offsetof(BaseTween_AppendTweenMoveActorBy, bY) == 0x000008, "Member 'BaseTween_AppendTweenMoveActorBy::bY' has a wrong offset!");
static_assert(offsetof(BaseTween_AppendTweenMoveActorBy, Duration) == 0x000014, "Member 'BaseTween_AppendTweenMoveActorBy::Duration' has a wrong offset!");
static_assert(offsetof(BaseTween_AppendTweenMoveActorBy, EaseType) == 0x000018, "Member 'BaseTween_AppendTweenMoveActorBy::EaseType' has a wrong offset!");
static_assert(offsetof(BaseTween_AppendTweenMoveActorBy, DeleteTweenOnHit) == 0x000019, "Member 'BaseTween_AppendTweenMoveActorBy::DeleteTweenOnHit' has a wrong offset!");
static_assert(offsetof(BaseTween_AppendTweenMoveActorBy, DeleteTweenOnOverlap) == 0x00001A, "Member 'BaseTween_AppendTweenMoveActorBy::DeleteTweenOnOverlap' has a wrong offset!");
static_assert(offsetof(BaseTween_AppendTweenMoveActorBy, NumLoops) == 0x00001C, "Member 'BaseTween_AppendTweenMoveActorBy::NumLoops' has a wrong offset!");
static_assert(offsetof(BaseTween_AppendTweenMoveActorBy, LoopType) == 0x000020, "Member 'BaseTween_AppendTweenMoveActorBy::LoopType' has a wrong offset!");
static_assert(offsetof(BaseTween_AppendTweenMoveActorBy, Delay) == 0x000024, "Member 'BaseTween_AppendTweenMoveActorBy::Delay' has a wrong offset!");
static_assert(offsetof(BaseTween_AppendTweenMoveActorBy, TimeScale) == 0x000028, "Member 'BaseTween_AppendTweenMoveActorBy::TimeScale' has a wrong offset!");
static_assert(offsetof(BaseTween_AppendTweenMoveActorBy, TweenWhileGameIsPaused) == 0x00002C, "Member 'BaseTween_AppendTweenMoveActorBy::TweenWhileGameIsPaused' has a wrong offset!");
static_assert(offsetof(BaseTween_AppendTweenMoveActorBy, ReturnValue) == 0x000030, "Member 'BaseTween_AppendTweenMoveActorBy::ReturnValue' has a wrong offset!");

// Function TweenMaker.BaseTween.AppendTweenMoveActorTo
// 0x0038 (0x0038 - 0x0000)
struct BaseTween_AppendTweenMoveActorTo final
{
public:
	class AActor*                                 TweenTarget;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                To;                                                // 0x0008(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Duration;                                          // 0x0014(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETweenEaseType                                EaseType;                                          // 0x0018(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETweenSpace                                   TweenSpace;                                        // 0x0019(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          DeleteTweenOnHit;                                  // 0x001A(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          DeleteTweenOnOverlap;                              // 0x001B(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         NumLoops;                                          // 0x001C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETweenLoopType                                LoopType;                                          // 0x0020(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_21[0x3];                                       // 0x0021(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Delay;                                             // 0x0024(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TimeScale;                                         // 0x0028(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          TweenWhileGameIsPaused;                            // 0x002C(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2D[0x3];                                       // 0x002D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UTweenVector*                           ReturnValue;                                       // 0x0030(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BaseTween_AppendTweenMoveActorTo) == 0x000008, "Wrong alignment on BaseTween_AppendTweenMoveActorTo");
static_assert(sizeof(BaseTween_AppendTweenMoveActorTo) == 0x000038, "Wrong size on BaseTween_AppendTweenMoveActorTo");
static_assert(offsetof(BaseTween_AppendTweenMoveActorTo, TweenTarget) == 0x000000, "Member 'BaseTween_AppendTweenMoveActorTo::TweenTarget' has a wrong offset!");
static_assert(offsetof(BaseTween_AppendTweenMoveActorTo, To) == 0x000008, "Member 'BaseTween_AppendTweenMoveActorTo::To' has a wrong offset!");
static_assert(offsetof(BaseTween_AppendTweenMoveActorTo, Duration) == 0x000014, "Member 'BaseTween_AppendTweenMoveActorTo::Duration' has a wrong offset!");
static_assert(offsetof(BaseTween_AppendTweenMoveActorTo, EaseType) == 0x000018, "Member 'BaseTween_AppendTweenMoveActorTo::EaseType' has a wrong offset!");
static_assert(offsetof(BaseTween_AppendTweenMoveActorTo, TweenSpace) == 0x000019, "Member 'BaseTween_AppendTweenMoveActorTo::TweenSpace' has a wrong offset!");
static_assert(offsetof(BaseTween_AppendTweenMoveActorTo, DeleteTweenOnHit) == 0x00001A, "Member 'BaseTween_AppendTweenMoveActorTo::DeleteTweenOnHit' has a wrong offset!");
static_assert(offsetof(BaseTween_AppendTweenMoveActorTo, DeleteTweenOnOverlap) == 0x00001B, "Member 'BaseTween_AppendTweenMoveActorTo::DeleteTweenOnOverlap' has a wrong offset!");
static_assert(offsetof(BaseTween_AppendTweenMoveActorTo, NumLoops) == 0x00001C, "Member 'BaseTween_AppendTweenMoveActorTo::NumLoops' has a wrong offset!");
static_assert(offsetof(BaseTween_AppendTweenMoveActorTo, LoopType) == 0x000020, "Member 'BaseTween_AppendTweenMoveActorTo::LoopType' has a wrong offset!");
static_assert(offsetof(BaseTween_AppendTweenMoveActorTo, Delay) == 0x000024, "Member 'BaseTween_AppendTweenMoveActorTo::Delay' has a wrong offset!");
static_assert(offsetof(BaseTween_AppendTweenMoveActorTo, TimeScale) == 0x000028, "Member 'BaseTween_AppendTweenMoveActorTo::TimeScale' has a wrong offset!");
static_assert(offsetof(BaseTween_AppendTweenMoveActorTo, TweenWhileGameIsPaused) == 0x00002C, "Member 'BaseTween_AppendTweenMoveActorTo::TweenWhileGameIsPaused' has a wrong offset!");
static_assert(offsetof(BaseTween_AppendTweenMoveActorTo, ReturnValue) == 0x000030, "Member 'BaseTween_AppendTweenMoveActorTo::ReturnValue' has a wrong offset!");

// Function TweenMaker.BaseTween.AppendTweenMoveSceneComponentBy
// 0x0038 (0x0038 - 0x0000)
struct BaseTween_AppendTweenMoveSceneComponentBy final
{
public:
	class USceneComponent*                        TweenTarget;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, InstancedReference, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                bY;                                                // 0x0008(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Duration;                                          // 0x0014(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETweenEaseType                                EaseType;                                          // 0x0018(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          DeleteTweenOnHit;                                  // 0x0019(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          DeleteTweenOnOverlap;                              // 0x001A(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1B[0x1];                                       // 0x001B(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         NumLoops;                                          // 0x001C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETweenLoopType                                LoopType;                                          // 0x0020(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_21[0x3];                                       // 0x0021(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Delay;                                             // 0x0024(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TimeScale;                                         // 0x0028(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          TweenWhileGameIsPaused;                            // 0x002C(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2D[0x3];                                       // 0x002D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UTweenVector*                           ReturnValue;                                       // 0x0030(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BaseTween_AppendTweenMoveSceneComponentBy) == 0x000008, "Wrong alignment on BaseTween_AppendTweenMoveSceneComponentBy");
static_assert(sizeof(BaseTween_AppendTweenMoveSceneComponentBy) == 0x000038, "Wrong size on BaseTween_AppendTweenMoveSceneComponentBy");
static_assert(offsetof(BaseTween_AppendTweenMoveSceneComponentBy, TweenTarget) == 0x000000, "Member 'BaseTween_AppendTweenMoveSceneComponentBy::TweenTarget' has a wrong offset!");
static_assert(offsetof(BaseTween_AppendTweenMoveSceneComponentBy, bY) == 0x000008, "Member 'BaseTween_AppendTweenMoveSceneComponentBy::bY' has a wrong offset!");
static_assert(offsetof(BaseTween_AppendTweenMoveSceneComponentBy, Duration) == 0x000014, "Member 'BaseTween_AppendTweenMoveSceneComponentBy::Duration' has a wrong offset!");
static_assert(offsetof(BaseTween_AppendTweenMoveSceneComponentBy, EaseType) == 0x000018, "Member 'BaseTween_AppendTweenMoveSceneComponentBy::EaseType' has a wrong offset!");
static_assert(offsetof(BaseTween_AppendTweenMoveSceneComponentBy, DeleteTweenOnHit) == 0x000019, "Member 'BaseTween_AppendTweenMoveSceneComponentBy::DeleteTweenOnHit' has a wrong offset!");
static_assert(offsetof(BaseTween_AppendTweenMoveSceneComponentBy, DeleteTweenOnOverlap) == 0x00001A, "Member 'BaseTween_AppendTweenMoveSceneComponentBy::DeleteTweenOnOverlap' has a wrong offset!");
static_assert(offsetof(BaseTween_AppendTweenMoveSceneComponentBy, NumLoops) == 0x00001C, "Member 'BaseTween_AppendTweenMoveSceneComponentBy::NumLoops' has a wrong offset!");
static_assert(offsetof(BaseTween_AppendTweenMoveSceneComponentBy, LoopType) == 0x000020, "Member 'BaseTween_AppendTweenMoveSceneComponentBy::LoopType' has a wrong offset!");
static_assert(offsetof(BaseTween_AppendTweenMoveSceneComponentBy, Delay) == 0x000024, "Member 'BaseTween_AppendTweenMoveSceneComponentBy::Delay' has a wrong offset!");
static_assert(offsetof(BaseTween_AppendTweenMoveSceneComponentBy, TimeScale) == 0x000028, "Member 'BaseTween_AppendTweenMoveSceneComponentBy::TimeScale' has a wrong offset!");
static_assert(offsetof(BaseTween_AppendTweenMoveSceneComponentBy, TweenWhileGameIsPaused) == 0x00002C, "Member 'BaseTween_AppendTweenMoveSceneComponentBy::TweenWhileGameIsPaused' has a wrong offset!");
static_assert(offsetof(BaseTween_AppendTweenMoveSceneComponentBy, ReturnValue) == 0x000030, "Member 'BaseTween_AppendTweenMoveSceneComponentBy::ReturnValue' has a wrong offset!");

// Function TweenMaker.BaseTween.AppendTweenMoveSceneComponentTo
// 0x0038 (0x0038 - 0x0000)
struct BaseTween_AppendTweenMoveSceneComponentTo final
{
public:
	class USceneComponent*                        TweenTarget;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, InstancedReference, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                To;                                                // 0x0008(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Duration;                                          // 0x0014(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETweenEaseType                                EaseType;                                          // 0x0018(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETweenSpace                                   TweenSpace;                                        // 0x0019(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          DeleteTweenOnHit;                                  // 0x001A(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          DeleteTweenOnOverlap;                              // 0x001B(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         NumLoops;                                          // 0x001C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETweenLoopType                                LoopType;                                          // 0x0020(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_21[0x3];                                       // 0x0021(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Delay;                                             // 0x0024(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TimeScale;                                         // 0x0028(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          TweenWhileGameIsPaused;                            // 0x002C(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2D[0x3];                                       // 0x002D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UTweenVector*                           ReturnValue;                                       // 0x0030(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BaseTween_AppendTweenMoveSceneComponentTo) == 0x000008, "Wrong alignment on BaseTween_AppendTweenMoveSceneComponentTo");
static_assert(sizeof(BaseTween_AppendTweenMoveSceneComponentTo) == 0x000038, "Wrong size on BaseTween_AppendTweenMoveSceneComponentTo");
static_assert(offsetof(BaseTween_AppendTweenMoveSceneComponentTo, TweenTarget) == 0x000000, "Member 'BaseTween_AppendTweenMoveSceneComponentTo::TweenTarget' has a wrong offset!");
static_assert(offsetof(BaseTween_AppendTweenMoveSceneComponentTo, To) == 0x000008, "Member 'BaseTween_AppendTweenMoveSceneComponentTo::To' has a wrong offset!");
static_assert(offsetof(BaseTween_AppendTweenMoveSceneComponentTo, Duration) == 0x000014, "Member 'BaseTween_AppendTweenMoveSceneComponentTo::Duration' has a wrong offset!");
static_assert(offsetof(BaseTween_AppendTweenMoveSceneComponentTo, EaseType) == 0x000018, "Member 'BaseTween_AppendTweenMoveSceneComponentTo::EaseType' has a wrong offset!");
static_assert(offsetof(BaseTween_AppendTweenMoveSceneComponentTo, TweenSpace) == 0x000019, "Member 'BaseTween_AppendTweenMoveSceneComponentTo::TweenSpace' has a wrong offset!");
static_assert(offsetof(BaseTween_AppendTweenMoveSceneComponentTo, DeleteTweenOnHit) == 0x00001A, "Member 'BaseTween_AppendTweenMoveSceneComponentTo::DeleteTweenOnHit' has a wrong offset!");
static_assert(offsetof(BaseTween_AppendTweenMoveSceneComponentTo, DeleteTweenOnOverlap) == 0x00001B, "Member 'BaseTween_AppendTweenMoveSceneComponentTo::DeleteTweenOnOverlap' has a wrong offset!");
static_assert(offsetof(BaseTween_AppendTweenMoveSceneComponentTo, NumLoops) == 0x00001C, "Member 'BaseTween_AppendTweenMoveSceneComponentTo::NumLoops' has a wrong offset!");
static_assert(offsetof(BaseTween_AppendTweenMoveSceneComponentTo, LoopType) == 0x000020, "Member 'BaseTween_AppendTweenMoveSceneComponentTo::LoopType' has a wrong offset!");
static_assert(offsetof(BaseTween_AppendTweenMoveSceneComponentTo, Delay) == 0x000024, "Member 'BaseTween_AppendTweenMoveSceneComponentTo::Delay' has a wrong offset!");
static_assert(offsetof(BaseTween_AppendTweenMoveSceneComponentTo, TimeScale) == 0x000028, "Member 'BaseTween_AppendTweenMoveSceneComponentTo::TimeScale' has a wrong offset!");
static_assert(offsetof(BaseTween_AppendTweenMoveSceneComponentTo, TweenWhileGameIsPaused) == 0x00002C, "Member 'BaseTween_AppendTweenMoveSceneComponentTo::TweenWhileGameIsPaused' has a wrong offset!");
static_assert(offsetof(BaseTween_AppendTweenMoveSceneComponentTo, ReturnValue) == 0x000030, "Member 'BaseTween_AppendTweenMoveSceneComponentTo::ReturnValue' has a wrong offset!");

// Function TweenMaker.BaseTween.AppendTweenMoveWidgetBy
// 0x0038 (0x0038 - 0x0000)
struct BaseTween_AppendTweenMoveWidgetBy final
{
public:
	class UWidget*                                TweenTarget;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, InstancedReference, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2D                              bY;                                                // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Duration;                                          // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETweenEaseType                                EaseType;                                          // 0x0014(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_15[0x3];                                       // 0x0015(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         NumLoops;                                          // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETweenLoopType                                LoopType;                                          // 0x001C(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1D[0x3];                                       // 0x001D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Delay;                                             // 0x0020(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TimeScale;                                         // 0x0024(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          TweenWhileGameIsPaused;                            // 0x0028(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_29[0x7];                                       // 0x0029(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UTweenVector2D*                         ReturnValue;                                       // 0x0030(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BaseTween_AppendTweenMoveWidgetBy) == 0x000008, "Wrong alignment on BaseTween_AppendTweenMoveWidgetBy");
static_assert(sizeof(BaseTween_AppendTweenMoveWidgetBy) == 0x000038, "Wrong size on BaseTween_AppendTweenMoveWidgetBy");
static_assert(offsetof(BaseTween_AppendTweenMoveWidgetBy, TweenTarget) == 0x000000, "Member 'BaseTween_AppendTweenMoveWidgetBy::TweenTarget' has a wrong offset!");
static_assert(offsetof(BaseTween_AppendTweenMoveWidgetBy, bY) == 0x000008, "Member 'BaseTween_AppendTweenMoveWidgetBy::bY' has a wrong offset!");
static_assert(offsetof(BaseTween_AppendTweenMoveWidgetBy, Duration) == 0x000010, "Member 'BaseTween_AppendTweenMoveWidgetBy::Duration' has a wrong offset!");
static_assert(offsetof(BaseTween_AppendTweenMoveWidgetBy, EaseType) == 0x000014, "Member 'BaseTween_AppendTweenMoveWidgetBy::EaseType' has a wrong offset!");
static_assert(offsetof(BaseTween_AppendTweenMoveWidgetBy, NumLoops) == 0x000018, "Member 'BaseTween_AppendTweenMoveWidgetBy::NumLoops' has a wrong offset!");
static_assert(offsetof(BaseTween_AppendTweenMoveWidgetBy, LoopType) == 0x00001C, "Member 'BaseTween_AppendTweenMoveWidgetBy::LoopType' has a wrong offset!");
static_assert(offsetof(BaseTween_AppendTweenMoveWidgetBy, Delay) == 0x000020, "Member 'BaseTween_AppendTweenMoveWidgetBy::Delay' has a wrong offset!");
static_assert(offsetof(BaseTween_AppendTweenMoveWidgetBy, TimeScale) == 0x000024, "Member 'BaseTween_AppendTweenMoveWidgetBy::TimeScale' has a wrong offset!");
static_assert(offsetof(BaseTween_AppendTweenMoveWidgetBy, TweenWhileGameIsPaused) == 0x000028, "Member 'BaseTween_AppendTweenMoveWidgetBy::TweenWhileGameIsPaused' has a wrong offset!");
static_assert(offsetof(BaseTween_AppendTweenMoveWidgetBy, ReturnValue) == 0x000030, "Member 'BaseTween_AppendTweenMoveWidgetBy::ReturnValue' has a wrong offset!");

// Function TweenMaker.BaseTween.AppendTweenMoveWidgetTo
// 0x0038 (0x0038 - 0x0000)
struct BaseTween_AppendTweenMoveWidgetTo final
{
public:
	class UWidget*                                TweenTarget;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, InstancedReference, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2D                              To;                                                // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Duration;                                          // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETweenEaseType                                EaseType;                                          // 0x0014(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_15[0x3];                                       // 0x0015(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         NumLoops;                                          // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETweenLoopType                                LoopType;                                          // 0x001C(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1D[0x3];                                       // 0x001D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Delay;                                             // 0x0020(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TimeScale;                                         // 0x0024(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          TweenWhileGameIsPaused;                            // 0x0028(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_29[0x7];                                       // 0x0029(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UTweenVector2D*                         ReturnValue;                                       // 0x0030(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BaseTween_AppendTweenMoveWidgetTo) == 0x000008, "Wrong alignment on BaseTween_AppendTweenMoveWidgetTo");
static_assert(sizeof(BaseTween_AppendTweenMoveWidgetTo) == 0x000038, "Wrong size on BaseTween_AppendTweenMoveWidgetTo");
static_assert(offsetof(BaseTween_AppendTweenMoveWidgetTo, TweenTarget) == 0x000000, "Member 'BaseTween_AppendTweenMoveWidgetTo::TweenTarget' has a wrong offset!");
static_assert(offsetof(BaseTween_AppendTweenMoveWidgetTo, To) == 0x000008, "Member 'BaseTween_AppendTweenMoveWidgetTo::To' has a wrong offset!");
static_assert(offsetof(BaseTween_AppendTweenMoveWidgetTo, Duration) == 0x000010, "Member 'BaseTween_AppendTweenMoveWidgetTo::Duration' has a wrong offset!");
static_assert(offsetof(BaseTween_AppendTweenMoveWidgetTo, EaseType) == 0x000014, "Member 'BaseTween_AppendTweenMoveWidgetTo::EaseType' has a wrong offset!");
static_assert(offsetof(BaseTween_AppendTweenMoveWidgetTo, NumLoops) == 0x000018, "Member 'BaseTween_AppendTweenMoveWidgetTo::NumLoops' has a wrong offset!");
static_assert(offsetof(BaseTween_AppendTweenMoveWidgetTo, LoopType) == 0x00001C, "Member 'BaseTween_AppendTweenMoveWidgetTo::LoopType' has a wrong offset!");
static_assert(offsetof(BaseTween_AppendTweenMoveWidgetTo, Delay) == 0x000020, "Member 'BaseTween_AppendTweenMoveWidgetTo::Delay' has a wrong offset!");
static_assert(offsetof(BaseTween_AppendTweenMoveWidgetTo, TimeScale) == 0x000024, "Member 'BaseTween_AppendTweenMoveWidgetTo::TimeScale' has a wrong offset!");
static_assert(offsetof(BaseTween_AppendTweenMoveWidgetTo, TweenWhileGameIsPaused) == 0x000028, "Member 'BaseTween_AppendTweenMoveWidgetTo::TweenWhileGameIsPaused' has a wrong offset!");
static_assert(offsetof(BaseTween_AppendTweenMoveWidgetTo, ReturnValue) == 0x000030, "Member 'BaseTween_AppendTweenMoveWidgetTo::ReturnValue' has a wrong offset!");

// Function TweenMaker.BaseTween.AppendTweenRotateActorAroundPoint
// 0x0050 (0x0050 - 0x0000)
struct BaseTween_AppendTweenRotateActorAroundPoint final
{
public:
	class AActor*                                 TweenTarget;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                PivotPoint;                                        // 0x0008(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         StartingAngle;                                     // 0x0014(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         EndingAngle;                                       // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Radius;                                            // 0x001C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                Axis;                                              // 0x0020(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Duration;                                          // 0x002C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETweenEaseType                                EaseType;                                          // 0x0030(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          DeleteTweenOnHit;                                  // 0x0031(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          DeleteTweenOnOverlap;                              // 0x0032(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_33[0x1];                                       // 0x0033(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         NumLoops;                                          // 0x0034(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETweenLoopType                                LoopType;                                          // 0x0038(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_39[0x3];                                       // 0x0039(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Delay;                                             // 0x003C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TimeScale;                                         // 0x0040(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          TweenWhileGameIsPaused;                            // 0x0044(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_45[0x3];                                       // 0x0045(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UTweenFloat*                            ReturnValue;                                       // 0x0048(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BaseTween_AppendTweenRotateActorAroundPoint) == 0x000008, "Wrong alignment on BaseTween_AppendTweenRotateActorAroundPoint");
static_assert(sizeof(BaseTween_AppendTweenRotateActorAroundPoint) == 0x000050, "Wrong size on BaseTween_AppendTweenRotateActorAroundPoint");
static_assert(offsetof(BaseTween_AppendTweenRotateActorAroundPoint, TweenTarget) == 0x000000, "Member 'BaseTween_AppendTweenRotateActorAroundPoint::TweenTarget' has a wrong offset!");
static_assert(offsetof(BaseTween_AppendTweenRotateActorAroundPoint, PivotPoint) == 0x000008, "Member 'BaseTween_AppendTweenRotateActorAroundPoint::PivotPoint' has a wrong offset!");
static_assert(offsetof(BaseTween_AppendTweenRotateActorAroundPoint, StartingAngle) == 0x000014, "Member 'BaseTween_AppendTweenRotateActorAroundPoint::StartingAngle' has a wrong offset!");
static_assert(offsetof(BaseTween_AppendTweenRotateActorAroundPoint, EndingAngle) == 0x000018, "Member 'BaseTween_AppendTweenRotateActorAroundPoint::EndingAngle' has a wrong offset!");
static_assert(offsetof(BaseTween_AppendTweenRotateActorAroundPoint, Radius) == 0x00001C, "Member 'BaseTween_AppendTweenRotateActorAroundPoint::Radius' has a wrong offset!");
static_assert(offsetof(BaseTween_AppendTweenRotateActorAroundPoint, Axis) == 0x000020, "Member 'BaseTween_AppendTweenRotateActorAroundPoint::Axis' has a wrong offset!");
static_assert(offsetof(BaseTween_AppendTweenRotateActorAroundPoint, Duration) == 0x00002C, "Member 'BaseTween_AppendTweenRotateActorAroundPoint::Duration' has a wrong offset!");
static_assert(offsetof(BaseTween_AppendTweenRotateActorAroundPoint, EaseType) == 0x000030, "Member 'BaseTween_AppendTweenRotateActorAroundPoint::EaseType' has a wrong offset!");
static_assert(offsetof(BaseTween_AppendTweenRotateActorAroundPoint, DeleteTweenOnHit) == 0x000031, "Member 'BaseTween_AppendTweenRotateActorAroundPoint::DeleteTweenOnHit' has a wrong offset!");
static_assert(offsetof(BaseTween_AppendTweenRotateActorAroundPoint, DeleteTweenOnOverlap) == 0x000032, "Member 'BaseTween_AppendTweenRotateActorAroundPoint::DeleteTweenOnOverlap' has a wrong offset!");
static_assert(offsetof(BaseTween_AppendTweenRotateActorAroundPoint, NumLoops) == 0x000034, "Member 'BaseTween_AppendTweenRotateActorAroundPoint::NumLoops' has a wrong offset!");
static_assert(offsetof(BaseTween_AppendTweenRotateActorAroundPoint, LoopType) == 0x000038, "Member 'BaseTween_AppendTweenRotateActorAroundPoint::LoopType' has a wrong offset!");
static_assert(offsetof(BaseTween_AppendTweenRotateActorAroundPoint, Delay) == 0x00003C, "Member 'BaseTween_AppendTweenRotateActorAroundPoint::Delay' has a wrong offset!");
static_assert(offsetof(BaseTween_AppendTweenRotateActorAroundPoint, TimeScale) == 0x000040, "Member 'BaseTween_AppendTweenRotateActorAroundPoint::TimeScale' has a wrong offset!");
static_assert(offsetof(BaseTween_AppendTweenRotateActorAroundPoint, TweenWhileGameIsPaused) == 0x000044, "Member 'BaseTween_AppendTweenRotateActorAroundPoint::TweenWhileGameIsPaused' has a wrong offset!");
static_assert(offsetof(BaseTween_AppendTweenRotateActorAroundPoint, ReturnValue) == 0x000048, "Member 'BaseTween_AppendTweenRotateActorAroundPoint::ReturnValue' has a wrong offset!");

// Function TweenMaker.BaseTween.AppendTweenRotateActorAroundPointByOffset
// 0x0040 (0x0040 - 0x0000)
struct BaseTween_AppendTweenRotateActorAroundPointByOffset final
{
public:
	class AActor*                                 TweenTarget;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                PivotPoint;                                        // 0x0008(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         OffsetAngle;                                       // 0x0014(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETweenReferenceAxis                           ReferenceAxis;                                     // 0x0018(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x3];                                       // 0x0019(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Duration;                                          // 0x001C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETweenEaseType                                EaseType;                                          // 0x0020(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          DeleteTweenOnHit;                                  // 0x0021(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          DeleteTweenOnOverlap;                              // 0x0022(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_23[0x1];                                       // 0x0023(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         NumLoops;                                          // 0x0024(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETweenLoopType                                LoopType;                                          // 0x0028(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_29[0x3];                                       // 0x0029(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Delay;                                             // 0x002C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TimeScale;                                         // 0x0030(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          TweenWhileGameIsPaused;                            // 0x0034(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_35[0x3];                                       // 0x0035(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UTweenFloat*                            ReturnValue;                                       // 0x0038(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BaseTween_AppendTweenRotateActorAroundPointByOffset) == 0x000008, "Wrong alignment on BaseTween_AppendTweenRotateActorAroundPointByOffset");
static_assert(sizeof(BaseTween_AppendTweenRotateActorAroundPointByOffset) == 0x000040, "Wrong size on BaseTween_AppendTweenRotateActorAroundPointByOffset");
static_assert(offsetof(BaseTween_AppendTweenRotateActorAroundPointByOffset, TweenTarget) == 0x000000, "Member 'BaseTween_AppendTweenRotateActorAroundPointByOffset::TweenTarget' has a wrong offset!");
static_assert(offsetof(BaseTween_AppendTweenRotateActorAroundPointByOffset, PivotPoint) == 0x000008, "Member 'BaseTween_AppendTweenRotateActorAroundPointByOffset::PivotPoint' has a wrong offset!");
static_assert(offsetof(BaseTween_AppendTweenRotateActorAroundPointByOffset, OffsetAngle) == 0x000014, "Member 'BaseTween_AppendTweenRotateActorAroundPointByOffset::OffsetAngle' has a wrong offset!");
static_assert(offsetof(BaseTween_AppendTweenRotateActorAroundPointByOffset, ReferenceAxis) == 0x000018, "Member 'BaseTween_AppendTweenRotateActorAroundPointByOffset::ReferenceAxis' has a wrong offset!");
static_assert(offsetof(BaseTween_AppendTweenRotateActorAroundPointByOffset, Duration) == 0x00001C, "Member 'BaseTween_AppendTweenRotateActorAroundPointByOffset::Duration' has a wrong offset!");
static_assert(offsetof(BaseTween_AppendTweenRotateActorAroundPointByOffset, EaseType) == 0x000020, "Member 'BaseTween_AppendTweenRotateActorAroundPointByOffset::EaseType' has a wrong offset!");
static_assert(offsetof(BaseTween_AppendTweenRotateActorAroundPointByOffset, DeleteTweenOnHit) == 0x000021, "Member 'BaseTween_AppendTweenRotateActorAroundPointByOffset::DeleteTweenOnHit' has a wrong offset!");
static_assert(offsetof(BaseTween_AppendTweenRotateActorAroundPointByOffset, DeleteTweenOnOverlap) == 0x000022, "Member 'BaseTween_AppendTweenRotateActorAroundPointByOffset::DeleteTweenOnOverlap' has a wrong offset!");
static_assert(offsetof(BaseTween_AppendTweenRotateActorAroundPointByOffset, NumLoops) == 0x000024, "Member 'BaseTween_AppendTweenRotateActorAroundPointByOffset::NumLoops' has a wrong offset!");
static_assert(offsetof(BaseTween_AppendTweenRotateActorAroundPointByOffset, LoopType) == 0x000028, "Member 'BaseTween_AppendTweenRotateActorAroundPointByOffset::LoopType' has a wrong offset!");
static_assert(offsetof(BaseTween_AppendTweenRotateActorAroundPointByOffset, Delay) == 0x00002C, "Member 'BaseTween_AppendTweenRotateActorAroundPointByOffset::Delay' has a wrong offset!");
static_assert(offsetof(BaseTween_AppendTweenRotateActorAroundPointByOffset, TimeScale) == 0x000030, "Member 'BaseTween_AppendTweenRotateActorAroundPointByOffset::TimeScale' has a wrong offset!");
static_assert(offsetof(BaseTween_AppendTweenRotateActorAroundPointByOffset, TweenWhileGameIsPaused) == 0x000034, "Member 'BaseTween_AppendTweenRotateActorAroundPointByOffset::TweenWhileGameIsPaused' has a wrong offset!");
static_assert(offsetof(BaseTween_AppendTweenRotateActorAroundPointByOffset, ReturnValue) == 0x000038, "Member 'BaseTween_AppendTweenRotateActorAroundPointByOffset::ReturnValue' has a wrong offset!");

// Function TweenMaker.BaseTween.AppendTweenRotateActorBy
// 0x0038 (0x0038 - 0x0000)
struct BaseTween_AppendTweenRotateActorBy final
{
public:
	class AActor*                                 TweenTarget;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRotator                               bY;                                                // 0x0008(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	float                                         Duration;                                          // 0x0014(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETweenEaseType                                EaseType;                                          // 0x0018(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          DeleteTweenOnHit;                                  // 0x0019(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          DeleteTweenOnOverlap;                              // 0x001A(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1B[0x1];                                       // 0x001B(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         NumLoops;                                          // 0x001C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETweenLoopType                                LoopType;                                          // 0x0020(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_21[0x3];                                       // 0x0021(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Delay;                                             // 0x0024(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TimeScale;                                         // 0x0028(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          TweenWhileGameIsPaused;                            // 0x002C(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2D[0x3];                                       // 0x002D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UTweenRotator*                          ReturnValue;                                       // 0x0030(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BaseTween_AppendTweenRotateActorBy) == 0x000008, "Wrong alignment on BaseTween_AppendTweenRotateActorBy");
static_assert(sizeof(BaseTween_AppendTweenRotateActorBy) == 0x000038, "Wrong size on BaseTween_AppendTweenRotateActorBy");
static_assert(offsetof(BaseTween_AppendTweenRotateActorBy, TweenTarget) == 0x000000, "Member 'BaseTween_AppendTweenRotateActorBy::TweenTarget' has a wrong offset!");
static_assert(offsetof(BaseTween_AppendTweenRotateActorBy, bY) == 0x000008, "Member 'BaseTween_AppendTweenRotateActorBy::bY' has a wrong offset!");
static_assert(offsetof(BaseTween_AppendTweenRotateActorBy, Duration) == 0x000014, "Member 'BaseTween_AppendTweenRotateActorBy::Duration' has a wrong offset!");
static_assert(offsetof(BaseTween_AppendTweenRotateActorBy, EaseType) == 0x000018, "Member 'BaseTween_AppendTweenRotateActorBy::EaseType' has a wrong offset!");
static_assert(offsetof(BaseTween_AppendTweenRotateActorBy, DeleteTweenOnHit) == 0x000019, "Member 'BaseTween_AppendTweenRotateActorBy::DeleteTweenOnHit' has a wrong offset!");
static_assert(offsetof(BaseTween_AppendTweenRotateActorBy, DeleteTweenOnOverlap) == 0x00001A, "Member 'BaseTween_AppendTweenRotateActorBy::DeleteTweenOnOverlap' has a wrong offset!");
static_assert(offsetof(BaseTween_AppendTweenRotateActorBy, NumLoops) == 0x00001C, "Member 'BaseTween_AppendTweenRotateActorBy::NumLoops' has a wrong offset!");
static_assert(offsetof(BaseTween_AppendTweenRotateActorBy, LoopType) == 0x000020, "Member 'BaseTween_AppendTweenRotateActorBy::LoopType' has a wrong offset!");
static_assert(offsetof(BaseTween_AppendTweenRotateActorBy, Delay) == 0x000024, "Member 'BaseTween_AppendTweenRotateActorBy::Delay' has a wrong offset!");
static_assert(offsetof(BaseTween_AppendTweenRotateActorBy, TimeScale) == 0x000028, "Member 'BaseTween_AppendTweenRotateActorBy::TimeScale' has a wrong offset!");
static_assert(offsetof(BaseTween_AppendTweenRotateActorBy, TweenWhileGameIsPaused) == 0x00002C, "Member 'BaseTween_AppendTweenRotateActorBy::TweenWhileGameIsPaused' has a wrong offset!");
static_assert(offsetof(BaseTween_AppendTweenRotateActorBy, ReturnValue) == 0x000030, "Member 'BaseTween_AppendTweenRotateActorBy::ReturnValue' has a wrong offset!");

// Function TweenMaker.BaseTween.AppendTweenRotateActorTo
// 0x0040 (0x0040 - 0x0000)
struct BaseTween_AppendTweenRotateActorTo final
{
public:
	class AActor*                                 TweenTarget;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRotator                               To;                                                // 0x0008(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	float                                         Duration;                                          // 0x0014(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETweenEaseType                                EaseType;                                          // 0x0018(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETweenSpace                                   TweenSpace;                                        // 0x0019(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETweenRotationMode                            RotationMode;                                      // 0x001A(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          DeleteTweenOnHit;                                  // 0x001B(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          DeleteTweenOnOverlap;                              // 0x001C(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1D[0x3];                                       // 0x001D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         NumLoops;                                          // 0x0020(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETweenLoopType                                LoopType;                                          // 0x0024(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_25[0x3];                                       // 0x0025(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Delay;                                             // 0x0028(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TimeScale;                                         // 0x002C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          TweenWhileGameIsPaused;                            // 0x0030(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_31[0x7];                                       // 0x0031(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UTweenRotator*                          ReturnValue;                                       // 0x0038(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BaseTween_AppendTweenRotateActorTo) == 0x000008, "Wrong alignment on BaseTween_AppendTweenRotateActorTo");
static_assert(sizeof(BaseTween_AppendTweenRotateActorTo) == 0x000040, "Wrong size on BaseTween_AppendTweenRotateActorTo");
static_assert(offsetof(BaseTween_AppendTweenRotateActorTo, TweenTarget) == 0x000000, "Member 'BaseTween_AppendTweenRotateActorTo::TweenTarget' has a wrong offset!");
static_assert(offsetof(BaseTween_AppendTweenRotateActorTo, To) == 0x000008, "Member 'BaseTween_AppendTweenRotateActorTo::To' has a wrong offset!");
static_assert(offsetof(BaseTween_AppendTweenRotateActorTo, Duration) == 0x000014, "Member 'BaseTween_AppendTweenRotateActorTo::Duration' has a wrong offset!");
static_assert(offsetof(BaseTween_AppendTweenRotateActorTo, EaseType) == 0x000018, "Member 'BaseTween_AppendTweenRotateActorTo::EaseType' has a wrong offset!");
static_assert(offsetof(BaseTween_AppendTweenRotateActorTo, TweenSpace) == 0x000019, "Member 'BaseTween_AppendTweenRotateActorTo::TweenSpace' has a wrong offset!");
static_assert(offsetof(BaseTween_AppendTweenRotateActorTo, RotationMode) == 0x00001A, "Member 'BaseTween_AppendTweenRotateActorTo::RotationMode' has a wrong offset!");
static_assert(offsetof(BaseTween_AppendTweenRotateActorTo, DeleteTweenOnHit) == 0x00001B, "Member 'BaseTween_AppendTweenRotateActorTo::DeleteTweenOnHit' has a wrong offset!");
static_assert(offsetof(BaseTween_AppendTweenRotateActorTo, DeleteTweenOnOverlap) == 0x00001C, "Member 'BaseTween_AppendTweenRotateActorTo::DeleteTweenOnOverlap' has a wrong offset!");
static_assert(offsetof(BaseTween_AppendTweenRotateActorTo, NumLoops) == 0x000020, "Member 'BaseTween_AppendTweenRotateActorTo::NumLoops' has a wrong offset!");
static_assert(offsetof(BaseTween_AppendTweenRotateActorTo, LoopType) == 0x000024, "Member 'BaseTween_AppendTweenRotateActorTo::LoopType' has a wrong offset!");
static_assert(offsetof(BaseTween_AppendTweenRotateActorTo, Delay) == 0x000028, "Member 'BaseTween_AppendTweenRotateActorTo::Delay' has a wrong offset!");
static_assert(offsetof(BaseTween_AppendTweenRotateActorTo, TimeScale) == 0x00002C, "Member 'BaseTween_AppendTweenRotateActorTo::TimeScale' has a wrong offset!");
static_assert(offsetof(BaseTween_AppendTweenRotateActorTo, TweenWhileGameIsPaused) == 0x000030, "Member 'BaseTween_AppendTweenRotateActorTo::TweenWhileGameIsPaused' has a wrong offset!");
static_assert(offsetof(BaseTween_AppendTweenRotateActorTo, ReturnValue) == 0x000038, "Member 'BaseTween_AppendTweenRotateActorTo::ReturnValue' has a wrong offset!");

// Function TweenMaker.BaseTween.AppendTweenRotateSceneComponentAroundPoint
// 0x0050 (0x0050 - 0x0000)
struct BaseTween_AppendTweenRotateSceneComponentAroundPoint final
{
public:
	class USceneComponent*                        TweenTarget;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, InstancedReference, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                PivotPoint;                                        // 0x0008(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         StartingAngle;                                     // 0x0014(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         EndingAngle;                                       // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Radius;                                            // 0x001C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                Axis;                                              // 0x0020(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Duration;                                          // 0x002C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETweenEaseType                                EaseType;                                          // 0x0030(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          DeleteTweenOnHit;                                  // 0x0031(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          DeleteTweenOnOverlap;                              // 0x0032(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_33[0x1];                                       // 0x0033(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         NumLoops;                                          // 0x0034(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETweenLoopType                                LoopType;                                          // 0x0038(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_39[0x3];                                       // 0x0039(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Delay;                                             // 0x003C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TimeScale;                                         // 0x0040(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          TweenWhileGameIsPaused;                            // 0x0044(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_45[0x3];                                       // 0x0045(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UTweenFloat*                            ReturnValue;                                       // 0x0048(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BaseTween_AppendTweenRotateSceneComponentAroundPoint) == 0x000008, "Wrong alignment on BaseTween_AppendTweenRotateSceneComponentAroundPoint");
static_assert(sizeof(BaseTween_AppendTweenRotateSceneComponentAroundPoint) == 0x000050, "Wrong size on BaseTween_AppendTweenRotateSceneComponentAroundPoint");
static_assert(offsetof(BaseTween_AppendTweenRotateSceneComponentAroundPoint, TweenTarget) == 0x000000, "Member 'BaseTween_AppendTweenRotateSceneComponentAroundPoint::TweenTarget' has a wrong offset!");
static_assert(offsetof(BaseTween_AppendTweenRotateSceneComponentAroundPoint, PivotPoint) == 0x000008, "Member 'BaseTween_AppendTweenRotateSceneComponentAroundPoint::PivotPoint' has a wrong offset!");
static_assert(offsetof(BaseTween_AppendTweenRotateSceneComponentAroundPoint, StartingAngle) == 0x000014, "Member 'BaseTween_AppendTweenRotateSceneComponentAroundPoint::StartingAngle' has a wrong offset!");
static_assert(offsetof(BaseTween_AppendTweenRotateSceneComponentAroundPoint, EndingAngle) == 0x000018, "Member 'BaseTween_AppendTweenRotateSceneComponentAroundPoint::EndingAngle' has a wrong offset!");
static_assert(offsetof(BaseTween_AppendTweenRotateSceneComponentAroundPoint, Radius) == 0x00001C, "Member 'BaseTween_AppendTweenRotateSceneComponentAroundPoint::Radius' has a wrong offset!");
static_assert(offsetof(BaseTween_AppendTweenRotateSceneComponentAroundPoint, Axis) == 0x000020, "Member 'BaseTween_AppendTweenRotateSceneComponentAroundPoint::Axis' has a wrong offset!");
static_assert(offsetof(BaseTween_AppendTweenRotateSceneComponentAroundPoint, Duration) == 0x00002C, "Member 'BaseTween_AppendTweenRotateSceneComponentAroundPoint::Duration' has a wrong offset!");
static_assert(offsetof(BaseTween_AppendTweenRotateSceneComponentAroundPoint, EaseType) == 0x000030, "Member 'BaseTween_AppendTweenRotateSceneComponentAroundPoint::EaseType' has a wrong offset!");
static_assert(offsetof(BaseTween_AppendTweenRotateSceneComponentAroundPoint, DeleteTweenOnHit) == 0x000031, "Member 'BaseTween_AppendTweenRotateSceneComponentAroundPoint::DeleteTweenOnHit' has a wrong offset!");
static_assert(offsetof(BaseTween_AppendTweenRotateSceneComponentAroundPoint, DeleteTweenOnOverlap) == 0x000032, "Member 'BaseTween_AppendTweenRotateSceneComponentAroundPoint::DeleteTweenOnOverlap' has a wrong offset!");
static_assert(offsetof(BaseTween_AppendTweenRotateSceneComponentAroundPoint, NumLoops) == 0x000034, "Member 'BaseTween_AppendTweenRotateSceneComponentAroundPoint::NumLoops' has a wrong offset!");
static_assert(offsetof(BaseTween_AppendTweenRotateSceneComponentAroundPoint, LoopType) == 0x000038, "Member 'BaseTween_AppendTweenRotateSceneComponentAroundPoint::LoopType' has a wrong offset!");
static_assert(offsetof(BaseTween_AppendTweenRotateSceneComponentAroundPoint, Delay) == 0x00003C, "Member 'BaseTween_AppendTweenRotateSceneComponentAroundPoint::Delay' has a wrong offset!");
static_assert(offsetof(BaseTween_AppendTweenRotateSceneComponentAroundPoint, TimeScale) == 0x000040, "Member 'BaseTween_AppendTweenRotateSceneComponentAroundPoint::TimeScale' has a wrong offset!");
static_assert(offsetof(BaseTween_AppendTweenRotateSceneComponentAroundPoint, TweenWhileGameIsPaused) == 0x000044, "Member 'BaseTween_AppendTweenRotateSceneComponentAroundPoint::TweenWhileGameIsPaused' has a wrong offset!");
static_assert(offsetof(BaseTween_AppendTweenRotateSceneComponentAroundPoint, ReturnValue) == 0x000048, "Member 'BaseTween_AppendTweenRotateSceneComponentAroundPoint::ReturnValue' has a wrong offset!");

// Function TweenMaker.BaseTween.AppendTweenRotateSceneComponentAroundPointByOffset
// 0x0040 (0x0040 - 0x0000)
struct BaseTween_AppendTweenRotateSceneComponentAroundPointByOffset final
{
public:
	class USceneComponent*                        TweenTarget;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, InstancedReference, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                PivotPoint;                                        // 0x0008(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         OffsetAngle;                                       // 0x0014(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETweenReferenceAxis                           ReferenceAxis;                                     // 0x0018(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x3];                                       // 0x0019(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Duration;                                          // 0x001C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETweenEaseType                                EaseType;                                          // 0x0020(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          DeleteTweenOnHit;                                  // 0x0021(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          DeleteTweenOnOverlap;                              // 0x0022(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_23[0x1];                                       // 0x0023(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         NumLoops;                                          // 0x0024(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETweenLoopType                                LoopType;                                          // 0x0028(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_29[0x3];                                       // 0x0029(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Delay;                                             // 0x002C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TimeScale;                                         // 0x0030(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          TweenWhileGameIsPaused;                            // 0x0034(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_35[0x3];                                       // 0x0035(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UTweenFloat*                            ReturnValue;                                       // 0x0038(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BaseTween_AppendTweenRotateSceneComponentAroundPointByOffset) == 0x000008, "Wrong alignment on BaseTween_AppendTweenRotateSceneComponentAroundPointByOffset");
static_assert(sizeof(BaseTween_AppendTweenRotateSceneComponentAroundPointByOffset) == 0x000040, "Wrong size on BaseTween_AppendTweenRotateSceneComponentAroundPointByOffset");
static_assert(offsetof(BaseTween_AppendTweenRotateSceneComponentAroundPointByOffset, TweenTarget) == 0x000000, "Member 'BaseTween_AppendTweenRotateSceneComponentAroundPointByOffset::TweenTarget' has a wrong offset!");
static_assert(offsetof(BaseTween_AppendTweenRotateSceneComponentAroundPointByOffset, PivotPoint) == 0x000008, "Member 'BaseTween_AppendTweenRotateSceneComponentAroundPointByOffset::PivotPoint' has a wrong offset!");
static_assert(offsetof(BaseTween_AppendTweenRotateSceneComponentAroundPointByOffset, OffsetAngle) == 0x000014, "Member 'BaseTween_AppendTweenRotateSceneComponentAroundPointByOffset::OffsetAngle' has a wrong offset!");
static_assert(offsetof(BaseTween_AppendTweenRotateSceneComponentAroundPointByOffset, ReferenceAxis) == 0x000018, "Member 'BaseTween_AppendTweenRotateSceneComponentAroundPointByOffset::ReferenceAxis' has a wrong offset!");
static_assert(offsetof(BaseTween_AppendTweenRotateSceneComponentAroundPointByOffset, Duration) == 0x00001C, "Member 'BaseTween_AppendTweenRotateSceneComponentAroundPointByOffset::Duration' has a wrong offset!");
static_assert(offsetof(BaseTween_AppendTweenRotateSceneComponentAroundPointByOffset, EaseType) == 0x000020, "Member 'BaseTween_AppendTweenRotateSceneComponentAroundPointByOffset::EaseType' has a wrong offset!");
static_assert(offsetof(BaseTween_AppendTweenRotateSceneComponentAroundPointByOffset, DeleteTweenOnHit) == 0x000021, "Member 'BaseTween_AppendTweenRotateSceneComponentAroundPointByOffset::DeleteTweenOnHit' has a wrong offset!");
static_assert(offsetof(BaseTween_AppendTweenRotateSceneComponentAroundPointByOffset, DeleteTweenOnOverlap) == 0x000022, "Member 'BaseTween_AppendTweenRotateSceneComponentAroundPointByOffset::DeleteTweenOnOverlap' has a wrong offset!");
static_assert(offsetof(BaseTween_AppendTweenRotateSceneComponentAroundPointByOffset, NumLoops) == 0x000024, "Member 'BaseTween_AppendTweenRotateSceneComponentAroundPointByOffset::NumLoops' has a wrong offset!");
static_assert(offsetof(BaseTween_AppendTweenRotateSceneComponentAroundPointByOffset, LoopType) == 0x000028, "Member 'BaseTween_AppendTweenRotateSceneComponentAroundPointByOffset::LoopType' has a wrong offset!");
static_assert(offsetof(BaseTween_AppendTweenRotateSceneComponentAroundPointByOffset, Delay) == 0x00002C, "Member 'BaseTween_AppendTweenRotateSceneComponentAroundPointByOffset::Delay' has a wrong offset!");
static_assert(offsetof(BaseTween_AppendTweenRotateSceneComponentAroundPointByOffset, TimeScale) == 0x000030, "Member 'BaseTween_AppendTweenRotateSceneComponentAroundPointByOffset::TimeScale' has a wrong offset!");
static_assert(offsetof(BaseTween_AppendTweenRotateSceneComponentAroundPointByOffset, TweenWhileGameIsPaused) == 0x000034, "Member 'BaseTween_AppendTweenRotateSceneComponentAroundPointByOffset::TweenWhileGameIsPaused' has a wrong offset!");
static_assert(offsetof(BaseTween_AppendTweenRotateSceneComponentAroundPointByOffset, ReturnValue) == 0x000038, "Member 'BaseTween_AppendTweenRotateSceneComponentAroundPointByOffset::ReturnValue' has a wrong offset!");

// Function TweenMaker.BaseTween.AppendTweenRotateSceneComponentBy
// 0x0038 (0x0038 - 0x0000)
struct BaseTween_AppendTweenRotateSceneComponentBy final
{
public:
	class USceneComponent*                        TweenTarget;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, InstancedReference, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRotator                               bY;                                                // 0x0008(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	float                                         Duration;                                          // 0x0014(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETweenEaseType                                EaseType;                                          // 0x0018(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          DeleteTweenOnHit;                                  // 0x0019(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          DeleteTweenOnOverlap;                              // 0x001A(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1B[0x1];                                       // 0x001B(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         NumLoops;                                          // 0x001C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETweenLoopType                                LoopType;                                          // 0x0020(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_21[0x3];                                       // 0x0021(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Delay;                                             // 0x0024(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TimeScale;                                         // 0x0028(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          TweenWhileGameIsPaused;                            // 0x002C(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2D[0x3];                                       // 0x002D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UTweenRotator*                          ReturnValue;                                       // 0x0030(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BaseTween_AppendTweenRotateSceneComponentBy) == 0x000008, "Wrong alignment on BaseTween_AppendTweenRotateSceneComponentBy");
static_assert(sizeof(BaseTween_AppendTweenRotateSceneComponentBy) == 0x000038, "Wrong size on BaseTween_AppendTweenRotateSceneComponentBy");
static_assert(offsetof(BaseTween_AppendTweenRotateSceneComponentBy, TweenTarget) == 0x000000, "Member 'BaseTween_AppendTweenRotateSceneComponentBy::TweenTarget' has a wrong offset!");
static_assert(offsetof(BaseTween_AppendTweenRotateSceneComponentBy, bY) == 0x000008, "Member 'BaseTween_AppendTweenRotateSceneComponentBy::bY' has a wrong offset!");
static_assert(offsetof(BaseTween_AppendTweenRotateSceneComponentBy, Duration) == 0x000014, "Member 'BaseTween_AppendTweenRotateSceneComponentBy::Duration' has a wrong offset!");
static_assert(offsetof(BaseTween_AppendTweenRotateSceneComponentBy, EaseType) == 0x000018, "Member 'BaseTween_AppendTweenRotateSceneComponentBy::EaseType' has a wrong offset!");
static_assert(offsetof(BaseTween_AppendTweenRotateSceneComponentBy, DeleteTweenOnHit) == 0x000019, "Member 'BaseTween_AppendTweenRotateSceneComponentBy::DeleteTweenOnHit' has a wrong offset!");
static_assert(offsetof(BaseTween_AppendTweenRotateSceneComponentBy, DeleteTweenOnOverlap) == 0x00001A, "Member 'BaseTween_AppendTweenRotateSceneComponentBy::DeleteTweenOnOverlap' has a wrong offset!");
static_assert(offsetof(BaseTween_AppendTweenRotateSceneComponentBy, NumLoops) == 0x00001C, "Member 'BaseTween_AppendTweenRotateSceneComponentBy::NumLoops' has a wrong offset!");
static_assert(offsetof(BaseTween_AppendTweenRotateSceneComponentBy, LoopType) == 0x000020, "Member 'BaseTween_AppendTweenRotateSceneComponentBy::LoopType' has a wrong offset!");
static_assert(offsetof(BaseTween_AppendTweenRotateSceneComponentBy, Delay) == 0x000024, "Member 'BaseTween_AppendTweenRotateSceneComponentBy::Delay' has a wrong offset!");
static_assert(offsetof(BaseTween_AppendTweenRotateSceneComponentBy, TimeScale) == 0x000028, "Member 'BaseTween_AppendTweenRotateSceneComponentBy::TimeScale' has a wrong offset!");
static_assert(offsetof(BaseTween_AppendTweenRotateSceneComponentBy, TweenWhileGameIsPaused) == 0x00002C, "Member 'BaseTween_AppendTweenRotateSceneComponentBy::TweenWhileGameIsPaused' has a wrong offset!");
static_assert(offsetof(BaseTween_AppendTweenRotateSceneComponentBy, ReturnValue) == 0x000030, "Member 'BaseTween_AppendTweenRotateSceneComponentBy::ReturnValue' has a wrong offset!");

// Function TweenMaker.BaseTween.AppendTweenRotateSceneComponentTo
// 0x0040 (0x0040 - 0x0000)
struct BaseTween_AppendTweenRotateSceneComponentTo final
{
public:
	class USceneComponent*                        TweenTarget;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, InstancedReference, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRotator                               To;                                                // 0x0008(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	float                                         Duration;                                          // 0x0014(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETweenEaseType                                EaseType;                                          // 0x0018(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETweenSpace                                   TweenSpace;                                        // 0x0019(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETweenRotationMode                            RotationMode;                                      // 0x001A(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          DeleteTweenOnHit;                                  // 0x001B(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          DeleteTweenOnOverlap;                              // 0x001C(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1D[0x3];                                       // 0x001D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         NumLoops;                                          // 0x0020(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETweenLoopType                                LoopType;                                          // 0x0024(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_25[0x3];                                       // 0x0025(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Delay;                                             // 0x0028(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TimeScale;                                         // 0x002C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          TweenWhileGameIsPaused;                            // 0x0030(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_31[0x7];                                       // 0x0031(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UTweenRotator*                          ReturnValue;                                       // 0x0038(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BaseTween_AppendTweenRotateSceneComponentTo) == 0x000008, "Wrong alignment on BaseTween_AppendTweenRotateSceneComponentTo");
static_assert(sizeof(BaseTween_AppendTweenRotateSceneComponentTo) == 0x000040, "Wrong size on BaseTween_AppendTweenRotateSceneComponentTo");
static_assert(offsetof(BaseTween_AppendTweenRotateSceneComponentTo, TweenTarget) == 0x000000, "Member 'BaseTween_AppendTweenRotateSceneComponentTo::TweenTarget' has a wrong offset!");
static_assert(offsetof(BaseTween_AppendTweenRotateSceneComponentTo, To) == 0x000008, "Member 'BaseTween_AppendTweenRotateSceneComponentTo::To' has a wrong offset!");
static_assert(offsetof(BaseTween_AppendTweenRotateSceneComponentTo, Duration) == 0x000014, "Member 'BaseTween_AppendTweenRotateSceneComponentTo::Duration' has a wrong offset!");
static_assert(offsetof(BaseTween_AppendTweenRotateSceneComponentTo, EaseType) == 0x000018, "Member 'BaseTween_AppendTweenRotateSceneComponentTo::EaseType' has a wrong offset!");
static_assert(offsetof(BaseTween_AppendTweenRotateSceneComponentTo, TweenSpace) == 0x000019, "Member 'BaseTween_AppendTweenRotateSceneComponentTo::TweenSpace' has a wrong offset!");
static_assert(offsetof(BaseTween_AppendTweenRotateSceneComponentTo, RotationMode) == 0x00001A, "Member 'BaseTween_AppendTweenRotateSceneComponentTo::RotationMode' has a wrong offset!");
static_assert(offsetof(BaseTween_AppendTweenRotateSceneComponentTo, DeleteTweenOnHit) == 0x00001B, "Member 'BaseTween_AppendTweenRotateSceneComponentTo::DeleteTweenOnHit' has a wrong offset!");
static_assert(offsetof(BaseTween_AppendTweenRotateSceneComponentTo, DeleteTweenOnOverlap) == 0x00001C, "Member 'BaseTween_AppendTweenRotateSceneComponentTo::DeleteTweenOnOverlap' has a wrong offset!");
static_assert(offsetof(BaseTween_AppendTweenRotateSceneComponentTo, NumLoops) == 0x000020, "Member 'BaseTween_AppendTweenRotateSceneComponentTo::NumLoops' has a wrong offset!");
static_assert(offsetof(BaseTween_AppendTweenRotateSceneComponentTo, LoopType) == 0x000024, "Member 'BaseTween_AppendTweenRotateSceneComponentTo::LoopType' has a wrong offset!");
static_assert(offsetof(BaseTween_AppendTweenRotateSceneComponentTo, Delay) == 0x000028, "Member 'BaseTween_AppendTweenRotateSceneComponentTo::Delay' has a wrong offset!");
static_assert(offsetof(BaseTween_AppendTweenRotateSceneComponentTo, TimeScale) == 0x00002C, "Member 'BaseTween_AppendTweenRotateSceneComponentTo::TimeScale' has a wrong offset!");
static_assert(offsetof(BaseTween_AppendTweenRotateSceneComponentTo, TweenWhileGameIsPaused) == 0x000030, "Member 'BaseTween_AppendTweenRotateSceneComponentTo::TweenWhileGameIsPaused' has a wrong offset!");
static_assert(offsetof(BaseTween_AppendTweenRotateSceneComponentTo, ReturnValue) == 0x000038, "Member 'BaseTween_AppendTweenRotateSceneComponentTo::ReturnValue' has a wrong offset!");

// Function TweenMaker.BaseTween.AppendTweenScaleActorBy
// 0x0038 (0x0038 - 0x0000)
struct BaseTween_AppendTweenScaleActorBy final
{
public:
	class AActor*                                 TweenTarget;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                bY;                                                // 0x0008(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Duration;                                          // 0x0014(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETweenEaseType                                EaseType;                                          // 0x0018(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          DeleteTweenOnHit;                                  // 0x0019(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          DeleteTweenOnOverlap;                              // 0x001A(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1B[0x1];                                       // 0x001B(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         NumLoops;                                          // 0x001C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETweenLoopType                                LoopType;                                          // 0x0020(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_21[0x3];                                       // 0x0021(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Delay;                                             // 0x0024(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TimeScale;                                         // 0x0028(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          TweenWhileGameIsPaused;                            // 0x002C(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2D[0x3];                                       // 0x002D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UTweenVector*                           ReturnValue;                                       // 0x0030(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BaseTween_AppendTweenScaleActorBy) == 0x000008, "Wrong alignment on BaseTween_AppendTweenScaleActorBy");
static_assert(sizeof(BaseTween_AppendTweenScaleActorBy) == 0x000038, "Wrong size on BaseTween_AppendTweenScaleActorBy");
static_assert(offsetof(BaseTween_AppendTweenScaleActorBy, TweenTarget) == 0x000000, "Member 'BaseTween_AppendTweenScaleActorBy::TweenTarget' has a wrong offset!");
static_assert(offsetof(BaseTween_AppendTweenScaleActorBy, bY) == 0x000008, "Member 'BaseTween_AppendTweenScaleActorBy::bY' has a wrong offset!");
static_assert(offsetof(BaseTween_AppendTweenScaleActorBy, Duration) == 0x000014, "Member 'BaseTween_AppendTweenScaleActorBy::Duration' has a wrong offset!");
static_assert(offsetof(BaseTween_AppendTweenScaleActorBy, EaseType) == 0x000018, "Member 'BaseTween_AppendTweenScaleActorBy::EaseType' has a wrong offset!");
static_assert(offsetof(BaseTween_AppendTweenScaleActorBy, DeleteTweenOnHit) == 0x000019, "Member 'BaseTween_AppendTweenScaleActorBy::DeleteTweenOnHit' has a wrong offset!");
static_assert(offsetof(BaseTween_AppendTweenScaleActorBy, DeleteTweenOnOverlap) == 0x00001A, "Member 'BaseTween_AppendTweenScaleActorBy::DeleteTweenOnOverlap' has a wrong offset!");
static_assert(offsetof(BaseTween_AppendTweenScaleActorBy, NumLoops) == 0x00001C, "Member 'BaseTween_AppendTweenScaleActorBy::NumLoops' has a wrong offset!");
static_assert(offsetof(BaseTween_AppendTweenScaleActorBy, LoopType) == 0x000020, "Member 'BaseTween_AppendTweenScaleActorBy::LoopType' has a wrong offset!");
static_assert(offsetof(BaseTween_AppendTweenScaleActorBy, Delay) == 0x000024, "Member 'BaseTween_AppendTweenScaleActorBy::Delay' has a wrong offset!");
static_assert(offsetof(BaseTween_AppendTweenScaleActorBy, TimeScale) == 0x000028, "Member 'BaseTween_AppendTweenScaleActorBy::TimeScale' has a wrong offset!");
static_assert(offsetof(BaseTween_AppendTweenScaleActorBy, TweenWhileGameIsPaused) == 0x00002C, "Member 'BaseTween_AppendTweenScaleActorBy::TweenWhileGameIsPaused' has a wrong offset!");
static_assert(offsetof(BaseTween_AppendTweenScaleActorBy, ReturnValue) == 0x000030, "Member 'BaseTween_AppendTweenScaleActorBy::ReturnValue' has a wrong offset!");

// Function TweenMaker.BaseTween.AppendTweenScaleActorTo
// 0x0038 (0x0038 - 0x0000)
struct BaseTween_AppendTweenScaleActorTo final
{
public:
	class AActor*                                 TweenTarget;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                To;                                                // 0x0008(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Duration;                                          // 0x0014(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETweenEaseType                                EaseType;                                          // 0x0018(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETweenSpace                                   TweenSpace;                                        // 0x0019(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          DeleteTweenOnHit;                                  // 0x001A(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          DeleteTweenOnOverlap;                              // 0x001B(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         NumLoops;                                          // 0x001C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETweenLoopType                                LoopType;                                          // 0x0020(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_21[0x3];                                       // 0x0021(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Delay;                                             // 0x0024(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TimeScale;                                         // 0x0028(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          TweenWhileGameIsPaused;                            // 0x002C(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2D[0x3];                                       // 0x002D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UTweenVector*                           ReturnValue;                                       // 0x0030(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BaseTween_AppendTweenScaleActorTo) == 0x000008, "Wrong alignment on BaseTween_AppendTweenScaleActorTo");
static_assert(sizeof(BaseTween_AppendTweenScaleActorTo) == 0x000038, "Wrong size on BaseTween_AppendTweenScaleActorTo");
static_assert(offsetof(BaseTween_AppendTweenScaleActorTo, TweenTarget) == 0x000000, "Member 'BaseTween_AppendTweenScaleActorTo::TweenTarget' has a wrong offset!");
static_assert(offsetof(BaseTween_AppendTweenScaleActorTo, To) == 0x000008, "Member 'BaseTween_AppendTweenScaleActorTo::To' has a wrong offset!");
static_assert(offsetof(BaseTween_AppendTweenScaleActorTo, Duration) == 0x000014, "Member 'BaseTween_AppendTweenScaleActorTo::Duration' has a wrong offset!");
static_assert(offsetof(BaseTween_AppendTweenScaleActorTo, EaseType) == 0x000018, "Member 'BaseTween_AppendTweenScaleActorTo::EaseType' has a wrong offset!");
static_assert(offsetof(BaseTween_AppendTweenScaleActorTo, TweenSpace) == 0x000019, "Member 'BaseTween_AppendTweenScaleActorTo::TweenSpace' has a wrong offset!");
static_assert(offsetof(BaseTween_AppendTweenScaleActorTo, DeleteTweenOnHit) == 0x00001A, "Member 'BaseTween_AppendTweenScaleActorTo::DeleteTweenOnHit' has a wrong offset!");
static_assert(offsetof(BaseTween_AppendTweenScaleActorTo, DeleteTweenOnOverlap) == 0x00001B, "Member 'BaseTween_AppendTweenScaleActorTo::DeleteTweenOnOverlap' has a wrong offset!");
static_assert(offsetof(BaseTween_AppendTweenScaleActorTo, NumLoops) == 0x00001C, "Member 'BaseTween_AppendTweenScaleActorTo::NumLoops' has a wrong offset!");
static_assert(offsetof(BaseTween_AppendTweenScaleActorTo, LoopType) == 0x000020, "Member 'BaseTween_AppendTweenScaleActorTo::LoopType' has a wrong offset!");
static_assert(offsetof(BaseTween_AppendTweenScaleActorTo, Delay) == 0x000024, "Member 'BaseTween_AppendTweenScaleActorTo::Delay' has a wrong offset!");
static_assert(offsetof(BaseTween_AppendTweenScaleActorTo, TimeScale) == 0x000028, "Member 'BaseTween_AppendTweenScaleActorTo::TimeScale' has a wrong offset!");
static_assert(offsetof(BaseTween_AppendTweenScaleActorTo, TweenWhileGameIsPaused) == 0x00002C, "Member 'BaseTween_AppendTweenScaleActorTo::TweenWhileGameIsPaused' has a wrong offset!");
static_assert(offsetof(BaseTween_AppendTweenScaleActorTo, ReturnValue) == 0x000030, "Member 'BaseTween_AppendTweenScaleActorTo::ReturnValue' has a wrong offset!");

// Function TweenMaker.BaseTween.AppendTweenScaleSceneComponentBy
// 0x0038 (0x0038 - 0x0000)
struct BaseTween_AppendTweenScaleSceneComponentBy final
{
public:
	class USceneComponent*                        TweenTarget;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, InstancedReference, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                bY;                                                // 0x0008(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Duration;                                          // 0x0014(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETweenEaseType                                EaseType;                                          // 0x0018(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          DeleteTweenOnHit;                                  // 0x0019(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          DeleteTweenOnOverlap;                              // 0x001A(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1B[0x1];                                       // 0x001B(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         NumLoops;                                          // 0x001C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETweenLoopType                                LoopType;                                          // 0x0020(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_21[0x3];                                       // 0x0021(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Delay;                                             // 0x0024(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TimeScale;                                         // 0x0028(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          TweenWhileGameIsPaused;                            // 0x002C(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2D[0x3];                                       // 0x002D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UTweenVector*                           ReturnValue;                                       // 0x0030(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BaseTween_AppendTweenScaleSceneComponentBy) == 0x000008, "Wrong alignment on BaseTween_AppendTweenScaleSceneComponentBy");
static_assert(sizeof(BaseTween_AppendTweenScaleSceneComponentBy) == 0x000038, "Wrong size on BaseTween_AppendTweenScaleSceneComponentBy");
static_assert(offsetof(BaseTween_AppendTweenScaleSceneComponentBy, TweenTarget) == 0x000000, "Member 'BaseTween_AppendTweenScaleSceneComponentBy::TweenTarget' has a wrong offset!");
static_assert(offsetof(BaseTween_AppendTweenScaleSceneComponentBy, bY) == 0x000008, "Member 'BaseTween_AppendTweenScaleSceneComponentBy::bY' has a wrong offset!");
static_assert(offsetof(BaseTween_AppendTweenScaleSceneComponentBy, Duration) == 0x000014, "Member 'BaseTween_AppendTweenScaleSceneComponentBy::Duration' has a wrong offset!");
static_assert(offsetof(BaseTween_AppendTweenScaleSceneComponentBy, EaseType) == 0x000018, "Member 'BaseTween_AppendTweenScaleSceneComponentBy::EaseType' has a wrong offset!");
static_assert(offsetof(BaseTween_AppendTweenScaleSceneComponentBy, DeleteTweenOnHit) == 0x000019, "Member 'BaseTween_AppendTweenScaleSceneComponentBy::DeleteTweenOnHit' has a wrong offset!");
static_assert(offsetof(BaseTween_AppendTweenScaleSceneComponentBy, DeleteTweenOnOverlap) == 0x00001A, "Member 'BaseTween_AppendTweenScaleSceneComponentBy::DeleteTweenOnOverlap' has a wrong offset!");
static_assert(offsetof(BaseTween_AppendTweenScaleSceneComponentBy, NumLoops) == 0x00001C, "Member 'BaseTween_AppendTweenScaleSceneComponentBy::NumLoops' has a wrong offset!");
static_assert(offsetof(BaseTween_AppendTweenScaleSceneComponentBy, LoopType) == 0x000020, "Member 'BaseTween_AppendTweenScaleSceneComponentBy::LoopType' has a wrong offset!");
static_assert(offsetof(BaseTween_AppendTweenScaleSceneComponentBy, Delay) == 0x000024, "Member 'BaseTween_AppendTweenScaleSceneComponentBy::Delay' has a wrong offset!");
static_assert(offsetof(BaseTween_AppendTweenScaleSceneComponentBy, TimeScale) == 0x000028, "Member 'BaseTween_AppendTweenScaleSceneComponentBy::TimeScale' has a wrong offset!");
static_assert(offsetof(BaseTween_AppendTweenScaleSceneComponentBy, TweenWhileGameIsPaused) == 0x00002C, "Member 'BaseTween_AppendTweenScaleSceneComponentBy::TweenWhileGameIsPaused' has a wrong offset!");
static_assert(offsetof(BaseTween_AppendTweenScaleSceneComponentBy, ReturnValue) == 0x000030, "Member 'BaseTween_AppendTweenScaleSceneComponentBy::ReturnValue' has a wrong offset!");

// Function TweenMaker.BaseTween.AppendTweenScaleSceneComponentTo
// 0x0038 (0x0038 - 0x0000)
struct BaseTween_AppendTweenScaleSceneComponentTo final
{
public:
	class USceneComponent*                        TweenTarget;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, InstancedReference, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                To;                                                // 0x0008(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Duration;                                          // 0x0014(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETweenEaseType                                EaseType;                                          // 0x0018(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETweenSpace                                   TweenSpace;                                        // 0x0019(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          DeleteTweenOnHit;                                  // 0x001A(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          DeleteTweenOnOverlap;                              // 0x001B(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         NumLoops;                                          // 0x001C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETweenLoopType                                LoopType;                                          // 0x0020(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_21[0x3];                                       // 0x0021(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Delay;                                             // 0x0024(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TimeScale;                                         // 0x0028(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          TweenWhileGameIsPaused;                            // 0x002C(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2D[0x3];                                       // 0x002D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UTweenVector*                           ReturnValue;                                       // 0x0030(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BaseTween_AppendTweenScaleSceneComponentTo) == 0x000008, "Wrong alignment on BaseTween_AppendTweenScaleSceneComponentTo");
static_assert(sizeof(BaseTween_AppendTweenScaleSceneComponentTo) == 0x000038, "Wrong size on BaseTween_AppendTweenScaleSceneComponentTo");
static_assert(offsetof(BaseTween_AppendTweenScaleSceneComponentTo, TweenTarget) == 0x000000, "Member 'BaseTween_AppendTweenScaleSceneComponentTo::TweenTarget' has a wrong offset!");
static_assert(offsetof(BaseTween_AppendTweenScaleSceneComponentTo, To) == 0x000008, "Member 'BaseTween_AppendTweenScaleSceneComponentTo::To' has a wrong offset!");
static_assert(offsetof(BaseTween_AppendTweenScaleSceneComponentTo, Duration) == 0x000014, "Member 'BaseTween_AppendTweenScaleSceneComponentTo::Duration' has a wrong offset!");
static_assert(offsetof(BaseTween_AppendTweenScaleSceneComponentTo, EaseType) == 0x000018, "Member 'BaseTween_AppendTweenScaleSceneComponentTo::EaseType' has a wrong offset!");
static_assert(offsetof(BaseTween_AppendTweenScaleSceneComponentTo, TweenSpace) == 0x000019, "Member 'BaseTween_AppendTweenScaleSceneComponentTo::TweenSpace' has a wrong offset!");
static_assert(offsetof(BaseTween_AppendTweenScaleSceneComponentTo, DeleteTweenOnHit) == 0x00001A, "Member 'BaseTween_AppendTweenScaleSceneComponentTo::DeleteTweenOnHit' has a wrong offset!");
static_assert(offsetof(BaseTween_AppendTweenScaleSceneComponentTo, DeleteTweenOnOverlap) == 0x00001B, "Member 'BaseTween_AppendTweenScaleSceneComponentTo::DeleteTweenOnOverlap' has a wrong offset!");
static_assert(offsetof(BaseTween_AppendTweenScaleSceneComponentTo, NumLoops) == 0x00001C, "Member 'BaseTween_AppendTweenScaleSceneComponentTo::NumLoops' has a wrong offset!");
static_assert(offsetof(BaseTween_AppendTweenScaleSceneComponentTo, LoopType) == 0x000020, "Member 'BaseTween_AppendTweenScaleSceneComponentTo::LoopType' has a wrong offset!");
static_assert(offsetof(BaseTween_AppendTweenScaleSceneComponentTo, Delay) == 0x000024, "Member 'BaseTween_AppendTweenScaleSceneComponentTo::Delay' has a wrong offset!");
static_assert(offsetof(BaseTween_AppendTweenScaleSceneComponentTo, TimeScale) == 0x000028, "Member 'BaseTween_AppendTweenScaleSceneComponentTo::TimeScale' has a wrong offset!");
static_assert(offsetof(BaseTween_AppendTweenScaleSceneComponentTo, TweenWhileGameIsPaused) == 0x00002C, "Member 'BaseTween_AppendTweenScaleSceneComponentTo::TweenWhileGameIsPaused' has a wrong offset!");
static_assert(offsetof(BaseTween_AppendTweenScaleSceneComponentTo, ReturnValue) == 0x000030, "Member 'BaseTween_AppendTweenScaleSceneComponentTo::ReturnValue' has a wrong offset!");

// Function TweenMaker.BaseTween.AppendTweenScaleWidgetBy
// 0x0038 (0x0038 - 0x0000)
struct BaseTween_AppendTweenScaleWidgetBy final
{
public:
	class UWidget*                                TweenTarget;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, InstancedReference, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2D                              bY;                                                // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Duration;                                          // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETweenEaseType                                EaseType;                                          // 0x0014(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_15[0x3];                                       // 0x0015(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         NumLoops;                                          // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETweenLoopType                                LoopType;                                          // 0x001C(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1D[0x3];                                       // 0x001D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Delay;                                             // 0x0020(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TimeScale;                                         // 0x0024(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          TweenWhileGameIsPaused;                            // 0x0028(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_29[0x7];                                       // 0x0029(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UTweenVector2D*                         ReturnValue;                                       // 0x0030(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BaseTween_AppendTweenScaleWidgetBy) == 0x000008, "Wrong alignment on BaseTween_AppendTweenScaleWidgetBy");
static_assert(sizeof(BaseTween_AppendTweenScaleWidgetBy) == 0x000038, "Wrong size on BaseTween_AppendTweenScaleWidgetBy");
static_assert(offsetof(BaseTween_AppendTweenScaleWidgetBy, TweenTarget) == 0x000000, "Member 'BaseTween_AppendTweenScaleWidgetBy::TweenTarget' has a wrong offset!");
static_assert(offsetof(BaseTween_AppendTweenScaleWidgetBy, bY) == 0x000008, "Member 'BaseTween_AppendTweenScaleWidgetBy::bY' has a wrong offset!");
static_assert(offsetof(BaseTween_AppendTweenScaleWidgetBy, Duration) == 0x000010, "Member 'BaseTween_AppendTweenScaleWidgetBy::Duration' has a wrong offset!");
static_assert(offsetof(BaseTween_AppendTweenScaleWidgetBy, EaseType) == 0x000014, "Member 'BaseTween_AppendTweenScaleWidgetBy::EaseType' has a wrong offset!");
static_assert(offsetof(BaseTween_AppendTweenScaleWidgetBy, NumLoops) == 0x000018, "Member 'BaseTween_AppendTweenScaleWidgetBy::NumLoops' has a wrong offset!");
static_assert(offsetof(BaseTween_AppendTweenScaleWidgetBy, LoopType) == 0x00001C, "Member 'BaseTween_AppendTweenScaleWidgetBy::LoopType' has a wrong offset!");
static_assert(offsetof(BaseTween_AppendTweenScaleWidgetBy, Delay) == 0x000020, "Member 'BaseTween_AppendTweenScaleWidgetBy::Delay' has a wrong offset!");
static_assert(offsetof(BaseTween_AppendTweenScaleWidgetBy, TimeScale) == 0x000024, "Member 'BaseTween_AppendTweenScaleWidgetBy::TimeScale' has a wrong offset!");
static_assert(offsetof(BaseTween_AppendTweenScaleWidgetBy, TweenWhileGameIsPaused) == 0x000028, "Member 'BaseTween_AppendTweenScaleWidgetBy::TweenWhileGameIsPaused' has a wrong offset!");
static_assert(offsetof(BaseTween_AppendTweenScaleWidgetBy, ReturnValue) == 0x000030, "Member 'BaseTween_AppendTweenScaleWidgetBy::ReturnValue' has a wrong offset!");

// Function TweenMaker.BaseTween.AppendTweenScaleWidgetTo
// 0x0038 (0x0038 - 0x0000)
struct BaseTween_AppendTweenScaleWidgetTo final
{
public:
	class UWidget*                                TweenTarget;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, InstancedReference, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2D                              To;                                                // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Duration;                                          // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETweenEaseType                                EaseType;                                          // 0x0014(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_15[0x3];                                       // 0x0015(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         NumLoops;                                          // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETweenLoopType                                LoopType;                                          // 0x001C(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1D[0x3];                                       // 0x001D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Delay;                                             // 0x0020(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TimeScale;                                         // 0x0024(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          TweenWhileGameIsPaused;                            // 0x0028(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_29[0x7];                                       // 0x0029(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UTweenVector2D*                         ReturnValue;                                       // 0x0030(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BaseTween_AppendTweenScaleWidgetTo) == 0x000008, "Wrong alignment on BaseTween_AppendTweenScaleWidgetTo");
static_assert(sizeof(BaseTween_AppendTweenScaleWidgetTo) == 0x000038, "Wrong size on BaseTween_AppendTweenScaleWidgetTo");
static_assert(offsetof(BaseTween_AppendTweenScaleWidgetTo, TweenTarget) == 0x000000, "Member 'BaseTween_AppendTweenScaleWidgetTo::TweenTarget' has a wrong offset!");
static_assert(offsetof(BaseTween_AppendTweenScaleWidgetTo, To) == 0x000008, "Member 'BaseTween_AppendTweenScaleWidgetTo::To' has a wrong offset!");
static_assert(offsetof(BaseTween_AppendTweenScaleWidgetTo, Duration) == 0x000010, "Member 'BaseTween_AppendTweenScaleWidgetTo::Duration' has a wrong offset!");
static_assert(offsetof(BaseTween_AppendTweenScaleWidgetTo, EaseType) == 0x000014, "Member 'BaseTween_AppendTweenScaleWidgetTo::EaseType' has a wrong offset!");
static_assert(offsetof(BaseTween_AppendTweenScaleWidgetTo, NumLoops) == 0x000018, "Member 'BaseTween_AppendTweenScaleWidgetTo::NumLoops' has a wrong offset!");
static_assert(offsetof(BaseTween_AppendTweenScaleWidgetTo, LoopType) == 0x00001C, "Member 'BaseTween_AppendTweenScaleWidgetTo::LoopType' has a wrong offset!");
static_assert(offsetof(BaseTween_AppendTweenScaleWidgetTo, Delay) == 0x000020, "Member 'BaseTween_AppendTweenScaleWidgetTo::Delay' has a wrong offset!");
static_assert(offsetof(BaseTween_AppendTweenScaleWidgetTo, TimeScale) == 0x000024, "Member 'BaseTween_AppendTweenScaleWidgetTo::TimeScale' has a wrong offset!");
static_assert(offsetof(BaseTween_AppendTweenScaleWidgetTo, TweenWhileGameIsPaused) == 0x000028, "Member 'BaseTween_AppendTweenScaleWidgetTo::TweenWhileGameIsPaused' has a wrong offset!");
static_assert(offsetof(BaseTween_AppendTweenScaleWidgetTo, ReturnValue) == 0x000030, "Member 'BaseTween_AppendTweenScaleWidgetTo::ReturnValue' has a wrong offset!");

// Function TweenMaker.BaseTween.AppendTweenSceneComponentFollowSpline
// 0x0038 (0x0038 - 0x0000)
struct BaseTween_AppendTweenSceneComponentFollowSpline final
{
public:
	class USceneComponent*                        TweenTarget;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, InstancedReference, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USplineComponent*                       Spline;                                            // 0x0008(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Duration;                                          // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ApplyRotation;                                     // 0x0014(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ApplyScale;                                        // 0x0015(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          UseConstantSpeed;                                  // 0x0016(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETweenEaseType                                EaseType;                                          // 0x0017(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          DeleteTweenOnHit;                                  // 0x0018(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          DeleteTweenOnOverlap;                              // 0x0019(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1A[0x2];                                       // 0x001A(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         NumLoops;                                          // 0x001C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETweenLoopType                                LoopType;                                          // 0x0020(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_21[0x3];                                       // 0x0021(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Delay;                                             // 0x0024(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TimeScale;                                         // 0x0028(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          TweenWhileGameIsPaused;                            // 0x002C(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2D[0x3];                                       // 0x002D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UTweenFloat*                            ReturnValue;                                       // 0x0030(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BaseTween_AppendTweenSceneComponentFollowSpline) == 0x000008, "Wrong alignment on BaseTween_AppendTweenSceneComponentFollowSpline");
static_assert(sizeof(BaseTween_AppendTweenSceneComponentFollowSpline) == 0x000038, "Wrong size on BaseTween_AppendTweenSceneComponentFollowSpline");
static_assert(offsetof(BaseTween_AppendTweenSceneComponentFollowSpline, TweenTarget) == 0x000000, "Member 'BaseTween_AppendTweenSceneComponentFollowSpline::TweenTarget' has a wrong offset!");
static_assert(offsetof(BaseTween_AppendTweenSceneComponentFollowSpline, Spline) == 0x000008, "Member 'BaseTween_AppendTweenSceneComponentFollowSpline::Spline' has a wrong offset!");
static_assert(offsetof(BaseTween_AppendTweenSceneComponentFollowSpline, Duration) == 0x000010, "Member 'BaseTween_AppendTweenSceneComponentFollowSpline::Duration' has a wrong offset!");
static_assert(offsetof(BaseTween_AppendTweenSceneComponentFollowSpline, ApplyRotation) == 0x000014, "Member 'BaseTween_AppendTweenSceneComponentFollowSpline::ApplyRotation' has a wrong offset!");
static_assert(offsetof(BaseTween_AppendTweenSceneComponentFollowSpline, ApplyScale) == 0x000015, "Member 'BaseTween_AppendTweenSceneComponentFollowSpline::ApplyScale' has a wrong offset!");
static_assert(offsetof(BaseTween_AppendTweenSceneComponentFollowSpline, UseConstantSpeed) == 0x000016, "Member 'BaseTween_AppendTweenSceneComponentFollowSpline::UseConstantSpeed' has a wrong offset!");
static_assert(offsetof(BaseTween_AppendTweenSceneComponentFollowSpline, EaseType) == 0x000017, "Member 'BaseTween_AppendTweenSceneComponentFollowSpline::EaseType' has a wrong offset!");
static_assert(offsetof(BaseTween_AppendTweenSceneComponentFollowSpline, DeleteTweenOnHit) == 0x000018, "Member 'BaseTween_AppendTweenSceneComponentFollowSpline::DeleteTweenOnHit' has a wrong offset!");
static_assert(offsetof(BaseTween_AppendTweenSceneComponentFollowSpline, DeleteTweenOnOverlap) == 0x000019, "Member 'BaseTween_AppendTweenSceneComponentFollowSpline::DeleteTweenOnOverlap' has a wrong offset!");
static_assert(offsetof(BaseTween_AppendTweenSceneComponentFollowSpline, NumLoops) == 0x00001C, "Member 'BaseTween_AppendTweenSceneComponentFollowSpline::NumLoops' has a wrong offset!");
static_assert(offsetof(BaseTween_AppendTweenSceneComponentFollowSpline, LoopType) == 0x000020, "Member 'BaseTween_AppendTweenSceneComponentFollowSpline::LoopType' has a wrong offset!");
static_assert(offsetof(BaseTween_AppendTweenSceneComponentFollowSpline, Delay) == 0x000024, "Member 'BaseTween_AppendTweenSceneComponentFollowSpline::Delay' has a wrong offset!");
static_assert(offsetof(BaseTween_AppendTweenSceneComponentFollowSpline, TimeScale) == 0x000028, "Member 'BaseTween_AppendTweenSceneComponentFollowSpline::TimeScale' has a wrong offset!");
static_assert(offsetof(BaseTween_AppendTweenSceneComponentFollowSpline, TweenWhileGameIsPaused) == 0x00002C, "Member 'BaseTween_AppendTweenSceneComponentFollowSpline::TweenWhileGameIsPaused' has a wrong offset!");
static_assert(offsetof(BaseTween_AppendTweenSceneComponentFollowSpline, ReturnValue) == 0x000030, "Member 'BaseTween_AppendTweenSceneComponentFollowSpline::ReturnValue' has a wrong offset!");

// Function TweenMaker.BaseTween.AppendTweenShearWidgetTo
// 0x0038 (0x0038 - 0x0000)
struct BaseTween_AppendTweenShearWidgetTo final
{
public:
	class UWidget*                                TweenTarget;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, InstancedReference, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2D                              To;                                                // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Duration;                                          // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETweenEaseType                                EaseType;                                          // 0x0014(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_15[0x3];                                       // 0x0015(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         NumLoops;                                          // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETweenLoopType                                LoopType;                                          // 0x001C(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1D[0x3];                                       // 0x001D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Delay;                                             // 0x0020(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TimeScale;                                         // 0x0024(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          TweenWhileGameIsPaused;                            // 0x0028(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_29[0x7];                                       // 0x0029(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UTweenVector2D*                         ReturnValue;                                       // 0x0030(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BaseTween_AppendTweenShearWidgetTo) == 0x000008, "Wrong alignment on BaseTween_AppendTweenShearWidgetTo");
static_assert(sizeof(BaseTween_AppendTweenShearWidgetTo) == 0x000038, "Wrong size on BaseTween_AppendTweenShearWidgetTo");
static_assert(offsetof(BaseTween_AppendTweenShearWidgetTo, TweenTarget) == 0x000000, "Member 'BaseTween_AppendTweenShearWidgetTo::TweenTarget' has a wrong offset!");
static_assert(offsetof(BaseTween_AppendTweenShearWidgetTo, To) == 0x000008, "Member 'BaseTween_AppendTweenShearWidgetTo::To' has a wrong offset!");
static_assert(offsetof(BaseTween_AppendTweenShearWidgetTo, Duration) == 0x000010, "Member 'BaseTween_AppendTweenShearWidgetTo::Duration' has a wrong offset!");
static_assert(offsetof(BaseTween_AppendTweenShearWidgetTo, EaseType) == 0x000014, "Member 'BaseTween_AppendTweenShearWidgetTo::EaseType' has a wrong offset!");
static_assert(offsetof(BaseTween_AppendTweenShearWidgetTo, NumLoops) == 0x000018, "Member 'BaseTween_AppendTweenShearWidgetTo::NumLoops' has a wrong offset!");
static_assert(offsetof(BaseTween_AppendTweenShearWidgetTo, LoopType) == 0x00001C, "Member 'BaseTween_AppendTweenShearWidgetTo::LoopType' has a wrong offset!");
static_assert(offsetof(BaseTween_AppendTweenShearWidgetTo, Delay) == 0x000020, "Member 'BaseTween_AppendTweenShearWidgetTo::Delay' has a wrong offset!");
static_assert(offsetof(BaseTween_AppendTweenShearWidgetTo, TimeScale) == 0x000024, "Member 'BaseTween_AppendTweenShearWidgetTo::TimeScale' has a wrong offset!");
static_assert(offsetof(BaseTween_AppendTweenShearWidgetTo, TweenWhileGameIsPaused) == 0x000028, "Member 'BaseTween_AppendTweenShearWidgetTo::TweenWhileGameIsPaused' has a wrong offset!");
static_assert(offsetof(BaseTween_AppendTweenShearWidgetTo, ReturnValue) == 0x000030, "Member 'BaseTween_AppendTweenShearWidgetTo::ReturnValue' has a wrong offset!");

// Function TweenMaker.BaseTween.AppendTweenWidgetAngleTo
// 0x0030 (0x0030 - 0x0000)
struct BaseTween_AppendTweenWidgetAngleTo final
{
public:
	class UWidget*                                TweenTarget;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, InstancedReference, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         To;                                                // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Duration;                                          // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETweenEaseType                                EaseType;                                          // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x3];                                       // 0x0011(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         NumLoops;                                          // 0x0014(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETweenLoopType                                LoopType;                                          // 0x0018(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x3];                                       // 0x0019(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Delay;                                             // 0x001C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TimeScale;                                         // 0x0020(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          TweenWhileGameIsPaused;                            // 0x0024(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_25[0x3];                                       // 0x0025(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UTweenFloat*                            ReturnValue;                                       // 0x0028(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BaseTween_AppendTweenWidgetAngleTo) == 0x000008, "Wrong alignment on BaseTween_AppendTweenWidgetAngleTo");
static_assert(sizeof(BaseTween_AppendTweenWidgetAngleTo) == 0x000030, "Wrong size on BaseTween_AppendTweenWidgetAngleTo");
static_assert(offsetof(BaseTween_AppendTweenWidgetAngleTo, TweenTarget) == 0x000000, "Member 'BaseTween_AppendTweenWidgetAngleTo::TweenTarget' has a wrong offset!");
static_assert(offsetof(BaseTween_AppendTweenWidgetAngleTo, To) == 0x000008, "Member 'BaseTween_AppendTweenWidgetAngleTo::To' has a wrong offset!");
static_assert(offsetof(BaseTween_AppendTweenWidgetAngleTo, Duration) == 0x00000C, "Member 'BaseTween_AppendTweenWidgetAngleTo::Duration' has a wrong offset!");
static_assert(offsetof(BaseTween_AppendTweenWidgetAngleTo, EaseType) == 0x000010, "Member 'BaseTween_AppendTweenWidgetAngleTo::EaseType' has a wrong offset!");
static_assert(offsetof(BaseTween_AppendTweenWidgetAngleTo, NumLoops) == 0x000014, "Member 'BaseTween_AppendTweenWidgetAngleTo::NumLoops' has a wrong offset!");
static_assert(offsetof(BaseTween_AppendTweenWidgetAngleTo, LoopType) == 0x000018, "Member 'BaseTween_AppendTweenWidgetAngleTo::LoopType' has a wrong offset!");
static_assert(offsetof(BaseTween_AppendTweenWidgetAngleTo, Delay) == 0x00001C, "Member 'BaseTween_AppendTweenWidgetAngleTo::Delay' has a wrong offset!");
static_assert(offsetof(BaseTween_AppendTweenWidgetAngleTo, TimeScale) == 0x000020, "Member 'BaseTween_AppendTweenWidgetAngleTo::TimeScale' has a wrong offset!");
static_assert(offsetof(BaseTween_AppendTweenWidgetAngleTo, TweenWhileGameIsPaused) == 0x000024, "Member 'BaseTween_AppendTweenWidgetAngleTo::TweenWhileGameIsPaused' has a wrong offset!");
static_assert(offsetof(BaseTween_AppendTweenWidgetAngleTo, ReturnValue) == 0x000028, "Member 'BaseTween_AppendTweenWidgetAngleTo::ReturnValue' has a wrong offset!");

// Function TweenMaker.BaseTween.AppendTweenWidgetOpacityTo
// 0x0030 (0x0030 - 0x0000)
struct BaseTween_AppendTweenWidgetOpacityTo final
{
public:
	class UWidget*                                TweenTarget;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, InstancedReference, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         To;                                                // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Duration;                                          // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETweenEaseType                                EaseType;                                          // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x3];                                       // 0x0011(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         NumLoops;                                          // 0x0014(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETweenLoopType                                LoopType;                                          // 0x0018(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x3];                                       // 0x0019(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Delay;                                             // 0x001C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TimeScale;                                         // 0x0020(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          TweenWhileGameIsPaused;                            // 0x0024(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_25[0x3];                                       // 0x0025(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UTweenFloat*                            ReturnValue;                                       // 0x0028(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BaseTween_AppendTweenWidgetOpacityTo) == 0x000008, "Wrong alignment on BaseTween_AppendTweenWidgetOpacityTo");
static_assert(sizeof(BaseTween_AppendTweenWidgetOpacityTo) == 0x000030, "Wrong size on BaseTween_AppendTweenWidgetOpacityTo");
static_assert(offsetof(BaseTween_AppendTweenWidgetOpacityTo, TweenTarget) == 0x000000, "Member 'BaseTween_AppendTweenWidgetOpacityTo::TweenTarget' has a wrong offset!");
static_assert(offsetof(BaseTween_AppendTweenWidgetOpacityTo, To) == 0x000008, "Member 'BaseTween_AppendTweenWidgetOpacityTo::To' has a wrong offset!");
static_assert(offsetof(BaseTween_AppendTweenWidgetOpacityTo, Duration) == 0x00000C, "Member 'BaseTween_AppendTweenWidgetOpacityTo::Duration' has a wrong offset!");
static_assert(offsetof(BaseTween_AppendTweenWidgetOpacityTo, EaseType) == 0x000010, "Member 'BaseTween_AppendTweenWidgetOpacityTo::EaseType' has a wrong offset!");
static_assert(offsetof(BaseTween_AppendTweenWidgetOpacityTo, NumLoops) == 0x000014, "Member 'BaseTween_AppendTweenWidgetOpacityTo::NumLoops' has a wrong offset!");
static_assert(offsetof(BaseTween_AppendTweenWidgetOpacityTo, LoopType) == 0x000018, "Member 'BaseTween_AppendTweenWidgetOpacityTo::LoopType' has a wrong offset!");
static_assert(offsetof(BaseTween_AppendTweenWidgetOpacityTo, Delay) == 0x00001C, "Member 'BaseTween_AppendTweenWidgetOpacityTo::Delay' has a wrong offset!");
static_assert(offsetof(BaseTween_AppendTweenWidgetOpacityTo, TimeScale) == 0x000020, "Member 'BaseTween_AppendTweenWidgetOpacityTo::TimeScale' has a wrong offset!");
static_assert(offsetof(BaseTween_AppendTweenWidgetOpacityTo, TweenWhileGameIsPaused) == 0x000024, "Member 'BaseTween_AppendTweenWidgetOpacityTo::TweenWhileGameIsPaused' has a wrong offset!");
static_assert(offsetof(BaseTween_AppendTweenWidgetOpacityTo, ReturnValue) == 0x000028, "Member 'BaseTween_AppendTweenWidgetOpacityTo::ReturnValue' has a wrong offset!");

// Function TweenMaker.BaseTween.DeleteTween
// 0x0001 (0x0001 - 0x0000)
struct BaseTween_DeleteTween final
{
public:
	bool                                          FireEndEvent;                                      // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BaseTween_DeleteTween) == 0x000001, "Wrong alignment on BaseTween_DeleteTween");
static_assert(sizeof(BaseTween_DeleteTween) == 0x000001, "Wrong size on BaseTween_DeleteTween");
static_assert(offsetof(BaseTween_DeleteTween, FireEndEvent) == 0x000000, "Member 'BaseTween_DeleteTween::FireEndEvent' has a wrong offset!");

// Function TweenMaker.BaseTween.JoinTweenActorFollowSpline
// 0x0030 (0x0030 - 0x0000)
struct BaseTween_JoinTweenActorFollowSpline final
{
public:
	class AActor*                                 TweenTarget;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USplineComponent*                       Spline;                                            // 0x0008(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Duration;                                          // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ApplyRotation;                                     // 0x0014(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ApplyScale;                                        // 0x0015(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          UseConstantSpeed;                                  // 0x0016(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETweenEaseType                                EaseType;                                          // 0x0017(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          DeleteTweenOnHit;                                  // 0x0018(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          DeleteTweenOnOverlap;                              // 0x0019(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1A[0x2];                                       // 0x001A(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Delay;                                             // 0x001C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TimeScale;                                         // 0x0020(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          TweenWhileGameIsPaused;                            // 0x0024(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_25[0x3];                                       // 0x0025(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UTweenFloat*                            ReturnValue;                                       // 0x0028(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BaseTween_JoinTweenActorFollowSpline) == 0x000008, "Wrong alignment on BaseTween_JoinTweenActorFollowSpline");
static_assert(sizeof(BaseTween_JoinTweenActorFollowSpline) == 0x000030, "Wrong size on BaseTween_JoinTweenActorFollowSpline");
static_assert(offsetof(BaseTween_JoinTweenActorFollowSpline, TweenTarget) == 0x000000, "Member 'BaseTween_JoinTweenActorFollowSpline::TweenTarget' has a wrong offset!");
static_assert(offsetof(BaseTween_JoinTweenActorFollowSpline, Spline) == 0x000008, "Member 'BaseTween_JoinTweenActorFollowSpline::Spline' has a wrong offset!");
static_assert(offsetof(BaseTween_JoinTweenActorFollowSpline, Duration) == 0x000010, "Member 'BaseTween_JoinTweenActorFollowSpline::Duration' has a wrong offset!");
static_assert(offsetof(BaseTween_JoinTweenActorFollowSpline, ApplyRotation) == 0x000014, "Member 'BaseTween_JoinTweenActorFollowSpline::ApplyRotation' has a wrong offset!");
static_assert(offsetof(BaseTween_JoinTweenActorFollowSpline, ApplyScale) == 0x000015, "Member 'BaseTween_JoinTweenActorFollowSpline::ApplyScale' has a wrong offset!");
static_assert(offsetof(BaseTween_JoinTweenActorFollowSpline, UseConstantSpeed) == 0x000016, "Member 'BaseTween_JoinTweenActorFollowSpline::UseConstantSpeed' has a wrong offset!");
static_assert(offsetof(BaseTween_JoinTweenActorFollowSpline, EaseType) == 0x000017, "Member 'BaseTween_JoinTweenActorFollowSpline::EaseType' has a wrong offset!");
static_assert(offsetof(BaseTween_JoinTweenActorFollowSpline, DeleteTweenOnHit) == 0x000018, "Member 'BaseTween_JoinTweenActorFollowSpline::DeleteTweenOnHit' has a wrong offset!");
static_assert(offsetof(BaseTween_JoinTweenActorFollowSpline, DeleteTweenOnOverlap) == 0x000019, "Member 'BaseTween_JoinTweenActorFollowSpline::DeleteTweenOnOverlap' has a wrong offset!");
static_assert(offsetof(BaseTween_JoinTweenActorFollowSpline, Delay) == 0x00001C, "Member 'BaseTween_JoinTweenActorFollowSpline::Delay' has a wrong offset!");
static_assert(offsetof(BaseTween_JoinTweenActorFollowSpline, TimeScale) == 0x000020, "Member 'BaseTween_JoinTweenActorFollowSpline::TimeScale' has a wrong offset!");
static_assert(offsetof(BaseTween_JoinTweenActorFollowSpline, TweenWhileGameIsPaused) == 0x000024, "Member 'BaseTween_JoinTweenActorFollowSpline::TweenWhileGameIsPaused' has a wrong offset!");
static_assert(offsetof(BaseTween_JoinTweenActorFollowSpline, ReturnValue) == 0x000028, "Member 'BaseTween_JoinTweenActorFollowSpline::ReturnValue' has a wrong offset!");

// Function TweenMaker.BaseTween.JoinTweenCustomFloat
// 0x0030 (0x0030 - 0x0000)
struct BaseTween_JoinTweenCustomFloat final
{
public:
	class UObject*                                TweenTarget;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         From;                                              // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         To;                                                // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Duration;                                          // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETweenEaseType                                EaseType;                                          // 0x0014(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_15[0x3];                                       // 0x0015(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Delay;                                             // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TimeScale;                                         // 0x001C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          TweenWhileGameIsPaused;                            // 0x0020(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_21[0x7];                                       // 0x0021(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UTweenFloat*                            ReturnValue;                                       // 0x0028(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BaseTween_JoinTweenCustomFloat) == 0x000008, "Wrong alignment on BaseTween_JoinTweenCustomFloat");
static_assert(sizeof(BaseTween_JoinTweenCustomFloat) == 0x000030, "Wrong size on BaseTween_JoinTweenCustomFloat");
static_assert(offsetof(BaseTween_JoinTweenCustomFloat, TweenTarget) == 0x000000, "Member 'BaseTween_JoinTweenCustomFloat::TweenTarget' has a wrong offset!");
static_assert(offsetof(BaseTween_JoinTweenCustomFloat, From) == 0x000008, "Member 'BaseTween_JoinTweenCustomFloat::From' has a wrong offset!");
static_assert(offsetof(BaseTween_JoinTweenCustomFloat, To) == 0x00000C, "Member 'BaseTween_JoinTweenCustomFloat::To' has a wrong offset!");
static_assert(offsetof(BaseTween_JoinTweenCustomFloat, Duration) == 0x000010, "Member 'BaseTween_JoinTweenCustomFloat::Duration' has a wrong offset!");
static_assert(offsetof(BaseTween_JoinTweenCustomFloat, EaseType) == 0x000014, "Member 'BaseTween_JoinTweenCustomFloat::EaseType' has a wrong offset!");
static_assert(offsetof(BaseTween_JoinTweenCustomFloat, Delay) == 0x000018, "Member 'BaseTween_JoinTweenCustomFloat::Delay' has a wrong offset!");
static_assert(offsetof(BaseTween_JoinTweenCustomFloat, TimeScale) == 0x00001C, "Member 'BaseTween_JoinTweenCustomFloat::TimeScale' has a wrong offset!");
static_assert(offsetof(BaseTween_JoinTweenCustomFloat, TweenWhileGameIsPaused) == 0x000020, "Member 'BaseTween_JoinTweenCustomFloat::TweenWhileGameIsPaused' has a wrong offset!");
static_assert(offsetof(BaseTween_JoinTweenCustomFloat, ReturnValue) == 0x000028, "Member 'BaseTween_JoinTweenCustomFloat::ReturnValue' has a wrong offset!");

// Function TweenMaker.BaseTween.JoinTweenCustomVector
// 0x0040 (0x0040 - 0x0000)
struct BaseTween_JoinTweenCustomVector final
{
public:
	class UObject*                                TweenTarget;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                From;                                              // 0x0008(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                To;                                                // 0x0014(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Duration;                                          // 0x0020(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETweenEaseType                                EaseType;                                          // 0x0024(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_25[0x3];                                       // 0x0025(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Delay;                                             // 0x0028(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TimeScale;                                         // 0x002C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          TweenWhileGameIsPaused;                            // 0x0030(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_31[0x7];                                       // 0x0031(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UTweenVector*                           ReturnValue;                                       // 0x0038(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BaseTween_JoinTweenCustomVector) == 0x000008, "Wrong alignment on BaseTween_JoinTweenCustomVector");
static_assert(sizeof(BaseTween_JoinTweenCustomVector) == 0x000040, "Wrong size on BaseTween_JoinTweenCustomVector");
static_assert(offsetof(BaseTween_JoinTweenCustomVector, TweenTarget) == 0x000000, "Member 'BaseTween_JoinTweenCustomVector::TweenTarget' has a wrong offset!");
static_assert(offsetof(BaseTween_JoinTweenCustomVector, From) == 0x000008, "Member 'BaseTween_JoinTweenCustomVector::From' has a wrong offset!");
static_assert(offsetof(BaseTween_JoinTweenCustomVector, To) == 0x000014, "Member 'BaseTween_JoinTweenCustomVector::To' has a wrong offset!");
static_assert(offsetof(BaseTween_JoinTweenCustomVector, Duration) == 0x000020, "Member 'BaseTween_JoinTweenCustomVector::Duration' has a wrong offset!");
static_assert(offsetof(BaseTween_JoinTweenCustomVector, EaseType) == 0x000024, "Member 'BaseTween_JoinTweenCustomVector::EaseType' has a wrong offset!");
static_assert(offsetof(BaseTween_JoinTweenCustomVector, Delay) == 0x000028, "Member 'BaseTween_JoinTweenCustomVector::Delay' has a wrong offset!");
static_assert(offsetof(BaseTween_JoinTweenCustomVector, TimeScale) == 0x00002C, "Member 'BaseTween_JoinTweenCustomVector::TimeScale' has a wrong offset!");
static_assert(offsetof(BaseTween_JoinTweenCustomVector, TweenWhileGameIsPaused) == 0x000030, "Member 'BaseTween_JoinTweenCustomVector::TweenWhileGameIsPaused' has a wrong offset!");
static_assert(offsetof(BaseTween_JoinTweenCustomVector, ReturnValue) == 0x000038, "Member 'BaseTween_JoinTweenCustomVector::ReturnValue' has a wrong offset!");

// Function TweenMaker.BaseTween.JoinTweenCustomVector2D
// 0x0038 (0x0038 - 0x0000)
struct BaseTween_JoinTweenCustomVector2D final
{
public:
	class UObject*                                TweenTarget;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2D                              From;                                              // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2D                              To;                                                // 0x0010(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Duration;                                          // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETweenEaseType                                EaseType;                                          // 0x001C(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1D[0x3];                                       // 0x001D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Delay;                                             // 0x0020(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TimeScale;                                         // 0x0024(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          TweenWhileGameIsPaused;                            // 0x0028(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_29[0x7];                                       // 0x0029(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UTweenVector2D*                         ReturnValue;                                       // 0x0030(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BaseTween_JoinTweenCustomVector2D) == 0x000008, "Wrong alignment on BaseTween_JoinTweenCustomVector2D");
static_assert(sizeof(BaseTween_JoinTweenCustomVector2D) == 0x000038, "Wrong size on BaseTween_JoinTweenCustomVector2D");
static_assert(offsetof(BaseTween_JoinTweenCustomVector2D, TweenTarget) == 0x000000, "Member 'BaseTween_JoinTweenCustomVector2D::TweenTarget' has a wrong offset!");
static_assert(offsetof(BaseTween_JoinTweenCustomVector2D, From) == 0x000008, "Member 'BaseTween_JoinTweenCustomVector2D::From' has a wrong offset!");
static_assert(offsetof(BaseTween_JoinTweenCustomVector2D, To) == 0x000010, "Member 'BaseTween_JoinTweenCustomVector2D::To' has a wrong offset!");
static_assert(offsetof(BaseTween_JoinTweenCustomVector2D, Duration) == 0x000018, "Member 'BaseTween_JoinTweenCustomVector2D::Duration' has a wrong offset!");
static_assert(offsetof(BaseTween_JoinTweenCustomVector2D, EaseType) == 0x00001C, "Member 'BaseTween_JoinTweenCustomVector2D::EaseType' has a wrong offset!");
static_assert(offsetof(BaseTween_JoinTweenCustomVector2D, Delay) == 0x000020, "Member 'BaseTween_JoinTweenCustomVector2D::Delay' has a wrong offset!");
static_assert(offsetof(BaseTween_JoinTweenCustomVector2D, TimeScale) == 0x000024, "Member 'BaseTween_JoinTweenCustomVector2D::TimeScale' has a wrong offset!");
static_assert(offsetof(BaseTween_JoinTweenCustomVector2D, TweenWhileGameIsPaused) == 0x000028, "Member 'BaseTween_JoinTweenCustomVector2D::TweenWhileGameIsPaused' has a wrong offset!");
static_assert(offsetof(BaseTween_JoinTweenCustomVector2D, ReturnValue) == 0x000030, "Member 'BaseTween_JoinTweenCustomVector2D::ReturnValue' has a wrong offset!");

// Function TweenMaker.BaseTween.JoinTweenMaterialFloatFromTo
// 0x0038 (0x0038 - 0x0000)
struct BaseTween_JoinTweenMaterialFloatFromTo final
{
public:
	class UMaterialInstanceDynamic*               TweenTarget;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   ParameterName;                                     // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         From;                                              // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         To;                                                // 0x0014(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Duration;                                          // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETweenEaseType                                EaseType;                                          // 0x001C(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1D[0x3];                                       // 0x001D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Delay;                                             // 0x0020(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TimeScale;                                         // 0x0024(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          TweenWhileGameIsPaused;                            // 0x0028(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_29[0x7];                                       // 0x0029(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UTweenFloat*                            ReturnValue;                                       // 0x0030(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BaseTween_JoinTweenMaterialFloatFromTo) == 0x000008, "Wrong alignment on BaseTween_JoinTweenMaterialFloatFromTo");
static_assert(sizeof(BaseTween_JoinTweenMaterialFloatFromTo) == 0x000038, "Wrong size on BaseTween_JoinTweenMaterialFloatFromTo");
static_assert(offsetof(BaseTween_JoinTweenMaterialFloatFromTo, TweenTarget) == 0x000000, "Member 'BaseTween_JoinTweenMaterialFloatFromTo::TweenTarget' has a wrong offset!");
static_assert(offsetof(BaseTween_JoinTweenMaterialFloatFromTo, ParameterName) == 0x000008, "Member 'BaseTween_JoinTweenMaterialFloatFromTo::ParameterName' has a wrong offset!");
static_assert(offsetof(BaseTween_JoinTweenMaterialFloatFromTo, From) == 0x000010, "Member 'BaseTween_JoinTweenMaterialFloatFromTo::From' has a wrong offset!");
static_assert(offsetof(BaseTween_JoinTweenMaterialFloatFromTo, To) == 0x000014, "Member 'BaseTween_JoinTweenMaterialFloatFromTo::To' has a wrong offset!");
static_assert(offsetof(BaseTween_JoinTweenMaterialFloatFromTo, Duration) == 0x000018, "Member 'BaseTween_JoinTweenMaterialFloatFromTo::Duration' has a wrong offset!");
static_assert(offsetof(BaseTween_JoinTweenMaterialFloatFromTo, EaseType) == 0x00001C, "Member 'BaseTween_JoinTweenMaterialFloatFromTo::EaseType' has a wrong offset!");
static_assert(offsetof(BaseTween_JoinTweenMaterialFloatFromTo, Delay) == 0x000020, "Member 'BaseTween_JoinTweenMaterialFloatFromTo::Delay' has a wrong offset!");
static_assert(offsetof(BaseTween_JoinTweenMaterialFloatFromTo, TimeScale) == 0x000024, "Member 'BaseTween_JoinTweenMaterialFloatFromTo::TimeScale' has a wrong offset!");
static_assert(offsetof(BaseTween_JoinTweenMaterialFloatFromTo, TweenWhileGameIsPaused) == 0x000028, "Member 'BaseTween_JoinTweenMaterialFloatFromTo::TweenWhileGameIsPaused' has a wrong offset!");
static_assert(offsetof(BaseTween_JoinTweenMaterialFloatFromTo, ReturnValue) == 0x000030, "Member 'BaseTween_JoinTweenMaterialFloatFromTo::ReturnValue' has a wrong offset!");

// Function TweenMaker.BaseTween.JoinTweenMaterialFloatTo
// 0x0030 (0x0030 - 0x0000)
struct BaseTween_JoinTweenMaterialFloatTo final
{
public:
	class UMaterialInstanceDynamic*               TweenTarget;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   ParameterName;                                     // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         To;                                                // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Duration;                                          // 0x0014(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETweenEaseType                                EaseType;                                          // 0x0018(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x3];                                       // 0x0019(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Delay;                                             // 0x001C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TimeScale;                                         // 0x0020(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          TweenWhileGameIsPaused;                            // 0x0024(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_25[0x3];                                       // 0x0025(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UTweenFloat*                            ReturnValue;                                       // 0x0028(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BaseTween_JoinTweenMaterialFloatTo) == 0x000008, "Wrong alignment on BaseTween_JoinTweenMaterialFloatTo");
static_assert(sizeof(BaseTween_JoinTweenMaterialFloatTo) == 0x000030, "Wrong size on BaseTween_JoinTweenMaterialFloatTo");
static_assert(offsetof(BaseTween_JoinTweenMaterialFloatTo, TweenTarget) == 0x000000, "Member 'BaseTween_JoinTweenMaterialFloatTo::TweenTarget' has a wrong offset!");
static_assert(offsetof(BaseTween_JoinTweenMaterialFloatTo, ParameterName) == 0x000008, "Member 'BaseTween_JoinTweenMaterialFloatTo::ParameterName' has a wrong offset!");
static_assert(offsetof(BaseTween_JoinTweenMaterialFloatTo, To) == 0x000010, "Member 'BaseTween_JoinTweenMaterialFloatTo::To' has a wrong offset!");
static_assert(offsetof(BaseTween_JoinTweenMaterialFloatTo, Duration) == 0x000014, "Member 'BaseTween_JoinTweenMaterialFloatTo::Duration' has a wrong offset!");
static_assert(offsetof(BaseTween_JoinTweenMaterialFloatTo, EaseType) == 0x000018, "Member 'BaseTween_JoinTweenMaterialFloatTo::EaseType' has a wrong offset!");
static_assert(offsetof(BaseTween_JoinTweenMaterialFloatTo, Delay) == 0x00001C, "Member 'BaseTween_JoinTweenMaterialFloatTo::Delay' has a wrong offset!");
static_assert(offsetof(BaseTween_JoinTweenMaterialFloatTo, TimeScale) == 0x000020, "Member 'BaseTween_JoinTweenMaterialFloatTo::TimeScale' has a wrong offset!");
static_assert(offsetof(BaseTween_JoinTweenMaterialFloatTo, TweenWhileGameIsPaused) == 0x000024, "Member 'BaseTween_JoinTweenMaterialFloatTo::TweenWhileGameIsPaused' has a wrong offset!");
static_assert(offsetof(BaseTween_JoinTweenMaterialFloatTo, ReturnValue) == 0x000028, "Member 'BaseTween_JoinTweenMaterialFloatTo::ReturnValue' has a wrong offset!");

// Function TweenMaker.BaseTween.JoinTweenMaterialVectorFromTo
// 0x0050 (0x0050 - 0x0000)
struct BaseTween_JoinTweenMaterialVectorFromTo final
{
public:
	class UMaterialInstanceDynamic*               TweenTarget;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   ParameterName;                                     // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           From;                                              // 0x0010(0x0010)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           To;                                                // 0x0020(0x0010)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Duration;                                          // 0x0030(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETweenEaseType                                EaseType;                                          // 0x0034(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_35[0x3];                                       // 0x0035(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Delay;                                             // 0x0038(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TimeScale;                                         // 0x003C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          TweenWhileGameIsPaused;                            // 0x0040(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_41[0x7];                                       // 0x0041(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UTweenLinearColor*                      ReturnValue;                                       // 0x0048(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BaseTween_JoinTweenMaterialVectorFromTo) == 0x000008, "Wrong alignment on BaseTween_JoinTweenMaterialVectorFromTo");
static_assert(sizeof(BaseTween_JoinTweenMaterialVectorFromTo) == 0x000050, "Wrong size on BaseTween_JoinTweenMaterialVectorFromTo");
static_assert(offsetof(BaseTween_JoinTweenMaterialVectorFromTo, TweenTarget) == 0x000000, "Member 'BaseTween_JoinTweenMaterialVectorFromTo::TweenTarget' has a wrong offset!");
static_assert(offsetof(BaseTween_JoinTweenMaterialVectorFromTo, ParameterName) == 0x000008, "Member 'BaseTween_JoinTweenMaterialVectorFromTo::ParameterName' has a wrong offset!");
static_assert(offsetof(BaseTween_JoinTweenMaterialVectorFromTo, From) == 0x000010, "Member 'BaseTween_JoinTweenMaterialVectorFromTo::From' has a wrong offset!");
static_assert(offsetof(BaseTween_JoinTweenMaterialVectorFromTo, To) == 0x000020, "Member 'BaseTween_JoinTweenMaterialVectorFromTo::To' has a wrong offset!");
static_assert(offsetof(BaseTween_JoinTweenMaterialVectorFromTo, Duration) == 0x000030, "Member 'BaseTween_JoinTweenMaterialVectorFromTo::Duration' has a wrong offset!");
static_assert(offsetof(BaseTween_JoinTweenMaterialVectorFromTo, EaseType) == 0x000034, "Member 'BaseTween_JoinTweenMaterialVectorFromTo::EaseType' has a wrong offset!");
static_assert(offsetof(BaseTween_JoinTweenMaterialVectorFromTo, Delay) == 0x000038, "Member 'BaseTween_JoinTweenMaterialVectorFromTo::Delay' has a wrong offset!");
static_assert(offsetof(BaseTween_JoinTweenMaterialVectorFromTo, TimeScale) == 0x00003C, "Member 'BaseTween_JoinTweenMaterialVectorFromTo::TimeScale' has a wrong offset!");
static_assert(offsetof(BaseTween_JoinTweenMaterialVectorFromTo, TweenWhileGameIsPaused) == 0x000040, "Member 'BaseTween_JoinTweenMaterialVectorFromTo::TweenWhileGameIsPaused' has a wrong offset!");
static_assert(offsetof(BaseTween_JoinTweenMaterialVectorFromTo, ReturnValue) == 0x000048, "Member 'BaseTween_JoinTweenMaterialVectorFromTo::ReturnValue' has a wrong offset!");

// Function TweenMaker.BaseTween.JoinTweenMaterialVectorTo
// 0x0040 (0x0040 - 0x0000)
struct BaseTween_JoinTweenMaterialVectorTo final
{
public:
	class UMaterialInstanceDynamic*               TweenTarget;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   ParameterName;                                     // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           To;                                                // 0x0010(0x0010)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Duration;                                          // 0x0020(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETweenEaseType                                EaseType;                                          // 0x0024(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_25[0x3];                                       // 0x0025(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Delay;                                             // 0x0028(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TimeScale;                                         // 0x002C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          TweenWhileGameIsPaused;                            // 0x0030(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_31[0x7];                                       // 0x0031(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UTweenLinearColor*                      ReturnValue;                                       // 0x0038(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BaseTween_JoinTweenMaterialVectorTo) == 0x000008, "Wrong alignment on BaseTween_JoinTweenMaterialVectorTo");
static_assert(sizeof(BaseTween_JoinTweenMaterialVectorTo) == 0x000040, "Wrong size on BaseTween_JoinTweenMaterialVectorTo");
static_assert(offsetof(BaseTween_JoinTweenMaterialVectorTo, TweenTarget) == 0x000000, "Member 'BaseTween_JoinTweenMaterialVectorTo::TweenTarget' has a wrong offset!");
static_assert(offsetof(BaseTween_JoinTweenMaterialVectorTo, ParameterName) == 0x000008, "Member 'BaseTween_JoinTweenMaterialVectorTo::ParameterName' has a wrong offset!");
static_assert(offsetof(BaseTween_JoinTweenMaterialVectorTo, To) == 0x000010, "Member 'BaseTween_JoinTweenMaterialVectorTo::To' has a wrong offset!");
static_assert(offsetof(BaseTween_JoinTweenMaterialVectorTo, Duration) == 0x000020, "Member 'BaseTween_JoinTweenMaterialVectorTo::Duration' has a wrong offset!");
static_assert(offsetof(BaseTween_JoinTweenMaterialVectorTo, EaseType) == 0x000024, "Member 'BaseTween_JoinTweenMaterialVectorTo::EaseType' has a wrong offset!");
static_assert(offsetof(BaseTween_JoinTweenMaterialVectorTo, Delay) == 0x000028, "Member 'BaseTween_JoinTweenMaterialVectorTo::Delay' has a wrong offset!");
static_assert(offsetof(BaseTween_JoinTweenMaterialVectorTo, TimeScale) == 0x00002C, "Member 'BaseTween_JoinTweenMaterialVectorTo::TimeScale' has a wrong offset!");
static_assert(offsetof(BaseTween_JoinTweenMaterialVectorTo, TweenWhileGameIsPaused) == 0x000030, "Member 'BaseTween_JoinTweenMaterialVectorTo::TweenWhileGameIsPaused' has a wrong offset!");
static_assert(offsetof(BaseTween_JoinTweenMaterialVectorTo, ReturnValue) == 0x000038, "Member 'BaseTween_JoinTweenMaterialVectorTo::ReturnValue' has a wrong offset!");

// Function TweenMaker.BaseTween.JoinTweenMoveActorBy
// 0x0030 (0x0030 - 0x0000)
struct BaseTween_JoinTweenMoveActorBy final
{
public:
	class AActor*                                 TweenTarget;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                bY;                                                // 0x0008(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Duration;                                          // 0x0014(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETweenEaseType                                EaseType;                                          // 0x0018(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          DeleteTweenOnHit;                                  // 0x0019(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          DeleteTweenOnOverlap;                              // 0x001A(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1B[0x1];                                       // 0x001B(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Delay;                                             // 0x001C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TimeScale;                                         // 0x0020(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          TweenWhileGameIsPaused;                            // 0x0024(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_25[0x3];                                       // 0x0025(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UTweenVector*                           ReturnValue;                                       // 0x0028(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BaseTween_JoinTweenMoveActorBy) == 0x000008, "Wrong alignment on BaseTween_JoinTweenMoveActorBy");
static_assert(sizeof(BaseTween_JoinTweenMoveActorBy) == 0x000030, "Wrong size on BaseTween_JoinTweenMoveActorBy");
static_assert(offsetof(BaseTween_JoinTweenMoveActorBy, TweenTarget) == 0x000000, "Member 'BaseTween_JoinTweenMoveActorBy::TweenTarget' has a wrong offset!");
static_assert(offsetof(BaseTween_JoinTweenMoveActorBy, bY) == 0x000008, "Member 'BaseTween_JoinTweenMoveActorBy::bY' has a wrong offset!");
static_assert(offsetof(BaseTween_JoinTweenMoveActorBy, Duration) == 0x000014, "Member 'BaseTween_JoinTweenMoveActorBy::Duration' has a wrong offset!");
static_assert(offsetof(BaseTween_JoinTweenMoveActorBy, EaseType) == 0x000018, "Member 'BaseTween_JoinTweenMoveActorBy::EaseType' has a wrong offset!");
static_assert(offsetof(BaseTween_JoinTweenMoveActorBy, DeleteTweenOnHit) == 0x000019, "Member 'BaseTween_JoinTweenMoveActorBy::DeleteTweenOnHit' has a wrong offset!");
static_assert(offsetof(BaseTween_JoinTweenMoveActorBy, DeleteTweenOnOverlap) == 0x00001A, "Member 'BaseTween_JoinTweenMoveActorBy::DeleteTweenOnOverlap' has a wrong offset!");
static_assert(offsetof(BaseTween_JoinTweenMoveActorBy, Delay) == 0x00001C, "Member 'BaseTween_JoinTweenMoveActorBy::Delay' has a wrong offset!");
static_assert(offsetof(BaseTween_JoinTweenMoveActorBy, TimeScale) == 0x000020, "Member 'BaseTween_JoinTweenMoveActorBy::TimeScale' has a wrong offset!");
static_assert(offsetof(BaseTween_JoinTweenMoveActorBy, TweenWhileGameIsPaused) == 0x000024, "Member 'BaseTween_JoinTweenMoveActorBy::TweenWhileGameIsPaused' has a wrong offset!");
static_assert(offsetof(BaseTween_JoinTweenMoveActorBy, ReturnValue) == 0x000028, "Member 'BaseTween_JoinTweenMoveActorBy::ReturnValue' has a wrong offset!");

// Function TweenMaker.BaseTween.JoinTweenMoveActorTo
// 0x0030 (0x0030 - 0x0000)
struct BaseTween_JoinTweenMoveActorTo final
{
public:
	class AActor*                                 TweenTarget;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                To;                                                // 0x0008(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Duration;                                          // 0x0014(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETweenEaseType                                EaseType;                                          // 0x0018(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETweenSpace                                   TweenSpace;                                        // 0x0019(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          DeleteTweenOnHit;                                  // 0x001A(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          DeleteTweenOnOverlap;                              // 0x001B(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Delay;                                             // 0x001C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TimeScale;                                         // 0x0020(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          TweenWhileGameIsPaused;                            // 0x0024(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_25[0x3];                                       // 0x0025(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UTweenVector*                           ReturnValue;                                       // 0x0028(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BaseTween_JoinTweenMoveActorTo) == 0x000008, "Wrong alignment on BaseTween_JoinTweenMoveActorTo");
static_assert(sizeof(BaseTween_JoinTweenMoveActorTo) == 0x000030, "Wrong size on BaseTween_JoinTweenMoveActorTo");
static_assert(offsetof(BaseTween_JoinTweenMoveActorTo, TweenTarget) == 0x000000, "Member 'BaseTween_JoinTweenMoveActorTo::TweenTarget' has a wrong offset!");
static_assert(offsetof(BaseTween_JoinTweenMoveActorTo, To) == 0x000008, "Member 'BaseTween_JoinTweenMoveActorTo::To' has a wrong offset!");
static_assert(offsetof(BaseTween_JoinTweenMoveActorTo, Duration) == 0x000014, "Member 'BaseTween_JoinTweenMoveActorTo::Duration' has a wrong offset!");
static_assert(offsetof(BaseTween_JoinTweenMoveActorTo, EaseType) == 0x000018, "Member 'BaseTween_JoinTweenMoveActorTo::EaseType' has a wrong offset!");
static_assert(offsetof(BaseTween_JoinTweenMoveActorTo, TweenSpace) == 0x000019, "Member 'BaseTween_JoinTweenMoveActorTo::TweenSpace' has a wrong offset!");
static_assert(offsetof(BaseTween_JoinTweenMoveActorTo, DeleteTweenOnHit) == 0x00001A, "Member 'BaseTween_JoinTweenMoveActorTo::DeleteTweenOnHit' has a wrong offset!");
static_assert(offsetof(BaseTween_JoinTweenMoveActorTo, DeleteTweenOnOverlap) == 0x00001B, "Member 'BaseTween_JoinTweenMoveActorTo::DeleteTweenOnOverlap' has a wrong offset!");
static_assert(offsetof(BaseTween_JoinTweenMoveActorTo, Delay) == 0x00001C, "Member 'BaseTween_JoinTweenMoveActorTo::Delay' has a wrong offset!");
static_assert(offsetof(BaseTween_JoinTweenMoveActorTo, TimeScale) == 0x000020, "Member 'BaseTween_JoinTweenMoveActorTo::TimeScale' has a wrong offset!");
static_assert(offsetof(BaseTween_JoinTweenMoveActorTo, TweenWhileGameIsPaused) == 0x000024, "Member 'BaseTween_JoinTweenMoveActorTo::TweenWhileGameIsPaused' has a wrong offset!");
static_assert(offsetof(BaseTween_JoinTweenMoveActorTo, ReturnValue) == 0x000028, "Member 'BaseTween_JoinTweenMoveActorTo::ReturnValue' has a wrong offset!");

// Function TweenMaker.BaseTween.JoinTweenMoveSceneComponentBy
// 0x0030 (0x0030 - 0x0000)
struct BaseTween_JoinTweenMoveSceneComponentBy final
{
public:
	class USceneComponent*                        TweenTarget;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, InstancedReference, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                bY;                                                // 0x0008(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Duration;                                          // 0x0014(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETweenEaseType                                EaseType;                                          // 0x0018(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          DeleteTweenOnHit;                                  // 0x0019(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          DeleteTweenOnOverlap;                              // 0x001A(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1B[0x1];                                       // 0x001B(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Delay;                                             // 0x001C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TimeScale;                                         // 0x0020(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          TweenWhileGameIsPaused;                            // 0x0024(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_25[0x3];                                       // 0x0025(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UTweenVector*                           ReturnValue;                                       // 0x0028(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BaseTween_JoinTweenMoveSceneComponentBy) == 0x000008, "Wrong alignment on BaseTween_JoinTweenMoveSceneComponentBy");
static_assert(sizeof(BaseTween_JoinTweenMoveSceneComponentBy) == 0x000030, "Wrong size on BaseTween_JoinTweenMoveSceneComponentBy");
static_assert(offsetof(BaseTween_JoinTweenMoveSceneComponentBy, TweenTarget) == 0x000000, "Member 'BaseTween_JoinTweenMoveSceneComponentBy::TweenTarget' has a wrong offset!");
static_assert(offsetof(BaseTween_JoinTweenMoveSceneComponentBy, bY) == 0x000008, "Member 'BaseTween_JoinTweenMoveSceneComponentBy::bY' has a wrong offset!");
static_assert(offsetof(BaseTween_JoinTweenMoveSceneComponentBy, Duration) == 0x000014, "Member 'BaseTween_JoinTweenMoveSceneComponentBy::Duration' has a wrong offset!");
static_assert(offsetof(BaseTween_JoinTweenMoveSceneComponentBy, EaseType) == 0x000018, "Member 'BaseTween_JoinTweenMoveSceneComponentBy::EaseType' has a wrong offset!");
static_assert(offsetof(BaseTween_JoinTweenMoveSceneComponentBy, DeleteTweenOnHit) == 0x000019, "Member 'BaseTween_JoinTweenMoveSceneComponentBy::DeleteTweenOnHit' has a wrong offset!");
static_assert(offsetof(BaseTween_JoinTweenMoveSceneComponentBy, DeleteTweenOnOverlap) == 0x00001A, "Member 'BaseTween_JoinTweenMoveSceneComponentBy::DeleteTweenOnOverlap' has a wrong offset!");
static_assert(offsetof(BaseTween_JoinTweenMoveSceneComponentBy, Delay) == 0x00001C, "Member 'BaseTween_JoinTweenMoveSceneComponentBy::Delay' has a wrong offset!");
static_assert(offsetof(BaseTween_JoinTweenMoveSceneComponentBy, TimeScale) == 0x000020, "Member 'BaseTween_JoinTweenMoveSceneComponentBy::TimeScale' has a wrong offset!");
static_assert(offsetof(BaseTween_JoinTweenMoveSceneComponentBy, TweenWhileGameIsPaused) == 0x000024, "Member 'BaseTween_JoinTweenMoveSceneComponentBy::TweenWhileGameIsPaused' has a wrong offset!");
static_assert(offsetof(BaseTween_JoinTweenMoveSceneComponentBy, ReturnValue) == 0x000028, "Member 'BaseTween_JoinTweenMoveSceneComponentBy::ReturnValue' has a wrong offset!");

// Function TweenMaker.BaseTween.JoinTweenMoveSceneComponentTo
// 0x0030 (0x0030 - 0x0000)
struct BaseTween_JoinTweenMoveSceneComponentTo final
{
public:
	class USceneComponent*                        TweenTarget;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, InstancedReference, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                To;                                                // 0x0008(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Duration;                                          // 0x0014(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETweenEaseType                                EaseType;                                          // 0x0018(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETweenSpace                                   TweenSpace;                                        // 0x0019(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          DeleteTweenOnHit;                                  // 0x001A(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          DeleteTweenOnOverlap;                              // 0x001B(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Delay;                                             // 0x001C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TimeScale;                                         // 0x0020(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          TweenWhileGameIsPaused;                            // 0x0024(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_25[0x3];                                       // 0x0025(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UTweenVector*                           ReturnValue;                                       // 0x0028(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BaseTween_JoinTweenMoveSceneComponentTo) == 0x000008, "Wrong alignment on BaseTween_JoinTweenMoveSceneComponentTo");
static_assert(sizeof(BaseTween_JoinTweenMoveSceneComponentTo) == 0x000030, "Wrong size on BaseTween_JoinTweenMoveSceneComponentTo");
static_assert(offsetof(BaseTween_JoinTweenMoveSceneComponentTo, TweenTarget) == 0x000000, "Member 'BaseTween_JoinTweenMoveSceneComponentTo::TweenTarget' has a wrong offset!");
static_assert(offsetof(BaseTween_JoinTweenMoveSceneComponentTo, To) == 0x000008, "Member 'BaseTween_JoinTweenMoveSceneComponentTo::To' has a wrong offset!");
static_assert(offsetof(BaseTween_JoinTweenMoveSceneComponentTo, Duration) == 0x000014, "Member 'BaseTween_JoinTweenMoveSceneComponentTo::Duration' has a wrong offset!");
static_assert(offsetof(BaseTween_JoinTweenMoveSceneComponentTo, EaseType) == 0x000018, "Member 'BaseTween_JoinTweenMoveSceneComponentTo::EaseType' has a wrong offset!");
static_assert(offsetof(BaseTween_JoinTweenMoveSceneComponentTo, TweenSpace) == 0x000019, "Member 'BaseTween_JoinTweenMoveSceneComponentTo::TweenSpace' has a wrong offset!");
static_assert(offsetof(BaseTween_JoinTweenMoveSceneComponentTo, DeleteTweenOnHit) == 0x00001A, "Member 'BaseTween_JoinTweenMoveSceneComponentTo::DeleteTweenOnHit' has a wrong offset!");
static_assert(offsetof(BaseTween_JoinTweenMoveSceneComponentTo, DeleteTweenOnOverlap) == 0x00001B, "Member 'BaseTween_JoinTweenMoveSceneComponentTo::DeleteTweenOnOverlap' has a wrong offset!");
static_assert(offsetof(BaseTween_JoinTweenMoveSceneComponentTo, Delay) == 0x00001C, "Member 'BaseTween_JoinTweenMoveSceneComponentTo::Delay' has a wrong offset!");
static_assert(offsetof(BaseTween_JoinTweenMoveSceneComponentTo, TimeScale) == 0x000020, "Member 'BaseTween_JoinTweenMoveSceneComponentTo::TimeScale' has a wrong offset!");
static_assert(offsetof(BaseTween_JoinTweenMoveSceneComponentTo, TweenWhileGameIsPaused) == 0x000024, "Member 'BaseTween_JoinTweenMoveSceneComponentTo::TweenWhileGameIsPaused' has a wrong offset!");
static_assert(offsetof(BaseTween_JoinTweenMoveSceneComponentTo, ReturnValue) == 0x000028, "Member 'BaseTween_JoinTweenMoveSceneComponentTo::ReturnValue' has a wrong offset!");

// Function TweenMaker.BaseTween.JoinTweenMoveWidgetBy
// 0x0030 (0x0030 - 0x0000)
struct BaseTween_JoinTweenMoveWidgetBy final
{
public:
	class UWidget*                                TweenTarget;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, InstancedReference, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2D                              bY;                                                // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Duration;                                          // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETweenEaseType                                EaseType;                                          // 0x0014(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_15[0x3];                                       // 0x0015(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Delay;                                             // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TimeScale;                                         // 0x001C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          TweenWhileGameIsPaused;                            // 0x0020(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_21[0x7];                                       // 0x0021(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UTweenVector2D*                         ReturnValue;                                       // 0x0028(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BaseTween_JoinTweenMoveWidgetBy) == 0x000008, "Wrong alignment on BaseTween_JoinTweenMoveWidgetBy");
static_assert(sizeof(BaseTween_JoinTweenMoveWidgetBy) == 0x000030, "Wrong size on BaseTween_JoinTweenMoveWidgetBy");
static_assert(offsetof(BaseTween_JoinTweenMoveWidgetBy, TweenTarget) == 0x000000, "Member 'BaseTween_JoinTweenMoveWidgetBy::TweenTarget' has a wrong offset!");
static_assert(offsetof(BaseTween_JoinTweenMoveWidgetBy, bY) == 0x000008, "Member 'BaseTween_JoinTweenMoveWidgetBy::bY' has a wrong offset!");
static_assert(offsetof(BaseTween_JoinTweenMoveWidgetBy, Duration) == 0x000010, "Member 'BaseTween_JoinTweenMoveWidgetBy::Duration' has a wrong offset!");
static_assert(offsetof(BaseTween_JoinTweenMoveWidgetBy, EaseType) == 0x000014, "Member 'BaseTween_JoinTweenMoveWidgetBy::EaseType' has a wrong offset!");
static_assert(offsetof(BaseTween_JoinTweenMoveWidgetBy, Delay) == 0x000018, "Member 'BaseTween_JoinTweenMoveWidgetBy::Delay' has a wrong offset!");
static_assert(offsetof(BaseTween_JoinTweenMoveWidgetBy, TimeScale) == 0x00001C, "Member 'BaseTween_JoinTweenMoveWidgetBy::TimeScale' has a wrong offset!");
static_assert(offsetof(BaseTween_JoinTweenMoveWidgetBy, TweenWhileGameIsPaused) == 0x000020, "Member 'BaseTween_JoinTweenMoveWidgetBy::TweenWhileGameIsPaused' has a wrong offset!");
static_assert(offsetof(BaseTween_JoinTweenMoveWidgetBy, ReturnValue) == 0x000028, "Member 'BaseTween_JoinTweenMoveWidgetBy::ReturnValue' has a wrong offset!");

// Function TweenMaker.BaseTween.JoinTweenMoveWidgetTo
// 0x0030 (0x0030 - 0x0000)
struct BaseTween_JoinTweenMoveWidgetTo final
{
public:
	class UWidget*                                TweenTarget;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, InstancedReference, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2D                              To;                                                // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Duration;                                          // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETweenEaseType                                EaseType;                                          // 0x0014(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_15[0x3];                                       // 0x0015(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Delay;                                             // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TimeScale;                                         // 0x001C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          TweenWhileGameIsPaused;                            // 0x0020(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_21[0x7];                                       // 0x0021(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UTweenVector2D*                         ReturnValue;                                       // 0x0028(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BaseTween_JoinTweenMoveWidgetTo) == 0x000008, "Wrong alignment on BaseTween_JoinTweenMoveWidgetTo");
static_assert(sizeof(BaseTween_JoinTweenMoveWidgetTo) == 0x000030, "Wrong size on BaseTween_JoinTweenMoveWidgetTo");
static_assert(offsetof(BaseTween_JoinTweenMoveWidgetTo, TweenTarget) == 0x000000, "Member 'BaseTween_JoinTweenMoveWidgetTo::TweenTarget' has a wrong offset!");
static_assert(offsetof(BaseTween_JoinTweenMoveWidgetTo, To) == 0x000008, "Member 'BaseTween_JoinTweenMoveWidgetTo::To' has a wrong offset!");
static_assert(offsetof(BaseTween_JoinTweenMoveWidgetTo, Duration) == 0x000010, "Member 'BaseTween_JoinTweenMoveWidgetTo::Duration' has a wrong offset!");
static_assert(offsetof(BaseTween_JoinTweenMoveWidgetTo, EaseType) == 0x000014, "Member 'BaseTween_JoinTweenMoveWidgetTo::EaseType' has a wrong offset!");
static_assert(offsetof(BaseTween_JoinTweenMoveWidgetTo, Delay) == 0x000018, "Member 'BaseTween_JoinTweenMoveWidgetTo::Delay' has a wrong offset!");
static_assert(offsetof(BaseTween_JoinTweenMoveWidgetTo, TimeScale) == 0x00001C, "Member 'BaseTween_JoinTweenMoveWidgetTo::TimeScale' has a wrong offset!");
static_assert(offsetof(BaseTween_JoinTweenMoveWidgetTo, TweenWhileGameIsPaused) == 0x000020, "Member 'BaseTween_JoinTweenMoveWidgetTo::TweenWhileGameIsPaused' has a wrong offset!");
static_assert(offsetof(BaseTween_JoinTweenMoveWidgetTo, ReturnValue) == 0x000028, "Member 'BaseTween_JoinTweenMoveWidgetTo::ReturnValue' has a wrong offset!");

// Function TweenMaker.BaseTween.JoinTweenRotateActorAroundPoint
// 0x0048 (0x0048 - 0x0000)
struct BaseTween_JoinTweenRotateActorAroundPoint final
{
public:
	class AActor*                                 TweenTarget;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                PivotPoint;                                        // 0x0008(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         StartingAngle;                                     // 0x0014(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         EndingAngle;                                       // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Radius;                                            // 0x001C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                Axis;                                              // 0x0020(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Duration;                                          // 0x002C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETweenEaseType                                EaseType;                                          // 0x0030(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          DeleteTweenOnHit;                                  // 0x0031(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          DeleteTweenOnOverlap;                              // 0x0032(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_33[0x1];                                       // 0x0033(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Delay;                                             // 0x0034(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TimeScale;                                         // 0x0038(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          TweenWhileGameIsPaused;                            // 0x003C(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_3D[0x3];                                       // 0x003D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UTweenFloat*                            ReturnValue;                                       // 0x0040(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BaseTween_JoinTweenRotateActorAroundPoint) == 0x000008, "Wrong alignment on BaseTween_JoinTweenRotateActorAroundPoint");
static_assert(sizeof(BaseTween_JoinTweenRotateActorAroundPoint) == 0x000048, "Wrong size on BaseTween_JoinTweenRotateActorAroundPoint");
static_assert(offsetof(BaseTween_JoinTweenRotateActorAroundPoint, TweenTarget) == 0x000000, "Member 'BaseTween_JoinTweenRotateActorAroundPoint::TweenTarget' has a wrong offset!");
static_assert(offsetof(BaseTween_JoinTweenRotateActorAroundPoint, PivotPoint) == 0x000008, "Member 'BaseTween_JoinTweenRotateActorAroundPoint::PivotPoint' has a wrong offset!");
static_assert(offsetof(BaseTween_JoinTweenRotateActorAroundPoint, StartingAngle) == 0x000014, "Member 'BaseTween_JoinTweenRotateActorAroundPoint::StartingAngle' has a wrong offset!");
static_assert(offsetof(BaseTween_JoinTweenRotateActorAroundPoint, EndingAngle) == 0x000018, "Member 'BaseTween_JoinTweenRotateActorAroundPoint::EndingAngle' has a wrong offset!");
static_assert(offsetof(BaseTween_JoinTweenRotateActorAroundPoint, Radius) == 0x00001C, "Member 'BaseTween_JoinTweenRotateActorAroundPoint::Radius' has a wrong offset!");
static_assert(offsetof(BaseTween_JoinTweenRotateActorAroundPoint, Axis) == 0x000020, "Member 'BaseTween_JoinTweenRotateActorAroundPoint::Axis' has a wrong offset!");
static_assert(offsetof(BaseTween_JoinTweenRotateActorAroundPoint, Duration) == 0x00002C, "Member 'BaseTween_JoinTweenRotateActorAroundPoint::Duration' has a wrong offset!");
static_assert(offsetof(BaseTween_JoinTweenRotateActorAroundPoint, EaseType) == 0x000030, "Member 'BaseTween_JoinTweenRotateActorAroundPoint::EaseType' has a wrong offset!");
static_assert(offsetof(BaseTween_JoinTweenRotateActorAroundPoint, DeleteTweenOnHit) == 0x000031, "Member 'BaseTween_JoinTweenRotateActorAroundPoint::DeleteTweenOnHit' has a wrong offset!");
static_assert(offsetof(BaseTween_JoinTweenRotateActorAroundPoint, DeleteTweenOnOverlap) == 0x000032, "Member 'BaseTween_JoinTweenRotateActorAroundPoint::DeleteTweenOnOverlap' has a wrong offset!");
static_assert(offsetof(BaseTween_JoinTweenRotateActorAroundPoint, Delay) == 0x000034, "Member 'BaseTween_JoinTweenRotateActorAroundPoint::Delay' has a wrong offset!");
static_assert(offsetof(BaseTween_JoinTweenRotateActorAroundPoint, TimeScale) == 0x000038, "Member 'BaseTween_JoinTweenRotateActorAroundPoint::TimeScale' has a wrong offset!");
static_assert(offsetof(BaseTween_JoinTweenRotateActorAroundPoint, TweenWhileGameIsPaused) == 0x00003C, "Member 'BaseTween_JoinTweenRotateActorAroundPoint::TweenWhileGameIsPaused' has a wrong offset!");
static_assert(offsetof(BaseTween_JoinTweenRotateActorAroundPoint, ReturnValue) == 0x000040, "Member 'BaseTween_JoinTweenRotateActorAroundPoint::ReturnValue' has a wrong offset!");

// Function TweenMaker.BaseTween.JoinTweenRotateActorAroundPointByOffset
// 0x0038 (0x0038 - 0x0000)
struct BaseTween_JoinTweenRotateActorAroundPointByOffset final
{
public:
	class AActor*                                 TweenTarget;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                PivotPoint;                                        // 0x0008(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         OffsetAngle;                                       // 0x0014(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETweenReferenceAxis                           ReferenceAxis;                                     // 0x0018(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x3];                                       // 0x0019(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Duration;                                          // 0x001C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETweenEaseType                                EaseType;                                          // 0x0020(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          DeleteTweenOnHit;                                  // 0x0021(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          DeleteTweenOnOverlap;                              // 0x0022(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_23[0x1];                                       // 0x0023(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Delay;                                             // 0x0024(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TimeScale;                                         // 0x0028(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          TweenWhileGameIsPaused;                            // 0x002C(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2D[0x3];                                       // 0x002D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UTweenFloat*                            ReturnValue;                                       // 0x0030(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BaseTween_JoinTweenRotateActorAroundPointByOffset) == 0x000008, "Wrong alignment on BaseTween_JoinTweenRotateActorAroundPointByOffset");
static_assert(sizeof(BaseTween_JoinTweenRotateActorAroundPointByOffset) == 0x000038, "Wrong size on BaseTween_JoinTweenRotateActorAroundPointByOffset");
static_assert(offsetof(BaseTween_JoinTweenRotateActorAroundPointByOffset, TweenTarget) == 0x000000, "Member 'BaseTween_JoinTweenRotateActorAroundPointByOffset::TweenTarget' has a wrong offset!");
static_assert(offsetof(BaseTween_JoinTweenRotateActorAroundPointByOffset, PivotPoint) == 0x000008, "Member 'BaseTween_JoinTweenRotateActorAroundPointByOffset::PivotPoint' has a wrong offset!");
static_assert(offsetof(BaseTween_JoinTweenRotateActorAroundPointByOffset, OffsetAngle) == 0x000014, "Member 'BaseTween_JoinTweenRotateActorAroundPointByOffset::OffsetAngle' has a wrong offset!");
static_assert(offsetof(BaseTween_JoinTweenRotateActorAroundPointByOffset, ReferenceAxis) == 0x000018, "Member 'BaseTween_JoinTweenRotateActorAroundPointByOffset::ReferenceAxis' has a wrong offset!");
static_assert(offsetof(BaseTween_JoinTweenRotateActorAroundPointByOffset, Duration) == 0x00001C, "Member 'BaseTween_JoinTweenRotateActorAroundPointByOffset::Duration' has a wrong offset!");
static_assert(offsetof(BaseTween_JoinTweenRotateActorAroundPointByOffset, EaseType) == 0x000020, "Member 'BaseTween_JoinTweenRotateActorAroundPointByOffset::EaseType' has a wrong offset!");
static_assert(offsetof(BaseTween_JoinTweenRotateActorAroundPointByOffset, DeleteTweenOnHit) == 0x000021, "Member 'BaseTween_JoinTweenRotateActorAroundPointByOffset::DeleteTweenOnHit' has a wrong offset!");
static_assert(offsetof(BaseTween_JoinTweenRotateActorAroundPointByOffset, DeleteTweenOnOverlap) == 0x000022, "Member 'BaseTween_JoinTweenRotateActorAroundPointByOffset::DeleteTweenOnOverlap' has a wrong offset!");
static_assert(offsetof(BaseTween_JoinTweenRotateActorAroundPointByOffset, Delay) == 0x000024, "Member 'BaseTween_JoinTweenRotateActorAroundPointByOffset::Delay' has a wrong offset!");
static_assert(offsetof(BaseTween_JoinTweenRotateActorAroundPointByOffset, TimeScale) == 0x000028, "Member 'BaseTween_JoinTweenRotateActorAroundPointByOffset::TimeScale' has a wrong offset!");
static_assert(offsetof(BaseTween_JoinTweenRotateActorAroundPointByOffset, TweenWhileGameIsPaused) == 0x00002C, "Member 'BaseTween_JoinTweenRotateActorAroundPointByOffset::TweenWhileGameIsPaused' has a wrong offset!");
static_assert(offsetof(BaseTween_JoinTweenRotateActorAroundPointByOffset, ReturnValue) == 0x000030, "Member 'BaseTween_JoinTweenRotateActorAroundPointByOffset::ReturnValue' has a wrong offset!");

// Function TweenMaker.BaseTween.JoinTweenRotateActorBy
// 0x0030 (0x0030 - 0x0000)
struct BaseTween_JoinTweenRotateActorBy final
{
public:
	class AActor*                                 TweenTarget;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRotator                               bY;                                                // 0x0008(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	float                                         Duration;                                          // 0x0014(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETweenEaseType                                EaseType;                                          // 0x0018(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          DeleteTweenOnHit;                                  // 0x0019(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          DeleteTweenOnOverlap;                              // 0x001A(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1B[0x1];                                       // 0x001B(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Delay;                                             // 0x001C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TimeScale;                                         // 0x0020(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          TweenWhileGameIsPaused;                            // 0x0024(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_25[0x3];                                       // 0x0025(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UTweenRotator*                          ReturnValue;                                       // 0x0028(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BaseTween_JoinTweenRotateActorBy) == 0x000008, "Wrong alignment on BaseTween_JoinTweenRotateActorBy");
static_assert(sizeof(BaseTween_JoinTweenRotateActorBy) == 0x000030, "Wrong size on BaseTween_JoinTweenRotateActorBy");
static_assert(offsetof(BaseTween_JoinTweenRotateActorBy, TweenTarget) == 0x000000, "Member 'BaseTween_JoinTweenRotateActorBy::TweenTarget' has a wrong offset!");
static_assert(offsetof(BaseTween_JoinTweenRotateActorBy, bY) == 0x000008, "Member 'BaseTween_JoinTweenRotateActorBy::bY' has a wrong offset!");
static_assert(offsetof(BaseTween_JoinTweenRotateActorBy, Duration) == 0x000014, "Member 'BaseTween_JoinTweenRotateActorBy::Duration' has a wrong offset!");
static_assert(offsetof(BaseTween_JoinTweenRotateActorBy, EaseType) == 0x000018, "Member 'BaseTween_JoinTweenRotateActorBy::EaseType' has a wrong offset!");
static_assert(offsetof(BaseTween_JoinTweenRotateActorBy, DeleteTweenOnHit) == 0x000019, "Member 'BaseTween_JoinTweenRotateActorBy::DeleteTweenOnHit' has a wrong offset!");
static_assert(offsetof(BaseTween_JoinTweenRotateActorBy, DeleteTweenOnOverlap) == 0x00001A, "Member 'BaseTween_JoinTweenRotateActorBy::DeleteTweenOnOverlap' has a wrong offset!");
static_assert(offsetof(BaseTween_JoinTweenRotateActorBy, Delay) == 0x00001C, "Member 'BaseTween_JoinTweenRotateActorBy::Delay' has a wrong offset!");
static_assert(offsetof(BaseTween_JoinTweenRotateActorBy, TimeScale) == 0x000020, "Member 'BaseTween_JoinTweenRotateActorBy::TimeScale' has a wrong offset!");
static_assert(offsetof(BaseTween_JoinTweenRotateActorBy, TweenWhileGameIsPaused) == 0x000024, "Member 'BaseTween_JoinTweenRotateActorBy::TweenWhileGameIsPaused' has a wrong offset!");
static_assert(offsetof(BaseTween_JoinTweenRotateActorBy, ReturnValue) == 0x000028, "Member 'BaseTween_JoinTweenRotateActorBy::ReturnValue' has a wrong offset!");

// Function TweenMaker.BaseTween.JoinTweenRotateActorTo
// 0x0038 (0x0038 - 0x0000)
struct BaseTween_JoinTweenRotateActorTo final
{
public:
	class AActor*                                 TweenTarget;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRotator                               To;                                                // 0x0008(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	float                                         Duration;                                          // 0x0014(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETweenEaseType                                EaseType;                                          // 0x0018(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETweenSpace                                   TweenSpace;                                        // 0x0019(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETweenRotationMode                            RotationMode;                                      // 0x001A(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          DeleteTweenOnHit;                                  // 0x001B(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          DeleteTweenOnOverlap;                              // 0x001C(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1D[0x3];                                       // 0x001D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Delay;                                             // 0x0020(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TimeScale;                                         // 0x0024(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          TweenWhileGameIsPaused;                            // 0x0028(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_29[0x7];                                       // 0x0029(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UTweenRotator*                          ReturnValue;                                       // 0x0030(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BaseTween_JoinTweenRotateActorTo) == 0x000008, "Wrong alignment on BaseTween_JoinTweenRotateActorTo");
static_assert(sizeof(BaseTween_JoinTweenRotateActorTo) == 0x000038, "Wrong size on BaseTween_JoinTweenRotateActorTo");
static_assert(offsetof(BaseTween_JoinTweenRotateActorTo, TweenTarget) == 0x000000, "Member 'BaseTween_JoinTweenRotateActorTo::TweenTarget' has a wrong offset!");
static_assert(offsetof(BaseTween_JoinTweenRotateActorTo, To) == 0x000008, "Member 'BaseTween_JoinTweenRotateActorTo::To' has a wrong offset!");
static_assert(offsetof(BaseTween_JoinTweenRotateActorTo, Duration) == 0x000014, "Member 'BaseTween_JoinTweenRotateActorTo::Duration' has a wrong offset!");
static_assert(offsetof(BaseTween_JoinTweenRotateActorTo, EaseType) == 0x000018, "Member 'BaseTween_JoinTweenRotateActorTo::EaseType' has a wrong offset!");
static_assert(offsetof(BaseTween_JoinTweenRotateActorTo, TweenSpace) == 0x000019, "Member 'BaseTween_JoinTweenRotateActorTo::TweenSpace' has a wrong offset!");
static_assert(offsetof(BaseTween_JoinTweenRotateActorTo, RotationMode) == 0x00001A, "Member 'BaseTween_JoinTweenRotateActorTo::RotationMode' has a wrong offset!");
static_assert(offsetof(BaseTween_JoinTweenRotateActorTo, DeleteTweenOnHit) == 0x00001B, "Member 'BaseTween_JoinTweenRotateActorTo::DeleteTweenOnHit' has a wrong offset!");
static_assert(offsetof(BaseTween_JoinTweenRotateActorTo, DeleteTweenOnOverlap) == 0x00001C, "Member 'BaseTween_JoinTweenRotateActorTo::DeleteTweenOnOverlap' has a wrong offset!");
static_assert(offsetof(BaseTween_JoinTweenRotateActorTo, Delay) == 0x000020, "Member 'BaseTween_JoinTweenRotateActorTo::Delay' has a wrong offset!");
static_assert(offsetof(BaseTween_JoinTweenRotateActorTo, TimeScale) == 0x000024, "Member 'BaseTween_JoinTweenRotateActorTo::TimeScale' has a wrong offset!");
static_assert(offsetof(BaseTween_JoinTweenRotateActorTo, TweenWhileGameIsPaused) == 0x000028, "Member 'BaseTween_JoinTweenRotateActorTo::TweenWhileGameIsPaused' has a wrong offset!");
static_assert(offsetof(BaseTween_JoinTweenRotateActorTo, ReturnValue) == 0x000030, "Member 'BaseTween_JoinTweenRotateActorTo::ReturnValue' has a wrong offset!");

// Function TweenMaker.BaseTween.JoinTweenRotateSceneComponentAroundPoint
// 0x0048 (0x0048 - 0x0000)
struct BaseTween_JoinTweenRotateSceneComponentAroundPoint final
{
public:
	class USceneComponent*                        TweenTarget;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, InstancedReference, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                PivotPoint;                                        // 0x0008(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         StartingAngle;                                     // 0x0014(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         EndingAngle;                                       // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Radius;                                            // 0x001C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                Axis;                                              // 0x0020(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Duration;                                          // 0x002C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETweenEaseType                                EaseType;                                          // 0x0030(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          DeleteTweenOnHit;                                  // 0x0031(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          DeleteTweenOnOverlap;                              // 0x0032(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_33[0x1];                                       // 0x0033(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Delay;                                             // 0x0034(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TimeScale;                                         // 0x0038(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          TweenWhileGameIsPaused;                            // 0x003C(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_3D[0x3];                                       // 0x003D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UTweenFloat*                            ReturnValue;                                       // 0x0040(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BaseTween_JoinTweenRotateSceneComponentAroundPoint) == 0x000008, "Wrong alignment on BaseTween_JoinTweenRotateSceneComponentAroundPoint");
static_assert(sizeof(BaseTween_JoinTweenRotateSceneComponentAroundPoint) == 0x000048, "Wrong size on BaseTween_JoinTweenRotateSceneComponentAroundPoint");
static_assert(offsetof(BaseTween_JoinTweenRotateSceneComponentAroundPoint, TweenTarget) == 0x000000, "Member 'BaseTween_JoinTweenRotateSceneComponentAroundPoint::TweenTarget' has a wrong offset!");
static_assert(offsetof(BaseTween_JoinTweenRotateSceneComponentAroundPoint, PivotPoint) == 0x000008, "Member 'BaseTween_JoinTweenRotateSceneComponentAroundPoint::PivotPoint' has a wrong offset!");
static_assert(offsetof(BaseTween_JoinTweenRotateSceneComponentAroundPoint, StartingAngle) == 0x000014, "Member 'BaseTween_JoinTweenRotateSceneComponentAroundPoint::StartingAngle' has a wrong offset!");
static_assert(offsetof(BaseTween_JoinTweenRotateSceneComponentAroundPoint, EndingAngle) == 0x000018, "Member 'BaseTween_JoinTweenRotateSceneComponentAroundPoint::EndingAngle' has a wrong offset!");
static_assert(offsetof(BaseTween_JoinTweenRotateSceneComponentAroundPoint, Radius) == 0x00001C, "Member 'BaseTween_JoinTweenRotateSceneComponentAroundPoint::Radius' has a wrong offset!");
static_assert(offsetof(BaseTween_JoinTweenRotateSceneComponentAroundPoint, Axis) == 0x000020, "Member 'BaseTween_JoinTweenRotateSceneComponentAroundPoint::Axis' has a wrong offset!");
static_assert(offsetof(BaseTween_JoinTweenRotateSceneComponentAroundPoint, Duration) == 0x00002C, "Member 'BaseTween_JoinTweenRotateSceneComponentAroundPoint::Duration' has a wrong offset!");
static_assert(offsetof(BaseTween_JoinTweenRotateSceneComponentAroundPoint, EaseType) == 0x000030, "Member 'BaseTween_JoinTweenRotateSceneComponentAroundPoint::EaseType' has a wrong offset!");
static_assert(offsetof(BaseTween_JoinTweenRotateSceneComponentAroundPoint, DeleteTweenOnHit) == 0x000031, "Member 'BaseTween_JoinTweenRotateSceneComponentAroundPoint::DeleteTweenOnHit' has a wrong offset!");
static_assert(offsetof(BaseTween_JoinTweenRotateSceneComponentAroundPoint, DeleteTweenOnOverlap) == 0x000032, "Member 'BaseTween_JoinTweenRotateSceneComponentAroundPoint::DeleteTweenOnOverlap' has a wrong offset!");
static_assert(offsetof(BaseTween_JoinTweenRotateSceneComponentAroundPoint, Delay) == 0x000034, "Member 'BaseTween_JoinTweenRotateSceneComponentAroundPoint::Delay' has a wrong offset!");
static_assert(offsetof(BaseTween_JoinTweenRotateSceneComponentAroundPoint, TimeScale) == 0x000038, "Member 'BaseTween_JoinTweenRotateSceneComponentAroundPoint::TimeScale' has a wrong offset!");
static_assert(offsetof(BaseTween_JoinTweenRotateSceneComponentAroundPoint, TweenWhileGameIsPaused) == 0x00003C, "Member 'BaseTween_JoinTweenRotateSceneComponentAroundPoint::TweenWhileGameIsPaused' has a wrong offset!");
static_assert(offsetof(BaseTween_JoinTweenRotateSceneComponentAroundPoint, ReturnValue) == 0x000040, "Member 'BaseTween_JoinTweenRotateSceneComponentAroundPoint::ReturnValue' has a wrong offset!");

// Function TweenMaker.BaseTween.JoinTweenRotateSceneComponentAroundPointByOffset
// 0x0038 (0x0038 - 0x0000)
struct BaseTween_JoinTweenRotateSceneComponentAroundPointByOffset final
{
public:
	class USceneComponent*                        TweenTarget;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, InstancedReference, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                PivotPoint;                                        // 0x0008(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         OffsetAngle;                                       // 0x0014(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETweenReferenceAxis                           ReferenceAxis;                                     // 0x0018(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x3];                                       // 0x0019(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Duration;                                          // 0x001C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETweenEaseType                                EaseType;                                          // 0x0020(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          DeleteTweenOnHit;                                  // 0x0021(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          DeleteTweenOnOverlap;                              // 0x0022(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_23[0x1];                                       // 0x0023(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Delay;                                             // 0x0024(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TimeScale;                                         // 0x0028(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          TweenWhileGameIsPaused;                            // 0x002C(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2D[0x3];                                       // 0x002D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UTweenFloat*                            ReturnValue;                                       // 0x0030(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BaseTween_JoinTweenRotateSceneComponentAroundPointByOffset) == 0x000008, "Wrong alignment on BaseTween_JoinTweenRotateSceneComponentAroundPointByOffset");
static_assert(sizeof(BaseTween_JoinTweenRotateSceneComponentAroundPointByOffset) == 0x000038, "Wrong size on BaseTween_JoinTweenRotateSceneComponentAroundPointByOffset");
static_assert(offsetof(BaseTween_JoinTweenRotateSceneComponentAroundPointByOffset, TweenTarget) == 0x000000, "Member 'BaseTween_JoinTweenRotateSceneComponentAroundPointByOffset::TweenTarget' has a wrong offset!");
static_assert(offsetof(BaseTween_JoinTweenRotateSceneComponentAroundPointByOffset, PivotPoint) == 0x000008, "Member 'BaseTween_JoinTweenRotateSceneComponentAroundPointByOffset::PivotPoint' has a wrong offset!");
static_assert(offsetof(BaseTween_JoinTweenRotateSceneComponentAroundPointByOffset, OffsetAngle) == 0x000014, "Member 'BaseTween_JoinTweenRotateSceneComponentAroundPointByOffset::OffsetAngle' has a wrong offset!");
static_assert(offsetof(BaseTween_JoinTweenRotateSceneComponentAroundPointByOffset, ReferenceAxis) == 0x000018, "Member 'BaseTween_JoinTweenRotateSceneComponentAroundPointByOffset::ReferenceAxis' has a wrong offset!");
static_assert(offsetof(BaseTween_JoinTweenRotateSceneComponentAroundPointByOffset, Duration) == 0x00001C, "Member 'BaseTween_JoinTweenRotateSceneComponentAroundPointByOffset::Duration' has a wrong offset!");
static_assert(offsetof(BaseTween_JoinTweenRotateSceneComponentAroundPointByOffset, EaseType) == 0x000020, "Member 'BaseTween_JoinTweenRotateSceneComponentAroundPointByOffset::EaseType' has a wrong offset!");
static_assert(offsetof(BaseTween_JoinTweenRotateSceneComponentAroundPointByOffset, DeleteTweenOnHit) == 0x000021, "Member 'BaseTween_JoinTweenRotateSceneComponentAroundPointByOffset::DeleteTweenOnHit' has a wrong offset!");
static_assert(offsetof(BaseTween_JoinTweenRotateSceneComponentAroundPointByOffset, DeleteTweenOnOverlap) == 0x000022, "Member 'BaseTween_JoinTweenRotateSceneComponentAroundPointByOffset::DeleteTweenOnOverlap' has a wrong offset!");
static_assert(offsetof(BaseTween_JoinTweenRotateSceneComponentAroundPointByOffset, Delay) == 0x000024, "Member 'BaseTween_JoinTweenRotateSceneComponentAroundPointByOffset::Delay' has a wrong offset!");
static_assert(offsetof(BaseTween_JoinTweenRotateSceneComponentAroundPointByOffset, TimeScale) == 0x000028, "Member 'BaseTween_JoinTweenRotateSceneComponentAroundPointByOffset::TimeScale' has a wrong offset!");
static_assert(offsetof(BaseTween_JoinTweenRotateSceneComponentAroundPointByOffset, TweenWhileGameIsPaused) == 0x00002C, "Member 'BaseTween_JoinTweenRotateSceneComponentAroundPointByOffset::TweenWhileGameIsPaused' has a wrong offset!");
static_assert(offsetof(BaseTween_JoinTweenRotateSceneComponentAroundPointByOffset, ReturnValue) == 0x000030, "Member 'BaseTween_JoinTweenRotateSceneComponentAroundPointByOffset::ReturnValue' has a wrong offset!");

// Function TweenMaker.BaseTween.JoinTweenRotateSceneComponentBy
// 0x0030 (0x0030 - 0x0000)
struct BaseTween_JoinTweenRotateSceneComponentBy final
{
public:
	class USceneComponent*                        TweenTarget;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, InstancedReference, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRotator                               bY;                                                // 0x0008(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	float                                         Duration;                                          // 0x0014(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETweenEaseType                                EaseType;                                          // 0x0018(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          DeleteTweenOnHit;                                  // 0x0019(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          DeleteTweenOnOverlap;                              // 0x001A(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1B[0x1];                                       // 0x001B(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Delay;                                             // 0x001C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TimeScale;                                         // 0x0020(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          TweenWhileGameIsPaused;                            // 0x0024(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_25[0x3];                                       // 0x0025(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UTweenRotator*                          ReturnValue;                                       // 0x0028(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BaseTween_JoinTweenRotateSceneComponentBy) == 0x000008, "Wrong alignment on BaseTween_JoinTweenRotateSceneComponentBy");
static_assert(sizeof(BaseTween_JoinTweenRotateSceneComponentBy) == 0x000030, "Wrong size on BaseTween_JoinTweenRotateSceneComponentBy");
static_assert(offsetof(BaseTween_JoinTweenRotateSceneComponentBy, TweenTarget) == 0x000000, "Member 'BaseTween_JoinTweenRotateSceneComponentBy::TweenTarget' has a wrong offset!");
static_assert(offsetof(BaseTween_JoinTweenRotateSceneComponentBy, bY) == 0x000008, "Member 'BaseTween_JoinTweenRotateSceneComponentBy::bY' has a wrong offset!");
static_assert(offsetof(BaseTween_JoinTweenRotateSceneComponentBy, Duration) == 0x000014, "Member 'BaseTween_JoinTweenRotateSceneComponentBy::Duration' has a wrong offset!");
static_assert(offsetof(BaseTween_JoinTweenRotateSceneComponentBy, EaseType) == 0x000018, "Member 'BaseTween_JoinTweenRotateSceneComponentBy::EaseType' has a wrong offset!");
static_assert(offsetof(BaseTween_JoinTweenRotateSceneComponentBy, DeleteTweenOnHit) == 0x000019, "Member 'BaseTween_JoinTweenRotateSceneComponentBy::DeleteTweenOnHit' has a wrong offset!");
static_assert(offsetof(BaseTween_JoinTweenRotateSceneComponentBy, DeleteTweenOnOverlap) == 0x00001A, "Member 'BaseTween_JoinTweenRotateSceneComponentBy::DeleteTweenOnOverlap' has a wrong offset!");
static_assert(offsetof(BaseTween_JoinTweenRotateSceneComponentBy, Delay) == 0x00001C, "Member 'BaseTween_JoinTweenRotateSceneComponentBy::Delay' has a wrong offset!");
static_assert(offsetof(BaseTween_JoinTweenRotateSceneComponentBy, TimeScale) == 0x000020, "Member 'BaseTween_JoinTweenRotateSceneComponentBy::TimeScale' has a wrong offset!");
static_assert(offsetof(BaseTween_JoinTweenRotateSceneComponentBy, TweenWhileGameIsPaused) == 0x000024, "Member 'BaseTween_JoinTweenRotateSceneComponentBy::TweenWhileGameIsPaused' has a wrong offset!");
static_assert(offsetof(BaseTween_JoinTweenRotateSceneComponentBy, ReturnValue) == 0x000028, "Member 'BaseTween_JoinTweenRotateSceneComponentBy::ReturnValue' has a wrong offset!");

// Function TweenMaker.BaseTween.JoinTweenRotateSceneComponentTo
// 0x0038 (0x0038 - 0x0000)
struct BaseTween_JoinTweenRotateSceneComponentTo final
{
public:
	class USceneComponent*                        TweenTarget;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, InstancedReference, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRotator                               To;                                                // 0x0008(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	float                                         Duration;                                          // 0x0014(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETweenEaseType                                EaseType;                                          // 0x0018(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETweenSpace                                   TweenSpace;                                        // 0x0019(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETweenRotationMode                            RotationMode;                                      // 0x001A(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          DeleteTweenOnHit;                                  // 0x001B(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          DeleteTweenOnOverlap;                              // 0x001C(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1D[0x3];                                       // 0x001D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Delay;                                             // 0x0020(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TimeScale;                                         // 0x0024(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          TweenWhileGameIsPaused;                            // 0x0028(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_29[0x7];                                       // 0x0029(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UTweenRotator*                          ReturnValue;                                       // 0x0030(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BaseTween_JoinTweenRotateSceneComponentTo) == 0x000008, "Wrong alignment on BaseTween_JoinTweenRotateSceneComponentTo");
static_assert(sizeof(BaseTween_JoinTweenRotateSceneComponentTo) == 0x000038, "Wrong size on BaseTween_JoinTweenRotateSceneComponentTo");
static_assert(offsetof(BaseTween_JoinTweenRotateSceneComponentTo, TweenTarget) == 0x000000, "Member 'BaseTween_JoinTweenRotateSceneComponentTo::TweenTarget' has a wrong offset!");
static_assert(offsetof(BaseTween_JoinTweenRotateSceneComponentTo, To) == 0x000008, "Member 'BaseTween_JoinTweenRotateSceneComponentTo::To' has a wrong offset!");
static_assert(offsetof(BaseTween_JoinTweenRotateSceneComponentTo, Duration) == 0x000014, "Member 'BaseTween_JoinTweenRotateSceneComponentTo::Duration' has a wrong offset!");
static_assert(offsetof(BaseTween_JoinTweenRotateSceneComponentTo, EaseType) == 0x000018, "Member 'BaseTween_JoinTweenRotateSceneComponentTo::EaseType' has a wrong offset!");
static_assert(offsetof(BaseTween_JoinTweenRotateSceneComponentTo, TweenSpace) == 0x000019, "Member 'BaseTween_JoinTweenRotateSceneComponentTo::TweenSpace' has a wrong offset!");
static_assert(offsetof(BaseTween_JoinTweenRotateSceneComponentTo, RotationMode) == 0x00001A, "Member 'BaseTween_JoinTweenRotateSceneComponentTo::RotationMode' has a wrong offset!");
static_assert(offsetof(BaseTween_JoinTweenRotateSceneComponentTo, DeleteTweenOnHit) == 0x00001B, "Member 'BaseTween_JoinTweenRotateSceneComponentTo::DeleteTweenOnHit' has a wrong offset!");
static_assert(offsetof(BaseTween_JoinTweenRotateSceneComponentTo, DeleteTweenOnOverlap) == 0x00001C, "Member 'BaseTween_JoinTweenRotateSceneComponentTo::DeleteTweenOnOverlap' has a wrong offset!");
static_assert(offsetof(BaseTween_JoinTweenRotateSceneComponentTo, Delay) == 0x000020, "Member 'BaseTween_JoinTweenRotateSceneComponentTo::Delay' has a wrong offset!");
static_assert(offsetof(BaseTween_JoinTweenRotateSceneComponentTo, TimeScale) == 0x000024, "Member 'BaseTween_JoinTweenRotateSceneComponentTo::TimeScale' has a wrong offset!");
static_assert(offsetof(BaseTween_JoinTweenRotateSceneComponentTo, TweenWhileGameIsPaused) == 0x000028, "Member 'BaseTween_JoinTweenRotateSceneComponentTo::TweenWhileGameIsPaused' has a wrong offset!");
static_assert(offsetof(BaseTween_JoinTweenRotateSceneComponentTo, ReturnValue) == 0x000030, "Member 'BaseTween_JoinTweenRotateSceneComponentTo::ReturnValue' has a wrong offset!");

// Function TweenMaker.BaseTween.JoinTweenScaleActorBy
// 0x0030 (0x0030 - 0x0000)
struct BaseTween_JoinTweenScaleActorBy final
{
public:
	class AActor*                                 TweenTarget;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                bY;                                                // 0x0008(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Duration;                                          // 0x0014(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETweenEaseType                                EaseType;                                          // 0x0018(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          DeleteTweenOnHit;                                  // 0x0019(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          DeleteTweenOnOverlap;                              // 0x001A(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1B[0x1];                                       // 0x001B(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Delay;                                             // 0x001C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TimeScale;                                         // 0x0020(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          TweenWhileGameIsPaused;                            // 0x0024(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_25[0x3];                                       // 0x0025(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UTweenVector*                           ReturnValue;                                       // 0x0028(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BaseTween_JoinTweenScaleActorBy) == 0x000008, "Wrong alignment on BaseTween_JoinTweenScaleActorBy");
static_assert(sizeof(BaseTween_JoinTweenScaleActorBy) == 0x000030, "Wrong size on BaseTween_JoinTweenScaleActorBy");
static_assert(offsetof(BaseTween_JoinTweenScaleActorBy, TweenTarget) == 0x000000, "Member 'BaseTween_JoinTweenScaleActorBy::TweenTarget' has a wrong offset!");
static_assert(offsetof(BaseTween_JoinTweenScaleActorBy, bY) == 0x000008, "Member 'BaseTween_JoinTweenScaleActorBy::bY' has a wrong offset!");
static_assert(offsetof(BaseTween_JoinTweenScaleActorBy, Duration) == 0x000014, "Member 'BaseTween_JoinTweenScaleActorBy::Duration' has a wrong offset!");
static_assert(offsetof(BaseTween_JoinTweenScaleActorBy, EaseType) == 0x000018, "Member 'BaseTween_JoinTweenScaleActorBy::EaseType' has a wrong offset!");
static_assert(offsetof(BaseTween_JoinTweenScaleActorBy, DeleteTweenOnHit) == 0x000019, "Member 'BaseTween_JoinTweenScaleActorBy::DeleteTweenOnHit' has a wrong offset!");
static_assert(offsetof(BaseTween_JoinTweenScaleActorBy, DeleteTweenOnOverlap) == 0x00001A, "Member 'BaseTween_JoinTweenScaleActorBy::DeleteTweenOnOverlap' has a wrong offset!");
static_assert(offsetof(BaseTween_JoinTweenScaleActorBy, Delay) == 0x00001C, "Member 'BaseTween_JoinTweenScaleActorBy::Delay' has a wrong offset!");
static_assert(offsetof(BaseTween_JoinTweenScaleActorBy, TimeScale) == 0x000020, "Member 'BaseTween_JoinTweenScaleActorBy::TimeScale' has a wrong offset!");
static_assert(offsetof(BaseTween_JoinTweenScaleActorBy, TweenWhileGameIsPaused) == 0x000024, "Member 'BaseTween_JoinTweenScaleActorBy::TweenWhileGameIsPaused' has a wrong offset!");
static_assert(offsetof(BaseTween_JoinTweenScaleActorBy, ReturnValue) == 0x000028, "Member 'BaseTween_JoinTweenScaleActorBy::ReturnValue' has a wrong offset!");

// Function TweenMaker.BaseTween.JoinTweenScaleActorTo
// 0x0030 (0x0030 - 0x0000)
struct BaseTween_JoinTweenScaleActorTo final
{
public:
	class AActor*                                 TweenTarget;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                To;                                                // 0x0008(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Duration;                                          // 0x0014(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETweenEaseType                                EaseType;                                          // 0x0018(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETweenSpace                                   TweenSpace;                                        // 0x0019(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          DeleteTweenOnHit;                                  // 0x001A(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          DeleteTweenOnOverlap;                              // 0x001B(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Delay;                                             // 0x001C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TimeScale;                                         // 0x0020(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          TweenWhileGameIsPaused;                            // 0x0024(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_25[0x3];                                       // 0x0025(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UTweenVector*                           ReturnValue;                                       // 0x0028(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BaseTween_JoinTweenScaleActorTo) == 0x000008, "Wrong alignment on BaseTween_JoinTweenScaleActorTo");
static_assert(sizeof(BaseTween_JoinTweenScaleActorTo) == 0x000030, "Wrong size on BaseTween_JoinTweenScaleActorTo");
static_assert(offsetof(BaseTween_JoinTweenScaleActorTo, TweenTarget) == 0x000000, "Member 'BaseTween_JoinTweenScaleActorTo::TweenTarget' has a wrong offset!");
static_assert(offsetof(BaseTween_JoinTweenScaleActorTo, To) == 0x000008, "Member 'BaseTween_JoinTweenScaleActorTo::To' has a wrong offset!");
static_assert(offsetof(BaseTween_JoinTweenScaleActorTo, Duration) == 0x000014, "Member 'BaseTween_JoinTweenScaleActorTo::Duration' has a wrong offset!");
static_assert(offsetof(BaseTween_JoinTweenScaleActorTo, EaseType) == 0x000018, "Member 'BaseTween_JoinTweenScaleActorTo::EaseType' has a wrong offset!");
static_assert(offsetof(BaseTween_JoinTweenScaleActorTo, TweenSpace) == 0x000019, "Member 'BaseTween_JoinTweenScaleActorTo::TweenSpace' has a wrong offset!");
static_assert(offsetof(BaseTween_JoinTweenScaleActorTo, DeleteTweenOnHit) == 0x00001A, "Member 'BaseTween_JoinTweenScaleActorTo::DeleteTweenOnHit' has a wrong offset!");
static_assert(offsetof(BaseTween_JoinTweenScaleActorTo, DeleteTweenOnOverlap) == 0x00001B, "Member 'BaseTween_JoinTweenScaleActorTo::DeleteTweenOnOverlap' has a wrong offset!");
static_assert(offsetof(BaseTween_JoinTweenScaleActorTo, Delay) == 0x00001C, "Member 'BaseTween_JoinTweenScaleActorTo::Delay' has a wrong offset!");
static_assert(offsetof(BaseTween_JoinTweenScaleActorTo, TimeScale) == 0x000020, "Member 'BaseTween_JoinTweenScaleActorTo::TimeScale' has a wrong offset!");
static_assert(offsetof(BaseTween_JoinTweenScaleActorTo, TweenWhileGameIsPaused) == 0x000024, "Member 'BaseTween_JoinTweenScaleActorTo::TweenWhileGameIsPaused' has a wrong offset!");
static_assert(offsetof(BaseTween_JoinTweenScaleActorTo, ReturnValue) == 0x000028, "Member 'BaseTween_JoinTweenScaleActorTo::ReturnValue' has a wrong offset!");

// Function TweenMaker.BaseTween.JoinTweenScaleSceneComponentBy
// 0x0030 (0x0030 - 0x0000)
struct BaseTween_JoinTweenScaleSceneComponentBy final
{
public:
	class USceneComponent*                        TweenTarget;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, InstancedReference, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                bY;                                                // 0x0008(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Duration;                                          // 0x0014(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETweenEaseType                                EaseType;                                          // 0x0018(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          DeleteTweenOnHit;                                  // 0x0019(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          DeleteTweenOnOverlap;                              // 0x001A(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1B[0x1];                                       // 0x001B(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Delay;                                             // 0x001C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TimeScale;                                         // 0x0020(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          TweenWhileGameIsPaused;                            // 0x0024(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_25[0x3];                                       // 0x0025(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UTweenVector*                           ReturnValue;                                       // 0x0028(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BaseTween_JoinTweenScaleSceneComponentBy) == 0x000008, "Wrong alignment on BaseTween_JoinTweenScaleSceneComponentBy");
static_assert(sizeof(BaseTween_JoinTweenScaleSceneComponentBy) == 0x000030, "Wrong size on BaseTween_JoinTweenScaleSceneComponentBy");
static_assert(offsetof(BaseTween_JoinTweenScaleSceneComponentBy, TweenTarget) == 0x000000, "Member 'BaseTween_JoinTweenScaleSceneComponentBy::TweenTarget' has a wrong offset!");
static_assert(offsetof(BaseTween_JoinTweenScaleSceneComponentBy, bY) == 0x000008, "Member 'BaseTween_JoinTweenScaleSceneComponentBy::bY' has a wrong offset!");
static_assert(offsetof(BaseTween_JoinTweenScaleSceneComponentBy, Duration) == 0x000014, "Member 'BaseTween_JoinTweenScaleSceneComponentBy::Duration' has a wrong offset!");
static_assert(offsetof(BaseTween_JoinTweenScaleSceneComponentBy, EaseType) == 0x000018, "Member 'BaseTween_JoinTweenScaleSceneComponentBy::EaseType' has a wrong offset!");
static_assert(offsetof(BaseTween_JoinTweenScaleSceneComponentBy, DeleteTweenOnHit) == 0x000019, "Member 'BaseTween_JoinTweenScaleSceneComponentBy::DeleteTweenOnHit' has a wrong offset!");
static_assert(offsetof(BaseTween_JoinTweenScaleSceneComponentBy, DeleteTweenOnOverlap) == 0x00001A, "Member 'BaseTween_JoinTweenScaleSceneComponentBy::DeleteTweenOnOverlap' has a wrong offset!");
static_assert(offsetof(BaseTween_JoinTweenScaleSceneComponentBy, Delay) == 0x00001C, "Member 'BaseTween_JoinTweenScaleSceneComponentBy::Delay' has a wrong offset!");
static_assert(offsetof(BaseTween_JoinTweenScaleSceneComponentBy, TimeScale) == 0x000020, "Member 'BaseTween_JoinTweenScaleSceneComponentBy::TimeScale' has a wrong offset!");
static_assert(offsetof(BaseTween_JoinTweenScaleSceneComponentBy, TweenWhileGameIsPaused) == 0x000024, "Member 'BaseTween_JoinTweenScaleSceneComponentBy::TweenWhileGameIsPaused' has a wrong offset!");
static_assert(offsetof(BaseTween_JoinTweenScaleSceneComponentBy, ReturnValue) == 0x000028, "Member 'BaseTween_JoinTweenScaleSceneComponentBy::ReturnValue' has a wrong offset!");

// Function TweenMaker.BaseTween.JoinTweenScaleSceneComponentTo
// 0x0030 (0x0030 - 0x0000)
struct BaseTween_JoinTweenScaleSceneComponentTo final
{
public:
	class USceneComponent*                        TweenTarget;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, InstancedReference, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                To;                                                // 0x0008(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Duration;                                          // 0x0014(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETweenEaseType                                EaseType;                                          // 0x0018(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETweenSpace                                   TweenSpace;                                        // 0x0019(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          DeleteTweenOnHit;                                  // 0x001A(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          DeleteTweenOnOverlap;                              // 0x001B(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Delay;                                             // 0x001C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TimeScale;                                         // 0x0020(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          TweenWhileGameIsPaused;                            // 0x0024(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_25[0x3];                                       // 0x0025(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UTweenVector*                           ReturnValue;                                       // 0x0028(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BaseTween_JoinTweenScaleSceneComponentTo) == 0x000008, "Wrong alignment on BaseTween_JoinTweenScaleSceneComponentTo");
static_assert(sizeof(BaseTween_JoinTweenScaleSceneComponentTo) == 0x000030, "Wrong size on BaseTween_JoinTweenScaleSceneComponentTo");
static_assert(offsetof(BaseTween_JoinTweenScaleSceneComponentTo, TweenTarget) == 0x000000, "Member 'BaseTween_JoinTweenScaleSceneComponentTo::TweenTarget' has a wrong offset!");
static_assert(offsetof(BaseTween_JoinTweenScaleSceneComponentTo, To) == 0x000008, "Member 'BaseTween_JoinTweenScaleSceneComponentTo::To' has a wrong offset!");
static_assert(offsetof(BaseTween_JoinTweenScaleSceneComponentTo, Duration) == 0x000014, "Member 'BaseTween_JoinTweenScaleSceneComponentTo::Duration' has a wrong offset!");
static_assert(offsetof(BaseTween_JoinTweenScaleSceneComponentTo, EaseType) == 0x000018, "Member 'BaseTween_JoinTweenScaleSceneComponentTo::EaseType' has a wrong offset!");
static_assert(offsetof(BaseTween_JoinTweenScaleSceneComponentTo, TweenSpace) == 0x000019, "Member 'BaseTween_JoinTweenScaleSceneComponentTo::TweenSpace' has a wrong offset!");
static_assert(offsetof(BaseTween_JoinTweenScaleSceneComponentTo, DeleteTweenOnHit) == 0x00001A, "Member 'BaseTween_JoinTweenScaleSceneComponentTo::DeleteTweenOnHit' has a wrong offset!");
static_assert(offsetof(BaseTween_JoinTweenScaleSceneComponentTo, DeleteTweenOnOverlap) == 0x00001B, "Member 'BaseTween_JoinTweenScaleSceneComponentTo::DeleteTweenOnOverlap' has a wrong offset!");
static_assert(offsetof(BaseTween_JoinTweenScaleSceneComponentTo, Delay) == 0x00001C, "Member 'BaseTween_JoinTweenScaleSceneComponentTo::Delay' has a wrong offset!");
static_assert(offsetof(BaseTween_JoinTweenScaleSceneComponentTo, TimeScale) == 0x000020, "Member 'BaseTween_JoinTweenScaleSceneComponentTo::TimeScale' has a wrong offset!");
static_assert(offsetof(BaseTween_JoinTweenScaleSceneComponentTo, TweenWhileGameIsPaused) == 0x000024, "Member 'BaseTween_JoinTweenScaleSceneComponentTo::TweenWhileGameIsPaused' has a wrong offset!");
static_assert(offsetof(BaseTween_JoinTweenScaleSceneComponentTo, ReturnValue) == 0x000028, "Member 'BaseTween_JoinTweenScaleSceneComponentTo::ReturnValue' has a wrong offset!");

// Function TweenMaker.BaseTween.JoinTweenScaleWidgetBy
// 0x0030 (0x0030 - 0x0000)
struct BaseTween_JoinTweenScaleWidgetBy final
{
public:
	class UWidget*                                TweenTarget;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, InstancedReference, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2D                              bY;                                                // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Duration;                                          // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETweenEaseType                                EaseType;                                          // 0x0014(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_15[0x3];                                       // 0x0015(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Delay;                                             // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TimeScale;                                         // 0x001C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          TweenWhileGameIsPaused;                            // 0x0020(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_21[0x7];                                       // 0x0021(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UTweenVector2D*                         ReturnValue;                                       // 0x0028(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BaseTween_JoinTweenScaleWidgetBy) == 0x000008, "Wrong alignment on BaseTween_JoinTweenScaleWidgetBy");
static_assert(sizeof(BaseTween_JoinTweenScaleWidgetBy) == 0x000030, "Wrong size on BaseTween_JoinTweenScaleWidgetBy");
static_assert(offsetof(BaseTween_JoinTweenScaleWidgetBy, TweenTarget) == 0x000000, "Member 'BaseTween_JoinTweenScaleWidgetBy::TweenTarget' has a wrong offset!");
static_assert(offsetof(BaseTween_JoinTweenScaleWidgetBy, bY) == 0x000008, "Member 'BaseTween_JoinTweenScaleWidgetBy::bY' has a wrong offset!");
static_assert(offsetof(BaseTween_JoinTweenScaleWidgetBy, Duration) == 0x000010, "Member 'BaseTween_JoinTweenScaleWidgetBy::Duration' has a wrong offset!");
static_assert(offsetof(BaseTween_JoinTweenScaleWidgetBy, EaseType) == 0x000014, "Member 'BaseTween_JoinTweenScaleWidgetBy::EaseType' has a wrong offset!");
static_assert(offsetof(BaseTween_JoinTweenScaleWidgetBy, Delay) == 0x000018, "Member 'BaseTween_JoinTweenScaleWidgetBy::Delay' has a wrong offset!");
static_assert(offsetof(BaseTween_JoinTweenScaleWidgetBy, TimeScale) == 0x00001C, "Member 'BaseTween_JoinTweenScaleWidgetBy::TimeScale' has a wrong offset!");
static_assert(offsetof(BaseTween_JoinTweenScaleWidgetBy, TweenWhileGameIsPaused) == 0x000020, "Member 'BaseTween_JoinTweenScaleWidgetBy::TweenWhileGameIsPaused' has a wrong offset!");
static_assert(offsetof(BaseTween_JoinTweenScaleWidgetBy, ReturnValue) == 0x000028, "Member 'BaseTween_JoinTweenScaleWidgetBy::ReturnValue' has a wrong offset!");

// Function TweenMaker.BaseTween.JoinTweenScaleWidgetTo
// 0x0030 (0x0030 - 0x0000)
struct BaseTween_JoinTweenScaleWidgetTo final
{
public:
	class UWidget*                                TweenTarget;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, InstancedReference, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2D                              To;                                                // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Duration;                                          // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETweenEaseType                                EaseType;                                          // 0x0014(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_15[0x3];                                       // 0x0015(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Delay;                                             // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TimeScale;                                         // 0x001C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          TweenWhileGameIsPaused;                            // 0x0020(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_21[0x7];                                       // 0x0021(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UTweenVector2D*                         ReturnValue;                                       // 0x0028(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BaseTween_JoinTweenScaleWidgetTo) == 0x000008, "Wrong alignment on BaseTween_JoinTweenScaleWidgetTo");
static_assert(sizeof(BaseTween_JoinTweenScaleWidgetTo) == 0x000030, "Wrong size on BaseTween_JoinTweenScaleWidgetTo");
static_assert(offsetof(BaseTween_JoinTweenScaleWidgetTo, TweenTarget) == 0x000000, "Member 'BaseTween_JoinTweenScaleWidgetTo::TweenTarget' has a wrong offset!");
static_assert(offsetof(BaseTween_JoinTweenScaleWidgetTo, To) == 0x000008, "Member 'BaseTween_JoinTweenScaleWidgetTo::To' has a wrong offset!");
static_assert(offsetof(BaseTween_JoinTweenScaleWidgetTo, Duration) == 0x000010, "Member 'BaseTween_JoinTweenScaleWidgetTo::Duration' has a wrong offset!");
static_assert(offsetof(BaseTween_JoinTweenScaleWidgetTo, EaseType) == 0x000014, "Member 'BaseTween_JoinTweenScaleWidgetTo::EaseType' has a wrong offset!");
static_assert(offsetof(BaseTween_JoinTweenScaleWidgetTo, Delay) == 0x000018, "Member 'BaseTween_JoinTweenScaleWidgetTo::Delay' has a wrong offset!");
static_assert(offsetof(BaseTween_JoinTweenScaleWidgetTo, TimeScale) == 0x00001C, "Member 'BaseTween_JoinTweenScaleWidgetTo::TimeScale' has a wrong offset!");
static_assert(offsetof(BaseTween_JoinTweenScaleWidgetTo, TweenWhileGameIsPaused) == 0x000020, "Member 'BaseTween_JoinTweenScaleWidgetTo::TweenWhileGameIsPaused' has a wrong offset!");
static_assert(offsetof(BaseTween_JoinTweenScaleWidgetTo, ReturnValue) == 0x000028, "Member 'BaseTween_JoinTweenScaleWidgetTo::ReturnValue' has a wrong offset!");

// Function TweenMaker.BaseTween.JoinTweenSceneComponentFollowSpline
// 0x0030 (0x0030 - 0x0000)
struct BaseTween_JoinTweenSceneComponentFollowSpline final
{
public:
	class USceneComponent*                        TweenTarget;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, InstancedReference, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USplineComponent*                       Spline;                                            // 0x0008(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Duration;                                          // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ApplyRotation;                                     // 0x0014(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ApplyScale;                                        // 0x0015(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          UseConstantSpeed;                                  // 0x0016(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETweenEaseType                                EaseType;                                          // 0x0017(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          DeleteTweenOnHit;                                  // 0x0018(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          DeleteTweenOnOverlap;                              // 0x0019(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1A[0x2];                                       // 0x001A(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Delay;                                             // 0x001C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TimeScale;                                         // 0x0020(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          TweenWhileGameIsPaused;                            // 0x0024(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_25[0x3];                                       // 0x0025(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UTweenFloat*                            ReturnValue;                                       // 0x0028(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BaseTween_JoinTweenSceneComponentFollowSpline) == 0x000008, "Wrong alignment on BaseTween_JoinTweenSceneComponentFollowSpline");
static_assert(sizeof(BaseTween_JoinTweenSceneComponentFollowSpline) == 0x000030, "Wrong size on BaseTween_JoinTweenSceneComponentFollowSpline");
static_assert(offsetof(BaseTween_JoinTweenSceneComponentFollowSpline, TweenTarget) == 0x000000, "Member 'BaseTween_JoinTweenSceneComponentFollowSpline::TweenTarget' has a wrong offset!");
static_assert(offsetof(BaseTween_JoinTweenSceneComponentFollowSpline, Spline) == 0x000008, "Member 'BaseTween_JoinTweenSceneComponentFollowSpline::Spline' has a wrong offset!");
static_assert(offsetof(BaseTween_JoinTweenSceneComponentFollowSpline, Duration) == 0x000010, "Member 'BaseTween_JoinTweenSceneComponentFollowSpline::Duration' has a wrong offset!");
static_assert(offsetof(BaseTween_JoinTweenSceneComponentFollowSpline, ApplyRotation) == 0x000014, "Member 'BaseTween_JoinTweenSceneComponentFollowSpline::ApplyRotation' has a wrong offset!");
static_assert(offsetof(BaseTween_JoinTweenSceneComponentFollowSpline, ApplyScale) == 0x000015, "Member 'BaseTween_JoinTweenSceneComponentFollowSpline::ApplyScale' has a wrong offset!");
static_assert(offsetof(BaseTween_JoinTweenSceneComponentFollowSpline, UseConstantSpeed) == 0x000016, "Member 'BaseTween_JoinTweenSceneComponentFollowSpline::UseConstantSpeed' has a wrong offset!");
static_assert(offsetof(BaseTween_JoinTweenSceneComponentFollowSpline, EaseType) == 0x000017, "Member 'BaseTween_JoinTweenSceneComponentFollowSpline::EaseType' has a wrong offset!");
static_assert(offsetof(BaseTween_JoinTweenSceneComponentFollowSpline, DeleteTweenOnHit) == 0x000018, "Member 'BaseTween_JoinTweenSceneComponentFollowSpline::DeleteTweenOnHit' has a wrong offset!");
static_assert(offsetof(BaseTween_JoinTweenSceneComponentFollowSpline, DeleteTweenOnOverlap) == 0x000019, "Member 'BaseTween_JoinTweenSceneComponentFollowSpline::DeleteTweenOnOverlap' has a wrong offset!");
static_assert(offsetof(BaseTween_JoinTweenSceneComponentFollowSpline, Delay) == 0x00001C, "Member 'BaseTween_JoinTweenSceneComponentFollowSpline::Delay' has a wrong offset!");
static_assert(offsetof(BaseTween_JoinTweenSceneComponentFollowSpline, TimeScale) == 0x000020, "Member 'BaseTween_JoinTweenSceneComponentFollowSpline::TimeScale' has a wrong offset!");
static_assert(offsetof(BaseTween_JoinTweenSceneComponentFollowSpline, TweenWhileGameIsPaused) == 0x000024, "Member 'BaseTween_JoinTweenSceneComponentFollowSpline::TweenWhileGameIsPaused' has a wrong offset!");
static_assert(offsetof(BaseTween_JoinTweenSceneComponentFollowSpline, ReturnValue) == 0x000028, "Member 'BaseTween_JoinTweenSceneComponentFollowSpline::ReturnValue' has a wrong offset!");

// Function TweenMaker.BaseTween.JoinTweenShearWidgetTo
// 0x0030 (0x0030 - 0x0000)
struct BaseTween_JoinTweenShearWidgetTo final
{
public:
	class UWidget*                                TweenTarget;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, InstancedReference, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2D                              bY;                                                // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Duration;                                          // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETweenEaseType                                EaseType;                                          // 0x0014(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_15[0x3];                                       // 0x0015(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Delay;                                             // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TimeScale;                                         // 0x001C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          TweenWhileGameIsPaused;                            // 0x0020(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_21[0x7];                                       // 0x0021(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UTweenVector2D*                         ReturnValue;                                       // 0x0028(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BaseTween_JoinTweenShearWidgetTo) == 0x000008, "Wrong alignment on BaseTween_JoinTweenShearWidgetTo");
static_assert(sizeof(BaseTween_JoinTweenShearWidgetTo) == 0x000030, "Wrong size on BaseTween_JoinTweenShearWidgetTo");
static_assert(offsetof(BaseTween_JoinTweenShearWidgetTo, TweenTarget) == 0x000000, "Member 'BaseTween_JoinTweenShearWidgetTo::TweenTarget' has a wrong offset!");
static_assert(offsetof(BaseTween_JoinTweenShearWidgetTo, bY) == 0x000008, "Member 'BaseTween_JoinTweenShearWidgetTo::bY' has a wrong offset!");
static_assert(offsetof(BaseTween_JoinTweenShearWidgetTo, Duration) == 0x000010, "Member 'BaseTween_JoinTweenShearWidgetTo::Duration' has a wrong offset!");
static_assert(offsetof(BaseTween_JoinTweenShearWidgetTo, EaseType) == 0x000014, "Member 'BaseTween_JoinTweenShearWidgetTo::EaseType' has a wrong offset!");
static_assert(offsetof(BaseTween_JoinTweenShearWidgetTo, Delay) == 0x000018, "Member 'BaseTween_JoinTweenShearWidgetTo::Delay' has a wrong offset!");
static_assert(offsetof(BaseTween_JoinTweenShearWidgetTo, TimeScale) == 0x00001C, "Member 'BaseTween_JoinTweenShearWidgetTo::TimeScale' has a wrong offset!");
static_assert(offsetof(BaseTween_JoinTweenShearWidgetTo, TweenWhileGameIsPaused) == 0x000020, "Member 'BaseTween_JoinTweenShearWidgetTo::TweenWhileGameIsPaused' has a wrong offset!");
static_assert(offsetof(BaseTween_JoinTweenShearWidgetTo, ReturnValue) == 0x000028, "Member 'BaseTween_JoinTweenShearWidgetTo::ReturnValue' has a wrong offset!");

// Function TweenMaker.BaseTween.JoinTweenWidgetAngleTo
// 0x0028 (0x0028 - 0x0000)
struct BaseTween_JoinTweenWidgetAngleTo final
{
public:
	class UWidget*                                TweenTarget;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, InstancedReference, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         To;                                                // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Duration;                                          // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETweenEaseType                                EaseType;                                          // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x3];                                       // 0x0011(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Delay;                                             // 0x0014(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TimeScale;                                         // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          TweenWhileGameIsPaused;                            // 0x001C(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1D[0x3];                                       // 0x001D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UTweenFloat*                            ReturnValue;                                       // 0x0020(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BaseTween_JoinTweenWidgetAngleTo) == 0x000008, "Wrong alignment on BaseTween_JoinTweenWidgetAngleTo");
static_assert(sizeof(BaseTween_JoinTweenWidgetAngleTo) == 0x000028, "Wrong size on BaseTween_JoinTweenWidgetAngleTo");
static_assert(offsetof(BaseTween_JoinTweenWidgetAngleTo, TweenTarget) == 0x000000, "Member 'BaseTween_JoinTweenWidgetAngleTo::TweenTarget' has a wrong offset!");
static_assert(offsetof(BaseTween_JoinTweenWidgetAngleTo, To) == 0x000008, "Member 'BaseTween_JoinTweenWidgetAngleTo::To' has a wrong offset!");
static_assert(offsetof(BaseTween_JoinTweenWidgetAngleTo, Duration) == 0x00000C, "Member 'BaseTween_JoinTweenWidgetAngleTo::Duration' has a wrong offset!");
static_assert(offsetof(BaseTween_JoinTweenWidgetAngleTo, EaseType) == 0x000010, "Member 'BaseTween_JoinTweenWidgetAngleTo::EaseType' has a wrong offset!");
static_assert(offsetof(BaseTween_JoinTweenWidgetAngleTo, Delay) == 0x000014, "Member 'BaseTween_JoinTweenWidgetAngleTo::Delay' has a wrong offset!");
static_assert(offsetof(BaseTween_JoinTweenWidgetAngleTo, TimeScale) == 0x000018, "Member 'BaseTween_JoinTweenWidgetAngleTo::TimeScale' has a wrong offset!");
static_assert(offsetof(BaseTween_JoinTweenWidgetAngleTo, TweenWhileGameIsPaused) == 0x00001C, "Member 'BaseTween_JoinTweenWidgetAngleTo::TweenWhileGameIsPaused' has a wrong offset!");
static_assert(offsetof(BaseTween_JoinTweenWidgetAngleTo, ReturnValue) == 0x000020, "Member 'BaseTween_JoinTweenWidgetAngleTo::ReturnValue' has a wrong offset!");

// Function TweenMaker.BaseTween.JoinTweenWidgetOpacityTo
// 0x0028 (0x0028 - 0x0000)
struct BaseTween_JoinTweenWidgetOpacityTo final
{
public:
	class UWidget*                                TweenTarget;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, InstancedReference, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         To;                                                // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Duration;                                          // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETweenEaseType                                EaseType;                                          // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x3];                                       // 0x0011(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Delay;                                             // 0x0014(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TimeScale;                                         // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          TweenWhileGameIsPaused;                            // 0x001C(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1D[0x3];                                       // 0x001D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UTweenFloat*                            ReturnValue;                                       // 0x0020(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BaseTween_JoinTweenWidgetOpacityTo) == 0x000008, "Wrong alignment on BaseTween_JoinTweenWidgetOpacityTo");
static_assert(sizeof(BaseTween_JoinTweenWidgetOpacityTo) == 0x000028, "Wrong size on BaseTween_JoinTweenWidgetOpacityTo");
static_assert(offsetof(BaseTween_JoinTweenWidgetOpacityTo, TweenTarget) == 0x000000, "Member 'BaseTween_JoinTweenWidgetOpacityTo::TweenTarget' has a wrong offset!");
static_assert(offsetof(BaseTween_JoinTweenWidgetOpacityTo, To) == 0x000008, "Member 'BaseTween_JoinTweenWidgetOpacityTo::To' has a wrong offset!");
static_assert(offsetof(BaseTween_JoinTweenWidgetOpacityTo, Duration) == 0x00000C, "Member 'BaseTween_JoinTweenWidgetOpacityTo::Duration' has a wrong offset!");
static_assert(offsetof(BaseTween_JoinTweenWidgetOpacityTo, EaseType) == 0x000010, "Member 'BaseTween_JoinTweenWidgetOpacityTo::EaseType' has a wrong offset!");
static_assert(offsetof(BaseTween_JoinTweenWidgetOpacityTo, Delay) == 0x000014, "Member 'BaseTween_JoinTweenWidgetOpacityTo::Delay' has a wrong offset!");
static_assert(offsetof(BaseTween_JoinTweenWidgetOpacityTo, TimeScale) == 0x000018, "Member 'BaseTween_JoinTweenWidgetOpacityTo::TimeScale' has a wrong offset!");
static_assert(offsetof(BaseTween_JoinTweenWidgetOpacityTo, TweenWhileGameIsPaused) == 0x00001C, "Member 'BaseTween_JoinTweenWidgetOpacityTo::TweenWhileGameIsPaused' has a wrong offset!");
static_assert(offsetof(BaseTween_JoinTweenWidgetOpacityTo, ReturnValue) == 0x000020, "Member 'BaseTween_JoinTweenWidgetOpacityTo::ReturnValue' has a wrong offset!");

// Function TweenMaker.BaseTween.PauseTween
// 0x0001 (0x0001 - 0x0000)
struct BaseTween_PauseTween final
{
public:
	bool                                          SkipTween;                                         // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BaseTween_PauseTween) == 0x000001, "Wrong alignment on BaseTween_PauseTween");
static_assert(sizeof(BaseTween_PauseTween) == 0x000001, "Wrong size on BaseTween_PauseTween");
static_assert(offsetof(BaseTween_PauseTween, SkipTween) == 0x000000, "Member 'BaseTween_PauseTween::SkipTween' has a wrong offset!");

// Function TweenMaker.BaseTween.SetCustomEasisng
// 0x0008 (0x0008 - 0x0000)
struct BaseTween_SetCustomEasisng final
{
public:
	class UCurveFloat*                            Curve;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BaseTween_SetCustomEasisng) == 0x000008, "Wrong alignment on BaseTween_SetCustomEasisng");
static_assert(sizeof(BaseTween_SetCustomEasisng) == 0x000008, "Wrong size on BaseTween_SetCustomEasisng");
static_assert(offsetof(BaseTween_SetCustomEasisng, Curve) == 0x000000, "Member 'BaseTween_SetCustomEasisng::Curve' has a wrong offset!");

// Function TweenMaker.BaseTween.SetDelay
// 0x0004 (0x0004 - 0x0000)
struct BaseTween_SetDelay final
{
public:
	float                                         NewDelay;                                          // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BaseTween_SetDelay) == 0x000004, "Wrong alignment on BaseTween_SetDelay");
static_assert(sizeof(BaseTween_SetDelay) == 0x000004, "Wrong size on BaseTween_SetDelay");
static_assert(offsetof(BaseTween_SetDelay, NewDelay) == 0x000000, "Member 'BaseTween_SetDelay::NewDelay' has a wrong offset!");

// Function TweenMaker.BaseTween.SetTimeScale
// 0x0004 (0x0004 - 0x0000)
struct BaseTween_SetTimeScale final
{
public:
	float                                         NewTimeScale;                                      // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BaseTween_SetTimeScale) == 0x000004, "Wrong alignment on BaseTween_SetTimeScale");
static_assert(sizeof(BaseTween_SetTimeScale) == 0x000004, "Wrong size on BaseTween_SetTimeScale");
static_assert(offsetof(BaseTween_SetTimeScale, NewTimeScale) == 0x000000, "Member 'BaseTween_SetTimeScale::NewTimeScale' has a wrong offset!");

// Function TweenMaker.BaseTween.SetTweenName
// 0x0008 (0x0008 - 0x0000)
struct BaseTween_SetTweenName final
{
public:
	class FName                                   TweenName;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BaseTween_SetTweenName) == 0x000004, "Wrong alignment on BaseTween_SetTweenName");
static_assert(sizeof(BaseTween_SetTweenName) == 0x000008, "Wrong size on BaseTween_SetTweenName");
static_assert(offsetof(BaseTween_SetTweenName, TweenName) == 0x000000, "Member 'BaseTween_SetTweenName::TweenName' has a wrong offset!");

// Function TweenMaker.BaseTween.TogglePauseTween
// 0x0001 (0x0001 - 0x0000)
struct BaseTween_TogglePauseTween final
{
public:
	bool                                          SkipTween;                                         // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BaseTween_TogglePauseTween) == 0x000001, "Wrong alignment on BaseTween_TogglePauseTween");
static_assert(sizeof(BaseTween_TogglePauseTween) == 0x000001, "Wrong size on BaseTween_TogglePauseTween");
static_assert(offsetof(BaseTween_TogglePauseTween, SkipTween) == 0x000000, "Member 'BaseTween_TogglePauseTween::SkipTween' has a wrong offset!");

// Function TweenMaker.BaseTween.GetTimeScale
// 0x0004 (0x0004 - 0x0000)
struct BaseTween_GetTimeScale final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BaseTween_GetTimeScale) == 0x000004, "Wrong alignment on BaseTween_GetTimeScale");
static_assert(sizeof(BaseTween_GetTimeScale) == 0x000004, "Wrong size on BaseTween_GetTimeScale");
static_assert(offsetof(BaseTween_GetTimeScale, ReturnValue) == 0x000000, "Member 'BaseTween_GetTimeScale::ReturnValue' has a wrong offset!");

// Function TweenMaker.BaseTween.GetTweenContainer
// 0x0008 (0x0008 - 0x0000)
struct BaseTween_GetTweenContainer final
{
public:
	class UTweenContainer*                        ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BaseTween_GetTweenContainer) == 0x000008, "Wrong alignment on BaseTween_GetTweenContainer");
static_assert(sizeof(BaseTween_GetTweenContainer) == 0x000008, "Wrong size on BaseTween_GetTweenContainer");
static_assert(offsetof(BaseTween_GetTweenContainer, ReturnValue) == 0x000000, "Member 'BaseTween_GetTweenContainer::ReturnValue' has a wrong offset!");

// Function TweenMaker.BaseTween.GetTweenDuration
// 0x0004 (0x0004 - 0x0000)
struct BaseTween_GetTweenDuration final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BaseTween_GetTweenDuration) == 0x000004, "Wrong alignment on BaseTween_GetTweenDuration");
static_assert(sizeof(BaseTween_GetTweenDuration) == 0x000004, "Wrong size on BaseTween_GetTweenDuration");
static_assert(offsetof(BaseTween_GetTweenDuration, ReturnValue) == 0x000000, "Member 'BaseTween_GetTweenDuration::ReturnValue' has a wrong offset!");

// Function TweenMaker.BaseTween.GetTweenElapsedTime
// 0x0004 (0x0004 - 0x0000)
struct BaseTween_GetTweenElapsedTime final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BaseTween_GetTweenElapsedTime) == 0x000004, "Wrong alignment on BaseTween_GetTweenElapsedTime");
static_assert(sizeof(BaseTween_GetTweenElapsedTime) == 0x000004, "Wrong size on BaseTween_GetTweenElapsedTime");
static_assert(offsetof(BaseTween_GetTweenElapsedTime, ReturnValue) == 0x000000, "Member 'BaseTween_GetTweenElapsedTime::ReturnValue' has a wrong offset!");

// Function TweenMaker.BaseTween.GetTweenName
// 0x0008 (0x0008 - 0x0000)
struct BaseTween_GetTweenName final
{
public:
	class FName                                   ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BaseTween_GetTweenName) == 0x000004, "Wrong alignment on BaseTween_GetTweenName");
static_assert(sizeof(BaseTween_GetTweenName) == 0x000008, "Wrong size on BaseTween_GetTweenName");
static_assert(offsetof(BaseTween_GetTweenName, ReturnValue) == 0x000000, "Member 'BaseTween_GetTweenName::ReturnValue' has a wrong offset!");

// Function TweenMaker.BaseTween.GetTweenTarget
// 0x0008 (0x0008 - 0x0000)
struct BaseTween_GetTweenTarget final
{
public:
	class UObject*                                ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BaseTween_GetTweenTarget) == 0x000008, "Wrong alignment on BaseTween_GetTweenTarget");
static_assert(sizeof(BaseTween_GetTweenTarget) == 0x000008, "Wrong size on BaseTween_GetTweenTarget");
static_assert(offsetof(BaseTween_GetTweenTarget, ReturnValue) == 0x000000, "Member 'BaseTween_GetTweenTarget::ReturnValue' has a wrong offset!");

// Function TweenMaker.BaseTween.IsTweening
// 0x0001 (0x0001 - 0x0000)
struct BaseTween_IsTweening final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BaseTween_IsTweening) == 0x000001, "Wrong alignment on BaseTween_IsTweening");
static_assert(sizeof(BaseTween_IsTweening) == 0x000001, "Wrong size on BaseTween_IsTweening");
static_assert(offsetof(BaseTween_IsTweening, ReturnValue) == 0x000000, "Member 'BaseTween_IsTweening::ReturnValue' has a wrong offset!");

// Function TweenMaker.BaseTween.IsTweenPaused
// 0x0001 (0x0001 - 0x0000)
struct BaseTween_IsTweenPaused final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BaseTween_IsTweenPaused) == 0x000001, "Wrong alignment on BaseTween_IsTweenPaused");
static_assert(sizeof(BaseTween_IsTweenPaused) == 0x000001, "Wrong size on BaseTween_IsTweenPaused");
static_assert(offsetof(BaseTween_IsTweenPaused, ReturnValue) == 0x000000, "Member 'BaseTween_IsTweenPaused::ReturnValue' has a wrong offset!");

// Function TweenMaker.TweenContainer.DeleteTweensInContainerByObject
// 0x0010 (0x0010 - 0x0000)
struct TweenContainer_DeleteTweensInContainerByObject final
{
public:
	class UObject*                                TweenTarget;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETweenGenericType                             TweensType;                                        // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TweenContainer_DeleteTweensInContainerByObject) == 0x000008, "Wrong alignment on TweenContainer_DeleteTweensInContainerByObject");
static_assert(sizeof(TweenContainer_DeleteTweensInContainerByObject) == 0x000010, "Wrong size on TweenContainer_DeleteTweensInContainerByObject");
static_assert(offsetof(TweenContainer_DeleteTweensInContainerByObject, TweenTarget) == 0x000000, "Member 'TweenContainer_DeleteTweensInContainerByObject::TweenTarget' has a wrong offset!");
static_assert(offsetof(TweenContainer_DeleteTweensInContainerByObject, TweensType) == 0x000008, "Member 'TweenContainer_DeleteTweensInContainerByObject::TweensType' has a wrong offset!");

// Function TweenMaker.TweenContainer.SetLoop
// 0x0008 (0x0008 - 0x0000)
struct TweenContainer_SetLoop final
{
public:
	int32                                         NumLoops;                                          // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETweenLoopType                                LoopType;                                          // 0x0004(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TweenContainer_SetLoop) == 0x000004, "Wrong alignment on TweenContainer_SetLoop");
static_assert(sizeof(TweenContainer_SetLoop) == 0x000008, "Wrong size on TweenContainer_SetLoop");
static_assert(offsetof(TweenContainer_SetLoop, NumLoops) == 0x000000, "Member 'TweenContainer_SetLoop::NumLoops' has a wrong offset!");
static_assert(offsetof(TweenContainer_SetLoop, LoopType) == 0x000004, "Member 'TweenContainer_SetLoop::LoopType' has a wrong offset!");

// Function TweenMaker.TweenContainer.SetPersistent
// 0x0001 (0x0001 - 0x0000)
struct TweenContainer_SetPersistent final
{
public:
	bool                                          Persistent;                                        // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TweenContainer_SetPersistent) == 0x000001, "Wrong alignment on TweenContainer_SetPersistent");
static_assert(sizeof(TweenContainer_SetPersistent) == 0x000001, "Wrong size on TweenContainer_SetPersistent");
static_assert(offsetof(TweenContainer_SetPersistent, Persistent) == 0x000000, "Member 'TweenContainer_SetPersistent::Persistent' has a wrong offset!");

// Function TweenMaker.TweenContainer.SetTimeScale
// 0x0004 (0x0004 - 0x0000)
struct TweenContainer_SetTimeScale final
{
public:
	float                                         NewTimeScale;                                      // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TweenContainer_SetTimeScale) == 0x000004, "Wrong alignment on TweenContainer_SetTimeScale");
static_assert(sizeof(TweenContainer_SetTimeScale) == 0x000004, "Wrong size on TweenContainer_SetTimeScale");
static_assert(offsetof(TweenContainer_SetTimeScale, NewTimeScale) == 0x000000, "Member 'TweenContainer_SetTimeScale::NewTimeScale' has a wrong offset!");

// Function TweenMaker.TweenContainer.HasEnded
// 0x0001 (0x0001 - 0x0000)
struct TweenContainer_HasEnded final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TweenContainer_HasEnded) == 0x000001, "Wrong alignment on TweenContainer_HasEnded");
static_assert(sizeof(TweenContainer_HasEnded) == 0x000001, "Wrong size on TweenContainer_HasEnded");
static_assert(offsetof(TweenContainer_HasEnded, ReturnValue) == 0x000000, "Member 'TweenContainer_HasEnded::ReturnValue' has a wrong offset!");

// Function TweenMaker.TweenContainer.IsObjectTweeningInContainer
// 0x0020 (0x0020 - 0x0000)
struct TweenContainer_IsObjectTweeningInContainer final
{
public:
	class UObject*                                TweenTarget;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETweenGenericType                             TweensType;                                        // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UBaseTween*                             TweenFound;                                        // 0x0010(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0018(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TweenContainer_IsObjectTweeningInContainer) == 0x000008, "Wrong alignment on TweenContainer_IsObjectTweeningInContainer");
static_assert(sizeof(TweenContainer_IsObjectTweeningInContainer) == 0x000020, "Wrong size on TweenContainer_IsObjectTweeningInContainer");
static_assert(offsetof(TweenContainer_IsObjectTweeningInContainer, TweenTarget) == 0x000000, "Member 'TweenContainer_IsObjectTweeningInContainer::TweenTarget' has a wrong offset!");
static_assert(offsetof(TweenContainer_IsObjectTweeningInContainer, TweensType) == 0x000008, "Member 'TweenContainer_IsObjectTweeningInContainer::TweensType' has a wrong offset!");
static_assert(offsetof(TweenContainer_IsObjectTweeningInContainer, TweenFound) == 0x000010, "Member 'TweenContainer_IsObjectTweeningInContainer::TweenFound' has a wrong offset!");
static_assert(offsetof(TweenContainer_IsObjectTweeningInContainer, ReturnValue) == 0x000018, "Member 'TweenContainer_IsObjectTweeningInContainer::ReturnValue' has a wrong offset!");

// Function TweenMaker.TweenContainer.IsPaused
// 0x0001 (0x0001 - 0x0000)
struct TweenContainer_IsPaused final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TweenContainer_IsPaused) == 0x000001, "Wrong alignment on TweenContainer_IsPaused");
static_assert(sizeof(TweenContainer_IsPaused) == 0x000001, "Wrong size on TweenContainer_IsPaused");
static_assert(offsetof(TweenContainer_IsPaused, ReturnValue) == 0x000000, "Member 'TweenContainer_IsPaused::ReturnValue' has a wrong offset!");

// Function TweenMaker.TweenFloat.OnActorBeginOverlap
// 0x0010 (0x0010 - 0x0000)
struct TweenFloat_OnActorBeginOverlap final
{
public:
	class AActor*                                 PThisActor;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 POtherActor;                                       // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TweenFloat_OnActorBeginOverlap) == 0x000008, "Wrong alignment on TweenFloat_OnActorBeginOverlap");
static_assert(sizeof(TweenFloat_OnActorBeginOverlap) == 0x000010, "Wrong size on TweenFloat_OnActorBeginOverlap");
static_assert(offsetof(TweenFloat_OnActorBeginOverlap, PThisActor) == 0x000000, "Member 'TweenFloat_OnActorBeginOverlap::PThisActor' has a wrong offset!");
static_assert(offsetof(TweenFloat_OnActorBeginOverlap, POtherActor) == 0x000008, "Member 'TweenFloat_OnActorBeginOverlap::POtherActor' has a wrong offset!");

// Function TweenMaker.TweenFloat.OnActorHit
// 0x00A8 (0x00A8 - 0x0000)
struct TweenFloat_OnActorHit final
{
public:
	class AActor*                                 PThisActor;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 POtherActor;                                       // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                PNormalImpulse;                                    // 0x0010(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FHitResult                             PHit;                                              // 0x001C(0x008C)(ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(TweenFloat_OnActorHit) == 0x000008, "Wrong alignment on TweenFloat_OnActorHit");
static_assert(sizeof(TweenFloat_OnActorHit) == 0x0000A8, "Wrong size on TweenFloat_OnActorHit");
static_assert(offsetof(TweenFloat_OnActorHit, PThisActor) == 0x000000, "Member 'TweenFloat_OnActorHit::PThisActor' has a wrong offset!");
static_assert(offsetof(TweenFloat_OnActorHit, POtherActor) == 0x000008, "Member 'TweenFloat_OnActorHit::POtherActor' has a wrong offset!");
static_assert(offsetof(TweenFloat_OnActorHit, PNormalImpulse) == 0x000010, "Member 'TweenFloat_OnActorHit::PNormalImpulse' has a wrong offset!");
static_assert(offsetof(TweenFloat_OnActorHit, PHit) == 0x00001C, "Member 'TweenFloat_OnActorHit::PHit' has a wrong offset!");

// Function TweenMaker.TweenFloat.OnPrimitiveComponentBeginOverlap
// 0x00B0 (0x00B0 - 0x0000)
struct TweenFloat_OnPrimitiveComponentBeginOverlap final
{
public:
	class UPrimitiveComponent*                    PThisComponent;                                    // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 POtherActor;                                       // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UPrimitiveComponent*                    POtherComp;                                        // 0x0010(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         POtherBodyIndex;                                   // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bFromSweep;                                        // 0x001C(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1D[0x3];                                       // 0x001D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FHitResult                             PSweepResult;                                      // 0x0020(0x008C)(ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
	uint8                                         Pad_AC[0x4];                                       // 0x00AC(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TweenFloat_OnPrimitiveComponentBeginOverlap) == 0x000008, "Wrong alignment on TweenFloat_OnPrimitiveComponentBeginOverlap");
static_assert(sizeof(TweenFloat_OnPrimitiveComponentBeginOverlap) == 0x0000B0, "Wrong size on TweenFloat_OnPrimitiveComponentBeginOverlap");
static_assert(offsetof(TweenFloat_OnPrimitiveComponentBeginOverlap, PThisComponent) == 0x000000, "Member 'TweenFloat_OnPrimitiveComponentBeginOverlap::PThisComponent' has a wrong offset!");
static_assert(offsetof(TweenFloat_OnPrimitiveComponentBeginOverlap, POtherActor) == 0x000008, "Member 'TweenFloat_OnPrimitiveComponentBeginOverlap::POtherActor' has a wrong offset!");
static_assert(offsetof(TweenFloat_OnPrimitiveComponentBeginOverlap, POtherComp) == 0x000010, "Member 'TweenFloat_OnPrimitiveComponentBeginOverlap::POtherComp' has a wrong offset!");
static_assert(offsetof(TweenFloat_OnPrimitiveComponentBeginOverlap, POtherBodyIndex) == 0x000018, "Member 'TweenFloat_OnPrimitiveComponentBeginOverlap::POtherBodyIndex' has a wrong offset!");
static_assert(offsetof(TweenFloat_OnPrimitiveComponentBeginOverlap, bFromSweep) == 0x00001C, "Member 'TweenFloat_OnPrimitiveComponentBeginOverlap::bFromSweep' has a wrong offset!");
static_assert(offsetof(TweenFloat_OnPrimitiveComponentBeginOverlap, PSweepResult) == 0x000020, "Member 'TweenFloat_OnPrimitiveComponentBeginOverlap::PSweepResult' has a wrong offset!");

// Function TweenMaker.TweenFloat.OnPrimitiveComponentHit
// 0x00B0 (0x00B0 - 0x0000)
struct TweenFloat_OnPrimitiveComponentHit final
{
public:
	class UPrimitiveComponent*                    PThisComponent;                                    // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 POtherActor;                                       // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UPrimitiveComponent*                    POtherComp;                                        // 0x0010(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                PNormalImpulse;                                    // 0x0018(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FHitResult                             PHitResult;                                        // 0x0024(0x008C)(ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(TweenFloat_OnPrimitiveComponentHit) == 0x000008, "Wrong alignment on TweenFloat_OnPrimitiveComponentHit");
static_assert(sizeof(TweenFloat_OnPrimitiveComponentHit) == 0x0000B0, "Wrong size on TweenFloat_OnPrimitiveComponentHit");
static_assert(offsetof(TweenFloat_OnPrimitiveComponentHit, PThisComponent) == 0x000000, "Member 'TweenFloat_OnPrimitiveComponentHit::PThisComponent' has a wrong offset!");
static_assert(offsetof(TweenFloat_OnPrimitiveComponentHit, POtherActor) == 0x000008, "Member 'TweenFloat_OnPrimitiveComponentHit::POtherActor' has a wrong offset!");
static_assert(offsetof(TweenFloat_OnPrimitiveComponentHit, POtherComp) == 0x000010, "Member 'TweenFloat_OnPrimitiveComponentHit::POtherComp' has a wrong offset!");
static_assert(offsetof(TweenFloat_OnPrimitiveComponentHit, PNormalImpulse) == 0x000018, "Member 'TweenFloat_OnPrimitiveComponentHit::PNormalImpulse' has a wrong offset!");
static_assert(offsetof(TweenFloat_OnPrimitiveComponentHit, PHitResult) == 0x000024, "Member 'TweenFloat_OnPrimitiveComponentHit::PHitResult' has a wrong offset!");

// Function TweenMaker.TweenFloat.GetCurrentValue
// 0x0004 (0x0004 - 0x0000)
struct TweenFloat_GetCurrentValue final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TweenFloat_GetCurrentValue) == 0x000004, "Wrong alignment on TweenFloat_GetCurrentValue");
static_assert(sizeof(TweenFloat_GetCurrentValue) == 0x000004, "Wrong size on TweenFloat_GetCurrentValue");
static_assert(offsetof(TweenFloat_GetCurrentValue, ReturnValue) == 0x000000, "Member 'TweenFloat_GetCurrentValue::ReturnValue' has a wrong offset!");

// Function TweenMaker.TweenFloatLatentFactory.BP_AppendLatentTweenActorFollowSpline
// 0x0048 (0x0048 - 0x0000)
struct TweenFloatLatentFactory_BP_AppendLatentTweenActorFollowSpline final
{
public:
	class UTweenContainer*                        TweenContainer;                                    // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UTweenFloat*                            OutTween;                                          // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 TweenTarget;                                       // 0x0010(0x0008)(Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USplineComponent*                       Spline;                                            // 0x0018(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Duration;                                          // 0x0020(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ApplyRotation;                                     // 0x0024(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ApplyScale;                                        // 0x0025(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          UseConstantSpeed;                                  // 0x0026(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETweenEaseType                                EaseType;                                          // 0x0027(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          DeleteTweenOnHit;                                  // 0x0028(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          DeleteTweenOnOverlap;                              // 0x0029(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2A[0x2];                                       // 0x002A(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         NumLoops;                                          // 0x002C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETweenLoopType                                LoopType;                                          // 0x0030(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_31[0x3];                                       // 0x0031(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Delay;                                             // 0x0034(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TimeScale;                                         // 0x0038(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          TweenWhileGameIsPaused;                            // 0x003C(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_3D[0x3];                                       // 0x003D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UTweenFloatLatentFactory*               ReturnValue;                                       // 0x0040(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TweenFloatLatentFactory_BP_AppendLatentTweenActorFollowSpline) == 0x000008, "Wrong alignment on TweenFloatLatentFactory_BP_AppendLatentTweenActorFollowSpline");
static_assert(sizeof(TweenFloatLatentFactory_BP_AppendLatentTweenActorFollowSpline) == 0x000048, "Wrong size on TweenFloatLatentFactory_BP_AppendLatentTweenActorFollowSpline");
static_assert(offsetof(TweenFloatLatentFactory_BP_AppendLatentTweenActorFollowSpline, TweenContainer) == 0x000000, "Member 'TweenFloatLatentFactory_BP_AppendLatentTweenActorFollowSpline::TweenContainer' has a wrong offset!");
static_assert(offsetof(TweenFloatLatentFactory_BP_AppendLatentTweenActorFollowSpline, OutTween) == 0x000008, "Member 'TweenFloatLatentFactory_BP_AppendLatentTweenActorFollowSpline::OutTween' has a wrong offset!");
static_assert(offsetof(TweenFloatLatentFactory_BP_AppendLatentTweenActorFollowSpline, TweenTarget) == 0x000010, "Member 'TweenFloatLatentFactory_BP_AppendLatentTweenActorFollowSpline::TweenTarget' has a wrong offset!");
static_assert(offsetof(TweenFloatLatentFactory_BP_AppendLatentTweenActorFollowSpline, Spline) == 0x000018, "Member 'TweenFloatLatentFactory_BP_AppendLatentTweenActorFollowSpline::Spline' has a wrong offset!");
static_assert(offsetof(TweenFloatLatentFactory_BP_AppendLatentTweenActorFollowSpline, Duration) == 0x000020, "Member 'TweenFloatLatentFactory_BP_AppendLatentTweenActorFollowSpline::Duration' has a wrong offset!");
static_assert(offsetof(TweenFloatLatentFactory_BP_AppendLatentTweenActorFollowSpline, ApplyRotation) == 0x000024, "Member 'TweenFloatLatentFactory_BP_AppendLatentTweenActorFollowSpline::ApplyRotation' has a wrong offset!");
static_assert(offsetof(TweenFloatLatentFactory_BP_AppendLatentTweenActorFollowSpline, ApplyScale) == 0x000025, "Member 'TweenFloatLatentFactory_BP_AppendLatentTweenActorFollowSpline::ApplyScale' has a wrong offset!");
static_assert(offsetof(TweenFloatLatentFactory_BP_AppendLatentTweenActorFollowSpline, UseConstantSpeed) == 0x000026, "Member 'TweenFloatLatentFactory_BP_AppendLatentTweenActorFollowSpline::UseConstantSpeed' has a wrong offset!");
static_assert(offsetof(TweenFloatLatentFactory_BP_AppendLatentTweenActorFollowSpline, EaseType) == 0x000027, "Member 'TweenFloatLatentFactory_BP_AppendLatentTweenActorFollowSpline::EaseType' has a wrong offset!");
static_assert(offsetof(TweenFloatLatentFactory_BP_AppendLatentTweenActorFollowSpline, DeleteTweenOnHit) == 0x000028, "Member 'TweenFloatLatentFactory_BP_AppendLatentTweenActorFollowSpline::DeleteTweenOnHit' has a wrong offset!");
static_assert(offsetof(TweenFloatLatentFactory_BP_AppendLatentTweenActorFollowSpline, DeleteTweenOnOverlap) == 0x000029, "Member 'TweenFloatLatentFactory_BP_AppendLatentTweenActorFollowSpline::DeleteTweenOnOverlap' has a wrong offset!");
static_assert(offsetof(TweenFloatLatentFactory_BP_AppendLatentTweenActorFollowSpline, NumLoops) == 0x00002C, "Member 'TweenFloatLatentFactory_BP_AppendLatentTweenActorFollowSpline::NumLoops' has a wrong offset!");
static_assert(offsetof(TweenFloatLatentFactory_BP_AppendLatentTweenActorFollowSpline, LoopType) == 0x000030, "Member 'TweenFloatLatentFactory_BP_AppendLatentTweenActorFollowSpline::LoopType' has a wrong offset!");
static_assert(offsetof(TweenFloatLatentFactory_BP_AppendLatentTweenActorFollowSpline, Delay) == 0x000034, "Member 'TweenFloatLatentFactory_BP_AppendLatentTweenActorFollowSpline::Delay' has a wrong offset!");
static_assert(offsetof(TweenFloatLatentFactory_BP_AppendLatentTweenActorFollowSpline, TimeScale) == 0x000038, "Member 'TweenFloatLatentFactory_BP_AppendLatentTweenActorFollowSpline::TimeScale' has a wrong offset!");
static_assert(offsetof(TweenFloatLatentFactory_BP_AppendLatentTweenActorFollowSpline, TweenWhileGameIsPaused) == 0x00003C, "Member 'TweenFloatLatentFactory_BP_AppendLatentTweenActorFollowSpline::TweenWhileGameIsPaused' has a wrong offset!");
static_assert(offsetof(TweenFloatLatentFactory_BP_AppendLatentTweenActorFollowSpline, ReturnValue) == 0x000040, "Member 'TweenFloatLatentFactory_BP_AppendLatentTweenActorFollowSpline::ReturnValue' has a wrong offset!");

// Function TweenMaker.TweenFloatLatentFactory.BP_AppendLatentTweenCustomFloat
// 0x0048 (0x0048 - 0x0000)
struct TweenFloatLatentFactory_BP_AppendLatentTweenCustomFloat final
{
public:
	class UTweenContainer*                        TweenContainer;                                    // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UTweenFloat*                            OutTween;                                          // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UObject*                                TweenTarget;                                       // 0x0010(0x0008)(Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         From;                                              // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         To;                                                // 0x001C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Duration;                                          // 0x0020(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETweenEaseType                                EaseType;                                          // 0x0024(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_25[0x3];                                       // 0x0025(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         NumLoops;                                          // 0x0028(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETweenLoopType                                LoopType;                                          // 0x002C(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2D[0x3];                                       // 0x002D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Delay;                                             // 0x0030(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TimeScale;                                         // 0x0034(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          TweenWhileGameIsPaused;                            // 0x0038(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_39[0x7];                                       // 0x0039(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UTweenFloatLatentFactory*               ReturnValue;                                       // 0x0040(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TweenFloatLatentFactory_BP_AppendLatentTweenCustomFloat) == 0x000008, "Wrong alignment on TweenFloatLatentFactory_BP_AppendLatentTweenCustomFloat");
static_assert(sizeof(TweenFloatLatentFactory_BP_AppendLatentTweenCustomFloat) == 0x000048, "Wrong size on TweenFloatLatentFactory_BP_AppendLatentTweenCustomFloat");
static_assert(offsetof(TweenFloatLatentFactory_BP_AppendLatentTweenCustomFloat, TweenContainer) == 0x000000, "Member 'TweenFloatLatentFactory_BP_AppendLatentTweenCustomFloat::TweenContainer' has a wrong offset!");
static_assert(offsetof(TweenFloatLatentFactory_BP_AppendLatentTweenCustomFloat, OutTween) == 0x000008, "Member 'TweenFloatLatentFactory_BP_AppendLatentTweenCustomFloat::OutTween' has a wrong offset!");
static_assert(offsetof(TweenFloatLatentFactory_BP_AppendLatentTweenCustomFloat, TweenTarget) == 0x000010, "Member 'TweenFloatLatentFactory_BP_AppendLatentTweenCustomFloat::TweenTarget' has a wrong offset!");
static_assert(offsetof(TweenFloatLatentFactory_BP_AppendLatentTweenCustomFloat, From) == 0x000018, "Member 'TweenFloatLatentFactory_BP_AppendLatentTweenCustomFloat::From' has a wrong offset!");
static_assert(offsetof(TweenFloatLatentFactory_BP_AppendLatentTweenCustomFloat, To) == 0x00001C, "Member 'TweenFloatLatentFactory_BP_AppendLatentTweenCustomFloat::To' has a wrong offset!");
static_assert(offsetof(TweenFloatLatentFactory_BP_AppendLatentTweenCustomFloat, Duration) == 0x000020, "Member 'TweenFloatLatentFactory_BP_AppendLatentTweenCustomFloat::Duration' has a wrong offset!");
static_assert(offsetof(TweenFloatLatentFactory_BP_AppendLatentTweenCustomFloat, EaseType) == 0x000024, "Member 'TweenFloatLatentFactory_BP_AppendLatentTweenCustomFloat::EaseType' has a wrong offset!");
static_assert(offsetof(TweenFloatLatentFactory_BP_AppendLatentTweenCustomFloat, NumLoops) == 0x000028, "Member 'TweenFloatLatentFactory_BP_AppendLatentTweenCustomFloat::NumLoops' has a wrong offset!");
static_assert(offsetof(TweenFloatLatentFactory_BP_AppendLatentTweenCustomFloat, LoopType) == 0x00002C, "Member 'TweenFloatLatentFactory_BP_AppendLatentTweenCustomFloat::LoopType' has a wrong offset!");
static_assert(offsetof(TweenFloatLatentFactory_BP_AppendLatentTweenCustomFloat, Delay) == 0x000030, "Member 'TweenFloatLatentFactory_BP_AppendLatentTweenCustomFloat::Delay' has a wrong offset!");
static_assert(offsetof(TweenFloatLatentFactory_BP_AppendLatentTweenCustomFloat, TimeScale) == 0x000034, "Member 'TweenFloatLatentFactory_BP_AppendLatentTweenCustomFloat::TimeScale' has a wrong offset!");
static_assert(offsetof(TweenFloatLatentFactory_BP_AppendLatentTweenCustomFloat, TweenWhileGameIsPaused) == 0x000038, "Member 'TweenFloatLatentFactory_BP_AppendLatentTweenCustomFloat::TweenWhileGameIsPaused' has a wrong offset!");
static_assert(offsetof(TweenFloatLatentFactory_BP_AppendLatentTweenCustomFloat, ReturnValue) == 0x000040, "Member 'TweenFloatLatentFactory_BP_AppendLatentTweenCustomFloat::ReturnValue' has a wrong offset!");

// Function TweenMaker.TweenFloatLatentFactory.BP_AppendLatentTweenMaterialFloatFromTo
// 0x0050 (0x0050 - 0x0000)
struct TweenFloatLatentFactory_BP_AppendLatentTweenMaterialFloatFromTo final
{
public:
	class UTweenContainer*                        TweenContainer;                                    // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UTweenFloat*                            OutTween;                                          // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UMaterialInstanceDynamic*               TweenTarget;                                       // 0x0010(0x0008)(Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   ParameterName;                                     // 0x0018(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         From;                                              // 0x0020(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         To;                                                // 0x0024(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Duration;                                          // 0x0028(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETweenEaseType                                EaseType;                                          // 0x002C(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2D[0x3];                                       // 0x002D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         NumLoops;                                          // 0x0030(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETweenLoopType                                LoopType;                                          // 0x0034(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_35[0x3];                                       // 0x0035(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Delay;                                             // 0x0038(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TimeScale;                                         // 0x003C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          TweenWhileGameIsPaused;                            // 0x0040(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_41[0x7];                                       // 0x0041(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UTweenFloatLatentFactory*               ReturnValue;                                       // 0x0048(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TweenFloatLatentFactory_BP_AppendLatentTweenMaterialFloatFromTo) == 0x000008, "Wrong alignment on TweenFloatLatentFactory_BP_AppendLatentTweenMaterialFloatFromTo");
static_assert(sizeof(TweenFloatLatentFactory_BP_AppendLatentTweenMaterialFloatFromTo) == 0x000050, "Wrong size on TweenFloatLatentFactory_BP_AppendLatentTweenMaterialFloatFromTo");
static_assert(offsetof(TweenFloatLatentFactory_BP_AppendLatentTweenMaterialFloatFromTo, TweenContainer) == 0x000000, "Member 'TweenFloatLatentFactory_BP_AppendLatentTweenMaterialFloatFromTo::TweenContainer' has a wrong offset!");
static_assert(offsetof(TweenFloatLatentFactory_BP_AppendLatentTweenMaterialFloatFromTo, OutTween) == 0x000008, "Member 'TweenFloatLatentFactory_BP_AppendLatentTweenMaterialFloatFromTo::OutTween' has a wrong offset!");
static_assert(offsetof(TweenFloatLatentFactory_BP_AppendLatentTweenMaterialFloatFromTo, TweenTarget) == 0x000010, "Member 'TweenFloatLatentFactory_BP_AppendLatentTweenMaterialFloatFromTo::TweenTarget' has a wrong offset!");
static_assert(offsetof(TweenFloatLatentFactory_BP_AppendLatentTweenMaterialFloatFromTo, ParameterName) == 0x000018, "Member 'TweenFloatLatentFactory_BP_AppendLatentTweenMaterialFloatFromTo::ParameterName' has a wrong offset!");
static_assert(offsetof(TweenFloatLatentFactory_BP_AppendLatentTweenMaterialFloatFromTo, From) == 0x000020, "Member 'TweenFloatLatentFactory_BP_AppendLatentTweenMaterialFloatFromTo::From' has a wrong offset!");
static_assert(offsetof(TweenFloatLatentFactory_BP_AppendLatentTweenMaterialFloatFromTo, To) == 0x000024, "Member 'TweenFloatLatentFactory_BP_AppendLatentTweenMaterialFloatFromTo::To' has a wrong offset!");
static_assert(offsetof(TweenFloatLatentFactory_BP_AppendLatentTweenMaterialFloatFromTo, Duration) == 0x000028, "Member 'TweenFloatLatentFactory_BP_AppendLatentTweenMaterialFloatFromTo::Duration' has a wrong offset!");
static_assert(offsetof(TweenFloatLatentFactory_BP_AppendLatentTweenMaterialFloatFromTo, EaseType) == 0x00002C, "Member 'TweenFloatLatentFactory_BP_AppendLatentTweenMaterialFloatFromTo::EaseType' has a wrong offset!");
static_assert(offsetof(TweenFloatLatentFactory_BP_AppendLatentTweenMaterialFloatFromTo, NumLoops) == 0x000030, "Member 'TweenFloatLatentFactory_BP_AppendLatentTweenMaterialFloatFromTo::NumLoops' has a wrong offset!");
static_assert(offsetof(TweenFloatLatentFactory_BP_AppendLatentTweenMaterialFloatFromTo, LoopType) == 0x000034, "Member 'TweenFloatLatentFactory_BP_AppendLatentTweenMaterialFloatFromTo::LoopType' has a wrong offset!");
static_assert(offsetof(TweenFloatLatentFactory_BP_AppendLatentTweenMaterialFloatFromTo, Delay) == 0x000038, "Member 'TweenFloatLatentFactory_BP_AppendLatentTweenMaterialFloatFromTo::Delay' has a wrong offset!");
static_assert(offsetof(TweenFloatLatentFactory_BP_AppendLatentTweenMaterialFloatFromTo, TimeScale) == 0x00003C, "Member 'TweenFloatLatentFactory_BP_AppendLatentTweenMaterialFloatFromTo::TimeScale' has a wrong offset!");
static_assert(offsetof(TweenFloatLatentFactory_BP_AppendLatentTweenMaterialFloatFromTo, TweenWhileGameIsPaused) == 0x000040, "Member 'TweenFloatLatentFactory_BP_AppendLatentTweenMaterialFloatFromTo::TweenWhileGameIsPaused' has a wrong offset!");
static_assert(offsetof(TweenFloatLatentFactory_BP_AppendLatentTweenMaterialFloatFromTo, ReturnValue) == 0x000048, "Member 'TweenFloatLatentFactory_BP_AppendLatentTweenMaterialFloatFromTo::ReturnValue' has a wrong offset!");

// Function TweenMaker.TweenFloatLatentFactory.BP_AppendLatentTweenMaterialFloatTo
// 0x0048 (0x0048 - 0x0000)
struct TweenFloatLatentFactory_BP_AppendLatentTweenMaterialFloatTo final
{
public:
	class UTweenContainer*                        TweenContainer;                                    // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UTweenFloat*                            OutTween;                                          // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UMaterialInstanceDynamic*               TweenTarget;                                       // 0x0010(0x0008)(Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   ParameterName;                                     // 0x0018(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         To;                                                // 0x0020(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Duration;                                          // 0x0024(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETweenEaseType                                EaseType;                                          // 0x0028(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_29[0x3];                                       // 0x0029(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         NumLoops;                                          // 0x002C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETweenLoopType                                LoopType;                                          // 0x0030(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_31[0x3];                                       // 0x0031(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Delay;                                             // 0x0034(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TimeScale;                                         // 0x0038(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          TweenWhileGameIsPaused;                            // 0x003C(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_3D[0x3];                                       // 0x003D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UTweenFloatLatentFactory*               ReturnValue;                                       // 0x0040(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TweenFloatLatentFactory_BP_AppendLatentTweenMaterialFloatTo) == 0x000008, "Wrong alignment on TweenFloatLatentFactory_BP_AppendLatentTweenMaterialFloatTo");
static_assert(sizeof(TweenFloatLatentFactory_BP_AppendLatentTweenMaterialFloatTo) == 0x000048, "Wrong size on TweenFloatLatentFactory_BP_AppendLatentTweenMaterialFloatTo");
static_assert(offsetof(TweenFloatLatentFactory_BP_AppendLatentTweenMaterialFloatTo, TweenContainer) == 0x000000, "Member 'TweenFloatLatentFactory_BP_AppendLatentTweenMaterialFloatTo::TweenContainer' has a wrong offset!");
static_assert(offsetof(TweenFloatLatentFactory_BP_AppendLatentTweenMaterialFloatTo, OutTween) == 0x000008, "Member 'TweenFloatLatentFactory_BP_AppendLatentTweenMaterialFloatTo::OutTween' has a wrong offset!");
static_assert(offsetof(TweenFloatLatentFactory_BP_AppendLatentTweenMaterialFloatTo, TweenTarget) == 0x000010, "Member 'TweenFloatLatentFactory_BP_AppendLatentTweenMaterialFloatTo::TweenTarget' has a wrong offset!");
static_assert(offsetof(TweenFloatLatentFactory_BP_AppendLatentTweenMaterialFloatTo, ParameterName) == 0x000018, "Member 'TweenFloatLatentFactory_BP_AppendLatentTweenMaterialFloatTo::ParameterName' has a wrong offset!");
static_assert(offsetof(TweenFloatLatentFactory_BP_AppendLatentTweenMaterialFloatTo, To) == 0x000020, "Member 'TweenFloatLatentFactory_BP_AppendLatentTweenMaterialFloatTo::To' has a wrong offset!");
static_assert(offsetof(TweenFloatLatentFactory_BP_AppendLatentTweenMaterialFloatTo, Duration) == 0x000024, "Member 'TweenFloatLatentFactory_BP_AppendLatentTweenMaterialFloatTo::Duration' has a wrong offset!");
static_assert(offsetof(TweenFloatLatentFactory_BP_AppendLatentTweenMaterialFloatTo, EaseType) == 0x000028, "Member 'TweenFloatLatentFactory_BP_AppendLatentTweenMaterialFloatTo::EaseType' has a wrong offset!");
static_assert(offsetof(TweenFloatLatentFactory_BP_AppendLatentTweenMaterialFloatTo, NumLoops) == 0x00002C, "Member 'TweenFloatLatentFactory_BP_AppendLatentTweenMaterialFloatTo::NumLoops' has a wrong offset!");
static_assert(offsetof(TweenFloatLatentFactory_BP_AppendLatentTweenMaterialFloatTo, LoopType) == 0x000030, "Member 'TweenFloatLatentFactory_BP_AppendLatentTweenMaterialFloatTo::LoopType' has a wrong offset!");
static_assert(offsetof(TweenFloatLatentFactory_BP_AppendLatentTweenMaterialFloatTo, Delay) == 0x000034, "Member 'TweenFloatLatentFactory_BP_AppendLatentTweenMaterialFloatTo::Delay' has a wrong offset!");
static_assert(offsetof(TweenFloatLatentFactory_BP_AppendLatentTweenMaterialFloatTo, TimeScale) == 0x000038, "Member 'TweenFloatLatentFactory_BP_AppendLatentTweenMaterialFloatTo::TimeScale' has a wrong offset!");
static_assert(offsetof(TweenFloatLatentFactory_BP_AppendLatentTweenMaterialFloatTo, TweenWhileGameIsPaused) == 0x00003C, "Member 'TweenFloatLatentFactory_BP_AppendLatentTweenMaterialFloatTo::TweenWhileGameIsPaused' has a wrong offset!");
static_assert(offsetof(TweenFloatLatentFactory_BP_AppendLatentTweenMaterialFloatTo, ReturnValue) == 0x000040, "Member 'TweenFloatLatentFactory_BP_AppendLatentTweenMaterialFloatTo::ReturnValue' has a wrong offset!");

// Function TweenMaker.TweenFloatLatentFactory.BP_AppendLatentTweenRotateActorAroundPoint
// 0x0060 (0x0060 - 0x0000)
struct TweenFloatLatentFactory_BP_AppendLatentTweenRotateActorAroundPoint final
{
public:
	class UTweenContainer*                        TweenContainer;                                    // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UTweenFloat*                            OutTween;                                          // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 TweenTarget;                                       // 0x0010(0x0008)(Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                PivotPoint;                                        // 0x0018(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         StartingAngle;                                     // 0x0024(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         EndingAngle;                                       // 0x0028(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Radius;                                            // 0x002C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                Axis;                                              // 0x0030(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Duration;                                          // 0x003C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETweenEaseType                                EaseType;                                          // 0x0040(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          DeleteTweenOnHit;                                  // 0x0041(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          DeleteTweenOnOverlap;                              // 0x0042(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_43[0x1];                                       // 0x0043(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         NumLoops;                                          // 0x0044(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETweenLoopType                                LoopType;                                          // 0x0048(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_49[0x3];                                       // 0x0049(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Delay;                                             // 0x004C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TimeScale;                                         // 0x0050(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          TweenWhileGameIsPaused;                            // 0x0054(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_55[0x3];                                       // 0x0055(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UTweenFloatLatentFactory*               ReturnValue;                                       // 0x0058(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TweenFloatLatentFactory_BP_AppendLatentTweenRotateActorAroundPoint) == 0x000008, "Wrong alignment on TweenFloatLatentFactory_BP_AppendLatentTweenRotateActorAroundPoint");
static_assert(sizeof(TweenFloatLatentFactory_BP_AppendLatentTweenRotateActorAroundPoint) == 0x000060, "Wrong size on TweenFloatLatentFactory_BP_AppendLatentTweenRotateActorAroundPoint");
static_assert(offsetof(TweenFloatLatentFactory_BP_AppendLatentTweenRotateActorAroundPoint, TweenContainer) == 0x000000, "Member 'TweenFloatLatentFactory_BP_AppendLatentTweenRotateActorAroundPoint::TweenContainer' has a wrong offset!");
static_assert(offsetof(TweenFloatLatentFactory_BP_AppendLatentTweenRotateActorAroundPoint, OutTween) == 0x000008, "Member 'TweenFloatLatentFactory_BP_AppendLatentTweenRotateActorAroundPoint::OutTween' has a wrong offset!");
static_assert(offsetof(TweenFloatLatentFactory_BP_AppendLatentTweenRotateActorAroundPoint, TweenTarget) == 0x000010, "Member 'TweenFloatLatentFactory_BP_AppendLatentTweenRotateActorAroundPoint::TweenTarget' has a wrong offset!");
static_assert(offsetof(TweenFloatLatentFactory_BP_AppendLatentTweenRotateActorAroundPoint, PivotPoint) == 0x000018, "Member 'TweenFloatLatentFactory_BP_AppendLatentTweenRotateActorAroundPoint::PivotPoint' has a wrong offset!");
static_assert(offsetof(TweenFloatLatentFactory_BP_AppendLatentTweenRotateActorAroundPoint, StartingAngle) == 0x000024, "Member 'TweenFloatLatentFactory_BP_AppendLatentTweenRotateActorAroundPoint::StartingAngle' has a wrong offset!");
static_assert(offsetof(TweenFloatLatentFactory_BP_AppendLatentTweenRotateActorAroundPoint, EndingAngle) == 0x000028, "Member 'TweenFloatLatentFactory_BP_AppendLatentTweenRotateActorAroundPoint::EndingAngle' has a wrong offset!");
static_assert(offsetof(TweenFloatLatentFactory_BP_AppendLatentTweenRotateActorAroundPoint, Radius) == 0x00002C, "Member 'TweenFloatLatentFactory_BP_AppendLatentTweenRotateActorAroundPoint::Radius' has a wrong offset!");
static_assert(offsetof(TweenFloatLatentFactory_BP_AppendLatentTweenRotateActorAroundPoint, Axis) == 0x000030, "Member 'TweenFloatLatentFactory_BP_AppendLatentTweenRotateActorAroundPoint::Axis' has a wrong offset!");
static_assert(offsetof(TweenFloatLatentFactory_BP_AppendLatentTweenRotateActorAroundPoint, Duration) == 0x00003C, "Member 'TweenFloatLatentFactory_BP_AppendLatentTweenRotateActorAroundPoint::Duration' has a wrong offset!");
static_assert(offsetof(TweenFloatLatentFactory_BP_AppendLatentTweenRotateActorAroundPoint, EaseType) == 0x000040, "Member 'TweenFloatLatentFactory_BP_AppendLatentTweenRotateActorAroundPoint::EaseType' has a wrong offset!");
static_assert(offsetof(TweenFloatLatentFactory_BP_AppendLatentTweenRotateActorAroundPoint, DeleteTweenOnHit) == 0x000041, "Member 'TweenFloatLatentFactory_BP_AppendLatentTweenRotateActorAroundPoint::DeleteTweenOnHit' has a wrong offset!");
static_assert(offsetof(TweenFloatLatentFactory_BP_AppendLatentTweenRotateActorAroundPoint, DeleteTweenOnOverlap) == 0x000042, "Member 'TweenFloatLatentFactory_BP_AppendLatentTweenRotateActorAroundPoint::DeleteTweenOnOverlap' has a wrong offset!");
static_assert(offsetof(TweenFloatLatentFactory_BP_AppendLatentTweenRotateActorAroundPoint, NumLoops) == 0x000044, "Member 'TweenFloatLatentFactory_BP_AppendLatentTweenRotateActorAroundPoint::NumLoops' has a wrong offset!");
static_assert(offsetof(TweenFloatLatentFactory_BP_AppendLatentTweenRotateActorAroundPoint, LoopType) == 0x000048, "Member 'TweenFloatLatentFactory_BP_AppendLatentTweenRotateActorAroundPoint::LoopType' has a wrong offset!");
static_assert(offsetof(TweenFloatLatentFactory_BP_AppendLatentTweenRotateActorAroundPoint, Delay) == 0x00004C, "Member 'TweenFloatLatentFactory_BP_AppendLatentTweenRotateActorAroundPoint::Delay' has a wrong offset!");
static_assert(offsetof(TweenFloatLatentFactory_BP_AppendLatentTweenRotateActorAroundPoint, TimeScale) == 0x000050, "Member 'TweenFloatLatentFactory_BP_AppendLatentTweenRotateActorAroundPoint::TimeScale' has a wrong offset!");
static_assert(offsetof(TweenFloatLatentFactory_BP_AppendLatentTweenRotateActorAroundPoint, TweenWhileGameIsPaused) == 0x000054, "Member 'TweenFloatLatentFactory_BP_AppendLatentTweenRotateActorAroundPoint::TweenWhileGameIsPaused' has a wrong offset!");
static_assert(offsetof(TweenFloatLatentFactory_BP_AppendLatentTweenRotateActorAroundPoint, ReturnValue) == 0x000058, "Member 'TweenFloatLatentFactory_BP_AppendLatentTweenRotateActorAroundPoint::ReturnValue' has a wrong offset!");

// Function TweenMaker.TweenFloatLatentFactory.BP_AppendLatentTweenRotateActorAroundPointByOffset
// 0x0050 (0x0050 - 0x0000)
struct TweenFloatLatentFactory_BP_AppendLatentTweenRotateActorAroundPointByOffset final
{
public:
	class UTweenContainer*                        TweenContainer;                                    // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UTweenFloat*                            OutTween;                                          // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 TweenTarget;                                       // 0x0010(0x0008)(Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                PivotPoint;                                        // 0x0018(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         OffsetAngle;                                       // 0x0024(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETweenReferenceAxis                           ReferenceAxis;                                     // 0x0028(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_29[0x3];                                       // 0x0029(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Duration;                                          // 0x002C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETweenEaseType                                EaseType;                                          // 0x0030(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          DeleteTweenOnHit;                                  // 0x0031(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          DeleteTweenOnOverlap;                              // 0x0032(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_33[0x1];                                       // 0x0033(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         NumLoops;                                          // 0x0034(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETweenLoopType                                LoopType;                                          // 0x0038(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_39[0x3];                                       // 0x0039(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Delay;                                             // 0x003C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TimeScale;                                         // 0x0040(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          TweenWhileGameIsPaused;                            // 0x0044(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_45[0x3];                                       // 0x0045(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UTweenFloatLatentFactory*               ReturnValue;                                       // 0x0048(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TweenFloatLatentFactory_BP_AppendLatentTweenRotateActorAroundPointByOffset) == 0x000008, "Wrong alignment on TweenFloatLatentFactory_BP_AppendLatentTweenRotateActorAroundPointByOffset");
static_assert(sizeof(TweenFloatLatentFactory_BP_AppendLatentTweenRotateActorAroundPointByOffset) == 0x000050, "Wrong size on TweenFloatLatentFactory_BP_AppendLatentTweenRotateActorAroundPointByOffset");
static_assert(offsetof(TweenFloatLatentFactory_BP_AppendLatentTweenRotateActorAroundPointByOffset, TweenContainer) == 0x000000, "Member 'TweenFloatLatentFactory_BP_AppendLatentTweenRotateActorAroundPointByOffset::TweenContainer' has a wrong offset!");
static_assert(offsetof(TweenFloatLatentFactory_BP_AppendLatentTweenRotateActorAroundPointByOffset, OutTween) == 0x000008, "Member 'TweenFloatLatentFactory_BP_AppendLatentTweenRotateActorAroundPointByOffset::OutTween' has a wrong offset!");
static_assert(offsetof(TweenFloatLatentFactory_BP_AppendLatentTweenRotateActorAroundPointByOffset, TweenTarget) == 0x000010, "Member 'TweenFloatLatentFactory_BP_AppendLatentTweenRotateActorAroundPointByOffset::TweenTarget' has a wrong offset!");
static_assert(offsetof(TweenFloatLatentFactory_BP_AppendLatentTweenRotateActorAroundPointByOffset, PivotPoint) == 0x000018, "Member 'TweenFloatLatentFactory_BP_AppendLatentTweenRotateActorAroundPointByOffset::PivotPoint' has a wrong offset!");
static_assert(offsetof(TweenFloatLatentFactory_BP_AppendLatentTweenRotateActorAroundPointByOffset, OffsetAngle) == 0x000024, "Member 'TweenFloatLatentFactory_BP_AppendLatentTweenRotateActorAroundPointByOffset::OffsetAngle' has a wrong offset!");
static_assert(offsetof(TweenFloatLatentFactory_BP_AppendLatentTweenRotateActorAroundPointByOffset, ReferenceAxis) == 0x000028, "Member 'TweenFloatLatentFactory_BP_AppendLatentTweenRotateActorAroundPointByOffset::ReferenceAxis' has a wrong offset!");
static_assert(offsetof(TweenFloatLatentFactory_BP_AppendLatentTweenRotateActorAroundPointByOffset, Duration) == 0x00002C, "Member 'TweenFloatLatentFactory_BP_AppendLatentTweenRotateActorAroundPointByOffset::Duration' has a wrong offset!");
static_assert(offsetof(TweenFloatLatentFactory_BP_AppendLatentTweenRotateActorAroundPointByOffset, EaseType) == 0x000030, "Member 'TweenFloatLatentFactory_BP_AppendLatentTweenRotateActorAroundPointByOffset::EaseType' has a wrong offset!");
static_assert(offsetof(TweenFloatLatentFactory_BP_AppendLatentTweenRotateActorAroundPointByOffset, DeleteTweenOnHit) == 0x000031, "Member 'TweenFloatLatentFactory_BP_AppendLatentTweenRotateActorAroundPointByOffset::DeleteTweenOnHit' has a wrong offset!");
static_assert(offsetof(TweenFloatLatentFactory_BP_AppendLatentTweenRotateActorAroundPointByOffset, DeleteTweenOnOverlap) == 0x000032, "Member 'TweenFloatLatentFactory_BP_AppendLatentTweenRotateActorAroundPointByOffset::DeleteTweenOnOverlap' has a wrong offset!");
static_assert(offsetof(TweenFloatLatentFactory_BP_AppendLatentTweenRotateActorAroundPointByOffset, NumLoops) == 0x000034, "Member 'TweenFloatLatentFactory_BP_AppendLatentTweenRotateActorAroundPointByOffset::NumLoops' has a wrong offset!");
static_assert(offsetof(TweenFloatLatentFactory_BP_AppendLatentTweenRotateActorAroundPointByOffset, LoopType) == 0x000038, "Member 'TweenFloatLatentFactory_BP_AppendLatentTweenRotateActorAroundPointByOffset::LoopType' has a wrong offset!");
static_assert(offsetof(TweenFloatLatentFactory_BP_AppendLatentTweenRotateActorAroundPointByOffset, Delay) == 0x00003C, "Member 'TweenFloatLatentFactory_BP_AppendLatentTweenRotateActorAroundPointByOffset::Delay' has a wrong offset!");
static_assert(offsetof(TweenFloatLatentFactory_BP_AppendLatentTweenRotateActorAroundPointByOffset, TimeScale) == 0x000040, "Member 'TweenFloatLatentFactory_BP_AppendLatentTweenRotateActorAroundPointByOffset::TimeScale' has a wrong offset!");
static_assert(offsetof(TweenFloatLatentFactory_BP_AppendLatentTweenRotateActorAroundPointByOffset, TweenWhileGameIsPaused) == 0x000044, "Member 'TweenFloatLatentFactory_BP_AppendLatentTweenRotateActorAroundPointByOffset::TweenWhileGameIsPaused' has a wrong offset!");
static_assert(offsetof(TweenFloatLatentFactory_BP_AppendLatentTweenRotateActorAroundPointByOffset, ReturnValue) == 0x000048, "Member 'TweenFloatLatentFactory_BP_AppendLatentTweenRotateActorAroundPointByOffset::ReturnValue' has a wrong offset!");

// Function TweenMaker.TweenFloatLatentFactory.BP_AppendLatentTweenRotateSceneComponentAroundPoint
// 0x0060 (0x0060 - 0x0000)
struct TweenFloatLatentFactory_BP_AppendLatentTweenRotateSceneComponentAroundPoint final
{
public:
	class UTweenContainer*                        TweenContainer;                                    // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UTweenFloat*                            OutTween;                                          // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USceneComponent*                        TweenTarget;                                       // 0x0010(0x0008)(Parm, OutParm, ZeroConstructor, InstancedReference, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                PivotPoint;                                        // 0x0018(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         StartingAngle;                                     // 0x0024(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         EndingAngle;                                       // 0x0028(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Radius;                                            // 0x002C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                Axis;                                              // 0x0030(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Duration;                                          // 0x003C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETweenEaseType                                EaseType;                                          // 0x0040(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          DeleteTweenOnHit;                                  // 0x0041(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          DeleteTweenOnOverlap;                              // 0x0042(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_43[0x1];                                       // 0x0043(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         NumLoops;                                          // 0x0044(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETweenLoopType                                LoopType;                                          // 0x0048(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_49[0x3];                                       // 0x0049(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Delay;                                             // 0x004C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TimeScale;                                         // 0x0050(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          TweenWhileGameIsPaused;                            // 0x0054(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_55[0x3];                                       // 0x0055(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UTweenFloatLatentFactory*               ReturnValue;                                       // 0x0058(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TweenFloatLatentFactory_BP_AppendLatentTweenRotateSceneComponentAroundPoint) == 0x000008, "Wrong alignment on TweenFloatLatentFactory_BP_AppendLatentTweenRotateSceneComponentAroundPoint");
static_assert(sizeof(TweenFloatLatentFactory_BP_AppendLatentTweenRotateSceneComponentAroundPoint) == 0x000060, "Wrong size on TweenFloatLatentFactory_BP_AppendLatentTweenRotateSceneComponentAroundPoint");
static_assert(offsetof(TweenFloatLatentFactory_BP_AppendLatentTweenRotateSceneComponentAroundPoint, TweenContainer) == 0x000000, "Member 'TweenFloatLatentFactory_BP_AppendLatentTweenRotateSceneComponentAroundPoint::TweenContainer' has a wrong offset!");
static_assert(offsetof(TweenFloatLatentFactory_BP_AppendLatentTweenRotateSceneComponentAroundPoint, OutTween) == 0x000008, "Member 'TweenFloatLatentFactory_BP_AppendLatentTweenRotateSceneComponentAroundPoint::OutTween' has a wrong offset!");
static_assert(offsetof(TweenFloatLatentFactory_BP_AppendLatentTweenRotateSceneComponentAroundPoint, TweenTarget) == 0x000010, "Member 'TweenFloatLatentFactory_BP_AppendLatentTweenRotateSceneComponentAroundPoint::TweenTarget' has a wrong offset!");
static_assert(offsetof(TweenFloatLatentFactory_BP_AppendLatentTweenRotateSceneComponentAroundPoint, PivotPoint) == 0x000018, "Member 'TweenFloatLatentFactory_BP_AppendLatentTweenRotateSceneComponentAroundPoint::PivotPoint' has a wrong offset!");
static_assert(offsetof(TweenFloatLatentFactory_BP_AppendLatentTweenRotateSceneComponentAroundPoint, StartingAngle) == 0x000024, "Member 'TweenFloatLatentFactory_BP_AppendLatentTweenRotateSceneComponentAroundPoint::StartingAngle' has a wrong offset!");
static_assert(offsetof(TweenFloatLatentFactory_BP_AppendLatentTweenRotateSceneComponentAroundPoint, EndingAngle) == 0x000028, "Member 'TweenFloatLatentFactory_BP_AppendLatentTweenRotateSceneComponentAroundPoint::EndingAngle' has a wrong offset!");
static_assert(offsetof(TweenFloatLatentFactory_BP_AppendLatentTweenRotateSceneComponentAroundPoint, Radius) == 0x00002C, "Member 'TweenFloatLatentFactory_BP_AppendLatentTweenRotateSceneComponentAroundPoint::Radius' has a wrong offset!");
static_assert(offsetof(TweenFloatLatentFactory_BP_AppendLatentTweenRotateSceneComponentAroundPoint, Axis) == 0x000030, "Member 'TweenFloatLatentFactory_BP_AppendLatentTweenRotateSceneComponentAroundPoint::Axis' has a wrong offset!");
static_assert(offsetof(TweenFloatLatentFactory_BP_AppendLatentTweenRotateSceneComponentAroundPoint, Duration) == 0x00003C, "Member 'TweenFloatLatentFactory_BP_AppendLatentTweenRotateSceneComponentAroundPoint::Duration' has a wrong offset!");
static_assert(offsetof(TweenFloatLatentFactory_BP_AppendLatentTweenRotateSceneComponentAroundPoint, EaseType) == 0x000040, "Member 'TweenFloatLatentFactory_BP_AppendLatentTweenRotateSceneComponentAroundPoint::EaseType' has a wrong offset!");
static_assert(offsetof(TweenFloatLatentFactory_BP_AppendLatentTweenRotateSceneComponentAroundPoint, DeleteTweenOnHit) == 0x000041, "Member 'TweenFloatLatentFactory_BP_AppendLatentTweenRotateSceneComponentAroundPoint::DeleteTweenOnHit' has a wrong offset!");
static_assert(offsetof(TweenFloatLatentFactory_BP_AppendLatentTweenRotateSceneComponentAroundPoint, DeleteTweenOnOverlap) == 0x000042, "Member 'TweenFloatLatentFactory_BP_AppendLatentTweenRotateSceneComponentAroundPoint::DeleteTweenOnOverlap' has a wrong offset!");
static_assert(offsetof(TweenFloatLatentFactory_BP_AppendLatentTweenRotateSceneComponentAroundPoint, NumLoops) == 0x000044, "Member 'TweenFloatLatentFactory_BP_AppendLatentTweenRotateSceneComponentAroundPoint::NumLoops' has a wrong offset!");
static_assert(offsetof(TweenFloatLatentFactory_BP_AppendLatentTweenRotateSceneComponentAroundPoint, LoopType) == 0x000048, "Member 'TweenFloatLatentFactory_BP_AppendLatentTweenRotateSceneComponentAroundPoint::LoopType' has a wrong offset!");
static_assert(offsetof(TweenFloatLatentFactory_BP_AppendLatentTweenRotateSceneComponentAroundPoint, Delay) == 0x00004C, "Member 'TweenFloatLatentFactory_BP_AppendLatentTweenRotateSceneComponentAroundPoint::Delay' has a wrong offset!");
static_assert(offsetof(TweenFloatLatentFactory_BP_AppendLatentTweenRotateSceneComponentAroundPoint, TimeScale) == 0x000050, "Member 'TweenFloatLatentFactory_BP_AppendLatentTweenRotateSceneComponentAroundPoint::TimeScale' has a wrong offset!");
static_assert(offsetof(TweenFloatLatentFactory_BP_AppendLatentTweenRotateSceneComponentAroundPoint, TweenWhileGameIsPaused) == 0x000054, "Member 'TweenFloatLatentFactory_BP_AppendLatentTweenRotateSceneComponentAroundPoint::TweenWhileGameIsPaused' has a wrong offset!");
static_assert(offsetof(TweenFloatLatentFactory_BP_AppendLatentTweenRotateSceneComponentAroundPoint, ReturnValue) == 0x000058, "Member 'TweenFloatLatentFactory_BP_AppendLatentTweenRotateSceneComponentAroundPoint::ReturnValue' has a wrong offset!");

// Function TweenMaker.TweenFloatLatentFactory.BP_AppendLatentTweenRotateSceneComponentAroundPointByOffset
// 0x0050 (0x0050 - 0x0000)
struct TweenFloatLatentFactory_BP_AppendLatentTweenRotateSceneComponentAroundPointByOffset final
{
public:
	class UTweenContainer*                        TweenContainer;                                    // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UTweenFloat*                            OutTween;                                          // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USceneComponent*                        TweenTarget;                                       // 0x0010(0x0008)(Parm, OutParm, ZeroConstructor, InstancedReference, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                PivotPoint;                                        // 0x0018(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         OffsetAngle;                                       // 0x0024(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETweenReferenceAxis                           ReferenceAxis;                                     // 0x0028(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_29[0x3];                                       // 0x0029(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Duration;                                          // 0x002C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETweenEaseType                                EaseType;                                          // 0x0030(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          DeleteTweenOnHit;                                  // 0x0031(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          DeleteTweenOnOverlap;                              // 0x0032(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_33[0x1];                                       // 0x0033(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         NumLoops;                                          // 0x0034(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETweenLoopType                                LoopType;                                          // 0x0038(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_39[0x3];                                       // 0x0039(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Delay;                                             // 0x003C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TimeScale;                                         // 0x0040(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          TweenWhileGameIsPaused;                            // 0x0044(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_45[0x3];                                       // 0x0045(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UTweenFloatLatentFactory*               ReturnValue;                                       // 0x0048(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TweenFloatLatentFactory_BP_AppendLatentTweenRotateSceneComponentAroundPointByOffset) == 0x000008, "Wrong alignment on TweenFloatLatentFactory_BP_AppendLatentTweenRotateSceneComponentAroundPointByOffset");
static_assert(sizeof(TweenFloatLatentFactory_BP_AppendLatentTweenRotateSceneComponentAroundPointByOffset) == 0x000050, "Wrong size on TweenFloatLatentFactory_BP_AppendLatentTweenRotateSceneComponentAroundPointByOffset");
static_assert(offsetof(TweenFloatLatentFactory_BP_AppendLatentTweenRotateSceneComponentAroundPointByOffset, TweenContainer) == 0x000000, "Member 'TweenFloatLatentFactory_BP_AppendLatentTweenRotateSceneComponentAroundPointByOffset::TweenContainer' has a wrong offset!");
static_assert(offsetof(TweenFloatLatentFactory_BP_AppendLatentTweenRotateSceneComponentAroundPointByOffset, OutTween) == 0x000008, "Member 'TweenFloatLatentFactory_BP_AppendLatentTweenRotateSceneComponentAroundPointByOffset::OutTween' has a wrong offset!");
static_assert(offsetof(TweenFloatLatentFactory_BP_AppendLatentTweenRotateSceneComponentAroundPointByOffset, TweenTarget) == 0x000010, "Member 'TweenFloatLatentFactory_BP_AppendLatentTweenRotateSceneComponentAroundPointByOffset::TweenTarget' has a wrong offset!");
static_assert(offsetof(TweenFloatLatentFactory_BP_AppendLatentTweenRotateSceneComponentAroundPointByOffset, PivotPoint) == 0x000018, "Member 'TweenFloatLatentFactory_BP_AppendLatentTweenRotateSceneComponentAroundPointByOffset::PivotPoint' has a wrong offset!");
static_assert(offsetof(TweenFloatLatentFactory_BP_AppendLatentTweenRotateSceneComponentAroundPointByOffset, OffsetAngle) == 0x000024, "Member 'TweenFloatLatentFactory_BP_AppendLatentTweenRotateSceneComponentAroundPointByOffset::OffsetAngle' has a wrong offset!");
static_assert(offsetof(TweenFloatLatentFactory_BP_AppendLatentTweenRotateSceneComponentAroundPointByOffset, ReferenceAxis) == 0x000028, "Member 'TweenFloatLatentFactory_BP_AppendLatentTweenRotateSceneComponentAroundPointByOffset::ReferenceAxis' has a wrong offset!");
static_assert(offsetof(TweenFloatLatentFactory_BP_AppendLatentTweenRotateSceneComponentAroundPointByOffset, Duration) == 0x00002C, "Member 'TweenFloatLatentFactory_BP_AppendLatentTweenRotateSceneComponentAroundPointByOffset::Duration' has a wrong offset!");
static_assert(offsetof(TweenFloatLatentFactory_BP_AppendLatentTweenRotateSceneComponentAroundPointByOffset, EaseType) == 0x000030, "Member 'TweenFloatLatentFactory_BP_AppendLatentTweenRotateSceneComponentAroundPointByOffset::EaseType' has a wrong offset!");
static_assert(offsetof(TweenFloatLatentFactory_BP_AppendLatentTweenRotateSceneComponentAroundPointByOffset, DeleteTweenOnHit) == 0x000031, "Member 'TweenFloatLatentFactory_BP_AppendLatentTweenRotateSceneComponentAroundPointByOffset::DeleteTweenOnHit' has a wrong offset!");
static_assert(offsetof(TweenFloatLatentFactory_BP_AppendLatentTweenRotateSceneComponentAroundPointByOffset, DeleteTweenOnOverlap) == 0x000032, "Member 'TweenFloatLatentFactory_BP_AppendLatentTweenRotateSceneComponentAroundPointByOffset::DeleteTweenOnOverlap' has a wrong offset!");
static_assert(offsetof(TweenFloatLatentFactory_BP_AppendLatentTweenRotateSceneComponentAroundPointByOffset, NumLoops) == 0x000034, "Member 'TweenFloatLatentFactory_BP_AppendLatentTweenRotateSceneComponentAroundPointByOffset::NumLoops' has a wrong offset!");
static_assert(offsetof(TweenFloatLatentFactory_BP_AppendLatentTweenRotateSceneComponentAroundPointByOffset, LoopType) == 0x000038, "Member 'TweenFloatLatentFactory_BP_AppendLatentTweenRotateSceneComponentAroundPointByOffset::LoopType' has a wrong offset!");
static_assert(offsetof(TweenFloatLatentFactory_BP_AppendLatentTweenRotateSceneComponentAroundPointByOffset, Delay) == 0x00003C, "Member 'TweenFloatLatentFactory_BP_AppendLatentTweenRotateSceneComponentAroundPointByOffset::Delay' has a wrong offset!");
static_assert(offsetof(TweenFloatLatentFactory_BP_AppendLatentTweenRotateSceneComponentAroundPointByOffset, TimeScale) == 0x000040, "Member 'TweenFloatLatentFactory_BP_AppendLatentTweenRotateSceneComponentAroundPointByOffset::TimeScale' has a wrong offset!");
static_assert(offsetof(TweenFloatLatentFactory_BP_AppendLatentTweenRotateSceneComponentAroundPointByOffset, TweenWhileGameIsPaused) == 0x000044, "Member 'TweenFloatLatentFactory_BP_AppendLatentTweenRotateSceneComponentAroundPointByOffset::TweenWhileGameIsPaused' has a wrong offset!");
static_assert(offsetof(TweenFloatLatentFactory_BP_AppendLatentTweenRotateSceneComponentAroundPointByOffset, ReturnValue) == 0x000048, "Member 'TweenFloatLatentFactory_BP_AppendLatentTweenRotateSceneComponentAroundPointByOffset::ReturnValue' has a wrong offset!");

// Function TweenMaker.TweenFloatLatentFactory.BP_AppendLatentTweenSceneComponentFollowSpline
// 0x0048 (0x0048 - 0x0000)
struct TweenFloatLatentFactory_BP_AppendLatentTweenSceneComponentFollowSpline final
{
public:
	class UTweenContainer*                        TweenContainer;                                    // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UTweenFloat*                            OutTween;                                          // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USceneComponent*                        TweenTarget;                                       // 0x0010(0x0008)(Parm, OutParm, ZeroConstructor, InstancedReference, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USplineComponent*                       Spline;                                            // 0x0018(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Duration;                                          // 0x0020(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ApplyRotation;                                     // 0x0024(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ApplyScale;                                        // 0x0025(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          UseConstantSpeed;                                  // 0x0026(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETweenEaseType                                EaseType;                                          // 0x0027(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          DeleteTweenOnHit;                                  // 0x0028(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          DeleteTweenOnOverlap;                              // 0x0029(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2A[0x2];                                       // 0x002A(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         NumLoops;                                          // 0x002C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETweenLoopType                                LoopType;                                          // 0x0030(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_31[0x3];                                       // 0x0031(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Delay;                                             // 0x0034(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TimeScale;                                         // 0x0038(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          TweenWhileGameIsPaused;                            // 0x003C(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_3D[0x3];                                       // 0x003D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UTweenFloatLatentFactory*               ReturnValue;                                       // 0x0040(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TweenFloatLatentFactory_BP_AppendLatentTweenSceneComponentFollowSpline) == 0x000008, "Wrong alignment on TweenFloatLatentFactory_BP_AppendLatentTweenSceneComponentFollowSpline");
static_assert(sizeof(TweenFloatLatentFactory_BP_AppendLatentTweenSceneComponentFollowSpline) == 0x000048, "Wrong size on TweenFloatLatentFactory_BP_AppendLatentTweenSceneComponentFollowSpline");
static_assert(offsetof(TweenFloatLatentFactory_BP_AppendLatentTweenSceneComponentFollowSpline, TweenContainer) == 0x000000, "Member 'TweenFloatLatentFactory_BP_AppendLatentTweenSceneComponentFollowSpline::TweenContainer' has a wrong offset!");
static_assert(offsetof(TweenFloatLatentFactory_BP_AppendLatentTweenSceneComponentFollowSpline, OutTween) == 0x000008, "Member 'TweenFloatLatentFactory_BP_AppendLatentTweenSceneComponentFollowSpline::OutTween' has a wrong offset!");
static_assert(offsetof(TweenFloatLatentFactory_BP_AppendLatentTweenSceneComponentFollowSpline, TweenTarget) == 0x000010, "Member 'TweenFloatLatentFactory_BP_AppendLatentTweenSceneComponentFollowSpline::TweenTarget' has a wrong offset!");
static_assert(offsetof(TweenFloatLatentFactory_BP_AppendLatentTweenSceneComponentFollowSpline, Spline) == 0x000018, "Member 'TweenFloatLatentFactory_BP_AppendLatentTweenSceneComponentFollowSpline::Spline' has a wrong offset!");
static_assert(offsetof(TweenFloatLatentFactory_BP_AppendLatentTweenSceneComponentFollowSpline, Duration) == 0x000020, "Member 'TweenFloatLatentFactory_BP_AppendLatentTweenSceneComponentFollowSpline::Duration' has a wrong offset!");
static_assert(offsetof(TweenFloatLatentFactory_BP_AppendLatentTweenSceneComponentFollowSpline, ApplyRotation) == 0x000024, "Member 'TweenFloatLatentFactory_BP_AppendLatentTweenSceneComponentFollowSpline::ApplyRotation' has a wrong offset!");
static_assert(offsetof(TweenFloatLatentFactory_BP_AppendLatentTweenSceneComponentFollowSpline, ApplyScale) == 0x000025, "Member 'TweenFloatLatentFactory_BP_AppendLatentTweenSceneComponentFollowSpline::ApplyScale' has a wrong offset!");
static_assert(offsetof(TweenFloatLatentFactory_BP_AppendLatentTweenSceneComponentFollowSpline, UseConstantSpeed) == 0x000026, "Member 'TweenFloatLatentFactory_BP_AppendLatentTweenSceneComponentFollowSpline::UseConstantSpeed' has a wrong offset!");
static_assert(offsetof(TweenFloatLatentFactory_BP_AppendLatentTweenSceneComponentFollowSpline, EaseType) == 0x000027, "Member 'TweenFloatLatentFactory_BP_AppendLatentTweenSceneComponentFollowSpline::EaseType' has a wrong offset!");
static_assert(offsetof(TweenFloatLatentFactory_BP_AppendLatentTweenSceneComponentFollowSpline, DeleteTweenOnHit) == 0x000028, "Member 'TweenFloatLatentFactory_BP_AppendLatentTweenSceneComponentFollowSpline::DeleteTweenOnHit' has a wrong offset!");
static_assert(offsetof(TweenFloatLatentFactory_BP_AppendLatentTweenSceneComponentFollowSpline, DeleteTweenOnOverlap) == 0x000029, "Member 'TweenFloatLatentFactory_BP_AppendLatentTweenSceneComponentFollowSpline::DeleteTweenOnOverlap' has a wrong offset!");
static_assert(offsetof(TweenFloatLatentFactory_BP_AppendLatentTweenSceneComponentFollowSpline, NumLoops) == 0x00002C, "Member 'TweenFloatLatentFactory_BP_AppendLatentTweenSceneComponentFollowSpline::NumLoops' has a wrong offset!");
static_assert(offsetof(TweenFloatLatentFactory_BP_AppendLatentTweenSceneComponentFollowSpline, LoopType) == 0x000030, "Member 'TweenFloatLatentFactory_BP_AppendLatentTweenSceneComponentFollowSpline::LoopType' has a wrong offset!");
static_assert(offsetof(TweenFloatLatentFactory_BP_AppendLatentTweenSceneComponentFollowSpline, Delay) == 0x000034, "Member 'TweenFloatLatentFactory_BP_AppendLatentTweenSceneComponentFollowSpline::Delay' has a wrong offset!");
static_assert(offsetof(TweenFloatLatentFactory_BP_AppendLatentTweenSceneComponentFollowSpline, TimeScale) == 0x000038, "Member 'TweenFloatLatentFactory_BP_AppendLatentTweenSceneComponentFollowSpline::TimeScale' has a wrong offset!");
static_assert(offsetof(TweenFloatLatentFactory_BP_AppendLatentTweenSceneComponentFollowSpline, TweenWhileGameIsPaused) == 0x00003C, "Member 'TweenFloatLatentFactory_BP_AppendLatentTweenSceneComponentFollowSpline::TweenWhileGameIsPaused' has a wrong offset!");
static_assert(offsetof(TweenFloatLatentFactory_BP_AppendLatentTweenSceneComponentFollowSpline, ReturnValue) == 0x000040, "Member 'TweenFloatLatentFactory_BP_AppendLatentTweenSceneComponentFollowSpline::ReturnValue' has a wrong offset!");

// Function TweenMaker.TweenFloatLatentFactory.BP_AppendLatentTweenWidgetAngleTo
// 0x0040 (0x0040 - 0x0000)
struct TweenFloatLatentFactory_BP_AppendLatentTweenWidgetAngleTo final
{
public:
	class UTweenContainer*                        TweenContainer;                                    // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UTweenFloat*                            OutTween;                                          // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UWidget*                                TweenTarget;                                       // 0x0010(0x0008)(Parm, OutParm, ZeroConstructor, InstancedReference, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         To;                                                // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Duration;                                          // 0x001C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETweenEaseType                                EaseType;                                          // 0x0020(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_21[0x3];                                       // 0x0021(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         NumLoops;                                          // 0x0024(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETweenLoopType                                LoopType;                                          // 0x0028(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_29[0x3];                                       // 0x0029(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Delay;                                             // 0x002C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TimeScale;                                         // 0x0030(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          TweenWhileGameIsPaused;                            // 0x0034(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_35[0x3];                                       // 0x0035(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UTweenFloatLatentFactory*               ReturnValue;                                       // 0x0038(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TweenFloatLatentFactory_BP_AppendLatentTweenWidgetAngleTo) == 0x000008, "Wrong alignment on TweenFloatLatentFactory_BP_AppendLatentTweenWidgetAngleTo");
static_assert(sizeof(TweenFloatLatentFactory_BP_AppendLatentTweenWidgetAngleTo) == 0x000040, "Wrong size on TweenFloatLatentFactory_BP_AppendLatentTweenWidgetAngleTo");
static_assert(offsetof(TweenFloatLatentFactory_BP_AppendLatentTweenWidgetAngleTo, TweenContainer) == 0x000000, "Member 'TweenFloatLatentFactory_BP_AppendLatentTweenWidgetAngleTo::TweenContainer' has a wrong offset!");
static_assert(offsetof(TweenFloatLatentFactory_BP_AppendLatentTweenWidgetAngleTo, OutTween) == 0x000008, "Member 'TweenFloatLatentFactory_BP_AppendLatentTweenWidgetAngleTo::OutTween' has a wrong offset!");
static_assert(offsetof(TweenFloatLatentFactory_BP_AppendLatentTweenWidgetAngleTo, TweenTarget) == 0x000010, "Member 'TweenFloatLatentFactory_BP_AppendLatentTweenWidgetAngleTo::TweenTarget' has a wrong offset!");
static_assert(offsetof(TweenFloatLatentFactory_BP_AppendLatentTweenWidgetAngleTo, To) == 0x000018, "Member 'TweenFloatLatentFactory_BP_AppendLatentTweenWidgetAngleTo::To' has a wrong offset!");
static_assert(offsetof(TweenFloatLatentFactory_BP_AppendLatentTweenWidgetAngleTo, Duration) == 0x00001C, "Member 'TweenFloatLatentFactory_BP_AppendLatentTweenWidgetAngleTo::Duration' has a wrong offset!");
static_assert(offsetof(TweenFloatLatentFactory_BP_AppendLatentTweenWidgetAngleTo, EaseType) == 0x000020, "Member 'TweenFloatLatentFactory_BP_AppendLatentTweenWidgetAngleTo::EaseType' has a wrong offset!");
static_assert(offsetof(TweenFloatLatentFactory_BP_AppendLatentTweenWidgetAngleTo, NumLoops) == 0x000024, "Member 'TweenFloatLatentFactory_BP_AppendLatentTweenWidgetAngleTo::NumLoops' has a wrong offset!");
static_assert(offsetof(TweenFloatLatentFactory_BP_AppendLatentTweenWidgetAngleTo, LoopType) == 0x000028, "Member 'TweenFloatLatentFactory_BP_AppendLatentTweenWidgetAngleTo::LoopType' has a wrong offset!");
static_assert(offsetof(TweenFloatLatentFactory_BP_AppendLatentTweenWidgetAngleTo, Delay) == 0x00002C, "Member 'TweenFloatLatentFactory_BP_AppendLatentTweenWidgetAngleTo::Delay' has a wrong offset!");
static_assert(offsetof(TweenFloatLatentFactory_BP_AppendLatentTweenWidgetAngleTo, TimeScale) == 0x000030, "Member 'TweenFloatLatentFactory_BP_AppendLatentTweenWidgetAngleTo::TimeScale' has a wrong offset!");
static_assert(offsetof(TweenFloatLatentFactory_BP_AppendLatentTweenWidgetAngleTo, TweenWhileGameIsPaused) == 0x000034, "Member 'TweenFloatLatentFactory_BP_AppendLatentTweenWidgetAngleTo::TweenWhileGameIsPaused' has a wrong offset!");
static_assert(offsetof(TweenFloatLatentFactory_BP_AppendLatentTweenWidgetAngleTo, ReturnValue) == 0x000038, "Member 'TweenFloatLatentFactory_BP_AppendLatentTweenWidgetAngleTo::ReturnValue' has a wrong offset!");

// Function TweenMaker.TweenFloatLatentFactory.BP_AppendLatentTweenWidgetOpacityTo
// 0x0040 (0x0040 - 0x0000)
struct TweenFloatLatentFactory_BP_AppendLatentTweenWidgetOpacityTo final
{
public:
	class UTweenContainer*                        TweenContainer;                                    // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UTweenFloat*                            OutTween;                                          // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UWidget*                                TweenTarget;                                       // 0x0010(0x0008)(Parm, OutParm, ZeroConstructor, InstancedReference, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         To;                                                // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Duration;                                          // 0x001C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETweenEaseType                                EaseType;                                          // 0x0020(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_21[0x3];                                       // 0x0021(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         NumLoops;                                          // 0x0024(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETweenLoopType                                LoopType;                                          // 0x0028(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_29[0x3];                                       // 0x0029(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Delay;                                             // 0x002C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TimeScale;                                         // 0x0030(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          TweenWhileGameIsPaused;                            // 0x0034(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_35[0x3];                                       // 0x0035(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UTweenFloatLatentFactory*               ReturnValue;                                       // 0x0038(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TweenFloatLatentFactory_BP_AppendLatentTweenWidgetOpacityTo) == 0x000008, "Wrong alignment on TweenFloatLatentFactory_BP_AppendLatentTweenWidgetOpacityTo");
static_assert(sizeof(TweenFloatLatentFactory_BP_AppendLatentTweenWidgetOpacityTo) == 0x000040, "Wrong size on TweenFloatLatentFactory_BP_AppendLatentTweenWidgetOpacityTo");
static_assert(offsetof(TweenFloatLatentFactory_BP_AppendLatentTweenWidgetOpacityTo, TweenContainer) == 0x000000, "Member 'TweenFloatLatentFactory_BP_AppendLatentTweenWidgetOpacityTo::TweenContainer' has a wrong offset!");
static_assert(offsetof(TweenFloatLatentFactory_BP_AppendLatentTweenWidgetOpacityTo, OutTween) == 0x000008, "Member 'TweenFloatLatentFactory_BP_AppendLatentTweenWidgetOpacityTo::OutTween' has a wrong offset!");
static_assert(offsetof(TweenFloatLatentFactory_BP_AppendLatentTweenWidgetOpacityTo, TweenTarget) == 0x000010, "Member 'TweenFloatLatentFactory_BP_AppendLatentTweenWidgetOpacityTo::TweenTarget' has a wrong offset!");
static_assert(offsetof(TweenFloatLatentFactory_BP_AppendLatentTweenWidgetOpacityTo, To) == 0x000018, "Member 'TweenFloatLatentFactory_BP_AppendLatentTweenWidgetOpacityTo::To' has a wrong offset!");
static_assert(offsetof(TweenFloatLatentFactory_BP_AppendLatentTweenWidgetOpacityTo, Duration) == 0x00001C, "Member 'TweenFloatLatentFactory_BP_AppendLatentTweenWidgetOpacityTo::Duration' has a wrong offset!");
static_assert(offsetof(TweenFloatLatentFactory_BP_AppendLatentTweenWidgetOpacityTo, EaseType) == 0x000020, "Member 'TweenFloatLatentFactory_BP_AppendLatentTweenWidgetOpacityTo::EaseType' has a wrong offset!");
static_assert(offsetof(TweenFloatLatentFactory_BP_AppendLatentTweenWidgetOpacityTo, NumLoops) == 0x000024, "Member 'TweenFloatLatentFactory_BP_AppendLatentTweenWidgetOpacityTo::NumLoops' has a wrong offset!");
static_assert(offsetof(TweenFloatLatentFactory_BP_AppendLatentTweenWidgetOpacityTo, LoopType) == 0x000028, "Member 'TweenFloatLatentFactory_BP_AppendLatentTweenWidgetOpacityTo::LoopType' has a wrong offset!");
static_assert(offsetof(TweenFloatLatentFactory_BP_AppendLatentTweenWidgetOpacityTo, Delay) == 0x00002C, "Member 'TweenFloatLatentFactory_BP_AppendLatentTweenWidgetOpacityTo::Delay' has a wrong offset!");
static_assert(offsetof(TweenFloatLatentFactory_BP_AppendLatentTweenWidgetOpacityTo, TimeScale) == 0x000030, "Member 'TweenFloatLatentFactory_BP_AppendLatentTweenWidgetOpacityTo::TimeScale' has a wrong offset!");
static_assert(offsetof(TweenFloatLatentFactory_BP_AppendLatentTweenWidgetOpacityTo, TweenWhileGameIsPaused) == 0x000034, "Member 'TweenFloatLatentFactory_BP_AppendLatentTweenWidgetOpacityTo::TweenWhileGameIsPaused' has a wrong offset!");
static_assert(offsetof(TweenFloatLatentFactory_BP_AppendLatentTweenWidgetOpacityTo, ReturnValue) == 0x000038, "Member 'TweenFloatLatentFactory_BP_AppendLatentTweenWidgetOpacityTo::ReturnValue' has a wrong offset!");

// Function TweenMaker.TweenFloatLatentFactory.BP_CreateLatentTweenActorFollowSpline
// 0x0050 (0x0050 - 0x0000)
struct TweenFloatLatentFactory_BP_CreateLatentTweenActorFollowSpline final
{
public:
	class UTweenManagerComponent*                 TweenManager;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 TweenTarget;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UTweenContainer*                        OutTweenContainer;                                 // 0x0010(0x0008)(Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UTweenFloat*                            OutTween;                                          // 0x0018(0x0008)(Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USplineComponent*                       Spline;                                            // 0x0020(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Duration;                                          // 0x0028(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ApplyRotation;                                     // 0x002C(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ApplyScale;                                        // 0x002D(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          UseConstantSpeed;                                  // 0x002E(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETweenEaseType                                EaseType;                                          // 0x002F(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          DeleteTweenOnHit;                                  // 0x0030(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          DeleteTweenOnOverlap;                              // 0x0031(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_32[0x2];                                       // 0x0032(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         NumLoops;                                          // 0x0034(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETweenLoopType                                LoopType;                                          // 0x0038(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_39[0x3];                                       // 0x0039(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Delay;                                             // 0x003C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TimeScale;                                         // 0x0040(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          TweenWhileGameIsPaused;                            // 0x0044(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_45[0x3];                                       // 0x0045(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UTweenFloatLatentFactory*               ReturnValue;                                       // 0x0048(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TweenFloatLatentFactory_BP_CreateLatentTweenActorFollowSpline) == 0x000008, "Wrong alignment on TweenFloatLatentFactory_BP_CreateLatentTweenActorFollowSpline");
static_assert(sizeof(TweenFloatLatentFactory_BP_CreateLatentTweenActorFollowSpline) == 0x000050, "Wrong size on TweenFloatLatentFactory_BP_CreateLatentTweenActorFollowSpline");
static_assert(offsetof(TweenFloatLatentFactory_BP_CreateLatentTweenActorFollowSpline, TweenManager) == 0x000000, "Member 'TweenFloatLatentFactory_BP_CreateLatentTweenActorFollowSpline::TweenManager' has a wrong offset!");
static_assert(offsetof(TweenFloatLatentFactory_BP_CreateLatentTweenActorFollowSpline, TweenTarget) == 0x000008, "Member 'TweenFloatLatentFactory_BP_CreateLatentTweenActorFollowSpline::TweenTarget' has a wrong offset!");
static_assert(offsetof(TweenFloatLatentFactory_BP_CreateLatentTweenActorFollowSpline, OutTweenContainer) == 0x000010, "Member 'TweenFloatLatentFactory_BP_CreateLatentTweenActorFollowSpline::OutTweenContainer' has a wrong offset!");
static_assert(offsetof(TweenFloatLatentFactory_BP_CreateLatentTweenActorFollowSpline, OutTween) == 0x000018, "Member 'TweenFloatLatentFactory_BP_CreateLatentTweenActorFollowSpline::OutTween' has a wrong offset!");
static_assert(offsetof(TweenFloatLatentFactory_BP_CreateLatentTweenActorFollowSpline, Spline) == 0x000020, "Member 'TweenFloatLatentFactory_BP_CreateLatentTweenActorFollowSpline::Spline' has a wrong offset!");
static_assert(offsetof(TweenFloatLatentFactory_BP_CreateLatentTweenActorFollowSpline, Duration) == 0x000028, "Member 'TweenFloatLatentFactory_BP_CreateLatentTweenActorFollowSpline::Duration' has a wrong offset!");
static_assert(offsetof(TweenFloatLatentFactory_BP_CreateLatentTweenActorFollowSpline, ApplyRotation) == 0x00002C, "Member 'TweenFloatLatentFactory_BP_CreateLatentTweenActorFollowSpline::ApplyRotation' has a wrong offset!");
static_assert(offsetof(TweenFloatLatentFactory_BP_CreateLatentTweenActorFollowSpline, ApplyScale) == 0x00002D, "Member 'TweenFloatLatentFactory_BP_CreateLatentTweenActorFollowSpline::ApplyScale' has a wrong offset!");
static_assert(offsetof(TweenFloatLatentFactory_BP_CreateLatentTweenActorFollowSpline, UseConstantSpeed) == 0x00002E, "Member 'TweenFloatLatentFactory_BP_CreateLatentTweenActorFollowSpline::UseConstantSpeed' has a wrong offset!");
static_assert(offsetof(TweenFloatLatentFactory_BP_CreateLatentTweenActorFollowSpline, EaseType) == 0x00002F, "Member 'TweenFloatLatentFactory_BP_CreateLatentTweenActorFollowSpline::EaseType' has a wrong offset!");
static_assert(offsetof(TweenFloatLatentFactory_BP_CreateLatentTweenActorFollowSpline, DeleteTweenOnHit) == 0x000030, "Member 'TweenFloatLatentFactory_BP_CreateLatentTweenActorFollowSpline::DeleteTweenOnHit' has a wrong offset!");
static_assert(offsetof(TweenFloatLatentFactory_BP_CreateLatentTweenActorFollowSpline, DeleteTweenOnOverlap) == 0x000031, "Member 'TweenFloatLatentFactory_BP_CreateLatentTweenActorFollowSpline::DeleteTweenOnOverlap' has a wrong offset!");
static_assert(offsetof(TweenFloatLatentFactory_BP_CreateLatentTweenActorFollowSpline, NumLoops) == 0x000034, "Member 'TweenFloatLatentFactory_BP_CreateLatentTweenActorFollowSpline::NumLoops' has a wrong offset!");
static_assert(offsetof(TweenFloatLatentFactory_BP_CreateLatentTweenActorFollowSpline, LoopType) == 0x000038, "Member 'TweenFloatLatentFactory_BP_CreateLatentTweenActorFollowSpline::LoopType' has a wrong offset!");
static_assert(offsetof(TweenFloatLatentFactory_BP_CreateLatentTweenActorFollowSpline, Delay) == 0x00003C, "Member 'TweenFloatLatentFactory_BP_CreateLatentTweenActorFollowSpline::Delay' has a wrong offset!");
static_assert(offsetof(TweenFloatLatentFactory_BP_CreateLatentTweenActorFollowSpline, TimeScale) == 0x000040, "Member 'TweenFloatLatentFactory_BP_CreateLatentTweenActorFollowSpline::TimeScale' has a wrong offset!");
static_assert(offsetof(TweenFloatLatentFactory_BP_CreateLatentTweenActorFollowSpline, TweenWhileGameIsPaused) == 0x000044, "Member 'TweenFloatLatentFactory_BP_CreateLatentTweenActorFollowSpline::TweenWhileGameIsPaused' has a wrong offset!");
static_assert(offsetof(TweenFloatLatentFactory_BP_CreateLatentTweenActorFollowSpline, ReturnValue) == 0x000048, "Member 'TweenFloatLatentFactory_BP_CreateLatentTweenActorFollowSpline::ReturnValue' has a wrong offset!");

// Function TweenMaker.TweenFloatLatentFactory.BP_CreateLatentTweenCustomFloat
// 0x0050 (0x0050 - 0x0000)
struct TweenFloatLatentFactory_BP_CreateLatentTweenCustomFloat final
{
public:
	class UTweenManagerComponent*                 TweenManager;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UObject*                                TweenTarget;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UTweenContainer*                        OutTweenContainer;                                 // 0x0010(0x0008)(Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UTweenFloat*                            OutTween;                                          // 0x0018(0x0008)(Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         From;                                              // 0x0020(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         To;                                                // 0x0024(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Duration;                                          // 0x0028(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETweenEaseType                                EaseType;                                          // 0x002C(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2D[0x3];                                       // 0x002D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         NumLoops;                                          // 0x0030(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETweenLoopType                                LoopType;                                          // 0x0034(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_35[0x3];                                       // 0x0035(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Delay;                                             // 0x0038(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TimeScale;                                         // 0x003C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          TweenWhileGameIsPaused;                            // 0x0040(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_41[0x7];                                       // 0x0041(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UTweenFloatLatentFactory*               ReturnValue;                                       // 0x0048(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TweenFloatLatentFactory_BP_CreateLatentTweenCustomFloat) == 0x000008, "Wrong alignment on TweenFloatLatentFactory_BP_CreateLatentTweenCustomFloat");
static_assert(sizeof(TweenFloatLatentFactory_BP_CreateLatentTweenCustomFloat) == 0x000050, "Wrong size on TweenFloatLatentFactory_BP_CreateLatentTweenCustomFloat");
static_assert(offsetof(TweenFloatLatentFactory_BP_CreateLatentTweenCustomFloat, TweenManager) == 0x000000, "Member 'TweenFloatLatentFactory_BP_CreateLatentTweenCustomFloat::TweenManager' has a wrong offset!");
static_assert(offsetof(TweenFloatLatentFactory_BP_CreateLatentTweenCustomFloat, TweenTarget) == 0x000008, "Member 'TweenFloatLatentFactory_BP_CreateLatentTweenCustomFloat::TweenTarget' has a wrong offset!");
static_assert(offsetof(TweenFloatLatentFactory_BP_CreateLatentTweenCustomFloat, OutTweenContainer) == 0x000010, "Member 'TweenFloatLatentFactory_BP_CreateLatentTweenCustomFloat::OutTweenContainer' has a wrong offset!");
static_assert(offsetof(TweenFloatLatentFactory_BP_CreateLatentTweenCustomFloat, OutTween) == 0x000018, "Member 'TweenFloatLatentFactory_BP_CreateLatentTweenCustomFloat::OutTween' has a wrong offset!");
static_assert(offsetof(TweenFloatLatentFactory_BP_CreateLatentTweenCustomFloat, From) == 0x000020, "Member 'TweenFloatLatentFactory_BP_CreateLatentTweenCustomFloat::From' has a wrong offset!");
static_assert(offsetof(TweenFloatLatentFactory_BP_CreateLatentTweenCustomFloat, To) == 0x000024, "Member 'TweenFloatLatentFactory_BP_CreateLatentTweenCustomFloat::To' has a wrong offset!");
static_assert(offsetof(TweenFloatLatentFactory_BP_CreateLatentTweenCustomFloat, Duration) == 0x000028, "Member 'TweenFloatLatentFactory_BP_CreateLatentTweenCustomFloat::Duration' has a wrong offset!");
static_assert(offsetof(TweenFloatLatentFactory_BP_CreateLatentTweenCustomFloat, EaseType) == 0x00002C, "Member 'TweenFloatLatentFactory_BP_CreateLatentTweenCustomFloat::EaseType' has a wrong offset!");
static_assert(offsetof(TweenFloatLatentFactory_BP_CreateLatentTweenCustomFloat, NumLoops) == 0x000030, "Member 'TweenFloatLatentFactory_BP_CreateLatentTweenCustomFloat::NumLoops' has a wrong offset!");
static_assert(offsetof(TweenFloatLatentFactory_BP_CreateLatentTweenCustomFloat, LoopType) == 0x000034, "Member 'TweenFloatLatentFactory_BP_CreateLatentTweenCustomFloat::LoopType' has a wrong offset!");
static_assert(offsetof(TweenFloatLatentFactory_BP_CreateLatentTweenCustomFloat, Delay) == 0x000038, "Member 'TweenFloatLatentFactory_BP_CreateLatentTweenCustomFloat::Delay' has a wrong offset!");
static_assert(offsetof(TweenFloatLatentFactory_BP_CreateLatentTweenCustomFloat, TimeScale) == 0x00003C, "Member 'TweenFloatLatentFactory_BP_CreateLatentTweenCustomFloat::TimeScale' has a wrong offset!");
static_assert(offsetof(TweenFloatLatentFactory_BP_CreateLatentTweenCustomFloat, TweenWhileGameIsPaused) == 0x000040, "Member 'TweenFloatLatentFactory_BP_CreateLatentTweenCustomFloat::TweenWhileGameIsPaused' has a wrong offset!");
static_assert(offsetof(TweenFloatLatentFactory_BP_CreateLatentTweenCustomFloat, ReturnValue) == 0x000048, "Member 'TweenFloatLatentFactory_BP_CreateLatentTweenCustomFloat::ReturnValue' has a wrong offset!");

// Function TweenMaker.TweenFloatLatentFactory.BP_CreateLatentTweenMaterialFloatFromTo
// 0x0058 (0x0058 - 0x0000)
struct TweenFloatLatentFactory_BP_CreateLatentTweenMaterialFloatFromTo final
{
public:
	class UTweenManagerComponent*                 TweenManager;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UMaterialInstanceDynamic*               TweenTarget;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UTweenContainer*                        OutTweenContainer;                                 // 0x0010(0x0008)(Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UTweenFloat*                            OutTween;                                          // 0x0018(0x0008)(Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   ParameterName;                                     // 0x0020(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         From;                                              // 0x0028(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         To;                                                // 0x002C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Duration;                                          // 0x0030(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETweenEaseType                                EaseType;                                          // 0x0034(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_35[0x3];                                       // 0x0035(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         NumLoops;                                          // 0x0038(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETweenLoopType                                LoopType;                                          // 0x003C(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_3D[0x3];                                       // 0x003D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Delay;                                             // 0x0040(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TimeScale;                                         // 0x0044(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          TweenWhileGameIsPaused;                            // 0x0048(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_49[0x7];                                       // 0x0049(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UTweenFloatLatentFactory*               ReturnValue;                                       // 0x0050(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TweenFloatLatentFactory_BP_CreateLatentTweenMaterialFloatFromTo) == 0x000008, "Wrong alignment on TweenFloatLatentFactory_BP_CreateLatentTweenMaterialFloatFromTo");
static_assert(sizeof(TweenFloatLatentFactory_BP_CreateLatentTweenMaterialFloatFromTo) == 0x000058, "Wrong size on TweenFloatLatentFactory_BP_CreateLatentTweenMaterialFloatFromTo");
static_assert(offsetof(TweenFloatLatentFactory_BP_CreateLatentTweenMaterialFloatFromTo, TweenManager) == 0x000000, "Member 'TweenFloatLatentFactory_BP_CreateLatentTweenMaterialFloatFromTo::TweenManager' has a wrong offset!");
static_assert(offsetof(TweenFloatLatentFactory_BP_CreateLatentTweenMaterialFloatFromTo, TweenTarget) == 0x000008, "Member 'TweenFloatLatentFactory_BP_CreateLatentTweenMaterialFloatFromTo::TweenTarget' has a wrong offset!");
static_assert(offsetof(TweenFloatLatentFactory_BP_CreateLatentTweenMaterialFloatFromTo, OutTweenContainer) == 0x000010, "Member 'TweenFloatLatentFactory_BP_CreateLatentTweenMaterialFloatFromTo::OutTweenContainer' has a wrong offset!");
static_assert(offsetof(TweenFloatLatentFactory_BP_CreateLatentTweenMaterialFloatFromTo, OutTween) == 0x000018, "Member 'TweenFloatLatentFactory_BP_CreateLatentTweenMaterialFloatFromTo::OutTween' has a wrong offset!");
static_assert(offsetof(TweenFloatLatentFactory_BP_CreateLatentTweenMaterialFloatFromTo, ParameterName) == 0x000020, "Member 'TweenFloatLatentFactory_BP_CreateLatentTweenMaterialFloatFromTo::ParameterName' has a wrong offset!");
static_assert(offsetof(TweenFloatLatentFactory_BP_CreateLatentTweenMaterialFloatFromTo, From) == 0x000028, "Member 'TweenFloatLatentFactory_BP_CreateLatentTweenMaterialFloatFromTo::From' has a wrong offset!");
static_assert(offsetof(TweenFloatLatentFactory_BP_CreateLatentTweenMaterialFloatFromTo, To) == 0x00002C, "Member 'TweenFloatLatentFactory_BP_CreateLatentTweenMaterialFloatFromTo::To' has a wrong offset!");
static_assert(offsetof(TweenFloatLatentFactory_BP_CreateLatentTweenMaterialFloatFromTo, Duration) == 0x000030, "Member 'TweenFloatLatentFactory_BP_CreateLatentTweenMaterialFloatFromTo::Duration' has a wrong offset!");
static_assert(offsetof(TweenFloatLatentFactory_BP_CreateLatentTweenMaterialFloatFromTo, EaseType) == 0x000034, "Member 'TweenFloatLatentFactory_BP_CreateLatentTweenMaterialFloatFromTo::EaseType' has a wrong offset!");
static_assert(offsetof(TweenFloatLatentFactory_BP_CreateLatentTweenMaterialFloatFromTo, NumLoops) == 0x000038, "Member 'TweenFloatLatentFactory_BP_CreateLatentTweenMaterialFloatFromTo::NumLoops' has a wrong offset!");
static_assert(offsetof(TweenFloatLatentFactory_BP_CreateLatentTweenMaterialFloatFromTo, LoopType) == 0x00003C, "Member 'TweenFloatLatentFactory_BP_CreateLatentTweenMaterialFloatFromTo::LoopType' has a wrong offset!");
static_assert(offsetof(TweenFloatLatentFactory_BP_CreateLatentTweenMaterialFloatFromTo, Delay) == 0x000040, "Member 'TweenFloatLatentFactory_BP_CreateLatentTweenMaterialFloatFromTo::Delay' has a wrong offset!");
static_assert(offsetof(TweenFloatLatentFactory_BP_CreateLatentTweenMaterialFloatFromTo, TimeScale) == 0x000044, "Member 'TweenFloatLatentFactory_BP_CreateLatentTweenMaterialFloatFromTo::TimeScale' has a wrong offset!");
static_assert(offsetof(TweenFloatLatentFactory_BP_CreateLatentTweenMaterialFloatFromTo, TweenWhileGameIsPaused) == 0x000048, "Member 'TweenFloatLatentFactory_BP_CreateLatentTweenMaterialFloatFromTo::TweenWhileGameIsPaused' has a wrong offset!");
static_assert(offsetof(TweenFloatLatentFactory_BP_CreateLatentTweenMaterialFloatFromTo, ReturnValue) == 0x000050, "Member 'TweenFloatLatentFactory_BP_CreateLatentTweenMaterialFloatFromTo::ReturnValue' has a wrong offset!");

// Function TweenMaker.TweenFloatLatentFactory.BP_CreateLatentTweenMaterialFloatTo
// 0x0050 (0x0050 - 0x0000)
struct TweenFloatLatentFactory_BP_CreateLatentTweenMaterialFloatTo final
{
public:
	class UTweenManagerComponent*                 TweenManager;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UMaterialInstanceDynamic*               TweenTarget;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UTweenContainer*                        OutTweenContainer;                                 // 0x0010(0x0008)(Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UTweenFloat*                            OutTween;                                          // 0x0018(0x0008)(Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   ParameterName;                                     // 0x0020(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         To;                                                // 0x0028(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Duration;                                          // 0x002C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETweenEaseType                                EaseType;                                          // 0x0030(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_31[0x3];                                       // 0x0031(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         NumLoops;                                          // 0x0034(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETweenLoopType                                LoopType;                                          // 0x0038(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_39[0x3];                                       // 0x0039(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Delay;                                             // 0x003C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TimeScale;                                         // 0x0040(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          TweenWhileGameIsPaused;                            // 0x0044(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_45[0x3];                                       // 0x0045(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UTweenFloatLatentFactory*               ReturnValue;                                       // 0x0048(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TweenFloatLatentFactory_BP_CreateLatentTweenMaterialFloatTo) == 0x000008, "Wrong alignment on TweenFloatLatentFactory_BP_CreateLatentTweenMaterialFloatTo");
static_assert(sizeof(TweenFloatLatentFactory_BP_CreateLatentTweenMaterialFloatTo) == 0x000050, "Wrong size on TweenFloatLatentFactory_BP_CreateLatentTweenMaterialFloatTo");
static_assert(offsetof(TweenFloatLatentFactory_BP_CreateLatentTweenMaterialFloatTo, TweenManager) == 0x000000, "Member 'TweenFloatLatentFactory_BP_CreateLatentTweenMaterialFloatTo::TweenManager' has a wrong offset!");
static_assert(offsetof(TweenFloatLatentFactory_BP_CreateLatentTweenMaterialFloatTo, TweenTarget) == 0x000008, "Member 'TweenFloatLatentFactory_BP_CreateLatentTweenMaterialFloatTo::TweenTarget' has a wrong offset!");
static_assert(offsetof(TweenFloatLatentFactory_BP_CreateLatentTweenMaterialFloatTo, OutTweenContainer) == 0x000010, "Member 'TweenFloatLatentFactory_BP_CreateLatentTweenMaterialFloatTo::OutTweenContainer' has a wrong offset!");
static_assert(offsetof(TweenFloatLatentFactory_BP_CreateLatentTweenMaterialFloatTo, OutTween) == 0x000018, "Member 'TweenFloatLatentFactory_BP_CreateLatentTweenMaterialFloatTo::OutTween' has a wrong offset!");
static_assert(offsetof(TweenFloatLatentFactory_BP_CreateLatentTweenMaterialFloatTo, ParameterName) == 0x000020, "Member 'TweenFloatLatentFactory_BP_CreateLatentTweenMaterialFloatTo::ParameterName' has a wrong offset!");
static_assert(offsetof(TweenFloatLatentFactory_BP_CreateLatentTweenMaterialFloatTo, To) == 0x000028, "Member 'TweenFloatLatentFactory_BP_CreateLatentTweenMaterialFloatTo::To' has a wrong offset!");
static_assert(offsetof(TweenFloatLatentFactory_BP_CreateLatentTweenMaterialFloatTo, Duration) == 0x00002C, "Member 'TweenFloatLatentFactory_BP_CreateLatentTweenMaterialFloatTo::Duration' has a wrong offset!");
static_assert(offsetof(TweenFloatLatentFactory_BP_CreateLatentTweenMaterialFloatTo, EaseType) == 0x000030, "Member 'TweenFloatLatentFactory_BP_CreateLatentTweenMaterialFloatTo::EaseType' has a wrong offset!");
static_assert(offsetof(TweenFloatLatentFactory_BP_CreateLatentTweenMaterialFloatTo, NumLoops) == 0x000034, "Member 'TweenFloatLatentFactory_BP_CreateLatentTweenMaterialFloatTo::NumLoops' has a wrong offset!");
static_assert(offsetof(TweenFloatLatentFactory_BP_CreateLatentTweenMaterialFloatTo, LoopType) == 0x000038, "Member 'TweenFloatLatentFactory_BP_CreateLatentTweenMaterialFloatTo::LoopType' has a wrong offset!");
static_assert(offsetof(TweenFloatLatentFactory_BP_CreateLatentTweenMaterialFloatTo, Delay) == 0x00003C, "Member 'TweenFloatLatentFactory_BP_CreateLatentTweenMaterialFloatTo::Delay' has a wrong offset!");
static_assert(offsetof(TweenFloatLatentFactory_BP_CreateLatentTweenMaterialFloatTo, TimeScale) == 0x000040, "Member 'TweenFloatLatentFactory_BP_CreateLatentTweenMaterialFloatTo::TimeScale' has a wrong offset!");
static_assert(offsetof(TweenFloatLatentFactory_BP_CreateLatentTweenMaterialFloatTo, TweenWhileGameIsPaused) == 0x000044, "Member 'TweenFloatLatentFactory_BP_CreateLatentTweenMaterialFloatTo::TweenWhileGameIsPaused' has a wrong offset!");
static_assert(offsetof(TweenFloatLatentFactory_BP_CreateLatentTweenMaterialFloatTo, ReturnValue) == 0x000048, "Member 'TweenFloatLatentFactory_BP_CreateLatentTweenMaterialFloatTo::ReturnValue' has a wrong offset!");

// Function TweenMaker.TweenFloatLatentFactory.BP_CreateLatentTweenRotateActorAroundPoint
// 0x0068 (0x0068 - 0x0000)
struct TweenFloatLatentFactory_BP_CreateLatentTweenRotateActorAroundPoint final
{
public:
	class UTweenManagerComponent*                 TweenManager;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 TweenTarget;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UTweenContainer*                        OutTweenContainer;                                 // 0x0010(0x0008)(Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UTweenFloat*                            OutTween;                                          // 0x0018(0x0008)(Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                PivotPoint;                                        // 0x0020(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         StartingAngle;                                     // 0x002C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         EndingAngle;                                       // 0x0030(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Radius;                                            // 0x0034(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                Axis;                                              // 0x0038(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Duration;                                          // 0x0044(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETweenEaseType                                EaseType;                                          // 0x0048(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          DeleteTweenOnHit;                                  // 0x0049(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          DeleteTweenOnOverlap;                              // 0x004A(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4B[0x1];                                       // 0x004B(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         NumLoops;                                          // 0x004C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETweenLoopType                                LoopType;                                          // 0x0050(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_51[0x3];                                       // 0x0051(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Delay;                                             // 0x0054(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TimeScale;                                         // 0x0058(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          TweenWhileGameIsPaused;                            // 0x005C(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5D[0x3];                                       // 0x005D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UTweenFloatLatentFactory*               ReturnValue;                                       // 0x0060(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TweenFloatLatentFactory_BP_CreateLatentTweenRotateActorAroundPoint) == 0x000008, "Wrong alignment on TweenFloatLatentFactory_BP_CreateLatentTweenRotateActorAroundPoint");
static_assert(sizeof(TweenFloatLatentFactory_BP_CreateLatentTweenRotateActorAroundPoint) == 0x000068, "Wrong size on TweenFloatLatentFactory_BP_CreateLatentTweenRotateActorAroundPoint");
static_assert(offsetof(TweenFloatLatentFactory_BP_CreateLatentTweenRotateActorAroundPoint, TweenManager) == 0x000000, "Member 'TweenFloatLatentFactory_BP_CreateLatentTweenRotateActorAroundPoint::TweenManager' has a wrong offset!");
static_assert(offsetof(TweenFloatLatentFactory_BP_CreateLatentTweenRotateActorAroundPoint, TweenTarget) == 0x000008, "Member 'TweenFloatLatentFactory_BP_CreateLatentTweenRotateActorAroundPoint::TweenTarget' has a wrong offset!");
static_assert(offsetof(TweenFloatLatentFactory_BP_CreateLatentTweenRotateActorAroundPoint, OutTweenContainer) == 0x000010, "Member 'TweenFloatLatentFactory_BP_CreateLatentTweenRotateActorAroundPoint::OutTweenContainer' has a wrong offset!");
static_assert(offsetof(TweenFloatLatentFactory_BP_CreateLatentTweenRotateActorAroundPoint, OutTween) == 0x000018, "Member 'TweenFloatLatentFactory_BP_CreateLatentTweenRotateActorAroundPoint::OutTween' has a wrong offset!");
static_assert(offsetof(TweenFloatLatentFactory_BP_CreateLatentTweenRotateActorAroundPoint, PivotPoint) == 0x000020, "Member 'TweenFloatLatentFactory_BP_CreateLatentTweenRotateActorAroundPoint::PivotPoint' has a wrong offset!");
static_assert(offsetof(TweenFloatLatentFactory_BP_CreateLatentTweenRotateActorAroundPoint, StartingAngle) == 0x00002C, "Member 'TweenFloatLatentFactory_BP_CreateLatentTweenRotateActorAroundPoint::StartingAngle' has a wrong offset!");
static_assert(offsetof(TweenFloatLatentFactory_BP_CreateLatentTweenRotateActorAroundPoint, EndingAngle) == 0x000030, "Member 'TweenFloatLatentFactory_BP_CreateLatentTweenRotateActorAroundPoint::EndingAngle' has a wrong offset!");
static_assert(offsetof(TweenFloatLatentFactory_BP_CreateLatentTweenRotateActorAroundPoint, Radius) == 0x000034, "Member 'TweenFloatLatentFactory_BP_CreateLatentTweenRotateActorAroundPoint::Radius' has a wrong offset!");
static_assert(offsetof(TweenFloatLatentFactory_BP_CreateLatentTweenRotateActorAroundPoint, Axis) == 0x000038, "Member 'TweenFloatLatentFactory_BP_CreateLatentTweenRotateActorAroundPoint::Axis' has a wrong offset!");
static_assert(offsetof(TweenFloatLatentFactory_BP_CreateLatentTweenRotateActorAroundPoint, Duration) == 0x000044, "Member 'TweenFloatLatentFactory_BP_CreateLatentTweenRotateActorAroundPoint::Duration' has a wrong offset!");
static_assert(offsetof(TweenFloatLatentFactory_BP_CreateLatentTweenRotateActorAroundPoint, EaseType) == 0x000048, "Member 'TweenFloatLatentFactory_BP_CreateLatentTweenRotateActorAroundPoint::EaseType' has a wrong offset!");
static_assert(offsetof(TweenFloatLatentFactory_BP_CreateLatentTweenRotateActorAroundPoint, DeleteTweenOnHit) == 0x000049, "Member 'TweenFloatLatentFactory_BP_CreateLatentTweenRotateActorAroundPoint::DeleteTweenOnHit' has a wrong offset!");
static_assert(offsetof(TweenFloatLatentFactory_BP_CreateLatentTweenRotateActorAroundPoint, DeleteTweenOnOverlap) == 0x00004A, "Member 'TweenFloatLatentFactory_BP_CreateLatentTweenRotateActorAroundPoint::DeleteTweenOnOverlap' has a wrong offset!");
static_assert(offsetof(TweenFloatLatentFactory_BP_CreateLatentTweenRotateActorAroundPoint, NumLoops) == 0x00004C, "Member 'TweenFloatLatentFactory_BP_CreateLatentTweenRotateActorAroundPoint::NumLoops' has a wrong offset!");
static_assert(offsetof(TweenFloatLatentFactory_BP_CreateLatentTweenRotateActorAroundPoint, LoopType) == 0x000050, "Member 'TweenFloatLatentFactory_BP_CreateLatentTweenRotateActorAroundPoint::LoopType' has a wrong offset!");
static_assert(offsetof(TweenFloatLatentFactory_BP_CreateLatentTweenRotateActorAroundPoint, Delay) == 0x000054, "Member 'TweenFloatLatentFactory_BP_CreateLatentTweenRotateActorAroundPoint::Delay' has a wrong offset!");
static_assert(offsetof(TweenFloatLatentFactory_BP_CreateLatentTweenRotateActorAroundPoint, TimeScale) == 0x000058, "Member 'TweenFloatLatentFactory_BP_CreateLatentTweenRotateActorAroundPoint::TimeScale' has a wrong offset!");
static_assert(offsetof(TweenFloatLatentFactory_BP_CreateLatentTweenRotateActorAroundPoint, TweenWhileGameIsPaused) == 0x00005C, "Member 'TweenFloatLatentFactory_BP_CreateLatentTweenRotateActorAroundPoint::TweenWhileGameIsPaused' has a wrong offset!");
static_assert(offsetof(TweenFloatLatentFactory_BP_CreateLatentTweenRotateActorAroundPoint, ReturnValue) == 0x000060, "Member 'TweenFloatLatentFactory_BP_CreateLatentTweenRotateActorAroundPoint::ReturnValue' has a wrong offset!");

// Function TweenMaker.TweenFloatLatentFactory.BP_CreateLatentTweenRotateActorAroundPointByOffset
// 0x0058 (0x0058 - 0x0000)
struct TweenFloatLatentFactory_BP_CreateLatentTweenRotateActorAroundPointByOffset final
{
public:
	class UTweenManagerComponent*                 TweenManager;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 TweenTarget;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UTweenContainer*                        OutTweenContainer;                                 // 0x0010(0x0008)(Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UTweenFloat*                            OutTween;                                          // 0x0018(0x0008)(Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                PivotPoint;                                        // 0x0020(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         OffsetAngle;                                       // 0x002C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETweenReferenceAxis                           ReferenceAxis;                                     // 0x0030(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_31[0x3];                                       // 0x0031(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Duration;                                          // 0x0034(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETweenEaseType                                EaseType;                                          // 0x0038(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          DeleteTweenOnHit;                                  // 0x0039(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          DeleteTweenOnOverlap;                              // 0x003A(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_3B[0x1];                                       // 0x003B(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         NumLoops;                                          // 0x003C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETweenLoopType                                LoopType;                                          // 0x0040(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_41[0x3];                                       // 0x0041(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Delay;                                             // 0x0044(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TimeScale;                                         // 0x0048(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          TweenWhileGameIsPaused;                            // 0x004C(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4D[0x3];                                       // 0x004D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UTweenFloatLatentFactory*               ReturnValue;                                       // 0x0050(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TweenFloatLatentFactory_BP_CreateLatentTweenRotateActorAroundPointByOffset) == 0x000008, "Wrong alignment on TweenFloatLatentFactory_BP_CreateLatentTweenRotateActorAroundPointByOffset");
static_assert(sizeof(TweenFloatLatentFactory_BP_CreateLatentTweenRotateActorAroundPointByOffset) == 0x000058, "Wrong size on TweenFloatLatentFactory_BP_CreateLatentTweenRotateActorAroundPointByOffset");
static_assert(offsetof(TweenFloatLatentFactory_BP_CreateLatentTweenRotateActorAroundPointByOffset, TweenManager) == 0x000000, "Member 'TweenFloatLatentFactory_BP_CreateLatentTweenRotateActorAroundPointByOffset::TweenManager' has a wrong offset!");
static_assert(offsetof(TweenFloatLatentFactory_BP_CreateLatentTweenRotateActorAroundPointByOffset, TweenTarget) == 0x000008, "Member 'TweenFloatLatentFactory_BP_CreateLatentTweenRotateActorAroundPointByOffset::TweenTarget' has a wrong offset!");
static_assert(offsetof(TweenFloatLatentFactory_BP_CreateLatentTweenRotateActorAroundPointByOffset, OutTweenContainer) == 0x000010, "Member 'TweenFloatLatentFactory_BP_CreateLatentTweenRotateActorAroundPointByOffset::OutTweenContainer' has a wrong offset!");
static_assert(offsetof(TweenFloatLatentFactory_BP_CreateLatentTweenRotateActorAroundPointByOffset, OutTween) == 0x000018, "Member 'TweenFloatLatentFactory_BP_CreateLatentTweenRotateActorAroundPointByOffset::OutTween' has a wrong offset!");
static_assert(offsetof(TweenFloatLatentFactory_BP_CreateLatentTweenRotateActorAroundPointByOffset, PivotPoint) == 0x000020, "Member 'TweenFloatLatentFactory_BP_CreateLatentTweenRotateActorAroundPointByOffset::PivotPoint' has a wrong offset!");
static_assert(offsetof(TweenFloatLatentFactory_BP_CreateLatentTweenRotateActorAroundPointByOffset, OffsetAngle) == 0x00002C, "Member 'TweenFloatLatentFactory_BP_CreateLatentTweenRotateActorAroundPointByOffset::OffsetAngle' has a wrong offset!");
static_assert(offsetof(TweenFloatLatentFactory_BP_CreateLatentTweenRotateActorAroundPointByOffset, ReferenceAxis) == 0x000030, "Member 'TweenFloatLatentFactory_BP_CreateLatentTweenRotateActorAroundPointByOffset::ReferenceAxis' has a wrong offset!");
static_assert(offsetof(TweenFloatLatentFactory_BP_CreateLatentTweenRotateActorAroundPointByOffset, Duration) == 0x000034, "Member 'TweenFloatLatentFactory_BP_CreateLatentTweenRotateActorAroundPointByOffset::Duration' has a wrong offset!");
static_assert(offsetof(TweenFloatLatentFactory_BP_CreateLatentTweenRotateActorAroundPointByOffset, EaseType) == 0x000038, "Member 'TweenFloatLatentFactory_BP_CreateLatentTweenRotateActorAroundPointByOffset::EaseType' has a wrong offset!");
static_assert(offsetof(TweenFloatLatentFactory_BP_CreateLatentTweenRotateActorAroundPointByOffset, DeleteTweenOnHit) == 0x000039, "Member 'TweenFloatLatentFactory_BP_CreateLatentTweenRotateActorAroundPointByOffset::DeleteTweenOnHit' has a wrong offset!");
static_assert(offsetof(TweenFloatLatentFactory_BP_CreateLatentTweenRotateActorAroundPointByOffset, DeleteTweenOnOverlap) == 0x00003A, "Member 'TweenFloatLatentFactory_BP_CreateLatentTweenRotateActorAroundPointByOffset::DeleteTweenOnOverlap' has a wrong offset!");
static_assert(offsetof(TweenFloatLatentFactory_BP_CreateLatentTweenRotateActorAroundPointByOffset, NumLoops) == 0x00003C, "Member 'TweenFloatLatentFactory_BP_CreateLatentTweenRotateActorAroundPointByOffset::NumLoops' has a wrong offset!");
static_assert(offsetof(TweenFloatLatentFactory_BP_CreateLatentTweenRotateActorAroundPointByOffset, LoopType) == 0x000040, "Member 'TweenFloatLatentFactory_BP_CreateLatentTweenRotateActorAroundPointByOffset::LoopType' has a wrong offset!");
static_assert(offsetof(TweenFloatLatentFactory_BP_CreateLatentTweenRotateActorAroundPointByOffset, Delay) == 0x000044, "Member 'TweenFloatLatentFactory_BP_CreateLatentTweenRotateActorAroundPointByOffset::Delay' has a wrong offset!");
static_assert(offsetof(TweenFloatLatentFactory_BP_CreateLatentTweenRotateActorAroundPointByOffset, TimeScale) == 0x000048, "Member 'TweenFloatLatentFactory_BP_CreateLatentTweenRotateActorAroundPointByOffset::TimeScale' has a wrong offset!");
static_assert(offsetof(TweenFloatLatentFactory_BP_CreateLatentTweenRotateActorAroundPointByOffset, TweenWhileGameIsPaused) == 0x00004C, "Member 'TweenFloatLatentFactory_BP_CreateLatentTweenRotateActorAroundPointByOffset::TweenWhileGameIsPaused' has a wrong offset!");
static_assert(offsetof(TweenFloatLatentFactory_BP_CreateLatentTweenRotateActorAroundPointByOffset, ReturnValue) == 0x000050, "Member 'TweenFloatLatentFactory_BP_CreateLatentTweenRotateActorAroundPointByOffset::ReturnValue' has a wrong offset!");

// Function TweenMaker.TweenFloatLatentFactory.BP_CreateLatentTweenRotateSceneComponentAroundPoint
// 0x0068 (0x0068 - 0x0000)
struct TweenFloatLatentFactory_BP_CreateLatentTweenRotateSceneComponentAroundPoint final
{
public:
	class UTweenManagerComponent*                 TweenManager;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USceneComponent*                        TweenTarget;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, InstancedReference, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UTweenContainer*                        OutTweenContainer;                                 // 0x0010(0x0008)(Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UTweenFloat*                            OutTween;                                          // 0x0018(0x0008)(Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                PivotPoint;                                        // 0x0020(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         StartingAngle;                                     // 0x002C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         EndingAngle;                                       // 0x0030(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Radius;                                            // 0x0034(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                Axis;                                              // 0x0038(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Duration;                                          // 0x0044(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETweenEaseType                                EaseType;                                          // 0x0048(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          DeleteTweenOnHit;                                  // 0x0049(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          DeleteTweenOnOverlap;                              // 0x004A(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4B[0x1];                                       // 0x004B(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         NumLoops;                                          // 0x004C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETweenLoopType                                LoopType;                                          // 0x0050(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_51[0x3];                                       // 0x0051(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Delay;                                             // 0x0054(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TimeScale;                                         // 0x0058(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          TweenWhileGameIsPaused;                            // 0x005C(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5D[0x3];                                       // 0x005D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UTweenFloatLatentFactory*               ReturnValue;                                       // 0x0060(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TweenFloatLatentFactory_BP_CreateLatentTweenRotateSceneComponentAroundPoint) == 0x000008, "Wrong alignment on TweenFloatLatentFactory_BP_CreateLatentTweenRotateSceneComponentAroundPoint");
static_assert(sizeof(TweenFloatLatentFactory_BP_CreateLatentTweenRotateSceneComponentAroundPoint) == 0x000068, "Wrong size on TweenFloatLatentFactory_BP_CreateLatentTweenRotateSceneComponentAroundPoint");
static_assert(offsetof(TweenFloatLatentFactory_BP_CreateLatentTweenRotateSceneComponentAroundPoint, TweenManager) == 0x000000, "Member 'TweenFloatLatentFactory_BP_CreateLatentTweenRotateSceneComponentAroundPoint::TweenManager' has a wrong offset!");
static_assert(offsetof(TweenFloatLatentFactory_BP_CreateLatentTweenRotateSceneComponentAroundPoint, TweenTarget) == 0x000008, "Member 'TweenFloatLatentFactory_BP_CreateLatentTweenRotateSceneComponentAroundPoint::TweenTarget' has a wrong offset!");
static_assert(offsetof(TweenFloatLatentFactory_BP_CreateLatentTweenRotateSceneComponentAroundPoint, OutTweenContainer) == 0x000010, "Member 'TweenFloatLatentFactory_BP_CreateLatentTweenRotateSceneComponentAroundPoint::OutTweenContainer' has a wrong offset!");
static_assert(offsetof(TweenFloatLatentFactory_BP_CreateLatentTweenRotateSceneComponentAroundPoint, OutTween) == 0x000018, "Member 'TweenFloatLatentFactory_BP_CreateLatentTweenRotateSceneComponentAroundPoint::OutTween' has a wrong offset!");
static_assert(offsetof(TweenFloatLatentFactory_BP_CreateLatentTweenRotateSceneComponentAroundPoint, PivotPoint) == 0x000020, "Member 'TweenFloatLatentFactory_BP_CreateLatentTweenRotateSceneComponentAroundPoint::PivotPoint' has a wrong offset!");
static_assert(offsetof(TweenFloatLatentFactory_BP_CreateLatentTweenRotateSceneComponentAroundPoint, StartingAngle) == 0x00002C, "Member 'TweenFloatLatentFactory_BP_CreateLatentTweenRotateSceneComponentAroundPoint::StartingAngle' has a wrong offset!");
static_assert(offsetof(TweenFloatLatentFactory_BP_CreateLatentTweenRotateSceneComponentAroundPoint, EndingAngle) == 0x000030, "Member 'TweenFloatLatentFactory_BP_CreateLatentTweenRotateSceneComponentAroundPoint::EndingAngle' has a wrong offset!");
static_assert(offsetof(TweenFloatLatentFactory_BP_CreateLatentTweenRotateSceneComponentAroundPoint, Radius) == 0x000034, "Member 'TweenFloatLatentFactory_BP_CreateLatentTweenRotateSceneComponentAroundPoint::Radius' has a wrong offset!");
static_assert(offsetof(TweenFloatLatentFactory_BP_CreateLatentTweenRotateSceneComponentAroundPoint, Axis) == 0x000038, "Member 'TweenFloatLatentFactory_BP_CreateLatentTweenRotateSceneComponentAroundPoint::Axis' has a wrong offset!");
static_assert(offsetof(TweenFloatLatentFactory_BP_CreateLatentTweenRotateSceneComponentAroundPoint, Duration) == 0x000044, "Member 'TweenFloatLatentFactory_BP_CreateLatentTweenRotateSceneComponentAroundPoint::Duration' has a wrong offset!");
static_assert(offsetof(TweenFloatLatentFactory_BP_CreateLatentTweenRotateSceneComponentAroundPoint, EaseType) == 0x000048, "Member 'TweenFloatLatentFactory_BP_CreateLatentTweenRotateSceneComponentAroundPoint::EaseType' has a wrong offset!");
static_assert(offsetof(TweenFloatLatentFactory_BP_CreateLatentTweenRotateSceneComponentAroundPoint, DeleteTweenOnHit) == 0x000049, "Member 'TweenFloatLatentFactory_BP_CreateLatentTweenRotateSceneComponentAroundPoint::DeleteTweenOnHit' has a wrong offset!");
static_assert(offsetof(TweenFloatLatentFactory_BP_CreateLatentTweenRotateSceneComponentAroundPoint, DeleteTweenOnOverlap) == 0x00004A, "Member 'TweenFloatLatentFactory_BP_CreateLatentTweenRotateSceneComponentAroundPoint::DeleteTweenOnOverlap' has a wrong offset!");
static_assert(offsetof(TweenFloatLatentFactory_BP_CreateLatentTweenRotateSceneComponentAroundPoint, NumLoops) == 0x00004C, "Member 'TweenFloatLatentFactory_BP_CreateLatentTweenRotateSceneComponentAroundPoint::NumLoops' has a wrong offset!");
static_assert(offsetof(TweenFloatLatentFactory_BP_CreateLatentTweenRotateSceneComponentAroundPoint, LoopType) == 0x000050, "Member 'TweenFloatLatentFactory_BP_CreateLatentTweenRotateSceneComponentAroundPoint::LoopType' has a wrong offset!");
static_assert(offsetof(TweenFloatLatentFactory_BP_CreateLatentTweenRotateSceneComponentAroundPoint, Delay) == 0x000054, "Member 'TweenFloatLatentFactory_BP_CreateLatentTweenRotateSceneComponentAroundPoint::Delay' has a wrong offset!");
static_assert(offsetof(TweenFloatLatentFactory_BP_CreateLatentTweenRotateSceneComponentAroundPoint, TimeScale) == 0x000058, "Member 'TweenFloatLatentFactory_BP_CreateLatentTweenRotateSceneComponentAroundPoint::TimeScale' has a wrong offset!");
static_assert(offsetof(TweenFloatLatentFactory_BP_CreateLatentTweenRotateSceneComponentAroundPoint, TweenWhileGameIsPaused) == 0x00005C, "Member 'TweenFloatLatentFactory_BP_CreateLatentTweenRotateSceneComponentAroundPoint::TweenWhileGameIsPaused' has a wrong offset!");
static_assert(offsetof(TweenFloatLatentFactory_BP_CreateLatentTweenRotateSceneComponentAroundPoint, ReturnValue) == 0x000060, "Member 'TweenFloatLatentFactory_BP_CreateLatentTweenRotateSceneComponentAroundPoint::ReturnValue' has a wrong offset!");

// Function TweenMaker.TweenFloatLatentFactory.BP_CreateLatentTweenRotateSceneComponentAroundPointByOffset
// 0x0058 (0x0058 - 0x0000)
struct TweenFloatLatentFactory_BP_CreateLatentTweenRotateSceneComponentAroundPointByOffset final
{
public:
	class UTweenManagerComponent*                 TweenManager;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USceneComponent*                        TweenTarget;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, InstancedReference, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UTweenContainer*                        OutTweenContainer;                                 // 0x0010(0x0008)(Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UTweenFloat*                            OutTween;                                          // 0x0018(0x0008)(Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                PivotPoint;                                        // 0x0020(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         OffsetAngle;                                       // 0x002C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETweenReferenceAxis                           ReferenceAxis;                                     // 0x0030(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_31[0x3];                                       // 0x0031(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Duration;                                          // 0x0034(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETweenEaseType                                EaseType;                                          // 0x0038(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          DeleteTweenOnHit;                                  // 0x0039(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          DeleteTweenOnOverlap;                              // 0x003A(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_3B[0x1];                                       // 0x003B(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         NumLoops;                                          // 0x003C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETweenLoopType                                LoopType;                                          // 0x0040(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_41[0x3];                                       // 0x0041(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Delay;                                             // 0x0044(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TimeScale;                                         // 0x0048(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          TweenWhileGameIsPaused;                            // 0x004C(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4D[0x3];                                       // 0x004D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UTweenFloatLatentFactory*               ReturnValue;                                       // 0x0050(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TweenFloatLatentFactory_BP_CreateLatentTweenRotateSceneComponentAroundPointByOffset) == 0x000008, "Wrong alignment on TweenFloatLatentFactory_BP_CreateLatentTweenRotateSceneComponentAroundPointByOffset");
static_assert(sizeof(TweenFloatLatentFactory_BP_CreateLatentTweenRotateSceneComponentAroundPointByOffset) == 0x000058, "Wrong size on TweenFloatLatentFactory_BP_CreateLatentTweenRotateSceneComponentAroundPointByOffset");
static_assert(offsetof(TweenFloatLatentFactory_BP_CreateLatentTweenRotateSceneComponentAroundPointByOffset, TweenManager) == 0x000000, "Member 'TweenFloatLatentFactory_BP_CreateLatentTweenRotateSceneComponentAroundPointByOffset::TweenManager' has a wrong offset!");
static_assert(offsetof(TweenFloatLatentFactory_BP_CreateLatentTweenRotateSceneComponentAroundPointByOffset, TweenTarget) == 0x000008, "Member 'TweenFloatLatentFactory_BP_CreateLatentTweenRotateSceneComponentAroundPointByOffset::TweenTarget' has a wrong offset!");
static_assert(offsetof(TweenFloatLatentFactory_BP_CreateLatentTweenRotateSceneComponentAroundPointByOffset, OutTweenContainer) == 0x000010, "Member 'TweenFloatLatentFactory_BP_CreateLatentTweenRotateSceneComponentAroundPointByOffset::OutTweenContainer' has a wrong offset!");
static_assert(offsetof(TweenFloatLatentFactory_BP_CreateLatentTweenRotateSceneComponentAroundPointByOffset, OutTween) == 0x000018, "Member 'TweenFloatLatentFactory_BP_CreateLatentTweenRotateSceneComponentAroundPointByOffset::OutTween' has a wrong offset!");
static_assert(offsetof(TweenFloatLatentFactory_BP_CreateLatentTweenRotateSceneComponentAroundPointByOffset, PivotPoint) == 0x000020, "Member 'TweenFloatLatentFactory_BP_CreateLatentTweenRotateSceneComponentAroundPointByOffset::PivotPoint' has a wrong offset!");
static_assert(offsetof(TweenFloatLatentFactory_BP_CreateLatentTweenRotateSceneComponentAroundPointByOffset, OffsetAngle) == 0x00002C, "Member 'TweenFloatLatentFactory_BP_CreateLatentTweenRotateSceneComponentAroundPointByOffset::OffsetAngle' has a wrong offset!");
static_assert(offsetof(TweenFloatLatentFactory_BP_CreateLatentTweenRotateSceneComponentAroundPointByOffset, ReferenceAxis) == 0x000030, "Member 'TweenFloatLatentFactory_BP_CreateLatentTweenRotateSceneComponentAroundPointByOffset::ReferenceAxis' has a wrong offset!");
static_assert(offsetof(TweenFloatLatentFactory_BP_CreateLatentTweenRotateSceneComponentAroundPointByOffset, Duration) == 0x000034, "Member 'TweenFloatLatentFactory_BP_CreateLatentTweenRotateSceneComponentAroundPointByOffset::Duration' has a wrong offset!");
static_assert(offsetof(TweenFloatLatentFactory_BP_CreateLatentTweenRotateSceneComponentAroundPointByOffset, EaseType) == 0x000038, "Member 'TweenFloatLatentFactory_BP_CreateLatentTweenRotateSceneComponentAroundPointByOffset::EaseType' has a wrong offset!");
static_assert(offsetof(TweenFloatLatentFactory_BP_CreateLatentTweenRotateSceneComponentAroundPointByOffset, DeleteTweenOnHit) == 0x000039, "Member 'TweenFloatLatentFactory_BP_CreateLatentTweenRotateSceneComponentAroundPointByOffset::DeleteTweenOnHit' has a wrong offset!");
static_assert(offsetof(TweenFloatLatentFactory_BP_CreateLatentTweenRotateSceneComponentAroundPointByOffset, DeleteTweenOnOverlap) == 0x00003A, "Member 'TweenFloatLatentFactory_BP_CreateLatentTweenRotateSceneComponentAroundPointByOffset::DeleteTweenOnOverlap' has a wrong offset!");
static_assert(offsetof(TweenFloatLatentFactory_BP_CreateLatentTweenRotateSceneComponentAroundPointByOffset, NumLoops) == 0x00003C, "Member 'TweenFloatLatentFactory_BP_CreateLatentTweenRotateSceneComponentAroundPointByOffset::NumLoops' has a wrong offset!");
static_assert(offsetof(TweenFloatLatentFactory_BP_CreateLatentTweenRotateSceneComponentAroundPointByOffset, LoopType) == 0x000040, "Member 'TweenFloatLatentFactory_BP_CreateLatentTweenRotateSceneComponentAroundPointByOffset::LoopType' has a wrong offset!");
static_assert(offsetof(TweenFloatLatentFactory_BP_CreateLatentTweenRotateSceneComponentAroundPointByOffset, Delay) == 0x000044, "Member 'TweenFloatLatentFactory_BP_CreateLatentTweenRotateSceneComponentAroundPointByOffset::Delay' has a wrong offset!");
static_assert(offsetof(TweenFloatLatentFactory_BP_CreateLatentTweenRotateSceneComponentAroundPointByOffset, TimeScale) == 0x000048, "Member 'TweenFloatLatentFactory_BP_CreateLatentTweenRotateSceneComponentAroundPointByOffset::TimeScale' has a wrong offset!");
static_assert(offsetof(TweenFloatLatentFactory_BP_CreateLatentTweenRotateSceneComponentAroundPointByOffset, TweenWhileGameIsPaused) == 0x00004C, "Member 'TweenFloatLatentFactory_BP_CreateLatentTweenRotateSceneComponentAroundPointByOffset::TweenWhileGameIsPaused' has a wrong offset!");
static_assert(offsetof(TweenFloatLatentFactory_BP_CreateLatentTweenRotateSceneComponentAroundPointByOffset, ReturnValue) == 0x000050, "Member 'TweenFloatLatentFactory_BP_CreateLatentTweenRotateSceneComponentAroundPointByOffset::ReturnValue' has a wrong offset!");

// Function TweenMaker.TweenFloatLatentFactory.BP_CreateLatentTweenSceneComponentFollowSpline
// 0x0050 (0x0050 - 0x0000)
struct TweenFloatLatentFactory_BP_CreateLatentTweenSceneComponentFollowSpline final
{
public:
	class UTweenManagerComponent*                 TweenManager;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USceneComponent*                        TweenTarget;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, InstancedReference, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UTweenContainer*                        OutTweenContainer;                                 // 0x0010(0x0008)(Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UTweenFloat*                            OutTween;                                          // 0x0018(0x0008)(Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USplineComponent*                       Spline;                                            // 0x0020(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Duration;                                          // 0x0028(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ApplyRotation;                                     // 0x002C(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ApplyScale;                                        // 0x002D(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          UseConstantSpeed;                                  // 0x002E(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETweenEaseType                                EaseType;                                          // 0x002F(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          DeleteTweenOnHit;                                  // 0x0030(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          DeleteTweenOnOverlap;                              // 0x0031(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_32[0x2];                                       // 0x0032(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         NumLoops;                                          // 0x0034(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETweenLoopType                                LoopType;                                          // 0x0038(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_39[0x3];                                       // 0x0039(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Delay;                                             // 0x003C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TimeScale;                                         // 0x0040(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          TweenWhileGameIsPaused;                            // 0x0044(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_45[0x3];                                       // 0x0045(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UTweenFloatLatentFactory*               ReturnValue;                                       // 0x0048(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TweenFloatLatentFactory_BP_CreateLatentTweenSceneComponentFollowSpline) == 0x000008, "Wrong alignment on TweenFloatLatentFactory_BP_CreateLatentTweenSceneComponentFollowSpline");
static_assert(sizeof(TweenFloatLatentFactory_BP_CreateLatentTweenSceneComponentFollowSpline) == 0x000050, "Wrong size on TweenFloatLatentFactory_BP_CreateLatentTweenSceneComponentFollowSpline");
static_assert(offsetof(TweenFloatLatentFactory_BP_CreateLatentTweenSceneComponentFollowSpline, TweenManager) == 0x000000, "Member 'TweenFloatLatentFactory_BP_CreateLatentTweenSceneComponentFollowSpline::TweenManager' has a wrong offset!");
static_assert(offsetof(TweenFloatLatentFactory_BP_CreateLatentTweenSceneComponentFollowSpline, TweenTarget) == 0x000008, "Member 'TweenFloatLatentFactory_BP_CreateLatentTweenSceneComponentFollowSpline::TweenTarget' has a wrong offset!");
static_assert(offsetof(TweenFloatLatentFactory_BP_CreateLatentTweenSceneComponentFollowSpline, OutTweenContainer) == 0x000010, "Member 'TweenFloatLatentFactory_BP_CreateLatentTweenSceneComponentFollowSpline::OutTweenContainer' has a wrong offset!");
static_assert(offsetof(TweenFloatLatentFactory_BP_CreateLatentTweenSceneComponentFollowSpline, OutTween) == 0x000018, "Member 'TweenFloatLatentFactory_BP_CreateLatentTweenSceneComponentFollowSpline::OutTween' has a wrong offset!");
static_assert(offsetof(TweenFloatLatentFactory_BP_CreateLatentTweenSceneComponentFollowSpline, Spline) == 0x000020, "Member 'TweenFloatLatentFactory_BP_CreateLatentTweenSceneComponentFollowSpline::Spline' has a wrong offset!");
static_assert(offsetof(TweenFloatLatentFactory_BP_CreateLatentTweenSceneComponentFollowSpline, Duration) == 0x000028, "Member 'TweenFloatLatentFactory_BP_CreateLatentTweenSceneComponentFollowSpline::Duration' has a wrong offset!");
static_assert(offsetof(TweenFloatLatentFactory_BP_CreateLatentTweenSceneComponentFollowSpline, ApplyRotation) == 0x00002C, "Member 'TweenFloatLatentFactory_BP_CreateLatentTweenSceneComponentFollowSpline::ApplyRotation' has a wrong offset!");
static_assert(offsetof(TweenFloatLatentFactory_BP_CreateLatentTweenSceneComponentFollowSpline, ApplyScale) == 0x00002D, "Member 'TweenFloatLatentFactory_BP_CreateLatentTweenSceneComponentFollowSpline::ApplyScale' has a wrong offset!");
static_assert(offsetof(TweenFloatLatentFactory_BP_CreateLatentTweenSceneComponentFollowSpline, UseConstantSpeed) == 0x00002E, "Member 'TweenFloatLatentFactory_BP_CreateLatentTweenSceneComponentFollowSpline::UseConstantSpeed' has a wrong offset!");
static_assert(offsetof(TweenFloatLatentFactory_BP_CreateLatentTweenSceneComponentFollowSpline, EaseType) == 0x00002F, "Member 'TweenFloatLatentFactory_BP_CreateLatentTweenSceneComponentFollowSpline::EaseType' has a wrong offset!");
static_assert(offsetof(TweenFloatLatentFactory_BP_CreateLatentTweenSceneComponentFollowSpline, DeleteTweenOnHit) == 0x000030, "Member 'TweenFloatLatentFactory_BP_CreateLatentTweenSceneComponentFollowSpline::DeleteTweenOnHit' has a wrong offset!");
static_assert(offsetof(TweenFloatLatentFactory_BP_CreateLatentTweenSceneComponentFollowSpline, DeleteTweenOnOverlap) == 0x000031, "Member 'TweenFloatLatentFactory_BP_CreateLatentTweenSceneComponentFollowSpline::DeleteTweenOnOverlap' has a wrong offset!");
static_assert(offsetof(TweenFloatLatentFactory_BP_CreateLatentTweenSceneComponentFollowSpline, NumLoops) == 0x000034, "Member 'TweenFloatLatentFactory_BP_CreateLatentTweenSceneComponentFollowSpline::NumLoops' has a wrong offset!");
static_assert(offsetof(TweenFloatLatentFactory_BP_CreateLatentTweenSceneComponentFollowSpline, LoopType) == 0x000038, "Member 'TweenFloatLatentFactory_BP_CreateLatentTweenSceneComponentFollowSpline::LoopType' has a wrong offset!");
static_assert(offsetof(TweenFloatLatentFactory_BP_CreateLatentTweenSceneComponentFollowSpline, Delay) == 0x00003C, "Member 'TweenFloatLatentFactory_BP_CreateLatentTweenSceneComponentFollowSpline::Delay' has a wrong offset!");
static_assert(offsetof(TweenFloatLatentFactory_BP_CreateLatentTweenSceneComponentFollowSpline, TimeScale) == 0x000040, "Member 'TweenFloatLatentFactory_BP_CreateLatentTweenSceneComponentFollowSpline::TimeScale' has a wrong offset!");
static_assert(offsetof(TweenFloatLatentFactory_BP_CreateLatentTweenSceneComponentFollowSpline, TweenWhileGameIsPaused) == 0x000044, "Member 'TweenFloatLatentFactory_BP_CreateLatentTweenSceneComponentFollowSpline::TweenWhileGameIsPaused' has a wrong offset!");
static_assert(offsetof(TweenFloatLatentFactory_BP_CreateLatentTweenSceneComponentFollowSpline, ReturnValue) == 0x000048, "Member 'TweenFloatLatentFactory_BP_CreateLatentTweenSceneComponentFollowSpline::ReturnValue' has a wrong offset!");

// Function TweenMaker.TweenFloatLatentFactory.BP_CreateLatentTweenWidgetAngleTo
// 0x0048 (0x0048 - 0x0000)
struct TweenFloatLatentFactory_BP_CreateLatentTweenWidgetAngleTo final
{
public:
	class UTweenManagerComponent*                 TweenManager;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UWidget*                                TweenTarget;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, InstancedReference, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UTweenContainer*                        OutTweenContainer;                                 // 0x0010(0x0008)(Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UTweenFloat*                            OutTween;                                          // 0x0018(0x0008)(Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         To;                                                // 0x0020(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Duration;                                          // 0x0024(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETweenEaseType                                EaseType;                                          // 0x0028(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_29[0x3];                                       // 0x0029(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         NumLoops;                                          // 0x002C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETweenLoopType                                LoopType;                                          // 0x0030(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_31[0x3];                                       // 0x0031(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Delay;                                             // 0x0034(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TimeScale;                                         // 0x0038(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          TweenWhileGameIsPaused;                            // 0x003C(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_3D[0x3];                                       // 0x003D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UTweenFloatLatentFactory*               ReturnValue;                                       // 0x0040(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TweenFloatLatentFactory_BP_CreateLatentTweenWidgetAngleTo) == 0x000008, "Wrong alignment on TweenFloatLatentFactory_BP_CreateLatentTweenWidgetAngleTo");
static_assert(sizeof(TweenFloatLatentFactory_BP_CreateLatentTweenWidgetAngleTo) == 0x000048, "Wrong size on TweenFloatLatentFactory_BP_CreateLatentTweenWidgetAngleTo");
static_assert(offsetof(TweenFloatLatentFactory_BP_CreateLatentTweenWidgetAngleTo, TweenManager) == 0x000000, "Member 'TweenFloatLatentFactory_BP_CreateLatentTweenWidgetAngleTo::TweenManager' has a wrong offset!");
static_assert(offsetof(TweenFloatLatentFactory_BP_CreateLatentTweenWidgetAngleTo, TweenTarget) == 0x000008, "Member 'TweenFloatLatentFactory_BP_CreateLatentTweenWidgetAngleTo::TweenTarget' has a wrong offset!");
static_assert(offsetof(TweenFloatLatentFactory_BP_CreateLatentTweenWidgetAngleTo, OutTweenContainer) == 0x000010, "Member 'TweenFloatLatentFactory_BP_CreateLatentTweenWidgetAngleTo::OutTweenContainer' has a wrong offset!");
static_assert(offsetof(TweenFloatLatentFactory_BP_CreateLatentTweenWidgetAngleTo, OutTween) == 0x000018, "Member 'TweenFloatLatentFactory_BP_CreateLatentTweenWidgetAngleTo::OutTween' has a wrong offset!");
static_assert(offsetof(TweenFloatLatentFactory_BP_CreateLatentTweenWidgetAngleTo, To) == 0x000020, "Member 'TweenFloatLatentFactory_BP_CreateLatentTweenWidgetAngleTo::To' has a wrong offset!");
static_assert(offsetof(TweenFloatLatentFactory_BP_CreateLatentTweenWidgetAngleTo, Duration) == 0x000024, "Member 'TweenFloatLatentFactory_BP_CreateLatentTweenWidgetAngleTo::Duration' has a wrong offset!");
static_assert(offsetof(TweenFloatLatentFactory_BP_CreateLatentTweenWidgetAngleTo, EaseType) == 0x000028, "Member 'TweenFloatLatentFactory_BP_CreateLatentTweenWidgetAngleTo::EaseType' has a wrong offset!");
static_assert(offsetof(TweenFloatLatentFactory_BP_CreateLatentTweenWidgetAngleTo, NumLoops) == 0x00002C, "Member 'TweenFloatLatentFactory_BP_CreateLatentTweenWidgetAngleTo::NumLoops' has a wrong offset!");
static_assert(offsetof(TweenFloatLatentFactory_BP_CreateLatentTweenWidgetAngleTo, LoopType) == 0x000030, "Member 'TweenFloatLatentFactory_BP_CreateLatentTweenWidgetAngleTo::LoopType' has a wrong offset!");
static_assert(offsetof(TweenFloatLatentFactory_BP_CreateLatentTweenWidgetAngleTo, Delay) == 0x000034, "Member 'TweenFloatLatentFactory_BP_CreateLatentTweenWidgetAngleTo::Delay' has a wrong offset!");
static_assert(offsetof(TweenFloatLatentFactory_BP_CreateLatentTweenWidgetAngleTo, TimeScale) == 0x000038, "Member 'TweenFloatLatentFactory_BP_CreateLatentTweenWidgetAngleTo::TimeScale' has a wrong offset!");
static_assert(offsetof(TweenFloatLatentFactory_BP_CreateLatentTweenWidgetAngleTo, TweenWhileGameIsPaused) == 0x00003C, "Member 'TweenFloatLatentFactory_BP_CreateLatentTweenWidgetAngleTo::TweenWhileGameIsPaused' has a wrong offset!");
static_assert(offsetof(TweenFloatLatentFactory_BP_CreateLatentTweenWidgetAngleTo, ReturnValue) == 0x000040, "Member 'TweenFloatLatentFactory_BP_CreateLatentTweenWidgetAngleTo::ReturnValue' has a wrong offset!");

// Function TweenMaker.TweenFloatLatentFactory.BP_CreateLatentTweenWidgetOpacityTo
// 0x0048 (0x0048 - 0x0000)
struct TweenFloatLatentFactory_BP_CreateLatentTweenWidgetOpacityTo final
{
public:
	class UTweenManagerComponent*                 TweenManager;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UWidget*                                TweenTarget;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, InstancedReference, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UTweenContainer*                        OutTweenContainer;                                 // 0x0010(0x0008)(Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UTweenFloat*                            OutTween;                                          // 0x0018(0x0008)(Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         To;                                                // 0x0020(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Duration;                                          // 0x0024(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETweenEaseType                                EaseType;                                          // 0x0028(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_29[0x3];                                       // 0x0029(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         NumLoops;                                          // 0x002C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETweenLoopType                                LoopType;                                          // 0x0030(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_31[0x3];                                       // 0x0031(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Delay;                                             // 0x0034(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TimeScale;                                         // 0x0038(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          TweenWhileGameIsPaused;                            // 0x003C(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_3D[0x3];                                       // 0x003D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UTweenFloatLatentFactory*               ReturnValue;                                       // 0x0040(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TweenFloatLatentFactory_BP_CreateLatentTweenWidgetOpacityTo) == 0x000008, "Wrong alignment on TweenFloatLatentFactory_BP_CreateLatentTweenWidgetOpacityTo");
static_assert(sizeof(TweenFloatLatentFactory_BP_CreateLatentTweenWidgetOpacityTo) == 0x000048, "Wrong size on TweenFloatLatentFactory_BP_CreateLatentTweenWidgetOpacityTo");
static_assert(offsetof(TweenFloatLatentFactory_BP_CreateLatentTweenWidgetOpacityTo, TweenManager) == 0x000000, "Member 'TweenFloatLatentFactory_BP_CreateLatentTweenWidgetOpacityTo::TweenManager' has a wrong offset!");
static_assert(offsetof(TweenFloatLatentFactory_BP_CreateLatentTweenWidgetOpacityTo, TweenTarget) == 0x000008, "Member 'TweenFloatLatentFactory_BP_CreateLatentTweenWidgetOpacityTo::TweenTarget' has a wrong offset!");
static_assert(offsetof(TweenFloatLatentFactory_BP_CreateLatentTweenWidgetOpacityTo, OutTweenContainer) == 0x000010, "Member 'TweenFloatLatentFactory_BP_CreateLatentTweenWidgetOpacityTo::OutTweenContainer' has a wrong offset!");
static_assert(offsetof(TweenFloatLatentFactory_BP_CreateLatentTweenWidgetOpacityTo, OutTween) == 0x000018, "Member 'TweenFloatLatentFactory_BP_CreateLatentTweenWidgetOpacityTo::OutTween' has a wrong offset!");
static_assert(offsetof(TweenFloatLatentFactory_BP_CreateLatentTweenWidgetOpacityTo, To) == 0x000020, "Member 'TweenFloatLatentFactory_BP_CreateLatentTweenWidgetOpacityTo::To' has a wrong offset!");
static_assert(offsetof(TweenFloatLatentFactory_BP_CreateLatentTweenWidgetOpacityTo, Duration) == 0x000024, "Member 'TweenFloatLatentFactory_BP_CreateLatentTweenWidgetOpacityTo::Duration' has a wrong offset!");
static_assert(offsetof(TweenFloatLatentFactory_BP_CreateLatentTweenWidgetOpacityTo, EaseType) == 0x000028, "Member 'TweenFloatLatentFactory_BP_CreateLatentTweenWidgetOpacityTo::EaseType' has a wrong offset!");
static_assert(offsetof(TweenFloatLatentFactory_BP_CreateLatentTweenWidgetOpacityTo, NumLoops) == 0x00002C, "Member 'TweenFloatLatentFactory_BP_CreateLatentTweenWidgetOpacityTo::NumLoops' has a wrong offset!");
static_assert(offsetof(TweenFloatLatentFactory_BP_CreateLatentTweenWidgetOpacityTo, LoopType) == 0x000030, "Member 'TweenFloatLatentFactory_BP_CreateLatentTweenWidgetOpacityTo::LoopType' has a wrong offset!");
static_assert(offsetof(TweenFloatLatentFactory_BP_CreateLatentTweenWidgetOpacityTo, Delay) == 0x000034, "Member 'TweenFloatLatentFactory_BP_CreateLatentTweenWidgetOpacityTo::Delay' has a wrong offset!");
static_assert(offsetof(TweenFloatLatentFactory_BP_CreateLatentTweenWidgetOpacityTo, TimeScale) == 0x000038, "Member 'TweenFloatLatentFactory_BP_CreateLatentTweenWidgetOpacityTo::TimeScale' has a wrong offset!");
static_assert(offsetof(TweenFloatLatentFactory_BP_CreateLatentTweenWidgetOpacityTo, TweenWhileGameIsPaused) == 0x00003C, "Member 'TweenFloatLatentFactory_BP_CreateLatentTweenWidgetOpacityTo::TweenWhileGameIsPaused' has a wrong offset!");
static_assert(offsetof(TweenFloatLatentFactory_BP_CreateLatentTweenWidgetOpacityTo, ReturnValue) == 0x000040, "Member 'TweenFloatLatentFactory_BP_CreateLatentTweenWidgetOpacityTo::ReturnValue' has a wrong offset!");

// Function TweenMaker.TweenFloatLatentFactory.BP_JoinLatentTweenActorFollowSpline
// 0x0040 (0x0040 - 0x0000)
struct TweenFloatLatentFactory_BP_JoinLatentTweenActorFollowSpline final
{
public:
	class UTweenContainer*                        TweenContainer;                                    // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UTweenFloat*                            OutTween;                                          // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 TweenTarget;                                       // 0x0010(0x0008)(Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USplineComponent*                       Spline;                                            // 0x0018(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Duration;                                          // 0x0020(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ApplyRotation;                                     // 0x0024(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ApplyScale;                                        // 0x0025(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          UseConstantSpeed;                                  // 0x0026(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETweenEaseType                                EaseType;                                          // 0x0027(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          DeleteTweenOnHit;                                  // 0x0028(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          DeleteTweenOnOverlap;                              // 0x0029(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2A[0x2];                                       // 0x002A(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Delay;                                             // 0x002C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TimeScale;                                         // 0x0030(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          TweenWhileGameIsPaused;                            // 0x0034(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_35[0x3];                                       // 0x0035(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UTweenFloatLatentFactory*               ReturnValue;                                       // 0x0038(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TweenFloatLatentFactory_BP_JoinLatentTweenActorFollowSpline) == 0x000008, "Wrong alignment on TweenFloatLatentFactory_BP_JoinLatentTweenActorFollowSpline");
static_assert(sizeof(TweenFloatLatentFactory_BP_JoinLatentTweenActorFollowSpline) == 0x000040, "Wrong size on TweenFloatLatentFactory_BP_JoinLatentTweenActorFollowSpline");
static_assert(offsetof(TweenFloatLatentFactory_BP_JoinLatentTweenActorFollowSpline, TweenContainer) == 0x000000, "Member 'TweenFloatLatentFactory_BP_JoinLatentTweenActorFollowSpline::TweenContainer' has a wrong offset!");
static_assert(offsetof(TweenFloatLatentFactory_BP_JoinLatentTweenActorFollowSpline, OutTween) == 0x000008, "Member 'TweenFloatLatentFactory_BP_JoinLatentTweenActorFollowSpline::OutTween' has a wrong offset!");
static_assert(offsetof(TweenFloatLatentFactory_BP_JoinLatentTweenActorFollowSpline, TweenTarget) == 0x000010, "Member 'TweenFloatLatentFactory_BP_JoinLatentTweenActorFollowSpline::TweenTarget' has a wrong offset!");
static_assert(offsetof(TweenFloatLatentFactory_BP_JoinLatentTweenActorFollowSpline, Spline) == 0x000018, "Member 'TweenFloatLatentFactory_BP_JoinLatentTweenActorFollowSpline::Spline' has a wrong offset!");
static_assert(offsetof(TweenFloatLatentFactory_BP_JoinLatentTweenActorFollowSpline, Duration) == 0x000020, "Member 'TweenFloatLatentFactory_BP_JoinLatentTweenActorFollowSpline::Duration' has a wrong offset!");
static_assert(offsetof(TweenFloatLatentFactory_BP_JoinLatentTweenActorFollowSpline, ApplyRotation) == 0x000024, "Member 'TweenFloatLatentFactory_BP_JoinLatentTweenActorFollowSpline::ApplyRotation' has a wrong offset!");
static_assert(offsetof(TweenFloatLatentFactory_BP_JoinLatentTweenActorFollowSpline, ApplyScale) == 0x000025, "Member 'TweenFloatLatentFactory_BP_JoinLatentTweenActorFollowSpline::ApplyScale' has a wrong offset!");
static_assert(offsetof(TweenFloatLatentFactory_BP_JoinLatentTweenActorFollowSpline, UseConstantSpeed) == 0x000026, "Member 'TweenFloatLatentFactory_BP_JoinLatentTweenActorFollowSpline::UseConstantSpeed' has a wrong offset!");
static_assert(offsetof(TweenFloatLatentFactory_BP_JoinLatentTweenActorFollowSpline, EaseType) == 0x000027, "Member 'TweenFloatLatentFactory_BP_JoinLatentTweenActorFollowSpline::EaseType' has a wrong offset!");
static_assert(offsetof(TweenFloatLatentFactory_BP_JoinLatentTweenActorFollowSpline, DeleteTweenOnHit) == 0x000028, "Member 'TweenFloatLatentFactory_BP_JoinLatentTweenActorFollowSpline::DeleteTweenOnHit' has a wrong offset!");
static_assert(offsetof(TweenFloatLatentFactory_BP_JoinLatentTweenActorFollowSpline, DeleteTweenOnOverlap) == 0x000029, "Member 'TweenFloatLatentFactory_BP_JoinLatentTweenActorFollowSpline::DeleteTweenOnOverlap' has a wrong offset!");
static_assert(offsetof(TweenFloatLatentFactory_BP_JoinLatentTweenActorFollowSpline, Delay) == 0x00002C, "Member 'TweenFloatLatentFactory_BP_JoinLatentTweenActorFollowSpline::Delay' has a wrong offset!");
static_assert(offsetof(TweenFloatLatentFactory_BP_JoinLatentTweenActorFollowSpline, TimeScale) == 0x000030, "Member 'TweenFloatLatentFactory_BP_JoinLatentTweenActorFollowSpline::TimeScale' has a wrong offset!");
static_assert(offsetof(TweenFloatLatentFactory_BP_JoinLatentTweenActorFollowSpline, TweenWhileGameIsPaused) == 0x000034, "Member 'TweenFloatLatentFactory_BP_JoinLatentTweenActorFollowSpline::TweenWhileGameIsPaused' has a wrong offset!");
static_assert(offsetof(TweenFloatLatentFactory_BP_JoinLatentTweenActorFollowSpline, ReturnValue) == 0x000038, "Member 'TweenFloatLatentFactory_BP_JoinLatentTweenActorFollowSpline::ReturnValue' has a wrong offset!");

// Function TweenMaker.TweenFloatLatentFactory.BP_JoinLatentTweenCustomFloat
// 0x0040 (0x0040 - 0x0000)
struct TweenFloatLatentFactory_BP_JoinLatentTweenCustomFloat final
{
public:
	class UTweenContainer*                        TweenContainer;                                    // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UTweenFloat*                            OutTween;                                          // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UObject*                                TweenTarget;                                       // 0x0010(0x0008)(Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         From;                                              // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         To;                                                // 0x001C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Duration;                                          // 0x0020(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETweenEaseType                                EaseType;                                          // 0x0024(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_25[0x3];                                       // 0x0025(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Delay;                                             // 0x0028(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TimeScale;                                         // 0x002C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          TweenWhileGameIsPaused;                            // 0x0030(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_31[0x7];                                       // 0x0031(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UTweenFloatLatentFactory*               ReturnValue;                                       // 0x0038(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TweenFloatLatentFactory_BP_JoinLatentTweenCustomFloat) == 0x000008, "Wrong alignment on TweenFloatLatentFactory_BP_JoinLatentTweenCustomFloat");
static_assert(sizeof(TweenFloatLatentFactory_BP_JoinLatentTweenCustomFloat) == 0x000040, "Wrong size on TweenFloatLatentFactory_BP_JoinLatentTweenCustomFloat");
static_assert(offsetof(TweenFloatLatentFactory_BP_JoinLatentTweenCustomFloat, TweenContainer) == 0x000000, "Member 'TweenFloatLatentFactory_BP_JoinLatentTweenCustomFloat::TweenContainer' has a wrong offset!");
static_assert(offsetof(TweenFloatLatentFactory_BP_JoinLatentTweenCustomFloat, OutTween) == 0x000008, "Member 'TweenFloatLatentFactory_BP_JoinLatentTweenCustomFloat::OutTween' has a wrong offset!");
static_assert(offsetof(TweenFloatLatentFactory_BP_JoinLatentTweenCustomFloat, TweenTarget) == 0x000010, "Member 'TweenFloatLatentFactory_BP_JoinLatentTweenCustomFloat::TweenTarget' has a wrong offset!");
static_assert(offsetof(TweenFloatLatentFactory_BP_JoinLatentTweenCustomFloat, From) == 0x000018, "Member 'TweenFloatLatentFactory_BP_JoinLatentTweenCustomFloat::From' has a wrong offset!");
static_assert(offsetof(TweenFloatLatentFactory_BP_JoinLatentTweenCustomFloat, To) == 0x00001C, "Member 'TweenFloatLatentFactory_BP_JoinLatentTweenCustomFloat::To' has a wrong offset!");
static_assert(offsetof(TweenFloatLatentFactory_BP_JoinLatentTweenCustomFloat, Duration) == 0x000020, "Member 'TweenFloatLatentFactory_BP_JoinLatentTweenCustomFloat::Duration' has a wrong offset!");
static_assert(offsetof(TweenFloatLatentFactory_BP_JoinLatentTweenCustomFloat, EaseType) == 0x000024, "Member 'TweenFloatLatentFactory_BP_JoinLatentTweenCustomFloat::EaseType' has a wrong offset!");
static_assert(offsetof(TweenFloatLatentFactory_BP_JoinLatentTweenCustomFloat, Delay) == 0x000028, "Member 'TweenFloatLatentFactory_BP_JoinLatentTweenCustomFloat::Delay' has a wrong offset!");
static_assert(offsetof(TweenFloatLatentFactory_BP_JoinLatentTweenCustomFloat, TimeScale) == 0x00002C, "Member 'TweenFloatLatentFactory_BP_JoinLatentTweenCustomFloat::TimeScale' has a wrong offset!");
static_assert(offsetof(TweenFloatLatentFactory_BP_JoinLatentTweenCustomFloat, TweenWhileGameIsPaused) == 0x000030, "Member 'TweenFloatLatentFactory_BP_JoinLatentTweenCustomFloat::TweenWhileGameIsPaused' has a wrong offset!");
static_assert(offsetof(TweenFloatLatentFactory_BP_JoinLatentTweenCustomFloat, ReturnValue) == 0x000038, "Member 'TweenFloatLatentFactory_BP_JoinLatentTweenCustomFloat::ReturnValue' has a wrong offset!");

// Function TweenMaker.TweenFloatLatentFactory.BP_JoinLatentTweenMaterialFloatFromTo
// 0x0048 (0x0048 - 0x0000)
struct TweenFloatLatentFactory_BP_JoinLatentTweenMaterialFloatFromTo final
{
public:
	class UTweenContainer*                        TweenContainer;                                    // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UTweenFloat*                            OutTween;                                          // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UMaterialInstanceDynamic*               TweenTarget;                                       // 0x0010(0x0008)(Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   ParameterName;                                     // 0x0018(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         From;                                              // 0x0020(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         To;                                                // 0x0024(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Duration;                                          // 0x0028(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETweenEaseType                                EaseType;                                          // 0x002C(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2D[0x3];                                       // 0x002D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Delay;                                             // 0x0030(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TimeScale;                                         // 0x0034(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          TweenWhileGameIsPaused;                            // 0x0038(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_39[0x7];                                       // 0x0039(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UTweenFloatLatentFactory*               ReturnValue;                                       // 0x0040(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TweenFloatLatentFactory_BP_JoinLatentTweenMaterialFloatFromTo) == 0x000008, "Wrong alignment on TweenFloatLatentFactory_BP_JoinLatentTweenMaterialFloatFromTo");
static_assert(sizeof(TweenFloatLatentFactory_BP_JoinLatentTweenMaterialFloatFromTo) == 0x000048, "Wrong size on TweenFloatLatentFactory_BP_JoinLatentTweenMaterialFloatFromTo");
static_assert(offsetof(TweenFloatLatentFactory_BP_JoinLatentTweenMaterialFloatFromTo, TweenContainer) == 0x000000, "Member 'TweenFloatLatentFactory_BP_JoinLatentTweenMaterialFloatFromTo::TweenContainer' has a wrong offset!");
static_assert(offsetof(TweenFloatLatentFactory_BP_JoinLatentTweenMaterialFloatFromTo, OutTween) == 0x000008, "Member 'TweenFloatLatentFactory_BP_JoinLatentTweenMaterialFloatFromTo::OutTween' has a wrong offset!");
static_assert(offsetof(TweenFloatLatentFactory_BP_JoinLatentTweenMaterialFloatFromTo, TweenTarget) == 0x000010, "Member 'TweenFloatLatentFactory_BP_JoinLatentTweenMaterialFloatFromTo::TweenTarget' has a wrong offset!");
static_assert(offsetof(TweenFloatLatentFactory_BP_JoinLatentTweenMaterialFloatFromTo, ParameterName) == 0x000018, "Member 'TweenFloatLatentFactory_BP_JoinLatentTweenMaterialFloatFromTo::ParameterName' has a wrong offset!");
static_assert(offsetof(TweenFloatLatentFactory_BP_JoinLatentTweenMaterialFloatFromTo, From) == 0x000020, "Member 'TweenFloatLatentFactory_BP_JoinLatentTweenMaterialFloatFromTo::From' has a wrong offset!");
static_assert(offsetof(TweenFloatLatentFactory_BP_JoinLatentTweenMaterialFloatFromTo, To) == 0x000024, "Member 'TweenFloatLatentFactory_BP_JoinLatentTweenMaterialFloatFromTo::To' has a wrong offset!");
static_assert(offsetof(TweenFloatLatentFactory_BP_JoinLatentTweenMaterialFloatFromTo, Duration) == 0x000028, "Member 'TweenFloatLatentFactory_BP_JoinLatentTweenMaterialFloatFromTo::Duration' has a wrong offset!");
static_assert(offsetof(TweenFloatLatentFactory_BP_JoinLatentTweenMaterialFloatFromTo, EaseType) == 0x00002C, "Member 'TweenFloatLatentFactory_BP_JoinLatentTweenMaterialFloatFromTo::EaseType' has a wrong offset!");
static_assert(offsetof(TweenFloatLatentFactory_BP_JoinLatentTweenMaterialFloatFromTo, Delay) == 0x000030, "Member 'TweenFloatLatentFactory_BP_JoinLatentTweenMaterialFloatFromTo::Delay' has a wrong offset!");
static_assert(offsetof(TweenFloatLatentFactory_BP_JoinLatentTweenMaterialFloatFromTo, TimeScale) == 0x000034, "Member 'TweenFloatLatentFactory_BP_JoinLatentTweenMaterialFloatFromTo::TimeScale' has a wrong offset!");
static_assert(offsetof(TweenFloatLatentFactory_BP_JoinLatentTweenMaterialFloatFromTo, TweenWhileGameIsPaused) == 0x000038, "Member 'TweenFloatLatentFactory_BP_JoinLatentTweenMaterialFloatFromTo::TweenWhileGameIsPaused' has a wrong offset!");
static_assert(offsetof(TweenFloatLatentFactory_BP_JoinLatentTweenMaterialFloatFromTo, ReturnValue) == 0x000040, "Member 'TweenFloatLatentFactory_BP_JoinLatentTweenMaterialFloatFromTo::ReturnValue' has a wrong offset!");

// Function TweenMaker.TweenFloatLatentFactory.BP_JoinLatentTweenMaterialFloatTo
// 0x0040 (0x0040 - 0x0000)
struct TweenFloatLatentFactory_BP_JoinLatentTweenMaterialFloatTo final
{
public:
	class UTweenContainer*                        TweenContainer;                                    // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UTweenFloat*                            OutTween;                                          // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UMaterialInstanceDynamic*               TweenTarget;                                       // 0x0010(0x0008)(Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   ParameterName;                                     // 0x0018(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         To;                                                // 0x0020(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Duration;                                          // 0x0024(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETweenEaseType                                EaseType;                                          // 0x0028(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_29[0x3];                                       // 0x0029(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Delay;                                             // 0x002C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TimeScale;                                         // 0x0030(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          TweenWhileGameIsPaused;                            // 0x0034(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_35[0x3];                                       // 0x0035(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UTweenFloatLatentFactory*               ReturnValue;                                       // 0x0038(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TweenFloatLatentFactory_BP_JoinLatentTweenMaterialFloatTo) == 0x000008, "Wrong alignment on TweenFloatLatentFactory_BP_JoinLatentTweenMaterialFloatTo");
static_assert(sizeof(TweenFloatLatentFactory_BP_JoinLatentTweenMaterialFloatTo) == 0x000040, "Wrong size on TweenFloatLatentFactory_BP_JoinLatentTweenMaterialFloatTo");
static_assert(offsetof(TweenFloatLatentFactory_BP_JoinLatentTweenMaterialFloatTo, TweenContainer) == 0x000000, "Member 'TweenFloatLatentFactory_BP_JoinLatentTweenMaterialFloatTo::TweenContainer' has a wrong offset!");
static_assert(offsetof(TweenFloatLatentFactory_BP_JoinLatentTweenMaterialFloatTo, OutTween) == 0x000008, "Member 'TweenFloatLatentFactory_BP_JoinLatentTweenMaterialFloatTo::OutTween' has a wrong offset!");
static_assert(offsetof(TweenFloatLatentFactory_BP_JoinLatentTweenMaterialFloatTo, TweenTarget) == 0x000010, "Member 'TweenFloatLatentFactory_BP_JoinLatentTweenMaterialFloatTo::TweenTarget' has a wrong offset!");
static_assert(offsetof(TweenFloatLatentFactory_BP_JoinLatentTweenMaterialFloatTo, ParameterName) == 0x000018, "Member 'TweenFloatLatentFactory_BP_JoinLatentTweenMaterialFloatTo::ParameterName' has a wrong offset!");
static_assert(offsetof(TweenFloatLatentFactory_BP_JoinLatentTweenMaterialFloatTo, To) == 0x000020, "Member 'TweenFloatLatentFactory_BP_JoinLatentTweenMaterialFloatTo::To' has a wrong offset!");
static_assert(offsetof(TweenFloatLatentFactory_BP_JoinLatentTweenMaterialFloatTo, Duration) == 0x000024, "Member 'TweenFloatLatentFactory_BP_JoinLatentTweenMaterialFloatTo::Duration' has a wrong offset!");
static_assert(offsetof(TweenFloatLatentFactory_BP_JoinLatentTweenMaterialFloatTo, EaseType) == 0x000028, "Member 'TweenFloatLatentFactory_BP_JoinLatentTweenMaterialFloatTo::EaseType' has a wrong offset!");
static_assert(offsetof(TweenFloatLatentFactory_BP_JoinLatentTweenMaterialFloatTo, Delay) == 0x00002C, "Member 'TweenFloatLatentFactory_BP_JoinLatentTweenMaterialFloatTo::Delay' has a wrong offset!");
static_assert(offsetof(TweenFloatLatentFactory_BP_JoinLatentTweenMaterialFloatTo, TimeScale) == 0x000030, "Member 'TweenFloatLatentFactory_BP_JoinLatentTweenMaterialFloatTo::TimeScale' has a wrong offset!");
static_assert(offsetof(TweenFloatLatentFactory_BP_JoinLatentTweenMaterialFloatTo, TweenWhileGameIsPaused) == 0x000034, "Member 'TweenFloatLatentFactory_BP_JoinLatentTweenMaterialFloatTo::TweenWhileGameIsPaused' has a wrong offset!");
static_assert(offsetof(TweenFloatLatentFactory_BP_JoinLatentTweenMaterialFloatTo, ReturnValue) == 0x000038, "Member 'TweenFloatLatentFactory_BP_JoinLatentTweenMaterialFloatTo::ReturnValue' has a wrong offset!");

// Function TweenMaker.TweenFloatLatentFactory.BP_JoinLatentTweenRotateActorAroundPoint
// 0x0058 (0x0058 - 0x0000)
struct TweenFloatLatentFactory_BP_JoinLatentTweenRotateActorAroundPoint final
{
public:
	class UTweenContainer*                        TweenContainer;                                    // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UTweenFloat*                            OutTween;                                          // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 TweenTarget;                                       // 0x0010(0x0008)(Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                PivotPoint;                                        // 0x0018(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         StartingAngle;                                     // 0x0024(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         EndingAngle;                                       // 0x0028(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Radius;                                            // 0x002C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                Axis;                                              // 0x0030(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Duration;                                          // 0x003C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETweenEaseType                                EaseType;                                          // 0x0040(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          DeleteTweenOnHit;                                  // 0x0041(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          DeleteTweenOnOverlap;                              // 0x0042(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_43[0x1];                                       // 0x0043(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Delay;                                             // 0x0044(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TimeScale;                                         // 0x0048(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          TweenWhileGameIsPaused;                            // 0x004C(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4D[0x3];                                       // 0x004D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UTweenFloatLatentFactory*               ReturnValue;                                       // 0x0050(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TweenFloatLatentFactory_BP_JoinLatentTweenRotateActorAroundPoint) == 0x000008, "Wrong alignment on TweenFloatLatentFactory_BP_JoinLatentTweenRotateActorAroundPoint");
static_assert(sizeof(TweenFloatLatentFactory_BP_JoinLatentTweenRotateActorAroundPoint) == 0x000058, "Wrong size on TweenFloatLatentFactory_BP_JoinLatentTweenRotateActorAroundPoint");
static_assert(offsetof(TweenFloatLatentFactory_BP_JoinLatentTweenRotateActorAroundPoint, TweenContainer) == 0x000000, "Member 'TweenFloatLatentFactory_BP_JoinLatentTweenRotateActorAroundPoint::TweenContainer' has a wrong offset!");
static_assert(offsetof(TweenFloatLatentFactory_BP_JoinLatentTweenRotateActorAroundPoint, OutTween) == 0x000008, "Member 'TweenFloatLatentFactory_BP_JoinLatentTweenRotateActorAroundPoint::OutTween' has a wrong offset!");
static_assert(offsetof(TweenFloatLatentFactory_BP_JoinLatentTweenRotateActorAroundPoint, TweenTarget) == 0x000010, "Member 'TweenFloatLatentFactory_BP_JoinLatentTweenRotateActorAroundPoint::TweenTarget' has a wrong offset!");
static_assert(offsetof(TweenFloatLatentFactory_BP_JoinLatentTweenRotateActorAroundPoint, PivotPoint) == 0x000018, "Member 'TweenFloatLatentFactory_BP_JoinLatentTweenRotateActorAroundPoint::PivotPoint' has a wrong offset!");
static_assert(offsetof(TweenFloatLatentFactory_BP_JoinLatentTweenRotateActorAroundPoint, StartingAngle) == 0x000024, "Member 'TweenFloatLatentFactory_BP_JoinLatentTweenRotateActorAroundPoint::StartingAngle' has a wrong offset!");
static_assert(offsetof(TweenFloatLatentFactory_BP_JoinLatentTweenRotateActorAroundPoint, EndingAngle) == 0x000028, "Member 'TweenFloatLatentFactory_BP_JoinLatentTweenRotateActorAroundPoint::EndingAngle' has a wrong offset!");
static_assert(offsetof(TweenFloatLatentFactory_BP_JoinLatentTweenRotateActorAroundPoint, Radius) == 0x00002C, "Member 'TweenFloatLatentFactory_BP_JoinLatentTweenRotateActorAroundPoint::Radius' has a wrong offset!");
static_assert(offsetof(TweenFloatLatentFactory_BP_JoinLatentTweenRotateActorAroundPoint, Axis) == 0x000030, "Member 'TweenFloatLatentFactory_BP_JoinLatentTweenRotateActorAroundPoint::Axis' has a wrong offset!");
static_assert(offsetof(TweenFloatLatentFactory_BP_JoinLatentTweenRotateActorAroundPoint, Duration) == 0x00003C, "Member 'TweenFloatLatentFactory_BP_JoinLatentTweenRotateActorAroundPoint::Duration' has a wrong offset!");
static_assert(offsetof(TweenFloatLatentFactory_BP_JoinLatentTweenRotateActorAroundPoint, EaseType) == 0x000040, "Member 'TweenFloatLatentFactory_BP_JoinLatentTweenRotateActorAroundPoint::EaseType' has a wrong offset!");
static_assert(offsetof(TweenFloatLatentFactory_BP_JoinLatentTweenRotateActorAroundPoint, DeleteTweenOnHit) == 0x000041, "Member 'TweenFloatLatentFactory_BP_JoinLatentTweenRotateActorAroundPoint::DeleteTweenOnHit' has a wrong offset!");
static_assert(offsetof(TweenFloatLatentFactory_BP_JoinLatentTweenRotateActorAroundPoint, DeleteTweenOnOverlap) == 0x000042, "Member 'TweenFloatLatentFactory_BP_JoinLatentTweenRotateActorAroundPoint::DeleteTweenOnOverlap' has a wrong offset!");
static_assert(offsetof(TweenFloatLatentFactory_BP_JoinLatentTweenRotateActorAroundPoint, Delay) == 0x000044, "Member 'TweenFloatLatentFactory_BP_JoinLatentTweenRotateActorAroundPoint::Delay' has a wrong offset!");
static_assert(offsetof(TweenFloatLatentFactory_BP_JoinLatentTweenRotateActorAroundPoint, TimeScale) == 0x000048, "Member 'TweenFloatLatentFactory_BP_JoinLatentTweenRotateActorAroundPoint::TimeScale' has a wrong offset!");
static_assert(offsetof(TweenFloatLatentFactory_BP_JoinLatentTweenRotateActorAroundPoint, TweenWhileGameIsPaused) == 0x00004C, "Member 'TweenFloatLatentFactory_BP_JoinLatentTweenRotateActorAroundPoint::TweenWhileGameIsPaused' has a wrong offset!");
static_assert(offsetof(TweenFloatLatentFactory_BP_JoinLatentTweenRotateActorAroundPoint, ReturnValue) == 0x000050, "Member 'TweenFloatLatentFactory_BP_JoinLatentTweenRotateActorAroundPoint::ReturnValue' has a wrong offset!");

// Function TweenMaker.TweenFloatLatentFactory.BP_JoinLatentTweenRotateActorAroundPointByOffset
// 0x0048 (0x0048 - 0x0000)
struct TweenFloatLatentFactory_BP_JoinLatentTweenRotateActorAroundPointByOffset final
{
public:
	class UTweenContainer*                        TweenContainer;                                    // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UTweenFloat*                            OutTween;                                          // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 TweenTarget;                                       // 0x0010(0x0008)(Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                PivotPoint;                                        // 0x0018(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         OffsetAngle;                                       // 0x0024(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETweenReferenceAxis                           ReferenceAxis;                                     // 0x0028(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_29[0x3];                                       // 0x0029(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Duration;                                          // 0x002C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETweenEaseType                                EaseType;                                          // 0x0030(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          DeleteTweenOnHit;                                  // 0x0031(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          DeleteTweenOnOverlap;                              // 0x0032(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_33[0x1];                                       // 0x0033(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Delay;                                             // 0x0034(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TimeScale;                                         // 0x0038(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          TweenWhileGameIsPaused;                            // 0x003C(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_3D[0x3];                                       // 0x003D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UTweenFloatLatentFactory*               ReturnValue;                                       // 0x0040(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TweenFloatLatentFactory_BP_JoinLatentTweenRotateActorAroundPointByOffset) == 0x000008, "Wrong alignment on TweenFloatLatentFactory_BP_JoinLatentTweenRotateActorAroundPointByOffset");
static_assert(sizeof(TweenFloatLatentFactory_BP_JoinLatentTweenRotateActorAroundPointByOffset) == 0x000048, "Wrong size on TweenFloatLatentFactory_BP_JoinLatentTweenRotateActorAroundPointByOffset");
static_assert(offsetof(TweenFloatLatentFactory_BP_JoinLatentTweenRotateActorAroundPointByOffset, TweenContainer) == 0x000000, "Member 'TweenFloatLatentFactory_BP_JoinLatentTweenRotateActorAroundPointByOffset::TweenContainer' has a wrong offset!");
static_assert(offsetof(TweenFloatLatentFactory_BP_JoinLatentTweenRotateActorAroundPointByOffset, OutTween) == 0x000008, "Member 'TweenFloatLatentFactory_BP_JoinLatentTweenRotateActorAroundPointByOffset::OutTween' has a wrong offset!");
static_assert(offsetof(TweenFloatLatentFactory_BP_JoinLatentTweenRotateActorAroundPointByOffset, TweenTarget) == 0x000010, "Member 'TweenFloatLatentFactory_BP_JoinLatentTweenRotateActorAroundPointByOffset::TweenTarget' has a wrong offset!");
static_assert(offsetof(TweenFloatLatentFactory_BP_JoinLatentTweenRotateActorAroundPointByOffset, PivotPoint) == 0x000018, "Member 'TweenFloatLatentFactory_BP_JoinLatentTweenRotateActorAroundPointByOffset::PivotPoint' has a wrong offset!");
static_assert(offsetof(TweenFloatLatentFactory_BP_JoinLatentTweenRotateActorAroundPointByOffset, OffsetAngle) == 0x000024, "Member 'TweenFloatLatentFactory_BP_JoinLatentTweenRotateActorAroundPointByOffset::OffsetAngle' has a wrong offset!");
static_assert(offsetof(TweenFloatLatentFactory_BP_JoinLatentTweenRotateActorAroundPointByOffset, ReferenceAxis) == 0x000028, "Member 'TweenFloatLatentFactory_BP_JoinLatentTweenRotateActorAroundPointByOffset::ReferenceAxis' has a wrong offset!");
static_assert(offsetof(TweenFloatLatentFactory_BP_JoinLatentTweenRotateActorAroundPointByOffset, Duration) == 0x00002C, "Member 'TweenFloatLatentFactory_BP_JoinLatentTweenRotateActorAroundPointByOffset::Duration' has a wrong offset!");
static_assert(offsetof(TweenFloatLatentFactory_BP_JoinLatentTweenRotateActorAroundPointByOffset, EaseType) == 0x000030, "Member 'TweenFloatLatentFactory_BP_JoinLatentTweenRotateActorAroundPointByOffset::EaseType' has a wrong offset!");
static_assert(offsetof(TweenFloatLatentFactory_BP_JoinLatentTweenRotateActorAroundPointByOffset, DeleteTweenOnHit) == 0x000031, "Member 'TweenFloatLatentFactory_BP_JoinLatentTweenRotateActorAroundPointByOffset::DeleteTweenOnHit' has a wrong offset!");
static_assert(offsetof(TweenFloatLatentFactory_BP_JoinLatentTweenRotateActorAroundPointByOffset, DeleteTweenOnOverlap) == 0x000032, "Member 'TweenFloatLatentFactory_BP_JoinLatentTweenRotateActorAroundPointByOffset::DeleteTweenOnOverlap' has a wrong offset!");
static_assert(offsetof(TweenFloatLatentFactory_BP_JoinLatentTweenRotateActorAroundPointByOffset, Delay) == 0x000034, "Member 'TweenFloatLatentFactory_BP_JoinLatentTweenRotateActorAroundPointByOffset::Delay' has a wrong offset!");
static_assert(offsetof(TweenFloatLatentFactory_BP_JoinLatentTweenRotateActorAroundPointByOffset, TimeScale) == 0x000038, "Member 'TweenFloatLatentFactory_BP_JoinLatentTweenRotateActorAroundPointByOffset::TimeScale' has a wrong offset!");
static_assert(offsetof(TweenFloatLatentFactory_BP_JoinLatentTweenRotateActorAroundPointByOffset, TweenWhileGameIsPaused) == 0x00003C, "Member 'TweenFloatLatentFactory_BP_JoinLatentTweenRotateActorAroundPointByOffset::TweenWhileGameIsPaused' has a wrong offset!");
static_assert(offsetof(TweenFloatLatentFactory_BP_JoinLatentTweenRotateActorAroundPointByOffset, ReturnValue) == 0x000040, "Member 'TweenFloatLatentFactory_BP_JoinLatentTweenRotateActorAroundPointByOffset::ReturnValue' has a wrong offset!");

// Function TweenMaker.TweenFloatLatentFactory.BP_JoinLatentTweenRotateSceneComponentAroundPoint
// 0x0058 (0x0058 - 0x0000)
struct TweenFloatLatentFactory_BP_JoinLatentTweenRotateSceneComponentAroundPoint final
{
public:
	class UTweenContainer*                        TweenContainer;                                    // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UTweenFloat*                            OutTween;                                          // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USceneComponent*                        TweenTarget;                                       // 0x0010(0x0008)(Parm, OutParm, ZeroConstructor, InstancedReference, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                PivotPoint;                                        // 0x0018(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         StartingAngle;                                     // 0x0024(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         EndingAngle;                                       // 0x0028(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Radius;                                            // 0x002C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                Axis;                                              // 0x0030(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Duration;                                          // 0x003C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETweenEaseType                                EaseType;                                          // 0x0040(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          DeleteTweenOnHit;                                  // 0x0041(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          DeleteTweenOnOverlap;                              // 0x0042(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_43[0x1];                                       // 0x0043(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Delay;                                             // 0x0044(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TimeScale;                                         // 0x0048(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          TweenWhileGameIsPaused;                            // 0x004C(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4D[0x3];                                       // 0x004D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UTweenFloatLatentFactory*               ReturnValue;                                       // 0x0050(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TweenFloatLatentFactory_BP_JoinLatentTweenRotateSceneComponentAroundPoint) == 0x000008, "Wrong alignment on TweenFloatLatentFactory_BP_JoinLatentTweenRotateSceneComponentAroundPoint");
static_assert(sizeof(TweenFloatLatentFactory_BP_JoinLatentTweenRotateSceneComponentAroundPoint) == 0x000058, "Wrong size on TweenFloatLatentFactory_BP_JoinLatentTweenRotateSceneComponentAroundPoint");
static_assert(offsetof(TweenFloatLatentFactory_BP_JoinLatentTweenRotateSceneComponentAroundPoint, TweenContainer) == 0x000000, "Member 'TweenFloatLatentFactory_BP_JoinLatentTweenRotateSceneComponentAroundPoint::TweenContainer' has a wrong offset!");
static_assert(offsetof(TweenFloatLatentFactory_BP_JoinLatentTweenRotateSceneComponentAroundPoint, OutTween) == 0x000008, "Member 'TweenFloatLatentFactory_BP_JoinLatentTweenRotateSceneComponentAroundPoint::OutTween' has a wrong offset!");
static_assert(offsetof(TweenFloatLatentFactory_BP_JoinLatentTweenRotateSceneComponentAroundPoint, TweenTarget) == 0x000010, "Member 'TweenFloatLatentFactory_BP_JoinLatentTweenRotateSceneComponentAroundPoint::TweenTarget' has a wrong offset!");
static_assert(offsetof(TweenFloatLatentFactory_BP_JoinLatentTweenRotateSceneComponentAroundPoint, PivotPoint) == 0x000018, "Member 'TweenFloatLatentFactory_BP_JoinLatentTweenRotateSceneComponentAroundPoint::PivotPoint' has a wrong offset!");
static_assert(offsetof(TweenFloatLatentFactory_BP_JoinLatentTweenRotateSceneComponentAroundPoint, StartingAngle) == 0x000024, "Member 'TweenFloatLatentFactory_BP_JoinLatentTweenRotateSceneComponentAroundPoint::StartingAngle' has a wrong offset!");
static_assert(offsetof(TweenFloatLatentFactory_BP_JoinLatentTweenRotateSceneComponentAroundPoint, EndingAngle) == 0x000028, "Member 'TweenFloatLatentFactory_BP_JoinLatentTweenRotateSceneComponentAroundPoint::EndingAngle' has a wrong offset!");
static_assert(offsetof(TweenFloatLatentFactory_BP_JoinLatentTweenRotateSceneComponentAroundPoint, Radius) == 0x00002C, "Member 'TweenFloatLatentFactory_BP_JoinLatentTweenRotateSceneComponentAroundPoint::Radius' has a wrong offset!");
static_assert(offsetof(TweenFloatLatentFactory_BP_JoinLatentTweenRotateSceneComponentAroundPoint, Axis) == 0x000030, "Member 'TweenFloatLatentFactory_BP_JoinLatentTweenRotateSceneComponentAroundPoint::Axis' has a wrong offset!");
static_assert(offsetof(TweenFloatLatentFactory_BP_JoinLatentTweenRotateSceneComponentAroundPoint, Duration) == 0x00003C, "Member 'TweenFloatLatentFactory_BP_JoinLatentTweenRotateSceneComponentAroundPoint::Duration' has a wrong offset!");
static_assert(offsetof(TweenFloatLatentFactory_BP_JoinLatentTweenRotateSceneComponentAroundPoint, EaseType) == 0x000040, "Member 'TweenFloatLatentFactory_BP_JoinLatentTweenRotateSceneComponentAroundPoint::EaseType' has a wrong offset!");
static_assert(offsetof(TweenFloatLatentFactory_BP_JoinLatentTweenRotateSceneComponentAroundPoint, DeleteTweenOnHit) == 0x000041, "Member 'TweenFloatLatentFactory_BP_JoinLatentTweenRotateSceneComponentAroundPoint::DeleteTweenOnHit' has a wrong offset!");
static_assert(offsetof(TweenFloatLatentFactory_BP_JoinLatentTweenRotateSceneComponentAroundPoint, DeleteTweenOnOverlap) == 0x000042, "Member 'TweenFloatLatentFactory_BP_JoinLatentTweenRotateSceneComponentAroundPoint::DeleteTweenOnOverlap' has a wrong offset!");
static_assert(offsetof(TweenFloatLatentFactory_BP_JoinLatentTweenRotateSceneComponentAroundPoint, Delay) == 0x000044, "Member 'TweenFloatLatentFactory_BP_JoinLatentTweenRotateSceneComponentAroundPoint::Delay' has a wrong offset!");
static_assert(offsetof(TweenFloatLatentFactory_BP_JoinLatentTweenRotateSceneComponentAroundPoint, TimeScale) == 0x000048, "Member 'TweenFloatLatentFactory_BP_JoinLatentTweenRotateSceneComponentAroundPoint::TimeScale' has a wrong offset!");
static_assert(offsetof(TweenFloatLatentFactory_BP_JoinLatentTweenRotateSceneComponentAroundPoint, TweenWhileGameIsPaused) == 0x00004C, "Member 'TweenFloatLatentFactory_BP_JoinLatentTweenRotateSceneComponentAroundPoint::TweenWhileGameIsPaused' has a wrong offset!");
static_assert(offsetof(TweenFloatLatentFactory_BP_JoinLatentTweenRotateSceneComponentAroundPoint, ReturnValue) == 0x000050, "Member 'TweenFloatLatentFactory_BP_JoinLatentTweenRotateSceneComponentAroundPoint::ReturnValue' has a wrong offset!");

// Function TweenMaker.TweenFloatLatentFactory.BP_JoinLatentTweenRotateSceneComponentAroundPointByOffset
// 0x0048 (0x0048 - 0x0000)
struct TweenFloatLatentFactory_BP_JoinLatentTweenRotateSceneComponentAroundPointByOffset final
{
public:
	class UTweenContainer*                        TweenContainer;                                    // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UTweenFloat*                            OutTween;                                          // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USceneComponent*                        TweenTarget;                                       // 0x0010(0x0008)(Parm, OutParm, ZeroConstructor, InstancedReference, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                PivotPoint;                                        // 0x0018(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         OffsetAngle;                                       // 0x0024(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETweenReferenceAxis                           ReferenceAxis;                                     // 0x0028(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_29[0x3];                                       // 0x0029(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Duration;                                          // 0x002C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETweenEaseType                                EaseType;                                          // 0x0030(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          DeleteTweenOnHit;                                  // 0x0031(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          DeleteTweenOnOverlap;                              // 0x0032(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_33[0x1];                                       // 0x0033(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Delay;                                             // 0x0034(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TimeScale;                                         // 0x0038(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          TweenWhileGameIsPaused;                            // 0x003C(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_3D[0x3];                                       // 0x003D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UTweenFloatLatentFactory*               ReturnValue;                                       // 0x0040(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TweenFloatLatentFactory_BP_JoinLatentTweenRotateSceneComponentAroundPointByOffset) == 0x000008, "Wrong alignment on TweenFloatLatentFactory_BP_JoinLatentTweenRotateSceneComponentAroundPointByOffset");
static_assert(sizeof(TweenFloatLatentFactory_BP_JoinLatentTweenRotateSceneComponentAroundPointByOffset) == 0x000048, "Wrong size on TweenFloatLatentFactory_BP_JoinLatentTweenRotateSceneComponentAroundPointByOffset");
static_assert(offsetof(TweenFloatLatentFactory_BP_JoinLatentTweenRotateSceneComponentAroundPointByOffset, TweenContainer) == 0x000000, "Member 'TweenFloatLatentFactory_BP_JoinLatentTweenRotateSceneComponentAroundPointByOffset::TweenContainer' has a wrong offset!");
static_assert(offsetof(TweenFloatLatentFactory_BP_JoinLatentTweenRotateSceneComponentAroundPointByOffset, OutTween) == 0x000008, "Member 'TweenFloatLatentFactory_BP_JoinLatentTweenRotateSceneComponentAroundPointByOffset::OutTween' has a wrong offset!");
static_assert(offsetof(TweenFloatLatentFactory_BP_JoinLatentTweenRotateSceneComponentAroundPointByOffset, TweenTarget) == 0x000010, "Member 'TweenFloatLatentFactory_BP_JoinLatentTweenRotateSceneComponentAroundPointByOffset::TweenTarget' has a wrong offset!");
static_assert(offsetof(TweenFloatLatentFactory_BP_JoinLatentTweenRotateSceneComponentAroundPointByOffset, PivotPoint) == 0x000018, "Member 'TweenFloatLatentFactory_BP_JoinLatentTweenRotateSceneComponentAroundPointByOffset::PivotPoint' has a wrong offset!");
static_assert(offsetof(TweenFloatLatentFactory_BP_JoinLatentTweenRotateSceneComponentAroundPointByOffset, OffsetAngle) == 0x000024, "Member 'TweenFloatLatentFactory_BP_JoinLatentTweenRotateSceneComponentAroundPointByOffset::OffsetAngle' has a wrong offset!");
static_assert(offsetof(TweenFloatLatentFactory_BP_JoinLatentTweenRotateSceneComponentAroundPointByOffset, ReferenceAxis) == 0x000028, "Member 'TweenFloatLatentFactory_BP_JoinLatentTweenRotateSceneComponentAroundPointByOffset::ReferenceAxis' has a wrong offset!");
static_assert(offsetof(TweenFloatLatentFactory_BP_JoinLatentTweenRotateSceneComponentAroundPointByOffset, Duration) == 0x00002C, "Member 'TweenFloatLatentFactory_BP_JoinLatentTweenRotateSceneComponentAroundPointByOffset::Duration' has a wrong offset!");
static_assert(offsetof(TweenFloatLatentFactory_BP_JoinLatentTweenRotateSceneComponentAroundPointByOffset, EaseType) == 0x000030, "Member 'TweenFloatLatentFactory_BP_JoinLatentTweenRotateSceneComponentAroundPointByOffset::EaseType' has a wrong offset!");
static_assert(offsetof(TweenFloatLatentFactory_BP_JoinLatentTweenRotateSceneComponentAroundPointByOffset, DeleteTweenOnHit) == 0x000031, "Member 'TweenFloatLatentFactory_BP_JoinLatentTweenRotateSceneComponentAroundPointByOffset::DeleteTweenOnHit' has a wrong offset!");
static_assert(offsetof(TweenFloatLatentFactory_BP_JoinLatentTweenRotateSceneComponentAroundPointByOffset, DeleteTweenOnOverlap) == 0x000032, "Member 'TweenFloatLatentFactory_BP_JoinLatentTweenRotateSceneComponentAroundPointByOffset::DeleteTweenOnOverlap' has a wrong offset!");
static_assert(offsetof(TweenFloatLatentFactory_BP_JoinLatentTweenRotateSceneComponentAroundPointByOffset, Delay) == 0x000034, "Member 'TweenFloatLatentFactory_BP_JoinLatentTweenRotateSceneComponentAroundPointByOffset::Delay' has a wrong offset!");
static_assert(offsetof(TweenFloatLatentFactory_BP_JoinLatentTweenRotateSceneComponentAroundPointByOffset, TimeScale) == 0x000038, "Member 'TweenFloatLatentFactory_BP_JoinLatentTweenRotateSceneComponentAroundPointByOffset::TimeScale' has a wrong offset!");
static_assert(offsetof(TweenFloatLatentFactory_BP_JoinLatentTweenRotateSceneComponentAroundPointByOffset, TweenWhileGameIsPaused) == 0x00003C, "Member 'TweenFloatLatentFactory_BP_JoinLatentTweenRotateSceneComponentAroundPointByOffset::TweenWhileGameIsPaused' has a wrong offset!");
static_assert(offsetof(TweenFloatLatentFactory_BP_JoinLatentTweenRotateSceneComponentAroundPointByOffset, ReturnValue) == 0x000040, "Member 'TweenFloatLatentFactory_BP_JoinLatentTweenRotateSceneComponentAroundPointByOffset::ReturnValue' has a wrong offset!");

// Function TweenMaker.TweenFloatLatentFactory.BP_JoinLatentTweenSceneComponentFollowSpline
// 0x0040 (0x0040 - 0x0000)
struct TweenFloatLatentFactory_BP_JoinLatentTweenSceneComponentFollowSpline final
{
public:
	class UTweenContainer*                        TweenContainer;                                    // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UTweenFloat*                            OutTween;                                          // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USceneComponent*                        TweenTarget;                                       // 0x0010(0x0008)(Parm, OutParm, ZeroConstructor, InstancedReference, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USplineComponent*                       Spline;                                            // 0x0018(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Duration;                                          // 0x0020(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ApplyRotation;                                     // 0x0024(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ApplyScale;                                        // 0x0025(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          UseConstantSpeed;                                  // 0x0026(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETweenEaseType                                EaseType;                                          // 0x0027(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          DeleteTweenOnHit;                                  // 0x0028(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          DeleteTweenOnOverlap;                              // 0x0029(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2A[0x2];                                       // 0x002A(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Delay;                                             // 0x002C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TimeScale;                                         // 0x0030(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          TweenWhileGameIsPaused;                            // 0x0034(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_35[0x3];                                       // 0x0035(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UTweenFloatLatentFactory*               ReturnValue;                                       // 0x0038(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TweenFloatLatentFactory_BP_JoinLatentTweenSceneComponentFollowSpline) == 0x000008, "Wrong alignment on TweenFloatLatentFactory_BP_JoinLatentTweenSceneComponentFollowSpline");
static_assert(sizeof(TweenFloatLatentFactory_BP_JoinLatentTweenSceneComponentFollowSpline) == 0x000040, "Wrong size on TweenFloatLatentFactory_BP_JoinLatentTweenSceneComponentFollowSpline");
static_assert(offsetof(TweenFloatLatentFactory_BP_JoinLatentTweenSceneComponentFollowSpline, TweenContainer) == 0x000000, "Member 'TweenFloatLatentFactory_BP_JoinLatentTweenSceneComponentFollowSpline::TweenContainer' has a wrong offset!");
static_assert(offsetof(TweenFloatLatentFactory_BP_JoinLatentTweenSceneComponentFollowSpline, OutTween) == 0x000008, "Member 'TweenFloatLatentFactory_BP_JoinLatentTweenSceneComponentFollowSpline::OutTween' has a wrong offset!");
static_assert(offsetof(TweenFloatLatentFactory_BP_JoinLatentTweenSceneComponentFollowSpline, TweenTarget) == 0x000010, "Member 'TweenFloatLatentFactory_BP_JoinLatentTweenSceneComponentFollowSpline::TweenTarget' has a wrong offset!");
static_assert(offsetof(TweenFloatLatentFactory_BP_JoinLatentTweenSceneComponentFollowSpline, Spline) == 0x000018, "Member 'TweenFloatLatentFactory_BP_JoinLatentTweenSceneComponentFollowSpline::Spline' has a wrong offset!");
static_assert(offsetof(TweenFloatLatentFactory_BP_JoinLatentTweenSceneComponentFollowSpline, Duration) == 0x000020, "Member 'TweenFloatLatentFactory_BP_JoinLatentTweenSceneComponentFollowSpline::Duration' has a wrong offset!");
static_assert(offsetof(TweenFloatLatentFactory_BP_JoinLatentTweenSceneComponentFollowSpline, ApplyRotation) == 0x000024, "Member 'TweenFloatLatentFactory_BP_JoinLatentTweenSceneComponentFollowSpline::ApplyRotation' has a wrong offset!");
static_assert(offsetof(TweenFloatLatentFactory_BP_JoinLatentTweenSceneComponentFollowSpline, ApplyScale) == 0x000025, "Member 'TweenFloatLatentFactory_BP_JoinLatentTweenSceneComponentFollowSpline::ApplyScale' has a wrong offset!");
static_assert(offsetof(TweenFloatLatentFactory_BP_JoinLatentTweenSceneComponentFollowSpline, UseConstantSpeed) == 0x000026, "Member 'TweenFloatLatentFactory_BP_JoinLatentTweenSceneComponentFollowSpline::UseConstantSpeed' has a wrong offset!");
static_assert(offsetof(TweenFloatLatentFactory_BP_JoinLatentTweenSceneComponentFollowSpline, EaseType) == 0x000027, "Member 'TweenFloatLatentFactory_BP_JoinLatentTweenSceneComponentFollowSpline::EaseType' has a wrong offset!");
static_assert(offsetof(TweenFloatLatentFactory_BP_JoinLatentTweenSceneComponentFollowSpline, DeleteTweenOnHit) == 0x000028, "Member 'TweenFloatLatentFactory_BP_JoinLatentTweenSceneComponentFollowSpline::DeleteTweenOnHit' has a wrong offset!");
static_assert(offsetof(TweenFloatLatentFactory_BP_JoinLatentTweenSceneComponentFollowSpline, DeleteTweenOnOverlap) == 0x000029, "Member 'TweenFloatLatentFactory_BP_JoinLatentTweenSceneComponentFollowSpline::DeleteTweenOnOverlap' has a wrong offset!");
static_assert(offsetof(TweenFloatLatentFactory_BP_JoinLatentTweenSceneComponentFollowSpline, Delay) == 0x00002C, "Member 'TweenFloatLatentFactory_BP_JoinLatentTweenSceneComponentFollowSpline::Delay' has a wrong offset!");
static_assert(offsetof(TweenFloatLatentFactory_BP_JoinLatentTweenSceneComponentFollowSpline, TimeScale) == 0x000030, "Member 'TweenFloatLatentFactory_BP_JoinLatentTweenSceneComponentFollowSpline::TimeScale' has a wrong offset!");
static_assert(offsetof(TweenFloatLatentFactory_BP_JoinLatentTweenSceneComponentFollowSpline, TweenWhileGameIsPaused) == 0x000034, "Member 'TweenFloatLatentFactory_BP_JoinLatentTweenSceneComponentFollowSpline::TweenWhileGameIsPaused' has a wrong offset!");
static_assert(offsetof(TweenFloatLatentFactory_BP_JoinLatentTweenSceneComponentFollowSpline, ReturnValue) == 0x000038, "Member 'TweenFloatLatentFactory_BP_JoinLatentTweenSceneComponentFollowSpline::ReturnValue' has a wrong offset!");

// Function TweenMaker.TweenFloatLatentFactory.BP_JoinLatentTweenWidgetAngleTo
// 0x0038 (0x0038 - 0x0000)
struct TweenFloatLatentFactory_BP_JoinLatentTweenWidgetAngleTo final
{
public:
	class UTweenContainer*                        TweenContainer;                                    // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UTweenFloat*                            OutTween;                                          // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UWidget*                                TweenTarget;                                       // 0x0010(0x0008)(Parm, OutParm, ZeroConstructor, InstancedReference, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         To;                                                // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Duration;                                          // 0x001C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETweenEaseType                                EaseType;                                          // 0x0020(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_21[0x3];                                       // 0x0021(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Delay;                                             // 0x0024(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TimeScale;                                         // 0x0028(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          TweenWhileGameIsPaused;                            // 0x002C(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2D[0x3];                                       // 0x002D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UTweenFloatLatentFactory*               ReturnValue;                                       // 0x0030(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TweenFloatLatentFactory_BP_JoinLatentTweenWidgetAngleTo) == 0x000008, "Wrong alignment on TweenFloatLatentFactory_BP_JoinLatentTweenWidgetAngleTo");
static_assert(sizeof(TweenFloatLatentFactory_BP_JoinLatentTweenWidgetAngleTo) == 0x000038, "Wrong size on TweenFloatLatentFactory_BP_JoinLatentTweenWidgetAngleTo");
static_assert(offsetof(TweenFloatLatentFactory_BP_JoinLatentTweenWidgetAngleTo, TweenContainer) == 0x000000, "Member 'TweenFloatLatentFactory_BP_JoinLatentTweenWidgetAngleTo::TweenContainer' has a wrong offset!");
static_assert(offsetof(TweenFloatLatentFactory_BP_JoinLatentTweenWidgetAngleTo, OutTween) == 0x000008, "Member 'TweenFloatLatentFactory_BP_JoinLatentTweenWidgetAngleTo::OutTween' has a wrong offset!");
static_assert(offsetof(TweenFloatLatentFactory_BP_JoinLatentTweenWidgetAngleTo, TweenTarget) == 0x000010, "Member 'TweenFloatLatentFactory_BP_JoinLatentTweenWidgetAngleTo::TweenTarget' has a wrong offset!");
static_assert(offsetof(TweenFloatLatentFactory_BP_JoinLatentTweenWidgetAngleTo, To) == 0x000018, "Member 'TweenFloatLatentFactory_BP_JoinLatentTweenWidgetAngleTo::To' has a wrong offset!");
static_assert(offsetof(TweenFloatLatentFactory_BP_JoinLatentTweenWidgetAngleTo, Duration) == 0x00001C, "Member 'TweenFloatLatentFactory_BP_JoinLatentTweenWidgetAngleTo::Duration' has a wrong offset!");
static_assert(offsetof(TweenFloatLatentFactory_BP_JoinLatentTweenWidgetAngleTo, EaseType) == 0x000020, "Member 'TweenFloatLatentFactory_BP_JoinLatentTweenWidgetAngleTo::EaseType' has a wrong offset!");
static_assert(offsetof(TweenFloatLatentFactory_BP_JoinLatentTweenWidgetAngleTo, Delay) == 0x000024, "Member 'TweenFloatLatentFactory_BP_JoinLatentTweenWidgetAngleTo::Delay' has a wrong offset!");
static_assert(offsetof(TweenFloatLatentFactory_BP_JoinLatentTweenWidgetAngleTo, TimeScale) == 0x000028, "Member 'TweenFloatLatentFactory_BP_JoinLatentTweenWidgetAngleTo::TimeScale' has a wrong offset!");
static_assert(offsetof(TweenFloatLatentFactory_BP_JoinLatentTweenWidgetAngleTo, TweenWhileGameIsPaused) == 0x00002C, "Member 'TweenFloatLatentFactory_BP_JoinLatentTweenWidgetAngleTo::TweenWhileGameIsPaused' has a wrong offset!");
static_assert(offsetof(TweenFloatLatentFactory_BP_JoinLatentTweenWidgetAngleTo, ReturnValue) == 0x000030, "Member 'TweenFloatLatentFactory_BP_JoinLatentTweenWidgetAngleTo::ReturnValue' has a wrong offset!");

// Function TweenMaker.TweenFloatLatentFactory.BP_JoinLatentTweenWidgetOpacityTo
// 0x0038 (0x0038 - 0x0000)
struct TweenFloatLatentFactory_BP_JoinLatentTweenWidgetOpacityTo final
{
public:
	class UTweenContainer*                        TweenContainer;                                    // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UTweenFloat*                            OutTween;                                          // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UWidget*                                TweenTarget;                                       // 0x0010(0x0008)(Parm, OutParm, ZeroConstructor, InstancedReference, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         To;                                                // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Duration;                                          // 0x001C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETweenEaseType                                EaseType;                                          // 0x0020(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_21[0x3];                                       // 0x0021(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Delay;                                             // 0x0024(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TimeScale;                                         // 0x0028(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          TweenWhileGameIsPaused;                            // 0x002C(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2D[0x3];                                       // 0x002D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UTweenFloatLatentFactory*               ReturnValue;                                       // 0x0030(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TweenFloatLatentFactory_BP_JoinLatentTweenWidgetOpacityTo) == 0x000008, "Wrong alignment on TweenFloatLatentFactory_BP_JoinLatentTweenWidgetOpacityTo");
static_assert(sizeof(TweenFloatLatentFactory_BP_JoinLatentTweenWidgetOpacityTo) == 0x000038, "Wrong size on TweenFloatLatentFactory_BP_JoinLatentTweenWidgetOpacityTo");
static_assert(offsetof(TweenFloatLatentFactory_BP_JoinLatentTweenWidgetOpacityTo, TweenContainer) == 0x000000, "Member 'TweenFloatLatentFactory_BP_JoinLatentTweenWidgetOpacityTo::TweenContainer' has a wrong offset!");
static_assert(offsetof(TweenFloatLatentFactory_BP_JoinLatentTweenWidgetOpacityTo, OutTween) == 0x000008, "Member 'TweenFloatLatentFactory_BP_JoinLatentTweenWidgetOpacityTo::OutTween' has a wrong offset!");
static_assert(offsetof(TweenFloatLatentFactory_BP_JoinLatentTweenWidgetOpacityTo, TweenTarget) == 0x000010, "Member 'TweenFloatLatentFactory_BP_JoinLatentTweenWidgetOpacityTo::TweenTarget' has a wrong offset!");
static_assert(offsetof(TweenFloatLatentFactory_BP_JoinLatentTweenWidgetOpacityTo, To) == 0x000018, "Member 'TweenFloatLatentFactory_BP_JoinLatentTweenWidgetOpacityTo::To' has a wrong offset!");
static_assert(offsetof(TweenFloatLatentFactory_BP_JoinLatentTweenWidgetOpacityTo, Duration) == 0x00001C, "Member 'TweenFloatLatentFactory_BP_JoinLatentTweenWidgetOpacityTo::Duration' has a wrong offset!");
static_assert(offsetof(TweenFloatLatentFactory_BP_JoinLatentTweenWidgetOpacityTo, EaseType) == 0x000020, "Member 'TweenFloatLatentFactory_BP_JoinLatentTweenWidgetOpacityTo::EaseType' has a wrong offset!");
static_assert(offsetof(TweenFloatLatentFactory_BP_JoinLatentTweenWidgetOpacityTo, Delay) == 0x000024, "Member 'TweenFloatLatentFactory_BP_JoinLatentTweenWidgetOpacityTo::Delay' has a wrong offset!");
static_assert(offsetof(TweenFloatLatentFactory_BP_JoinLatentTweenWidgetOpacityTo, TimeScale) == 0x000028, "Member 'TweenFloatLatentFactory_BP_JoinLatentTweenWidgetOpacityTo::TimeScale' has a wrong offset!");
static_assert(offsetof(TweenFloatLatentFactory_BP_JoinLatentTweenWidgetOpacityTo, TweenWhileGameIsPaused) == 0x00002C, "Member 'TweenFloatLatentFactory_BP_JoinLatentTweenWidgetOpacityTo::TweenWhileGameIsPaused' has a wrong offset!");
static_assert(offsetof(TweenFloatLatentFactory_BP_JoinLatentTweenWidgetOpacityTo, ReturnValue) == 0x000030, "Member 'TweenFloatLatentFactory_BP_JoinLatentTweenWidgetOpacityTo::ReturnValue' has a wrong offset!");

// Function TweenMaker.TweenFloatStandardFactory.BP_AppendTweenActorFollowSpline
// 0x0048 (0x0048 - 0x0000)
struct TweenFloatStandardFactory_BP_AppendTweenActorFollowSpline final
{
public:
	class UTweenContainer*                        TweenContainer;                                    // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 TweenTarget;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USplineComponent*                       Spline;                                            // 0x0010(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Duration;                                          // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ApplyRotation;                                     // 0x001C(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ApplyScale;                                        // 0x001D(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          UseConstantSpeed;                                  // 0x001E(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETweenEaseType                                EaseType;                                          // 0x001F(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          DeleteTweenOnHit;                                  // 0x0020(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          DeleteTweenOnOverlap;                              // 0x0021(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_22[0x2];                                       // 0x0022(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         NumLoops;                                          // 0x0024(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETweenLoopType                                LoopType;                                          // 0x0028(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_29[0x3];                                       // 0x0029(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Delay;                                             // 0x002C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TimeScale;                                         // 0x0030(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          TweenWhileGameIsPaused;                            // 0x0034(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_35[0x3];                                       // 0x0035(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         SequenceIndex;                                     // 0x0038(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_3C[0x4];                                       // 0x003C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UTweenFloat*                            ReturnValue;                                       // 0x0040(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TweenFloatStandardFactory_BP_AppendTweenActorFollowSpline) == 0x000008, "Wrong alignment on TweenFloatStandardFactory_BP_AppendTweenActorFollowSpline");
static_assert(sizeof(TweenFloatStandardFactory_BP_AppendTweenActorFollowSpline) == 0x000048, "Wrong size on TweenFloatStandardFactory_BP_AppendTweenActorFollowSpline");
static_assert(offsetof(TweenFloatStandardFactory_BP_AppendTweenActorFollowSpline, TweenContainer) == 0x000000, "Member 'TweenFloatStandardFactory_BP_AppendTweenActorFollowSpline::TweenContainer' has a wrong offset!");
static_assert(offsetof(TweenFloatStandardFactory_BP_AppendTweenActorFollowSpline, TweenTarget) == 0x000008, "Member 'TweenFloatStandardFactory_BP_AppendTweenActorFollowSpline::TweenTarget' has a wrong offset!");
static_assert(offsetof(TweenFloatStandardFactory_BP_AppendTweenActorFollowSpline, Spline) == 0x000010, "Member 'TweenFloatStandardFactory_BP_AppendTweenActorFollowSpline::Spline' has a wrong offset!");
static_assert(offsetof(TweenFloatStandardFactory_BP_AppendTweenActorFollowSpline, Duration) == 0x000018, "Member 'TweenFloatStandardFactory_BP_AppendTweenActorFollowSpline::Duration' has a wrong offset!");
static_assert(offsetof(TweenFloatStandardFactory_BP_AppendTweenActorFollowSpline, ApplyRotation) == 0x00001C, "Member 'TweenFloatStandardFactory_BP_AppendTweenActorFollowSpline::ApplyRotation' has a wrong offset!");
static_assert(offsetof(TweenFloatStandardFactory_BP_AppendTweenActorFollowSpline, ApplyScale) == 0x00001D, "Member 'TweenFloatStandardFactory_BP_AppendTweenActorFollowSpline::ApplyScale' has a wrong offset!");
static_assert(offsetof(TweenFloatStandardFactory_BP_AppendTweenActorFollowSpline, UseConstantSpeed) == 0x00001E, "Member 'TweenFloatStandardFactory_BP_AppendTweenActorFollowSpline::UseConstantSpeed' has a wrong offset!");
static_assert(offsetof(TweenFloatStandardFactory_BP_AppendTweenActorFollowSpline, EaseType) == 0x00001F, "Member 'TweenFloatStandardFactory_BP_AppendTweenActorFollowSpline::EaseType' has a wrong offset!");
static_assert(offsetof(TweenFloatStandardFactory_BP_AppendTweenActorFollowSpline, DeleteTweenOnHit) == 0x000020, "Member 'TweenFloatStandardFactory_BP_AppendTweenActorFollowSpline::DeleteTweenOnHit' has a wrong offset!");
static_assert(offsetof(TweenFloatStandardFactory_BP_AppendTweenActorFollowSpline, DeleteTweenOnOverlap) == 0x000021, "Member 'TweenFloatStandardFactory_BP_AppendTweenActorFollowSpline::DeleteTweenOnOverlap' has a wrong offset!");
static_assert(offsetof(TweenFloatStandardFactory_BP_AppendTweenActorFollowSpline, NumLoops) == 0x000024, "Member 'TweenFloatStandardFactory_BP_AppendTweenActorFollowSpline::NumLoops' has a wrong offset!");
static_assert(offsetof(TweenFloatStandardFactory_BP_AppendTweenActorFollowSpline, LoopType) == 0x000028, "Member 'TweenFloatStandardFactory_BP_AppendTweenActorFollowSpline::LoopType' has a wrong offset!");
static_assert(offsetof(TweenFloatStandardFactory_BP_AppendTweenActorFollowSpline, Delay) == 0x00002C, "Member 'TweenFloatStandardFactory_BP_AppendTweenActorFollowSpline::Delay' has a wrong offset!");
static_assert(offsetof(TweenFloatStandardFactory_BP_AppendTweenActorFollowSpline, TimeScale) == 0x000030, "Member 'TweenFloatStandardFactory_BP_AppendTweenActorFollowSpline::TimeScale' has a wrong offset!");
static_assert(offsetof(TweenFloatStandardFactory_BP_AppendTweenActorFollowSpline, TweenWhileGameIsPaused) == 0x000034, "Member 'TweenFloatStandardFactory_BP_AppendTweenActorFollowSpline::TweenWhileGameIsPaused' has a wrong offset!");
static_assert(offsetof(TweenFloatStandardFactory_BP_AppendTweenActorFollowSpline, SequenceIndex) == 0x000038, "Member 'TweenFloatStandardFactory_BP_AppendTweenActorFollowSpline::SequenceIndex' has a wrong offset!");
static_assert(offsetof(TweenFloatStandardFactory_BP_AppendTweenActorFollowSpline, ReturnValue) == 0x000040, "Member 'TweenFloatStandardFactory_BP_AppendTweenActorFollowSpline::ReturnValue' has a wrong offset!");

// Function TweenMaker.TweenFloatStandardFactory.BP_AppendTweenCustomFloat
// 0x0040 (0x0040 - 0x0000)
struct TweenFloatStandardFactory_BP_AppendTweenCustomFloat final
{
public:
	class UTweenContainer*                        TweenContainer;                                    // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UObject*                                TweenTarget;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         From;                                              // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         To;                                                // 0x0014(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Duration;                                          // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETweenEaseType                                EaseType;                                          // 0x001C(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1D[0x3];                                       // 0x001D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         NumLoops;                                          // 0x0020(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETweenLoopType                                LoopType;                                          // 0x0024(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_25[0x3];                                       // 0x0025(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Delay;                                             // 0x0028(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TimeScale;                                         // 0x002C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          TweenWhileGameIsPaused;                            // 0x0030(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_31[0x3];                                       // 0x0031(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         SequenceIndex;                                     // 0x0034(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UTweenFloat*                            ReturnValue;                                       // 0x0038(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TweenFloatStandardFactory_BP_AppendTweenCustomFloat) == 0x000008, "Wrong alignment on TweenFloatStandardFactory_BP_AppendTweenCustomFloat");
static_assert(sizeof(TweenFloatStandardFactory_BP_AppendTweenCustomFloat) == 0x000040, "Wrong size on TweenFloatStandardFactory_BP_AppendTweenCustomFloat");
static_assert(offsetof(TweenFloatStandardFactory_BP_AppendTweenCustomFloat, TweenContainer) == 0x000000, "Member 'TweenFloatStandardFactory_BP_AppendTweenCustomFloat::TweenContainer' has a wrong offset!");
static_assert(offsetof(TweenFloatStandardFactory_BP_AppendTweenCustomFloat, TweenTarget) == 0x000008, "Member 'TweenFloatStandardFactory_BP_AppendTweenCustomFloat::TweenTarget' has a wrong offset!");
static_assert(offsetof(TweenFloatStandardFactory_BP_AppendTweenCustomFloat, From) == 0x000010, "Member 'TweenFloatStandardFactory_BP_AppendTweenCustomFloat::From' has a wrong offset!");
static_assert(offsetof(TweenFloatStandardFactory_BP_AppendTweenCustomFloat, To) == 0x000014, "Member 'TweenFloatStandardFactory_BP_AppendTweenCustomFloat::To' has a wrong offset!");
static_assert(offsetof(TweenFloatStandardFactory_BP_AppendTweenCustomFloat, Duration) == 0x000018, "Member 'TweenFloatStandardFactory_BP_AppendTweenCustomFloat::Duration' has a wrong offset!");
static_assert(offsetof(TweenFloatStandardFactory_BP_AppendTweenCustomFloat, EaseType) == 0x00001C, "Member 'TweenFloatStandardFactory_BP_AppendTweenCustomFloat::EaseType' has a wrong offset!");
static_assert(offsetof(TweenFloatStandardFactory_BP_AppendTweenCustomFloat, NumLoops) == 0x000020, "Member 'TweenFloatStandardFactory_BP_AppendTweenCustomFloat::NumLoops' has a wrong offset!");
static_assert(offsetof(TweenFloatStandardFactory_BP_AppendTweenCustomFloat, LoopType) == 0x000024, "Member 'TweenFloatStandardFactory_BP_AppendTweenCustomFloat::LoopType' has a wrong offset!");
static_assert(offsetof(TweenFloatStandardFactory_BP_AppendTweenCustomFloat, Delay) == 0x000028, "Member 'TweenFloatStandardFactory_BP_AppendTweenCustomFloat::Delay' has a wrong offset!");
static_assert(offsetof(TweenFloatStandardFactory_BP_AppendTweenCustomFloat, TimeScale) == 0x00002C, "Member 'TweenFloatStandardFactory_BP_AppendTweenCustomFloat::TimeScale' has a wrong offset!");
static_assert(offsetof(TweenFloatStandardFactory_BP_AppendTweenCustomFloat, TweenWhileGameIsPaused) == 0x000030, "Member 'TweenFloatStandardFactory_BP_AppendTweenCustomFloat::TweenWhileGameIsPaused' has a wrong offset!");
static_assert(offsetof(TweenFloatStandardFactory_BP_AppendTweenCustomFloat, SequenceIndex) == 0x000034, "Member 'TweenFloatStandardFactory_BP_AppendTweenCustomFloat::SequenceIndex' has a wrong offset!");
static_assert(offsetof(TweenFloatStandardFactory_BP_AppendTweenCustomFloat, ReturnValue) == 0x000038, "Member 'TweenFloatStandardFactory_BP_AppendTweenCustomFloat::ReturnValue' has a wrong offset!");

// Function TweenMaker.TweenFloatStandardFactory.BP_AppendTweenMaterialFloatFromTo
// 0x0048 (0x0048 - 0x0000)
struct TweenFloatStandardFactory_BP_AppendTweenMaterialFloatFromTo final
{
public:
	class UTweenContainer*                        TweenContainer;                                    // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UMaterialInstanceDynamic*               TweenTarget;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   ParameterName;                                     // 0x0010(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         From;                                              // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         To;                                                // 0x001C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Duration;                                          // 0x0020(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETweenEaseType                                EaseType;                                          // 0x0024(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_25[0x3];                                       // 0x0025(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         NumLoops;                                          // 0x0028(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETweenLoopType                                LoopType;                                          // 0x002C(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2D[0x3];                                       // 0x002D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Delay;                                             // 0x0030(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TimeScale;                                         // 0x0034(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          TweenWhileGameIsPaused;                            // 0x0038(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_39[0x3];                                       // 0x0039(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         SequenceIndex;                                     // 0x003C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UTweenFloat*                            ReturnValue;                                       // 0x0040(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TweenFloatStandardFactory_BP_AppendTweenMaterialFloatFromTo) == 0x000008, "Wrong alignment on TweenFloatStandardFactory_BP_AppendTweenMaterialFloatFromTo");
static_assert(sizeof(TweenFloatStandardFactory_BP_AppendTweenMaterialFloatFromTo) == 0x000048, "Wrong size on TweenFloatStandardFactory_BP_AppendTweenMaterialFloatFromTo");
static_assert(offsetof(TweenFloatStandardFactory_BP_AppendTweenMaterialFloatFromTo, TweenContainer) == 0x000000, "Member 'TweenFloatStandardFactory_BP_AppendTweenMaterialFloatFromTo::TweenContainer' has a wrong offset!");
static_assert(offsetof(TweenFloatStandardFactory_BP_AppendTweenMaterialFloatFromTo, TweenTarget) == 0x000008, "Member 'TweenFloatStandardFactory_BP_AppendTweenMaterialFloatFromTo::TweenTarget' has a wrong offset!");
static_assert(offsetof(TweenFloatStandardFactory_BP_AppendTweenMaterialFloatFromTo, ParameterName) == 0x000010, "Member 'TweenFloatStandardFactory_BP_AppendTweenMaterialFloatFromTo::ParameterName' has a wrong offset!");
static_assert(offsetof(TweenFloatStandardFactory_BP_AppendTweenMaterialFloatFromTo, From) == 0x000018, "Member 'TweenFloatStandardFactory_BP_AppendTweenMaterialFloatFromTo::From' has a wrong offset!");
static_assert(offsetof(TweenFloatStandardFactory_BP_AppendTweenMaterialFloatFromTo, To) == 0x00001C, "Member 'TweenFloatStandardFactory_BP_AppendTweenMaterialFloatFromTo::To' has a wrong offset!");
static_assert(offsetof(TweenFloatStandardFactory_BP_AppendTweenMaterialFloatFromTo, Duration) == 0x000020, "Member 'TweenFloatStandardFactory_BP_AppendTweenMaterialFloatFromTo::Duration' has a wrong offset!");
static_assert(offsetof(TweenFloatStandardFactory_BP_AppendTweenMaterialFloatFromTo, EaseType) == 0x000024, "Member 'TweenFloatStandardFactory_BP_AppendTweenMaterialFloatFromTo::EaseType' has a wrong offset!");
static_assert(offsetof(TweenFloatStandardFactory_BP_AppendTweenMaterialFloatFromTo, NumLoops) == 0x000028, "Member 'TweenFloatStandardFactory_BP_AppendTweenMaterialFloatFromTo::NumLoops' has a wrong offset!");
static_assert(offsetof(TweenFloatStandardFactory_BP_AppendTweenMaterialFloatFromTo, LoopType) == 0x00002C, "Member 'TweenFloatStandardFactory_BP_AppendTweenMaterialFloatFromTo::LoopType' has a wrong offset!");
static_assert(offsetof(TweenFloatStandardFactory_BP_AppendTweenMaterialFloatFromTo, Delay) == 0x000030, "Member 'TweenFloatStandardFactory_BP_AppendTweenMaterialFloatFromTo::Delay' has a wrong offset!");
static_assert(offsetof(TweenFloatStandardFactory_BP_AppendTweenMaterialFloatFromTo, TimeScale) == 0x000034, "Member 'TweenFloatStandardFactory_BP_AppendTweenMaterialFloatFromTo::TimeScale' has a wrong offset!");
static_assert(offsetof(TweenFloatStandardFactory_BP_AppendTweenMaterialFloatFromTo, TweenWhileGameIsPaused) == 0x000038, "Member 'TweenFloatStandardFactory_BP_AppendTweenMaterialFloatFromTo::TweenWhileGameIsPaused' has a wrong offset!");
static_assert(offsetof(TweenFloatStandardFactory_BP_AppendTweenMaterialFloatFromTo, SequenceIndex) == 0x00003C, "Member 'TweenFloatStandardFactory_BP_AppendTweenMaterialFloatFromTo::SequenceIndex' has a wrong offset!");
static_assert(offsetof(TweenFloatStandardFactory_BP_AppendTweenMaterialFloatFromTo, ReturnValue) == 0x000040, "Member 'TweenFloatStandardFactory_BP_AppendTweenMaterialFloatFromTo::ReturnValue' has a wrong offset!");

// Function TweenMaker.TweenFloatStandardFactory.BP_AppendTweenMaterialFloatTo
// 0x0048 (0x0048 - 0x0000)
struct TweenFloatStandardFactory_BP_AppendTweenMaterialFloatTo final
{
public:
	class UTweenContainer*                        TweenContainer;                                    // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UMaterialInstanceDynamic*               TweenTarget;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   ParameterName;                                     // 0x0010(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         To;                                                // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Duration;                                          // 0x001C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETweenEaseType                                EaseType;                                          // 0x0020(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_21[0x3];                                       // 0x0021(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         NumLoops;                                          // 0x0024(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETweenLoopType                                LoopType;                                          // 0x0028(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_29[0x3];                                       // 0x0029(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Delay;                                             // 0x002C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TimeScale;                                         // 0x0030(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          TweenWhileGameIsPaused;                            // 0x0034(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_35[0x3];                                       // 0x0035(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         SequenceIndex;                                     // 0x0038(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_3C[0x4];                                       // 0x003C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UTweenFloat*                            ReturnValue;                                       // 0x0040(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TweenFloatStandardFactory_BP_AppendTweenMaterialFloatTo) == 0x000008, "Wrong alignment on TweenFloatStandardFactory_BP_AppendTweenMaterialFloatTo");
static_assert(sizeof(TweenFloatStandardFactory_BP_AppendTweenMaterialFloatTo) == 0x000048, "Wrong size on TweenFloatStandardFactory_BP_AppendTweenMaterialFloatTo");
static_assert(offsetof(TweenFloatStandardFactory_BP_AppendTweenMaterialFloatTo, TweenContainer) == 0x000000, "Member 'TweenFloatStandardFactory_BP_AppendTweenMaterialFloatTo::TweenContainer' has a wrong offset!");
static_assert(offsetof(TweenFloatStandardFactory_BP_AppendTweenMaterialFloatTo, TweenTarget) == 0x000008, "Member 'TweenFloatStandardFactory_BP_AppendTweenMaterialFloatTo::TweenTarget' has a wrong offset!");
static_assert(offsetof(TweenFloatStandardFactory_BP_AppendTweenMaterialFloatTo, ParameterName) == 0x000010, "Member 'TweenFloatStandardFactory_BP_AppendTweenMaterialFloatTo::ParameterName' has a wrong offset!");
static_assert(offsetof(TweenFloatStandardFactory_BP_AppendTweenMaterialFloatTo, To) == 0x000018, "Member 'TweenFloatStandardFactory_BP_AppendTweenMaterialFloatTo::To' has a wrong offset!");
static_assert(offsetof(TweenFloatStandardFactory_BP_AppendTweenMaterialFloatTo, Duration) == 0x00001C, "Member 'TweenFloatStandardFactory_BP_AppendTweenMaterialFloatTo::Duration' has a wrong offset!");
static_assert(offsetof(TweenFloatStandardFactory_BP_AppendTweenMaterialFloatTo, EaseType) == 0x000020, "Member 'TweenFloatStandardFactory_BP_AppendTweenMaterialFloatTo::EaseType' has a wrong offset!");
static_assert(offsetof(TweenFloatStandardFactory_BP_AppendTweenMaterialFloatTo, NumLoops) == 0x000024, "Member 'TweenFloatStandardFactory_BP_AppendTweenMaterialFloatTo::NumLoops' has a wrong offset!");
static_assert(offsetof(TweenFloatStandardFactory_BP_AppendTweenMaterialFloatTo, LoopType) == 0x000028, "Member 'TweenFloatStandardFactory_BP_AppendTweenMaterialFloatTo::LoopType' has a wrong offset!");
static_assert(offsetof(TweenFloatStandardFactory_BP_AppendTweenMaterialFloatTo, Delay) == 0x00002C, "Member 'TweenFloatStandardFactory_BP_AppendTweenMaterialFloatTo::Delay' has a wrong offset!");
static_assert(offsetof(TweenFloatStandardFactory_BP_AppendTweenMaterialFloatTo, TimeScale) == 0x000030, "Member 'TweenFloatStandardFactory_BP_AppendTweenMaterialFloatTo::TimeScale' has a wrong offset!");
static_assert(offsetof(TweenFloatStandardFactory_BP_AppendTweenMaterialFloatTo, TweenWhileGameIsPaused) == 0x000034, "Member 'TweenFloatStandardFactory_BP_AppendTweenMaterialFloatTo::TweenWhileGameIsPaused' has a wrong offset!");
static_assert(offsetof(TweenFloatStandardFactory_BP_AppendTweenMaterialFloatTo, SequenceIndex) == 0x000038, "Member 'TweenFloatStandardFactory_BP_AppendTweenMaterialFloatTo::SequenceIndex' has a wrong offset!");
static_assert(offsetof(TweenFloatStandardFactory_BP_AppendTweenMaterialFloatTo, ReturnValue) == 0x000040, "Member 'TweenFloatStandardFactory_BP_AppendTweenMaterialFloatTo::ReturnValue' has a wrong offset!");

// Function TweenMaker.TweenFloatStandardFactory.BP_AppendTweenRotateActorAroundPoint
// 0x0060 (0x0060 - 0x0000)
struct TweenFloatStandardFactory_BP_AppendTweenRotateActorAroundPoint final
{
public:
	class UTweenContainer*                        TweenContainer;                                    // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 TweenTarget;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                PivotPoint;                                        // 0x0010(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         StartingAngle;                                     // 0x001C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         EndingAngle;                                       // 0x0020(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Radius;                                            // 0x0024(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                Axis;                                              // 0x0028(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Duration;                                          // 0x0034(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETweenEaseType                                EaseType;                                          // 0x0038(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          DeleteTweenOnHit;                                  // 0x0039(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          DeleteTweenOnOverlap;                              // 0x003A(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_3B[0x1];                                       // 0x003B(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         NumLoops;                                          // 0x003C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETweenLoopType                                LoopType;                                          // 0x0040(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_41[0x3];                                       // 0x0041(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Delay;                                             // 0x0044(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TimeScale;                                         // 0x0048(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          TweenWhileGameIsPaused;                            // 0x004C(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4D[0x3];                                       // 0x004D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         SequenceIndex;                                     // 0x0050(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_54[0x4];                                       // 0x0054(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UTweenFloat*                            ReturnValue;                                       // 0x0058(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TweenFloatStandardFactory_BP_AppendTweenRotateActorAroundPoint) == 0x000008, "Wrong alignment on TweenFloatStandardFactory_BP_AppendTweenRotateActorAroundPoint");
static_assert(sizeof(TweenFloatStandardFactory_BP_AppendTweenRotateActorAroundPoint) == 0x000060, "Wrong size on TweenFloatStandardFactory_BP_AppendTweenRotateActorAroundPoint");
static_assert(offsetof(TweenFloatStandardFactory_BP_AppendTweenRotateActorAroundPoint, TweenContainer) == 0x000000, "Member 'TweenFloatStandardFactory_BP_AppendTweenRotateActorAroundPoint::TweenContainer' has a wrong offset!");
static_assert(offsetof(TweenFloatStandardFactory_BP_AppendTweenRotateActorAroundPoint, TweenTarget) == 0x000008, "Member 'TweenFloatStandardFactory_BP_AppendTweenRotateActorAroundPoint::TweenTarget' has a wrong offset!");
static_assert(offsetof(TweenFloatStandardFactory_BP_AppendTweenRotateActorAroundPoint, PivotPoint) == 0x000010, "Member 'TweenFloatStandardFactory_BP_AppendTweenRotateActorAroundPoint::PivotPoint' has a wrong offset!");
static_assert(offsetof(TweenFloatStandardFactory_BP_AppendTweenRotateActorAroundPoint, StartingAngle) == 0x00001C, "Member 'TweenFloatStandardFactory_BP_AppendTweenRotateActorAroundPoint::StartingAngle' has a wrong offset!");
static_assert(offsetof(TweenFloatStandardFactory_BP_AppendTweenRotateActorAroundPoint, EndingAngle) == 0x000020, "Member 'TweenFloatStandardFactory_BP_AppendTweenRotateActorAroundPoint::EndingAngle' has a wrong offset!");
static_assert(offsetof(TweenFloatStandardFactory_BP_AppendTweenRotateActorAroundPoint, Radius) == 0x000024, "Member 'TweenFloatStandardFactory_BP_AppendTweenRotateActorAroundPoint::Radius' has a wrong offset!");
static_assert(offsetof(TweenFloatStandardFactory_BP_AppendTweenRotateActorAroundPoint, Axis) == 0x000028, "Member 'TweenFloatStandardFactory_BP_AppendTweenRotateActorAroundPoint::Axis' has a wrong offset!");
static_assert(offsetof(TweenFloatStandardFactory_BP_AppendTweenRotateActorAroundPoint, Duration) == 0x000034, "Member 'TweenFloatStandardFactory_BP_AppendTweenRotateActorAroundPoint::Duration' has a wrong offset!");
static_assert(offsetof(TweenFloatStandardFactory_BP_AppendTweenRotateActorAroundPoint, EaseType) == 0x000038, "Member 'TweenFloatStandardFactory_BP_AppendTweenRotateActorAroundPoint::EaseType' has a wrong offset!");
static_assert(offsetof(TweenFloatStandardFactory_BP_AppendTweenRotateActorAroundPoint, DeleteTweenOnHit) == 0x000039, "Member 'TweenFloatStandardFactory_BP_AppendTweenRotateActorAroundPoint::DeleteTweenOnHit' has a wrong offset!");
static_assert(offsetof(TweenFloatStandardFactory_BP_AppendTweenRotateActorAroundPoint, DeleteTweenOnOverlap) == 0x00003A, "Member 'TweenFloatStandardFactory_BP_AppendTweenRotateActorAroundPoint::DeleteTweenOnOverlap' has a wrong offset!");
static_assert(offsetof(TweenFloatStandardFactory_BP_AppendTweenRotateActorAroundPoint, NumLoops) == 0x00003C, "Member 'TweenFloatStandardFactory_BP_AppendTweenRotateActorAroundPoint::NumLoops' has a wrong offset!");
static_assert(offsetof(TweenFloatStandardFactory_BP_AppendTweenRotateActorAroundPoint, LoopType) == 0x000040, "Member 'TweenFloatStandardFactory_BP_AppendTweenRotateActorAroundPoint::LoopType' has a wrong offset!");
static_assert(offsetof(TweenFloatStandardFactory_BP_AppendTweenRotateActorAroundPoint, Delay) == 0x000044, "Member 'TweenFloatStandardFactory_BP_AppendTweenRotateActorAroundPoint::Delay' has a wrong offset!");
static_assert(offsetof(TweenFloatStandardFactory_BP_AppendTweenRotateActorAroundPoint, TimeScale) == 0x000048, "Member 'TweenFloatStandardFactory_BP_AppendTweenRotateActorAroundPoint::TimeScale' has a wrong offset!");
static_assert(offsetof(TweenFloatStandardFactory_BP_AppendTweenRotateActorAroundPoint, TweenWhileGameIsPaused) == 0x00004C, "Member 'TweenFloatStandardFactory_BP_AppendTweenRotateActorAroundPoint::TweenWhileGameIsPaused' has a wrong offset!");
static_assert(offsetof(TweenFloatStandardFactory_BP_AppendTweenRotateActorAroundPoint, SequenceIndex) == 0x000050, "Member 'TweenFloatStandardFactory_BP_AppendTweenRotateActorAroundPoint::SequenceIndex' has a wrong offset!");
static_assert(offsetof(TweenFloatStandardFactory_BP_AppendTweenRotateActorAroundPoint, ReturnValue) == 0x000058, "Member 'TweenFloatStandardFactory_BP_AppendTweenRotateActorAroundPoint::ReturnValue' has a wrong offset!");

// Function TweenMaker.TweenFloatStandardFactory.BP_AppendTweenRotateActorAroundPointByOffset
// 0x0050 (0x0050 - 0x0000)
struct TweenFloatStandardFactory_BP_AppendTweenRotateActorAroundPointByOffset final
{
public:
	class UTweenContainer*                        TweenContainer;                                    // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 TweenTarget;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                PivotPoint;                                        // 0x0010(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         OffsetAngle;                                       // 0x001C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETweenReferenceAxis                           ReferenceAxis;                                     // 0x0020(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_21[0x3];                                       // 0x0021(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Duration;                                          // 0x0024(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETweenEaseType                                EaseType;                                          // 0x0028(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          DeleteTweenOnHit;                                  // 0x0029(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          DeleteTweenOnOverlap;                              // 0x002A(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2B[0x1];                                       // 0x002B(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         NumLoops;                                          // 0x002C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETweenLoopType                                LoopType;                                          // 0x0030(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_31[0x3];                                       // 0x0031(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Delay;                                             // 0x0034(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TimeScale;                                         // 0x0038(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          TweenWhileGameIsPaused;                            // 0x003C(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_3D[0x3];                                       // 0x003D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         SequenceIndex;                                     // 0x0040(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_44[0x4];                                       // 0x0044(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UTweenFloat*                            ReturnValue;                                       // 0x0048(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TweenFloatStandardFactory_BP_AppendTweenRotateActorAroundPointByOffset) == 0x000008, "Wrong alignment on TweenFloatStandardFactory_BP_AppendTweenRotateActorAroundPointByOffset");
static_assert(sizeof(TweenFloatStandardFactory_BP_AppendTweenRotateActorAroundPointByOffset) == 0x000050, "Wrong size on TweenFloatStandardFactory_BP_AppendTweenRotateActorAroundPointByOffset");
static_assert(offsetof(TweenFloatStandardFactory_BP_AppendTweenRotateActorAroundPointByOffset, TweenContainer) == 0x000000, "Member 'TweenFloatStandardFactory_BP_AppendTweenRotateActorAroundPointByOffset::TweenContainer' has a wrong offset!");
static_assert(offsetof(TweenFloatStandardFactory_BP_AppendTweenRotateActorAroundPointByOffset, TweenTarget) == 0x000008, "Member 'TweenFloatStandardFactory_BP_AppendTweenRotateActorAroundPointByOffset::TweenTarget' has a wrong offset!");
static_assert(offsetof(TweenFloatStandardFactory_BP_AppendTweenRotateActorAroundPointByOffset, PivotPoint) == 0x000010, "Member 'TweenFloatStandardFactory_BP_AppendTweenRotateActorAroundPointByOffset::PivotPoint' has a wrong offset!");
static_assert(offsetof(TweenFloatStandardFactory_BP_AppendTweenRotateActorAroundPointByOffset, OffsetAngle) == 0x00001C, "Member 'TweenFloatStandardFactory_BP_AppendTweenRotateActorAroundPointByOffset::OffsetAngle' has a wrong offset!");
static_assert(offsetof(TweenFloatStandardFactory_BP_AppendTweenRotateActorAroundPointByOffset, ReferenceAxis) == 0x000020, "Member 'TweenFloatStandardFactory_BP_AppendTweenRotateActorAroundPointByOffset::ReferenceAxis' has a wrong offset!");
static_assert(offsetof(TweenFloatStandardFactory_BP_AppendTweenRotateActorAroundPointByOffset, Duration) == 0x000024, "Member 'TweenFloatStandardFactory_BP_AppendTweenRotateActorAroundPointByOffset::Duration' has a wrong offset!");
static_assert(offsetof(TweenFloatStandardFactory_BP_AppendTweenRotateActorAroundPointByOffset, EaseType) == 0x000028, "Member 'TweenFloatStandardFactory_BP_AppendTweenRotateActorAroundPointByOffset::EaseType' has a wrong offset!");
static_assert(offsetof(TweenFloatStandardFactory_BP_AppendTweenRotateActorAroundPointByOffset, DeleteTweenOnHit) == 0x000029, "Member 'TweenFloatStandardFactory_BP_AppendTweenRotateActorAroundPointByOffset::DeleteTweenOnHit' has a wrong offset!");
static_assert(offsetof(TweenFloatStandardFactory_BP_AppendTweenRotateActorAroundPointByOffset, DeleteTweenOnOverlap) == 0x00002A, "Member 'TweenFloatStandardFactory_BP_AppendTweenRotateActorAroundPointByOffset::DeleteTweenOnOverlap' has a wrong offset!");
static_assert(offsetof(TweenFloatStandardFactory_BP_AppendTweenRotateActorAroundPointByOffset, NumLoops) == 0x00002C, "Member 'TweenFloatStandardFactory_BP_AppendTweenRotateActorAroundPointByOffset::NumLoops' has a wrong offset!");
static_assert(offsetof(TweenFloatStandardFactory_BP_AppendTweenRotateActorAroundPointByOffset, LoopType) == 0x000030, "Member 'TweenFloatStandardFactory_BP_AppendTweenRotateActorAroundPointByOffset::LoopType' has a wrong offset!");
static_assert(offsetof(TweenFloatStandardFactory_BP_AppendTweenRotateActorAroundPointByOffset, Delay) == 0x000034, "Member 'TweenFloatStandardFactory_BP_AppendTweenRotateActorAroundPointByOffset::Delay' has a wrong offset!");
static_assert(offsetof(TweenFloatStandardFactory_BP_AppendTweenRotateActorAroundPointByOffset, TimeScale) == 0x000038, "Member 'TweenFloatStandardFactory_BP_AppendTweenRotateActorAroundPointByOffset::TimeScale' has a wrong offset!");
static_assert(offsetof(TweenFloatStandardFactory_BP_AppendTweenRotateActorAroundPointByOffset, TweenWhileGameIsPaused) == 0x00003C, "Member 'TweenFloatStandardFactory_BP_AppendTweenRotateActorAroundPointByOffset::TweenWhileGameIsPaused' has a wrong offset!");
static_assert(offsetof(TweenFloatStandardFactory_BP_AppendTweenRotateActorAroundPointByOffset, SequenceIndex) == 0x000040, "Member 'TweenFloatStandardFactory_BP_AppendTweenRotateActorAroundPointByOffset::SequenceIndex' has a wrong offset!");
static_assert(offsetof(TweenFloatStandardFactory_BP_AppendTweenRotateActorAroundPointByOffset, ReturnValue) == 0x000048, "Member 'TweenFloatStandardFactory_BP_AppendTweenRotateActorAroundPointByOffset::ReturnValue' has a wrong offset!");

// Function TweenMaker.TweenFloatStandardFactory.BP_AppendTweenRotateSceneComponentAroundPoint
// 0x0060 (0x0060 - 0x0000)
struct TweenFloatStandardFactory_BP_AppendTweenRotateSceneComponentAroundPoint final
{
public:
	class UTweenContainer*                        TweenContainer;                                    // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USceneComponent*                        TweenTarget;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, InstancedReference, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                PivotPoint;                                        // 0x0010(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         StartingAngle;                                     // 0x001C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         EndingAngle;                                       // 0x0020(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Radius;                                            // 0x0024(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                Axis;                                              // 0x0028(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Duration;                                          // 0x0034(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETweenEaseType                                EaseType;                                          // 0x0038(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          DeleteTweenOnHit;                                  // 0x0039(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          DeleteTweenOnOverlap;                              // 0x003A(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_3B[0x1];                                       // 0x003B(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         NumLoops;                                          // 0x003C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETweenLoopType                                LoopType;                                          // 0x0040(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_41[0x3];                                       // 0x0041(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Delay;                                             // 0x0044(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TimeScale;                                         // 0x0048(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          TweenWhileGameIsPaused;                            // 0x004C(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4D[0x3];                                       // 0x004D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         SequenceIndex;                                     // 0x0050(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_54[0x4];                                       // 0x0054(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UTweenFloat*                            ReturnValue;                                       // 0x0058(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TweenFloatStandardFactory_BP_AppendTweenRotateSceneComponentAroundPoint) == 0x000008, "Wrong alignment on TweenFloatStandardFactory_BP_AppendTweenRotateSceneComponentAroundPoint");
static_assert(sizeof(TweenFloatStandardFactory_BP_AppendTweenRotateSceneComponentAroundPoint) == 0x000060, "Wrong size on TweenFloatStandardFactory_BP_AppendTweenRotateSceneComponentAroundPoint");
static_assert(offsetof(TweenFloatStandardFactory_BP_AppendTweenRotateSceneComponentAroundPoint, TweenContainer) == 0x000000, "Member 'TweenFloatStandardFactory_BP_AppendTweenRotateSceneComponentAroundPoint::TweenContainer' has a wrong offset!");
static_assert(offsetof(TweenFloatStandardFactory_BP_AppendTweenRotateSceneComponentAroundPoint, TweenTarget) == 0x000008, "Member 'TweenFloatStandardFactory_BP_AppendTweenRotateSceneComponentAroundPoint::TweenTarget' has a wrong offset!");
static_assert(offsetof(TweenFloatStandardFactory_BP_AppendTweenRotateSceneComponentAroundPoint, PivotPoint) == 0x000010, "Member 'TweenFloatStandardFactory_BP_AppendTweenRotateSceneComponentAroundPoint::PivotPoint' has a wrong offset!");
static_assert(offsetof(TweenFloatStandardFactory_BP_AppendTweenRotateSceneComponentAroundPoint, StartingAngle) == 0x00001C, "Member 'TweenFloatStandardFactory_BP_AppendTweenRotateSceneComponentAroundPoint::StartingAngle' has a wrong offset!");
static_assert(offsetof(TweenFloatStandardFactory_BP_AppendTweenRotateSceneComponentAroundPoint, EndingAngle) == 0x000020, "Member 'TweenFloatStandardFactory_BP_AppendTweenRotateSceneComponentAroundPoint::EndingAngle' has a wrong offset!");
static_assert(offsetof(TweenFloatStandardFactory_BP_AppendTweenRotateSceneComponentAroundPoint, Radius) == 0x000024, "Member 'TweenFloatStandardFactory_BP_AppendTweenRotateSceneComponentAroundPoint::Radius' has a wrong offset!");
static_assert(offsetof(TweenFloatStandardFactory_BP_AppendTweenRotateSceneComponentAroundPoint, Axis) == 0x000028, "Member 'TweenFloatStandardFactory_BP_AppendTweenRotateSceneComponentAroundPoint::Axis' has a wrong offset!");
static_assert(offsetof(TweenFloatStandardFactory_BP_AppendTweenRotateSceneComponentAroundPoint, Duration) == 0x000034, "Member 'TweenFloatStandardFactory_BP_AppendTweenRotateSceneComponentAroundPoint::Duration' has a wrong offset!");
static_assert(offsetof(TweenFloatStandardFactory_BP_AppendTweenRotateSceneComponentAroundPoint, EaseType) == 0x000038, "Member 'TweenFloatStandardFactory_BP_AppendTweenRotateSceneComponentAroundPoint::EaseType' has a wrong offset!");
static_assert(offsetof(TweenFloatStandardFactory_BP_AppendTweenRotateSceneComponentAroundPoint, DeleteTweenOnHit) == 0x000039, "Member 'TweenFloatStandardFactory_BP_AppendTweenRotateSceneComponentAroundPoint::DeleteTweenOnHit' has a wrong offset!");
static_assert(offsetof(TweenFloatStandardFactory_BP_AppendTweenRotateSceneComponentAroundPoint, DeleteTweenOnOverlap) == 0x00003A, "Member 'TweenFloatStandardFactory_BP_AppendTweenRotateSceneComponentAroundPoint::DeleteTweenOnOverlap' has a wrong offset!");
static_assert(offsetof(TweenFloatStandardFactory_BP_AppendTweenRotateSceneComponentAroundPoint, NumLoops) == 0x00003C, "Member 'TweenFloatStandardFactory_BP_AppendTweenRotateSceneComponentAroundPoint::NumLoops' has a wrong offset!");
static_assert(offsetof(TweenFloatStandardFactory_BP_AppendTweenRotateSceneComponentAroundPoint, LoopType) == 0x000040, "Member 'TweenFloatStandardFactory_BP_AppendTweenRotateSceneComponentAroundPoint::LoopType' has a wrong offset!");
static_assert(offsetof(TweenFloatStandardFactory_BP_AppendTweenRotateSceneComponentAroundPoint, Delay) == 0x000044, "Member 'TweenFloatStandardFactory_BP_AppendTweenRotateSceneComponentAroundPoint::Delay' has a wrong offset!");
static_assert(offsetof(TweenFloatStandardFactory_BP_AppendTweenRotateSceneComponentAroundPoint, TimeScale) == 0x000048, "Member 'TweenFloatStandardFactory_BP_AppendTweenRotateSceneComponentAroundPoint::TimeScale' has a wrong offset!");
static_assert(offsetof(TweenFloatStandardFactory_BP_AppendTweenRotateSceneComponentAroundPoint, TweenWhileGameIsPaused) == 0x00004C, "Member 'TweenFloatStandardFactory_BP_AppendTweenRotateSceneComponentAroundPoint::TweenWhileGameIsPaused' has a wrong offset!");
static_assert(offsetof(TweenFloatStandardFactory_BP_AppendTweenRotateSceneComponentAroundPoint, SequenceIndex) == 0x000050, "Member 'TweenFloatStandardFactory_BP_AppendTweenRotateSceneComponentAroundPoint::SequenceIndex' has a wrong offset!");
static_assert(offsetof(TweenFloatStandardFactory_BP_AppendTweenRotateSceneComponentAroundPoint, ReturnValue) == 0x000058, "Member 'TweenFloatStandardFactory_BP_AppendTweenRotateSceneComponentAroundPoint::ReturnValue' has a wrong offset!");

// Function TweenMaker.TweenFloatStandardFactory.BP_AppendTweenRotateSceneComponentAroundPointByOffset
// 0x0050 (0x0050 - 0x0000)
struct TweenFloatStandardFactory_BP_AppendTweenRotateSceneComponentAroundPointByOffset final
{
public:
	class UTweenContainer*                        TweenContainer;                                    // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USceneComponent*                        TweenTarget;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, InstancedReference, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                PivotPoint;                                        // 0x0010(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         OffsetAngle;                                       // 0x001C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETweenReferenceAxis                           ReferenceAxis;                                     // 0x0020(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_21[0x3];                                       // 0x0021(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Duration;                                          // 0x0024(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETweenEaseType                                EaseType;                                          // 0x0028(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          DeleteTweenOnHit;                                  // 0x0029(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          DeleteTweenOnOverlap;                              // 0x002A(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2B[0x1];                                       // 0x002B(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         NumLoops;                                          // 0x002C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETweenLoopType                                LoopType;                                          // 0x0030(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_31[0x3];                                       // 0x0031(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Delay;                                             // 0x0034(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TimeScale;                                         // 0x0038(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          TweenWhileGameIsPaused;                            // 0x003C(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_3D[0x3];                                       // 0x003D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         SequenceIndex;                                     // 0x0040(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_44[0x4];                                       // 0x0044(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UTweenFloat*                            ReturnValue;                                       // 0x0048(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TweenFloatStandardFactory_BP_AppendTweenRotateSceneComponentAroundPointByOffset) == 0x000008, "Wrong alignment on TweenFloatStandardFactory_BP_AppendTweenRotateSceneComponentAroundPointByOffset");
static_assert(sizeof(TweenFloatStandardFactory_BP_AppendTweenRotateSceneComponentAroundPointByOffset) == 0x000050, "Wrong size on TweenFloatStandardFactory_BP_AppendTweenRotateSceneComponentAroundPointByOffset");
static_assert(offsetof(TweenFloatStandardFactory_BP_AppendTweenRotateSceneComponentAroundPointByOffset, TweenContainer) == 0x000000, "Member 'TweenFloatStandardFactory_BP_AppendTweenRotateSceneComponentAroundPointByOffset::TweenContainer' has a wrong offset!");
static_assert(offsetof(TweenFloatStandardFactory_BP_AppendTweenRotateSceneComponentAroundPointByOffset, TweenTarget) == 0x000008, "Member 'TweenFloatStandardFactory_BP_AppendTweenRotateSceneComponentAroundPointByOffset::TweenTarget' has a wrong offset!");
static_assert(offsetof(TweenFloatStandardFactory_BP_AppendTweenRotateSceneComponentAroundPointByOffset, PivotPoint) == 0x000010, "Member 'TweenFloatStandardFactory_BP_AppendTweenRotateSceneComponentAroundPointByOffset::PivotPoint' has a wrong offset!");
static_assert(offsetof(TweenFloatStandardFactory_BP_AppendTweenRotateSceneComponentAroundPointByOffset, OffsetAngle) == 0x00001C, "Member 'TweenFloatStandardFactory_BP_AppendTweenRotateSceneComponentAroundPointByOffset::OffsetAngle' has a wrong offset!");
static_assert(offsetof(TweenFloatStandardFactory_BP_AppendTweenRotateSceneComponentAroundPointByOffset, ReferenceAxis) == 0x000020, "Member 'TweenFloatStandardFactory_BP_AppendTweenRotateSceneComponentAroundPointByOffset::ReferenceAxis' has a wrong offset!");
static_assert(offsetof(TweenFloatStandardFactory_BP_AppendTweenRotateSceneComponentAroundPointByOffset, Duration) == 0x000024, "Member 'TweenFloatStandardFactory_BP_AppendTweenRotateSceneComponentAroundPointByOffset::Duration' has a wrong offset!");
static_assert(offsetof(TweenFloatStandardFactory_BP_AppendTweenRotateSceneComponentAroundPointByOffset, EaseType) == 0x000028, "Member 'TweenFloatStandardFactory_BP_AppendTweenRotateSceneComponentAroundPointByOffset::EaseType' has a wrong offset!");
static_assert(offsetof(TweenFloatStandardFactory_BP_AppendTweenRotateSceneComponentAroundPointByOffset, DeleteTweenOnHit) == 0x000029, "Member 'TweenFloatStandardFactory_BP_AppendTweenRotateSceneComponentAroundPointByOffset::DeleteTweenOnHit' has a wrong offset!");
static_assert(offsetof(TweenFloatStandardFactory_BP_AppendTweenRotateSceneComponentAroundPointByOffset, DeleteTweenOnOverlap) == 0x00002A, "Member 'TweenFloatStandardFactory_BP_AppendTweenRotateSceneComponentAroundPointByOffset::DeleteTweenOnOverlap' has a wrong offset!");
static_assert(offsetof(TweenFloatStandardFactory_BP_AppendTweenRotateSceneComponentAroundPointByOffset, NumLoops) == 0x00002C, "Member 'TweenFloatStandardFactory_BP_AppendTweenRotateSceneComponentAroundPointByOffset::NumLoops' has a wrong offset!");
static_assert(offsetof(TweenFloatStandardFactory_BP_AppendTweenRotateSceneComponentAroundPointByOffset, LoopType) == 0x000030, "Member 'TweenFloatStandardFactory_BP_AppendTweenRotateSceneComponentAroundPointByOffset::LoopType' has a wrong offset!");
static_assert(offsetof(TweenFloatStandardFactory_BP_AppendTweenRotateSceneComponentAroundPointByOffset, Delay) == 0x000034, "Member 'TweenFloatStandardFactory_BP_AppendTweenRotateSceneComponentAroundPointByOffset::Delay' has a wrong offset!");
static_assert(offsetof(TweenFloatStandardFactory_BP_AppendTweenRotateSceneComponentAroundPointByOffset, TimeScale) == 0x000038, "Member 'TweenFloatStandardFactory_BP_AppendTweenRotateSceneComponentAroundPointByOffset::TimeScale' has a wrong offset!");
static_assert(offsetof(TweenFloatStandardFactory_BP_AppendTweenRotateSceneComponentAroundPointByOffset, TweenWhileGameIsPaused) == 0x00003C, "Member 'TweenFloatStandardFactory_BP_AppendTweenRotateSceneComponentAroundPointByOffset::TweenWhileGameIsPaused' has a wrong offset!");
static_assert(offsetof(TweenFloatStandardFactory_BP_AppendTweenRotateSceneComponentAroundPointByOffset, SequenceIndex) == 0x000040, "Member 'TweenFloatStandardFactory_BP_AppendTweenRotateSceneComponentAroundPointByOffset::SequenceIndex' has a wrong offset!");
static_assert(offsetof(TweenFloatStandardFactory_BP_AppendTweenRotateSceneComponentAroundPointByOffset, ReturnValue) == 0x000048, "Member 'TweenFloatStandardFactory_BP_AppendTweenRotateSceneComponentAroundPointByOffset::ReturnValue' has a wrong offset!");

// Function TweenMaker.TweenFloatStandardFactory.BP_AppendTweenSceneComponentFollowSpline
// 0x0048 (0x0048 - 0x0000)
struct TweenFloatStandardFactory_BP_AppendTweenSceneComponentFollowSpline final
{
public:
	class UTweenContainer*                        TweenContainer;                                    // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USceneComponent*                        TweenTarget;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, InstancedReference, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USplineComponent*                       Spline;                                            // 0x0010(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Duration;                                          // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ApplyRotation;                                     // 0x001C(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ApplyScale;                                        // 0x001D(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          UseConstantSpeed;                                  // 0x001E(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETweenEaseType                                EaseType;                                          // 0x001F(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          DeleteTweenOnHit;                                  // 0x0020(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          DeleteTweenOnOverlap;                              // 0x0021(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_22[0x2];                                       // 0x0022(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         NumLoops;                                          // 0x0024(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETweenLoopType                                LoopType;                                          // 0x0028(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_29[0x3];                                       // 0x0029(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Delay;                                             // 0x002C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TimeScale;                                         // 0x0030(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          TweenWhileGameIsPaused;                            // 0x0034(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_35[0x3];                                       // 0x0035(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         SequenceIndex;                                     // 0x0038(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_3C[0x4];                                       // 0x003C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UTweenFloat*                            ReturnValue;                                       // 0x0040(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TweenFloatStandardFactory_BP_AppendTweenSceneComponentFollowSpline) == 0x000008, "Wrong alignment on TweenFloatStandardFactory_BP_AppendTweenSceneComponentFollowSpline");
static_assert(sizeof(TweenFloatStandardFactory_BP_AppendTweenSceneComponentFollowSpline) == 0x000048, "Wrong size on TweenFloatStandardFactory_BP_AppendTweenSceneComponentFollowSpline");
static_assert(offsetof(TweenFloatStandardFactory_BP_AppendTweenSceneComponentFollowSpline, TweenContainer) == 0x000000, "Member 'TweenFloatStandardFactory_BP_AppendTweenSceneComponentFollowSpline::TweenContainer' has a wrong offset!");
static_assert(offsetof(TweenFloatStandardFactory_BP_AppendTweenSceneComponentFollowSpline, TweenTarget) == 0x000008, "Member 'TweenFloatStandardFactory_BP_AppendTweenSceneComponentFollowSpline::TweenTarget' has a wrong offset!");
static_assert(offsetof(TweenFloatStandardFactory_BP_AppendTweenSceneComponentFollowSpline, Spline) == 0x000010, "Member 'TweenFloatStandardFactory_BP_AppendTweenSceneComponentFollowSpline::Spline' has a wrong offset!");
static_assert(offsetof(TweenFloatStandardFactory_BP_AppendTweenSceneComponentFollowSpline, Duration) == 0x000018, "Member 'TweenFloatStandardFactory_BP_AppendTweenSceneComponentFollowSpline::Duration' has a wrong offset!");
static_assert(offsetof(TweenFloatStandardFactory_BP_AppendTweenSceneComponentFollowSpline, ApplyRotation) == 0x00001C, "Member 'TweenFloatStandardFactory_BP_AppendTweenSceneComponentFollowSpline::ApplyRotation' has a wrong offset!");
static_assert(offsetof(TweenFloatStandardFactory_BP_AppendTweenSceneComponentFollowSpline, ApplyScale) == 0x00001D, "Member 'TweenFloatStandardFactory_BP_AppendTweenSceneComponentFollowSpline::ApplyScale' has a wrong offset!");
static_assert(offsetof(TweenFloatStandardFactory_BP_AppendTweenSceneComponentFollowSpline, UseConstantSpeed) == 0x00001E, "Member 'TweenFloatStandardFactory_BP_AppendTweenSceneComponentFollowSpline::UseConstantSpeed' has a wrong offset!");
static_assert(offsetof(TweenFloatStandardFactory_BP_AppendTweenSceneComponentFollowSpline, EaseType) == 0x00001F, "Member 'TweenFloatStandardFactory_BP_AppendTweenSceneComponentFollowSpline::EaseType' has a wrong offset!");
static_assert(offsetof(TweenFloatStandardFactory_BP_AppendTweenSceneComponentFollowSpline, DeleteTweenOnHit) == 0x000020, "Member 'TweenFloatStandardFactory_BP_AppendTweenSceneComponentFollowSpline::DeleteTweenOnHit' has a wrong offset!");
static_assert(offsetof(TweenFloatStandardFactory_BP_AppendTweenSceneComponentFollowSpline, DeleteTweenOnOverlap) == 0x000021, "Member 'TweenFloatStandardFactory_BP_AppendTweenSceneComponentFollowSpline::DeleteTweenOnOverlap' has a wrong offset!");
static_assert(offsetof(TweenFloatStandardFactory_BP_AppendTweenSceneComponentFollowSpline, NumLoops) == 0x000024, "Member 'TweenFloatStandardFactory_BP_AppendTweenSceneComponentFollowSpline::NumLoops' has a wrong offset!");
static_assert(offsetof(TweenFloatStandardFactory_BP_AppendTweenSceneComponentFollowSpline, LoopType) == 0x000028, "Member 'TweenFloatStandardFactory_BP_AppendTweenSceneComponentFollowSpline::LoopType' has a wrong offset!");
static_assert(offsetof(TweenFloatStandardFactory_BP_AppendTweenSceneComponentFollowSpline, Delay) == 0x00002C, "Member 'TweenFloatStandardFactory_BP_AppendTweenSceneComponentFollowSpline::Delay' has a wrong offset!");
static_assert(offsetof(TweenFloatStandardFactory_BP_AppendTweenSceneComponentFollowSpline, TimeScale) == 0x000030, "Member 'TweenFloatStandardFactory_BP_AppendTweenSceneComponentFollowSpline::TimeScale' has a wrong offset!");
static_assert(offsetof(TweenFloatStandardFactory_BP_AppendTweenSceneComponentFollowSpline, TweenWhileGameIsPaused) == 0x000034, "Member 'TweenFloatStandardFactory_BP_AppendTweenSceneComponentFollowSpline::TweenWhileGameIsPaused' has a wrong offset!");
static_assert(offsetof(TweenFloatStandardFactory_BP_AppendTweenSceneComponentFollowSpline, SequenceIndex) == 0x000038, "Member 'TweenFloatStandardFactory_BP_AppendTweenSceneComponentFollowSpline::SequenceIndex' has a wrong offset!");
static_assert(offsetof(TweenFloatStandardFactory_BP_AppendTweenSceneComponentFollowSpline, ReturnValue) == 0x000040, "Member 'TweenFloatStandardFactory_BP_AppendTweenSceneComponentFollowSpline::ReturnValue' has a wrong offset!");

// Function TweenMaker.TweenFloatStandardFactory.BP_AppendTweenWidgetAngleTo
// 0x0040 (0x0040 - 0x0000)
struct TweenFloatStandardFactory_BP_AppendTweenWidgetAngleTo final
{
public:
	class UTweenContainer*                        TweenContainer;                                    // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UWidget*                                TweenTarget;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, InstancedReference, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         To;                                                // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Duration;                                          // 0x0014(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETweenEaseType                                EaseType;                                          // 0x0018(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x3];                                       // 0x0019(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         NumLoops;                                          // 0x001C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETweenLoopType                                LoopType;                                          // 0x0020(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_21[0x3];                                       // 0x0021(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Delay;                                             // 0x0024(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TimeScale;                                         // 0x0028(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          TweenWhileGameIsPaused;                            // 0x002C(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2D[0x3];                                       // 0x002D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         SequenceIndex;                                     // 0x0030(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_34[0x4];                                       // 0x0034(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UTweenFloat*                            ReturnValue;                                       // 0x0038(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TweenFloatStandardFactory_BP_AppendTweenWidgetAngleTo) == 0x000008, "Wrong alignment on TweenFloatStandardFactory_BP_AppendTweenWidgetAngleTo");
static_assert(sizeof(TweenFloatStandardFactory_BP_AppendTweenWidgetAngleTo) == 0x000040, "Wrong size on TweenFloatStandardFactory_BP_AppendTweenWidgetAngleTo");
static_assert(offsetof(TweenFloatStandardFactory_BP_AppendTweenWidgetAngleTo, TweenContainer) == 0x000000, "Member 'TweenFloatStandardFactory_BP_AppendTweenWidgetAngleTo::TweenContainer' has a wrong offset!");
static_assert(offsetof(TweenFloatStandardFactory_BP_AppendTweenWidgetAngleTo, TweenTarget) == 0x000008, "Member 'TweenFloatStandardFactory_BP_AppendTweenWidgetAngleTo::TweenTarget' has a wrong offset!");
static_assert(offsetof(TweenFloatStandardFactory_BP_AppendTweenWidgetAngleTo, To) == 0x000010, "Member 'TweenFloatStandardFactory_BP_AppendTweenWidgetAngleTo::To' has a wrong offset!");
static_assert(offsetof(TweenFloatStandardFactory_BP_AppendTweenWidgetAngleTo, Duration) == 0x000014, "Member 'TweenFloatStandardFactory_BP_AppendTweenWidgetAngleTo::Duration' has a wrong offset!");
static_assert(offsetof(TweenFloatStandardFactory_BP_AppendTweenWidgetAngleTo, EaseType) == 0x000018, "Member 'TweenFloatStandardFactory_BP_AppendTweenWidgetAngleTo::EaseType' has a wrong offset!");
static_assert(offsetof(TweenFloatStandardFactory_BP_AppendTweenWidgetAngleTo, NumLoops) == 0x00001C, "Member 'TweenFloatStandardFactory_BP_AppendTweenWidgetAngleTo::NumLoops' has a wrong offset!");
static_assert(offsetof(TweenFloatStandardFactory_BP_AppendTweenWidgetAngleTo, LoopType) == 0x000020, "Member 'TweenFloatStandardFactory_BP_AppendTweenWidgetAngleTo::LoopType' has a wrong offset!");
static_assert(offsetof(TweenFloatStandardFactory_BP_AppendTweenWidgetAngleTo, Delay) == 0x000024, "Member 'TweenFloatStandardFactory_BP_AppendTweenWidgetAngleTo::Delay' has a wrong offset!");
static_assert(offsetof(TweenFloatStandardFactory_BP_AppendTweenWidgetAngleTo, TimeScale) == 0x000028, "Member 'TweenFloatStandardFactory_BP_AppendTweenWidgetAngleTo::TimeScale' has a wrong offset!");
static_assert(offsetof(TweenFloatStandardFactory_BP_AppendTweenWidgetAngleTo, TweenWhileGameIsPaused) == 0x00002C, "Member 'TweenFloatStandardFactory_BP_AppendTweenWidgetAngleTo::TweenWhileGameIsPaused' has a wrong offset!");
static_assert(offsetof(TweenFloatStandardFactory_BP_AppendTweenWidgetAngleTo, SequenceIndex) == 0x000030, "Member 'TweenFloatStandardFactory_BP_AppendTweenWidgetAngleTo::SequenceIndex' has a wrong offset!");
static_assert(offsetof(TweenFloatStandardFactory_BP_AppendTweenWidgetAngleTo, ReturnValue) == 0x000038, "Member 'TweenFloatStandardFactory_BP_AppendTweenWidgetAngleTo::ReturnValue' has a wrong offset!");

// Function TweenMaker.TweenFloatStandardFactory.BP_AppendTweenWidgetOpacityTo
// 0x0040 (0x0040 - 0x0000)
struct TweenFloatStandardFactory_BP_AppendTweenWidgetOpacityTo final
{
public:
	class UTweenContainer*                        TweenContainer;                                    // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UWidget*                                TweenTarget;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, InstancedReference, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         To;                                                // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Duration;                                          // 0x0014(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETweenEaseType                                EaseType;                                          // 0x0018(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x3];                                       // 0x0019(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         NumLoops;                                          // 0x001C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETweenLoopType                                LoopType;                                          // 0x0020(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_21[0x3];                                       // 0x0021(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Delay;                                             // 0x0024(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TimeScale;                                         // 0x0028(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          TweenWhileGameIsPaused;                            // 0x002C(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2D[0x3];                                       // 0x002D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         SequenceIndex;                                     // 0x0030(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_34[0x4];                                       // 0x0034(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UTweenFloat*                            ReturnValue;                                       // 0x0038(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TweenFloatStandardFactory_BP_AppendTweenWidgetOpacityTo) == 0x000008, "Wrong alignment on TweenFloatStandardFactory_BP_AppendTweenWidgetOpacityTo");
static_assert(sizeof(TweenFloatStandardFactory_BP_AppendTweenWidgetOpacityTo) == 0x000040, "Wrong size on TweenFloatStandardFactory_BP_AppendTweenWidgetOpacityTo");
static_assert(offsetof(TweenFloatStandardFactory_BP_AppendTweenWidgetOpacityTo, TweenContainer) == 0x000000, "Member 'TweenFloatStandardFactory_BP_AppendTweenWidgetOpacityTo::TweenContainer' has a wrong offset!");
static_assert(offsetof(TweenFloatStandardFactory_BP_AppendTweenWidgetOpacityTo, TweenTarget) == 0x000008, "Member 'TweenFloatStandardFactory_BP_AppendTweenWidgetOpacityTo::TweenTarget' has a wrong offset!");
static_assert(offsetof(TweenFloatStandardFactory_BP_AppendTweenWidgetOpacityTo, To) == 0x000010, "Member 'TweenFloatStandardFactory_BP_AppendTweenWidgetOpacityTo::To' has a wrong offset!");
static_assert(offsetof(TweenFloatStandardFactory_BP_AppendTweenWidgetOpacityTo, Duration) == 0x000014, "Member 'TweenFloatStandardFactory_BP_AppendTweenWidgetOpacityTo::Duration' has a wrong offset!");
static_assert(offsetof(TweenFloatStandardFactory_BP_AppendTweenWidgetOpacityTo, EaseType) == 0x000018, "Member 'TweenFloatStandardFactory_BP_AppendTweenWidgetOpacityTo::EaseType' has a wrong offset!");
static_assert(offsetof(TweenFloatStandardFactory_BP_AppendTweenWidgetOpacityTo, NumLoops) == 0x00001C, "Member 'TweenFloatStandardFactory_BP_AppendTweenWidgetOpacityTo::NumLoops' has a wrong offset!");
static_assert(offsetof(TweenFloatStandardFactory_BP_AppendTweenWidgetOpacityTo, LoopType) == 0x000020, "Member 'TweenFloatStandardFactory_BP_AppendTweenWidgetOpacityTo::LoopType' has a wrong offset!");
static_assert(offsetof(TweenFloatStandardFactory_BP_AppendTweenWidgetOpacityTo, Delay) == 0x000024, "Member 'TweenFloatStandardFactory_BP_AppendTweenWidgetOpacityTo::Delay' has a wrong offset!");
static_assert(offsetof(TweenFloatStandardFactory_BP_AppendTweenWidgetOpacityTo, TimeScale) == 0x000028, "Member 'TweenFloatStandardFactory_BP_AppendTweenWidgetOpacityTo::TimeScale' has a wrong offset!");
static_assert(offsetof(TweenFloatStandardFactory_BP_AppendTweenWidgetOpacityTo, TweenWhileGameIsPaused) == 0x00002C, "Member 'TweenFloatStandardFactory_BP_AppendTweenWidgetOpacityTo::TweenWhileGameIsPaused' has a wrong offset!");
static_assert(offsetof(TweenFloatStandardFactory_BP_AppendTweenWidgetOpacityTo, SequenceIndex) == 0x000030, "Member 'TweenFloatStandardFactory_BP_AppendTweenWidgetOpacityTo::SequenceIndex' has a wrong offset!");
static_assert(offsetof(TweenFloatStandardFactory_BP_AppendTweenWidgetOpacityTo, ReturnValue) == 0x000038, "Member 'TweenFloatStandardFactory_BP_AppendTweenWidgetOpacityTo::ReturnValue' has a wrong offset!");

// Function TweenMaker.TweenFloatStandardFactory.BP_CreateTweenActorFollowSpline
// 0x0050 (0x0050 - 0x0000)
struct TweenFloatStandardFactory_BP_CreateTweenActorFollowSpline final
{
public:
	class UTweenManagerComponent*                 TweenManager;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 TweenTarget;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UTweenContainer*                        TweenContainer;                                    // 0x0010(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UTweenFloat*                            Tween;                                             // 0x0018(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USplineComponent*                       Spline;                                            // 0x0020(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Duration;                                          // 0x0028(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ApplyRotation;                                     // 0x002C(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ApplyScale;                                        // 0x002D(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          UseConstantSpeed;                                  // 0x002E(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETweenEaseType                                EaseType;                                          // 0x002F(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          DeleteTweenOnHit;                                  // 0x0030(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          DeleteTweenOnOverlap;                              // 0x0031(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_32[0x2];                                       // 0x0032(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         NumLoops;                                          // 0x0034(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETweenLoopType                                LoopType;                                          // 0x0038(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_39[0x3];                                       // 0x0039(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Delay;                                             // 0x003C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TimeScale;                                         // 0x0040(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          TweenWhileGameIsPaused;                            // 0x0044(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_45[0x3];                                       // 0x0045(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         SequenceIndex;                                     // 0x0048(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4C[0x4];                                       // 0x004C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TweenFloatStandardFactory_BP_CreateTweenActorFollowSpline) == 0x000008, "Wrong alignment on TweenFloatStandardFactory_BP_CreateTweenActorFollowSpline");
static_assert(sizeof(TweenFloatStandardFactory_BP_CreateTweenActorFollowSpline) == 0x000050, "Wrong size on TweenFloatStandardFactory_BP_CreateTweenActorFollowSpline");
static_assert(offsetof(TweenFloatStandardFactory_BP_CreateTweenActorFollowSpline, TweenManager) == 0x000000, "Member 'TweenFloatStandardFactory_BP_CreateTweenActorFollowSpline::TweenManager' has a wrong offset!");
static_assert(offsetof(TweenFloatStandardFactory_BP_CreateTweenActorFollowSpline, TweenTarget) == 0x000008, "Member 'TweenFloatStandardFactory_BP_CreateTweenActorFollowSpline::TweenTarget' has a wrong offset!");
static_assert(offsetof(TweenFloatStandardFactory_BP_CreateTweenActorFollowSpline, TweenContainer) == 0x000010, "Member 'TweenFloatStandardFactory_BP_CreateTweenActorFollowSpline::TweenContainer' has a wrong offset!");
static_assert(offsetof(TweenFloatStandardFactory_BP_CreateTweenActorFollowSpline, Tween) == 0x000018, "Member 'TweenFloatStandardFactory_BP_CreateTweenActorFollowSpline::Tween' has a wrong offset!");
static_assert(offsetof(TweenFloatStandardFactory_BP_CreateTweenActorFollowSpline, Spline) == 0x000020, "Member 'TweenFloatStandardFactory_BP_CreateTweenActorFollowSpline::Spline' has a wrong offset!");
static_assert(offsetof(TweenFloatStandardFactory_BP_CreateTweenActorFollowSpline, Duration) == 0x000028, "Member 'TweenFloatStandardFactory_BP_CreateTweenActorFollowSpline::Duration' has a wrong offset!");
static_assert(offsetof(TweenFloatStandardFactory_BP_CreateTweenActorFollowSpline, ApplyRotation) == 0x00002C, "Member 'TweenFloatStandardFactory_BP_CreateTweenActorFollowSpline::ApplyRotation' has a wrong offset!");
static_assert(offsetof(TweenFloatStandardFactory_BP_CreateTweenActorFollowSpline, ApplyScale) == 0x00002D, "Member 'TweenFloatStandardFactory_BP_CreateTweenActorFollowSpline::ApplyScale' has a wrong offset!");
static_assert(offsetof(TweenFloatStandardFactory_BP_CreateTweenActorFollowSpline, UseConstantSpeed) == 0x00002E, "Member 'TweenFloatStandardFactory_BP_CreateTweenActorFollowSpline::UseConstantSpeed' has a wrong offset!");
static_assert(offsetof(TweenFloatStandardFactory_BP_CreateTweenActorFollowSpline, EaseType) == 0x00002F, "Member 'TweenFloatStandardFactory_BP_CreateTweenActorFollowSpline::EaseType' has a wrong offset!");
static_assert(offsetof(TweenFloatStandardFactory_BP_CreateTweenActorFollowSpline, DeleteTweenOnHit) == 0x000030, "Member 'TweenFloatStandardFactory_BP_CreateTweenActorFollowSpline::DeleteTweenOnHit' has a wrong offset!");
static_assert(offsetof(TweenFloatStandardFactory_BP_CreateTweenActorFollowSpline, DeleteTweenOnOverlap) == 0x000031, "Member 'TweenFloatStandardFactory_BP_CreateTweenActorFollowSpline::DeleteTweenOnOverlap' has a wrong offset!");
static_assert(offsetof(TweenFloatStandardFactory_BP_CreateTweenActorFollowSpline, NumLoops) == 0x000034, "Member 'TweenFloatStandardFactory_BP_CreateTweenActorFollowSpline::NumLoops' has a wrong offset!");
static_assert(offsetof(TweenFloatStandardFactory_BP_CreateTweenActorFollowSpline, LoopType) == 0x000038, "Member 'TweenFloatStandardFactory_BP_CreateTweenActorFollowSpline::LoopType' has a wrong offset!");
static_assert(offsetof(TweenFloatStandardFactory_BP_CreateTweenActorFollowSpline, Delay) == 0x00003C, "Member 'TweenFloatStandardFactory_BP_CreateTweenActorFollowSpline::Delay' has a wrong offset!");
static_assert(offsetof(TweenFloatStandardFactory_BP_CreateTweenActorFollowSpline, TimeScale) == 0x000040, "Member 'TweenFloatStandardFactory_BP_CreateTweenActorFollowSpline::TimeScale' has a wrong offset!");
static_assert(offsetof(TweenFloatStandardFactory_BP_CreateTweenActorFollowSpline, TweenWhileGameIsPaused) == 0x000044, "Member 'TweenFloatStandardFactory_BP_CreateTweenActorFollowSpline::TweenWhileGameIsPaused' has a wrong offset!");
static_assert(offsetof(TweenFloatStandardFactory_BP_CreateTweenActorFollowSpline, SequenceIndex) == 0x000048, "Member 'TweenFloatStandardFactory_BP_CreateTweenActorFollowSpline::SequenceIndex' has a wrong offset!");

// Function TweenMaker.TweenFloatStandardFactory.BP_CreateTweenCustomFloat
// 0x0048 (0x0048 - 0x0000)
struct TweenFloatStandardFactory_BP_CreateTweenCustomFloat final
{
public:
	class UTweenManagerComponent*                 TweenManager;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UObject*                                TweenTarget;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UTweenContainer*                        TweenContainer;                                    // 0x0010(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UTweenFloat*                            Tween;                                             // 0x0018(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         From;                                              // 0x0020(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         To;                                                // 0x0024(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Duration;                                          // 0x0028(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETweenEaseType                                EaseType;                                          // 0x002C(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2D[0x3];                                       // 0x002D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         NumLoops;                                          // 0x0030(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETweenLoopType                                LoopType;                                          // 0x0034(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_35[0x3];                                       // 0x0035(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Delay;                                             // 0x0038(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TimeScale;                                         // 0x003C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          TweenWhileGameIsPaused;                            // 0x0040(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_41[0x3];                                       // 0x0041(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         SequenceIndex;                                     // 0x0044(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TweenFloatStandardFactory_BP_CreateTweenCustomFloat) == 0x000008, "Wrong alignment on TweenFloatStandardFactory_BP_CreateTweenCustomFloat");
static_assert(sizeof(TweenFloatStandardFactory_BP_CreateTweenCustomFloat) == 0x000048, "Wrong size on TweenFloatStandardFactory_BP_CreateTweenCustomFloat");
static_assert(offsetof(TweenFloatStandardFactory_BP_CreateTweenCustomFloat, TweenManager) == 0x000000, "Member 'TweenFloatStandardFactory_BP_CreateTweenCustomFloat::TweenManager' has a wrong offset!");
static_assert(offsetof(TweenFloatStandardFactory_BP_CreateTweenCustomFloat, TweenTarget) == 0x000008, "Member 'TweenFloatStandardFactory_BP_CreateTweenCustomFloat::TweenTarget' has a wrong offset!");
static_assert(offsetof(TweenFloatStandardFactory_BP_CreateTweenCustomFloat, TweenContainer) == 0x000010, "Member 'TweenFloatStandardFactory_BP_CreateTweenCustomFloat::TweenContainer' has a wrong offset!");
static_assert(offsetof(TweenFloatStandardFactory_BP_CreateTweenCustomFloat, Tween) == 0x000018, "Member 'TweenFloatStandardFactory_BP_CreateTweenCustomFloat::Tween' has a wrong offset!");
static_assert(offsetof(TweenFloatStandardFactory_BP_CreateTweenCustomFloat, From) == 0x000020, "Member 'TweenFloatStandardFactory_BP_CreateTweenCustomFloat::From' has a wrong offset!");
static_assert(offsetof(TweenFloatStandardFactory_BP_CreateTweenCustomFloat, To) == 0x000024, "Member 'TweenFloatStandardFactory_BP_CreateTweenCustomFloat::To' has a wrong offset!");
static_assert(offsetof(TweenFloatStandardFactory_BP_CreateTweenCustomFloat, Duration) == 0x000028, "Member 'TweenFloatStandardFactory_BP_CreateTweenCustomFloat::Duration' has a wrong offset!");
static_assert(offsetof(TweenFloatStandardFactory_BP_CreateTweenCustomFloat, EaseType) == 0x00002C, "Member 'TweenFloatStandardFactory_BP_CreateTweenCustomFloat::EaseType' has a wrong offset!");
static_assert(offsetof(TweenFloatStandardFactory_BP_CreateTweenCustomFloat, NumLoops) == 0x000030, "Member 'TweenFloatStandardFactory_BP_CreateTweenCustomFloat::NumLoops' has a wrong offset!");
static_assert(offsetof(TweenFloatStandardFactory_BP_CreateTweenCustomFloat, LoopType) == 0x000034, "Member 'TweenFloatStandardFactory_BP_CreateTweenCustomFloat::LoopType' has a wrong offset!");
static_assert(offsetof(TweenFloatStandardFactory_BP_CreateTweenCustomFloat, Delay) == 0x000038, "Member 'TweenFloatStandardFactory_BP_CreateTweenCustomFloat::Delay' has a wrong offset!");
static_assert(offsetof(TweenFloatStandardFactory_BP_CreateTweenCustomFloat, TimeScale) == 0x00003C, "Member 'TweenFloatStandardFactory_BP_CreateTweenCustomFloat::TimeScale' has a wrong offset!");
static_assert(offsetof(TweenFloatStandardFactory_BP_CreateTweenCustomFloat, TweenWhileGameIsPaused) == 0x000040, "Member 'TweenFloatStandardFactory_BP_CreateTweenCustomFloat::TweenWhileGameIsPaused' has a wrong offset!");
static_assert(offsetof(TweenFloatStandardFactory_BP_CreateTweenCustomFloat, SequenceIndex) == 0x000044, "Member 'TweenFloatStandardFactory_BP_CreateTweenCustomFloat::SequenceIndex' has a wrong offset!");

// Function TweenMaker.TweenFloatStandardFactory.BP_CreateTweenMaterialFloatFromTo
// 0x0050 (0x0050 - 0x0000)
struct TweenFloatStandardFactory_BP_CreateTweenMaterialFloatFromTo final
{
public:
	class UTweenManagerComponent*                 TweenManager;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UMaterialInstanceDynamic*               TweenTarget;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UTweenContainer*                        TweenContainer;                                    // 0x0010(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UTweenFloat*                            Tween;                                             // 0x0018(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   ParameterName;                                     // 0x0020(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         From;                                              // 0x0028(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         To;                                                // 0x002C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Duration;                                          // 0x0030(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETweenEaseType                                EaseType;                                          // 0x0034(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_35[0x3];                                       // 0x0035(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         NumLoops;                                          // 0x0038(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETweenLoopType                                LoopType;                                          // 0x003C(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_3D[0x3];                                       // 0x003D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Delay;                                             // 0x0040(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TimeScale;                                         // 0x0044(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          TweenWhileGameIsPaused;                            // 0x0048(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_49[0x3];                                       // 0x0049(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         SequenceIndex;                                     // 0x004C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TweenFloatStandardFactory_BP_CreateTweenMaterialFloatFromTo) == 0x000008, "Wrong alignment on TweenFloatStandardFactory_BP_CreateTweenMaterialFloatFromTo");
static_assert(sizeof(TweenFloatStandardFactory_BP_CreateTweenMaterialFloatFromTo) == 0x000050, "Wrong size on TweenFloatStandardFactory_BP_CreateTweenMaterialFloatFromTo");
static_assert(offsetof(TweenFloatStandardFactory_BP_CreateTweenMaterialFloatFromTo, TweenManager) == 0x000000, "Member 'TweenFloatStandardFactory_BP_CreateTweenMaterialFloatFromTo::TweenManager' has a wrong offset!");
static_assert(offsetof(TweenFloatStandardFactory_BP_CreateTweenMaterialFloatFromTo, TweenTarget) == 0x000008, "Member 'TweenFloatStandardFactory_BP_CreateTweenMaterialFloatFromTo::TweenTarget' has a wrong offset!");
static_assert(offsetof(TweenFloatStandardFactory_BP_CreateTweenMaterialFloatFromTo, TweenContainer) == 0x000010, "Member 'TweenFloatStandardFactory_BP_CreateTweenMaterialFloatFromTo::TweenContainer' has a wrong offset!");
static_assert(offsetof(TweenFloatStandardFactory_BP_CreateTweenMaterialFloatFromTo, Tween) == 0x000018, "Member 'TweenFloatStandardFactory_BP_CreateTweenMaterialFloatFromTo::Tween' has a wrong offset!");
static_assert(offsetof(TweenFloatStandardFactory_BP_CreateTweenMaterialFloatFromTo, ParameterName) == 0x000020, "Member 'TweenFloatStandardFactory_BP_CreateTweenMaterialFloatFromTo::ParameterName' has a wrong offset!");
static_assert(offsetof(TweenFloatStandardFactory_BP_CreateTweenMaterialFloatFromTo, From) == 0x000028, "Member 'TweenFloatStandardFactory_BP_CreateTweenMaterialFloatFromTo::From' has a wrong offset!");
static_assert(offsetof(TweenFloatStandardFactory_BP_CreateTweenMaterialFloatFromTo, To) == 0x00002C, "Member 'TweenFloatStandardFactory_BP_CreateTweenMaterialFloatFromTo::To' has a wrong offset!");
static_assert(offsetof(TweenFloatStandardFactory_BP_CreateTweenMaterialFloatFromTo, Duration) == 0x000030, "Member 'TweenFloatStandardFactory_BP_CreateTweenMaterialFloatFromTo::Duration' has a wrong offset!");
static_assert(offsetof(TweenFloatStandardFactory_BP_CreateTweenMaterialFloatFromTo, EaseType) == 0x000034, "Member 'TweenFloatStandardFactory_BP_CreateTweenMaterialFloatFromTo::EaseType' has a wrong offset!");
static_assert(offsetof(TweenFloatStandardFactory_BP_CreateTweenMaterialFloatFromTo, NumLoops) == 0x000038, "Member 'TweenFloatStandardFactory_BP_CreateTweenMaterialFloatFromTo::NumLoops' has a wrong offset!");
static_assert(offsetof(TweenFloatStandardFactory_BP_CreateTweenMaterialFloatFromTo, LoopType) == 0x00003C, "Member 'TweenFloatStandardFactory_BP_CreateTweenMaterialFloatFromTo::LoopType' has a wrong offset!");
static_assert(offsetof(TweenFloatStandardFactory_BP_CreateTweenMaterialFloatFromTo, Delay) == 0x000040, "Member 'TweenFloatStandardFactory_BP_CreateTweenMaterialFloatFromTo::Delay' has a wrong offset!");
static_assert(offsetof(TweenFloatStandardFactory_BP_CreateTweenMaterialFloatFromTo, TimeScale) == 0x000044, "Member 'TweenFloatStandardFactory_BP_CreateTweenMaterialFloatFromTo::TimeScale' has a wrong offset!");
static_assert(offsetof(TweenFloatStandardFactory_BP_CreateTweenMaterialFloatFromTo, TweenWhileGameIsPaused) == 0x000048, "Member 'TweenFloatStandardFactory_BP_CreateTweenMaterialFloatFromTo::TweenWhileGameIsPaused' has a wrong offset!");
static_assert(offsetof(TweenFloatStandardFactory_BP_CreateTweenMaterialFloatFromTo, SequenceIndex) == 0x00004C, "Member 'TweenFloatStandardFactory_BP_CreateTweenMaterialFloatFromTo::SequenceIndex' has a wrong offset!");

// Function TweenMaker.TweenFloatStandardFactory.BP_CreateTweenMaterialFloatTo
// 0x0050 (0x0050 - 0x0000)
struct TweenFloatStandardFactory_BP_CreateTweenMaterialFloatTo final
{
public:
	class UTweenManagerComponent*                 TweenManager;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UMaterialInstanceDynamic*               TweenTarget;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UTweenContainer*                        TweenContainer;                                    // 0x0010(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UTweenFloat*                            Tween;                                             // 0x0018(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   ParameterName;                                     // 0x0020(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         To;                                                // 0x0028(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Duration;                                          // 0x002C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETweenEaseType                                EaseType;                                          // 0x0030(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_31[0x3];                                       // 0x0031(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         NumLoops;                                          // 0x0034(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETweenLoopType                                LoopType;                                          // 0x0038(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_39[0x3];                                       // 0x0039(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Delay;                                             // 0x003C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TimeScale;                                         // 0x0040(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          TweenWhileGameIsPaused;                            // 0x0044(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_45[0x3];                                       // 0x0045(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         SequenceIndex;                                     // 0x0048(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4C[0x4];                                       // 0x004C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TweenFloatStandardFactory_BP_CreateTweenMaterialFloatTo) == 0x000008, "Wrong alignment on TweenFloatStandardFactory_BP_CreateTweenMaterialFloatTo");
static_assert(sizeof(TweenFloatStandardFactory_BP_CreateTweenMaterialFloatTo) == 0x000050, "Wrong size on TweenFloatStandardFactory_BP_CreateTweenMaterialFloatTo");
static_assert(offsetof(TweenFloatStandardFactory_BP_CreateTweenMaterialFloatTo, TweenManager) == 0x000000, "Member 'TweenFloatStandardFactory_BP_CreateTweenMaterialFloatTo::TweenManager' has a wrong offset!");
static_assert(offsetof(TweenFloatStandardFactory_BP_CreateTweenMaterialFloatTo, TweenTarget) == 0x000008, "Member 'TweenFloatStandardFactory_BP_CreateTweenMaterialFloatTo::TweenTarget' has a wrong offset!");
static_assert(offsetof(TweenFloatStandardFactory_BP_CreateTweenMaterialFloatTo, TweenContainer) == 0x000010, "Member 'TweenFloatStandardFactory_BP_CreateTweenMaterialFloatTo::TweenContainer' has a wrong offset!");
static_assert(offsetof(TweenFloatStandardFactory_BP_CreateTweenMaterialFloatTo, Tween) == 0x000018, "Member 'TweenFloatStandardFactory_BP_CreateTweenMaterialFloatTo::Tween' has a wrong offset!");
static_assert(offsetof(TweenFloatStandardFactory_BP_CreateTweenMaterialFloatTo, ParameterName) == 0x000020, "Member 'TweenFloatStandardFactory_BP_CreateTweenMaterialFloatTo::ParameterName' has a wrong offset!");
static_assert(offsetof(TweenFloatStandardFactory_BP_CreateTweenMaterialFloatTo, To) == 0x000028, "Member 'TweenFloatStandardFactory_BP_CreateTweenMaterialFloatTo::To' has a wrong offset!");
static_assert(offsetof(TweenFloatStandardFactory_BP_CreateTweenMaterialFloatTo, Duration) == 0x00002C, "Member 'TweenFloatStandardFactory_BP_CreateTweenMaterialFloatTo::Duration' has a wrong offset!");
static_assert(offsetof(TweenFloatStandardFactory_BP_CreateTweenMaterialFloatTo, EaseType) == 0x000030, "Member 'TweenFloatStandardFactory_BP_CreateTweenMaterialFloatTo::EaseType' has a wrong offset!");
static_assert(offsetof(TweenFloatStandardFactory_BP_CreateTweenMaterialFloatTo, NumLoops) == 0x000034, "Member 'TweenFloatStandardFactory_BP_CreateTweenMaterialFloatTo::NumLoops' has a wrong offset!");
static_assert(offsetof(TweenFloatStandardFactory_BP_CreateTweenMaterialFloatTo, LoopType) == 0x000038, "Member 'TweenFloatStandardFactory_BP_CreateTweenMaterialFloatTo::LoopType' has a wrong offset!");
static_assert(offsetof(TweenFloatStandardFactory_BP_CreateTweenMaterialFloatTo, Delay) == 0x00003C, "Member 'TweenFloatStandardFactory_BP_CreateTweenMaterialFloatTo::Delay' has a wrong offset!");
static_assert(offsetof(TweenFloatStandardFactory_BP_CreateTweenMaterialFloatTo, TimeScale) == 0x000040, "Member 'TweenFloatStandardFactory_BP_CreateTweenMaterialFloatTo::TimeScale' has a wrong offset!");
static_assert(offsetof(TweenFloatStandardFactory_BP_CreateTweenMaterialFloatTo, TweenWhileGameIsPaused) == 0x000044, "Member 'TweenFloatStandardFactory_BP_CreateTweenMaterialFloatTo::TweenWhileGameIsPaused' has a wrong offset!");
static_assert(offsetof(TweenFloatStandardFactory_BP_CreateTweenMaterialFloatTo, SequenceIndex) == 0x000048, "Member 'TweenFloatStandardFactory_BP_CreateTweenMaterialFloatTo::SequenceIndex' has a wrong offset!");

// Function TweenMaker.TweenFloatStandardFactory.BP_CreateTweenRotateActorAroundPoint
// 0x0068 (0x0068 - 0x0000)
struct TweenFloatStandardFactory_BP_CreateTweenRotateActorAroundPoint final
{
public:
	class UTweenManagerComponent*                 TweenManager;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 TweenTarget;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UTweenContainer*                        TweenContainer;                                    // 0x0010(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UTweenFloat*                            Tween;                                             // 0x0018(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                PivotPoint;                                        // 0x0020(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         StartingAngle;                                     // 0x002C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         EndingAngle;                                       // 0x0030(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Radius;                                            // 0x0034(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                Axis;                                              // 0x0038(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Duration;                                          // 0x0044(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETweenEaseType                                EaseType;                                          // 0x0048(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          DeleteTweenOnHit;                                  // 0x0049(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          DeleteTweenOnOverlap;                              // 0x004A(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4B[0x1];                                       // 0x004B(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         NumLoops;                                          // 0x004C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETweenLoopType                                LoopType;                                          // 0x0050(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_51[0x3];                                       // 0x0051(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Delay;                                             // 0x0054(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TimeScale;                                         // 0x0058(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          TweenWhileGameIsPaused;                            // 0x005C(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5D[0x3];                                       // 0x005D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         SequenceIndex;                                     // 0x0060(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_64[0x4];                                       // 0x0064(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TweenFloatStandardFactory_BP_CreateTweenRotateActorAroundPoint) == 0x000008, "Wrong alignment on TweenFloatStandardFactory_BP_CreateTweenRotateActorAroundPoint");
static_assert(sizeof(TweenFloatStandardFactory_BP_CreateTweenRotateActorAroundPoint) == 0x000068, "Wrong size on TweenFloatStandardFactory_BP_CreateTweenRotateActorAroundPoint");
static_assert(offsetof(TweenFloatStandardFactory_BP_CreateTweenRotateActorAroundPoint, TweenManager) == 0x000000, "Member 'TweenFloatStandardFactory_BP_CreateTweenRotateActorAroundPoint::TweenManager' has a wrong offset!");
static_assert(offsetof(TweenFloatStandardFactory_BP_CreateTweenRotateActorAroundPoint, TweenTarget) == 0x000008, "Member 'TweenFloatStandardFactory_BP_CreateTweenRotateActorAroundPoint::TweenTarget' has a wrong offset!");
static_assert(offsetof(TweenFloatStandardFactory_BP_CreateTweenRotateActorAroundPoint, TweenContainer) == 0x000010, "Member 'TweenFloatStandardFactory_BP_CreateTweenRotateActorAroundPoint::TweenContainer' has a wrong offset!");
static_assert(offsetof(TweenFloatStandardFactory_BP_CreateTweenRotateActorAroundPoint, Tween) == 0x000018, "Member 'TweenFloatStandardFactory_BP_CreateTweenRotateActorAroundPoint::Tween' has a wrong offset!");
static_assert(offsetof(TweenFloatStandardFactory_BP_CreateTweenRotateActorAroundPoint, PivotPoint) == 0x000020, "Member 'TweenFloatStandardFactory_BP_CreateTweenRotateActorAroundPoint::PivotPoint' has a wrong offset!");
static_assert(offsetof(TweenFloatStandardFactory_BP_CreateTweenRotateActorAroundPoint, StartingAngle) == 0x00002C, "Member 'TweenFloatStandardFactory_BP_CreateTweenRotateActorAroundPoint::StartingAngle' has a wrong offset!");
static_assert(offsetof(TweenFloatStandardFactory_BP_CreateTweenRotateActorAroundPoint, EndingAngle) == 0x000030, "Member 'TweenFloatStandardFactory_BP_CreateTweenRotateActorAroundPoint::EndingAngle' has a wrong offset!");
static_assert(offsetof(TweenFloatStandardFactory_BP_CreateTweenRotateActorAroundPoint, Radius) == 0x000034, "Member 'TweenFloatStandardFactory_BP_CreateTweenRotateActorAroundPoint::Radius' has a wrong offset!");
static_assert(offsetof(TweenFloatStandardFactory_BP_CreateTweenRotateActorAroundPoint, Axis) == 0x000038, "Member 'TweenFloatStandardFactory_BP_CreateTweenRotateActorAroundPoint::Axis' has a wrong offset!");
static_assert(offsetof(TweenFloatStandardFactory_BP_CreateTweenRotateActorAroundPoint, Duration) == 0x000044, "Member 'TweenFloatStandardFactory_BP_CreateTweenRotateActorAroundPoint::Duration' has a wrong offset!");
static_assert(offsetof(TweenFloatStandardFactory_BP_CreateTweenRotateActorAroundPoint, EaseType) == 0x000048, "Member 'TweenFloatStandardFactory_BP_CreateTweenRotateActorAroundPoint::EaseType' has a wrong offset!");
static_assert(offsetof(TweenFloatStandardFactory_BP_CreateTweenRotateActorAroundPoint, DeleteTweenOnHit) == 0x000049, "Member 'TweenFloatStandardFactory_BP_CreateTweenRotateActorAroundPoint::DeleteTweenOnHit' has a wrong offset!");
static_assert(offsetof(TweenFloatStandardFactory_BP_CreateTweenRotateActorAroundPoint, DeleteTweenOnOverlap) == 0x00004A, "Member 'TweenFloatStandardFactory_BP_CreateTweenRotateActorAroundPoint::DeleteTweenOnOverlap' has a wrong offset!");
static_assert(offsetof(TweenFloatStandardFactory_BP_CreateTweenRotateActorAroundPoint, NumLoops) == 0x00004C, "Member 'TweenFloatStandardFactory_BP_CreateTweenRotateActorAroundPoint::NumLoops' has a wrong offset!");
static_assert(offsetof(TweenFloatStandardFactory_BP_CreateTweenRotateActorAroundPoint, LoopType) == 0x000050, "Member 'TweenFloatStandardFactory_BP_CreateTweenRotateActorAroundPoint::LoopType' has a wrong offset!");
static_assert(offsetof(TweenFloatStandardFactory_BP_CreateTweenRotateActorAroundPoint, Delay) == 0x000054, "Member 'TweenFloatStandardFactory_BP_CreateTweenRotateActorAroundPoint::Delay' has a wrong offset!");
static_assert(offsetof(TweenFloatStandardFactory_BP_CreateTweenRotateActorAroundPoint, TimeScale) == 0x000058, "Member 'TweenFloatStandardFactory_BP_CreateTweenRotateActorAroundPoint::TimeScale' has a wrong offset!");
static_assert(offsetof(TweenFloatStandardFactory_BP_CreateTweenRotateActorAroundPoint, TweenWhileGameIsPaused) == 0x00005C, "Member 'TweenFloatStandardFactory_BP_CreateTweenRotateActorAroundPoint::TweenWhileGameIsPaused' has a wrong offset!");
static_assert(offsetof(TweenFloatStandardFactory_BP_CreateTweenRotateActorAroundPoint, SequenceIndex) == 0x000060, "Member 'TweenFloatStandardFactory_BP_CreateTweenRotateActorAroundPoint::SequenceIndex' has a wrong offset!");

// Function TweenMaker.TweenFloatStandardFactory.BP_CreateTweenRotateActorAroundPointByOffset
// 0x0058 (0x0058 - 0x0000)
struct TweenFloatStandardFactory_BP_CreateTweenRotateActorAroundPointByOffset final
{
public:
	class UTweenManagerComponent*                 TweenManager;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 TweenTarget;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UTweenContainer*                        TweenContainer;                                    // 0x0010(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UTweenFloat*                            Tween;                                             // 0x0018(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                PivotPoint;                                        // 0x0020(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         OffsetAngle;                                       // 0x002C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETweenReferenceAxis                           ReferenceAxis;                                     // 0x0030(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_31[0x3];                                       // 0x0031(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Duration;                                          // 0x0034(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETweenEaseType                                EaseType;                                          // 0x0038(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          DeleteTweenOnHit;                                  // 0x0039(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          DeleteTweenOnOverlap;                              // 0x003A(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_3B[0x1];                                       // 0x003B(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         NumLoops;                                          // 0x003C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETweenLoopType                                LoopType;                                          // 0x0040(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_41[0x3];                                       // 0x0041(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Delay;                                             // 0x0044(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TimeScale;                                         // 0x0048(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          TweenWhileGameIsPaused;                            // 0x004C(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4D[0x3];                                       // 0x004D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         SequenceIndex;                                     // 0x0050(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_54[0x4];                                       // 0x0054(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TweenFloatStandardFactory_BP_CreateTweenRotateActorAroundPointByOffset) == 0x000008, "Wrong alignment on TweenFloatStandardFactory_BP_CreateTweenRotateActorAroundPointByOffset");
static_assert(sizeof(TweenFloatStandardFactory_BP_CreateTweenRotateActorAroundPointByOffset) == 0x000058, "Wrong size on TweenFloatStandardFactory_BP_CreateTweenRotateActorAroundPointByOffset");
static_assert(offsetof(TweenFloatStandardFactory_BP_CreateTweenRotateActorAroundPointByOffset, TweenManager) == 0x000000, "Member 'TweenFloatStandardFactory_BP_CreateTweenRotateActorAroundPointByOffset::TweenManager' has a wrong offset!");
static_assert(offsetof(TweenFloatStandardFactory_BP_CreateTweenRotateActorAroundPointByOffset, TweenTarget) == 0x000008, "Member 'TweenFloatStandardFactory_BP_CreateTweenRotateActorAroundPointByOffset::TweenTarget' has a wrong offset!");
static_assert(offsetof(TweenFloatStandardFactory_BP_CreateTweenRotateActorAroundPointByOffset, TweenContainer) == 0x000010, "Member 'TweenFloatStandardFactory_BP_CreateTweenRotateActorAroundPointByOffset::TweenContainer' has a wrong offset!");
static_assert(offsetof(TweenFloatStandardFactory_BP_CreateTweenRotateActorAroundPointByOffset, Tween) == 0x000018, "Member 'TweenFloatStandardFactory_BP_CreateTweenRotateActorAroundPointByOffset::Tween' has a wrong offset!");
static_assert(offsetof(TweenFloatStandardFactory_BP_CreateTweenRotateActorAroundPointByOffset, PivotPoint) == 0x000020, "Member 'TweenFloatStandardFactory_BP_CreateTweenRotateActorAroundPointByOffset::PivotPoint' has a wrong offset!");
static_assert(offsetof(TweenFloatStandardFactory_BP_CreateTweenRotateActorAroundPointByOffset, OffsetAngle) == 0x00002C, "Member 'TweenFloatStandardFactory_BP_CreateTweenRotateActorAroundPointByOffset::OffsetAngle' has a wrong offset!");
static_assert(offsetof(TweenFloatStandardFactory_BP_CreateTweenRotateActorAroundPointByOffset, ReferenceAxis) == 0x000030, "Member 'TweenFloatStandardFactory_BP_CreateTweenRotateActorAroundPointByOffset::ReferenceAxis' has a wrong offset!");
static_assert(offsetof(TweenFloatStandardFactory_BP_CreateTweenRotateActorAroundPointByOffset, Duration) == 0x000034, "Member 'TweenFloatStandardFactory_BP_CreateTweenRotateActorAroundPointByOffset::Duration' has a wrong offset!");
static_assert(offsetof(TweenFloatStandardFactory_BP_CreateTweenRotateActorAroundPointByOffset, EaseType) == 0x000038, "Member 'TweenFloatStandardFactory_BP_CreateTweenRotateActorAroundPointByOffset::EaseType' has a wrong offset!");
static_assert(offsetof(TweenFloatStandardFactory_BP_CreateTweenRotateActorAroundPointByOffset, DeleteTweenOnHit) == 0x000039, "Member 'TweenFloatStandardFactory_BP_CreateTweenRotateActorAroundPointByOffset::DeleteTweenOnHit' has a wrong offset!");
static_assert(offsetof(TweenFloatStandardFactory_BP_CreateTweenRotateActorAroundPointByOffset, DeleteTweenOnOverlap) == 0x00003A, "Member 'TweenFloatStandardFactory_BP_CreateTweenRotateActorAroundPointByOffset::DeleteTweenOnOverlap' has a wrong offset!");
static_assert(offsetof(TweenFloatStandardFactory_BP_CreateTweenRotateActorAroundPointByOffset, NumLoops) == 0x00003C, "Member 'TweenFloatStandardFactory_BP_CreateTweenRotateActorAroundPointByOffset::NumLoops' has a wrong offset!");
static_assert(offsetof(TweenFloatStandardFactory_BP_CreateTweenRotateActorAroundPointByOffset, LoopType) == 0x000040, "Member 'TweenFloatStandardFactory_BP_CreateTweenRotateActorAroundPointByOffset::LoopType' has a wrong offset!");
static_assert(offsetof(TweenFloatStandardFactory_BP_CreateTweenRotateActorAroundPointByOffset, Delay) == 0x000044, "Member 'TweenFloatStandardFactory_BP_CreateTweenRotateActorAroundPointByOffset::Delay' has a wrong offset!");
static_assert(offsetof(TweenFloatStandardFactory_BP_CreateTweenRotateActorAroundPointByOffset, TimeScale) == 0x000048, "Member 'TweenFloatStandardFactory_BP_CreateTweenRotateActorAroundPointByOffset::TimeScale' has a wrong offset!");
static_assert(offsetof(TweenFloatStandardFactory_BP_CreateTweenRotateActorAroundPointByOffset, TweenWhileGameIsPaused) == 0x00004C, "Member 'TweenFloatStandardFactory_BP_CreateTweenRotateActorAroundPointByOffset::TweenWhileGameIsPaused' has a wrong offset!");
static_assert(offsetof(TweenFloatStandardFactory_BP_CreateTweenRotateActorAroundPointByOffset, SequenceIndex) == 0x000050, "Member 'TweenFloatStandardFactory_BP_CreateTweenRotateActorAroundPointByOffset::SequenceIndex' has a wrong offset!");

// Function TweenMaker.TweenFloatStandardFactory.BP_CreateTweenRotateSceneComponentAroundPoint
// 0x0068 (0x0068 - 0x0000)
struct TweenFloatStandardFactory_BP_CreateTweenRotateSceneComponentAroundPoint final
{
public:
	class UTweenManagerComponent*                 TweenManager;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USceneComponent*                        TweenTarget;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, InstancedReference, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UTweenContainer*                        TweenContainer;                                    // 0x0010(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UTweenFloat*                            Tween;                                             // 0x0018(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                PivotPoint;                                        // 0x0020(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         StartingAngle;                                     // 0x002C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         EndingAngle;                                       // 0x0030(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Radius;                                            // 0x0034(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                Axis;                                              // 0x0038(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Duration;                                          // 0x0044(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETweenEaseType                                EaseType;                                          // 0x0048(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          DeleteTweenOnHit;                                  // 0x0049(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          DeleteTweenOnOverlap;                              // 0x004A(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4B[0x1];                                       // 0x004B(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         NumLoops;                                          // 0x004C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETweenLoopType                                LoopType;                                          // 0x0050(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_51[0x3];                                       // 0x0051(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Delay;                                             // 0x0054(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TimeScale;                                         // 0x0058(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          TweenWhileGameIsPaused;                            // 0x005C(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5D[0x3];                                       // 0x005D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         SequenceIndex;                                     // 0x0060(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_64[0x4];                                       // 0x0064(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TweenFloatStandardFactory_BP_CreateTweenRotateSceneComponentAroundPoint) == 0x000008, "Wrong alignment on TweenFloatStandardFactory_BP_CreateTweenRotateSceneComponentAroundPoint");
static_assert(sizeof(TweenFloatStandardFactory_BP_CreateTweenRotateSceneComponentAroundPoint) == 0x000068, "Wrong size on TweenFloatStandardFactory_BP_CreateTweenRotateSceneComponentAroundPoint");
static_assert(offsetof(TweenFloatStandardFactory_BP_CreateTweenRotateSceneComponentAroundPoint, TweenManager) == 0x000000, "Member 'TweenFloatStandardFactory_BP_CreateTweenRotateSceneComponentAroundPoint::TweenManager' has a wrong offset!");
static_assert(offsetof(TweenFloatStandardFactory_BP_CreateTweenRotateSceneComponentAroundPoint, TweenTarget) == 0x000008, "Member 'TweenFloatStandardFactory_BP_CreateTweenRotateSceneComponentAroundPoint::TweenTarget' has a wrong offset!");
static_assert(offsetof(TweenFloatStandardFactory_BP_CreateTweenRotateSceneComponentAroundPoint, TweenContainer) == 0x000010, "Member 'TweenFloatStandardFactory_BP_CreateTweenRotateSceneComponentAroundPoint::TweenContainer' has a wrong offset!");
static_assert(offsetof(TweenFloatStandardFactory_BP_CreateTweenRotateSceneComponentAroundPoint, Tween) == 0x000018, "Member 'TweenFloatStandardFactory_BP_CreateTweenRotateSceneComponentAroundPoint::Tween' has a wrong offset!");
static_assert(offsetof(TweenFloatStandardFactory_BP_CreateTweenRotateSceneComponentAroundPoint, PivotPoint) == 0x000020, "Member 'TweenFloatStandardFactory_BP_CreateTweenRotateSceneComponentAroundPoint::PivotPoint' has a wrong offset!");
static_assert(offsetof(TweenFloatStandardFactory_BP_CreateTweenRotateSceneComponentAroundPoint, StartingAngle) == 0x00002C, "Member 'TweenFloatStandardFactory_BP_CreateTweenRotateSceneComponentAroundPoint::StartingAngle' has a wrong offset!");
static_assert(offsetof(TweenFloatStandardFactory_BP_CreateTweenRotateSceneComponentAroundPoint, EndingAngle) == 0x000030, "Member 'TweenFloatStandardFactory_BP_CreateTweenRotateSceneComponentAroundPoint::EndingAngle' has a wrong offset!");
static_assert(offsetof(TweenFloatStandardFactory_BP_CreateTweenRotateSceneComponentAroundPoint, Radius) == 0x000034, "Member 'TweenFloatStandardFactory_BP_CreateTweenRotateSceneComponentAroundPoint::Radius' has a wrong offset!");
static_assert(offsetof(TweenFloatStandardFactory_BP_CreateTweenRotateSceneComponentAroundPoint, Axis) == 0x000038, "Member 'TweenFloatStandardFactory_BP_CreateTweenRotateSceneComponentAroundPoint::Axis' has a wrong offset!");
static_assert(offsetof(TweenFloatStandardFactory_BP_CreateTweenRotateSceneComponentAroundPoint, Duration) == 0x000044, "Member 'TweenFloatStandardFactory_BP_CreateTweenRotateSceneComponentAroundPoint::Duration' has a wrong offset!");
static_assert(offsetof(TweenFloatStandardFactory_BP_CreateTweenRotateSceneComponentAroundPoint, EaseType) == 0x000048, "Member 'TweenFloatStandardFactory_BP_CreateTweenRotateSceneComponentAroundPoint::EaseType' has a wrong offset!");
static_assert(offsetof(TweenFloatStandardFactory_BP_CreateTweenRotateSceneComponentAroundPoint, DeleteTweenOnHit) == 0x000049, "Member 'TweenFloatStandardFactory_BP_CreateTweenRotateSceneComponentAroundPoint::DeleteTweenOnHit' has a wrong offset!");
static_assert(offsetof(TweenFloatStandardFactory_BP_CreateTweenRotateSceneComponentAroundPoint, DeleteTweenOnOverlap) == 0x00004A, "Member 'TweenFloatStandardFactory_BP_CreateTweenRotateSceneComponentAroundPoint::DeleteTweenOnOverlap' has a wrong offset!");
static_assert(offsetof(TweenFloatStandardFactory_BP_CreateTweenRotateSceneComponentAroundPoint, NumLoops) == 0x00004C, "Member 'TweenFloatStandardFactory_BP_CreateTweenRotateSceneComponentAroundPoint::NumLoops' has a wrong offset!");
static_assert(offsetof(TweenFloatStandardFactory_BP_CreateTweenRotateSceneComponentAroundPoint, LoopType) == 0x000050, "Member 'TweenFloatStandardFactory_BP_CreateTweenRotateSceneComponentAroundPoint::LoopType' has a wrong offset!");
static_assert(offsetof(TweenFloatStandardFactory_BP_CreateTweenRotateSceneComponentAroundPoint, Delay) == 0x000054, "Member 'TweenFloatStandardFactory_BP_CreateTweenRotateSceneComponentAroundPoint::Delay' has a wrong offset!");
static_assert(offsetof(TweenFloatStandardFactory_BP_CreateTweenRotateSceneComponentAroundPoint, TimeScale) == 0x000058, "Member 'TweenFloatStandardFactory_BP_CreateTweenRotateSceneComponentAroundPoint::TimeScale' has a wrong offset!");
static_assert(offsetof(TweenFloatStandardFactory_BP_CreateTweenRotateSceneComponentAroundPoint, TweenWhileGameIsPaused) == 0x00005C, "Member 'TweenFloatStandardFactory_BP_CreateTweenRotateSceneComponentAroundPoint::TweenWhileGameIsPaused' has a wrong offset!");
static_assert(offsetof(TweenFloatStandardFactory_BP_CreateTweenRotateSceneComponentAroundPoint, SequenceIndex) == 0x000060, "Member 'TweenFloatStandardFactory_BP_CreateTweenRotateSceneComponentAroundPoint::SequenceIndex' has a wrong offset!");

// Function TweenMaker.TweenFloatStandardFactory.BP_CreateTweenRotateSceneComponentAroundPointByOffset
// 0x0058 (0x0058 - 0x0000)
struct TweenFloatStandardFactory_BP_CreateTweenRotateSceneComponentAroundPointByOffset final
{
public:
	class UTweenManagerComponent*                 TweenManager;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USceneComponent*                        TweenTarget;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, InstancedReference, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UTweenContainer*                        TweenContainer;                                    // 0x0010(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UTweenFloat*                            Tween;                                             // 0x0018(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                PivotPoint;                                        // 0x0020(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         OffsetAngle;                                       // 0x002C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETweenReferenceAxis                           ReferenceAxis;                                     // 0x0030(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_31[0x3];                                       // 0x0031(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Duration;                                          // 0x0034(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETweenEaseType                                EaseType;                                          // 0x0038(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          DeleteTweenOnHit;                                  // 0x0039(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          DeleteTweenOnOverlap;                              // 0x003A(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_3B[0x1];                                       // 0x003B(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         NumLoops;                                          // 0x003C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETweenLoopType                                LoopType;                                          // 0x0040(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_41[0x3];                                       // 0x0041(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Delay;                                             // 0x0044(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TimeScale;                                         // 0x0048(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          TweenWhileGameIsPaused;                            // 0x004C(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4D[0x3];                                       // 0x004D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         SequenceIndex;                                     // 0x0050(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_54[0x4];                                       // 0x0054(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TweenFloatStandardFactory_BP_CreateTweenRotateSceneComponentAroundPointByOffset) == 0x000008, "Wrong alignment on TweenFloatStandardFactory_BP_CreateTweenRotateSceneComponentAroundPointByOffset");
static_assert(sizeof(TweenFloatStandardFactory_BP_CreateTweenRotateSceneComponentAroundPointByOffset) == 0x000058, "Wrong size on TweenFloatStandardFactory_BP_CreateTweenRotateSceneComponentAroundPointByOffset");
static_assert(offsetof(TweenFloatStandardFactory_BP_CreateTweenRotateSceneComponentAroundPointByOffset, TweenManager) == 0x000000, "Member 'TweenFloatStandardFactory_BP_CreateTweenRotateSceneComponentAroundPointByOffset::TweenManager' has a wrong offset!");
static_assert(offsetof(TweenFloatStandardFactory_BP_CreateTweenRotateSceneComponentAroundPointByOffset, TweenTarget) == 0x000008, "Member 'TweenFloatStandardFactory_BP_CreateTweenRotateSceneComponentAroundPointByOffset::TweenTarget' has a wrong offset!");
static_assert(offsetof(TweenFloatStandardFactory_BP_CreateTweenRotateSceneComponentAroundPointByOffset, TweenContainer) == 0x000010, "Member 'TweenFloatStandardFactory_BP_CreateTweenRotateSceneComponentAroundPointByOffset::TweenContainer' has a wrong offset!");
static_assert(offsetof(TweenFloatStandardFactory_BP_CreateTweenRotateSceneComponentAroundPointByOffset, Tween) == 0x000018, "Member 'TweenFloatStandardFactory_BP_CreateTweenRotateSceneComponentAroundPointByOffset::Tween' has a wrong offset!");
static_assert(offsetof(TweenFloatStandardFactory_BP_CreateTweenRotateSceneComponentAroundPointByOffset, PivotPoint) == 0x000020, "Member 'TweenFloatStandardFactory_BP_CreateTweenRotateSceneComponentAroundPointByOffset::PivotPoint' has a wrong offset!");
static_assert(offsetof(TweenFloatStandardFactory_BP_CreateTweenRotateSceneComponentAroundPointByOffset, OffsetAngle) == 0x00002C, "Member 'TweenFloatStandardFactory_BP_CreateTweenRotateSceneComponentAroundPointByOffset::OffsetAngle' has a wrong offset!");
static_assert(offsetof(TweenFloatStandardFactory_BP_CreateTweenRotateSceneComponentAroundPointByOffset, ReferenceAxis) == 0x000030, "Member 'TweenFloatStandardFactory_BP_CreateTweenRotateSceneComponentAroundPointByOffset::ReferenceAxis' has a wrong offset!");
static_assert(offsetof(TweenFloatStandardFactory_BP_CreateTweenRotateSceneComponentAroundPointByOffset, Duration) == 0x000034, "Member 'TweenFloatStandardFactory_BP_CreateTweenRotateSceneComponentAroundPointByOffset::Duration' has a wrong offset!");
static_assert(offsetof(TweenFloatStandardFactory_BP_CreateTweenRotateSceneComponentAroundPointByOffset, EaseType) == 0x000038, "Member 'TweenFloatStandardFactory_BP_CreateTweenRotateSceneComponentAroundPointByOffset::EaseType' has a wrong offset!");
static_assert(offsetof(TweenFloatStandardFactory_BP_CreateTweenRotateSceneComponentAroundPointByOffset, DeleteTweenOnHit) == 0x000039, "Member 'TweenFloatStandardFactory_BP_CreateTweenRotateSceneComponentAroundPointByOffset::DeleteTweenOnHit' has a wrong offset!");
static_assert(offsetof(TweenFloatStandardFactory_BP_CreateTweenRotateSceneComponentAroundPointByOffset, DeleteTweenOnOverlap) == 0x00003A, "Member 'TweenFloatStandardFactory_BP_CreateTweenRotateSceneComponentAroundPointByOffset::DeleteTweenOnOverlap' has a wrong offset!");
static_assert(offsetof(TweenFloatStandardFactory_BP_CreateTweenRotateSceneComponentAroundPointByOffset, NumLoops) == 0x00003C, "Member 'TweenFloatStandardFactory_BP_CreateTweenRotateSceneComponentAroundPointByOffset::NumLoops' has a wrong offset!");
static_assert(offsetof(TweenFloatStandardFactory_BP_CreateTweenRotateSceneComponentAroundPointByOffset, LoopType) == 0x000040, "Member 'TweenFloatStandardFactory_BP_CreateTweenRotateSceneComponentAroundPointByOffset::LoopType' has a wrong offset!");
static_assert(offsetof(TweenFloatStandardFactory_BP_CreateTweenRotateSceneComponentAroundPointByOffset, Delay) == 0x000044, "Member 'TweenFloatStandardFactory_BP_CreateTweenRotateSceneComponentAroundPointByOffset::Delay' has a wrong offset!");
static_assert(offsetof(TweenFloatStandardFactory_BP_CreateTweenRotateSceneComponentAroundPointByOffset, TimeScale) == 0x000048, "Member 'TweenFloatStandardFactory_BP_CreateTweenRotateSceneComponentAroundPointByOffset::TimeScale' has a wrong offset!");
static_assert(offsetof(TweenFloatStandardFactory_BP_CreateTweenRotateSceneComponentAroundPointByOffset, TweenWhileGameIsPaused) == 0x00004C, "Member 'TweenFloatStandardFactory_BP_CreateTweenRotateSceneComponentAroundPointByOffset::TweenWhileGameIsPaused' has a wrong offset!");
static_assert(offsetof(TweenFloatStandardFactory_BP_CreateTweenRotateSceneComponentAroundPointByOffset, SequenceIndex) == 0x000050, "Member 'TweenFloatStandardFactory_BP_CreateTweenRotateSceneComponentAroundPointByOffset::SequenceIndex' has a wrong offset!");

// Function TweenMaker.TweenFloatStandardFactory.BP_CreateTweenSceneComponentFollowSpline
// 0x0050 (0x0050 - 0x0000)
struct TweenFloatStandardFactory_BP_CreateTweenSceneComponentFollowSpline final
{
public:
	class UTweenManagerComponent*                 TweenManager;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USceneComponent*                        TweenTarget;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, InstancedReference, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UTweenContainer*                        TweenContainer;                                    // 0x0010(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UTweenFloat*                            Tween;                                             // 0x0018(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USplineComponent*                       Spline;                                            // 0x0020(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Duration;                                          // 0x0028(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ApplyRotation;                                     // 0x002C(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ApplyScale;                                        // 0x002D(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          UseConstantSpeed;                                  // 0x002E(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETweenEaseType                                EaseType;                                          // 0x002F(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          DeleteTweenOnHit;                                  // 0x0030(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          DeleteTweenOnOverlap;                              // 0x0031(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_32[0x2];                                       // 0x0032(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         NumLoops;                                          // 0x0034(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETweenLoopType                                LoopType;                                          // 0x0038(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_39[0x3];                                       // 0x0039(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Delay;                                             // 0x003C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TimeScale;                                         // 0x0040(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          TweenWhileGameIsPaused;                            // 0x0044(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_45[0x3];                                       // 0x0045(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         SequenceIndex;                                     // 0x0048(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4C[0x4];                                       // 0x004C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TweenFloatStandardFactory_BP_CreateTweenSceneComponentFollowSpline) == 0x000008, "Wrong alignment on TweenFloatStandardFactory_BP_CreateTweenSceneComponentFollowSpline");
static_assert(sizeof(TweenFloatStandardFactory_BP_CreateTweenSceneComponentFollowSpline) == 0x000050, "Wrong size on TweenFloatStandardFactory_BP_CreateTweenSceneComponentFollowSpline");
static_assert(offsetof(TweenFloatStandardFactory_BP_CreateTweenSceneComponentFollowSpline, TweenManager) == 0x000000, "Member 'TweenFloatStandardFactory_BP_CreateTweenSceneComponentFollowSpline::TweenManager' has a wrong offset!");
static_assert(offsetof(TweenFloatStandardFactory_BP_CreateTweenSceneComponentFollowSpline, TweenTarget) == 0x000008, "Member 'TweenFloatStandardFactory_BP_CreateTweenSceneComponentFollowSpline::TweenTarget' has a wrong offset!");
static_assert(offsetof(TweenFloatStandardFactory_BP_CreateTweenSceneComponentFollowSpline, TweenContainer) == 0x000010, "Member 'TweenFloatStandardFactory_BP_CreateTweenSceneComponentFollowSpline::TweenContainer' has a wrong offset!");
static_assert(offsetof(TweenFloatStandardFactory_BP_CreateTweenSceneComponentFollowSpline, Tween) == 0x000018, "Member 'TweenFloatStandardFactory_BP_CreateTweenSceneComponentFollowSpline::Tween' has a wrong offset!");
static_assert(offsetof(TweenFloatStandardFactory_BP_CreateTweenSceneComponentFollowSpline, Spline) == 0x000020, "Member 'TweenFloatStandardFactory_BP_CreateTweenSceneComponentFollowSpline::Spline' has a wrong offset!");
static_assert(offsetof(TweenFloatStandardFactory_BP_CreateTweenSceneComponentFollowSpline, Duration) == 0x000028, "Member 'TweenFloatStandardFactory_BP_CreateTweenSceneComponentFollowSpline::Duration' has a wrong offset!");
static_assert(offsetof(TweenFloatStandardFactory_BP_CreateTweenSceneComponentFollowSpline, ApplyRotation) == 0x00002C, "Member 'TweenFloatStandardFactory_BP_CreateTweenSceneComponentFollowSpline::ApplyRotation' has a wrong offset!");
static_assert(offsetof(TweenFloatStandardFactory_BP_CreateTweenSceneComponentFollowSpline, ApplyScale) == 0x00002D, "Member 'TweenFloatStandardFactory_BP_CreateTweenSceneComponentFollowSpline::ApplyScale' has a wrong offset!");
static_assert(offsetof(TweenFloatStandardFactory_BP_CreateTweenSceneComponentFollowSpline, UseConstantSpeed) == 0x00002E, "Member 'TweenFloatStandardFactory_BP_CreateTweenSceneComponentFollowSpline::UseConstantSpeed' has a wrong offset!");
static_assert(offsetof(TweenFloatStandardFactory_BP_CreateTweenSceneComponentFollowSpline, EaseType) == 0x00002F, "Member 'TweenFloatStandardFactory_BP_CreateTweenSceneComponentFollowSpline::EaseType' has a wrong offset!");
static_assert(offsetof(TweenFloatStandardFactory_BP_CreateTweenSceneComponentFollowSpline, DeleteTweenOnHit) == 0x000030, "Member 'TweenFloatStandardFactory_BP_CreateTweenSceneComponentFollowSpline::DeleteTweenOnHit' has a wrong offset!");
static_assert(offsetof(TweenFloatStandardFactory_BP_CreateTweenSceneComponentFollowSpline, DeleteTweenOnOverlap) == 0x000031, "Member 'TweenFloatStandardFactory_BP_CreateTweenSceneComponentFollowSpline::DeleteTweenOnOverlap' has a wrong offset!");
static_assert(offsetof(TweenFloatStandardFactory_BP_CreateTweenSceneComponentFollowSpline, NumLoops) == 0x000034, "Member 'TweenFloatStandardFactory_BP_CreateTweenSceneComponentFollowSpline::NumLoops' has a wrong offset!");
static_assert(offsetof(TweenFloatStandardFactory_BP_CreateTweenSceneComponentFollowSpline, LoopType) == 0x000038, "Member 'TweenFloatStandardFactory_BP_CreateTweenSceneComponentFollowSpline::LoopType' has a wrong offset!");
static_assert(offsetof(TweenFloatStandardFactory_BP_CreateTweenSceneComponentFollowSpline, Delay) == 0x00003C, "Member 'TweenFloatStandardFactory_BP_CreateTweenSceneComponentFollowSpline::Delay' has a wrong offset!");
static_assert(offsetof(TweenFloatStandardFactory_BP_CreateTweenSceneComponentFollowSpline, TimeScale) == 0x000040, "Member 'TweenFloatStandardFactory_BP_CreateTweenSceneComponentFollowSpline::TimeScale' has a wrong offset!");
static_assert(offsetof(TweenFloatStandardFactory_BP_CreateTweenSceneComponentFollowSpline, TweenWhileGameIsPaused) == 0x000044, "Member 'TweenFloatStandardFactory_BP_CreateTweenSceneComponentFollowSpline::TweenWhileGameIsPaused' has a wrong offset!");
static_assert(offsetof(TweenFloatStandardFactory_BP_CreateTweenSceneComponentFollowSpline, SequenceIndex) == 0x000048, "Member 'TweenFloatStandardFactory_BP_CreateTweenSceneComponentFollowSpline::SequenceIndex' has a wrong offset!");

// Function TweenMaker.TweenFloatStandardFactory.BP_CreateTweenWidgetAngleTo
// 0x0048 (0x0048 - 0x0000)
struct TweenFloatStandardFactory_BP_CreateTweenWidgetAngleTo final
{
public:
	class UTweenManagerComponent*                 TweenManager;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UWidget*                                TweenTarget;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, InstancedReference, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UTweenContainer*                        TweenContainer;                                    // 0x0010(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UTweenFloat*                            Tween;                                             // 0x0018(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         To;                                                // 0x0020(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Duration;                                          // 0x0024(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETweenEaseType                                EaseType;                                          // 0x0028(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_29[0x3];                                       // 0x0029(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         NumLoops;                                          // 0x002C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETweenLoopType                                LoopType;                                          // 0x0030(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_31[0x3];                                       // 0x0031(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Delay;                                             // 0x0034(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TimeScale;                                         // 0x0038(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          TweenWhileGameIsPaused;                            // 0x003C(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_3D[0x3];                                       // 0x003D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         SequenceIndex;                                     // 0x0040(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_44[0x4];                                       // 0x0044(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TweenFloatStandardFactory_BP_CreateTweenWidgetAngleTo) == 0x000008, "Wrong alignment on TweenFloatStandardFactory_BP_CreateTweenWidgetAngleTo");
static_assert(sizeof(TweenFloatStandardFactory_BP_CreateTweenWidgetAngleTo) == 0x000048, "Wrong size on TweenFloatStandardFactory_BP_CreateTweenWidgetAngleTo");
static_assert(offsetof(TweenFloatStandardFactory_BP_CreateTweenWidgetAngleTo, TweenManager) == 0x000000, "Member 'TweenFloatStandardFactory_BP_CreateTweenWidgetAngleTo::TweenManager' has a wrong offset!");
static_assert(offsetof(TweenFloatStandardFactory_BP_CreateTweenWidgetAngleTo, TweenTarget) == 0x000008, "Member 'TweenFloatStandardFactory_BP_CreateTweenWidgetAngleTo::TweenTarget' has a wrong offset!");
static_assert(offsetof(TweenFloatStandardFactory_BP_CreateTweenWidgetAngleTo, TweenContainer) == 0x000010, "Member 'TweenFloatStandardFactory_BP_CreateTweenWidgetAngleTo::TweenContainer' has a wrong offset!");
static_assert(offsetof(TweenFloatStandardFactory_BP_CreateTweenWidgetAngleTo, Tween) == 0x000018, "Member 'TweenFloatStandardFactory_BP_CreateTweenWidgetAngleTo::Tween' has a wrong offset!");
static_assert(offsetof(TweenFloatStandardFactory_BP_CreateTweenWidgetAngleTo, To) == 0x000020, "Member 'TweenFloatStandardFactory_BP_CreateTweenWidgetAngleTo::To' has a wrong offset!");
static_assert(offsetof(TweenFloatStandardFactory_BP_CreateTweenWidgetAngleTo, Duration) == 0x000024, "Member 'TweenFloatStandardFactory_BP_CreateTweenWidgetAngleTo::Duration' has a wrong offset!");
static_assert(offsetof(TweenFloatStandardFactory_BP_CreateTweenWidgetAngleTo, EaseType) == 0x000028, "Member 'TweenFloatStandardFactory_BP_CreateTweenWidgetAngleTo::EaseType' has a wrong offset!");
static_assert(offsetof(TweenFloatStandardFactory_BP_CreateTweenWidgetAngleTo, NumLoops) == 0x00002C, "Member 'TweenFloatStandardFactory_BP_CreateTweenWidgetAngleTo::NumLoops' has a wrong offset!");
static_assert(offsetof(TweenFloatStandardFactory_BP_CreateTweenWidgetAngleTo, LoopType) == 0x000030, "Member 'TweenFloatStandardFactory_BP_CreateTweenWidgetAngleTo::LoopType' has a wrong offset!");
static_assert(offsetof(TweenFloatStandardFactory_BP_CreateTweenWidgetAngleTo, Delay) == 0x000034, "Member 'TweenFloatStandardFactory_BP_CreateTweenWidgetAngleTo::Delay' has a wrong offset!");
static_assert(offsetof(TweenFloatStandardFactory_BP_CreateTweenWidgetAngleTo, TimeScale) == 0x000038, "Member 'TweenFloatStandardFactory_BP_CreateTweenWidgetAngleTo::TimeScale' has a wrong offset!");
static_assert(offsetof(TweenFloatStandardFactory_BP_CreateTweenWidgetAngleTo, TweenWhileGameIsPaused) == 0x00003C, "Member 'TweenFloatStandardFactory_BP_CreateTweenWidgetAngleTo::TweenWhileGameIsPaused' has a wrong offset!");
static_assert(offsetof(TweenFloatStandardFactory_BP_CreateTweenWidgetAngleTo, SequenceIndex) == 0x000040, "Member 'TweenFloatStandardFactory_BP_CreateTweenWidgetAngleTo::SequenceIndex' has a wrong offset!");

// Function TweenMaker.TweenFloatStandardFactory.BP_CreateTweenWidgetOpacityTo
// 0x0048 (0x0048 - 0x0000)
struct TweenFloatStandardFactory_BP_CreateTweenWidgetOpacityTo final
{
public:
	class UTweenManagerComponent*                 TweenManager;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UWidget*                                TweenTarget;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, InstancedReference, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UTweenContainer*                        TweenContainer;                                    // 0x0010(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UTweenFloat*                            Tween;                                             // 0x0018(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         To;                                                // 0x0020(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Duration;                                          // 0x0024(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETweenEaseType                                EaseType;                                          // 0x0028(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_29[0x3];                                       // 0x0029(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         NumLoops;                                          // 0x002C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETweenLoopType                                LoopType;                                          // 0x0030(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_31[0x3];                                       // 0x0031(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Delay;                                             // 0x0034(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TimeScale;                                         // 0x0038(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          TweenWhileGameIsPaused;                            // 0x003C(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_3D[0x3];                                       // 0x003D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         SequenceIndex;                                     // 0x0040(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_44[0x4];                                       // 0x0044(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TweenFloatStandardFactory_BP_CreateTweenWidgetOpacityTo) == 0x000008, "Wrong alignment on TweenFloatStandardFactory_BP_CreateTweenWidgetOpacityTo");
static_assert(sizeof(TweenFloatStandardFactory_BP_CreateTweenWidgetOpacityTo) == 0x000048, "Wrong size on TweenFloatStandardFactory_BP_CreateTweenWidgetOpacityTo");
static_assert(offsetof(TweenFloatStandardFactory_BP_CreateTweenWidgetOpacityTo, TweenManager) == 0x000000, "Member 'TweenFloatStandardFactory_BP_CreateTweenWidgetOpacityTo::TweenManager' has a wrong offset!");
static_assert(offsetof(TweenFloatStandardFactory_BP_CreateTweenWidgetOpacityTo, TweenTarget) == 0x000008, "Member 'TweenFloatStandardFactory_BP_CreateTweenWidgetOpacityTo::TweenTarget' has a wrong offset!");
static_assert(offsetof(TweenFloatStandardFactory_BP_CreateTweenWidgetOpacityTo, TweenContainer) == 0x000010, "Member 'TweenFloatStandardFactory_BP_CreateTweenWidgetOpacityTo::TweenContainer' has a wrong offset!");
static_assert(offsetof(TweenFloatStandardFactory_BP_CreateTweenWidgetOpacityTo, Tween) == 0x000018, "Member 'TweenFloatStandardFactory_BP_CreateTweenWidgetOpacityTo::Tween' has a wrong offset!");
static_assert(offsetof(TweenFloatStandardFactory_BP_CreateTweenWidgetOpacityTo, To) == 0x000020, "Member 'TweenFloatStandardFactory_BP_CreateTweenWidgetOpacityTo::To' has a wrong offset!");
static_assert(offsetof(TweenFloatStandardFactory_BP_CreateTweenWidgetOpacityTo, Duration) == 0x000024, "Member 'TweenFloatStandardFactory_BP_CreateTweenWidgetOpacityTo::Duration' has a wrong offset!");
static_assert(offsetof(TweenFloatStandardFactory_BP_CreateTweenWidgetOpacityTo, EaseType) == 0x000028, "Member 'TweenFloatStandardFactory_BP_CreateTweenWidgetOpacityTo::EaseType' has a wrong offset!");
static_assert(offsetof(TweenFloatStandardFactory_BP_CreateTweenWidgetOpacityTo, NumLoops) == 0x00002C, "Member 'TweenFloatStandardFactory_BP_CreateTweenWidgetOpacityTo::NumLoops' has a wrong offset!");
static_assert(offsetof(TweenFloatStandardFactory_BP_CreateTweenWidgetOpacityTo, LoopType) == 0x000030, "Member 'TweenFloatStandardFactory_BP_CreateTweenWidgetOpacityTo::LoopType' has a wrong offset!");
static_assert(offsetof(TweenFloatStandardFactory_BP_CreateTweenWidgetOpacityTo, Delay) == 0x000034, "Member 'TweenFloatStandardFactory_BP_CreateTweenWidgetOpacityTo::Delay' has a wrong offset!");
static_assert(offsetof(TweenFloatStandardFactory_BP_CreateTweenWidgetOpacityTo, TimeScale) == 0x000038, "Member 'TweenFloatStandardFactory_BP_CreateTweenWidgetOpacityTo::TimeScale' has a wrong offset!");
static_assert(offsetof(TweenFloatStandardFactory_BP_CreateTweenWidgetOpacityTo, TweenWhileGameIsPaused) == 0x00003C, "Member 'TweenFloatStandardFactory_BP_CreateTweenWidgetOpacityTo::TweenWhileGameIsPaused' has a wrong offset!");
static_assert(offsetof(TweenFloatStandardFactory_BP_CreateTweenWidgetOpacityTo, SequenceIndex) == 0x000040, "Member 'TweenFloatStandardFactory_BP_CreateTweenWidgetOpacityTo::SequenceIndex' has a wrong offset!");

// Function TweenMaker.TweenFloatStandardFactory.BP_JoinTweenActorFollowSpline
// 0x0040 (0x0040 - 0x0000)
struct TweenFloatStandardFactory_BP_JoinTweenActorFollowSpline final
{
public:
	class UTweenContainer*                        TweenContainer;                                    // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 TweenTarget;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USplineComponent*                       Spline;                                            // 0x0010(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Duration;                                          // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ApplyRotation;                                     // 0x001C(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ApplyScale;                                        // 0x001D(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          UseConstantSpeed;                                  // 0x001E(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETweenEaseType                                EaseType;                                          // 0x001F(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          DeleteTweenOnHit;                                  // 0x0020(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          DeleteTweenOnOverlap;                              // 0x0021(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_22[0x2];                                       // 0x0022(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Delay;                                             // 0x0024(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TimeScale;                                         // 0x0028(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          TweenWhileGameIsPaused;                            // 0x002C(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2D[0x3];                                       // 0x002D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         SequenceIndex;                                     // 0x0030(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_34[0x4];                                       // 0x0034(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UTweenFloat*                            ReturnValue;                                       // 0x0038(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TweenFloatStandardFactory_BP_JoinTweenActorFollowSpline) == 0x000008, "Wrong alignment on TweenFloatStandardFactory_BP_JoinTweenActorFollowSpline");
static_assert(sizeof(TweenFloatStandardFactory_BP_JoinTweenActorFollowSpline) == 0x000040, "Wrong size on TweenFloatStandardFactory_BP_JoinTweenActorFollowSpline");
static_assert(offsetof(TweenFloatStandardFactory_BP_JoinTweenActorFollowSpline, TweenContainer) == 0x000000, "Member 'TweenFloatStandardFactory_BP_JoinTweenActorFollowSpline::TweenContainer' has a wrong offset!");
static_assert(offsetof(TweenFloatStandardFactory_BP_JoinTweenActorFollowSpline, TweenTarget) == 0x000008, "Member 'TweenFloatStandardFactory_BP_JoinTweenActorFollowSpline::TweenTarget' has a wrong offset!");
static_assert(offsetof(TweenFloatStandardFactory_BP_JoinTweenActorFollowSpline, Spline) == 0x000010, "Member 'TweenFloatStandardFactory_BP_JoinTweenActorFollowSpline::Spline' has a wrong offset!");
static_assert(offsetof(TweenFloatStandardFactory_BP_JoinTweenActorFollowSpline, Duration) == 0x000018, "Member 'TweenFloatStandardFactory_BP_JoinTweenActorFollowSpline::Duration' has a wrong offset!");
static_assert(offsetof(TweenFloatStandardFactory_BP_JoinTweenActorFollowSpline, ApplyRotation) == 0x00001C, "Member 'TweenFloatStandardFactory_BP_JoinTweenActorFollowSpline::ApplyRotation' has a wrong offset!");
static_assert(offsetof(TweenFloatStandardFactory_BP_JoinTweenActorFollowSpline, ApplyScale) == 0x00001D, "Member 'TweenFloatStandardFactory_BP_JoinTweenActorFollowSpline::ApplyScale' has a wrong offset!");
static_assert(offsetof(TweenFloatStandardFactory_BP_JoinTweenActorFollowSpline, UseConstantSpeed) == 0x00001E, "Member 'TweenFloatStandardFactory_BP_JoinTweenActorFollowSpline::UseConstantSpeed' has a wrong offset!");
static_assert(offsetof(TweenFloatStandardFactory_BP_JoinTweenActorFollowSpline, EaseType) == 0x00001F, "Member 'TweenFloatStandardFactory_BP_JoinTweenActorFollowSpline::EaseType' has a wrong offset!");
static_assert(offsetof(TweenFloatStandardFactory_BP_JoinTweenActorFollowSpline, DeleteTweenOnHit) == 0x000020, "Member 'TweenFloatStandardFactory_BP_JoinTweenActorFollowSpline::DeleteTweenOnHit' has a wrong offset!");
static_assert(offsetof(TweenFloatStandardFactory_BP_JoinTweenActorFollowSpline, DeleteTweenOnOverlap) == 0x000021, "Member 'TweenFloatStandardFactory_BP_JoinTweenActorFollowSpline::DeleteTweenOnOverlap' has a wrong offset!");
static_assert(offsetof(TweenFloatStandardFactory_BP_JoinTweenActorFollowSpline, Delay) == 0x000024, "Member 'TweenFloatStandardFactory_BP_JoinTweenActorFollowSpline::Delay' has a wrong offset!");
static_assert(offsetof(TweenFloatStandardFactory_BP_JoinTweenActorFollowSpline, TimeScale) == 0x000028, "Member 'TweenFloatStandardFactory_BP_JoinTweenActorFollowSpline::TimeScale' has a wrong offset!");
static_assert(offsetof(TweenFloatStandardFactory_BP_JoinTweenActorFollowSpline, TweenWhileGameIsPaused) == 0x00002C, "Member 'TweenFloatStandardFactory_BP_JoinTweenActorFollowSpline::TweenWhileGameIsPaused' has a wrong offset!");
static_assert(offsetof(TweenFloatStandardFactory_BP_JoinTweenActorFollowSpline, SequenceIndex) == 0x000030, "Member 'TweenFloatStandardFactory_BP_JoinTweenActorFollowSpline::SequenceIndex' has a wrong offset!");
static_assert(offsetof(TweenFloatStandardFactory_BP_JoinTweenActorFollowSpline, ReturnValue) == 0x000038, "Member 'TweenFloatStandardFactory_BP_JoinTweenActorFollowSpline::ReturnValue' has a wrong offset!");

// Function TweenMaker.TweenFloatStandardFactory.BP_JoinTweenCustomFloat
// 0x0038 (0x0038 - 0x0000)
struct TweenFloatStandardFactory_BP_JoinTweenCustomFloat final
{
public:
	class UTweenContainer*                        TweenContainer;                                    // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UObject*                                TweenTarget;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         From;                                              // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         To;                                                // 0x0014(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Duration;                                          // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETweenEaseType                                EaseType;                                          // 0x001C(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1D[0x3];                                       // 0x001D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Delay;                                             // 0x0020(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TimeScale;                                         // 0x0024(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          TweenWhileGameIsPaused;                            // 0x0028(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_29[0x3];                                       // 0x0029(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         SequenceIndex;                                     // 0x002C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UTweenFloat*                            ReturnValue;                                       // 0x0030(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TweenFloatStandardFactory_BP_JoinTweenCustomFloat) == 0x000008, "Wrong alignment on TweenFloatStandardFactory_BP_JoinTweenCustomFloat");
static_assert(sizeof(TweenFloatStandardFactory_BP_JoinTweenCustomFloat) == 0x000038, "Wrong size on TweenFloatStandardFactory_BP_JoinTweenCustomFloat");
static_assert(offsetof(TweenFloatStandardFactory_BP_JoinTweenCustomFloat, TweenContainer) == 0x000000, "Member 'TweenFloatStandardFactory_BP_JoinTweenCustomFloat::TweenContainer' has a wrong offset!");
static_assert(offsetof(TweenFloatStandardFactory_BP_JoinTweenCustomFloat, TweenTarget) == 0x000008, "Member 'TweenFloatStandardFactory_BP_JoinTweenCustomFloat::TweenTarget' has a wrong offset!");
static_assert(offsetof(TweenFloatStandardFactory_BP_JoinTweenCustomFloat, From) == 0x000010, "Member 'TweenFloatStandardFactory_BP_JoinTweenCustomFloat::From' has a wrong offset!");
static_assert(offsetof(TweenFloatStandardFactory_BP_JoinTweenCustomFloat, To) == 0x000014, "Member 'TweenFloatStandardFactory_BP_JoinTweenCustomFloat::To' has a wrong offset!");
static_assert(offsetof(TweenFloatStandardFactory_BP_JoinTweenCustomFloat, Duration) == 0x000018, "Member 'TweenFloatStandardFactory_BP_JoinTweenCustomFloat::Duration' has a wrong offset!");
static_assert(offsetof(TweenFloatStandardFactory_BP_JoinTweenCustomFloat, EaseType) == 0x00001C, "Member 'TweenFloatStandardFactory_BP_JoinTweenCustomFloat::EaseType' has a wrong offset!");
static_assert(offsetof(TweenFloatStandardFactory_BP_JoinTweenCustomFloat, Delay) == 0x000020, "Member 'TweenFloatStandardFactory_BP_JoinTweenCustomFloat::Delay' has a wrong offset!");
static_assert(offsetof(TweenFloatStandardFactory_BP_JoinTweenCustomFloat, TimeScale) == 0x000024, "Member 'TweenFloatStandardFactory_BP_JoinTweenCustomFloat::TimeScale' has a wrong offset!");
static_assert(offsetof(TweenFloatStandardFactory_BP_JoinTweenCustomFloat, TweenWhileGameIsPaused) == 0x000028, "Member 'TweenFloatStandardFactory_BP_JoinTweenCustomFloat::TweenWhileGameIsPaused' has a wrong offset!");
static_assert(offsetof(TweenFloatStandardFactory_BP_JoinTweenCustomFloat, SequenceIndex) == 0x00002C, "Member 'TweenFloatStandardFactory_BP_JoinTweenCustomFloat::SequenceIndex' has a wrong offset!");
static_assert(offsetof(TweenFloatStandardFactory_BP_JoinTweenCustomFloat, ReturnValue) == 0x000030, "Member 'TweenFloatStandardFactory_BP_JoinTweenCustomFloat::ReturnValue' has a wrong offset!");

// Function TweenMaker.TweenFloatStandardFactory.BP_JoinTweenMaterialFloatFromTo
// 0x0040 (0x0040 - 0x0000)
struct TweenFloatStandardFactory_BP_JoinTweenMaterialFloatFromTo final
{
public:
	class UTweenContainer*                        TweenContainer;                                    // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UMaterialInstanceDynamic*               TweenTarget;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   ParameterName;                                     // 0x0010(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         From;                                              // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         To;                                                // 0x001C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Duration;                                          // 0x0020(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETweenEaseType                                EaseType;                                          // 0x0024(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_25[0x3];                                       // 0x0025(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Delay;                                             // 0x0028(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TimeScale;                                         // 0x002C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          TweenWhileGameIsPaused;                            // 0x0030(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_31[0x3];                                       // 0x0031(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         SequenceIndex;                                     // 0x0034(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UTweenFloat*                            ReturnValue;                                       // 0x0038(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TweenFloatStandardFactory_BP_JoinTweenMaterialFloatFromTo) == 0x000008, "Wrong alignment on TweenFloatStandardFactory_BP_JoinTweenMaterialFloatFromTo");
static_assert(sizeof(TweenFloatStandardFactory_BP_JoinTweenMaterialFloatFromTo) == 0x000040, "Wrong size on TweenFloatStandardFactory_BP_JoinTweenMaterialFloatFromTo");
static_assert(offsetof(TweenFloatStandardFactory_BP_JoinTweenMaterialFloatFromTo, TweenContainer) == 0x000000, "Member 'TweenFloatStandardFactory_BP_JoinTweenMaterialFloatFromTo::TweenContainer' has a wrong offset!");
static_assert(offsetof(TweenFloatStandardFactory_BP_JoinTweenMaterialFloatFromTo, TweenTarget) == 0x000008, "Member 'TweenFloatStandardFactory_BP_JoinTweenMaterialFloatFromTo::TweenTarget' has a wrong offset!");
static_assert(offsetof(TweenFloatStandardFactory_BP_JoinTweenMaterialFloatFromTo, ParameterName) == 0x000010, "Member 'TweenFloatStandardFactory_BP_JoinTweenMaterialFloatFromTo::ParameterName' has a wrong offset!");
static_assert(offsetof(TweenFloatStandardFactory_BP_JoinTweenMaterialFloatFromTo, From) == 0x000018, "Member 'TweenFloatStandardFactory_BP_JoinTweenMaterialFloatFromTo::From' has a wrong offset!");
static_assert(offsetof(TweenFloatStandardFactory_BP_JoinTweenMaterialFloatFromTo, To) == 0x00001C, "Member 'TweenFloatStandardFactory_BP_JoinTweenMaterialFloatFromTo::To' has a wrong offset!");
static_assert(offsetof(TweenFloatStandardFactory_BP_JoinTweenMaterialFloatFromTo, Duration) == 0x000020, "Member 'TweenFloatStandardFactory_BP_JoinTweenMaterialFloatFromTo::Duration' has a wrong offset!");
static_assert(offsetof(TweenFloatStandardFactory_BP_JoinTweenMaterialFloatFromTo, EaseType) == 0x000024, "Member 'TweenFloatStandardFactory_BP_JoinTweenMaterialFloatFromTo::EaseType' has a wrong offset!");
static_assert(offsetof(TweenFloatStandardFactory_BP_JoinTweenMaterialFloatFromTo, Delay) == 0x000028, "Member 'TweenFloatStandardFactory_BP_JoinTweenMaterialFloatFromTo::Delay' has a wrong offset!");
static_assert(offsetof(TweenFloatStandardFactory_BP_JoinTweenMaterialFloatFromTo, TimeScale) == 0x00002C, "Member 'TweenFloatStandardFactory_BP_JoinTweenMaterialFloatFromTo::TimeScale' has a wrong offset!");
static_assert(offsetof(TweenFloatStandardFactory_BP_JoinTweenMaterialFloatFromTo, TweenWhileGameIsPaused) == 0x000030, "Member 'TweenFloatStandardFactory_BP_JoinTweenMaterialFloatFromTo::TweenWhileGameIsPaused' has a wrong offset!");
static_assert(offsetof(TweenFloatStandardFactory_BP_JoinTweenMaterialFloatFromTo, SequenceIndex) == 0x000034, "Member 'TweenFloatStandardFactory_BP_JoinTweenMaterialFloatFromTo::SequenceIndex' has a wrong offset!");
static_assert(offsetof(TweenFloatStandardFactory_BP_JoinTweenMaterialFloatFromTo, ReturnValue) == 0x000038, "Member 'TweenFloatStandardFactory_BP_JoinTweenMaterialFloatFromTo::ReturnValue' has a wrong offset!");

// Function TweenMaker.TweenFloatStandardFactory.BP_JoinTweenMaterialFloatTo
// 0x0040 (0x0040 - 0x0000)
struct TweenFloatStandardFactory_BP_JoinTweenMaterialFloatTo final
{
public:
	class UTweenContainer*                        TweenContainer;                                    // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UMaterialInstanceDynamic*               TweenTarget;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   ParameterName;                                     // 0x0010(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         To;                                                // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Duration;                                          // 0x001C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETweenEaseType                                EaseType;                                          // 0x0020(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_21[0x3];                                       // 0x0021(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Delay;                                             // 0x0024(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TimeScale;                                         // 0x0028(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          TweenWhileGameIsPaused;                            // 0x002C(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2D[0x3];                                       // 0x002D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         SequenceIndex;                                     // 0x0030(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_34[0x4];                                       // 0x0034(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UTweenFloat*                            ReturnValue;                                       // 0x0038(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TweenFloatStandardFactory_BP_JoinTweenMaterialFloatTo) == 0x000008, "Wrong alignment on TweenFloatStandardFactory_BP_JoinTweenMaterialFloatTo");
static_assert(sizeof(TweenFloatStandardFactory_BP_JoinTweenMaterialFloatTo) == 0x000040, "Wrong size on TweenFloatStandardFactory_BP_JoinTweenMaterialFloatTo");
static_assert(offsetof(TweenFloatStandardFactory_BP_JoinTweenMaterialFloatTo, TweenContainer) == 0x000000, "Member 'TweenFloatStandardFactory_BP_JoinTweenMaterialFloatTo::TweenContainer' has a wrong offset!");
static_assert(offsetof(TweenFloatStandardFactory_BP_JoinTweenMaterialFloatTo, TweenTarget) == 0x000008, "Member 'TweenFloatStandardFactory_BP_JoinTweenMaterialFloatTo::TweenTarget' has a wrong offset!");
static_assert(offsetof(TweenFloatStandardFactory_BP_JoinTweenMaterialFloatTo, ParameterName) == 0x000010, "Member 'TweenFloatStandardFactory_BP_JoinTweenMaterialFloatTo::ParameterName' has a wrong offset!");
static_assert(offsetof(TweenFloatStandardFactory_BP_JoinTweenMaterialFloatTo, To) == 0x000018, "Member 'TweenFloatStandardFactory_BP_JoinTweenMaterialFloatTo::To' has a wrong offset!");
static_assert(offsetof(TweenFloatStandardFactory_BP_JoinTweenMaterialFloatTo, Duration) == 0x00001C, "Member 'TweenFloatStandardFactory_BP_JoinTweenMaterialFloatTo::Duration' has a wrong offset!");
static_assert(offsetof(TweenFloatStandardFactory_BP_JoinTweenMaterialFloatTo, EaseType) == 0x000020, "Member 'TweenFloatStandardFactory_BP_JoinTweenMaterialFloatTo::EaseType' has a wrong offset!");
static_assert(offsetof(TweenFloatStandardFactory_BP_JoinTweenMaterialFloatTo, Delay) == 0x000024, "Member 'TweenFloatStandardFactory_BP_JoinTweenMaterialFloatTo::Delay' has a wrong offset!");
static_assert(offsetof(TweenFloatStandardFactory_BP_JoinTweenMaterialFloatTo, TimeScale) == 0x000028, "Member 'TweenFloatStandardFactory_BP_JoinTweenMaterialFloatTo::TimeScale' has a wrong offset!");
static_assert(offsetof(TweenFloatStandardFactory_BP_JoinTweenMaterialFloatTo, TweenWhileGameIsPaused) == 0x00002C, "Member 'TweenFloatStandardFactory_BP_JoinTweenMaterialFloatTo::TweenWhileGameIsPaused' has a wrong offset!");
static_assert(offsetof(TweenFloatStandardFactory_BP_JoinTweenMaterialFloatTo, SequenceIndex) == 0x000030, "Member 'TweenFloatStandardFactory_BP_JoinTweenMaterialFloatTo::SequenceIndex' has a wrong offset!");
static_assert(offsetof(TweenFloatStandardFactory_BP_JoinTweenMaterialFloatTo, ReturnValue) == 0x000038, "Member 'TweenFloatStandardFactory_BP_JoinTweenMaterialFloatTo::ReturnValue' has a wrong offset!");

// Function TweenMaker.TweenFloatStandardFactory.BP_JoinTweenRotateActorAroundPoint
// 0x0058 (0x0058 - 0x0000)
struct TweenFloatStandardFactory_BP_JoinTweenRotateActorAroundPoint final
{
public:
	class UTweenContainer*                        TweenContainer;                                    // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 TweenTarget;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                PivotPoint;                                        // 0x0010(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         StartingAngle;                                     // 0x001C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         EndingAngle;                                       // 0x0020(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Radius;                                            // 0x0024(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                Axis;                                              // 0x0028(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Duration;                                          // 0x0034(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETweenEaseType                                EaseType;                                          // 0x0038(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          DeleteTweenOnHit;                                  // 0x0039(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          DeleteTweenOnOverlap;                              // 0x003A(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_3B[0x1];                                       // 0x003B(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Delay;                                             // 0x003C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TimeScale;                                         // 0x0040(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          TweenWhileGameIsPaused;                            // 0x0044(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_45[0x3];                                       // 0x0045(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         SequenceIndex;                                     // 0x0048(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4C[0x4];                                       // 0x004C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UTweenFloat*                            ReturnValue;                                       // 0x0050(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TweenFloatStandardFactory_BP_JoinTweenRotateActorAroundPoint) == 0x000008, "Wrong alignment on TweenFloatStandardFactory_BP_JoinTweenRotateActorAroundPoint");
static_assert(sizeof(TweenFloatStandardFactory_BP_JoinTweenRotateActorAroundPoint) == 0x000058, "Wrong size on TweenFloatStandardFactory_BP_JoinTweenRotateActorAroundPoint");
static_assert(offsetof(TweenFloatStandardFactory_BP_JoinTweenRotateActorAroundPoint, TweenContainer) == 0x000000, "Member 'TweenFloatStandardFactory_BP_JoinTweenRotateActorAroundPoint::TweenContainer' has a wrong offset!");
static_assert(offsetof(TweenFloatStandardFactory_BP_JoinTweenRotateActorAroundPoint, TweenTarget) == 0x000008, "Member 'TweenFloatStandardFactory_BP_JoinTweenRotateActorAroundPoint::TweenTarget' has a wrong offset!");
static_assert(offsetof(TweenFloatStandardFactory_BP_JoinTweenRotateActorAroundPoint, PivotPoint) == 0x000010, "Member 'TweenFloatStandardFactory_BP_JoinTweenRotateActorAroundPoint::PivotPoint' has a wrong offset!");
static_assert(offsetof(TweenFloatStandardFactory_BP_JoinTweenRotateActorAroundPoint, StartingAngle) == 0x00001C, "Member 'TweenFloatStandardFactory_BP_JoinTweenRotateActorAroundPoint::StartingAngle' has a wrong offset!");
static_assert(offsetof(TweenFloatStandardFactory_BP_JoinTweenRotateActorAroundPoint, EndingAngle) == 0x000020, "Member 'TweenFloatStandardFactory_BP_JoinTweenRotateActorAroundPoint::EndingAngle' has a wrong offset!");
static_assert(offsetof(TweenFloatStandardFactory_BP_JoinTweenRotateActorAroundPoint, Radius) == 0x000024, "Member 'TweenFloatStandardFactory_BP_JoinTweenRotateActorAroundPoint::Radius' has a wrong offset!");
static_assert(offsetof(TweenFloatStandardFactory_BP_JoinTweenRotateActorAroundPoint, Axis) == 0x000028, "Member 'TweenFloatStandardFactory_BP_JoinTweenRotateActorAroundPoint::Axis' has a wrong offset!");
static_assert(offsetof(TweenFloatStandardFactory_BP_JoinTweenRotateActorAroundPoint, Duration) == 0x000034, "Member 'TweenFloatStandardFactory_BP_JoinTweenRotateActorAroundPoint::Duration' has a wrong offset!");
static_assert(offsetof(TweenFloatStandardFactory_BP_JoinTweenRotateActorAroundPoint, EaseType) == 0x000038, "Member 'TweenFloatStandardFactory_BP_JoinTweenRotateActorAroundPoint::EaseType' has a wrong offset!");
static_assert(offsetof(TweenFloatStandardFactory_BP_JoinTweenRotateActorAroundPoint, DeleteTweenOnHit) == 0x000039, "Member 'TweenFloatStandardFactory_BP_JoinTweenRotateActorAroundPoint::DeleteTweenOnHit' has a wrong offset!");
static_assert(offsetof(TweenFloatStandardFactory_BP_JoinTweenRotateActorAroundPoint, DeleteTweenOnOverlap) == 0x00003A, "Member 'TweenFloatStandardFactory_BP_JoinTweenRotateActorAroundPoint::DeleteTweenOnOverlap' has a wrong offset!");
static_assert(offsetof(TweenFloatStandardFactory_BP_JoinTweenRotateActorAroundPoint, Delay) == 0x00003C, "Member 'TweenFloatStandardFactory_BP_JoinTweenRotateActorAroundPoint::Delay' has a wrong offset!");
static_assert(offsetof(TweenFloatStandardFactory_BP_JoinTweenRotateActorAroundPoint, TimeScale) == 0x000040, "Member 'TweenFloatStandardFactory_BP_JoinTweenRotateActorAroundPoint::TimeScale' has a wrong offset!");
static_assert(offsetof(TweenFloatStandardFactory_BP_JoinTweenRotateActorAroundPoint, TweenWhileGameIsPaused) == 0x000044, "Member 'TweenFloatStandardFactory_BP_JoinTweenRotateActorAroundPoint::TweenWhileGameIsPaused' has a wrong offset!");
static_assert(offsetof(TweenFloatStandardFactory_BP_JoinTweenRotateActorAroundPoint, SequenceIndex) == 0x000048, "Member 'TweenFloatStandardFactory_BP_JoinTweenRotateActorAroundPoint::SequenceIndex' has a wrong offset!");
static_assert(offsetof(TweenFloatStandardFactory_BP_JoinTweenRotateActorAroundPoint, ReturnValue) == 0x000050, "Member 'TweenFloatStandardFactory_BP_JoinTweenRotateActorAroundPoint::ReturnValue' has a wrong offset!");

// Function TweenMaker.TweenFloatStandardFactory.BP_JoinTweenRotateActorAroundPointByOffset
// 0x0048 (0x0048 - 0x0000)
struct TweenFloatStandardFactory_BP_JoinTweenRotateActorAroundPointByOffset final
{
public:
	class UTweenContainer*                        TweenContainer;                                    // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 TweenTarget;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                PivotPoint;                                        // 0x0010(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         OffsetAngle;                                       // 0x001C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETweenReferenceAxis                           ReferenceAxis;                                     // 0x0020(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_21[0x3];                                       // 0x0021(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Duration;                                          // 0x0024(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETweenEaseType                                EaseType;                                          // 0x0028(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          DeleteTweenOnHit;                                  // 0x0029(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          DeleteTweenOnOverlap;                              // 0x002A(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2B[0x1];                                       // 0x002B(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Delay;                                             // 0x002C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TimeScale;                                         // 0x0030(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          TweenWhileGameIsPaused;                            // 0x0034(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_35[0x3];                                       // 0x0035(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         SequenceIndex;                                     // 0x0038(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_3C[0x4];                                       // 0x003C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UTweenFloat*                            ReturnValue;                                       // 0x0040(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TweenFloatStandardFactory_BP_JoinTweenRotateActorAroundPointByOffset) == 0x000008, "Wrong alignment on TweenFloatStandardFactory_BP_JoinTweenRotateActorAroundPointByOffset");
static_assert(sizeof(TweenFloatStandardFactory_BP_JoinTweenRotateActorAroundPointByOffset) == 0x000048, "Wrong size on TweenFloatStandardFactory_BP_JoinTweenRotateActorAroundPointByOffset");
static_assert(offsetof(TweenFloatStandardFactory_BP_JoinTweenRotateActorAroundPointByOffset, TweenContainer) == 0x000000, "Member 'TweenFloatStandardFactory_BP_JoinTweenRotateActorAroundPointByOffset::TweenContainer' has a wrong offset!");
static_assert(offsetof(TweenFloatStandardFactory_BP_JoinTweenRotateActorAroundPointByOffset, TweenTarget) == 0x000008, "Member 'TweenFloatStandardFactory_BP_JoinTweenRotateActorAroundPointByOffset::TweenTarget' has a wrong offset!");
static_assert(offsetof(TweenFloatStandardFactory_BP_JoinTweenRotateActorAroundPointByOffset, PivotPoint) == 0x000010, "Member 'TweenFloatStandardFactory_BP_JoinTweenRotateActorAroundPointByOffset::PivotPoint' has a wrong offset!");
static_assert(offsetof(TweenFloatStandardFactory_BP_JoinTweenRotateActorAroundPointByOffset, OffsetAngle) == 0x00001C, "Member 'TweenFloatStandardFactory_BP_JoinTweenRotateActorAroundPointByOffset::OffsetAngle' has a wrong offset!");
static_assert(offsetof(TweenFloatStandardFactory_BP_JoinTweenRotateActorAroundPointByOffset, ReferenceAxis) == 0x000020, "Member 'TweenFloatStandardFactory_BP_JoinTweenRotateActorAroundPointByOffset::ReferenceAxis' has a wrong offset!");
static_assert(offsetof(TweenFloatStandardFactory_BP_JoinTweenRotateActorAroundPointByOffset, Duration) == 0x000024, "Member 'TweenFloatStandardFactory_BP_JoinTweenRotateActorAroundPointByOffset::Duration' has a wrong offset!");
static_assert(offsetof(TweenFloatStandardFactory_BP_JoinTweenRotateActorAroundPointByOffset, EaseType) == 0x000028, "Member 'TweenFloatStandardFactory_BP_JoinTweenRotateActorAroundPointByOffset::EaseType' has a wrong offset!");
static_assert(offsetof(TweenFloatStandardFactory_BP_JoinTweenRotateActorAroundPointByOffset, DeleteTweenOnHit) == 0x000029, "Member 'TweenFloatStandardFactory_BP_JoinTweenRotateActorAroundPointByOffset::DeleteTweenOnHit' has a wrong offset!");
static_assert(offsetof(TweenFloatStandardFactory_BP_JoinTweenRotateActorAroundPointByOffset, DeleteTweenOnOverlap) == 0x00002A, "Member 'TweenFloatStandardFactory_BP_JoinTweenRotateActorAroundPointByOffset::DeleteTweenOnOverlap' has a wrong offset!");
static_assert(offsetof(TweenFloatStandardFactory_BP_JoinTweenRotateActorAroundPointByOffset, Delay) == 0x00002C, "Member 'TweenFloatStandardFactory_BP_JoinTweenRotateActorAroundPointByOffset::Delay' has a wrong offset!");
static_assert(offsetof(TweenFloatStandardFactory_BP_JoinTweenRotateActorAroundPointByOffset, TimeScale) == 0x000030, "Member 'TweenFloatStandardFactory_BP_JoinTweenRotateActorAroundPointByOffset::TimeScale' has a wrong offset!");
static_assert(offsetof(TweenFloatStandardFactory_BP_JoinTweenRotateActorAroundPointByOffset, TweenWhileGameIsPaused) == 0x000034, "Member 'TweenFloatStandardFactory_BP_JoinTweenRotateActorAroundPointByOffset::TweenWhileGameIsPaused' has a wrong offset!");
static_assert(offsetof(TweenFloatStandardFactory_BP_JoinTweenRotateActorAroundPointByOffset, SequenceIndex) == 0x000038, "Member 'TweenFloatStandardFactory_BP_JoinTweenRotateActorAroundPointByOffset::SequenceIndex' has a wrong offset!");
static_assert(offsetof(TweenFloatStandardFactory_BP_JoinTweenRotateActorAroundPointByOffset, ReturnValue) == 0x000040, "Member 'TweenFloatStandardFactory_BP_JoinTweenRotateActorAroundPointByOffset::ReturnValue' has a wrong offset!");

// Function TweenMaker.TweenFloatStandardFactory.BP_JoinTweenRotateSceneComponentAroundPoint
// 0x0058 (0x0058 - 0x0000)
struct TweenFloatStandardFactory_BP_JoinTweenRotateSceneComponentAroundPoint final
{
public:
	class UTweenContainer*                        TweenContainer;                                    // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USceneComponent*                        TweenTarget;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, InstancedReference, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                PivotPoint;                                        // 0x0010(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         StartingAngle;                                     // 0x001C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         EndingAngle;                                       // 0x0020(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Radius;                                            // 0x0024(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                Axis;                                              // 0x0028(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Duration;                                          // 0x0034(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETweenEaseType                                EaseType;                                          // 0x0038(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          DeleteTweenOnHit;                                  // 0x0039(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          DeleteTweenOnOverlap;                              // 0x003A(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_3B[0x1];                                       // 0x003B(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Delay;                                             // 0x003C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TimeScale;                                         // 0x0040(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          TweenWhileGameIsPaused;                            // 0x0044(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_45[0x3];                                       // 0x0045(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         SequenceIndex;                                     // 0x0048(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4C[0x4];                                       // 0x004C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UTweenFloat*                            ReturnValue;                                       // 0x0050(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TweenFloatStandardFactory_BP_JoinTweenRotateSceneComponentAroundPoint) == 0x000008, "Wrong alignment on TweenFloatStandardFactory_BP_JoinTweenRotateSceneComponentAroundPoint");
static_assert(sizeof(TweenFloatStandardFactory_BP_JoinTweenRotateSceneComponentAroundPoint) == 0x000058, "Wrong size on TweenFloatStandardFactory_BP_JoinTweenRotateSceneComponentAroundPoint");
static_assert(offsetof(TweenFloatStandardFactory_BP_JoinTweenRotateSceneComponentAroundPoint, TweenContainer) == 0x000000, "Member 'TweenFloatStandardFactory_BP_JoinTweenRotateSceneComponentAroundPoint::TweenContainer' has a wrong offset!");
static_assert(offsetof(TweenFloatStandardFactory_BP_JoinTweenRotateSceneComponentAroundPoint, TweenTarget) == 0x000008, "Member 'TweenFloatStandardFactory_BP_JoinTweenRotateSceneComponentAroundPoint::TweenTarget' has a wrong offset!");
static_assert(offsetof(TweenFloatStandardFactory_BP_JoinTweenRotateSceneComponentAroundPoint, PivotPoint) == 0x000010, "Member 'TweenFloatStandardFactory_BP_JoinTweenRotateSceneComponentAroundPoint::PivotPoint' has a wrong offset!");
static_assert(offsetof(TweenFloatStandardFactory_BP_JoinTweenRotateSceneComponentAroundPoint, StartingAngle) == 0x00001C, "Member 'TweenFloatStandardFactory_BP_JoinTweenRotateSceneComponentAroundPoint::StartingAngle' has a wrong offset!");
static_assert(offsetof(TweenFloatStandardFactory_BP_JoinTweenRotateSceneComponentAroundPoint, EndingAngle) == 0x000020, "Member 'TweenFloatStandardFactory_BP_JoinTweenRotateSceneComponentAroundPoint::EndingAngle' has a wrong offset!");
static_assert(offsetof(TweenFloatStandardFactory_BP_JoinTweenRotateSceneComponentAroundPoint, Radius) == 0x000024, "Member 'TweenFloatStandardFactory_BP_JoinTweenRotateSceneComponentAroundPoint::Radius' has a wrong offset!");
static_assert(offsetof(TweenFloatStandardFactory_BP_JoinTweenRotateSceneComponentAroundPoint, Axis) == 0x000028, "Member 'TweenFloatStandardFactory_BP_JoinTweenRotateSceneComponentAroundPoint::Axis' has a wrong offset!");
static_assert(offsetof(TweenFloatStandardFactory_BP_JoinTweenRotateSceneComponentAroundPoint, Duration) == 0x000034, "Member 'TweenFloatStandardFactory_BP_JoinTweenRotateSceneComponentAroundPoint::Duration' has a wrong offset!");
static_assert(offsetof(TweenFloatStandardFactory_BP_JoinTweenRotateSceneComponentAroundPoint, EaseType) == 0x000038, "Member 'TweenFloatStandardFactory_BP_JoinTweenRotateSceneComponentAroundPoint::EaseType' has a wrong offset!");
static_assert(offsetof(TweenFloatStandardFactory_BP_JoinTweenRotateSceneComponentAroundPoint, DeleteTweenOnHit) == 0x000039, "Member 'TweenFloatStandardFactory_BP_JoinTweenRotateSceneComponentAroundPoint::DeleteTweenOnHit' has a wrong offset!");
static_assert(offsetof(TweenFloatStandardFactory_BP_JoinTweenRotateSceneComponentAroundPoint, DeleteTweenOnOverlap) == 0x00003A, "Member 'TweenFloatStandardFactory_BP_JoinTweenRotateSceneComponentAroundPoint::DeleteTweenOnOverlap' has a wrong offset!");
static_assert(offsetof(TweenFloatStandardFactory_BP_JoinTweenRotateSceneComponentAroundPoint, Delay) == 0x00003C, "Member 'TweenFloatStandardFactory_BP_JoinTweenRotateSceneComponentAroundPoint::Delay' has a wrong offset!");
static_assert(offsetof(TweenFloatStandardFactory_BP_JoinTweenRotateSceneComponentAroundPoint, TimeScale) == 0x000040, "Member 'TweenFloatStandardFactory_BP_JoinTweenRotateSceneComponentAroundPoint::TimeScale' has a wrong offset!");
static_assert(offsetof(TweenFloatStandardFactory_BP_JoinTweenRotateSceneComponentAroundPoint, TweenWhileGameIsPaused) == 0x000044, "Member 'TweenFloatStandardFactory_BP_JoinTweenRotateSceneComponentAroundPoint::TweenWhileGameIsPaused' has a wrong offset!");
static_assert(offsetof(TweenFloatStandardFactory_BP_JoinTweenRotateSceneComponentAroundPoint, SequenceIndex) == 0x000048, "Member 'TweenFloatStandardFactory_BP_JoinTweenRotateSceneComponentAroundPoint::SequenceIndex' has a wrong offset!");
static_assert(offsetof(TweenFloatStandardFactory_BP_JoinTweenRotateSceneComponentAroundPoint, ReturnValue) == 0x000050, "Member 'TweenFloatStandardFactory_BP_JoinTweenRotateSceneComponentAroundPoint::ReturnValue' has a wrong offset!");

// Function TweenMaker.TweenFloatStandardFactory.BP_JoinTweenRotateSceneComponentAroundPointByOffset
// 0x0048 (0x0048 - 0x0000)
struct TweenFloatStandardFactory_BP_JoinTweenRotateSceneComponentAroundPointByOffset final
{
public:
	class UTweenContainer*                        TweenContainer;                                    // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USceneComponent*                        TweenTarget;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, InstancedReference, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                PivotPoint;                                        // 0x0010(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         OffsetAngle;                                       // 0x001C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETweenReferenceAxis                           ReferenceAxis;                                     // 0x0020(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_21[0x3];                                       // 0x0021(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Duration;                                          // 0x0024(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETweenEaseType                                EaseType;                                          // 0x0028(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          DeleteTweenOnHit;                                  // 0x0029(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          DeleteTweenOnOverlap;                              // 0x002A(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2B[0x1];                                       // 0x002B(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Delay;                                             // 0x002C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TimeScale;                                         // 0x0030(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          TweenWhileGameIsPaused;                            // 0x0034(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_35[0x3];                                       // 0x0035(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         SequenceIndex;                                     // 0x0038(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_3C[0x4];                                       // 0x003C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UTweenFloat*                            ReturnValue;                                       // 0x0040(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TweenFloatStandardFactory_BP_JoinTweenRotateSceneComponentAroundPointByOffset) == 0x000008, "Wrong alignment on TweenFloatStandardFactory_BP_JoinTweenRotateSceneComponentAroundPointByOffset");
static_assert(sizeof(TweenFloatStandardFactory_BP_JoinTweenRotateSceneComponentAroundPointByOffset) == 0x000048, "Wrong size on TweenFloatStandardFactory_BP_JoinTweenRotateSceneComponentAroundPointByOffset");
static_assert(offsetof(TweenFloatStandardFactory_BP_JoinTweenRotateSceneComponentAroundPointByOffset, TweenContainer) == 0x000000, "Member 'TweenFloatStandardFactory_BP_JoinTweenRotateSceneComponentAroundPointByOffset::TweenContainer' has a wrong offset!");
static_assert(offsetof(TweenFloatStandardFactory_BP_JoinTweenRotateSceneComponentAroundPointByOffset, TweenTarget) == 0x000008, "Member 'TweenFloatStandardFactory_BP_JoinTweenRotateSceneComponentAroundPointByOffset::TweenTarget' has a wrong offset!");
static_assert(offsetof(TweenFloatStandardFactory_BP_JoinTweenRotateSceneComponentAroundPointByOffset, PivotPoint) == 0x000010, "Member 'TweenFloatStandardFactory_BP_JoinTweenRotateSceneComponentAroundPointByOffset::PivotPoint' has a wrong offset!");
static_assert(offsetof(TweenFloatStandardFactory_BP_JoinTweenRotateSceneComponentAroundPointByOffset, OffsetAngle) == 0x00001C, "Member 'TweenFloatStandardFactory_BP_JoinTweenRotateSceneComponentAroundPointByOffset::OffsetAngle' has a wrong offset!");
static_assert(offsetof(TweenFloatStandardFactory_BP_JoinTweenRotateSceneComponentAroundPointByOffset, ReferenceAxis) == 0x000020, "Member 'TweenFloatStandardFactory_BP_JoinTweenRotateSceneComponentAroundPointByOffset::ReferenceAxis' has a wrong offset!");
static_assert(offsetof(TweenFloatStandardFactory_BP_JoinTweenRotateSceneComponentAroundPointByOffset, Duration) == 0x000024, "Member 'TweenFloatStandardFactory_BP_JoinTweenRotateSceneComponentAroundPointByOffset::Duration' has a wrong offset!");
static_assert(offsetof(TweenFloatStandardFactory_BP_JoinTweenRotateSceneComponentAroundPointByOffset, EaseType) == 0x000028, "Member 'TweenFloatStandardFactory_BP_JoinTweenRotateSceneComponentAroundPointByOffset::EaseType' has a wrong offset!");
static_assert(offsetof(TweenFloatStandardFactory_BP_JoinTweenRotateSceneComponentAroundPointByOffset, DeleteTweenOnHit) == 0x000029, "Member 'TweenFloatStandardFactory_BP_JoinTweenRotateSceneComponentAroundPointByOffset::DeleteTweenOnHit' has a wrong offset!");
static_assert(offsetof(TweenFloatStandardFactory_BP_JoinTweenRotateSceneComponentAroundPointByOffset, DeleteTweenOnOverlap) == 0x00002A, "Member 'TweenFloatStandardFactory_BP_JoinTweenRotateSceneComponentAroundPointByOffset::DeleteTweenOnOverlap' has a wrong offset!");
static_assert(offsetof(TweenFloatStandardFactory_BP_JoinTweenRotateSceneComponentAroundPointByOffset, Delay) == 0x00002C, "Member 'TweenFloatStandardFactory_BP_JoinTweenRotateSceneComponentAroundPointByOffset::Delay' has a wrong offset!");
static_assert(offsetof(TweenFloatStandardFactory_BP_JoinTweenRotateSceneComponentAroundPointByOffset, TimeScale) == 0x000030, "Member 'TweenFloatStandardFactory_BP_JoinTweenRotateSceneComponentAroundPointByOffset::TimeScale' has a wrong offset!");
static_assert(offsetof(TweenFloatStandardFactory_BP_JoinTweenRotateSceneComponentAroundPointByOffset, TweenWhileGameIsPaused) == 0x000034, "Member 'TweenFloatStandardFactory_BP_JoinTweenRotateSceneComponentAroundPointByOffset::TweenWhileGameIsPaused' has a wrong offset!");
static_assert(offsetof(TweenFloatStandardFactory_BP_JoinTweenRotateSceneComponentAroundPointByOffset, SequenceIndex) == 0x000038, "Member 'TweenFloatStandardFactory_BP_JoinTweenRotateSceneComponentAroundPointByOffset::SequenceIndex' has a wrong offset!");
static_assert(offsetof(TweenFloatStandardFactory_BP_JoinTweenRotateSceneComponentAroundPointByOffset, ReturnValue) == 0x000040, "Member 'TweenFloatStandardFactory_BP_JoinTweenRotateSceneComponentAroundPointByOffset::ReturnValue' has a wrong offset!");

// Function TweenMaker.TweenFloatStandardFactory.BP_JoinTweenSceneComponentFollowSpline
// 0x0040 (0x0040 - 0x0000)
struct TweenFloatStandardFactory_BP_JoinTweenSceneComponentFollowSpline final
{
public:
	class UTweenContainer*                        TweenContainer;                                    // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USceneComponent*                        TweenTarget;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, InstancedReference, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USplineComponent*                       Spline;                                            // 0x0010(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Duration;                                          // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ApplyRotation;                                     // 0x001C(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ApplyScale;                                        // 0x001D(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          UseConstantSpeed;                                  // 0x001E(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETweenEaseType                                EaseType;                                          // 0x001F(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          DeleteTweenOnHit;                                  // 0x0020(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          DeleteTweenOnOverlap;                              // 0x0021(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_22[0x2];                                       // 0x0022(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Delay;                                             // 0x0024(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TimeScale;                                         // 0x0028(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          TweenWhileGameIsPaused;                            // 0x002C(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2D[0x3];                                       // 0x002D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         SequenceIndex;                                     // 0x0030(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_34[0x4];                                       // 0x0034(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UTweenFloat*                            ReturnValue;                                       // 0x0038(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TweenFloatStandardFactory_BP_JoinTweenSceneComponentFollowSpline) == 0x000008, "Wrong alignment on TweenFloatStandardFactory_BP_JoinTweenSceneComponentFollowSpline");
static_assert(sizeof(TweenFloatStandardFactory_BP_JoinTweenSceneComponentFollowSpline) == 0x000040, "Wrong size on TweenFloatStandardFactory_BP_JoinTweenSceneComponentFollowSpline");
static_assert(offsetof(TweenFloatStandardFactory_BP_JoinTweenSceneComponentFollowSpline, TweenContainer) == 0x000000, "Member 'TweenFloatStandardFactory_BP_JoinTweenSceneComponentFollowSpline::TweenContainer' has a wrong offset!");
static_assert(offsetof(TweenFloatStandardFactory_BP_JoinTweenSceneComponentFollowSpline, TweenTarget) == 0x000008, "Member 'TweenFloatStandardFactory_BP_JoinTweenSceneComponentFollowSpline::TweenTarget' has a wrong offset!");
static_assert(offsetof(TweenFloatStandardFactory_BP_JoinTweenSceneComponentFollowSpline, Spline) == 0x000010, "Member 'TweenFloatStandardFactory_BP_JoinTweenSceneComponentFollowSpline::Spline' has a wrong offset!");
static_assert(offsetof(TweenFloatStandardFactory_BP_JoinTweenSceneComponentFollowSpline, Duration) == 0x000018, "Member 'TweenFloatStandardFactory_BP_JoinTweenSceneComponentFollowSpline::Duration' has a wrong offset!");
static_assert(offsetof(TweenFloatStandardFactory_BP_JoinTweenSceneComponentFollowSpline, ApplyRotation) == 0x00001C, "Member 'TweenFloatStandardFactory_BP_JoinTweenSceneComponentFollowSpline::ApplyRotation' has a wrong offset!");
static_assert(offsetof(TweenFloatStandardFactory_BP_JoinTweenSceneComponentFollowSpline, ApplyScale) == 0x00001D, "Member 'TweenFloatStandardFactory_BP_JoinTweenSceneComponentFollowSpline::ApplyScale' has a wrong offset!");
static_assert(offsetof(TweenFloatStandardFactory_BP_JoinTweenSceneComponentFollowSpline, UseConstantSpeed) == 0x00001E, "Member 'TweenFloatStandardFactory_BP_JoinTweenSceneComponentFollowSpline::UseConstantSpeed' has a wrong offset!");
static_assert(offsetof(TweenFloatStandardFactory_BP_JoinTweenSceneComponentFollowSpline, EaseType) == 0x00001F, "Member 'TweenFloatStandardFactory_BP_JoinTweenSceneComponentFollowSpline::EaseType' has a wrong offset!");
static_assert(offsetof(TweenFloatStandardFactory_BP_JoinTweenSceneComponentFollowSpline, DeleteTweenOnHit) == 0x000020, "Member 'TweenFloatStandardFactory_BP_JoinTweenSceneComponentFollowSpline::DeleteTweenOnHit' has a wrong offset!");
static_assert(offsetof(TweenFloatStandardFactory_BP_JoinTweenSceneComponentFollowSpline, DeleteTweenOnOverlap) == 0x000021, "Member 'TweenFloatStandardFactory_BP_JoinTweenSceneComponentFollowSpline::DeleteTweenOnOverlap' has a wrong offset!");
static_assert(offsetof(TweenFloatStandardFactory_BP_JoinTweenSceneComponentFollowSpline, Delay) == 0x000024, "Member 'TweenFloatStandardFactory_BP_JoinTweenSceneComponentFollowSpline::Delay' has a wrong offset!");
static_assert(offsetof(TweenFloatStandardFactory_BP_JoinTweenSceneComponentFollowSpline, TimeScale) == 0x000028, "Member 'TweenFloatStandardFactory_BP_JoinTweenSceneComponentFollowSpline::TimeScale' has a wrong offset!");
static_assert(offsetof(TweenFloatStandardFactory_BP_JoinTweenSceneComponentFollowSpline, TweenWhileGameIsPaused) == 0x00002C, "Member 'TweenFloatStandardFactory_BP_JoinTweenSceneComponentFollowSpline::TweenWhileGameIsPaused' has a wrong offset!");
static_assert(offsetof(TweenFloatStandardFactory_BP_JoinTweenSceneComponentFollowSpline, SequenceIndex) == 0x000030, "Member 'TweenFloatStandardFactory_BP_JoinTweenSceneComponentFollowSpline::SequenceIndex' has a wrong offset!");
static_assert(offsetof(TweenFloatStandardFactory_BP_JoinTweenSceneComponentFollowSpline, ReturnValue) == 0x000038, "Member 'TweenFloatStandardFactory_BP_JoinTweenSceneComponentFollowSpline::ReturnValue' has a wrong offset!");

// Function TweenMaker.TweenFloatStandardFactory.BP_JoinTweenWidgetAngleTo
// 0x0038 (0x0038 - 0x0000)
struct TweenFloatStandardFactory_BP_JoinTweenWidgetAngleTo final
{
public:
	class UTweenContainer*                        TweenContainer;                                    // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UWidget*                                TweenTarget;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, InstancedReference, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         To;                                                // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Duration;                                          // 0x0014(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETweenEaseType                                EaseType;                                          // 0x0018(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x3];                                       // 0x0019(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Delay;                                             // 0x001C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TimeScale;                                         // 0x0020(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          TweenWhileGameIsPaused;                            // 0x0024(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_25[0x3];                                       // 0x0025(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         SequenceIndex;                                     // 0x0028(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2C[0x4];                                       // 0x002C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UTweenFloat*                            ReturnValue;                                       // 0x0030(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TweenFloatStandardFactory_BP_JoinTweenWidgetAngleTo) == 0x000008, "Wrong alignment on TweenFloatStandardFactory_BP_JoinTweenWidgetAngleTo");
static_assert(sizeof(TweenFloatStandardFactory_BP_JoinTweenWidgetAngleTo) == 0x000038, "Wrong size on TweenFloatStandardFactory_BP_JoinTweenWidgetAngleTo");
static_assert(offsetof(TweenFloatStandardFactory_BP_JoinTweenWidgetAngleTo, TweenContainer) == 0x000000, "Member 'TweenFloatStandardFactory_BP_JoinTweenWidgetAngleTo::TweenContainer' has a wrong offset!");
static_assert(offsetof(TweenFloatStandardFactory_BP_JoinTweenWidgetAngleTo, TweenTarget) == 0x000008, "Member 'TweenFloatStandardFactory_BP_JoinTweenWidgetAngleTo::TweenTarget' has a wrong offset!");
static_assert(offsetof(TweenFloatStandardFactory_BP_JoinTweenWidgetAngleTo, To) == 0x000010, "Member 'TweenFloatStandardFactory_BP_JoinTweenWidgetAngleTo::To' has a wrong offset!");
static_assert(offsetof(TweenFloatStandardFactory_BP_JoinTweenWidgetAngleTo, Duration) == 0x000014, "Member 'TweenFloatStandardFactory_BP_JoinTweenWidgetAngleTo::Duration' has a wrong offset!");
static_assert(offsetof(TweenFloatStandardFactory_BP_JoinTweenWidgetAngleTo, EaseType) == 0x000018, "Member 'TweenFloatStandardFactory_BP_JoinTweenWidgetAngleTo::EaseType' has a wrong offset!");
static_assert(offsetof(TweenFloatStandardFactory_BP_JoinTweenWidgetAngleTo, Delay) == 0x00001C, "Member 'TweenFloatStandardFactory_BP_JoinTweenWidgetAngleTo::Delay' has a wrong offset!");
static_assert(offsetof(TweenFloatStandardFactory_BP_JoinTweenWidgetAngleTo, TimeScale) == 0x000020, "Member 'TweenFloatStandardFactory_BP_JoinTweenWidgetAngleTo::TimeScale' has a wrong offset!");
static_assert(offsetof(TweenFloatStandardFactory_BP_JoinTweenWidgetAngleTo, TweenWhileGameIsPaused) == 0x000024, "Member 'TweenFloatStandardFactory_BP_JoinTweenWidgetAngleTo::TweenWhileGameIsPaused' has a wrong offset!");
static_assert(offsetof(TweenFloatStandardFactory_BP_JoinTweenWidgetAngleTo, SequenceIndex) == 0x000028, "Member 'TweenFloatStandardFactory_BP_JoinTweenWidgetAngleTo::SequenceIndex' has a wrong offset!");
static_assert(offsetof(TweenFloatStandardFactory_BP_JoinTweenWidgetAngleTo, ReturnValue) == 0x000030, "Member 'TweenFloatStandardFactory_BP_JoinTweenWidgetAngleTo::ReturnValue' has a wrong offset!");

// Function TweenMaker.TweenFloatStandardFactory.BP_JoinTweenWidgetOpacityTo
// 0x0038 (0x0038 - 0x0000)
struct TweenFloatStandardFactory_BP_JoinTweenWidgetOpacityTo final
{
public:
	class UTweenContainer*                        TweenContainer;                                    // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UWidget*                                TweenTarget;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, InstancedReference, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         To;                                                // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Duration;                                          // 0x0014(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETweenEaseType                                EaseType;                                          // 0x0018(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x3];                                       // 0x0019(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Delay;                                             // 0x001C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TimeScale;                                         // 0x0020(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          TweenWhileGameIsPaused;                            // 0x0024(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_25[0x3];                                       // 0x0025(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         SequenceIndex;                                     // 0x0028(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2C[0x4];                                       // 0x002C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UTweenFloat*                            ReturnValue;                                       // 0x0030(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TweenFloatStandardFactory_BP_JoinTweenWidgetOpacityTo) == 0x000008, "Wrong alignment on TweenFloatStandardFactory_BP_JoinTweenWidgetOpacityTo");
static_assert(sizeof(TweenFloatStandardFactory_BP_JoinTweenWidgetOpacityTo) == 0x000038, "Wrong size on TweenFloatStandardFactory_BP_JoinTweenWidgetOpacityTo");
static_assert(offsetof(TweenFloatStandardFactory_BP_JoinTweenWidgetOpacityTo, TweenContainer) == 0x000000, "Member 'TweenFloatStandardFactory_BP_JoinTweenWidgetOpacityTo::TweenContainer' has a wrong offset!");
static_assert(offsetof(TweenFloatStandardFactory_BP_JoinTweenWidgetOpacityTo, TweenTarget) == 0x000008, "Member 'TweenFloatStandardFactory_BP_JoinTweenWidgetOpacityTo::TweenTarget' has a wrong offset!");
static_assert(offsetof(TweenFloatStandardFactory_BP_JoinTweenWidgetOpacityTo, To) == 0x000010, "Member 'TweenFloatStandardFactory_BP_JoinTweenWidgetOpacityTo::To' has a wrong offset!");
static_assert(offsetof(TweenFloatStandardFactory_BP_JoinTweenWidgetOpacityTo, Duration) == 0x000014, "Member 'TweenFloatStandardFactory_BP_JoinTweenWidgetOpacityTo::Duration' has a wrong offset!");
static_assert(offsetof(TweenFloatStandardFactory_BP_JoinTweenWidgetOpacityTo, EaseType) == 0x000018, "Member 'TweenFloatStandardFactory_BP_JoinTweenWidgetOpacityTo::EaseType' has a wrong offset!");
static_assert(offsetof(TweenFloatStandardFactory_BP_JoinTweenWidgetOpacityTo, Delay) == 0x00001C, "Member 'TweenFloatStandardFactory_BP_JoinTweenWidgetOpacityTo::Delay' has a wrong offset!");
static_assert(offsetof(TweenFloatStandardFactory_BP_JoinTweenWidgetOpacityTo, TimeScale) == 0x000020, "Member 'TweenFloatStandardFactory_BP_JoinTweenWidgetOpacityTo::TimeScale' has a wrong offset!");
static_assert(offsetof(TweenFloatStandardFactory_BP_JoinTweenWidgetOpacityTo, TweenWhileGameIsPaused) == 0x000024, "Member 'TweenFloatStandardFactory_BP_JoinTweenWidgetOpacityTo::TweenWhileGameIsPaused' has a wrong offset!");
static_assert(offsetof(TweenFloatStandardFactory_BP_JoinTweenWidgetOpacityTo, SequenceIndex) == 0x000028, "Member 'TweenFloatStandardFactory_BP_JoinTweenWidgetOpacityTo::SequenceIndex' has a wrong offset!");
static_assert(offsetof(TweenFloatStandardFactory_BP_JoinTweenWidgetOpacityTo, ReturnValue) == 0x000030, "Member 'TweenFloatStandardFactory_BP_JoinTweenWidgetOpacityTo::ReturnValue' has a wrong offset!");

// Function TweenMaker.TweenLinearColor.GetCurrentValue
// 0x0010 (0x0010 - 0x0000)
struct TweenLinearColor_GetCurrentValue final
{
public:
	struct FLinearColor                           ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TweenLinearColor_GetCurrentValue) == 0x000004, "Wrong alignment on TweenLinearColor_GetCurrentValue");
static_assert(sizeof(TweenLinearColor_GetCurrentValue) == 0x000010, "Wrong size on TweenLinearColor_GetCurrentValue");
static_assert(offsetof(TweenLinearColor_GetCurrentValue, ReturnValue) == 0x000000, "Member 'TweenLinearColor_GetCurrentValue::ReturnValue' has a wrong offset!");

// Function TweenMaker.TweenLinearColorLatentFactory.BP_AppendLatentTweenMaterialVectorFromTo
// 0x0068 (0x0068 - 0x0000)
struct TweenLinearColorLatentFactory_BP_AppendLatentTweenMaterialVectorFromTo final
{
public:
	class UTweenContainer*                        TweenContainer;                                    // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UTweenLinearColor*                      OutTween;                                          // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UMaterialInstanceDynamic*               TweenTarget;                                       // 0x0010(0x0008)(Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   ParameterName;                                     // 0x0018(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           From;                                              // 0x0020(0x0010)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           To;                                                // 0x0030(0x0010)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Duration;                                          // 0x0040(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETweenEaseType                                EaseType;                                          // 0x0044(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_45[0x3];                                       // 0x0045(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         NumLoops;                                          // 0x0048(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETweenLoopType                                LoopType;                                          // 0x004C(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4D[0x3];                                       // 0x004D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Delay;                                             // 0x0050(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TimeScale;                                         // 0x0054(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          TweenWhileGameIsPaused;                            // 0x0058(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_59[0x7];                                       // 0x0059(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UTweenLinearColorLatentFactory*         ReturnValue;                                       // 0x0060(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TweenLinearColorLatentFactory_BP_AppendLatentTweenMaterialVectorFromTo) == 0x000008, "Wrong alignment on TweenLinearColorLatentFactory_BP_AppendLatentTweenMaterialVectorFromTo");
static_assert(sizeof(TweenLinearColorLatentFactory_BP_AppendLatentTweenMaterialVectorFromTo) == 0x000068, "Wrong size on TweenLinearColorLatentFactory_BP_AppendLatentTweenMaterialVectorFromTo");
static_assert(offsetof(TweenLinearColorLatentFactory_BP_AppendLatentTweenMaterialVectorFromTo, TweenContainer) == 0x000000, "Member 'TweenLinearColorLatentFactory_BP_AppendLatentTweenMaterialVectorFromTo::TweenContainer' has a wrong offset!");
static_assert(offsetof(TweenLinearColorLatentFactory_BP_AppendLatentTweenMaterialVectorFromTo, OutTween) == 0x000008, "Member 'TweenLinearColorLatentFactory_BP_AppendLatentTweenMaterialVectorFromTo::OutTween' has a wrong offset!");
static_assert(offsetof(TweenLinearColorLatentFactory_BP_AppendLatentTweenMaterialVectorFromTo, TweenTarget) == 0x000010, "Member 'TweenLinearColorLatentFactory_BP_AppendLatentTweenMaterialVectorFromTo::TweenTarget' has a wrong offset!");
static_assert(offsetof(TweenLinearColorLatentFactory_BP_AppendLatentTweenMaterialVectorFromTo, ParameterName) == 0x000018, "Member 'TweenLinearColorLatentFactory_BP_AppendLatentTweenMaterialVectorFromTo::ParameterName' has a wrong offset!");
static_assert(offsetof(TweenLinearColorLatentFactory_BP_AppendLatentTweenMaterialVectorFromTo, From) == 0x000020, "Member 'TweenLinearColorLatentFactory_BP_AppendLatentTweenMaterialVectorFromTo::From' has a wrong offset!");
static_assert(offsetof(TweenLinearColorLatentFactory_BP_AppendLatentTweenMaterialVectorFromTo, To) == 0x000030, "Member 'TweenLinearColorLatentFactory_BP_AppendLatentTweenMaterialVectorFromTo::To' has a wrong offset!");
static_assert(offsetof(TweenLinearColorLatentFactory_BP_AppendLatentTweenMaterialVectorFromTo, Duration) == 0x000040, "Member 'TweenLinearColorLatentFactory_BP_AppendLatentTweenMaterialVectorFromTo::Duration' has a wrong offset!");
static_assert(offsetof(TweenLinearColorLatentFactory_BP_AppendLatentTweenMaterialVectorFromTo, EaseType) == 0x000044, "Member 'TweenLinearColorLatentFactory_BP_AppendLatentTweenMaterialVectorFromTo::EaseType' has a wrong offset!");
static_assert(offsetof(TweenLinearColorLatentFactory_BP_AppendLatentTweenMaterialVectorFromTo, NumLoops) == 0x000048, "Member 'TweenLinearColorLatentFactory_BP_AppendLatentTweenMaterialVectorFromTo::NumLoops' has a wrong offset!");
static_assert(offsetof(TweenLinearColorLatentFactory_BP_AppendLatentTweenMaterialVectorFromTo, LoopType) == 0x00004C, "Member 'TweenLinearColorLatentFactory_BP_AppendLatentTweenMaterialVectorFromTo::LoopType' has a wrong offset!");
static_assert(offsetof(TweenLinearColorLatentFactory_BP_AppendLatentTweenMaterialVectorFromTo, Delay) == 0x000050, "Member 'TweenLinearColorLatentFactory_BP_AppendLatentTweenMaterialVectorFromTo::Delay' has a wrong offset!");
static_assert(offsetof(TweenLinearColorLatentFactory_BP_AppendLatentTweenMaterialVectorFromTo, TimeScale) == 0x000054, "Member 'TweenLinearColorLatentFactory_BP_AppendLatentTweenMaterialVectorFromTo::TimeScale' has a wrong offset!");
static_assert(offsetof(TweenLinearColorLatentFactory_BP_AppendLatentTweenMaterialVectorFromTo, TweenWhileGameIsPaused) == 0x000058, "Member 'TweenLinearColorLatentFactory_BP_AppendLatentTweenMaterialVectorFromTo::TweenWhileGameIsPaused' has a wrong offset!");
static_assert(offsetof(TweenLinearColorLatentFactory_BP_AppendLatentTweenMaterialVectorFromTo, ReturnValue) == 0x000060, "Member 'TweenLinearColorLatentFactory_BP_AppendLatentTweenMaterialVectorFromTo::ReturnValue' has a wrong offset!");

// Function TweenMaker.TweenLinearColorLatentFactory.BP_AppendLatentTweenMaterialVectorTo
// 0x0058 (0x0058 - 0x0000)
struct TweenLinearColorLatentFactory_BP_AppendLatentTweenMaterialVectorTo final
{
public:
	class UTweenContainer*                        TweenContainer;                                    // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UTweenLinearColor*                      OutTween;                                          // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UMaterialInstanceDynamic*               TweenTarget;                                       // 0x0010(0x0008)(Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   ParameterName;                                     // 0x0018(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           To;                                                // 0x0020(0x0010)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Duration;                                          // 0x0030(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETweenEaseType                                EaseType;                                          // 0x0034(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_35[0x3];                                       // 0x0035(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         NumLoops;                                          // 0x0038(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETweenLoopType                                LoopType;                                          // 0x003C(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_3D[0x3];                                       // 0x003D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Delay;                                             // 0x0040(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TimeScale;                                         // 0x0044(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          TweenWhileGameIsPaused;                            // 0x0048(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_49[0x7];                                       // 0x0049(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UTweenLinearColorLatentFactory*         ReturnValue;                                       // 0x0050(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TweenLinearColorLatentFactory_BP_AppendLatentTweenMaterialVectorTo) == 0x000008, "Wrong alignment on TweenLinearColorLatentFactory_BP_AppendLatentTweenMaterialVectorTo");
static_assert(sizeof(TweenLinearColorLatentFactory_BP_AppendLatentTweenMaterialVectorTo) == 0x000058, "Wrong size on TweenLinearColorLatentFactory_BP_AppendLatentTweenMaterialVectorTo");
static_assert(offsetof(TweenLinearColorLatentFactory_BP_AppendLatentTweenMaterialVectorTo, TweenContainer) == 0x000000, "Member 'TweenLinearColorLatentFactory_BP_AppendLatentTweenMaterialVectorTo::TweenContainer' has a wrong offset!");
static_assert(offsetof(TweenLinearColorLatentFactory_BP_AppendLatentTweenMaterialVectorTo, OutTween) == 0x000008, "Member 'TweenLinearColorLatentFactory_BP_AppendLatentTweenMaterialVectorTo::OutTween' has a wrong offset!");
static_assert(offsetof(TweenLinearColorLatentFactory_BP_AppendLatentTweenMaterialVectorTo, TweenTarget) == 0x000010, "Member 'TweenLinearColorLatentFactory_BP_AppendLatentTweenMaterialVectorTo::TweenTarget' has a wrong offset!");
static_assert(offsetof(TweenLinearColorLatentFactory_BP_AppendLatentTweenMaterialVectorTo, ParameterName) == 0x000018, "Member 'TweenLinearColorLatentFactory_BP_AppendLatentTweenMaterialVectorTo::ParameterName' has a wrong offset!");
static_assert(offsetof(TweenLinearColorLatentFactory_BP_AppendLatentTweenMaterialVectorTo, To) == 0x000020, "Member 'TweenLinearColorLatentFactory_BP_AppendLatentTweenMaterialVectorTo::To' has a wrong offset!");
static_assert(offsetof(TweenLinearColorLatentFactory_BP_AppendLatentTweenMaterialVectorTo, Duration) == 0x000030, "Member 'TweenLinearColorLatentFactory_BP_AppendLatentTweenMaterialVectorTo::Duration' has a wrong offset!");
static_assert(offsetof(TweenLinearColorLatentFactory_BP_AppendLatentTweenMaterialVectorTo, EaseType) == 0x000034, "Member 'TweenLinearColorLatentFactory_BP_AppendLatentTweenMaterialVectorTo::EaseType' has a wrong offset!");
static_assert(offsetof(TweenLinearColorLatentFactory_BP_AppendLatentTweenMaterialVectorTo, NumLoops) == 0x000038, "Member 'TweenLinearColorLatentFactory_BP_AppendLatentTweenMaterialVectorTo::NumLoops' has a wrong offset!");
static_assert(offsetof(TweenLinearColorLatentFactory_BP_AppendLatentTweenMaterialVectorTo, LoopType) == 0x00003C, "Member 'TweenLinearColorLatentFactory_BP_AppendLatentTweenMaterialVectorTo::LoopType' has a wrong offset!");
static_assert(offsetof(TweenLinearColorLatentFactory_BP_AppendLatentTweenMaterialVectorTo, Delay) == 0x000040, "Member 'TweenLinearColorLatentFactory_BP_AppendLatentTweenMaterialVectorTo::Delay' has a wrong offset!");
static_assert(offsetof(TweenLinearColorLatentFactory_BP_AppendLatentTweenMaterialVectorTo, TimeScale) == 0x000044, "Member 'TweenLinearColorLatentFactory_BP_AppendLatentTweenMaterialVectorTo::TimeScale' has a wrong offset!");
static_assert(offsetof(TweenLinearColorLatentFactory_BP_AppendLatentTweenMaterialVectorTo, TweenWhileGameIsPaused) == 0x000048, "Member 'TweenLinearColorLatentFactory_BP_AppendLatentTweenMaterialVectorTo::TweenWhileGameIsPaused' has a wrong offset!");
static_assert(offsetof(TweenLinearColorLatentFactory_BP_AppendLatentTweenMaterialVectorTo, ReturnValue) == 0x000050, "Member 'TweenLinearColorLatentFactory_BP_AppendLatentTweenMaterialVectorTo::ReturnValue' has a wrong offset!");

// Function TweenMaker.TweenLinearColorLatentFactory.BP_CreateLatentTweenMaterialVectorFromTo
// 0x0070 (0x0070 - 0x0000)
struct TweenLinearColorLatentFactory_BP_CreateLatentTweenMaterialVectorFromTo final
{
public:
	class UTweenManagerComponent*                 TweenManager;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UMaterialInstanceDynamic*               TweenTarget;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UTweenContainer*                        OutTweenContainer;                                 // 0x0010(0x0008)(Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UTweenLinearColor*                      OutTween;                                          // 0x0018(0x0008)(Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   ParameterName;                                     // 0x0020(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           From;                                              // 0x0028(0x0010)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           To;                                                // 0x0038(0x0010)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Duration;                                          // 0x0048(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETweenEaseType                                EaseType;                                          // 0x004C(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4D[0x3];                                       // 0x004D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         NumLoops;                                          // 0x0050(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETweenLoopType                                LoopType;                                          // 0x0054(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_55[0x3];                                       // 0x0055(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Delay;                                             // 0x0058(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TimeScale;                                         // 0x005C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          TweenWhileGameIsPaused;                            // 0x0060(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_61[0x7];                                       // 0x0061(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UTweenLinearColorLatentFactory*         ReturnValue;                                       // 0x0068(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TweenLinearColorLatentFactory_BP_CreateLatentTweenMaterialVectorFromTo) == 0x000008, "Wrong alignment on TweenLinearColorLatentFactory_BP_CreateLatentTweenMaterialVectorFromTo");
static_assert(sizeof(TweenLinearColorLatentFactory_BP_CreateLatentTweenMaterialVectorFromTo) == 0x000070, "Wrong size on TweenLinearColorLatentFactory_BP_CreateLatentTweenMaterialVectorFromTo");
static_assert(offsetof(TweenLinearColorLatentFactory_BP_CreateLatentTweenMaterialVectorFromTo, TweenManager) == 0x000000, "Member 'TweenLinearColorLatentFactory_BP_CreateLatentTweenMaterialVectorFromTo::TweenManager' has a wrong offset!");
static_assert(offsetof(TweenLinearColorLatentFactory_BP_CreateLatentTweenMaterialVectorFromTo, TweenTarget) == 0x000008, "Member 'TweenLinearColorLatentFactory_BP_CreateLatentTweenMaterialVectorFromTo::TweenTarget' has a wrong offset!");
static_assert(offsetof(TweenLinearColorLatentFactory_BP_CreateLatentTweenMaterialVectorFromTo, OutTweenContainer) == 0x000010, "Member 'TweenLinearColorLatentFactory_BP_CreateLatentTweenMaterialVectorFromTo::OutTweenContainer' has a wrong offset!");
static_assert(offsetof(TweenLinearColorLatentFactory_BP_CreateLatentTweenMaterialVectorFromTo, OutTween) == 0x000018, "Member 'TweenLinearColorLatentFactory_BP_CreateLatentTweenMaterialVectorFromTo::OutTween' has a wrong offset!");
static_assert(offsetof(TweenLinearColorLatentFactory_BP_CreateLatentTweenMaterialVectorFromTo, ParameterName) == 0x000020, "Member 'TweenLinearColorLatentFactory_BP_CreateLatentTweenMaterialVectorFromTo::ParameterName' has a wrong offset!");
static_assert(offsetof(TweenLinearColorLatentFactory_BP_CreateLatentTweenMaterialVectorFromTo, From) == 0x000028, "Member 'TweenLinearColorLatentFactory_BP_CreateLatentTweenMaterialVectorFromTo::From' has a wrong offset!");
static_assert(offsetof(TweenLinearColorLatentFactory_BP_CreateLatentTweenMaterialVectorFromTo, To) == 0x000038, "Member 'TweenLinearColorLatentFactory_BP_CreateLatentTweenMaterialVectorFromTo::To' has a wrong offset!");
static_assert(offsetof(TweenLinearColorLatentFactory_BP_CreateLatentTweenMaterialVectorFromTo, Duration) == 0x000048, "Member 'TweenLinearColorLatentFactory_BP_CreateLatentTweenMaterialVectorFromTo::Duration' has a wrong offset!");
static_assert(offsetof(TweenLinearColorLatentFactory_BP_CreateLatentTweenMaterialVectorFromTo, EaseType) == 0x00004C, "Member 'TweenLinearColorLatentFactory_BP_CreateLatentTweenMaterialVectorFromTo::EaseType' has a wrong offset!");
static_assert(offsetof(TweenLinearColorLatentFactory_BP_CreateLatentTweenMaterialVectorFromTo, NumLoops) == 0x000050, "Member 'TweenLinearColorLatentFactory_BP_CreateLatentTweenMaterialVectorFromTo::NumLoops' has a wrong offset!");
static_assert(offsetof(TweenLinearColorLatentFactory_BP_CreateLatentTweenMaterialVectorFromTo, LoopType) == 0x000054, "Member 'TweenLinearColorLatentFactory_BP_CreateLatentTweenMaterialVectorFromTo::LoopType' has a wrong offset!");
static_assert(offsetof(TweenLinearColorLatentFactory_BP_CreateLatentTweenMaterialVectorFromTo, Delay) == 0x000058, "Member 'TweenLinearColorLatentFactory_BP_CreateLatentTweenMaterialVectorFromTo::Delay' has a wrong offset!");
static_assert(offsetof(TweenLinearColorLatentFactory_BP_CreateLatentTweenMaterialVectorFromTo, TimeScale) == 0x00005C, "Member 'TweenLinearColorLatentFactory_BP_CreateLatentTweenMaterialVectorFromTo::TimeScale' has a wrong offset!");
static_assert(offsetof(TweenLinearColorLatentFactory_BP_CreateLatentTweenMaterialVectorFromTo, TweenWhileGameIsPaused) == 0x000060, "Member 'TweenLinearColorLatentFactory_BP_CreateLatentTweenMaterialVectorFromTo::TweenWhileGameIsPaused' has a wrong offset!");
static_assert(offsetof(TweenLinearColorLatentFactory_BP_CreateLatentTweenMaterialVectorFromTo, ReturnValue) == 0x000068, "Member 'TweenLinearColorLatentFactory_BP_CreateLatentTweenMaterialVectorFromTo::ReturnValue' has a wrong offset!");

// Function TweenMaker.TweenLinearColorLatentFactory.BP_CreateLatentTweenMaterialVectorTo
// 0x0060 (0x0060 - 0x0000)
struct TweenLinearColorLatentFactory_BP_CreateLatentTweenMaterialVectorTo final
{
public:
	class UTweenManagerComponent*                 TweenManager;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UMaterialInstanceDynamic*               TweenTarget;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UTweenContainer*                        OutTweenContainer;                                 // 0x0010(0x0008)(Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UTweenLinearColor*                      OutTween;                                          // 0x0018(0x0008)(Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   ParameterName;                                     // 0x0020(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           To;                                                // 0x0028(0x0010)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Duration;                                          // 0x0038(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETweenEaseType                                EaseType;                                          // 0x003C(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_3D[0x3];                                       // 0x003D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         NumLoops;                                          // 0x0040(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETweenLoopType                                LoopType;                                          // 0x0044(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_45[0x3];                                       // 0x0045(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Delay;                                             // 0x0048(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TimeScale;                                         // 0x004C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          TweenWhileGameIsPaused;                            // 0x0050(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_51[0x7];                                       // 0x0051(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UTweenLinearColorLatentFactory*         ReturnValue;                                       // 0x0058(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TweenLinearColorLatentFactory_BP_CreateLatentTweenMaterialVectorTo) == 0x000008, "Wrong alignment on TweenLinearColorLatentFactory_BP_CreateLatentTweenMaterialVectorTo");
static_assert(sizeof(TweenLinearColorLatentFactory_BP_CreateLatentTweenMaterialVectorTo) == 0x000060, "Wrong size on TweenLinearColorLatentFactory_BP_CreateLatentTweenMaterialVectorTo");
static_assert(offsetof(TweenLinearColorLatentFactory_BP_CreateLatentTweenMaterialVectorTo, TweenManager) == 0x000000, "Member 'TweenLinearColorLatentFactory_BP_CreateLatentTweenMaterialVectorTo::TweenManager' has a wrong offset!");
static_assert(offsetof(TweenLinearColorLatentFactory_BP_CreateLatentTweenMaterialVectorTo, TweenTarget) == 0x000008, "Member 'TweenLinearColorLatentFactory_BP_CreateLatentTweenMaterialVectorTo::TweenTarget' has a wrong offset!");
static_assert(offsetof(TweenLinearColorLatentFactory_BP_CreateLatentTweenMaterialVectorTo, OutTweenContainer) == 0x000010, "Member 'TweenLinearColorLatentFactory_BP_CreateLatentTweenMaterialVectorTo::OutTweenContainer' has a wrong offset!");
static_assert(offsetof(TweenLinearColorLatentFactory_BP_CreateLatentTweenMaterialVectorTo, OutTween) == 0x000018, "Member 'TweenLinearColorLatentFactory_BP_CreateLatentTweenMaterialVectorTo::OutTween' has a wrong offset!");
static_assert(offsetof(TweenLinearColorLatentFactory_BP_CreateLatentTweenMaterialVectorTo, ParameterName) == 0x000020, "Member 'TweenLinearColorLatentFactory_BP_CreateLatentTweenMaterialVectorTo::ParameterName' has a wrong offset!");
static_assert(offsetof(TweenLinearColorLatentFactory_BP_CreateLatentTweenMaterialVectorTo, To) == 0x000028, "Member 'TweenLinearColorLatentFactory_BP_CreateLatentTweenMaterialVectorTo::To' has a wrong offset!");
static_assert(offsetof(TweenLinearColorLatentFactory_BP_CreateLatentTweenMaterialVectorTo, Duration) == 0x000038, "Member 'TweenLinearColorLatentFactory_BP_CreateLatentTweenMaterialVectorTo::Duration' has a wrong offset!");
static_assert(offsetof(TweenLinearColorLatentFactory_BP_CreateLatentTweenMaterialVectorTo, EaseType) == 0x00003C, "Member 'TweenLinearColorLatentFactory_BP_CreateLatentTweenMaterialVectorTo::EaseType' has a wrong offset!");
static_assert(offsetof(TweenLinearColorLatentFactory_BP_CreateLatentTweenMaterialVectorTo, NumLoops) == 0x000040, "Member 'TweenLinearColorLatentFactory_BP_CreateLatentTweenMaterialVectorTo::NumLoops' has a wrong offset!");
static_assert(offsetof(TweenLinearColorLatentFactory_BP_CreateLatentTweenMaterialVectorTo, LoopType) == 0x000044, "Member 'TweenLinearColorLatentFactory_BP_CreateLatentTweenMaterialVectorTo::LoopType' has a wrong offset!");
static_assert(offsetof(TweenLinearColorLatentFactory_BP_CreateLatentTweenMaterialVectorTo, Delay) == 0x000048, "Member 'TweenLinearColorLatentFactory_BP_CreateLatentTweenMaterialVectorTo::Delay' has a wrong offset!");
static_assert(offsetof(TweenLinearColorLatentFactory_BP_CreateLatentTweenMaterialVectorTo, TimeScale) == 0x00004C, "Member 'TweenLinearColorLatentFactory_BP_CreateLatentTweenMaterialVectorTo::TimeScale' has a wrong offset!");
static_assert(offsetof(TweenLinearColorLatentFactory_BP_CreateLatentTweenMaterialVectorTo, TweenWhileGameIsPaused) == 0x000050, "Member 'TweenLinearColorLatentFactory_BP_CreateLatentTweenMaterialVectorTo::TweenWhileGameIsPaused' has a wrong offset!");
static_assert(offsetof(TweenLinearColorLatentFactory_BP_CreateLatentTweenMaterialVectorTo, ReturnValue) == 0x000058, "Member 'TweenLinearColorLatentFactory_BP_CreateLatentTweenMaterialVectorTo::ReturnValue' has a wrong offset!");

// Function TweenMaker.TweenLinearColorLatentFactory.BP_JoinLatentTweenMaterialVectorFromTo
// 0x0060 (0x0060 - 0x0000)
struct TweenLinearColorLatentFactory_BP_JoinLatentTweenMaterialVectorFromTo final
{
public:
	class UTweenContainer*                        TweenContainer;                                    // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UTweenLinearColor*                      OutTween;                                          // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UMaterialInstanceDynamic*               TweenTarget;                                       // 0x0010(0x0008)(Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   ParameterName;                                     // 0x0018(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           From;                                              // 0x0020(0x0010)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           To;                                                // 0x0030(0x0010)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Duration;                                          // 0x0040(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETweenEaseType                                EaseType;                                          // 0x0044(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_45[0x3];                                       // 0x0045(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Delay;                                             // 0x0048(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TimeScale;                                         // 0x004C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          TweenWhileGameIsPaused;                            // 0x0050(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_51[0x7];                                       // 0x0051(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UTweenLinearColorLatentFactory*         ReturnValue;                                       // 0x0058(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TweenLinearColorLatentFactory_BP_JoinLatentTweenMaterialVectorFromTo) == 0x000008, "Wrong alignment on TweenLinearColorLatentFactory_BP_JoinLatentTweenMaterialVectorFromTo");
static_assert(sizeof(TweenLinearColorLatentFactory_BP_JoinLatentTweenMaterialVectorFromTo) == 0x000060, "Wrong size on TweenLinearColorLatentFactory_BP_JoinLatentTweenMaterialVectorFromTo");
static_assert(offsetof(TweenLinearColorLatentFactory_BP_JoinLatentTweenMaterialVectorFromTo, TweenContainer) == 0x000000, "Member 'TweenLinearColorLatentFactory_BP_JoinLatentTweenMaterialVectorFromTo::TweenContainer' has a wrong offset!");
static_assert(offsetof(TweenLinearColorLatentFactory_BP_JoinLatentTweenMaterialVectorFromTo, OutTween) == 0x000008, "Member 'TweenLinearColorLatentFactory_BP_JoinLatentTweenMaterialVectorFromTo::OutTween' has a wrong offset!");
static_assert(offsetof(TweenLinearColorLatentFactory_BP_JoinLatentTweenMaterialVectorFromTo, TweenTarget) == 0x000010, "Member 'TweenLinearColorLatentFactory_BP_JoinLatentTweenMaterialVectorFromTo::TweenTarget' has a wrong offset!");
static_assert(offsetof(TweenLinearColorLatentFactory_BP_JoinLatentTweenMaterialVectorFromTo, ParameterName) == 0x000018, "Member 'TweenLinearColorLatentFactory_BP_JoinLatentTweenMaterialVectorFromTo::ParameterName' has a wrong offset!");
static_assert(offsetof(TweenLinearColorLatentFactory_BP_JoinLatentTweenMaterialVectorFromTo, From) == 0x000020, "Member 'TweenLinearColorLatentFactory_BP_JoinLatentTweenMaterialVectorFromTo::From' has a wrong offset!");
static_assert(offsetof(TweenLinearColorLatentFactory_BP_JoinLatentTweenMaterialVectorFromTo, To) == 0x000030, "Member 'TweenLinearColorLatentFactory_BP_JoinLatentTweenMaterialVectorFromTo::To' has a wrong offset!");
static_assert(offsetof(TweenLinearColorLatentFactory_BP_JoinLatentTweenMaterialVectorFromTo, Duration) == 0x000040, "Member 'TweenLinearColorLatentFactory_BP_JoinLatentTweenMaterialVectorFromTo::Duration' has a wrong offset!");
static_assert(offsetof(TweenLinearColorLatentFactory_BP_JoinLatentTweenMaterialVectorFromTo, EaseType) == 0x000044, "Member 'TweenLinearColorLatentFactory_BP_JoinLatentTweenMaterialVectorFromTo::EaseType' has a wrong offset!");
static_assert(offsetof(TweenLinearColorLatentFactory_BP_JoinLatentTweenMaterialVectorFromTo, Delay) == 0x000048, "Member 'TweenLinearColorLatentFactory_BP_JoinLatentTweenMaterialVectorFromTo::Delay' has a wrong offset!");
static_assert(offsetof(TweenLinearColorLatentFactory_BP_JoinLatentTweenMaterialVectorFromTo, TimeScale) == 0x00004C, "Member 'TweenLinearColorLatentFactory_BP_JoinLatentTweenMaterialVectorFromTo::TimeScale' has a wrong offset!");
static_assert(offsetof(TweenLinearColorLatentFactory_BP_JoinLatentTweenMaterialVectorFromTo, TweenWhileGameIsPaused) == 0x000050, "Member 'TweenLinearColorLatentFactory_BP_JoinLatentTweenMaterialVectorFromTo::TweenWhileGameIsPaused' has a wrong offset!");
static_assert(offsetof(TweenLinearColorLatentFactory_BP_JoinLatentTweenMaterialVectorFromTo, ReturnValue) == 0x000058, "Member 'TweenLinearColorLatentFactory_BP_JoinLatentTweenMaterialVectorFromTo::ReturnValue' has a wrong offset!");

// Function TweenMaker.TweenLinearColorLatentFactory.BP_JoinLatentTweenMaterialVectorTo
// 0x0050 (0x0050 - 0x0000)
struct TweenLinearColorLatentFactory_BP_JoinLatentTweenMaterialVectorTo final
{
public:
	class UTweenContainer*                        TweenContainer;                                    // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UTweenLinearColor*                      OutTween;                                          // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UMaterialInstanceDynamic*               TweenTarget;                                       // 0x0010(0x0008)(Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   ParameterName;                                     // 0x0018(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           To;                                                // 0x0020(0x0010)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Duration;                                          // 0x0030(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETweenEaseType                                EaseType;                                          // 0x0034(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_35[0x3];                                       // 0x0035(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Delay;                                             // 0x0038(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TimeScale;                                         // 0x003C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          TweenWhileGameIsPaused;                            // 0x0040(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_41[0x7];                                       // 0x0041(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UTweenLinearColorLatentFactory*         ReturnValue;                                       // 0x0048(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TweenLinearColorLatentFactory_BP_JoinLatentTweenMaterialVectorTo) == 0x000008, "Wrong alignment on TweenLinearColorLatentFactory_BP_JoinLatentTweenMaterialVectorTo");
static_assert(sizeof(TweenLinearColorLatentFactory_BP_JoinLatentTweenMaterialVectorTo) == 0x000050, "Wrong size on TweenLinearColorLatentFactory_BP_JoinLatentTweenMaterialVectorTo");
static_assert(offsetof(TweenLinearColorLatentFactory_BP_JoinLatentTweenMaterialVectorTo, TweenContainer) == 0x000000, "Member 'TweenLinearColorLatentFactory_BP_JoinLatentTweenMaterialVectorTo::TweenContainer' has a wrong offset!");
static_assert(offsetof(TweenLinearColorLatentFactory_BP_JoinLatentTweenMaterialVectorTo, OutTween) == 0x000008, "Member 'TweenLinearColorLatentFactory_BP_JoinLatentTweenMaterialVectorTo::OutTween' has a wrong offset!");
static_assert(offsetof(TweenLinearColorLatentFactory_BP_JoinLatentTweenMaterialVectorTo, TweenTarget) == 0x000010, "Member 'TweenLinearColorLatentFactory_BP_JoinLatentTweenMaterialVectorTo::TweenTarget' has a wrong offset!");
static_assert(offsetof(TweenLinearColorLatentFactory_BP_JoinLatentTweenMaterialVectorTo, ParameterName) == 0x000018, "Member 'TweenLinearColorLatentFactory_BP_JoinLatentTweenMaterialVectorTo::ParameterName' has a wrong offset!");
static_assert(offsetof(TweenLinearColorLatentFactory_BP_JoinLatentTweenMaterialVectorTo, To) == 0x000020, "Member 'TweenLinearColorLatentFactory_BP_JoinLatentTweenMaterialVectorTo::To' has a wrong offset!");
static_assert(offsetof(TweenLinearColorLatentFactory_BP_JoinLatentTweenMaterialVectorTo, Duration) == 0x000030, "Member 'TweenLinearColorLatentFactory_BP_JoinLatentTweenMaterialVectorTo::Duration' has a wrong offset!");
static_assert(offsetof(TweenLinearColorLatentFactory_BP_JoinLatentTweenMaterialVectorTo, EaseType) == 0x000034, "Member 'TweenLinearColorLatentFactory_BP_JoinLatentTweenMaterialVectorTo::EaseType' has a wrong offset!");
static_assert(offsetof(TweenLinearColorLatentFactory_BP_JoinLatentTweenMaterialVectorTo, Delay) == 0x000038, "Member 'TweenLinearColorLatentFactory_BP_JoinLatentTweenMaterialVectorTo::Delay' has a wrong offset!");
static_assert(offsetof(TweenLinearColorLatentFactory_BP_JoinLatentTweenMaterialVectorTo, TimeScale) == 0x00003C, "Member 'TweenLinearColorLatentFactory_BP_JoinLatentTweenMaterialVectorTo::TimeScale' has a wrong offset!");
static_assert(offsetof(TweenLinearColorLatentFactory_BP_JoinLatentTweenMaterialVectorTo, TweenWhileGameIsPaused) == 0x000040, "Member 'TweenLinearColorLatentFactory_BP_JoinLatentTweenMaterialVectorTo::TweenWhileGameIsPaused' has a wrong offset!");
static_assert(offsetof(TweenLinearColorLatentFactory_BP_JoinLatentTweenMaterialVectorTo, ReturnValue) == 0x000048, "Member 'TweenLinearColorLatentFactory_BP_JoinLatentTweenMaterialVectorTo::ReturnValue' has a wrong offset!");

// Function TweenMaker.TweenLinearColorStandardFactory.BP_AppendTweenMaterialVectorFromTo
// 0x0060 (0x0060 - 0x0000)
struct TweenLinearColorStandardFactory_BP_AppendTweenMaterialVectorFromTo final
{
public:
	class UTweenContainer*                        TweenContainer;                                    // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UMaterialInstanceDynamic*               TweenTarget;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   ParameterName;                                     // 0x0010(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           From;                                              // 0x0018(0x0010)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           To;                                                // 0x0028(0x0010)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Duration;                                          // 0x0038(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETweenEaseType                                EaseType;                                          // 0x003C(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_3D[0x3];                                       // 0x003D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         NumLoops;                                          // 0x0040(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETweenLoopType                                LoopType;                                          // 0x0044(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_45[0x3];                                       // 0x0045(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Delay;                                             // 0x0048(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TimeScale;                                         // 0x004C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          TweenWhileGameIsPaused;                            // 0x0050(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_51[0x3];                                       // 0x0051(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         SequenceIndex;                                     // 0x0054(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UTweenLinearColor*                      ReturnValue;                                       // 0x0058(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TweenLinearColorStandardFactory_BP_AppendTweenMaterialVectorFromTo) == 0x000008, "Wrong alignment on TweenLinearColorStandardFactory_BP_AppendTweenMaterialVectorFromTo");
static_assert(sizeof(TweenLinearColorStandardFactory_BP_AppendTweenMaterialVectorFromTo) == 0x000060, "Wrong size on TweenLinearColorStandardFactory_BP_AppendTweenMaterialVectorFromTo");
static_assert(offsetof(TweenLinearColorStandardFactory_BP_AppendTweenMaterialVectorFromTo, TweenContainer) == 0x000000, "Member 'TweenLinearColorStandardFactory_BP_AppendTweenMaterialVectorFromTo::TweenContainer' has a wrong offset!");
static_assert(offsetof(TweenLinearColorStandardFactory_BP_AppendTweenMaterialVectorFromTo, TweenTarget) == 0x000008, "Member 'TweenLinearColorStandardFactory_BP_AppendTweenMaterialVectorFromTo::TweenTarget' has a wrong offset!");
static_assert(offsetof(TweenLinearColorStandardFactory_BP_AppendTweenMaterialVectorFromTo, ParameterName) == 0x000010, "Member 'TweenLinearColorStandardFactory_BP_AppendTweenMaterialVectorFromTo::ParameterName' has a wrong offset!");
static_assert(offsetof(TweenLinearColorStandardFactory_BP_AppendTweenMaterialVectorFromTo, From) == 0x000018, "Member 'TweenLinearColorStandardFactory_BP_AppendTweenMaterialVectorFromTo::From' has a wrong offset!");
static_assert(offsetof(TweenLinearColorStandardFactory_BP_AppendTweenMaterialVectorFromTo, To) == 0x000028, "Member 'TweenLinearColorStandardFactory_BP_AppendTweenMaterialVectorFromTo::To' has a wrong offset!");
static_assert(offsetof(TweenLinearColorStandardFactory_BP_AppendTweenMaterialVectorFromTo, Duration) == 0x000038, "Member 'TweenLinearColorStandardFactory_BP_AppendTweenMaterialVectorFromTo::Duration' has a wrong offset!");
static_assert(offsetof(TweenLinearColorStandardFactory_BP_AppendTweenMaterialVectorFromTo, EaseType) == 0x00003C, "Member 'TweenLinearColorStandardFactory_BP_AppendTweenMaterialVectorFromTo::EaseType' has a wrong offset!");
static_assert(offsetof(TweenLinearColorStandardFactory_BP_AppendTweenMaterialVectorFromTo, NumLoops) == 0x000040, "Member 'TweenLinearColorStandardFactory_BP_AppendTweenMaterialVectorFromTo::NumLoops' has a wrong offset!");
static_assert(offsetof(TweenLinearColorStandardFactory_BP_AppendTweenMaterialVectorFromTo, LoopType) == 0x000044, "Member 'TweenLinearColorStandardFactory_BP_AppendTweenMaterialVectorFromTo::LoopType' has a wrong offset!");
static_assert(offsetof(TweenLinearColorStandardFactory_BP_AppendTweenMaterialVectorFromTo, Delay) == 0x000048, "Member 'TweenLinearColorStandardFactory_BP_AppendTweenMaterialVectorFromTo::Delay' has a wrong offset!");
static_assert(offsetof(TweenLinearColorStandardFactory_BP_AppendTweenMaterialVectorFromTo, TimeScale) == 0x00004C, "Member 'TweenLinearColorStandardFactory_BP_AppendTweenMaterialVectorFromTo::TimeScale' has a wrong offset!");
static_assert(offsetof(TweenLinearColorStandardFactory_BP_AppendTweenMaterialVectorFromTo, TweenWhileGameIsPaused) == 0x000050, "Member 'TweenLinearColorStandardFactory_BP_AppendTweenMaterialVectorFromTo::TweenWhileGameIsPaused' has a wrong offset!");
static_assert(offsetof(TweenLinearColorStandardFactory_BP_AppendTweenMaterialVectorFromTo, SequenceIndex) == 0x000054, "Member 'TweenLinearColorStandardFactory_BP_AppendTweenMaterialVectorFromTo::SequenceIndex' has a wrong offset!");
static_assert(offsetof(TweenLinearColorStandardFactory_BP_AppendTweenMaterialVectorFromTo, ReturnValue) == 0x000058, "Member 'TweenLinearColorStandardFactory_BP_AppendTweenMaterialVectorFromTo::ReturnValue' has a wrong offset!");

// Function TweenMaker.TweenLinearColorStandardFactory.BP_AppendTweenMaterialVectorTo
// 0x0050 (0x0050 - 0x0000)
struct TweenLinearColorStandardFactory_BP_AppendTweenMaterialVectorTo final
{
public:
	class UTweenContainer*                        TweenContainer;                                    // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UMaterialInstanceDynamic*               TweenTarget;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   ParameterName;                                     // 0x0010(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           To;                                                // 0x0018(0x0010)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Duration;                                          // 0x0028(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETweenEaseType                                EaseType;                                          // 0x002C(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2D[0x3];                                       // 0x002D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         NumLoops;                                          // 0x0030(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETweenLoopType                                LoopType;                                          // 0x0034(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_35[0x3];                                       // 0x0035(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Delay;                                             // 0x0038(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TimeScale;                                         // 0x003C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          TweenWhileGameIsPaused;                            // 0x0040(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_41[0x3];                                       // 0x0041(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         SequenceIndex;                                     // 0x0044(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UTweenLinearColor*                      ReturnValue;                                       // 0x0048(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TweenLinearColorStandardFactory_BP_AppendTweenMaterialVectorTo) == 0x000008, "Wrong alignment on TweenLinearColorStandardFactory_BP_AppendTweenMaterialVectorTo");
static_assert(sizeof(TweenLinearColorStandardFactory_BP_AppendTweenMaterialVectorTo) == 0x000050, "Wrong size on TweenLinearColorStandardFactory_BP_AppendTweenMaterialVectorTo");
static_assert(offsetof(TweenLinearColorStandardFactory_BP_AppendTweenMaterialVectorTo, TweenContainer) == 0x000000, "Member 'TweenLinearColorStandardFactory_BP_AppendTweenMaterialVectorTo::TweenContainer' has a wrong offset!");
static_assert(offsetof(TweenLinearColorStandardFactory_BP_AppendTweenMaterialVectorTo, TweenTarget) == 0x000008, "Member 'TweenLinearColorStandardFactory_BP_AppendTweenMaterialVectorTo::TweenTarget' has a wrong offset!");
static_assert(offsetof(TweenLinearColorStandardFactory_BP_AppendTweenMaterialVectorTo, ParameterName) == 0x000010, "Member 'TweenLinearColorStandardFactory_BP_AppendTweenMaterialVectorTo::ParameterName' has a wrong offset!");
static_assert(offsetof(TweenLinearColorStandardFactory_BP_AppendTweenMaterialVectorTo, To) == 0x000018, "Member 'TweenLinearColorStandardFactory_BP_AppendTweenMaterialVectorTo::To' has a wrong offset!");
static_assert(offsetof(TweenLinearColorStandardFactory_BP_AppendTweenMaterialVectorTo, Duration) == 0x000028, "Member 'TweenLinearColorStandardFactory_BP_AppendTweenMaterialVectorTo::Duration' has a wrong offset!");
static_assert(offsetof(TweenLinearColorStandardFactory_BP_AppendTweenMaterialVectorTo, EaseType) == 0x00002C, "Member 'TweenLinearColorStandardFactory_BP_AppendTweenMaterialVectorTo::EaseType' has a wrong offset!");
static_assert(offsetof(TweenLinearColorStandardFactory_BP_AppendTweenMaterialVectorTo, NumLoops) == 0x000030, "Member 'TweenLinearColorStandardFactory_BP_AppendTweenMaterialVectorTo::NumLoops' has a wrong offset!");
static_assert(offsetof(TweenLinearColorStandardFactory_BP_AppendTweenMaterialVectorTo, LoopType) == 0x000034, "Member 'TweenLinearColorStandardFactory_BP_AppendTweenMaterialVectorTo::LoopType' has a wrong offset!");
static_assert(offsetof(TweenLinearColorStandardFactory_BP_AppendTweenMaterialVectorTo, Delay) == 0x000038, "Member 'TweenLinearColorStandardFactory_BP_AppendTweenMaterialVectorTo::Delay' has a wrong offset!");
static_assert(offsetof(TweenLinearColorStandardFactory_BP_AppendTweenMaterialVectorTo, TimeScale) == 0x00003C, "Member 'TweenLinearColorStandardFactory_BP_AppendTweenMaterialVectorTo::TimeScale' has a wrong offset!");
static_assert(offsetof(TweenLinearColorStandardFactory_BP_AppendTweenMaterialVectorTo, TweenWhileGameIsPaused) == 0x000040, "Member 'TweenLinearColorStandardFactory_BP_AppendTweenMaterialVectorTo::TweenWhileGameIsPaused' has a wrong offset!");
static_assert(offsetof(TweenLinearColorStandardFactory_BP_AppendTweenMaterialVectorTo, SequenceIndex) == 0x000044, "Member 'TweenLinearColorStandardFactory_BP_AppendTweenMaterialVectorTo::SequenceIndex' has a wrong offset!");
static_assert(offsetof(TweenLinearColorStandardFactory_BP_AppendTweenMaterialVectorTo, ReturnValue) == 0x000048, "Member 'TweenLinearColorStandardFactory_BP_AppendTweenMaterialVectorTo::ReturnValue' has a wrong offset!");

// Function TweenMaker.TweenLinearColorStandardFactory.BP_CreateTweenMaterialVectorFromTo
// 0x0068 (0x0068 - 0x0000)
struct TweenLinearColorStandardFactory_BP_CreateTweenMaterialVectorFromTo final
{
public:
	class UTweenManagerComponent*                 TweenManager;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UMaterialInstanceDynamic*               TweenTarget;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UTweenContainer*                        TweenContainer;                                    // 0x0010(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UTweenLinearColor*                      Tween;                                             // 0x0018(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   ParameterName;                                     // 0x0020(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           From;                                              // 0x0028(0x0010)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           To;                                                // 0x0038(0x0010)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Duration;                                          // 0x0048(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETweenEaseType                                EaseType;                                          // 0x004C(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4D[0x3];                                       // 0x004D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         NumLoops;                                          // 0x0050(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETweenLoopType                                LoopType;                                          // 0x0054(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_55[0x3];                                       // 0x0055(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Delay;                                             // 0x0058(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TimeScale;                                         // 0x005C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          TweenWhileGameIsPaused;                            // 0x0060(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_61[0x3];                                       // 0x0061(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         SequenceIndex;                                     // 0x0064(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TweenLinearColorStandardFactory_BP_CreateTweenMaterialVectorFromTo) == 0x000008, "Wrong alignment on TweenLinearColorStandardFactory_BP_CreateTweenMaterialVectorFromTo");
static_assert(sizeof(TweenLinearColorStandardFactory_BP_CreateTweenMaterialVectorFromTo) == 0x000068, "Wrong size on TweenLinearColorStandardFactory_BP_CreateTweenMaterialVectorFromTo");
static_assert(offsetof(TweenLinearColorStandardFactory_BP_CreateTweenMaterialVectorFromTo, TweenManager) == 0x000000, "Member 'TweenLinearColorStandardFactory_BP_CreateTweenMaterialVectorFromTo::TweenManager' has a wrong offset!");
static_assert(offsetof(TweenLinearColorStandardFactory_BP_CreateTweenMaterialVectorFromTo, TweenTarget) == 0x000008, "Member 'TweenLinearColorStandardFactory_BP_CreateTweenMaterialVectorFromTo::TweenTarget' has a wrong offset!");
static_assert(offsetof(TweenLinearColorStandardFactory_BP_CreateTweenMaterialVectorFromTo, TweenContainer) == 0x000010, "Member 'TweenLinearColorStandardFactory_BP_CreateTweenMaterialVectorFromTo::TweenContainer' has a wrong offset!");
static_assert(offsetof(TweenLinearColorStandardFactory_BP_CreateTweenMaterialVectorFromTo, Tween) == 0x000018, "Member 'TweenLinearColorStandardFactory_BP_CreateTweenMaterialVectorFromTo::Tween' has a wrong offset!");
static_assert(offsetof(TweenLinearColorStandardFactory_BP_CreateTweenMaterialVectorFromTo, ParameterName) == 0x000020, "Member 'TweenLinearColorStandardFactory_BP_CreateTweenMaterialVectorFromTo::ParameterName' has a wrong offset!");
static_assert(offsetof(TweenLinearColorStandardFactory_BP_CreateTweenMaterialVectorFromTo, From) == 0x000028, "Member 'TweenLinearColorStandardFactory_BP_CreateTweenMaterialVectorFromTo::From' has a wrong offset!");
static_assert(offsetof(TweenLinearColorStandardFactory_BP_CreateTweenMaterialVectorFromTo, To) == 0x000038, "Member 'TweenLinearColorStandardFactory_BP_CreateTweenMaterialVectorFromTo::To' has a wrong offset!");
static_assert(offsetof(TweenLinearColorStandardFactory_BP_CreateTweenMaterialVectorFromTo, Duration) == 0x000048, "Member 'TweenLinearColorStandardFactory_BP_CreateTweenMaterialVectorFromTo::Duration' has a wrong offset!");
static_assert(offsetof(TweenLinearColorStandardFactory_BP_CreateTweenMaterialVectorFromTo, EaseType) == 0x00004C, "Member 'TweenLinearColorStandardFactory_BP_CreateTweenMaterialVectorFromTo::EaseType' has a wrong offset!");
static_assert(offsetof(TweenLinearColorStandardFactory_BP_CreateTweenMaterialVectorFromTo, NumLoops) == 0x000050, "Member 'TweenLinearColorStandardFactory_BP_CreateTweenMaterialVectorFromTo::NumLoops' has a wrong offset!");
static_assert(offsetof(TweenLinearColorStandardFactory_BP_CreateTweenMaterialVectorFromTo, LoopType) == 0x000054, "Member 'TweenLinearColorStandardFactory_BP_CreateTweenMaterialVectorFromTo::LoopType' has a wrong offset!");
static_assert(offsetof(TweenLinearColorStandardFactory_BP_CreateTweenMaterialVectorFromTo, Delay) == 0x000058, "Member 'TweenLinearColorStandardFactory_BP_CreateTweenMaterialVectorFromTo::Delay' has a wrong offset!");
static_assert(offsetof(TweenLinearColorStandardFactory_BP_CreateTweenMaterialVectorFromTo, TimeScale) == 0x00005C, "Member 'TweenLinearColorStandardFactory_BP_CreateTweenMaterialVectorFromTo::TimeScale' has a wrong offset!");
static_assert(offsetof(TweenLinearColorStandardFactory_BP_CreateTweenMaterialVectorFromTo, TweenWhileGameIsPaused) == 0x000060, "Member 'TweenLinearColorStandardFactory_BP_CreateTweenMaterialVectorFromTo::TweenWhileGameIsPaused' has a wrong offset!");
static_assert(offsetof(TweenLinearColorStandardFactory_BP_CreateTweenMaterialVectorFromTo, SequenceIndex) == 0x000064, "Member 'TweenLinearColorStandardFactory_BP_CreateTweenMaterialVectorFromTo::SequenceIndex' has a wrong offset!");

// Function TweenMaker.TweenLinearColorStandardFactory.BP_CreateTweenMaterialVectorTo
// 0x0058 (0x0058 - 0x0000)
struct TweenLinearColorStandardFactory_BP_CreateTweenMaterialVectorTo final
{
public:
	class UTweenManagerComponent*                 TweenManager;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UMaterialInstanceDynamic*               TweenTarget;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UTweenContainer*                        TweenContainer;                                    // 0x0010(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UTweenLinearColor*                      Tween;                                             // 0x0018(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   ParameterName;                                     // 0x0020(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           To;                                                // 0x0028(0x0010)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Duration;                                          // 0x0038(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETweenEaseType                                EaseType;                                          // 0x003C(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_3D[0x3];                                       // 0x003D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         NumLoops;                                          // 0x0040(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETweenLoopType                                LoopType;                                          // 0x0044(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_45[0x3];                                       // 0x0045(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Delay;                                             // 0x0048(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TimeScale;                                         // 0x004C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          TweenWhileGameIsPaused;                            // 0x0050(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_51[0x3];                                       // 0x0051(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         SequenceIndex;                                     // 0x0054(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TweenLinearColorStandardFactory_BP_CreateTweenMaterialVectorTo) == 0x000008, "Wrong alignment on TweenLinearColorStandardFactory_BP_CreateTweenMaterialVectorTo");
static_assert(sizeof(TweenLinearColorStandardFactory_BP_CreateTweenMaterialVectorTo) == 0x000058, "Wrong size on TweenLinearColorStandardFactory_BP_CreateTweenMaterialVectorTo");
static_assert(offsetof(TweenLinearColorStandardFactory_BP_CreateTweenMaterialVectorTo, TweenManager) == 0x000000, "Member 'TweenLinearColorStandardFactory_BP_CreateTweenMaterialVectorTo::TweenManager' has a wrong offset!");
static_assert(offsetof(TweenLinearColorStandardFactory_BP_CreateTweenMaterialVectorTo, TweenTarget) == 0x000008, "Member 'TweenLinearColorStandardFactory_BP_CreateTweenMaterialVectorTo::TweenTarget' has a wrong offset!");
static_assert(offsetof(TweenLinearColorStandardFactory_BP_CreateTweenMaterialVectorTo, TweenContainer) == 0x000010, "Member 'TweenLinearColorStandardFactory_BP_CreateTweenMaterialVectorTo::TweenContainer' has a wrong offset!");
static_assert(offsetof(TweenLinearColorStandardFactory_BP_CreateTweenMaterialVectorTo, Tween) == 0x000018, "Member 'TweenLinearColorStandardFactory_BP_CreateTweenMaterialVectorTo::Tween' has a wrong offset!");
static_assert(offsetof(TweenLinearColorStandardFactory_BP_CreateTweenMaterialVectorTo, ParameterName) == 0x000020, "Member 'TweenLinearColorStandardFactory_BP_CreateTweenMaterialVectorTo::ParameterName' has a wrong offset!");
static_assert(offsetof(TweenLinearColorStandardFactory_BP_CreateTweenMaterialVectorTo, To) == 0x000028, "Member 'TweenLinearColorStandardFactory_BP_CreateTweenMaterialVectorTo::To' has a wrong offset!");
static_assert(offsetof(TweenLinearColorStandardFactory_BP_CreateTweenMaterialVectorTo, Duration) == 0x000038, "Member 'TweenLinearColorStandardFactory_BP_CreateTweenMaterialVectorTo::Duration' has a wrong offset!");
static_assert(offsetof(TweenLinearColorStandardFactory_BP_CreateTweenMaterialVectorTo, EaseType) == 0x00003C, "Member 'TweenLinearColorStandardFactory_BP_CreateTweenMaterialVectorTo::EaseType' has a wrong offset!");
static_assert(offsetof(TweenLinearColorStandardFactory_BP_CreateTweenMaterialVectorTo, NumLoops) == 0x000040, "Member 'TweenLinearColorStandardFactory_BP_CreateTweenMaterialVectorTo::NumLoops' has a wrong offset!");
static_assert(offsetof(TweenLinearColorStandardFactory_BP_CreateTweenMaterialVectorTo, LoopType) == 0x000044, "Member 'TweenLinearColorStandardFactory_BP_CreateTweenMaterialVectorTo::LoopType' has a wrong offset!");
static_assert(offsetof(TweenLinearColorStandardFactory_BP_CreateTweenMaterialVectorTo, Delay) == 0x000048, "Member 'TweenLinearColorStandardFactory_BP_CreateTweenMaterialVectorTo::Delay' has a wrong offset!");
static_assert(offsetof(TweenLinearColorStandardFactory_BP_CreateTweenMaterialVectorTo, TimeScale) == 0x00004C, "Member 'TweenLinearColorStandardFactory_BP_CreateTweenMaterialVectorTo::TimeScale' has a wrong offset!");
static_assert(offsetof(TweenLinearColorStandardFactory_BP_CreateTweenMaterialVectorTo, TweenWhileGameIsPaused) == 0x000050, "Member 'TweenLinearColorStandardFactory_BP_CreateTweenMaterialVectorTo::TweenWhileGameIsPaused' has a wrong offset!");
static_assert(offsetof(TweenLinearColorStandardFactory_BP_CreateTweenMaterialVectorTo, SequenceIndex) == 0x000054, "Member 'TweenLinearColorStandardFactory_BP_CreateTweenMaterialVectorTo::SequenceIndex' has a wrong offset!");

// Function TweenMaker.TweenLinearColorStandardFactory.BP_JoinTweenMaterialVectorFromTo
// 0x0058 (0x0058 - 0x0000)
struct TweenLinearColorStandardFactory_BP_JoinTweenMaterialVectorFromTo final
{
public:
	class UTweenContainer*                        TweenContainer;                                    // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UMaterialInstanceDynamic*               TweenTarget;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   ParameterName;                                     // 0x0010(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           From;                                              // 0x0018(0x0010)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           To;                                                // 0x0028(0x0010)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Duration;                                          // 0x0038(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETweenEaseType                                EaseType;                                          // 0x003C(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_3D[0x3];                                       // 0x003D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Delay;                                             // 0x0040(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TimeScale;                                         // 0x0044(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          TweenWhileGameIsPaused;                            // 0x0048(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_49[0x3];                                       // 0x0049(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         SequenceIndex;                                     // 0x004C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UTweenLinearColor*                      ReturnValue;                                       // 0x0050(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TweenLinearColorStandardFactory_BP_JoinTweenMaterialVectorFromTo) == 0x000008, "Wrong alignment on TweenLinearColorStandardFactory_BP_JoinTweenMaterialVectorFromTo");
static_assert(sizeof(TweenLinearColorStandardFactory_BP_JoinTweenMaterialVectorFromTo) == 0x000058, "Wrong size on TweenLinearColorStandardFactory_BP_JoinTweenMaterialVectorFromTo");
static_assert(offsetof(TweenLinearColorStandardFactory_BP_JoinTweenMaterialVectorFromTo, TweenContainer) == 0x000000, "Member 'TweenLinearColorStandardFactory_BP_JoinTweenMaterialVectorFromTo::TweenContainer' has a wrong offset!");
static_assert(offsetof(TweenLinearColorStandardFactory_BP_JoinTweenMaterialVectorFromTo, TweenTarget) == 0x000008, "Member 'TweenLinearColorStandardFactory_BP_JoinTweenMaterialVectorFromTo::TweenTarget' has a wrong offset!");
static_assert(offsetof(TweenLinearColorStandardFactory_BP_JoinTweenMaterialVectorFromTo, ParameterName) == 0x000010, "Member 'TweenLinearColorStandardFactory_BP_JoinTweenMaterialVectorFromTo::ParameterName' has a wrong offset!");
static_assert(offsetof(TweenLinearColorStandardFactory_BP_JoinTweenMaterialVectorFromTo, From) == 0x000018, "Member 'TweenLinearColorStandardFactory_BP_JoinTweenMaterialVectorFromTo::From' has a wrong offset!");
static_assert(offsetof(TweenLinearColorStandardFactory_BP_JoinTweenMaterialVectorFromTo, To) == 0x000028, "Member 'TweenLinearColorStandardFactory_BP_JoinTweenMaterialVectorFromTo::To' has a wrong offset!");
static_assert(offsetof(TweenLinearColorStandardFactory_BP_JoinTweenMaterialVectorFromTo, Duration) == 0x000038, "Member 'TweenLinearColorStandardFactory_BP_JoinTweenMaterialVectorFromTo::Duration' has a wrong offset!");
static_assert(offsetof(TweenLinearColorStandardFactory_BP_JoinTweenMaterialVectorFromTo, EaseType) == 0x00003C, "Member 'TweenLinearColorStandardFactory_BP_JoinTweenMaterialVectorFromTo::EaseType' has a wrong offset!");
static_assert(offsetof(TweenLinearColorStandardFactory_BP_JoinTweenMaterialVectorFromTo, Delay) == 0x000040, "Member 'TweenLinearColorStandardFactory_BP_JoinTweenMaterialVectorFromTo::Delay' has a wrong offset!");
static_assert(offsetof(TweenLinearColorStandardFactory_BP_JoinTweenMaterialVectorFromTo, TimeScale) == 0x000044, "Member 'TweenLinearColorStandardFactory_BP_JoinTweenMaterialVectorFromTo::TimeScale' has a wrong offset!");
static_assert(offsetof(TweenLinearColorStandardFactory_BP_JoinTweenMaterialVectorFromTo, TweenWhileGameIsPaused) == 0x000048, "Member 'TweenLinearColorStandardFactory_BP_JoinTweenMaterialVectorFromTo::TweenWhileGameIsPaused' has a wrong offset!");
static_assert(offsetof(TweenLinearColorStandardFactory_BP_JoinTweenMaterialVectorFromTo, SequenceIndex) == 0x00004C, "Member 'TweenLinearColorStandardFactory_BP_JoinTweenMaterialVectorFromTo::SequenceIndex' has a wrong offset!");
static_assert(offsetof(TweenLinearColorStandardFactory_BP_JoinTweenMaterialVectorFromTo, ReturnValue) == 0x000050, "Member 'TweenLinearColorStandardFactory_BP_JoinTweenMaterialVectorFromTo::ReturnValue' has a wrong offset!");

// Function TweenMaker.TweenLinearColorStandardFactory.BP_JoinTweenMaterialVectorTo
// 0x0048 (0x0048 - 0x0000)
struct TweenLinearColorStandardFactory_BP_JoinTweenMaterialVectorTo final
{
public:
	class UTweenContainer*                        TweenContainer;                                    // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UMaterialInstanceDynamic*               TweenTarget;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   ParameterName;                                     // 0x0010(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           To;                                                // 0x0018(0x0010)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Duration;                                          // 0x0028(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETweenEaseType                                EaseType;                                          // 0x002C(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2D[0x3];                                       // 0x002D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Delay;                                             // 0x0030(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TimeScale;                                         // 0x0034(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          TweenWhileGameIsPaused;                            // 0x0038(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_39[0x3];                                       // 0x0039(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         SequenceIndex;                                     // 0x003C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UTweenLinearColor*                      ReturnValue;                                       // 0x0040(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TweenLinearColorStandardFactory_BP_JoinTweenMaterialVectorTo) == 0x000008, "Wrong alignment on TweenLinearColorStandardFactory_BP_JoinTweenMaterialVectorTo");
static_assert(sizeof(TweenLinearColorStandardFactory_BP_JoinTweenMaterialVectorTo) == 0x000048, "Wrong size on TweenLinearColorStandardFactory_BP_JoinTweenMaterialVectorTo");
static_assert(offsetof(TweenLinearColorStandardFactory_BP_JoinTweenMaterialVectorTo, TweenContainer) == 0x000000, "Member 'TweenLinearColorStandardFactory_BP_JoinTweenMaterialVectorTo::TweenContainer' has a wrong offset!");
static_assert(offsetof(TweenLinearColorStandardFactory_BP_JoinTweenMaterialVectorTo, TweenTarget) == 0x000008, "Member 'TweenLinearColorStandardFactory_BP_JoinTweenMaterialVectorTo::TweenTarget' has a wrong offset!");
static_assert(offsetof(TweenLinearColorStandardFactory_BP_JoinTweenMaterialVectorTo, ParameterName) == 0x000010, "Member 'TweenLinearColorStandardFactory_BP_JoinTweenMaterialVectorTo::ParameterName' has a wrong offset!");
static_assert(offsetof(TweenLinearColorStandardFactory_BP_JoinTweenMaterialVectorTo, To) == 0x000018, "Member 'TweenLinearColorStandardFactory_BP_JoinTweenMaterialVectorTo::To' has a wrong offset!");
static_assert(offsetof(TweenLinearColorStandardFactory_BP_JoinTweenMaterialVectorTo, Duration) == 0x000028, "Member 'TweenLinearColorStandardFactory_BP_JoinTweenMaterialVectorTo::Duration' has a wrong offset!");
static_assert(offsetof(TweenLinearColorStandardFactory_BP_JoinTweenMaterialVectorTo, EaseType) == 0x00002C, "Member 'TweenLinearColorStandardFactory_BP_JoinTweenMaterialVectorTo::EaseType' has a wrong offset!");
static_assert(offsetof(TweenLinearColorStandardFactory_BP_JoinTweenMaterialVectorTo, Delay) == 0x000030, "Member 'TweenLinearColorStandardFactory_BP_JoinTweenMaterialVectorTo::Delay' has a wrong offset!");
static_assert(offsetof(TweenLinearColorStandardFactory_BP_JoinTweenMaterialVectorTo, TimeScale) == 0x000034, "Member 'TweenLinearColorStandardFactory_BP_JoinTweenMaterialVectorTo::TimeScale' has a wrong offset!");
static_assert(offsetof(TweenLinearColorStandardFactory_BP_JoinTweenMaterialVectorTo, TweenWhileGameIsPaused) == 0x000038, "Member 'TweenLinearColorStandardFactory_BP_JoinTweenMaterialVectorTo::TweenWhileGameIsPaused' has a wrong offset!");
static_assert(offsetof(TweenLinearColorStandardFactory_BP_JoinTweenMaterialVectorTo, SequenceIndex) == 0x00003C, "Member 'TweenLinearColorStandardFactory_BP_JoinTweenMaterialVectorTo::SequenceIndex' has a wrong offset!");
static_assert(offsetof(TweenLinearColorStandardFactory_BP_JoinTweenMaterialVectorTo, ReturnValue) == 0x000040, "Member 'TweenLinearColorStandardFactory_BP_JoinTweenMaterialVectorTo::ReturnValue' has a wrong offset!");

// Function TweenMaker.TweenManagerActor.BP_CreateTweenContainerStatic
// 0x0018 (0x0018 - 0x0000)
struct TweenManagerActor_BP_CreateTweenContainerStatic final
{
public:
	class UTweenContainer*                        TweenContainer;                                    // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         NumLoops;                                          // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETweenLoopType                                LoopType;                                          // 0x000C(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D[0x3];                                        // 0x000D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         TimeScale;                                         // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TweenManagerActor_BP_CreateTweenContainerStatic) == 0x000008, "Wrong alignment on TweenManagerActor_BP_CreateTweenContainerStatic");
static_assert(sizeof(TweenManagerActor_BP_CreateTweenContainerStatic) == 0x000018, "Wrong size on TweenManagerActor_BP_CreateTweenContainerStatic");
static_assert(offsetof(TweenManagerActor_BP_CreateTweenContainerStatic, TweenContainer) == 0x000000, "Member 'TweenManagerActor_BP_CreateTweenContainerStatic::TweenContainer' has a wrong offset!");
static_assert(offsetof(TweenManagerActor_BP_CreateTweenContainerStatic, NumLoops) == 0x000008, "Member 'TweenManagerActor_BP_CreateTweenContainerStatic::NumLoops' has a wrong offset!");
static_assert(offsetof(TweenManagerActor_BP_CreateTweenContainerStatic, LoopType) == 0x00000C, "Member 'TweenManagerActor_BP_CreateTweenContainerStatic::LoopType' has a wrong offset!");
static_assert(offsetof(TweenManagerActor_BP_CreateTweenContainerStatic, TimeScale) == 0x000010, "Member 'TweenManagerActor_BP_CreateTweenContainerStatic::TimeScale' has a wrong offset!");

// Function TweenMaker.TweenManagerActor.DeleteAllTweens
// 0x0004 (0x0004 - 0x0000)
struct TweenManagerActor_DeleteAllTweens final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TweenManagerActor_DeleteAllTweens) == 0x000004, "Wrong alignment on TweenManagerActor_DeleteAllTweens");
static_assert(sizeof(TweenManagerActor_DeleteAllTweens) == 0x000004, "Wrong size on TweenManagerActor_DeleteAllTweens");
static_assert(offsetof(TweenManagerActor_DeleteAllTweens, ReturnValue) == 0x000000, "Member 'TweenManagerActor_DeleteAllTweens::ReturnValue' has a wrong offset!");

// Function TweenMaker.TweenManagerActor.DeleteAllTweensByObject
// 0x0010 (0x0010 - 0x0000)
struct TweenManagerActor_DeleteAllTweensByObject final
{
public:
	class UObject*                                TweenTarget;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETweenGenericType                             TweensType;                                        // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0009(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_A[0x6];                                        // 0x000A(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TweenManagerActor_DeleteAllTweensByObject) == 0x000008, "Wrong alignment on TweenManagerActor_DeleteAllTweensByObject");
static_assert(sizeof(TweenManagerActor_DeleteAllTweensByObject) == 0x000010, "Wrong size on TweenManagerActor_DeleteAllTweensByObject");
static_assert(offsetof(TweenManagerActor_DeleteAllTweensByObject, TweenTarget) == 0x000000, "Member 'TweenManagerActor_DeleteAllTweensByObject::TweenTarget' has a wrong offset!");
static_assert(offsetof(TweenManagerActor_DeleteAllTweensByObject, TweensType) == 0x000008, "Member 'TweenManagerActor_DeleteAllTweensByObject::TweensType' has a wrong offset!");
static_assert(offsetof(TweenManagerActor_DeleteAllTweensByObject, ReturnValue) == 0x000009, "Member 'TweenManagerActor_DeleteAllTweensByObject::ReturnValue' has a wrong offset!");

// Function TweenMaker.TweenManagerActor.FindTweenByName
// 0x0020 (0x0020 - 0x0000)
struct TweenManagerActor_FindTweenByName final
{
public:
	class FName                                   TweenName;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETweenGenericType                             TweenType;                                         // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UBaseTween*                             TweenFound;                                        // 0x0010(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0018(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TweenManagerActor_FindTweenByName) == 0x000008, "Wrong alignment on TweenManagerActor_FindTweenByName");
static_assert(sizeof(TweenManagerActor_FindTweenByName) == 0x000020, "Wrong size on TweenManagerActor_FindTweenByName");
static_assert(offsetof(TweenManagerActor_FindTweenByName, TweenName) == 0x000000, "Member 'TweenManagerActor_FindTweenByName::TweenName' has a wrong offset!");
static_assert(offsetof(TweenManagerActor_FindTweenByName, TweenType) == 0x000008, "Member 'TweenManagerActor_FindTweenByName::TweenType' has a wrong offset!");
static_assert(offsetof(TweenManagerActor_FindTweenByName, TweenFound) == 0x000010, "Member 'TweenManagerActor_FindTweenByName::TweenFound' has a wrong offset!");
static_assert(offsetof(TweenManagerActor_FindTweenByName, ReturnValue) == 0x000018, "Member 'TweenManagerActor_FindTweenByName::ReturnValue' has a wrong offset!");

// Function TweenMaker.TweenManagerActor.IsObjectTweening
// 0x0020 (0x0020 - 0x0000)
struct TweenManagerActor_IsObjectTweening final
{
public:
	class UObject*                                TweenTarget;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETweenGenericType                             TweensType;                                        // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UBaseTween*                             TweenFound;                                        // 0x0010(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0018(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TweenManagerActor_IsObjectTweening) == 0x000008, "Wrong alignment on TweenManagerActor_IsObjectTweening");
static_assert(sizeof(TweenManagerActor_IsObjectTweening) == 0x000020, "Wrong size on TweenManagerActor_IsObjectTweening");
static_assert(offsetof(TweenManagerActor_IsObjectTweening, TweenTarget) == 0x000000, "Member 'TweenManagerActor_IsObjectTweening::TweenTarget' has a wrong offset!");
static_assert(offsetof(TweenManagerActor_IsObjectTweening, TweensType) == 0x000008, "Member 'TweenManagerActor_IsObjectTweening::TweensType' has a wrong offset!");
static_assert(offsetof(TweenManagerActor_IsObjectTweening, TweenFound) == 0x000010, "Member 'TweenManagerActor_IsObjectTweening::TweenFound' has a wrong offset!");
static_assert(offsetof(TweenManagerActor_IsObjectTweening, ReturnValue) == 0x000018, "Member 'TweenManagerActor_IsObjectTweening::ReturnValue' has a wrong offset!");

// Function TweenMaker.TweenManagerComponent.BP_CreateTweenContainer
// 0x0018 (0x0018 - 0x0000)
struct TweenManagerComponent_BP_CreateTweenContainer final
{
public:
	class UTweenContainer*                        TweenContainer;                                    // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         NumLoops;                                          // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETweenLoopType                                LoopType;                                          // 0x000C(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D[0x3];                                        // 0x000D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         TimeScale;                                         // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TweenManagerComponent_BP_CreateTweenContainer) == 0x000008, "Wrong alignment on TweenManagerComponent_BP_CreateTweenContainer");
static_assert(sizeof(TweenManagerComponent_BP_CreateTweenContainer) == 0x000018, "Wrong size on TweenManagerComponent_BP_CreateTweenContainer");
static_assert(offsetof(TweenManagerComponent_BP_CreateTweenContainer, TweenContainer) == 0x000000, "Member 'TweenManagerComponent_BP_CreateTweenContainer::TweenContainer' has a wrong offset!");
static_assert(offsetof(TweenManagerComponent_BP_CreateTweenContainer, NumLoops) == 0x000008, "Member 'TweenManagerComponent_BP_CreateTweenContainer::NumLoops' has a wrong offset!");
static_assert(offsetof(TweenManagerComponent_BP_CreateTweenContainer, LoopType) == 0x00000C, "Member 'TweenManagerComponent_BP_CreateTweenContainer::LoopType' has a wrong offset!");
static_assert(offsetof(TweenManagerComponent_BP_CreateTweenContainer, TimeScale) == 0x000010, "Member 'TweenManagerComponent_BP_CreateTweenContainer::TimeScale' has a wrong offset!");

// Function TweenMaker.TweenManagerComponent.DeleteAllTweens
// 0x0004 (0x0004 - 0x0000)
struct TweenManagerComponent_DeleteAllTweens final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TweenManagerComponent_DeleteAllTweens) == 0x000004, "Wrong alignment on TweenManagerComponent_DeleteAllTweens");
static_assert(sizeof(TweenManagerComponent_DeleteAllTweens) == 0x000004, "Wrong size on TweenManagerComponent_DeleteAllTweens");
static_assert(offsetof(TweenManagerComponent_DeleteAllTweens, ReturnValue) == 0x000000, "Member 'TweenManagerComponent_DeleteAllTweens::ReturnValue' has a wrong offset!");

// Function TweenMaker.TweenManagerComponent.DeleteAllTweensByObject
// 0x0010 (0x0010 - 0x0000)
struct TweenManagerComponent_DeleteAllTweensByObject final
{
public:
	class UObject*                                TweenTarget;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETweenGenericType                             TweensType;                                        // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0009(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_A[0x6];                                        // 0x000A(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TweenManagerComponent_DeleteAllTweensByObject) == 0x000008, "Wrong alignment on TweenManagerComponent_DeleteAllTweensByObject");
static_assert(sizeof(TweenManagerComponent_DeleteAllTweensByObject) == 0x000010, "Wrong size on TweenManagerComponent_DeleteAllTweensByObject");
static_assert(offsetof(TweenManagerComponent_DeleteAllTweensByObject, TweenTarget) == 0x000000, "Member 'TweenManagerComponent_DeleteAllTweensByObject::TweenTarget' has a wrong offset!");
static_assert(offsetof(TweenManagerComponent_DeleteAllTweensByObject, TweensType) == 0x000008, "Member 'TweenManagerComponent_DeleteAllTweensByObject::TweensType' has a wrong offset!");
static_assert(offsetof(TweenManagerComponent_DeleteAllTweensByObject, ReturnValue) == 0x000009, "Member 'TweenManagerComponent_DeleteAllTweensByObject::ReturnValue' has a wrong offset!");

// Function TweenMaker.TweenManagerComponent.TweenDestroyed
// 0x0008 (0x0008 - 0x0000)
struct TweenManagerComponent_TweenDestroyed final
{
public:
	class UBaseTween*                             PTween;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TweenManagerComponent_TweenDestroyed) == 0x000008, "Wrong alignment on TweenManagerComponent_TweenDestroyed");
static_assert(sizeof(TweenManagerComponent_TweenDestroyed) == 0x000008, "Wrong size on TweenManagerComponent_TweenDestroyed");
static_assert(offsetof(TweenManagerComponent_TweenDestroyed, PTween) == 0x000000, "Member 'TweenManagerComponent_TweenDestroyed::PTween' has a wrong offset!");

// Function TweenMaker.TweenManagerComponent.UpdateNameMap
// 0x0018 (0x0018 - 0x0000)
struct TweenManagerComponent_UpdateNameMap final
{
public:
	class UBaseTween*                             PTween;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   PPreviousName;                                     // 0x0008(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   PNewName;                                          // 0x0010(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TweenManagerComponent_UpdateNameMap) == 0x000008, "Wrong alignment on TweenManagerComponent_UpdateNameMap");
static_assert(sizeof(TweenManagerComponent_UpdateNameMap) == 0x000018, "Wrong size on TweenManagerComponent_UpdateNameMap");
static_assert(offsetof(TweenManagerComponent_UpdateNameMap, PTween) == 0x000000, "Member 'TweenManagerComponent_UpdateNameMap::PTween' has a wrong offset!");
static_assert(offsetof(TweenManagerComponent_UpdateNameMap, PPreviousName) == 0x000008, "Member 'TweenManagerComponent_UpdateNameMap::PPreviousName' has a wrong offset!");
static_assert(offsetof(TweenManagerComponent_UpdateNameMap, PNewName) == 0x000010, "Member 'TweenManagerComponent_UpdateNameMap::PNewName' has a wrong offset!");

// Function TweenMaker.TweenManagerComponent.FindTweenByName
// 0x0020 (0x0020 - 0x0000)
struct TweenManagerComponent_FindTweenByName final
{
public:
	class FName                                   TweenName;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETweenGenericType                             TweenType;                                         // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UBaseTween*                             TweenFound;                                        // 0x0010(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0018(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TweenManagerComponent_FindTweenByName) == 0x000008, "Wrong alignment on TweenManagerComponent_FindTweenByName");
static_assert(sizeof(TweenManagerComponent_FindTweenByName) == 0x000020, "Wrong size on TweenManagerComponent_FindTweenByName");
static_assert(offsetof(TweenManagerComponent_FindTweenByName, TweenName) == 0x000000, "Member 'TweenManagerComponent_FindTweenByName::TweenName' has a wrong offset!");
static_assert(offsetof(TweenManagerComponent_FindTweenByName, TweenType) == 0x000008, "Member 'TweenManagerComponent_FindTweenByName::TweenType' has a wrong offset!");
static_assert(offsetof(TweenManagerComponent_FindTweenByName, TweenFound) == 0x000010, "Member 'TweenManagerComponent_FindTweenByName::TweenFound' has a wrong offset!");
static_assert(offsetof(TweenManagerComponent_FindTweenByName, ReturnValue) == 0x000018, "Member 'TweenManagerComponent_FindTweenByName::ReturnValue' has a wrong offset!");

// Function TweenMaker.TweenManagerComponent.IsObjectTweening
// 0x0020 (0x0020 - 0x0000)
struct TweenManagerComponent_IsObjectTweening final
{
public:
	class UObject*                                TweenTarget;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETweenGenericType                             TweensType;                                        // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UBaseTween*                             TweenFound;                                        // 0x0010(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0018(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TweenManagerComponent_IsObjectTweening) == 0x000008, "Wrong alignment on TweenManagerComponent_IsObjectTweening");
static_assert(sizeof(TweenManagerComponent_IsObjectTweening) == 0x000020, "Wrong size on TweenManagerComponent_IsObjectTweening");
static_assert(offsetof(TweenManagerComponent_IsObjectTweening, TweenTarget) == 0x000000, "Member 'TweenManagerComponent_IsObjectTweening::TweenTarget' has a wrong offset!");
static_assert(offsetof(TweenManagerComponent_IsObjectTweening, TweensType) == 0x000008, "Member 'TweenManagerComponent_IsObjectTweening::TweensType' has a wrong offset!");
static_assert(offsetof(TweenManagerComponent_IsObjectTweening, TweenFound) == 0x000010, "Member 'TweenManagerComponent_IsObjectTweening::TweenFound' has a wrong offset!");
static_assert(offsetof(TweenManagerComponent_IsObjectTweening, ReturnValue) == 0x000018, "Member 'TweenManagerComponent_IsObjectTweening::ReturnValue' has a wrong offset!");

// Function TweenMaker.TweenRotator.OnActorBeginOverlap
// 0x0010 (0x0010 - 0x0000)
struct TweenRotator_OnActorBeginOverlap final
{
public:
	class AActor*                                 PThisActor;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 POtherActor;                                       // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TweenRotator_OnActorBeginOverlap) == 0x000008, "Wrong alignment on TweenRotator_OnActorBeginOverlap");
static_assert(sizeof(TweenRotator_OnActorBeginOverlap) == 0x000010, "Wrong size on TweenRotator_OnActorBeginOverlap");
static_assert(offsetof(TweenRotator_OnActorBeginOverlap, PThisActor) == 0x000000, "Member 'TweenRotator_OnActorBeginOverlap::PThisActor' has a wrong offset!");
static_assert(offsetof(TweenRotator_OnActorBeginOverlap, POtherActor) == 0x000008, "Member 'TweenRotator_OnActorBeginOverlap::POtherActor' has a wrong offset!");

// Function TweenMaker.TweenRotator.OnActorHit
// 0x00A8 (0x00A8 - 0x0000)
struct TweenRotator_OnActorHit final
{
public:
	class AActor*                                 PThisActor;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 POtherActor;                                       // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                PNormalImpulse;                                    // 0x0010(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FHitResult                             PHit;                                              // 0x001C(0x008C)(ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(TweenRotator_OnActorHit) == 0x000008, "Wrong alignment on TweenRotator_OnActorHit");
static_assert(sizeof(TweenRotator_OnActorHit) == 0x0000A8, "Wrong size on TweenRotator_OnActorHit");
static_assert(offsetof(TweenRotator_OnActorHit, PThisActor) == 0x000000, "Member 'TweenRotator_OnActorHit::PThisActor' has a wrong offset!");
static_assert(offsetof(TweenRotator_OnActorHit, POtherActor) == 0x000008, "Member 'TweenRotator_OnActorHit::POtherActor' has a wrong offset!");
static_assert(offsetof(TweenRotator_OnActorHit, PNormalImpulse) == 0x000010, "Member 'TweenRotator_OnActorHit::PNormalImpulse' has a wrong offset!");
static_assert(offsetof(TweenRotator_OnActorHit, PHit) == 0x00001C, "Member 'TweenRotator_OnActorHit::PHit' has a wrong offset!");

// Function TweenMaker.TweenRotator.OnPrimitiveComponentBeginOverlap
// 0x00B0 (0x00B0 - 0x0000)
struct TweenRotator_OnPrimitiveComponentBeginOverlap final
{
public:
	class UPrimitiveComponent*                    PThisComponent;                                    // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 POtherActor;                                       // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UPrimitiveComponent*                    POtherComp;                                        // 0x0010(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         POtherBodyIndex;                                   // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bFromSweep;                                        // 0x001C(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1D[0x3];                                       // 0x001D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FHitResult                             PSweepResult;                                      // 0x0020(0x008C)(ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
	uint8                                         Pad_AC[0x4];                                       // 0x00AC(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TweenRotator_OnPrimitiveComponentBeginOverlap) == 0x000008, "Wrong alignment on TweenRotator_OnPrimitiveComponentBeginOverlap");
static_assert(sizeof(TweenRotator_OnPrimitiveComponentBeginOverlap) == 0x0000B0, "Wrong size on TweenRotator_OnPrimitiveComponentBeginOverlap");
static_assert(offsetof(TweenRotator_OnPrimitiveComponentBeginOverlap, PThisComponent) == 0x000000, "Member 'TweenRotator_OnPrimitiveComponentBeginOverlap::PThisComponent' has a wrong offset!");
static_assert(offsetof(TweenRotator_OnPrimitiveComponentBeginOverlap, POtherActor) == 0x000008, "Member 'TweenRotator_OnPrimitiveComponentBeginOverlap::POtherActor' has a wrong offset!");
static_assert(offsetof(TweenRotator_OnPrimitiveComponentBeginOverlap, POtherComp) == 0x000010, "Member 'TweenRotator_OnPrimitiveComponentBeginOverlap::POtherComp' has a wrong offset!");
static_assert(offsetof(TweenRotator_OnPrimitiveComponentBeginOverlap, POtherBodyIndex) == 0x000018, "Member 'TweenRotator_OnPrimitiveComponentBeginOverlap::POtherBodyIndex' has a wrong offset!");
static_assert(offsetof(TweenRotator_OnPrimitiveComponentBeginOverlap, bFromSweep) == 0x00001C, "Member 'TweenRotator_OnPrimitiveComponentBeginOverlap::bFromSweep' has a wrong offset!");
static_assert(offsetof(TweenRotator_OnPrimitiveComponentBeginOverlap, PSweepResult) == 0x000020, "Member 'TweenRotator_OnPrimitiveComponentBeginOverlap::PSweepResult' has a wrong offset!");

// Function TweenMaker.TweenRotator.OnPrimitiveComponentHit
// 0x00B0 (0x00B0 - 0x0000)
struct TweenRotator_OnPrimitiveComponentHit final
{
public:
	class UPrimitiveComponent*                    PThisComponent;                                    // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 POtherActor;                                       // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UPrimitiveComponent*                    POtherComp;                                        // 0x0010(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                PNormalImpulse;                                    // 0x0018(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FHitResult                             PHitResult;                                        // 0x0024(0x008C)(ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(TweenRotator_OnPrimitiveComponentHit) == 0x000008, "Wrong alignment on TweenRotator_OnPrimitiveComponentHit");
static_assert(sizeof(TweenRotator_OnPrimitiveComponentHit) == 0x0000B0, "Wrong size on TweenRotator_OnPrimitiveComponentHit");
static_assert(offsetof(TweenRotator_OnPrimitiveComponentHit, PThisComponent) == 0x000000, "Member 'TweenRotator_OnPrimitiveComponentHit::PThisComponent' has a wrong offset!");
static_assert(offsetof(TweenRotator_OnPrimitiveComponentHit, POtherActor) == 0x000008, "Member 'TweenRotator_OnPrimitiveComponentHit::POtherActor' has a wrong offset!");
static_assert(offsetof(TweenRotator_OnPrimitiveComponentHit, POtherComp) == 0x000010, "Member 'TweenRotator_OnPrimitiveComponentHit::POtherComp' has a wrong offset!");
static_assert(offsetof(TweenRotator_OnPrimitiveComponentHit, PNormalImpulse) == 0x000018, "Member 'TweenRotator_OnPrimitiveComponentHit::PNormalImpulse' has a wrong offset!");
static_assert(offsetof(TweenRotator_OnPrimitiveComponentHit, PHitResult) == 0x000024, "Member 'TweenRotator_OnPrimitiveComponentHit::PHitResult' has a wrong offset!");

// Function TweenMaker.TweenRotator.GetCurrentValue
// 0x000C (0x000C - 0x0000)
struct TweenRotator_GetCurrentValue final
{
public:
	struct FRotator                               ReturnValue;                                       // 0x0000(0x000C)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(TweenRotator_GetCurrentValue) == 0x000004, "Wrong alignment on TweenRotator_GetCurrentValue");
static_assert(sizeof(TweenRotator_GetCurrentValue) == 0x00000C, "Wrong size on TweenRotator_GetCurrentValue");
static_assert(offsetof(TweenRotator_GetCurrentValue, ReturnValue) == 0x000000, "Member 'TweenRotator_GetCurrentValue::ReturnValue' has a wrong offset!");

// Function TweenMaker.TweenRotatorLatentFactory.BP_AppendLatentTweenRotateActorBy
// 0x0048 (0x0048 - 0x0000)
struct TweenRotatorLatentFactory_BP_AppendLatentTweenRotateActorBy final
{
public:
	class UTweenContainer*                        TweenContainer;                                    // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UTweenRotator*                          OutTween;                                          // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 TweenTarget;                                       // 0x0010(0x0008)(Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRotator                               bY;                                                // 0x0018(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	float                                         Duration;                                          // 0x0024(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETweenEaseType                                EaseType;                                          // 0x0028(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          DeleteTweenOnHit;                                  // 0x0029(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          DeleteTweenOnOverlap;                              // 0x002A(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2B[0x1];                                       // 0x002B(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         NumLoops;                                          // 0x002C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETweenLoopType                                LoopType;                                          // 0x0030(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_31[0x3];                                       // 0x0031(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Delay;                                             // 0x0034(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TimeScale;                                         // 0x0038(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          TweenWhileGameIsPaused;                            // 0x003C(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_3D[0x3];                                       // 0x003D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UTweenRotatorLatentFactory*             ReturnValue;                                       // 0x0040(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TweenRotatorLatentFactory_BP_AppendLatentTweenRotateActorBy) == 0x000008, "Wrong alignment on TweenRotatorLatentFactory_BP_AppendLatentTweenRotateActorBy");
static_assert(sizeof(TweenRotatorLatentFactory_BP_AppendLatentTweenRotateActorBy) == 0x000048, "Wrong size on TweenRotatorLatentFactory_BP_AppendLatentTweenRotateActorBy");
static_assert(offsetof(TweenRotatorLatentFactory_BP_AppendLatentTweenRotateActorBy, TweenContainer) == 0x000000, "Member 'TweenRotatorLatentFactory_BP_AppendLatentTweenRotateActorBy::TweenContainer' has a wrong offset!");
static_assert(offsetof(TweenRotatorLatentFactory_BP_AppendLatentTweenRotateActorBy, OutTween) == 0x000008, "Member 'TweenRotatorLatentFactory_BP_AppendLatentTweenRotateActorBy::OutTween' has a wrong offset!");
static_assert(offsetof(TweenRotatorLatentFactory_BP_AppendLatentTweenRotateActorBy, TweenTarget) == 0x000010, "Member 'TweenRotatorLatentFactory_BP_AppendLatentTweenRotateActorBy::TweenTarget' has a wrong offset!");
static_assert(offsetof(TweenRotatorLatentFactory_BP_AppendLatentTweenRotateActorBy, bY) == 0x000018, "Member 'TweenRotatorLatentFactory_BP_AppendLatentTweenRotateActorBy::bY' has a wrong offset!");
static_assert(offsetof(TweenRotatorLatentFactory_BP_AppendLatentTweenRotateActorBy, Duration) == 0x000024, "Member 'TweenRotatorLatentFactory_BP_AppendLatentTweenRotateActorBy::Duration' has a wrong offset!");
static_assert(offsetof(TweenRotatorLatentFactory_BP_AppendLatentTweenRotateActorBy, EaseType) == 0x000028, "Member 'TweenRotatorLatentFactory_BP_AppendLatentTweenRotateActorBy::EaseType' has a wrong offset!");
static_assert(offsetof(TweenRotatorLatentFactory_BP_AppendLatentTweenRotateActorBy, DeleteTweenOnHit) == 0x000029, "Member 'TweenRotatorLatentFactory_BP_AppendLatentTweenRotateActorBy::DeleteTweenOnHit' has a wrong offset!");
static_assert(offsetof(TweenRotatorLatentFactory_BP_AppendLatentTweenRotateActorBy, DeleteTweenOnOverlap) == 0x00002A, "Member 'TweenRotatorLatentFactory_BP_AppendLatentTweenRotateActorBy::DeleteTweenOnOverlap' has a wrong offset!");
static_assert(offsetof(TweenRotatorLatentFactory_BP_AppendLatentTweenRotateActorBy, NumLoops) == 0x00002C, "Member 'TweenRotatorLatentFactory_BP_AppendLatentTweenRotateActorBy::NumLoops' has a wrong offset!");
static_assert(offsetof(TweenRotatorLatentFactory_BP_AppendLatentTweenRotateActorBy, LoopType) == 0x000030, "Member 'TweenRotatorLatentFactory_BP_AppendLatentTweenRotateActorBy::LoopType' has a wrong offset!");
static_assert(offsetof(TweenRotatorLatentFactory_BP_AppendLatentTweenRotateActorBy, Delay) == 0x000034, "Member 'TweenRotatorLatentFactory_BP_AppendLatentTweenRotateActorBy::Delay' has a wrong offset!");
static_assert(offsetof(TweenRotatorLatentFactory_BP_AppendLatentTweenRotateActorBy, TimeScale) == 0x000038, "Member 'TweenRotatorLatentFactory_BP_AppendLatentTweenRotateActorBy::TimeScale' has a wrong offset!");
static_assert(offsetof(TweenRotatorLatentFactory_BP_AppendLatentTweenRotateActorBy, TweenWhileGameIsPaused) == 0x00003C, "Member 'TweenRotatorLatentFactory_BP_AppendLatentTweenRotateActorBy::TweenWhileGameIsPaused' has a wrong offset!");
static_assert(offsetof(TweenRotatorLatentFactory_BP_AppendLatentTweenRotateActorBy, ReturnValue) == 0x000040, "Member 'TweenRotatorLatentFactory_BP_AppendLatentTweenRotateActorBy::ReturnValue' has a wrong offset!");

// Function TweenMaker.TweenRotatorLatentFactory.BP_AppendLatentTweenRotateActorTo
// 0x0050 (0x0050 - 0x0000)
struct TweenRotatorLatentFactory_BP_AppendLatentTweenRotateActorTo final
{
public:
	class UTweenContainer*                        TweenContainer;                                    // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UTweenRotator*                          OutTween;                                          // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 TweenTarget;                                       // 0x0010(0x0008)(Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRotator                               To;                                                // 0x0018(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	float                                         Duration;                                          // 0x0024(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETweenEaseType                                EaseType;                                          // 0x0028(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETweenSpace                                   TweenSpace;                                        // 0x0029(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETweenRotationMode                            RotationMode;                                      // 0x002A(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          DeleteTweenOnHit;                                  // 0x002B(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          DeleteTweenOnOverlap;                              // 0x002C(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2D[0x3];                                       // 0x002D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         NumLoops;                                          // 0x0030(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETweenLoopType                                LoopType;                                          // 0x0034(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_35[0x3];                                       // 0x0035(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Delay;                                             // 0x0038(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TimeScale;                                         // 0x003C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          TweenWhileGameIsPaused;                            // 0x0040(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_41[0x7];                                       // 0x0041(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UTweenRotatorLatentFactory*             ReturnValue;                                       // 0x0048(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TweenRotatorLatentFactory_BP_AppendLatentTweenRotateActorTo) == 0x000008, "Wrong alignment on TweenRotatorLatentFactory_BP_AppendLatentTweenRotateActorTo");
static_assert(sizeof(TweenRotatorLatentFactory_BP_AppendLatentTweenRotateActorTo) == 0x000050, "Wrong size on TweenRotatorLatentFactory_BP_AppendLatentTweenRotateActorTo");
static_assert(offsetof(TweenRotatorLatentFactory_BP_AppendLatentTweenRotateActorTo, TweenContainer) == 0x000000, "Member 'TweenRotatorLatentFactory_BP_AppendLatentTweenRotateActorTo::TweenContainer' has a wrong offset!");
static_assert(offsetof(TweenRotatorLatentFactory_BP_AppendLatentTweenRotateActorTo, OutTween) == 0x000008, "Member 'TweenRotatorLatentFactory_BP_AppendLatentTweenRotateActorTo::OutTween' has a wrong offset!");
static_assert(offsetof(TweenRotatorLatentFactory_BP_AppendLatentTweenRotateActorTo, TweenTarget) == 0x000010, "Member 'TweenRotatorLatentFactory_BP_AppendLatentTweenRotateActorTo::TweenTarget' has a wrong offset!");
static_assert(offsetof(TweenRotatorLatentFactory_BP_AppendLatentTweenRotateActorTo, To) == 0x000018, "Member 'TweenRotatorLatentFactory_BP_AppendLatentTweenRotateActorTo::To' has a wrong offset!");
static_assert(offsetof(TweenRotatorLatentFactory_BP_AppendLatentTweenRotateActorTo, Duration) == 0x000024, "Member 'TweenRotatorLatentFactory_BP_AppendLatentTweenRotateActorTo::Duration' has a wrong offset!");
static_assert(offsetof(TweenRotatorLatentFactory_BP_AppendLatentTweenRotateActorTo, EaseType) == 0x000028, "Member 'TweenRotatorLatentFactory_BP_AppendLatentTweenRotateActorTo::EaseType' has a wrong offset!");
static_assert(offsetof(TweenRotatorLatentFactory_BP_AppendLatentTweenRotateActorTo, TweenSpace) == 0x000029, "Member 'TweenRotatorLatentFactory_BP_AppendLatentTweenRotateActorTo::TweenSpace' has a wrong offset!");
static_assert(offsetof(TweenRotatorLatentFactory_BP_AppendLatentTweenRotateActorTo, RotationMode) == 0x00002A, "Member 'TweenRotatorLatentFactory_BP_AppendLatentTweenRotateActorTo::RotationMode' has a wrong offset!");
static_assert(offsetof(TweenRotatorLatentFactory_BP_AppendLatentTweenRotateActorTo, DeleteTweenOnHit) == 0x00002B, "Member 'TweenRotatorLatentFactory_BP_AppendLatentTweenRotateActorTo::DeleteTweenOnHit' has a wrong offset!");
static_assert(offsetof(TweenRotatorLatentFactory_BP_AppendLatentTweenRotateActorTo, DeleteTweenOnOverlap) == 0x00002C, "Member 'TweenRotatorLatentFactory_BP_AppendLatentTweenRotateActorTo::DeleteTweenOnOverlap' has a wrong offset!");
static_assert(offsetof(TweenRotatorLatentFactory_BP_AppendLatentTweenRotateActorTo, NumLoops) == 0x000030, "Member 'TweenRotatorLatentFactory_BP_AppendLatentTweenRotateActorTo::NumLoops' has a wrong offset!");
static_assert(offsetof(TweenRotatorLatentFactory_BP_AppendLatentTweenRotateActorTo, LoopType) == 0x000034, "Member 'TweenRotatorLatentFactory_BP_AppendLatentTweenRotateActorTo::LoopType' has a wrong offset!");
static_assert(offsetof(TweenRotatorLatentFactory_BP_AppendLatentTweenRotateActorTo, Delay) == 0x000038, "Member 'TweenRotatorLatentFactory_BP_AppendLatentTweenRotateActorTo::Delay' has a wrong offset!");
static_assert(offsetof(TweenRotatorLatentFactory_BP_AppendLatentTweenRotateActorTo, TimeScale) == 0x00003C, "Member 'TweenRotatorLatentFactory_BP_AppendLatentTweenRotateActorTo::TimeScale' has a wrong offset!");
static_assert(offsetof(TweenRotatorLatentFactory_BP_AppendLatentTweenRotateActorTo, TweenWhileGameIsPaused) == 0x000040, "Member 'TweenRotatorLatentFactory_BP_AppendLatentTweenRotateActorTo::TweenWhileGameIsPaused' has a wrong offset!");
static_assert(offsetof(TweenRotatorLatentFactory_BP_AppendLatentTweenRotateActorTo, ReturnValue) == 0x000048, "Member 'TweenRotatorLatentFactory_BP_AppendLatentTweenRotateActorTo::ReturnValue' has a wrong offset!");

// Function TweenMaker.TweenRotatorLatentFactory.BP_AppendLatentTweenRotateSceneComponentBy
// 0x0048 (0x0048 - 0x0000)
struct TweenRotatorLatentFactory_BP_AppendLatentTweenRotateSceneComponentBy final
{
public:
	class UTweenContainer*                        TweenContainer;                                    // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UTweenRotator*                          OutTween;                                          // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USceneComponent*                        TweenTarget;                                       // 0x0010(0x0008)(Parm, OutParm, ZeroConstructor, InstancedReference, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRotator                               bY;                                                // 0x0018(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	float                                         Duration;                                          // 0x0024(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETweenEaseType                                EaseType;                                          // 0x0028(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          DeleteTweenOnHit;                                  // 0x0029(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          DeleteTweenOnOverlap;                              // 0x002A(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2B[0x1];                                       // 0x002B(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         NumLoops;                                          // 0x002C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETweenLoopType                                LoopType;                                          // 0x0030(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_31[0x3];                                       // 0x0031(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Delay;                                             // 0x0034(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TimeScale;                                         // 0x0038(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          TweenWhileGameIsPaused;                            // 0x003C(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_3D[0x3];                                       // 0x003D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UTweenRotatorLatentFactory*             ReturnValue;                                       // 0x0040(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TweenRotatorLatentFactory_BP_AppendLatentTweenRotateSceneComponentBy) == 0x000008, "Wrong alignment on TweenRotatorLatentFactory_BP_AppendLatentTweenRotateSceneComponentBy");
static_assert(sizeof(TweenRotatorLatentFactory_BP_AppendLatentTweenRotateSceneComponentBy) == 0x000048, "Wrong size on TweenRotatorLatentFactory_BP_AppendLatentTweenRotateSceneComponentBy");
static_assert(offsetof(TweenRotatorLatentFactory_BP_AppendLatentTweenRotateSceneComponentBy, TweenContainer) == 0x000000, "Member 'TweenRotatorLatentFactory_BP_AppendLatentTweenRotateSceneComponentBy::TweenContainer' has a wrong offset!");
static_assert(offsetof(TweenRotatorLatentFactory_BP_AppendLatentTweenRotateSceneComponentBy, OutTween) == 0x000008, "Member 'TweenRotatorLatentFactory_BP_AppendLatentTweenRotateSceneComponentBy::OutTween' has a wrong offset!");
static_assert(offsetof(TweenRotatorLatentFactory_BP_AppendLatentTweenRotateSceneComponentBy, TweenTarget) == 0x000010, "Member 'TweenRotatorLatentFactory_BP_AppendLatentTweenRotateSceneComponentBy::TweenTarget' has a wrong offset!");
static_assert(offsetof(TweenRotatorLatentFactory_BP_AppendLatentTweenRotateSceneComponentBy, bY) == 0x000018, "Member 'TweenRotatorLatentFactory_BP_AppendLatentTweenRotateSceneComponentBy::bY' has a wrong offset!");
static_assert(offsetof(TweenRotatorLatentFactory_BP_AppendLatentTweenRotateSceneComponentBy, Duration) == 0x000024, "Member 'TweenRotatorLatentFactory_BP_AppendLatentTweenRotateSceneComponentBy::Duration' has a wrong offset!");
static_assert(offsetof(TweenRotatorLatentFactory_BP_AppendLatentTweenRotateSceneComponentBy, EaseType) == 0x000028, "Member 'TweenRotatorLatentFactory_BP_AppendLatentTweenRotateSceneComponentBy::EaseType' has a wrong offset!");
static_assert(offsetof(TweenRotatorLatentFactory_BP_AppendLatentTweenRotateSceneComponentBy, DeleteTweenOnHit) == 0x000029, "Member 'TweenRotatorLatentFactory_BP_AppendLatentTweenRotateSceneComponentBy::DeleteTweenOnHit' has a wrong offset!");
static_assert(offsetof(TweenRotatorLatentFactory_BP_AppendLatentTweenRotateSceneComponentBy, DeleteTweenOnOverlap) == 0x00002A, "Member 'TweenRotatorLatentFactory_BP_AppendLatentTweenRotateSceneComponentBy::DeleteTweenOnOverlap' has a wrong offset!");
static_assert(offsetof(TweenRotatorLatentFactory_BP_AppendLatentTweenRotateSceneComponentBy, NumLoops) == 0x00002C, "Member 'TweenRotatorLatentFactory_BP_AppendLatentTweenRotateSceneComponentBy::NumLoops' has a wrong offset!");
static_assert(offsetof(TweenRotatorLatentFactory_BP_AppendLatentTweenRotateSceneComponentBy, LoopType) == 0x000030, "Member 'TweenRotatorLatentFactory_BP_AppendLatentTweenRotateSceneComponentBy::LoopType' has a wrong offset!");
static_assert(offsetof(TweenRotatorLatentFactory_BP_AppendLatentTweenRotateSceneComponentBy, Delay) == 0x000034, "Member 'TweenRotatorLatentFactory_BP_AppendLatentTweenRotateSceneComponentBy::Delay' has a wrong offset!");
static_assert(offsetof(TweenRotatorLatentFactory_BP_AppendLatentTweenRotateSceneComponentBy, TimeScale) == 0x000038, "Member 'TweenRotatorLatentFactory_BP_AppendLatentTweenRotateSceneComponentBy::TimeScale' has a wrong offset!");
static_assert(offsetof(TweenRotatorLatentFactory_BP_AppendLatentTweenRotateSceneComponentBy, TweenWhileGameIsPaused) == 0x00003C, "Member 'TweenRotatorLatentFactory_BP_AppendLatentTweenRotateSceneComponentBy::TweenWhileGameIsPaused' has a wrong offset!");
static_assert(offsetof(TweenRotatorLatentFactory_BP_AppendLatentTweenRotateSceneComponentBy, ReturnValue) == 0x000040, "Member 'TweenRotatorLatentFactory_BP_AppendLatentTweenRotateSceneComponentBy::ReturnValue' has a wrong offset!");

// Function TweenMaker.TweenRotatorLatentFactory.BP_AppendLatentTweenRotateSceneComponentTo
// 0x0050 (0x0050 - 0x0000)
struct TweenRotatorLatentFactory_BP_AppendLatentTweenRotateSceneComponentTo final
{
public:
	class UTweenContainer*                        TweenContainer;                                    // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UTweenRotator*                          OutTween;                                          // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USceneComponent*                        TweenTarget;                                       // 0x0010(0x0008)(Parm, OutParm, ZeroConstructor, InstancedReference, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRotator                               To;                                                // 0x0018(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	float                                         Duration;                                          // 0x0024(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETweenEaseType                                EaseType;                                          // 0x0028(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETweenSpace                                   TweenSpace;                                        // 0x0029(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETweenRotationMode                            RotationMode;                                      // 0x002A(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          DeleteTweenOnHit;                                  // 0x002B(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          DeleteTweenOnOverlap;                              // 0x002C(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2D[0x3];                                       // 0x002D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         NumLoops;                                          // 0x0030(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETweenLoopType                                LoopType;                                          // 0x0034(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_35[0x3];                                       // 0x0035(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Delay;                                             // 0x0038(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TimeScale;                                         // 0x003C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          TweenWhileGameIsPaused;                            // 0x0040(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_41[0x7];                                       // 0x0041(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UTweenRotatorLatentFactory*             ReturnValue;                                       // 0x0048(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TweenRotatorLatentFactory_BP_AppendLatentTweenRotateSceneComponentTo) == 0x000008, "Wrong alignment on TweenRotatorLatentFactory_BP_AppendLatentTweenRotateSceneComponentTo");
static_assert(sizeof(TweenRotatorLatentFactory_BP_AppendLatentTweenRotateSceneComponentTo) == 0x000050, "Wrong size on TweenRotatorLatentFactory_BP_AppendLatentTweenRotateSceneComponentTo");
static_assert(offsetof(TweenRotatorLatentFactory_BP_AppendLatentTweenRotateSceneComponentTo, TweenContainer) == 0x000000, "Member 'TweenRotatorLatentFactory_BP_AppendLatentTweenRotateSceneComponentTo::TweenContainer' has a wrong offset!");
static_assert(offsetof(TweenRotatorLatentFactory_BP_AppendLatentTweenRotateSceneComponentTo, OutTween) == 0x000008, "Member 'TweenRotatorLatentFactory_BP_AppendLatentTweenRotateSceneComponentTo::OutTween' has a wrong offset!");
static_assert(offsetof(TweenRotatorLatentFactory_BP_AppendLatentTweenRotateSceneComponentTo, TweenTarget) == 0x000010, "Member 'TweenRotatorLatentFactory_BP_AppendLatentTweenRotateSceneComponentTo::TweenTarget' has a wrong offset!");
static_assert(offsetof(TweenRotatorLatentFactory_BP_AppendLatentTweenRotateSceneComponentTo, To) == 0x000018, "Member 'TweenRotatorLatentFactory_BP_AppendLatentTweenRotateSceneComponentTo::To' has a wrong offset!");
static_assert(offsetof(TweenRotatorLatentFactory_BP_AppendLatentTweenRotateSceneComponentTo, Duration) == 0x000024, "Member 'TweenRotatorLatentFactory_BP_AppendLatentTweenRotateSceneComponentTo::Duration' has a wrong offset!");
static_assert(offsetof(TweenRotatorLatentFactory_BP_AppendLatentTweenRotateSceneComponentTo, EaseType) == 0x000028, "Member 'TweenRotatorLatentFactory_BP_AppendLatentTweenRotateSceneComponentTo::EaseType' has a wrong offset!");
static_assert(offsetof(TweenRotatorLatentFactory_BP_AppendLatentTweenRotateSceneComponentTo, TweenSpace) == 0x000029, "Member 'TweenRotatorLatentFactory_BP_AppendLatentTweenRotateSceneComponentTo::TweenSpace' has a wrong offset!");
static_assert(offsetof(TweenRotatorLatentFactory_BP_AppendLatentTweenRotateSceneComponentTo, RotationMode) == 0x00002A, "Member 'TweenRotatorLatentFactory_BP_AppendLatentTweenRotateSceneComponentTo::RotationMode' has a wrong offset!");
static_assert(offsetof(TweenRotatorLatentFactory_BP_AppendLatentTweenRotateSceneComponentTo, DeleteTweenOnHit) == 0x00002B, "Member 'TweenRotatorLatentFactory_BP_AppendLatentTweenRotateSceneComponentTo::DeleteTweenOnHit' has a wrong offset!");
static_assert(offsetof(TweenRotatorLatentFactory_BP_AppendLatentTweenRotateSceneComponentTo, DeleteTweenOnOverlap) == 0x00002C, "Member 'TweenRotatorLatentFactory_BP_AppendLatentTweenRotateSceneComponentTo::DeleteTweenOnOverlap' has a wrong offset!");
static_assert(offsetof(TweenRotatorLatentFactory_BP_AppendLatentTweenRotateSceneComponentTo, NumLoops) == 0x000030, "Member 'TweenRotatorLatentFactory_BP_AppendLatentTweenRotateSceneComponentTo::NumLoops' has a wrong offset!");
static_assert(offsetof(TweenRotatorLatentFactory_BP_AppendLatentTweenRotateSceneComponentTo, LoopType) == 0x000034, "Member 'TweenRotatorLatentFactory_BP_AppendLatentTweenRotateSceneComponentTo::LoopType' has a wrong offset!");
static_assert(offsetof(TweenRotatorLatentFactory_BP_AppendLatentTweenRotateSceneComponentTo, Delay) == 0x000038, "Member 'TweenRotatorLatentFactory_BP_AppendLatentTweenRotateSceneComponentTo::Delay' has a wrong offset!");
static_assert(offsetof(TweenRotatorLatentFactory_BP_AppendLatentTweenRotateSceneComponentTo, TimeScale) == 0x00003C, "Member 'TweenRotatorLatentFactory_BP_AppendLatentTweenRotateSceneComponentTo::TimeScale' has a wrong offset!");
static_assert(offsetof(TweenRotatorLatentFactory_BP_AppendLatentTweenRotateSceneComponentTo, TweenWhileGameIsPaused) == 0x000040, "Member 'TweenRotatorLatentFactory_BP_AppendLatentTweenRotateSceneComponentTo::TweenWhileGameIsPaused' has a wrong offset!");
static_assert(offsetof(TweenRotatorLatentFactory_BP_AppendLatentTweenRotateSceneComponentTo, ReturnValue) == 0x000048, "Member 'TweenRotatorLatentFactory_BP_AppendLatentTweenRotateSceneComponentTo::ReturnValue' has a wrong offset!");

// Function TweenMaker.TweenRotatorLatentFactory.BP_CreateLatentTweenRotateActorBy
// 0x0050 (0x0050 - 0x0000)
struct TweenRotatorLatentFactory_BP_CreateLatentTweenRotateActorBy final
{
public:
	class UTweenManagerComponent*                 TweenManager;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 TweenTarget;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UTweenContainer*                        OutTweenContainer;                                 // 0x0010(0x0008)(Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UTweenRotator*                          OutTween;                                          // 0x0018(0x0008)(Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRotator                               bY;                                                // 0x0020(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	float                                         Duration;                                          // 0x002C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETweenEaseType                                EaseType;                                          // 0x0030(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          DeleteTweenOnHit;                                  // 0x0031(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          DeleteTweenOnOverlap;                              // 0x0032(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_33[0x1];                                       // 0x0033(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         NumLoops;                                          // 0x0034(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETweenLoopType                                LoopType;                                          // 0x0038(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_39[0x3];                                       // 0x0039(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Delay;                                             // 0x003C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TimeScale;                                         // 0x0040(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          TweenWhileGameIsPaused;                            // 0x0044(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_45[0x3];                                       // 0x0045(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UTweenRotatorLatentFactory*             ReturnValue;                                       // 0x0048(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TweenRotatorLatentFactory_BP_CreateLatentTweenRotateActorBy) == 0x000008, "Wrong alignment on TweenRotatorLatentFactory_BP_CreateLatentTweenRotateActorBy");
static_assert(sizeof(TweenRotatorLatentFactory_BP_CreateLatentTweenRotateActorBy) == 0x000050, "Wrong size on TweenRotatorLatentFactory_BP_CreateLatentTweenRotateActorBy");
static_assert(offsetof(TweenRotatorLatentFactory_BP_CreateLatentTweenRotateActorBy, TweenManager) == 0x000000, "Member 'TweenRotatorLatentFactory_BP_CreateLatentTweenRotateActorBy::TweenManager' has a wrong offset!");
static_assert(offsetof(TweenRotatorLatentFactory_BP_CreateLatentTweenRotateActorBy, TweenTarget) == 0x000008, "Member 'TweenRotatorLatentFactory_BP_CreateLatentTweenRotateActorBy::TweenTarget' has a wrong offset!");
static_assert(offsetof(TweenRotatorLatentFactory_BP_CreateLatentTweenRotateActorBy, OutTweenContainer) == 0x000010, "Member 'TweenRotatorLatentFactory_BP_CreateLatentTweenRotateActorBy::OutTweenContainer' has a wrong offset!");
static_assert(offsetof(TweenRotatorLatentFactory_BP_CreateLatentTweenRotateActorBy, OutTween) == 0x000018, "Member 'TweenRotatorLatentFactory_BP_CreateLatentTweenRotateActorBy::OutTween' has a wrong offset!");
static_assert(offsetof(TweenRotatorLatentFactory_BP_CreateLatentTweenRotateActorBy, bY) == 0x000020, "Member 'TweenRotatorLatentFactory_BP_CreateLatentTweenRotateActorBy::bY' has a wrong offset!");
static_assert(offsetof(TweenRotatorLatentFactory_BP_CreateLatentTweenRotateActorBy, Duration) == 0x00002C, "Member 'TweenRotatorLatentFactory_BP_CreateLatentTweenRotateActorBy::Duration' has a wrong offset!");
static_assert(offsetof(TweenRotatorLatentFactory_BP_CreateLatentTweenRotateActorBy, EaseType) == 0x000030, "Member 'TweenRotatorLatentFactory_BP_CreateLatentTweenRotateActorBy::EaseType' has a wrong offset!");
static_assert(offsetof(TweenRotatorLatentFactory_BP_CreateLatentTweenRotateActorBy, DeleteTweenOnHit) == 0x000031, "Member 'TweenRotatorLatentFactory_BP_CreateLatentTweenRotateActorBy::DeleteTweenOnHit' has a wrong offset!");
static_assert(offsetof(TweenRotatorLatentFactory_BP_CreateLatentTweenRotateActorBy, DeleteTweenOnOverlap) == 0x000032, "Member 'TweenRotatorLatentFactory_BP_CreateLatentTweenRotateActorBy::DeleteTweenOnOverlap' has a wrong offset!");
static_assert(offsetof(TweenRotatorLatentFactory_BP_CreateLatentTweenRotateActorBy, NumLoops) == 0x000034, "Member 'TweenRotatorLatentFactory_BP_CreateLatentTweenRotateActorBy::NumLoops' has a wrong offset!");
static_assert(offsetof(TweenRotatorLatentFactory_BP_CreateLatentTweenRotateActorBy, LoopType) == 0x000038, "Member 'TweenRotatorLatentFactory_BP_CreateLatentTweenRotateActorBy::LoopType' has a wrong offset!");
static_assert(offsetof(TweenRotatorLatentFactory_BP_CreateLatentTweenRotateActorBy, Delay) == 0x00003C, "Member 'TweenRotatorLatentFactory_BP_CreateLatentTweenRotateActorBy::Delay' has a wrong offset!");
static_assert(offsetof(TweenRotatorLatentFactory_BP_CreateLatentTweenRotateActorBy, TimeScale) == 0x000040, "Member 'TweenRotatorLatentFactory_BP_CreateLatentTweenRotateActorBy::TimeScale' has a wrong offset!");
static_assert(offsetof(TweenRotatorLatentFactory_BP_CreateLatentTweenRotateActorBy, TweenWhileGameIsPaused) == 0x000044, "Member 'TweenRotatorLatentFactory_BP_CreateLatentTweenRotateActorBy::TweenWhileGameIsPaused' has a wrong offset!");
static_assert(offsetof(TweenRotatorLatentFactory_BP_CreateLatentTweenRotateActorBy, ReturnValue) == 0x000048, "Member 'TweenRotatorLatentFactory_BP_CreateLatentTweenRotateActorBy::ReturnValue' has a wrong offset!");

// Function TweenMaker.TweenRotatorLatentFactory.BP_CreateLatentTweenRotateActorTo
// 0x0058 (0x0058 - 0x0000)
struct TweenRotatorLatentFactory_BP_CreateLatentTweenRotateActorTo final
{
public:
	class UTweenManagerComponent*                 TweenManager;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 TweenTarget;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UTweenContainer*                        OutTweenContainer;                                 // 0x0010(0x0008)(Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UTweenRotator*                          OutTween;                                          // 0x0018(0x0008)(Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRotator                               To;                                                // 0x0020(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	float                                         Duration;                                          // 0x002C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETweenEaseType                                EaseType;                                          // 0x0030(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETweenSpace                                   TweenSpace;                                        // 0x0031(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETweenRotationMode                            RotationMode;                                      // 0x0032(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          DeleteTweenOnHit;                                  // 0x0033(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          DeleteTweenOnOverlap;                              // 0x0034(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_35[0x3];                                       // 0x0035(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         NumLoops;                                          // 0x0038(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETweenLoopType                                LoopType;                                          // 0x003C(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_3D[0x3];                                       // 0x003D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Delay;                                             // 0x0040(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TimeScale;                                         // 0x0044(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          TweenWhileGameIsPaused;                            // 0x0048(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_49[0x7];                                       // 0x0049(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UTweenRotatorLatentFactory*             ReturnValue;                                       // 0x0050(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TweenRotatorLatentFactory_BP_CreateLatentTweenRotateActorTo) == 0x000008, "Wrong alignment on TweenRotatorLatentFactory_BP_CreateLatentTweenRotateActorTo");
static_assert(sizeof(TweenRotatorLatentFactory_BP_CreateLatentTweenRotateActorTo) == 0x000058, "Wrong size on TweenRotatorLatentFactory_BP_CreateLatentTweenRotateActorTo");
static_assert(offsetof(TweenRotatorLatentFactory_BP_CreateLatentTweenRotateActorTo, TweenManager) == 0x000000, "Member 'TweenRotatorLatentFactory_BP_CreateLatentTweenRotateActorTo::TweenManager' has a wrong offset!");
static_assert(offsetof(TweenRotatorLatentFactory_BP_CreateLatentTweenRotateActorTo, TweenTarget) == 0x000008, "Member 'TweenRotatorLatentFactory_BP_CreateLatentTweenRotateActorTo::TweenTarget' has a wrong offset!");
static_assert(offsetof(TweenRotatorLatentFactory_BP_CreateLatentTweenRotateActorTo, OutTweenContainer) == 0x000010, "Member 'TweenRotatorLatentFactory_BP_CreateLatentTweenRotateActorTo::OutTweenContainer' has a wrong offset!");
static_assert(offsetof(TweenRotatorLatentFactory_BP_CreateLatentTweenRotateActorTo, OutTween) == 0x000018, "Member 'TweenRotatorLatentFactory_BP_CreateLatentTweenRotateActorTo::OutTween' has a wrong offset!");
static_assert(offsetof(TweenRotatorLatentFactory_BP_CreateLatentTweenRotateActorTo, To) == 0x000020, "Member 'TweenRotatorLatentFactory_BP_CreateLatentTweenRotateActorTo::To' has a wrong offset!");
static_assert(offsetof(TweenRotatorLatentFactory_BP_CreateLatentTweenRotateActorTo, Duration) == 0x00002C, "Member 'TweenRotatorLatentFactory_BP_CreateLatentTweenRotateActorTo::Duration' has a wrong offset!");
static_assert(offsetof(TweenRotatorLatentFactory_BP_CreateLatentTweenRotateActorTo, EaseType) == 0x000030, "Member 'TweenRotatorLatentFactory_BP_CreateLatentTweenRotateActorTo::EaseType' has a wrong offset!");
static_assert(offsetof(TweenRotatorLatentFactory_BP_CreateLatentTweenRotateActorTo, TweenSpace) == 0x000031, "Member 'TweenRotatorLatentFactory_BP_CreateLatentTweenRotateActorTo::TweenSpace' has a wrong offset!");
static_assert(offsetof(TweenRotatorLatentFactory_BP_CreateLatentTweenRotateActorTo, RotationMode) == 0x000032, "Member 'TweenRotatorLatentFactory_BP_CreateLatentTweenRotateActorTo::RotationMode' has a wrong offset!");
static_assert(offsetof(TweenRotatorLatentFactory_BP_CreateLatentTweenRotateActorTo, DeleteTweenOnHit) == 0x000033, "Member 'TweenRotatorLatentFactory_BP_CreateLatentTweenRotateActorTo::DeleteTweenOnHit' has a wrong offset!");
static_assert(offsetof(TweenRotatorLatentFactory_BP_CreateLatentTweenRotateActorTo, DeleteTweenOnOverlap) == 0x000034, "Member 'TweenRotatorLatentFactory_BP_CreateLatentTweenRotateActorTo::DeleteTweenOnOverlap' has a wrong offset!");
static_assert(offsetof(TweenRotatorLatentFactory_BP_CreateLatentTweenRotateActorTo, NumLoops) == 0x000038, "Member 'TweenRotatorLatentFactory_BP_CreateLatentTweenRotateActorTo::NumLoops' has a wrong offset!");
static_assert(offsetof(TweenRotatorLatentFactory_BP_CreateLatentTweenRotateActorTo, LoopType) == 0x00003C, "Member 'TweenRotatorLatentFactory_BP_CreateLatentTweenRotateActorTo::LoopType' has a wrong offset!");
static_assert(offsetof(TweenRotatorLatentFactory_BP_CreateLatentTweenRotateActorTo, Delay) == 0x000040, "Member 'TweenRotatorLatentFactory_BP_CreateLatentTweenRotateActorTo::Delay' has a wrong offset!");
static_assert(offsetof(TweenRotatorLatentFactory_BP_CreateLatentTweenRotateActorTo, TimeScale) == 0x000044, "Member 'TweenRotatorLatentFactory_BP_CreateLatentTweenRotateActorTo::TimeScale' has a wrong offset!");
static_assert(offsetof(TweenRotatorLatentFactory_BP_CreateLatentTweenRotateActorTo, TweenWhileGameIsPaused) == 0x000048, "Member 'TweenRotatorLatentFactory_BP_CreateLatentTweenRotateActorTo::TweenWhileGameIsPaused' has a wrong offset!");
static_assert(offsetof(TweenRotatorLatentFactory_BP_CreateLatentTweenRotateActorTo, ReturnValue) == 0x000050, "Member 'TweenRotatorLatentFactory_BP_CreateLatentTweenRotateActorTo::ReturnValue' has a wrong offset!");

// Function TweenMaker.TweenRotatorLatentFactory.BP_CreateLatentTweenRotateSceneComponentBy
// 0x0050 (0x0050 - 0x0000)
struct TweenRotatorLatentFactory_BP_CreateLatentTweenRotateSceneComponentBy final
{
public:
	class UTweenManagerComponent*                 TweenManager;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USceneComponent*                        TweenTarget;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, InstancedReference, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UTweenContainer*                        OutTweenContainer;                                 // 0x0010(0x0008)(Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UTweenRotator*                          OutTween;                                          // 0x0018(0x0008)(Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRotator                               bY;                                                // 0x0020(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	float                                         Duration;                                          // 0x002C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETweenEaseType                                EaseType;                                          // 0x0030(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          DeleteTweenOnHit;                                  // 0x0031(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          DeleteTweenOnOverlap;                              // 0x0032(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_33[0x1];                                       // 0x0033(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         NumLoops;                                          // 0x0034(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETweenLoopType                                LoopType;                                          // 0x0038(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_39[0x3];                                       // 0x0039(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Delay;                                             // 0x003C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TimeScale;                                         // 0x0040(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          TweenWhileGameIsPaused;                            // 0x0044(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_45[0x3];                                       // 0x0045(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UTweenRotatorLatentFactory*             ReturnValue;                                       // 0x0048(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TweenRotatorLatentFactory_BP_CreateLatentTweenRotateSceneComponentBy) == 0x000008, "Wrong alignment on TweenRotatorLatentFactory_BP_CreateLatentTweenRotateSceneComponentBy");
static_assert(sizeof(TweenRotatorLatentFactory_BP_CreateLatentTweenRotateSceneComponentBy) == 0x000050, "Wrong size on TweenRotatorLatentFactory_BP_CreateLatentTweenRotateSceneComponentBy");
static_assert(offsetof(TweenRotatorLatentFactory_BP_CreateLatentTweenRotateSceneComponentBy, TweenManager) == 0x000000, "Member 'TweenRotatorLatentFactory_BP_CreateLatentTweenRotateSceneComponentBy::TweenManager' has a wrong offset!");
static_assert(offsetof(TweenRotatorLatentFactory_BP_CreateLatentTweenRotateSceneComponentBy, TweenTarget) == 0x000008, "Member 'TweenRotatorLatentFactory_BP_CreateLatentTweenRotateSceneComponentBy::TweenTarget' has a wrong offset!");
static_assert(offsetof(TweenRotatorLatentFactory_BP_CreateLatentTweenRotateSceneComponentBy, OutTweenContainer) == 0x000010, "Member 'TweenRotatorLatentFactory_BP_CreateLatentTweenRotateSceneComponentBy::OutTweenContainer' has a wrong offset!");
static_assert(offsetof(TweenRotatorLatentFactory_BP_CreateLatentTweenRotateSceneComponentBy, OutTween) == 0x000018, "Member 'TweenRotatorLatentFactory_BP_CreateLatentTweenRotateSceneComponentBy::OutTween' has a wrong offset!");
static_assert(offsetof(TweenRotatorLatentFactory_BP_CreateLatentTweenRotateSceneComponentBy, bY) == 0x000020, "Member 'TweenRotatorLatentFactory_BP_CreateLatentTweenRotateSceneComponentBy::bY' has a wrong offset!");
static_assert(offsetof(TweenRotatorLatentFactory_BP_CreateLatentTweenRotateSceneComponentBy, Duration) == 0x00002C, "Member 'TweenRotatorLatentFactory_BP_CreateLatentTweenRotateSceneComponentBy::Duration' has a wrong offset!");
static_assert(offsetof(TweenRotatorLatentFactory_BP_CreateLatentTweenRotateSceneComponentBy, EaseType) == 0x000030, "Member 'TweenRotatorLatentFactory_BP_CreateLatentTweenRotateSceneComponentBy::EaseType' has a wrong offset!");
static_assert(offsetof(TweenRotatorLatentFactory_BP_CreateLatentTweenRotateSceneComponentBy, DeleteTweenOnHit) == 0x000031, "Member 'TweenRotatorLatentFactory_BP_CreateLatentTweenRotateSceneComponentBy::DeleteTweenOnHit' has a wrong offset!");
static_assert(offsetof(TweenRotatorLatentFactory_BP_CreateLatentTweenRotateSceneComponentBy, DeleteTweenOnOverlap) == 0x000032, "Member 'TweenRotatorLatentFactory_BP_CreateLatentTweenRotateSceneComponentBy::DeleteTweenOnOverlap' has a wrong offset!");
static_assert(offsetof(TweenRotatorLatentFactory_BP_CreateLatentTweenRotateSceneComponentBy, NumLoops) == 0x000034, "Member 'TweenRotatorLatentFactory_BP_CreateLatentTweenRotateSceneComponentBy::NumLoops' has a wrong offset!");
static_assert(offsetof(TweenRotatorLatentFactory_BP_CreateLatentTweenRotateSceneComponentBy, LoopType) == 0x000038, "Member 'TweenRotatorLatentFactory_BP_CreateLatentTweenRotateSceneComponentBy::LoopType' has a wrong offset!");
static_assert(offsetof(TweenRotatorLatentFactory_BP_CreateLatentTweenRotateSceneComponentBy, Delay) == 0x00003C, "Member 'TweenRotatorLatentFactory_BP_CreateLatentTweenRotateSceneComponentBy::Delay' has a wrong offset!");
static_assert(offsetof(TweenRotatorLatentFactory_BP_CreateLatentTweenRotateSceneComponentBy, TimeScale) == 0x000040, "Member 'TweenRotatorLatentFactory_BP_CreateLatentTweenRotateSceneComponentBy::TimeScale' has a wrong offset!");
static_assert(offsetof(TweenRotatorLatentFactory_BP_CreateLatentTweenRotateSceneComponentBy, TweenWhileGameIsPaused) == 0x000044, "Member 'TweenRotatorLatentFactory_BP_CreateLatentTweenRotateSceneComponentBy::TweenWhileGameIsPaused' has a wrong offset!");
static_assert(offsetof(TweenRotatorLatentFactory_BP_CreateLatentTweenRotateSceneComponentBy, ReturnValue) == 0x000048, "Member 'TweenRotatorLatentFactory_BP_CreateLatentTweenRotateSceneComponentBy::ReturnValue' has a wrong offset!");

// Function TweenMaker.TweenRotatorLatentFactory.BP_CreateLatentTweenRotateSceneComponentTo
// 0x0058 (0x0058 - 0x0000)
struct TweenRotatorLatentFactory_BP_CreateLatentTweenRotateSceneComponentTo final
{
public:
	class UTweenManagerComponent*                 TweenManager;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USceneComponent*                        TweenTarget;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, InstancedReference, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UTweenContainer*                        OutTweenContainer;                                 // 0x0010(0x0008)(Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UTweenRotator*                          OutTween;                                          // 0x0018(0x0008)(Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRotator                               To;                                                // 0x0020(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	float                                         Duration;                                          // 0x002C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETweenEaseType                                EaseType;                                          // 0x0030(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETweenSpace                                   TweenSpace;                                        // 0x0031(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETweenRotationMode                            RotationMode;                                      // 0x0032(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          DeleteTweenOnHit;                                  // 0x0033(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          DeleteTweenOnOverlap;                              // 0x0034(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_35[0x3];                                       // 0x0035(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         NumLoops;                                          // 0x0038(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETweenLoopType                                LoopType;                                          // 0x003C(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_3D[0x3];                                       // 0x003D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Delay;                                             // 0x0040(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TimeScale;                                         // 0x0044(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          TweenWhileGameIsPaused;                            // 0x0048(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_49[0x7];                                       // 0x0049(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UTweenRotatorLatentFactory*             ReturnValue;                                       // 0x0050(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TweenRotatorLatentFactory_BP_CreateLatentTweenRotateSceneComponentTo) == 0x000008, "Wrong alignment on TweenRotatorLatentFactory_BP_CreateLatentTweenRotateSceneComponentTo");
static_assert(sizeof(TweenRotatorLatentFactory_BP_CreateLatentTweenRotateSceneComponentTo) == 0x000058, "Wrong size on TweenRotatorLatentFactory_BP_CreateLatentTweenRotateSceneComponentTo");
static_assert(offsetof(TweenRotatorLatentFactory_BP_CreateLatentTweenRotateSceneComponentTo, TweenManager) == 0x000000, "Member 'TweenRotatorLatentFactory_BP_CreateLatentTweenRotateSceneComponentTo::TweenManager' has a wrong offset!");
static_assert(offsetof(TweenRotatorLatentFactory_BP_CreateLatentTweenRotateSceneComponentTo, TweenTarget) == 0x000008, "Member 'TweenRotatorLatentFactory_BP_CreateLatentTweenRotateSceneComponentTo::TweenTarget' has a wrong offset!");
static_assert(offsetof(TweenRotatorLatentFactory_BP_CreateLatentTweenRotateSceneComponentTo, OutTweenContainer) == 0x000010, "Member 'TweenRotatorLatentFactory_BP_CreateLatentTweenRotateSceneComponentTo::OutTweenContainer' has a wrong offset!");
static_assert(offsetof(TweenRotatorLatentFactory_BP_CreateLatentTweenRotateSceneComponentTo, OutTween) == 0x000018, "Member 'TweenRotatorLatentFactory_BP_CreateLatentTweenRotateSceneComponentTo::OutTween' has a wrong offset!");
static_assert(offsetof(TweenRotatorLatentFactory_BP_CreateLatentTweenRotateSceneComponentTo, To) == 0x000020, "Member 'TweenRotatorLatentFactory_BP_CreateLatentTweenRotateSceneComponentTo::To' has a wrong offset!");
static_assert(offsetof(TweenRotatorLatentFactory_BP_CreateLatentTweenRotateSceneComponentTo, Duration) == 0x00002C, "Member 'TweenRotatorLatentFactory_BP_CreateLatentTweenRotateSceneComponentTo::Duration' has a wrong offset!");
static_assert(offsetof(TweenRotatorLatentFactory_BP_CreateLatentTweenRotateSceneComponentTo, EaseType) == 0x000030, "Member 'TweenRotatorLatentFactory_BP_CreateLatentTweenRotateSceneComponentTo::EaseType' has a wrong offset!");
static_assert(offsetof(TweenRotatorLatentFactory_BP_CreateLatentTweenRotateSceneComponentTo, TweenSpace) == 0x000031, "Member 'TweenRotatorLatentFactory_BP_CreateLatentTweenRotateSceneComponentTo::TweenSpace' has a wrong offset!");
static_assert(offsetof(TweenRotatorLatentFactory_BP_CreateLatentTweenRotateSceneComponentTo, RotationMode) == 0x000032, "Member 'TweenRotatorLatentFactory_BP_CreateLatentTweenRotateSceneComponentTo::RotationMode' has a wrong offset!");
static_assert(offsetof(TweenRotatorLatentFactory_BP_CreateLatentTweenRotateSceneComponentTo, DeleteTweenOnHit) == 0x000033, "Member 'TweenRotatorLatentFactory_BP_CreateLatentTweenRotateSceneComponentTo::DeleteTweenOnHit' has a wrong offset!");
static_assert(offsetof(TweenRotatorLatentFactory_BP_CreateLatentTweenRotateSceneComponentTo, DeleteTweenOnOverlap) == 0x000034, "Member 'TweenRotatorLatentFactory_BP_CreateLatentTweenRotateSceneComponentTo::DeleteTweenOnOverlap' has a wrong offset!");
static_assert(offsetof(TweenRotatorLatentFactory_BP_CreateLatentTweenRotateSceneComponentTo, NumLoops) == 0x000038, "Member 'TweenRotatorLatentFactory_BP_CreateLatentTweenRotateSceneComponentTo::NumLoops' has a wrong offset!");
static_assert(offsetof(TweenRotatorLatentFactory_BP_CreateLatentTweenRotateSceneComponentTo, LoopType) == 0x00003C, "Member 'TweenRotatorLatentFactory_BP_CreateLatentTweenRotateSceneComponentTo::LoopType' has a wrong offset!");
static_assert(offsetof(TweenRotatorLatentFactory_BP_CreateLatentTweenRotateSceneComponentTo, Delay) == 0x000040, "Member 'TweenRotatorLatentFactory_BP_CreateLatentTweenRotateSceneComponentTo::Delay' has a wrong offset!");
static_assert(offsetof(TweenRotatorLatentFactory_BP_CreateLatentTweenRotateSceneComponentTo, TimeScale) == 0x000044, "Member 'TweenRotatorLatentFactory_BP_CreateLatentTweenRotateSceneComponentTo::TimeScale' has a wrong offset!");
static_assert(offsetof(TweenRotatorLatentFactory_BP_CreateLatentTweenRotateSceneComponentTo, TweenWhileGameIsPaused) == 0x000048, "Member 'TweenRotatorLatentFactory_BP_CreateLatentTweenRotateSceneComponentTo::TweenWhileGameIsPaused' has a wrong offset!");
static_assert(offsetof(TweenRotatorLatentFactory_BP_CreateLatentTweenRotateSceneComponentTo, ReturnValue) == 0x000050, "Member 'TweenRotatorLatentFactory_BP_CreateLatentTweenRotateSceneComponentTo::ReturnValue' has a wrong offset!");

// Function TweenMaker.TweenRotatorLatentFactory.BP_JoinLatentTweenRotateActorBy
// 0x0040 (0x0040 - 0x0000)
struct TweenRotatorLatentFactory_BP_JoinLatentTweenRotateActorBy final
{
public:
	class UTweenContainer*                        TweenContainer;                                    // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UTweenRotator*                          OutTween;                                          // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 TweenTarget;                                       // 0x0010(0x0008)(Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRotator                               bY;                                                // 0x0018(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	float                                         Duration;                                          // 0x0024(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETweenEaseType                                EaseType;                                          // 0x0028(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          DeleteTweenOnHit;                                  // 0x0029(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          DeleteTweenOnOverlap;                              // 0x002A(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2B[0x1];                                       // 0x002B(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Delay;                                             // 0x002C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TimeScale;                                         // 0x0030(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          TweenWhileGameIsPaused;                            // 0x0034(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_35[0x3];                                       // 0x0035(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UTweenRotatorLatentFactory*             ReturnValue;                                       // 0x0038(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TweenRotatorLatentFactory_BP_JoinLatentTweenRotateActorBy) == 0x000008, "Wrong alignment on TweenRotatorLatentFactory_BP_JoinLatentTweenRotateActorBy");
static_assert(sizeof(TweenRotatorLatentFactory_BP_JoinLatentTweenRotateActorBy) == 0x000040, "Wrong size on TweenRotatorLatentFactory_BP_JoinLatentTweenRotateActorBy");
static_assert(offsetof(TweenRotatorLatentFactory_BP_JoinLatentTweenRotateActorBy, TweenContainer) == 0x000000, "Member 'TweenRotatorLatentFactory_BP_JoinLatentTweenRotateActorBy::TweenContainer' has a wrong offset!");
static_assert(offsetof(TweenRotatorLatentFactory_BP_JoinLatentTweenRotateActorBy, OutTween) == 0x000008, "Member 'TweenRotatorLatentFactory_BP_JoinLatentTweenRotateActorBy::OutTween' has a wrong offset!");
static_assert(offsetof(TweenRotatorLatentFactory_BP_JoinLatentTweenRotateActorBy, TweenTarget) == 0x000010, "Member 'TweenRotatorLatentFactory_BP_JoinLatentTweenRotateActorBy::TweenTarget' has a wrong offset!");
static_assert(offsetof(TweenRotatorLatentFactory_BP_JoinLatentTweenRotateActorBy, bY) == 0x000018, "Member 'TweenRotatorLatentFactory_BP_JoinLatentTweenRotateActorBy::bY' has a wrong offset!");
static_assert(offsetof(TweenRotatorLatentFactory_BP_JoinLatentTweenRotateActorBy, Duration) == 0x000024, "Member 'TweenRotatorLatentFactory_BP_JoinLatentTweenRotateActorBy::Duration' has a wrong offset!");
static_assert(offsetof(TweenRotatorLatentFactory_BP_JoinLatentTweenRotateActorBy, EaseType) == 0x000028, "Member 'TweenRotatorLatentFactory_BP_JoinLatentTweenRotateActorBy::EaseType' has a wrong offset!");
static_assert(offsetof(TweenRotatorLatentFactory_BP_JoinLatentTweenRotateActorBy, DeleteTweenOnHit) == 0x000029, "Member 'TweenRotatorLatentFactory_BP_JoinLatentTweenRotateActorBy::DeleteTweenOnHit' has a wrong offset!");
static_assert(offsetof(TweenRotatorLatentFactory_BP_JoinLatentTweenRotateActorBy, DeleteTweenOnOverlap) == 0x00002A, "Member 'TweenRotatorLatentFactory_BP_JoinLatentTweenRotateActorBy::DeleteTweenOnOverlap' has a wrong offset!");
static_assert(offsetof(TweenRotatorLatentFactory_BP_JoinLatentTweenRotateActorBy, Delay) == 0x00002C, "Member 'TweenRotatorLatentFactory_BP_JoinLatentTweenRotateActorBy::Delay' has a wrong offset!");
static_assert(offsetof(TweenRotatorLatentFactory_BP_JoinLatentTweenRotateActorBy, TimeScale) == 0x000030, "Member 'TweenRotatorLatentFactory_BP_JoinLatentTweenRotateActorBy::TimeScale' has a wrong offset!");
static_assert(offsetof(TweenRotatorLatentFactory_BP_JoinLatentTweenRotateActorBy, TweenWhileGameIsPaused) == 0x000034, "Member 'TweenRotatorLatentFactory_BP_JoinLatentTweenRotateActorBy::TweenWhileGameIsPaused' has a wrong offset!");
static_assert(offsetof(TweenRotatorLatentFactory_BP_JoinLatentTweenRotateActorBy, ReturnValue) == 0x000038, "Member 'TweenRotatorLatentFactory_BP_JoinLatentTweenRotateActorBy::ReturnValue' has a wrong offset!");

// Function TweenMaker.TweenRotatorLatentFactory.BP_JoinLatentTweenRotateActorTo
// 0x0048 (0x0048 - 0x0000)
struct TweenRotatorLatentFactory_BP_JoinLatentTweenRotateActorTo final
{
public:
	class UTweenContainer*                        TweenContainer;                                    // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UTweenRotator*                          OutTween;                                          // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 TweenTarget;                                       // 0x0010(0x0008)(Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRotator                               To;                                                // 0x0018(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	float                                         Duration;                                          // 0x0024(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETweenEaseType                                EaseType;                                          // 0x0028(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETweenSpace                                   TweenSpace;                                        // 0x0029(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETweenRotationMode                            RotationMode;                                      // 0x002A(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          DeleteTweenOnHit;                                  // 0x002B(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          DeleteTweenOnOverlap;                              // 0x002C(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2D[0x3];                                       // 0x002D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Delay;                                             // 0x0030(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TimeScale;                                         // 0x0034(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          TweenWhileGameIsPaused;                            // 0x0038(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_39[0x7];                                       // 0x0039(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UTweenRotatorLatentFactory*             ReturnValue;                                       // 0x0040(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TweenRotatorLatentFactory_BP_JoinLatentTweenRotateActorTo) == 0x000008, "Wrong alignment on TweenRotatorLatentFactory_BP_JoinLatentTweenRotateActorTo");
static_assert(sizeof(TweenRotatorLatentFactory_BP_JoinLatentTweenRotateActorTo) == 0x000048, "Wrong size on TweenRotatorLatentFactory_BP_JoinLatentTweenRotateActorTo");
static_assert(offsetof(TweenRotatorLatentFactory_BP_JoinLatentTweenRotateActorTo, TweenContainer) == 0x000000, "Member 'TweenRotatorLatentFactory_BP_JoinLatentTweenRotateActorTo::TweenContainer' has a wrong offset!");
static_assert(offsetof(TweenRotatorLatentFactory_BP_JoinLatentTweenRotateActorTo, OutTween) == 0x000008, "Member 'TweenRotatorLatentFactory_BP_JoinLatentTweenRotateActorTo::OutTween' has a wrong offset!");
static_assert(offsetof(TweenRotatorLatentFactory_BP_JoinLatentTweenRotateActorTo, TweenTarget) == 0x000010, "Member 'TweenRotatorLatentFactory_BP_JoinLatentTweenRotateActorTo::TweenTarget' has a wrong offset!");
static_assert(offsetof(TweenRotatorLatentFactory_BP_JoinLatentTweenRotateActorTo, To) == 0x000018, "Member 'TweenRotatorLatentFactory_BP_JoinLatentTweenRotateActorTo::To' has a wrong offset!");
static_assert(offsetof(TweenRotatorLatentFactory_BP_JoinLatentTweenRotateActorTo, Duration) == 0x000024, "Member 'TweenRotatorLatentFactory_BP_JoinLatentTweenRotateActorTo::Duration' has a wrong offset!");
static_assert(offsetof(TweenRotatorLatentFactory_BP_JoinLatentTweenRotateActorTo, EaseType) == 0x000028, "Member 'TweenRotatorLatentFactory_BP_JoinLatentTweenRotateActorTo::EaseType' has a wrong offset!");
static_assert(offsetof(TweenRotatorLatentFactory_BP_JoinLatentTweenRotateActorTo, TweenSpace) == 0x000029, "Member 'TweenRotatorLatentFactory_BP_JoinLatentTweenRotateActorTo::TweenSpace' has a wrong offset!");
static_assert(offsetof(TweenRotatorLatentFactory_BP_JoinLatentTweenRotateActorTo, RotationMode) == 0x00002A, "Member 'TweenRotatorLatentFactory_BP_JoinLatentTweenRotateActorTo::RotationMode' has a wrong offset!");
static_assert(offsetof(TweenRotatorLatentFactory_BP_JoinLatentTweenRotateActorTo, DeleteTweenOnHit) == 0x00002B, "Member 'TweenRotatorLatentFactory_BP_JoinLatentTweenRotateActorTo::DeleteTweenOnHit' has a wrong offset!");
static_assert(offsetof(TweenRotatorLatentFactory_BP_JoinLatentTweenRotateActorTo, DeleteTweenOnOverlap) == 0x00002C, "Member 'TweenRotatorLatentFactory_BP_JoinLatentTweenRotateActorTo::DeleteTweenOnOverlap' has a wrong offset!");
static_assert(offsetof(TweenRotatorLatentFactory_BP_JoinLatentTweenRotateActorTo, Delay) == 0x000030, "Member 'TweenRotatorLatentFactory_BP_JoinLatentTweenRotateActorTo::Delay' has a wrong offset!");
static_assert(offsetof(TweenRotatorLatentFactory_BP_JoinLatentTweenRotateActorTo, TimeScale) == 0x000034, "Member 'TweenRotatorLatentFactory_BP_JoinLatentTweenRotateActorTo::TimeScale' has a wrong offset!");
static_assert(offsetof(TweenRotatorLatentFactory_BP_JoinLatentTweenRotateActorTo, TweenWhileGameIsPaused) == 0x000038, "Member 'TweenRotatorLatentFactory_BP_JoinLatentTweenRotateActorTo::TweenWhileGameIsPaused' has a wrong offset!");
static_assert(offsetof(TweenRotatorLatentFactory_BP_JoinLatentTweenRotateActorTo, ReturnValue) == 0x000040, "Member 'TweenRotatorLatentFactory_BP_JoinLatentTweenRotateActorTo::ReturnValue' has a wrong offset!");

// Function TweenMaker.TweenRotatorLatentFactory.BP_JoinLatentTweenRotateSceneComponentBy
// 0x0040 (0x0040 - 0x0000)
struct TweenRotatorLatentFactory_BP_JoinLatentTweenRotateSceneComponentBy final
{
public:
	class UTweenContainer*                        TweenContainer;                                    // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UTweenRotator*                          OutTween;                                          // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USceneComponent*                        TweenTarget;                                       // 0x0010(0x0008)(Parm, OutParm, ZeroConstructor, InstancedReference, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRotator                               bY;                                                // 0x0018(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	float                                         Duration;                                          // 0x0024(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETweenEaseType                                EaseType;                                          // 0x0028(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          DeleteTweenOnHit;                                  // 0x0029(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          DeleteTweenOnOverlap;                              // 0x002A(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2B[0x1];                                       // 0x002B(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Delay;                                             // 0x002C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TimeScale;                                         // 0x0030(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          TweenWhileGameIsPaused;                            // 0x0034(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_35[0x3];                                       // 0x0035(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UTweenRotatorLatentFactory*             ReturnValue;                                       // 0x0038(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TweenRotatorLatentFactory_BP_JoinLatentTweenRotateSceneComponentBy) == 0x000008, "Wrong alignment on TweenRotatorLatentFactory_BP_JoinLatentTweenRotateSceneComponentBy");
static_assert(sizeof(TweenRotatorLatentFactory_BP_JoinLatentTweenRotateSceneComponentBy) == 0x000040, "Wrong size on TweenRotatorLatentFactory_BP_JoinLatentTweenRotateSceneComponentBy");
static_assert(offsetof(TweenRotatorLatentFactory_BP_JoinLatentTweenRotateSceneComponentBy, TweenContainer) == 0x000000, "Member 'TweenRotatorLatentFactory_BP_JoinLatentTweenRotateSceneComponentBy::TweenContainer' has a wrong offset!");
static_assert(offsetof(TweenRotatorLatentFactory_BP_JoinLatentTweenRotateSceneComponentBy, OutTween) == 0x000008, "Member 'TweenRotatorLatentFactory_BP_JoinLatentTweenRotateSceneComponentBy::OutTween' has a wrong offset!");
static_assert(offsetof(TweenRotatorLatentFactory_BP_JoinLatentTweenRotateSceneComponentBy, TweenTarget) == 0x000010, "Member 'TweenRotatorLatentFactory_BP_JoinLatentTweenRotateSceneComponentBy::TweenTarget' has a wrong offset!");
static_assert(offsetof(TweenRotatorLatentFactory_BP_JoinLatentTweenRotateSceneComponentBy, bY) == 0x000018, "Member 'TweenRotatorLatentFactory_BP_JoinLatentTweenRotateSceneComponentBy::bY' has a wrong offset!");
static_assert(offsetof(TweenRotatorLatentFactory_BP_JoinLatentTweenRotateSceneComponentBy, Duration) == 0x000024, "Member 'TweenRotatorLatentFactory_BP_JoinLatentTweenRotateSceneComponentBy::Duration' has a wrong offset!");
static_assert(offsetof(TweenRotatorLatentFactory_BP_JoinLatentTweenRotateSceneComponentBy, EaseType) == 0x000028, "Member 'TweenRotatorLatentFactory_BP_JoinLatentTweenRotateSceneComponentBy::EaseType' has a wrong offset!");
static_assert(offsetof(TweenRotatorLatentFactory_BP_JoinLatentTweenRotateSceneComponentBy, DeleteTweenOnHit) == 0x000029, "Member 'TweenRotatorLatentFactory_BP_JoinLatentTweenRotateSceneComponentBy::DeleteTweenOnHit' has a wrong offset!");
static_assert(offsetof(TweenRotatorLatentFactory_BP_JoinLatentTweenRotateSceneComponentBy, DeleteTweenOnOverlap) == 0x00002A, "Member 'TweenRotatorLatentFactory_BP_JoinLatentTweenRotateSceneComponentBy::DeleteTweenOnOverlap' has a wrong offset!");
static_assert(offsetof(TweenRotatorLatentFactory_BP_JoinLatentTweenRotateSceneComponentBy, Delay) == 0x00002C, "Member 'TweenRotatorLatentFactory_BP_JoinLatentTweenRotateSceneComponentBy::Delay' has a wrong offset!");
static_assert(offsetof(TweenRotatorLatentFactory_BP_JoinLatentTweenRotateSceneComponentBy, TimeScale) == 0x000030, "Member 'TweenRotatorLatentFactory_BP_JoinLatentTweenRotateSceneComponentBy::TimeScale' has a wrong offset!");
static_assert(offsetof(TweenRotatorLatentFactory_BP_JoinLatentTweenRotateSceneComponentBy, TweenWhileGameIsPaused) == 0x000034, "Member 'TweenRotatorLatentFactory_BP_JoinLatentTweenRotateSceneComponentBy::TweenWhileGameIsPaused' has a wrong offset!");
static_assert(offsetof(TweenRotatorLatentFactory_BP_JoinLatentTweenRotateSceneComponentBy, ReturnValue) == 0x000038, "Member 'TweenRotatorLatentFactory_BP_JoinLatentTweenRotateSceneComponentBy::ReturnValue' has a wrong offset!");

// Function TweenMaker.TweenRotatorLatentFactory.BP_JoinLatentTweenRotateSceneComponentTo
// 0x0048 (0x0048 - 0x0000)
struct TweenRotatorLatentFactory_BP_JoinLatentTweenRotateSceneComponentTo final
{
public:
	class UTweenContainer*                        TweenContainer;                                    // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UTweenRotator*                          OutTween;                                          // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USceneComponent*                        TweenTarget;                                       // 0x0010(0x0008)(Parm, OutParm, ZeroConstructor, InstancedReference, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRotator                               To;                                                // 0x0018(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	float                                         Duration;                                          // 0x0024(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETweenEaseType                                EaseType;                                          // 0x0028(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETweenSpace                                   TweenSpace;                                        // 0x0029(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETweenRotationMode                            RotationMode;                                      // 0x002A(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          DeleteTweenOnHit;                                  // 0x002B(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          DeleteTweenOnOverlap;                              // 0x002C(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2D[0x3];                                       // 0x002D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Delay;                                             // 0x0030(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TimeScale;                                         // 0x0034(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          TweenWhileGameIsPaused;                            // 0x0038(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_39[0x7];                                       // 0x0039(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UTweenRotatorLatentFactory*             ReturnValue;                                       // 0x0040(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TweenRotatorLatentFactory_BP_JoinLatentTweenRotateSceneComponentTo) == 0x000008, "Wrong alignment on TweenRotatorLatentFactory_BP_JoinLatentTweenRotateSceneComponentTo");
static_assert(sizeof(TweenRotatorLatentFactory_BP_JoinLatentTweenRotateSceneComponentTo) == 0x000048, "Wrong size on TweenRotatorLatentFactory_BP_JoinLatentTweenRotateSceneComponentTo");
static_assert(offsetof(TweenRotatorLatentFactory_BP_JoinLatentTweenRotateSceneComponentTo, TweenContainer) == 0x000000, "Member 'TweenRotatorLatentFactory_BP_JoinLatentTweenRotateSceneComponentTo::TweenContainer' has a wrong offset!");
static_assert(offsetof(TweenRotatorLatentFactory_BP_JoinLatentTweenRotateSceneComponentTo, OutTween) == 0x000008, "Member 'TweenRotatorLatentFactory_BP_JoinLatentTweenRotateSceneComponentTo::OutTween' has a wrong offset!");
static_assert(offsetof(TweenRotatorLatentFactory_BP_JoinLatentTweenRotateSceneComponentTo, TweenTarget) == 0x000010, "Member 'TweenRotatorLatentFactory_BP_JoinLatentTweenRotateSceneComponentTo::TweenTarget' has a wrong offset!");
static_assert(offsetof(TweenRotatorLatentFactory_BP_JoinLatentTweenRotateSceneComponentTo, To) == 0x000018, "Member 'TweenRotatorLatentFactory_BP_JoinLatentTweenRotateSceneComponentTo::To' has a wrong offset!");
static_assert(offsetof(TweenRotatorLatentFactory_BP_JoinLatentTweenRotateSceneComponentTo, Duration) == 0x000024, "Member 'TweenRotatorLatentFactory_BP_JoinLatentTweenRotateSceneComponentTo::Duration' has a wrong offset!");
static_assert(offsetof(TweenRotatorLatentFactory_BP_JoinLatentTweenRotateSceneComponentTo, EaseType) == 0x000028, "Member 'TweenRotatorLatentFactory_BP_JoinLatentTweenRotateSceneComponentTo::EaseType' has a wrong offset!");
static_assert(offsetof(TweenRotatorLatentFactory_BP_JoinLatentTweenRotateSceneComponentTo, TweenSpace) == 0x000029, "Member 'TweenRotatorLatentFactory_BP_JoinLatentTweenRotateSceneComponentTo::TweenSpace' has a wrong offset!");
static_assert(offsetof(TweenRotatorLatentFactory_BP_JoinLatentTweenRotateSceneComponentTo, RotationMode) == 0x00002A, "Member 'TweenRotatorLatentFactory_BP_JoinLatentTweenRotateSceneComponentTo::RotationMode' has a wrong offset!");
static_assert(offsetof(TweenRotatorLatentFactory_BP_JoinLatentTweenRotateSceneComponentTo, DeleteTweenOnHit) == 0x00002B, "Member 'TweenRotatorLatentFactory_BP_JoinLatentTweenRotateSceneComponentTo::DeleteTweenOnHit' has a wrong offset!");
static_assert(offsetof(TweenRotatorLatentFactory_BP_JoinLatentTweenRotateSceneComponentTo, DeleteTweenOnOverlap) == 0x00002C, "Member 'TweenRotatorLatentFactory_BP_JoinLatentTweenRotateSceneComponentTo::DeleteTweenOnOverlap' has a wrong offset!");
static_assert(offsetof(TweenRotatorLatentFactory_BP_JoinLatentTweenRotateSceneComponentTo, Delay) == 0x000030, "Member 'TweenRotatorLatentFactory_BP_JoinLatentTweenRotateSceneComponentTo::Delay' has a wrong offset!");
static_assert(offsetof(TweenRotatorLatentFactory_BP_JoinLatentTweenRotateSceneComponentTo, TimeScale) == 0x000034, "Member 'TweenRotatorLatentFactory_BP_JoinLatentTweenRotateSceneComponentTo::TimeScale' has a wrong offset!");
static_assert(offsetof(TweenRotatorLatentFactory_BP_JoinLatentTweenRotateSceneComponentTo, TweenWhileGameIsPaused) == 0x000038, "Member 'TweenRotatorLatentFactory_BP_JoinLatentTweenRotateSceneComponentTo::TweenWhileGameIsPaused' has a wrong offset!");
static_assert(offsetof(TweenRotatorLatentFactory_BP_JoinLatentTweenRotateSceneComponentTo, ReturnValue) == 0x000040, "Member 'TweenRotatorLatentFactory_BP_JoinLatentTweenRotateSceneComponentTo::ReturnValue' has a wrong offset!");

// Function TweenMaker.TweenRotatorStandardFactory.BP_AppendTweenRotateActorBy
// 0x0048 (0x0048 - 0x0000)
struct TweenRotatorStandardFactory_BP_AppendTweenRotateActorBy final
{
public:
	class UTweenContainer*                        TweenContainer;                                    // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 TweenTarget;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRotator                               bY;                                                // 0x0010(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	float                                         Duration;                                          // 0x001C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETweenEaseType                                EaseType;                                          // 0x0020(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          DeleteTweenOnHit;                                  // 0x0021(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          DeleteTweenOnOverlap;                              // 0x0022(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_23[0x1];                                       // 0x0023(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         NumLoops;                                          // 0x0024(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETweenLoopType                                LoopType;                                          // 0x0028(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_29[0x3];                                       // 0x0029(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Delay;                                             // 0x002C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TimeScale;                                         // 0x0030(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          TweenWhileGameIsPaused;                            // 0x0034(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_35[0x3];                                       // 0x0035(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         SequenceIndex;                                     // 0x0038(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_3C[0x4];                                       // 0x003C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UTweenRotator*                          ReturnValue;                                       // 0x0040(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TweenRotatorStandardFactory_BP_AppendTweenRotateActorBy) == 0x000008, "Wrong alignment on TweenRotatorStandardFactory_BP_AppendTweenRotateActorBy");
static_assert(sizeof(TweenRotatorStandardFactory_BP_AppendTweenRotateActorBy) == 0x000048, "Wrong size on TweenRotatorStandardFactory_BP_AppendTweenRotateActorBy");
static_assert(offsetof(TweenRotatorStandardFactory_BP_AppendTweenRotateActorBy, TweenContainer) == 0x000000, "Member 'TweenRotatorStandardFactory_BP_AppendTweenRotateActorBy::TweenContainer' has a wrong offset!");
static_assert(offsetof(TweenRotatorStandardFactory_BP_AppendTweenRotateActorBy, TweenTarget) == 0x000008, "Member 'TweenRotatorStandardFactory_BP_AppendTweenRotateActorBy::TweenTarget' has a wrong offset!");
static_assert(offsetof(TweenRotatorStandardFactory_BP_AppendTweenRotateActorBy, bY) == 0x000010, "Member 'TweenRotatorStandardFactory_BP_AppendTweenRotateActorBy::bY' has a wrong offset!");
static_assert(offsetof(TweenRotatorStandardFactory_BP_AppendTweenRotateActorBy, Duration) == 0x00001C, "Member 'TweenRotatorStandardFactory_BP_AppendTweenRotateActorBy::Duration' has a wrong offset!");
static_assert(offsetof(TweenRotatorStandardFactory_BP_AppendTweenRotateActorBy, EaseType) == 0x000020, "Member 'TweenRotatorStandardFactory_BP_AppendTweenRotateActorBy::EaseType' has a wrong offset!");
static_assert(offsetof(TweenRotatorStandardFactory_BP_AppendTweenRotateActorBy, DeleteTweenOnHit) == 0x000021, "Member 'TweenRotatorStandardFactory_BP_AppendTweenRotateActorBy::DeleteTweenOnHit' has a wrong offset!");
static_assert(offsetof(TweenRotatorStandardFactory_BP_AppendTweenRotateActorBy, DeleteTweenOnOverlap) == 0x000022, "Member 'TweenRotatorStandardFactory_BP_AppendTweenRotateActorBy::DeleteTweenOnOverlap' has a wrong offset!");
static_assert(offsetof(TweenRotatorStandardFactory_BP_AppendTweenRotateActorBy, NumLoops) == 0x000024, "Member 'TweenRotatorStandardFactory_BP_AppendTweenRotateActorBy::NumLoops' has a wrong offset!");
static_assert(offsetof(TweenRotatorStandardFactory_BP_AppendTweenRotateActorBy, LoopType) == 0x000028, "Member 'TweenRotatorStandardFactory_BP_AppendTweenRotateActorBy::LoopType' has a wrong offset!");
static_assert(offsetof(TweenRotatorStandardFactory_BP_AppendTweenRotateActorBy, Delay) == 0x00002C, "Member 'TweenRotatorStandardFactory_BP_AppendTweenRotateActorBy::Delay' has a wrong offset!");
static_assert(offsetof(TweenRotatorStandardFactory_BP_AppendTweenRotateActorBy, TimeScale) == 0x000030, "Member 'TweenRotatorStandardFactory_BP_AppendTweenRotateActorBy::TimeScale' has a wrong offset!");
static_assert(offsetof(TweenRotatorStandardFactory_BP_AppendTweenRotateActorBy, TweenWhileGameIsPaused) == 0x000034, "Member 'TweenRotatorStandardFactory_BP_AppendTweenRotateActorBy::TweenWhileGameIsPaused' has a wrong offset!");
static_assert(offsetof(TweenRotatorStandardFactory_BP_AppendTweenRotateActorBy, SequenceIndex) == 0x000038, "Member 'TweenRotatorStandardFactory_BP_AppendTweenRotateActorBy::SequenceIndex' has a wrong offset!");
static_assert(offsetof(TweenRotatorStandardFactory_BP_AppendTweenRotateActorBy, ReturnValue) == 0x000040, "Member 'TweenRotatorStandardFactory_BP_AppendTweenRotateActorBy::ReturnValue' has a wrong offset!");

// Function TweenMaker.TweenRotatorStandardFactory.BP_AppendTweenRotateActorTo
// 0x0048 (0x0048 - 0x0000)
struct TweenRotatorStandardFactory_BP_AppendTweenRotateActorTo final
{
public:
	class UTweenContainer*                        TweenContainer;                                    // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 TweenTarget;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRotator                               To;                                                // 0x0010(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	float                                         Duration;                                          // 0x001C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETweenEaseType                                EaseType;                                          // 0x0020(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETweenSpace                                   TweenSpace;                                        // 0x0021(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETweenRotationMode                            RotationMode;                                      // 0x0022(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          DeleteTweenOnHit;                                  // 0x0023(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          DeleteTweenOnOverlap;                              // 0x0024(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_25[0x3];                                       // 0x0025(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         NumLoops;                                          // 0x0028(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETweenLoopType                                LoopType;                                          // 0x002C(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2D[0x3];                                       // 0x002D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Delay;                                             // 0x0030(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TimeScale;                                         // 0x0034(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          TweenWhileGameIsPaused;                            // 0x0038(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_39[0x3];                                       // 0x0039(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         SequenceIndex;                                     // 0x003C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UTweenRotator*                          ReturnValue;                                       // 0x0040(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TweenRotatorStandardFactory_BP_AppendTweenRotateActorTo) == 0x000008, "Wrong alignment on TweenRotatorStandardFactory_BP_AppendTweenRotateActorTo");
static_assert(sizeof(TweenRotatorStandardFactory_BP_AppendTweenRotateActorTo) == 0x000048, "Wrong size on TweenRotatorStandardFactory_BP_AppendTweenRotateActorTo");
static_assert(offsetof(TweenRotatorStandardFactory_BP_AppendTweenRotateActorTo, TweenContainer) == 0x000000, "Member 'TweenRotatorStandardFactory_BP_AppendTweenRotateActorTo::TweenContainer' has a wrong offset!");
static_assert(offsetof(TweenRotatorStandardFactory_BP_AppendTweenRotateActorTo, TweenTarget) == 0x000008, "Member 'TweenRotatorStandardFactory_BP_AppendTweenRotateActorTo::TweenTarget' has a wrong offset!");
static_assert(offsetof(TweenRotatorStandardFactory_BP_AppendTweenRotateActorTo, To) == 0x000010, "Member 'TweenRotatorStandardFactory_BP_AppendTweenRotateActorTo::To' has a wrong offset!");
static_assert(offsetof(TweenRotatorStandardFactory_BP_AppendTweenRotateActorTo, Duration) == 0x00001C, "Member 'TweenRotatorStandardFactory_BP_AppendTweenRotateActorTo::Duration' has a wrong offset!");
static_assert(offsetof(TweenRotatorStandardFactory_BP_AppendTweenRotateActorTo, EaseType) == 0x000020, "Member 'TweenRotatorStandardFactory_BP_AppendTweenRotateActorTo::EaseType' has a wrong offset!");
static_assert(offsetof(TweenRotatorStandardFactory_BP_AppendTweenRotateActorTo, TweenSpace) == 0x000021, "Member 'TweenRotatorStandardFactory_BP_AppendTweenRotateActorTo::TweenSpace' has a wrong offset!");
static_assert(offsetof(TweenRotatorStandardFactory_BP_AppendTweenRotateActorTo, RotationMode) == 0x000022, "Member 'TweenRotatorStandardFactory_BP_AppendTweenRotateActorTo::RotationMode' has a wrong offset!");
static_assert(offsetof(TweenRotatorStandardFactory_BP_AppendTweenRotateActorTo, DeleteTweenOnHit) == 0x000023, "Member 'TweenRotatorStandardFactory_BP_AppendTweenRotateActorTo::DeleteTweenOnHit' has a wrong offset!");
static_assert(offsetof(TweenRotatorStandardFactory_BP_AppendTweenRotateActorTo, DeleteTweenOnOverlap) == 0x000024, "Member 'TweenRotatorStandardFactory_BP_AppendTweenRotateActorTo::DeleteTweenOnOverlap' has a wrong offset!");
static_assert(offsetof(TweenRotatorStandardFactory_BP_AppendTweenRotateActorTo, NumLoops) == 0x000028, "Member 'TweenRotatorStandardFactory_BP_AppendTweenRotateActorTo::NumLoops' has a wrong offset!");
static_assert(offsetof(TweenRotatorStandardFactory_BP_AppendTweenRotateActorTo, LoopType) == 0x00002C, "Member 'TweenRotatorStandardFactory_BP_AppendTweenRotateActorTo::LoopType' has a wrong offset!");
static_assert(offsetof(TweenRotatorStandardFactory_BP_AppendTweenRotateActorTo, Delay) == 0x000030, "Member 'TweenRotatorStandardFactory_BP_AppendTweenRotateActorTo::Delay' has a wrong offset!");
static_assert(offsetof(TweenRotatorStandardFactory_BP_AppendTweenRotateActorTo, TimeScale) == 0x000034, "Member 'TweenRotatorStandardFactory_BP_AppendTweenRotateActorTo::TimeScale' has a wrong offset!");
static_assert(offsetof(TweenRotatorStandardFactory_BP_AppendTweenRotateActorTo, TweenWhileGameIsPaused) == 0x000038, "Member 'TweenRotatorStandardFactory_BP_AppendTweenRotateActorTo::TweenWhileGameIsPaused' has a wrong offset!");
static_assert(offsetof(TweenRotatorStandardFactory_BP_AppendTweenRotateActorTo, SequenceIndex) == 0x00003C, "Member 'TweenRotatorStandardFactory_BP_AppendTweenRotateActorTo::SequenceIndex' has a wrong offset!");
static_assert(offsetof(TweenRotatorStandardFactory_BP_AppendTweenRotateActorTo, ReturnValue) == 0x000040, "Member 'TweenRotatorStandardFactory_BP_AppendTweenRotateActorTo::ReturnValue' has a wrong offset!");

// Function TweenMaker.TweenRotatorStandardFactory.BP_AppendTweenRotateSceneComponentBy
// 0x0048 (0x0048 - 0x0000)
struct TweenRotatorStandardFactory_BP_AppendTweenRotateSceneComponentBy final
{
public:
	class UTweenContainer*                        TweenContainer;                                    // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USceneComponent*                        TweenTarget;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, InstancedReference, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRotator                               bY;                                                // 0x0010(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	float                                         Duration;                                          // 0x001C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETweenEaseType                                EaseType;                                          // 0x0020(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          DeleteTweenOnHit;                                  // 0x0021(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          DeleteTweenOnOverlap;                              // 0x0022(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_23[0x1];                                       // 0x0023(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         NumLoops;                                          // 0x0024(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETweenLoopType                                LoopType;                                          // 0x0028(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_29[0x3];                                       // 0x0029(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Delay;                                             // 0x002C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TimeScale;                                         // 0x0030(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          TweenWhileGameIsPaused;                            // 0x0034(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_35[0x3];                                       // 0x0035(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         SequenceIndex;                                     // 0x0038(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_3C[0x4];                                       // 0x003C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UTweenRotator*                          ReturnValue;                                       // 0x0040(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TweenRotatorStandardFactory_BP_AppendTweenRotateSceneComponentBy) == 0x000008, "Wrong alignment on TweenRotatorStandardFactory_BP_AppendTweenRotateSceneComponentBy");
static_assert(sizeof(TweenRotatorStandardFactory_BP_AppendTweenRotateSceneComponentBy) == 0x000048, "Wrong size on TweenRotatorStandardFactory_BP_AppendTweenRotateSceneComponentBy");
static_assert(offsetof(TweenRotatorStandardFactory_BP_AppendTweenRotateSceneComponentBy, TweenContainer) == 0x000000, "Member 'TweenRotatorStandardFactory_BP_AppendTweenRotateSceneComponentBy::TweenContainer' has a wrong offset!");
static_assert(offsetof(TweenRotatorStandardFactory_BP_AppendTweenRotateSceneComponentBy, TweenTarget) == 0x000008, "Member 'TweenRotatorStandardFactory_BP_AppendTweenRotateSceneComponentBy::TweenTarget' has a wrong offset!");
static_assert(offsetof(TweenRotatorStandardFactory_BP_AppendTweenRotateSceneComponentBy, bY) == 0x000010, "Member 'TweenRotatorStandardFactory_BP_AppendTweenRotateSceneComponentBy::bY' has a wrong offset!");
static_assert(offsetof(TweenRotatorStandardFactory_BP_AppendTweenRotateSceneComponentBy, Duration) == 0x00001C, "Member 'TweenRotatorStandardFactory_BP_AppendTweenRotateSceneComponentBy::Duration' has a wrong offset!");
static_assert(offsetof(TweenRotatorStandardFactory_BP_AppendTweenRotateSceneComponentBy, EaseType) == 0x000020, "Member 'TweenRotatorStandardFactory_BP_AppendTweenRotateSceneComponentBy::EaseType' has a wrong offset!");
static_assert(offsetof(TweenRotatorStandardFactory_BP_AppendTweenRotateSceneComponentBy, DeleteTweenOnHit) == 0x000021, "Member 'TweenRotatorStandardFactory_BP_AppendTweenRotateSceneComponentBy::DeleteTweenOnHit' has a wrong offset!");
static_assert(offsetof(TweenRotatorStandardFactory_BP_AppendTweenRotateSceneComponentBy, DeleteTweenOnOverlap) == 0x000022, "Member 'TweenRotatorStandardFactory_BP_AppendTweenRotateSceneComponentBy::DeleteTweenOnOverlap' has a wrong offset!");
static_assert(offsetof(TweenRotatorStandardFactory_BP_AppendTweenRotateSceneComponentBy, NumLoops) == 0x000024, "Member 'TweenRotatorStandardFactory_BP_AppendTweenRotateSceneComponentBy::NumLoops' has a wrong offset!");
static_assert(offsetof(TweenRotatorStandardFactory_BP_AppendTweenRotateSceneComponentBy, LoopType) == 0x000028, "Member 'TweenRotatorStandardFactory_BP_AppendTweenRotateSceneComponentBy::LoopType' has a wrong offset!");
static_assert(offsetof(TweenRotatorStandardFactory_BP_AppendTweenRotateSceneComponentBy, Delay) == 0x00002C, "Member 'TweenRotatorStandardFactory_BP_AppendTweenRotateSceneComponentBy::Delay' has a wrong offset!");
static_assert(offsetof(TweenRotatorStandardFactory_BP_AppendTweenRotateSceneComponentBy, TimeScale) == 0x000030, "Member 'TweenRotatorStandardFactory_BP_AppendTweenRotateSceneComponentBy::TimeScale' has a wrong offset!");
static_assert(offsetof(TweenRotatorStandardFactory_BP_AppendTweenRotateSceneComponentBy, TweenWhileGameIsPaused) == 0x000034, "Member 'TweenRotatorStandardFactory_BP_AppendTweenRotateSceneComponentBy::TweenWhileGameIsPaused' has a wrong offset!");
static_assert(offsetof(TweenRotatorStandardFactory_BP_AppendTweenRotateSceneComponentBy, SequenceIndex) == 0x000038, "Member 'TweenRotatorStandardFactory_BP_AppendTweenRotateSceneComponentBy::SequenceIndex' has a wrong offset!");
static_assert(offsetof(TweenRotatorStandardFactory_BP_AppendTweenRotateSceneComponentBy, ReturnValue) == 0x000040, "Member 'TweenRotatorStandardFactory_BP_AppendTweenRotateSceneComponentBy::ReturnValue' has a wrong offset!");

// Function TweenMaker.TweenRotatorStandardFactory.BP_AppendTweenRotateSceneComponentTo
// 0x0048 (0x0048 - 0x0000)
struct TweenRotatorStandardFactory_BP_AppendTweenRotateSceneComponentTo final
{
public:
	class UTweenContainer*                        TweenContainer;                                    // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USceneComponent*                        TweenTarget;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, InstancedReference, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRotator                               To;                                                // 0x0010(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	float                                         Duration;                                          // 0x001C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETweenEaseType                                EaseType;                                          // 0x0020(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETweenSpace                                   TweenSpace;                                        // 0x0021(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETweenRotationMode                            RotationMode;                                      // 0x0022(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          DeleteTweenOnHit;                                  // 0x0023(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          DeleteTweenOnOverlap;                              // 0x0024(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_25[0x3];                                       // 0x0025(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         NumLoops;                                          // 0x0028(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETweenLoopType                                LoopType;                                          // 0x002C(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2D[0x3];                                       // 0x002D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Delay;                                             // 0x0030(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TimeScale;                                         // 0x0034(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          TweenWhileGameIsPaused;                            // 0x0038(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_39[0x3];                                       // 0x0039(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         SequenceIndex;                                     // 0x003C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UTweenRotator*                          ReturnValue;                                       // 0x0040(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TweenRotatorStandardFactory_BP_AppendTweenRotateSceneComponentTo) == 0x000008, "Wrong alignment on TweenRotatorStandardFactory_BP_AppendTweenRotateSceneComponentTo");
static_assert(sizeof(TweenRotatorStandardFactory_BP_AppendTweenRotateSceneComponentTo) == 0x000048, "Wrong size on TweenRotatorStandardFactory_BP_AppendTweenRotateSceneComponentTo");
static_assert(offsetof(TweenRotatorStandardFactory_BP_AppendTweenRotateSceneComponentTo, TweenContainer) == 0x000000, "Member 'TweenRotatorStandardFactory_BP_AppendTweenRotateSceneComponentTo::TweenContainer' has a wrong offset!");
static_assert(offsetof(TweenRotatorStandardFactory_BP_AppendTweenRotateSceneComponentTo, TweenTarget) == 0x000008, "Member 'TweenRotatorStandardFactory_BP_AppendTweenRotateSceneComponentTo::TweenTarget' has a wrong offset!");
static_assert(offsetof(TweenRotatorStandardFactory_BP_AppendTweenRotateSceneComponentTo, To) == 0x000010, "Member 'TweenRotatorStandardFactory_BP_AppendTweenRotateSceneComponentTo::To' has a wrong offset!");
static_assert(offsetof(TweenRotatorStandardFactory_BP_AppendTweenRotateSceneComponentTo, Duration) == 0x00001C, "Member 'TweenRotatorStandardFactory_BP_AppendTweenRotateSceneComponentTo::Duration' has a wrong offset!");
static_assert(offsetof(TweenRotatorStandardFactory_BP_AppendTweenRotateSceneComponentTo, EaseType) == 0x000020, "Member 'TweenRotatorStandardFactory_BP_AppendTweenRotateSceneComponentTo::EaseType' has a wrong offset!");
static_assert(offsetof(TweenRotatorStandardFactory_BP_AppendTweenRotateSceneComponentTo, TweenSpace) == 0x000021, "Member 'TweenRotatorStandardFactory_BP_AppendTweenRotateSceneComponentTo::TweenSpace' has a wrong offset!");
static_assert(offsetof(TweenRotatorStandardFactory_BP_AppendTweenRotateSceneComponentTo, RotationMode) == 0x000022, "Member 'TweenRotatorStandardFactory_BP_AppendTweenRotateSceneComponentTo::RotationMode' has a wrong offset!");
static_assert(offsetof(TweenRotatorStandardFactory_BP_AppendTweenRotateSceneComponentTo, DeleteTweenOnHit) == 0x000023, "Member 'TweenRotatorStandardFactory_BP_AppendTweenRotateSceneComponentTo::DeleteTweenOnHit' has a wrong offset!");
static_assert(offsetof(TweenRotatorStandardFactory_BP_AppendTweenRotateSceneComponentTo, DeleteTweenOnOverlap) == 0x000024, "Member 'TweenRotatorStandardFactory_BP_AppendTweenRotateSceneComponentTo::DeleteTweenOnOverlap' has a wrong offset!");
static_assert(offsetof(TweenRotatorStandardFactory_BP_AppendTweenRotateSceneComponentTo, NumLoops) == 0x000028, "Member 'TweenRotatorStandardFactory_BP_AppendTweenRotateSceneComponentTo::NumLoops' has a wrong offset!");
static_assert(offsetof(TweenRotatorStandardFactory_BP_AppendTweenRotateSceneComponentTo, LoopType) == 0x00002C, "Member 'TweenRotatorStandardFactory_BP_AppendTweenRotateSceneComponentTo::LoopType' has a wrong offset!");
static_assert(offsetof(TweenRotatorStandardFactory_BP_AppendTweenRotateSceneComponentTo, Delay) == 0x000030, "Member 'TweenRotatorStandardFactory_BP_AppendTweenRotateSceneComponentTo::Delay' has a wrong offset!");
static_assert(offsetof(TweenRotatorStandardFactory_BP_AppendTweenRotateSceneComponentTo, TimeScale) == 0x000034, "Member 'TweenRotatorStandardFactory_BP_AppendTweenRotateSceneComponentTo::TimeScale' has a wrong offset!");
static_assert(offsetof(TweenRotatorStandardFactory_BP_AppendTweenRotateSceneComponentTo, TweenWhileGameIsPaused) == 0x000038, "Member 'TweenRotatorStandardFactory_BP_AppendTweenRotateSceneComponentTo::TweenWhileGameIsPaused' has a wrong offset!");
static_assert(offsetof(TweenRotatorStandardFactory_BP_AppendTweenRotateSceneComponentTo, SequenceIndex) == 0x00003C, "Member 'TweenRotatorStandardFactory_BP_AppendTweenRotateSceneComponentTo::SequenceIndex' has a wrong offset!");
static_assert(offsetof(TweenRotatorStandardFactory_BP_AppendTweenRotateSceneComponentTo, ReturnValue) == 0x000040, "Member 'TweenRotatorStandardFactory_BP_AppendTweenRotateSceneComponentTo::ReturnValue' has a wrong offset!");

// Function TweenMaker.TweenRotatorStandardFactory.BP_CreateTweenRotateActorBy
// 0x0050 (0x0050 - 0x0000)
struct TweenRotatorStandardFactory_BP_CreateTweenRotateActorBy final
{
public:
	class UTweenManagerComponent*                 TweenManager;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 TweenTarget;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UTweenContainer*                        TweenContainer;                                    // 0x0010(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UTweenRotator*                          Tween;                                             // 0x0018(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRotator                               bY;                                                // 0x0020(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	float                                         Duration;                                          // 0x002C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETweenEaseType                                EaseType;                                          // 0x0030(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          DeleteTweenOnHit;                                  // 0x0031(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          DeleteTweenOnOverlap;                              // 0x0032(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_33[0x1];                                       // 0x0033(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         NumLoops;                                          // 0x0034(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETweenLoopType                                LoopType;                                          // 0x0038(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_39[0x3];                                       // 0x0039(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Delay;                                             // 0x003C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TimeScale;                                         // 0x0040(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          TweenWhileGameIsPaused;                            // 0x0044(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_45[0x3];                                       // 0x0045(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         SequenceIndex;                                     // 0x0048(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4C[0x4];                                       // 0x004C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TweenRotatorStandardFactory_BP_CreateTweenRotateActorBy) == 0x000008, "Wrong alignment on TweenRotatorStandardFactory_BP_CreateTweenRotateActorBy");
static_assert(sizeof(TweenRotatorStandardFactory_BP_CreateTweenRotateActorBy) == 0x000050, "Wrong size on TweenRotatorStandardFactory_BP_CreateTweenRotateActorBy");
static_assert(offsetof(TweenRotatorStandardFactory_BP_CreateTweenRotateActorBy, TweenManager) == 0x000000, "Member 'TweenRotatorStandardFactory_BP_CreateTweenRotateActorBy::TweenManager' has a wrong offset!");
static_assert(offsetof(TweenRotatorStandardFactory_BP_CreateTweenRotateActorBy, TweenTarget) == 0x000008, "Member 'TweenRotatorStandardFactory_BP_CreateTweenRotateActorBy::TweenTarget' has a wrong offset!");
static_assert(offsetof(TweenRotatorStandardFactory_BP_CreateTweenRotateActorBy, TweenContainer) == 0x000010, "Member 'TweenRotatorStandardFactory_BP_CreateTweenRotateActorBy::TweenContainer' has a wrong offset!");
static_assert(offsetof(TweenRotatorStandardFactory_BP_CreateTweenRotateActorBy, Tween) == 0x000018, "Member 'TweenRotatorStandardFactory_BP_CreateTweenRotateActorBy::Tween' has a wrong offset!");
static_assert(offsetof(TweenRotatorStandardFactory_BP_CreateTweenRotateActorBy, bY) == 0x000020, "Member 'TweenRotatorStandardFactory_BP_CreateTweenRotateActorBy::bY' has a wrong offset!");
static_assert(offsetof(TweenRotatorStandardFactory_BP_CreateTweenRotateActorBy, Duration) == 0x00002C, "Member 'TweenRotatorStandardFactory_BP_CreateTweenRotateActorBy::Duration' has a wrong offset!");
static_assert(offsetof(TweenRotatorStandardFactory_BP_CreateTweenRotateActorBy, EaseType) == 0x000030, "Member 'TweenRotatorStandardFactory_BP_CreateTweenRotateActorBy::EaseType' has a wrong offset!");
static_assert(offsetof(TweenRotatorStandardFactory_BP_CreateTweenRotateActorBy, DeleteTweenOnHit) == 0x000031, "Member 'TweenRotatorStandardFactory_BP_CreateTweenRotateActorBy::DeleteTweenOnHit' has a wrong offset!");
static_assert(offsetof(TweenRotatorStandardFactory_BP_CreateTweenRotateActorBy, DeleteTweenOnOverlap) == 0x000032, "Member 'TweenRotatorStandardFactory_BP_CreateTweenRotateActorBy::DeleteTweenOnOverlap' has a wrong offset!");
static_assert(offsetof(TweenRotatorStandardFactory_BP_CreateTweenRotateActorBy, NumLoops) == 0x000034, "Member 'TweenRotatorStandardFactory_BP_CreateTweenRotateActorBy::NumLoops' has a wrong offset!");
static_assert(offsetof(TweenRotatorStandardFactory_BP_CreateTweenRotateActorBy, LoopType) == 0x000038, "Member 'TweenRotatorStandardFactory_BP_CreateTweenRotateActorBy::LoopType' has a wrong offset!");
static_assert(offsetof(TweenRotatorStandardFactory_BP_CreateTweenRotateActorBy, Delay) == 0x00003C, "Member 'TweenRotatorStandardFactory_BP_CreateTweenRotateActorBy::Delay' has a wrong offset!");
static_assert(offsetof(TweenRotatorStandardFactory_BP_CreateTweenRotateActorBy, TimeScale) == 0x000040, "Member 'TweenRotatorStandardFactory_BP_CreateTweenRotateActorBy::TimeScale' has a wrong offset!");
static_assert(offsetof(TweenRotatorStandardFactory_BP_CreateTweenRotateActorBy, TweenWhileGameIsPaused) == 0x000044, "Member 'TweenRotatorStandardFactory_BP_CreateTweenRotateActorBy::TweenWhileGameIsPaused' has a wrong offset!");
static_assert(offsetof(TweenRotatorStandardFactory_BP_CreateTweenRotateActorBy, SequenceIndex) == 0x000048, "Member 'TweenRotatorStandardFactory_BP_CreateTweenRotateActorBy::SequenceIndex' has a wrong offset!");

// Function TweenMaker.TweenRotatorStandardFactory.BP_CreateTweenRotateActorTo
// 0x0050 (0x0050 - 0x0000)
struct TweenRotatorStandardFactory_BP_CreateTweenRotateActorTo final
{
public:
	class UTweenManagerComponent*                 TweenManager;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 TweenTarget;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UTweenContainer*                        TweenContainer;                                    // 0x0010(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UTweenRotator*                          Tween;                                             // 0x0018(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRotator                               To;                                                // 0x0020(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	float                                         Duration;                                          // 0x002C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETweenEaseType                                EaseType;                                          // 0x0030(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETweenSpace                                   TweenSpace;                                        // 0x0031(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETweenRotationMode                            RotationMode;                                      // 0x0032(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          DeleteTweenOnHit;                                  // 0x0033(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          DeleteTweenOnOverlap;                              // 0x0034(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_35[0x3];                                       // 0x0035(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         NumLoops;                                          // 0x0038(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETweenLoopType                                LoopType;                                          // 0x003C(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_3D[0x3];                                       // 0x003D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Delay;                                             // 0x0040(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TimeScale;                                         // 0x0044(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          TweenWhileGameIsPaused;                            // 0x0048(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_49[0x3];                                       // 0x0049(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         SequenceIndex;                                     // 0x004C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TweenRotatorStandardFactory_BP_CreateTweenRotateActorTo) == 0x000008, "Wrong alignment on TweenRotatorStandardFactory_BP_CreateTweenRotateActorTo");
static_assert(sizeof(TweenRotatorStandardFactory_BP_CreateTweenRotateActorTo) == 0x000050, "Wrong size on TweenRotatorStandardFactory_BP_CreateTweenRotateActorTo");
static_assert(offsetof(TweenRotatorStandardFactory_BP_CreateTweenRotateActorTo, TweenManager) == 0x000000, "Member 'TweenRotatorStandardFactory_BP_CreateTweenRotateActorTo::TweenManager' has a wrong offset!");
static_assert(offsetof(TweenRotatorStandardFactory_BP_CreateTweenRotateActorTo, TweenTarget) == 0x000008, "Member 'TweenRotatorStandardFactory_BP_CreateTweenRotateActorTo::TweenTarget' has a wrong offset!");
static_assert(offsetof(TweenRotatorStandardFactory_BP_CreateTweenRotateActorTo, TweenContainer) == 0x000010, "Member 'TweenRotatorStandardFactory_BP_CreateTweenRotateActorTo::TweenContainer' has a wrong offset!");
static_assert(offsetof(TweenRotatorStandardFactory_BP_CreateTweenRotateActorTo, Tween) == 0x000018, "Member 'TweenRotatorStandardFactory_BP_CreateTweenRotateActorTo::Tween' has a wrong offset!");
static_assert(offsetof(TweenRotatorStandardFactory_BP_CreateTweenRotateActorTo, To) == 0x000020, "Member 'TweenRotatorStandardFactory_BP_CreateTweenRotateActorTo::To' has a wrong offset!");
static_assert(offsetof(TweenRotatorStandardFactory_BP_CreateTweenRotateActorTo, Duration) == 0x00002C, "Member 'TweenRotatorStandardFactory_BP_CreateTweenRotateActorTo::Duration' has a wrong offset!");
static_assert(offsetof(TweenRotatorStandardFactory_BP_CreateTweenRotateActorTo, EaseType) == 0x000030, "Member 'TweenRotatorStandardFactory_BP_CreateTweenRotateActorTo::EaseType' has a wrong offset!");
static_assert(offsetof(TweenRotatorStandardFactory_BP_CreateTweenRotateActorTo, TweenSpace) == 0x000031, "Member 'TweenRotatorStandardFactory_BP_CreateTweenRotateActorTo::TweenSpace' has a wrong offset!");
static_assert(offsetof(TweenRotatorStandardFactory_BP_CreateTweenRotateActorTo, RotationMode) == 0x000032, "Member 'TweenRotatorStandardFactory_BP_CreateTweenRotateActorTo::RotationMode' has a wrong offset!");
static_assert(offsetof(TweenRotatorStandardFactory_BP_CreateTweenRotateActorTo, DeleteTweenOnHit) == 0x000033, "Member 'TweenRotatorStandardFactory_BP_CreateTweenRotateActorTo::DeleteTweenOnHit' has a wrong offset!");
static_assert(offsetof(TweenRotatorStandardFactory_BP_CreateTweenRotateActorTo, DeleteTweenOnOverlap) == 0x000034, "Member 'TweenRotatorStandardFactory_BP_CreateTweenRotateActorTo::DeleteTweenOnOverlap' has a wrong offset!");
static_assert(offsetof(TweenRotatorStandardFactory_BP_CreateTweenRotateActorTo, NumLoops) == 0x000038, "Member 'TweenRotatorStandardFactory_BP_CreateTweenRotateActorTo::NumLoops' has a wrong offset!");
static_assert(offsetof(TweenRotatorStandardFactory_BP_CreateTweenRotateActorTo, LoopType) == 0x00003C, "Member 'TweenRotatorStandardFactory_BP_CreateTweenRotateActorTo::LoopType' has a wrong offset!");
static_assert(offsetof(TweenRotatorStandardFactory_BP_CreateTweenRotateActorTo, Delay) == 0x000040, "Member 'TweenRotatorStandardFactory_BP_CreateTweenRotateActorTo::Delay' has a wrong offset!");
static_assert(offsetof(TweenRotatorStandardFactory_BP_CreateTweenRotateActorTo, TimeScale) == 0x000044, "Member 'TweenRotatorStandardFactory_BP_CreateTweenRotateActorTo::TimeScale' has a wrong offset!");
static_assert(offsetof(TweenRotatorStandardFactory_BP_CreateTweenRotateActorTo, TweenWhileGameIsPaused) == 0x000048, "Member 'TweenRotatorStandardFactory_BP_CreateTweenRotateActorTo::TweenWhileGameIsPaused' has a wrong offset!");
static_assert(offsetof(TweenRotatorStandardFactory_BP_CreateTweenRotateActorTo, SequenceIndex) == 0x00004C, "Member 'TweenRotatorStandardFactory_BP_CreateTweenRotateActorTo::SequenceIndex' has a wrong offset!");

// Function TweenMaker.TweenRotatorStandardFactory.BP_CreateTweenRotateSceneComponentBy
// 0x0050 (0x0050 - 0x0000)
struct TweenRotatorStandardFactory_BP_CreateTweenRotateSceneComponentBy final
{
public:
	class UTweenManagerComponent*                 TweenManager;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USceneComponent*                        TweenTarget;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, InstancedReference, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UTweenContainer*                        TweenContainer;                                    // 0x0010(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UTweenRotator*                          Tween;                                             // 0x0018(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRotator                               bY;                                                // 0x0020(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	float                                         Duration;                                          // 0x002C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETweenEaseType                                EaseType;                                          // 0x0030(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          DeleteTweenOnHit;                                  // 0x0031(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          DeleteTweenOnOverlap;                              // 0x0032(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_33[0x1];                                       // 0x0033(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         NumLoops;                                          // 0x0034(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETweenLoopType                                LoopType;                                          // 0x0038(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_39[0x3];                                       // 0x0039(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Delay;                                             // 0x003C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TimeScale;                                         // 0x0040(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          TweenWhileGameIsPaused;                            // 0x0044(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_45[0x3];                                       // 0x0045(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         SequenceIndex;                                     // 0x0048(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4C[0x4];                                       // 0x004C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TweenRotatorStandardFactory_BP_CreateTweenRotateSceneComponentBy) == 0x000008, "Wrong alignment on TweenRotatorStandardFactory_BP_CreateTweenRotateSceneComponentBy");
static_assert(sizeof(TweenRotatorStandardFactory_BP_CreateTweenRotateSceneComponentBy) == 0x000050, "Wrong size on TweenRotatorStandardFactory_BP_CreateTweenRotateSceneComponentBy");
static_assert(offsetof(TweenRotatorStandardFactory_BP_CreateTweenRotateSceneComponentBy, TweenManager) == 0x000000, "Member 'TweenRotatorStandardFactory_BP_CreateTweenRotateSceneComponentBy::TweenManager' has a wrong offset!");
static_assert(offsetof(TweenRotatorStandardFactory_BP_CreateTweenRotateSceneComponentBy, TweenTarget) == 0x000008, "Member 'TweenRotatorStandardFactory_BP_CreateTweenRotateSceneComponentBy::TweenTarget' has a wrong offset!");
static_assert(offsetof(TweenRotatorStandardFactory_BP_CreateTweenRotateSceneComponentBy, TweenContainer) == 0x000010, "Member 'TweenRotatorStandardFactory_BP_CreateTweenRotateSceneComponentBy::TweenContainer' has a wrong offset!");
static_assert(offsetof(TweenRotatorStandardFactory_BP_CreateTweenRotateSceneComponentBy, Tween) == 0x000018, "Member 'TweenRotatorStandardFactory_BP_CreateTweenRotateSceneComponentBy::Tween' has a wrong offset!");
static_assert(offsetof(TweenRotatorStandardFactory_BP_CreateTweenRotateSceneComponentBy, bY) == 0x000020, "Member 'TweenRotatorStandardFactory_BP_CreateTweenRotateSceneComponentBy::bY' has a wrong offset!");
static_assert(offsetof(TweenRotatorStandardFactory_BP_CreateTweenRotateSceneComponentBy, Duration) == 0x00002C, "Member 'TweenRotatorStandardFactory_BP_CreateTweenRotateSceneComponentBy::Duration' has a wrong offset!");
static_assert(offsetof(TweenRotatorStandardFactory_BP_CreateTweenRotateSceneComponentBy, EaseType) == 0x000030, "Member 'TweenRotatorStandardFactory_BP_CreateTweenRotateSceneComponentBy::EaseType' has a wrong offset!");
static_assert(offsetof(TweenRotatorStandardFactory_BP_CreateTweenRotateSceneComponentBy, DeleteTweenOnHit) == 0x000031, "Member 'TweenRotatorStandardFactory_BP_CreateTweenRotateSceneComponentBy::DeleteTweenOnHit' has a wrong offset!");
static_assert(offsetof(TweenRotatorStandardFactory_BP_CreateTweenRotateSceneComponentBy, DeleteTweenOnOverlap) == 0x000032, "Member 'TweenRotatorStandardFactory_BP_CreateTweenRotateSceneComponentBy::DeleteTweenOnOverlap' has a wrong offset!");
static_assert(offsetof(TweenRotatorStandardFactory_BP_CreateTweenRotateSceneComponentBy, NumLoops) == 0x000034, "Member 'TweenRotatorStandardFactory_BP_CreateTweenRotateSceneComponentBy::NumLoops' has a wrong offset!");
static_assert(offsetof(TweenRotatorStandardFactory_BP_CreateTweenRotateSceneComponentBy, LoopType) == 0x000038, "Member 'TweenRotatorStandardFactory_BP_CreateTweenRotateSceneComponentBy::LoopType' has a wrong offset!");
static_assert(offsetof(TweenRotatorStandardFactory_BP_CreateTweenRotateSceneComponentBy, Delay) == 0x00003C, "Member 'TweenRotatorStandardFactory_BP_CreateTweenRotateSceneComponentBy::Delay' has a wrong offset!");
static_assert(offsetof(TweenRotatorStandardFactory_BP_CreateTweenRotateSceneComponentBy, TimeScale) == 0x000040, "Member 'TweenRotatorStandardFactory_BP_CreateTweenRotateSceneComponentBy::TimeScale' has a wrong offset!");
static_assert(offsetof(TweenRotatorStandardFactory_BP_CreateTweenRotateSceneComponentBy, TweenWhileGameIsPaused) == 0x000044, "Member 'TweenRotatorStandardFactory_BP_CreateTweenRotateSceneComponentBy::TweenWhileGameIsPaused' has a wrong offset!");
static_assert(offsetof(TweenRotatorStandardFactory_BP_CreateTweenRotateSceneComponentBy, SequenceIndex) == 0x000048, "Member 'TweenRotatorStandardFactory_BP_CreateTweenRotateSceneComponentBy::SequenceIndex' has a wrong offset!");

// Function TweenMaker.TweenRotatorStandardFactory.BP_CreateTweenRotateSceneComponentTo
// 0x0050 (0x0050 - 0x0000)
struct TweenRotatorStandardFactory_BP_CreateTweenRotateSceneComponentTo final
{
public:
	class UTweenManagerComponent*                 TweenManager;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USceneComponent*                        TweenTarget;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, InstancedReference, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UTweenContainer*                        TweenContainer;                                    // 0x0010(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UTweenRotator*                          Tween;                                             // 0x0018(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRotator                               To;                                                // 0x0020(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	float                                         Duration;                                          // 0x002C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETweenEaseType                                EaseType;                                          // 0x0030(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETweenSpace                                   TweenSpace;                                        // 0x0031(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETweenRotationMode                            RotationMode;                                      // 0x0032(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          DeleteTweenOnHit;                                  // 0x0033(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          DeleteTweenOnOverlap;                              // 0x0034(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_35[0x3];                                       // 0x0035(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         NumLoops;                                          // 0x0038(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETweenLoopType                                LoopType;                                          // 0x003C(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_3D[0x3];                                       // 0x003D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Delay;                                             // 0x0040(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TimeScale;                                         // 0x0044(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          TweenWhileGameIsPaused;                            // 0x0048(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_49[0x3];                                       // 0x0049(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         SequenceIndex;                                     // 0x004C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TweenRotatorStandardFactory_BP_CreateTweenRotateSceneComponentTo) == 0x000008, "Wrong alignment on TweenRotatorStandardFactory_BP_CreateTweenRotateSceneComponentTo");
static_assert(sizeof(TweenRotatorStandardFactory_BP_CreateTweenRotateSceneComponentTo) == 0x000050, "Wrong size on TweenRotatorStandardFactory_BP_CreateTweenRotateSceneComponentTo");
static_assert(offsetof(TweenRotatorStandardFactory_BP_CreateTweenRotateSceneComponentTo, TweenManager) == 0x000000, "Member 'TweenRotatorStandardFactory_BP_CreateTweenRotateSceneComponentTo::TweenManager' has a wrong offset!");
static_assert(offsetof(TweenRotatorStandardFactory_BP_CreateTweenRotateSceneComponentTo, TweenTarget) == 0x000008, "Member 'TweenRotatorStandardFactory_BP_CreateTweenRotateSceneComponentTo::TweenTarget' has a wrong offset!");
static_assert(offsetof(TweenRotatorStandardFactory_BP_CreateTweenRotateSceneComponentTo, TweenContainer) == 0x000010, "Member 'TweenRotatorStandardFactory_BP_CreateTweenRotateSceneComponentTo::TweenContainer' has a wrong offset!");
static_assert(offsetof(TweenRotatorStandardFactory_BP_CreateTweenRotateSceneComponentTo, Tween) == 0x000018, "Member 'TweenRotatorStandardFactory_BP_CreateTweenRotateSceneComponentTo::Tween' has a wrong offset!");
static_assert(offsetof(TweenRotatorStandardFactory_BP_CreateTweenRotateSceneComponentTo, To) == 0x000020, "Member 'TweenRotatorStandardFactory_BP_CreateTweenRotateSceneComponentTo::To' has a wrong offset!");
static_assert(offsetof(TweenRotatorStandardFactory_BP_CreateTweenRotateSceneComponentTo, Duration) == 0x00002C, "Member 'TweenRotatorStandardFactory_BP_CreateTweenRotateSceneComponentTo::Duration' has a wrong offset!");
static_assert(offsetof(TweenRotatorStandardFactory_BP_CreateTweenRotateSceneComponentTo, EaseType) == 0x000030, "Member 'TweenRotatorStandardFactory_BP_CreateTweenRotateSceneComponentTo::EaseType' has a wrong offset!");
static_assert(offsetof(TweenRotatorStandardFactory_BP_CreateTweenRotateSceneComponentTo, TweenSpace) == 0x000031, "Member 'TweenRotatorStandardFactory_BP_CreateTweenRotateSceneComponentTo::TweenSpace' has a wrong offset!");
static_assert(offsetof(TweenRotatorStandardFactory_BP_CreateTweenRotateSceneComponentTo, RotationMode) == 0x000032, "Member 'TweenRotatorStandardFactory_BP_CreateTweenRotateSceneComponentTo::RotationMode' has a wrong offset!");
static_assert(offsetof(TweenRotatorStandardFactory_BP_CreateTweenRotateSceneComponentTo, DeleteTweenOnHit) == 0x000033, "Member 'TweenRotatorStandardFactory_BP_CreateTweenRotateSceneComponentTo::DeleteTweenOnHit' has a wrong offset!");
static_assert(offsetof(TweenRotatorStandardFactory_BP_CreateTweenRotateSceneComponentTo, DeleteTweenOnOverlap) == 0x000034, "Member 'TweenRotatorStandardFactory_BP_CreateTweenRotateSceneComponentTo::DeleteTweenOnOverlap' has a wrong offset!");
static_assert(offsetof(TweenRotatorStandardFactory_BP_CreateTweenRotateSceneComponentTo, NumLoops) == 0x000038, "Member 'TweenRotatorStandardFactory_BP_CreateTweenRotateSceneComponentTo::NumLoops' has a wrong offset!");
static_assert(offsetof(TweenRotatorStandardFactory_BP_CreateTweenRotateSceneComponentTo, LoopType) == 0x00003C, "Member 'TweenRotatorStandardFactory_BP_CreateTweenRotateSceneComponentTo::LoopType' has a wrong offset!");
static_assert(offsetof(TweenRotatorStandardFactory_BP_CreateTweenRotateSceneComponentTo, Delay) == 0x000040, "Member 'TweenRotatorStandardFactory_BP_CreateTweenRotateSceneComponentTo::Delay' has a wrong offset!");
static_assert(offsetof(TweenRotatorStandardFactory_BP_CreateTweenRotateSceneComponentTo, TimeScale) == 0x000044, "Member 'TweenRotatorStandardFactory_BP_CreateTweenRotateSceneComponentTo::TimeScale' has a wrong offset!");
static_assert(offsetof(TweenRotatorStandardFactory_BP_CreateTweenRotateSceneComponentTo, TweenWhileGameIsPaused) == 0x000048, "Member 'TweenRotatorStandardFactory_BP_CreateTweenRotateSceneComponentTo::TweenWhileGameIsPaused' has a wrong offset!");
static_assert(offsetof(TweenRotatorStandardFactory_BP_CreateTweenRotateSceneComponentTo, SequenceIndex) == 0x00004C, "Member 'TweenRotatorStandardFactory_BP_CreateTweenRotateSceneComponentTo::SequenceIndex' has a wrong offset!");

// Function TweenMaker.TweenRotatorStandardFactory.BP_JoinTweenRotateActorBy
// 0x0040 (0x0040 - 0x0000)
struct TweenRotatorStandardFactory_BP_JoinTweenRotateActorBy final
{
public:
	class UTweenContainer*                        TweenContainer;                                    // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 TweenTarget;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRotator                               bY;                                                // 0x0010(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	float                                         Duration;                                          // 0x001C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETweenEaseType                                EaseType;                                          // 0x0020(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          DeleteTweenOnHit;                                  // 0x0021(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          DeleteTweenOnOverlap;                              // 0x0022(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_23[0x1];                                       // 0x0023(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Delay;                                             // 0x0024(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TimeScale;                                         // 0x0028(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          TweenWhileGameIsPaused;                            // 0x002C(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2D[0x3];                                       // 0x002D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         SequenceIndex;                                     // 0x0030(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_34[0x4];                                       // 0x0034(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UTweenRotator*                          ReturnValue;                                       // 0x0038(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TweenRotatorStandardFactory_BP_JoinTweenRotateActorBy) == 0x000008, "Wrong alignment on TweenRotatorStandardFactory_BP_JoinTweenRotateActorBy");
static_assert(sizeof(TweenRotatorStandardFactory_BP_JoinTweenRotateActorBy) == 0x000040, "Wrong size on TweenRotatorStandardFactory_BP_JoinTweenRotateActorBy");
static_assert(offsetof(TweenRotatorStandardFactory_BP_JoinTweenRotateActorBy, TweenContainer) == 0x000000, "Member 'TweenRotatorStandardFactory_BP_JoinTweenRotateActorBy::TweenContainer' has a wrong offset!");
static_assert(offsetof(TweenRotatorStandardFactory_BP_JoinTweenRotateActorBy, TweenTarget) == 0x000008, "Member 'TweenRotatorStandardFactory_BP_JoinTweenRotateActorBy::TweenTarget' has a wrong offset!");
static_assert(offsetof(TweenRotatorStandardFactory_BP_JoinTweenRotateActorBy, bY) == 0x000010, "Member 'TweenRotatorStandardFactory_BP_JoinTweenRotateActorBy::bY' has a wrong offset!");
static_assert(offsetof(TweenRotatorStandardFactory_BP_JoinTweenRotateActorBy, Duration) == 0x00001C, "Member 'TweenRotatorStandardFactory_BP_JoinTweenRotateActorBy::Duration' has a wrong offset!");
static_assert(offsetof(TweenRotatorStandardFactory_BP_JoinTweenRotateActorBy, EaseType) == 0x000020, "Member 'TweenRotatorStandardFactory_BP_JoinTweenRotateActorBy::EaseType' has a wrong offset!");
static_assert(offsetof(TweenRotatorStandardFactory_BP_JoinTweenRotateActorBy, DeleteTweenOnHit) == 0x000021, "Member 'TweenRotatorStandardFactory_BP_JoinTweenRotateActorBy::DeleteTweenOnHit' has a wrong offset!");
static_assert(offsetof(TweenRotatorStandardFactory_BP_JoinTweenRotateActorBy, DeleteTweenOnOverlap) == 0x000022, "Member 'TweenRotatorStandardFactory_BP_JoinTweenRotateActorBy::DeleteTweenOnOverlap' has a wrong offset!");
static_assert(offsetof(TweenRotatorStandardFactory_BP_JoinTweenRotateActorBy, Delay) == 0x000024, "Member 'TweenRotatorStandardFactory_BP_JoinTweenRotateActorBy::Delay' has a wrong offset!");
static_assert(offsetof(TweenRotatorStandardFactory_BP_JoinTweenRotateActorBy, TimeScale) == 0x000028, "Member 'TweenRotatorStandardFactory_BP_JoinTweenRotateActorBy::TimeScale' has a wrong offset!");
static_assert(offsetof(TweenRotatorStandardFactory_BP_JoinTweenRotateActorBy, TweenWhileGameIsPaused) == 0x00002C, "Member 'TweenRotatorStandardFactory_BP_JoinTweenRotateActorBy::TweenWhileGameIsPaused' has a wrong offset!");
static_assert(offsetof(TweenRotatorStandardFactory_BP_JoinTweenRotateActorBy, SequenceIndex) == 0x000030, "Member 'TweenRotatorStandardFactory_BP_JoinTweenRotateActorBy::SequenceIndex' has a wrong offset!");
static_assert(offsetof(TweenRotatorStandardFactory_BP_JoinTweenRotateActorBy, ReturnValue) == 0x000038, "Member 'TweenRotatorStandardFactory_BP_JoinTweenRotateActorBy::ReturnValue' has a wrong offset!");

// Function TweenMaker.TweenRotatorStandardFactory.BP_JoinTweenRotateActorTo
// 0x0040 (0x0040 - 0x0000)
struct TweenRotatorStandardFactory_BP_JoinTweenRotateActorTo final
{
public:
	class UTweenContainer*                        TweenContainer;                                    // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 TweenTarget;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRotator                               To;                                                // 0x0010(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	float                                         Duration;                                          // 0x001C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETweenEaseType                                EaseType;                                          // 0x0020(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETweenSpace                                   TweenSpace;                                        // 0x0021(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETweenRotationMode                            RotationMode;                                      // 0x0022(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          DeleteTweenOnHit;                                  // 0x0023(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          DeleteTweenOnOverlap;                              // 0x0024(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_25[0x3];                                       // 0x0025(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Delay;                                             // 0x0028(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TimeScale;                                         // 0x002C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          TweenWhileGameIsPaused;                            // 0x0030(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_31[0x3];                                       // 0x0031(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         SequenceIndex;                                     // 0x0034(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UTweenRotator*                          ReturnValue;                                       // 0x0038(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TweenRotatorStandardFactory_BP_JoinTweenRotateActorTo) == 0x000008, "Wrong alignment on TweenRotatorStandardFactory_BP_JoinTweenRotateActorTo");
static_assert(sizeof(TweenRotatorStandardFactory_BP_JoinTweenRotateActorTo) == 0x000040, "Wrong size on TweenRotatorStandardFactory_BP_JoinTweenRotateActorTo");
static_assert(offsetof(TweenRotatorStandardFactory_BP_JoinTweenRotateActorTo, TweenContainer) == 0x000000, "Member 'TweenRotatorStandardFactory_BP_JoinTweenRotateActorTo::TweenContainer' has a wrong offset!");
static_assert(offsetof(TweenRotatorStandardFactory_BP_JoinTweenRotateActorTo, TweenTarget) == 0x000008, "Member 'TweenRotatorStandardFactory_BP_JoinTweenRotateActorTo::TweenTarget' has a wrong offset!");
static_assert(offsetof(TweenRotatorStandardFactory_BP_JoinTweenRotateActorTo, To) == 0x000010, "Member 'TweenRotatorStandardFactory_BP_JoinTweenRotateActorTo::To' has a wrong offset!");
static_assert(offsetof(TweenRotatorStandardFactory_BP_JoinTweenRotateActorTo, Duration) == 0x00001C, "Member 'TweenRotatorStandardFactory_BP_JoinTweenRotateActorTo::Duration' has a wrong offset!");
static_assert(offsetof(TweenRotatorStandardFactory_BP_JoinTweenRotateActorTo, EaseType) == 0x000020, "Member 'TweenRotatorStandardFactory_BP_JoinTweenRotateActorTo::EaseType' has a wrong offset!");
static_assert(offsetof(TweenRotatorStandardFactory_BP_JoinTweenRotateActorTo, TweenSpace) == 0x000021, "Member 'TweenRotatorStandardFactory_BP_JoinTweenRotateActorTo::TweenSpace' has a wrong offset!");
static_assert(offsetof(TweenRotatorStandardFactory_BP_JoinTweenRotateActorTo, RotationMode) == 0x000022, "Member 'TweenRotatorStandardFactory_BP_JoinTweenRotateActorTo::RotationMode' has a wrong offset!");
static_assert(offsetof(TweenRotatorStandardFactory_BP_JoinTweenRotateActorTo, DeleteTweenOnHit) == 0x000023, "Member 'TweenRotatorStandardFactory_BP_JoinTweenRotateActorTo::DeleteTweenOnHit' has a wrong offset!");
static_assert(offsetof(TweenRotatorStandardFactory_BP_JoinTweenRotateActorTo, DeleteTweenOnOverlap) == 0x000024, "Member 'TweenRotatorStandardFactory_BP_JoinTweenRotateActorTo::DeleteTweenOnOverlap' has a wrong offset!");
static_assert(offsetof(TweenRotatorStandardFactory_BP_JoinTweenRotateActorTo, Delay) == 0x000028, "Member 'TweenRotatorStandardFactory_BP_JoinTweenRotateActorTo::Delay' has a wrong offset!");
static_assert(offsetof(TweenRotatorStandardFactory_BP_JoinTweenRotateActorTo, TimeScale) == 0x00002C, "Member 'TweenRotatorStandardFactory_BP_JoinTweenRotateActorTo::TimeScale' has a wrong offset!");
static_assert(offsetof(TweenRotatorStandardFactory_BP_JoinTweenRotateActorTo, TweenWhileGameIsPaused) == 0x000030, "Member 'TweenRotatorStandardFactory_BP_JoinTweenRotateActorTo::TweenWhileGameIsPaused' has a wrong offset!");
static_assert(offsetof(TweenRotatorStandardFactory_BP_JoinTweenRotateActorTo, SequenceIndex) == 0x000034, "Member 'TweenRotatorStandardFactory_BP_JoinTweenRotateActorTo::SequenceIndex' has a wrong offset!");
static_assert(offsetof(TweenRotatorStandardFactory_BP_JoinTweenRotateActorTo, ReturnValue) == 0x000038, "Member 'TweenRotatorStandardFactory_BP_JoinTweenRotateActorTo::ReturnValue' has a wrong offset!");

// Function TweenMaker.TweenRotatorStandardFactory.BP_JoinTweenRotateSceneComponentBy
// 0x0040 (0x0040 - 0x0000)
struct TweenRotatorStandardFactory_BP_JoinTweenRotateSceneComponentBy final
{
public:
	class UTweenContainer*                        TweenContainer;                                    // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USceneComponent*                        TweenTarget;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, InstancedReference, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRotator                               bY;                                                // 0x0010(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	float                                         Duration;                                          // 0x001C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETweenEaseType                                EaseType;                                          // 0x0020(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          DeleteTweenOnHit;                                  // 0x0021(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          DeleteTweenOnOverlap;                              // 0x0022(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_23[0x1];                                       // 0x0023(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Delay;                                             // 0x0024(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TimeScale;                                         // 0x0028(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          TweenWhileGameIsPaused;                            // 0x002C(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2D[0x3];                                       // 0x002D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         SequenceIndex;                                     // 0x0030(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_34[0x4];                                       // 0x0034(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UTweenRotator*                          ReturnValue;                                       // 0x0038(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TweenRotatorStandardFactory_BP_JoinTweenRotateSceneComponentBy) == 0x000008, "Wrong alignment on TweenRotatorStandardFactory_BP_JoinTweenRotateSceneComponentBy");
static_assert(sizeof(TweenRotatorStandardFactory_BP_JoinTweenRotateSceneComponentBy) == 0x000040, "Wrong size on TweenRotatorStandardFactory_BP_JoinTweenRotateSceneComponentBy");
static_assert(offsetof(TweenRotatorStandardFactory_BP_JoinTweenRotateSceneComponentBy, TweenContainer) == 0x000000, "Member 'TweenRotatorStandardFactory_BP_JoinTweenRotateSceneComponentBy::TweenContainer' has a wrong offset!");
static_assert(offsetof(TweenRotatorStandardFactory_BP_JoinTweenRotateSceneComponentBy, TweenTarget) == 0x000008, "Member 'TweenRotatorStandardFactory_BP_JoinTweenRotateSceneComponentBy::TweenTarget' has a wrong offset!");
static_assert(offsetof(TweenRotatorStandardFactory_BP_JoinTweenRotateSceneComponentBy, bY) == 0x000010, "Member 'TweenRotatorStandardFactory_BP_JoinTweenRotateSceneComponentBy::bY' has a wrong offset!");
static_assert(offsetof(TweenRotatorStandardFactory_BP_JoinTweenRotateSceneComponentBy, Duration) == 0x00001C, "Member 'TweenRotatorStandardFactory_BP_JoinTweenRotateSceneComponentBy::Duration' has a wrong offset!");
static_assert(offsetof(TweenRotatorStandardFactory_BP_JoinTweenRotateSceneComponentBy, EaseType) == 0x000020, "Member 'TweenRotatorStandardFactory_BP_JoinTweenRotateSceneComponentBy::EaseType' has a wrong offset!");
static_assert(offsetof(TweenRotatorStandardFactory_BP_JoinTweenRotateSceneComponentBy, DeleteTweenOnHit) == 0x000021, "Member 'TweenRotatorStandardFactory_BP_JoinTweenRotateSceneComponentBy::DeleteTweenOnHit' has a wrong offset!");
static_assert(offsetof(TweenRotatorStandardFactory_BP_JoinTweenRotateSceneComponentBy, DeleteTweenOnOverlap) == 0x000022, "Member 'TweenRotatorStandardFactory_BP_JoinTweenRotateSceneComponentBy::DeleteTweenOnOverlap' has a wrong offset!");
static_assert(offsetof(TweenRotatorStandardFactory_BP_JoinTweenRotateSceneComponentBy, Delay) == 0x000024, "Member 'TweenRotatorStandardFactory_BP_JoinTweenRotateSceneComponentBy::Delay' has a wrong offset!");
static_assert(offsetof(TweenRotatorStandardFactory_BP_JoinTweenRotateSceneComponentBy, TimeScale) == 0x000028, "Member 'TweenRotatorStandardFactory_BP_JoinTweenRotateSceneComponentBy::TimeScale' has a wrong offset!");
static_assert(offsetof(TweenRotatorStandardFactory_BP_JoinTweenRotateSceneComponentBy, TweenWhileGameIsPaused) == 0x00002C, "Member 'TweenRotatorStandardFactory_BP_JoinTweenRotateSceneComponentBy::TweenWhileGameIsPaused' has a wrong offset!");
static_assert(offsetof(TweenRotatorStandardFactory_BP_JoinTweenRotateSceneComponentBy, SequenceIndex) == 0x000030, "Member 'TweenRotatorStandardFactory_BP_JoinTweenRotateSceneComponentBy::SequenceIndex' has a wrong offset!");
static_assert(offsetof(TweenRotatorStandardFactory_BP_JoinTweenRotateSceneComponentBy, ReturnValue) == 0x000038, "Member 'TweenRotatorStandardFactory_BP_JoinTweenRotateSceneComponentBy::ReturnValue' has a wrong offset!");

// Function TweenMaker.TweenRotatorStandardFactory.BP_JoinTweenRotateSceneComponentTo
// 0x0040 (0x0040 - 0x0000)
struct TweenRotatorStandardFactory_BP_JoinTweenRotateSceneComponentTo final
{
public:
	class UTweenContainer*                        TweenContainer;                                    // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USceneComponent*                        TweenTarget;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, InstancedReference, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRotator                               To;                                                // 0x0010(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	float                                         Duration;                                          // 0x001C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETweenEaseType                                EaseType;                                          // 0x0020(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETweenSpace                                   TweenSpace;                                        // 0x0021(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETweenRotationMode                            RotationMode;                                      // 0x0022(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          DeleteTweenOnHit;                                  // 0x0023(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          DeleteTweenOnOverlap;                              // 0x0024(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_25[0x3];                                       // 0x0025(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Delay;                                             // 0x0028(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TimeScale;                                         // 0x002C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          TweenWhileGameIsPaused;                            // 0x0030(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_31[0x3];                                       // 0x0031(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         SequenceIndex;                                     // 0x0034(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UTweenRotator*                          ReturnValue;                                       // 0x0038(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TweenRotatorStandardFactory_BP_JoinTweenRotateSceneComponentTo) == 0x000008, "Wrong alignment on TweenRotatorStandardFactory_BP_JoinTweenRotateSceneComponentTo");
static_assert(sizeof(TweenRotatorStandardFactory_BP_JoinTweenRotateSceneComponentTo) == 0x000040, "Wrong size on TweenRotatorStandardFactory_BP_JoinTweenRotateSceneComponentTo");
static_assert(offsetof(TweenRotatorStandardFactory_BP_JoinTweenRotateSceneComponentTo, TweenContainer) == 0x000000, "Member 'TweenRotatorStandardFactory_BP_JoinTweenRotateSceneComponentTo::TweenContainer' has a wrong offset!");
static_assert(offsetof(TweenRotatorStandardFactory_BP_JoinTweenRotateSceneComponentTo, TweenTarget) == 0x000008, "Member 'TweenRotatorStandardFactory_BP_JoinTweenRotateSceneComponentTo::TweenTarget' has a wrong offset!");
static_assert(offsetof(TweenRotatorStandardFactory_BP_JoinTweenRotateSceneComponentTo, To) == 0x000010, "Member 'TweenRotatorStandardFactory_BP_JoinTweenRotateSceneComponentTo::To' has a wrong offset!");
static_assert(offsetof(TweenRotatorStandardFactory_BP_JoinTweenRotateSceneComponentTo, Duration) == 0x00001C, "Member 'TweenRotatorStandardFactory_BP_JoinTweenRotateSceneComponentTo::Duration' has a wrong offset!");
static_assert(offsetof(TweenRotatorStandardFactory_BP_JoinTweenRotateSceneComponentTo, EaseType) == 0x000020, "Member 'TweenRotatorStandardFactory_BP_JoinTweenRotateSceneComponentTo::EaseType' has a wrong offset!");
static_assert(offsetof(TweenRotatorStandardFactory_BP_JoinTweenRotateSceneComponentTo, TweenSpace) == 0x000021, "Member 'TweenRotatorStandardFactory_BP_JoinTweenRotateSceneComponentTo::TweenSpace' has a wrong offset!");
static_assert(offsetof(TweenRotatorStandardFactory_BP_JoinTweenRotateSceneComponentTo, RotationMode) == 0x000022, "Member 'TweenRotatorStandardFactory_BP_JoinTweenRotateSceneComponentTo::RotationMode' has a wrong offset!");
static_assert(offsetof(TweenRotatorStandardFactory_BP_JoinTweenRotateSceneComponentTo, DeleteTweenOnHit) == 0x000023, "Member 'TweenRotatorStandardFactory_BP_JoinTweenRotateSceneComponentTo::DeleteTweenOnHit' has a wrong offset!");
static_assert(offsetof(TweenRotatorStandardFactory_BP_JoinTweenRotateSceneComponentTo, DeleteTweenOnOverlap) == 0x000024, "Member 'TweenRotatorStandardFactory_BP_JoinTweenRotateSceneComponentTo::DeleteTweenOnOverlap' has a wrong offset!");
static_assert(offsetof(TweenRotatorStandardFactory_BP_JoinTweenRotateSceneComponentTo, Delay) == 0x000028, "Member 'TweenRotatorStandardFactory_BP_JoinTweenRotateSceneComponentTo::Delay' has a wrong offset!");
static_assert(offsetof(TweenRotatorStandardFactory_BP_JoinTweenRotateSceneComponentTo, TimeScale) == 0x00002C, "Member 'TweenRotatorStandardFactory_BP_JoinTweenRotateSceneComponentTo::TimeScale' has a wrong offset!");
static_assert(offsetof(TweenRotatorStandardFactory_BP_JoinTweenRotateSceneComponentTo, TweenWhileGameIsPaused) == 0x000030, "Member 'TweenRotatorStandardFactory_BP_JoinTweenRotateSceneComponentTo::TweenWhileGameIsPaused' has a wrong offset!");
static_assert(offsetof(TweenRotatorStandardFactory_BP_JoinTweenRotateSceneComponentTo, SequenceIndex) == 0x000034, "Member 'TweenRotatorStandardFactory_BP_JoinTweenRotateSceneComponentTo::SequenceIndex' has a wrong offset!");
static_assert(offsetof(TweenRotatorStandardFactory_BP_JoinTweenRotateSceneComponentTo, ReturnValue) == 0x000038, "Member 'TweenRotatorStandardFactory_BP_JoinTweenRotateSceneComponentTo::ReturnValue' has a wrong offset!");

// Function TweenMaker.TweenVector.OnActorBeginOverlap
// 0x0010 (0x0010 - 0x0000)
struct TweenVector_OnActorBeginOverlap final
{
public:
	class AActor*                                 PThisActor;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 POtherActor;                                       // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TweenVector_OnActorBeginOverlap) == 0x000008, "Wrong alignment on TweenVector_OnActorBeginOverlap");
static_assert(sizeof(TweenVector_OnActorBeginOverlap) == 0x000010, "Wrong size on TweenVector_OnActorBeginOverlap");
static_assert(offsetof(TweenVector_OnActorBeginOverlap, PThisActor) == 0x000000, "Member 'TweenVector_OnActorBeginOverlap::PThisActor' has a wrong offset!");
static_assert(offsetof(TweenVector_OnActorBeginOverlap, POtherActor) == 0x000008, "Member 'TweenVector_OnActorBeginOverlap::POtherActor' has a wrong offset!");

// Function TweenMaker.TweenVector.OnActorHit
// 0x00A8 (0x00A8 - 0x0000)
struct TweenVector_OnActorHit final
{
public:
	class AActor*                                 PThisActor;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 POtherActor;                                       // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                PNormalImpulse;                                    // 0x0010(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FHitResult                             PHit;                                              // 0x001C(0x008C)(ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(TweenVector_OnActorHit) == 0x000008, "Wrong alignment on TweenVector_OnActorHit");
static_assert(sizeof(TweenVector_OnActorHit) == 0x0000A8, "Wrong size on TweenVector_OnActorHit");
static_assert(offsetof(TweenVector_OnActorHit, PThisActor) == 0x000000, "Member 'TweenVector_OnActorHit::PThisActor' has a wrong offset!");
static_assert(offsetof(TweenVector_OnActorHit, POtherActor) == 0x000008, "Member 'TweenVector_OnActorHit::POtherActor' has a wrong offset!");
static_assert(offsetof(TweenVector_OnActorHit, PNormalImpulse) == 0x000010, "Member 'TweenVector_OnActorHit::PNormalImpulse' has a wrong offset!");
static_assert(offsetof(TweenVector_OnActorHit, PHit) == 0x00001C, "Member 'TweenVector_OnActorHit::PHit' has a wrong offset!");

// Function TweenMaker.TweenVector.OnPrimitiveComponentBeginOverlap
// 0x00B0 (0x00B0 - 0x0000)
struct TweenVector_OnPrimitiveComponentBeginOverlap final
{
public:
	class UPrimitiveComponent*                    PThisComponent;                                    // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 POtherActor;                                       // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UPrimitiveComponent*                    POtherComp;                                        // 0x0010(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         POtherBodyIndex;                                   // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bFromSweep;                                        // 0x001C(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1D[0x3];                                       // 0x001D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FHitResult                             PSweepResult;                                      // 0x0020(0x008C)(ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
	uint8                                         Pad_AC[0x4];                                       // 0x00AC(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TweenVector_OnPrimitiveComponentBeginOverlap) == 0x000008, "Wrong alignment on TweenVector_OnPrimitiveComponentBeginOverlap");
static_assert(sizeof(TweenVector_OnPrimitiveComponentBeginOverlap) == 0x0000B0, "Wrong size on TweenVector_OnPrimitiveComponentBeginOverlap");
static_assert(offsetof(TweenVector_OnPrimitiveComponentBeginOverlap, PThisComponent) == 0x000000, "Member 'TweenVector_OnPrimitiveComponentBeginOverlap::PThisComponent' has a wrong offset!");
static_assert(offsetof(TweenVector_OnPrimitiveComponentBeginOverlap, POtherActor) == 0x000008, "Member 'TweenVector_OnPrimitiveComponentBeginOverlap::POtherActor' has a wrong offset!");
static_assert(offsetof(TweenVector_OnPrimitiveComponentBeginOverlap, POtherComp) == 0x000010, "Member 'TweenVector_OnPrimitiveComponentBeginOverlap::POtherComp' has a wrong offset!");
static_assert(offsetof(TweenVector_OnPrimitiveComponentBeginOverlap, POtherBodyIndex) == 0x000018, "Member 'TweenVector_OnPrimitiveComponentBeginOverlap::POtherBodyIndex' has a wrong offset!");
static_assert(offsetof(TweenVector_OnPrimitiveComponentBeginOverlap, bFromSweep) == 0x00001C, "Member 'TweenVector_OnPrimitiveComponentBeginOverlap::bFromSweep' has a wrong offset!");
static_assert(offsetof(TweenVector_OnPrimitiveComponentBeginOverlap, PSweepResult) == 0x000020, "Member 'TweenVector_OnPrimitiveComponentBeginOverlap::PSweepResult' has a wrong offset!");

// Function TweenMaker.TweenVector.OnPrimitiveComponentHit
// 0x00B0 (0x00B0 - 0x0000)
struct TweenVector_OnPrimitiveComponentHit final
{
public:
	class UPrimitiveComponent*                    PThisComponent;                                    // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 POtherActor;                                       // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UPrimitiveComponent*                    POtherComp;                                        // 0x0010(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                PNormalImpulse;                                    // 0x0018(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FHitResult                             PHitResult;                                        // 0x0024(0x008C)(ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(TweenVector_OnPrimitiveComponentHit) == 0x000008, "Wrong alignment on TweenVector_OnPrimitiveComponentHit");
static_assert(sizeof(TweenVector_OnPrimitiveComponentHit) == 0x0000B0, "Wrong size on TweenVector_OnPrimitiveComponentHit");
static_assert(offsetof(TweenVector_OnPrimitiveComponentHit, PThisComponent) == 0x000000, "Member 'TweenVector_OnPrimitiveComponentHit::PThisComponent' has a wrong offset!");
static_assert(offsetof(TweenVector_OnPrimitiveComponentHit, POtherActor) == 0x000008, "Member 'TweenVector_OnPrimitiveComponentHit::POtherActor' has a wrong offset!");
static_assert(offsetof(TweenVector_OnPrimitiveComponentHit, POtherComp) == 0x000010, "Member 'TweenVector_OnPrimitiveComponentHit::POtherComp' has a wrong offset!");
static_assert(offsetof(TweenVector_OnPrimitiveComponentHit, PNormalImpulse) == 0x000018, "Member 'TweenVector_OnPrimitiveComponentHit::PNormalImpulse' has a wrong offset!");
static_assert(offsetof(TweenVector_OnPrimitiveComponentHit, PHitResult) == 0x000024, "Member 'TweenVector_OnPrimitiveComponentHit::PHitResult' has a wrong offset!");

// Function TweenMaker.TweenVector.GetCurrentValue
// 0x000C (0x000C - 0x0000)
struct TweenVector_GetCurrentValue final
{
public:
	struct FVector                                ReturnValue;                                       // 0x0000(0x000C)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TweenVector_GetCurrentValue) == 0x000004, "Wrong alignment on TweenVector_GetCurrentValue");
static_assert(sizeof(TweenVector_GetCurrentValue) == 0x00000C, "Wrong size on TweenVector_GetCurrentValue");
static_assert(offsetof(TweenVector_GetCurrentValue, ReturnValue) == 0x000000, "Member 'TweenVector_GetCurrentValue::ReturnValue' has a wrong offset!");

// Function TweenMaker.TweenVector2D.GetCurrentValue
// 0x0008 (0x0008 - 0x0000)
struct TweenVector2D_GetCurrentValue final
{
public:
	struct FVector2D                              ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TweenVector2D_GetCurrentValue) == 0x000004, "Wrong alignment on TweenVector2D_GetCurrentValue");
static_assert(sizeof(TweenVector2D_GetCurrentValue) == 0x000008, "Wrong size on TweenVector2D_GetCurrentValue");
static_assert(offsetof(TweenVector2D_GetCurrentValue, ReturnValue) == 0x000000, "Member 'TweenVector2D_GetCurrentValue::ReturnValue' has a wrong offset!");

// Function TweenMaker.TweenVector2DLatentFactory.BP_AppendLatentTweenCustomVector2D
// 0x0050 (0x0050 - 0x0000)
struct TweenVector2DLatentFactory_BP_AppendLatentTweenCustomVector2D final
{
public:
	class UTweenContainer*                        TweenContainer;                                    // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UTweenVector2D*                         OutTween;                                          // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UObject*                                TweenTarget;                                       // 0x0010(0x0008)(Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2D                              From;                                              // 0x0018(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2D                              To;                                                // 0x0020(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Duration;                                          // 0x0028(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETweenEaseType                                EaseType;                                          // 0x002C(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2D[0x3];                                       // 0x002D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         NumLoops;                                          // 0x0030(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETweenLoopType                                LoopType;                                          // 0x0034(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_35[0x3];                                       // 0x0035(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Delay;                                             // 0x0038(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TimeScale;                                         // 0x003C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          TweenWhileGameIsPaused;                            // 0x0040(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_41[0x7];                                       // 0x0041(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UTweenVector2DLatentFactory*            ReturnValue;                                       // 0x0048(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TweenVector2DLatentFactory_BP_AppendLatentTweenCustomVector2D) == 0x000008, "Wrong alignment on TweenVector2DLatentFactory_BP_AppendLatentTweenCustomVector2D");
static_assert(sizeof(TweenVector2DLatentFactory_BP_AppendLatentTweenCustomVector2D) == 0x000050, "Wrong size on TweenVector2DLatentFactory_BP_AppendLatentTweenCustomVector2D");
static_assert(offsetof(TweenVector2DLatentFactory_BP_AppendLatentTweenCustomVector2D, TweenContainer) == 0x000000, "Member 'TweenVector2DLatentFactory_BP_AppendLatentTweenCustomVector2D::TweenContainer' has a wrong offset!");
static_assert(offsetof(TweenVector2DLatentFactory_BP_AppendLatentTweenCustomVector2D, OutTween) == 0x000008, "Member 'TweenVector2DLatentFactory_BP_AppendLatentTweenCustomVector2D::OutTween' has a wrong offset!");
static_assert(offsetof(TweenVector2DLatentFactory_BP_AppendLatentTweenCustomVector2D, TweenTarget) == 0x000010, "Member 'TweenVector2DLatentFactory_BP_AppendLatentTweenCustomVector2D::TweenTarget' has a wrong offset!");
static_assert(offsetof(TweenVector2DLatentFactory_BP_AppendLatentTweenCustomVector2D, From) == 0x000018, "Member 'TweenVector2DLatentFactory_BP_AppendLatentTweenCustomVector2D::From' has a wrong offset!");
static_assert(offsetof(TweenVector2DLatentFactory_BP_AppendLatentTweenCustomVector2D, To) == 0x000020, "Member 'TweenVector2DLatentFactory_BP_AppendLatentTweenCustomVector2D::To' has a wrong offset!");
static_assert(offsetof(TweenVector2DLatentFactory_BP_AppendLatentTweenCustomVector2D, Duration) == 0x000028, "Member 'TweenVector2DLatentFactory_BP_AppendLatentTweenCustomVector2D::Duration' has a wrong offset!");
static_assert(offsetof(TweenVector2DLatentFactory_BP_AppendLatentTweenCustomVector2D, EaseType) == 0x00002C, "Member 'TweenVector2DLatentFactory_BP_AppendLatentTweenCustomVector2D::EaseType' has a wrong offset!");
static_assert(offsetof(TweenVector2DLatentFactory_BP_AppendLatentTweenCustomVector2D, NumLoops) == 0x000030, "Member 'TweenVector2DLatentFactory_BP_AppendLatentTweenCustomVector2D::NumLoops' has a wrong offset!");
static_assert(offsetof(TweenVector2DLatentFactory_BP_AppendLatentTweenCustomVector2D, LoopType) == 0x000034, "Member 'TweenVector2DLatentFactory_BP_AppendLatentTweenCustomVector2D::LoopType' has a wrong offset!");
static_assert(offsetof(TweenVector2DLatentFactory_BP_AppendLatentTweenCustomVector2D, Delay) == 0x000038, "Member 'TweenVector2DLatentFactory_BP_AppendLatentTweenCustomVector2D::Delay' has a wrong offset!");
static_assert(offsetof(TweenVector2DLatentFactory_BP_AppendLatentTweenCustomVector2D, TimeScale) == 0x00003C, "Member 'TweenVector2DLatentFactory_BP_AppendLatentTweenCustomVector2D::TimeScale' has a wrong offset!");
static_assert(offsetof(TweenVector2DLatentFactory_BP_AppendLatentTweenCustomVector2D, TweenWhileGameIsPaused) == 0x000040, "Member 'TweenVector2DLatentFactory_BP_AppendLatentTweenCustomVector2D::TweenWhileGameIsPaused' has a wrong offset!");
static_assert(offsetof(TweenVector2DLatentFactory_BP_AppendLatentTweenCustomVector2D, ReturnValue) == 0x000048, "Member 'TweenVector2DLatentFactory_BP_AppendLatentTweenCustomVector2D::ReturnValue' has a wrong offset!");

// Function TweenMaker.TweenVector2DLatentFactory.BP_AppendLatentTweenMoveWidgetBy
// 0x0048 (0x0048 - 0x0000)
struct TweenVector2DLatentFactory_BP_AppendLatentTweenMoveWidgetBy final
{
public:
	class UTweenContainer*                        TweenContainer;                                    // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UTweenVector2D*                         OutTween;                                          // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UWidget*                                TweenTarget;                                       // 0x0010(0x0008)(Parm, OutParm, ZeroConstructor, InstancedReference, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2D                              bY;                                                // 0x0018(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Duration;                                          // 0x0020(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETweenEaseType                                EaseType;                                          // 0x0024(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_25[0x3];                                       // 0x0025(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         NumLoops;                                          // 0x0028(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETweenLoopType                                LoopType;                                          // 0x002C(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2D[0x3];                                       // 0x002D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Delay;                                             // 0x0030(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TimeScale;                                         // 0x0034(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          TweenWhileGameIsPaused;                            // 0x0038(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_39[0x7];                                       // 0x0039(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UTweenVector2DLatentFactory*            ReturnValue;                                       // 0x0040(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TweenVector2DLatentFactory_BP_AppendLatentTweenMoveWidgetBy) == 0x000008, "Wrong alignment on TweenVector2DLatentFactory_BP_AppendLatentTweenMoveWidgetBy");
static_assert(sizeof(TweenVector2DLatentFactory_BP_AppendLatentTweenMoveWidgetBy) == 0x000048, "Wrong size on TweenVector2DLatentFactory_BP_AppendLatentTweenMoveWidgetBy");
static_assert(offsetof(TweenVector2DLatentFactory_BP_AppendLatentTweenMoveWidgetBy, TweenContainer) == 0x000000, "Member 'TweenVector2DLatentFactory_BP_AppendLatentTweenMoveWidgetBy::TweenContainer' has a wrong offset!");
static_assert(offsetof(TweenVector2DLatentFactory_BP_AppendLatentTweenMoveWidgetBy, OutTween) == 0x000008, "Member 'TweenVector2DLatentFactory_BP_AppendLatentTweenMoveWidgetBy::OutTween' has a wrong offset!");
static_assert(offsetof(TweenVector2DLatentFactory_BP_AppendLatentTweenMoveWidgetBy, TweenTarget) == 0x000010, "Member 'TweenVector2DLatentFactory_BP_AppendLatentTweenMoveWidgetBy::TweenTarget' has a wrong offset!");
static_assert(offsetof(TweenVector2DLatentFactory_BP_AppendLatentTweenMoveWidgetBy, bY) == 0x000018, "Member 'TweenVector2DLatentFactory_BP_AppendLatentTweenMoveWidgetBy::bY' has a wrong offset!");
static_assert(offsetof(TweenVector2DLatentFactory_BP_AppendLatentTweenMoveWidgetBy, Duration) == 0x000020, "Member 'TweenVector2DLatentFactory_BP_AppendLatentTweenMoveWidgetBy::Duration' has a wrong offset!");
static_assert(offsetof(TweenVector2DLatentFactory_BP_AppendLatentTweenMoveWidgetBy, EaseType) == 0x000024, "Member 'TweenVector2DLatentFactory_BP_AppendLatentTweenMoveWidgetBy::EaseType' has a wrong offset!");
static_assert(offsetof(TweenVector2DLatentFactory_BP_AppendLatentTweenMoveWidgetBy, NumLoops) == 0x000028, "Member 'TweenVector2DLatentFactory_BP_AppendLatentTweenMoveWidgetBy::NumLoops' has a wrong offset!");
static_assert(offsetof(TweenVector2DLatentFactory_BP_AppendLatentTweenMoveWidgetBy, LoopType) == 0x00002C, "Member 'TweenVector2DLatentFactory_BP_AppendLatentTweenMoveWidgetBy::LoopType' has a wrong offset!");
static_assert(offsetof(TweenVector2DLatentFactory_BP_AppendLatentTweenMoveWidgetBy, Delay) == 0x000030, "Member 'TweenVector2DLatentFactory_BP_AppendLatentTweenMoveWidgetBy::Delay' has a wrong offset!");
static_assert(offsetof(TweenVector2DLatentFactory_BP_AppendLatentTweenMoveWidgetBy, TimeScale) == 0x000034, "Member 'TweenVector2DLatentFactory_BP_AppendLatentTweenMoveWidgetBy::TimeScale' has a wrong offset!");
static_assert(offsetof(TweenVector2DLatentFactory_BP_AppendLatentTweenMoveWidgetBy, TweenWhileGameIsPaused) == 0x000038, "Member 'TweenVector2DLatentFactory_BP_AppendLatentTweenMoveWidgetBy::TweenWhileGameIsPaused' has a wrong offset!");
static_assert(offsetof(TweenVector2DLatentFactory_BP_AppendLatentTweenMoveWidgetBy, ReturnValue) == 0x000040, "Member 'TweenVector2DLatentFactory_BP_AppendLatentTweenMoveWidgetBy::ReturnValue' has a wrong offset!");

// Function TweenMaker.TweenVector2DLatentFactory.BP_AppendLatentTweenMoveWidgetTo
// 0x0048 (0x0048 - 0x0000)
struct TweenVector2DLatentFactory_BP_AppendLatentTweenMoveWidgetTo final
{
public:
	class UTweenContainer*                        TweenContainer;                                    // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UTweenVector2D*                         OutTween;                                          // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UWidget*                                TweenTarget;                                       // 0x0010(0x0008)(Parm, OutParm, ZeroConstructor, InstancedReference, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2D                              To;                                                // 0x0018(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Duration;                                          // 0x0020(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETweenEaseType                                EaseType;                                          // 0x0024(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_25[0x3];                                       // 0x0025(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         NumLoops;                                          // 0x0028(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETweenLoopType                                LoopType;                                          // 0x002C(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2D[0x3];                                       // 0x002D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Delay;                                             // 0x0030(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TimeScale;                                         // 0x0034(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          TweenWhileGameIsPaused;                            // 0x0038(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_39[0x7];                                       // 0x0039(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UTweenVector2DLatentFactory*            ReturnValue;                                       // 0x0040(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TweenVector2DLatentFactory_BP_AppendLatentTweenMoveWidgetTo) == 0x000008, "Wrong alignment on TweenVector2DLatentFactory_BP_AppendLatentTweenMoveWidgetTo");
static_assert(sizeof(TweenVector2DLatentFactory_BP_AppendLatentTweenMoveWidgetTo) == 0x000048, "Wrong size on TweenVector2DLatentFactory_BP_AppendLatentTweenMoveWidgetTo");
static_assert(offsetof(TweenVector2DLatentFactory_BP_AppendLatentTweenMoveWidgetTo, TweenContainer) == 0x000000, "Member 'TweenVector2DLatentFactory_BP_AppendLatentTweenMoveWidgetTo::TweenContainer' has a wrong offset!");
static_assert(offsetof(TweenVector2DLatentFactory_BP_AppendLatentTweenMoveWidgetTo, OutTween) == 0x000008, "Member 'TweenVector2DLatentFactory_BP_AppendLatentTweenMoveWidgetTo::OutTween' has a wrong offset!");
static_assert(offsetof(TweenVector2DLatentFactory_BP_AppendLatentTweenMoveWidgetTo, TweenTarget) == 0x000010, "Member 'TweenVector2DLatentFactory_BP_AppendLatentTweenMoveWidgetTo::TweenTarget' has a wrong offset!");
static_assert(offsetof(TweenVector2DLatentFactory_BP_AppendLatentTweenMoveWidgetTo, To) == 0x000018, "Member 'TweenVector2DLatentFactory_BP_AppendLatentTweenMoveWidgetTo::To' has a wrong offset!");
static_assert(offsetof(TweenVector2DLatentFactory_BP_AppendLatentTweenMoveWidgetTo, Duration) == 0x000020, "Member 'TweenVector2DLatentFactory_BP_AppendLatentTweenMoveWidgetTo::Duration' has a wrong offset!");
static_assert(offsetof(TweenVector2DLatentFactory_BP_AppendLatentTweenMoveWidgetTo, EaseType) == 0x000024, "Member 'TweenVector2DLatentFactory_BP_AppendLatentTweenMoveWidgetTo::EaseType' has a wrong offset!");
static_assert(offsetof(TweenVector2DLatentFactory_BP_AppendLatentTweenMoveWidgetTo, NumLoops) == 0x000028, "Member 'TweenVector2DLatentFactory_BP_AppendLatentTweenMoveWidgetTo::NumLoops' has a wrong offset!");
static_assert(offsetof(TweenVector2DLatentFactory_BP_AppendLatentTweenMoveWidgetTo, LoopType) == 0x00002C, "Member 'TweenVector2DLatentFactory_BP_AppendLatentTweenMoveWidgetTo::LoopType' has a wrong offset!");
static_assert(offsetof(TweenVector2DLatentFactory_BP_AppendLatentTweenMoveWidgetTo, Delay) == 0x000030, "Member 'TweenVector2DLatentFactory_BP_AppendLatentTweenMoveWidgetTo::Delay' has a wrong offset!");
static_assert(offsetof(TweenVector2DLatentFactory_BP_AppendLatentTweenMoveWidgetTo, TimeScale) == 0x000034, "Member 'TweenVector2DLatentFactory_BP_AppendLatentTweenMoveWidgetTo::TimeScale' has a wrong offset!");
static_assert(offsetof(TweenVector2DLatentFactory_BP_AppendLatentTweenMoveWidgetTo, TweenWhileGameIsPaused) == 0x000038, "Member 'TweenVector2DLatentFactory_BP_AppendLatentTweenMoveWidgetTo::TweenWhileGameIsPaused' has a wrong offset!");
static_assert(offsetof(TweenVector2DLatentFactory_BP_AppendLatentTweenMoveWidgetTo, ReturnValue) == 0x000040, "Member 'TweenVector2DLatentFactory_BP_AppendLatentTweenMoveWidgetTo::ReturnValue' has a wrong offset!");

// Function TweenMaker.TweenVector2DLatentFactory.BP_AppendLatentTweenScaleWidgetBy
// 0x0048 (0x0048 - 0x0000)
struct TweenVector2DLatentFactory_BP_AppendLatentTweenScaleWidgetBy final
{
public:
	class UTweenContainer*                        TweenContainer;                                    // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UTweenVector2D*                         OutTween;                                          // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UWidget*                                TweenTarget;                                       // 0x0010(0x0008)(Parm, OutParm, ZeroConstructor, InstancedReference, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2D                              bY;                                                // 0x0018(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Duration;                                          // 0x0020(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETweenEaseType                                EaseType;                                          // 0x0024(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_25[0x3];                                       // 0x0025(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         NumLoops;                                          // 0x0028(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETweenLoopType                                LoopType;                                          // 0x002C(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2D[0x3];                                       // 0x002D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Delay;                                             // 0x0030(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TimeScale;                                         // 0x0034(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          TweenWhileGameIsPaused;                            // 0x0038(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_39[0x7];                                       // 0x0039(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UTweenVector2DLatentFactory*            ReturnValue;                                       // 0x0040(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TweenVector2DLatentFactory_BP_AppendLatentTweenScaleWidgetBy) == 0x000008, "Wrong alignment on TweenVector2DLatentFactory_BP_AppendLatentTweenScaleWidgetBy");
static_assert(sizeof(TweenVector2DLatentFactory_BP_AppendLatentTweenScaleWidgetBy) == 0x000048, "Wrong size on TweenVector2DLatentFactory_BP_AppendLatentTweenScaleWidgetBy");
static_assert(offsetof(TweenVector2DLatentFactory_BP_AppendLatentTweenScaleWidgetBy, TweenContainer) == 0x000000, "Member 'TweenVector2DLatentFactory_BP_AppendLatentTweenScaleWidgetBy::TweenContainer' has a wrong offset!");
static_assert(offsetof(TweenVector2DLatentFactory_BP_AppendLatentTweenScaleWidgetBy, OutTween) == 0x000008, "Member 'TweenVector2DLatentFactory_BP_AppendLatentTweenScaleWidgetBy::OutTween' has a wrong offset!");
static_assert(offsetof(TweenVector2DLatentFactory_BP_AppendLatentTweenScaleWidgetBy, TweenTarget) == 0x000010, "Member 'TweenVector2DLatentFactory_BP_AppendLatentTweenScaleWidgetBy::TweenTarget' has a wrong offset!");
static_assert(offsetof(TweenVector2DLatentFactory_BP_AppendLatentTweenScaleWidgetBy, bY) == 0x000018, "Member 'TweenVector2DLatentFactory_BP_AppendLatentTweenScaleWidgetBy::bY' has a wrong offset!");
static_assert(offsetof(TweenVector2DLatentFactory_BP_AppendLatentTweenScaleWidgetBy, Duration) == 0x000020, "Member 'TweenVector2DLatentFactory_BP_AppendLatentTweenScaleWidgetBy::Duration' has a wrong offset!");
static_assert(offsetof(TweenVector2DLatentFactory_BP_AppendLatentTweenScaleWidgetBy, EaseType) == 0x000024, "Member 'TweenVector2DLatentFactory_BP_AppendLatentTweenScaleWidgetBy::EaseType' has a wrong offset!");
static_assert(offsetof(TweenVector2DLatentFactory_BP_AppendLatentTweenScaleWidgetBy, NumLoops) == 0x000028, "Member 'TweenVector2DLatentFactory_BP_AppendLatentTweenScaleWidgetBy::NumLoops' has a wrong offset!");
static_assert(offsetof(TweenVector2DLatentFactory_BP_AppendLatentTweenScaleWidgetBy, LoopType) == 0x00002C, "Member 'TweenVector2DLatentFactory_BP_AppendLatentTweenScaleWidgetBy::LoopType' has a wrong offset!");
static_assert(offsetof(TweenVector2DLatentFactory_BP_AppendLatentTweenScaleWidgetBy, Delay) == 0x000030, "Member 'TweenVector2DLatentFactory_BP_AppendLatentTweenScaleWidgetBy::Delay' has a wrong offset!");
static_assert(offsetof(TweenVector2DLatentFactory_BP_AppendLatentTweenScaleWidgetBy, TimeScale) == 0x000034, "Member 'TweenVector2DLatentFactory_BP_AppendLatentTweenScaleWidgetBy::TimeScale' has a wrong offset!");
static_assert(offsetof(TweenVector2DLatentFactory_BP_AppendLatentTweenScaleWidgetBy, TweenWhileGameIsPaused) == 0x000038, "Member 'TweenVector2DLatentFactory_BP_AppendLatentTweenScaleWidgetBy::TweenWhileGameIsPaused' has a wrong offset!");
static_assert(offsetof(TweenVector2DLatentFactory_BP_AppendLatentTweenScaleWidgetBy, ReturnValue) == 0x000040, "Member 'TweenVector2DLatentFactory_BP_AppendLatentTweenScaleWidgetBy::ReturnValue' has a wrong offset!");

// Function TweenMaker.TweenVector2DLatentFactory.BP_AppendLatentTweenScaleWidgetTo
// 0x0048 (0x0048 - 0x0000)
struct TweenVector2DLatentFactory_BP_AppendLatentTweenScaleWidgetTo final
{
public:
	class UTweenContainer*                        TweenContainer;                                    // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UTweenVector2D*                         OutTween;                                          // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UWidget*                                TweenTarget;                                       // 0x0010(0x0008)(Parm, OutParm, ZeroConstructor, InstancedReference, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2D                              To;                                                // 0x0018(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Duration;                                          // 0x0020(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETweenEaseType                                EaseType;                                          // 0x0024(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_25[0x3];                                       // 0x0025(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         NumLoops;                                          // 0x0028(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETweenLoopType                                LoopType;                                          // 0x002C(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2D[0x3];                                       // 0x002D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Delay;                                             // 0x0030(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TimeScale;                                         // 0x0034(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          TweenWhileGameIsPaused;                            // 0x0038(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_39[0x7];                                       // 0x0039(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UTweenVector2DLatentFactory*            ReturnValue;                                       // 0x0040(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TweenVector2DLatentFactory_BP_AppendLatentTweenScaleWidgetTo) == 0x000008, "Wrong alignment on TweenVector2DLatentFactory_BP_AppendLatentTweenScaleWidgetTo");
static_assert(sizeof(TweenVector2DLatentFactory_BP_AppendLatentTweenScaleWidgetTo) == 0x000048, "Wrong size on TweenVector2DLatentFactory_BP_AppendLatentTweenScaleWidgetTo");
static_assert(offsetof(TweenVector2DLatentFactory_BP_AppendLatentTweenScaleWidgetTo, TweenContainer) == 0x000000, "Member 'TweenVector2DLatentFactory_BP_AppendLatentTweenScaleWidgetTo::TweenContainer' has a wrong offset!");
static_assert(offsetof(TweenVector2DLatentFactory_BP_AppendLatentTweenScaleWidgetTo, OutTween) == 0x000008, "Member 'TweenVector2DLatentFactory_BP_AppendLatentTweenScaleWidgetTo::OutTween' has a wrong offset!");
static_assert(offsetof(TweenVector2DLatentFactory_BP_AppendLatentTweenScaleWidgetTo, TweenTarget) == 0x000010, "Member 'TweenVector2DLatentFactory_BP_AppendLatentTweenScaleWidgetTo::TweenTarget' has a wrong offset!");
static_assert(offsetof(TweenVector2DLatentFactory_BP_AppendLatentTweenScaleWidgetTo, To) == 0x000018, "Member 'TweenVector2DLatentFactory_BP_AppendLatentTweenScaleWidgetTo::To' has a wrong offset!");
static_assert(offsetof(TweenVector2DLatentFactory_BP_AppendLatentTweenScaleWidgetTo, Duration) == 0x000020, "Member 'TweenVector2DLatentFactory_BP_AppendLatentTweenScaleWidgetTo::Duration' has a wrong offset!");
static_assert(offsetof(TweenVector2DLatentFactory_BP_AppendLatentTweenScaleWidgetTo, EaseType) == 0x000024, "Member 'TweenVector2DLatentFactory_BP_AppendLatentTweenScaleWidgetTo::EaseType' has a wrong offset!");
static_assert(offsetof(TweenVector2DLatentFactory_BP_AppendLatentTweenScaleWidgetTo, NumLoops) == 0x000028, "Member 'TweenVector2DLatentFactory_BP_AppendLatentTweenScaleWidgetTo::NumLoops' has a wrong offset!");
static_assert(offsetof(TweenVector2DLatentFactory_BP_AppendLatentTweenScaleWidgetTo, LoopType) == 0x00002C, "Member 'TweenVector2DLatentFactory_BP_AppendLatentTweenScaleWidgetTo::LoopType' has a wrong offset!");
static_assert(offsetof(TweenVector2DLatentFactory_BP_AppendLatentTweenScaleWidgetTo, Delay) == 0x000030, "Member 'TweenVector2DLatentFactory_BP_AppendLatentTweenScaleWidgetTo::Delay' has a wrong offset!");
static_assert(offsetof(TweenVector2DLatentFactory_BP_AppendLatentTweenScaleWidgetTo, TimeScale) == 0x000034, "Member 'TweenVector2DLatentFactory_BP_AppendLatentTweenScaleWidgetTo::TimeScale' has a wrong offset!");
static_assert(offsetof(TweenVector2DLatentFactory_BP_AppendLatentTweenScaleWidgetTo, TweenWhileGameIsPaused) == 0x000038, "Member 'TweenVector2DLatentFactory_BP_AppendLatentTweenScaleWidgetTo::TweenWhileGameIsPaused' has a wrong offset!");
static_assert(offsetof(TweenVector2DLatentFactory_BP_AppendLatentTweenScaleWidgetTo, ReturnValue) == 0x000040, "Member 'TweenVector2DLatentFactory_BP_AppendLatentTweenScaleWidgetTo::ReturnValue' has a wrong offset!");

// Function TweenMaker.TweenVector2DLatentFactory.BP_AppendLatentTweenShearWidgetTo
// 0x0048 (0x0048 - 0x0000)
struct TweenVector2DLatentFactory_BP_AppendLatentTweenShearWidgetTo final
{
public:
	class UTweenContainer*                        TweenContainer;                                    // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UTweenVector2D*                         OutTween;                                          // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UWidget*                                TweenTarget;                                       // 0x0010(0x0008)(Parm, OutParm, ZeroConstructor, InstancedReference, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2D                              To;                                                // 0x0018(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Duration;                                          // 0x0020(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETweenEaseType                                EaseType;                                          // 0x0024(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_25[0x3];                                       // 0x0025(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         NumLoops;                                          // 0x0028(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETweenLoopType                                LoopType;                                          // 0x002C(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2D[0x3];                                       // 0x002D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Delay;                                             // 0x0030(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TimeScale;                                         // 0x0034(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          TweenWhileGameIsPaused;                            // 0x0038(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_39[0x7];                                       // 0x0039(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UTweenVector2DLatentFactory*            ReturnValue;                                       // 0x0040(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TweenVector2DLatentFactory_BP_AppendLatentTweenShearWidgetTo) == 0x000008, "Wrong alignment on TweenVector2DLatentFactory_BP_AppendLatentTweenShearWidgetTo");
static_assert(sizeof(TweenVector2DLatentFactory_BP_AppendLatentTweenShearWidgetTo) == 0x000048, "Wrong size on TweenVector2DLatentFactory_BP_AppendLatentTweenShearWidgetTo");
static_assert(offsetof(TweenVector2DLatentFactory_BP_AppendLatentTweenShearWidgetTo, TweenContainer) == 0x000000, "Member 'TweenVector2DLatentFactory_BP_AppendLatentTweenShearWidgetTo::TweenContainer' has a wrong offset!");
static_assert(offsetof(TweenVector2DLatentFactory_BP_AppendLatentTweenShearWidgetTo, OutTween) == 0x000008, "Member 'TweenVector2DLatentFactory_BP_AppendLatentTweenShearWidgetTo::OutTween' has a wrong offset!");
static_assert(offsetof(TweenVector2DLatentFactory_BP_AppendLatentTweenShearWidgetTo, TweenTarget) == 0x000010, "Member 'TweenVector2DLatentFactory_BP_AppendLatentTweenShearWidgetTo::TweenTarget' has a wrong offset!");
static_assert(offsetof(TweenVector2DLatentFactory_BP_AppendLatentTweenShearWidgetTo, To) == 0x000018, "Member 'TweenVector2DLatentFactory_BP_AppendLatentTweenShearWidgetTo::To' has a wrong offset!");
static_assert(offsetof(TweenVector2DLatentFactory_BP_AppendLatentTweenShearWidgetTo, Duration) == 0x000020, "Member 'TweenVector2DLatentFactory_BP_AppendLatentTweenShearWidgetTo::Duration' has a wrong offset!");
static_assert(offsetof(TweenVector2DLatentFactory_BP_AppendLatentTweenShearWidgetTo, EaseType) == 0x000024, "Member 'TweenVector2DLatentFactory_BP_AppendLatentTweenShearWidgetTo::EaseType' has a wrong offset!");
static_assert(offsetof(TweenVector2DLatentFactory_BP_AppendLatentTweenShearWidgetTo, NumLoops) == 0x000028, "Member 'TweenVector2DLatentFactory_BP_AppendLatentTweenShearWidgetTo::NumLoops' has a wrong offset!");
static_assert(offsetof(TweenVector2DLatentFactory_BP_AppendLatentTweenShearWidgetTo, LoopType) == 0x00002C, "Member 'TweenVector2DLatentFactory_BP_AppendLatentTweenShearWidgetTo::LoopType' has a wrong offset!");
static_assert(offsetof(TweenVector2DLatentFactory_BP_AppendLatentTweenShearWidgetTo, Delay) == 0x000030, "Member 'TweenVector2DLatentFactory_BP_AppendLatentTweenShearWidgetTo::Delay' has a wrong offset!");
static_assert(offsetof(TweenVector2DLatentFactory_BP_AppendLatentTweenShearWidgetTo, TimeScale) == 0x000034, "Member 'TweenVector2DLatentFactory_BP_AppendLatentTweenShearWidgetTo::TimeScale' has a wrong offset!");
static_assert(offsetof(TweenVector2DLatentFactory_BP_AppendLatentTweenShearWidgetTo, TweenWhileGameIsPaused) == 0x000038, "Member 'TweenVector2DLatentFactory_BP_AppendLatentTweenShearWidgetTo::TweenWhileGameIsPaused' has a wrong offset!");
static_assert(offsetof(TweenVector2DLatentFactory_BP_AppendLatentTweenShearWidgetTo, ReturnValue) == 0x000040, "Member 'TweenVector2DLatentFactory_BP_AppendLatentTweenShearWidgetTo::ReturnValue' has a wrong offset!");

// Function TweenMaker.TweenVector2DLatentFactory.BP_CreateLatentTweenCustomVector2D
// 0x0058 (0x0058 - 0x0000)
struct TweenVector2DLatentFactory_BP_CreateLatentTweenCustomVector2D final
{
public:
	class UTweenManagerComponent*                 TweenManager;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UObject*                                TweenTarget;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UTweenContainer*                        OutTweenContainer;                                 // 0x0010(0x0008)(Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UTweenVector2D*                         OutTween;                                          // 0x0018(0x0008)(Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2D                              From;                                              // 0x0020(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2D                              To;                                                // 0x0028(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Duration;                                          // 0x0030(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETweenEaseType                                EaseType;                                          // 0x0034(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_35[0x3];                                       // 0x0035(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         NumLoops;                                          // 0x0038(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETweenLoopType                                LoopType;                                          // 0x003C(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_3D[0x3];                                       // 0x003D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Delay;                                             // 0x0040(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TimeScale;                                         // 0x0044(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          TweenWhileGameIsPaused;                            // 0x0048(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_49[0x7];                                       // 0x0049(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UTweenVector2DLatentFactory*            ReturnValue;                                       // 0x0050(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TweenVector2DLatentFactory_BP_CreateLatentTweenCustomVector2D) == 0x000008, "Wrong alignment on TweenVector2DLatentFactory_BP_CreateLatentTweenCustomVector2D");
static_assert(sizeof(TweenVector2DLatentFactory_BP_CreateLatentTweenCustomVector2D) == 0x000058, "Wrong size on TweenVector2DLatentFactory_BP_CreateLatentTweenCustomVector2D");
static_assert(offsetof(TweenVector2DLatentFactory_BP_CreateLatentTweenCustomVector2D, TweenManager) == 0x000000, "Member 'TweenVector2DLatentFactory_BP_CreateLatentTweenCustomVector2D::TweenManager' has a wrong offset!");
static_assert(offsetof(TweenVector2DLatentFactory_BP_CreateLatentTweenCustomVector2D, TweenTarget) == 0x000008, "Member 'TweenVector2DLatentFactory_BP_CreateLatentTweenCustomVector2D::TweenTarget' has a wrong offset!");
static_assert(offsetof(TweenVector2DLatentFactory_BP_CreateLatentTweenCustomVector2D, OutTweenContainer) == 0x000010, "Member 'TweenVector2DLatentFactory_BP_CreateLatentTweenCustomVector2D::OutTweenContainer' has a wrong offset!");
static_assert(offsetof(TweenVector2DLatentFactory_BP_CreateLatentTweenCustomVector2D, OutTween) == 0x000018, "Member 'TweenVector2DLatentFactory_BP_CreateLatentTweenCustomVector2D::OutTween' has a wrong offset!");
static_assert(offsetof(TweenVector2DLatentFactory_BP_CreateLatentTweenCustomVector2D, From) == 0x000020, "Member 'TweenVector2DLatentFactory_BP_CreateLatentTweenCustomVector2D::From' has a wrong offset!");
static_assert(offsetof(TweenVector2DLatentFactory_BP_CreateLatentTweenCustomVector2D, To) == 0x000028, "Member 'TweenVector2DLatentFactory_BP_CreateLatentTweenCustomVector2D::To' has a wrong offset!");
static_assert(offsetof(TweenVector2DLatentFactory_BP_CreateLatentTweenCustomVector2D, Duration) == 0x000030, "Member 'TweenVector2DLatentFactory_BP_CreateLatentTweenCustomVector2D::Duration' has a wrong offset!");
static_assert(offsetof(TweenVector2DLatentFactory_BP_CreateLatentTweenCustomVector2D, EaseType) == 0x000034, "Member 'TweenVector2DLatentFactory_BP_CreateLatentTweenCustomVector2D::EaseType' has a wrong offset!");
static_assert(offsetof(TweenVector2DLatentFactory_BP_CreateLatentTweenCustomVector2D, NumLoops) == 0x000038, "Member 'TweenVector2DLatentFactory_BP_CreateLatentTweenCustomVector2D::NumLoops' has a wrong offset!");
static_assert(offsetof(TweenVector2DLatentFactory_BP_CreateLatentTweenCustomVector2D, LoopType) == 0x00003C, "Member 'TweenVector2DLatentFactory_BP_CreateLatentTweenCustomVector2D::LoopType' has a wrong offset!");
static_assert(offsetof(TweenVector2DLatentFactory_BP_CreateLatentTweenCustomVector2D, Delay) == 0x000040, "Member 'TweenVector2DLatentFactory_BP_CreateLatentTweenCustomVector2D::Delay' has a wrong offset!");
static_assert(offsetof(TweenVector2DLatentFactory_BP_CreateLatentTweenCustomVector2D, TimeScale) == 0x000044, "Member 'TweenVector2DLatentFactory_BP_CreateLatentTweenCustomVector2D::TimeScale' has a wrong offset!");
static_assert(offsetof(TweenVector2DLatentFactory_BP_CreateLatentTweenCustomVector2D, TweenWhileGameIsPaused) == 0x000048, "Member 'TweenVector2DLatentFactory_BP_CreateLatentTweenCustomVector2D::TweenWhileGameIsPaused' has a wrong offset!");
static_assert(offsetof(TweenVector2DLatentFactory_BP_CreateLatentTweenCustomVector2D, ReturnValue) == 0x000050, "Member 'TweenVector2DLatentFactory_BP_CreateLatentTweenCustomVector2D::ReturnValue' has a wrong offset!");

// Function TweenMaker.TweenVector2DLatentFactory.BP_CreateLatentTweenMoveWidgetBy
// 0x0050 (0x0050 - 0x0000)
struct TweenVector2DLatentFactory_BP_CreateLatentTweenMoveWidgetBy final
{
public:
	class UTweenManagerComponent*                 TweenManager;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UWidget*                                TweenTarget;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, InstancedReference, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UTweenContainer*                        OutTweenContainer;                                 // 0x0010(0x0008)(Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UTweenVector2D*                         OutTween;                                          // 0x0018(0x0008)(Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2D                              bY;                                                // 0x0020(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Duration;                                          // 0x0028(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETweenEaseType                                EaseType;                                          // 0x002C(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2D[0x3];                                       // 0x002D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         NumLoops;                                          // 0x0030(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETweenLoopType                                LoopType;                                          // 0x0034(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_35[0x3];                                       // 0x0035(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Delay;                                             // 0x0038(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TimeScale;                                         // 0x003C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          TweenWhileGameIsPaused;                            // 0x0040(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_41[0x7];                                       // 0x0041(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UTweenVector2DLatentFactory*            ReturnValue;                                       // 0x0048(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TweenVector2DLatentFactory_BP_CreateLatentTweenMoveWidgetBy) == 0x000008, "Wrong alignment on TweenVector2DLatentFactory_BP_CreateLatentTweenMoveWidgetBy");
static_assert(sizeof(TweenVector2DLatentFactory_BP_CreateLatentTweenMoveWidgetBy) == 0x000050, "Wrong size on TweenVector2DLatentFactory_BP_CreateLatentTweenMoveWidgetBy");
static_assert(offsetof(TweenVector2DLatentFactory_BP_CreateLatentTweenMoveWidgetBy, TweenManager) == 0x000000, "Member 'TweenVector2DLatentFactory_BP_CreateLatentTweenMoveWidgetBy::TweenManager' has a wrong offset!");
static_assert(offsetof(TweenVector2DLatentFactory_BP_CreateLatentTweenMoveWidgetBy, TweenTarget) == 0x000008, "Member 'TweenVector2DLatentFactory_BP_CreateLatentTweenMoveWidgetBy::TweenTarget' has a wrong offset!");
static_assert(offsetof(TweenVector2DLatentFactory_BP_CreateLatentTweenMoveWidgetBy, OutTweenContainer) == 0x000010, "Member 'TweenVector2DLatentFactory_BP_CreateLatentTweenMoveWidgetBy::OutTweenContainer' has a wrong offset!");
static_assert(offsetof(TweenVector2DLatentFactory_BP_CreateLatentTweenMoveWidgetBy, OutTween) == 0x000018, "Member 'TweenVector2DLatentFactory_BP_CreateLatentTweenMoveWidgetBy::OutTween' has a wrong offset!");
static_assert(offsetof(TweenVector2DLatentFactory_BP_CreateLatentTweenMoveWidgetBy, bY) == 0x000020, "Member 'TweenVector2DLatentFactory_BP_CreateLatentTweenMoveWidgetBy::bY' has a wrong offset!");
static_assert(offsetof(TweenVector2DLatentFactory_BP_CreateLatentTweenMoveWidgetBy, Duration) == 0x000028, "Member 'TweenVector2DLatentFactory_BP_CreateLatentTweenMoveWidgetBy::Duration' has a wrong offset!");
static_assert(offsetof(TweenVector2DLatentFactory_BP_CreateLatentTweenMoveWidgetBy, EaseType) == 0x00002C, "Member 'TweenVector2DLatentFactory_BP_CreateLatentTweenMoveWidgetBy::EaseType' has a wrong offset!");
static_assert(offsetof(TweenVector2DLatentFactory_BP_CreateLatentTweenMoveWidgetBy, NumLoops) == 0x000030, "Member 'TweenVector2DLatentFactory_BP_CreateLatentTweenMoveWidgetBy::NumLoops' has a wrong offset!");
static_assert(offsetof(TweenVector2DLatentFactory_BP_CreateLatentTweenMoveWidgetBy, LoopType) == 0x000034, "Member 'TweenVector2DLatentFactory_BP_CreateLatentTweenMoveWidgetBy::LoopType' has a wrong offset!");
static_assert(offsetof(TweenVector2DLatentFactory_BP_CreateLatentTweenMoveWidgetBy, Delay) == 0x000038, "Member 'TweenVector2DLatentFactory_BP_CreateLatentTweenMoveWidgetBy::Delay' has a wrong offset!");
static_assert(offsetof(TweenVector2DLatentFactory_BP_CreateLatentTweenMoveWidgetBy, TimeScale) == 0x00003C, "Member 'TweenVector2DLatentFactory_BP_CreateLatentTweenMoveWidgetBy::TimeScale' has a wrong offset!");
static_assert(offsetof(TweenVector2DLatentFactory_BP_CreateLatentTweenMoveWidgetBy, TweenWhileGameIsPaused) == 0x000040, "Member 'TweenVector2DLatentFactory_BP_CreateLatentTweenMoveWidgetBy::TweenWhileGameIsPaused' has a wrong offset!");
static_assert(offsetof(TweenVector2DLatentFactory_BP_CreateLatentTweenMoveWidgetBy, ReturnValue) == 0x000048, "Member 'TweenVector2DLatentFactory_BP_CreateLatentTweenMoveWidgetBy::ReturnValue' has a wrong offset!");

// Function TweenMaker.TweenVector2DLatentFactory.BP_CreateLatentTweenMoveWidgetTo
// 0x0050 (0x0050 - 0x0000)
struct TweenVector2DLatentFactory_BP_CreateLatentTweenMoveWidgetTo final
{
public:
	class UTweenManagerComponent*                 TweenManager;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UWidget*                                TweenTarget;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, InstancedReference, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UTweenContainer*                        OutTweenContainer;                                 // 0x0010(0x0008)(Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UTweenVector2D*                         OutTween;                                          // 0x0018(0x0008)(Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2D                              To;                                                // 0x0020(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Duration;                                          // 0x0028(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETweenEaseType                                EaseType;                                          // 0x002C(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2D[0x3];                                       // 0x002D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         NumLoops;                                          // 0x0030(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETweenLoopType                                LoopType;                                          // 0x0034(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_35[0x3];                                       // 0x0035(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Delay;                                             // 0x0038(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TimeScale;                                         // 0x003C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          TweenWhileGameIsPaused;                            // 0x0040(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_41[0x7];                                       // 0x0041(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UTweenVector2DLatentFactory*            ReturnValue;                                       // 0x0048(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TweenVector2DLatentFactory_BP_CreateLatentTweenMoveWidgetTo) == 0x000008, "Wrong alignment on TweenVector2DLatentFactory_BP_CreateLatentTweenMoveWidgetTo");
static_assert(sizeof(TweenVector2DLatentFactory_BP_CreateLatentTweenMoveWidgetTo) == 0x000050, "Wrong size on TweenVector2DLatentFactory_BP_CreateLatentTweenMoveWidgetTo");
static_assert(offsetof(TweenVector2DLatentFactory_BP_CreateLatentTweenMoveWidgetTo, TweenManager) == 0x000000, "Member 'TweenVector2DLatentFactory_BP_CreateLatentTweenMoveWidgetTo::TweenManager' has a wrong offset!");
static_assert(offsetof(TweenVector2DLatentFactory_BP_CreateLatentTweenMoveWidgetTo, TweenTarget) == 0x000008, "Member 'TweenVector2DLatentFactory_BP_CreateLatentTweenMoveWidgetTo::TweenTarget' has a wrong offset!");
static_assert(offsetof(TweenVector2DLatentFactory_BP_CreateLatentTweenMoveWidgetTo, OutTweenContainer) == 0x000010, "Member 'TweenVector2DLatentFactory_BP_CreateLatentTweenMoveWidgetTo::OutTweenContainer' has a wrong offset!");
static_assert(offsetof(TweenVector2DLatentFactory_BP_CreateLatentTweenMoveWidgetTo, OutTween) == 0x000018, "Member 'TweenVector2DLatentFactory_BP_CreateLatentTweenMoveWidgetTo::OutTween' has a wrong offset!");
static_assert(offsetof(TweenVector2DLatentFactory_BP_CreateLatentTweenMoveWidgetTo, To) == 0x000020, "Member 'TweenVector2DLatentFactory_BP_CreateLatentTweenMoveWidgetTo::To' has a wrong offset!");
static_assert(offsetof(TweenVector2DLatentFactory_BP_CreateLatentTweenMoveWidgetTo, Duration) == 0x000028, "Member 'TweenVector2DLatentFactory_BP_CreateLatentTweenMoveWidgetTo::Duration' has a wrong offset!");
static_assert(offsetof(TweenVector2DLatentFactory_BP_CreateLatentTweenMoveWidgetTo, EaseType) == 0x00002C, "Member 'TweenVector2DLatentFactory_BP_CreateLatentTweenMoveWidgetTo::EaseType' has a wrong offset!");
static_assert(offsetof(TweenVector2DLatentFactory_BP_CreateLatentTweenMoveWidgetTo, NumLoops) == 0x000030, "Member 'TweenVector2DLatentFactory_BP_CreateLatentTweenMoveWidgetTo::NumLoops' has a wrong offset!");
static_assert(offsetof(TweenVector2DLatentFactory_BP_CreateLatentTweenMoveWidgetTo, LoopType) == 0x000034, "Member 'TweenVector2DLatentFactory_BP_CreateLatentTweenMoveWidgetTo::LoopType' has a wrong offset!");
static_assert(offsetof(TweenVector2DLatentFactory_BP_CreateLatentTweenMoveWidgetTo, Delay) == 0x000038, "Member 'TweenVector2DLatentFactory_BP_CreateLatentTweenMoveWidgetTo::Delay' has a wrong offset!");
static_assert(offsetof(TweenVector2DLatentFactory_BP_CreateLatentTweenMoveWidgetTo, TimeScale) == 0x00003C, "Member 'TweenVector2DLatentFactory_BP_CreateLatentTweenMoveWidgetTo::TimeScale' has a wrong offset!");
static_assert(offsetof(TweenVector2DLatentFactory_BP_CreateLatentTweenMoveWidgetTo, TweenWhileGameIsPaused) == 0x000040, "Member 'TweenVector2DLatentFactory_BP_CreateLatentTweenMoveWidgetTo::TweenWhileGameIsPaused' has a wrong offset!");
static_assert(offsetof(TweenVector2DLatentFactory_BP_CreateLatentTweenMoveWidgetTo, ReturnValue) == 0x000048, "Member 'TweenVector2DLatentFactory_BP_CreateLatentTweenMoveWidgetTo::ReturnValue' has a wrong offset!");

// Function TweenMaker.TweenVector2DLatentFactory.BP_CreateLatentTweenScaleWidgetBy
// 0x0050 (0x0050 - 0x0000)
struct TweenVector2DLatentFactory_BP_CreateLatentTweenScaleWidgetBy final
{
public:
	class UTweenManagerComponent*                 TweenManager;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UWidget*                                TweenTarget;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, InstancedReference, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UTweenContainer*                        OutTweenContainer;                                 // 0x0010(0x0008)(Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UTweenVector2D*                         OutTween;                                          // 0x0018(0x0008)(Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2D                              bY;                                                // 0x0020(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Duration;                                          // 0x0028(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETweenEaseType                                EaseType;                                          // 0x002C(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2D[0x3];                                       // 0x002D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         NumLoops;                                          // 0x0030(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETweenLoopType                                LoopType;                                          // 0x0034(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_35[0x3];                                       // 0x0035(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Delay;                                             // 0x0038(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TimeScale;                                         // 0x003C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          TweenWhileGameIsPaused;                            // 0x0040(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_41[0x7];                                       // 0x0041(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UTweenVector2DLatentFactory*            ReturnValue;                                       // 0x0048(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TweenVector2DLatentFactory_BP_CreateLatentTweenScaleWidgetBy) == 0x000008, "Wrong alignment on TweenVector2DLatentFactory_BP_CreateLatentTweenScaleWidgetBy");
static_assert(sizeof(TweenVector2DLatentFactory_BP_CreateLatentTweenScaleWidgetBy) == 0x000050, "Wrong size on TweenVector2DLatentFactory_BP_CreateLatentTweenScaleWidgetBy");
static_assert(offsetof(TweenVector2DLatentFactory_BP_CreateLatentTweenScaleWidgetBy, TweenManager) == 0x000000, "Member 'TweenVector2DLatentFactory_BP_CreateLatentTweenScaleWidgetBy::TweenManager' has a wrong offset!");
static_assert(offsetof(TweenVector2DLatentFactory_BP_CreateLatentTweenScaleWidgetBy, TweenTarget) == 0x000008, "Member 'TweenVector2DLatentFactory_BP_CreateLatentTweenScaleWidgetBy::TweenTarget' has a wrong offset!");
static_assert(offsetof(TweenVector2DLatentFactory_BP_CreateLatentTweenScaleWidgetBy, OutTweenContainer) == 0x000010, "Member 'TweenVector2DLatentFactory_BP_CreateLatentTweenScaleWidgetBy::OutTweenContainer' has a wrong offset!");
static_assert(offsetof(TweenVector2DLatentFactory_BP_CreateLatentTweenScaleWidgetBy, OutTween) == 0x000018, "Member 'TweenVector2DLatentFactory_BP_CreateLatentTweenScaleWidgetBy::OutTween' has a wrong offset!");
static_assert(offsetof(TweenVector2DLatentFactory_BP_CreateLatentTweenScaleWidgetBy, bY) == 0x000020, "Member 'TweenVector2DLatentFactory_BP_CreateLatentTweenScaleWidgetBy::bY' has a wrong offset!");
static_assert(offsetof(TweenVector2DLatentFactory_BP_CreateLatentTweenScaleWidgetBy, Duration) == 0x000028, "Member 'TweenVector2DLatentFactory_BP_CreateLatentTweenScaleWidgetBy::Duration' has a wrong offset!");
static_assert(offsetof(TweenVector2DLatentFactory_BP_CreateLatentTweenScaleWidgetBy, EaseType) == 0x00002C, "Member 'TweenVector2DLatentFactory_BP_CreateLatentTweenScaleWidgetBy::EaseType' has a wrong offset!");
static_assert(offsetof(TweenVector2DLatentFactory_BP_CreateLatentTweenScaleWidgetBy, NumLoops) == 0x000030, "Member 'TweenVector2DLatentFactory_BP_CreateLatentTweenScaleWidgetBy::NumLoops' has a wrong offset!");
static_assert(offsetof(TweenVector2DLatentFactory_BP_CreateLatentTweenScaleWidgetBy, LoopType) == 0x000034, "Member 'TweenVector2DLatentFactory_BP_CreateLatentTweenScaleWidgetBy::LoopType' has a wrong offset!");
static_assert(offsetof(TweenVector2DLatentFactory_BP_CreateLatentTweenScaleWidgetBy, Delay) == 0x000038, "Member 'TweenVector2DLatentFactory_BP_CreateLatentTweenScaleWidgetBy::Delay' has a wrong offset!");
static_assert(offsetof(TweenVector2DLatentFactory_BP_CreateLatentTweenScaleWidgetBy, TimeScale) == 0x00003C, "Member 'TweenVector2DLatentFactory_BP_CreateLatentTweenScaleWidgetBy::TimeScale' has a wrong offset!");
static_assert(offsetof(TweenVector2DLatentFactory_BP_CreateLatentTweenScaleWidgetBy, TweenWhileGameIsPaused) == 0x000040, "Member 'TweenVector2DLatentFactory_BP_CreateLatentTweenScaleWidgetBy::TweenWhileGameIsPaused' has a wrong offset!");
static_assert(offsetof(TweenVector2DLatentFactory_BP_CreateLatentTweenScaleWidgetBy, ReturnValue) == 0x000048, "Member 'TweenVector2DLatentFactory_BP_CreateLatentTweenScaleWidgetBy::ReturnValue' has a wrong offset!");

// Function TweenMaker.TweenVector2DLatentFactory.BP_CreateLatentTweenScaleWidgetTo
// 0x0050 (0x0050 - 0x0000)
struct TweenVector2DLatentFactory_BP_CreateLatentTweenScaleWidgetTo final
{
public:
	class UTweenManagerComponent*                 TweenManager;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UWidget*                                TweenTarget;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, InstancedReference, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UTweenContainer*                        OutTweenContainer;                                 // 0x0010(0x0008)(Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UTweenVector2D*                         OutTween;                                          // 0x0018(0x0008)(Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2D                              To;                                                // 0x0020(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Duration;                                          // 0x0028(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETweenEaseType                                EaseType;                                          // 0x002C(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2D[0x3];                                       // 0x002D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         NumLoops;                                          // 0x0030(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETweenLoopType                                LoopType;                                          // 0x0034(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_35[0x3];                                       // 0x0035(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Delay;                                             // 0x0038(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TimeScale;                                         // 0x003C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          TweenWhileGameIsPaused;                            // 0x0040(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_41[0x7];                                       // 0x0041(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UTweenVector2DLatentFactory*            ReturnValue;                                       // 0x0048(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TweenVector2DLatentFactory_BP_CreateLatentTweenScaleWidgetTo) == 0x000008, "Wrong alignment on TweenVector2DLatentFactory_BP_CreateLatentTweenScaleWidgetTo");
static_assert(sizeof(TweenVector2DLatentFactory_BP_CreateLatentTweenScaleWidgetTo) == 0x000050, "Wrong size on TweenVector2DLatentFactory_BP_CreateLatentTweenScaleWidgetTo");
static_assert(offsetof(TweenVector2DLatentFactory_BP_CreateLatentTweenScaleWidgetTo, TweenManager) == 0x000000, "Member 'TweenVector2DLatentFactory_BP_CreateLatentTweenScaleWidgetTo::TweenManager' has a wrong offset!");
static_assert(offsetof(TweenVector2DLatentFactory_BP_CreateLatentTweenScaleWidgetTo, TweenTarget) == 0x000008, "Member 'TweenVector2DLatentFactory_BP_CreateLatentTweenScaleWidgetTo::TweenTarget' has a wrong offset!");
static_assert(offsetof(TweenVector2DLatentFactory_BP_CreateLatentTweenScaleWidgetTo, OutTweenContainer) == 0x000010, "Member 'TweenVector2DLatentFactory_BP_CreateLatentTweenScaleWidgetTo::OutTweenContainer' has a wrong offset!");
static_assert(offsetof(TweenVector2DLatentFactory_BP_CreateLatentTweenScaleWidgetTo, OutTween) == 0x000018, "Member 'TweenVector2DLatentFactory_BP_CreateLatentTweenScaleWidgetTo::OutTween' has a wrong offset!");
static_assert(offsetof(TweenVector2DLatentFactory_BP_CreateLatentTweenScaleWidgetTo, To) == 0x000020, "Member 'TweenVector2DLatentFactory_BP_CreateLatentTweenScaleWidgetTo::To' has a wrong offset!");
static_assert(offsetof(TweenVector2DLatentFactory_BP_CreateLatentTweenScaleWidgetTo, Duration) == 0x000028, "Member 'TweenVector2DLatentFactory_BP_CreateLatentTweenScaleWidgetTo::Duration' has a wrong offset!");
static_assert(offsetof(TweenVector2DLatentFactory_BP_CreateLatentTweenScaleWidgetTo, EaseType) == 0x00002C, "Member 'TweenVector2DLatentFactory_BP_CreateLatentTweenScaleWidgetTo::EaseType' has a wrong offset!");
static_assert(offsetof(TweenVector2DLatentFactory_BP_CreateLatentTweenScaleWidgetTo, NumLoops) == 0x000030, "Member 'TweenVector2DLatentFactory_BP_CreateLatentTweenScaleWidgetTo::NumLoops' has a wrong offset!");
static_assert(offsetof(TweenVector2DLatentFactory_BP_CreateLatentTweenScaleWidgetTo, LoopType) == 0x000034, "Member 'TweenVector2DLatentFactory_BP_CreateLatentTweenScaleWidgetTo::LoopType' has a wrong offset!");
static_assert(offsetof(TweenVector2DLatentFactory_BP_CreateLatentTweenScaleWidgetTo, Delay) == 0x000038, "Member 'TweenVector2DLatentFactory_BP_CreateLatentTweenScaleWidgetTo::Delay' has a wrong offset!");
static_assert(offsetof(TweenVector2DLatentFactory_BP_CreateLatentTweenScaleWidgetTo, TimeScale) == 0x00003C, "Member 'TweenVector2DLatentFactory_BP_CreateLatentTweenScaleWidgetTo::TimeScale' has a wrong offset!");
static_assert(offsetof(TweenVector2DLatentFactory_BP_CreateLatentTweenScaleWidgetTo, TweenWhileGameIsPaused) == 0x000040, "Member 'TweenVector2DLatentFactory_BP_CreateLatentTweenScaleWidgetTo::TweenWhileGameIsPaused' has a wrong offset!");
static_assert(offsetof(TweenVector2DLatentFactory_BP_CreateLatentTweenScaleWidgetTo, ReturnValue) == 0x000048, "Member 'TweenVector2DLatentFactory_BP_CreateLatentTweenScaleWidgetTo::ReturnValue' has a wrong offset!");

// Function TweenMaker.TweenVector2DLatentFactory.BP_CreateLatentTweenShearWidgetTo
// 0x0050 (0x0050 - 0x0000)
struct TweenVector2DLatentFactory_BP_CreateLatentTweenShearWidgetTo final
{
public:
	class UTweenManagerComponent*                 TweenManager;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UWidget*                                TweenTarget;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, InstancedReference, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UTweenContainer*                        OutTweenContainer;                                 // 0x0010(0x0008)(Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UTweenVector2D*                         OutTween;                                          // 0x0018(0x0008)(Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2D                              To;                                                // 0x0020(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Duration;                                          // 0x0028(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETweenEaseType                                EaseType;                                          // 0x002C(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2D[0x3];                                       // 0x002D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         NumLoops;                                          // 0x0030(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETweenLoopType                                LoopType;                                          // 0x0034(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_35[0x3];                                       // 0x0035(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Delay;                                             // 0x0038(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TimeScale;                                         // 0x003C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          TweenWhileGameIsPaused;                            // 0x0040(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_41[0x7];                                       // 0x0041(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UTweenVector2DLatentFactory*            ReturnValue;                                       // 0x0048(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TweenVector2DLatentFactory_BP_CreateLatentTweenShearWidgetTo) == 0x000008, "Wrong alignment on TweenVector2DLatentFactory_BP_CreateLatentTweenShearWidgetTo");
static_assert(sizeof(TweenVector2DLatentFactory_BP_CreateLatentTweenShearWidgetTo) == 0x000050, "Wrong size on TweenVector2DLatentFactory_BP_CreateLatentTweenShearWidgetTo");
static_assert(offsetof(TweenVector2DLatentFactory_BP_CreateLatentTweenShearWidgetTo, TweenManager) == 0x000000, "Member 'TweenVector2DLatentFactory_BP_CreateLatentTweenShearWidgetTo::TweenManager' has a wrong offset!");
static_assert(offsetof(TweenVector2DLatentFactory_BP_CreateLatentTweenShearWidgetTo, TweenTarget) == 0x000008, "Member 'TweenVector2DLatentFactory_BP_CreateLatentTweenShearWidgetTo::TweenTarget' has a wrong offset!");
static_assert(offsetof(TweenVector2DLatentFactory_BP_CreateLatentTweenShearWidgetTo, OutTweenContainer) == 0x000010, "Member 'TweenVector2DLatentFactory_BP_CreateLatentTweenShearWidgetTo::OutTweenContainer' has a wrong offset!");
static_assert(offsetof(TweenVector2DLatentFactory_BP_CreateLatentTweenShearWidgetTo, OutTween) == 0x000018, "Member 'TweenVector2DLatentFactory_BP_CreateLatentTweenShearWidgetTo::OutTween' has a wrong offset!");
static_assert(offsetof(TweenVector2DLatentFactory_BP_CreateLatentTweenShearWidgetTo, To) == 0x000020, "Member 'TweenVector2DLatentFactory_BP_CreateLatentTweenShearWidgetTo::To' has a wrong offset!");
static_assert(offsetof(TweenVector2DLatentFactory_BP_CreateLatentTweenShearWidgetTo, Duration) == 0x000028, "Member 'TweenVector2DLatentFactory_BP_CreateLatentTweenShearWidgetTo::Duration' has a wrong offset!");
static_assert(offsetof(TweenVector2DLatentFactory_BP_CreateLatentTweenShearWidgetTo, EaseType) == 0x00002C, "Member 'TweenVector2DLatentFactory_BP_CreateLatentTweenShearWidgetTo::EaseType' has a wrong offset!");
static_assert(offsetof(TweenVector2DLatentFactory_BP_CreateLatentTweenShearWidgetTo, NumLoops) == 0x000030, "Member 'TweenVector2DLatentFactory_BP_CreateLatentTweenShearWidgetTo::NumLoops' has a wrong offset!");
static_assert(offsetof(TweenVector2DLatentFactory_BP_CreateLatentTweenShearWidgetTo, LoopType) == 0x000034, "Member 'TweenVector2DLatentFactory_BP_CreateLatentTweenShearWidgetTo::LoopType' has a wrong offset!");
static_assert(offsetof(TweenVector2DLatentFactory_BP_CreateLatentTweenShearWidgetTo, Delay) == 0x000038, "Member 'TweenVector2DLatentFactory_BP_CreateLatentTweenShearWidgetTo::Delay' has a wrong offset!");
static_assert(offsetof(TweenVector2DLatentFactory_BP_CreateLatentTweenShearWidgetTo, TimeScale) == 0x00003C, "Member 'TweenVector2DLatentFactory_BP_CreateLatentTweenShearWidgetTo::TimeScale' has a wrong offset!");
static_assert(offsetof(TweenVector2DLatentFactory_BP_CreateLatentTweenShearWidgetTo, TweenWhileGameIsPaused) == 0x000040, "Member 'TweenVector2DLatentFactory_BP_CreateLatentTweenShearWidgetTo::TweenWhileGameIsPaused' has a wrong offset!");
static_assert(offsetof(TweenVector2DLatentFactory_BP_CreateLatentTweenShearWidgetTo, ReturnValue) == 0x000048, "Member 'TweenVector2DLatentFactory_BP_CreateLatentTweenShearWidgetTo::ReturnValue' has a wrong offset!");

// Function TweenMaker.TweenVector2DLatentFactory.BP_JoinLatentTweenCustomVector2D
// 0x0048 (0x0048 - 0x0000)
struct TweenVector2DLatentFactory_BP_JoinLatentTweenCustomVector2D final
{
public:
	class UTweenContainer*                        TweenContainer;                                    // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UTweenVector2D*                         OutTween;                                          // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UObject*                                TweenTarget;                                       // 0x0010(0x0008)(Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2D                              From;                                              // 0x0018(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2D                              To;                                                // 0x0020(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Duration;                                          // 0x0028(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETweenEaseType                                EaseType;                                          // 0x002C(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2D[0x3];                                       // 0x002D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Delay;                                             // 0x0030(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TimeScale;                                         // 0x0034(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          TweenWhileGameIsPaused;                            // 0x0038(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_39[0x7];                                       // 0x0039(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UTweenVector2DLatentFactory*            ReturnValue;                                       // 0x0040(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TweenVector2DLatentFactory_BP_JoinLatentTweenCustomVector2D) == 0x000008, "Wrong alignment on TweenVector2DLatentFactory_BP_JoinLatentTweenCustomVector2D");
static_assert(sizeof(TweenVector2DLatentFactory_BP_JoinLatentTweenCustomVector2D) == 0x000048, "Wrong size on TweenVector2DLatentFactory_BP_JoinLatentTweenCustomVector2D");
static_assert(offsetof(TweenVector2DLatentFactory_BP_JoinLatentTweenCustomVector2D, TweenContainer) == 0x000000, "Member 'TweenVector2DLatentFactory_BP_JoinLatentTweenCustomVector2D::TweenContainer' has a wrong offset!");
static_assert(offsetof(TweenVector2DLatentFactory_BP_JoinLatentTweenCustomVector2D, OutTween) == 0x000008, "Member 'TweenVector2DLatentFactory_BP_JoinLatentTweenCustomVector2D::OutTween' has a wrong offset!");
static_assert(offsetof(TweenVector2DLatentFactory_BP_JoinLatentTweenCustomVector2D, TweenTarget) == 0x000010, "Member 'TweenVector2DLatentFactory_BP_JoinLatentTweenCustomVector2D::TweenTarget' has a wrong offset!");
static_assert(offsetof(TweenVector2DLatentFactory_BP_JoinLatentTweenCustomVector2D, From) == 0x000018, "Member 'TweenVector2DLatentFactory_BP_JoinLatentTweenCustomVector2D::From' has a wrong offset!");
static_assert(offsetof(TweenVector2DLatentFactory_BP_JoinLatentTweenCustomVector2D, To) == 0x000020, "Member 'TweenVector2DLatentFactory_BP_JoinLatentTweenCustomVector2D::To' has a wrong offset!");
static_assert(offsetof(TweenVector2DLatentFactory_BP_JoinLatentTweenCustomVector2D, Duration) == 0x000028, "Member 'TweenVector2DLatentFactory_BP_JoinLatentTweenCustomVector2D::Duration' has a wrong offset!");
static_assert(offsetof(TweenVector2DLatentFactory_BP_JoinLatentTweenCustomVector2D, EaseType) == 0x00002C, "Member 'TweenVector2DLatentFactory_BP_JoinLatentTweenCustomVector2D::EaseType' has a wrong offset!");
static_assert(offsetof(TweenVector2DLatentFactory_BP_JoinLatentTweenCustomVector2D, Delay) == 0x000030, "Member 'TweenVector2DLatentFactory_BP_JoinLatentTweenCustomVector2D::Delay' has a wrong offset!");
static_assert(offsetof(TweenVector2DLatentFactory_BP_JoinLatentTweenCustomVector2D, TimeScale) == 0x000034, "Member 'TweenVector2DLatentFactory_BP_JoinLatentTweenCustomVector2D::TimeScale' has a wrong offset!");
static_assert(offsetof(TweenVector2DLatentFactory_BP_JoinLatentTweenCustomVector2D, TweenWhileGameIsPaused) == 0x000038, "Member 'TweenVector2DLatentFactory_BP_JoinLatentTweenCustomVector2D::TweenWhileGameIsPaused' has a wrong offset!");
static_assert(offsetof(TweenVector2DLatentFactory_BP_JoinLatentTweenCustomVector2D, ReturnValue) == 0x000040, "Member 'TweenVector2DLatentFactory_BP_JoinLatentTweenCustomVector2D::ReturnValue' has a wrong offset!");

// Function TweenMaker.TweenVector2DLatentFactory.BP_JoinLatentTweenMoveWidgetBy
// 0x0040 (0x0040 - 0x0000)
struct TweenVector2DLatentFactory_BP_JoinLatentTweenMoveWidgetBy final
{
public:
	class UTweenContainer*                        TweenContainer;                                    // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UTweenVector2D*                         OutTween;                                          // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UWidget*                                TweenTarget;                                       // 0x0010(0x0008)(Parm, OutParm, ZeroConstructor, InstancedReference, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2D                              bY;                                                // 0x0018(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Duration;                                          // 0x0020(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETweenEaseType                                EaseType;                                          // 0x0024(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_25[0x3];                                       // 0x0025(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Delay;                                             // 0x0028(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TimeScale;                                         // 0x002C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          TweenWhileGameIsPaused;                            // 0x0030(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_31[0x7];                                       // 0x0031(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UTweenVector2DLatentFactory*            ReturnValue;                                       // 0x0038(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TweenVector2DLatentFactory_BP_JoinLatentTweenMoveWidgetBy) == 0x000008, "Wrong alignment on TweenVector2DLatentFactory_BP_JoinLatentTweenMoveWidgetBy");
static_assert(sizeof(TweenVector2DLatentFactory_BP_JoinLatentTweenMoveWidgetBy) == 0x000040, "Wrong size on TweenVector2DLatentFactory_BP_JoinLatentTweenMoveWidgetBy");
static_assert(offsetof(TweenVector2DLatentFactory_BP_JoinLatentTweenMoveWidgetBy, TweenContainer) == 0x000000, "Member 'TweenVector2DLatentFactory_BP_JoinLatentTweenMoveWidgetBy::TweenContainer' has a wrong offset!");
static_assert(offsetof(TweenVector2DLatentFactory_BP_JoinLatentTweenMoveWidgetBy, OutTween) == 0x000008, "Member 'TweenVector2DLatentFactory_BP_JoinLatentTweenMoveWidgetBy::OutTween' has a wrong offset!");
static_assert(offsetof(TweenVector2DLatentFactory_BP_JoinLatentTweenMoveWidgetBy, TweenTarget) == 0x000010, "Member 'TweenVector2DLatentFactory_BP_JoinLatentTweenMoveWidgetBy::TweenTarget' has a wrong offset!");
static_assert(offsetof(TweenVector2DLatentFactory_BP_JoinLatentTweenMoveWidgetBy, bY) == 0x000018, "Member 'TweenVector2DLatentFactory_BP_JoinLatentTweenMoveWidgetBy::bY' has a wrong offset!");
static_assert(offsetof(TweenVector2DLatentFactory_BP_JoinLatentTweenMoveWidgetBy, Duration) == 0x000020, "Member 'TweenVector2DLatentFactory_BP_JoinLatentTweenMoveWidgetBy::Duration' has a wrong offset!");
static_assert(offsetof(TweenVector2DLatentFactory_BP_JoinLatentTweenMoveWidgetBy, EaseType) == 0x000024, "Member 'TweenVector2DLatentFactory_BP_JoinLatentTweenMoveWidgetBy::EaseType' has a wrong offset!");
static_assert(offsetof(TweenVector2DLatentFactory_BP_JoinLatentTweenMoveWidgetBy, Delay) == 0x000028, "Member 'TweenVector2DLatentFactory_BP_JoinLatentTweenMoveWidgetBy::Delay' has a wrong offset!");
static_assert(offsetof(TweenVector2DLatentFactory_BP_JoinLatentTweenMoveWidgetBy, TimeScale) == 0x00002C, "Member 'TweenVector2DLatentFactory_BP_JoinLatentTweenMoveWidgetBy::TimeScale' has a wrong offset!");
static_assert(offsetof(TweenVector2DLatentFactory_BP_JoinLatentTweenMoveWidgetBy, TweenWhileGameIsPaused) == 0x000030, "Member 'TweenVector2DLatentFactory_BP_JoinLatentTweenMoveWidgetBy::TweenWhileGameIsPaused' has a wrong offset!");
static_assert(offsetof(TweenVector2DLatentFactory_BP_JoinLatentTweenMoveWidgetBy, ReturnValue) == 0x000038, "Member 'TweenVector2DLatentFactory_BP_JoinLatentTweenMoveWidgetBy::ReturnValue' has a wrong offset!");

// Function TweenMaker.TweenVector2DLatentFactory.BP_JoinLatentTweenMoveWidgetTo
// 0x0040 (0x0040 - 0x0000)
struct TweenVector2DLatentFactory_BP_JoinLatentTweenMoveWidgetTo final
{
public:
	class UTweenContainer*                        TweenContainer;                                    // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UTweenVector2D*                         OutTween;                                          // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UWidget*                                TweenTarget;                                       // 0x0010(0x0008)(Parm, OutParm, ZeroConstructor, InstancedReference, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2D                              To;                                                // 0x0018(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Duration;                                          // 0x0020(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETweenEaseType                                EaseType;                                          // 0x0024(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_25[0x3];                                       // 0x0025(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Delay;                                             // 0x0028(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TimeScale;                                         // 0x002C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          TweenWhileGameIsPaused;                            // 0x0030(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_31[0x7];                                       // 0x0031(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UTweenVector2DLatentFactory*            ReturnValue;                                       // 0x0038(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TweenVector2DLatentFactory_BP_JoinLatentTweenMoveWidgetTo) == 0x000008, "Wrong alignment on TweenVector2DLatentFactory_BP_JoinLatentTweenMoveWidgetTo");
static_assert(sizeof(TweenVector2DLatentFactory_BP_JoinLatentTweenMoveWidgetTo) == 0x000040, "Wrong size on TweenVector2DLatentFactory_BP_JoinLatentTweenMoveWidgetTo");
static_assert(offsetof(TweenVector2DLatentFactory_BP_JoinLatentTweenMoveWidgetTo, TweenContainer) == 0x000000, "Member 'TweenVector2DLatentFactory_BP_JoinLatentTweenMoveWidgetTo::TweenContainer' has a wrong offset!");
static_assert(offsetof(TweenVector2DLatentFactory_BP_JoinLatentTweenMoveWidgetTo, OutTween) == 0x000008, "Member 'TweenVector2DLatentFactory_BP_JoinLatentTweenMoveWidgetTo::OutTween' has a wrong offset!");
static_assert(offsetof(TweenVector2DLatentFactory_BP_JoinLatentTweenMoveWidgetTo, TweenTarget) == 0x000010, "Member 'TweenVector2DLatentFactory_BP_JoinLatentTweenMoveWidgetTo::TweenTarget' has a wrong offset!");
static_assert(offsetof(TweenVector2DLatentFactory_BP_JoinLatentTweenMoveWidgetTo, To) == 0x000018, "Member 'TweenVector2DLatentFactory_BP_JoinLatentTweenMoveWidgetTo::To' has a wrong offset!");
static_assert(offsetof(TweenVector2DLatentFactory_BP_JoinLatentTweenMoveWidgetTo, Duration) == 0x000020, "Member 'TweenVector2DLatentFactory_BP_JoinLatentTweenMoveWidgetTo::Duration' has a wrong offset!");
static_assert(offsetof(TweenVector2DLatentFactory_BP_JoinLatentTweenMoveWidgetTo, EaseType) == 0x000024, "Member 'TweenVector2DLatentFactory_BP_JoinLatentTweenMoveWidgetTo::EaseType' has a wrong offset!");
static_assert(offsetof(TweenVector2DLatentFactory_BP_JoinLatentTweenMoveWidgetTo, Delay) == 0x000028, "Member 'TweenVector2DLatentFactory_BP_JoinLatentTweenMoveWidgetTo::Delay' has a wrong offset!");
static_assert(offsetof(TweenVector2DLatentFactory_BP_JoinLatentTweenMoveWidgetTo, TimeScale) == 0x00002C, "Member 'TweenVector2DLatentFactory_BP_JoinLatentTweenMoveWidgetTo::TimeScale' has a wrong offset!");
static_assert(offsetof(TweenVector2DLatentFactory_BP_JoinLatentTweenMoveWidgetTo, TweenWhileGameIsPaused) == 0x000030, "Member 'TweenVector2DLatentFactory_BP_JoinLatentTweenMoveWidgetTo::TweenWhileGameIsPaused' has a wrong offset!");
static_assert(offsetof(TweenVector2DLatentFactory_BP_JoinLatentTweenMoveWidgetTo, ReturnValue) == 0x000038, "Member 'TweenVector2DLatentFactory_BP_JoinLatentTweenMoveWidgetTo::ReturnValue' has a wrong offset!");

// Function TweenMaker.TweenVector2DLatentFactory.BP_JoinLatentTweenScaleWidgetBy
// 0x0040 (0x0040 - 0x0000)
struct TweenVector2DLatentFactory_BP_JoinLatentTweenScaleWidgetBy final
{
public:
	class UTweenContainer*                        TweenContainer;                                    // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UTweenVector2D*                         OutTween;                                          // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UWidget*                                TweenTarget;                                       // 0x0010(0x0008)(Parm, OutParm, ZeroConstructor, InstancedReference, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2D                              bY;                                                // 0x0018(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Duration;                                          // 0x0020(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETweenEaseType                                EaseType;                                          // 0x0024(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_25[0x3];                                       // 0x0025(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Delay;                                             // 0x0028(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TimeScale;                                         // 0x002C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          TweenWhileGameIsPaused;                            // 0x0030(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_31[0x7];                                       // 0x0031(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UTweenVector2DLatentFactory*            ReturnValue;                                       // 0x0038(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TweenVector2DLatentFactory_BP_JoinLatentTweenScaleWidgetBy) == 0x000008, "Wrong alignment on TweenVector2DLatentFactory_BP_JoinLatentTweenScaleWidgetBy");
static_assert(sizeof(TweenVector2DLatentFactory_BP_JoinLatentTweenScaleWidgetBy) == 0x000040, "Wrong size on TweenVector2DLatentFactory_BP_JoinLatentTweenScaleWidgetBy");
static_assert(offsetof(TweenVector2DLatentFactory_BP_JoinLatentTweenScaleWidgetBy, TweenContainer) == 0x000000, "Member 'TweenVector2DLatentFactory_BP_JoinLatentTweenScaleWidgetBy::TweenContainer' has a wrong offset!");
static_assert(offsetof(TweenVector2DLatentFactory_BP_JoinLatentTweenScaleWidgetBy, OutTween) == 0x000008, "Member 'TweenVector2DLatentFactory_BP_JoinLatentTweenScaleWidgetBy::OutTween' has a wrong offset!");
static_assert(offsetof(TweenVector2DLatentFactory_BP_JoinLatentTweenScaleWidgetBy, TweenTarget) == 0x000010, "Member 'TweenVector2DLatentFactory_BP_JoinLatentTweenScaleWidgetBy::TweenTarget' has a wrong offset!");
static_assert(offsetof(TweenVector2DLatentFactory_BP_JoinLatentTweenScaleWidgetBy, bY) == 0x000018, "Member 'TweenVector2DLatentFactory_BP_JoinLatentTweenScaleWidgetBy::bY' has a wrong offset!");
static_assert(offsetof(TweenVector2DLatentFactory_BP_JoinLatentTweenScaleWidgetBy, Duration) == 0x000020, "Member 'TweenVector2DLatentFactory_BP_JoinLatentTweenScaleWidgetBy::Duration' has a wrong offset!");
static_assert(offsetof(TweenVector2DLatentFactory_BP_JoinLatentTweenScaleWidgetBy, EaseType) == 0x000024, "Member 'TweenVector2DLatentFactory_BP_JoinLatentTweenScaleWidgetBy::EaseType' has a wrong offset!");
static_assert(offsetof(TweenVector2DLatentFactory_BP_JoinLatentTweenScaleWidgetBy, Delay) == 0x000028, "Member 'TweenVector2DLatentFactory_BP_JoinLatentTweenScaleWidgetBy::Delay' has a wrong offset!");
static_assert(offsetof(TweenVector2DLatentFactory_BP_JoinLatentTweenScaleWidgetBy, TimeScale) == 0x00002C, "Member 'TweenVector2DLatentFactory_BP_JoinLatentTweenScaleWidgetBy::TimeScale' has a wrong offset!");
static_assert(offsetof(TweenVector2DLatentFactory_BP_JoinLatentTweenScaleWidgetBy, TweenWhileGameIsPaused) == 0x000030, "Member 'TweenVector2DLatentFactory_BP_JoinLatentTweenScaleWidgetBy::TweenWhileGameIsPaused' has a wrong offset!");
static_assert(offsetof(TweenVector2DLatentFactory_BP_JoinLatentTweenScaleWidgetBy, ReturnValue) == 0x000038, "Member 'TweenVector2DLatentFactory_BP_JoinLatentTweenScaleWidgetBy::ReturnValue' has a wrong offset!");

// Function TweenMaker.TweenVector2DLatentFactory.BP_JoinLatentTweenScaleWidgetTo
// 0x0040 (0x0040 - 0x0000)
struct TweenVector2DLatentFactory_BP_JoinLatentTweenScaleWidgetTo final
{
public:
	class UTweenContainer*                        TweenContainer;                                    // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UTweenVector2D*                         OutTween;                                          // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UWidget*                                TweenTarget;                                       // 0x0010(0x0008)(Parm, OutParm, ZeroConstructor, InstancedReference, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2D                              To;                                                // 0x0018(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Duration;                                          // 0x0020(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETweenEaseType                                EaseType;                                          // 0x0024(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_25[0x3];                                       // 0x0025(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Delay;                                             // 0x0028(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TimeScale;                                         // 0x002C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          TweenWhileGameIsPaused;                            // 0x0030(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_31[0x7];                                       // 0x0031(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UTweenVector2DLatentFactory*            ReturnValue;                                       // 0x0038(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TweenVector2DLatentFactory_BP_JoinLatentTweenScaleWidgetTo) == 0x000008, "Wrong alignment on TweenVector2DLatentFactory_BP_JoinLatentTweenScaleWidgetTo");
static_assert(sizeof(TweenVector2DLatentFactory_BP_JoinLatentTweenScaleWidgetTo) == 0x000040, "Wrong size on TweenVector2DLatentFactory_BP_JoinLatentTweenScaleWidgetTo");
static_assert(offsetof(TweenVector2DLatentFactory_BP_JoinLatentTweenScaleWidgetTo, TweenContainer) == 0x000000, "Member 'TweenVector2DLatentFactory_BP_JoinLatentTweenScaleWidgetTo::TweenContainer' has a wrong offset!");
static_assert(offsetof(TweenVector2DLatentFactory_BP_JoinLatentTweenScaleWidgetTo, OutTween) == 0x000008, "Member 'TweenVector2DLatentFactory_BP_JoinLatentTweenScaleWidgetTo::OutTween' has a wrong offset!");
static_assert(offsetof(TweenVector2DLatentFactory_BP_JoinLatentTweenScaleWidgetTo, TweenTarget) == 0x000010, "Member 'TweenVector2DLatentFactory_BP_JoinLatentTweenScaleWidgetTo::TweenTarget' has a wrong offset!");
static_assert(offsetof(TweenVector2DLatentFactory_BP_JoinLatentTweenScaleWidgetTo, To) == 0x000018, "Member 'TweenVector2DLatentFactory_BP_JoinLatentTweenScaleWidgetTo::To' has a wrong offset!");
static_assert(offsetof(TweenVector2DLatentFactory_BP_JoinLatentTweenScaleWidgetTo, Duration) == 0x000020, "Member 'TweenVector2DLatentFactory_BP_JoinLatentTweenScaleWidgetTo::Duration' has a wrong offset!");
static_assert(offsetof(TweenVector2DLatentFactory_BP_JoinLatentTweenScaleWidgetTo, EaseType) == 0x000024, "Member 'TweenVector2DLatentFactory_BP_JoinLatentTweenScaleWidgetTo::EaseType' has a wrong offset!");
static_assert(offsetof(TweenVector2DLatentFactory_BP_JoinLatentTweenScaleWidgetTo, Delay) == 0x000028, "Member 'TweenVector2DLatentFactory_BP_JoinLatentTweenScaleWidgetTo::Delay' has a wrong offset!");
static_assert(offsetof(TweenVector2DLatentFactory_BP_JoinLatentTweenScaleWidgetTo, TimeScale) == 0x00002C, "Member 'TweenVector2DLatentFactory_BP_JoinLatentTweenScaleWidgetTo::TimeScale' has a wrong offset!");
static_assert(offsetof(TweenVector2DLatentFactory_BP_JoinLatentTweenScaleWidgetTo, TweenWhileGameIsPaused) == 0x000030, "Member 'TweenVector2DLatentFactory_BP_JoinLatentTweenScaleWidgetTo::TweenWhileGameIsPaused' has a wrong offset!");
static_assert(offsetof(TweenVector2DLatentFactory_BP_JoinLatentTweenScaleWidgetTo, ReturnValue) == 0x000038, "Member 'TweenVector2DLatentFactory_BP_JoinLatentTweenScaleWidgetTo::ReturnValue' has a wrong offset!");

// Function TweenMaker.TweenVector2DLatentFactory.BP_JoinLatentTweenShearWidgetTo
// 0x0040 (0x0040 - 0x0000)
struct TweenVector2DLatentFactory_BP_JoinLatentTweenShearWidgetTo final
{
public:
	class UTweenContainer*                        TweenContainer;                                    // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UTweenVector2D*                         OutTween;                                          // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UWidget*                                TweenTarget;                                       // 0x0010(0x0008)(Parm, OutParm, ZeroConstructor, InstancedReference, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2D                              To;                                                // 0x0018(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Duration;                                          // 0x0020(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETweenEaseType                                EaseType;                                          // 0x0024(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_25[0x3];                                       // 0x0025(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Delay;                                             // 0x0028(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TimeScale;                                         // 0x002C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          TweenWhileGameIsPaused;                            // 0x0030(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_31[0x7];                                       // 0x0031(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UTweenVector2DLatentFactory*            ReturnValue;                                       // 0x0038(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TweenVector2DLatentFactory_BP_JoinLatentTweenShearWidgetTo) == 0x000008, "Wrong alignment on TweenVector2DLatentFactory_BP_JoinLatentTweenShearWidgetTo");
static_assert(sizeof(TweenVector2DLatentFactory_BP_JoinLatentTweenShearWidgetTo) == 0x000040, "Wrong size on TweenVector2DLatentFactory_BP_JoinLatentTweenShearWidgetTo");
static_assert(offsetof(TweenVector2DLatentFactory_BP_JoinLatentTweenShearWidgetTo, TweenContainer) == 0x000000, "Member 'TweenVector2DLatentFactory_BP_JoinLatentTweenShearWidgetTo::TweenContainer' has a wrong offset!");
static_assert(offsetof(TweenVector2DLatentFactory_BP_JoinLatentTweenShearWidgetTo, OutTween) == 0x000008, "Member 'TweenVector2DLatentFactory_BP_JoinLatentTweenShearWidgetTo::OutTween' has a wrong offset!");
static_assert(offsetof(TweenVector2DLatentFactory_BP_JoinLatentTweenShearWidgetTo, TweenTarget) == 0x000010, "Member 'TweenVector2DLatentFactory_BP_JoinLatentTweenShearWidgetTo::TweenTarget' has a wrong offset!");
static_assert(offsetof(TweenVector2DLatentFactory_BP_JoinLatentTweenShearWidgetTo, To) == 0x000018, "Member 'TweenVector2DLatentFactory_BP_JoinLatentTweenShearWidgetTo::To' has a wrong offset!");
static_assert(offsetof(TweenVector2DLatentFactory_BP_JoinLatentTweenShearWidgetTo, Duration) == 0x000020, "Member 'TweenVector2DLatentFactory_BP_JoinLatentTweenShearWidgetTo::Duration' has a wrong offset!");
static_assert(offsetof(TweenVector2DLatentFactory_BP_JoinLatentTweenShearWidgetTo, EaseType) == 0x000024, "Member 'TweenVector2DLatentFactory_BP_JoinLatentTweenShearWidgetTo::EaseType' has a wrong offset!");
static_assert(offsetof(TweenVector2DLatentFactory_BP_JoinLatentTweenShearWidgetTo, Delay) == 0x000028, "Member 'TweenVector2DLatentFactory_BP_JoinLatentTweenShearWidgetTo::Delay' has a wrong offset!");
static_assert(offsetof(TweenVector2DLatentFactory_BP_JoinLatentTweenShearWidgetTo, TimeScale) == 0x00002C, "Member 'TweenVector2DLatentFactory_BP_JoinLatentTweenShearWidgetTo::TimeScale' has a wrong offset!");
static_assert(offsetof(TweenVector2DLatentFactory_BP_JoinLatentTweenShearWidgetTo, TweenWhileGameIsPaused) == 0x000030, "Member 'TweenVector2DLatentFactory_BP_JoinLatentTweenShearWidgetTo::TweenWhileGameIsPaused' has a wrong offset!");
static_assert(offsetof(TweenVector2DLatentFactory_BP_JoinLatentTweenShearWidgetTo, ReturnValue) == 0x000038, "Member 'TweenVector2DLatentFactory_BP_JoinLatentTweenShearWidgetTo::ReturnValue' has a wrong offset!");

// Function TweenMaker.TweenVector2DStandardFactory.BP_AppendTweenCustomVector2D
// 0x0048 (0x0048 - 0x0000)
struct TweenVector2DStandardFactory_BP_AppendTweenCustomVector2D final
{
public:
	class UTweenContainer*                        TweenContainer;                                    // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UObject*                                TweenTarget;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2D                              From;                                              // 0x0010(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2D                              To;                                                // 0x0018(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Duration;                                          // 0x0020(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETweenEaseType                                EaseType;                                          // 0x0024(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_25[0x3];                                       // 0x0025(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         NumLoops;                                          // 0x0028(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETweenLoopType                                LoopType;                                          // 0x002C(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2D[0x3];                                       // 0x002D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Delay;                                             // 0x0030(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TimeScale;                                         // 0x0034(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          TweenWhileGameIsPaused;                            // 0x0038(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_39[0x3];                                       // 0x0039(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         SequenceIndex;                                     // 0x003C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UTweenVector2D*                         ReturnValue;                                       // 0x0040(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TweenVector2DStandardFactory_BP_AppendTweenCustomVector2D) == 0x000008, "Wrong alignment on TweenVector2DStandardFactory_BP_AppendTweenCustomVector2D");
static_assert(sizeof(TweenVector2DStandardFactory_BP_AppendTweenCustomVector2D) == 0x000048, "Wrong size on TweenVector2DStandardFactory_BP_AppendTweenCustomVector2D");
static_assert(offsetof(TweenVector2DStandardFactory_BP_AppendTweenCustomVector2D, TweenContainer) == 0x000000, "Member 'TweenVector2DStandardFactory_BP_AppendTweenCustomVector2D::TweenContainer' has a wrong offset!");
static_assert(offsetof(TweenVector2DStandardFactory_BP_AppendTweenCustomVector2D, TweenTarget) == 0x000008, "Member 'TweenVector2DStandardFactory_BP_AppendTweenCustomVector2D::TweenTarget' has a wrong offset!");
static_assert(offsetof(TweenVector2DStandardFactory_BP_AppendTweenCustomVector2D, From) == 0x000010, "Member 'TweenVector2DStandardFactory_BP_AppendTweenCustomVector2D::From' has a wrong offset!");
static_assert(offsetof(TweenVector2DStandardFactory_BP_AppendTweenCustomVector2D, To) == 0x000018, "Member 'TweenVector2DStandardFactory_BP_AppendTweenCustomVector2D::To' has a wrong offset!");
static_assert(offsetof(TweenVector2DStandardFactory_BP_AppendTweenCustomVector2D, Duration) == 0x000020, "Member 'TweenVector2DStandardFactory_BP_AppendTweenCustomVector2D::Duration' has a wrong offset!");
static_assert(offsetof(TweenVector2DStandardFactory_BP_AppendTweenCustomVector2D, EaseType) == 0x000024, "Member 'TweenVector2DStandardFactory_BP_AppendTweenCustomVector2D::EaseType' has a wrong offset!");
static_assert(offsetof(TweenVector2DStandardFactory_BP_AppendTweenCustomVector2D, NumLoops) == 0x000028, "Member 'TweenVector2DStandardFactory_BP_AppendTweenCustomVector2D::NumLoops' has a wrong offset!");
static_assert(offsetof(TweenVector2DStandardFactory_BP_AppendTweenCustomVector2D, LoopType) == 0x00002C, "Member 'TweenVector2DStandardFactory_BP_AppendTweenCustomVector2D::LoopType' has a wrong offset!");
static_assert(offsetof(TweenVector2DStandardFactory_BP_AppendTweenCustomVector2D, Delay) == 0x000030, "Member 'TweenVector2DStandardFactory_BP_AppendTweenCustomVector2D::Delay' has a wrong offset!");
static_assert(offsetof(TweenVector2DStandardFactory_BP_AppendTweenCustomVector2D, TimeScale) == 0x000034, "Member 'TweenVector2DStandardFactory_BP_AppendTweenCustomVector2D::TimeScale' has a wrong offset!");
static_assert(offsetof(TweenVector2DStandardFactory_BP_AppendTweenCustomVector2D, TweenWhileGameIsPaused) == 0x000038, "Member 'TweenVector2DStandardFactory_BP_AppendTweenCustomVector2D::TweenWhileGameIsPaused' has a wrong offset!");
static_assert(offsetof(TweenVector2DStandardFactory_BP_AppendTweenCustomVector2D, SequenceIndex) == 0x00003C, "Member 'TweenVector2DStandardFactory_BP_AppendTweenCustomVector2D::SequenceIndex' has a wrong offset!");
static_assert(offsetof(TweenVector2DStandardFactory_BP_AppendTweenCustomVector2D, ReturnValue) == 0x000040, "Member 'TweenVector2DStandardFactory_BP_AppendTweenCustomVector2D::ReturnValue' has a wrong offset!");

// Function TweenMaker.TweenVector2DStandardFactory.BP_AppendTweenMoveWidgetBy
// 0x0040 (0x0040 - 0x0000)
struct TweenVector2DStandardFactory_BP_AppendTweenMoveWidgetBy final
{
public:
	class UTweenContainer*                        TweenContainer;                                    // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UWidget*                                TweenTarget;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, InstancedReference, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2D                              bY;                                                // 0x0010(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Duration;                                          // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETweenEaseType                                EaseType;                                          // 0x001C(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1D[0x3];                                       // 0x001D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         NumLoops;                                          // 0x0020(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETweenLoopType                                LoopType;                                          // 0x0024(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_25[0x3];                                       // 0x0025(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Delay;                                             // 0x0028(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TimeScale;                                         // 0x002C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          TweenWhileGameIsPaused;                            // 0x0030(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_31[0x3];                                       // 0x0031(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         SequenceIndex;                                     // 0x0034(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UTweenVector2D*                         ReturnValue;                                       // 0x0038(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TweenVector2DStandardFactory_BP_AppendTweenMoveWidgetBy) == 0x000008, "Wrong alignment on TweenVector2DStandardFactory_BP_AppendTweenMoveWidgetBy");
static_assert(sizeof(TweenVector2DStandardFactory_BP_AppendTweenMoveWidgetBy) == 0x000040, "Wrong size on TweenVector2DStandardFactory_BP_AppendTweenMoveWidgetBy");
static_assert(offsetof(TweenVector2DStandardFactory_BP_AppendTweenMoveWidgetBy, TweenContainer) == 0x000000, "Member 'TweenVector2DStandardFactory_BP_AppendTweenMoveWidgetBy::TweenContainer' has a wrong offset!");
static_assert(offsetof(TweenVector2DStandardFactory_BP_AppendTweenMoveWidgetBy, TweenTarget) == 0x000008, "Member 'TweenVector2DStandardFactory_BP_AppendTweenMoveWidgetBy::TweenTarget' has a wrong offset!");
static_assert(offsetof(TweenVector2DStandardFactory_BP_AppendTweenMoveWidgetBy, bY) == 0x000010, "Member 'TweenVector2DStandardFactory_BP_AppendTweenMoveWidgetBy::bY' has a wrong offset!");
static_assert(offsetof(TweenVector2DStandardFactory_BP_AppendTweenMoveWidgetBy, Duration) == 0x000018, "Member 'TweenVector2DStandardFactory_BP_AppendTweenMoveWidgetBy::Duration' has a wrong offset!");
static_assert(offsetof(TweenVector2DStandardFactory_BP_AppendTweenMoveWidgetBy, EaseType) == 0x00001C, "Member 'TweenVector2DStandardFactory_BP_AppendTweenMoveWidgetBy::EaseType' has a wrong offset!");
static_assert(offsetof(TweenVector2DStandardFactory_BP_AppendTweenMoveWidgetBy, NumLoops) == 0x000020, "Member 'TweenVector2DStandardFactory_BP_AppendTweenMoveWidgetBy::NumLoops' has a wrong offset!");
static_assert(offsetof(TweenVector2DStandardFactory_BP_AppendTweenMoveWidgetBy, LoopType) == 0x000024, "Member 'TweenVector2DStandardFactory_BP_AppendTweenMoveWidgetBy::LoopType' has a wrong offset!");
static_assert(offsetof(TweenVector2DStandardFactory_BP_AppendTweenMoveWidgetBy, Delay) == 0x000028, "Member 'TweenVector2DStandardFactory_BP_AppendTweenMoveWidgetBy::Delay' has a wrong offset!");
static_assert(offsetof(TweenVector2DStandardFactory_BP_AppendTweenMoveWidgetBy, TimeScale) == 0x00002C, "Member 'TweenVector2DStandardFactory_BP_AppendTweenMoveWidgetBy::TimeScale' has a wrong offset!");
static_assert(offsetof(TweenVector2DStandardFactory_BP_AppendTweenMoveWidgetBy, TweenWhileGameIsPaused) == 0x000030, "Member 'TweenVector2DStandardFactory_BP_AppendTweenMoveWidgetBy::TweenWhileGameIsPaused' has a wrong offset!");
static_assert(offsetof(TweenVector2DStandardFactory_BP_AppendTweenMoveWidgetBy, SequenceIndex) == 0x000034, "Member 'TweenVector2DStandardFactory_BP_AppendTweenMoveWidgetBy::SequenceIndex' has a wrong offset!");
static_assert(offsetof(TweenVector2DStandardFactory_BP_AppendTweenMoveWidgetBy, ReturnValue) == 0x000038, "Member 'TweenVector2DStandardFactory_BP_AppendTweenMoveWidgetBy::ReturnValue' has a wrong offset!");

// Function TweenMaker.TweenVector2DStandardFactory.BP_AppendTweenMoveWidgetTo
// 0x0040 (0x0040 - 0x0000)
struct TweenVector2DStandardFactory_BP_AppendTweenMoveWidgetTo final
{
public:
	class UTweenContainer*                        TweenContainer;                                    // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UWidget*                                TweenTarget;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, InstancedReference, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2D                              To;                                                // 0x0010(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Duration;                                          // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETweenEaseType                                EaseType;                                          // 0x001C(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1D[0x3];                                       // 0x001D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         NumLoops;                                          // 0x0020(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETweenLoopType                                LoopType;                                          // 0x0024(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_25[0x3];                                       // 0x0025(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Delay;                                             // 0x0028(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TimeScale;                                         // 0x002C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          TweenWhileGameIsPaused;                            // 0x0030(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_31[0x3];                                       // 0x0031(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         SequenceIndex;                                     // 0x0034(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UTweenVector2D*                         ReturnValue;                                       // 0x0038(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TweenVector2DStandardFactory_BP_AppendTweenMoveWidgetTo) == 0x000008, "Wrong alignment on TweenVector2DStandardFactory_BP_AppendTweenMoveWidgetTo");
static_assert(sizeof(TweenVector2DStandardFactory_BP_AppendTweenMoveWidgetTo) == 0x000040, "Wrong size on TweenVector2DStandardFactory_BP_AppendTweenMoveWidgetTo");
static_assert(offsetof(TweenVector2DStandardFactory_BP_AppendTweenMoveWidgetTo, TweenContainer) == 0x000000, "Member 'TweenVector2DStandardFactory_BP_AppendTweenMoveWidgetTo::TweenContainer' has a wrong offset!");
static_assert(offsetof(TweenVector2DStandardFactory_BP_AppendTweenMoveWidgetTo, TweenTarget) == 0x000008, "Member 'TweenVector2DStandardFactory_BP_AppendTweenMoveWidgetTo::TweenTarget' has a wrong offset!");
static_assert(offsetof(TweenVector2DStandardFactory_BP_AppendTweenMoveWidgetTo, To) == 0x000010, "Member 'TweenVector2DStandardFactory_BP_AppendTweenMoveWidgetTo::To' has a wrong offset!");
static_assert(offsetof(TweenVector2DStandardFactory_BP_AppendTweenMoveWidgetTo, Duration) == 0x000018, "Member 'TweenVector2DStandardFactory_BP_AppendTweenMoveWidgetTo::Duration' has a wrong offset!");
static_assert(offsetof(TweenVector2DStandardFactory_BP_AppendTweenMoveWidgetTo, EaseType) == 0x00001C, "Member 'TweenVector2DStandardFactory_BP_AppendTweenMoveWidgetTo::EaseType' has a wrong offset!");
static_assert(offsetof(TweenVector2DStandardFactory_BP_AppendTweenMoveWidgetTo, NumLoops) == 0x000020, "Member 'TweenVector2DStandardFactory_BP_AppendTweenMoveWidgetTo::NumLoops' has a wrong offset!");
static_assert(offsetof(TweenVector2DStandardFactory_BP_AppendTweenMoveWidgetTo, LoopType) == 0x000024, "Member 'TweenVector2DStandardFactory_BP_AppendTweenMoveWidgetTo::LoopType' has a wrong offset!");
static_assert(offsetof(TweenVector2DStandardFactory_BP_AppendTweenMoveWidgetTo, Delay) == 0x000028, "Member 'TweenVector2DStandardFactory_BP_AppendTweenMoveWidgetTo::Delay' has a wrong offset!");
static_assert(offsetof(TweenVector2DStandardFactory_BP_AppendTweenMoveWidgetTo, TimeScale) == 0x00002C, "Member 'TweenVector2DStandardFactory_BP_AppendTweenMoveWidgetTo::TimeScale' has a wrong offset!");
static_assert(offsetof(TweenVector2DStandardFactory_BP_AppendTweenMoveWidgetTo, TweenWhileGameIsPaused) == 0x000030, "Member 'TweenVector2DStandardFactory_BP_AppendTweenMoveWidgetTo::TweenWhileGameIsPaused' has a wrong offset!");
static_assert(offsetof(TweenVector2DStandardFactory_BP_AppendTweenMoveWidgetTo, SequenceIndex) == 0x000034, "Member 'TweenVector2DStandardFactory_BP_AppendTweenMoveWidgetTo::SequenceIndex' has a wrong offset!");
static_assert(offsetof(TweenVector2DStandardFactory_BP_AppendTweenMoveWidgetTo, ReturnValue) == 0x000038, "Member 'TweenVector2DStandardFactory_BP_AppendTweenMoveWidgetTo::ReturnValue' has a wrong offset!");

// Function TweenMaker.TweenVector2DStandardFactory.BP_AppendTweenScaleWidgetBy
// 0x0040 (0x0040 - 0x0000)
struct TweenVector2DStandardFactory_BP_AppendTweenScaleWidgetBy final
{
public:
	class UTweenContainer*                        TweenContainer;                                    // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UWidget*                                TweenTarget;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, InstancedReference, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2D                              bY;                                                // 0x0010(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Duration;                                          // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETweenEaseType                                EaseType;                                          // 0x001C(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1D[0x3];                                       // 0x001D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         NumLoops;                                          // 0x0020(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETweenLoopType                                LoopType;                                          // 0x0024(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_25[0x3];                                       // 0x0025(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Delay;                                             // 0x0028(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TimeScale;                                         // 0x002C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          TweenWhileGameIsPaused;                            // 0x0030(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_31[0x3];                                       // 0x0031(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         SequenceIndex;                                     // 0x0034(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UTweenVector2D*                         ReturnValue;                                       // 0x0038(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TweenVector2DStandardFactory_BP_AppendTweenScaleWidgetBy) == 0x000008, "Wrong alignment on TweenVector2DStandardFactory_BP_AppendTweenScaleWidgetBy");
static_assert(sizeof(TweenVector2DStandardFactory_BP_AppendTweenScaleWidgetBy) == 0x000040, "Wrong size on TweenVector2DStandardFactory_BP_AppendTweenScaleWidgetBy");
static_assert(offsetof(TweenVector2DStandardFactory_BP_AppendTweenScaleWidgetBy, TweenContainer) == 0x000000, "Member 'TweenVector2DStandardFactory_BP_AppendTweenScaleWidgetBy::TweenContainer' has a wrong offset!");
static_assert(offsetof(TweenVector2DStandardFactory_BP_AppendTweenScaleWidgetBy, TweenTarget) == 0x000008, "Member 'TweenVector2DStandardFactory_BP_AppendTweenScaleWidgetBy::TweenTarget' has a wrong offset!");
static_assert(offsetof(TweenVector2DStandardFactory_BP_AppendTweenScaleWidgetBy, bY) == 0x000010, "Member 'TweenVector2DStandardFactory_BP_AppendTweenScaleWidgetBy::bY' has a wrong offset!");
static_assert(offsetof(TweenVector2DStandardFactory_BP_AppendTweenScaleWidgetBy, Duration) == 0x000018, "Member 'TweenVector2DStandardFactory_BP_AppendTweenScaleWidgetBy::Duration' has a wrong offset!");
static_assert(offsetof(TweenVector2DStandardFactory_BP_AppendTweenScaleWidgetBy, EaseType) == 0x00001C, "Member 'TweenVector2DStandardFactory_BP_AppendTweenScaleWidgetBy::EaseType' has a wrong offset!");
static_assert(offsetof(TweenVector2DStandardFactory_BP_AppendTweenScaleWidgetBy, NumLoops) == 0x000020, "Member 'TweenVector2DStandardFactory_BP_AppendTweenScaleWidgetBy::NumLoops' has a wrong offset!");
static_assert(offsetof(TweenVector2DStandardFactory_BP_AppendTweenScaleWidgetBy, LoopType) == 0x000024, "Member 'TweenVector2DStandardFactory_BP_AppendTweenScaleWidgetBy::LoopType' has a wrong offset!");
static_assert(offsetof(TweenVector2DStandardFactory_BP_AppendTweenScaleWidgetBy, Delay) == 0x000028, "Member 'TweenVector2DStandardFactory_BP_AppendTweenScaleWidgetBy::Delay' has a wrong offset!");
static_assert(offsetof(TweenVector2DStandardFactory_BP_AppendTweenScaleWidgetBy, TimeScale) == 0x00002C, "Member 'TweenVector2DStandardFactory_BP_AppendTweenScaleWidgetBy::TimeScale' has a wrong offset!");
static_assert(offsetof(TweenVector2DStandardFactory_BP_AppendTweenScaleWidgetBy, TweenWhileGameIsPaused) == 0x000030, "Member 'TweenVector2DStandardFactory_BP_AppendTweenScaleWidgetBy::TweenWhileGameIsPaused' has a wrong offset!");
static_assert(offsetof(TweenVector2DStandardFactory_BP_AppendTweenScaleWidgetBy, SequenceIndex) == 0x000034, "Member 'TweenVector2DStandardFactory_BP_AppendTweenScaleWidgetBy::SequenceIndex' has a wrong offset!");
static_assert(offsetof(TweenVector2DStandardFactory_BP_AppendTweenScaleWidgetBy, ReturnValue) == 0x000038, "Member 'TweenVector2DStandardFactory_BP_AppendTweenScaleWidgetBy::ReturnValue' has a wrong offset!");

// Function TweenMaker.TweenVector2DStandardFactory.BP_AppendTweenScaleWidgetTo
// 0x0040 (0x0040 - 0x0000)
struct TweenVector2DStandardFactory_BP_AppendTweenScaleWidgetTo final
{
public:
	class UTweenContainer*                        TweenContainer;                                    // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UWidget*                                TweenTarget;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, InstancedReference, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2D                              To;                                                // 0x0010(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Duration;                                          // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETweenEaseType                                EaseType;                                          // 0x001C(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1D[0x3];                                       // 0x001D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         NumLoops;                                          // 0x0020(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETweenLoopType                                LoopType;                                          // 0x0024(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_25[0x3];                                       // 0x0025(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Delay;                                             // 0x0028(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TimeScale;                                         // 0x002C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          TweenWhileGameIsPaused;                            // 0x0030(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_31[0x3];                                       // 0x0031(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         SequenceIndex;                                     // 0x0034(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UTweenVector2D*                         ReturnValue;                                       // 0x0038(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TweenVector2DStandardFactory_BP_AppendTweenScaleWidgetTo) == 0x000008, "Wrong alignment on TweenVector2DStandardFactory_BP_AppendTweenScaleWidgetTo");
static_assert(sizeof(TweenVector2DStandardFactory_BP_AppendTweenScaleWidgetTo) == 0x000040, "Wrong size on TweenVector2DStandardFactory_BP_AppendTweenScaleWidgetTo");
static_assert(offsetof(TweenVector2DStandardFactory_BP_AppendTweenScaleWidgetTo, TweenContainer) == 0x000000, "Member 'TweenVector2DStandardFactory_BP_AppendTweenScaleWidgetTo::TweenContainer' has a wrong offset!");
static_assert(offsetof(TweenVector2DStandardFactory_BP_AppendTweenScaleWidgetTo, TweenTarget) == 0x000008, "Member 'TweenVector2DStandardFactory_BP_AppendTweenScaleWidgetTo::TweenTarget' has a wrong offset!");
static_assert(offsetof(TweenVector2DStandardFactory_BP_AppendTweenScaleWidgetTo, To) == 0x000010, "Member 'TweenVector2DStandardFactory_BP_AppendTweenScaleWidgetTo::To' has a wrong offset!");
static_assert(offsetof(TweenVector2DStandardFactory_BP_AppendTweenScaleWidgetTo, Duration) == 0x000018, "Member 'TweenVector2DStandardFactory_BP_AppendTweenScaleWidgetTo::Duration' has a wrong offset!");
static_assert(offsetof(TweenVector2DStandardFactory_BP_AppendTweenScaleWidgetTo, EaseType) == 0x00001C, "Member 'TweenVector2DStandardFactory_BP_AppendTweenScaleWidgetTo::EaseType' has a wrong offset!");
static_assert(offsetof(TweenVector2DStandardFactory_BP_AppendTweenScaleWidgetTo, NumLoops) == 0x000020, "Member 'TweenVector2DStandardFactory_BP_AppendTweenScaleWidgetTo::NumLoops' has a wrong offset!");
static_assert(offsetof(TweenVector2DStandardFactory_BP_AppendTweenScaleWidgetTo, LoopType) == 0x000024, "Member 'TweenVector2DStandardFactory_BP_AppendTweenScaleWidgetTo::LoopType' has a wrong offset!");
static_assert(offsetof(TweenVector2DStandardFactory_BP_AppendTweenScaleWidgetTo, Delay) == 0x000028, "Member 'TweenVector2DStandardFactory_BP_AppendTweenScaleWidgetTo::Delay' has a wrong offset!");
static_assert(offsetof(TweenVector2DStandardFactory_BP_AppendTweenScaleWidgetTo, TimeScale) == 0x00002C, "Member 'TweenVector2DStandardFactory_BP_AppendTweenScaleWidgetTo::TimeScale' has a wrong offset!");
static_assert(offsetof(TweenVector2DStandardFactory_BP_AppendTweenScaleWidgetTo, TweenWhileGameIsPaused) == 0x000030, "Member 'TweenVector2DStandardFactory_BP_AppendTweenScaleWidgetTo::TweenWhileGameIsPaused' has a wrong offset!");
static_assert(offsetof(TweenVector2DStandardFactory_BP_AppendTweenScaleWidgetTo, SequenceIndex) == 0x000034, "Member 'TweenVector2DStandardFactory_BP_AppendTweenScaleWidgetTo::SequenceIndex' has a wrong offset!");
static_assert(offsetof(TweenVector2DStandardFactory_BP_AppendTweenScaleWidgetTo, ReturnValue) == 0x000038, "Member 'TweenVector2DStandardFactory_BP_AppendTweenScaleWidgetTo::ReturnValue' has a wrong offset!");

// Function TweenMaker.TweenVector2DStandardFactory.BP_AppendTweenShearWidgetTo
// 0x0040 (0x0040 - 0x0000)
struct TweenVector2DStandardFactory_BP_AppendTweenShearWidgetTo final
{
public:
	class UTweenContainer*                        TweenContainer;                                    // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UWidget*                                TweenTarget;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, InstancedReference, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2D                              To;                                                // 0x0010(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Duration;                                          // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETweenEaseType                                EaseType;                                          // 0x001C(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1D[0x3];                                       // 0x001D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         NumLoops;                                          // 0x0020(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETweenLoopType                                LoopType;                                          // 0x0024(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_25[0x3];                                       // 0x0025(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Delay;                                             // 0x0028(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TimeScale;                                         // 0x002C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          TweenWhileGameIsPaused;                            // 0x0030(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_31[0x3];                                       // 0x0031(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         SequenceIndex;                                     // 0x0034(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UTweenVector2D*                         ReturnValue;                                       // 0x0038(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TweenVector2DStandardFactory_BP_AppendTweenShearWidgetTo) == 0x000008, "Wrong alignment on TweenVector2DStandardFactory_BP_AppendTweenShearWidgetTo");
static_assert(sizeof(TweenVector2DStandardFactory_BP_AppendTweenShearWidgetTo) == 0x000040, "Wrong size on TweenVector2DStandardFactory_BP_AppendTweenShearWidgetTo");
static_assert(offsetof(TweenVector2DStandardFactory_BP_AppendTweenShearWidgetTo, TweenContainer) == 0x000000, "Member 'TweenVector2DStandardFactory_BP_AppendTweenShearWidgetTo::TweenContainer' has a wrong offset!");
static_assert(offsetof(TweenVector2DStandardFactory_BP_AppendTweenShearWidgetTo, TweenTarget) == 0x000008, "Member 'TweenVector2DStandardFactory_BP_AppendTweenShearWidgetTo::TweenTarget' has a wrong offset!");
static_assert(offsetof(TweenVector2DStandardFactory_BP_AppendTweenShearWidgetTo, To) == 0x000010, "Member 'TweenVector2DStandardFactory_BP_AppendTweenShearWidgetTo::To' has a wrong offset!");
static_assert(offsetof(TweenVector2DStandardFactory_BP_AppendTweenShearWidgetTo, Duration) == 0x000018, "Member 'TweenVector2DStandardFactory_BP_AppendTweenShearWidgetTo::Duration' has a wrong offset!");
static_assert(offsetof(TweenVector2DStandardFactory_BP_AppendTweenShearWidgetTo, EaseType) == 0x00001C, "Member 'TweenVector2DStandardFactory_BP_AppendTweenShearWidgetTo::EaseType' has a wrong offset!");
static_assert(offsetof(TweenVector2DStandardFactory_BP_AppendTweenShearWidgetTo, NumLoops) == 0x000020, "Member 'TweenVector2DStandardFactory_BP_AppendTweenShearWidgetTo::NumLoops' has a wrong offset!");
static_assert(offsetof(TweenVector2DStandardFactory_BP_AppendTweenShearWidgetTo, LoopType) == 0x000024, "Member 'TweenVector2DStandardFactory_BP_AppendTweenShearWidgetTo::LoopType' has a wrong offset!");
static_assert(offsetof(TweenVector2DStandardFactory_BP_AppendTweenShearWidgetTo, Delay) == 0x000028, "Member 'TweenVector2DStandardFactory_BP_AppendTweenShearWidgetTo::Delay' has a wrong offset!");
static_assert(offsetof(TweenVector2DStandardFactory_BP_AppendTweenShearWidgetTo, TimeScale) == 0x00002C, "Member 'TweenVector2DStandardFactory_BP_AppendTweenShearWidgetTo::TimeScale' has a wrong offset!");
static_assert(offsetof(TweenVector2DStandardFactory_BP_AppendTweenShearWidgetTo, TweenWhileGameIsPaused) == 0x000030, "Member 'TweenVector2DStandardFactory_BP_AppendTweenShearWidgetTo::TweenWhileGameIsPaused' has a wrong offset!");
static_assert(offsetof(TweenVector2DStandardFactory_BP_AppendTweenShearWidgetTo, SequenceIndex) == 0x000034, "Member 'TweenVector2DStandardFactory_BP_AppendTweenShearWidgetTo::SequenceIndex' has a wrong offset!");
static_assert(offsetof(TweenVector2DStandardFactory_BP_AppendTweenShearWidgetTo, ReturnValue) == 0x000038, "Member 'TweenVector2DStandardFactory_BP_AppendTweenShearWidgetTo::ReturnValue' has a wrong offset!");

// Function TweenMaker.TweenVector2DStandardFactory.BP_CreateTweenCustomVector2D
// 0x0050 (0x0050 - 0x0000)
struct TweenVector2DStandardFactory_BP_CreateTweenCustomVector2D final
{
public:
	class UTweenManagerComponent*                 TweenManager;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UObject*                                TweenTarget;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UTweenContainer*                        TweenContainer;                                    // 0x0010(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UTweenVector2D*                         Tween;                                             // 0x0018(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2D                              From;                                              // 0x0020(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2D                              To;                                                // 0x0028(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Duration;                                          // 0x0030(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETweenEaseType                                EaseType;                                          // 0x0034(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_35[0x3];                                       // 0x0035(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         NumLoops;                                          // 0x0038(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETweenLoopType                                LoopType;                                          // 0x003C(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_3D[0x3];                                       // 0x003D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Delay;                                             // 0x0040(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TimeScale;                                         // 0x0044(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          TweenWhileGameIsPaused;                            // 0x0048(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_49[0x3];                                       // 0x0049(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         SequenceIndex;                                     // 0x004C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TweenVector2DStandardFactory_BP_CreateTweenCustomVector2D) == 0x000008, "Wrong alignment on TweenVector2DStandardFactory_BP_CreateTweenCustomVector2D");
static_assert(sizeof(TweenVector2DStandardFactory_BP_CreateTweenCustomVector2D) == 0x000050, "Wrong size on TweenVector2DStandardFactory_BP_CreateTweenCustomVector2D");
static_assert(offsetof(TweenVector2DStandardFactory_BP_CreateTweenCustomVector2D, TweenManager) == 0x000000, "Member 'TweenVector2DStandardFactory_BP_CreateTweenCustomVector2D::TweenManager' has a wrong offset!");
static_assert(offsetof(TweenVector2DStandardFactory_BP_CreateTweenCustomVector2D, TweenTarget) == 0x000008, "Member 'TweenVector2DStandardFactory_BP_CreateTweenCustomVector2D::TweenTarget' has a wrong offset!");
static_assert(offsetof(TweenVector2DStandardFactory_BP_CreateTweenCustomVector2D, TweenContainer) == 0x000010, "Member 'TweenVector2DStandardFactory_BP_CreateTweenCustomVector2D::TweenContainer' has a wrong offset!");
static_assert(offsetof(TweenVector2DStandardFactory_BP_CreateTweenCustomVector2D, Tween) == 0x000018, "Member 'TweenVector2DStandardFactory_BP_CreateTweenCustomVector2D::Tween' has a wrong offset!");
static_assert(offsetof(TweenVector2DStandardFactory_BP_CreateTweenCustomVector2D, From) == 0x000020, "Member 'TweenVector2DStandardFactory_BP_CreateTweenCustomVector2D::From' has a wrong offset!");
static_assert(offsetof(TweenVector2DStandardFactory_BP_CreateTweenCustomVector2D, To) == 0x000028, "Member 'TweenVector2DStandardFactory_BP_CreateTweenCustomVector2D::To' has a wrong offset!");
static_assert(offsetof(TweenVector2DStandardFactory_BP_CreateTweenCustomVector2D, Duration) == 0x000030, "Member 'TweenVector2DStandardFactory_BP_CreateTweenCustomVector2D::Duration' has a wrong offset!");
static_assert(offsetof(TweenVector2DStandardFactory_BP_CreateTweenCustomVector2D, EaseType) == 0x000034, "Member 'TweenVector2DStandardFactory_BP_CreateTweenCustomVector2D::EaseType' has a wrong offset!");
static_assert(offsetof(TweenVector2DStandardFactory_BP_CreateTweenCustomVector2D, NumLoops) == 0x000038, "Member 'TweenVector2DStandardFactory_BP_CreateTweenCustomVector2D::NumLoops' has a wrong offset!");
static_assert(offsetof(TweenVector2DStandardFactory_BP_CreateTweenCustomVector2D, LoopType) == 0x00003C, "Member 'TweenVector2DStandardFactory_BP_CreateTweenCustomVector2D::LoopType' has a wrong offset!");
static_assert(offsetof(TweenVector2DStandardFactory_BP_CreateTweenCustomVector2D, Delay) == 0x000040, "Member 'TweenVector2DStandardFactory_BP_CreateTweenCustomVector2D::Delay' has a wrong offset!");
static_assert(offsetof(TweenVector2DStandardFactory_BP_CreateTweenCustomVector2D, TimeScale) == 0x000044, "Member 'TweenVector2DStandardFactory_BP_CreateTweenCustomVector2D::TimeScale' has a wrong offset!");
static_assert(offsetof(TweenVector2DStandardFactory_BP_CreateTweenCustomVector2D, TweenWhileGameIsPaused) == 0x000048, "Member 'TweenVector2DStandardFactory_BP_CreateTweenCustomVector2D::TweenWhileGameIsPaused' has a wrong offset!");
static_assert(offsetof(TweenVector2DStandardFactory_BP_CreateTweenCustomVector2D, SequenceIndex) == 0x00004C, "Member 'TweenVector2DStandardFactory_BP_CreateTweenCustomVector2D::SequenceIndex' has a wrong offset!");

// Function TweenMaker.TweenVector2DStandardFactory.BP_CreateTweenMoveWidgetBy
// 0x0048 (0x0048 - 0x0000)
struct TweenVector2DStandardFactory_BP_CreateTweenMoveWidgetBy final
{
public:
	class UTweenManagerComponent*                 TweenManager;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UWidget*                                TweenTarget;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, InstancedReference, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UTweenContainer*                        TweenContainer;                                    // 0x0010(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UTweenVector2D*                         Tween;                                             // 0x0018(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2D                              bY;                                                // 0x0020(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Duration;                                          // 0x0028(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETweenEaseType                                EaseType;                                          // 0x002C(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2D[0x3];                                       // 0x002D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         NumLoops;                                          // 0x0030(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETweenLoopType                                LoopType;                                          // 0x0034(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_35[0x3];                                       // 0x0035(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Delay;                                             // 0x0038(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TimeScale;                                         // 0x003C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          TweenWhileGameIsPaused;                            // 0x0040(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_41[0x3];                                       // 0x0041(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         SequenceIndex;                                     // 0x0044(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TweenVector2DStandardFactory_BP_CreateTweenMoveWidgetBy) == 0x000008, "Wrong alignment on TweenVector2DStandardFactory_BP_CreateTweenMoveWidgetBy");
static_assert(sizeof(TweenVector2DStandardFactory_BP_CreateTweenMoveWidgetBy) == 0x000048, "Wrong size on TweenVector2DStandardFactory_BP_CreateTweenMoveWidgetBy");
static_assert(offsetof(TweenVector2DStandardFactory_BP_CreateTweenMoveWidgetBy, TweenManager) == 0x000000, "Member 'TweenVector2DStandardFactory_BP_CreateTweenMoveWidgetBy::TweenManager' has a wrong offset!");
static_assert(offsetof(TweenVector2DStandardFactory_BP_CreateTweenMoveWidgetBy, TweenTarget) == 0x000008, "Member 'TweenVector2DStandardFactory_BP_CreateTweenMoveWidgetBy::TweenTarget' has a wrong offset!");
static_assert(offsetof(TweenVector2DStandardFactory_BP_CreateTweenMoveWidgetBy, TweenContainer) == 0x000010, "Member 'TweenVector2DStandardFactory_BP_CreateTweenMoveWidgetBy::TweenContainer' has a wrong offset!");
static_assert(offsetof(TweenVector2DStandardFactory_BP_CreateTweenMoveWidgetBy, Tween) == 0x000018, "Member 'TweenVector2DStandardFactory_BP_CreateTweenMoveWidgetBy::Tween' has a wrong offset!");
static_assert(offsetof(TweenVector2DStandardFactory_BP_CreateTweenMoveWidgetBy, bY) == 0x000020, "Member 'TweenVector2DStandardFactory_BP_CreateTweenMoveWidgetBy::bY' has a wrong offset!");
static_assert(offsetof(TweenVector2DStandardFactory_BP_CreateTweenMoveWidgetBy, Duration) == 0x000028, "Member 'TweenVector2DStandardFactory_BP_CreateTweenMoveWidgetBy::Duration' has a wrong offset!");
static_assert(offsetof(TweenVector2DStandardFactory_BP_CreateTweenMoveWidgetBy, EaseType) == 0x00002C, "Member 'TweenVector2DStandardFactory_BP_CreateTweenMoveWidgetBy::EaseType' has a wrong offset!");
static_assert(offsetof(TweenVector2DStandardFactory_BP_CreateTweenMoveWidgetBy, NumLoops) == 0x000030, "Member 'TweenVector2DStandardFactory_BP_CreateTweenMoveWidgetBy::NumLoops' has a wrong offset!");
static_assert(offsetof(TweenVector2DStandardFactory_BP_CreateTweenMoveWidgetBy, LoopType) == 0x000034, "Member 'TweenVector2DStandardFactory_BP_CreateTweenMoveWidgetBy::LoopType' has a wrong offset!");
static_assert(offsetof(TweenVector2DStandardFactory_BP_CreateTweenMoveWidgetBy, Delay) == 0x000038, "Member 'TweenVector2DStandardFactory_BP_CreateTweenMoveWidgetBy::Delay' has a wrong offset!");
static_assert(offsetof(TweenVector2DStandardFactory_BP_CreateTweenMoveWidgetBy, TimeScale) == 0x00003C, "Member 'TweenVector2DStandardFactory_BP_CreateTweenMoveWidgetBy::TimeScale' has a wrong offset!");
static_assert(offsetof(TweenVector2DStandardFactory_BP_CreateTweenMoveWidgetBy, TweenWhileGameIsPaused) == 0x000040, "Member 'TweenVector2DStandardFactory_BP_CreateTweenMoveWidgetBy::TweenWhileGameIsPaused' has a wrong offset!");
static_assert(offsetof(TweenVector2DStandardFactory_BP_CreateTweenMoveWidgetBy, SequenceIndex) == 0x000044, "Member 'TweenVector2DStandardFactory_BP_CreateTweenMoveWidgetBy::SequenceIndex' has a wrong offset!");

// Function TweenMaker.TweenVector2DStandardFactory.BP_CreateTweenMoveWidgetTo
// 0x0048 (0x0048 - 0x0000)
struct TweenVector2DStandardFactory_BP_CreateTweenMoveWidgetTo final
{
public:
	class UTweenManagerComponent*                 TweenManager;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UWidget*                                TweenTarget;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, InstancedReference, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UTweenContainer*                        TweenContainer;                                    // 0x0010(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UTweenVector2D*                         Tween;                                             // 0x0018(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2D                              To;                                                // 0x0020(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Duration;                                          // 0x0028(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETweenEaseType                                EaseType;                                          // 0x002C(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2D[0x3];                                       // 0x002D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         NumLoops;                                          // 0x0030(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETweenLoopType                                LoopType;                                          // 0x0034(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_35[0x3];                                       // 0x0035(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Delay;                                             // 0x0038(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TimeScale;                                         // 0x003C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          TweenWhileGameIsPaused;                            // 0x0040(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_41[0x3];                                       // 0x0041(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         SequenceIndex;                                     // 0x0044(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TweenVector2DStandardFactory_BP_CreateTweenMoveWidgetTo) == 0x000008, "Wrong alignment on TweenVector2DStandardFactory_BP_CreateTweenMoveWidgetTo");
static_assert(sizeof(TweenVector2DStandardFactory_BP_CreateTweenMoveWidgetTo) == 0x000048, "Wrong size on TweenVector2DStandardFactory_BP_CreateTweenMoveWidgetTo");
static_assert(offsetof(TweenVector2DStandardFactory_BP_CreateTweenMoveWidgetTo, TweenManager) == 0x000000, "Member 'TweenVector2DStandardFactory_BP_CreateTweenMoveWidgetTo::TweenManager' has a wrong offset!");
static_assert(offsetof(TweenVector2DStandardFactory_BP_CreateTweenMoveWidgetTo, TweenTarget) == 0x000008, "Member 'TweenVector2DStandardFactory_BP_CreateTweenMoveWidgetTo::TweenTarget' has a wrong offset!");
static_assert(offsetof(TweenVector2DStandardFactory_BP_CreateTweenMoveWidgetTo, TweenContainer) == 0x000010, "Member 'TweenVector2DStandardFactory_BP_CreateTweenMoveWidgetTo::TweenContainer' has a wrong offset!");
static_assert(offsetof(TweenVector2DStandardFactory_BP_CreateTweenMoveWidgetTo, Tween) == 0x000018, "Member 'TweenVector2DStandardFactory_BP_CreateTweenMoveWidgetTo::Tween' has a wrong offset!");
static_assert(offsetof(TweenVector2DStandardFactory_BP_CreateTweenMoveWidgetTo, To) == 0x000020, "Member 'TweenVector2DStandardFactory_BP_CreateTweenMoveWidgetTo::To' has a wrong offset!");
static_assert(offsetof(TweenVector2DStandardFactory_BP_CreateTweenMoveWidgetTo, Duration) == 0x000028, "Member 'TweenVector2DStandardFactory_BP_CreateTweenMoveWidgetTo::Duration' has a wrong offset!");
static_assert(offsetof(TweenVector2DStandardFactory_BP_CreateTweenMoveWidgetTo, EaseType) == 0x00002C, "Member 'TweenVector2DStandardFactory_BP_CreateTweenMoveWidgetTo::EaseType' has a wrong offset!");
static_assert(offsetof(TweenVector2DStandardFactory_BP_CreateTweenMoveWidgetTo, NumLoops) == 0x000030, "Member 'TweenVector2DStandardFactory_BP_CreateTweenMoveWidgetTo::NumLoops' has a wrong offset!");
static_assert(offsetof(TweenVector2DStandardFactory_BP_CreateTweenMoveWidgetTo, LoopType) == 0x000034, "Member 'TweenVector2DStandardFactory_BP_CreateTweenMoveWidgetTo::LoopType' has a wrong offset!");
static_assert(offsetof(TweenVector2DStandardFactory_BP_CreateTweenMoveWidgetTo, Delay) == 0x000038, "Member 'TweenVector2DStandardFactory_BP_CreateTweenMoveWidgetTo::Delay' has a wrong offset!");
static_assert(offsetof(TweenVector2DStandardFactory_BP_CreateTweenMoveWidgetTo, TimeScale) == 0x00003C, "Member 'TweenVector2DStandardFactory_BP_CreateTweenMoveWidgetTo::TimeScale' has a wrong offset!");
static_assert(offsetof(TweenVector2DStandardFactory_BP_CreateTweenMoveWidgetTo, TweenWhileGameIsPaused) == 0x000040, "Member 'TweenVector2DStandardFactory_BP_CreateTweenMoveWidgetTo::TweenWhileGameIsPaused' has a wrong offset!");
static_assert(offsetof(TweenVector2DStandardFactory_BP_CreateTweenMoveWidgetTo, SequenceIndex) == 0x000044, "Member 'TweenVector2DStandardFactory_BP_CreateTweenMoveWidgetTo::SequenceIndex' has a wrong offset!");

// Function TweenMaker.TweenVector2DStandardFactory.BP_CreateTweenScaleWidgetBy
// 0x0048 (0x0048 - 0x0000)
struct TweenVector2DStandardFactory_BP_CreateTweenScaleWidgetBy final
{
public:
	class UTweenManagerComponent*                 TweenManager;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UWidget*                                TweenTarget;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, InstancedReference, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UTweenContainer*                        TweenContainer;                                    // 0x0010(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UTweenVector2D*                         Tween;                                             // 0x0018(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2D                              bY;                                                // 0x0020(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Duration;                                          // 0x0028(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETweenEaseType                                EaseType;                                          // 0x002C(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2D[0x3];                                       // 0x002D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         NumLoops;                                          // 0x0030(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETweenLoopType                                LoopType;                                          // 0x0034(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_35[0x3];                                       // 0x0035(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Delay;                                             // 0x0038(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TimeScale;                                         // 0x003C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          TweenWhileGameIsPaused;                            // 0x0040(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_41[0x3];                                       // 0x0041(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         SequenceIndex;                                     // 0x0044(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TweenVector2DStandardFactory_BP_CreateTweenScaleWidgetBy) == 0x000008, "Wrong alignment on TweenVector2DStandardFactory_BP_CreateTweenScaleWidgetBy");
static_assert(sizeof(TweenVector2DStandardFactory_BP_CreateTweenScaleWidgetBy) == 0x000048, "Wrong size on TweenVector2DStandardFactory_BP_CreateTweenScaleWidgetBy");
static_assert(offsetof(TweenVector2DStandardFactory_BP_CreateTweenScaleWidgetBy, TweenManager) == 0x000000, "Member 'TweenVector2DStandardFactory_BP_CreateTweenScaleWidgetBy::TweenManager' has a wrong offset!");
static_assert(offsetof(TweenVector2DStandardFactory_BP_CreateTweenScaleWidgetBy, TweenTarget) == 0x000008, "Member 'TweenVector2DStandardFactory_BP_CreateTweenScaleWidgetBy::TweenTarget' has a wrong offset!");
static_assert(offsetof(TweenVector2DStandardFactory_BP_CreateTweenScaleWidgetBy, TweenContainer) == 0x000010, "Member 'TweenVector2DStandardFactory_BP_CreateTweenScaleWidgetBy::TweenContainer' has a wrong offset!");
static_assert(offsetof(TweenVector2DStandardFactory_BP_CreateTweenScaleWidgetBy, Tween) == 0x000018, "Member 'TweenVector2DStandardFactory_BP_CreateTweenScaleWidgetBy::Tween' has a wrong offset!");
static_assert(offsetof(TweenVector2DStandardFactory_BP_CreateTweenScaleWidgetBy, bY) == 0x000020, "Member 'TweenVector2DStandardFactory_BP_CreateTweenScaleWidgetBy::bY' has a wrong offset!");
static_assert(offsetof(TweenVector2DStandardFactory_BP_CreateTweenScaleWidgetBy, Duration) == 0x000028, "Member 'TweenVector2DStandardFactory_BP_CreateTweenScaleWidgetBy::Duration' has a wrong offset!");
static_assert(offsetof(TweenVector2DStandardFactory_BP_CreateTweenScaleWidgetBy, EaseType) == 0x00002C, "Member 'TweenVector2DStandardFactory_BP_CreateTweenScaleWidgetBy::EaseType' has a wrong offset!");
static_assert(offsetof(TweenVector2DStandardFactory_BP_CreateTweenScaleWidgetBy, NumLoops) == 0x000030, "Member 'TweenVector2DStandardFactory_BP_CreateTweenScaleWidgetBy::NumLoops' has a wrong offset!");
static_assert(offsetof(TweenVector2DStandardFactory_BP_CreateTweenScaleWidgetBy, LoopType) == 0x000034, "Member 'TweenVector2DStandardFactory_BP_CreateTweenScaleWidgetBy::LoopType' has a wrong offset!");
static_assert(offsetof(TweenVector2DStandardFactory_BP_CreateTweenScaleWidgetBy, Delay) == 0x000038, "Member 'TweenVector2DStandardFactory_BP_CreateTweenScaleWidgetBy::Delay' has a wrong offset!");
static_assert(offsetof(TweenVector2DStandardFactory_BP_CreateTweenScaleWidgetBy, TimeScale) == 0x00003C, "Member 'TweenVector2DStandardFactory_BP_CreateTweenScaleWidgetBy::TimeScale' has a wrong offset!");
static_assert(offsetof(TweenVector2DStandardFactory_BP_CreateTweenScaleWidgetBy, TweenWhileGameIsPaused) == 0x000040, "Member 'TweenVector2DStandardFactory_BP_CreateTweenScaleWidgetBy::TweenWhileGameIsPaused' has a wrong offset!");
static_assert(offsetof(TweenVector2DStandardFactory_BP_CreateTweenScaleWidgetBy, SequenceIndex) == 0x000044, "Member 'TweenVector2DStandardFactory_BP_CreateTweenScaleWidgetBy::SequenceIndex' has a wrong offset!");

// Function TweenMaker.TweenVector2DStandardFactory.BP_CreateTweenScaleWidgetTo
// 0x0048 (0x0048 - 0x0000)
struct TweenVector2DStandardFactory_BP_CreateTweenScaleWidgetTo final
{
public:
	class UTweenManagerComponent*                 TweenManager;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UWidget*                                TweenTarget;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, InstancedReference, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UTweenContainer*                        TweenContainer;                                    // 0x0010(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UTweenVector2D*                         Tween;                                             // 0x0018(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2D                              To;                                                // 0x0020(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Duration;                                          // 0x0028(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETweenEaseType                                EaseType;                                          // 0x002C(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2D[0x3];                                       // 0x002D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         NumLoops;                                          // 0x0030(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETweenLoopType                                LoopType;                                          // 0x0034(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_35[0x3];                                       // 0x0035(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Delay;                                             // 0x0038(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TimeScale;                                         // 0x003C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          TweenWhileGameIsPaused;                            // 0x0040(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_41[0x3];                                       // 0x0041(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         SequenceIndex;                                     // 0x0044(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TweenVector2DStandardFactory_BP_CreateTweenScaleWidgetTo) == 0x000008, "Wrong alignment on TweenVector2DStandardFactory_BP_CreateTweenScaleWidgetTo");
static_assert(sizeof(TweenVector2DStandardFactory_BP_CreateTweenScaleWidgetTo) == 0x000048, "Wrong size on TweenVector2DStandardFactory_BP_CreateTweenScaleWidgetTo");
static_assert(offsetof(TweenVector2DStandardFactory_BP_CreateTweenScaleWidgetTo, TweenManager) == 0x000000, "Member 'TweenVector2DStandardFactory_BP_CreateTweenScaleWidgetTo::TweenManager' has a wrong offset!");
static_assert(offsetof(TweenVector2DStandardFactory_BP_CreateTweenScaleWidgetTo, TweenTarget) == 0x000008, "Member 'TweenVector2DStandardFactory_BP_CreateTweenScaleWidgetTo::TweenTarget' has a wrong offset!");
static_assert(offsetof(TweenVector2DStandardFactory_BP_CreateTweenScaleWidgetTo, TweenContainer) == 0x000010, "Member 'TweenVector2DStandardFactory_BP_CreateTweenScaleWidgetTo::TweenContainer' has a wrong offset!");
static_assert(offsetof(TweenVector2DStandardFactory_BP_CreateTweenScaleWidgetTo, Tween) == 0x000018, "Member 'TweenVector2DStandardFactory_BP_CreateTweenScaleWidgetTo::Tween' has a wrong offset!");
static_assert(offsetof(TweenVector2DStandardFactory_BP_CreateTweenScaleWidgetTo, To) == 0x000020, "Member 'TweenVector2DStandardFactory_BP_CreateTweenScaleWidgetTo::To' has a wrong offset!");
static_assert(offsetof(TweenVector2DStandardFactory_BP_CreateTweenScaleWidgetTo, Duration) == 0x000028, "Member 'TweenVector2DStandardFactory_BP_CreateTweenScaleWidgetTo::Duration' has a wrong offset!");
static_assert(offsetof(TweenVector2DStandardFactory_BP_CreateTweenScaleWidgetTo, EaseType) == 0x00002C, "Member 'TweenVector2DStandardFactory_BP_CreateTweenScaleWidgetTo::EaseType' has a wrong offset!");
static_assert(offsetof(TweenVector2DStandardFactory_BP_CreateTweenScaleWidgetTo, NumLoops) == 0x000030, "Member 'TweenVector2DStandardFactory_BP_CreateTweenScaleWidgetTo::NumLoops' has a wrong offset!");
static_assert(offsetof(TweenVector2DStandardFactory_BP_CreateTweenScaleWidgetTo, LoopType) == 0x000034, "Member 'TweenVector2DStandardFactory_BP_CreateTweenScaleWidgetTo::LoopType' has a wrong offset!");
static_assert(offsetof(TweenVector2DStandardFactory_BP_CreateTweenScaleWidgetTo, Delay) == 0x000038, "Member 'TweenVector2DStandardFactory_BP_CreateTweenScaleWidgetTo::Delay' has a wrong offset!");
static_assert(offsetof(TweenVector2DStandardFactory_BP_CreateTweenScaleWidgetTo, TimeScale) == 0x00003C, "Member 'TweenVector2DStandardFactory_BP_CreateTweenScaleWidgetTo::TimeScale' has a wrong offset!");
static_assert(offsetof(TweenVector2DStandardFactory_BP_CreateTweenScaleWidgetTo, TweenWhileGameIsPaused) == 0x000040, "Member 'TweenVector2DStandardFactory_BP_CreateTweenScaleWidgetTo::TweenWhileGameIsPaused' has a wrong offset!");
static_assert(offsetof(TweenVector2DStandardFactory_BP_CreateTweenScaleWidgetTo, SequenceIndex) == 0x000044, "Member 'TweenVector2DStandardFactory_BP_CreateTweenScaleWidgetTo::SequenceIndex' has a wrong offset!");

// Function TweenMaker.TweenVector2DStandardFactory.BP_CreateTweenShearWidgetTo
// 0x0048 (0x0048 - 0x0000)
struct TweenVector2DStandardFactory_BP_CreateTweenShearWidgetTo final
{
public:
	class UTweenManagerComponent*                 TweenManager;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UWidget*                                TweenTarget;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, InstancedReference, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UTweenContainer*                        TweenContainer;                                    // 0x0010(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UTweenVector2D*                         Tween;                                             // 0x0018(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2D                              To;                                                // 0x0020(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Duration;                                          // 0x0028(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETweenEaseType                                EaseType;                                          // 0x002C(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2D[0x3];                                       // 0x002D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         NumLoops;                                          // 0x0030(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETweenLoopType                                LoopType;                                          // 0x0034(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_35[0x3];                                       // 0x0035(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Delay;                                             // 0x0038(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TimeScale;                                         // 0x003C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          TweenWhileGameIsPaused;                            // 0x0040(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_41[0x3];                                       // 0x0041(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         SequenceIndex;                                     // 0x0044(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TweenVector2DStandardFactory_BP_CreateTweenShearWidgetTo) == 0x000008, "Wrong alignment on TweenVector2DStandardFactory_BP_CreateTweenShearWidgetTo");
static_assert(sizeof(TweenVector2DStandardFactory_BP_CreateTweenShearWidgetTo) == 0x000048, "Wrong size on TweenVector2DStandardFactory_BP_CreateTweenShearWidgetTo");
static_assert(offsetof(TweenVector2DStandardFactory_BP_CreateTweenShearWidgetTo, TweenManager) == 0x000000, "Member 'TweenVector2DStandardFactory_BP_CreateTweenShearWidgetTo::TweenManager' has a wrong offset!");
static_assert(offsetof(TweenVector2DStandardFactory_BP_CreateTweenShearWidgetTo, TweenTarget) == 0x000008, "Member 'TweenVector2DStandardFactory_BP_CreateTweenShearWidgetTo::TweenTarget' has a wrong offset!");
static_assert(offsetof(TweenVector2DStandardFactory_BP_CreateTweenShearWidgetTo, TweenContainer) == 0x000010, "Member 'TweenVector2DStandardFactory_BP_CreateTweenShearWidgetTo::TweenContainer' has a wrong offset!");
static_assert(offsetof(TweenVector2DStandardFactory_BP_CreateTweenShearWidgetTo, Tween) == 0x000018, "Member 'TweenVector2DStandardFactory_BP_CreateTweenShearWidgetTo::Tween' has a wrong offset!");
static_assert(offsetof(TweenVector2DStandardFactory_BP_CreateTweenShearWidgetTo, To) == 0x000020, "Member 'TweenVector2DStandardFactory_BP_CreateTweenShearWidgetTo::To' has a wrong offset!");
static_assert(offsetof(TweenVector2DStandardFactory_BP_CreateTweenShearWidgetTo, Duration) == 0x000028, "Member 'TweenVector2DStandardFactory_BP_CreateTweenShearWidgetTo::Duration' has a wrong offset!");
static_assert(offsetof(TweenVector2DStandardFactory_BP_CreateTweenShearWidgetTo, EaseType) == 0x00002C, "Member 'TweenVector2DStandardFactory_BP_CreateTweenShearWidgetTo::EaseType' has a wrong offset!");
static_assert(offsetof(TweenVector2DStandardFactory_BP_CreateTweenShearWidgetTo, NumLoops) == 0x000030, "Member 'TweenVector2DStandardFactory_BP_CreateTweenShearWidgetTo::NumLoops' has a wrong offset!");
static_assert(offsetof(TweenVector2DStandardFactory_BP_CreateTweenShearWidgetTo, LoopType) == 0x000034, "Member 'TweenVector2DStandardFactory_BP_CreateTweenShearWidgetTo::LoopType' has a wrong offset!");
static_assert(offsetof(TweenVector2DStandardFactory_BP_CreateTweenShearWidgetTo, Delay) == 0x000038, "Member 'TweenVector2DStandardFactory_BP_CreateTweenShearWidgetTo::Delay' has a wrong offset!");
static_assert(offsetof(TweenVector2DStandardFactory_BP_CreateTweenShearWidgetTo, TimeScale) == 0x00003C, "Member 'TweenVector2DStandardFactory_BP_CreateTweenShearWidgetTo::TimeScale' has a wrong offset!");
static_assert(offsetof(TweenVector2DStandardFactory_BP_CreateTweenShearWidgetTo, TweenWhileGameIsPaused) == 0x000040, "Member 'TweenVector2DStandardFactory_BP_CreateTweenShearWidgetTo::TweenWhileGameIsPaused' has a wrong offset!");
static_assert(offsetof(TweenVector2DStandardFactory_BP_CreateTweenShearWidgetTo, SequenceIndex) == 0x000044, "Member 'TweenVector2DStandardFactory_BP_CreateTweenShearWidgetTo::SequenceIndex' has a wrong offset!");

// Function TweenMaker.TweenVector2DStandardFactory.BP_JoinTweenCustomVector2D
// 0x0040 (0x0040 - 0x0000)
struct TweenVector2DStandardFactory_BP_JoinTweenCustomVector2D final
{
public:
	class UTweenContainer*                        TweenContainer;                                    // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UObject*                                TweenTarget;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2D                              From;                                              // 0x0010(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2D                              To;                                                // 0x0018(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Duration;                                          // 0x0020(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETweenEaseType                                EaseType;                                          // 0x0024(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_25[0x3];                                       // 0x0025(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Delay;                                             // 0x0028(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TimeScale;                                         // 0x002C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          TweenWhileGameIsPaused;                            // 0x0030(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_31[0x3];                                       // 0x0031(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         SequenceIndex;                                     // 0x0034(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UTweenVector2D*                         ReturnValue;                                       // 0x0038(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TweenVector2DStandardFactory_BP_JoinTweenCustomVector2D) == 0x000008, "Wrong alignment on TweenVector2DStandardFactory_BP_JoinTweenCustomVector2D");
static_assert(sizeof(TweenVector2DStandardFactory_BP_JoinTweenCustomVector2D) == 0x000040, "Wrong size on TweenVector2DStandardFactory_BP_JoinTweenCustomVector2D");
static_assert(offsetof(TweenVector2DStandardFactory_BP_JoinTweenCustomVector2D, TweenContainer) == 0x000000, "Member 'TweenVector2DStandardFactory_BP_JoinTweenCustomVector2D::TweenContainer' has a wrong offset!");
static_assert(offsetof(TweenVector2DStandardFactory_BP_JoinTweenCustomVector2D, TweenTarget) == 0x000008, "Member 'TweenVector2DStandardFactory_BP_JoinTweenCustomVector2D::TweenTarget' has a wrong offset!");
static_assert(offsetof(TweenVector2DStandardFactory_BP_JoinTweenCustomVector2D, From) == 0x000010, "Member 'TweenVector2DStandardFactory_BP_JoinTweenCustomVector2D::From' has a wrong offset!");
static_assert(offsetof(TweenVector2DStandardFactory_BP_JoinTweenCustomVector2D, To) == 0x000018, "Member 'TweenVector2DStandardFactory_BP_JoinTweenCustomVector2D::To' has a wrong offset!");
static_assert(offsetof(TweenVector2DStandardFactory_BP_JoinTweenCustomVector2D, Duration) == 0x000020, "Member 'TweenVector2DStandardFactory_BP_JoinTweenCustomVector2D::Duration' has a wrong offset!");
static_assert(offsetof(TweenVector2DStandardFactory_BP_JoinTweenCustomVector2D, EaseType) == 0x000024, "Member 'TweenVector2DStandardFactory_BP_JoinTweenCustomVector2D::EaseType' has a wrong offset!");
static_assert(offsetof(TweenVector2DStandardFactory_BP_JoinTweenCustomVector2D, Delay) == 0x000028, "Member 'TweenVector2DStandardFactory_BP_JoinTweenCustomVector2D::Delay' has a wrong offset!");
static_assert(offsetof(TweenVector2DStandardFactory_BP_JoinTweenCustomVector2D, TimeScale) == 0x00002C, "Member 'TweenVector2DStandardFactory_BP_JoinTweenCustomVector2D::TimeScale' has a wrong offset!");
static_assert(offsetof(TweenVector2DStandardFactory_BP_JoinTweenCustomVector2D, TweenWhileGameIsPaused) == 0x000030, "Member 'TweenVector2DStandardFactory_BP_JoinTweenCustomVector2D::TweenWhileGameIsPaused' has a wrong offset!");
static_assert(offsetof(TweenVector2DStandardFactory_BP_JoinTweenCustomVector2D, SequenceIndex) == 0x000034, "Member 'TweenVector2DStandardFactory_BP_JoinTweenCustomVector2D::SequenceIndex' has a wrong offset!");
static_assert(offsetof(TweenVector2DStandardFactory_BP_JoinTweenCustomVector2D, ReturnValue) == 0x000038, "Member 'TweenVector2DStandardFactory_BP_JoinTweenCustomVector2D::ReturnValue' has a wrong offset!");

// Function TweenMaker.TweenVector2DStandardFactory.BP_JoinTweenMoveWidgetBy
// 0x0038 (0x0038 - 0x0000)
struct TweenVector2DStandardFactory_BP_JoinTweenMoveWidgetBy final
{
public:
	class UTweenContainer*                        TweenContainer;                                    // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UWidget*                                TweenTarget;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, InstancedReference, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2D                              bY;                                                // 0x0010(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Duration;                                          // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETweenEaseType                                EaseType;                                          // 0x001C(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1D[0x3];                                       // 0x001D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Delay;                                             // 0x0020(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TimeScale;                                         // 0x0024(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          TweenWhileGameIsPaused;                            // 0x0028(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_29[0x3];                                       // 0x0029(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         SequenceIndex;                                     // 0x002C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UTweenVector2D*                         ReturnValue;                                       // 0x0030(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TweenVector2DStandardFactory_BP_JoinTweenMoveWidgetBy) == 0x000008, "Wrong alignment on TweenVector2DStandardFactory_BP_JoinTweenMoveWidgetBy");
static_assert(sizeof(TweenVector2DStandardFactory_BP_JoinTweenMoveWidgetBy) == 0x000038, "Wrong size on TweenVector2DStandardFactory_BP_JoinTweenMoveWidgetBy");
static_assert(offsetof(TweenVector2DStandardFactory_BP_JoinTweenMoveWidgetBy, TweenContainer) == 0x000000, "Member 'TweenVector2DStandardFactory_BP_JoinTweenMoveWidgetBy::TweenContainer' has a wrong offset!");
static_assert(offsetof(TweenVector2DStandardFactory_BP_JoinTweenMoveWidgetBy, TweenTarget) == 0x000008, "Member 'TweenVector2DStandardFactory_BP_JoinTweenMoveWidgetBy::TweenTarget' has a wrong offset!");
static_assert(offsetof(TweenVector2DStandardFactory_BP_JoinTweenMoveWidgetBy, bY) == 0x000010, "Member 'TweenVector2DStandardFactory_BP_JoinTweenMoveWidgetBy::bY' has a wrong offset!");
static_assert(offsetof(TweenVector2DStandardFactory_BP_JoinTweenMoveWidgetBy, Duration) == 0x000018, "Member 'TweenVector2DStandardFactory_BP_JoinTweenMoveWidgetBy::Duration' has a wrong offset!");
static_assert(offsetof(TweenVector2DStandardFactory_BP_JoinTweenMoveWidgetBy, EaseType) == 0x00001C, "Member 'TweenVector2DStandardFactory_BP_JoinTweenMoveWidgetBy::EaseType' has a wrong offset!");
static_assert(offsetof(TweenVector2DStandardFactory_BP_JoinTweenMoveWidgetBy, Delay) == 0x000020, "Member 'TweenVector2DStandardFactory_BP_JoinTweenMoveWidgetBy::Delay' has a wrong offset!");
static_assert(offsetof(TweenVector2DStandardFactory_BP_JoinTweenMoveWidgetBy, TimeScale) == 0x000024, "Member 'TweenVector2DStandardFactory_BP_JoinTweenMoveWidgetBy::TimeScale' has a wrong offset!");
static_assert(offsetof(TweenVector2DStandardFactory_BP_JoinTweenMoveWidgetBy, TweenWhileGameIsPaused) == 0x000028, "Member 'TweenVector2DStandardFactory_BP_JoinTweenMoveWidgetBy::TweenWhileGameIsPaused' has a wrong offset!");
static_assert(offsetof(TweenVector2DStandardFactory_BP_JoinTweenMoveWidgetBy, SequenceIndex) == 0x00002C, "Member 'TweenVector2DStandardFactory_BP_JoinTweenMoveWidgetBy::SequenceIndex' has a wrong offset!");
static_assert(offsetof(TweenVector2DStandardFactory_BP_JoinTweenMoveWidgetBy, ReturnValue) == 0x000030, "Member 'TweenVector2DStandardFactory_BP_JoinTweenMoveWidgetBy::ReturnValue' has a wrong offset!");

// Function TweenMaker.TweenVector2DStandardFactory.BP_JoinTweenMoveWidgetTo
// 0x0038 (0x0038 - 0x0000)
struct TweenVector2DStandardFactory_BP_JoinTweenMoveWidgetTo final
{
public:
	class UTweenContainer*                        TweenContainer;                                    // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UWidget*                                TweenTarget;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, InstancedReference, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2D                              To;                                                // 0x0010(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Duration;                                          // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETweenEaseType                                EaseType;                                          // 0x001C(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1D[0x3];                                       // 0x001D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Delay;                                             // 0x0020(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TimeScale;                                         // 0x0024(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          TweenWhileGameIsPaused;                            // 0x0028(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_29[0x3];                                       // 0x0029(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         SequenceIndex;                                     // 0x002C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UTweenVector2D*                         ReturnValue;                                       // 0x0030(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TweenVector2DStandardFactory_BP_JoinTweenMoveWidgetTo) == 0x000008, "Wrong alignment on TweenVector2DStandardFactory_BP_JoinTweenMoveWidgetTo");
static_assert(sizeof(TweenVector2DStandardFactory_BP_JoinTweenMoveWidgetTo) == 0x000038, "Wrong size on TweenVector2DStandardFactory_BP_JoinTweenMoveWidgetTo");
static_assert(offsetof(TweenVector2DStandardFactory_BP_JoinTweenMoveWidgetTo, TweenContainer) == 0x000000, "Member 'TweenVector2DStandardFactory_BP_JoinTweenMoveWidgetTo::TweenContainer' has a wrong offset!");
static_assert(offsetof(TweenVector2DStandardFactory_BP_JoinTweenMoveWidgetTo, TweenTarget) == 0x000008, "Member 'TweenVector2DStandardFactory_BP_JoinTweenMoveWidgetTo::TweenTarget' has a wrong offset!");
static_assert(offsetof(TweenVector2DStandardFactory_BP_JoinTweenMoveWidgetTo, To) == 0x000010, "Member 'TweenVector2DStandardFactory_BP_JoinTweenMoveWidgetTo::To' has a wrong offset!");
static_assert(offsetof(TweenVector2DStandardFactory_BP_JoinTweenMoveWidgetTo, Duration) == 0x000018, "Member 'TweenVector2DStandardFactory_BP_JoinTweenMoveWidgetTo::Duration' has a wrong offset!");
static_assert(offsetof(TweenVector2DStandardFactory_BP_JoinTweenMoveWidgetTo, EaseType) == 0x00001C, "Member 'TweenVector2DStandardFactory_BP_JoinTweenMoveWidgetTo::EaseType' has a wrong offset!");
static_assert(offsetof(TweenVector2DStandardFactory_BP_JoinTweenMoveWidgetTo, Delay) == 0x000020, "Member 'TweenVector2DStandardFactory_BP_JoinTweenMoveWidgetTo::Delay' has a wrong offset!");
static_assert(offsetof(TweenVector2DStandardFactory_BP_JoinTweenMoveWidgetTo, TimeScale) == 0x000024, "Member 'TweenVector2DStandardFactory_BP_JoinTweenMoveWidgetTo::TimeScale' has a wrong offset!");
static_assert(offsetof(TweenVector2DStandardFactory_BP_JoinTweenMoveWidgetTo, TweenWhileGameIsPaused) == 0x000028, "Member 'TweenVector2DStandardFactory_BP_JoinTweenMoveWidgetTo::TweenWhileGameIsPaused' has a wrong offset!");
static_assert(offsetof(TweenVector2DStandardFactory_BP_JoinTweenMoveWidgetTo, SequenceIndex) == 0x00002C, "Member 'TweenVector2DStandardFactory_BP_JoinTweenMoveWidgetTo::SequenceIndex' has a wrong offset!");
static_assert(offsetof(TweenVector2DStandardFactory_BP_JoinTweenMoveWidgetTo, ReturnValue) == 0x000030, "Member 'TweenVector2DStandardFactory_BP_JoinTweenMoveWidgetTo::ReturnValue' has a wrong offset!");

// Function TweenMaker.TweenVector2DStandardFactory.BP_JoinTweenScaleWidgetBy
// 0x0038 (0x0038 - 0x0000)
struct TweenVector2DStandardFactory_BP_JoinTweenScaleWidgetBy final
{
public:
	class UTweenContainer*                        TweenContainer;                                    // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UWidget*                                TweenTarget;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, InstancedReference, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2D                              bY;                                                // 0x0010(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Duration;                                          // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETweenEaseType                                EaseType;                                          // 0x001C(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1D[0x3];                                       // 0x001D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Delay;                                             // 0x0020(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TimeScale;                                         // 0x0024(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          TweenWhileGameIsPaused;                            // 0x0028(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_29[0x3];                                       // 0x0029(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         SequenceIndex;                                     // 0x002C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UTweenVector2D*                         ReturnValue;                                       // 0x0030(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TweenVector2DStandardFactory_BP_JoinTweenScaleWidgetBy) == 0x000008, "Wrong alignment on TweenVector2DStandardFactory_BP_JoinTweenScaleWidgetBy");
static_assert(sizeof(TweenVector2DStandardFactory_BP_JoinTweenScaleWidgetBy) == 0x000038, "Wrong size on TweenVector2DStandardFactory_BP_JoinTweenScaleWidgetBy");
static_assert(offsetof(TweenVector2DStandardFactory_BP_JoinTweenScaleWidgetBy, TweenContainer) == 0x000000, "Member 'TweenVector2DStandardFactory_BP_JoinTweenScaleWidgetBy::TweenContainer' has a wrong offset!");
static_assert(offsetof(TweenVector2DStandardFactory_BP_JoinTweenScaleWidgetBy, TweenTarget) == 0x000008, "Member 'TweenVector2DStandardFactory_BP_JoinTweenScaleWidgetBy::TweenTarget' has a wrong offset!");
static_assert(offsetof(TweenVector2DStandardFactory_BP_JoinTweenScaleWidgetBy, bY) == 0x000010, "Member 'TweenVector2DStandardFactory_BP_JoinTweenScaleWidgetBy::bY' has a wrong offset!");
static_assert(offsetof(TweenVector2DStandardFactory_BP_JoinTweenScaleWidgetBy, Duration) == 0x000018, "Member 'TweenVector2DStandardFactory_BP_JoinTweenScaleWidgetBy::Duration' has a wrong offset!");
static_assert(offsetof(TweenVector2DStandardFactory_BP_JoinTweenScaleWidgetBy, EaseType) == 0x00001C, "Member 'TweenVector2DStandardFactory_BP_JoinTweenScaleWidgetBy::EaseType' has a wrong offset!");
static_assert(offsetof(TweenVector2DStandardFactory_BP_JoinTweenScaleWidgetBy, Delay) == 0x000020, "Member 'TweenVector2DStandardFactory_BP_JoinTweenScaleWidgetBy::Delay' has a wrong offset!");
static_assert(offsetof(TweenVector2DStandardFactory_BP_JoinTweenScaleWidgetBy, TimeScale) == 0x000024, "Member 'TweenVector2DStandardFactory_BP_JoinTweenScaleWidgetBy::TimeScale' has a wrong offset!");
static_assert(offsetof(TweenVector2DStandardFactory_BP_JoinTweenScaleWidgetBy, TweenWhileGameIsPaused) == 0x000028, "Member 'TweenVector2DStandardFactory_BP_JoinTweenScaleWidgetBy::TweenWhileGameIsPaused' has a wrong offset!");
static_assert(offsetof(TweenVector2DStandardFactory_BP_JoinTweenScaleWidgetBy, SequenceIndex) == 0x00002C, "Member 'TweenVector2DStandardFactory_BP_JoinTweenScaleWidgetBy::SequenceIndex' has a wrong offset!");
static_assert(offsetof(TweenVector2DStandardFactory_BP_JoinTweenScaleWidgetBy, ReturnValue) == 0x000030, "Member 'TweenVector2DStandardFactory_BP_JoinTweenScaleWidgetBy::ReturnValue' has a wrong offset!");

// Function TweenMaker.TweenVector2DStandardFactory.BP_JoinTweenScaleWidgetTo
// 0x0038 (0x0038 - 0x0000)
struct TweenVector2DStandardFactory_BP_JoinTweenScaleWidgetTo final
{
public:
	class UTweenContainer*                        TweenContainer;                                    // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UWidget*                                TweenTarget;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, InstancedReference, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2D                              To;                                                // 0x0010(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Duration;                                          // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETweenEaseType                                EaseType;                                          // 0x001C(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1D[0x3];                                       // 0x001D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Delay;                                             // 0x0020(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TimeScale;                                         // 0x0024(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          TweenWhileGameIsPaused;                            // 0x0028(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_29[0x3];                                       // 0x0029(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         SequenceIndex;                                     // 0x002C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UTweenVector2D*                         ReturnValue;                                       // 0x0030(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TweenVector2DStandardFactory_BP_JoinTweenScaleWidgetTo) == 0x000008, "Wrong alignment on TweenVector2DStandardFactory_BP_JoinTweenScaleWidgetTo");
static_assert(sizeof(TweenVector2DStandardFactory_BP_JoinTweenScaleWidgetTo) == 0x000038, "Wrong size on TweenVector2DStandardFactory_BP_JoinTweenScaleWidgetTo");
static_assert(offsetof(TweenVector2DStandardFactory_BP_JoinTweenScaleWidgetTo, TweenContainer) == 0x000000, "Member 'TweenVector2DStandardFactory_BP_JoinTweenScaleWidgetTo::TweenContainer' has a wrong offset!");
static_assert(offsetof(TweenVector2DStandardFactory_BP_JoinTweenScaleWidgetTo, TweenTarget) == 0x000008, "Member 'TweenVector2DStandardFactory_BP_JoinTweenScaleWidgetTo::TweenTarget' has a wrong offset!");
static_assert(offsetof(TweenVector2DStandardFactory_BP_JoinTweenScaleWidgetTo, To) == 0x000010, "Member 'TweenVector2DStandardFactory_BP_JoinTweenScaleWidgetTo::To' has a wrong offset!");
static_assert(offsetof(TweenVector2DStandardFactory_BP_JoinTweenScaleWidgetTo, Duration) == 0x000018, "Member 'TweenVector2DStandardFactory_BP_JoinTweenScaleWidgetTo::Duration' has a wrong offset!");
static_assert(offsetof(TweenVector2DStandardFactory_BP_JoinTweenScaleWidgetTo, EaseType) == 0x00001C, "Member 'TweenVector2DStandardFactory_BP_JoinTweenScaleWidgetTo::EaseType' has a wrong offset!");
static_assert(offsetof(TweenVector2DStandardFactory_BP_JoinTweenScaleWidgetTo, Delay) == 0x000020, "Member 'TweenVector2DStandardFactory_BP_JoinTweenScaleWidgetTo::Delay' has a wrong offset!");
static_assert(offsetof(TweenVector2DStandardFactory_BP_JoinTweenScaleWidgetTo, TimeScale) == 0x000024, "Member 'TweenVector2DStandardFactory_BP_JoinTweenScaleWidgetTo::TimeScale' has a wrong offset!");
static_assert(offsetof(TweenVector2DStandardFactory_BP_JoinTweenScaleWidgetTo, TweenWhileGameIsPaused) == 0x000028, "Member 'TweenVector2DStandardFactory_BP_JoinTweenScaleWidgetTo::TweenWhileGameIsPaused' has a wrong offset!");
static_assert(offsetof(TweenVector2DStandardFactory_BP_JoinTweenScaleWidgetTo, SequenceIndex) == 0x00002C, "Member 'TweenVector2DStandardFactory_BP_JoinTweenScaleWidgetTo::SequenceIndex' has a wrong offset!");
static_assert(offsetof(TweenVector2DStandardFactory_BP_JoinTweenScaleWidgetTo, ReturnValue) == 0x000030, "Member 'TweenVector2DStandardFactory_BP_JoinTweenScaleWidgetTo::ReturnValue' has a wrong offset!");

// Function TweenMaker.TweenVector2DStandardFactory.BP_JoinTweenShearWidgetTo
// 0x0038 (0x0038 - 0x0000)
struct TweenVector2DStandardFactory_BP_JoinTweenShearWidgetTo final
{
public:
	class UTweenContainer*                        TweenContainer;                                    // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UWidget*                                TweenTarget;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, InstancedReference, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2D                              To;                                                // 0x0010(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Duration;                                          // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETweenEaseType                                EaseType;                                          // 0x001C(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1D[0x3];                                       // 0x001D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Delay;                                             // 0x0020(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TimeScale;                                         // 0x0024(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          TweenWhileGameIsPaused;                            // 0x0028(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_29[0x3];                                       // 0x0029(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         SequenceIndex;                                     // 0x002C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UTweenVector2D*                         ReturnValue;                                       // 0x0030(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TweenVector2DStandardFactory_BP_JoinTweenShearWidgetTo) == 0x000008, "Wrong alignment on TweenVector2DStandardFactory_BP_JoinTweenShearWidgetTo");
static_assert(sizeof(TweenVector2DStandardFactory_BP_JoinTweenShearWidgetTo) == 0x000038, "Wrong size on TweenVector2DStandardFactory_BP_JoinTweenShearWidgetTo");
static_assert(offsetof(TweenVector2DStandardFactory_BP_JoinTweenShearWidgetTo, TweenContainer) == 0x000000, "Member 'TweenVector2DStandardFactory_BP_JoinTweenShearWidgetTo::TweenContainer' has a wrong offset!");
static_assert(offsetof(TweenVector2DStandardFactory_BP_JoinTweenShearWidgetTo, TweenTarget) == 0x000008, "Member 'TweenVector2DStandardFactory_BP_JoinTweenShearWidgetTo::TweenTarget' has a wrong offset!");
static_assert(offsetof(TweenVector2DStandardFactory_BP_JoinTweenShearWidgetTo, To) == 0x000010, "Member 'TweenVector2DStandardFactory_BP_JoinTweenShearWidgetTo::To' has a wrong offset!");
static_assert(offsetof(TweenVector2DStandardFactory_BP_JoinTweenShearWidgetTo, Duration) == 0x000018, "Member 'TweenVector2DStandardFactory_BP_JoinTweenShearWidgetTo::Duration' has a wrong offset!");
static_assert(offsetof(TweenVector2DStandardFactory_BP_JoinTweenShearWidgetTo, EaseType) == 0x00001C, "Member 'TweenVector2DStandardFactory_BP_JoinTweenShearWidgetTo::EaseType' has a wrong offset!");
static_assert(offsetof(TweenVector2DStandardFactory_BP_JoinTweenShearWidgetTo, Delay) == 0x000020, "Member 'TweenVector2DStandardFactory_BP_JoinTweenShearWidgetTo::Delay' has a wrong offset!");
static_assert(offsetof(TweenVector2DStandardFactory_BP_JoinTweenShearWidgetTo, TimeScale) == 0x000024, "Member 'TweenVector2DStandardFactory_BP_JoinTweenShearWidgetTo::TimeScale' has a wrong offset!");
static_assert(offsetof(TweenVector2DStandardFactory_BP_JoinTweenShearWidgetTo, TweenWhileGameIsPaused) == 0x000028, "Member 'TweenVector2DStandardFactory_BP_JoinTweenShearWidgetTo::TweenWhileGameIsPaused' has a wrong offset!");
static_assert(offsetof(TweenVector2DStandardFactory_BP_JoinTweenShearWidgetTo, SequenceIndex) == 0x00002C, "Member 'TweenVector2DStandardFactory_BP_JoinTweenShearWidgetTo::SequenceIndex' has a wrong offset!");
static_assert(offsetof(TweenVector2DStandardFactory_BP_JoinTweenShearWidgetTo, ReturnValue) == 0x000030, "Member 'TweenVector2DStandardFactory_BP_JoinTweenShearWidgetTo::ReturnValue' has a wrong offset!");

// Function TweenMaker.TweenVectorLatentFactory.BP_AppendLatentTweenCustomVector
// 0x0058 (0x0058 - 0x0000)
struct TweenVectorLatentFactory_BP_AppendLatentTweenCustomVector final
{
public:
	class UTweenContainer*                        TweenContainer;                                    // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UTweenVector*                           OutTween;                                          // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UObject*                                TweenTarget;                                       // 0x0010(0x0008)(Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                From;                                              // 0x0018(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                To;                                                // 0x0024(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Duration;                                          // 0x0030(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETweenEaseType                                EaseType;                                          // 0x0034(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_35[0x3];                                       // 0x0035(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         NumLoops;                                          // 0x0038(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETweenLoopType                                LoopType;                                          // 0x003C(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_3D[0x3];                                       // 0x003D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Delay;                                             // 0x0040(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TimeScale;                                         // 0x0044(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          TweenWhileGameIsPaused;                            // 0x0048(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_49[0x7];                                       // 0x0049(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UTweenVectorLatentFactory*              ReturnValue;                                       // 0x0050(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TweenVectorLatentFactory_BP_AppendLatentTweenCustomVector) == 0x000008, "Wrong alignment on TweenVectorLatentFactory_BP_AppendLatentTweenCustomVector");
static_assert(sizeof(TweenVectorLatentFactory_BP_AppendLatentTweenCustomVector) == 0x000058, "Wrong size on TweenVectorLatentFactory_BP_AppendLatentTweenCustomVector");
static_assert(offsetof(TweenVectorLatentFactory_BP_AppendLatentTweenCustomVector, TweenContainer) == 0x000000, "Member 'TweenVectorLatentFactory_BP_AppendLatentTweenCustomVector::TweenContainer' has a wrong offset!");
static_assert(offsetof(TweenVectorLatentFactory_BP_AppendLatentTweenCustomVector, OutTween) == 0x000008, "Member 'TweenVectorLatentFactory_BP_AppendLatentTweenCustomVector::OutTween' has a wrong offset!");
static_assert(offsetof(TweenVectorLatentFactory_BP_AppendLatentTweenCustomVector, TweenTarget) == 0x000010, "Member 'TweenVectorLatentFactory_BP_AppendLatentTweenCustomVector::TweenTarget' has a wrong offset!");
static_assert(offsetof(TweenVectorLatentFactory_BP_AppendLatentTweenCustomVector, From) == 0x000018, "Member 'TweenVectorLatentFactory_BP_AppendLatentTweenCustomVector::From' has a wrong offset!");
static_assert(offsetof(TweenVectorLatentFactory_BP_AppendLatentTweenCustomVector, To) == 0x000024, "Member 'TweenVectorLatentFactory_BP_AppendLatentTweenCustomVector::To' has a wrong offset!");
static_assert(offsetof(TweenVectorLatentFactory_BP_AppendLatentTweenCustomVector, Duration) == 0x000030, "Member 'TweenVectorLatentFactory_BP_AppendLatentTweenCustomVector::Duration' has a wrong offset!");
static_assert(offsetof(TweenVectorLatentFactory_BP_AppendLatentTweenCustomVector, EaseType) == 0x000034, "Member 'TweenVectorLatentFactory_BP_AppendLatentTweenCustomVector::EaseType' has a wrong offset!");
static_assert(offsetof(TweenVectorLatentFactory_BP_AppendLatentTweenCustomVector, NumLoops) == 0x000038, "Member 'TweenVectorLatentFactory_BP_AppendLatentTweenCustomVector::NumLoops' has a wrong offset!");
static_assert(offsetof(TweenVectorLatentFactory_BP_AppendLatentTweenCustomVector, LoopType) == 0x00003C, "Member 'TweenVectorLatentFactory_BP_AppendLatentTweenCustomVector::LoopType' has a wrong offset!");
static_assert(offsetof(TweenVectorLatentFactory_BP_AppendLatentTweenCustomVector, Delay) == 0x000040, "Member 'TweenVectorLatentFactory_BP_AppendLatentTweenCustomVector::Delay' has a wrong offset!");
static_assert(offsetof(TweenVectorLatentFactory_BP_AppendLatentTweenCustomVector, TimeScale) == 0x000044, "Member 'TweenVectorLatentFactory_BP_AppendLatentTweenCustomVector::TimeScale' has a wrong offset!");
static_assert(offsetof(TweenVectorLatentFactory_BP_AppendLatentTweenCustomVector, TweenWhileGameIsPaused) == 0x000048, "Member 'TweenVectorLatentFactory_BP_AppendLatentTweenCustomVector::TweenWhileGameIsPaused' has a wrong offset!");
static_assert(offsetof(TweenVectorLatentFactory_BP_AppendLatentTweenCustomVector, ReturnValue) == 0x000050, "Member 'TweenVectorLatentFactory_BP_AppendLatentTweenCustomVector::ReturnValue' has a wrong offset!");

// Function TweenMaker.TweenVectorLatentFactory.BP_AppendLatentTweenMoveActorBy
// 0x0048 (0x0048 - 0x0000)
struct TweenVectorLatentFactory_BP_AppendLatentTweenMoveActorBy final
{
public:
	class UTweenContainer*                        TweenContainer;                                    // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UTweenVector*                           OutTween;                                          // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 TweenTarget;                                       // 0x0010(0x0008)(Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                bY;                                                // 0x0018(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Duration;                                          // 0x0024(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETweenEaseType                                EaseType;                                          // 0x0028(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          DeleteTweenOnHit;                                  // 0x0029(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          DeleteTweenOnOverlap;                              // 0x002A(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2B[0x1];                                       // 0x002B(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         NumLoops;                                          // 0x002C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETweenLoopType                                LoopType;                                          // 0x0030(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_31[0x3];                                       // 0x0031(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Delay;                                             // 0x0034(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TimeScale;                                         // 0x0038(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          TweenWhileGameIsPaused;                            // 0x003C(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_3D[0x3];                                       // 0x003D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UTweenVectorLatentFactory*              ReturnValue;                                       // 0x0040(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TweenVectorLatentFactory_BP_AppendLatentTweenMoveActorBy) == 0x000008, "Wrong alignment on TweenVectorLatentFactory_BP_AppendLatentTweenMoveActorBy");
static_assert(sizeof(TweenVectorLatentFactory_BP_AppendLatentTweenMoveActorBy) == 0x000048, "Wrong size on TweenVectorLatentFactory_BP_AppendLatentTweenMoveActorBy");
static_assert(offsetof(TweenVectorLatentFactory_BP_AppendLatentTweenMoveActorBy, TweenContainer) == 0x000000, "Member 'TweenVectorLatentFactory_BP_AppendLatentTweenMoveActorBy::TweenContainer' has a wrong offset!");
static_assert(offsetof(TweenVectorLatentFactory_BP_AppendLatentTweenMoveActorBy, OutTween) == 0x000008, "Member 'TweenVectorLatentFactory_BP_AppendLatentTweenMoveActorBy::OutTween' has a wrong offset!");
static_assert(offsetof(TweenVectorLatentFactory_BP_AppendLatentTweenMoveActorBy, TweenTarget) == 0x000010, "Member 'TweenVectorLatentFactory_BP_AppendLatentTweenMoveActorBy::TweenTarget' has a wrong offset!");
static_assert(offsetof(TweenVectorLatentFactory_BP_AppendLatentTweenMoveActorBy, bY) == 0x000018, "Member 'TweenVectorLatentFactory_BP_AppendLatentTweenMoveActorBy::bY' has a wrong offset!");
static_assert(offsetof(TweenVectorLatentFactory_BP_AppendLatentTweenMoveActorBy, Duration) == 0x000024, "Member 'TweenVectorLatentFactory_BP_AppendLatentTweenMoveActorBy::Duration' has a wrong offset!");
static_assert(offsetof(TweenVectorLatentFactory_BP_AppendLatentTweenMoveActorBy, EaseType) == 0x000028, "Member 'TweenVectorLatentFactory_BP_AppendLatentTweenMoveActorBy::EaseType' has a wrong offset!");
static_assert(offsetof(TweenVectorLatentFactory_BP_AppendLatentTweenMoveActorBy, DeleteTweenOnHit) == 0x000029, "Member 'TweenVectorLatentFactory_BP_AppendLatentTweenMoveActorBy::DeleteTweenOnHit' has a wrong offset!");
static_assert(offsetof(TweenVectorLatentFactory_BP_AppendLatentTweenMoveActorBy, DeleteTweenOnOverlap) == 0x00002A, "Member 'TweenVectorLatentFactory_BP_AppendLatentTweenMoveActorBy::DeleteTweenOnOverlap' has a wrong offset!");
static_assert(offsetof(TweenVectorLatentFactory_BP_AppendLatentTweenMoveActorBy, NumLoops) == 0x00002C, "Member 'TweenVectorLatentFactory_BP_AppendLatentTweenMoveActorBy::NumLoops' has a wrong offset!");
static_assert(offsetof(TweenVectorLatentFactory_BP_AppendLatentTweenMoveActorBy, LoopType) == 0x000030, "Member 'TweenVectorLatentFactory_BP_AppendLatentTweenMoveActorBy::LoopType' has a wrong offset!");
static_assert(offsetof(TweenVectorLatentFactory_BP_AppendLatentTweenMoveActorBy, Delay) == 0x000034, "Member 'TweenVectorLatentFactory_BP_AppendLatentTweenMoveActorBy::Delay' has a wrong offset!");
static_assert(offsetof(TweenVectorLatentFactory_BP_AppendLatentTweenMoveActorBy, TimeScale) == 0x000038, "Member 'TweenVectorLatentFactory_BP_AppendLatentTweenMoveActorBy::TimeScale' has a wrong offset!");
static_assert(offsetof(TweenVectorLatentFactory_BP_AppendLatentTweenMoveActorBy, TweenWhileGameIsPaused) == 0x00003C, "Member 'TweenVectorLatentFactory_BP_AppendLatentTweenMoveActorBy::TweenWhileGameIsPaused' has a wrong offset!");
static_assert(offsetof(TweenVectorLatentFactory_BP_AppendLatentTweenMoveActorBy, ReturnValue) == 0x000040, "Member 'TweenVectorLatentFactory_BP_AppendLatentTweenMoveActorBy::ReturnValue' has a wrong offset!");

// Function TweenMaker.TweenVectorLatentFactory.BP_AppendLatentTweenMoveActorTo
// 0x0048 (0x0048 - 0x0000)
struct TweenVectorLatentFactory_BP_AppendLatentTweenMoveActorTo final
{
public:
	class UTweenContainer*                        TweenContainer;                                    // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UTweenVector*                           OutTween;                                          // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 TweenTarget;                                       // 0x0010(0x0008)(Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                To;                                                // 0x0018(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Duration;                                          // 0x0024(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETweenEaseType                                EaseType;                                          // 0x0028(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETweenSpace                                   TweenSpace;                                        // 0x0029(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          DeleteTweenOnHit;                                  // 0x002A(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          DeleteTweenOnOverlap;                              // 0x002B(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         NumLoops;                                          // 0x002C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETweenLoopType                                LoopType;                                          // 0x0030(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_31[0x3];                                       // 0x0031(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Delay;                                             // 0x0034(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TimeScale;                                         // 0x0038(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          TweenWhileGameIsPaused;                            // 0x003C(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_3D[0x3];                                       // 0x003D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UTweenVectorLatentFactory*              ReturnValue;                                       // 0x0040(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TweenVectorLatentFactory_BP_AppendLatentTweenMoveActorTo) == 0x000008, "Wrong alignment on TweenVectorLatentFactory_BP_AppendLatentTweenMoveActorTo");
static_assert(sizeof(TweenVectorLatentFactory_BP_AppendLatentTweenMoveActorTo) == 0x000048, "Wrong size on TweenVectorLatentFactory_BP_AppendLatentTweenMoveActorTo");
static_assert(offsetof(TweenVectorLatentFactory_BP_AppendLatentTweenMoveActorTo, TweenContainer) == 0x000000, "Member 'TweenVectorLatentFactory_BP_AppendLatentTweenMoveActorTo::TweenContainer' has a wrong offset!");
static_assert(offsetof(TweenVectorLatentFactory_BP_AppendLatentTweenMoveActorTo, OutTween) == 0x000008, "Member 'TweenVectorLatentFactory_BP_AppendLatentTweenMoveActorTo::OutTween' has a wrong offset!");
static_assert(offsetof(TweenVectorLatentFactory_BP_AppendLatentTweenMoveActorTo, TweenTarget) == 0x000010, "Member 'TweenVectorLatentFactory_BP_AppendLatentTweenMoveActorTo::TweenTarget' has a wrong offset!");
static_assert(offsetof(TweenVectorLatentFactory_BP_AppendLatentTweenMoveActorTo, To) == 0x000018, "Member 'TweenVectorLatentFactory_BP_AppendLatentTweenMoveActorTo::To' has a wrong offset!");
static_assert(offsetof(TweenVectorLatentFactory_BP_AppendLatentTweenMoveActorTo, Duration) == 0x000024, "Member 'TweenVectorLatentFactory_BP_AppendLatentTweenMoveActorTo::Duration' has a wrong offset!");
static_assert(offsetof(TweenVectorLatentFactory_BP_AppendLatentTweenMoveActorTo, EaseType) == 0x000028, "Member 'TweenVectorLatentFactory_BP_AppendLatentTweenMoveActorTo::EaseType' has a wrong offset!");
static_assert(offsetof(TweenVectorLatentFactory_BP_AppendLatentTweenMoveActorTo, TweenSpace) == 0x000029, "Member 'TweenVectorLatentFactory_BP_AppendLatentTweenMoveActorTo::TweenSpace' has a wrong offset!");
static_assert(offsetof(TweenVectorLatentFactory_BP_AppendLatentTweenMoveActorTo, DeleteTweenOnHit) == 0x00002A, "Member 'TweenVectorLatentFactory_BP_AppendLatentTweenMoveActorTo::DeleteTweenOnHit' has a wrong offset!");
static_assert(offsetof(TweenVectorLatentFactory_BP_AppendLatentTweenMoveActorTo, DeleteTweenOnOverlap) == 0x00002B, "Member 'TweenVectorLatentFactory_BP_AppendLatentTweenMoveActorTo::DeleteTweenOnOverlap' has a wrong offset!");
static_assert(offsetof(TweenVectorLatentFactory_BP_AppendLatentTweenMoveActorTo, NumLoops) == 0x00002C, "Member 'TweenVectorLatentFactory_BP_AppendLatentTweenMoveActorTo::NumLoops' has a wrong offset!");
static_assert(offsetof(TweenVectorLatentFactory_BP_AppendLatentTweenMoveActorTo, LoopType) == 0x000030, "Member 'TweenVectorLatentFactory_BP_AppendLatentTweenMoveActorTo::LoopType' has a wrong offset!");
static_assert(offsetof(TweenVectorLatentFactory_BP_AppendLatentTweenMoveActorTo, Delay) == 0x000034, "Member 'TweenVectorLatentFactory_BP_AppendLatentTweenMoveActorTo::Delay' has a wrong offset!");
static_assert(offsetof(TweenVectorLatentFactory_BP_AppendLatentTweenMoveActorTo, TimeScale) == 0x000038, "Member 'TweenVectorLatentFactory_BP_AppendLatentTweenMoveActorTo::TimeScale' has a wrong offset!");
static_assert(offsetof(TweenVectorLatentFactory_BP_AppendLatentTweenMoveActorTo, TweenWhileGameIsPaused) == 0x00003C, "Member 'TweenVectorLatentFactory_BP_AppendLatentTweenMoveActorTo::TweenWhileGameIsPaused' has a wrong offset!");
static_assert(offsetof(TweenVectorLatentFactory_BP_AppendLatentTweenMoveActorTo, ReturnValue) == 0x000040, "Member 'TweenVectorLatentFactory_BP_AppendLatentTweenMoveActorTo::ReturnValue' has a wrong offset!");

// Function TweenMaker.TweenVectorLatentFactory.BP_AppendLatentTweenMoveSceneComponentBy
// 0x0048 (0x0048 - 0x0000)
struct TweenVectorLatentFactory_BP_AppendLatentTweenMoveSceneComponentBy final
{
public:
	class UTweenContainer*                        TweenContainer;                                    // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UTweenVector*                           OutTween;                                          // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USceneComponent*                        TweenTarget;                                       // 0x0010(0x0008)(Parm, OutParm, ZeroConstructor, InstancedReference, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                bY;                                                // 0x0018(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Duration;                                          // 0x0024(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETweenEaseType                                EaseType;                                          // 0x0028(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          DeleteTweenOnHit;                                  // 0x0029(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          DeleteTweenOnOverlap;                              // 0x002A(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2B[0x1];                                       // 0x002B(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         NumLoops;                                          // 0x002C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETweenLoopType                                LoopType;                                          // 0x0030(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_31[0x3];                                       // 0x0031(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Delay;                                             // 0x0034(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TimeScale;                                         // 0x0038(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          TweenWhileGameIsPaused;                            // 0x003C(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_3D[0x3];                                       // 0x003D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UTweenVectorLatentFactory*              ReturnValue;                                       // 0x0040(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TweenVectorLatentFactory_BP_AppendLatentTweenMoveSceneComponentBy) == 0x000008, "Wrong alignment on TweenVectorLatentFactory_BP_AppendLatentTweenMoveSceneComponentBy");
static_assert(sizeof(TweenVectorLatentFactory_BP_AppendLatentTweenMoveSceneComponentBy) == 0x000048, "Wrong size on TweenVectorLatentFactory_BP_AppendLatentTweenMoveSceneComponentBy");
static_assert(offsetof(TweenVectorLatentFactory_BP_AppendLatentTweenMoveSceneComponentBy, TweenContainer) == 0x000000, "Member 'TweenVectorLatentFactory_BP_AppendLatentTweenMoveSceneComponentBy::TweenContainer' has a wrong offset!");
static_assert(offsetof(TweenVectorLatentFactory_BP_AppendLatentTweenMoveSceneComponentBy, OutTween) == 0x000008, "Member 'TweenVectorLatentFactory_BP_AppendLatentTweenMoveSceneComponentBy::OutTween' has a wrong offset!");
static_assert(offsetof(TweenVectorLatentFactory_BP_AppendLatentTweenMoveSceneComponentBy, TweenTarget) == 0x000010, "Member 'TweenVectorLatentFactory_BP_AppendLatentTweenMoveSceneComponentBy::TweenTarget' has a wrong offset!");
static_assert(offsetof(TweenVectorLatentFactory_BP_AppendLatentTweenMoveSceneComponentBy, bY) == 0x000018, "Member 'TweenVectorLatentFactory_BP_AppendLatentTweenMoveSceneComponentBy::bY' has a wrong offset!");
static_assert(offsetof(TweenVectorLatentFactory_BP_AppendLatentTweenMoveSceneComponentBy, Duration) == 0x000024, "Member 'TweenVectorLatentFactory_BP_AppendLatentTweenMoveSceneComponentBy::Duration' has a wrong offset!");
static_assert(offsetof(TweenVectorLatentFactory_BP_AppendLatentTweenMoveSceneComponentBy, EaseType) == 0x000028, "Member 'TweenVectorLatentFactory_BP_AppendLatentTweenMoveSceneComponentBy::EaseType' has a wrong offset!");
static_assert(offsetof(TweenVectorLatentFactory_BP_AppendLatentTweenMoveSceneComponentBy, DeleteTweenOnHit) == 0x000029, "Member 'TweenVectorLatentFactory_BP_AppendLatentTweenMoveSceneComponentBy::DeleteTweenOnHit' has a wrong offset!");
static_assert(offsetof(TweenVectorLatentFactory_BP_AppendLatentTweenMoveSceneComponentBy, DeleteTweenOnOverlap) == 0x00002A, "Member 'TweenVectorLatentFactory_BP_AppendLatentTweenMoveSceneComponentBy::DeleteTweenOnOverlap' has a wrong offset!");
static_assert(offsetof(TweenVectorLatentFactory_BP_AppendLatentTweenMoveSceneComponentBy, NumLoops) == 0x00002C, "Member 'TweenVectorLatentFactory_BP_AppendLatentTweenMoveSceneComponentBy::NumLoops' has a wrong offset!");
static_assert(offsetof(TweenVectorLatentFactory_BP_AppendLatentTweenMoveSceneComponentBy, LoopType) == 0x000030, "Member 'TweenVectorLatentFactory_BP_AppendLatentTweenMoveSceneComponentBy::LoopType' has a wrong offset!");
static_assert(offsetof(TweenVectorLatentFactory_BP_AppendLatentTweenMoveSceneComponentBy, Delay) == 0x000034, "Member 'TweenVectorLatentFactory_BP_AppendLatentTweenMoveSceneComponentBy::Delay' has a wrong offset!");
static_assert(offsetof(TweenVectorLatentFactory_BP_AppendLatentTweenMoveSceneComponentBy, TimeScale) == 0x000038, "Member 'TweenVectorLatentFactory_BP_AppendLatentTweenMoveSceneComponentBy::TimeScale' has a wrong offset!");
static_assert(offsetof(TweenVectorLatentFactory_BP_AppendLatentTweenMoveSceneComponentBy, TweenWhileGameIsPaused) == 0x00003C, "Member 'TweenVectorLatentFactory_BP_AppendLatentTweenMoveSceneComponentBy::TweenWhileGameIsPaused' has a wrong offset!");
static_assert(offsetof(TweenVectorLatentFactory_BP_AppendLatentTweenMoveSceneComponentBy, ReturnValue) == 0x000040, "Member 'TweenVectorLatentFactory_BP_AppendLatentTweenMoveSceneComponentBy::ReturnValue' has a wrong offset!");

// Function TweenMaker.TweenVectorLatentFactory.BP_AppendLatentTweenMoveSceneComponentTo
// 0x0048 (0x0048 - 0x0000)
struct TweenVectorLatentFactory_BP_AppendLatentTweenMoveSceneComponentTo final
{
public:
	class UTweenContainer*                        TweenContainer;                                    // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UTweenVector*                           OutTween;                                          // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USceneComponent*                        TweenTarget;                                       // 0x0010(0x0008)(Parm, OutParm, ZeroConstructor, InstancedReference, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                To;                                                // 0x0018(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Duration;                                          // 0x0024(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETweenEaseType                                EaseType;                                          // 0x0028(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETweenSpace                                   TweenSpace;                                        // 0x0029(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          DeleteTweenOnHit;                                  // 0x002A(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          DeleteTweenOnOverlap;                              // 0x002B(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         NumLoops;                                          // 0x002C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETweenLoopType                                LoopType;                                          // 0x0030(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_31[0x3];                                       // 0x0031(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Delay;                                             // 0x0034(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TimeScale;                                         // 0x0038(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          TweenWhileGameIsPaused;                            // 0x003C(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_3D[0x3];                                       // 0x003D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UTweenVectorLatentFactory*              ReturnValue;                                       // 0x0040(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TweenVectorLatentFactory_BP_AppendLatentTweenMoveSceneComponentTo) == 0x000008, "Wrong alignment on TweenVectorLatentFactory_BP_AppendLatentTweenMoveSceneComponentTo");
static_assert(sizeof(TweenVectorLatentFactory_BP_AppendLatentTweenMoveSceneComponentTo) == 0x000048, "Wrong size on TweenVectorLatentFactory_BP_AppendLatentTweenMoveSceneComponentTo");
static_assert(offsetof(TweenVectorLatentFactory_BP_AppendLatentTweenMoveSceneComponentTo, TweenContainer) == 0x000000, "Member 'TweenVectorLatentFactory_BP_AppendLatentTweenMoveSceneComponentTo::TweenContainer' has a wrong offset!");
static_assert(offsetof(TweenVectorLatentFactory_BP_AppendLatentTweenMoveSceneComponentTo, OutTween) == 0x000008, "Member 'TweenVectorLatentFactory_BP_AppendLatentTweenMoveSceneComponentTo::OutTween' has a wrong offset!");
static_assert(offsetof(TweenVectorLatentFactory_BP_AppendLatentTweenMoveSceneComponentTo, TweenTarget) == 0x000010, "Member 'TweenVectorLatentFactory_BP_AppendLatentTweenMoveSceneComponentTo::TweenTarget' has a wrong offset!");
static_assert(offsetof(TweenVectorLatentFactory_BP_AppendLatentTweenMoveSceneComponentTo, To) == 0x000018, "Member 'TweenVectorLatentFactory_BP_AppendLatentTweenMoveSceneComponentTo::To' has a wrong offset!");
static_assert(offsetof(TweenVectorLatentFactory_BP_AppendLatentTweenMoveSceneComponentTo, Duration) == 0x000024, "Member 'TweenVectorLatentFactory_BP_AppendLatentTweenMoveSceneComponentTo::Duration' has a wrong offset!");
static_assert(offsetof(TweenVectorLatentFactory_BP_AppendLatentTweenMoveSceneComponentTo, EaseType) == 0x000028, "Member 'TweenVectorLatentFactory_BP_AppendLatentTweenMoveSceneComponentTo::EaseType' has a wrong offset!");
static_assert(offsetof(TweenVectorLatentFactory_BP_AppendLatentTweenMoveSceneComponentTo, TweenSpace) == 0x000029, "Member 'TweenVectorLatentFactory_BP_AppendLatentTweenMoveSceneComponentTo::TweenSpace' has a wrong offset!");
static_assert(offsetof(TweenVectorLatentFactory_BP_AppendLatentTweenMoveSceneComponentTo, DeleteTweenOnHit) == 0x00002A, "Member 'TweenVectorLatentFactory_BP_AppendLatentTweenMoveSceneComponentTo::DeleteTweenOnHit' has a wrong offset!");
static_assert(offsetof(TweenVectorLatentFactory_BP_AppendLatentTweenMoveSceneComponentTo, DeleteTweenOnOverlap) == 0x00002B, "Member 'TweenVectorLatentFactory_BP_AppendLatentTweenMoveSceneComponentTo::DeleteTweenOnOverlap' has a wrong offset!");
static_assert(offsetof(TweenVectorLatentFactory_BP_AppendLatentTweenMoveSceneComponentTo, NumLoops) == 0x00002C, "Member 'TweenVectorLatentFactory_BP_AppendLatentTweenMoveSceneComponentTo::NumLoops' has a wrong offset!");
static_assert(offsetof(TweenVectorLatentFactory_BP_AppendLatentTweenMoveSceneComponentTo, LoopType) == 0x000030, "Member 'TweenVectorLatentFactory_BP_AppendLatentTweenMoveSceneComponentTo::LoopType' has a wrong offset!");
static_assert(offsetof(TweenVectorLatentFactory_BP_AppendLatentTweenMoveSceneComponentTo, Delay) == 0x000034, "Member 'TweenVectorLatentFactory_BP_AppendLatentTweenMoveSceneComponentTo::Delay' has a wrong offset!");
static_assert(offsetof(TweenVectorLatentFactory_BP_AppendLatentTweenMoveSceneComponentTo, TimeScale) == 0x000038, "Member 'TweenVectorLatentFactory_BP_AppendLatentTweenMoveSceneComponentTo::TimeScale' has a wrong offset!");
static_assert(offsetof(TweenVectorLatentFactory_BP_AppendLatentTweenMoveSceneComponentTo, TweenWhileGameIsPaused) == 0x00003C, "Member 'TweenVectorLatentFactory_BP_AppendLatentTweenMoveSceneComponentTo::TweenWhileGameIsPaused' has a wrong offset!");
static_assert(offsetof(TweenVectorLatentFactory_BP_AppendLatentTweenMoveSceneComponentTo, ReturnValue) == 0x000040, "Member 'TweenVectorLatentFactory_BP_AppendLatentTweenMoveSceneComponentTo::ReturnValue' has a wrong offset!");

// Function TweenMaker.TweenVectorLatentFactory.BP_AppendLatentTweenScaleActorBy
// 0x0048 (0x0048 - 0x0000)
struct TweenVectorLatentFactory_BP_AppendLatentTweenScaleActorBy final
{
public:
	class UTweenContainer*                        TweenContainer;                                    // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UTweenVector*                           OutTween;                                          // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 TweenTarget;                                       // 0x0010(0x0008)(Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                bY;                                                // 0x0018(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Duration;                                          // 0x0024(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETweenEaseType                                EaseType;                                          // 0x0028(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          DeleteTweenOnHit;                                  // 0x0029(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          DeleteTweenOnOverlap;                              // 0x002A(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2B[0x1];                                       // 0x002B(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         NumLoops;                                          // 0x002C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETweenLoopType                                LoopType;                                          // 0x0030(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_31[0x3];                                       // 0x0031(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Delay;                                             // 0x0034(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TimeScale;                                         // 0x0038(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          TweenWhileGameIsPaused;                            // 0x003C(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_3D[0x3];                                       // 0x003D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UTweenVectorLatentFactory*              ReturnValue;                                       // 0x0040(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TweenVectorLatentFactory_BP_AppendLatentTweenScaleActorBy) == 0x000008, "Wrong alignment on TweenVectorLatentFactory_BP_AppendLatentTweenScaleActorBy");
static_assert(sizeof(TweenVectorLatentFactory_BP_AppendLatentTweenScaleActorBy) == 0x000048, "Wrong size on TweenVectorLatentFactory_BP_AppendLatentTweenScaleActorBy");
static_assert(offsetof(TweenVectorLatentFactory_BP_AppendLatentTweenScaleActorBy, TweenContainer) == 0x000000, "Member 'TweenVectorLatentFactory_BP_AppendLatentTweenScaleActorBy::TweenContainer' has a wrong offset!");
static_assert(offsetof(TweenVectorLatentFactory_BP_AppendLatentTweenScaleActorBy, OutTween) == 0x000008, "Member 'TweenVectorLatentFactory_BP_AppendLatentTweenScaleActorBy::OutTween' has a wrong offset!");
static_assert(offsetof(TweenVectorLatentFactory_BP_AppendLatentTweenScaleActorBy, TweenTarget) == 0x000010, "Member 'TweenVectorLatentFactory_BP_AppendLatentTweenScaleActorBy::TweenTarget' has a wrong offset!");
static_assert(offsetof(TweenVectorLatentFactory_BP_AppendLatentTweenScaleActorBy, bY) == 0x000018, "Member 'TweenVectorLatentFactory_BP_AppendLatentTweenScaleActorBy::bY' has a wrong offset!");
static_assert(offsetof(TweenVectorLatentFactory_BP_AppendLatentTweenScaleActorBy, Duration) == 0x000024, "Member 'TweenVectorLatentFactory_BP_AppendLatentTweenScaleActorBy::Duration' has a wrong offset!");
static_assert(offsetof(TweenVectorLatentFactory_BP_AppendLatentTweenScaleActorBy, EaseType) == 0x000028, "Member 'TweenVectorLatentFactory_BP_AppendLatentTweenScaleActorBy::EaseType' has a wrong offset!");
static_assert(offsetof(TweenVectorLatentFactory_BP_AppendLatentTweenScaleActorBy, DeleteTweenOnHit) == 0x000029, "Member 'TweenVectorLatentFactory_BP_AppendLatentTweenScaleActorBy::DeleteTweenOnHit' has a wrong offset!");
static_assert(offsetof(TweenVectorLatentFactory_BP_AppendLatentTweenScaleActorBy, DeleteTweenOnOverlap) == 0x00002A, "Member 'TweenVectorLatentFactory_BP_AppendLatentTweenScaleActorBy::DeleteTweenOnOverlap' has a wrong offset!");
static_assert(offsetof(TweenVectorLatentFactory_BP_AppendLatentTweenScaleActorBy, NumLoops) == 0x00002C, "Member 'TweenVectorLatentFactory_BP_AppendLatentTweenScaleActorBy::NumLoops' has a wrong offset!");
static_assert(offsetof(TweenVectorLatentFactory_BP_AppendLatentTweenScaleActorBy, LoopType) == 0x000030, "Member 'TweenVectorLatentFactory_BP_AppendLatentTweenScaleActorBy::LoopType' has a wrong offset!");
static_assert(offsetof(TweenVectorLatentFactory_BP_AppendLatentTweenScaleActorBy, Delay) == 0x000034, "Member 'TweenVectorLatentFactory_BP_AppendLatentTweenScaleActorBy::Delay' has a wrong offset!");
static_assert(offsetof(TweenVectorLatentFactory_BP_AppendLatentTweenScaleActorBy, TimeScale) == 0x000038, "Member 'TweenVectorLatentFactory_BP_AppendLatentTweenScaleActorBy::TimeScale' has a wrong offset!");
static_assert(offsetof(TweenVectorLatentFactory_BP_AppendLatentTweenScaleActorBy, TweenWhileGameIsPaused) == 0x00003C, "Member 'TweenVectorLatentFactory_BP_AppendLatentTweenScaleActorBy::TweenWhileGameIsPaused' has a wrong offset!");
static_assert(offsetof(TweenVectorLatentFactory_BP_AppendLatentTweenScaleActorBy, ReturnValue) == 0x000040, "Member 'TweenVectorLatentFactory_BP_AppendLatentTweenScaleActorBy::ReturnValue' has a wrong offset!");

// Function TweenMaker.TweenVectorLatentFactory.BP_AppendLatentTweenScaleActorTo
// 0x0048 (0x0048 - 0x0000)
struct TweenVectorLatentFactory_BP_AppendLatentTweenScaleActorTo final
{
public:
	class UTweenContainer*                        TweenContainer;                                    // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UTweenVector*                           OutTween;                                          // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 TweenTarget;                                       // 0x0010(0x0008)(Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                To;                                                // 0x0018(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Duration;                                          // 0x0024(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETweenEaseType                                EaseType;                                          // 0x0028(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETweenSpace                                   TweenSpace;                                        // 0x0029(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          DeleteTweenOnHit;                                  // 0x002A(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          DeleteTweenOnOverlap;                              // 0x002B(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         NumLoops;                                          // 0x002C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETweenLoopType                                LoopType;                                          // 0x0030(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_31[0x3];                                       // 0x0031(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Delay;                                             // 0x0034(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TimeScale;                                         // 0x0038(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          TweenWhileGameIsPaused;                            // 0x003C(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_3D[0x3];                                       // 0x003D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UTweenVectorLatentFactory*              ReturnValue;                                       // 0x0040(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TweenVectorLatentFactory_BP_AppendLatentTweenScaleActorTo) == 0x000008, "Wrong alignment on TweenVectorLatentFactory_BP_AppendLatentTweenScaleActorTo");
static_assert(sizeof(TweenVectorLatentFactory_BP_AppendLatentTweenScaleActorTo) == 0x000048, "Wrong size on TweenVectorLatentFactory_BP_AppendLatentTweenScaleActorTo");
static_assert(offsetof(TweenVectorLatentFactory_BP_AppendLatentTweenScaleActorTo, TweenContainer) == 0x000000, "Member 'TweenVectorLatentFactory_BP_AppendLatentTweenScaleActorTo::TweenContainer' has a wrong offset!");
static_assert(offsetof(TweenVectorLatentFactory_BP_AppendLatentTweenScaleActorTo, OutTween) == 0x000008, "Member 'TweenVectorLatentFactory_BP_AppendLatentTweenScaleActorTo::OutTween' has a wrong offset!");
static_assert(offsetof(TweenVectorLatentFactory_BP_AppendLatentTweenScaleActorTo, TweenTarget) == 0x000010, "Member 'TweenVectorLatentFactory_BP_AppendLatentTweenScaleActorTo::TweenTarget' has a wrong offset!");
static_assert(offsetof(TweenVectorLatentFactory_BP_AppendLatentTweenScaleActorTo, To) == 0x000018, "Member 'TweenVectorLatentFactory_BP_AppendLatentTweenScaleActorTo::To' has a wrong offset!");
static_assert(offsetof(TweenVectorLatentFactory_BP_AppendLatentTweenScaleActorTo, Duration) == 0x000024, "Member 'TweenVectorLatentFactory_BP_AppendLatentTweenScaleActorTo::Duration' has a wrong offset!");
static_assert(offsetof(TweenVectorLatentFactory_BP_AppendLatentTweenScaleActorTo, EaseType) == 0x000028, "Member 'TweenVectorLatentFactory_BP_AppendLatentTweenScaleActorTo::EaseType' has a wrong offset!");
static_assert(offsetof(TweenVectorLatentFactory_BP_AppendLatentTweenScaleActorTo, TweenSpace) == 0x000029, "Member 'TweenVectorLatentFactory_BP_AppendLatentTweenScaleActorTo::TweenSpace' has a wrong offset!");
static_assert(offsetof(TweenVectorLatentFactory_BP_AppendLatentTweenScaleActorTo, DeleteTweenOnHit) == 0x00002A, "Member 'TweenVectorLatentFactory_BP_AppendLatentTweenScaleActorTo::DeleteTweenOnHit' has a wrong offset!");
static_assert(offsetof(TweenVectorLatentFactory_BP_AppendLatentTweenScaleActorTo, DeleteTweenOnOverlap) == 0x00002B, "Member 'TweenVectorLatentFactory_BP_AppendLatentTweenScaleActorTo::DeleteTweenOnOverlap' has a wrong offset!");
static_assert(offsetof(TweenVectorLatentFactory_BP_AppendLatentTweenScaleActorTo, NumLoops) == 0x00002C, "Member 'TweenVectorLatentFactory_BP_AppendLatentTweenScaleActorTo::NumLoops' has a wrong offset!");
static_assert(offsetof(TweenVectorLatentFactory_BP_AppendLatentTweenScaleActorTo, LoopType) == 0x000030, "Member 'TweenVectorLatentFactory_BP_AppendLatentTweenScaleActorTo::LoopType' has a wrong offset!");
static_assert(offsetof(TweenVectorLatentFactory_BP_AppendLatentTweenScaleActorTo, Delay) == 0x000034, "Member 'TweenVectorLatentFactory_BP_AppendLatentTweenScaleActorTo::Delay' has a wrong offset!");
static_assert(offsetof(TweenVectorLatentFactory_BP_AppendLatentTweenScaleActorTo, TimeScale) == 0x000038, "Member 'TweenVectorLatentFactory_BP_AppendLatentTweenScaleActorTo::TimeScale' has a wrong offset!");
static_assert(offsetof(TweenVectorLatentFactory_BP_AppendLatentTweenScaleActorTo, TweenWhileGameIsPaused) == 0x00003C, "Member 'TweenVectorLatentFactory_BP_AppendLatentTweenScaleActorTo::TweenWhileGameIsPaused' has a wrong offset!");
static_assert(offsetof(TweenVectorLatentFactory_BP_AppendLatentTweenScaleActorTo, ReturnValue) == 0x000040, "Member 'TweenVectorLatentFactory_BP_AppendLatentTweenScaleActorTo::ReturnValue' has a wrong offset!");

// Function TweenMaker.TweenVectorLatentFactory.BP_AppendLatentTweenScaleSceneComponentBy
// 0x0048 (0x0048 - 0x0000)
struct TweenVectorLatentFactory_BP_AppendLatentTweenScaleSceneComponentBy final
{
public:
	class UTweenContainer*                        TweenContainer;                                    // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UTweenVector*                           OutTween;                                          // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USceneComponent*                        TweenTarget;                                       // 0x0010(0x0008)(Parm, OutParm, ZeroConstructor, InstancedReference, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                bY;                                                // 0x0018(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Duration;                                          // 0x0024(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETweenEaseType                                EaseType;                                          // 0x0028(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          DeleteTweenOnHit;                                  // 0x0029(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          DeleteTweenOnOverlap;                              // 0x002A(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2B[0x1];                                       // 0x002B(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         NumLoops;                                          // 0x002C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETweenLoopType                                LoopType;                                          // 0x0030(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_31[0x3];                                       // 0x0031(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Delay;                                             // 0x0034(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TimeScale;                                         // 0x0038(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          TweenWhileGameIsPaused;                            // 0x003C(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_3D[0x3];                                       // 0x003D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UTweenVectorLatentFactory*              ReturnValue;                                       // 0x0040(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TweenVectorLatentFactory_BP_AppendLatentTweenScaleSceneComponentBy) == 0x000008, "Wrong alignment on TweenVectorLatentFactory_BP_AppendLatentTweenScaleSceneComponentBy");
static_assert(sizeof(TweenVectorLatentFactory_BP_AppendLatentTweenScaleSceneComponentBy) == 0x000048, "Wrong size on TweenVectorLatentFactory_BP_AppendLatentTweenScaleSceneComponentBy");
static_assert(offsetof(TweenVectorLatentFactory_BP_AppendLatentTweenScaleSceneComponentBy, TweenContainer) == 0x000000, "Member 'TweenVectorLatentFactory_BP_AppendLatentTweenScaleSceneComponentBy::TweenContainer' has a wrong offset!");
static_assert(offsetof(TweenVectorLatentFactory_BP_AppendLatentTweenScaleSceneComponentBy, OutTween) == 0x000008, "Member 'TweenVectorLatentFactory_BP_AppendLatentTweenScaleSceneComponentBy::OutTween' has a wrong offset!");
static_assert(offsetof(TweenVectorLatentFactory_BP_AppendLatentTweenScaleSceneComponentBy, TweenTarget) == 0x000010, "Member 'TweenVectorLatentFactory_BP_AppendLatentTweenScaleSceneComponentBy::TweenTarget' has a wrong offset!");
static_assert(offsetof(TweenVectorLatentFactory_BP_AppendLatentTweenScaleSceneComponentBy, bY) == 0x000018, "Member 'TweenVectorLatentFactory_BP_AppendLatentTweenScaleSceneComponentBy::bY' has a wrong offset!");
static_assert(offsetof(TweenVectorLatentFactory_BP_AppendLatentTweenScaleSceneComponentBy, Duration) == 0x000024, "Member 'TweenVectorLatentFactory_BP_AppendLatentTweenScaleSceneComponentBy::Duration' has a wrong offset!");
static_assert(offsetof(TweenVectorLatentFactory_BP_AppendLatentTweenScaleSceneComponentBy, EaseType) == 0x000028, "Member 'TweenVectorLatentFactory_BP_AppendLatentTweenScaleSceneComponentBy::EaseType' has a wrong offset!");
static_assert(offsetof(TweenVectorLatentFactory_BP_AppendLatentTweenScaleSceneComponentBy, DeleteTweenOnHit) == 0x000029, "Member 'TweenVectorLatentFactory_BP_AppendLatentTweenScaleSceneComponentBy::DeleteTweenOnHit' has a wrong offset!");
static_assert(offsetof(TweenVectorLatentFactory_BP_AppendLatentTweenScaleSceneComponentBy, DeleteTweenOnOverlap) == 0x00002A, "Member 'TweenVectorLatentFactory_BP_AppendLatentTweenScaleSceneComponentBy::DeleteTweenOnOverlap' has a wrong offset!");
static_assert(offsetof(TweenVectorLatentFactory_BP_AppendLatentTweenScaleSceneComponentBy, NumLoops) == 0x00002C, "Member 'TweenVectorLatentFactory_BP_AppendLatentTweenScaleSceneComponentBy::NumLoops' has a wrong offset!");
static_assert(offsetof(TweenVectorLatentFactory_BP_AppendLatentTweenScaleSceneComponentBy, LoopType) == 0x000030, "Member 'TweenVectorLatentFactory_BP_AppendLatentTweenScaleSceneComponentBy::LoopType' has a wrong offset!");
static_assert(offsetof(TweenVectorLatentFactory_BP_AppendLatentTweenScaleSceneComponentBy, Delay) == 0x000034, "Member 'TweenVectorLatentFactory_BP_AppendLatentTweenScaleSceneComponentBy::Delay' has a wrong offset!");
static_assert(offsetof(TweenVectorLatentFactory_BP_AppendLatentTweenScaleSceneComponentBy, TimeScale) == 0x000038, "Member 'TweenVectorLatentFactory_BP_AppendLatentTweenScaleSceneComponentBy::TimeScale' has a wrong offset!");
static_assert(offsetof(TweenVectorLatentFactory_BP_AppendLatentTweenScaleSceneComponentBy, TweenWhileGameIsPaused) == 0x00003C, "Member 'TweenVectorLatentFactory_BP_AppendLatentTweenScaleSceneComponentBy::TweenWhileGameIsPaused' has a wrong offset!");
static_assert(offsetof(TweenVectorLatentFactory_BP_AppendLatentTweenScaleSceneComponentBy, ReturnValue) == 0x000040, "Member 'TweenVectorLatentFactory_BP_AppendLatentTweenScaleSceneComponentBy::ReturnValue' has a wrong offset!");

// Function TweenMaker.TweenVectorLatentFactory.BP_AppendLatentTweenScaleSceneComponentTo
// 0x0048 (0x0048 - 0x0000)
struct TweenVectorLatentFactory_BP_AppendLatentTweenScaleSceneComponentTo final
{
public:
	class UTweenContainer*                        TweenContainer;                                    // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UTweenVector*                           OutTween;                                          // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USceneComponent*                        TweenTarget;                                       // 0x0010(0x0008)(Parm, OutParm, ZeroConstructor, InstancedReference, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                To;                                                // 0x0018(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Duration;                                          // 0x0024(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETweenEaseType                                EaseType;                                          // 0x0028(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETweenSpace                                   TweenSpace;                                        // 0x0029(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          DeleteTweenOnHit;                                  // 0x002A(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          DeleteTweenOnOverlap;                              // 0x002B(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         NumLoops;                                          // 0x002C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETweenLoopType                                LoopType;                                          // 0x0030(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_31[0x3];                                       // 0x0031(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Delay;                                             // 0x0034(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TimeScale;                                         // 0x0038(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          TweenWhileGameIsPaused;                            // 0x003C(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_3D[0x3];                                       // 0x003D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UTweenVectorLatentFactory*              ReturnValue;                                       // 0x0040(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TweenVectorLatentFactory_BP_AppendLatentTweenScaleSceneComponentTo) == 0x000008, "Wrong alignment on TweenVectorLatentFactory_BP_AppendLatentTweenScaleSceneComponentTo");
static_assert(sizeof(TweenVectorLatentFactory_BP_AppendLatentTweenScaleSceneComponentTo) == 0x000048, "Wrong size on TweenVectorLatentFactory_BP_AppendLatentTweenScaleSceneComponentTo");
static_assert(offsetof(TweenVectorLatentFactory_BP_AppendLatentTweenScaleSceneComponentTo, TweenContainer) == 0x000000, "Member 'TweenVectorLatentFactory_BP_AppendLatentTweenScaleSceneComponentTo::TweenContainer' has a wrong offset!");
static_assert(offsetof(TweenVectorLatentFactory_BP_AppendLatentTweenScaleSceneComponentTo, OutTween) == 0x000008, "Member 'TweenVectorLatentFactory_BP_AppendLatentTweenScaleSceneComponentTo::OutTween' has a wrong offset!");
static_assert(offsetof(TweenVectorLatentFactory_BP_AppendLatentTweenScaleSceneComponentTo, TweenTarget) == 0x000010, "Member 'TweenVectorLatentFactory_BP_AppendLatentTweenScaleSceneComponentTo::TweenTarget' has a wrong offset!");
static_assert(offsetof(TweenVectorLatentFactory_BP_AppendLatentTweenScaleSceneComponentTo, To) == 0x000018, "Member 'TweenVectorLatentFactory_BP_AppendLatentTweenScaleSceneComponentTo::To' has a wrong offset!");
static_assert(offsetof(TweenVectorLatentFactory_BP_AppendLatentTweenScaleSceneComponentTo, Duration) == 0x000024, "Member 'TweenVectorLatentFactory_BP_AppendLatentTweenScaleSceneComponentTo::Duration' has a wrong offset!");
static_assert(offsetof(TweenVectorLatentFactory_BP_AppendLatentTweenScaleSceneComponentTo, EaseType) == 0x000028, "Member 'TweenVectorLatentFactory_BP_AppendLatentTweenScaleSceneComponentTo::EaseType' has a wrong offset!");
static_assert(offsetof(TweenVectorLatentFactory_BP_AppendLatentTweenScaleSceneComponentTo, TweenSpace) == 0x000029, "Member 'TweenVectorLatentFactory_BP_AppendLatentTweenScaleSceneComponentTo::TweenSpace' has a wrong offset!");
static_assert(offsetof(TweenVectorLatentFactory_BP_AppendLatentTweenScaleSceneComponentTo, DeleteTweenOnHit) == 0x00002A, "Member 'TweenVectorLatentFactory_BP_AppendLatentTweenScaleSceneComponentTo::DeleteTweenOnHit' has a wrong offset!");
static_assert(offsetof(TweenVectorLatentFactory_BP_AppendLatentTweenScaleSceneComponentTo, DeleteTweenOnOverlap) == 0x00002B, "Member 'TweenVectorLatentFactory_BP_AppendLatentTweenScaleSceneComponentTo::DeleteTweenOnOverlap' has a wrong offset!");
static_assert(offsetof(TweenVectorLatentFactory_BP_AppendLatentTweenScaleSceneComponentTo, NumLoops) == 0x00002C, "Member 'TweenVectorLatentFactory_BP_AppendLatentTweenScaleSceneComponentTo::NumLoops' has a wrong offset!");
static_assert(offsetof(TweenVectorLatentFactory_BP_AppendLatentTweenScaleSceneComponentTo, LoopType) == 0x000030, "Member 'TweenVectorLatentFactory_BP_AppendLatentTweenScaleSceneComponentTo::LoopType' has a wrong offset!");
static_assert(offsetof(TweenVectorLatentFactory_BP_AppendLatentTweenScaleSceneComponentTo, Delay) == 0x000034, "Member 'TweenVectorLatentFactory_BP_AppendLatentTweenScaleSceneComponentTo::Delay' has a wrong offset!");
static_assert(offsetof(TweenVectorLatentFactory_BP_AppendLatentTweenScaleSceneComponentTo, TimeScale) == 0x000038, "Member 'TweenVectorLatentFactory_BP_AppendLatentTweenScaleSceneComponentTo::TimeScale' has a wrong offset!");
static_assert(offsetof(TweenVectorLatentFactory_BP_AppendLatentTweenScaleSceneComponentTo, TweenWhileGameIsPaused) == 0x00003C, "Member 'TweenVectorLatentFactory_BP_AppendLatentTweenScaleSceneComponentTo::TweenWhileGameIsPaused' has a wrong offset!");
static_assert(offsetof(TweenVectorLatentFactory_BP_AppendLatentTweenScaleSceneComponentTo, ReturnValue) == 0x000040, "Member 'TweenVectorLatentFactory_BP_AppendLatentTweenScaleSceneComponentTo::ReturnValue' has a wrong offset!");

// Function TweenMaker.TweenVectorLatentFactory.BP_CreateLatentTweenCustomVector
// 0x0060 (0x0060 - 0x0000)
struct TweenVectorLatentFactory_BP_CreateLatentTweenCustomVector final
{
public:
	class UTweenManagerComponent*                 TweenManager;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UObject*                                TweenTarget;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UTweenContainer*                        OutTweenContainer;                                 // 0x0010(0x0008)(Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UTweenVector*                           OutTween;                                          // 0x0018(0x0008)(Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                From;                                              // 0x0020(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                To;                                                // 0x002C(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Duration;                                          // 0x0038(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETweenEaseType                                EaseType;                                          // 0x003C(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_3D[0x3];                                       // 0x003D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         NumLoops;                                          // 0x0040(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETweenLoopType                                LoopType;                                          // 0x0044(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_45[0x3];                                       // 0x0045(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Delay;                                             // 0x0048(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TimeScale;                                         // 0x004C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          TweenWhileGameIsPaused;                            // 0x0050(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_51[0x7];                                       // 0x0051(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UTweenVectorLatentFactory*              ReturnValue;                                       // 0x0058(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TweenVectorLatentFactory_BP_CreateLatentTweenCustomVector) == 0x000008, "Wrong alignment on TweenVectorLatentFactory_BP_CreateLatentTweenCustomVector");
static_assert(sizeof(TweenVectorLatentFactory_BP_CreateLatentTweenCustomVector) == 0x000060, "Wrong size on TweenVectorLatentFactory_BP_CreateLatentTweenCustomVector");
static_assert(offsetof(TweenVectorLatentFactory_BP_CreateLatentTweenCustomVector, TweenManager) == 0x000000, "Member 'TweenVectorLatentFactory_BP_CreateLatentTweenCustomVector::TweenManager' has a wrong offset!");
static_assert(offsetof(TweenVectorLatentFactory_BP_CreateLatentTweenCustomVector, TweenTarget) == 0x000008, "Member 'TweenVectorLatentFactory_BP_CreateLatentTweenCustomVector::TweenTarget' has a wrong offset!");
static_assert(offsetof(TweenVectorLatentFactory_BP_CreateLatentTweenCustomVector, OutTweenContainer) == 0x000010, "Member 'TweenVectorLatentFactory_BP_CreateLatentTweenCustomVector::OutTweenContainer' has a wrong offset!");
static_assert(offsetof(TweenVectorLatentFactory_BP_CreateLatentTweenCustomVector, OutTween) == 0x000018, "Member 'TweenVectorLatentFactory_BP_CreateLatentTweenCustomVector::OutTween' has a wrong offset!");
static_assert(offsetof(TweenVectorLatentFactory_BP_CreateLatentTweenCustomVector, From) == 0x000020, "Member 'TweenVectorLatentFactory_BP_CreateLatentTweenCustomVector::From' has a wrong offset!");
static_assert(offsetof(TweenVectorLatentFactory_BP_CreateLatentTweenCustomVector, To) == 0x00002C, "Member 'TweenVectorLatentFactory_BP_CreateLatentTweenCustomVector::To' has a wrong offset!");
static_assert(offsetof(TweenVectorLatentFactory_BP_CreateLatentTweenCustomVector, Duration) == 0x000038, "Member 'TweenVectorLatentFactory_BP_CreateLatentTweenCustomVector::Duration' has a wrong offset!");
static_assert(offsetof(TweenVectorLatentFactory_BP_CreateLatentTweenCustomVector, EaseType) == 0x00003C, "Member 'TweenVectorLatentFactory_BP_CreateLatentTweenCustomVector::EaseType' has a wrong offset!");
static_assert(offsetof(TweenVectorLatentFactory_BP_CreateLatentTweenCustomVector, NumLoops) == 0x000040, "Member 'TweenVectorLatentFactory_BP_CreateLatentTweenCustomVector::NumLoops' has a wrong offset!");
static_assert(offsetof(TweenVectorLatentFactory_BP_CreateLatentTweenCustomVector, LoopType) == 0x000044, "Member 'TweenVectorLatentFactory_BP_CreateLatentTweenCustomVector::LoopType' has a wrong offset!");
static_assert(offsetof(TweenVectorLatentFactory_BP_CreateLatentTweenCustomVector, Delay) == 0x000048, "Member 'TweenVectorLatentFactory_BP_CreateLatentTweenCustomVector::Delay' has a wrong offset!");
static_assert(offsetof(TweenVectorLatentFactory_BP_CreateLatentTweenCustomVector, TimeScale) == 0x00004C, "Member 'TweenVectorLatentFactory_BP_CreateLatentTweenCustomVector::TimeScale' has a wrong offset!");
static_assert(offsetof(TweenVectorLatentFactory_BP_CreateLatentTweenCustomVector, TweenWhileGameIsPaused) == 0x000050, "Member 'TweenVectorLatentFactory_BP_CreateLatentTweenCustomVector::TweenWhileGameIsPaused' has a wrong offset!");
static_assert(offsetof(TweenVectorLatentFactory_BP_CreateLatentTweenCustomVector, ReturnValue) == 0x000058, "Member 'TweenVectorLatentFactory_BP_CreateLatentTweenCustomVector::ReturnValue' has a wrong offset!");

// Function TweenMaker.TweenVectorLatentFactory.BP_CreateLatentTweenMoveActorBy
// 0x0050 (0x0050 - 0x0000)
struct TweenVectorLatentFactory_BP_CreateLatentTweenMoveActorBy final
{
public:
	class UTweenManagerComponent*                 TweenManager;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 TweenTarget;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UTweenContainer*                        OutTweenContainer;                                 // 0x0010(0x0008)(Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UTweenVector*                           OutTween;                                          // 0x0018(0x0008)(Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                bY;                                                // 0x0020(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Duration;                                          // 0x002C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETweenEaseType                                EaseType;                                          // 0x0030(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          DeleteTweenOnHit;                                  // 0x0031(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          DeleteTweenOnOverlap;                              // 0x0032(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_33[0x1];                                       // 0x0033(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         NumLoops;                                          // 0x0034(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETweenLoopType                                LoopType;                                          // 0x0038(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_39[0x3];                                       // 0x0039(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Delay;                                             // 0x003C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TimeScale;                                         // 0x0040(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          TweenWhileGameIsPaused;                            // 0x0044(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_45[0x3];                                       // 0x0045(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UTweenVectorLatentFactory*              ReturnValue;                                       // 0x0048(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TweenVectorLatentFactory_BP_CreateLatentTweenMoveActorBy) == 0x000008, "Wrong alignment on TweenVectorLatentFactory_BP_CreateLatentTweenMoveActorBy");
static_assert(sizeof(TweenVectorLatentFactory_BP_CreateLatentTweenMoveActorBy) == 0x000050, "Wrong size on TweenVectorLatentFactory_BP_CreateLatentTweenMoveActorBy");
static_assert(offsetof(TweenVectorLatentFactory_BP_CreateLatentTweenMoveActorBy, TweenManager) == 0x000000, "Member 'TweenVectorLatentFactory_BP_CreateLatentTweenMoveActorBy::TweenManager' has a wrong offset!");
static_assert(offsetof(TweenVectorLatentFactory_BP_CreateLatentTweenMoveActorBy, TweenTarget) == 0x000008, "Member 'TweenVectorLatentFactory_BP_CreateLatentTweenMoveActorBy::TweenTarget' has a wrong offset!");
static_assert(offsetof(TweenVectorLatentFactory_BP_CreateLatentTweenMoveActorBy, OutTweenContainer) == 0x000010, "Member 'TweenVectorLatentFactory_BP_CreateLatentTweenMoveActorBy::OutTweenContainer' has a wrong offset!");
static_assert(offsetof(TweenVectorLatentFactory_BP_CreateLatentTweenMoveActorBy, OutTween) == 0x000018, "Member 'TweenVectorLatentFactory_BP_CreateLatentTweenMoveActorBy::OutTween' has a wrong offset!");
static_assert(offsetof(TweenVectorLatentFactory_BP_CreateLatentTweenMoveActorBy, bY) == 0x000020, "Member 'TweenVectorLatentFactory_BP_CreateLatentTweenMoveActorBy::bY' has a wrong offset!");
static_assert(offsetof(TweenVectorLatentFactory_BP_CreateLatentTweenMoveActorBy, Duration) == 0x00002C, "Member 'TweenVectorLatentFactory_BP_CreateLatentTweenMoveActorBy::Duration' has a wrong offset!");
static_assert(offsetof(TweenVectorLatentFactory_BP_CreateLatentTweenMoveActorBy, EaseType) == 0x000030, "Member 'TweenVectorLatentFactory_BP_CreateLatentTweenMoveActorBy::EaseType' has a wrong offset!");
static_assert(offsetof(TweenVectorLatentFactory_BP_CreateLatentTweenMoveActorBy, DeleteTweenOnHit) == 0x000031, "Member 'TweenVectorLatentFactory_BP_CreateLatentTweenMoveActorBy::DeleteTweenOnHit' has a wrong offset!");
static_assert(offsetof(TweenVectorLatentFactory_BP_CreateLatentTweenMoveActorBy, DeleteTweenOnOverlap) == 0x000032, "Member 'TweenVectorLatentFactory_BP_CreateLatentTweenMoveActorBy::DeleteTweenOnOverlap' has a wrong offset!");
static_assert(offsetof(TweenVectorLatentFactory_BP_CreateLatentTweenMoveActorBy, NumLoops) == 0x000034, "Member 'TweenVectorLatentFactory_BP_CreateLatentTweenMoveActorBy::NumLoops' has a wrong offset!");
static_assert(offsetof(TweenVectorLatentFactory_BP_CreateLatentTweenMoveActorBy, LoopType) == 0x000038, "Member 'TweenVectorLatentFactory_BP_CreateLatentTweenMoveActorBy::LoopType' has a wrong offset!");
static_assert(offsetof(TweenVectorLatentFactory_BP_CreateLatentTweenMoveActorBy, Delay) == 0x00003C, "Member 'TweenVectorLatentFactory_BP_CreateLatentTweenMoveActorBy::Delay' has a wrong offset!");
static_assert(offsetof(TweenVectorLatentFactory_BP_CreateLatentTweenMoveActorBy, TimeScale) == 0x000040, "Member 'TweenVectorLatentFactory_BP_CreateLatentTweenMoveActorBy::TimeScale' has a wrong offset!");
static_assert(offsetof(TweenVectorLatentFactory_BP_CreateLatentTweenMoveActorBy, TweenWhileGameIsPaused) == 0x000044, "Member 'TweenVectorLatentFactory_BP_CreateLatentTweenMoveActorBy::TweenWhileGameIsPaused' has a wrong offset!");
static_assert(offsetof(TweenVectorLatentFactory_BP_CreateLatentTweenMoveActorBy, ReturnValue) == 0x000048, "Member 'TweenVectorLatentFactory_BP_CreateLatentTweenMoveActorBy::ReturnValue' has a wrong offset!");

// Function TweenMaker.TweenVectorLatentFactory.BP_CreateLatentTweenMoveActorTo
// 0x0050 (0x0050 - 0x0000)
struct TweenVectorLatentFactory_BP_CreateLatentTweenMoveActorTo final
{
public:
	class UTweenManagerComponent*                 TweenManager;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 TweenTarget;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UTweenContainer*                        OutTweenContainer;                                 // 0x0010(0x0008)(Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UTweenVector*                           OutTween;                                          // 0x0018(0x0008)(Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                To;                                                // 0x0020(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Duration;                                          // 0x002C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETweenEaseType                                EaseType;                                          // 0x0030(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETweenSpace                                   TweenSpace;                                        // 0x0031(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          DeleteTweenOnHit;                                  // 0x0032(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          DeleteTweenOnOverlap;                              // 0x0033(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         NumLoops;                                          // 0x0034(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETweenLoopType                                LoopType;                                          // 0x0038(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_39[0x3];                                       // 0x0039(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Delay;                                             // 0x003C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TimeScale;                                         // 0x0040(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          TweenWhileGameIsPaused;                            // 0x0044(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_45[0x3];                                       // 0x0045(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UTweenVectorLatentFactory*              ReturnValue;                                       // 0x0048(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TweenVectorLatentFactory_BP_CreateLatentTweenMoveActorTo) == 0x000008, "Wrong alignment on TweenVectorLatentFactory_BP_CreateLatentTweenMoveActorTo");
static_assert(sizeof(TweenVectorLatentFactory_BP_CreateLatentTweenMoveActorTo) == 0x000050, "Wrong size on TweenVectorLatentFactory_BP_CreateLatentTweenMoveActorTo");
static_assert(offsetof(TweenVectorLatentFactory_BP_CreateLatentTweenMoveActorTo, TweenManager) == 0x000000, "Member 'TweenVectorLatentFactory_BP_CreateLatentTweenMoveActorTo::TweenManager' has a wrong offset!");
static_assert(offsetof(TweenVectorLatentFactory_BP_CreateLatentTweenMoveActorTo, TweenTarget) == 0x000008, "Member 'TweenVectorLatentFactory_BP_CreateLatentTweenMoveActorTo::TweenTarget' has a wrong offset!");
static_assert(offsetof(TweenVectorLatentFactory_BP_CreateLatentTweenMoveActorTo, OutTweenContainer) == 0x000010, "Member 'TweenVectorLatentFactory_BP_CreateLatentTweenMoveActorTo::OutTweenContainer' has a wrong offset!");
static_assert(offsetof(TweenVectorLatentFactory_BP_CreateLatentTweenMoveActorTo, OutTween) == 0x000018, "Member 'TweenVectorLatentFactory_BP_CreateLatentTweenMoveActorTo::OutTween' has a wrong offset!");
static_assert(offsetof(TweenVectorLatentFactory_BP_CreateLatentTweenMoveActorTo, To) == 0x000020, "Member 'TweenVectorLatentFactory_BP_CreateLatentTweenMoveActorTo::To' has a wrong offset!");
static_assert(offsetof(TweenVectorLatentFactory_BP_CreateLatentTweenMoveActorTo, Duration) == 0x00002C, "Member 'TweenVectorLatentFactory_BP_CreateLatentTweenMoveActorTo::Duration' has a wrong offset!");
static_assert(offsetof(TweenVectorLatentFactory_BP_CreateLatentTweenMoveActorTo, EaseType) == 0x000030, "Member 'TweenVectorLatentFactory_BP_CreateLatentTweenMoveActorTo::EaseType' has a wrong offset!");
static_assert(offsetof(TweenVectorLatentFactory_BP_CreateLatentTweenMoveActorTo, TweenSpace) == 0x000031, "Member 'TweenVectorLatentFactory_BP_CreateLatentTweenMoveActorTo::TweenSpace' has a wrong offset!");
static_assert(offsetof(TweenVectorLatentFactory_BP_CreateLatentTweenMoveActorTo, DeleteTweenOnHit) == 0x000032, "Member 'TweenVectorLatentFactory_BP_CreateLatentTweenMoveActorTo::DeleteTweenOnHit' has a wrong offset!");
static_assert(offsetof(TweenVectorLatentFactory_BP_CreateLatentTweenMoveActorTo, DeleteTweenOnOverlap) == 0x000033, "Member 'TweenVectorLatentFactory_BP_CreateLatentTweenMoveActorTo::DeleteTweenOnOverlap' has a wrong offset!");
static_assert(offsetof(TweenVectorLatentFactory_BP_CreateLatentTweenMoveActorTo, NumLoops) == 0x000034, "Member 'TweenVectorLatentFactory_BP_CreateLatentTweenMoveActorTo::NumLoops' has a wrong offset!");
static_assert(offsetof(TweenVectorLatentFactory_BP_CreateLatentTweenMoveActorTo, LoopType) == 0x000038, "Member 'TweenVectorLatentFactory_BP_CreateLatentTweenMoveActorTo::LoopType' has a wrong offset!");
static_assert(offsetof(TweenVectorLatentFactory_BP_CreateLatentTweenMoveActorTo, Delay) == 0x00003C, "Member 'TweenVectorLatentFactory_BP_CreateLatentTweenMoveActorTo::Delay' has a wrong offset!");
static_assert(offsetof(TweenVectorLatentFactory_BP_CreateLatentTweenMoveActorTo, TimeScale) == 0x000040, "Member 'TweenVectorLatentFactory_BP_CreateLatentTweenMoveActorTo::TimeScale' has a wrong offset!");
static_assert(offsetof(TweenVectorLatentFactory_BP_CreateLatentTweenMoveActorTo, TweenWhileGameIsPaused) == 0x000044, "Member 'TweenVectorLatentFactory_BP_CreateLatentTweenMoveActorTo::TweenWhileGameIsPaused' has a wrong offset!");
static_assert(offsetof(TweenVectorLatentFactory_BP_CreateLatentTweenMoveActorTo, ReturnValue) == 0x000048, "Member 'TweenVectorLatentFactory_BP_CreateLatentTweenMoveActorTo::ReturnValue' has a wrong offset!");

// Function TweenMaker.TweenVectorLatentFactory.BP_CreateLatentTweenMoveSceneComponentBy
// 0x0050 (0x0050 - 0x0000)
struct TweenVectorLatentFactory_BP_CreateLatentTweenMoveSceneComponentBy final
{
public:
	class UTweenManagerComponent*                 TweenManager;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USceneComponent*                        TweenTarget;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, InstancedReference, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UTweenContainer*                        OutTweenContainer;                                 // 0x0010(0x0008)(Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UTweenVector*                           OutTween;                                          // 0x0018(0x0008)(Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                bY;                                                // 0x0020(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Duration;                                          // 0x002C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETweenEaseType                                EaseType;                                          // 0x0030(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          DeleteTweenOnHit;                                  // 0x0031(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          DeleteTweenOnOverlap;                              // 0x0032(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_33[0x1];                                       // 0x0033(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         NumLoops;                                          // 0x0034(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETweenLoopType                                LoopType;                                          // 0x0038(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_39[0x3];                                       // 0x0039(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Delay;                                             // 0x003C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TimeScale;                                         // 0x0040(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          TweenWhileGameIsPaused;                            // 0x0044(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_45[0x3];                                       // 0x0045(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UTweenVectorLatentFactory*              ReturnValue;                                       // 0x0048(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TweenVectorLatentFactory_BP_CreateLatentTweenMoveSceneComponentBy) == 0x000008, "Wrong alignment on TweenVectorLatentFactory_BP_CreateLatentTweenMoveSceneComponentBy");
static_assert(sizeof(TweenVectorLatentFactory_BP_CreateLatentTweenMoveSceneComponentBy) == 0x000050, "Wrong size on TweenVectorLatentFactory_BP_CreateLatentTweenMoveSceneComponentBy");
static_assert(offsetof(TweenVectorLatentFactory_BP_CreateLatentTweenMoveSceneComponentBy, TweenManager) == 0x000000, "Member 'TweenVectorLatentFactory_BP_CreateLatentTweenMoveSceneComponentBy::TweenManager' has a wrong offset!");
static_assert(offsetof(TweenVectorLatentFactory_BP_CreateLatentTweenMoveSceneComponentBy, TweenTarget) == 0x000008, "Member 'TweenVectorLatentFactory_BP_CreateLatentTweenMoveSceneComponentBy::TweenTarget' has a wrong offset!");
static_assert(offsetof(TweenVectorLatentFactory_BP_CreateLatentTweenMoveSceneComponentBy, OutTweenContainer) == 0x000010, "Member 'TweenVectorLatentFactory_BP_CreateLatentTweenMoveSceneComponentBy::OutTweenContainer' has a wrong offset!");
static_assert(offsetof(TweenVectorLatentFactory_BP_CreateLatentTweenMoveSceneComponentBy, OutTween) == 0x000018, "Member 'TweenVectorLatentFactory_BP_CreateLatentTweenMoveSceneComponentBy::OutTween' has a wrong offset!");
static_assert(offsetof(TweenVectorLatentFactory_BP_CreateLatentTweenMoveSceneComponentBy, bY) == 0x000020, "Member 'TweenVectorLatentFactory_BP_CreateLatentTweenMoveSceneComponentBy::bY' has a wrong offset!");
static_assert(offsetof(TweenVectorLatentFactory_BP_CreateLatentTweenMoveSceneComponentBy, Duration) == 0x00002C, "Member 'TweenVectorLatentFactory_BP_CreateLatentTweenMoveSceneComponentBy::Duration' has a wrong offset!");
static_assert(offsetof(TweenVectorLatentFactory_BP_CreateLatentTweenMoveSceneComponentBy, EaseType) == 0x000030, "Member 'TweenVectorLatentFactory_BP_CreateLatentTweenMoveSceneComponentBy::EaseType' has a wrong offset!");
static_assert(offsetof(TweenVectorLatentFactory_BP_CreateLatentTweenMoveSceneComponentBy, DeleteTweenOnHit) == 0x000031, "Member 'TweenVectorLatentFactory_BP_CreateLatentTweenMoveSceneComponentBy::DeleteTweenOnHit' has a wrong offset!");
static_assert(offsetof(TweenVectorLatentFactory_BP_CreateLatentTweenMoveSceneComponentBy, DeleteTweenOnOverlap) == 0x000032, "Member 'TweenVectorLatentFactory_BP_CreateLatentTweenMoveSceneComponentBy::DeleteTweenOnOverlap' has a wrong offset!");
static_assert(offsetof(TweenVectorLatentFactory_BP_CreateLatentTweenMoveSceneComponentBy, NumLoops) == 0x000034, "Member 'TweenVectorLatentFactory_BP_CreateLatentTweenMoveSceneComponentBy::NumLoops' has a wrong offset!");
static_assert(offsetof(TweenVectorLatentFactory_BP_CreateLatentTweenMoveSceneComponentBy, LoopType) == 0x000038, "Member 'TweenVectorLatentFactory_BP_CreateLatentTweenMoveSceneComponentBy::LoopType' has a wrong offset!");
static_assert(offsetof(TweenVectorLatentFactory_BP_CreateLatentTweenMoveSceneComponentBy, Delay) == 0x00003C, "Member 'TweenVectorLatentFactory_BP_CreateLatentTweenMoveSceneComponentBy::Delay' has a wrong offset!");
static_assert(offsetof(TweenVectorLatentFactory_BP_CreateLatentTweenMoveSceneComponentBy, TimeScale) == 0x000040, "Member 'TweenVectorLatentFactory_BP_CreateLatentTweenMoveSceneComponentBy::TimeScale' has a wrong offset!");
static_assert(offsetof(TweenVectorLatentFactory_BP_CreateLatentTweenMoveSceneComponentBy, TweenWhileGameIsPaused) == 0x000044, "Member 'TweenVectorLatentFactory_BP_CreateLatentTweenMoveSceneComponentBy::TweenWhileGameIsPaused' has a wrong offset!");
static_assert(offsetof(TweenVectorLatentFactory_BP_CreateLatentTweenMoveSceneComponentBy, ReturnValue) == 0x000048, "Member 'TweenVectorLatentFactory_BP_CreateLatentTweenMoveSceneComponentBy::ReturnValue' has a wrong offset!");

// Function TweenMaker.TweenVectorLatentFactory.BP_CreateLatentTweenMoveSceneComponentTo
// 0x0050 (0x0050 - 0x0000)
struct TweenVectorLatentFactory_BP_CreateLatentTweenMoveSceneComponentTo final
{
public:
	class UTweenManagerComponent*                 TweenManager;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USceneComponent*                        TweenTarget;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, InstancedReference, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UTweenContainer*                        OutTweenContainer;                                 // 0x0010(0x0008)(Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UTweenVector*                           OutTween;                                          // 0x0018(0x0008)(Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                To;                                                // 0x0020(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Duration;                                          // 0x002C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETweenEaseType                                EaseType;                                          // 0x0030(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETweenSpace                                   TweenSpace;                                        // 0x0031(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          DeleteTweenOnHit;                                  // 0x0032(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          DeleteTweenOnOverlap;                              // 0x0033(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         NumLoops;                                          // 0x0034(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETweenLoopType                                LoopType;                                          // 0x0038(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_39[0x3];                                       // 0x0039(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Delay;                                             // 0x003C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TimeScale;                                         // 0x0040(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          TweenWhileGameIsPaused;                            // 0x0044(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_45[0x3];                                       // 0x0045(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UTweenVectorLatentFactory*              ReturnValue;                                       // 0x0048(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TweenVectorLatentFactory_BP_CreateLatentTweenMoveSceneComponentTo) == 0x000008, "Wrong alignment on TweenVectorLatentFactory_BP_CreateLatentTweenMoveSceneComponentTo");
static_assert(sizeof(TweenVectorLatentFactory_BP_CreateLatentTweenMoveSceneComponentTo) == 0x000050, "Wrong size on TweenVectorLatentFactory_BP_CreateLatentTweenMoveSceneComponentTo");
static_assert(offsetof(TweenVectorLatentFactory_BP_CreateLatentTweenMoveSceneComponentTo, TweenManager) == 0x000000, "Member 'TweenVectorLatentFactory_BP_CreateLatentTweenMoveSceneComponentTo::TweenManager' has a wrong offset!");
static_assert(offsetof(TweenVectorLatentFactory_BP_CreateLatentTweenMoveSceneComponentTo, TweenTarget) == 0x000008, "Member 'TweenVectorLatentFactory_BP_CreateLatentTweenMoveSceneComponentTo::TweenTarget' has a wrong offset!");
static_assert(offsetof(TweenVectorLatentFactory_BP_CreateLatentTweenMoveSceneComponentTo, OutTweenContainer) == 0x000010, "Member 'TweenVectorLatentFactory_BP_CreateLatentTweenMoveSceneComponentTo::OutTweenContainer' has a wrong offset!");
static_assert(offsetof(TweenVectorLatentFactory_BP_CreateLatentTweenMoveSceneComponentTo, OutTween) == 0x000018, "Member 'TweenVectorLatentFactory_BP_CreateLatentTweenMoveSceneComponentTo::OutTween' has a wrong offset!");
static_assert(offsetof(TweenVectorLatentFactory_BP_CreateLatentTweenMoveSceneComponentTo, To) == 0x000020, "Member 'TweenVectorLatentFactory_BP_CreateLatentTweenMoveSceneComponentTo::To' has a wrong offset!");
static_assert(offsetof(TweenVectorLatentFactory_BP_CreateLatentTweenMoveSceneComponentTo, Duration) == 0x00002C, "Member 'TweenVectorLatentFactory_BP_CreateLatentTweenMoveSceneComponentTo::Duration' has a wrong offset!");
static_assert(offsetof(TweenVectorLatentFactory_BP_CreateLatentTweenMoveSceneComponentTo, EaseType) == 0x000030, "Member 'TweenVectorLatentFactory_BP_CreateLatentTweenMoveSceneComponentTo::EaseType' has a wrong offset!");
static_assert(offsetof(TweenVectorLatentFactory_BP_CreateLatentTweenMoveSceneComponentTo, TweenSpace) == 0x000031, "Member 'TweenVectorLatentFactory_BP_CreateLatentTweenMoveSceneComponentTo::TweenSpace' has a wrong offset!");
static_assert(offsetof(TweenVectorLatentFactory_BP_CreateLatentTweenMoveSceneComponentTo, DeleteTweenOnHit) == 0x000032, "Member 'TweenVectorLatentFactory_BP_CreateLatentTweenMoveSceneComponentTo::DeleteTweenOnHit' has a wrong offset!");
static_assert(offsetof(TweenVectorLatentFactory_BP_CreateLatentTweenMoveSceneComponentTo, DeleteTweenOnOverlap) == 0x000033, "Member 'TweenVectorLatentFactory_BP_CreateLatentTweenMoveSceneComponentTo::DeleteTweenOnOverlap' has a wrong offset!");
static_assert(offsetof(TweenVectorLatentFactory_BP_CreateLatentTweenMoveSceneComponentTo, NumLoops) == 0x000034, "Member 'TweenVectorLatentFactory_BP_CreateLatentTweenMoveSceneComponentTo::NumLoops' has a wrong offset!");
static_assert(offsetof(TweenVectorLatentFactory_BP_CreateLatentTweenMoveSceneComponentTo, LoopType) == 0x000038, "Member 'TweenVectorLatentFactory_BP_CreateLatentTweenMoveSceneComponentTo::LoopType' has a wrong offset!");
static_assert(offsetof(TweenVectorLatentFactory_BP_CreateLatentTweenMoveSceneComponentTo, Delay) == 0x00003C, "Member 'TweenVectorLatentFactory_BP_CreateLatentTweenMoveSceneComponentTo::Delay' has a wrong offset!");
static_assert(offsetof(TweenVectorLatentFactory_BP_CreateLatentTweenMoveSceneComponentTo, TimeScale) == 0x000040, "Member 'TweenVectorLatentFactory_BP_CreateLatentTweenMoveSceneComponentTo::TimeScale' has a wrong offset!");
static_assert(offsetof(TweenVectorLatentFactory_BP_CreateLatentTweenMoveSceneComponentTo, TweenWhileGameIsPaused) == 0x000044, "Member 'TweenVectorLatentFactory_BP_CreateLatentTweenMoveSceneComponentTo::TweenWhileGameIsPaused' has a wrong offset!");
static_assert(offsetof(TweenVectorLatentFactory_BP_CreateLatentTweenMoveSceneComponentTo, ReturnValue) == 0x000048, "Member 'TweenVectorLatentFactory_BP_CreateLatentTweenMoveSceneComponentTo::ReturnValue' has a wrong offset!");

// Function TweenMaker.TweenVectorLatentFactory.BP_CreateLatentTweenScaleActorBy
// 0x0050 (0x0050 - 0x0000)
struct TweenVectorLatentFactory_BP_CreateLatentTweenScaleActorBy final
{
public:
	class UTweenManagerComponent*                 TweenManager;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 TweenTarget;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UTweenContainer*                        OutTweenContainer;                                 // 0x0010(0x0008)(Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UTweenVector*                           OutTween;                                          // 0x0018(0x0008)(Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                bY;                                                // 0x0020(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Duration;                                          // 0x002C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETweenEaseType                                EaseType;                                          // 0x0030(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          DeleteTweenOnHit;                                  // 0x0031(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          DeleteTweenOnOverlap;                              // 0x0032(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_33[0x1];                                       // 0x0033(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         NumLoops;                                          // 0x0034(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETweenLoopType                                LoopType;                                          // 0x0038(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_39[0x3];                                       // 0x0039(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Delay;                                             // 0x003C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TimeScale;                                         // 0x0040(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          TweenWhileGameIsPaused;                            // 0x0044(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_45[0x3];                                       // 0x0045(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UTweenVectorLatentFactory*              ReturnValue;                                       // 0x0048(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TweenVectorLatentFactory_BP_CreateLatentTweenScaleActorBy) == 0x000008, "Wrong alignment on TweenVectorLatentFactory_BP_CreateLatentTweenScaleActorBy");
static_assert(sizeof(TweenVectorLatentFactory_BP_CreateLatentTweenScaleActorBy) == 0x000050, "Wrong size on TweenVectorLatentFactory_BP_CreateLatentTweenScaleActorBy");
static_assert(offsetof(TweenVectorLatentFactory_BP_CreateLatentTweenScaleActorBy, TweenManager) == 0x000000, "Member 'TweenVectorLatentFactory_BP_CreateLatentTweenScaleActorBy::TweenManager' has a wrong offset!");
static_assert(offsetof(TweenVectorLatentFactory_BP_CreateLatentTweenScaleActorBy, TweenTarget) == 0x000008, "Member 'TweenVectorLatentFactory_BP_CreateLatentTweenScaleActorBy::TweenTarget' has a wrong offset!");
static_assert(offsetof(TweenVectorLatentFactory_BP_CreateLatentTweenScaleActorBy, OutTweenContainer) == 0x000010, "Member 'TweenVectorLatentFactory_BP_CreateLatentTweenScaleActorBy::OutTweenContainer' has a wrong offset!");
static_assert(offsetof(TweenVectorLatentFactory_BP_CreateLatentTweenScaleActorBy, OutTween) == 0x000018, "Member 'TweenVectorLatentFactory_BP_CreateLatentTweenScaleActorBy::OutTween' has a wrong offset!");
static_assert(offsetof(TweenVectorLatentFactory_BP_CreateLatentTweenScaleActorBy, bY) == 0x000020, "Member 'TweenVectorLatentFactory_BP_CreateLatentTweenScaleActorBy::bY' has a wrong offset!");
static_assert(offsetof(TweenVectorLatentFactory_BP_CreateLatentTweenScaleActorBy, Duration) == 0x00002C, "Member 'TweenVectorLatentFactory_BP_CreateLatentTweenScaleActorBy::Duration' has a wrong offset!");
static_assert(offsetof(TweenVectorLatentFactory_BP_CreateLatentTweenScaleActorBy, EaseType) == 0x000030, "Member 'TweenVectorLatentFactory_BP_CreateLatentTweenScaleActorBy::EaseType' has a wrong offset!");
static_assert(offsetof(TweenVectorLatentFactory_BP_CreateLatentTweenScaleActorBy, DeleteTweenOnHit) == 0x000031, "Member 'TweenVectorLatentFactory_BP_CreateLatentTweenScaleActorBy::DeleteTweenOnHit' has a wrong offset!");
static_assert(offsetof(TweenVectorLatentFactory_BP_CreateLatentTweenScaleActorBy, DeleteTweenOnOverlap) == 0x000032, "Member 'TweenVectorLatentFactory_BP_CreateLatentTweenScaleActorBy::DeleteTweenOnOverlap' has a wrong offset!");
static_assert(offsetof(TweenVectorLatentFactory_BP_CreateLatentTweenScaleActorBy, NumLoops) == 0x000034, "Member 'TweenVectorLatentFactory_BP_CreateLatentTweenScaleActorBy::NumLoops' has a wrong offset!");
static_assert(offsetof(TweenVectorLatentFactory_BP_CreateLatentTweenScaleActorBy, LoopType) == 0x000038, "Member 'TweenVectorLatentFactory_BP_CreateLatentTweenScaleActorBy::LoopType' has a wrong offset!");
static_assert(offsetof(TweenVectorLatentFactory_BP_CreateLatentTweenScaleActorBy, Delay) == 0x00003C, "Member 'TweenVectorLatentFactory_BP_CreateLatentTweenScaleActorBy::Delay' has a wrong offset!");
static_assert(offsetof(TweenVectorLatentFactory_BP_CreateLatentTweenScaleActorBy, TimeScale) == 0x000040, "Member 'TweenVectorLatentFactory_BP_CreateLatentTweenScaleActorBy::TimeScale' has a wrong offset!");
static_assert(offsetof(TweenVectorLatentFactory_BP_CreateLatentTweenScaleActorBy, TweenWhileGameIsPaused) == 0x000044, "Member 'TweenVectorLatentFactory_BP_CreateLatentTweenScaleActorBy::TweenWhileGameIsPaused' has a wrong offset!");
static_assert(offsetof(TweenVectorLatentFactory_BP_CreateLatentTweenScaleActorBy, ReturnValue) == 0x000048, "Member 'TweenVectorLatentFactory_BP_CreateLatentTweenScaleActorBy::ReturnValue' has a wrong offset!");

// Function TweenMaker.TweenVectorLatentFactory.BP_CreateLatentTweenScaleActorTo
// 0x0050 (0x0050 - 0x0000)
struct TweenVectorLatentFactory_BP_CreateLatentTweenScaleActorTo final
{
public:
	class UTweenManagerComponent*                 TweenManager;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 TweenTarget;                                       // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UTweenContainer*                        OutTweenContainer;                                 // 0x0010(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UTweenVector*                           OutTween;                                          // 0x0018(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                To;                                                // 0x0020(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Duration;                                          // 0x002C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETweenEaseType                                EaseType;                                          // 0x0030(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETweenSpace                                   TweenSpace;                                        // 0x0031(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          DeleteTweenOnHit;                                  // 0x0032(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          DeleteTweenOnOverlap;                              // 0x0033(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         NumLoops;                                          // 0x0034(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETweenLoopType                                LoopType;                                          // 0x0038(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_39[0x3];                                       // 0x0039(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Delay;                                             // 0x003C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TimeScale;                                         // 0x0040(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          TweenWhileGameIsPaused;                            // 0x0044(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_45[0x3];                                       // 0x0045(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UTweenVectorLatentFactory*              ReturnValue;                                       // 0x0048(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TweenVectorLatentFactory_BP_CreateLatentTweenScaleActorTo) == 0x000008, "Wrong alignment on TweenVectorLatentFactory_BP_CreateLatentTweenScaleActorTo");
static_assert(sizeof(TweenVectorLatentFactory_BP_CreateLatentTweenScaleActorTo) == 0x000050, "Wrong size on TweenVectorLatentFactory_BP_CreateLatentTweenScaleActorTo");
static_assert(offsetof(TweenVectorLatentFactory_BP_CreateLatentTweenScaleActorTo, TweenManager) == 0x000000, "Member 'TweenVectorLatentFactory_BP_CreateLatentTweenScaleActorTo::TweenManager' has a wrong offset!");
static_assert(offsetof(TweenVectorLatentFactory_BP_CreateLatentTweenScaleActorTo, TweenTarget) == 0x000008, "Member 'TweenVectorLatentFactory_BP_CreateLatentTweenScaleActorTo::TweenTarget' has a wrong offset!");
static_assert(offsetof(TweenVectorLatentFactory_BP_CreateLatentTweenScaleActorTo, OutTweenContainer) == 0x000010, "Member 'TweenVectorLatentFactory_BP_CreateLatentTweenScaleActorTo::OutTweenContainer' has a wrong offset!");
static_assert(offsetof(TweenVectorLatentFactory_BP_CreateLatentTweenScaleActorTo, OutTween) == 0x000018, "Member 'TweenVectorLatentFactory_BP_CreateLatentTweenScaleActorTo::OutTween' has a wrong offset!");
static_assert(offsetof(TweenVectorLatentFactory_BP_CreateLatentTweenScaleActorTo, To) == 0x000020, "Member 'TweenVectorLatentFactory_BP_CreateLatentTweenScaleActorTo::To' has a wrong offset!");
static_assert(offsetof(TweenVectorLatentFactory_BP_CreateLatentTweenScaleActorTo, Duration) == 0x00002C, "Member 'TweenVectorLatentFactory_BP_CreateLatentTweenScaleActorTo::Duration' has a wrong offset!");
static_assert(offsetof(TweenVectorLatentFactory_BP_CreateLatentTweenScaleActorTo, EaseType) == 0x000030, "Member 'TweenVectorLatentFactory_BP_CreateLatentTweenScaleActorTo::EaseType' has a wrong offset!");
static_assert(offsetof(TweenVectorLatentFactory_BP_CreateLatentTweenScaleActorTo, TweenSpace) == 0x000031, "Member 'TweenVectorLatentFactory_BP_CreateLatentTweenScaleActorTo::TweenSpace' has a wrong offset!");
static_assert(offsetof(TweenVectorLatentFactory_BP_CreateLatentTweenScaleActorTo, DeleteTweenOnHit) == 0x000032, "Member 'TweenVectorLatentFactory_BP_CreateLatentTweenScaleActorTo::DeleteTweenOnHit' has a wrong offset!");
static_assert(offsetof(TweenVectorLatentFactory_BP_CreateLatentTweenScaleActorTo, DeleteTweenOnOverlap) == 0x000033, "Member 'TweenVectorLatentFactory_BP_CreateLatentTweenScaleActorTo::DeleteTweenOnOverlap' has a wrong offset!");
static_assert(offsetof(TweenVectorLatentFactory_BP_CreateLatentTweenScaleActorTo, NumLoops) == 0x000034, "Member 'TweenVectorLatentFactory_BP_CreateLatentTweenScaleActorTo::NumLoops' has a wrong offset!");
static_assert(offsetof(TweenVectorLatentFactory_BP_CreateLatentTweenScaleActorTo, LoopType) == 0x000038, "Member 'TweenVectorLatentFactory_BP_CreateLatentTweenScaleActorTo::LoopType' has a wrong offset!");
static_assert(offsetof(TweenVectorLatentFactory_BP_CreateLatentTweenScaleActorTo, Delay) == 0x00003C, "Member 'TweenVectorLatentFactory_BP_CreateLatentTweenScaleActorTo::Delay' has a wrong offset!");
static_assert(offsetof(TweenVectorLatentFactory_BP_CreateLatentTweenScaleActorTo, TimeScale) == 0x000040, "Member 'TweenVectorLatentFactory_BP_CreateLatentTweenScaleActorTo::TimeScale' has a wrong offset!");
static_assert(offsetof(TweenVectorLatentFactory_BP_CreateLatentTweenScaleActorTo, TweenWhileGameIsPaused) == 0x000044, "Member 'TweenVectorLatentFactory_BP_CreateLatentTweenScaleActorTo::TweenWhileGameIsPaused' has a wrong offset!");
static_assert(offsetof(TweenVectorLatentFactory_BP_CreateLatentTweenScaleActorTo, ReturnValue) == 0x000048, "Member 'TweenVectorLatentFactory_BP_CreateLatentTweenScaleActorTo::ReturnValue' has a wrong offset!");

// Function TweenMaker.TweenVectorLatentFactory.BP_CreateLatentTweenScaleSceneComponentBy
// 0x0050 (0x0050 - 0x0000)
struct TweenVectorLatentFactory_BP_CreateLatentTweenScaleSceneComponentBy final
{
public:
	class UTweenManagerComponent*                 TweenManager;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USceneComponent*                        TweenTarget;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, InstancedReference, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UTweenContainer*                        OutTweenContainer;                                 // 0x0010(0x0008)(Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UTweenVector*                           OutTween;                                          // 0x0018(0x0008)(Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                bY;                                                // 0x0020(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Duration;                                          // 0x002C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETweenEaseType                                EaseType;                                          // 0x0030(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          DeleteTweenOnHit;                                  // 0x0031(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          DeleteTweenOnOverlap;                              // 0x0032(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_33[0x1];                                       // 0x0033(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         NumLoops;                                          // 0x0034(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETweenLoopType                                LoopType;                                          // 0x0038(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_39[0x3];                                       // 0x0039(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Delay;                                             // 0x003C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TimeScale;                                         // 0x0040(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          TweenWhileGameIsPaused;                            // 0x0044(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_45[0x3];                                       // 0x0045(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UTweenVectorLatentFactory*              ReturnValue;                                       // 0x0048(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TweenVectorLatentFactory_BP_CreateLatentTweenScaleSceneComponentBy) == 0x000008, "Wrong alignment on TweenVectorLatentFactory_BP_CreateLatentTweenScaleSceneComponentBy");
static_assert(sizeof(TweenVectorLatentFactory_BP_CreateLatentTweenScaleSceneComponentBy) == 0x000050, "Wrong size on TweenVectorLatentFactory_BP_CreateLatentTweenScaleSceneComponentBy");
static_assert(offsetof(TweenVectorLatentFactory_BP_CreateLatentTweenScaleSceneComponentBy, TweenManager) == 0x000000, "Member 'TweenVectorLatentFactory_BP_CreateLatentTweenScaleSceneComponentBy::TweenManager' has a wrong offset!");
static_assert(offsetof(TweenVectorLatentFactory_BP_CreateLatentTweenScaleSceneComponentBy, TweenTarget) == 0x000008, "Member 'TweenVectorLatentFactory_BP_CreateLatentTweenScaleSceneComponentBy::TweenTarget' has a wrong offset!");
static_assert(offsetof(TweenVectorLatentFactory_BP_CreateLatentTweenScaleSceneComponentBy, OutTweenContainer) == 0x000010, "Member 'TweenVectorLatentFactory_BP_CreateLatentTweenScaleSceneComponentBy::OutTweenContainer' has a wrong offset!");
static_assert(offsetof(TweenVectorLatentFactory_BP_CreateLatentTweenScaleSceneComponentBy, OutTween) == 0x000018, "Member 'TweenVectorLatentFactory_BP_CreateLatentTweenScaleSceneComponentBy::OutTween' has a wrong offset!");
static_assert(offsetof(TweenVectorLatentFactory_BP_CreateLatentTweenScaleSceneComponentBy, bY) == 0x000020, "Member 'TweenVectorLatentFactory_BP_CreateLatentTweenScaleSceneComponentBy::bY' has a wrong offset!");
static_assert(offsetof(TweenVectorLatentFactory_BP_CreateLatentTweenScaleSceneComponentBy, Duration) == 0x00002C, "Member 'TweenVectorLatentFactory_BP_CreateLatentTweenScaleSceneComponentBy::Duration' has a wrong offset!");
static_assert(offsetof(TweenVectorLatentFactory_BP_CreateLatentTweenScaleSceneComponentBy, EaseType) == 0x000030, "Member 'TweenVectorLatentFactory_BP_CreateLatentTweenScaleSceneComponentBy::EaseType' has a wrong offset!");
static_assert(offsetof(TweenVectorLatentFactory_BP_CreateLatentTweenScaleSceneComponentBy, DeleteTweenOnHit) == 0x000031, "Member 'TweenVectorLatentFactory_BP_CreateLatentTweenScaleSceneComponentBy::DeleteTweenOnHit' has a wrong offset!");
static_assert(offsetof(TweenVectorLatentFactory_BP_CreateLatentTweenScaleSceneComponentBy, DeleteTweenOnOverlap) == 0x000032, "Member 'TweenVectorLatentFactory_BP_CreateLatentTweenScaleSceneComponentBy::DeleteTweenOnOverlap' has a wrong offset!");
static_assert(offsetof(TweenVectorLatentFactory_BP_CreateLatentTweenScaleSceneComponentBy, NumLoops) == 0x000034, "Member 'TweenVectorLatentFactory_BP_CreateLatentTweenScaleSceneComponentBy::NumLoops' has a wrong offset!");
static_assert(offsetof(TweenVectorLatentFactory_BP_CreateLatentTweenScaleSceneComponentBy, LoopType) == 0x000038, "Member 'TweenVectorLatentFactory_BP_CreateLatentTweenScaleSceneComponentBy::LoopType' has a wrong offset!");
static_assert(offsetof(TweenVectorLatentFactory_BP_CreateLatentTweenScaleSceneComponentBy, Delay) == 0x00003C, "Member 'TweenVectorLatentFactory_BP_CreateLatentTweenScaleSceneComponentBy::Delay' has a wrong offset!");
static_assert(offsetof(TweenVectorLatentFactory_BP_CreateLatentTweenScaleSceneComponentBy, TimeScale) == 0x000040, "Member 'TweenVectorLatentFactory_BP_CreateLatentTweenScaleSceneComponentBy::TimeScale' has a wrong offset!");
static_assert(offsetof(TweenVectorLatentFactory_BP_CreateLatentTweenScaleSceneComponentBy, TweenWhileGameIsPaused) == 0x000044, "Member 'TweenVectorLatentFactory_BP_CreateLatentTweenScaleSceneComponentBy::TweenWhileGameIsPaused' has a wrong offset!");
static_assert(offsetof(TweenVectorLatentFactory_BP_CreateLatentTweenScaleSceneComponentBy, ReturnValue) == 0x000048, "Member 'TweenVectorLatentFactory_BP_CreateLatentTweenScaleSceneComponentBy::ReturnValue' has a wrong offset!");

// Function TweenMaker.TweenVectorLatentFactory.BP_CreateLatentTweenScaleSceneComponentTo
// 0x0050 (0x0050 - 0x0000)
struct TweenVectorLatentFactory_BP_CreateLatentTweenScaleSceneComponentTo final
{
public:
	class UTweenManagerComponent*                 TweenManager;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USceneComponent*                        TweenTarget;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, InstancedReference, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UTweenContainer*                        OutTweenContainer;                                 // 0x0010(0x0008)(Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UTweenVector*                           OutTween;                                          // 0x0018(0x0008)(Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                To;                                                // 0x0020(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Duration;                                          // 0x002C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETweenEaseType                                EaseType;                                          // 0x0030(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETweenSpace                                   TweenSpace;                                        // 0x0031(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          DeleteTweenOnHit;                                  // 0x0032(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          DeleteTweenOnOverlap;                              // 0x0033(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         NumLoops;                                          // 0x0034(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETweenLoopType                                LoopType;                                          // 0x0038(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_39[0x3];                                       // 0x0039(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Delay;                                             // 0x003C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TimeScale;                                         // 0x0040(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          TweenWhileGameIsPaused;                            // 0x0044(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_45[0x3];                                       // 0x0045(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UTweenVectorLatentFactory*              ReturnValue;                                       // 0x0048(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TweenVectorLatentFactory_BP_CreateLatentTweenScaleSceneComponentTo) == 0x000008, "Wrong alignment on TweenVectorLatentFactory_BP_CreateLatentTweenScaleSceneComponentTo");
static_assert(sizeof(TweenVectorLatentFactory_BP_CreateLatentTweenScaleSceneComponentTo) == 0x000050, "Wrong size on TweenVectorLatentFactory_BP_CreateLatentTweenScaleSceneComponentTo");
static_assert(offsetof(TweenVectorLatentFactory_BP_CreateLatentTweenScaleSceneComponentTo, TweenManager) == 0x000000, "Member 'TweenVectorLatentFactory_BP_CreateLatentTweenScaleSceneComponentTo::TweenManager' has a wrong offset!");
static_assert(offsetof(TweenVectorLatentFactory_BP_CreateLatentTweenScaleSceneComponentTo, TweenTarget) == 0x000008, "Member 'TweenVectorLatentFactory_BP_CreateLatentTweenScaleSceneComponentTo::TweenTarget' has a wrong offset!");
static_assert(offsetof(TweenVectorLatentFactory_BP_CreateLatentTweenScaleSceneComponentTo, OutTweenContainer) == 0x000010, "Member 'TweenVectorLatentFactory_BP_CreateLatentTweenScaleSceneComponentTo::OutTweenContainer' has a wrong offset!");
static_assert(offsetof(TweenVectorLatentFactory_BP_CreateLatentTweenScaleSceneComponentTo, OutTween) == 0x000018, "Member 'TweenVectorLatentFactory_BP_CreateLatentTweenScaleSceneComponentTo::OutTween' has a wrong offset!");
static_assert(offsetof(TweenVectorLatentFactory_BP_CreateLatentTweenScaleSceneComponentTo, To) == 0x000020, "Member 'TweenVectorLatentFactory_BP_CreateLatentTweenScaleSceneComponentTo::To' has a wrong offset!");
static_assert(offsetof(TweenVectorLatentFactory_BP_CreateLatentTweenScaleSceneComponentTo, Duration) == 0x00002C, "Member 'TweenVectorLatentFactory_BP_CreateLatentTweenScaleSceneComponentTo::Duration' has a wrong offset!");
static_assert(offsetof(TweenVectorLatentFactory_BP_CreateLatentTweenScaleSceneComponentTo, EaseType) == 0x000030, "Member 'TweenVectorLatentFactory_BP_CreateLatentTweenScaleSceneComponentTo::EaseType' has a wrong offset!");
static_assert(offsetof(TweenVectorLatentFactory_BP_CreateLatentTweenScaleSceneComponentTo, TweenSpace) == 0x000031, "Member 'TweenVectorLatentFactory_BP_CreateLatentTweenScaleSceneComponentTo::TweenSpace' has a wrong offset!");
static_assert(offsetof(TweenVectorLatentFactory_BP_CreateLatentTweenScaleSceneComponentTo, DeleteTweenOnHit) == 0x000032, "Member 'TweenVectorLatentFactory_BP_CreateLatentTweenScaleSceneComponentTo::DeleteTweenOnHit' has a wrong offset!");
static_assert(offsetof(TweenVectorLatentFactory_BP_CreateLatentTweenScaleSceneComponentTo, DeleteTweenOnOverlap) == 0x000033, "Member 'TweenVectorLatentFactory_BP_CreateLatentTweenScaleSceneComponentTo::DeleteTweenOnOverlap' has a wrong offset!");
static_assert(offsetof(TweenVectorLatentFactory_BP_CreateLatentTweenScaleSceneComponentTo, NumLoops) == 0x000034, "Member 'TweenVectorLatentFactory_BP_CreateLatentTweenScaleSceneComponentTo::NumLoops' has a wrong offset!");
static_assert(offsetof(TweenVectorLatentFactory_BP_CreateLatentTweenScaleSceneComponentTo, LoopType) == 0x000038, "Member 'TweenVectorLatentFactory_BP_CreateLatentTweenScaleSceneComponentTo::LoopType' has a wrong offset!");
static_assert(offsetof(TweenVectorLatentFactory_BP_CreateLatentTweenScaleSceneComponentTo, Delay) == 0x00003C, "Member 'TweenVectorLatentFactory_BP_CreateLatentTweenScaleSceneComponentTo::Delay' has a wrong offset!");
static_assert(offsetof(TweenVectorLatentFactory_BP_CreateLatentTweenScaleSceneComponentTo, TimeScale) == 0x000040, "Member 'TweenVectorLatentFactory_BP_CreateLatentTweenScaleSceneComponentTo::TimeScale' has a wrong offset!");
static_assert(offsetof(TweenVectorLatentFactory_BP_CreateLatentTweenScaleSceneComponentTo, TweenWhileGameIsPaused) == 0x000044, "Member 'TweenVectorLatentFactory_BP_CreateLatentTweenScaleSceneComponentTo::TweenWhileGameIsPaused' has a wrong offset!");
static_assert(offsetof(TweenVectorLatentFactory_BP_CreateLatentTweenScaleSceneComponentTo, ReturnValue) == 0x000048, "Member 'TweenVectorLatentFactory_BP_CreateLatentTweenScaleSceneComponentTo::ReturnValue' has a wrong offset!");

// Function TweenMaker.TweenVectorLatentFactory.BP_JoinLatentTweenCustomVector
// 0x0050 (0x0050 - 0x0000)
struct TweenVectorLatentFactory_BP_JoinLatentTweenCustomVector final
{
public:
	class UTweenContainer*                        TweenContainer;                                    // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UTweenVector*                           OutTween;                                          // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UObject*                                TweenTarget;                                       // 0x0010(0x0008)(Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                From;                                              // 0x0018(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                To;                                                // 0x0024(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Duration;                                          // 0x0030(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETweenEaseType                                EaseType;                                          // 0x0034(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_35[0x3];                                       // 0x0035(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Delay;                                             // 0x0038(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TimeScale;                                         // 0x003C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          TweenWhileGameIsPaused;                            // 0x0040(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_41[0x7];                                       // 0x0041(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UTweenVectorLatentFactory*              ReturnValue;                                       // 0x0048(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TweenVectorLatentFactory_BP_JoinLatentTweenCustomVector) == 0x000008, "Wrong alignment on TweenVectorLatentFactory_BP_JoinLatentTweenCustomVector");
static_assert(sizeof(TweenVectorLatentFactory_BP_JoinLatentTweenCustomVector) == 0x000050, "Wrong size on TweenVectorLatentFactory_BP_JoinLatentTweenCustomVector");
static_assert(offsetof(TweenVectorLatentFactory_BP_JoinLatentTweenCustomVector, TweenContainer) == 0x000000, "Member 'TweenVectorLatentFactory_BP_JoinLatentTweenCustomVector::TweenContainer' has a wrong offset!");
static_assert(offsetof(TweenVectorLatentFactory_BP_JoinLatentTweenCustomVector, OutTween) == 0x000008, "Member 'TweenVectorLatentFactory_BP_JoinLatentTweenCustomVector::OutTween' has a wrong offset!");
static_assert(offsetof(TweenVectorLatentFactory_BP_JoinLatentTweenCustomVector, TweenTarget) == 0x000010, "Member 'TweenVectorLatentFactory_BP_JoinLatentTweenCustomVector::TweenTarget' has a wrong offset!");
static_assert(offsetof(TweenVectorLatentFactory_BP_JoinLatentTweenCustomVector, From) == 0x000018, "Member 'TweenVectorLatentFactory_BP_JoinLatentTweenCustomVector::From' has a wrong offset!");
static_assert(offsetof(TweenVectorLatentFactory_BP_JoinLatentTweenCustomVector, To) == 0x000024, "Member 'TweenVectorLatentFactory_BP_JoinLatentTweenCustomVector::To' has a wrong offset!");
static_assert(offsetof(TweenVectorLatentFactory_BP_JoinLatentTweenCustomVector, Duration) == 0x000030, "Member 'TweenVectorLatentFactory_BP_JoinLatentTweenCustomVector::Duration' has a wrong offset!");
static_assert(offsetof(TweenVectorLatentFactory_BP_JoinLatentTweenCustomVector, EaseType) == 0x000034, "Member 'TweenVectorLatentFactory_BP_JoinLatentTweenCustomVector::EaseType' has a wrong offset!");
static_assert(offsetof(TweenVectorLatentFactory_BP_JoinLatentTweenCustomVector, Delay) == 0x000038, "Member 'TweenVectorLatentFactory_BP_JoinLatentTweenCustomVector::Delay' has a wrong offset!");
static_assert(offsetof(TweenVectorLatentFactory_BP_JoinLatentTweenCustomVector, TimeScale) == 0x00003C, "Member 'TweenVectorLatentFactory_BP_JoinLatentTweenCustomVector::TimeScale' has a wrong offset!");
static_assert(offsetof(TweenVectorLatentFactory_BP_JoinLatentTweenCustomVector, TweenWhileGameIsPaused) == 0x000040, "Member 'TweenVectorLatentFactory_BP_JoinLatentTweenCustomVector::TweenWhileGameIsPaused' has a wrong offset!");
static_assert(offsetof(TweenVectorLatentFactory_BP_JoinLatentTweenCustomVector, ReturnValue) == 0x000048, "Member 'TweenVectorLatentFactory_BP_JoinLatentTweenCustomVector::ReturnValue' has a wrong offset!");

// Function TweenMaker.TweenVectorLatentFactory.BP_JoinLatentTweenMoveActorBy
// 0x0040 (0x0040 - 0x0000)
struct TweenVectorLatentFactory_BP_JoinLatentTweenMoveActorBy final
{
public:
	class UTweenContainer*                        TweenContainer;                                    // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UTweenVector*                           OutTween;                                          // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 TweenTarget;                                       // 0x0010(0x0008)(Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                bY;                                                // 0x0018(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Duration;                                          // 0x0024(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETweenEaseType                                EaseType;                                          // 0x0028(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          DeleteTweenOnHit;                                  // 0x0029(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          DeleteTweenOnOverlap;                              // 0x002A(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2B[0x1];                                       // 0x002B(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Delay;                                             // 0x002C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TimeScale;                                         // 0x0030(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          TweenWhileGameIsPaused;                            // 0x0034(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_35[0x3];                                       // 0x0035(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UTweenVectorLatentFactory*              ReturnValue;                                       // 0x0038(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TweenVectorLatentFactory_BP_JoinLatentTweenMoveActorBy) == 0x000008, "Wrong alignment on TweenVectorLatentFactory_BP_JoinLatentTweenMoveActorBy");
static_assert(sizeof(TweenVectorLatentFactory_BP_JoinLatentTweenMoveActorBy) == 0x000040, "Wrong size on TweenVectorLatentFactory_BP_JoinLatentTweenMoveActorBy");
static_assert(offsetof(TweenVectorLatentFactory_BP_JoinLatentTweenMoveActorBy, TweenContainer) == 0x000000, "Member 'TweenVectorLatentFactory_BP_JoinLatentTweenMoveActorBy::TweenContainer' has a wrong offset!");
static_assert(offsetof(TweenVectorLatentFactory_BP_JoinLatentTweenMoveActorBy, OutTween) == 0x000008, "Member 'TweenVectorLatentFactory_BP_JoinLatentTweenMoveActorBy::OutTween' has a wrong offset!");
static_assert(offsetof(TweenVectorLatentFactory_BP_JoinLatentTweenMoveActorBy, TweenTarget) == 0x000010, "Member 'TweenVectorLatentFactory_BP_JoinLatentTweenMoveActorBy::TweenTarget' has a wrong offset!");
static_assert(offsetof(TweenVectorLatentFactory_BP_JoinLatentTweenMoveActorBy, bY) == 0x000018, "Member 'TweenVectorLatentFactory_BP_JoinLatentTweenMoveActorBy::bY' has a wrong offset!");
static_assert(offsetof(TweenVectorLatentFactory_BP_JoinLatentTweenMoveActorBy, Duration) == 0x000024, "Member 'TweenVectorLatentFactory_BP_JoinLatentTweenMoveActorBy::Duration' has a wrong offset!");
static_assert(offsetof(TweenVectorLatentFactory_BP_JoinLatentTweenMoveActorBy, EaseType) == 0x000028, "Member 'TweenVectorLatentFactory_BP_JoinLatentTweenMoveActorBy::EaseType' has a wrong offset!");
static_assert(offsetof(TweenVectorLatentFactory_BP_JoinLatentTweenMoveActorBy, DeleteTweenOnHit) == 0x000029, "Member 'TweenVectorLatentFactory_BP_JoinLatentTweenMoveActorBy::DeleteTweenOnHit' has a wrong offset!");
static_assert(offsetof(TweenVectorLatentFactory_BP_JoinLatentTweenMoveActorBy, DeleteTweenOnOverlap) == 0x00002A, "Member 'TweenVectorLatentFactory_BP_JoinLatentTweenMoveActorBy::DeleteTweenOnOverlap' has a wrong offset!");
static_assert(offsetof(TweenVectorLatentFactory_BP_JoinLatentTweenMoveActorBy, Delay) == 0x00002C, "Member 'TweenVectorLatentFactory_BP_JoinLatentTweenMoveActorBy::Delay' has a wrong offset!");
static_assert(offsetof(TweenVectorLatentFactory_BP_JoinLatentTweenMoveActorBy, TimeScale) == 0x000030, "Member 'TweenVectorLatentFactory_BP_JoinLatentTweenMoveActorBy::TimeScale' has a wrong offset!");
static_assert(offsetof(TweenVectorLatentFactory_BP_JoinLatentTweenMoveActorBy, TweenWhileGameIsPaused) == 0x000034, "Member 'TweenVectorLatentFactory_BP_JoinLatentTweenMoveActorBy::TweenWhileGameIsPaused' has a wrong offset!");
static_assert(offsetof(TweenVectorLatentFactory_BP_JoinLatentTweenMoveActorBy, ReturnValue) == 0x000038, "Member 'TweenVectorLatentFactory_BP_JoinLatentTweenMoveActorBy::ReturnValue' has a wrong offset!");

// Function TweenMaker.TweenVectorLatentFactory.BP_JoinLatentTweenMoveActorTo
// 0x0040 (0x0040 - 0x0000)
struct TweenVectorLatentFactory_BP_JoinLatentTweenMoveActorTo final
{
public:
	class UTweenContainer*                        TweenContainer;                                    // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UTweenVector*                           OutTween;                                          // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 TweenTarget;                                       // 0x0010(0x0008)(Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                To;                                                // 0x0018(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Duration;                                          // 0x0024(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETweenEaseType                                EaseType;                                          // 0x0028(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETweenSpace                                   TweenSpace;                                        // 0x0029(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          DeleteTweenOnHit;                                  // 0x002A(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          DeleteTweenOnOverlap;                              // 0x002B(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Delay;                                             // 0x002C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TimeScale;                                         // 0x0030(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          TweenWhileGameIsPaused;                            // 0x0034(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_35[0x3];                                       // 0x0035(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UTweenVectorLatentFactory*              ReturnValue;                                       // 0x0038(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TweenVectorLatentFactory_BP_JoinLatentTweenMoveActorTo) == 0x000008, "Wrong alignment on TweenVectorLatentFactory_BP_JoinLatentTweenMoveActorTo");
static_assert(sizeof(TweenVectorLatentFactory_BP_JoinLatentTweenMoveActorTo) == 0x000040, "Wrong size on TweenVectorLatentFactory_BP_JoinLatentTweenMoveActorTo");
static_assert(offsetof(TweenVectorLatentFactory_BP_JoinLatentTweenMoveActorTo, TweenContainer) == 0x000000, "Member 'TweenVectorLatentFactory_BP_JoinLatentTweenMoveActorTo::TweenContainer' has a wrong offset!");
static_assert(offsetof(TweenVectorLatentFactory_BP_JoinLatentTweenMoveActorTo, OutTween) == 0x000008, "Member 'TweenVectorLatentFactory_BP_JoinLatentTweenMoveActorTo::OutTween' has a wrong offset!");
static_assert(offsetof(TweenVectorLatentFactory_BP_JoinLatentTweenMoveActorTo, TweenTarget) == 0x000010, "Member 'TweenVectorLatentFactory_BP_JoinLatentTweenMoveActorTo::TweenTarget' has a wrong offset!");
static_assert(offsetof(TweenVectorLatentFactory_BP_JoinLatentTweenMoveActorTo, To) == 0x000018, "Member 'TweenVectorLatentFactory_BP_JoinLatentTweenMoveActorTo::To' has a wrong offset!");
static_assert(offsetof(TweenVectorLatentFactory_BP_JoinLatentTweenMoveActorTo, Duration) == 0x000024, "Member 'TweenVectorLatentFactory_BP_JoinLatentTweenMoveActorTo::Duration' has a wrong offset!");
static_assert(offsetof(TweenVectorLatentFactory_BP_JoinLatentTweenMoveActorTo, EaseType) == 0x000028, "Member 'TweenVectorLatentFactory_BP_JoinLatentTweenMoveActorTo::EaseType' has a wrong offset!");
static_assert(offsetof(TweenVectorLatentFactory_BP_JoinLatentTweenMoveActorTo, TweenSpace) == 0x000029, "Member 'TweenVectorLatentFactory_BP_JoinLatentTweenMoveActorTo::TweenSpace' has a wrong offset!");
static_assert(offsetof(TweenVectorLatentFactory_BP_JoinLatentTweenMoveActorTo, DeleteTweenOnHit) == 0x00002A, "Member 'TweenVectorLatentFactory_BP_JoinLatentTweenMoveActorTo::DeleteTweenOnHit' has a wrong offset!");
static_assert(offsetof(TweenVectorLatentFactory_BP_JoinLatentTweenMoveActorTo, DeleteTweenOnOverlap) == 0x00002B, "Member 'TweenVectorLatentFactory_BP_JoinLatentTweenMoveActorTo::DeleteTweenOnOverlap' has a wrong offset!");
static_assert(offsetof(TweenVectorLatentFactory_BP_JoinLatentTweenMoveActorTo, Delay) == 0x00002C, "Member 'TweenVectorLatentFactory_BP_JoinLatentTweenMoveActorTo::Delay' has a wrong offset!");
static_assert(offsetof(TweenVectorLatentFactory_BP_JoinLatentTweenMoveActorTo, TimeScale) == 0x000030, "Member 'TweenVectorLatentFactory_BP_JoinLatentTweenMoveActorTo::TimeScale' has a wrong offset!");
static_assert(offsetof(TweenVectorLatentFactory_BP_JoinLatentTweenMoveActorTo, TweenWhileGameIsPaused) == 0x000034, "Member 'TweenVectorLatentFactory_BP_JoinLatentTweenMoveActorTo::TweenWhileGameIsPaused' has a wrong offset!");
static_assert(offsetof(TweenVectorLatentFactory_BP_JoinLatentTweenMoveActorTo, ReturnValue) == 0x000038, "Member 'TweenVectorLatentFactory_BP_JoinLatentTweenMoveActorTo::ReturnValue' has a wrong offset!");

// Function TweenMaker.TweenVectorLatentFactory.BP_JoinLatentTweenMoveSceneComponentBy
// 0x0040 (0x0040 - 0x0000)
struct TweenVectorLatentFactory_BP_JoinLatentTweenMoveSceneComponentBy final
{
public:
	class UTweenContainer*                        TweenContainer;                                    // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UTweenVector*                           OutTween;                                          // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USceneComponent*                        TweenTarget;                                       // 0x0010(0x0008)(Parm, OutParm, ZeroConstructor, InstancedReference, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                bY;                                                // 0x0018(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Duration;                                          // 0x0024(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETweenEaseType                                EaseType;                                          // 0x0028(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          DeleteTweenOnHit;                                  // 0x0029(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          DeleteTweenOnOverlap;                              // 0x002A(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2B[0x1];                                       // 0x002B(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Delay;                                             // 0x002C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TimeScale;                                         // 0x0030(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          TweenWhileGameIsPaused;                            // 0x0034(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_35[0x3];                                       // 0x0035(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UTweenVectorLatentFactory*              ReturnValue;                                       // 0x0038(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TweenVectorLatentFactory_BP_JoinLatentTweenMoveSceneComponentBy) == 0x000008, "Wrong alignment on TweenVectorLatentFactory_BP_JoinLatentTweenMoveSceneComponentBy");
static_assert(sizeof(TweenVectorLatentFactory_BP_JoinLatentTweenMoveSceneComponentBy) == 0x000040, "Wrong size on TweenVectorLatentFactory_BP_JoinLatentTweenMoveSceneComponentBy");
static_assert(offsetof(TweenVectorLatentFactory_BP_JoinLatentTweenMoveSceneComponentBy, TweenContainer) == 0x000000, "Member 'TweenVectorLatentFactory_BP_JoinLatentTweenMoveSceneComponentBy::TweenContainer' has a wrong offset!");
static_assert(offsetof(TweenVectorLatentFactory_BP_JoinLatentTweenMoveSceneComponentBy, OutTween) == 0x000008, "Member 'TweenVectorLatentFactory_BP_JoinLatentTweenMoveSceneComponentBy::OutTween' has a wrong offset!");
static_assert(offsetof(TweenVectorLatentFactory_BP_JoinLatentTweenMoveSceneComponentBy, TweenTarget) == 0x000010, "Member 'TweenVectorLatentFactory_BP_JoinLatentTweenMoveSceneComponentBy::TweenTarget' has a wrong offset!");
static_assert(offsetof(TweenVectorLatentFactory_BP_JoinLatentTweenMoveSceneComponentBy, bY) == 0x000018, "Member 'TweenVectorLatentFactory_BP_JoinLatentTweenMoveSceneComponentBy::bY' has a wrong offset!");
static_assert(offsetof(TweenVectorLatentFactory_BP_JoinLatentTweenMoveSceneComponentBy, Duration) == 0x000024, "Member 'TweenVectorLatentFactory_BP_JoinLatentTweenMoveSceneComponentBy::Duration' has a wrong offset!");
static_assert(offsetof(TweenVectorLatentFactory_BP_JoinLatentTweenMoveSceneComponentBy, EaseType) == 0x000028, "Member 'TweenVectorLatentFactory_BP_JoinLatentTweenMoveSceneComponentBy::EaseType' has a wrong offset!");
static_assert(offsetof(TweenVectorLatentFactory_BP_JoinLatentTweenMoveSceneComponentBy, DeleteTweenOnHit) == 0x000029, "Member 'TweenVectorLatentFactory_BP_JoinLatentTweenMoveSceneComponentBy::DeleteTweenOnHit' has a wrong offset!");
static_assert(offsetof(TweenVectorLatentFactory_BP_JoinLatentTweenMoveSceneComponentBy, DeleteTweenOnOverlap) == 0x00002A, "Member 'TweenVectorLatentFactory_BP_JoinLatentTweenMoveSceneComponentBy::DeleteTweenOnOverlap' has a wrong offset!");
static_assert(offsetof(TweenVectorLatentFactory_BP_JoinLatentTweenMoveSceneComponentBy, Delay) == 0x00002C, "Member 'TweenVectorLatentFactory_BP_JoinLatentTweenMoveSceneComponentBy::Delay' has a wrong offset!");
static_assert(offsetof(TweenVectorLatentFactory_BP_JoinLatentTweenMoveSceneComponentBy, TimeScale) == 0x000030, "Member 'TweenVectorLatentFactory_BP_JoinLatentTweenMoveSceneComponentBy::TimeScale' has a wrong offset!");
static_assert(offsetof(TweenVectorLatentFactory_BP_JoinLatentTweenMoveSceneComponentBy, TweenWhileGameIsPaused) == 0x000034, "Member 'TweenVectorLatentFactory_BP_JoinLatentTweenMoveSceneComponentBy::TweenWhileGameIsPaused' has a wrong offset!");
static_assert(offsetof(TweenVectorLatentFactory_BP_JoinLatentTweenMoveSceneComponentBy, ReturnValue) == 0x000038, "Member 'TweenVectorLatentFactory_BP_JoinLatentTweenMoveSceneComponentBy::ReturnValue' has a wrong offset!");

// Function TweenMaker.TweenVectorLatentFactory.BP_JoinLatentTweenMoveSceneComponentTo
// 0x0040 (0x0040 - 0x0000)
struct TweenVectorLatentFactory_BP_JoinLatentTweenMoveSceneComponentTo final
{
public:
	class UTweenContainer*                        TweenContainer;                                    // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UTweenVector*                           OutTween;                                          // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USceneComponent*                        TweenTarget;                                       // 0x0010(0x0008)(Parm, OutParm, ZeroConstructor, InstancedReference, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                To;                                                // 0x0018(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Duration;                                          // 0x0024(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETweenEaseType                                EaseType;                                          // 0x0028(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETweenSpace                                   TweenSpace;                                        // 0x0029(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          DeleteTweenOnHit;                                  // 0x002A(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          DeleteTweenOnOverlap;                              // 0x002B(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Delay;                                             // 0x002C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TimeScale;                                         // 0x0030(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          TweenWhileGameIsPaused;                            // 0x0034(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_35[0x3];                                       // 0x0035(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UTweenVectorLatentFactory*              ReturnValue;                                       // 0x0038(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TweenVectorLatentFactory_BP_JoinLatentTweenMoveSceneComponentTo) == 0x000008, "Wrong alignment on TweenVectorLatentFactory_BP_JoinLatentTweenMoveSceneComponentTo");
static_assert(sizeof(TweenVectorLatentFactory_BP_JoinLatentTweenMoveSceneComponentTo) == 0x000040, "Wrong size on TweenVectorLatentFactory_BP_JoinLatentTweenMoveSceneComponentTo");
static_assert(offsetof(TweenVectorLatentFactory_BP_JoinLatentTweenMoveSceneComponentTo, TweenContainer) == 0x000000, "Member 'TweenVectorLatentFactory_BP_JoinLatentTweenMoveSceneComponentTo::TweenContainer' has a wrong offset!");
static_assert(offsetof(TweenVectorLatentFactory_BP_JoinLatentTweenMoveSceneComponentTo, OutTween) == 0x000008, "Member 'TweenVectorLatentFactory_BP_JoinLatentTweenMoveSceneComponentTo::OutTween' has a wrong offset!");
static_assert(offsetof(TweenVectorLatentFactory_BP_JoinLatentTweenMoveSceneComponentTo, TweenTarget) == 0x000010, "Member 'TweenVectorLatentFactory_BP_JoinLatentTweenMoveSceneComponentTo::TweenTarget' has a wrong offset!");
static_assert(offsetof(TweenVectorLatentFactory_BP_JoinLatentTweenMoveSceneComponentTo, To) == 0x000018, "Member 'TweenVectorLatentFactory_BP_JoinLatentTweenMoveSceneComponentTo::To' has a wrong offset!");
static_assert(offsetof(TweenVectorLatentFactory_BP_JoinLatentTweenMoveSceneComponentTo, Duration) == 0x000024, "Member 'TweenVectorLatentFactory_BP_JoinLatentTweenMoveSceneComponentTo::Duration' has a wrong offset!");
static_assert(offsetof(TweenVectorLatentFactory_BP_JoinLatentTweenMoveSceneComponentTo, EaseType) == 0x000028, "Member 'TweenVectorLatentFactory_BP_JoinLatentTweenMoveSceneComponentTo::EaseType' has a wrong offset!");
static_assert(offsetof(TweenVectorLatentFactory_BP_JoinLatentTweenMoveSceneComponentTo, TweenSpace) == 0x000029, "Member 'TweenVectorLatentFactory_BP_JoinLatentTweenMoveSceneComponentTo::TweenSpace' has a wrong offset!");
static_assert(offsetof(TweenVectorLatentFactory_BP_JoinLatentTweenMoveSceneComponentTo, DeleteTweenOnHit) == 0x00002A, "Member 'TweenVectorLatentFactory_BP_JoinLatentTweenMoveSceneComponentTo::DeleteTweenOnHit' has a wrong offset!");
static_assert(offsetof(TweenVectorLatentFactory_BP_JoinLatentTweenMoveSceneComponentTo, DeleteTweenOnOverlap) == 0x00002B, "Member 'TweenVectorLatentFactory_BP_JoinLatentTweenMoveSceneComponentTo::DeleteTweenOnOverlap' has a wrong offset!");
static_assert(offsetof(TweenVectorLatentFactory_BP_JoinLatentTweenMoveSceneComponentTo, Delay) == 0x00002C, "Member 'TweenVectorLatentFactory_BP_JoinLatentTweenMoveSceneComponentTo::Delay' has a wrong offset!");
static_assert(offsetof(TweenVectorLatentFactory_BP_JoinLatentTweenMoveSceneComponentTo, TimeScale) == 0x000030, "Member 'TweenVectorLatentFactory_BP_JoinLatentTweenMoveSceneComponentTo::TimeScale' has a wrong offset!");
static_assert(offsetof(TweenVectorLatentFactory_BP_JoinLatentTweenMoveSceneComponentTo, TweenWhileGameIsPaused) == 0x000034, "Member 'TweenVectorLatentFactory_BP_JoinLatentTweenMoveSceneComponentTo::TweenWhileGameIsPaused' has a wrong offset!");
static_assert(offsetof(TweenVectorLatentFactory_BP_JoinLatentTweenMoveSceneComponentTo, ReturnValue) == 0x000038, "Member 'TweenVectorLatentFactory_BP_JoinLatentTweenMoveSceneComponentTo::ReturnValue' has a wrong offset!");

// Function TweenMaker.TweenVectorLatentFactory.BP_JoinLatentTweenScaleActorBy
// 0x0040 (0x0040 - 0x0000)
struct TweenVectorLatentFactory_BP_JoinLatentTweenScaleActorBy final
{
public:
	class UTweenContainer*                        TweenContainer;                                    // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UTweenVector*                           OutTween;                                          // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 TweenTarget;                                       // 0x0010(0x0008)(Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                bY;                                                // 0x0018(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Duration;                                          // 0x0024(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETweenEaseType                                EaseType;                                          // 0x0028(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          DeleteTweenOnHit;                                  // 0x0029(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          DeleteTweenOnOverlap;                              // 0x002A(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2B[0x1];                                       // 0x002B(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Delay;                                             // 0x002C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TimeScale;                                         // 0x0030(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          TweenWhileGameIsPaused;                            // 0x0034(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_35[0x3];                                       // 0x0035(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UTweenVectorLatentFactory*              ReturnValue;                                       // 0x0038(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TweenVectorLatentFactory_BP_JoinLatentTweenScaleActorBy) == 0x000008, "Wrong alignment on TweenVectorLatentFactory_BP_JoinLatentTweenScaleActorBy");
static_assert(sizeof(TweenVectorLatentFactory_BP_JoinLatentTweenScaleActorBy) == 0x000040, "Wrong size on TweenVectorLatentFactory_BP_JoinLatentTweenScaleActorBy");
static_assert(offsetof(TweenVectorLatentFactory_BP_JoinLatentTweenScaleActorBy, TweenContainer) == 0x000000, "Member 'TweenVectorLatentFactory_BP_JoinLatentTweenScaleActorBy::TweenContainer' has a wrong offset!");
static_assert(offsetof(TweenVectorLatentFactory_BP_JoinLatentTweenScaleActorBy, OutTween) == 0x000008, "Member 'TweenVectorLatentFactory_BP_JoinLatentTweenScaleActorBy::OutTween' has a wrong offset!");
static_assert(offsetof(TweenVectorLatentFactory_BP_JoinLatentTweenScaleActorBy, TweenTarget) == 0x000010, "Member 'TweenVectorLatentFactory_BP_JoinLatentTweenScaleActorBy::TweenTarget' has a wrong offset!");
static_assert(offsetof(TweenVectorLatentFactory_BP_JoinLatentTweenScaleActorBy, bY) == 0x000018, "Member 'TweenVectorLatentFactory_BP_JoinLatentTweenScaleActorBy::bY' has a wrong offset!");
static_assert(offsetof(TweenVectorLatentFactory_BP_JoinLatentTweenScaleActorBy, Duration) == 0x000024, "Member 'TweenVectorLatentFactory_BP_JoinLatentTweenScaleActorBy::Duration' has a wrong offset!");
static_assert(offsetof(TweenVectorLatentFactory_BP_JoinLatentTweenScaleActorBy, EaseType) == 0x000028, "Member 'TweenVectorLatentFactory_BP_JoinLatentTweenScaleActorBy::EaseType' has a wrong offset!");
static_assert(offsetof(TweenVectorLatentFactory_BP_JoinLatentTweenScaleActorBy, DeleteTweenOnHit) == 0x000029, "Member 'TweenVectorLatentFactory_BP_JoinLatentTweenScaleActorBy::DeleteTweenOnHit' has a wrong offset!");
static_assert(offsetof(TweenVectorLatentFactory_BP_JoinLatentTweenScaleActorBy, DeleteTweenOnOverlap) == 0x00002A, "Member 'TweenVectorLatentFactory_BP_JoinLatentTweenScaleActorBy::DeleteTweenOnOverlap' has a wrong offset!");
static_assert(offsetof(TweenVectorLatentFactory_BP_JoinLatentTweenScaleActorBy, Delay) == 0x00002C, "Member 'TweenVectorLatentFactory_BP_JoinLatentTweenScaleActorBy::Delay' has a wrong offset!");
static_assert(offsetof(TweenVectorLatentFactory_BP_JoinLatentTweenScaleActorBy, TimeScale) == 0x000030, "Member 'TweenVectorLatentFactory_BP_JoinLatentTweenScaleActorBy::TimeScale' has a wrong offset!");
static_assert(offsetof(TweenVectorLatentFactory_BP_JoinLatentTweenScaleActorBy, TweenWhileGameIsPaused) == 0x000034, "Member 'TweenVectorLatentFactory_BP_JoinLatentTweenScaleActorBy::TweenWhileGameIsPaused' has a wrong offset!");
static_assert(offsetof(TweenVectorLatentFactory_BP_JoinLatentTweenScaleActorBy, ReturnValue) == 0x000038, "Member 'TweenVectorLatentFactory_BP_JoinLatentTweenScaleActorBy::ReturnValue' has a wrong offset!");

// Function TweenMaker.TweenVectorLatentFactory.BP_JoinLatentTweenScaleActorTo
// 0x0040 (0x0040 - 0x0000)
struct TweenVectorLatentFactory_BP_JoinLatentTweenScaleActorTo final
{
public:
	class UTweenContainer*                        TweenContainer;                                    // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UTweenVector*                           OutTween;                                          // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 TweenTarget;                                       // 0x0010(0x0008)(Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                To;                                                // 0x0018(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Duration;                                          // 0x0024(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETweenEaseType                                EaseType;                                          // 0x0028(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETweenSpace                                   TweenSpace;                                        // 0x0029(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          DeleteTweenOnHit;                                  // 0x002A(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          DeleteTweenOnOverlap;                              // 0x002B(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Delay;                                             // 0x002C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TimeScale;                                         // 0x0030(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          TweenWhileGameIsPaused;                            // 0x0034(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_35[0x3];                                       // 0x0035(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UTweenVectorLatentFactory*              ReturnValue;                                       // 0x0038(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TweenVectorLatentFactory_BP_JoinLatentTweenScaleActorTo) == 0x000008, "Wrong alignment on TweenVectorLatentFactory_BP_JoinLatentTweenScaleActorTo");
static_assert(sizeof(TweenVectorLatentFactory_BP_JoinLatentTweenScaleActorTo) == 0x000040, "Wrong size on TweenVectorLatentFactory_BP_JoinLatentTweenScaleActorTo");
static_assert(offsetof(TweenVectorLatentFactory_BP_JoinLatentTweenScaleActorTo, TweenContainer) == 0x000000, "Member 'TweenVectorLatentFactory_BP_JoinLatentTweenScaleActorTo::TweenContainer' has a wrong offset!");
static_assert(offsetof(TweenVectorLatentFactory_BP_JoinLatentTweenScaleActorTo, OutTween) == 0x000008, "Member 'TweenVectorLatentFactory_BP_JoinLatentTweenScaleActorTo::OutTween' has a wrong offset!");
static_assert(offsetof(TweenVectorLatentFactory_BP_JoinLatentTweenScaleActorTo, TweenTarget) == 0x000010, "Member 'TweenVectorLatentFactory_BP_JoinLatentTweenScaleActorTo::TweenTarget' has a wrong offset!");
static_assert(offsetof(TweenVectorLatentFactory_BP_JoinLatentTweenScaleActorTo, To) == 0x000018, "Member 'TweenVectorLatentFactory_BP_JoinLatentTweenScaleActorTo::To' has a wrong offset!");
static_assert(offsetof(TweenVectorLatentFactory_BP_JoinLatentTweenScaleActorTo, Duration) == 0x000024, "Member 'TweenVectorLatentFactory_BP_JoinLatentTweenScaleActorTo::Duration' has a wrong offset!");
static_assert(offsetof(TweenVectorLatentFactory_BP_JoinLatentTweenScaleActorTo, EaseType) == 0x000028, "Member 'TweenVectorLatentFactory_BP_JoinLatentTweenScaleActorTo::EaseType' has a wrong offset!");
static_assert(offsetof(TweenVectorLatentFactory_BP_JoinLatentTweenScaleActorTo, TweenSpace) == 0x000029, "Member 'TweenVectorLatentFactory_BP_JoinLatentTweenScaleActorTo::TweenSpace' has a wrong offset!");
static_assert(offsetof(TweenVectorLatentFactory_BP_JoinLatentTweenScaleActorTo, DeleteTweenOnHit) == 0x00002A, "Member 'TweenVectorLatentFactory_BP_JoinLatentTweenScaleActorTo::DeleteTweenOnHit' has a wrong offset!");
static_assert(offsetof(TweenVectorLatentFactory_BP_JoinLatentTweenScaleActorTo, DeleteTweenOnOverlap) == 0x00002B, "Member 'TweenVectorLatentFactory_BP_JoinLatentTweenScaleActorTo::DeleteTweenOnOverlap' has a wrong offset!");
static_assert(offsetof(TweenVectorLatentFactory_BP_JoinLatentTweenScaleActorTo, Delay) == 0x00002C, "Member 'TweenVectorLatentFactory_BP_JoinLatentTweenScaleActorTo::Delay' has a wrong offset!");
static_assert(offsetof(TweenVectorLatentFactory_BP_JoinLatentTweenScaleActorTo, TimeScale) == 0x000030, "Member 'TweenVectorLatentFactory_BP_JoinLatentTweenScaleActorTo::TimeScale' has a wrong offset!");
static_assert(offsetof(TweenVectorLatentFactory_BP_JoinLatentTweenScaleActorTo, TweenWhileGameIsPaused) == 0x000034, "Member 'TweenVectorLatentFactory_BP_JoinLatentTweenScaleActorTo::TweenWhileGameIsPaused' has a wrong offset!");
static_assert(offsetof(TweenVectorLatentFactory_BP_JoinLatentTweenScaleActorTo, ReturnValue) == 0x000038, "Member 'TweenVectorLatentFactory_BP_JoinLatentTweenScaleActorTo::ReturnValue' has a wrong offset!");

// Function TweenMaker.TweenVectorLatentFactory.BP_JoinLatentTweenScaleSceneComponentBy
// 0x0040 (0x0040 - 0x0000)
struct TweenVectorLatentFactory_BP_JoinLatentTweenScaleSceneComponentBy final
{
public:
	class UTweenContainer*                        TweenContainer;                                    // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UTweenVector*                           OutTween;                                          // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USceneComponent*                        TweenTarget;                                       // 0x0010(0x0008)(Parm, OutParm, ZeroConstructor, InstancedReference, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                bY;                                                // 0x0018(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Duration;                                          // 0x0024(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETweenEaseType                                EaseType;                                          // 0x0028(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          DeleteTweenOnHit;                                  // 0x0029(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          DeleteTweenOnOverlap;                              // 0x002A(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2B[0x1];                                       // 0x002B(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Delay;                                             // 0x002C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TimeScale;                                         // 0x0030(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          TweenWhileGameIsPaused;                            // 0x0034(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_35[0x3];                                       // 0x0035(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UTweenVectorLatentFactory*              ReturnValue;                                       // 0x0038(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TweenVectorLatentFactory_BP_JoinLatentTweenScaleSceneComponentBy) == 0x000008, "Wrong alignment on TweenVectorLatentFactory_BP_JoinLatentTweenScaleSceneComponentBy");
static_assert(sizeof(TweenVectorLatentFactory_BP_JoinLatentTweenScaleSceneComponentBy) == 0x000040, "Wrong size on TweenVectorLatentFactory_BP_JoinLatentTweenScaleSceneComponentBy");
static_assert(offsetof(TweenVectorLatentFactory_BP_JoinLatentTweenScaleSceneComponentBy, TweenContainer) == 0x000000, "Member 'TweenVectorLatentFactory_BP_JoinLatentTweenScaleSceneComponentBy::TweenContainer' has a wrong offset!");
static_assert(offsetof(TweenVectorLatentFactory_BP_JoinLatentTweenScaleSceneComponentBy, OutTween) == 0x000008, "Member 'TweenVectorLatentFactory_BP_JoinLatentTweenScaleSceneComponentBy::OutTween' has a wrong offset!");
static_assert(offsetof(TweenVectorLatentFactory_BP_JoinLatentTweenScaleSceneComponentBy, TweenTarget) == 0x000010, "Member 'TweenVectorLatentFactory_BP_JoinLatentTweenScaleSceneComponentBy::TweenTarget' has a wrong offset!");
static_assert(offsetof(TweenVectorLatentFactory_BP_JoinLatentTweenScaleSceneComponentBy, bY) == 0x000018, "Member 'TweenVectorLatentFactory_BP_JoinLatentTweenScaleSceneComponentBy::bY' has a wrong offset!");
static_assert(offsetof(TweenVectorLatentFactory_BP_JoinLatentTweenScaleSceneComponentBy, Duration) == 0x000024, "Member 'TweenVectorLatentFactory_BP_JoinLatentTweenScaleSceneComponentBy::Duration' has a wrong offset!");
static_assert(offsetof(TweenVectorLatentFactory_BP_JoinLatentTweenScaleSceneComponentBy, EaseType) == 0x000028, "Member 'TweenVectorLatentFactory_BP_JoinLatentTweenScaleSceneComponentBy::EaseType' has a wrong offset!");
static_assert(offsetof(TweenVectorLatentFactory_BP_JoinLatentTweenScaleSceneComponentBy, DeleteTweenOnHit) == 0x000029, "Member 'TweenVectorLatentFactory_BP_JoinLatentTweenScaleSceneComponentBy::DeleteTweenOnHit' has a wrong offset!");
static_assert(offsetof(TweenVectorLatentFactory_BP_JoinLatentTweenScaleSceneComponentBy, DeleteTweenOnOverlap) == 0x00002A, "Member 'TweenVectorLatentFactory_BP_JoinLatentTweenScaleSceneComponentBy::DeleteTweenOnOverlap' has a wrong offset!");
static_assert(offsetof(TweenVectorLatentFactory_BP_JoinLatentTweenScaleSceneComponentBy, Delay) == 0x00002C, "Member 'TweenVectorLatentFactory_BP_JoinLatentTweenScaleSceneComponentBy::Delay' has a wrong offset!");
static_assert(offsetof(TweenVectorLatentFactory_BP_JoinLatentTweenScaleSceneComponentBy, TimeScale) == 0x000030, "Member 'TweenVectorLatentFactory_BP_JoinLatentTweenScaleSceneComponentBy::TimeScale' has a wrong offset!");
static_assert(offsetof(TweenVectorLatentFactory_BP_JoinLatentTweenScaleSceneComponentBy, TweenWhileGameIsPaused) == 0x000034, "Member 'TweenVectorLatentFactory_BP_JoinLatentTweenScaleSceneComponentBy::TweenWhileGameIsPaused' has a wrong offset!");
static_assert(offsetof(TweenVectorLatentFactory_BP_JoinLatentTweenScaleSceneComponentBy, ReturnValue) == 0x000038, "Member 'TweenVectorLatentFactory_BP_JoinLatentTweenScaleSceneComponentBy::ReturnValue' has a wrong offset!");

// Function TweenMaker.TweenVectorLatentFactory.BP_JoinLatentTweenScaleSceneComponentTo
// 0x0040 (0x0040 - 0x0000)
struct TweenVectorLatentFactory_BP_JoinLatentTweenScaleSceneComponentTo final
{
public:
	class UTweenContainer*                        TweenContainer;                                    // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UTweenVector*                           OutTween;                                          // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USceneComponent*                        TweenTarget;                                       // 0x0010(0x0008)(Parm, OutParm, ZeroConstructor, InstancedReference, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                To;                                                // 0x0018(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Duration;                                          // 0x0024(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETweenEaseType                                EaseType;                                          // 0x0028(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETweenSpace                                   TweenSpace;                                        // 0x0029(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          DeleteTweenOnHit;                                  // 0x002A(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          DeleteTweenOnOverlap;                              // 0x002B(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Delay;                                             // 0x002C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TimeScale;                                         // 0x0030(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          TweenWhileGameIsPaused;                            // 0x0034(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_35[0x3];                                       // 0x0035(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UTweenVectorLatentFactory*              ReturnValue;                                       // 0x0038(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TweenVectorLatentFactory_BP_JoinLatentTweenScaleSceneComponentTo) == 0x000008, "Wrong alignment on TweenVectorLatentFactory_BP_JoinLatentTweenScaleSceneComponentTo");
static_assert(sizeof(TweenVectorLatentFactory_BP_JoinLatentTweenScaleSceneComponentTo) == 0x000040, "Wrong size on TweenVectorLatentFactory_BP_JoinLatentTweenScaleSceneComponentTo");
static_assert(offsetof(TweenVectorLatentFactory_BP_JoinLatentTweenScaleSceneComponentTo, TweenContainer) == 0x000000, "Member 'TweenVectorLatentFactory_BP_JoinLatentTweenScaleSceneComponentTo::TweenContainer' has a wrong offset!");
static_assert(offsetof(TweenVectorLatentFactory_BP_JoinLatentTweenScaleSceneComponentTo, OutTween) == 0x000008, "Member 'TweenVectorLatentFactory_BP_JoinLatentTweenScaleSceneComponentTo::OutTween' has a wrong offset!");
static_assert(offsetof(TweenVectorLatentFactory_BP_JoinLatentTweenScaleSceneComponentTo, TweenTarget) == 0x000010, "Member 'TweenVectorLatentFactory_BP_JoinLatentTweenScaleSceneComponentTo::TweenTarget' has a wrong offset!");
static_assert(offsetof(TweenVectorLatentFactory_BP_JoinLatentTweenScaleSceneComponentTo, To) == 0x000018, "Member 'TweenVectorLatentFactory_BP_JoinLatentTweenScaleSceneComponentTo::To' has a wrong offset!");
static_assert(offsetof(TweenVectorLatentFactory_BP_JoinLatentTweenScaleSceneComponentTo, Duration) == 0x000024, "Member 'TweenVectorLatentFactory_BP_JoinLatentTweenScaleSceneComponentTo::Duration' has a wrong offset!");
static_assert(offsetof(TweenVectorLatentFactory_BP_JoinLatentTweenScaleSceneComponentTo, EaseType) == 0x000028, "Member 'TweenVectorLatentFactory_BP_JoinLatentTweenScaleSceneComponentTo::EaseType' has a wrong offset!");
static_assert(offsetof(TweenVectorLatentFactory_BP_JoinLatentTweenScaleSceneComponentTo, TweenSpace) == 0x000029, "Member 'TweenVectorLatentFactory_BP_JoinLatentTweenScaleSceneComponentTo::TweenSpace' has a wrong offset!");
static_assert(offsetof(TweenVectorLatentFactory_BP_JoinLatentTweenScaleSceneComponentTo, DeleteTweenOnHit) == 0x00002A, "Member 'TweenVectorLatentFactory_BP_JoinLatentTweenScaleSceneComponentTo::DeleteTweenOnHit' has a wrong offset!");
static_assert(offsetof(TweenVectorLatentFactory_BP_JoinLatentTweenScaleSceneComponentTo, DeleteTweenOnOverlap) == 0x00002B, "Member 'TweenVectorLatentFactory_BP_JoinLatentTweenScaleSceneComponentTo::DeleteTweenOnOverlap' has a wrong offset!");
static_assert(offsetof(TweenVectorLatentFactory_BP_JoinLatentTweenScaleSceneComponentTo, Delay) == 0x00002C, "Member 'TweenVectorLatentFactory_BP_JoinLatentTweenScaleSceneComponentTo::Delay' has a wrong offset!");
static_assert(offsetof(TweenVectorLatentFactory_BP_JoinLatentTweenScaleSceneComponentTo, TimeScale) == 0x000030, "Member 'TweenVectorLatentFactory_BP_JoinLatentTweenScaleSceneComponentTo::TimeScale' has a wrong offset!");
static_assert(offsetof(TweenVectorLatentFactory_BP_JoinLatentTweenScaleSceneComponentTo, TweenWhileGameIsPaused) == 0x000034, "Member 'TweenVectorLatentFactory_BP_JoinLatentTweenScaleSceneComponentTo::TweenWhileGameIsPaused' has a wrong offset!");
static_assert(offsetof(TweenVectorLatentFactory_BP_JoinLatentTweenScaleSceneComponentTo, ReturnValue) == 0x000038, "Member 'TweenVectorLatentFactory_BP_JoinLatentTweenScaleSceneComponentTo::ReturnValue' has a wrong offset!");

// Function TweenMaker.TweenVectorStandardFactory.BP_AppendTweenCustomVector
// 0x0050 (0x0050 - 0x0000)
struct TweenVectorStandardFactory_BP_AppendTweenCustomVector final
{
public:
	class UTweenContainer*                        TweenContainer;                                    // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UObject*                                TweenTarget;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                From;                                              // 0x0010(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                To;                                                // 0x001C(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Duration;                                          // 0x0028(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETweenEaseType                                EaseType;                                          // 0x002C(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2D[0x3];                                       // 0x002D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         NumLoops;                                          // 0x0030(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETweenLoopType                                LoopType;                                          // 0x0034(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_35[0x3];                                       // 0x0035(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Delay;                                             // 0x0038(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TimeScale;                                         // 0x003C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          TweenWhileGameIsPaused;                            // 0x0040(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_41[0x3];                                       // 0x0041(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         SequenceIndex;                                     // 0x0044(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UTweenVector*                           ReturnValue;                                       // 0x0048(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TweenVectorStandardFactory_BP_AppendTweenCustomVector) == 0x000008, "Wrong alignment on TweenVectorStandardFactory_BP_AppendTweenCustomVector");
static_assert(sizeof(TweenVectorStandardFactory_BP_AppendTweenCustomVector) == 0x000050, "Wrong size on TweenVectorStandardFactory_BP_AppendTweenCustomVector");
static_assert(offsetof(TweenVectorStandardFactory_BP_AppendTweenCustomVector, TweenContainer) == 0x000000, "Member 'TweenVectorStandardFactory_BP_AppendTweenCustomVector::TweenContainer' has a wrong offset!");
static_assert(offsetof(TweenVectorStandardFactory_BP_AppendTweenCustomVector, TweenTarget) == 0x000008, "Member 'TweenVectorStandardFactory_BP_AppendTweenCustomVector::TweenTarget' has a wrong offset!");
static_assert(offsetof(TweenVectorStandardFactory_BP_AppendTweenCustomVector, From) == 0x000010, "Member 'TweenVectorStandardFactory_BP_AppendTweenCustomVector::From' has a wrong offset!");
static_assert(offsetof(TweenVectorStandardFactory_BP_AppendTweenCustomVector, To) == 0x00001C, "Member 'TweenVectorStandardFactory_BP_AppendTweenCustomVector::To' has a wrong offset!");
static_assert(offsetof(TweenVectorStandardFactory_BP_AppendTweenCustomVector, Duration) == 0x000028, "Member 'TweenVectorStandardFactory_BP_AppendTweenCustomVector::Duration' has a wrong offset!");
static_assert(offsetof(TweenVectorStandardFactory_BP_AppendTweenCustomVector, EaseType) == 0x00002C, "Member 'TweenVectorStandardFactory_BP_AppendTweenCustomVector::EaseType' has a wrong offset!");
static_assert(offsetof(TweenVectorStandardFactory_BP_AppendTweenCustomVector, NumLoops) == 0x000030, "Member 'TweenVectorStandardFactory_BP_AppendTweenCustomVector::NumLoops' has a wrong offset!");
static_assert(offsetof(TweenVectorStandardFactory_BP_AppendTweenCustomVector, LoopType) == 0x000034, "Member 'TweenVectorStandardFactory_BP_AppendTweenCustomVector::LoopType' has a wrong offset!");
static_assert(offsetof(TweenVectorStandardFactory_BP_AppendTweenCustomVector, Delay) == 0x000038, "Member 'TweenVectorStandardFactory_BP_AppendTweenCustomVector::Delay' has a wrong offset!");
static_assert(offsetof(TweenVectorStandardFactory_BP_AppendTweenCustomVector, TimeScale) == 0x00003C, "Member 'TweenVectorStandardFactory_BP_AppendTweenCustomVector::TimeScale' has a wrong offset!");
static_assert(offsetof(TweenVectorStandardFactory_BP_AppendTweenCustomVector, TweenWhileGameIsPaused) == 0x000040, "Member 'TweenVectorStandardFactory_BP_AppendTweenCustomVector::TweenWhileGameIsPaused' has a wrong offset!");
static_assert(offsetof(TweenVectorStandardFactory_BP_AppendTweenCustomVector, SequenceIndex) == 0x000044, "Member 'TweenVectorStandardFactory_BP_AppendTweenCustomVector::SequenceIndex' has a wrong offset!");
static_assert(offsetof(TweenVectorStandardFactory_BP_AppendTweenCustomVector, ReturnValue) == 0x000048, "Member 'TweenVectorStandardFactory_BP_AppendTweenCustomVector::ReturnValue' has a wrong offset!");

// Function TweenMaker.TweenVectorStandardFactory.BP_AppendTweenMoveActorBy
// 0x0048 (0x0048 - 0x0000)
struct TweenVectorStandardFactory_BP_AppendTweenMoveActorBy final
{
public:
	class UTweenContainer*                        TweenContainer;                                    // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 TweenTarget;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                bY;                                                // 0x0010(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Duration;                                          // 0x001C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETweenEaseType                                EaseType;                                          // 0x0020(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          DeleteTweenOnHit;                                  // 0x0021(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          DeleteTweenOnOverlap;                              // 0x0022(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_23[0x1];                                       // 0x0023(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         NumLoops;                                          // 0x0024(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETweenLoopType                                LoopType;                                          // 0x0028(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_29[0x3];                                       // 0x0029(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Delay;                                             // 0x002C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TimeScale;                                         // 0x0030(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          TweenWhileGameIsPaused;                            // 0x0034(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_35[0x3];                                       // 0x0035(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         SequenceIndex;                                     // 0x0038(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_3C[0x4];                                       // 0x003C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UTweenVector*                           ReturnValue;                                       // 0x0040(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TweenVectorStandardFactory_BP_AppendTweenMoveActorBy) == 0x000008, "Wrong alignment on TweenVectorStandardFactory_BP_AppendTweenMoveActorBy");
static_assert(sizeof(TweenVectorStandardFactory_BP_AppendTweenMoveActorBy) == 0x000048, "Wrong size on TweenVectorStandardFactory_BP_AppendTweenMoveActorBy");
static_assert(offsetof(TweenVectorStandardFactory_BP_AppendTweenMoveActorBy, TweenContainer) == 0x000000, "Member 'TweenVectorStandardFactory_BP_AppendTweenMoveActorBy::TweenContainer' has a wrong offset!");
static_assert(offsetof(TweenVectorStandardFactory_BP_AppendTweenMoveActorBy, TweenTarget) == 0x000008, "Member 'TweenVectorStandardFactory_BP_AppendTweenMoveActorBy::TweenTarget' has a wrong offset!");
static_assert(offsetof(TweenVectorStandardFactory_BP_AppendTweenMoveActorBy, bY) == 0x000010, "Member 'TweenVectorStandardFactory_BP_AppendTweenMoveActorBy::bY' has a wrong offset!");
static_assert(offsetof(TweenVectorStandardFactory_BP_AppendTweenMoveActorBy, Duration) == 0x00001C, "Member 'TweenVectorStandardFactory_BP_AppendTweenMoveActorBy::Duration' has a wrong offset!");
static_assert(offsetof(TweenVectorStandardFactory_BP_AppendTweenMoveActorBy, EaseType) == 0x000020, "Member 'TweenVectorStandardFactory_BP_AppendTweenMoveActorBy::EaseType' has a wrong offset!");
static_assert(offsetof(TweenVectorStandardFactory_BP_AppendTweenMoveActorBy, DeleteTweenOnHit) == 0x000021, "Member 'TweenVectorStandardFactory_BP_AppendTweenMoveActorBy::DeleteTweenOnHit' has a wrong offset!");
static_assert(offsetof(TweenVectorStandardFactory_BP_AppendTweenMoveActorBy, DeleteTweenOnOverlap) == 0x000022, "Member 'TweenVectorStandardFactory_BP_AppendTweenMoveActorBy::DeleteTweenOnOverlap' has a wrong offset!");
static_assert(offsetof(TweenVectorStandardFactory_BP_AppendTweenMoveActorBy, NumLoops) == 0x000024, "Member 'TweenVectorStandardFactory_BP_AppendTweenMoveActorBy::NumLoops' has a wrong offset!");
static_assert(offsetof(TweenVectorStandardFactory_BP_AppendTweenMoveActorBy, LoopType) == 0x000028, "Member 'TweenVectorStandardFactory_BP_AppendTweenMoveActorBy::LoopType' has a wrong offset!");
static_assert(offsetof(TweenVectorStandardFactory_BP_AppendTweenMoveActorBy, Delay) == 0x00002C, "Member 'TweenVectorStandardFactory_BP_AppendTweenMoveActorBy::Delay' has a wrong offset!");
static_assert(offsetof(TweenVectorStandardFactory_BP_AppendTweenMoveActorBy, TimeScale) == 0x000030, "Member 'TweenVectorStandardFactory_BP_AppendTweenMoveActorBy::TimeScale' has a wrong offset!");
static_assert(offsetof(TweenVectorStandardFactory_BP_AppendTweenMoveActorBy, TweenWhileGameIsPaused) == 0x000034, "Member 'TweenVectorStandardFactory_BP_AppendTweenMoveActorBy::TweenWhileGameIsPaused' has a wrong offset!");
static_assert(offsetof(TweenVectorStandardFactory_BP_AppendTweenMoveActorBy, SequenceIndex) == 0x000038, "Member 'TweenVectorStandardFactory_BP_AppendTweenMoveActorBy::SequenceIndex' has a wrong offset!");
static_assert(offsetof(TweenVectorStandardFactory_BP_AppendTweenMoveActorBy, ReturnValue) == 0x000040, "Member 'TweenVectorStandardFactory_BP_AppendTweenMoveActorBy::ReturnValue' has a wrong offset!");

// Function TweenMaker.TweenVectorStandardFactory.BP_AppendTweenMoveActorTo
// 0x0048 (0x0048 - 0x0000)
struct TweenVectorStandardFactory_BP_AppendTweenMoveActorTo final
{
public:
	class UTweenContainer*                        TweenContainer;                                    // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 TweenTarget;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                To;                                                // 0x0010(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Duration;                                          // 0x001C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETweenEaseType                                EaseType;                                          // 0x0020(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETweenSpace                                   TweenSpace;                                        // 0x0021(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          DeleteTweenOnHit;                                  // 0x0022(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          DeleteTweenOnOverlap;                              // 0x0023(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         NumLoops;                                          // 0x0024(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETweenLoopType                                LoopType;                                          // 0x0028(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_29[0x3];                                       // 0x0029(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Delay;                                             // 0x002C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TimeScale;                                         // 0x0030(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          TweenWhileGameIsPaused;                            // 0x0034(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_35[0x3];                                       // 0x0035(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         SequenceIndex;                                     // 0x0038(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_3C[0x4];                                       // 0x003C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UTweenVector*                           ReturnValue;                                       // 0x0040(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TweenVectorStandardFactory_BP_AppendTweenMoveActorTo) == 0x000008, "Wrong alignment on TweenVectorStandardFactory_BP_AppendTweenMoveActorTo");
static_assert(sizeof(TweenVectorStandardFactory_BP_AppendTweenMoveActorTo) == 0x000048, "Wrong size on TweenVectorStandardFactory_BP_AppendTweenMoveActorTo");
static_assert(offsetof(TweenVectorStandardFactory_BP_AppendTweenMoveActorTo, TweenContainer) == 0x000000, "Member 'TweenVectorStandardFactory_BP_AppendTweenMoveActorTo::TweenContainer' has a wrong offset!");
static_assert(offsetof(TweenVectorStandardFactory_BP_AppendTweenMoveActorTo, TweenTarget) == 0x000008, "Member 'TweenVectorStandardFactory_BP_AppendTweenMoveActorTo::TweenTarget' has a wrong offset!");
static_assert(offsetof(TweenVectorStandardFactory_BP_AppendTweenMoveActorTo, To) == 0x000010, "Member 'TweenVectorStandardFactory_BP_AppendTweenMoveActorTo::To' has a wrong offset!");
static_assert(offsetof(TweenVectorStandardFactory_BP_AppendTweenMoveActorTo, Duration) == 0x00001C, "Member 'TweenVectorStandardFactory_BP_AppendTweenMoveActorTo::Duration' has a wrong offset!");
static_assert(offsetof(TweenVectorStandardFactory_BP_AppendTweenMoveActorTo, EaseType) == 0x000020, "Member 'TweenVectorStandardFactory_BP_AppendTweenMoveActorTo::EaseType' has a wrong offset!");
static_assert(offsetof(TweenVectorStandardFactory_BP_AppendTweenMoveActorTo, TweenSpace) == 0x000021, "Member 'TweenVectorStandardFactory_BP_AppendTweenMoveActorTo::TweenSpace' has a wrong offset!");
static_assert(offsetof(TweenVectorStandardFactory_BP_AppendTweenMoveActorTo, DeleteTweenOnHit) == 0x000022, "Member 'TweenVectorStandardFactory_BP_AppendTweenMoveActorTo::DeleteTweenOnHit' has a wrong offset!");
static_assert(offsetof(TweenVectorStandardFactory_BP_AppendTweenMoveActorTo, DeleteTweenOnOverlap) == 0x000023, "Member 'TweenVectorStandardFactory_BP_AppendTweenMoveActorTo::DeleteTweenOnOverlap' has a wrong offset!");
static_assert(offsetof(TweenVectorStandardFactory_BP_AppendTweenMoveActorTo, NumLoops) == 0x000024, "Member 'TweenVectorStandardFactory_BP_AppendTweenMoveActorTo::NumLoops' has a wrong offset!");
static_assert(offsetof(TweenVectorStandardFactory_BP_AppendTweenMoveActorTo, LoopType) == 0x000028, "Member 'TweenVectorStandardFactory_BP_AppendTweenMoveActorTo::LoopType' has a wrong offset!");
static_assert(offsetof(TweenVectorStandardFactory_BP_AppendTweenMoveActorTo, Delay) == 0x00002C, "Member 'TweenVectorStandardFactory_BP_AppendTweenMoveActorTo::Delay' has a wrong offset!");
static_assert(offsetof(TweenVectorStandardFactory_BP_AppendTweenMoveActorTo, TimeScale) == 0x000030, "Member 'TweenVectorStandardFactory_BP_AppendTweenMoveActorTo::TimeScale' has a wrong offset!");
static_assert(offsetof(TweenVectorStandardFactory_BP_AppendTweenMoveActorTo, TweenWhileGameIsPaused) == 0x000034, "Member 'TweenVectorStandardFactory_BP_AppendTweenMoveActorTo::TweenWhileGameIsPaused' has a wrong offset!");
static_assert(offsetof(TweenVectorStandardFactory_BP_AppendTweenMoveActorTo, SequenceIndex) == 0x000038, "Member 'TweenVectorStandardFactory_BP_AppendTweenMoveActorTo::SequenceIndex' has a wrong offset!");
static_assert(offsetof(TweenVectorStandardFactory_BP_AppendTweenMoveActorTo, ReturnValue) == 0x000040, "Member 'TweenVectorStandardFactory_BP_AppendTweenMoveActorTo::ReturnValue' has a wrong offset!");

// Function TweenMaker.TweenVectorStandardFactory.BP_AppendTweenMoveSceneComponentBy
// 0x0048 (0x0048 - 0x0000)
struct TweenVectorStandardFactory_BP_AppendTweenMoveSceneComponentBy final
{
public:
	class UTweenContainer*                        TweenContainer;                                    // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USceneComponent*                        TweenTarget;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, InstancedReference, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                bY;                                                // 0x0010(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Duration;                                          // 0x001C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETweenEaseType                                EaseType;                                          // 0x0020(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          DeleteTweenOnHit;                                  // 0x0021(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          DeleteTweenOnOverlap;                              // 0x0022(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_23[0x1];                                       // 0x0023(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         NumLoops;                                          // 0x0024(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETweenLoopType                                LoopType;                                          // 0x0028(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_29[0x3];                                       // 0x0029(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Delay;                                             // 0x002C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TimeScale;                                         // 0x0030(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          TweenWhileGameIsPaused;                            // 0x0034(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_35[0x3];                                       // 0x0035(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         SequenceIndex;                                     // 0x0038(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_3C[0x4];                                       // 0x003C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UTweenVector*                           ReturnValue;                                       // 0x0040(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TweenVectorStandardFactory_BP_AppendTweenMoveSceneComponentBy) == 0x000008, "Wrong alignment on TweenVectorStandardFactory_BP_AppendTweenMoveSceneComponentBy");
static_assert(sizeof(TweenVectorStandardFactory_BP_AppendTweenMoveSceneComponentBy) == 0x000048, "Wrong size on TweenVectorStandardFactory_BP_AppendTweenMoveSceneComponentBy");
static_assert(offsetof(TweenVectorStandardFactory_BP_AppendTweenMoveSceneComponentBy, TweenContainer) == 0x000000, "Member 'TweenVectorStandardFactory_BP_AppendTweenMoveSceneComponentBy::TweenContainer' has a wrong offset!");
static_assert(offsetof(TweenVectorStandardFactory_BP_AppendTweenMoveSceneComponentBy, TweenTarget) == 0x000008, "Member 'TweenVectorStandardFactory_BP_AppendTweenMoveSceneComponentBy::TweenTarget' has a wrong offset!");
static_assert(offsetof(TweenVectorStandardFactory_BP_AppendTweenMoveSceneComponentBy, bY) == 0x000010, "Member 'TweenVectorStandardFactory_BP_AppendTweenMoveSceneComponentBy::bY' has a wrong offset!");
static_assert(offsetof(TweenVectorStandardFactory_BP_AppendTweenMoveSceneComponentBy, Duration) == 0x00001C, "Member 'TweenVectorStandardFactory_BP_AppendTweenMoveSceneComponentBy::Duration' has a wrong offset!");
static_assert(offsetof(TweenVectorStandardFactory_BP_AppendTweenMoveSceneComponentBy, EaseType) == 0x000020, "Member 'TweenVectorStandardFactory_BP_AppendTweenMoveSceneComponentBy::EaseType' has a wrong offset!");
static_assert(offsetof(TweenVectorStandardFactory_BP_AppendTweenMoveSceneComponentBy, DeleteTweenOnHit) == 0x000021, "Member 'TweenVectorStandardFactory_BP_AppendTweenMoveSceneComponentBy::DeleteTweenOnHit' has a wrong offset!");
static_assert(offsetof(TweenVectorStandardFactory_BP_AppendTweenMoveSceneComponentBy, DeleteTweenOnOverlap) == 0x000022, "Member 'TweenVectorStandardFactory_BP_AppendTweenMoveSceneComponentBy::DeleteTweenOnOverlap' has a wrong offset!");
static_assert(offsetof(TweenVectorStandardFactory_BP_AppendTweenMoveSceneComponentBy, NumLoops) == 0x000024, "Member 'TweenVectorStandardFactory_BP_AppendTweenMoveSceneComponentBy::NumLoops' has a wrong offset!");
static_assert(offsetof(TweenVectorStandardFactory_BP_AppendTweenMoveSceneComponentBy, LoopType) == 0x000028, "Member 'TweenVectorStandardFactory_BP_AppendTweenMoveSceneComponentBy::LoopType' has a wrong offset!");
static_assert(offsetof(TweenVectorStandardFactory_BP_AppendTweenMoveSceneComponentBy, Delay) == 0x00002C, "Member 'TweenVectorStandardFactory_BP_AppendTweenMoveSceneComponentBy::Delay' has a wrong offset!");
static_assert(offsetof(TweenVectorStandardFactory_BP_AppendTweenMoveSceneComponentBy, TimeScale) == 0x000030, "Member 'TweenVectorStandardFactory_BP_AppendTweenMoveSceneComponentBy::TimeScale' has a wrong offset!");
static_assert(offsetof(TweenVectorStandardFactory_BP_AppendTweenMoveSceneComponentBy, TweenWhileGameIsPaused) == 0x000034, "Member 'TweenVectorStandardFactory_BP_AppendTweenMoveSceneComponentBy::TweenWhileGameIsPaused' has a wrong offset!");
static_assert(offsetof(TweenVectorStandardFactory_BP_AppendTweenMoveSceneComponentBy, SequenceIndex) == 0x000038, "Member 'TweenVectorStandardFactory_BP_AppendTweenMoveSceneComponentBy::SequenceIndex' has a wrong offset!");
static_assert(offsetof(TweenVectorStandardFactory_BP_AppendTweenMoveSceneComponentBy, ReturnValue) == 0x000040, "Member 'TweenVectorStandardFactory_BP_AppendTweenMoveSceneComponentBy::ReturnValue' has a wrong offset!");

// Function TweenMaker.TweenVectorStandardFactory.BP_AppendTweenMoveSceneComponentTo
// 0x0048 (0x0048 - 0x0000)
struct TweenVectorStandardFactory_BP_AppendTweenMoveSceneComponentTo final
{
public:
	class UTweenContainer*                        TweenContainer;                                    // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USceneComponent*                        TweenTarget;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, InstancedReference, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                To;                                                // 0x0010(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Duration;                                          // 0x001C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETweenEaseType                                EaseType;                                          // 0x0020(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETweenSpace                                   TweenSpace;                                        // 0x0021(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          DeleteTweenOnHit;                                  // 0x0022(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          DeleteTweenOnOverlap;                              // 0x0023(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         NumLoops;                                          // 0x0024(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETweenLoopType                                LoopType;                                          // 0x0028(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_29[0x3];                                       // 0x0029(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Delay;                                             // 0x002C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TimeScale;                                         // 0x0030(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          TweenWhileGameIsPaused;                            // 0x0034(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_35[0x3];                                       // 0x0035(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         SequenceIndex;                                     // 0x0038(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_3C[0x4];                                       // 0x003C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UTweenVector*                           ReturnValue;                                       // 0x0040(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TweenVectorStandardFactory_BP_AppendTweenMoveSceneComponentTo) == 0x000008, "Wrong alignment on TweenVectorStandardFactory_BP_AppendTweenMoveSceneComponentTo");
static_assert(sizeof(TweenVectorStandardFactory_BP_AppendTweenMoveSceneComponentTo) == 0x000048, "Wrong size on TweenVectorStandardFactory_BP_AppendTweenMoveSceneComponentTo");
static_assert(offsetof(TweenVectorStandardFactory_BP_AppendTweenMoveSceneComponentTo, TweenContainer) == 0x000000, "Member 'TweenVectorStandardFactory_BP_AppendTweenMoveSceneComponentTo::TweenContainer' has a wrong offset!");
static_assert(offsetof(TweenVectorStandardFactory_BP_AppendTweenMoveSceneComponentTo, TweenTarget) == 0x000008, "Member 'TweenVectorStandardFactory_BP_AppendTweenMoveSceneComponentTo::TweenTarget' has a wrong offset!");
static_assert(offsetof(TweenVectorStandardFactory_BP_AppendTweenMoveSceneComponentTo, To) == 0x000010, "Member 'TweenVectorStandardFactory_BP_AppendTweenMoveSceneComponentTo::To' has a wrong offset!");
static_assert(offsetof(TweenVectorStandardFactory_BP_AppendTweenMoveSceneComponentTo, Duration) == 0x00001C, "Member 'TweenVectorStandardFactory_BP_AppendTweenMoveSceneComponentTo::Duration' has a wrong offset!");
static_assert(offsetof(TweenVectorStandardFactory_BP_AppendTweenMoveSceneComponentTo, EaseType) == 0x000020, "Member 'TweenVectorStandardFactory_BP_AppendTweenMoveSceneComponentTo::EaseType' has a wrong offset!");
static_assert(offsetof(TweenVectorStandardFactory_BP_AppendTweenMoveSceneComponentTo, TweenSpace) == 0x000021, "Member 'TweenVectorStandardFactory_BP_AppendTweenMoveSceneComponentTo::TweenSpace' has a wrong offset!");
static_assert(offsetof(TweenVectorStandardFactory_BP_AppendTweenMoveSceneComponentTo, DeleteTweenOnHit) == 0x000022, "Member 'TweenVectorStandardFactory_BP_AppendTweenMoveSceneComponentTo::DeleteTweenOnHit' has a wrong offset!");
static_assert(offsetof(TweenVectorStandardFactory_BP_AppendTweenMoveSceneComponentTo, DeleteTweenOnOverlap) == 0x000023, "Member 'TweenVectorStandardFactory_BP_AppendTweenMoveSceneComponentTo::DeleteTweenOnOverlap' has a wrong offset!");
static_assert(offsetof(TweenVectorStandardFactory_BP_AppendTweenMoveSceneComponentTo, NumLoops) == 0x000024, "Member 'TweenVectorStandardFactory_BP_AppendTweenMoveSceneComponentTo::NumLoops' has a wrong offset!");
static_assert(offsetof(TweenVectorStandardFactory_BP_AppendTweenMoveSceneComponentTo, LoopType) == 0x000028, "Member 'TweenVectorStandardFactory_BP_AppendTweenMoveSceneComponentTo::LoopType' has a wrong offset!");
static_assert(offsetof(TweenVectorStandardFactory_BP_AppendTweenMoveSceneComponentTo, Delay) == 0x00002C, "Member 'TweenVectorStandardFactory_BP_AppendTweenMoveSceneComponentTo::Delay' has a wrong offset!");
static_assert(offsetof(TweenVectorStandardFactory_BP_AppendTweenMoveSceneComponentTo, TimeScale) == 0x000030, "Member 'TweenVectorStandardFactory_BP_AppendTweenMoveSceneComponentTo::TimeScale' has a wrong offset!");
static_assert(offsetof(TweenVectorStandardFactory_BP_AppendTweenMoveSceneComponentTo, TweenWhileGameIsPaused) == 0x000034, "Member 'TweenVectorStandardFactory_BP_AppendTweenMoveSceneComponentTo::TweenWhileGameIsPaused' has a wrong offset!");
static_assert(offsetof(TweenVectorStandardFactory_BP_AppendTweenMoveSceneComponentTo, SequenceIndex) == 0x000038, "Member 'TweenVectorStandardFactory_BP_AppendTweenMoveSceneComponentTo::SequenceIndex' has a wrong offset!");
static_assert(offsetof(TweenVectorStandardFactory_BP_AppendTweenMoveSceneComponentTo, ReturnValue) == 0x000040, "Member 'TweenVectorStandardFactory_BP_AppendTweenMoveSceneComponentTo::ReturnValue' has a wrong offset!");

// Function TweenMaker.TweenVectorStandardFactory.BP_AppendTweenScaleActorBy
// 0x0048 (0x0048 - 0x0000)
struct TweenVectorStandardFactory_BP_AppendTweenScaleActorBy final
{
public:
	class UTweenContainer*                        TweenContainer;                                    // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 TweenTarget;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                bY;                                                // 0x0010(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Duration;                                          // 0x001C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETweenEaseType                                EaseType;                                          // 0x0020(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          DeleteTweenOnHit;                                  // 0x0021(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          DeleteTweenOnOverlap;                              // 0x0022(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_23[0x1];                                       // 0x0023(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         NumLoops;                                          // 0x0024(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETweenLoopType                                LoopType;                                          // 0x0028(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_29[0x3];                                       // 0x0029(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Delay;                                             // 0x002C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TimeScale;                                         // 0x0030(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          TweenWhileGameIsPaused;                            // 0x0034(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_35[0x3];                                       // 0x0035(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         SequenceIndex;                                     // 0x0038(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_3C[0x4];                                       // 0x003C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UTweenVector*                           ReturnValue;                                       // 0x0040(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TweenVectorStandardFactory_BP_AppendTweenScaleActorBy) == 0x000008, "Wrong alignment on TweenVectorStandardFactory_BP_AppendTweenScaleActorBy");
static_assert(sizeof(TweenVectorStandardFactory_BP_AppendTweenScaleActorBy) == 0x000048, "Wrong size on TweenVectorStandardFactory_BP_AppendTweenScaleActorBy");
static_assert(offsetof(TweenVectorStandardFactory_BP_AppendTweenScaleActorBy, TweenContainer) == 0x000000, "Member 'TweenVectorStandardFactory_BP_AppendTweenScaleActorBy::TweenContainer' has a wrong offset!");
static_assert(offsetof(TweenVectorStandardFactory_BP_AppendTweenScaleActorBy, TweenTarget) == 0x000008, "Member 'TweenVectorStandardFactory_BP_AppendTweenScaleActorBy::TweenTarget' has a wrong offset!");
static_assert(offsetof(TweenVectorStandardFactory_BP_AppendTweenScaleActorBy, bY) == 0x000010, "Member 'TweenVectorStandardFactory_BP_AppendTweenScaleActorBy::bY' has a wrong offset!");
static_assert(offsetof(TweenVectorStandardFactory_BP_AppendTweenScaleActorBy, Duration) == 0x00001C, "Member 'TweenVectorStandardFactory_BP_AppendTweenScaleActorBy::Duration' has a wrong offset!");
static_assert(offsetof(TweenVectorStandardFactory_BP_AppendTweenScaleActorBy, EaseType) == 0x000020, "Member 'TweenVectorStandardFactory_BP_AppendTweenScaleActorBy::EaseType' has a wrong offset!");
static_assert(offsetof(TweenVectorStandardFactory_BP_AppendTweenScaleActorBy, DeleteTweenOnHit) == 0x000021, "Member 'TweenVectorStandardFactory_BP_AppendTweenScaleActorBy::DeleteTweenOnHit' has a wrong offset!");
static_assert(offsetof(TweenVectorStandardFactory_BP_AppendTweenScaleActorBy, DeleteTweenOnOverlap) == 0x000022, "Member 'TweenVectorStandardFactory_BP_AppendTweenScaleActorBy::DeleteTweenOnOverlap' has a wrong offset!");
static_assert(offsetof(TweenVectorStandardFactory_BP_AppendTweenScaleActorBy, NumLoops) == 0x000024, "Member 'TweenVectorStandardFactory_BP_AppendTweenScaleActorBy::NumLoops' has a wrong offset!");
static_assert(offsetof(TweenVectorStandardFactory_BP_AppendTweenScaleActorBy, LoopType) == 0x000028, "Member 'TweenVectorStandardFactory_BP_AppendTweenScaleActorBy::LoopType' has a wrong offset!");
static_assert(offsetof(TweenVectorStandardFactory_BP_AppendTweenScaleActorBy, Delay) == 0x00002C, "Member 'TweenVectorStandardFactory_BP_AppendTweenScaleActorBy::Delay' has a wrong offset!");
static_assert(offsetof(TweenVectorStandardFactory_BP_AppendTweenScaleActorBy, TimeScale) == 0x000030, "Member 'TweenVectorStandardFactory_BP_AppendTweenScaleActorBy::TimeScale' has a wrong offset!");
static_assert(offsetof(TweenVectorStandardFactory_BP_AppendTweenScaleActorBy, TweenWhileGameIsPaused) == 0x000034, "Member 'TweenVectorStandardFactory_BP_AppendTweenScaleActorBy::TweenWhileGameIsPaused' has a wrong offset!");
static_assert(offsetof(TweenVectorStandardFactory_BP_AppendTweenScaleActorBy, SequenceIndex) == 0x000038, "Member 'TweenVectorStandardFactory_BP_AppendTweenScaleActorBy::SequenceIndex' has a wrong offset!");
static_assert(offsetof(TweenVectorStandardFactory_BP_AppendTweenScaleActorBy, ReturnValue) == 0x000040, "Member 'TweenVectorStandardFactory_BP_AppendTweenScaleActorBy::ReturnValue' has a wrong offset!");

// Function TweenMaker.TweenVectorStandardFactory.BP_AppendTweenScaleActorTo
// 0x0048 (0x0048 - 0x0000)
struct TweenVectorStandardFactory_BP_AppendTweenScaleActorTo final
{
public:
	class UTweenContainer*                        TweenContainer;                                    // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 TweenTarget;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                To;                                                // 0x0010(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Duration;                                          // 0x001C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETweenEaseType                                EaseType;                                          // 0x0020(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETweenSpace                                   TweenSpace;                                        // 0x0021(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          DeleteTweenOnHit;                                  // 0x0022(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          DeleteTweenOnOverlap;                              // 0x0023(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         NumLoops;                                          // 0x0024(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETweenLoopType                                LoopType;                                          // 0x0028(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_29[0x3];                                       // 0x0029(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Delay;                                             // 0x002C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TimeScale;                                         // 0x0030(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          TweenWhileGameIsPaused;                            // 0x0034(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_35[0x3];                                       // 0x0035(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         SequenceIndex;                                     // 0x0038(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_3C[0x4];                                       // 0x003C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UTweenVector*                           ReturnValue;                                       // 0x0040(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TweenVectorStandardFactory_BP_AppendTweenScaleActorTo) == 0x000008, "Wrong alignment on TweenVectorStandardFactory_BP_AppendTweenScaleActorTo");
static_assert(sizeof(TweenVectorStandardFactory_BP_AppendTweenScaleActorTo) == 0x000048, "Wrong size on TweenVectorStandardFactory_BP_AppendTweenScaleActorTo");
static_assert(offsetof(TweenVectorStandardFactory_BP_AppendTweenScaleActorTo, TweenContainer) == 0x000000, "Member 'TweenVectorStandardFactory_BP_AppendTweenScaleActorTo::TweenContainer' has a wrong offset!");
static_assert(offsetof(TweenVectorStandardFactory_BP_AppendTweenScaleActorTo, TweenTarget) == 0x000008, "Member 'TweenVectorStandardFactory_BP_AppendTweenScaleActorTo::TweenTarget' has a wrong offset!");
static_assert(offsetof(TweenVectorStandardFactory_BP_AppendTweenScaleActorTo, To) == 0x000010, "Member 'TweenVectorStandardFactory_BP_AppendTweenScaleActorTo::To' has a wrong offset!");
static_assert(offsetof(TweenVectorStandardFactory_BP_AppendTweenScaleActorTo, Duration) == 0x00001C, "Member 'TweenVectorStandardFactory_BP_AppendTweenScaleActorTo::Duration' has a wrong offset!");
static_assert(offsetof(TweenVectorStandardFactory_BP_AppendTweenScaleActorTo, EaseType) == 0x000020, "Member 'TweenVectorStandardFactory_BP_AppendTweenScaleActorTo::EaseType' has a wrong offset!");
static_assert(offsetof(TweenVectorStandardFactory_BP_AppendTweenScaleActorTo, TweenSpace) == 0x000021, "Member 'TweenVectorStandardFactory_BP_AppendTweenScaleActorTo::TweenSpace' has a wrong offset!");
static_assert(offsetof(TweenVectorStandardFactory_BP_AppendTweenScaleActorTo, DeleteTweenOnHit) == 0x000022, "Member 'TweenVectorStandardFactory_BP_AppendTweenScaleActorTo::DeleteTweenOnHit' has a wrong offset!");
static_assert(offsetof(TweenVectorStandardFactory_BP_AppendTweenScaleActorTo, DeleteTweenOnOverlap) == 0x000023, "Member 'TweenVectorStandardFactory_BP_AppendTweenScaleActorTo::DeleteTweenOnOverlap' has a wrong offset!");
static_assert(offsetof(TweenVectorStandardFactory_BP_AppendTweenScaleActorTo, NumLoops) == 0x000024, "Member 'TweenVectorStandardFactory_BP_AppendTweenScaleActorTo::NumLoops' has a wrong offset!");
static_assert(offsetof(TweenVectorStandardFactory_BP_AppendTweenScaleActorTo, LoopType) == 0x000028, "Member 'TweenVectorStandardFactory_BP_AppendTweenScaleActorTo::LoopType' has a wrong offset!");
static_assert(offsetof(TweenVectorStandardFactory_BP_AppendTweenScaleActorTo, Delay) == 0x00002C, "Member 'TweenVectorStandardFactory_BP_AppendTweenScaleActorTo::Delay' has a wrong offset!");
static_assert(offsetof(TweenVectorStandardFactory_BP_AppendTweenScaleActorTo, TimeScale) == 0x000030, "Member 'TweenVectorStandardFactory_BP_AppendTweenScaleActorTo::TimeScale' has a wrong offset!");
static_assert(offsetof(TweenVectorStandardFactory_BP_AppendTweenScaleActorTo, TweenWhileGameIsPaused) == 0x000034, "Member 'TweenVectorStandardFactory_BP_AppendTweenScaleActorTo::TweenWhileGameIsPaused' has a wrong offset!");
static_assert(offsetof(TweenVectorStandardFactory_BP_AppendTweenScaleActorTo, SequenceIndex) == 0x000038, "Member 'TweenVectorStandardFactory_BP_AppendTweenScaleActorTo::SequenceIndex' has a wrong offset!");
static_assert(offsetof(TweenVectorStandardFactory_BP_AppendTweenScaleActorTo, ReturnValue) == 0x000040, "Member 'TweenVectorStandardFactory_BP_AppendTweenScaleActorTo::ReturnValue' has a wrong offset!");

// Function TweenMaker.TweenVectorStandardFactory.BP_AppendTweenScaleSceneComponentBy
// 0x0048 (0x0048 - 0x0000)
struct TweenVectorStandardFactory_BP_AppendTweenScaleSceneComponentBy final
{
public:
	class UTweenContainer*                        TweenContainer;                                    // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USceneComponent*                        TweenTarget;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, InstancedReference, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                bY;                                                // 0x0010(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Duration;                                          // 0x001C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETweenEaseType                                EaseType;                                          // 0x0020(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          DeleteTweenOnHit;                                  // 0x0021(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          DeleteTweenOnOverlap;                              // 0x0022(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_23[0x1];                                       // 0x0023(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         NumLoops;                                          // 0x0024(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETweenLoopType                                LoopType;                                          // 0x0028(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_29[0x3];                                       // 0x0029(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Delay;                                             // 0x002C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TimeScale;                                         // 0x0030(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          TweenWhileGameIsPaused;                            // 0x0034(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_35[0x3];                                       // 0x0035(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         SequenceIndex;                                     // 0x0038(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_3C[0x4];                                       // 0x003C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UTweenVector*                           ReturnValue;                                       // 0x0040(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TweenVectorStandardFactory_BP_AppendTweenScaleSceneComponentBy) == 0x000008, "Wrong alignment on TweenVectorStandardFactory_BP_AppendTweenScaleSceneComponentBy");
static_assert(sizeof(TweenVectorStandardFactory_BP_AppendTweenScaleSceneComponentBy) == 0x000048, "Wrong size on TweenVectorStandardFactory_BP_AppendTweenScaleSceneComponentBy");
static_assert(offsetof(TweenVectorStandardFactory_BP_AppendTweenScaleSceneComponentBy, TweenContainer) == 0x000000, "Member 'TweenVectorStandardFactory_BP_AppendTweenScaleSceneComponentBy::TweenContainer' has a wrong offset!");
static_assert(offsetof(TweenVectorStandardFactory_BP_AppendTweenScaleSceneComponentBy, TweenTarget) == 0x000008, "Member 'TweenVectorStandardFactory_BP_AppendTweenScaleSceneComponentBy::TweenTarget' has a wrong offset!");
static_assert(offsetof(TweenVectorStandardFactory_BP_AppendTweenScaleSceneComponentBy, bY) == 0x000010, "Member 'TweenVectorStandardFactory_BP_AppendTweenScaleSceneComponentBy::bY' has a wrong offset!");
static_assert(offsetof(TweenVectorStandardFactory_BP_AppendTweenScaleSceneComponentBy, Duration) == 0x00001C, "Member 'TweenVectorStandardFactory_BP_AppendTweenScaleSceneComponentBy::Duration' has a wrong offset!");
static_assert(offsetof(TweenVectorStandardFactory_BP_AppendTweenScaleSceneComponentBy, EaseType) == 0x000020, "Member 'TweenVectorStandardFactory_BP_AppendTweenScaleSceneComponentBy::EaseType' has a wrong offset!");
static_assert(offsetof(TweenVectorStandardFactory_BP_AppendTweenScaleSceneComponentBy, DeleteTweenOnHit) == 0x000021, "Member 'TweenVectorStandardFactory_BP_AppendTweenScaleSceneComponentBy::DeleteTweenOnHit' has a wrong offset!");
static_assert(offsetof(TweenVectorStandardFactory_BP_AppendTweenScaleSceneComponentBy, DeleteTweenOnOverlap) == 0x000022, "Member 'TweenVectorStandardFactory_BP_AppendTweenScaleSceneComponentBy::DeleteTweenOnOverlap' has a wrong offset!");
static_assert(offsetof(TweenVectorStandardFactory_BP_AppendTweenScaleSceneComponentBy, NumLoops) == 0x000024, "Member 'TweenVectorStandardFactory_BP_AppendTweenScaleSceneComponentBy::NumLoops' has a wrong offset!");
static_assert(offsetof(TweenVectorStandardFactory_BP_AppendTweenScaleSceneComponentBy, LoopType) == 0x000028, "Member 'TweenVectorStandardFactory_BP_AppendTweenScaleSceneComponentBy::LoopType' has a wrong offset!");
static_assert(offsetof(TweenVectorStandardFactory_BP_AppendTweenScaleSceneComponentBy, Delay) == 0x00002C, "Member 'TweenVectorStandardFactory_BP_AppendTweenScaleSceneComponentBy::Delay' has a wrong offset!");
static_assert(offsetof(TweenVectorStandardFactory_BP_AppendTweenScaleSceneComponentBy, TimeScale) == 0x000030, "Member 'TweenVectorStandardFactory_BP_AppendTweenScaleSceneComponentBy::TimeScale' has a wrong offset!");
static_assert(offsetof(TweenVectorStandardFactory_BP_AppendTweenScaleSceneComponentBy, TweenWhileGameIsPaused) == 0x000034, "Member 'TweenVectorStandardFactory_BP_AppendTweenScaleSceneComponentBy::TweenWhileGameIsPaused' has a wrong offset!");
static_assert(offsetof(TweenVectorStandardFactory_BP_AppendTweenScaleSceneComponentBy, SequenceIndex) == 0x000038, "Member 'TweenVectorStandardFactory_BP_AppendTweenScaleSceneComponentBy::SequenceIndex' has a wrong offset!");
static_assert(offsetof(TweenVectorStandardFactory_BP_AppendTweenScaleSceneComponentBy, ReturnValue) == 0x000040, "Member 'TweenVectorStandardFactory_BP_AppendTweenScaleSceneComponentBy::ReturnValue' has a wrong offset!");

// Function TweenMaker.TweenVectorStandardFactory.BP_AppendTweenScaleSceneComponentTo
// 0x0048 (0x0048 - 0x0000)
struct TweenVectorStandardFactory_BP_AppendTweenScaleSceneComponentTo final
{
public:
	class UTweenContainer*                        TweenContainer;                                    // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USceneComponent*                        TweenTarget;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, InstancedReference, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                To;                                                // 0x0010(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Duration;                                          // 0x001C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETweenEaseType                                EaseType;                                          // 0x0020(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETweenSpace                                   TweenSpace;                                        // 0x0021(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          DeleteTweenOnHit;                                  // 0x0022(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          DeleteTweenOnOverlap;                              // 0x0023(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         NumLoops;                                          // 0x0024(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETweenLoopType                                LoopType;                                          // 0x0028(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_29[0x3];                                       // 0x0029(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Delay;                                             // 0x002C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TimeScale;                                         // 0x0030(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          TweenWhileGameIsPaused;                            // 0x0034(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_35[0x3];                                       // 0x0035(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         SequenceIndex;                                     // 0x0038(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_3C[0x4];                                       // 0x003C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UTweenVector*                           ReturnValue;                                       // 0x0040(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TweenVectorStandardFactory_BP_AppendTweenScaleSceneComponentTo) == 0x000008, "Wrong alignment on TweenVectorStandardFactory_BP_AppendTweenScaleSceneComponentTo");
static_assert(sizeof(TweenVectorStandardFactory_BP_AppendTweenScaleSceneComponentTo) == 0x000048, "Wrong size on TweenVectorStandardFactory_BP_AppendTweenScaleSceneComponentTo");
static_assert(offsetof(TweenVectorStandardFactory_BP_AppendTweenScaleSceneComponentTo, TweenContainer) == 0x000000, "Member 'TweenVectorStandardFactory_BP_AppendTweenScaleSceneComponentTo::TweenContainer' has a wrong offset!");
static_assert(offsetof(TweenVectorStandardFactory_BP_AppendTweenScaleSceneComponentTo, TweenTarget) == 0x000008, "Member 'TweenVectorStandardFactory_BP_AppendTweenScaleSceneComponentTo::TweenTarget' has a wrong offset!");
static_assert(offsetof(TweenVectorStandardFactory_BP_AppendTweenScaleSceneComponentTo, To) == 0x000010, "Member 'TweenVectorStandardFactory_BP_AppendTweenScaleSceneComponentTo::To' has a wrong offset!");
static_assert(offsetof(TweenVectorStandardFactory_BP_AppendTweenScaleSceneComponentTo, Duration) == 0x00001C, "Member 'TweenVectorStandardFactory_BP_AppendTweenScaleSceneComponentTo::Duration' has a wrong offset!");
static_assert(offsetof(TweenVectorStandardFactory_BP_AppendTweenScaleSceneComponentTo, EaseType) == 0x000020, "Member 'TweenVectorStandardFactory_BP_AppendTweenScaleSceneComponentTo::EaseType' has a wrong offset!");
static_assert(offsetof(TweenVectorStandardFactory_BP_AppendTweenScaleSceneComponentTo, TweenSpace) == 0x000021, "Member 'TweenVectorStandardFactory_BP_AppendTweenScaleSceneComponentTo::TweenSpace' has a wrong offset!");
static_assert(offsetof(TweenVectorStandardFactory_BP_AppendTweenScaleSceneComponentTo, DeleteTweenOnHit) == 0x000022, "Member 'TweenVectorStandardFactory_BP_AppendTweenScaleSceneComponentTo::DeleteTweenOnHit' has a wrong offset!");
static_assert(offsetof(TweenVectorStandardFactory_BP_AppendTweenScaleSceneComponentTo, DeleteTweenOnOverlap) == 0x000023, "Member 'TweenVectorStandardFactory_BP_AppendTweenScaleSceneComponentTo::DeleteTweenOnOverlap' has a wrong offset!");
static_assert(offsetof(TweenVectorStandardFactory_BP_AppendTweenScaleSceneComponentTo, NumLoops) == 0x000024, "Member 'TweenVectorStandardFactory_BP_AppendTweenScaleSceneComponentTo::NumLoops' has a wrong offset!");
static_assert(offsetof(TweenVectorStandardFactory_BP_AppendTweenScaleSceneComponentTo, LoopType) == 0x000028, "Member 'TweenVectorStandardFactory_BP_AppendTweenScaleSceneComponentTo::LoopType' has a wrong offset!");
static_assert(offsetof(TweenVectorStandardFactory_BP_AppendTweenScaleSceneComponentTo, Delay) == 0x00002C, "Member 'TweenVectorStandardFactory_BP_AppendTweenScaleSceneComponentTo::Delay' has a wrong offset!");
static_assert(offsetof(TweenVectorStandardFactory_BP_AppendTweenScaleSceneComponentTo, TimeScale) == 0x000030, "Member 'TweenVectorStandardFactory_BP_AppendTweenScaleSceneComponentTo::TimeScale' has a wrong offset!");
static_assert(offsetof(TweenVectorStandardFactory_BP_AppendTweenScaleSceneComponentTo, TweenWhileGameIsPaused) == 0x000034, "Member 'TweenVectorStandardFactory_BP_AppendTweenScaleSceneComponentTo::TweenWhileGameIsPaused' has a wrong offset!");
static_assert(offsetof(TweenVectorStandardFactory_BP_AppendTweenScaleSceneComponentTo, SequenceIndex) == 0x000038, "Member 'TweenVectorStandardFactory_BP_AppendTweenScaleSceneComponentTo::SequenceIndex' has a wrong offset!");
static_assert(offsetof(TweenVectorStandardFactory_BP_AppendTweenScaleSceneComponentTo, ReturnValue) == 0x000040, "Member 'TweenVectorStandardFactory_BP_AppendTweenScaleSceneComponentTo::ReturnValue' has a wrong offset!");

// Function TweenMaker.TweenVectorStandardFactory.BP_CreateTweenCustomVector
// 0x0058 (0x0058 - 0x0000)
struct TweenVectorStandardFactory_BP_CreateTweenCustomVector final
{
public:
	class UTweenManagerComponent*                 TweenManager;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UObject*                                TweenTarget;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UTweenContainer*                        TweenContainer;                                    // 0x0010(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UTweenVector*                           Tween;                                             // 0x0018(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                From;                                              // 0x0020(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                To;                                                // 0x002C(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Duration;                                          // 0x0038(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETweenEaseType                                EaseType;                                          // 0x003C(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_3D[0x3];                                       // 0x003D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         NumLoops;                                          // 0x0040(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETweenLoopType                                LoopType;                                          // 0x0044(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_45[0x3];                                       // 0x0045(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Delay;                                             // 0x0048(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TimeScale;                                         // 0x004C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          TweenWhileGameIsPaused;                            // 0x0050(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_51[0x3];                                       // 0x0051(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         SequenceIndex;                                     // 0x0054(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TweenVectorStandardFactory_BP_CreateTweenCustomVector) == 0x000008, "Wrong alignment on TweenVectorStandardFactory_BP_CreateTweenCustomVector");
static_assert(sizeof(TweenVectorStandardFactory_BP_CreateTweenCustomVector) == 0x000058, "Wrong size on TweenVectorStandardFactory_BP_CreateTweenCustomVector");
static_assert(offsetof(TweenVectorStandardFactory_BP_CreateTweenCustomVector, TweenManager) == 0x000000, "Member 'TweenVectorStandardFactory_BP_CreateTweenCustomVector::TweenManager' has a wrong offset!");
static_assert(offsetof(TweenVectorStandardFactory_BP_CreateTweenCustomVector, TweenTarget) == 0x000008, "Member 'TweenVectorStandardFactory_BP_CreateTweenCustomVector::TweenTarget' has a wrong offset!");
static_assert(offsetof(TweenVectorStandardFactory_BP_CreateTweenCustomVector, TweenContainer) == 0x000010, "Member 'TweenVectorStandardFactory_BP_CreateTweenCustomVector::TweenContainer' has a wrong offset!");
static_assert(offsetof(TweenVectorStandardFactory_BP_CreateTweenCustomVector, Tween) == 0x000018, "Member 'TweenVectorStandardFactory_BP_CreateTweenCustomVector::Tween' has a wrong offset!");
static_assert(offsetof(TweenVectorStandardFactory_BP_CreateTweenCustomVector, From) == 0x000020, "Member 'TweenVectorStandardFactory_BP_CreateTweenCustomVector::From' has a wrong offset!");
static_assert(offsetof(TweenVectorStandardFactory_BP_CreateTweenCustomVector, To) == 0x00002C, "Member 'TweenVectorStandardFactory_BP_CreateTweenCustomVector::To' has a wrong offset!");
static_assert(offsetof(TweenVectorStandardFactory_BP_CreateTweenCustomVector, Duration) == 0x000038, "Member 'TweenVectorStandardFactory_BP_CreateTweenCustomVector::Duration' has a wrong offset!");
static_assert(offsetof(TweenVectorStandardFactory_BP_CreateTweenCustomVector, EaseType) == 0x00003C, "Member 'TweenVectorStandardFactory_BP_CreateTweenCustomVector::EaseType' has a wrong offset!");
static_assert(offsetof(TweenVectorStandardFactory_BP_CreateTweenCustomVector, NumLoops) == 0x000040, "Member 'TweenVectorStandardFactory_BP_CreateTweenCustomVector::NumLoops' has a wrong offset!");
static_assert(offsetof(TweenVectorStandardFactory_BP_CreateTweenCustomVector, LoopType) == 0x000044, "Member 'TweenVectorStandardFactory_BP_CreateTweenCustomVector::LoopType' has a wrong offset!");
static_assert(offsetof(TweenVectorStandardFactory_BP_CreateTweenCustomVector, Delay) == 0x000048, "Member 'TweenVectorStandardFactory_BP_CreateTweenCustomVector::Delay' has a wrong offset!");
static_assert(offsetof(TweenVectorStandardFactory_BP_CreateTweenCustomVector, TimeScale) == 0x00004C, "Member 'TweenVectorStandardFactory_BP_CreateTweenCustomVector::TimeScale' has a wrong offset!");
static_assert(offsetof(TweenVectorStandardFactory_BP_CreateTweenCustomVector, TweenWhileGameIsPaused) == 0x000050, "Member 'TweenVectorStandardFactory_BP_CreateTweenCustomVector::TweenWhileGameIsPaused' has a wrong offset!");
static_assert(offsetof(TweenVectorStandardFactory_BP_CreateTweenCustomVector, SequenceIndex) == 0x000054, "Member 'TweenVectorStandardFactory_BP_CreateTweenCustomVector::SequenceIndex' has a wrong offset!");

// Function TweenMaker.TweenVectorStandardFactory.BP_CreateTweenMoveActorBy
// 0x0050 (0x0050 - 0x0000)
struct TweenVectorStandardFactory_BP_CreateTweenMoveActorBy final
{
public:
	class UTweenManagerComponent*                 TweenManager;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 TweenTarget;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UTweenContainer*                        TweenContainer;                                    // 0x0010(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UTweenVector*                           Tween;                                             // 0x0018(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                bY;                                                // 0x0020(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Duration;                                          // 0x002C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETweenEaseType                                EaseType;                                          // 0x0030(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          DeleteTweenOnHit;                                  // 0x0031(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          DeleteTweenOnOverlap;                              // 0x0032(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_33[0x1];                                       // 0x0033(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         NumLoops;                                          // 0x0034(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETweenLoopType                                LoopType;                                          // 0x0038(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_39[0x3];                                       // 0x0039(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Delay;                                             // 0x003C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TimeScale;                                         // 0x0040(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          TweenWhileGameIsPaused;                            // 0x0044(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_45[0x3];                                       // 0x0045(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         SequenceIndex;                                     // 0x0048(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4C[0x4];                                       // 0x004C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TweenVectorStandardFactory_BP_CreateTweenMoveActorBy) == 0x000008, "Wrong alignment on TweenVectorStandardFactory_BP_CreateTweenMoveActorBy");
static_assert(sizeof(TweenVectorStandardFactory_BP_CreateTweenMoveActorBy) == 0x000050, "Wrong size on TweenVectorStandardFactory_BP_CreateTweenMoveActorBy");
static_assert(offsetof(TweenVectorStandardFactory_BP_CreateTweenMoveActorBy, TweenManager) == 0x000000, "Member 'TweenVectorStandardFactory_BP_CreateTweenMoveActorBy::TweenManager' has a wrong offset!");
static_assert(offsetof(TweenVectorStandardFactory_BP_CreateTweenMoveActorBy, TweenTarget) == 0x000008, "Member 'TweenVectorStandardFactory_BP_CreateTweenMoveActorBy::TweenTarget' has a wrong offset!");
static_assert(offsetof(TweenVectorStandardFactory_BP_CreateTweenMoveActorBy, TweenContainer) == 0x000010, "Member 'TweenVectorStandardFactory_BP_CreateTweenMoveActorBy::TweenContainer' has a wrong offset!");
static_assert(offsetof(TweenVectorStandardFactory_BP_CreateTweenMoveActorBy, Tween) == 0x000018, "Member 'TweenVectorStandardFactory_BP_CreateTweenMoveActorBy::Tween' has a wrong offset!");
static_assert(offsetof(TweenVectorStandardFactory_BP_CreateTweenMoveActorBy, bY) == 0x000020, "Member 'TweenVectorStandardFactory_BP_CreateTweenMoveActorBy::bY' has a wrong offset!");
static_assert(offsetof(TweenVectorStandardFactory_BP_CreateTweenMoveActorBy, Duration) == 0x00002C, "Member 'TweenVectorStandardFactory_BP_CreateTweenMoveActorBy::Duration' has a wrong offset!");
static_assert(offsetof(TweenVectorStandardFactory_BP_CreateTweenMoveActorBy, EaseType) == 0x000030, "Member 'TweenVectorStandardFactory_BP_CreateTweenMoveActorBy::EaseType' has a wrong offset!");
static_assert(offsetof(TweenVectorStandardFactory_BP_CreateTweenMoveActorBy, DeleteTweenOnHit) == 0x000031, "Member 'TweenVectorStandardFactory_BP_CreateTweenMoveActorBy::DeleteTweenOnHit' has a wrong offset!");
static_assert(offsetof(TweenVectorStandardFactory_BP_CreateTweenMoveActorBy, DeleteTweenOnOverlap) == 0x000032, "Member 'TweenVectorStandardFactory_BP_CreateTweenMoveActorBy::DeleteTweenOnOverlap' has a wrong offset!");
static_assert(offsetof(TweenVectorStandardFactory_BP_CreateTweenMoveActorBy, NumLoops) == 0x000034, "Member 'TweenVectorStandardFactory_BP_CreateTweenMoveActorBy::NumLoops' has a wrong offset!");
static_assert(offsetof(TweenVectorStandardFactory_BP_CreateTweenMoveActorBy, LoopType) == 0x000038, "Member 'TweenVectorStandardFactory_BP_CreateTweenMoveActorBy::LoopType' has a wrong offset!");
static_assert(offsetof(TweenVectorStandardFactory_BP_CreateTweenMoveActorBy, Delay) == 0x00003C, "Member 'TweenVectorStandardFactory_BP_CreateTweenMoveActorBy::Delay' has a wrong offset!");
static_assert(offsetof(TweenVectorStandardFactory_BP_CreateTweenMoveActorBy, TimeScale) == 0x000040, "Member 'TweenVectorStandardFactory_BP_CreateTweenMoveActorBy::TimeScale' has a wrong offset!");
static_assert(offsetof(TweenVectorStandardFactory_BP_CreateTweenMoveActorBy, TweenWhileGameIsPaused) == 0x000044, "Member 'TweenVectorStandardFactory_BP_CreateTweenMoveActorBy::TweenWhileGameIsPaused' has a wrong offset!");
static_assert(offsetof(TweenVectorStandardFactory_BP_CreateTweenMoveActorBy, SequenceIndex) == 0x000048, "Member 'TweenVectorStandardFactory_BP_CreateTweenMoveActorBy::SequenceIndex' has a wrong offset!");

// Function TweenMaker.TweenVectorStandardFactory.BP_CreateTweenMoveActorTo
// 0x0050 (0x0050 - 0x0000)
struct TweenVectorStandardFactory_BP_CreateTweenMoveActorTo final
{
public:
	class UTweenManagerComponent*                 TweenManager;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 TweenTarget;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UTweenContainer*                        TweenContainer;                                    // 0x0010(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UTweenVector*                           Tween;                                             // 0x0018(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                To;                                                // 0x0020(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Duration;                                          // 0x002C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETweenEaseType                                EaseType;                                          // 0x0030(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETweenSpace                                   TweenSpace;                                        // 0x0031(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          DeleteTweenOnHit;                                  // 0x0032(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          DeleteTweenOnOverlap;                              // 0x0033(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         NumLoops;                                          // 0x0034(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETweenLoopType                                LoopType;                                          // 0x0038(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_39[0x3];                                       // 0x0039(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Delay;                                             // 0x003C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TimeScale;                                         // 0x0040(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          TweenWhileGameIsPaused;                            // 0x0044(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_45[0x3];                                       // 0x0045(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         SequenceIndex;                                     // 0x0048(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4C[0x4];                                       // 0x004C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TweenVectorStandardFactory_BP_CreateTweenMoveActorTo) == 0x000008, "Wrong alignment on TweenVectorStandardFactory_BP_CreateTweenMoveActorTo");
static_assert(sizeof(TweenVectorStandardFactory_BP_CreateTweenMoveActorTo) == 0x000050, "Wrong size on TweenVectorStandardFactory_BP_CreateTweenMoveActorTo");
static_assert(offsetof(TweenVectorStandardFactory_BP_CreateTweenMoveActorTo, TweenManager) == 0x000000, "Member 'TweenVectorStandardFactory_BP_CreateTweenMoveActorTo::TweenManager' has a wrong offset!");
static_assert(offsetof(TweenVectorStandardFactory_BP_CreateTweenMoveActorTo, TweenTarget) == 0x000008, "Member 'TweenVectorStandardFactory_BP_CreateTweenMoveActorTo::TweenTarget' has a wrong offset!");
static_assert(offsetof(TweenVectorStandardFactory_BP_CreateTweenMoveActorTo, TweenContainer) == 0x000010, "Member 'TweenVectorStandardFactory_BP_CreateTweenMoveActorTo::TweenContainer' has a wrong offset!");
static_assert(offsetof(TweenVectorStandardFactory_BP_CreateTweenMoveActorTo, Tween) == 0x000018, "Member 'TweenVectorStandardFactory_BP_CreateTweenMoveActorTo::Tween' has a wrong offset!");
static_assert(offsetof(TweenVectorStandardFactory_BP_CreateTweenMoveActorTo, To) == 0x000020, "Member 'TweenVectorStandardFactory_BP_CreateTweenMoveActorTo::To' has a wrong offset!");
static_assert(offsetof(TweenVectorStandardFactory_BP_CreateTweenMoveActorTo, Duration) == 0x00002C, "Member 'TweenVectorStandardFactory_BP_CreateTweenMoveActorTo::Duration' has a wrong offset!");
static_assert(offsetof(TweenVectorStandardFactory_BP_CreateTweenMoveActorTo, EaseType) == 0x000030, "Member 'TweenVectorStandardFactory_BP_CreateTweenMoveActorTo::EaseType' has a wrong offset!");
static_assert(offsetof(TweenVectorStandardFactory_BP_CreateTweenMoveActorTo, TweenSpace) == 0x000031, "Member 'TweenVectorStandardFactory_BP_CreateTweenMoveActorTo::TweenSpace' has a wrong offset!");
static_assert(offsetof(TweenVectorStandardFactory_BP_CreateTweenMoveActorTo, DeleteTweenOnHit) == 0x000032, "Member 'TweenVectorStandardFactory_BP_CreateTweenMoveActorTo::DeleteTweenOnHit' has a wrong offset!");
static_assert(offsetof(TweenVectorStandardFactory_BP_CreateTweenMoveActorTo, DeleteTweenOnOverlap) == 0x000033, "Member 'TweenVectorStandardFactory_BP_CreateTweenMoveActorTo::DeleteTweenOnOverlap' has a wrong offset!");
static_assert(offsetof(TweenVectorStandardFactory_BP_CreateTweenMoveActorTo, NumLoops) == 0x000034, "Member 'TweenVectorStandardFactory_BP_CreateTweenMoveActorTo::NumLoops' has a wrong offset!");
static_assert(offsetof(TweenVectorStandardFactory_BP_CreateTweenMoveActorTo, LoopType) == 0x000038, "Member 'TweenVectorStandardFactory_BP_CreateTweenMoveActorTo::LoopType' has a wrong offset!");
static_assert(offsetof(TweenVectorStandardFactory_BP_CreateTweenMoveActorTo, Delay) == 0x00003C, "Member 'TweenVectorStandardFactory_BP_CreateTweenMoveActorTo::Delay' has a wrong offset!");
static_assert(offsetof(TweenVectorStandardFactory_BP_CreateTweenMoveActorTo, TimeScale) == 0x000040, "Member 'TweenVectorStandardFactory_BP_CreateTweenMoveActorTo::TimeScale' has a wrong offset!");
static_assert(offsetof(TweenVectorStandardFactory_BP_CreateTweenMoveActorTo, TweenWhileGameIsPaused) == 0x000044, "Member 'TweenVectorStandardFactory_BP_CreateTweenMoveActorTo::TweenWhileGameIsPaused' has a wrong offset!");
static_assert(offsetof(TweenVectorStandardFactory_BP_CreateTweenMoveActorTo, SequenceIndex) == 0x000048, "Member 'TweenVectorStandardFactory_BP_CreateTweenMoveActorTo::SequenceIndex' has a wrong offset!");

// Function TweenMaker.TweenVectorStandardFactory.BP_CreateTweenMoveSceneComponentBy
// 0x0050 (0x0050 - 0x0000)
struct TweenVectorStandardFactory_BP_CreateTweenMoveSceneComponentBy final
{
public:
	class UTweenManagerComponent*                 TweenManager;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USceneComponent*                        TweenTarget;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, InstancedReference, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UTweenContainer*                        TweenContainer;                                    // 0x0010(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UTweenVector*                           Tween;                                             // 0x0018(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                bY;                                                // 0x0020(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Duration;                                          // 0x002C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETweenEaseType                                EaseType;                                          // 0x0030(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          DeleteTweenOnHit;                                  // 0x0031(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          DeleteTweenOnOverlap;                              // 0x0032(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_33[0x1];                                       // 0x0033(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         NumLoops;                                          // 0x0034(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETweenLoopType                                LoopType;                                          // 0x0038(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_39[0x3];                                       // 0x0039(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Delay;                                             // 0x003C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TimeScale;                                         // 0x0040(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          TweenWhileGameIsPaused;                            // 0x0044(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_45[0x3];                                       // 0x0045(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         SequenceIndex;                                     // 0x0048(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4C[0x4];                                       // 0x004C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TweenVectorStandardFactory_BP_CreateTweenMoveSceneComponentBy) == 0x000008, "Wrong alignment on TweenVectorStandardFactory_BP_CreateTweenMoveSceneComponentBy");
static_assert(sizeof(TweenVectorStandardFactory_BP_CreateTweenMoveSceneComponentBy) == 0x000050, "Wrong size on TweenVectorStandardFactory_BP_CreateTweenMoveSceneComponentBy");
static_assert(offsetof(TweenVectorStandardFactory_BP_CreateTweenMoveSceneComponentBy, TweenManager) == 0x000000, "Member 'TweenVectorStandardFactory_BP_CreateTweenMoveSceneComponentBy::TweenManager' has a wrong offset!");
static_assert(offsetof(TweenVectorStandardFactory_BP_CreateTweenMoveSceneComponentBy, TweenTarget) == 0x000008, "Member 'TweenVectorStandardFactory_BP_CreateTweenMoveSceneComponentBy::TweenTarget' has a wrong offset!");
static_assert(offsetof(TweenVectorStandardFactory_BP_CreateTweenMoveSceneComponentBy, TweenContainer) == 0x000010, "Member 'TweenVectorStandardFactory_BP_CreateTweenMoveSceneComponentBy::TweenContainer' has a wrong offset!");
static_assert(offsetof(TweenVectorStandardFactory_BP_CreateTweenMoveSceneComponentBy, Tween) == 0x000018, "Member 'TweenVectorStandardFactory_BP_CreateTweenMoveSceneComponentBy::Tween' has a wrong offset!");
static_assert(offsetof(TweenVectorStandardFactory_BP_CreateTweenMoveSceneComponentBy, bY) == 0x000020, "Member 'TweenVectorStandardFactory_BP_CreateTweenMoveSceneComponentBy::bY' has a wrong offset!");
static_assert(offsetof(TweenVectorStandardFactory_BP_CreateTweenMoveSceneComponentBy, Duration) == 0x00002C, "Member 'TweenVectorStandardFactory_BP_CreateTweenMoveSceneComponentBy::Duration' has a wrong offset!");
static_assert(offsetof(TweenVectorStandardFactory_BP_CreateTweenMoveSceneComponentBy, EaseType) == 0x000030, "Member 'TweenVectorStandardFactory_BP_CreateTweenMoveSceneComponentBy::EaseType' has a wrong offset!");
static_assert(offsetof(TweenVectorStandardFactory_BP_CreateTweenMoveSceneComponentBy, DeleteTweenOnHit) == 0x000031, "Member 'TweenVectorStandardFactory_BP_CreateTweenMoveSceneComponentBy::DeleteTweenOnHit' has a wrong offset!");
static_assert(offsetof(TweenVectorStandardFactory_BP_CreateTweenMoveSceneComponentBy, DeleteTweenOnOverlap) == 0x000032, "Member 'TweenVectorStandardFactory_BP_CreateTweenMoveSceneComponentBy::DeleteTweenOnOverlap' has a wrong offset!");
static_assert(offsetof(TweenVectorStandardFactory_BP_CreateTweenMoveSceneComponentBy, NumLoops) == 0x000034, "Member 'TweenVectorStandardFactory_BP_CreateTweenMoveSceneComponentBy::NumLoops' has a wrong offset!");
static_assert(offsetof(TweenVectorStandardFactory_BP_CreateTweenMoveSceneComponentBy, LoopType) == 0x000038, "Member 'TweenVectorStandardFactory_BP_CreateTweenMoveSceneComponentBy::LoopType' has a wrong offset!");
static_assert(offsetof(TweenVectorStandardFactory_BP_CreateTweenMoveSceneComponentBy, Delay) == 0x00003C, "Member 'TweenVectorStandardFactory_BP_CreateTweenMoveSceneComponentBy::Delay' has a wrong offset!");
static_assert(offsetof(TweenVectorStandardFactory_BP_CreateTweenMoveSceneComponentBy, TimeScale) == 0x000040, "Member 'TweenVectorStandardFactory_BP_CreateTweenMoveSceneComponentBy::TimeScale' has a wrong offset!");
static_assert(offsetof(TweenVectorStandardFactory_BP_CreateTweenMoveSceneComponentBy, TweenWhileGameIsPaused) == 0x000044, "Member 'TweenVectorStandardFactory_BP_CreateTweenMoveSceneComponentBy::TweenWhileGameIsPaused' has a wrong offset!");
static_assert(offsetof(TweenVectorStandardFactory_BP_CreateTweenMoveSceneComponentBy, SequenceIndex) == 0x000048, "Member 'TweenVectorStandardFactory_BP_CreateTweenMoveSceneComponentBy::SequenceIndex' has a wrong offset!");

// Function TweenMaker.TweenVectorStandardFactory.BP_CreateTweenMoveSceneComponentTo
// 0x0050 (0x0050 - 0x0000)
struct TweenVectorStandardFactory_BP_CreateTweenMoveSceneComponentTo final
{
public:
	class UTweenManagerComponent*                 TweenManager;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USceneComponent*                        TweenTarget;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, InstancedReference, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UTweenContainer*                        TweenContainer;                                    // 0x0010(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UTweenVector*                           Tween;                                             // 0x0018(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                To;                                                // 0x0020(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Duration;                                          // 0x002C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETweenEaseType                                EaseType;                                          // 0x0030(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETweenSpace                                   TweenSpace;                                        // 0x0031(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          DeleteTweenOnHit;                                  // 0x0032(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          DeleteTweenOnOverlap;                              // 0x0033(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         NumLoops;                                          // 0x0034(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETweenLoopType                                LoopType;                                          // 0x0038(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_39[0x3];                                       // 0x0039(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Delay;                                             // 0x003C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TimeScale;                                         // 0x0040(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          TweenWhileGameIsPaused;                            // 0x0044(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_45[0x3];                                       // 0x0045(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         SequenceIndex;                                     // 0x0048(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4C[0x4];                                       // 0x004C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TweenVectorStandardFactory_BP_CreateTweenMoveSceneComponentTo) == 0x000008, "Wrong alignment on TweenVectorStandardFactory_BP_CreateTweenMoveSceneComponentTo");
static_assert(sizeof(TweenVectorStandardFactory_BP_CreateTweenMoveSceneComponentTo) == 0x000050, "Wrong size on TweenVectorStandardFactory_BP_CreateTweenMoveSceneComponentTo");
static_assert(offsetof(TweenVectorStandardFactory_BP_CreateTweenMoveSceneComponentTo, TweenManager) == 0x000000, "Member 'TweenVectorStandardFactory_BP_CreateTweenMoveSceneComponentTo::TweenManager' has a wrong offset!");
static_assert(offsetof(TweenVectorStandardFactory_BP_CreateTweenMoveSceneComponentTo, TweenTarget) == 0x000008, "Member 'TweenVectorStandardFactory_BP_CreateTweenMoveSceneComponentTo::TweenTarget' has a wrong offset!");
static_assert(offsetof(TweenVectorStandardFactory_BP_CreateTweenMoveSceneComponentTo, TweenContainer) == 0x000010, "Member 'TweenVectorStandardFactory_BP_CreateTweenMoveSceneComponentTo::TweenContainer' has a wrong offset!");
static_assert(offsetof(TweenVectorStandardFactory_BP_CreateTweenMoveSceneComponentTo, Tween) == 0x000018, "Member 'TweenVectorStandardFactory_BP_CreateTweenMoveSceneComponentTo::Tween' has a wrong offset!");
static_assert(offsetof(TweenVectorStandardFactory_BP_CreateTweenMoveSceneComponentTo, To) == 0x000020, "Member 'TweenVectorStandardFactory_BP_CreateTweenMoveSceneComponentTo::To' has a wrong offset!");
static_assert(offsetof(TweenVectorStandardFactory_BP_CreateTweenMoveSceneComponentTo, Duration) == 0x00002C, "Member 'TweenVectorStandardFactory_BP_CreateTweenMoveSceneComponentTo::Duration' has a wrong offset!");
static_assert(offsetof(TweenVectorStandardFactory_BP_CreateTweenMoveSceneComponentTo, EaseType) == 0x000030, "Member 'TweenVectorStandardFactory_BP_CreateTweenMoveSceneComponentTo::EaseType' has a wrong offset!");
static_assert(offsetof(TweenVectorStandardFactory_BP_CreateTweenMoveSceneComponentTo, TweenSpace) == 0x000031, "Member 'TweenVectorStandardFactory_BP_CreateTweenMoveSceneComponentTo::TweenSpace' has a wrong offset!");
static_assert(offsetof(TweenVectorStandardFactory_BP_CreateTweenMoveSceneComponentTo, DeleteTweenOnHit) == 0x000032, "Member 'TweenVectorStandardFactory_BP_CreateTweenMoveSceneComponentTo::DeleteTweenOnHit' has a wrong offset!");
static_assert(offsetof(TweenVectorStandardFactory_BP_CreateTweenMoveSceneComponentTo, DeleteTweenOnOverlap) == 0x000033, "Member 'TweenVectorStandardFactory_BP_CreateTweenMoveSceneComponentTo::DeleteTweenOnOverlap' has a wrong offset!");
static_assert(offsetof(TweenVectorStandardFactory_BP_CreateTweenMoveSceneComponentTo, NumLoops) == 0x000034, "Member 'TweenVectorStandardFactory_BP_CreateTweenMoveSceneComponentTo::NumLoops' has a wrong offset!");
static_assert(offsetof(TweenVectorStandardFactory_BP_CreateTweenMoveSceneComponentTo, LoopType) == 0x000038, "Member 'TweenVectorStandardFactory_BP_CreateTweenMoveSceneComponentTo::LoopType' has a wrong offset!");
static_assert(offsetof(TweenVectorStandardFactory_BP_CreateTweenMoveSceneComponentTo, Delay) == 0x00003C, "Member 'TweenVectorStandardFactory_BP_CreateTweenMoveSceneComponentTo::Delay' has a wrong offset!");
static_assert(offsetof(TweenVectorStandardFactory_BP_CreateTweenMoveSceneComponentTo, TimeScale) == 0x000040, "Member 'TweenVectorStandardFactory_BP_CreateTweenMoveSceneComponentTo::TimeScale' has a wrong offset!");
static_assert(offsetof(TweenVectorStandardFactory_BP_CreateTweenMoveSceneComponentTo, TweenWhileGameIsPaused) == 0x000044, "Member 'TweenVectorStandardFactory_BP_CreateTweenMoveSceneComponentTo::TweenWhileGameIsPaused' has a wrong offset!");
static_assert(offsetof(TweenVectorStandardFactory_BP_CreateTweenMoveSceneComponentTo, SequenceIndex) == 0x000048, "Member 'TweenVectorStandardFactory_BP_CreateTweenMoveSceneComponentTo::SequenceIndex' has a wrong offset!");

// Function TweenMaker.TweenVectorStandardFactory.BP_CreateTweenScaleActorBy
// 0x0050 (0x0050 - 0x0000)
struct TweenVectorStandardFactory_BP_CreateTweenScaleActorBy final
{
public:
	class UTweenManagerComponent*                 TweenManager;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 TweenTarget;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UTweenContainer*                        TweenContainer;                                    // 0x0010(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UTweenVector*                           Tween;                                             // 0x0018(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                bY;                                                // 0x0020(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Duration;                                          // 0x002C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETweenEaseType                                EaseType;                                          // 0x0030(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          DeleteTweenOnHit;                                  // 0x0031(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          DeleteTweenOnOverlap;                              // 0x0032(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_33[0x1];                                       // 0x0033(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         NumLoops;                                          // 0x0034(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETweenLoopType                                LoopType;                                          // 0x0038(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_39[0x3];                                       // 0x0039(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Delay;                                             // 0x003C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TimeScale;                                         // 0x0040(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          TweenWhileGameIsPaused;                            // 0x0044(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_45[0x3];                                       // 0x0045(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         SequenceIndex;                                     // 0x0048(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4C[0x4];                                       // 0x004C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TweenVectorStandardFactory_BP_CreateTweenScaleActorBy) == 0x000008, "Wrong alignment on TweenVectorStandardFactory_BP_CreateTweenScaleActorBy");
static_assert(sizeof(TweenVectorStandardFactory_BP_CreateTweenScaleActorBy) == 0x000050, "Wrong size on TweenVectorStandardFactory_BP_CreateTweenScaleActorBy");
static_assert(offsetof(TweenVectorStandardFactory_BP_CreateTweenScaleActorBy, TweenManager) == 0x000000, "Member 'TweenVectorStandardFactory_BP_CreateTweenScaleActorBy::TweenManager' has a wrong offset!");
static_assert(offsetof(TweenVectorStandardFactory_BP_CreateTweenScaleActorBy, TweenTarget) == 0x000008, "Member 'TweenVectorStandardFactory_BP_CreateTweenScaleActorBy::TweenTarget' has a wrong offset!");
static_assert(offsetof(TweenVectorStandardFactory_BP_CreateTweenScaleActorBy, TweenContainer) == 0x000010, "Member 'TweenVectorStandardFactory_BP_CreateTweenScaleActorBy::TweenContainer' has a wrong offset!");
static_assert(offsetof(TweenVectorStandardFactory_BP_CreateTweenScaleActorBy, Tween) == 0x000018, "Member 'TweenVectorStandardFactory_BP_CreateTweenScaleActorBy::Tween' has a wrong offset!");
static_assert(offsetof(TweenVectorStandardFactory_BP_CreateTweenScaleActorBy, bY) == 0x000020, "Member 'TweenVectorStandardFactory_BP_CreateTweenScaleActorBy::bY' has a wrong offset!");
static_assert(offsetof(TweenVectorStandardFactory_BP_CreateTweenScaleActorBy, Duration) == 0x00002C, "Member 'TweenVectorStandardFactory_BP_CreateTweenScaleActorBy::Duration' has a wrong offset!");
static_assert(offsetof(TweenVectorStandardFactory_BP_CreateTweenScaleActorBy, EaseType) == 0x000030, "Member 'TweenVectorStandardFactory_BP_CreateTweenScaleActorBy::EaseType' has a wrong offset!");
static_assert(offsetof(TweenVectorStandardFactory_BP_CreateTweenScaleActorBy, DeleteTweenOnHit) == 0x000031, "Member 'TweenVectorStandardFactory_BP_CreateTweenScaleActorBy::DeleteTweenOnHit' has a wrong offset!");
static_assert(offsetof(TweenVectorStandardFactory_BP_CreateTweenScaleActorBy, DeleteTweenOnOverlap) == 0x000032, "Member 'TweenVectorStandardFactory_BP_CreateTweenScaleActorBy::DeleteTweenOnOverlap' has a wrong offset!");
static_assert(offsetof(TweenVectorStandardFactory_BP_CreateTweenScaleActorBy, NumLoops) == 0x000034, "Member 'TweenVectorStandardFactory_BP_CreateTweenScaleActorBy::NumLoops' has a wrong offset!");
static_assert(offsetof(TweenVectorStandardFactory_BP_CreateTweenScaleActorBy, LoopType) == 0x000038, "Member 'TweenVectorStandardFactory_BP_CreateTweenScaleActorBy::LoopType' has a wrong offset!");
static_assert(offsetof(TweenVectorStandardFactory_BP_CreateTweenScaleActorBy, Delay) == 0x00003C, "Member 'TweenVectorStandardFactory_BP_CreateTweenScaleActorBy::Delay' has a wrong offset!");
static_assert(offsetof(TweenVectorStandardFactory_BP_CreateTweenScaleActorBy, TimeScale) == 0x000040, "Member 'TweenVectorStandardFactory_BP_CreateTweenScaleActorBy::TimeScale' has a wrong offset!");
static_assert(offsetof(TweenVectorStandardFactory_BP_CreateTweenScaleActorBy, TweenWhileGameIsPaused) == 0x000044, "Member 'TweenVectorStandardFactory_BP_CreateTweenScaleActorBy::TweenWhileGameIsPaused' has a wrong offset!");
static_assert(offsetof(TweenVectorStandardFactory_BP_CreateTweenScaleActorBy, SequenceIndex) == 0x000048, "Member 'TweenVectorStandardFactory_BP_CreateTweenScaleActorBy::SequenceIndex' has a wrong offset!");

// Function TweenMaker.TweenVectorStandardFactory.BP_CreateTweenScaleActorTo
// 0x0050 (0x0050 - 0x0000)
struct TweenVectorStandardFactory_BP_CreateTweenScaleActorTo final
{
public:
	class UTweenManagerComponent*                 TweenManager;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 TweenTarget;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UTweenContainer*                        TweenContainer;                                    // 0x0010(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UTweenVector*                           Tween;                                             // 0x0018(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                To;                                                // 0x0020(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Duration;                                          // 0x002C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETweenEaseType                                EaseType;                                          // 0x0030(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETweenSpace                                   TweenSpace;                                        // 0x0031(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          DeleteTweenOnHit;                                  // 0x0032(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          DeleteTweenOnOverlap;                              // 0x0033(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         NumLoops;                                          // 0x0034(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETweenLoopType                                LoopType;                                          // 0x0038(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_39[0x3];                                       // 0x0039(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Delay;                                             // 0x003C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TimeScale;                                         // 0x0040(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          TweenWhileGameIsPaused;                            // 0x0044(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_45[0x3];                                       // 0x0045(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         SequenceIndex;                                     // 0x0048(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4C[0x4];                                       // 0x004C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TweenVectorStandardFactory_BP_CreateTweenScaleActorTo) == 0x000008, "Wrong alignment on TweenVectorStandardFactory_BP_CreateTweenScaleActorTo");
static_assert(sizeof(TweenVectorStandardFactory_BP_CreateTweenScaleActorTo) == 0x000050, "Wrong size on TweenVectorStandardFactory_BP_CreateTweenScaleActorTo");
static_assert(offsetof(TweenVectorStandardFactory_BP_CreateTweenScaleActorTo, TweenManager) == 0x000000, "Member 'TweenVectorStandardFactory_BP_CreateTweenScaleActorTo::TweenManager' has a wrong offset!");
static_assert(offsetof(TweenVectorStandardFactory_BP_CreateTweenScaleActorTo, TweenTarget) == 0x000008, "Member 'TweenVectorStandardFactory_BP_CreateTweenScaleActorTo::TweenTarget' has a wrong offset!");
static_assert(offsetof(TweenVectorStandardFactory_BP_CreateTweenScaleActorTo, TweenContainer) == 0x000010, "Member 'TweenVectorStandardFactory_BP_CreateTweenScaleActorTo::TweenContainer' has a wrong offset!");
static_assert(offsetof(TweenVectorStandardFactory_BP_CreateTweenScaleActorTo, Tween) == 0x000018, "Member 'TweenVectorStandardFactory_BP_CreateTweenScaleActorTo::Tween' has a wrong offset!");
static_assert(offsetof(TweenVectorStandardFactory_BP_CreateTweenScaleActorTo, To) == 0x000020, "Member 'TweenVectorStandardFactory_BP_CreateTweenScaleActorTo::To' has a wrong offset!");
static_assert(offsetof(TweenVectorStandardFactory_BP_CreateTweenScaleActorTo, Duration) == 0x00002C, "Member 'TweenVectorStandardFactory_BP_CreateTweenScaleActorTo::Duration' has a wrong offset!");
static_assert(offsetof(TweenVectorStandardFactory_BP_CreateTweenScaleActorTo, EaseType) == 0x000030, "Member 'TweenVectorStandardFactory_BP_CreateTweenScaleActorTo::EaseType' has a wrong offset!");
static_assert(offsetof(TweenVectorStandardFactory_BP_CreateTweenScaleActorTo, TweenSpace) == 0x000031, "Member 'TweenVectorStandardFactory_BP_CreateTweenScaleActorTo::TweenSpace' has a wrong offset!");
static_assert(offsetof(TweenVectorStandardFactory_BP_CreateTweenScaleActorTo, DeleteTweenOnHit) == 0x000032, "Member 'TweenVectorStandardFactory_BP_CreateTweenScaleActorTo::DeleteTweenOnHit' has a wrong offset!");
static_assert(offsetof(TweenVectorStandardFactory_BP_CreateTweenScaleActorTo, DeleteTweenOnOverlap) == 0x000033, "Member 'TweenVectorStandardFactory_BP_CreateTweenScaleActorTo::DeleteTweenOnOverlap' has a wrong offset!");
static_assert(offsetof(TweenVectorStandardFactory_BP_CreateTweenScaleActorTo, NumLoops) == 0x000034, "Member 'TweenVectorStandardFactory_BP_CreateTweenScaleActorTo::NumLoops' has a wrong offset!");
static_assert(offsetof(TweenVectorStandardFactory_BP_CreateTweenScaleActorTo, LoopType) == 0x000038, "Member 'TweenVectorStandardFactory_BP_CreateTweenScaleActorTo::LoopType' has a wrong offset!");
static_assert(offsetof(TweenVectorStandardFactory_BP_CreateTweenScaleActorTo, Delay) == 0x00003C, "Member 'TweenVectorStandardFactory_BP_CreateTweenScaleActorTo::Delay' has a wrong offset!");
static_assert(offsetof(TweenVectorStandardFactory_BP_CreateTweenScaleActorTo, TimeScale) == 0x000040, "Member 'TweenVectorStandardFactory_BP_CreateTweenScaleActorTo::TimeScale' has a wrong offset!");
static_assert(offsetof(TweenVectorStandardFactory_BP_CreateTweenScaleActorTo, TweenWhileGameIsPaused) == 0x000044, "Member 'TweenVectorStandardFactory_BP_CreateTweenScaleActorTo::TweenWhileGameIsPaused' has a wrong offset!");
static_assert(offsetof(TweenVectorStandardFactory_BP_CreateTweenScaleActorTo, SequenceIndex) == 0x000048, "Member 'TweenVectorStandardFactory_BP_CreateTweenScaleActorTo::SequenceIndex' has a wrong offset!");

// Function TweenMaker.TweenVectorStandardFactory.BP_CreateTweenScaleSceneComponentBy
// 0x0050 (0x0050 - 0x0000)
struct TweenVectorStandardFactory_BP_CreateTweenScaleSceneComponentBy final
{
public:
	class UTweenManagerComponent*                 TweenManager;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USceneComponent*                        TweenTarget;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, InstancedReference, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UTweenContainer*                        TweenContainer;                                    // 0x0010(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UTweenVector*                           Tween;                                             // 0x0018(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                bY;                                                // 0x0020(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Duration;                                          // 0x002C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETweenEaseType                                EaseType;                                          // 0x0030(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          DeleteTweenOnHit;                                  // 0x0031(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          DeleteTweenOnOverlap;                              // 0x0032(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_33[0x1];                                       // 0x0033(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         NumLoops;                                          // 0x0034(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETweenLoopType                                LoopType;                                          // 0x0038(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_39[0x3];                                       // 0x0039(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Delay;                                             // 0x003C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TimeScale;                                         // 0x0040(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          TweenWhileGameIsPaused;                            // 0x0044(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_45[0x3];                                       // 0x0045(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         SequenceIndex;                                     // 0x0048(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4C[0x4];                                       // 0x004C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TweenVectorStandardFactory_BP_CreateTweenScaleSceneComponentBy) == 0x000008, "Wrong alignment on TweenVectorStandardFactory_BP_CreateTweenScaleSceneComponentBy");
static_assert(sizeof(TweenVectorStandardFactory_BP_CreateTweenScaleSceneComponentBy) == 0x000050, "Wrong size on TweenVectorStandardFactory_BP_CreateTweenScaleSceneComponentBy");
static_assert(offsetof(TweenVectorStandardFactory_BP_CreateTweenScaleSceneComponentBy, TweenManager) == 0x000000, "Member 'TweenVectorStandardFactory_BP_CreateTweenScaleSceneComponentBy::TweenManager' has a wrong offset!");
static_assert(offsetof(TweenVectorStandardFactory_BP_CreateTweenScaleSceneComponentBy, TweenTarget) == 0x000008, "Member 'TweenVectorStandardFactory_BP_CreateTweenScaleSceneComponentBy::TweenTarget' has a wrong offset!");
static_assert(offsetof(TweenVectorStandardFactory_BP_CreateTweenScaleSceneComponentBy, TweenContainer) == 0x000010, "Member 'TweenVectorStandardFactory_BP_CreateTweenScaleSceneComponentBy::TweenContainer' has a wrong offset!");
static_assert(offsetof(TweenVectorStandardFactory_BP_CreateTweenScaleSceneComponentBy, Tween) == 0x000018, "Member 'TweenVectorStandardFactory_BP_CreateTweenScaleSceneComponentBy::Tween' has a wrong offset!");
static_assert(offsetof(TweenVectorStandardFactory_BP_CreateTweenScaleSceneComponentBy, bY) == 0x000020, "Member 'TweenVectorStandardFactory_BP_CreateTweenScaleSceneComponentBy::bY' has a wrong offset!");
static_assert(offsetof(TweenVectorStandardFactory_BP_CreateTweenScaleSceneComponentBy, Duration) == 0x00002C, "Member 'TweenVectorStandardFactory_BP_CreateTweenScaleSceneComponentBy::Duration' has a wrong offset!");
static_assert(offsetof(TweenVectorStandardFactory_BP_CreateTweenScaleSceneComponentBy, EaseType) == 0x000030, "Member 'TweenVectorStandardFactory_BP_CreateTweenScaleSceneComponentBy::EaseType' has a wrong offset!");
static_assert(offsetof(TweenVectorStandardFactory_BP_CreateTweenScaleSceneComponentBy, DeleteTweenOnHit) == 0x000031, "Member 'TweenVectorStandardFactory_BP_CreateTweenScaleSceneComponentBy::DeleteTweenOnHit' has a wrong offset!");
static_assert(offsetof(TweenVectorStandardFactory_BP_CreateTweenScaleSceneComponentBy, DeleteTweenOnOverlap) == 0x000032, "Member 'TweenVectorStandardFactory_BP_CreateTweenScaleSceneComponentBy::DeleteTweenOnOverlap' has a wrong offset!");
static_assert(offsetof(TweenVectorStandardFactory_BP_CreateTweenScaleSceneComponentBy, NumLoops) == 0x000034, "Member 'TweenVectorStandardFactory_BP_CreateTweenScaleSceneComponentBy::NumLoops' has a wrong offset!");
static_assert(offsetof(TweenVectorStandardFactory_BP_CreateTweenScaleSceneComponentBy, LoopType) == 0x000038, "Member 'TweenVectorStandardFactory_BP_CreateTweenScaleSceneComponentBy::LoopType' has a wrong offset!");
static_assert(offsetof(TweenVectorStandardFactory_BP_CreateTweenScaleSceneComponentBy, Delay) == 0x00003C, "Member 'TweenVectorStandardFactory_BP_CreateTweenScaleSceneComponentBy::Delay' has a wrong offset!");
static_assert(offsetof(TweenVectorStandardFactory_BP_CreateTweenScaleSceneComponentBy, TimeScale) == 0x000040, "Member 'TweenVectorStandardFactory_BP_CreateTweenScaleSceneComponentBy::TimeScale' has a wrong offset!");
static_assert(offsetof(TweenVectorStandardFactory_BP_CreateTweenScaleSceneComponentBy, TweenWhileGameIsPaused) == 0x000044, "Member 'TweenVectorStandardFactory_BP_CreateTweenScaleSceneComponentBy::TweenWhileGameIsPaused' has a wrong offset!");
static_assert(offsetof(TweenVectorStandardFactory_BP_CreateTweenScaleSceneComponentBy, SequenceIndex) == 0x000048, "Member 'TweenVectorStandardFactory_BP_CreateTweenScaleSceneComponentBy::SequenceIndex' has a wrong offset!");

// Function TweenMaker.TweenVectorStandardFactory.BP_CreateTweenScaleSceneComponentTo
// 0x0050 (0x0050 - 0x0000)
struct TweenVectorStandardFactory_BP_CreateTweenScaleSceneComponentTo final
{
public:
	class UTweenManagerComponent*                 TweenManager;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USceneComponent*                        TweenTarget;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, InstancedReference, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UTweenContainer*                        TweenContainer;                                    // 0x0010(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UTweenVector*                           Tween;                                             // 0x0018(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                To;                                                // 0x0020(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Duration;                                          // 0x002C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETweenEaseType                                EaseType;                                          // 0x0030(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETweenSpace                                   TweenSpace;                                        // 0x0031(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          DeleteTweenOnHit;                                  // 0x0032(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          DeleteTweenOnOverlap;                              // 0x0033(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         NumLoops;                                          // 0x0034(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETweenLoopType                                LoopType;                                          // 0x0038(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_39[0x3];                                       // 0x0039(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Delay;                                             // 0x003C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TimeScale;                                         // 0x0040(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          TweenWhileGameIsPaused;                            // 0x0044(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_45[0x3];                                       // 0x0045(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         SequenceIndex;                                     // 0x0048(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4C[0x4];                                       // 0x004C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TweenVectorStandardFactory_BP_CreateTweenScaleSceneComponentTo) == 0x000008, "Wrong alignment on TweenVectorStandardFactory_BP_CreateTweenScaleSceneComponentTo");
static_assert(sizeof(TweenVectorStandardFactory_BP_CreateTweenScaleSceneComponentTo) == 0x000050, "Wrong size on TweenVectorStandardFactory_BP_CreateTweenScaleSceneComponentTo");
static_assert(offsetof(TweenVectorStandardFactory_BP_CreateTweenScaleSceneComponentTo, TweenManager) == 0x000000, "Member 'TweenVectorStandardFactory_BP_CreateTweenScaleSceneComponentTo::TweenManager' has a wrong offset!");
static_assert(offsetof(TweenVectorStandardFactory_BP_CreateTweenScaleSceneComponentTo, TweenTarget) == 0x000008, "Member 'TweenVectorStandardFactory_BP_CreateTweenScaleSceneComponentTo::TweenTarget' has a wrong offset!");
static_assert(offsetof(TweenVectorStandardFactory_BP_CreateTweenScaleSceneComponentTo, TweenContainer) == 0x000010, "Member 'TweenVectorStandardFactory_BP_CreateTweenScaleSceneComponentTo::TweenContainer' has a wrong offset!");
static_assert(offsetof(TweenVectorStandardFactory_BP_CreateTweenScaleSceneComponentTo, Tween) == 0x000018, "Member 'TweenVectorStandardFactory_BP_CreateTweenScaleSceneComponentTo::Tween' has a wrong offset!");
static_assert(offsetof(TweenVectorStandardFactory_BP_CreateTweenScaleSceneComponentTo, To) == 0x000020, "Member 'TweenVectorStandardFactory_BP_CreateTweenScaleSceneComponentTo::To' has a wrong offset!");
static_assert(offsetof(TweenVectorStandardFactory_BP_CreateTweenScaleSceneComponentTo, Duration) == 0x00002C, "Member 'TweenVectorStandardFactory_BP_CreateTweenScaleSceneComponentTo::Duration' has a wrong offset!");
static_assert(offsetof(TweenVectorStandardFactory_BP_CreateTweenScaleSceneComponentTo, EaseType) == 0x000030, "Member 'TweenVectorStandardFactory_BP_CreateTweenScaleSceneComponentTo::EaseType' has a wrong offset!");
static_assert(offsetof(TweenVectorStandardFactory_BP_CreateTweenScaleSceneComponentTo, TweenSpace) == 0x000031, "Member 'TweenVectorStandardFactory_BP_CreateTweenScaleSceneComponentTo::TweenSpace' has a wrong offset!");
static_assert(offsetof(TweenVectorStandardFactory_BP_CreateTweenScaleSceneComponentTo, DeleteTweenOnHit) == 0x000032, "Member 'TweenVectorStandardFactory_BP_CreateTweenScaleSceneComponentTo::DeleteTweenOnHit' has a wrong offset!");
static_assert(offsetof(TweenVectorStandardFactory_BP_CreateTweenScaleSceneComponentTo, DeleteTweenOnOverlap) == 0x000033, "Member 'TweenVectorStandardFactory_BP_CreateTweenScaleSceneComponentTo::DeleteTweenOnOverlap' has a wrong offset!");
static_assert(offsetof(TweenVectorStandardFactory_BP_CreateTweenScaleSceneComponentTo, NumLoops) == 0x000034, "Member 'TweenVectorStandardFactory_BP_CreateTweenScaleSceneComponentTo::NumLoops' has a wrong offset!");
static_assert(offsetof(TweenVectorStandardFactory_BP_CreateTweenScaleSceneComponentTo, LoopType) == 0x000038, "Member 'TweenVectorStandardFactory_BP_CreateTweenScaleSceneComponentTo::LoopType' has a wrong offset!");
static_assert(offsetof(TweenVectorStandardFactory_BP_CreateTweenScaleSceneComponentTo, Delay) == 0x00003C, "Member 'TweenVectorStandardFactory_BP_CreateTweenScaleSceneComponentTo::Delay' has a wrong offset!");
static_assert(offsetof(TweenVectorStandardFactory_BP_CreateTweenScaleSceneComponentTo, TimeScale) == 0x000040, "Member 'TweenVectorStandardFactory_BP_CreateTweenScaleSceneComponentTo::TimeScale' has a wrong offset!");
static_assert(offsetof(TweenVectorStandardFactory_BP_CreateTweenScaleSceneComponentTo, TweenWhileGameIsPaused) == 0x000044, "Member 'TweenVectorStandardFactory_BP_CreateTweenScaleSceneComponentTo::TweenWhileGameIsPaused' has a wrong offset!");
static_assert(offsetof(TweenVectorStandardFactory_BP_CreateTweenScaleSceneComponentTo, SequenceIndex) == 0x000048, "Member 'TweenVectorStandardFactory_BP_CreateTweenScaleSceneComponentTo::SequenceIndex' has a wrong offset!");

// Function TweenMaker.TweenVectorStandardFactory.BP_JoinTweenCustomVector
// 0x0048 (0x0048 - 0x0000)
struct TweenVectorStandardFactory_BP_JoinTweenCustomVector final
{
public:
	class UTweenContainer*                        TweenContainer;                                    // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UObject*                                TweenTarget;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                From;                                              // 0x0010(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                To;                                                // 0x001C(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Duration;                                          // 0x0028(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETweenEaseType                                EaseType;                                          // 0x002C(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2D[0x3];                                       // 0x002D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Delay;                                             // 0x0030(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TimeScale;                                         // 0x0034(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          TweenWhileGameIsPaused;                            // 0x0038(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_39[0x3];                                       // 0x0039(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         SequenceIndex;                                     // 0x003C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UTweenVector*                           ReturnValue;                                       // 0x0040(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TweenVectorStandardFactory_BP_JoinTweenCustomVector) == 0x000008, "Wrong alignment on TweenVectorStandardFactory_BP_JoinTweenCustomVector");
static_assert(sizeof(TweenVectorStandardFactory_BP_JoinTweenCustomVector) == 0x000048, "Wrong size on TweenVectorStandardFactory_BP_JoinTweenCustomVector");
static_assert(offsetof(TweenVectorStandardFactory_BP_JoinTweenCustomVector, TweenContainer) == 0x000000, "Member 'TweenVectorStandardFactory_BP_JoinTweenCustomVector::TweenContainer' has a wrong offset!");
static_assert(offsetof(TweenVectorStandardFactory_BP_JoinTweenCustomVector, TweenTarget) == 0x000008, "Member 'TweenVectorStandardFactory_BP_JoinTweenCustomVector::TweenTarget' has a wrong offset!");
static_assert(offsetof(TweenVectorStandardFactory_BP_JoinTweenCustomVector, From) == 0x000010, "Member 'TweenVectorStandardFactory_BP_JoinTweenCustomVector::From' has a wrong offset!");
static_assert(offsetof(TweenVectorStandardFactory_BP_JoinTweenCustomVector, To) == 0x00001C, "Member 'TweenVectorStandardFactory_BP_JoinTweenCustomVector::To' has a wrong offset!");
static_assert(offsetof(TweenVectorStandardFactory_BP_JoinTweenCustomVector, Duration) == 0x000028, "Member 'TweenVectorStandardFactory_BP_JoinTweenCustomVector::Duration' has a wrong offset!");
static_assert(offsetof(TweenVectorStandardFactory_BP_JoinTweenCustomVector, EaseType) == 0x00002C, "Member 'TweenVectorStandardFactory_BP_JoinTweenCustomVector::EaseType' has a wrong offset!");
static_assert(offsetof(TweenVectorStandardFactory_BP_JoinTweenCustomVector, Delay) == 0x000030, "Member 'TweenVectorStandardFactory_BP_JoinTweenCustomVector::Delay' has a wrong offset!");
static_assert(offsetof(TweenVectorStandardFactory_BP_JoinTweenCustomVector, TimeScale) == 0x000034, "Member 'TweenVectorStandardFactory_BP_JoinTweenCustomVector::TimeScale' has a wrong offset!");
static_assert(offsetof(TweenVectorStandardFactory_BP_JoinTweenCustomVector, TweenWhileGameIsPaused) == 0x000038, "Member 'TweenVectorStandardFactory_BP_JoinTweenCustomVector::TweenWhileGameIsPaused' has a wrong offset!");
static_assert(offsetof(TweenVectorStandardFactory_BP_JoinTweenCustomVector, SequenceIndex) == 0x00003C, "Member 'TweenVectorStandardFactory_BP_JoinTweenCustomVector::SequenceIndex' has a wrong offset!");
static_assert(offsetof(TweenVectorStandardFactory_BP_JoinTweenCustomVector, ReturnValue) == 0x000040, "Member 'TweenVectorStandardFactory_BP_JoinTweenCustomVector::ReturnValue' has a wrong offset!");

// Function TweenMaker.TweenVectorStandardFactory.BP_JoinTweenMoveActorBy
// 0x0040 (0x0040 - 0x0000)
struct TweenVectorStandardFactory_BP_JoinTweenMoveActorBy final
{
public:
	class UTweenContainer*                        TweenContainer;                                    // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 TweenTarget;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                bY;                                                // 0x0010(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Duration;                                          // 0x001C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETweenEaseType                                EaseType;                                          // 0x0020(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          DeleteTweenOnHit;                                  // 0x0021(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          DeleteTweenOnOverlap;                              // 0x0022(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_23[0x1];                                       // 0x0023(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Delay;                                             // 0x0024(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TimeScale;                                         // 0x0028(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          TweenWhileGameIsPaused;                            // 0x002C(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2D[0x3];                                       // 0x002D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         SequenceIndex;                                     // 0x0030(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_34[0x4];                                       // 0x0034(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UTweenVector*                           ReturnValue;                                       // 0x0038(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TweenVectorStandardFactory_BP_JoinTweenMoveActorBy) == 0x000008, "Wrong alignment on TweenVectorStandardFactory_BP_JoinTweenMoveActorBy");
static_assert(sizeof(TweenVectorStandardFactory_BP_JoinTweenMoveActorBy) == 0x000040, "Wrong size on TweenVectorStandardFactory_BP_JoinTweenMoveActorBy");
static_assert(offsetof(TweenVectorStandardFactory_BP_JoinTweenMoveActorBy, TweenContainer) == 0x000000, "Member 'TweenVectorStandardFactory_BP_JoinTweenMoveActorBy::TweenContainer' has a wrong offset!");
static_assert(offsetof(TweenVectorStandardFactory_BP_JoinTweenMoveActorBy, TweenTarget) == 0x000008, "Member 'TweenVectorStandardFactory_BP_JoinTweenMoveActorBy::TweenTarget' has a wrong offset!");
static_assert(offsetof(TweenVectorStandardFactory_BP_JoinTweenMoveActorBy, bY) == 0x000010, "Member 'TweenVectorStandardFactory_BP_JoinTweenMoveActorBy::bY' has a wrong offset!");
static_assert(offsetof(TweenVectorStandardFactory_BP_JoinTweenMoveActorBy, Duration) == 0x00001C, "Member 'TweenVectorStandardFactory_BP_JoinTweenMoveActorBy::Duration' has a wrong offset!");
static_assert(offsetof(TweenVectorStandardFactory_BP_JoinTweenMoveActorBy, EaseType) == 0x000020, "Member 'TweenVectorStandardFactory_BP_JoinTweenMoveActorBy::EaseType' has a wrong offset!");
static_assert(offsetof(TweenVectorStandardFactory_BP_JoinTweenMoveActorBy, DeleteTweenOnHit) == 0x000021, "Member 'TweenVectorStandardFactory_BP_JoinTweenMoveActorBy::DeleteTweenOnHit' has a wrong offset!");
static_assert(offsetof(TweenVectorStandardFactory_BP_JoinTweenMoveActorBy, DeleteTweenOnOverlap) == 0x000022, "Member 'TweenVectorStandardFactory_BP_JoinTweenMoveActorBy::DeleteTweenOnOverlap' has a wrong offset!");
static_assert(offsetof(TweenVectorStandardFactory_BP_JoinTweenMoveActorBy, Delay) == 0x000024, "Member 'TweenVectorStandardFactory_BP_JoinTweenMoveActorBy::Delay' has a wrong offset!");
static_assert(offsetof(TweenVectorStandardFactory_BP_JoinTweenMoveActorBy, TimeScale) == 0x000028, "Member 'TweenVectorStandardFactory_BP_JoinTweenMoveActorBy::TimeScale' has a wrong offset!");
static_assert(offsetof(TweenVectorStandardFactory_BP_JoinTweenMoveActorBy, TweenWhileGameIsPaused) == 0x00002C, "Member 'TweenVectorStandardFactory_BP_JoinTweenMoveActorBy::TweenWhileGameIsPaused' has a wrong offset!");
static_assert(offsetof(TweenVectorStandardFactory_BP_JoinTweenMoveActorBy, SequenceIndex) == 0x000030, "Member 'TweenVectorStandardFactory_BP_JoinTweenMoveActorBy::SequenceIndex' has a wrong offset!");
static_assert(offsetof(TweenVectorStandardFactory_BP_JoinTweenMoveActorBy, ReturnValue) == 0x000038, "Member 'TweenVectorStandardFactory_BP_JoinTweenMoveActorBy::ReturnValue' has a wrong offset!");

// Function TweenMaker.TweenVectorStandardFactory.BP_JoinTweenMoveActorTo
// 0x0040 (0x0040 - 0x0000)
struct TweenVectorStandardFactory_BP_JoinTweenMoveActorTo final
{
public:
	class UTweenContainer*                        TweenContainer;                                    // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 TweenTarget;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                To;                                                // 0x0010(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Duration;                                          // 0x001C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETweenEaseType                                EaseType;                                          // 0x0020(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETweenSpace                                   TweenSpace;                                        // 0x0021(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          DeleteTweenOnHit;                                  // 0x0022(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          DeleteTweenOnOverlap;                              // 0x0023(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Delay;                                             // 0x0024(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TimeScale;                                         // 0x0028(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          TweenWhileGameIsPaused;                            // 0x002C(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2D[0x3];                                       // 0x002D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         SequenceIndex;                                     // 0x0030(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_34[0x4];                                       // 0x0034(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UTweenVector*                           ReturnValue;                                       // 0x0038(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TweenVectorStandardFactory_BP_JoinTweenMoveActorTo) == 0x000008, "Wrong alignment on TweenVectorStandardFactory_BP_JoinTweenMoveActorTo");
static_assert(sizeof(TweenVectorStandardFactory_BP_JoinTweenMoveActorTo) == 0x000040, "Wrong size on TweenVectorStandardFactory_BP_JoinTweenMoveActorTo");
static_assert(offsetof(TweenVectorStandardFactory_BP_JoinTweenMoveActorTo, TweenContainer) == 0x000000, "Member 'TweenVectorStandardFactory_BP_JoinTweenMoveActorTo::TweenContainer' has a wrong offset!");
static_assert(offsetof(TweenVectorStandardFactory_BP_JoinTweenMoveActorTo, TweenTarget) == 0x000008, "Member 'TweenVectorStandardFactory_BP_JoinTweenMoveActorTo::TweenTarget' has a wrong offset!");
static_assert(offsetof(TweenVectorStandardFactory_BP_JoinTweenMoveActorTo, To) == 0x000010, "Member 'TweenVectorStandardFactory_BP_JoinTweenMoveActorTo::To' has a wrong offset!");
static_assert(offsetof(TweenVectorStandardFactory_BP_JoinTweenMoveActorTo, Duration) == 0x00001C, "Member 'TweenVectorStandardFactory_BP_JoinTweenMoveActorTo::Duration' has a wrong offset!");
static_assert(offsetof(TweenVectorStandardFactory_BP_JoinTweenMoveActorTo, EaseType) == 0x000020, "Member 'TweenVectorStandardFactory_BP_JoinTweenMoveActorTo::EaseType' has a wrong offset!");
static_assert(offsetof(TweenVectorStandardFactory_BP_JoinTweenMoveActorTo, TweenSpace) == 0x000021, "Member 'TweenVectorStandardFactory_BP_JoinTweenMoveActorTo::TweenSpace' has a wrong offset!");
static_assert(offsetof(TweenVectorStandardFactory_BP_JoinTweenMoveActorTo, DeleteTweenOnHit) == 0x000022, "Member 'TweenVectorStandardFactory_BP_JoinTweenMoveActorTo::DeleteTweenOnHit' has a wrong offset!");
static_assert(offsetof(TweenVectorStandardFactory_BP_JoinTweenMoveActorTo, DeleteTweenOnOverlap) == 0x000023, "Member 'TweenVectorStandardFactory_BP_JoinTweenMoveActorTo::DeleteTweenOnOverlap' has a wrong offset!");
static_assert(offsetof(TweenVectorStandardFactory_BP_JoinTweenMoveActorTo, Delay) == 0x000024, "Member 'TweenVectorStandardFactory_BP_JoinTweenMoveActorTo::Delay' has a wrong offset!");
static_assert(offsetof(TweenVectorStandardFactory_BP_JoinTweenMoveActorTo, TimeScale) == 0x000028, "Member 'TweenVectorStandardFactory_BP_JoinTweenMoveActorTo::TimeScale' has a wrong offset!");
static_assert(offsetof(TweenVectorStandardFactory_BP_JoinTweenMoveActorTo, TweenWhileGameIsPaused) == 0x00002C, "Member 'TweenVectorStandardFactory_BP_JoinTweenMoveActorTo::TweenWhileGameIsPaused' has a wrong offset!");
static_assert(offsetof(TweenVectorStandardFactory_BP_JoinTweenMoveActorTo, SequenceIndex) == 0x000030, "Member 'TweenVectorStandardFactory_BP_JoinTweenMoveActorTo::SequenceIndex' has a wrong offset!");
static_assert(offsetof(TweenVectorStandardFactory_BP_JoinTweenMoveActorTo, ReturnValue) == 0x000038, "Member 'TweenVectorStandardFactory_BP_JoinTweenMoveActorTo::ReturnValue' has a wrong offset!");

// Function TweenMaker.TweenVectorStandardFactory.BP_JoinTweenMoveSceneComponentBy
// 0x0040 (0x0040 - 0x0000)
struct TweenVectorStandardFactory_BP_JoinTweenMoveSceneComponentBy final
{
public:
	class UTweenContainer*                        TweenContainer;                                    // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USceneComponent*                        TweenTarget;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, InstancedReference, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                bY;                                                // 0x0010(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Duration;                                          // 0x001C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETweenEaseType                                EaseType;                                          // 0x0020(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          DeleteTweenOnHit;                                  // 0x0021(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          DeleteTweenOnOverlap;                              // 0x0022(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_23[0x1];                                       // 0x0023(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Delay;                                             // 0x0024(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TimeScale;                                         // 0x0028(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          TweenWhileGameIsPaused;                            // 0x002C(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2D[0x3];                                       // 0x002D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         SequenceIndex;                                     // 0x0030(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_34[0x4];                                       // 0x0034(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UTweenVector*                           ReturnValue;                                       // 0x0038(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TweenVectorStandardFactory_BP_JoinTweenMoveSceneComponentBy) == 0x000008, "Wrong alignment on TweenVectorStandardFactory_BP_JoinTweenMoveSceneComponentBy");
static_assert(sizeof(TweenVectorStandardFactory_BP_JoinTweenMoveSceneComponentBy) == 0x000040, "Wrong size on TweenVectorStandardFactory_BP_JoinTweenMoveSceneComponentBy");
static_assert(offsetof(TweenVectorStandardFactory_BP_JoinTweenMoveSceneComponentBy, TweenContainer) == 0x000000, "Member 'TweenVectorStandardFactory_BP_JoinTweenMoveSceneComponentBy::TweenContainer' has a wrong offset!");
static_assert(offsetof(TweenVectorStandardFactory_BP_JoinTweenMoveSceneComponentBy, TweenTarget) == 0x000008, "Member 'TweenVectorStandardFactory_BP_JoinTweenMoveSceneComponentBy::TweenTarget' has a wrong offset!");
static_assert(offsetof(TweenVectorStandardFactory_BP_JoinTweenMoveSceneComponentBy, bY) == 0x000010, "Member 'TweenVectorStandardFactory_BP_JoinTweenMoveSceneComponentBy::bY' has a wrong offset!");
static_assert(offsetof(TweenVectorStandardFactory_BP_JoinTweenMoveSceneComponentBy, Duration) == 0x00001C, "Member 'TweenVectorStandardFactory_BP_JoinTweenMoveSceneComponentBy::Duration' has a wrong offset!");
static_assert(offsetof(TweenVectorStandardFactory_BP_JoinTweenMoveSceneComponentBy, EaseType) == 0x000020, "Member 'TweenVectorStandardFactory_BP_JoinTweenMoveSceneComponentBy::EaseType' has a wrong offset!");
static_assert(offsetof(TweenVectorStandardFactory_BP_JoinTweenMoveSceneComponentBy, DeleteTweenOnHit) == 0x000021, "Member 'TweenVectorStandardFactory_BP_JoinTweenMoveSceneComponentBy::DeleteTweenOnHit' has a wrong offset!");
static_assert(offsetof(TweenVectorStandardFactory_BP_JoinTweenMoveSceneComponentBy, DeleteTweenOnOverlap) == 0x000022, "Member 'TweenVectorStandardFactory_BP_JoinTweenMoveSceneComponentBy::DeleteTweenOnOverlap' has a wrong offset!");
static_assert(offsetof(TweenVectorStandardFactory_BP_JoinTweenMoveSceneComponentBy, Delay) == 0x000024, "Member 'TweenVectorStandardFactory_BP_JoinTweenMoveSceneComponentBy::Delay' has a wrong offset!");
static_assert(offsetof(TweenVectorStandardFactory_BP_JoinTweenMoveSceneComponentBy, TimeScale) == 0x000028, "Member 'TweenVectorStandardFactory_BP_JoinTweenMoveSceneComponentBy::TimeScale' has a wrong offset!");
static_assert(offsetof(TweenVectorStandardFactory_BP_JoinTweenMoveSceneComponentBy, TweenWhileGameIsPaused) == 0x00002C, "Member 'TweenVectorStandardFactory_BP_JoinTweenMoveSceneComponentBy::TweenWhileGameIsPaused' has a wrong offset!");
static_assert(offsetof(TweenVectorStandardFactory_BP_JoinTweenMoveSceneComponentBy, SequenceIndex) == 0x000030, "Member 'TweenVectorStandardFactory_BP_JoinTweenMoveSceneComponentBy::SequenceIndex' has a wrong offset!");
static_assert(offsetof(TweenVectorStandardFactory_BP_JoinTweenMoveSceneComponentBy, ReturnValue) == 0x000038, "Member 'TweenVectorStandardFactory_BP_JoinTweenMoveSceneComponentBy::ReturnValue' has a wrong offset!");

// Function TweenMaker.TweenVectorStandardFactory.BP_JoinTweenMoveSceneComponentTo
// 0x0040 (0x0040 - 0x0000)
struct TweenVectorStandardFactory_BP_JoinTweenMoveSceneComponentTo final
{
public:
	class UTweenContainer*                        TweenContainer;                                    // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USceneComponent*                        TweenTarget;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, InstancedReference, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                To;                                                // 0x0010(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Duration;                                          // 0x001C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETweenEaseType                                EaseType;                                          // 0x0020(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETweenSpace                                   TweenSpace;                                        // 0x0021(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          DeleteTweenOnHit;                                  // 0x0022(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          DeleteTweenOnOverlap;                              // 0x0023(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Delay;                                             // 0x0024(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TimeScale;                                         // 0x0028(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          TweenWhileGameIsPaused;                            // 0x002C(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2D[0x3];                                       // 0x002D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         SequenceIndex;                                     // 0x0030(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_34[0x4];                                       // 0x0034(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UTweenVector*                           ReturnValue;                                       // 0x0038(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TweenVectorStandardFactory_BP_JoinTweenMoveSceneComponentTo) == 0x000008, "Wrong alignment on TweenVectorStandardFactory_BP_JoinTweenMoveSceneComponentTo");
static_assert(sizeof(TweenVectorStandardFactory_BP_JoinTweenMoveSceneComponentTo) == 0x000040, "Wrong size on TweenVectorStandardFactory_BP_JoinTweenMoveSceneComponentTo");
static_assert(offsetof(TweenVectorStandardFactory_BP_JoinTweenMoveSceneComponentTo, TweenContainer) == 0x000000, "Member 'TweenVectorStandardFactory_BP_JoinTweenMoveSceneComponentTo::TweenContainer' has a wrong offset!");
static_assert(offsetof(TweenVectorStandardFactory_BP_JoinTweenMoveSceneComponentTo, TweenTarget) == 0x000008, "Member 'TweenVectorStandardFactory_BP_JoinTweenMoveSceneComponentTo::TweenTarget' has a wrong offset!");
static_assert(offsetof(TweenVectorStandardFactory_BP_JoinTweenMoveSceneComponentTo, To) == 0x000010, "Member 'TweenVectorStandardFactory_BP_JoinTweenMoveSceneComponentTo::To' has a wrong offset!");
static_assert(offsetof(TweenVectorStandardFactory_BP_JoinTweenMoveSceneComponentTo, Duration) == 0x00001C, "Member 'TweenVectorStandardFactory_BP_JoinTweenMoveSceneComponentTo::Duration' has a wrong offset!");
static_assert(offsetof(TweenVectorStandardFactory_BP_JoinTweenMoveSceneComponentTo, EaseType) == 0x000020, "Member 'TweenVectorStandardFactory_BP_JoinTweenMoveSceneComponentTo::EaseType' has a wrong offset!");
static_assert(offsetof(TweenVectorStandardFactory_BP_JoinTweenMoveSceneComponentTo, TweenSpace) == 0x000021, "Member 'TweenVectorStandardFactory_BP_JoinTweenMoveSceneComponentTo::TweenSpace' has a wrong offset!");
static_assert(offsetof(TweenVectorStandardFactory_BP_JoinTweenMoveSceneComponentTo, DeleteTweenOnHit) == 0x000022, "Member 'TweenVectorStandardFactory_BP_JoinTweenMoveSceneComponentTo::DeleteTweenOnHit' has a wrong offset!");
static_assert(offsetof(TweenVectorStandardFactory_BP_JoinTweenMoveSceneComponentTo, DeleteTweenOnOverlap) == 0x000023, "Member 'TweenVectorStandardFactory_BP_JoinTweenMoveSceneComponentTo::DeleteTweenOnOverlap' has a wrong offset!");
static_assert(offsetof(TweenVectorStandardFactory_BP_JoinTweenMoveSceneComponentTo, Delay) == 0x000024, "Member 'TweenVectorStandardFactory_BP_JoinTweenMoveSceneComponentTo::Delay' has a wrong offset!");
static_assert(offsetof(TweenVectorStandardFactory_BP_JoinTweenMoveSceneComponentTo, TimeScale) == 0x000028, "Member 'TweenVectorStandardFactory_BP_JoinTweenMoveSceneComponentTo::TimeScale' has a wrong offset!");
static_assert(offsetof(TweenVectorStandardFactory_BP_JoinTweenMoveSceneComponentTo, TweenWhileGameIsPaused) == 0x00002C, "Member 'TweenVectorStandardFactory_BP_JoinTweenMoveSceneComponentTo::TweenWhileGameIsPaused' has a wrong offset!");
static_assert(offsetof(TweenVectorStandardFactory_BP_JoinTweenMoveSceneComponentTo, SequenceIndex) == 0x000030, "Member 'TweenVectorStandardFactory_BP_JoinTweenMoveSceneComponentTo::SequenceIndex' has a wrong offset!");
static_assert(offsetof(TweenVectorStandardFactory_BP_JoinTweenMoveSceneComponentTo, ReturnValue) == 0x000038, "Member 'TweenVectorStandardFactory_BP_JoinTweenMoveSceneComponentTo::ReturnValue' has a wrong offset!");

// Function TweenMaker.TweenVectorStandardFactory.BP_JoinTweenScaleActorBy
// 0x0040 (0x0040 - 0x0000)
struct TweenVectorStandardFactory_BP_JoinTweenScaleActorBy final
{
public:
	class UTweenContainer*                        TweenContainer;                                    // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 TweenTarget;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                bY;                                                // 0x0010(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Duration;                                          // 0x001C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETweenEaseType                                EaseType;                                          // 0x0020(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          DeleteTweenOnHit;                                  // 0x0021(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          DeleteTweenOnOverlap;                              // 0x0022(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_23[0x1];                                       // 0x0023(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Delay;                                             // 0x0024(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TimeScale;                                         // 0x0028(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          TweenWhileGameIsPaused;                            // 0x002C(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2D[0x3];                                       // 0x002D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         SequenceIndex;                                     // 0x0030(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_34[0x4];                                       // 0x0034(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UTweenVector*                           ReturnValue;                                       // 0x0038(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TweenVectorStandardFactory_BP_JoinTweenScaleActorBy) == 0x000008, "Wrong alignment on TweenVectorStandardFactory_BP_JoinTweenScaleActorBy");
static_assert(sizeof(TweenVectorStandardFactory_BP_JoinTweenScaleActorBy) == 0x000040, "Wrong size on TweenVectorStandardFactory_BP_JoinTweenScaleActorBy");
static_assert(offsetof(TweenVectorStandardFactory_BP_JoinTweenScaleActorBy, TweenContainer) == 0x000000, "Member 'TweenVectorStandardFactory_BP_JoinTweenScaleActorBy::TweenContainer' has a wrong offset!");
static_assert(offsetof(TweenVectorStandardFactory_BP_JoinTweenScaleActorBy, TweenTarget) == 0x000008, "Member 'TweenVectorStandardFactory_BP_JoinTweenScaleActorBy::TweenTarget' has a wrong offset!");
static_assert(offsetof(TweenVectorStandardFactory_BP_JoinTweenScaleActorBy, bY) == 0x000010, "Member 'TweenVectorStandardFactory_BP_JoinTweenScaleActorBy::bY' has a wrong offset!");
static_assert(offsetof(TweenVectorStandardFactory_BP_JoinTweenScaleActorBy, Duration) == 0x00001C, "Member 'TweenVectorStandardFactory_BP_JoinTweenScaleActorBy::Duration' has a wrong offset!");
static_assert(offsetof(TweenVectorStandardFactory_BP_JoinTweenScaleActorBy, EaseType) == 0x000020, "Member 'TweenVectorStandardFactory_BP_JoinTweenScaleActorBy::EaseType' has a wrong offset!");
static_assert(offsetof(TweenVectorStandardFactory_BP_JoinTweenScaleActorBy, DeleteTweenOnHit) == 0x000021, "Member 'TweenVectorStandardFactory_BP_JoinTweenScaleActorBy::DeleteTweenOnHit' has a wrong offset!");
static_assert(offsetof(TweenVectorStandardFactory_BP_JoinTweenScaleActorBy, DeleteTweenOnOverlap) == 0x000022, "Member 'TweenVectorStandardFactory_BP_JoinTweenScaleActorBy::DeleteTweenOnOverlap' has a wrong offset!");
static_assert(offsetof(TweenVectorStandardFactory_BP_JoinTweenScaleActorBy, Delay) == 0x000024, "Member 'TweenVectorStandardFactory_BP_JoinTweenScaleActorBy::Delay' has a wrong offset!");
static_assert(offsetof(TweenVectorStandardFactory_BP_JoinTweenScaleActorBy, TimeScale) == 0x000028, "Member 'TweenVectorStandardFactory_BP_JoinTweenScaleActorBy::TimeScale' has a wrong offset!");
static_assert(offsetof(TweenVectorStandardFactory_BP_JoinTweenScaleActorBy, TweenWhileGameIsPaused) == 0x00002C, "Member 'TweenVectorStandardFactory_BP_JoinTweenScaleActorBy::TweenWhileGameIsPaused' has a wrong offset!");
static_assert(offsetof(TweenVectorStandardFactory_BP_JoinTweenScaleActorBy, SequenceIndex) == 0x000030, "Member 'TweenVectorStandardFactory_BP_JoinTweenScaleActorBy::SequenceIndex' has a wrong offset!");
static_assert(offsetof(TweenVectorStandardFactory_BP_JoinTweenScaleActorBy, ReturnValue) == 0x000038, "Member 'TweenVectorStandardFactory_BP_JoinTweenScaleActorBy::ReturnValue' has a wrong offset!");

// Function TweenMaker.TweenVectorStandardFactory.BP_JoinTweenScaleActorTo
// 0x0040 (0x0040 - 0x0000)
struct TweenVectorStandardFactory_BP_JoinTweenScaleActorTo final
{
public:
	class UTweenContainer*                        TweenContainer;                                    // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 TweenTarget;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                To;                                                // 0x0010(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Duration;                                          // 0x001C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETweenEaseType                                EaseType;                                          // 0x0020(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETweenSpace                                   TweenSpace;                                        // 0x0021(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          DeleteTweenOnHit;                                  // 0x0022(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          DeleteTweenOnOverlap;                              // 0x0023(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Delay;                                             // 0x0024(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TimeScale;                                         // 0x0028(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          TweenWhileGameIsPaused;                            // 0x002C(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2D[0x3];                                       // 0x002D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         SequenceIndex;                                     // 0x0030(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_34[0x4];                                       // 0x0034(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UTweenVector*                           ReturnValue;                                       // 0x0038(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TweenVectorStandardFactory_BP_JoinTweenScaleActorTo) == 0x000008, "Wrong alignment on TweenVectorStandardFactory_BP_JoinTweenScaleActorTo");
static_assert(sizeof(TweenVectorStandardFactory_BP_JoinTweenScaleActorTo) == 0x000040, "Wrong size on TweenVectorStandardFactory_BP_JoinTweenScaleActorTo");
static_assert(offsetof(TweenVectorStandardFactory_BP_JoinTweenScaleActorTo, TweenContainer) == 0x000000, "Member 'TweenVectorStandardFactory_BP_JoinTweenScaleActorTo::TweenContainer' has a wrong offset!");
static_assert(offsetof(TweenVectorStandardFactory_BP_JoinTweenScaleActorTo, TweenTarget) == 0x000008, "Member 'TweenVectorStandardFactory_BP_JoinTweenScaleActorTo::TweenTarget' has a wrong offset!");
static_assert(offsetof(TweenVectorStandardFactory_BP_JoinTweenScaleActorTo, To) == 0x000010, "Member 'TweenVectorStandardFactory_BP_JoinTweenScaleActorTo::To' has a wrong offset!");
static_assert(offsetof(TweenVectorStandardFactory_BP_JoinTweenScaleActorTo, Duration) == 0x00001C, "Member 'TweenVectorStandardFactory_BP_JoinTweenScaleActorTo::Duration' has a wrong offset!");
static_assert(offsetof(TweenVectorStandardFactory_BP_JoinTweenScaleActorTo, EaseType) == 0x000020, "Member 'TweenVectorStandardFactory_BP_JoinTweenScaleActorTo::EaseType' has a wrong offset!");
static_assert(offsetof(TweenVectorStandardFactory_BP_JoinTweenScaleActorTo, TweenSpace) == 0x000021, "Member 'TweenVectorStandardFactory_BP_JoinTweenScaleActorTo::TweenSpace' has a wrong offset!");
static_assert(offsetof(TweenVectorStandardFactory_BP_JoinTweenScaleActorTo, DeleteTweenOnHit) == 0x000022, "Member 'TweenVectorStandardFactory_BP_JoinTweenScaleActorTo::DeleteTweenOnHit' has a wrong offset!");
static_assert(offsetof(TweenVectorStandardFactory_BP_JoinTweenScaleActorTo, DeleteTweenOnOverlap) == 0x000023, "Member 'TweenVectorStandardFactory_BP_JoinTweenScaleActorTo::DeleteTweenOnOverlap' has a wrong offset!");
static_assert(offsetof(TweenVectorStandardFactory_BP_JoinTweenScaleActorTo, Delay) == 0x000024, "Member 'TweenVectorStandardFactory_BP_JoinTweenScaleActorTo::Delay' has a wrong offset!");
static_assert(offsetof(TweenVectorStandardFactory_BP_JoinTweenScaleActorTo, TimeScale) == 0x000028, "Member 'TweenVectorStandardFactory_BP_JoinTweenScaleActorTo::TimeScale' has a wrong offset!");
static_assert(offsetof(TweenVectorStandardFactory_BP_JoinTweenScaleActorTo, TweenWhileGameIsPaused) == 0x00002C, "Member 'TweenVectorStandardFactory_BP_JoinTweenScaleActorTo::TweenWhileGameIsPaused' has a wrong offset!");
static_assert(offsetof(TweenVectorStandardFactory_BP_JoinTweenScaleActorTo, SequenceIndex) == 0x000030, "Member 'TweenVectorStandardFactory_BP_JoinTweenScaleActorTo::SequenceIndex' has a wrong offset!");
static_assert(offsetof(TweenVectorStandardFactory_BP_JoinTweenScaleActorTo, ReturnValue) == 0x000038, "Member 'TweenVectorStandardFactory_BP_JoinTweenScaleActorTo::ReturnValue' has a wrong offset!");

// Function TweenMaker.TweenVectorStandardFactory.BP_JoinTweenScaleSceneComponentBy
// 0x0040 (0x0040 - 0x0000)
struct TweenVectorStandardFactory_BP_JoinTweenScaleSceneComponentBy final
{
public:
	class UTweenContainer*                        TweenContainer;                                    // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USceneComponent*                        TweenTarget;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, InstancedReference, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                bY;                                                // 0x0010(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Duration;                                          // 0x001C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETweenEaseType                                EaseType;                                          // 0x0020(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          DeleteTweenOnHit;                                  // 0x0021(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          DeleteTweenOnOverlap;                              // 0x0022(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_23[0x1];                                       // 0x0023(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Delay;                                             // 0x0024(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TimeScale;                                         // 0x0028(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          TweenWhileGameIsPaused;                            // 0x002C(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2D[0x3];                                       // 0x002D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         SequenceIndex;                                     // 0x0030(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_34[0x4];                                       // 0x0034(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UTweenVector*                           ReturnValue;                                       // 0x0038(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TweenVectorStandardFactory_BP_JoinTweenScaleSceneComponentBy) == 0x000008, "Wrong alignment on TweenVectorStandardFactory_BP_JoinTweenScaleSceneComponentBy");
static_assert(sizeof(TweenVectorStandardFactory_BP_JoinTweenScaleSceneComponentBy) == 0x000040, "Wrong size on TweenVectorStandardFactory_BP_JoinTweenScaleSceneComponentBy");
static_assert(offsetof(TweenVectorStandardFactory_BP_JoinTweenScaleSceneComponentBy, TweenContainer) == 0x000000, "Member 'TweenVectorStandardFactory_BP_JoinTweenScaleSceneComponentBy::TweenContainer' has a wrong offset!");
static_assert(offsetof(TweenVectorStandardFactory_BP_JoinTweenScaleSceneComponentBy, TweenTarget) == 0x000008, "Member 'TweenVectorStandardFactory_BP_JoinTweenScaleSceneComponentBy::TweenTarget' has a wrong offset!");
static_assert(offsetof(TweenVectorStandardFactory_BP_JoinTweenScaleSceneComponentBy, bY) == 0x000010, "Member 'TweenVectorStandardFactory_BP_JoinTweenScaleSceneComponentBy::bY' has a wrong offset!");
static_assert(offsetof(TweenVectorStandardFactory_BP_JoinTweenScaleSceneComponentBy, Duration) == 0x00001C, "Member 'TweenVectorStandardFactory_BP_JoinTweenScaleSceneComponentBy::Duration' has a wrong offset!");
static_assert(offsetof(TweenVectorStandardFactory_BP_JoinTweenScaleSceneComponentBy, EaseType) == 0x000020, "Member 'TweenVectorStandardFactory_BP_JoinTweenScaleSceneComponentBy::EaseType' has a wrong offset!");
static_assert(offsetof(TweenVectorStandardFactory_BP_JoinTweenScaleSceneComponentBy, DeleteTweenOnHit) == 0x000021, "Member 'TweenVectorStandardFactory_BP_JoinTweenScaleSceneComponentBy::DeleteTweenOnHit' has a wrong offset!");
static_assert(offsetof(TweenVectorStandardFactory_BP_JoinTweenScaleSceneComponentBy, DeleteTweenOnOverlap) == 0x000022, "Member 'TweenVectorStandardFactory_BP_JoinTweenScaleSceneComponentBy::DeleteTweenOnOverlap' has a wrong offset!");
static_assert(offsetof(TweenVectorStandardFactory_BP_JoinTweenScaleSceneComponentBy, Delay) == 0x000024, "Member 'TweenVectorStandardFactory_BP_JoinTweenScaleSceneComponentBy::Delay' has a wrong offset!");
static_assert(offsetof(TweenVectorStandardFactory_BP_JoinTweenScaleSceneComponentBy, TimeScale) == 0x000028, "Member 'TweenVectorStandardFactory_BP_JoinTweenScaleSceneComponentBy::TimeScale' has a wrong offset!");
static_assert(offsetof(TweenVectorStandardFactory_BP_JoinTweenScaleSceneComponentBy, TweenWhileGameIsPaused) == 0x00002C, "Member 'TweenVectorStandardFactory_BP_JoinTweenScaleSceneComponentBy::TweenWhileGameIsPaused' has a wrong offset!");
static_assert(offsetof(TweenVectorStandardFactory_BP_JoinTweenScaleSceneComponentBy, SequenceIndex) == 0x000030, "Member 'TweenVectorStandardFactory_BP_JoinTweenScaleSceneComponentBy::SequenceIndex' has a wrong offset!");
static_assert(offsetof(TweenVectorStandardFactory_BP_JoinTweenScaleSceneComponentBy, ReturnValue) == 0x000038, "Member 'TweenVectorStandardFactory_BP_JoinTweenScaleSceneComponentBy::ReturnValue' has a wrong offset!");

// Function TweenMaker.TweenVectorStandardFactory.BP_JoinTweenScaleSceneComponentTo
// 0x0040 (0x0040 - 0x0000)
struct TweenVectorStandardFactory_BP_JoinTweenScaleSceneComponentTo final
{
public:
	class UTweenContainer*                        TweenContainer;                                    // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USceneComponent*                        TweenTarget;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, InstancedReference, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                To;                                                // 0x0010(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Duration;                                          // 0x001C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETweenEaseType                                EaseType;                                          // 0x0020(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETweenSpace                                   TweenSpace;                                        // 0x0021(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          DeleteTweenOnHit;                                  // 0x0022(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          DeleteTweenOnOverlap;                              // 0x0023(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Delay;                                             // 0x0024(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TimeScale;                                         // 0x0028(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          TweenWhileGameIsPaused;                            // 0x002C(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2D[0x3];                                       // 0x002D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         SequenceIndex;                                     // 0x0030(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_34[0x4];                                       // 0x0034(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UTweenVector*                           ReturnValue;                                       // 0x0038(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TweenVectorStandardFactory_BP_JoinTweenScaleSceneComponentTo) == 0x000008, "Wrong alignment on TweenVectorStandardFactory_BP_JoinTweenScaleSceneComponentTo");
static_assert(sizeof(TweenVectorStandardFactory_BP_JoinTweenScaleSceneComponentTo) == 0x000040, "Wrong size on TweenVectorStandardFactory_BP_JoinTweenScaleSceneComponentTo");
static_assert(offsetof(TweenVectorStandardFactory_BP_JoinTweenScaleSceneComponentTo, TweenContainer) == 0x000000, "Member 'TweenVectorStandardFactory_BP_JoinTweenScaleSceneComponentTo::TweenContainer' has a wrong offset!");
static_assert(offsetof(TweenVectorStandardFactory_BP_JoinTweenScaleSceneComponentTo, TweenTarget) == 0x000008, "Member 'TweenVectorStandardFactory_BP_JoinTweenScaleSceneComponentTo::TweenTarget' has a wrong offset!");
static_assert(offsetof(TweenVectorStandardFactory_BP_JoinTweenScaleSceneComponentTo, To) == 0x000010, "Member 'TweenVectorStandardFactory_BP_JoinTweenScaleSceneComponentTo::To' has a wrong offset!");
static_assert(offsetof(TweenVectorStandardFactory_BP_JoinTweenScaleSceneComponentTo, Duration) == 0x00001C, "Member 'TweenVectorStandardFactory_BP_JoinTweenScaleSceneComponentTo::Duration' has a wrong offset!");
static_assert(offsetof(TweenVectorStandardFactory_BP_JoinTweenScaleSceneComponentTo, EaseType) == 0x000020, "Member 'TweenVectorStandardFactory_BP_JoinTweenScaleSceneComponentTo::EaseType' has a wrong offset!");
static_assert(offsetof(TweenVectorStandardFactory_BP_JoinTweenScaleSceneComponentTo, TweenSpace) == 0x000021, "Member 'TweenVectorStandardFactory_BP_JoinTweenScaleSceneComponentTo::TweenSpace' has a wrong offset!");
static_assert(offsetof(TweenVectorStandardFactory_BP_JoinTweenScaleSceneComponentTo, DeleteTweenOnHit) == 0x000022, "Member 'TweenVectorStandardFactory_BP_JoinTweenScaleSceneComponentTo::DeleteTweenOnHit' has a wrong offset!");
static_assert(offsetof(TweenVectorStandardFactory_BP_JoinTweenScaleSceneComponentTo, DeleteTweenOnOverlap) == 0x000023, "Member 'TweenVectorStandardFactory_BP_JoinTweenScaleSceneComponentTo::DeleteTweenOnOverlap' has a wrong offset!");
static_assert(offsetof(TweenVectorStandardFactory_BP_JoinTweenScaleSceneComponentTo, Delay) == 0x000024, "Member 'TweenVectorStandardFactory_BP_JoinTweenScaleSceneComponentTo::Delay' has a wrong offset!");
static_assert(offsetof(TweenVectorStandardFactory_BP_JoinTweenScaleSceneComponentTo, TimeScale) == 0x000028, "Member 'TweenVectorStandardFactory_BP_JoinTweenScaleSceneComponentTo::TimeScale' has a wrong offset!");
static_assert(offsetof(TweenVectorStandardFactory_BP_JoinTweenScaleSceneComponentTo, TweenWhileGameIsPaused) == 0x00002C, "Member 'TweenVectorStandardFactory_BP_JoinTweenScaleSceneComponentTo::TweenWhileGameIsPaused' has a wrong offset!");
static_assert(offsetof(TweenVectorStandardFactory_BP_JoinTweenScaleSceneComponentTo, SequenceIndex) == 0x000030, "Member 'TweenVectorStandardFactory_BP_JoinTweenScaleSceneComponentTo::SequenceIndex' has a wrong offset!");
static_assert(offsetof(TweenVectorStandardFactory_BP_JoinTweenScaleSceneComponentTo, ReturnValue) == 0x000038, "Member 'TweenVectorStandardFactory_BP_JoinTweenScaleSceneComponentTo::ReturnValue' has a wrong offset!");

}

