#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_GameState_Raid

#include "Basic.hpp"

#include "E_TeamsMatchPhase_structs.hpp"
#include "CoreUObject_structs.hpp"
#include "Engine_structs.hpp"
#include "ERaidWinReason_structs.hpp"
#include "BP_GameState_Teams_classes.hpp"
#include "ERaidNotificationType_structs.hpp"


namespace SDK
{

// BlueprintGeneratedClass BP_GameState_Raid.BP_GameState_Raid_C
// 0x0058 (0x0510 - 0x04B8)
class ABP_GameState_Raid_C final : public ABP_GameState_Teams_C
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame_BP_GameState_Raid_C;                // 0x04B8(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	struct FVector                                WorldMin;                                          // 0x04C0(0x000C)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                WorldMax;                                          // 0x04CC(0x000C)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          WorldMinMaxInitialized;                            // 0x04D8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          Last_Two_Minutes_Played;                           // 0x04D9(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          Last_Minute_Played;                                // 0x04DA(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          Last_Ten_Seconds_Played;                           // 0x04DB(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	int32                                         RemainingTimePreRound;                             // 0x04DC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<class ABP_PlayerStart_Raid_C*>         Raid_Attacker_Starts;                              // 0x04E0(0x0010)(Edit, BlueprintVisible, DisableEditOnTemplate, DisableEditOnInstance)
	TArray<class ABP_PlayerStart_Raid_C*>         Raid_Defender_Starts;                              // 0x04F0(0x0010)(Edit, BlueprintVisible, DisableEditOnTemplate, DisableEditOnInstance)
	int32                                         PreMinusRound_Start_Time;                          // 0x0500(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Rounds_To_Win;                                     // 0x0504(0x0004)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ERaidWinReason                                Last_Round_Win_Reason;                             // 0x0508(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

public:
	void ExecuteUbergraph_BP_GameState_Raid(int32 EntryPoint);
	void Handle_Match_Phase(E_TeamsMatchPhase Match_Phase_0);
	void Objective_Spotted();
	void Set_Round_Win_Reason(ERaidWinReason Win_Reason);
	void ReceiveBeginPlay();
	void Notify_Player_Statistics_Changed();
	void New_Round_Started();
	void Players_Update_PreRound_Time_Remaining(int32 Remaining_Time);
	void Set_PreRound_Remaining_Time(int32 Remaining_Time);
	void Last_Ten_Seconds_In_Match();
	void Last_Minute_In_Match();
	void Last_Two_Minutes_In_Match();
	void Players_Update_Time_Remaining(int32 Remaining_Time);
	void Set_Match_Remaining_Time(int32 Remaining_Time);
	void Get_Attacking_Team(class UBP_GSC_Team_Raid_C** Attacking_Team);
	void Get_Defending_Team(class UBP_GSC_Team_Raid_C** Defending_Team);
	void GetWorldMinMax(struct FVector* World_Min, struct FVector* World_Max);
	void Check_Remaining_Time_Sound_Cues();
	void Get_Statistics(TArray<struct FStruct_RaidStatistics>* Statistics);
	void Get_Attacker_Statistics(TArray<struct FStruct_RaidStatistics>* Statistics);
	void Get_Defender_Statistics(TArray<struct FStruct_RaidStatistics>* Statistics);
	void Find_Player_Start_Positions();
	void Get_Winning_and_Losing_Teams(bool* Winner_Found, class UBP_GSC_Team_Raid_C** Winning_Team, class UBP_GSC_Team_Raid_C** Losing_Team, bool* TeamsAreEqual);
	void Show_End_Turn_Notification_To_Player(ERaidWinReason Win_Reason, class ABP_PlayerController_Raid_C* Player_Controller);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BP_GameState_Raid_C">();
	}
	static class ABP_GameState_Raid_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<ABP_GameState_Raid_C>();
	}
};
static_assert(alignof(ABP_GameState_Raid_C) == 0x000008, "Wrong alignment on ABP_GameState_Raid_C");
static_assert(sizeof(ABP_GameState_Raid_C) == 0x000510, "Wrong size on ABP_GameState_Raid_C");
static_assert(offsetof(ABP_GameState_Raid_C, UberGraphFrame_BP_GameState_Raid_C) == 0x0004B8, "Member 'ABP_GameState_Raid_C::UberGraphFrame_BP_GameState_Raid_C' has a wrong offset!");
static_assert(offsetof(ABP_GameState_Raid_C, WorldMin) == 0x0004C0, "Member 'ABP_GameState_Raid_C::WorldMin' has a wrong offset!");
static_assert(offsetof(ABP_GameState_Raid_C, WorldMax) == 0x0004CC, "Member 'ABP_GameState_Raid_C::WorldMax' has a wrong offset!");
static_assert(offsetof(ABP_GameState_Raid_C, WorldMinMaxInitialized) == 0x0004D8, "Member 'ABP_GameState_Raid_C::WorldMinMaxInitialized' has a wrong offset!");
static_assert(offsetof(ABP_GameState_Raid_C, Last_Two_Minutes_Played) == 0x0004D9, "Member 'ABP_GameState_Raid_C::Last_Two_Minutes_Played' has a wrong offset!");
static_assert(offsetof(ABP_GameState_Raid_C, Last_Minute_Played) == 0x0004DA, "Member 'ABP_GameState_Raid_C::Last_Minute_Played' has a wrong offset!");
static_assert(offsetof(ABP_GameState_Raid_C, Last_Ten_Seconds_Played) == 0x0004DB, "Member 'ABP_GameState_Raid_C::Last_Ten_Seconds_Played' has a wrong offset!");
static_assert(offsetof(ABP_GameState_Raid_C, RemainingTimePreRound) == 0x0004DC, "Member 'ABP_GameState_Raid_C::RemainingTimePreRound' has a wrong offset!");
static_assert(offsetof(ABP_GameState_Raid_C, Raid_Attacker_Starts) == 0x0004E0, "Member 'ABP_GameState_Raid_C::Raid_Attacker_Starts' has a wrong offset!");
static_assert(offsetof(ABP_GameState_Raid_C, Raid_Defender_Starts) == 0x0004F0, "Member 'ABP_GameState_Raid_C::Raid_Defender_Starts' has a wrong offset!");
static_assert(offsetof(ABP_GameState_Raid_C, PreMinusRound_Start_Time) == 0x000500, "Member 'ABP_GameState_Raid_C::PreMinusRound_Start_Time' has a wrong offset!");
static_assert(offsetof(ABP_GameState_Raid_C, Rounds_To_Win) == 0x000504, "Member 'ABP_GameState_Raid_C::Rounds_To_Win' has a wrong offset!");
static_assert(offsetof(ABP_GameState_Raid_C, Last_Round_Win_Reason) == 0x000508, "Member 'ABP_GameState_Raid_C::Last_Round_Win_Reason' has a wrong offset!");

}

