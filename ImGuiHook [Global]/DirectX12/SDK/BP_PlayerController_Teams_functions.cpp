#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_PlayerController_Teams

#include "Basic.hpp"

#include "BP_PlayerController_Teams_classes.hpp"
#include "BP_PlayerController_Teams_parameters.hpp"


namespace SDK
{

// Function BP_PlayerController_Teams.BP_PlayerController_Teams_C.ExecuteUbergraph_BP_PlayerController_Teams
// (Final, UbergraphFunction, HasDefaults)
// Parameters:
// int32                                   EntryPoint                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_PlayerController_Teams_C::ExecuteUbergraph_BP_PlayerController_Teams(int32 EntryPoint)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PlayerController_Teams_C", "ExecuteUbergraph_BP_PlayerController_Teams");

	Params::BP_PlayerController_Teams_C_ExecuteUbergraph_BP_PlayerController_Teams Parms{};

	Parms.EntryPoint = EntryPoint;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_PlayerController_Teams.BP_PlayerController_Teams_C.Possessed
// (Net, NetReliable, NetClient, BlueprintCallable, BlueprintEvent)
// Parameters:
// class ABP_Character_C*                  Possessed_Character                                    (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_PlayerController_Teams_C::Possessed(class ABP_Character_C* Possessed_Character)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PlayerController_Teams_C", "Possessed");

	Params::BP_PlayerController_Teams_C_Possessed Parms{};

	Parms.Possessed_Character = Possessed_Character;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_PlayerController_Teams.BP_PlayerController_Teams_C.PossessedServer
// (Net, NetReliable, NetServer, BlueprintCallable, BlueprintEvent)
// Parameters:
// class ABP_Character_C*                  Possessed_Character                                    (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_PlayerController_Teams_C::PossessedServer(class ABP_Character_C* Possessed_Character)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PlayerController_Teams_C", "PossessedServer");

	Params::BP_PlayerController_Teams_C_PossessedServer Parms{};

	Parms.Possessed_Character = Possessed_Character;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_PlayerController_Teams.BP_PlayerController_Teams_C.Died
// (Net, NetReliable, NetMulticast, BlueprintCallable, BlueprintEvent)

void ABP_PlayerController_Teams_C::Died()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PlayerController_Teams_C", "Died");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_PlayerController_Teams.BP_PlayerController_Teams_C.Side Joined
// (Net, NetReliable, NetMulticast, BlueprintCallable, BlueprintEvent)
// Parameters:
// class FName                             Side                                                   (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_PlayerController_Teams_C::Side_Joined(class FName Side)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PlayerController_Teams_C", "Side Joined");

	Params::BP_PlayerController_Teams_C_Side_Joined Parms{};

	Parms.Side = Side;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_PlayerController_Teams.BP_PlayerController_Teams_C.Team Left
// (Net, NetReliable, NetMulticast, BlueprintCallable, BlueprintEvent)
// Parameters:
// class UBP_GSC_Team_C*                   Team                                                   (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_PlayerController_Teams_C::Team_Left(class UBP_GSC_Team_C* Team)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PlayerController_Teams_C", "Team Left");

	Params::BP_PlayerController_Teams_C_Team_Left Parms{};

	Parms.Team = Team;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_PlayerController_Teams.BP_PlayerController_Teams_C.Team Joined
// (Net, NetReliable, NetMulticast, BlueprintCallable, BlueprintEvent)
// Parameters:
// class UBP_GSC_Team_C*                   Team                                                   (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_PlayerController_Teams_C::Team_Joined(class UBP_GSC_Team_C* Team)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PlayerController_Teams_C", "Team Joined");

	Params::BP_PlayerController_Teams_C_Team_Joined Parms{};

	Parms.Team = Team;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_PlayerController_Teams.BP_PlayerController_Teams_C.ShowRewardPopUpDelayed
// (BlueprintCallable, BlueprintEvent)

void ABP_PlayerController_Teams_C::ShowRewardPopUpDelayed()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PlayerController_Teams_C", "ShowRewardPopUpDelayed");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_PlayerController_Teams.BP_PlayerController_Teams_C.ShowRewardPopUp
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// class UUI_WinnerScreen_Base_C*          WinnerScreenWidget                                     (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_PlayerController_Teams_C::ShowRewardPopUp(class UUI_WinnerScreen_Base_C* WinnerScreenWidget)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PlayerController_Teams_C", "ShowRewardPopUp");

	Params::BP_PlayerController_Teams_C_ShowRewardPopUp Parms{};

	Parms.WinnerScreenWidget = WinnerScreenWidget;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_PlayerController_Teams.BP_PlayerController_Teams_C.StoreRewardInfo
// (Net, NetReliable, NetClient, BlueprintCallable, BlueprintEvent)
// Parameters:
// class FName                             BattlepassReward                                       (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FUserMatchReward                 Rewards                                                (BlueprintVisible, BlueprintReadOnly, Parm)

void ABP_PlayerController_Teams_C::StoreRewardInfo(class FName BattlepassReward, const struct FUserMatchReward& Rewards)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PlayerController_Teams_C", "StoreRewardInfo");

	Params::BP_PlayerController_Teams_C_StoreRewardInfo Parms{};

	Parms.BattlepassReward = BattlepassReward;
	Parms.Rewards = std::move(Rewards);

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_PlayerController_Teams.BP_PlayerController_Teams_C.Server_RewardsReceived
// (Net, NetReliable, NetServer, BlueprintCallable, BlueprintEvent)

void ABP_PlayerController_Teams_C::Server_RewardsReceived()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PlayerController_Teams_C", "Server_RewardsReceived");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_PlayerController_Teams.BP_PlayerController_Teams_C.Client_CheckForReceivedRewards
// (Net, NetReliable, NetClient, BlueprintCallable, BlueprintEvent)
// Parameters:
// TMap<class UClass*, int32>              MatchRewards_0                                         (BlueprintVisible, BlueprintReadOnly, Parm)
// int32                                   Match_XP_Reward_0                                      (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_PlayerController_Teams_C::Client_CheckForReceivedRewards(const TMap<class UClass*, int32>& MatchRewards_0, int32 Match_XP_Reward_0)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PlayerController_Teams_C", "Client_CheckForReceivedRewards");

	Params::BP_PlayerController_Teams_C_Client_CheckForReceivedRewards Parms{};

	Parms.MatchRewards_0 = std::move(MatchRewards_0);
	Parms.Match_XP_Reward_0 = Match_XP_Reward_0;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_PlayerController_Teams.BP_PlayerController_Teams_C.Server_CheckClientForReceivedRewards
// (BlueprintCallable, BlueprintEvent)

void ABP_PlayerController_Teams_C::Server_CheckClientForReceivedRewards()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PlayerController_Teams_C", "Server_CheckClientForReceivedRewards");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_PlayerController_Teams.BP_PlayerController_Teams_C.StoreRewardInfoWithCheck
// (Net, NetReliable, NetMulticast, BlueprintCallable, BlueprintEvent)
// Parameters:
// class FName                             BattlepassReward                                       (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FUserMatchReward                 Rewards                                                (BlueprintVisible, BlueprintReadOnly, Parm)

void ABP_PlayerController_Teams_C::StoreRewardInfoWithCheck(class FName BattlepassReward, const struct FUserMatchReward& Rewards)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PlayerController_Teams_C", "StoreRewardInfoWithCheck");

	Params::BP_PlayerController_Teams_C_StoreRewardInfoWithCheck Parms{};

	Parms.BattlepassReward = BattlepassReward;
	Parms.Rewards = std::move(Rewards);

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_PlayerController_Teams.BP_PlayerController_Teams_C.Show Reward PopUp
// (Net, NetReliable, NetClient, BlueprintCallable, BlueprintEvent)
// Parameters:
// class FName                             BattlePass_Reward                                      (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FUserMatchReward                 Reward                                                 (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm)

void ABP_PlayerController_Teams_C::Show_Reward_PopUp(class FName BattlePass_Reward, const struct FUserMatchReward& Reward)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PlayerController_Teams_C", "Show Reward PopUp");

	Params::BP_PlayerController_Teams_C_Show_Reward_PopUp Parms{};

	Parms.BattlePass_Reward = BattlePass_Reward;
	Parms.Reward = std::move(Reward);

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_PlayerController_Teams.BP_PlayerController_Teams_C.GetXPReward
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// class FName                             BPReward                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   _XP                                                    (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_PlayerController_Teams_C::GetXPReward(class FName BPReward, int32* _XP)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PlayerController_Teams_C", "GetXPReward");

	Params::BP_PlayerController_Teams_C_GetXPReward Parms{};

	Parms.BPReward = BPReward;

	UObject::ProcessEvent(Func, &Parms);

	if (_XP != nullptr)
		*_XP = Parms._XP;
}


// Function BP_PlayerController_Teams.BP_PlayerController_Teams_C.Get Cloud Reward
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// struct FUserMatchReward                 Reward                                                 (BlueprintVisible, BlueprintReadOnly, Parm)
// TMap<class UClass*, int32>              Item_Reward                                            (Parm, OutParm)

void ABP_PlayerController_Teams_C::Get_Cloud_Reward(const struct FUserMatchReward& Reward, TMap<class UClass*, int32>* Item_Reward)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PlayerController_Teams_C", "Get Cloud Reward");

	Params::BP_PlayerController_Teams_C_Get_Cloud_Reward Parms{};

	Parms.Reward = std::move(Reward);

	UObject::ProcessEvent(Func, &Parms);

	if (Item_Reward != nullptr)
		*Item_Reward = std::move(Parms.Item_Reward);
}


// Function BP_PlayerController_Teams.BP_PlayerController_Teams_C.Try Send Spawned Anylitics
// (BlueprintCallable, BlueprintEvent)

void ABP_PlayerController_Teams_C::Try_Send_Spawned_Anylitics()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PlayerController_Teams_C", "Try Send Spawned Anylitics");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_PlayerController_Teams.BP_PlayerController_Teams_C.ReceiveEndPlay
// (Event, Protected, BlueprintEvent)
// Parameters:
// EEndPlayReason                          EndPlayReason                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_PlayerController_Teams_C::ReceiveEndPlay(EEndPlayReason EndPlayReason)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PlayerController_Teams_C", "ReceiveEndPlay");

	Params::BP_PlayerController_Teams_C_ReceiveEndPlay Parms{};

	Parms.EndPlayReason = EndPlayReason;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_PlayerController_Teams.BP_PlayerController_Teams_C.ReceiveBeginPlay
// (Event, Protected, BlueprintEvent)

void ABP_PlayerController_Teams_C::ReceiveBeginPlay()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PlayerController_Teams_C", "ReceiveBeginPlay");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_PlayerController_Teams.BP_PlayerController_Teams_C.UserConstructionScript
// (Event, Public, BlueprintCallable, BlueprintEvent)

void ABP_PlayerController_Teams_C::UserConstructionScript()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PlayerController_Teams_C", "UserConstructionScript");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_PlayerController_Teams.BP_PlayerController_Teams_C.Is Player Ready for Analytics
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    Is_Client_Ready                                        (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ABP_PlayerController_Teams_C::Is_Player_Ready_for_Analytics(bool* Is_Client_Ready)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PlayerController_Teams_C", "Is Player Ready for Analytics");

	Params::BP_PlayerController_Teams_C_Is_Player_Ready_for_Analytics Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Is_Client_Ready != nullptr)
		*Is_Client_Ready = Parms.Is_Client_Ready;
}


// Function BP_PlayerController_Teams.BP_PlayerController_Teams_C.GetGameScenario
// (Event, Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure, Const)
// Parameters:
// EGameScenario                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

EGameScenario ABP_PlayerController_Teams_C::GetGameScenario() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PlayerController_Teams_C", "GetGameScenario");

	Params::BP_PlayerController_Teams_C_GetGameScenario Parms{};

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}

}

