#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_GS_SubLevelManager

#include "Basic.hpp"

#include "Flame_structs.hpp"
#include "Engine_structs.hpp"
#include "BP_GameStateComponent_Base_classes.hpp"


namespace SDK
{

// BlueprintGeneratedClass BP_GS_SubLevelManager.BP_GS_SubLevelManager_C
// 0x00D0 (0x0180 - 0x00B0)
class UBP_GS_SubLevelManager_C final : public UBP_GameStateComponent_Base_C
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x00B0(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class FString                                 CurrentLevelName;                                  // 0x00B8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, HasGetValueTypeHash)
	class UClass*                                 CurrentGameMode;                                   // 0x00C8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<class FName>                           ActiveLevels;                                      // 0x00D0(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	bool                                          bShowDebug;                                        // 0x00E0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          Load_On_Begin_Play;                                // 0x00E1(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          ShouldBlockOnLoad;                                 // 0x00E2(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          MakeVisibleAfterLoad;                              // 0x00E3(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_E4[0x4];                                       // 0x00E4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	FMulticastInlineDelegateProperty_             SubLevelManager_Initialize;                        // 0x00E8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	FMulticastInlineDelegateProperty_             SubLevelManager_InitializeComplete;                // 0x00F8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	bool                                          IsLoadingLevel;                                    // 0x0108(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          IsUnloadingLevel;                                  // 0x0109(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          InitComplete;                                      // 0x010A(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_10B[0x1];                                      // 0x010B(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         LoadTasksRemaining;                                // 0x010C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         UnloadTasksRemaining;                              // 0x0110(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          AllTasksDispatched;                                // 0x0114(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_115[0x3];                                      // 0x0115(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class FName>                           SubLevelsToLoad;                                   // 0x0118(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	int32                                         SubLevel_Index;                                    // 0x0128(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bLogDebug;                                         // 0x012C(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	ESublevelTheme                                Theme;                                             // 0x012D(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_12E[0x2];                                      // 0x012E(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         ThemeSublevel_Index;                               // 0x0130(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          WaitingForLoadTheme;                               // 0x0134(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_135[0x3];                                      // 0x0135(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class FName>                           UnloadTheme;                                       // 0x0138(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	TArray<class FName>                           LoadTheme;                                         // 0x0148(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	struct FSubLevel                              NewVar_0;                                          // 0x0158(0x0028)(Edit, BlueprintVisible, DisableEditOnInstance)

public:
	void SubLevelManager_Initialize__DelegateSignature();
	void SubLevelManager_InitializeComplete__DelegateSignature(bool WasSuccess);
	void ExecuteUbergraph_BP_GS_SubLevelManager(int32 EntryPoint);
	void LoadStreamLevelsManual(class UClass* GameMode);
	void CheckThemeLoad();
	void SyncUnloadThemeLevels(const int32 Index_0);
	void SyncLoadThemeLevels(const int32 Index_0);
	void InitThemeLevels(ESublevelTheme Theme_0);
	void Check_If_Complete();
	void LoadNext();
	void Init_Level_Streaming();
	void Unload_SubLevel(class FName LevelName, bool bShouldBlockOnUnload);
	void Load_SubLevel(class FName LevelName, bool bMakeVisibleAfterLoad, bool bShouldBlockOnLoad);
	void ReceiveBeginPlay();
	void GetLevelsFromTable(class FName RowName, class UClass* ParentClass, class FName Theme_0, bool* Success, TArray<class FName>* Load_Levels, TArray<class FName>* Unload_Levels);
	void GetActiveSubLevels(TArray<class FName>* ActiveLevels_0);
	void AreAllLevelsLoaded(bool* All_Loaded);
	void IsLevelLoaded(class FName PackageName, bool* IsValid, bool* IsLoaded);
	void AreAllLevelsVisible(bool* AreAllLevelVisible);
	void GetDebugString(class FString* DebugString);
	void SetValidManualCameraFade(float InFadeAmount);
	void GetThemeLevelsFromTable(class FName LevelName, ESublevelTheme Theme_0, bool* Success, TArray<class FName>* Load, TArray<class FName>* Unload, bool* OverrideLightScenario);
	void DebugPrint(class FName Theme_0);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BP_GS_SubLevelManager_C">();
	}
	static class UBP_GS_SubLevelManager_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UBP_GS_SubLevelManager_C>();
	}
};
static_assert(alignof(UBP_GS_SubLevelManager_C) == 0x000008, "Wrong alignment on UBP_GS_SubLevelManager_C");
static_assert(sizeof(UBP_GS_SubLevelManager_C) == 0x000180, "Wrong size on UBP_GS_SubLevelManager_C");
static_assert(offsetof(UBP_GS_SubLevelManager_C, UberGraphFrame) == 0x0000B0, "Member 'UBP_GS_SubLevelManager_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(UBP_GS_SubLevelManager_C, CurrentLevelName) == 0x0000B8, "Member 'UBP_GS_SubLevelManager_C::CurrentLevelName' has a wrong offset!");
static_assert(offsetof(UBP_GS_SubLevelManager_C, CurrentGameMode) == 0x0000C8, "Member 'UBP_GS_SubLevelManager_C::CurrentGameMode' has a wrong offset!");
static_assert(offsetof(UBP_GS_SubLevelManager_C, ActiveLevels) == 0x0000D0, "Member 'UBP_GS_SubLevelManager_C::ActiveLevels' has a wrong offset!");
static_assert(offsetof(UBP_GS_SubLevelManager_C, bShowDebug) == 0x0000E0, "Member 'UBP_GS_SubLevelManager_C::bShowDebug' has a wrong offset!");
static_assert(offsetof(UBP_GS_SubLevelManager_C, Load_On_Begin_Play) == 0x0000E1, "Member 'UBP_GS_SubLevelManager_C::Load_On_Begin_Play' has a wrong offset!");
static_assert(offsetof(UBP_GS_SubLevelManager_C, ShouldBlockOnLoad) == 0x0000E2, "Member 'UBP_GS_SubLevelManager_C::ShouldBlockOnLoad' has a wrong offset!");
static_assert(offsetof(UBP_GS_SubLevelManager_C, MakeVisibleAfterLoad) == 0x0000E3, "Member 'UBP_GS_SubLevelManager_C::MakeVisibleAfterLoad' has a wrong offset!");
static_assert(offsetof(UBP_GS_SubLevelManager_C, SubLevelManager_Initialize) == 0x0000E8, "Member 'UBP_GS_SubLevelManager_C::SubLevelManager_Initialize' has a wrong offset!");
static_assert(offsetof(UBP_GS_SubLevelManager_C, SubLevelManager_InitializeComplete) == 0x0000F8, "Member 'UBP_GS_SubLevelManager_C::SubLevelManager_InitializeComplete' has a wrong offset!");
static_assert(offsetof(UBP_GS_SubLevelManager_C, IsLoadingLevel) == 0x000108, "Member 'UBP_GS_SubLevelManager_C::IsLoadingLevel' has a wrong offset!");
static_assert(offsetof(UBP_GS_SubLevelManager_C, IsUnloadingLevel) == 0x000109, "Member 'UBP_GS_SubLevelManager_C::IsUnloadingLevel' has a wrong offset!");
static_assert(offsetof(UBP_GS_SubLevelManager_C, InitComplete) == 0x00010A, "Member 'UBP_GS_SubLevelManager_C::InitComplete' has a wrong offset!");
static_assert(offsetof(UBP_GS_SubLevelManager_C, LoadTasksRemaining) == 0x00010C, "Member 'UBP_GS_SubLevelManager_C::LoadTasksRemaining' has a wrong offset!");
static_assert(offsetof(UBP_GS_SubLevelManager_C, UnloadTasksRemaining) == 0x000110, "Member 'UBP_GS_SubLevelManager_C::UnloadTasksRemaining' has a wrong offset!");
static_assert(offsetof(UBP_GS_SubLevelManager_C, AllTasksDispatched) == 0x000114, "Member 'UBP_GS_SubLevelManager_C::AllTasksDispatched' has a wrong offset!");
static_assert(offsetof(UBP_GS_SubLevelManager_C, SubLevelsToLoad) == 0x000118, "Member 'UBP_GS_SubLevelManager_C::SubLevelsToLoad' has a wrong offset!");
static_assert(offsetof(UBP_GS_SubLevelManager_C, SubLevel_Index) == 0x000128, "Member 'UBP_GS_SubLevelManager_C::SubLevel_Index' has a wrong offset!");
static_assert(offsetof(UBP_GS_SubLevelManager_C, bLogDebug) == 0x00012C, "Member 'UBP_GS_SubLevelManager_C::bLogDebug' has a wrong offset!");
static_assert(offsetof(UBP_GS_SubLevelManager_C, Theme) == 0x00012D, "Member 'UBP_GS_SubLevelManager_C::Theme' has a wrong offset!");
static_assert(offsetof(UBP_GS_SubLevelManager_C, ThemeSublevel_Index) == 0x000130, "Member 'UBP_GS_SubLevelManager_C::ThemeSublevel_Index' has a wrong offset!");
static_assert(offsetof(UBP_GS_SubLevelManager_C, WaitingForLoadTheme) == 0x000134, "Member 'UBP_GS_SubLevelManager_C::WaitingForLoadTheme' has a wrong offset!");
static_assert(offsetof(UBP_GS_SubLevelManager_C, UnloadTheme) == 0x000138, "Member 'UBP_GS_SubLevelManager_C::UnloadTheme' has a wrong offset!");
static_assert(offsetof(UBP_GS_SubLevelManager_C, LoadTheme) == 0x000148, "Member 'UBP_GS_SubLevelManager_C::LoadTheme' has a wrong offset!");
static_assert(offsetof(UBP_GS_SubLevelManager_C, NewVar_0) == 0x000158, "Member 'UBP_GS_SubLevelManager_C::NewVar_0' has a wrong offset!");

}

