#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_SRTarget_TrafficSign

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "BP_SRTarget_PhysicsBase_classes.hpp"


namespace SDK
{

// BlueprintGeneratedClass BP_SRTarget_TrafficSign.BP_SRTarget_TrafficSign_C
// 0x0040 (0x0340 - 0x0300)
class ABP_SRTarget_TrafficSign_C final : public ABP_SRTarget_PhysicsBase_C
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame_BP_SRTarget_TrafficSign_C;          // 0x0300(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class UStaticMeshComponent*                   Sign;                                              // 0x0308(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UStaticMeshComponent*                   Pole;                                              // 0x0310(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	bool                                          IsSimulatingPhysics;                               // 0x0318(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_319[0x7];                                      // 0x0319(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class USoundBase*                             BulletImpactSound;                                 // 0x0320(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class USoundBase*                             GroundImpactSound;                                 // 0x0328(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         HitSoundVelocityMin;                               // 0x0330(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         HitSoundVelocityMax;                               // 0x0334(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UAudioComponent*                        ImpactAudioComponent;                              // 0x0338(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

public:
	void ExecuteUbergraph_BP_SRTarget_TrafficSign(int32 EntryPoint);
	void Reset_Hit();
	void Wait_For_Next_Hits();
	void BndEvt__Sign_K2Node_ComponentBoundEvent_0_ComponentHitSignature__DelegateSignature(class UPrimitiveComponent* HitComponent, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, const struct FVector& NormalImpulse, const struct FHitResult& Hit);
	void SetTargetActivity(bool IsActive_0);
	void MulticastedPlayGongSound(class UPrimitiveComponent* HitComponent);
	void MulticastedSetSimulatePhysics(bool bSimulate);
	void ResetTargetServer();
	void ReceivePointDamage(float Damage, const class UDamageType* DamageType, const struct FVector& HitLocation, const struct FVector& HitNormal, class UPrimitiveComponent* HitComponent, class FName BoneName, const struct FVector& ShotFromDirection, class AController* InstigatedBy, class AActor* DamageCauser, const struct FHitResult& HitInfo);
	void SignHit(class UPrimitiveComponent* HitComponent, const struct FVector& HitLocation, const struct FVector& ShotFromDirection, const class UDamageType* DamageType, float Damage);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BP_SRTarget_TrafficSign_C">();
	}
	static class ABP_SRTarget_TrafficSign_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<ABP_SRTarget_TrafficSign_C>();
	}
};
static_assert(alignof(ABP_SRTarget_TrafficSign_C) == 0x000008, "Wrong alignment on ABP_SRTarget_TrafficSign_C");
static_assert(sizeof(ABP_SRTarget_TrafficSign_C) == 0x000340, "Wrong size on ABP_SRTarget_TrafficSign_C");
static_assert(offsetof(ABP_SRTarget_TrafficSign_C, UberGraphFrame_BP_SRTarget_TrafficSign_C) == 0x000300, "Member 'ABP_SRTarget_TrafficSign_C::UberGraphFrame_BP_SRTarget_TrafficSign_C' has a wrong offset!");
static_assert(offsetof(ABP_SRTarget_TrafficSign_C, Sign) == 0x000308, "Member 'ABP_SRTarget_TrafficSign_C::Sign' has a wrong offset!");
static_assert(offsetof(ABP_SRTarget_TrafficSign_C, Pole) == 0x000310, "Member 'ABP_SRTarget_TrafficSign_C::Pole' has a wrong offset!");
static_assert(offsetof(ABP_SRTarget_TrafficSign_C, IsSimulatingPhysics) == 0x000318, "Member 'ABP_SRTarget_TrafficSign_C::IsSimulatingPhysics' has a wrong offset!");
static_assert(offsetof(ABP_SRTarget_TrafficSign_C, BulletImpactSound) == 0x000320, "Member 'ABP_SRTarget_TrafficSign_C::BulletImpactSound' has a wrong offset!");
static_assert(offsetof(ABP_SRTarget_TrafficSign_C, GroundImpactSound) == 0x000328, "Member 'ABP_SRTarget_TrafficSign_C::GroundImpactSound' has a wrong offset!");
static_assert(offsetof(ABP_SRTarget_TrafficSign_C, HitSoundVelocityMin) == 0x000330, "Member 'ABP_SRTarget_TrafficSign_C::HitSoundVelocityMin' has a wrong offset!");
static_assert(offsetof(ABP_SRTarget_TrafficSign_C, HitSoundVelocityMax) == 0x000334, "Member 'ABP_SRTarget_TrafficSign_C::HitSoundVelocityMax' has a wrong offset!");
static_assert(offsetof(ABP_SRTarget_TrafficSign_C, ImpactAudioComponent) == 0x000338, "Member 'ABP_SRTarget_TrafficSign_C::ImpactAudioComponent' has a wrong offset!");

}

