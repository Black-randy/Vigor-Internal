#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_GameMode_GunFight

#include "Basic.hpp"

#include "EGunFightWinReason_structs.hpp"
#include "Flame_structs.hpp"
#include "Engine_structs.hpp"
#include "BP_GameMode_Teams_classes.hpp"
#include "EGunFightRole_structs.hpp"
#include "EGunFight_LoadoutState_structs.hpp"
#include "FlameUI_structs.hpp"


namespace SDK
{

// BlueprintGeneratedClass BP_GameMode_GunFight.BP_GameMode_GunFight_C
// 0x0370 (0x0848 - 0x04D8)
class ABP_GameMode_GunFight_C final : public ABP_GameMode_Teams_C
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame_BP_GameMode_GunFight_C;             // 0x04D8(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class UBP_ADM_ActorLocationsManager_C*        BP_ADM_ActorLocationsManager;                      // 0x04E0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UBP_ADM_LandMine_GMComponent_C*         BP_ADM_LandMine_GMComponent;                       // 0x04E8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UBP_MatchInfoComponent_C*               BP_MatchInfoComponent;                             // 0x04F0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	TArray<class ABP_ObjectiveSpawnPoint_GunFight_C*> Objective_Spawn_Positions;                         // 0x04F8(0x0010)(Edit, BlueprintVisible, DisableEditOnTemplate, DisableEditOnInstance)
	class ABP_Objective_GunFight_C*               Objective;                                         // 0x0508(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          ShouldUseLobby;                                    // 0x0510(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_511[0x7];                                      // 0x0511(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTimerHandle                           Round_Timer;                                       // 0x0518(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	float                                         Round_Time;                                        // 0x0520(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Round_Active;                                      // 0x0524(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          Is_Match_In_Progress;                              // 0x0525(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_526[0x2];                                      // 0x0526(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class ABP_PlayerController_GunFight_C*> DelayedPlayersToConnect;                           // 0x0528(0x0010)(Edit, BlueprintVisible, DisableEditOnTemplate, DisableEditOnInstance)
	int32                                         Players_Respawned_This_Round;                      // 0x0538(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_53C[0x4];                                      // 0x053C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTimerHandle                           PreRound_Timer;                                    // 0x0540(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	struct FTimerHandle                           WeaponAssignTimer;                                 // 0x0548(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	float                                         Spawn_Objective_Time_From_End_Turn;                // 0x0550(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_554[0x4];                                      // 0x0554(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTimerHandle                           Spawn_Objective_Timer;                             // 0x0558(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	int32                                         SelectedSettingID;                                 // 0x0560(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         NewSelectedSettingID;                              // 0x0564(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         HighestSettingID;                                  // 0x0568(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_56C[0x4];                                      // 0x056C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class ABP_Barricade_GunFight_C*>       Barricades_On_Map;                                 // 0x0570(0x0010)(Edit, BlueprintVisible, DisableEditOnTemplate, DisableEditOnInstance)
	int32                                         Max_Allowed_Teamkills;                             // 0x0580(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Max_Allowed_Teamdamage;                            // 0x0584(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Rounds_Someone_Won;                                // 0x0588(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         RoundsNoneWon;                                     // 0x058C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ABP_ObjectiveSpawnPoint_GunFight_C*     This_Round_Objective_Spawn_Point;                  // 0x0590(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          DEBUG_PRINT_TO_SCREEN;                             // 0x0598(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          Player_Result_Sending_Started;                     // 0x0599(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_59A[0x2];                                      // 0x059A(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Expected_Player_Results_Sent_Count;                // 0x059C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<class ABP_PlayerController_GunFight_C*> Players_To_Register_When_Match_ID_Available;       // 0x05A0(0x0010)(Edit, BlueprintVisible, DisableEditOnTemplate, DisableEditOnInstance)
	float                                         Remaining_Round_Time_At_Pause;                     // 0x05B0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_5B4[0x4];                                      // 0x05B4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class ABP_PlayerState_GunFight_C*>     Players_Kicked_From_Match;                         // 0x05B8(0x0010)(Edit, BlueprintVisible, DisableEditOnTemplate, DisableEditOnInstance)
	int32                                         Score_treshold_1_winner;                           // 0x05C8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Score_treshold_2_winner;                           // 0x05CC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Score_treshold_3_winner;                           // 0x05D0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_5D4[0x4];                                      // 0x05D4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TMap<class ABP_PlayerController_C*, class FName> PlayerRewardsTiers;                                // 0x05D8(0x0050)(Edit, BlueprintVisible, DisableEditOnTemplate, DisableEditOnInstance)
	class ABP_PlayerLobby_Base_C*                 Lobby;                                             // 0x0628(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         ScoreBoostTeam1Count;                              // 0x0630(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         ScoreBoostTeam2Count;                              // 0x0634(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TMap<int32, float>                            ScoreBoostCountToScoreMultiplier;                  // 0x0638(0x0050)(Edit, BlueprintVisible, DisableEditOnInstance)
	int32                                         LobbySpawnCount;                                   // 0x0688(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash)
	bool                                          WaitingForMatchStart;                              // 0x068C(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_68D[0x3];                                      // 0x068D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Score_treshold_4_winner;                           // 0x0690(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Score_treshold_5_winner;                           // 0x0694(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Score_treshold_6_winner;                           // 0x0698(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Score_treshold_1_loser;                            // 0x069C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Score_treshold_2_loser;                            // 0x06A0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Score_treshold_3_loser;                            // 0x06A4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Score_treshold_4_loser;                            // 0x06A8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Score_treshold_5_loser;                            // 0x06AC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<class ABP_PlayerStart_Raid_C*>         LobbyPlayerStarts;                                 // 0x06B0(0x0010)(Edit, BlueprintVisible, DisableEditOnTemplate, DisableEditOnInstance)
	class UDataTable*                             RewardDataTable;                                   // 0x06C0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TMap<int32, bool>                             Team1_PlayerID_To_KickVote;                        // 0x06C8(0x0050)(Edit, BlueprintVisible, DisableEditOnInstance)
	TMap<int32, bool>                             Team2_PlayerID_To_KickVote;                        // 0x0718(0x0050)(Edit, BlueprintVisible, DisableEditOnInstance)
	class ABP_PlayerController_GunFight_C*        Team1_PlayerToKick;                                // 0x0768(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ABP_PlayerController_GunFight_C*        Team1_PlayerThatStartedTheKick;                    // 0x0770(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ABP_PlayerController_GunFight_C*        Team2_PlayerToKick;                                // 0x0778(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ABP_PlayerController_GunFight_C*        Team2_PlayerThatStartedTheKick;                    // 0x0780(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Team1_VoteKickTimeoutTime;                         // 0x0788(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Team2_VoteKickTimeoutTime;                         // 0x078C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TMap<float, class UJsonObject*>               DEV_PlayerTelemetryRoundData;                      // 0x0790(0x0050)(Edit, BlueprintVisible, DisableEditOnInstance)
	float                                         DEV_PlayerTelemetryPeriod;                         // 0x07E0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_7E4[0x4];                                      // 0x07E4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTimerHandle                           DEV_PlayerTelemetryTimer;                          // 0x07E8(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	TMap<int32, class UJsonObject*>               DEV_PlayerTelemetry;                               // 0x07F0(0x0050)(Edit, BlueprintVisible, DisableEditOnInstance)
	int32                                         DEV_RoundCounter;                                  // 0x0840(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

public:
	void ExecuteUbergraph_BP_GameMode_GunFight(int32 EntryPoint);
	void HandleVoteKickeeDisconnect(class AController* DisconnectingController);
	void UpdateLoadoutPlayerCount(class UBP_GSC_Team_C* TeamToUpdate, int32 LoadoutIndex, int32 PlayerCount);
	void DelayedAlternativeStartMatch();
	void BreakLockUsingCrowns(class ABP_PlayerController_GunFight_C* PlayerController);
	void SubLevelsReturned(bool SLM_Load_Complete);
	void Lobby_Finished(const struct FCloudRequestResult& RequestResult, const struct FCloudMatchCommitInfo& CloudSettings);
	void BreakLock(class ABP_PlayerController_GunFight_C* PlayerController, int32 LoadoutIndex);
	void TryToLockLoadout(class ABP_PlayerController_GunFight_C* PlayerController, int32 LoadoutIndex);
	void K2_PostLogin(class APlayerController* NewPlayer);
	void Report_Enemy_Hit(float Damage, class AHumanCharacter* Attacking_Character);
	void K2_OnLogout(class AController* ExitingController);
	void Kick_Player_For_Teamkilling(class ABP_PlayerState_GunFight_C* Player_State);
	void Report_Team_Damage(float Damage, class AHumanCharacter* Attacking_Character);
	void None_Won();
	void Objective_Used(class AHumanCharacter* Character);
	void Increment_Rounds_and_assign_sides_to_teams();
	void Second_On_Server_Passed();
	void Player_Connected_To_Match(class ABP_PlayerController_GunFight_C* Player_Controller);
	void Attackers_Won(EGunFightWinReason Win_Reason);
	void Defenders_Won(EGunFightWinReason Win_Reason);
	void Player_Died(class ABP_Character_GunFight_C* Victim_Character, class AHumanCharacter* Killer_Character, EDamageType DamageType, class UClass* Instigating_Item, bool IsHeadshot);
	void DEV_CollectTelemetry();
	void ReceiveAFK_CheckResult(bool bToBeKicked, bool Attempted, class ABP_PlayerController_GunFight_C* Controller);
	void CheckForVoteKickTimeout();
	void StartVotingTimeout(int32 TeamIndex);
	void ClearKickVoting(int32 TeamIndex, bool ClearOnlyVoteTimes);
	void Match_Start();
	void Move_To_Next_Phase();
	void Match_Finish();
	void Match_Cleanup();
	void Match_Initialization();
	void SkipToEndOfLoadoutPicker();
	void AssignWeapons();
	void Start_the_Round();
	void Spawn_Objective();
	void Initialize_New_Round();
	void Round_Timer_Expired();
	void Round_In_Progress();
	void Round_Start();
	void Round_Finish();
	void Round_Cleanup();
	void Round_Initialization();
	void Players_Result_Sent_To_Cloud(const struct FCloudRequestResult& RequestResult, class AHumanPlayerController* Player, const struct FUserMatchReward& Reward);
	void Match_ID_Available(const class FString& Match_ID);
	void Player_Cloud_Id_available(const class FString& Userid);
	void Register_Player_Match_ID(class ABP_PlayerController_GunFight_C* Player_Controller);
	void All_Player_Results_Sent();
	void Match_Unregistered_From_Cloud(const struct FCloudRequestResult& RequestResult);
	void Match_Registered_To_Cloud(const struct FCloudRequestResult& RequestResult, const class FString& MatchID);
	void User_Registered_To_Cloud(const struct FCloudRequestResult& RequestResult, class AHumanPlayerController* Player);
	void Cheat_SetRoundsToWin(int32 RoundsToWin);
	void Cheat_RollNewLoadouts();
	void Cheat_SkipRound();
	void Cheat_SkipMatch(bool bAttackersWon);
	void Cheat_ResetScore(class ABP_PlayerController_GunFight_C* Controller);
	void Cheat_AddScore(class ABP_PlayerController_GunFight_C* Controller, class FName ScoreEvent);
	void Set_Pause_Match(bool Pause);
	void CheatEndMatch(int32 WinnerTeam);
	void SetSettingID(int32 Input);
	void Find_Objective_Spawn_Positions();
	void Spawn_Objective_On_Server();
	void Destroy_Objective_On_Server();
	void Check_for_Winner(bool* Winner_Found, class UBP_GSC_Team_Raid_C** WinnerTeam);
	void Get_Attacking_Team(class UBP_GSC_Team_Raid_C** Team);
	void Get_Defending_Team(class UBP_GSC_Team_Raid_C** Defending_Team);
	void Spawn_All_Players();
	void Get_Round_Winner_by_Player_Elimination(class ABP_PlayerController_Teams_C* Killed_Player_Controller, bool* Attackers_Won, bool* Defenders_Won);
	void Get_All_Players(TArray<class ABP_PlayerController_GunFight_C*>* All_Players);
	void Spawn_Player(class AActor* Player_Start, class ABP_PlayerController_C* Player_Controller);
	void Get_Player_Spawn_Position(class ABP_PlayerController_GunFight_C* Player_Controller, class AActor** Spawn_Position);
	void Remove_Objective_Markers();
	void Clean_Map_Of_Corpse_Containers();
	void Get_Player_Statistics(class AHumanPlayerController* Player_Controller, bool* Found, struct FStruct_GunFightStatistics* Statistic);
	void Teleport_All_Players_To_Random_Spawn();
	void Get_Random_Spawn_Position(class AActor** Spawn_Position);
	void Set_All_Players_Invicibility(bool Set_Invincible);
	void Are_Teams_Full(bool* Teams_Full);
	bool PlayerCanRestart(class APlayerController* Player);
	void Player_Died_Update_Statistic(class AHumanCharacter* Victim_Character, class AHumanCharacter* Killer_Character, bool Is_Headshot);
	void Increase_Objective_Statistic(class AHumanCharacter* Character);
	void Get_Team_With_More_Health(class UBP_GSC_Team_Raid_C** Team_With_More_Health);
	void Assign_New_Setting_ID();
	void Replicate_Players_Kill_Feed(class AHumanCharacter* Victim, class AHumanCharacter* Killer, EDamageType Damage_Type, class UClass* Instigating_Item, bool Is_Headshot);
	void Evaluate_Score(const struct FStruct_GunFightStatistics& Statistic, struct FStruct_GunFightStatistics* Evaluated_Statistic);
	void Evaluate_Gunfight_Score_With_Boosters(const struct FStruct_GunFightStatistics& Statistic, int32 TeamIndex, struct FStruct_GunFightStatistics* Evaluated_Statistic);
	void Set_Total_Team_Score(TArray<class ABP_PlayerState_Teams_C*>& TeamMembersPlayerStates, bool bWon);
	void Evaluate_And_Return_Total_Team_Score(TArray<class ABP_PlayerState_Teams_C*>& TeamMembersPlayerStates, bool bWon, int32* Total_Team_Score, float* ThresholdMultiplier);
	void Get_Score_Value_From_Table(class FName Score_Type, int32* Score);
	void Find_Barricades();
	void Set_Barricades_Active_State(bool Is_active);
	void Get_Survivor_Count(int32* Attacker_Survivors, int32* Defender_Survivors);
	void Increase_TeamDamage_Statistic(float Damage, class AHumanCharacter* Character);
	void Assign_Roles_To_Players();
	void Select_Objective_Spawn_Point();
	void Show_Players_Objective_Spawn_Position();
	void Increase_EnemyHit_Statistic(float Damage, class AHumanCharacter* Character);
	void Process_All_Player_Results_on_Match_End();
	void Process_Single_Player_Result(class ABP_PlayerState_GunFight_C* Player_State, bool Is_Winner, bool End_Of_Match);
	bool OnPlayerDied(class AHumanCharacter* Player, class AHumanCharacter* Killer);
	void GetTeammates(class AHumanPlayerController* Player, TArray<class AHumanPlayerController*>* OutControllerList);
	void ResetAllSpawns();
	void GetSpawnForTeam(TArray<class ABP_PlayerStart_Raid_C*>& PlayerStarts_0, class ABP_PlayerController_GunFight_C* PlayerController, class AActor** Random_Secondary_Start);
	void GetPlayerTierOfReward(class ABP_PlayerController_C* Player, class FName* Tier);
	void CleanLoadoutSlots();
	void UpdateTicketCount(class ABP_PlayerController_GunFight_C* PlayerController, class ABP_PlayerState_GunFight_C* PlayerState);
	void SetPickedLoadoutToPlayers();
	void GetPlayerStartsForLobby(TArray<class ABP_PlayerStart_Raid_C*>* LobbyCharStarts);
	bool ReadyToStartMatch();
	bool ShouldStartMatchBP();
	void Increase_WholeTeamSurvived_Statistic(class ABP_PlayerState_Teams_C* PlayerState, bool AttackersWon);
	void CheckIfWholeTeamSurvived(class UBP_GSC_Team_C* Team, bool* bWholeTeamSurvived);
	void AddCorrectWholeTeamSurvivedScore(const struct FStruct_GunFightStatistics& Statistics, bool AttackersSurvived, struct FStruct_GunFightStatistics* StructOut);
	void ScoreBoosterMultiplierEffect(int32 TeamIndex, int32 Score, int32* BoostedScore);
	void Cheat_IncreaseScore(class FName ScoreEvent, class ABP_PlayerController_GunFight_C* GunfightController);
	void Cheat_ResetStatistics(class ABP_PlayerController_GunFight_C* GunfightController);
	void GetRewardByScore(int32 Score, TArray<struct FStruct_NonEncounterMatchRewards>& PossibleRewards, float ScoreThresholdsMultiplier, struct FStruct_NonEncounterMatchRewards* ReachedReward);
	void ResetAllPlayers();
	void ResolveKickVoting(int32 TeamIndex, bool* bShouldKick);
	void VoteKick_GetVoteCounts(int32 TeamIndex, int32* _YesCount, int32* _NoCount);
	void ReceiveKickVote(const TMap<class ABP_PlayerController_GunFight_C*, bool>& PlayerToKickVote, bool ReplicateVoteCount, int32 TeamIndex);
	void Request_Player_Vote_Kick(class ABP_PlayerState_GunFight_C* PlayerToKick, class ABP_PlayerState_GunFight_C* PlayerStartingTheVote);
	void SendInKickAnalytics(bool VotingResult, int32 AFKCheck_Result, class UBP_GSC_Team_C* VotingTeam);
	void DEV_RecordPlayerPositions(class UJsonObject** AllPlayerPositions);
	void SendRoundFinishAnalytics();

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BP_GameMode_GunFight_C">();
	}
	static class ABP_GameMode_GunFight_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<ABP_GameMode_GunFight_C>();
	}
};
static_assert(alignof(ABP_GameMode_GunFight_C) == 0x000008, "Wrong alignment on ABP_GameMode_GunFight_C");
static_assert(sizeof(ABP_GameMode_GunFight_C) == 0x000848, "Wrong size on ABP_GameMode_GunFight_C");
static_assert(offsetof(ABP_GameMode_GunFight_C, UberGraphFrame_BP_GameMode_GunFight_C) == 0x0004D8, "Member 'ABP_GameMode_GunFight_C::UberGraphFrame_BP_GameMode_GunFight_C' has a wrong offset!");
static_assert(offsetof(ABP_GameMode_GunFight_C, BP_ADM_ActorLocationsManager) == 0x0004E0, "Member 'ABP_GameMode_GunFight_C::BP_ADM_ActorLocationsManager' has a wrong offset!");
static_assert(offsetof(ABP_GameMode_GunFight_C, BP_ADM_LandMine_GMComponent) == 0x0004E8, "Member 'ABP_GameMode_GunFight_C::BP_ADM_LandMine_GMComponent' has a wrong offset!");
static_assert(offsetof(ABP_GameMode_GunFight_C, BP_MatchInfoComponent) == 0x0004F0, "Member 'ABP_GameMode_GunFight_C::BP_MatchInfoComponent' has a wrong offset!");
static_assert(offsetof(ABP_GameMode_GunFight_C, Objective_Spawn_Positions) == 0x0004F8, "Member 'ABP_GameMode_GunFight_C::Objective_Spawn_Positions' has a wrong offset!");
static_assert(offsetof(ABP_GameMode_GunFight_C, Objective) == 0x000508, "Member 'ABP_GameMode_GunFight_C::Objective' has a wrong offset!");
static_assert(offsetof(ABP_GameMode_GunFight_C, ShouldUseLobby) == 0x000510, "Member 'ABP_GameMode_GunFight_C::ShouldUseLobby' has a wrong offset!");
static_assert(offsetof(ABP_GameMode_GunFight_C, Round_Timer) == 0x000518, "Member 'ABP_GameMode_GunFight_C::Round_Timer' has a wrong offset!");
static_assert(offsetof(ABP_GameMode_GunFight_C, Round_Time) == 0x000520, "Member 'ABP_GameMode_GunFight_C::Round_Time' has a wrong offset!");
static_assert(offsetof(ABP_GameMode_GunFight_C, Round_Active) == 0x000524, "Member 'ABP_GameMode_GunFight_C::Round_Active' has a wrong offset!");
static_assert(offsetof(ABP_GameMode_GunFight_C, Is_Match_In_Progress) == 0x000525, "Member 'ABP_GameMode_GunFight_C::Is_Match_In_Progress' has a wrong offset!");
static_assert(offsetof(ABP_GameMode_GunFight_C, DelayedPlayersToConnect) == 0x000528, "Member 'ABP_GameMode_GunFight_C::DelayedPlayersToConnect' has a wrong offset!");
static_assert(offsetof(ABP_GameMode_GunFight_C, Players_Respawned_This_Round) == 0x000538, "Member 'ABP_GameMode_GunFight_C::Players_Respawned_This_Round' has a wrong offset!");
static_assert(offsetof(ABP_GameMode_GunFight_C, PreRound_Timer) == 0x000540, "Member 'ABP_GameMode_GunFight_C::PreRound_Timer' has a wrong offset!");
static_assert(offsetof(ABP_GameMode_GunFight_C, WeaponAssignTimer) == 0x000548, "Member 'ABP_GameMode_GunFight_C::WeaponAssignTimer' has a wrong offset!");
static_assert(offsetof(ABP_GameMode_GunFight_C, Spawn_Objective_Time_From_End_Turn) == 0x000550, "Member 'ABP_GameMode_GunFight_C::Spawn_Objective_Time_From_End_Turn' has a wrong offset!");
static_assert(offsetof(ABP_GameMode_GunFight_C, Spawn_Objective_Timer) == 0x000558, "Member 'ABP_GameMode_GunFight_C::Spawn_Objective_Timer' has a wrong offset!");
static_assert(offsetof(ABP_GameMode_GunFight_C, SelectedSettingID) == 0x000560, "Member 'ABP_GameMode_GunFight_C::SelectedSettingID' has a wrong offset!");
static_assert(offsetof(ABP_GameMode_GunFight_C, NewSelectedSettingID) == 0x000564, "Member 'ABP_GameMode_GunFight_C::NewSelectedSettingID' has a wrong offset!");
static_assert(offsetof(ABP_GameMode_GunFight_C, HighestSettingID) == 0x000568, "Member 'ABP_GameMode_GunFight_C::HighestSettingID' has a wrong offset!");
static_assert(offsetof(ABP_GameMode_GunFight_C, Barricades_On_Map) == 0x000570, "Member 'ABP_GameMode_GunFight_C::Barricades_On_Map' has a wrong offset!");
static_assert(offsetof(ABP_GameMode_GunFight_C, Max_Allowed_Teamkills) == 0x000580, "Member 'ABP_GameMode_GunFight_C::Max_Allowed_Teamkills' has a wrong offset!");
static_assert(offsetof(ABP_GameMode_GunFight_C, Max_Allowed_Teamdamage) == 0x000584, "Member 'ABP_GameMode_GunFight_C::Max_Allowed_Teamdamage' has a wrong offset!");
static_assert(offsetof(ABP_GameMode_GunFight_C, Rounds_Someone_Won) == 0x000588, "Member 'ABP_GameMode_GunFight_C::Rounds_Someone_Won' has a wrong offset!");
static_assert(offsetof(ABP_GameMode_GunFight_C, RoundsNoneWon) == 0x00058C, "Member 'ABP_GameMode_GunFight_C::RoundsNoneWon' has a wrong offset!");
static_assert(offsetof(ABP_GameMode_GunFight_C, This_Round_Objective_Spawn_Point) == 0x000590, "Member 'ABP_GameMode_GunFight_C::This_Round_Objective_Spawn_Point' has a wrong offset!");
static_assert(offsetof(ABP_GameMode_GunFight_C, DEBUG_PRINT_TO_SCREEN) == 0x000598, "Member 'ABP_GameMode_GunFight_C::DEBUG_PRINT_TO_SCREEN' has a wrong offset!");
static_assert(offsetof(ABP_GameMode_GunFight_C, Player_Result_Sending_Started) == 0x000599, "Member 'ABP_GameMode_GunFight_C::Player_Result_Sending_Started' has a wrong offset!");
static_assert(offsetof(ABP_GameMode_GunFight_C, Expected_Player_Results_Sent_Count) == 0x00059C, "Member 'ABP_GameMode_GunFight_C::Expected_Player_Results_Sent_Count' has a wrong offset!");
static_assert(offsetof(ABP_GameMode_GunFight_C, Players_To_Register_When_Match_ID_Available) == 0x0005A0, "Member 'ABP_GameMode_GunFight_C::Players_To_Register_When_Match_ID_Available' has a wrong offset!");
static_assert(offsetof(ABP_GameMode_GunFight_C, Remaining_Round_Time_At_Pause) == 0x0005B0, "Member 'ABP_GameMode_GunFight_C::Remaining_Round_Time_At_Pause' has a wrong offset!");
static_assert(offsetof(ABP_GameMode_GunFight_C, Players_Kicked_From_Match) == 0x0005B8, "Member 'ABP_GameMode_GunFight_C::Players_Kicked_From_Match' has a wrong offset!");
static_assert(offsetof(ABP_GameMode_GunFight_C, Score_treshold_1_winner) == 0x0005C8, "Member 'ABP_GameMode_GunFight_C::Score_treshold_1_winner' has a wrong offset!");
static_assert(offsetof(ABP_GameMode_GunFight_C, Score_treshold_2_winner) == 0x0005CC, "Member 'ABP_GameMode_GunFight_C::Score_treshold_2_winner' has a wrong offset!");
static_assert(offsetof(ABP_GameMode_GunFight_C, Score_treshold_3_winner) == 0x0005D0, "Member 'ABP_GameMode_GunFight_C::Score_treshold_3_winner' has a wrong offset!");
static_assert(offsetof(ABP_GameMode_GunFight_C, PlayerRewardsTiers) == 0x0005D8, "Member 'ABP_GameMode_GunFight_C::PlayerRewardsTiers' has a wrong offset!");
static_assert(offsetof(ABP_GameMode_GunFight_C, Lobby) == 0x000628, "Member 'ABP_GameMode_GunFight_C::Lobby' has a wrong offset!");
static_assert(offsetof(ABP_GameMode_GunFight_C, ScoreBoostTeam1Count) == 0x000630, "Member 'ABP_GameMode_GunFight_C::ScoreBoostTeam1Count' has a wrong offset!");
static_assert(offsetof(ABP_GameMode_GunFight_C, ScoreBoostTeam2Count) == 0x000634, "Member 'ABP_GameMode_GunFight_C::ScoreBoostTeam2Count' has a wrong offset!");
static_assert(offsetof(ABP_GameMode_GunFight_C, ScoreBoostCountToScoreMultiplier) == 0x000638, "Member 'ABP_GameMode_GunFight_C::ScoreBoostCountToScoreMultiplier' has a wrong offset!");
static_assert(offsetof(ABP_GameMode_GunFight_C, LobbySpawnCount) == 0x000688, "Member 'ABP_GameMode_GunFight_C::LobbySpawnCount' has a wrong offset!");
static_assert(offsetof(ABP_GameMode_GunFight_C, WaitingForMatchStart) == 0x00068C, "Member 'ABP_GameMode_GunFight_C::WaitingForMatchStart' has a wrong offset!");
static_assert(offsetof(ABP_GameMode_GunFight_C, Score_treshold_4_winner) == 0x000690, "Member 'ABP_GameMode_GunFight_C::Score_treshold_4_winner' has a wrong offset!");
static_assert(offsetof(ABP_GameMode_GunFight_C, Score_treshold_5_winner) == 0x000694, "Member 'ABP_GameMode_GunFight_C::Score_treshold_5_winner' has a wrong offset!");
static_assert(offsetof(ABP_GameMode_GunFight_C, Score_treshold_6_winner) == 0x000698, "Member 'ABP_GameMode_GunFight_C::Score_treshold_6_winner' has a wrong offset!");
static_assert(offsetof(ABP_GameMode_GunFight_C, Score_treshold_1_loser) == 0x00069C, "Member 'ABP_GameMode_GunFight_C::Score_treshold_1_loser' has a wrong offset!");
static_assert(offsetof(ABP_GameMode_GunFight_C, Score_treshold_2_loser) == 0x0006A0, "Member 'ABP_GameMode_GunFight_C::Score_treshold_2_loser' has a wrong offset!");
static_assert(offsetof(ABP_GameMode_GunFight_C, Score_treshold_3_loser) == 0x0006A4, "Member 'ABP_GameMode_GunFight_C::Score_treshold_3_loser' has a wrong offset!");
static_assert(offsetof(ABP_GameMode_GunFight_C, Score_treshold_4_loser) == 0x0006A8, "Member 'ABP_GameMode_GunFight_C::Score_treshold_4_loser' has a wrong offset!");
static_assert(offsetof(ABP_GameMode_GunFight_C, Score_treshold_5_loser) == 0x0006AC, "Member 'ABP_GameMode_GunFight_C::Score_treshold_5_loser' has a wrong offset!");
static_assert(offsetof(ABP_GameMode_GunFight_C, LobbyPlayerStarts) == 0x0006B0, "Member 'ABP_GameMode_GunFight_C::LobbyPlayerStarts' has a wrong offset!");
static_assert(offsetof(ABP_GameMode_GunFight_C, RewardDataTable) == 0x0006C0, "Member 'ABP_GameMode_GunFight_C::RewardDataTable' has a wrong offset!");
static_assert(offsetof(ABP_GameMode_GunFight_C, Team1_PlayerID_To_KickVote) == 0x0006C8, "Member 'ABP_GameMode_GunFight_C::Team1_PlayerID_To_KickVote' has a wrong offset!");
static_assert(offsetof(ABP_GameMode_GunFight_C, Team2_PlayerID_To_KickVote) == 0x000718, "Member 'ABP_GameMode_GunFight_C::Team2_PlayerID_To_KickVote' has a wrong offset!");
static_assert(offsetof(ABP_GameMode_GunFight_C, Team1_PlayerToKick) == 0x000768, "Member 'ABP_GameMode_GunFight_C::Team1_PlayerToKick' has a wrong offset!");
static_assert(offsetof(ABP_GameMode_GunFight_C, Team1_PlayerThatStartedTheKick) == 0x000770, "Member 'ABP_GameMode_GunFight_C::Team1_PlayerThatStartedTheKick' has a wrong offset!");
static_assert(offsetof(ABP_GameMode_GunFight_C, Team2_PlayerToKick) == 0x000778, "Member 'ABP_GameMode_GunFight_C::Team2_PlayerToKick' has a wrong offset!");
static_assert(offsetof(ABP_GameMode_GunFight_C, Team2_PlayerThatStartedTheKick) == 0x000780, "Member 'ABP_GameMode_GunFight_C::Team2_PlayerThatStartedTheKick' has a wrong offset!");
static_assert(offsetof(ABP_GameMode_GunFight_C, Team1_VoteKickTimeoutTime) == 0x000788, "Member 'ABP_GameMode_GunFight_C::Team1_VoteKickTimeoutTime' has a wrong offset!");
static_assert(offsetof(ABP_GameMode_GunFight_C, Team2_VoteKickTimeoutTime) == 0x00078C, "Member 'ABP_GameMode_GunFight_C::Team2_VoteKickTimeoutTime' has a wrong offset!");
static_assert(offsetof(ABP_GameMode_GunFight_C, DEV_PlayerTelemetryRoundData) == 0x000790, "Member 'ABP_GameMode_GunFight_C::DEV_PlayerTelemetryRoundData' has a wrong offset!");
static_assert(offsetof(ABP_GameMode_GunFight_C, DEV_PlayerTelemetryPeriod) == 0x0007E0, "Member 'ABP_GameMode_GunFight_C::DEV_PlayerTelemetryPeriod' has a wrong offset!");
static_assert(offsetof(ABP_GameMode_GunFight_C, DEV_PlayerTelemetryTimer) == 0x0007E8, "Member 'ABP_GameMode_GunFight_C::DEV_PlayerTelemetryTimer' has a wrong offset!");
static_assert(offsetof(ABP_GameMode_GunFight_C, DEV_PlayerTelemetry) == 0x0007F0, "Member 'ABP_GameMode_GunFight_C::DEV_PlayerTelemetry' has a wrong offset!");
static_assert(offsetof(ABP_GameMode_GunFight_C, DEV_RoundCounter) == 0x000840, "Member 'ABP_GameMode_GunFight_C::DEV_RoundCounter' has a wrong offset!");

}

