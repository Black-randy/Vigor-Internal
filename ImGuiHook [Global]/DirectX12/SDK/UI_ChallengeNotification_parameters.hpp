#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: UI_ChallengeNotification

#include "Basic.hpp"

#include "CoreUObject_structs.hpp"
#include "SlateCore_structs.hpp"
#include "Flame_structs.hpp"
#include "Engine_structs.hpp"
#include "E_ChallengeSlotState_structs.hpp"


namespace SDK::Params
{

// Function UI_ChallengeNotification.UI_ChallengeNotification_C.ExecuteUbergraph_UI_ChallengeNotification
// 0x0028 (0x0028 - 0x0000)
struct UI_ChallengeNotification_C_ExecuteUbergraph_UI_ChallengeNotification final
{
public:
	int32                                         EntryPoint;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UUMGSequencePlayer*                     CallFunc_PlayAnimation_ReturnValue;                // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UUMGSequencePlayer*                     CallFunc_PlayAnimation_ReturnValue_1;              // 0x0010(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TDelegate<void()>                             K2Node_CreateDelegate_OutputDelegate;              // 0x0018(0x0010)(ZeroConstructor, NoDestructor)
};
static_assert(alignof(UI_ChallengeNotification_C_ExecuteUbergraph_UI_ChallengeNotification) == 0x000008, "Wrong alignment on UI_ChallengeNotification_C_ExecuteUbergraph_UI_ChallengeNotification");
static_assert(sizeof(UI_ChallengeNotification_C_ExecuteUbergraph_UI_ChallengeNotification) == 0x000028, "Wrong size on UI_ChallengeNotification_C_ExecuteUbergraph_UI_ChallengeNotification");
static_assert(offsetof(UI_ChallengeNotification_C_ExecuteUbergraph_UI_ChallengeNotification, EntryPoint) == 0x000000, "Member 'UI_ChallengeNotification_C_ExecuteUbergraph_UI_ChallengeNotification::EntryPoint' has a wrong offset!");
static_assert(offsetof(UI_ChallengeNotification_C_ExecuteUbergraph_UI_ChallengeNotification, CallFunc_PlayAnimation_ReturnValue) == 0x000008, "Member 'UI_ChallengeNotification_C_ExecuteUbergraph_UI_ChallengeNotification::CallFunc_PlayAnimation_ReturnValue' has a wrong offset!");
static_assert(offsetof(UI_ChallengeNotification_C_ExecuteUbergraph_UI_ChallengeNotification, CallFunc_PlayAnimation_ReturnValue_1) == 0x000010, "Member 'UI_ChallengeNotification_C_ExecuteUbergraph_UI_ChallengeNotification::CallFunc_PlayAnimation_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(UI_ChallengeNotification_C_ExecuteUbergraph_UI_ChallengeNotification, K2Node_CreateDelegate_OutputDelegate) == 0x000018, "Member 'UI_ChallengeNotification_C_ExecuteUbergraph_UI_ChallengeNotification::K2Node_CreateDelegate_OutputDelegate' has a wrong offset!");

// Function UI_ChallengeNotification.UI_ChallengeNotification_C.UpdateChallengeState
// 0x0220 (0x0220 - 0x0000)
struct UI_ChallengeNotification_C_UpdateChallengeState final
{
public:
	struct FSlateColor                            GreenColor;                                        // 0x0000(0x0028)(Edit, BlueprintVisible)
	bool                                          IsAchieved;                                        // 0x0028(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor)
	uint8                                         Pad_29[0x3];                                       // 0x0029(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FLinearColor                           K2Node_MakeStruct_LinearColor;                     // 0x002C(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3C[0x4];                                       // 0x003C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSlateColor                            K2Node_MakeStruct_SlateColor;                      // 0x0040(0x0028)()
	struct FLinearColor                           K2Node_MakeStruct_LinearColor_1;                   // 0x0068(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Get_Maximum_Progress_Maximum_Progress;    // 0x0078(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_7C[0x4];                                       // 0x007C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   CallFunc_Get_Title_Text_Title_Text;                // 0x0080(0x0018)()
	struct FFormatArgumentData                    K2Node_MakeStruct_FormatArgumentData;              // 0x0098(0x0040)(HasGetValueTypeHash)
	struct FFormatArgumentData                    K2Node_MakeStruct_FormatArgumentData_1;            // 0x00D8(0x0040)(HasGetValueTypeHash)
	int32                                         CallFunc_Get_Current_Progress_Current_Progress;    // 0x0118(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_11C[0x4];                                      // 0x011C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FFormatArgumentData                    K2Node_MakeStruct_FormatArgumentData_2;            // 0x0120(0x0040)(HasGetValueTypeHash)
	EChallengeCategory                            CallFunc_Get_Challenge_Category_Category;          // 0x0160(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_161[0x7];                                      // 0x0161(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FFormatArgumentData>            K2Node_MakeArray_Array;                            // 0x0168(0x0010)(ReferenceParm)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue;          // 0x0178(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_179[0x7];                                      // 0x0179(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   CallFunc_Format_ReturnValue;                       // 0x0180(0x0018)()
	struct FFormatArgumentData                    K2Node_MakeStruct_FormatArgumentData_3;            // 0x0198(0x0040)(HasGetValueTypeHash)
	TArray<struct FFormatArgumentData>            K2Node_MakeArray_Array_1;                          // 0x01D8(0x0010)(ReferenceParm)
	class FText                                   CallFunc_Get_Condition_Text_Condition_Text;        // 0x01E8(0x0018)()
	class FText                                   CallFunc_Format_ReturnValue_1;                     // 0x0200(0x0018)()
	E_ChallengeSlotState                          CallFunc_Get_Slot_State_Slot_State;                // 0x0218(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_SwitchEnum_CmpSuccess;                      // 0x0219(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x021A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(UI_ChallengeNotification_C_UpdateChallengeState) == 0x000008, "Wrong alignment on UI_ChallengeNotification_C_UpdateChallengeState");
static_assert(sizeof(UI_ChallengeNotification_C_UpdateChallengeState) == 0x000220, "Wrong size on UI_ChallengeNotification_C_UpdateChallengeState");
static_assert(offsetof(UI_ChallengeNotification_C_UpdateChallengeState, GreenColor) == 0x000000, "Member 'UI_ChallengeNotification_C_UpdateChallengeState::GreenColor' has a wrong offset!");
static_assert(offsetof(UI_ChallengeNotification_C_UpdateChallengeState, IsAchieved) == 0x000028, "Member 'UI_ChallengeNotification_C_UpdateChallengeState::IsAchieved' has a wrong offset!");
static_assert(offsetof(UI_ChallengeNotification_C_UpdateChallengeState, K2Node_MakeStruct_LinearColor) == 0x00002C, "Member 'UI_ChallengeNotification_C_UpdateChallengeState::K2Node_MakeStruct_LinearColor' has a wrong offset!");
static_assert(offsetof(UI_ChallengeNotification_C_UpdateChallengeState, K2Node_MakeStruct_SlateColor) == 0x000040, "Member 'UI_ChallengeNotification_C_UpdateChallengeState::K2Node_MakeStruct_SlateColor' has a wrong offset!");
static_assert(offsetof(UI_ChallengeNotification_C_UpdateChallengeState, K2Node_MakeStruct_LinearColor_1) == 0x000068, "Member 'UI_ChallengeNotification_C_UpdateChallengeState::K2Node_MakeStruct_LinearColor_1' has a wrong offset!");
static_assert(offsetof(UI_ChallengeNotification_C_UpdateChallengeState, CallFunc_Get_Maximum_Progress_Maximum_Progress) == 0x000078, "Member 'UI_ChallengeNotification_C_UpdateChallengeState::CallFunc_Get_Maximum_Progress_Maximum_Progress' has a wrong offset!");
static_assert(offsetof(UI_ChallengeNotification_C_UpdateChallengeState, CallFunc_Get_Title_Text_Title_Text) == 0x000080, "Member 'UI_ChallengeNotification_C_UpdateChallengeState::CallFunc_Get_Title_Text_Title_Text' has a wrong offset!");
static_assert(offsetof(UI_ChallengeNotification_C_UpdateChallengeState, K2Node_MakeStruct_FormatArgumentData) == 0x000098, "Member 'UI_ChallengeNotification_C_UpdateChallengeState::K2Node_MakeStruct_FormatArgumentData' has a wrong offset!");
static_assert(offsetof(UI_ChallengeNotification_C_UpdateChallengeState, K2Node_MakeStruct_FormatArgumentData_1) == 0x0000D8, "Member 'UI_ChallengeNotification_C_UpdateChallengeState::K2Node_MakeStruct_FormatArgumentData_1' has a wrong offset!");
static_assert(offsetof(UI_ChallengeNotification_C_UpdateChallengeState, CallFunc_Get_Current_Progress_Current_Progress) == 0x000118, "Member 'UI_ChallengeNotification_C_UpdateChallengeState::CallFunc_Get_Current_Progress_Current_Progress' has a wrong offset!");
static_assert(offsetof(UI_ChallengeNotification_C_UpdateChallengeState, K2Node_MakeStruct_FormatArgumentData_2) == 0x000120, "Member 'UI_ChallengeNotification_C_UpdateChallengeState::K2Node_MakeStruct_FormatArgumentData_2' has a wrong offset!");
static_assert(offsetof(UI_ChallengeNotification_C_UpdateChallengeState, CallFunc_Get_Challenge_Category_Category) == 0x000160, "Member 'UI_ChallengeNotification_C_UpdateChallengeState::CallFunc_Get_Challenge_Category_Category' has a wrong offset!");
static_assert(offsetof(UI_ChallengeNotification_C_UpdateChallengeState, K2Node_MakeArray_Array) == 0x000168, "Member 'UI_ChallengeNotification_C_UpdateChallengeState::K2Node_MakeArray_Array' has a wrong offset!");
static_assert(offsetof(UI_ChallengeNotification_C_UpdateChallengeState, CallFunc_EqualEqual_ByteByte_ReturnValue) == 0x000178, "Member 'UI_ChallengeNotification_C_UpdateChallengeState::CallFunc_EqualEqual_ByteByte_ReturnValue' has a wrong offset!");
static_assert(offsetof(UI_ChallengeNotification_C_UpdateChallengeState, CallFunc_Format_ReturnValue) == 0x000180, "Member 'UI_ChallengeNotification_C_UpdateChallengeState::CallFunc_Format_ReturnValue' has a wrong offset!");
static_assert(offsetof(UI_ChallengeNotification_C_UpdateChallengeState, K2Node_MakeStruct_FormatArgumentData_3) == 0x000198, "Member 'UI_ChallengeNotification_C_UpdateChallengeState::K2Node_MakeStruct_FormatArgumentData_3' has a wrong offset!");
static_assert(offsetof(UI_ChallengeNotification_C_UpdateChallengeState, K2Node_MakeArray_Array_1) == 0x0001D8, "Member 'UI_ChallengeNotification_C_UpdateChallengeState::K2Node_MakeArray_Array_1' has a wrong offset!");
static_assert(offsetof(UI_ChallengeNotification_C_UpdateChallengeState, CallFunc_Get_Condition_Text_Condition_Text) == 0x0001E8, "Member 'UI_ChallengeNotification_C_UpdateChallengeState::CallFunc_Get_Condition_Text_Condition_Text' has a wrong offset!");
static_assert(offsetof(UI_ChallengeNotification_C_UpdateChallengeState, CallFunc_Format_ReturnValue_1) == 0x000200, "Member 'UI_ChallengeNotification_C_UpdateChallengeState::CallFunc_Format_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(UI_ChallengeNotification_C_UpdateChallengeState, CallFunc_Get_Slot_State_Slot_State) == 0x000218, "Member 'UI_ChallengeNotification_C_UpdateChallengeState::CallFunc_Get_Slot_State_Slot_State' has a wrong offset!");
static_assert(offsetof(UI_ChallengeNotification_C_UpdateChallengeState, K2Node_SwitchEnum_CmpSuccess) == 0x000219, "Member 'UI_ChallengeNotification_C_UpdateChallengeState::K2Node_SwitchEnum_CmpSuccess' has a wrong offset!");
static_assert(offsetof(UI_ChallengeNotification_C_UpdateChallengeState, CallFunc_IsValid_ReturnValue) == 0x00021A, "Member 'UI_ChallengeNotification_C_UpdateChallengeState::CallFunc_IsValid_ReturnValue' has a wrong offset!");

}

