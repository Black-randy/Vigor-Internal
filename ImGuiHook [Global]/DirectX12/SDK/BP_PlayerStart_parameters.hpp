#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_PlayerStart

#include "Basic.hpp"

#include "CoreUObject_structs.hpp"
#include "Struct_SpawnUsageInfo_structs.hpp"


namespace SDK::Params
{

// Function BP_PlayerStart.BP_PlayerStart_C.SetUseTime
// 0x0048 (0x0048 - 0x0000)
struct BP_PlayerStart_C_SetUseTime final
{
public:
	int32                                         PlayerId;                                          // 0x0000(0x0004)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<float>                                 TempTimes;                                         // 0x0008(0x0010)(Edit, BlueprintVisible)
	float                                         CallFunc_GetTimeSeconds_ReturnValue;               // 0x0018(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Add_ReturnValue;                    // 0x001C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FStruct_SpawnUsageInfo                 K2Node_MakeStruct_Struct_SpawnUsageInfo;           // 0x0020(0x0010)(HasGetValueTypeHash)
	struct FStruct_SpawnUsageInfo                 CallFunc_Map_Find_Value;                           // 0x0030(0x0010)(HasGetValueTypeHash)
	bool                                          CallFunc_Map_Find_ReturnValue;                     // 0x0040(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_PlayerStart_C_SetUseTime) == 0x000008, "Wrong alignment on BP_PlayerStart_C_SetUseTime");
static_assert(sizeof(BP_PlayerStart_C_SetUseTime) == 0x000048, "Wrong size on BP_PlayerStart_C_SetUseTime");
static_assert(offsetof(BP_PlayerStart_C_SetUseTime, PlayerId) == 0x000000, "Member 'BP_PlayerStart_C_SetUseTime::PlayerId' has a wrong offset!");
static_assert(offsetof(BP_PlayerStart_C_SetUseTime, TempTimes) == 0x000008, "Member 'BP_PlayerStart_C_SetUseTime::TempTimes' has a wrong offset!");
static_assert(offsetof(BP_PlayerStart_C_SetUseTime, CallFunc_GetTimeSeconds_ReturnValue) == 0x000018, "Member 'BP_PlayerStart_C_SetUseTime::CallFunc_GetTimeSeconds_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerStart_C_SetUseTime, CallFunc_Array_Add_ReturnValue) == 0x00001C, "Member 'BP_PlayerStart_C_SetUseTime::CallFunc_Array_Add_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerStart_C_SetUseTime, K2Node_MakeStruct_Struct_SpawnUsageInfo) == 0x000020, "Member 'BP_PlayerStart_C_SetUseTime::K2Node_MakeStruct_Struct_SpawnUsageInfo' has a wrong offset!");
static_assert(offsetof(BP_PlayerStart_C_SetUseTime, CallFunc_Map_Find_Value) == 0x000030, "Member 'BP_PlayerStart_C_SetUseTime::CallFunc_Map_Find_Value' has a wrong offset!");
static_assert(offsetof(BP_PlayerStart_C_SetUseTime, CallFunc_Map_Find_ReturnValue) == 0x000040, "Member 'BP_PlayerStart_C_SetUseTime::CallFunc_Map_Find_ReturnValue' has a wrong offset!");

// Function BP_PlayerStart.BP_PlayerStart_C.GetUsageData
// 0x0078 (0x0078 - 0x0000)
struct BP_PlayerStart_C_GetUsageData final
{
public:
	int32                                         PlayerId;                                          // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         InAmountOfTime;                                    // 0x0004(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Usage;                                             // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         UseCountInTime;                                    // 0x000C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_LessEqual_FloatFloat_ReturnValue;         // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_11[0x3];                                       // 0x0011(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Temp_int_Array_Index_Variable;                     // 0x0014(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x0018(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable;                                // 0x001C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_1D[0x3];                                       // 0x001D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Subtract_IntInt_ReturnValue;              // 0x0020(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_GreaterEqual_IntInt_ReturnValue;          // 0x0024(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_25[0x3];                                       // 0x0025(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Temp_int_Variable;                                 // 0x0028(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2C[0x4];                                       // 0x002C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FStruct_SpawnUsageInfo                 CallFunc_Map_Find_Value;                           // 0x0030(0x0010)(HasGetValueTypeHash)
	bool                                          CallFunc_Map_Find_ReturnValue;                     // 0x0040(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_41[0x3];                                       // 0x0041(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_Conv_IntToFloat_ReturnValue;              // 0x0044(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Array_Get_Item;                           // 0x0048(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x004C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue_1;               // 0x0050(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Greater_IntInt_ReturnValue;               // 0x0054(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_55[0x3];                                       // 0x0055(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Subtract_IntInt_ReturnValue_1;            // 0x0058(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Not_PreBool_ReturnValue;                  // 0x005C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_5D[0x3];                                       // 0x005D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Max_ReturnValue;                          // 0x0060(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_GetGameTimeInSeconds_ReturnValue;         // 0x0064(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Subtract_FloatFloat_ReturnValue;          // 0x0068(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x006C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_FloatFloat_ReturnValue;              // 0x0070(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_PlayerStart_C_GetUsageData) == 0x000008, "Wrong alignment on BP_PlayerStart_C_GetUsageData");
static_assert(sizeof(BP_PlayerStart_C_GetUsageData) == 0x000078, "Wrong size on BP_PlayerStart_C_GetUsageData");
static_assert(offsetof(BP_PlayerStart_C_GetUsageData, PlayerId) == 0x000000, "Member 'BP_PlayerStart_C_GetUsageData::PlayerId' has a wrong offset!");
static_assert(offsetof(BP_PlayerStart_C_GetUsageData, InAmountOfTime) == 0x000004, "Member 'BP_PlayerStart_C_GetUsageData::InAmountOfTime' has a wrong offset!");
static_assert(offsetof(BP_PlayerStart_C_GetUsageData, Usage) == 0x000008, "Member 'BP_PlayerStart_C_GetUsageData::Usage' has a wrong offset!");
static_assert(offsetof(BP_PlayerStart_C_GetUsageData, UseCountInTime) == 0x00000C, "Member 'BP_PlayerStart_C_GetUsageData::UseCountInTime' has a wrong offset!");
static_assert(offsetof(BP_PlayerStart_C_GetUsageData, CallFunc_LessEqual_FloatFloat_ReturnValue) == 0x000010, "Member 'BP_PlayerStart_C_GetUsageData::CallFunc_LessEqual_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerStart_C_GetUsageData, Temp_int_Array_Index_Variable) == 0x000014, "Member 'BP_PlayerStart_C_GetUsageData::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(BP_PlayerStart_C_GetUsageData, Temp_int_Loop_Counter_Variable) == 0x000018, "Member 'BP_PlayerStart_C_GetUsageData::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(BP_PlayerStart_C_GetUsageData, Temp_bool_Variable) == 0x00001C, "Member 'BP_PlayerStart_C_GetUsageData::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(BP_PlayerStart_C_GetUsageData, CallFunc_Subtract_IntInt_ReturnValue) == 0x000020, "Member 'BP_PlayerStart_C_GetUsageData::CallFunc_Subtract_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerStart_C_GetUsageData, CallFunc_GreaterEqual_IntInt_ReturnValue) == 0x000024, "Member 'BP_PlayerStart_C_GetUsageData::CallFunc_GreaterEqual_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerStart_C_GetUsageData, Temp_int_Variable) == 0x000028, "Member 'BP_PlayerStart_C_GetUsageData::Temp_int_Variable' has a wrong offset!");
static_assert(offsetof(BP_PlayerStart_C_GetUsageData, CallFunc_Map_Find_Value) == 0x000030, "Member 'BP_PlayerStart_C_GetUsageData::CallFunc_Map_Find_Value' has a wrong offset!");
static_assert(offsetof(BP_PlayerStart_C_GetUsageData, CallFunc_Map_Find_ReturnValue) == 0x000040, "Member 'BP_PlayerStart_C_GetUsageData::CallFunc_Map_Find_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerStart_C_GetUsageData, CallFunc_Conv_IntToFloat_ReturnValue) == 0x000044, "Member 'BP_PlayerStart_C_GetUsageData::CallFunc_Conv_IntToFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerStart_C_GetUsageData, CallFunc_Array_Get_Item) == 0x000048, "Member 'BP_PlayerStart_C_GetUsageData::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(BP_PlayerStart_C_GetUsageData, CallFunc_Array_Length_ReturnValue) == 0x00004C, "Member 'BP_PlayerStart_C_GetUsageData::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerStart_C_GetUsageData, CallFunc_Array_Length_ReturnValue_1) == 0x000050, "Member 'BP_PlayerStart_C_GetUsageData::CallFunc_Array_Length_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_PlayerStart_C_GetUsageData, CallFunc_Greater_IntInt_ReturnValue) == 0x000054, "Member 'BP_PlayerStart_C_GetUsageData::CallFunc_Greater_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerStart_C_GetUsageData, CallFunc_Subtract_IntInt_ReturnValue_1) == 0x000058, "Member 'BP_PlayerStart_C_GetUsageData::CallFunc_Subtract_IntInt_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_PlayerStart_C_GetUsageData, CallFunc_Not_PreBool_ReturnValue) == 0x00005C, "Member 'BP_PlayerStart_C_GetUsageData::CallFunc_Not_PreBool_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerStart_C_GetUsageData, CallFunc_Max_ReturnValue) == 0x000060, "Member 'BP_PlayerStart_C_GetUsageData::CallFunc_Max_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerStart_C_GetUsageData, CallFunc_GetGameTimeInSeconds_ReturnValue) == 0x000064, "Member 'BP_PlayerStart_C_GetUsageData::CallFunc_GetGameTimeInSeconds_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerStart_C_GetUsageData, CallFunc_Subtract_FloatFloat_ReturnValue) == 0x000068, "Member 'BP_PlayerStart_C_GetUsageData::CallFunc_Subtract_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerStart_C_GetUsageData, CallFunc_Add_IntInt_ReturnValue) == 0x00006C, "Member 'BP_PlayerStart_C_GetUsageData::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerStart_C_GetUsageData, CallFunc_Less_FloatFloat_ReturnValue) == 0x000070, "Member 'BP_PlayerStart_C_GetUsageData::CallFunc_Less_FloatFloat_ReturnValue' has a wrong offset!");

// Function BP_PlayerStart.BP_PlayerStart_C.DEBUG_ViewBlockedDirections
// 0x0060 (0x0060 - 0x0000)
struct BP_PlayerStart_C_DEBUG_ViewBlockedDirections final
{
public:
	struct FVector                                DEBUG_Direction;                                   // 0x0000(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_RandomUnitVector_ReturnValue;             // 0x000C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Multiply_VectorFloat_ReturnValue;         // 0x0018(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_K2_GetActorLocation_ReturnValue;          // 0x0024(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Add_VectorVector_ReturnValue;             // 0x0030(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Variable;                                 // 0x003C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_CheckIfTheDirectionIsBlocked_Multiplier;  // 0x0040(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_LessEqual_IntInt_ReturnValue;             // 0x0044(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_45[0x3];                                       // 0x0045(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_Divide_FloatFloat_ReturnValue;            // 0x0048(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           CallFunc_LinearColorLerp_ReturnValue;              // 0x004C(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x005C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_PlayerStart_C_DEBUG_ViewBlockedDirections) == 0x000004, "Wrong alignment on BP_PlayerStart_C_DEBUG_ViewBlockedDirections");
static_assert(sizeof(BP_PlayerStart_C_DEBUG_ViewBlockedDirections) == 0x000060, "Wrong size on BP_PlayerStart_C_DEBUG_ViewBlockedDirections");
static_assert(offsetof(BP_PlayerStart_C_DEBUG_ViewBlockedDirections, DEBUG_Direction) == 0x000000, "Member 'BP_PlayerStart_C_DEBUG_ViewBlockedDirections::DEBUG_Direction' has a wrong offset!");
static_assert(offsetof(BP_PlayerStart_C_DEBUG_ViewBlockedDirections, CallFunc_RandomUnitVector_ReturnValue) == 0x00000C, "Member 'BP_PlayerStart_C_DEBUG_ViewBlockedDirections::CallFunc_RandomUnitVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerStart_C_DEBUG_ViewBlockedDirections, CallFunc_Multiply_VectorFloat_ReturnValue) == 0x000018, "Member 'BP_PlayerStart_C_DEBUG_ViewBlockedDirections::CallFunc_Multiply_VectorFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerStart_C_DEBUG_ViewBlockedDirections, CallFunc_K2_GetActorLocation_ReturnValue) == 0x000024, "Member 'BP_PlayerStart_C_DEBUG_ViewBlockedDirections::CallFunc_K2_GetActorLocation_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerStart_C_DEBUG_ViewBlockedDirections, CallFunc_Add_VectorVector_ReturnValue) == 0x000030, "Member 'BP_PlayerStart_C_DEBUG_ViewBlockedDirections::CallFunc_Add_VectorVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerStart_C_DEBUG_ViewBlockedDirections, Temp_int_Variable) == 0x00003C, "Member 'BP_PlayerStart_C_DEBUG_ViewBlockedDirections::Temp_int_Variable' has a wrong offset!");
static_assert(offsetof(BP_PlayerStart_C_DEBUG_ViewBlockedDirections, CallFunc_CheckIfTheDirectionIsBlocked_Multiplier) == 0x000040, "Member 'BP_PlayerStart_C_DEBUG_ViewBlockedDirections::CallFunc_CheckIfTheDirectionIsBlocked_Multiplier' has a wrong offset!");
static_assert(offsetof(BP_PlayerStart_C_DEBUG_ViewBlockedDirections, CallFunc_LessEqual_IntInt_ReturnValue) == 0x000044, "Member 'BP_PlayerStart_C_DEBUG_ViewBlockedDirections::CallFunc_LessEqual_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerStart_C_DEBUG_ViewBlockedDirections, CallFunc_Divide_FloatFloat_ReturnValue) == 0x000048, "Member 'BP_PlayerStart_C_DEBUG_ViewBlockedDirections::CallFunc_Divide_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerStart_C_DEBUG_ViewBlockedDirections, CallFunc_LinearColorLerp_ReturnValue) == 0x00004C, "Member 'BP_PlayerStart_C_DEBUG_ViewBlockedDirections::CallFunc_LinearColorLerp_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerStart_C_DEBUG_ViewBlockedDirections, CallFunc_Add_IntInt_ReturnValue) == 0x00005C, "Member 'BP_PlayerStart_C_DEBUG_ViewBlockedDirections::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");

// Function BP_PlayerStart.BP_PlayerStart_C.CheckIfTheDirectionIsBlocked
// 0x0090 (0x0090 - 0x0000)
struct BP_PlayerStart_C_CheckIfTheDirectionIsBlocked final
{
public:
	struct FVector                                Direction;                                         // 0x0000(0x000C)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Multiplier;                                        // 0x000C(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         HighestMultiplier;                                 // 0x0010(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Array_Index_Variable;                     // 0x0014(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x0018(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               CallFunc_K2_GetActorRotation_ReturnValue;          // 0x001C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor)
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x0028(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2C[0x4];                                       // 0x002C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FVector>                        CallFunc_Map_Keys_Keys;                            // 0x0030(0x0010)(ReferenceParm)
	int32                                         CallFunc_Map_Length_ReturnValue;                   // 0x0040(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Array_Get_Item;                           // 0x0044(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Greater_IntInt_ReturnValue;               // 0x0050(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_51[0x3];                                       // 0x0051(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector2D                              CallFunc_Map_Find_Value;                           // 0x0054(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Map_Find_ReturnValue;                     // 0x005C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Not_PreBool_ReturnValue;                  // 0x005D(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_5E[0x2];                                       // 0x005E(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_BreakVector2D_X;                          // 0x0060(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector2D_Y;                          // 0x0064(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_FMax_ReturnValue;                         // 0x0068(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Normal_ReturnValue;                       // 0x006C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_GreaterGreater_VectorRotator_ReturnValue; // 0x0078(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x0084(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Dot_VectorVector_ReturnValue;             // 0x0088(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x008C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_GreaterEqual_FloatFloat_ReturnValue;      // 0x008D(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_PlayerStart_C_CheckIfTheDirectionIsBlocked) == 0x000008, "Wrong alignment on BP_PlayerStart_C_CheckIfTheDirectionIsBlocked");
static_assert(sizeof(BP_PlayerStart_C_CheckIfTheDirectionIsBlocked) == 0x000090, "Wrong size on BP_PlayerStart_C_CheckIfTheDirectionIsBlocked");
static_assert(offsetof(BP_PlayerStart_C_CheckIfTheDirectionIsBlocked, Direction) == 0x000000, "Member 'BP_PlayerStart_C_CheckIfTheDirectionIsBlocked::Direction' has a wrong offset!");
static_assert(offsetof(BP_PlayerStart_C_CheckIfTheDirectionIsBlocked, Multiplier) == 0x00000C, "Member 'BP_PlayerStart_C_CheckIfTheDirectionIsBlocked::Multiplier' has a wrong offset!");
static_assert(offsetof(BP_PlayerStart_C_CheckIfTheDirectionIsBlocked, HighestMultiplier) == 0x000010, "Member 'BP_PlayerStart_C_CheckIfTheDirectionIsBlocked::HighestMultiplier' has a wrong offset!");
static_assert(offsetof(BP_PlayerStart_C_CheckIfTheDirectionIsBlocked, Temp_int_Array_Index_Variable) == 0x000014, "Member 'BP_PlayerStart_C_CheckIfTheDirectionIsBlocked::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(BP_PlayerStart_C_CheckIfTheDirectionIsBlocked, Temp_int_Loop_Counter_Variable) == 0x000018, "Member 'BP_PlayerStart_C_CheckIfTheDirectionIsBlocked::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(BP_PlayerStart_C_CheckIfTheDirectionIsBlocked, CallFunc_K2_GetActorRotation_ReturnValue) == 0x00001C, "Member 'BP_PlayerStart_C_CheckIfTheDirectionIsBlocked::CallFunc_K2_GetActorRotation_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerStart_C_CheckIfTheDirectionIsBlocked, CallFunc_Add_IntInt_ReturnValue) == 0x000028, "Member 'BP_PlayerStart_C_CheckIfTheDirectionIsBlocked::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerStart_C_CheckIfTheDirectionIsBlocked, CallFunc_Map_Keys_Keys) == 0x000030, "Member 'BP_PlayerStart_C_CheckIfTheDirectionIsBlocked::CallFunc_Map_Keys_Keys' has a wrong offset!");
static_assert(offsetof(BP_PlayerStart_C_CheckIfTheDirectionIsBlocked, CallFunc_Map_Length_ReturnValue) == 0x000040, "Member 'BP_PlayerStart_C_CheckIfTheDirectionIsBlocked::CallFunc_Map_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerStart_C_CheckIfTheDirectionIsBlocked, CallFunc_Array_Get_Item) == 0x000044, "Member 'BP_PlayerStart_C_CheckIfTheDirectionIsBlocked::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(BP_PlayerStart_C_CheckIfTheDirectionIsBlocked, CallFunc_Greater_IntInt_ReturnValue) == 0x000050, "Member 'BP_PlayerStart_C_CheckIfTheDirectionIsBlocked::CallFunc_Greater_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerStart_C_CheckIfTheDirectionIsBlocked, CallFunc_Map_Find_Value) == 0x000054, "Member 'BP_PlayerStart_C_CheckIfTheDirectionIsBlocked::CallFunc_Map_Find_Value' has a wrong offset!");
static_assert(offsetof(BP_PlayerStart_C_CheckIfTheDirectionIsBlocked, CallFunc_Map_Find_ReturnValue) == 0x00005C, "Member 'BP_PlayerStart_C_CheckIfTheDirectionIsBlocked::CallFunc_Map_Find_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerStart_C_CheckIfTheDirectionIsBlocked, CallFunc_Not_PreBool_ReturnValue) == 0x00005D, "Member 'BP_PlayerStart_C_CheckIfTheDirectionIsBlocked::CallFunc_Not_PreBool_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerStart_C_CheckIfTheDirectionIsBlocked, CallFunc_BreakVector2D_X) == 0x000060, "Member 'BP_PlayerStart_C_CheckIfTheDirectionIsBlocked::CallFunc_BreakVector2D_X' has a wrong offset!");
static_assert(offsetof(BP_PlayerStart_C_CheckIfTheDirectionIsBlocked, CallFunc_BreakVector2D_Y) == 0x000064, "Member 'BP_PlayerStart_C_CheckIfTheDirectionIsBlocked::CallFunc_BreakVector2D_Y' has a wrong offset!");
static_assert(offsetof(BP_PlayerStart_C_CheckIfTheDirectionIsBlocked, CallFunc_FMax_ReturnValue) == 0x000068, "Member 'BP_PlayerStart_C_CheckIfTheDirectionIsBlocked::CallFunc_FMax_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerStart_C_CheckIfTheDirectionIsBlocked, CallFunc_Normal_ReturnValue) == 0x00006C, "Member 'BP_PlayerStart_C_CheckIfTheDirectionIsBlocked::CallFunc_Normal_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerStart_C_CheckIfTheDirectionIsBlocked, CallFunc_GreaterGreater_VectorRotator_ReturnValue) == 0x000078, "Member 'BP_PlayerStart_C_CheckIfTheDirectionIsBlocked::CallFunc_GreaterGreater_VectorRotator_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerStart_C_CheckIfTheDirectionIsBlocked, CallFunc_Array_Length_ReturnValue) == 0x000084, "Member 'BP_PlayerStart_C_CheckIfTheDirectionIsBlocked::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerStart_C_CheckIfTheDirectionIsBlocked, CallFunc_Dot_VectorVector_ReturnValue) == 0x000088, "Member 'BP_PlayerStart_C_CheckIfTheDirectionIsBlocked::CallFunc_Dot_VectorVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerStart_C_CheckIfTheDirectionIsBlocked, CallFunc_Less_IntInt_ReturnValue) == 0x00008C, "Member 'BP_PlayerStart_C_CheckIfTheDirectionIsBlocked::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerStart_C_CheckIfTheDirectionIsBlocked, CallFunc_GreaterEqual_FloatFloat_ReturnValue) == 0x00008D, "Member 'BP_PlayerStart_C_CheckIfTheDirectionIsBlocked::CallFunc_GreaterEqual_FloatFloat_ReturnValue' has a wrong offset!");

}

