#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_SRTarget_Base

#include "Basic.hpp"

#include "FlameUI_structs.hpp"
#include "CoreUObject_structs.hpp"
#include "S_IndicatorData_structs.hpp"
#include "Flame_structs.hpp"
#include "Engine_structs.hpp"
#include "Engine_classes.hpp"
#include "UMG_structs.hpp"


namespace SDK
{

// BlueprintGeneratedClass BP_SRTarget_Base.BP_SRTarget_Base_C
// 0x00A8 (0x02C8 - 0x0220)
class ABP_SRTarget_Base_C : public AActor
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x0220(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class USceneComponent*                        DefaultSceneRoot;                                  // 0x0228(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	bool                                          IsActive;                                          // 0x0230(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_231[0x3];                                      // 0x0231(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         DesiredIndicators;                                 // 0x0234(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          HideIndicatorsAfterLoading;                        // 0x0238(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          AllowDestroy;                                      // 0x0239(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_23A[0x6];                                      // 0x023A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class UWidgetComponent*>               Indicators;                                        // 0x0240(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance, ContainsInstancedReference)
	TArray<struct FTransform>                     IndicatorsTransform;                               // 0x0250(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	class UWidgetComponent*                       LatestIndicator;                                   // 0x0260(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         InRangeA;                                          // 0x0268(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         InRangeB;                                          // 0x026C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         OutRangeA;                                         // 0x0270(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         OutRangeB;                                         // 0x0274(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FS_IndicatorData                       IndicatorsData;                                    // 0x0278(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         TimeToStart;                                       // 0x0288(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         IndicatorHeightDuringChallenge;                    // 0x028C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<struct FVector>                        LocationBefore;                                    // 0x0290(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	bool                                          FollowTargetPos;                                   // 0x02A0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_2A1[0x7];                                      // 0x02A1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTimerHandle                           IndicatorDepthUpdateTimer;                         // 0x02A8(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	TArray<class USceneComponent*>                IndicatorScenes;                                   // 0x02B0(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance, ContainsInstancedReference)
	bool                                          ShowHitIndicators;                                 // 0x02C0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)

public:
	void ExecuteUbergraph_BP_SRTarget_Base(int32 EntryPoint);
	void ShowHitMarker(float Damage, class AController* InstigatingController);
	void ResetTargetServer();
	void Event_UpdateIndicatorDepth();
	void ReceiveTick(float DeltaSeconds);
	void UpdateIndicatorVisuals();
	void StartChallengeVisuals();
	void DestroyIndicators();
	void HideIndicators();
	void ReceiveBeginPlay();
	void SetTargetActivity(bool IsActive_0);
	void ResetTarget();
	void ReceivePointDamage(float Damage, const class UDamageType* DamageType, const struct FVector& HitLocation, const struct FVector& HitNormal, class UPrimitiveComponent* HitComponent, class FName BoneName, const struct FVector& ShotFromDirection, class AController* InstigatedBy, class AActor* DamageCauser, const struct FHitResult& HitInfo);
	void SetSpawnPoint(class AActor* SpawnPoint);
	void AttachIndicatorToComponent(int32 IndicatorIndex, class UActorComponent* ComponentToBeAttached, bool UseRelativeLocation, const struct FVector& RelativeLocation);
	void SetIndicatorsWidgetScale(float Scale_X, float Scale_Y);
	void DestroyIndicator(int32 IndicatorToDestroy, bool RemoveFromArray);

	void GetIndicator(int32 IndicatorIndex, class UWidgetComponent** Indicator) const;

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BP_SRTarget_Base_C">();
	}
	static class ABP_SRTarget_Base_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<ABP_SRTarget_Base_C>();
	}
};
static_assert(alignof(ABP_SRTarget_Base_C) == 0x000008, "Wrong alignment on ABP_SRTarget_Base_C");
static_assert(sizeof(ABP_SRTarget_Base_C) == 0x0002C8, "Wrong size on ABP_SRTarget_Base_C");
static_assert(offsetof(ABP_SRTarget_Base_C, UberGraphFrame) == 0x000220, "Member 'ABP_SRTarget_Base_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(ABP_SRTarget_Base_C, DefaultSceneRoot) == 0x000228, "Member 'ABP_SRTarget_Base_C::DefaultSceneRoot' has a wrong offset!");
static_assert(offsetof(ABP_SRTarget_Base_C, IsActive) == 0x000230, "Member 'ABP_SRTarget_Base_C::IsActive' has a wrong offset!");
static_assert(offsetof(ABP_SRTarget_Base_C, DesiredIndicators) == 0x000234, "Member 'ABP_SRTarget_Base_C::DesiredIndicators' has a wrong offset!");
static_assert(offsetof(ABP_SRTarget_Base_C, HideIndicatorsAfterLoading) == 0x000238, "Member 'ABP_SRTarget_Base_C::HideIndicatorsAfterLoading' has a wrong offset!");
static_assert(offsetof(ABP_SRTarget_Base_C, AllowDestroy) == 0x000239, "Member 'ABP_SRTarget_Base_C::AllowDestroy' has a wrong offset!");
static_assert(offsetof(ABP_SRTarget_Base_C, Indicators) == 0x000240, "Member 'ABP_SRTarget_Base_C::Indicators' has a wrong offset!");
static_assert(offsetof(ABP_SRTarget_Base_C, IndicatorsTransform) == 0x000250, "Member 'ABP_SRTarget_Base_C::IndicatorsTransform' has a wrong offset!");
static_assert(offsetof(ABP_SRTarget_Base_C, LatestIndicator) == 0x000260, "Member 'ABP_SRTarget_Base_C::LatestIndicator' has a wrong offset!");
static_assert(offsetof(ABP_SRTarget_Base_C, InRangeA) == 0x000268, "Member 'ABP_SRTarget_Base_C::InRangeA' has a wrong offset!");
static_assert(offsetof(ABP_SRTarget_Base_C, InRangeB) == 0x00026C, "Member 'ABP_SRTarget_Base_C::InRangeB' has a wrong offset!");
static_assert(offsetof(ABP_SRTarget_Base_C, OutRangeA) == 0x000270, "Member 'ABP_SRTarget_Base_C::OutRangeA' has a wrong offset!");
static_assert(offsetof(ABP_SRTarget_Base_C, OutRangeB) == 0x000274, "Member 'ABP_SRTarget_Base_C::OutRangeB' has a wrong offset!");
static_assert(offsetof(ABP_SRTarget_Base_C, IndicatorsData) == 0x000278, "Member 'ABP_SRTarget_Base_C::IndicatorsData' has a wrong offset!");
static_assert(offsetof(ABP_SRTarget_Base_C, TimeToStart) == 0x000288, "Member 'ABP_SRTarget_Base_C::TimeToStart' has a wrong offset!");
static_assert(offsetof(ABP_SRTarget_Base_C, IndicatorHeightDuringChallenge) == 0x00028C, "Member 'ABP_SRTarget_Base_C::IndicatorHeightDuringChallenge' has a wrong offset!");
static_assert(offsetof(ABP_SRTarget_Base_C, LocationBefore) == 0x000290, "Member 'ABP_SRTarget_Base_C::LocationBefore' has a wrong offset!");
static_assert(offsetof(ABP_SRTarget_Base_C, FollowTargetPos) == 0x0002A0, "Member 'ABP_SRTarget_Base_C::FollowTargetPos' has a wrong offset!");
static_assert(offsetof(ABP_SRTarget_Base_C, IndicatorDepthUpdateTimer) == 0x0002A8, "Member 'ABP_SRTarget_Base_C::IndicatorDepthUpdateTimer' has a wrong offset!");
static_assert(offsetof(ABP_SRTarget_Base_C, IndicatorScenes) == 0x0002B0, "Member 'ABP_SRTarget_Base_C::IndicatorScenes' has a wrong offset!");
static_assert(offsetof(ABP_SRTarget_Base_C, ShowHitIndicators) == 0x0002C0, "Member 'ABP_SRTarget_Base_C::ShowHitIndicators' has a wrong offset!");

}

