#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_BeeHive_Base

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "PhysicsCore_structs.hpp"
#include "BP_Lootable_Base_classes.hpp"


namespace SDK
{

// BlueprintGeneratedClass BP_BeeHive_Base.BP_BeeHive_Base_C
// 0x0048 (0x03F0 - 0x03A8)
class ABP_BeeHive_Base_C : public ABP_Lootable_Base_C
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame_BP_BeeHive_Base_C;                  // 0x03A8(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class UAudioComponent*                        BeeAmbience;                                       // 0x03B0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USphereComponent*                       BeeStingOverlap;                                   // 0x03B8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	TArray<class ABP_Character_C*>                OverlapingCharacters;                              // 0x03C0(0x0010)(Edit, BlueprintVisible, DisableEditOnTemplate, DisableEditOnInstance)
	struct FTimerHandle                           StingTimer;                                        // 0x03D0(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	float                                         Sting_Propability;                                 // 0x03D8(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Sting_Damage;                                      // 0x03DC(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Sting_Cooldown;                                    // 0x03E0(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Stinging_Is_Performing;                            // 0x03E4(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_3E5[0x3];                                      // 0x03E5(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 LastStungActor;                                    // 0x03E8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

public:
	void ExecuteUbergraph_BP_BeeHive_Base(int32 EntryPoint);
	void Play_Bee_Sting_Delayed();
	void Play_Bee_Sting_Sound(const struct FVector& Location);
	void ReceiveBeginPlay();
	void Perform_Sting();
	void Stop_Stinging();
	void BndEvt__BeeStingOverlap_K2Node_ComponentBoundEvent_1_ComponentEndOverlapSignature__DelegateSignature(class UPrimitiveComponent* OverlappedComponent, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, int32 OtherBodyIndex);
	void BndEvt__BeeStingOverlap_K2Node_ComponentBoundEvent_0_ComponentBeginOverlapSignature__DelegateSignature(class UPrimitiveComponent* OverlappedComponent, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, int32 OtherBodyIndex, bool bFromSweep, const struct FHitResult& SweepResult);
	void Damage_Random_Overlapping_Character();
	void Can_Sting_Player(class ABP_Character_C* Character, bool* Success);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BP_BeeHive_Base_C">();
	}
	static class ABP_BeeHive_Base_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<ABP_BeeHive_Base_C>();
	}
};
static_assert(alignof(ABP_BeeHive_Base_C) == 0x000008, "Wrong alignment on ABP_BeeHive_Base_C");
static_assert(sizeof(ABP_BeeHive_Base_C) == 0x0003F0, "Wrong size on ABP_BeeHive_Base_C");
static_assert(offsetof(ABP_BeeHive_Base_C, UberGraphFrame_BP_BeeHive_Base_C) == 0x0003A8, "Member 'ABP_BeeHive_Base_C::UberGraphFrame_BP_BeeHive_Base_C' has a wrong offset!");
static_assert(offsetof(ABP_BeeHive_Base_C, BeeAmbience) == 0x0003B0, "Member 'ABP_BeeHive_Base_C::BeeAmbience' has a wrong offset!");
static_assert(offsetof(ABP_BeeHive_Base_C, BeeStingOverlap) == 0x0003B8, "Member 'ABP_BeeHive_Base_C::BeeStingOverlap' has a wrong offset!");
static_assert(offsetof(ABP_BeeHive_Base_C, OverlapingCharacters) == 0x0003C0, "Member 'ABP_BeeHive_Base_C::OverlapingCharacters' has a wrong offset!");
static_assert(offsetof(ABP_BeeHive_Base_C, StingTimer) == 0x0003D0, "Member 'ABP_BeeHive_Base_C::StingTimer' has a wrong offset!");
static_assert(offsetof(ABP_BeeHive_Base_C, Sting_Propability) == 0x0003D8, "Member 'ABP_BeeHive_Base_C::Sting_Propability' has a wrong offset!");
static_assert(offsetof(ABP_BeeHive_Base_C, Sting_Damage) == 0x0003DC, "Member 'ABP_BeeHive_Base_C::Sting_Damage' has a wrong offset!");
static_assert(offsetof(ABP_BeeHive_Base_C, Sting_Cooldown) == 0x0003E0, "Member 'ABP_BeeHive_Base_C::Sting_Cooldown' has a wrong offset!");
static_assert(offsetof(ABP_BeeHive_Base_C, Stinging_Is_Performing) == 0x0003E4, "Member 'ABP_BeeHive_Base_C::Stinging_Is_Performing' has a wrong offset!");
static_assert(offsetof(ABP_BeeHive_Base_C, LastStungActor) == 0x0003E8, "Member 'ABP_BeeHive_Base_C::LastStungActor' has a wrong offset!");

}

