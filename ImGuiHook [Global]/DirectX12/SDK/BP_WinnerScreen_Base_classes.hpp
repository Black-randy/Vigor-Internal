#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_WinnerScreen_Base

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "Engine_classes.hpp"
#include "FlameUI_structs.hpp"
#include "CoreUObject_structs.hpp"


namespace SDK
{

// BlueprintGeneratedClass BP_WinnerScreen_Base.BP_WinnerScreen_Base_C
// 0x0100 (0x0320 - 0x0220)
class ABP_WinnerScreen_Base_C : public AActor
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x0220(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class USpringArmComponent*                    CameraArm;                                         // 0x0228(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USceneComponent*                        Scene;                                             // 0x0230(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UCameraComponent*                       Camera;                                            // 0x0238(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	TArray<class ABP_Mannequin_WinnerScreen_Base_C*> Mannequins;                                        // 0x0240(0x0010)(Edit, BlueprintVisible, DisableEditOnTemplate, ExposeOnSpawn)
	float                                         CameraRotationStart;                               // 0x0250(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CameraRotationEnd;                                 // 0x0254(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CameraRotationValueSpeed;                          // 0x0258(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CameraRotationValue;                               // 0x025C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          ShouldIncreaseRotation;                            // 0x0260(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_261[0x7];                                      // 0x0261(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TMap<class AHumanPlayerController*, class AHumanCharacter*> Winning_Players;                                   // 0x0268(0x0050)(Edit, BlueprintVisible, DisableEditOnTemplate, DisableEditOnInstance)
	TArray<class AHumanPlayerController*>         PlayersSetForRespawn;                              // 0x02B8(0x0010)(Edit, BlueprintVisible, DisableEditOnTemplate, DisableEditOnInstance)
	class UUI_WinnerScreen_Base_C*                WinningScreen_UI;                                  // 0x02C8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         TimeSpentWaitingForServer;                         // 0x02D0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2D4[0x4];                                      // 0x02D4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class AHumanCharacter*                        CurrentHightlightedPlayer;                         // 0x02D8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<class AHumanCharacter*>                HighlightedPlayerCharacters;                       // 0x02E0(0x0010)(Edit, BlueprintVisible, DisableEditOnTemplate, DisableEditOnInstance)
	int32                                         LastHighlightedPlayerIndex;                        // 0x02F0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2F4[0x4];                                      // 0x02F4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTimerHandle                           SecondPassedTimer;                                 // 0x02F8(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	int32                                         Leave_Time;                                        // 0x0300(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Max_Wait_Time;                                     // 0x0304(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FDateTime                              Start_Wait_Time;                                   // 0x0308(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	class UClass*                                 Winner_Screen_Class;                               // 0x0310(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Scoreboard_Show_Delay;                             // 0x0318(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          LocalPlayerWon;                                    // 0x031C(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)

public:
	void ExecuteUbergraph_BP_WinnerScreen_Base(int32 EntryPoint);
	void StartWinnerScreenTick();
	void CharactersForUI_Ready();
	void WinnerScreenAdded();
	void WinningScreenReadyGM_Specific_ClientEvent();
	void Disable_Players_Shooting();
	void Winning_Screen_Delay();
	void Set_Highlighted_Player(class AHumanCharacter* HumanCharacter);
	void Start_Montage();
	void Count_Time_Spent_Waiting();
	void ReceiveTick(float DeltaSeconds);
	void Wait_For_Faded_In();
	void Winning_Screen_Ready(const TArray<class AHumanCharacter*>& Winning_Player_Characters);
	void Start_Winning_Screen_Clients(int32 Leave_Match_Time);
	void Set_Player_Camera();
	void Start_FadeIn();
	void Start_FadeOut();
	void Start_Winning_Screen_Server(const TArray<class AHumanPlayerController*>& Winning_Players_0, int32 Leave_Time_Time);
	void ReceiveBeginPlay();
	void Try_Get_Missing_Players();
	void Cycle_Next_Hightlighted_Player();

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BP_WinnerScreen_Base_C">();
	}
	static class ABP_WinnerScreen_Base_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<ABP_WinnerScreen_Base_C>();
	}
};
static_assert(alignof(ABP_WinnerScreen_Base_C) == 0x000008, "Wrong alignment on ABP_WinnerScreen_Base_C");
static_assert(sizeof(ABP_WinnerScreen_Base_C) == 0x000320, "Wrong size on ABP_WinnerScreen_Base_C");
static_assert(offsetof(ABP_WinnerScreen_Base_C, UberGraphFrame) == 0x000220, "Member 'ABP_WinnerScreen_Base_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(ABP_WinnerScreen_Base_C, CameraArm) == 0x000228, "Member 'ABP_WinnerScreen_Base_C::CameraArm' has a wrong offset!");
static_assert(offsetof(ABP_WinnerScreen_Base_C, Scene) == 0x000230, "Member 'ABP_WinnerScreen_Base_C::Scene' has a wrong offset!");
static_assert(offsetof(ABP_WinnerScreen_Base_C, Camera) == 0x000238, "Member 'ABP_WinnerScreen_Base_C::Camera' has a wrong offset!");
static_assert(offsetof(ABP_WinnerScreen_Base_C, Mannequins) == 0x000240, "Member 'ABP_WinnerScreen_Base_C::Mannequins' has a wrong offset!");
static_assert(offsetof(ABP_WinnerScreen_Base_C, CameraRotationStart) == 0x000250, "Member 'ABP_WinnerScreen_Base_C::CameraRotationStart' has a wrong offset!");
static_assert(offsetof(ABP_WinnerScreen_Base_C, CameraRotationEnd) == 0x000254, "Member 'ABP_WinnerScreen_Base_C::CameraRotationEnd' has a wrong offset!");
static_assert(offsetof(ABP_WinnerScreen_Base_C, CameraRotationValueSpeed) == 0x000258, "Member 'ABP_WinnerScreen_Base_C::CameraRotationValueSpeed' has a wrong offset!");
static_assert(offsetof(ABP_WinnerScreen_Base_C, CameraRotationValue) == 0x00025C, "Member 'ABP_WinnerScreen_Base_C::CameraRotationValue' has a wrong offset!");
static_assert(offsetof(ABP_WinnerScreen_Base_C, ShouldIncreaseRotation) == 0x000260, "Member 'ABP_WinnerScreen_Base_C::ShouldIncreaseRotation' has a wrong offset!");
static_assert(offsetof(ABP_WinnerScreen_Base_C, Winning_Players) == 0x000268, "Member 'ABP_WinnerScreen_Base_C::Winning_Players' has a wrong offset!");
static_assert(offsetof(ABP_WinnerScreen_Base_C, PlayersSetForRespawn) == 0x0002B8, "Member 'ABP_WinnerScreen_Base_C::PlayersSetForRespawn' has a wrong offset!");
static_assert(offsetof(ABP_WinnerScreen_Base_C, WinningScreen_UI) == 0x0002C8, "Member 'ABP_WinnerScreen_Base_C::WinningScreen_UI' has a wrong offset!");
static_assert(offsetof(ABP_WinnerScreen_Base_C, TimeSpentWaitingForServer) == 0x0002D0, "Member 'ABP_WinnerScreen_Base_C::TimeSpentWaitingForServer' has a wrong offset!");
static_assert(offsetof(ABP_WinnerScreen_Base_C, CurrentHightlightedPlayer) == 0x0002D8, "Member 'ABP_WinnerScreen_Base_C::CurrentHightlightedPlayer' has a wrong offset!");
static_assert(offsetof(ABP_WinnerScreen_Base_C, HighlightedPlayerCharacters) == 0x0002E0, "Member 'ABP_WinnerScreen_Base_C::HighlightedPlayerCharacters' has a wrong offset!");
static_assert(offsetof(ABP_WinnerScreen_Base_C, LastHighlightedPlayerIndex) == 0x0002F0, "Member 'ABP_WinnerScreen_Base_C::LastHighlightedPlayerIndex' has a wrong offset!");
static_assert(offsetof(ABP_WinnerScreen_Base_C, SecondPassedTimer) == 0x0002F8, "Member 'ABP_WinnerScreen_Base_C::SecondPassedTimer' has a wrong offset!");
static_assert(offsetof(ABP_WinnerScreen_Base_C, Leave_Time) == 0x000300, "Member 'ABP_WinnerScreen_Base_C::Leave_Time' has a wrong offset!");
static_assert(offsetof(ABP_WinnerScreen_Base_C, Max_Wait_Time) == 0x000304, "Member 'ABP_WinnerScreen_Base_C::Max_Wait_Time' has a wrong offset!");
static_assert(offsetof(ABP_WinnerScreen_Base_C, Start_Wait_Time) == 0x000308, "Member 'ABP_WinnerScreen_Base_C::Start_Wait_Time' has a wrong offset!");
static_assert(offsetof(ABP_WinnerScreen_Base_C, Winner_Screen_Class) == 0x000310, "Member 'ABP_WinnerScreen_Base_C::Winner_Screen_Class' has a wrong offset!");
static_assert(offsetof(ABP_WinnerScreen_Base_C, Scoreboard_Show_Delay) == 0x000318, "Member 'ABP_WinnerScreen_Base_C::Scoreboard_Show_Delay' has a wrong offset!");
static_assert(offsetof(ABP_WinnerScreen_Base_C, LocalPlayerWon) == 0x00031C, "Member 'ABP_WinnerScreen_Base_C::LocalPlayerWon' has a wrong offset!");

}

