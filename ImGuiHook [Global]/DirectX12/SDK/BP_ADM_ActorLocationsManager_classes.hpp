#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_ADM_ActorLocationsManager

#include "Basic.hpp"

#include "BP_GameModeComponent_Base_classes.hpp"


namespace SDK
{

// BlueprintGeneratedClass BP_ADM_ActorLocationsManager.BP_ADM_ActorLocationsManager_C
// 0x0018 (0x00D0 - 0x00B8)
class UBP_ADM_ActorLocationsManager_C final : public UBP_GameModeComponent_Base_C
{
public:
	bool                                          Initialized;                                       // 0x00B8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_B9[0x7];                                       // 0x00B9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class ABP_ADM_ActorLocation_Base_C*>   Actor_Locations;                                   // 0x00C0(0x0010)(Edit, BlueprintVisible, DisableEditOnTemplate, DisableEditOnInstance)

public:
	void Get_Locations(class UClass* Location_Type, bool Only_Free_Locations, TArray<class ABP_ADM_ActorLocation_Base_C*>* Locations);
	void Get_Location_Most_Distant_from_Location_Types(class UClass* Location_Type, bool Only_Free_Location, TArray<class UClass*>& Location_Types, bool Only_Used_Locations, class ABP_ADM_ActorLocation_Base_C** Location);
	void Get_Locations_Some_Distance_from_Nearest_Location_Types(class UClass* Location_Type, bool Only_Free_Locations, TArray<class UClass*>& Location_Types, bool Only_Used_Locations, float Minimum_Distance, float Maximum_Distance, TArray<class ABP_ADM_ActorLocation_Base_C*>* Locations);
	void Get_Locations_Used_by_Module(class UClass* Location_Type, class UBP_GMComponent_ADM_Base_C* Module, TArray<class ABP_ADM_ActorLocation_Base_C*>* Locations);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BP_ADM_ActorLocationsManager_C">();
	}
	static class UBP_ADM_ActorLocationsManager_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UBP_ADM_ActorLocationsManager_C>();
	}
};
static_assert(alignof(UBP_ADM_ActorLocationsManager_C) == 0x000008, "Wrong alignment on UBP_ADM_ActorLocationsManager_C");
static_assert(sizeof(UBP_ADM_ActorLocationsManager_C) == 0x0000D0, "Wrong size on UBP_ADM_ActorLocationsManager_C");
static_assert(offsetof(UBP_ADM_ActorLocationsManager_C, Initialized) == 0x0000B8, "Member 'UBP_ADM_ActorLocationsManager_C::Initialized' has a wrong offset!");
static_assert(offsetof(UBP_ADM_ActorLocationsManager_C, Actor_Locations) == 0x0000C0, "Member 'UBP_ADM_ActorLocationsManager_C::Actor_Locations' has a wrong offset!");

}

