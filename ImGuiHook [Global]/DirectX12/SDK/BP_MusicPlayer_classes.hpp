#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_MusicPlayer

#include "Basic.hpp"

#include "Flame_structs.hpp"
#include "Engine_structs.hpp"
#include "Engine_classes.hpp"


namespace SDK
{

// BlueprintGeneratedClass BP_MusicPlayer.BP_MusicPlayer_C
// 0x0128 (0x0348 - 0x0220)
class ABP_MusicPlayer_C final : public AActor
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x0220(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class UStaticMeshComponent*                   Album;                                             // 0x0228(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UStaticMeshComponent*                   Arm;                                               // 0x0230(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UStaticMeshComponent*                   Record;                                            // 0x0238(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UStaticMeshComponent*                   Disc;                                              // 0x0240(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UBP_InteractionItemComponent_C*         BP_InteractionItemComponent;                       // 0x0248(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UStaticMeshComponent*                   StaticMesh;                                        // 0x0250(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	float                                         Timeline_ArmMove_ArmPositionLerp_64F225854C8616EFD2F104B180786994; // 0x0258(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ETimelineDirection                            Timeline_ArmMove__Direction_64F225854C8616EFD2F104B180786994; // 0x025C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_25D[0x3];                                      // 0x025D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UTimelineComponent*                     Timeline_ArmMove;                                  // 0x0260(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Timeline_DiscSpin_DiscSpin_9F4171454D9425EFB490E98B0DC31524; // 0x0268(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ETimelineDirection                            Timeline_DiscSpin__Direction_9F4171454D9425EFB490E98B0DC31524; // 0x026C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_26D[0x3];                                      // 0x026D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UTimelineComponent*                     Timeline_DiscSpin;                                 // 0x0270(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UAudioComponent*                        LevelMusicComponent;                               // 0x0278(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UBP_MusicTrack_C*                       DefaultTrack;                                      // 0x0280(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UUI_MusicPlayer_C*                      MusicPlayerUI;                                     // 0x0288(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<class UBP_MusicTrack_C*>               TrackList;                                         // 0x0290(0x0010)(Edit, BlueprintVisible)
	class UBP_MusicTrack_C*                       SelectedTrack;                                     // 0x02A0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UBP_MusicTrack_C*                       CurrentTrack;                                      // 0x02A8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsShuffleActive;                                   // 0x02B0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_2B1[0x7];                                      // 0x02B1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UBP_MusicTrack_C*                       PausedTrack;                                       // 0x02B8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FTimerHandle                           NextTrackPlayTimer;                                // 0x02C0(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	TArray<class UBP_MusicTrack_C*>               TrackQueue;                                        // 0x02C8(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	float                                         FadeInOutTime;                                     // 0x02D8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2DC[0x4];                                      // 0x02DC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTimerHandle                           FadeOutFadeInTimer;                                // 0x02E0(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	bool                                          Initialized;                                       // 0x02E8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_2E9[0x7];                                      // 0x02E9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTimerHandle                           LastTrackPlayedTimer;                              // 0x02F0(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	int32                                         ShelterLevel;                                      // 0x02F8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         ShelterLevelRequired;                              // 0x02FC(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          OnboardingFinishedBound;                           // 0x0300(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          PlayDefaultOnShelterEntry;                         // 0x0301(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_302[0x6];                                      // 0x0302(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class USoundBase*                             CurrentlyPlayedSound;                              // 0x0308(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          SkipFirstNotification;                             // 0x0310(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_311[0x3];                                      // 0x0311(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         SongStartTime;                                     // 0x0314(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         SongPauseTime;                                     // 0x0318(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bShouldContinueAfterInterruption;                  // 0x031C(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          CanAutoPlay;                                       // 0x031D(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          Christmas_theme;                                   // 0x031E(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_31F[0x1];                                      // 0x031F(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	TSoftObjectPtr<class USoundWave>              Christmas_default_track;                           // 0x0320(0x0028)(Edit, BlueprintVisible, DisableEditOnInstance, HasGetValueTypeHash)

public:
	void ExecuteUbergraph_BP_MusicPlayer(int32 EntryPoint);
	void Shelter_theme_loaded(ESublevelTheme Theme);
	void UnbindSoundEnded();
	void BoundSoundEnded();
	void BindEventOnSoundFinish();
	void AnnounceSelfToGM();
	void Internal_Load_and_Play_Track(const class UBP_MusicTrack_C*& Track_Reference, class UBP_MusicTrack_C* Previous_Track);
	void StopPlayingTimeline();
	void StartPlayingTimeline();
	void Onboarding_Finished();
	void Find_SaveGame();
	void SaveGame_Ready();
	void Shelter_Level_Changed(int32 NewLevel);
	void DelayedCheckForPlayerController();
	void Stash_Loaded(class AStash* Sender, class UStashComponent* Inventory);
	void ReceiveBeginPlay();
	void Show_Next_Track_Notification(const struct FMusicTrackRow& TrackInfo);
	void SongElapsedTime();
	void ShuffleButtonPressed_Event();
	void BndEvt__BP_InteractionItemComponent_K2Node_ComponentBoundEvent_0_Interaction_Start_On_Client__DelegateSignature(class UInteractionItemComponent* Sender, class AActor* Interacting_Actor);
	void TrackEnded();
	void Analytics_Player_Played_Track(const struct FMusicTrackRow& TrackInfo);
	void Analytics_Player_Interacted();
	void OnLoaded_303A9E7341428F48F05BE78A40C6C13C(class UObject* Loaded);
	void Timeline_ArmMove__UpdateFunc();
	void Timeline_ArmMove__FinishedFunc();
	void Timeline_DiscSpin__UpdateFunc();
	void Timeline_DiscSpin__FinishedFunc();
	void UserConstructionScript();
	void Initialize(TArray<class UBP_MusicTrack_C*>& TrackList_0);
	void SelectTrack(class UBP_MusicTrack_C* Track);
	void ShowUI();
	void HideUI();
	void PlayNextTrack();
	void PlayTrack(class UBP_MusicTrack_C*& Track);
	void ResetQueue(class UBP_MusicTrack_C* LastTrack, bool* bEmptyQueue);
	void StopTrack();
	void FadeOutOldTrack();
	void FadeInLastPlayedTrack();
	void GetMusicTracksFromDataTable(TArray<class UBP_MusicTrack_C*>* MusicTrackList);
	void HasPlayerUnlockedMusicTrack(class UClass* CheckedMusicTrack, int32 Required_Shelter_Level, bool* IsUnlocked);
	void UnlockMusicTracks();
	void RefreshMusicPlayerVisibility();
	void GetDefaultTrack(TSoftObjectPtr<class USoundWave>* DefaultSound);
	void IsMusicPlayerAvailable(bool* Available);
	void FindDefaultTrackForCurrentShelterLevel();
	void AddTrackBackInQueue(class UBP_MusicTrack_C* Track);
	void PauseTrack();
	void CheckBlackListedTracks(bool* bShouldSaveAfterwards);
	void BlacklistTrack(class UBP_MusicTrack_C* TrackToBlacklist, bool bShouldBeBlacklisted);
	void IsMusicBlacklisted(class UBP_MusicTrack_C* Track, TSoftObjectPtr<class USoundWave> SoftRefSound, bool* Blacklisted);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BP_MusicPlayer_C">();
	}
	static class ABP_MusicPlayer_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<ABP_MusicPlayer_C>();
	}
};
static_assert(alignof(ABP_MusicPlayer_C) == 0x000008, "Wrong alignment on ABP_MusicPlayer_C");
static_assert(sizeof(ABP_MusicPlayer_C) == 0x000348, "Wrong size on ABP_MusicPlayer_C");
static_assert(offsetof(ABP_MusicPlayer_C, UberGraphFrame) == 0x000220, "Member 'ABP_MusicPlayer_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(ABP_MusicPlayer_C, Album) == 0x000228, "Member 'ABP_MusicPlayer_C::Album' has a wrong offset!");
static_assert(offsetof(ABP_MusicPlayer_C, Arm) == 0x000230, "Member 'ABP_MusicPlayer_C::Arm' has a wrong offset!");
static_assert(offsetof(ABP_MusicPlayer_C, Record) == 0x000238, "Member 'ABP_MusicPlayer_C::Record' has a wrong offset!");
static_assert(offsetof(ABP_MusicPlayer_C, Disc) == 0x000240, "Member 'ABP_MusicPlayer_C::Disc' has a wrong offset!");
static_assert(offsetof(ABP_MusicPlayer_C, BP_InteractionItemComponent) == 0x000248, "Member 'ABP_MusicPlayer_C::BP_InteractionItemComponent' has a wrong offset!");
static_assert(offsetof(ABP_MusicPlayer_C, StaticMesh) == 0x000250, "Member 'ABP_MusicPlayer_C::StaticMesh' has a wrong offset!");
static_assert(offsetof(ABP_MusicPlayer_C, Timeline_ArmMove_ArmPositionLerp_64F225854C8616EFD2F104B180786994) == 0x000258, "Member 'ABP_MusicPlayer_C::Timeline_ArmMove_ArmPositionLerp_64F225854C8616EFD2F104B180786994' has a wrong offset!");
static_assert(offsetof(ABP_MusicPlayer_C, Timeline_ArmMove__Direction_64F225854C8616EFD2F104B180786994) == 0x00025C, "Member 'ABP_MusicPlayer_C::Timeline_ArmMove__Direction_64F225854C8616EFD2F104B180786994' has a wrong offset!");
static_assert(offsetof(ABP_MusicPlayer_C, Timeline_ArmMove) == 0x000260, "Member 'ABP_MusicPlayer_C::Timeline_ArmMove' has a wrong offset!");
static_assert(offsetof(ABP_MusicPlayer_C, Timeline_DiscSpin_DiscSpin_9F4171454D9425EFB490E98B0DC31524) == 0x000268, "Member 'ABP_MusicPlayer_C::Timeline_DiscSpin_DiscSpin_9F4171454D9425EFB490E98B0DC31524' has a wrong offset!");
static_assert(offsetof(ABP_MusicPlayer_C, Timeline_DiscSpin__Direction_9F4171454D9425EFB490E98B0DC31524) == 0x00026C, "Member 'ABP_MusicPlayer_C::Timeline_DiscSpin__Direction_9F4171454D9425EFB490E98B0DC31524' has a wrong offset!");
static_assert(offsetof(ABP_MusicPlayer_C, Timeline_DiscSpin) == 0x000270, "Member 'ABP_MusicPlayer_C::Timeline_DiscSpin' has a wrong offset!");
static_assert(offsetof(ABP_MusicPlayer_C, LevelMusicComponent) == 0x000278, "Member 'ABP_MusicPlayer_C::LevelMusicComponent' has a wrong offset!");
static_assert(offsetof(ABP_MusicPlayer_C, DefaultTrack) == 0x000280, "Member 'ABP_MusicPlayer_C::DefaultTrack' has a wrong offset!");
static_assert(offsetof(ABP_MusicPlayer_C, MusicPlayerUI) == 0x000288, "Member 'ABP_MusicPlayer_C::MusicPlayerUI' has a wrong offset!");
static_assert(offsetof(ABP_MusicPlayer_C, TrackList) == 0x000290, "Member 'ABP_MusicPlayer_C::TrackList' has a wrong offset!");
static_assert(offsetof(ABP_MusicPlayer_C, SelectedTrack) == 0x0002A0, "Member 'ABP_MusicPlayer_C::SelectedTrack' has a wrong offset!");
static_assert(offsetof(ABP_MusicPlayer_C, CurrentTrack) == 0x0002A8, "Member 'ABP_MusicPlayer_C::CurrentTrack' has a wrong offset!");
static_assert(offsetof(ABP_MusicPlayer_C, IsShuffleActive) == 0x0002B0, "Member 'ABP_MusicPlayer_C::IsShuffleActive' has a wrong offset!");
static_assert(offsetof(ABP_MusicPlayer_C, PausedTrack) == 0x0002B8, "Member 'ABP_MusicPlayer_C::PausedTrack' has a wrong offset!");
static_assert(offsetof(ABP_MusicPlayer_C, NextTrackPlayTimer) == 0x0002C0, "Member 'ABP_MusicPlayer_C::NextTrackPlayTimer' has a wrong offset!");
static_assert(offsetof(ABP_MusicPlayer_C, TrackQueue) == 0x0002C8, "Member 'ABP_MusicPlayer_C::TrackQueue' has a wrong offset!");
static_assert(offsetof(ABP_MusicPlayer_C, FadeInOutTime) == 0x0002D8, "Member 'ABP_MusicPlayer_C::FadeInOutTime' has a wrong offset!");
static_assert(offsetof(ABP_MusicPlayer_C, FadeOutFadeInTimer) == 0x0002E0, "Member 'ABP_MusicPlayer_C::FadeOutFadeInTimer' has a wrong offset!");
static_assert(offsetof(ABP_MusicPlayer_C, Initialized) == 0x0002E8, "Member 'ABP_MusicPlayer_C::Initialized' has a wrong offset!");
static_assert(offsetof(ABP_MusicPlayer_C, LastTrackPlayedTimer) == 0x0002F0, "Member 'ABP_MusicPlayer_C::LastTrackPlayedTimer' has a wrong offset!");
static_assert(offsetof(ABP_MusicPlayer_C, ShelterLevel) == 0x0002F8, "Member 'ABP_MusicPlayer_C::ShelterLevel' has a wrong offset!");
static_assert(offsetof(ABP_MusicPlayer_C, ShelterLevelRequired) == 0x0002FC, "Member 'ABP_MusicPlayer_C::ShelterLevelRequired' has a wrong offset!");
static_assert(offsetof(ABP_MusicPlayer_C, OnboardingFinishedBound) == 0x000300, "Member 'ABP_MusicPlayer_C::OnboardingFinishedBound' has a wrong offset!");
static_assert(offsetof(ABP_MusicPlayer_C, PlayDefaultOnShelterEntry) == 0x000301, "Member 'ABP_MusicPlayer_C::PlayDefaultOnShelterEntry' has a wrong offset!");
static_assert(offsetof(ABP_MusicPlayer_C, CurrentlyPlayedSound) == 0x000308, "Member 'ABP_MusicPlayer_C::CurrentlyPlayedSound' has a wrong offset!");
static_assert(offsetof(ABP_MusicPlayer_C, SkipFirstNotification) == 0x000310, "Member 'ABP_MusicPlayer_C::SkipFirstNotification' has a wrong offset!");
static_assert(offsetof(ABP_MusicPlayer_C, SongStartTime) == 0x000314, "Member 'ABP_MusicPlayer_C::SongStartTime' has a wrong offset!");
static_assert(offsetof(ABP_MusicPlayer_C, SongPauseTime) == 0x000318, "Member 'ABP_MusicPlayer_C::SongPauseTime' has a wrong offset!");
static_assert(offsetof(ABP_MusicPlayer_C, bShouldContinueAfterInterruption) == 0x00031C, "Member 'ABP_MusicPlayer_C::bShouldContinueAfterInterruption' has a wrong offset!");
static_assert(offsetof(ABP_MusicPlayer_C, CanAutoPlay) == 0x00031D, "Member 'ABP_MusicPlayer_C::CanAutoPlay' has a wrong offset!");
static_assert(offsetof(ABP_MusicPlayer_C, Christmas_theme) == 0x00031E, "Member 'ABP_MusicPlayer_C::Christmas_theme' has a wrong offset!");
static_assert(offsetof(ABP_MusicPlayer_C, Christmas_default_track) == 0x000320, "Member 'ABP_MusicPlayer_C::Christmas_default_track' has a wrong offset!");

}

