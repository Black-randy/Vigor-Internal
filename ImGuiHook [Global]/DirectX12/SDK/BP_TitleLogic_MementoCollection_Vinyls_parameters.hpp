#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_TitleLogic_MementoCollection_Vinyls

#include "Basic.hpp"

#include "F_TitleRank_structs.hpp"
#include "F_MementoCollectionInfo_structs.hpp"
#include "F_MementoInfo_structs.hpp"


namespace SDK::Params
{

// Function BP_TitleLogic_MementoCollection_Vinyls.BP_TitleLogic_MementoCollection_Vinyls_C.ExecuteUbergraph_BP_TitleLogic_MementoCollection_Vinyls
// 0x0048 (0x0048 - 0x0000)
struct BP_TitleLogic_MementoCollection_Vinyls_C_ExecuteUbergraph_BP_TitleLogic_MementoCollection_Vinyls final
{
public:
	int32                                         EntryPoint;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TDelegate<void(class AStash* Sender, class UStashComponent* Inventory)> K2Node_CreateDelegate_OutputDelegate;              // 0x0004(0x0010)(ZeroConstructor, NoDestructor)
	int32                                         CallFunc_GetUserControllerId_ReturnValue;          // 0x0014(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AHumanPlayerController*                 CallFunc_GetHumanPlayerControllerByControllerId_ReturnValue; // 0x0018(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AStash*                                 CallFunc_GetStash_ReturnValue;                     // 0x0020(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ABP_PlayerState_C*                      K2Node_DynamicCast_AsBP_Player_State;              // 0x0028(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0030(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0031(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue_1;                    // 0x0032(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_33[0x5];                                       // 0x0033(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	class AStash*                                 K2Node_CustomEvent_Sender;                         // 0x0038(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UStashComponent*                        K2Node_CustomEvent_Inventory;                      // 0x0040(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_TitleLogic_MementoCollection_Vinyls_C_ExecuteUbergraph_BP_TitleLogic_MementoCollection_Vinyls) == 0x000008, "Wrong alignment on BP_TitleLogic_MementoCollection_Vinyls_C_ExecuteUbergraph_BP_TitleLogic_MementoCollection_Vinyls");
static_assert(sizeof(BP_TitleLogic_MementoCollection_Vinyls_C_ExecuteUbergraph_BP_TitleLogic_MementoCollection_Vinyls) == 0x000048, "Wrong size on BP_TitleLogic_MementoCollection_Vinyls_C_ExecuteUbergraph_BP_TitleLogic_MementoCollection_Vinyls");
static_assert(offsetof(BP_TitleLogic_MementoCollection_Vinyls_C_ExecuteUbergraph_BP_TitleLogic_MementoCollection_Vinyls, EntryPoint) == 0x000000, "Member 'BP_TitleLogic_MementoCollection_Vinyls_C_ExecuteUbergraph_BP_TitleLogic_MementoCollection_Vinyls::EntryPoint' has a wrong offset!");
static_assert(offsetof(BP_TitleLogic_MementoCollection_Vinyls_C_ExecuteUbergraph_BP_TitleLogic_MementoCollection_Vinyls, K2Node_CreateDelegate_OutputDelegate) == 0x000004, "Member 'BP_TitleLogic_MementoCollection_Vinyls_C_ExecuteUbergraph_BP_TitleLogic_MementoCollection_Vinyls::K2Node_CreateDelegate_OutputDelegate' has a wrong offset!");
static_assert(offsetof(BP_TitleLogic_MementoCollection_Vinyls_C_ExecuteUbergraph_BP_TitleLogic_MementoCollection_Vinyls, CallFunc_GetUserControllerId_ReturnValue) == 0x000014, "Member 'BP_TitleLogic_MementoCollection_Vinyls_C_ExecuteUbergraph_BP_TitleLogic_MementoCollection_Vinyls::CallFunc_GetUserControllerId_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_TitleLogic_MementoCollection_Vinyls_C_ExecuteUbergraph_BP_TitleLogic_MementoCollection_Vinyls, CallFunc_GetHumanPlayerControllerByControllerId_ReturnValue) == 0x000018, "Member 'BP_TitleLogic_MementoCollection_Vinyls_C_ExecuteUbergraph_BP_TitleLogic_MementoCollection_Vinyls::CallFunc_GetHumanPlayerControllerByControllerId_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_TitleLogic_MementoCollection_Vinyls_C_ExecuteUbergraph_BP_TitleLogic_MementoCollection_Vinyls, CallFunc_GetStash_ReturnValue) == 0x000020, "Member 'BP_TitleLogic_MementoCollection_Vinyls_C_ExecuteUbergraph_BP_TitleLogic_MementoCollection_Vinyls::CallFunc_GetStash_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_TitleLogic_MementoCollection_Vinyls_C_ExecuteUbergraph_BP_TitleLogic_MementoCollection_Vinyls, K2Node_DynamicCast_AsBP_Player_State) == 0x000028, "Member 'BP_TitleLogic_MementoCollection_Vinyls_C_ExecuteUbergraph_BP_TitleLogic_MementoCollection_Vinyls::K2Node_DynamicCast_AsBP_Player_State' has a wrong offset!");
static_assert(offsetof(BP_TitleLogic_MementoCollection_Vinyls_C_ExecuteUbergraph_BP_TitleLogic_MementoCollection_Vinyls, K2Node_DynamicCast_bSuccess) == 0x000030, "Member 'BP_TitleLogic_MementoCollection_Vinyls_C_ExecuteUbergraph_BP_TitleLogic_MementoCollection_Vinyls::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(BP_TitleLogic_MementoCollection_Vinyls_C_ExecuteUbergraph_BP_TitleLogic_MementoCollection_Vinyls, CallFunc_IsValid_ReturnValue) == 0x000031, "Member 'BP_TitleLogic_MementoCollection_Vinyls_C_ExecuteUbergraph_BP_TitleLogic_MementoCollection_Vinyls::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_TitleLogic_MementoCollection_Vinyls_C_ExecuteUbergraph_BP_TitleLogic_MementoCollection_Vinyls, CallFunc_IsValid_ReturnValue_1) == 0x000032, "Member 'BP_TitleLogic_MementoCollection_Vinyls_C_ExecuteUbergraph_BP_TitleLogic_MementoCollection_Vinyls::CallFunc_IsValid_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_TitleLogic_MementoCollection_Vinyls_C_ExecuteUbergraph_BP_TitleLogic_MementoCollection_Vinyls, K2Node_CustomEvent_Sender) == 0x000038, "Member 'BP_TitleLogic_MementoCollection_Vinyls_C_ExecuteUbergraph_BP_TitleLogic_MementoCollection_Vinyls::K2Node_CustomEvent_Sender' has a wrong offset!");
static_assert(offsetof(BP_TitleLogic_MementoCollection_Vinyls_C_ExecuteUbergraph_BP_TitleLogic_MementoCollection_Vinyls, K2Node_CustomEvent_Inventory) == 0x000040, "Member 'BP_TitleLogic_MementoCollection_Vinyls_C_ExecuteUbergraph_BP_TitleLogic_MementoCollection_Vinyls::K2Node_CustomEvent_Inventory' has a wrong offset!");

// Function BP_TitleLogic_MementoCollection_Vinyls.BP_TitleLogic_MementoCollection_Vinyls_C.Stash Ready
// 0x0010 (0x0010 - 0x0000)
struct BP_TitleLogic_MementoCollection_Vinyls_C_Stash_Ready final
{
public:
	class AStash*                                 Sender;                                            // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UStashComponent*                        Inventory;                                         // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_TitleLogic_MementoCollection_Vinyls_C_Stash_Ready) == 0x000008, "Wrong alignment on BP_TitleLogic_MementoCollection_Vinyls_C_Stash_Ready");
static_assert(sizeof(BP_TitleLogic_MementoCollection_Vinyls_C_Stash_Ready) == 0x000010, "Wrong size on BP_TitleLogic_MementoCollection_Vinyls_C_Stash_Ready");
static_assert(offsetof(BP_TitleLogic_MementoCollection_Vinyls_C_Stash_Ready, Sender) == 0x000000, "Member 'BP_TitleLogic_MementoCollection_Vinyls_C_Stash_Ready::Sender' has a wrong offset!");
static_assert(offsetof(BP_TitleLogic_MementoCollection_Vinyls_C_Stash_Ready, Inventory) == 0x000008, "Member 'BP_TitleLogic_MementoCollection_Vinyls_C_Stash_Ready::Inventory' has a wrong offset!");

// Function BP_TitleLogic_MementoCollection_Vinyls.BP_TitleLogic_MementoCollection_Vinyls_C.Is Initialized
// 0x0001 (0x0001 - 0x0000)
struct BP_TitleLogic_MementoCollection_Vinyls_C_Is_Initialized final
{
public:
	bool                                          Initialized;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_TitleLogic_MementoCollection_Vinyls_C_Is_Initialized) == 0x000001, "Wrong alignment on BP_TitleLogic_MementoCollection_Vinyls_C_Is_Initialized");
static_assert(sizeof(BP_TitleLogic_MementoCollection_Vinyls_C_Is_Initialized) == 0x000001, "Wrong size on BP_TitleLogic_MementoCollection_Vinyls_C_Is_Initialized");
static_assert(offsetof(BP_TitleLogic_MementoCollection_Vinyls_C_Is_Initialized, Initialized) == 0x000000, "Member 'BP_TitleLogic_MementoCollection_Vinyls_C_Is_Initialized::Initialized' has a wrong offset!");

// Function BP_TitleLogic_MementoCollection_Vinyls.BP_TitleLogic_MementoCollection_Vinyls_C.Is Rank Owned
// 0x0278 (0x0278 - 0x0000)
struct BP_TitleLogic_MementoCollection_Vinyls_C_Is_Rank_Owned final
{
public:
	struct FF_TitleRank                           Rank_Info;                                         // 0x0000(0x00B8)(BlueprintVisible, BlueprintReadOnly, Parm, HasGetValueTypeHash)
	bool                                          Owned;                                             // 0x00B8(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_B9[0x3];                                       // 0x00B9(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         VinylsCount;                                       // 0x00BC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Array_Index_Variable;                     // 0x00C0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   CallFunc_Conv_StringToName_ReturnValue;            // 0x00C4(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Variable;                                 // 0x00CC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FF_MementoCollectionInfo               CallFunc_GetDataTableRowFromName_OutRow;           // 0x00D0(0x00C0)(HasGetValueTypeHash)
	bool                                          CallFunc_GetDataTableRowFromName_ReturnValue;      // 0x0190(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_GreaterEqual_IntInt_ReturnValue;          // 0x0191(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_192[0x6];                                      // 0x0192(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	struct FF_MementoInfo                         CallFunc_Array_Get_Item;                           // 0x0198(0x00B0)(HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x0248(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x024C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x0250(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_251[0x3];                                      // 0x0251(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x0254(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue_1;                 // 0x0258(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_25C[0x4];                                      // 0x025C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class AStash*                                 CallFunc_GetStash_ReturnValue;                     // 0x0260(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0268(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue_1;                    // 0x0269(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue_2;                    // 0x026A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_26B[0x1];                                      // 0x026B(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_CountOfResource_ReturnValue;              // 0x026C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue_3;                    // 0x0270(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Greater_IntInt_ReturnValue;               // 0x0271(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_TitleLogic_MementoCollection_Vinyls_C_Is_Rank_Owned) == 0x000008, "Wrong alignment on BP_TitleLogic_MementoCollection_Vinyls_C_Is_Rank_Owned");
static_assert(sizeof(BP_TitleLogic_MementoCollection_Vinyls_C_Is_Rank_Owned) == 0x000278, "Wrong size on BP_TitleLogic_MementoCollection_Vinyls_C_Is_Rank_Owned");
static_assert(offsetof(BP_TitleLogic_MementoCollection_Vinyls_C_Is_Rank_Owned, Rank_Info) == 0x000000, "Member 'BP_TitleLogic_MementoCollection_Vinyls_C_Is_Rank_Owned::Rank_Info' has a wrong offset!");
static_assert(offsetof(BP_TitleLogic_MementoCollection_Vinyls_C_Is_Rank_Owned, Owned) == 0x0000B8, "Member 'BP_TitleLogic_MementoCollection_Vinyls_C_Is_Rank_Owned::Owned' has a wrong offset!");
static_assert(offsetof(BP_TitleLogic_MementoCollection_Vinyls_C_Is_Rank_Owned, VinylsCount) == 0x0000BC, "Member 'BP_TitleLogic_MementoCollection_Vinyls_C_Is_Rank_Owned::VinylsCount' has a wrong offset!");
static_assert(offsetof(BP_TitleLogic_MementoCollection_Vinyls_C_Is_Rank_Owned, Temp_int_Array_Index_Variable) == 0x0000C0, "Member 'BP_TitleLogic_MementoCollection_Vinyls_C_Is_Rank_Owned::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(BP_TitleLogic_MementoCollection_Vinyls_C_Is_Rank_Owned, CallFunc_Conv_StringToName_ReturnValue) == 0x0000C4, "Member 'BP_TitleLogic_MementoCollection_Vinyls_C_Is_Rank_Owned::CallFunc_Conv_StringToName_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_TitleLogic_MementoCollection_Vinyls_C_Is_Rank_Owned, Temp_int_Variable) == 0x0000CC, "Member 'BP_TitleLogic_MementoCollection_Vinyls_C_Is_Rank_Owned::Temp_int_Variable' has a wrong offset!");
static_assert(offsetof(BP_TitleLogic_MementoCollection_Vinyls_C_Is_Rank_Owned, CallFunc_GetDataTableRowFromName_OutRow) == 0x0000D0, "Member 'BP_TitleLogic_MementoCollection_Vinyls_C_Is_Rank_Owned::CallFunc_GetDataTableRowFromName_OutRow' has a wrong offset!");
static_assert(offsetof(BP_TitleLogic_MementoCollection_Vinyls_C_Is_Rank_Owned, CallFunc_GetDataTableRowFromName_ReturnValue) == 0x000190, "Member 'BP_TitleLogic_MementoCollection_Vinyls_C_Is_Rank_Owned::CallFunc_GetDataTableRowFromName_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_TitleLogic_MementoCollection_Vinyls_C_Is_Rank_Owned, CallFunc_GreaterEqual_IntInt_ReturnValue) == 0x000191, "Member 'BP_TitleLogic_MementoCollection_Vinyls_C_Is_Rank_Owned::CallFunc_GreaterEqual_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_TitleLogic_MementoCollection_Vinyls_C_Is_Rank_Owned, CallFunc_Array_Get_Item) == 0x000198, "Member 'BP_TitleLogic_MementoCollection_Vinyls_C_Is_Rank_Owned::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(BP_TitleLogic_MementoCollection_Vinyls_C_Is_Rank_Owned, CallFunc_Array_Length_ReturnValue) == 0x000248, "Member 'BP_TitleLogic_MementoCollection_Vinyls_C_Is_Rank_Owned::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_TitleLogic_MementoCollection_Vinyls_C_Is_Rank_Owned, Temp_int_Loop_Counter_Variable) == 0x00024C, "Member 'BP_TitleLogic_MementoCollection_Vinyls_C_Is_Rank_Owned::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(BP_TitleLogic_MementoCollection_Vinyls_C_Is_Rank_Owned, CallFunc_Less_IntInt_ReturnValue) == 0x000250, "Member 'BP_TitleLogic_MementoCollection_Vinyls_C_Is_Rank_Owned::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_TitleLogic_MementoCollection_Vinyls_C_Is_Rank_Owned, CallFunc_Add_IntInt_ReturnValue) == 0x000254, "Member 'BP_TitleLogic_MementoCollection_Vinyls_C_Is_Rank_Owned::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_TitleLogic_MementoCollection_Vinyls_C_Is_Rank_Owned, CallFunc_Add_IntInt_ReturnValue_1) == 0x000258, "Member 'BP_TitleLogic_MementoCollection_Vinyls_C_Is_Rank_Owned::CallFunc_Add_IntInt_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_TitleLogic_MementoCollection_Vinyls_C_Is_Rank_Owned, CallFunc_GetStash_ReturnValue) == 0x000260, "Member 'BP_TitleLogic_MementoCollection_Vinyls_C_Is_Rank_Owned::CallFunc_GetStash_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_TitleLogic_MementoCollection_Vinyls_C_Is_Rank_Owned, CallFunc_IsValid_ReturnValue) == 0x000268, "Member 'BP_TitleLogic_MementoCollection_Vinyls_C_Is_Rank_Owned::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_TitleLogic_MementoCollection_Vinyls_C_Is_Rank_Owned, CallFunc_IsValid_ReturnValue_1) == 0x000269, "Member 'BP_TitleLogic_MementoCollection_Vinyls_C_Is_Rank_Owned::CallFunc_IsValid_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_TitleLogic_MementoCollection_Vinyls_C_Is_Rank_Owned, CallFunc_IsValid_ReturnValue_2) == 0x00026A, "Member 'BP_TitleLogic_MementoCollection_Vinyls_C_Is_Rank_Owned::CallFunc_IsValid_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BP_TitleLogic_MementoCollection_Vinyls_C_Is_Rank_Owned, CallFunc_CountOfResource_ReturnValue) == 0x00026C, "Member 'BP_TitleLogic_MementoCollection_Vinyls_C_Is_Rank_Owned::CallFunc_CountOfResource_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_TitleLogic_MementoCollection_Vinyls_C_Is_Rank_Owned, CallFunc_IsValid_ReturnValue_3) == 0x000270, "Member 'BP_TitleLogic_MementoCollection_Vinyls_C_Is_Rank_Owned::CallFunc_IsValid_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(BP_TitleLogic_MementoCollection_Vinyls_C_Is_Rank_Owned, CallFunc_Greater_IntInt_ReturnValue) == 0x000271, "Member 'BP_TitleLogic_MementoCollection_Vinyls_C_Is_Rank_Owned::CallFunc_Greater_IntInt_ReturnValue' has a wrong offset!");

}

