#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_CombinationLock_Component

#include "Basic.hpp"

#include "CoreUObject_structs.hpp"


namespace SDK::Params
{

// Function BP_CombinationLock_Component.BP_CombinationLock_Component_C.On player solved combination__DelegateSignature
// 0x0010 (0x0010 - 0x0000)
struct BP_CombinationLock_Component_C_On_player_solved_combination__DelegateSignature final
{
public:
	class UBP_CombinationLock_PCComponent_C*      Player_that_opened_lock;                           // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UBP_CombinationLock_Component_C*        Unlocked_Combination_lock;                         // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_CombinationLock_Component_C_On_player_solved_combination__DelegateSignature) == 0x000008, "Wrong alignment on BP_CombinationLock_Component_C_On_player_solved_combination__DelegateSignature");
static_assert(sizeof(BP_CombinationLock_Component_C_On_player_solved_combination__DelegateSignature) == 0x000010, "Wrong size on BP_CombinationLock_Component_C_On_player_solved_combination__DelegateSignature");
static_assert(offsetof(BP_CombinationLock_Component_C_On_player_solved_combination__DelegateSignature, Player_that_opened_lock) == 0x000000, "Member 'BP_CombinationLock_Component_C_On_player_solved_combination__DelegateSignature::Player_that_opened_lock' has a wrong offset!");
static_assert(offsetof(BP_CombinationLock_Component_C_On_player_solved_combination__DelegateSignature, Unlocked_Combination_lock) == 0x000008, "Member 'BP_CombinationLock_Component_C_On_player_solved_combination__DelegateSignature::Unlocked_Combination_lock' has a wrong offset!");

// Function BP_CombinationLock_Component.BP_CombinationLock_Component_C.ExecuteUbergraph_BP_CombinationLock_Component
// 0x0060 (0x0060 - 0x0000)
struct BP_CombinationLock_Component_C_ExecuteUbergraph_BP_CombinationLock_Component final
{
public:
	int32                                         EntryPoint;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_Event_DeltaSeconds;                         // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 CallFunc_GetOwner_ReturnValue;                     // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_HasAuthority_ReturnValue;                 // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	const class UBP_CombinationLock_PCComponent_C* K2Node_CustomEvent_Player;                         // 0x0018(0x0008)(ConstParm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<int32>                                 K2Node_CustomEvent_Last_Set_Code;                  // 0x0020(0x0010)(ConstParm, ReferenceParm)
	int32                                         CallFunc_RandomIntegerInRange_ReturnValue;         // 0x0030(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Subtract_IntInt_ReturnValue;              // 0x0034(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 CallFunc_GetOwner_ReturnValue_1;                   // 0x0038(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Is_code_correct_ReturnValue;              // 0x0040(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_41[0x3];                                       // 0x0041(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Temp_int_Variable;                                 // 0x0044(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Get_Item;                           // 0x0048(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_IntInt_ReturnValue;            // 0x004C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_4D[0x3];                                       // 0x004D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Array_Get_Item_1;                         // 0x0050(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_LessEqual_IntInt_ReturnValue;             // 0x0054(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_55[0x3];                                       // 0x0055(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x0058(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_CombinationLock_Component_C_ExecuteUbergraph_BP_CombinationLock_Component) == 0x000008, "Wrong alignment on BP_CombinationLock_Component_C_ExecuteUbergraph_BP_CombinationLock_Component");
static_assert(sizeof(BP_CombinationLock_Component_C_ExecuteUbergraph_BP_CombinationLock_Component) == 0x000060, "Wrong size on BP_CombinationLock_Component_C_ExecuteUbergraph_BP_CombinationLock_Component");
static_assert(offsetof(BP_CombinationLock_Component_C_ExecuteUbergraph_BP_CombinationLock_Component, EntryPoint) == 0x000000, "Member 'BP_CombinationLock_Component_C_ExecuteUbergraph_BP_CombinationLock_Component::EntryPoint' has a wrong offset!");
static_assert(offsetof(BP_CombinationLock_Component_C_ExecuteUbergraph_BP_CombinationLock_Component, K2Node_Event_DeltaSeconds) == 0x000004, "Member 'BP_CombinationLock_Component_C_ExecuteUbergraph_BP_CombinationLock_Component::K2Node_Event_DeltaSeconds' has a wrong offset!");
static_assert(offsetof(BP_CombinationLock_Component_C_ExecuteUbergraph_BP_CombinationLock_Component, CallFunc_GetOwner_ReturnValue) == 0x000008, "Member 'BP_CombinationLock_Component_C_ExecuteUbergraph_BP_CombinationLock_Component::CallFunc_GetOwner_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_CombinationLock_Component_C_ExecuteUbergraph_BP_CombinationLock_Component, CallFunc_HasAuthority_ReturnValue) == 0x000010, "Member 'BP_CombinationLock_Component_C_ExecuteUbergraph_BP_CombinationLock_Component::CallFunc_HasAuthority_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_CombinationLock_Component_C_ExecuteUbergraph_BP_CombinationLock_Component, K2Node_CustomEvent_Player) == 0x000018, "Member 'BP_CombinationLock_Component_C_ExecuteUbergraph_BP_CombinationLock_Component::K2Node_CustomEvent_Player' has a wrong offset!");
static_assert(offsetof(BP_CombinationLock_Component_C_ExecuteUbergraph_BP_CombinationLock_Component, K2Node_CustomEvent_Last_Set_Code) == 0x000020, "Member 'BP_CombinationLock_Component_C_ExecuteUbergraph_BP_CombinationLock_Component::K2Node_CustomEvent_Last_Set_Code' has a wrong offset!");
static_assert(offsetof(BP_CombinationLock_Component_C_ExecuteUbergraph_BP_CombinationLock_Component, CallFunc_RandomIntegerInRange_ReturnValue) == 0x000030, "Member 'BP_CombinationLock_Component_C_ExecuteUbergraph_BP_CombinationLock_Component::CallFunc_RandomIntegerInRange_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_CombinationLock_Component_C_ExecuteUbergraph_BP_CombinationLock_Component, CallFunc_Subtract_IntInt_ReturnValue) == 0x000034, "Member 'BP_CombinationLock_Component_C_ExecuteUbergraph_BP_CombinationLock_Component::CallFunc_Subtract_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_CombinationLock_Component_C_ExecuteUbergraph_BP_CombinationLock_Component, CallFunc_GetOwner_ReturnValue_1) == 0x000038, "Member 'BP_CombinationLock_Component_C_ExecuteUbergraph_BP_CombinationLock_Component::CallFunc_GetOwner_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_CombinationLock_Component_C_ExecuteUbergraph_BP_CombinationLock_Component, CallFunc_Is_code_correct_ReturnValue) == 0x000040, "Member 'BP_CombinationLock_Component_C_ExecuteUbergraph_BP_CombinationLock_Component::CallFunc_Is_code_correct_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_CombinationLock_Component_C_ExecuteUbergraph_BP_CombinationLock_Component, Temp_int_Variable) == 0x000044, "Member 'BP_CombinationLock_Component_C_ExecuteUbergraph_BP_CombinationLock_Component::Temp_int_Variable' has a wrong offset!");
static_assert(offsetof(BP_CombinationLock_Component_C_ExecuteUbergraph_BP_CombinationLock_Component, CallFunc_Array_Get_Item) == 0x000048, "Member 'BP_CombinationLock_Component_C_ExecuteUbergraph_BP_CombinationLock_Component::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(BP_CombinationLock_Component_C_ExecuteUbergraph_BP_CombinationLock_Component, CallFunc_EqualEqual_IntInt_ReturnValue) == 0x00004C, "Member 'BP_CombinationLock_Component_C_ExecuteUbergraph_BP_CombinationLock_Component::CallFunc_EqualEqual_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_CombinationLock_Component_C_ExecuteUbergraph_BP_CombinationLock_Component, CallFunc_Array_Get_Item_1) == 0x000050, "Member 'BP_CombinationLock_Component_C_ExecuteUbergraph_BP_CombinationLock_Component::CallFunc_Array_Get_Item_1' has a wrong offset!");
static_assert(offsetof(BP_CombinationLock_Component_C_ExecuteUbergraph_BP_CombinationLock_Component, CallFunc_LessEqual_IntInt_ReturnValue) == 0x000054, "Member 'BP_CombinationLock_Component_C_ExecuteUbergraph_BP_CombinationLock_Component::CallFunc_LessEqual_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_CombinationLock_Component_C_ExecuteUbergraph_BP_CombinationLock_Component, CallFunc_Add_IntInt_ReturnValue) == 0x000058, "Member 'BP_CombinationLock_Component_C_ExecuteUbergraph_BP_CombinationLock_Component::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");

// Function BP_CombinationLock_Component.BP_CombinationLock_Component_C.Update code
// 0x0018 (0x0018 - 0x0000)
struct BP_CombinationLock_Component_C_Update_code final
{
public:
	const class UBP_CombinationLock_PCComponent_C* Player;                                            // 0x0000(0x0008)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<int32>                                 Last_Set_Code_0;                                   // 0x0008(0x0010)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
};
static_assert(alignof(BP_CombinationLock_Component_C_Update_code) == 0x000008, "Wrong alignment on BP_CombinationLock_Component_C_Update_code");
static_assert(sizeof(BP_CombinationLock_Component_C_Update_code) == 0x000018, "Wrong size on BP_CombinationLock_Component_C_Update_code");
static_assert(offsetof(BP_CombinationLock_Component_C_Update_code, Player) == 0x000000, "Member 'BP_CombinationLock_Component_C_Update_code::Player' has a wrong offset!");
static_assert(offsetof(BP_CombinationLock_Component_C_Update_code, Last_Set_Code_0) == 0x000008, "Member 'BP_CombinationLock_Component_C_Update_code::Last_Set_Code_0' has a wrong offset!");

// Function BP_CombinationLock_Component.BP_CombinationLock_Component_C.ReceiveTick
// 0x0004 (0x0004 - 0x0000)
struct BP_CombinationLock_Component_C_ReceiveTick final
{
public:
	float                                         DeltaSeconds;                                      // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_CombinationLock_Component_C_ReceiveTick) == 0x000004, "Wrong alignment on BP_CombinationLock_Component_C_ReceiveTick");
static_assert(sizeof(BP_CombinationLock_Component_C_ReceiveTick) == 0x000004, "Wrong size on BP_CombinationLock_Component_C_ReceiveTick");
static_assert(offsetof(BP_CombinationLock_Component_C_ReceiveTick, DeltaSeconds) == 0x000000, "Member 'BP_CombinationLock_Component_C_ReceiveTick::DeltaSeconds' has a wrong offset!");

// Function BP_CombinationLock_Component.BP_CombinationLock_Component_C.Is code correct
// 0x0040 (0x0040 - 0x0000)
struct BP_CombinationLock_Component_C_Is_code_correct final
{
public:
	TArray<int32>                                 Current_code;                                      // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
	bool                                          ReturnValue;                                       // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_True_if_break_was_hit_Variable;          // 0x0011(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_12[0x2];                                       // 0x0012(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x0014(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Array_Index_Variable;                     // 0x0018(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x001C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Get_Item;                           // 0x0020(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x0024(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue_1;               // 0x0028(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_IntInt_ReturnValue;            // 0x002C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_2D[0x3];                                       // 0x002D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Array_Get_Item_1;                         // 0x0030(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_NotEqual_IntInt_ReturnValue;              // 0x0034(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_35[0x3];                                       // 0x0035(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Array_Length_ReturnValue_2;               // 0x0038(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x003C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_CombinationLock_Component_C_Is_code_correct) == 0x000008, "Wrong alignment on BP_CombinationLock_Component_C_Is_code_correct");
static_assert(sizeof(BP_CombinationLock_Component_C_Is_code_correct) == 0x000040, "Wrong size on BP_CombinationLock_Component_C_Is_code_correct");
static_assert(offsetof(BP_CombinationLock_Component_C_Is_code_correct, Current_code) == 0x000000, "Member 'BP_CombinationLock_Component_C_Is_code_correct::Current_code' has a wrong offset!");
static_assert(offsetof(BP_CombinationLock_Component_C_Is_code_correct, ReturnValue) == 0x000010, "Member 'BP_CombinationLock_Component_C_Is_code_correct::ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_CombinationLock_Component_C_Is_code_correct, Temp_bool_True_if_break_was_hit_Variable) == 0x000011, "Member 'BP_CombinationLock_Component_C_Is_code_correct::Temp_bool_True_if_break_was_hit_Variable' has a wrong offset!");
static_assert(offsetof(BP_CombinationLock_Component_C_Is_code_correct, CallFunc_Array_Length_ReturnValue) == 0x000014, "Member 'BP_CombinationLock_Component_C_Is_code_correct::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_CombinationLock_Component_C_Is_code_correct, Temp_int_Array_Index_Variable) == 0x000018, "Member 'BP_CombinationLock_Component_C_Is_code_correct::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(BP_CombinationLock_Component_C_Is_code_correct, Temp_int_Loop_Counter_Variable) == 0x00001C, "Member 'BP_CombinationLock_Component_C_Is_code_correct::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(BP_CombinationLock_Component_C_Is_code_correct, CallFunc_Array_Get_Item) == 0x000020, "Member 'BP_CombinationLock_Component_C_Is_code_correct::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(BP_CombinationLock_Component_C_Is_code_correct, CallFunc_Add_IntInt_ReturnValue) == 0x000024, "Member 'BP_CombinationLock_Component_C_Is_code_correct::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_CombinationLock_Component_C_Is_code_correct, CallFunc_Array_Length_ReturnValue_1) == 0x000028, "Member 'BP_CombinationLock_Component_C_Is_code_correct::CallFunc_Array_Length_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_CombinationLock_Component_C_Is_code_correct, CallFunc_EqualEqual_IntInt_ReturnValue) == 0x00002C, "Member 'BP_CombinationLock_Component_C_Is_code_correct::CallFunc_EqualEqual_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_CombinationLock_Component_C_Is_code_correct, CallFunc_Array_Get_Item_1) == 0x000030, "Member 'BP_CombinationLock_Component_C_Is_code_correct::CallFunc_Array_Get_Item_1' has a wrong offset!");
static_assert(offsetof(BP_CombinationLock_Component_C_Is_code_correct, CallFunc_NotEqual_IntInt_ReturnValue) == 0x000034, "Member 'BP_CombinationLock_Component_C_Is_code_correct::CallFunc_NotEqual_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_CombinationLock_Component_C_Is_code_correct, CallFunc_Array_Length_ReturnValue_2) == 0x000038, "Member 'BP_CombinationLock_Component_C_Is_code_correct::CallFunc_Array_Length_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BP_CombinationLock_Component_C_Is_code_correct, CallFunc_Less_IntInt_ReturnValue) == 0x00003C, "Member 'BP_CombinationLock_Component_C_Is_code_correct::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");

// Function BP_CombinationLock_Component.BP_CombinationLock_Component_C.Print codes
// 0x00F8 (0x00F8 - 0x0000)
struct BP_CombinationLock_Component_C_Print_codes final
{
public:
	class FString                                 Text;                                              // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash)
	struct FLinearColor                           Temp_struct_Variable;                              // 0x0010(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           Temp_struct_Variable_1;                            // 0x0020(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Array_Index_Variable;                     // 0x0030(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_34[0x4];                                       // 0x0034(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 CallFunc_Concat_StrStr_ReturnValue;                // 0x0038(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable;                                // 0x0048(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_49[0x3];                                       // 0x0049(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x004C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x0050(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Array_Index_Variable_1;                   // 0x0054(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsServer_ReturnValue;                     // 0x0058(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_59[0x3];                                       // 0x0059(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FLinearColor                           K2Node_Select_Default;                             // 0x005C(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_6C[0x4];                                       // 0x006C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 CallFunc_Concat_StrStr_ReturnValue_1;              // 0x0070(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable_1;                  // 0x0080(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Get_Item;                           // 0x0084(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x0088(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_8C[0x4];                                       // 0x008C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 CallFunc_Conv_IntToString_ReturnValue;             // 0x0090(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x00A0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_A1[0x7];                                       // 0x00A1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 CallFunc_Concat_StrStr_ReturnValue_2;              // 0x00A8(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue_1;                 // 0x00B8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Get_Item_1;                         // 0x00BC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FString                                 CallFunc_GetDisplayName_ReturnValue;               // 0x00C0(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FString                                 CallFunc_Conv_IntToString_ReturnValue_1;           // 0x00D0(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FString                                 CallFunc_Concat_StrStr_ReturnValue_3;              // 0x00E0(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue_1;               // 0x00F0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue_1;                // 0x00F4(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_CombinationLock_Component_C_Print_codes) == 0x000008, "Wrong alignment on BP_CombinationLock_Component_C_Print_codes");
static_assert(sizeof(BP_CombinationLock_Component_C_Print_codes) == 0x0000F8, "Wrong size on BP_CombinationLock_Component_C_Print_codes");
static_assert(offsetof(BP_CombinationLock_Component_C_Print_codes, Text) == 0x000000, "Member 'BP_CombinationLock_Component_C_Print_codes::Text' has a wrong offset!");
static_assert(offsetof(BP_CombinationLock_Component_C_Print_codes, Temp_struct_Variable) == 0x000010, "Member 'BP_CombinationLock_Component_C_Print_codes::Temp_struct_Variable' has a wrong offset!");
static_assert(offsetof(BP_CombinationLock_Component_C_Print_codes, Temp_struct_Variable_1) == 0x000020, "Member 'BP_CombinationLock_Component_C_Print_codes::Temp_struct_Variable_1' has a wrong offset!");
static_assert(offsetof(BP_CombinationLock_Component_C_Print_codes, Temp_int_Array_Index_Variable) == 0x000030, "Member 'BP_CombinationLock_Component_C_Print_codes::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(BP_CombinationLock_Component_C_Print_codes, CallFunc_Concat_StrStr_ReturnValue) == 0x000038, "Member 'BP_CombinationLock_Component_C_Print_codes::CallFunc_Concat_StrStr_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_CombinationLock_Component_C_Print_codes, Temp_bool_Variable) == 0x000048, "Member 'BP_CombinationLock_Component_C_Print_codes::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(BP_CombinationLock_Component_C_Print_codes, Temp_int_Loop_Counter_Variable) == 0x00004C, "Member 'BP_CombinationLock_Component_C_Print_codes::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(BP_CombinationLock_Component_C_Print_codes, CallFunc_Add_IntInt_ReturnValue) == 0x000050, "Member 'BP_CombinationLock_Component_C_Print_codes::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_CombinationLock_Component_C_Print_codes, Temp_int_Array_Index_Variable_1) == 0x000054, "Member 'BP_CombinationLock_Component_C_Print_codes::Temp_int_Array_Index_Variable_1' has a wrong offset!");
static_assert(offsetof(BP_CombinationLock_Component_C_Print_codes, CallFunc_IsServer_ReturnValue) == 0x000058, "Member 'BP_CombinationLock_Component_C_Print_codes::CallFunc_IsServer_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_CombinationLock_Component_C_Print_codes, K2Node_Select_Default) == 0x00005C, "Member 'BP_CombinationLock_Component_C_Print_codes::K2Node_Select_Default' has a wrong offset!");
static_assert(offsetof(BP_CombinationLock_Component_C_Print_codes, CallFunc_Concat_StrStr_ReturnValue_1) == 0x000070, "Member 'BP_CombinationLock_Component_C_Print_codes::CallFunc_Concat_StrStr_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_CombinationLock_Component_C_Print_codes, Temp_int_Loop_Counter_Variable_1) == 0x000080, "Member 'BP_CombinationLock_Component_C_Print_codes::Temp_int_Loop_Counter_Variable_1' has a wrong offset!");
static_assert(offsetof(BP_CombinationLock_Component_C_Print_codes, CallFunc_Array_Get_Item) == 0x000084, "Member 'BP_CombinationLock_Component_C_Print_codes::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(BP_CombinationLock_Component_C_Print_codes, CallFunc_Array_Length_ReturnValue) == 0x000088, "Member 'BP_CombinationLock_Component_C_Print_codes::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_CombinationLock_Component_C_Print_codes, CallFunc_Conv_IntToString_ReturnValue) == 0x000090, "Member 'BP_CombinationLock_Component_C_Print_codes::CallFunc_Conv_IntToString_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_CombinationLock_Component_C_Print_codes, CallFunc_Less_IntInt_ReturnValue) == 0x0000A0, "Member 'BP_CombinationLock_Component_C_Print_codes::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_CombinationLock_Component_C_Print_codes, CallFunc_Concat_StrStr_ReturnValue_2) == 0x0000A8, "Member 'BP_CombinationLock_Component_C_Print_codes::CallFunc_Concat_StrStr_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BP_CombinationLock_Component_C_Print_codes, CallFunc_Add_IntInt_ReturnValue_1) == 0x0000B8, "Member 'BP_CombinationLock_Component_C_Print_codes::CallFunc_Add_IntInt_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_CombinationLock_Component_C_Print_codes, CallFunc_Array_Get_Item_1) == 0x0000BC, "Member 'BP_CombinationLock_Component_C_Print_codes::CallFunc_Array_Get_Item_1' has a wrong offset!");
static_assert(offsetof(BP_CombinationLock_Component_C_Print_codes, CallFunc_GetDisplayName_ReturnValue) == 0x0000C0, "Member 'BP_CombinationLock_Component_C_Print_codes::CallFunc_GetDisplayName_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_CombinationLock_Component_C_Print_codes, CallFunc_Conv_IntToString_ReturnValue_1) == 0x0000D0, "Member 'BP_CombinationLock_Component_C_Print_codes::CallFunc_Conv_IntToString_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_CombinationLock_Component_C_Print_codes, CallFunc_Concat_StrStr_ReturnValue_3) == 0x0000E0, "Member 'BP_CombinationLock_Component_C_Print_codes::CallFunc_Concat_StrStr_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(BP_CombinationLock_Component_C_Print_codes, CallFunc_Array_Length_ReturnValue_1) == 0x0000F0, "Member 'BP_CombinationLock_Component_C_Print_codes::CallFunc_Array_Length_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_CombinationLock_Component_C_Print_codes, CallFunc_Less_IntInt_ReturnValue_1) == 0x0000F4, "Member 'BP_CombinationLock_Component_C_Print_codes::CallFunc_Less_IntInt_ReturnValue_1' has a wrong offset!");

}

