#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_Van_Base

#include "Basic.hpp"

#include "CoreUObject_structs.hpp"
#include "BP_Lootable_Base_classes.hpp"
#include "E_Van_Type_structs.hpp"
#include "Engine_structs.hpp"
#include "S_Van_Colours_structs.hpp"


namespace SDK
{

// BlueprintGeneratedClass BP_Van_Base.BP_Van_Base_C
// 0x0218 (0x05C0 - 0x03A8)
class ABP_Van_Base_C : public ABP_Lootable_Base_C
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame_BP_Van_Base_C;                      // 0x03A8(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class UStaticMeshComponent*                   GlassBack_SM;                                      // 0x03B0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UStaticMeshComponent*                   GlassFront_SM;                                     // 0x03B8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UBP_ADM_BuriedCache_PolaroidSpawnPoint_C* BuriedCache_PolaroidSpawnPoint;                    // 0x03C0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UAudioComponent*                        RainAudio;                                         // 0x03C8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UStaticMeshComponent*                   Base;                                              // 0x03D0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UStaticMeshComponent*                   Wheel4;                                            // 0x03D8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UStaticMeshComponent*                   Wheel3;                                            // 0x03E0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UStaticMeshComponent*                   Wheel2;                                            // 0x03E8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UStaticMeshComponent*                   Wheel1;                                            // 0x03F0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UStaticMeshComponent*                   Extension;                                         // 0x03F8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UStaticMeshComponent*                   Body;                                              // 0x0400(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	TMap<int32, class UStaticMesh*>               Wheels;                                            // 0x0408(0x0050)(Edit, BlueprintVisible, DisableEditOnInstance)
	E_Van_Type                                    Versions;                                          // 0x0458(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_459[0x7];                                      // 0x0459(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TMap<E_Van_Type, class UStaticMesh*>          BodyMesh;                                          // 0x0460(0x0050)(Edit, BlueprintVisible, DisableEditOnInstance)
	int32                                         WheelType;                                         // 0x04B0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4B4[0x4];                                      // 0x04B4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TMap<int32, struct FS_Van_Colours>            Colours;                                           // 0x04B8(0x0050)(Edit, BlueprintVisible, DisableEditOnInstance)
	int32                                         Colour;                                            // 0x0508(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Steering_Rotation;                                 // 0x050C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                DecalLocation;                                     // 0x0510(0x000C)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_51C[0x4];                                      // 0x051C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UDecalComponent*                        NewVar_3;                                          // 0x0520(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UStaticMeshComponent*                   NewVar_4;                                          // 0x0528(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UMaterialInstance*                      BaseColour;                                        // 0x0530(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UMaterialInstance*                      LineColour;                                        // 0x0538(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UMaterialInstance*                      Advertisement;                                     // 0x0540(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                DecalScale;                                        // 0x0548(0x000C)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                OriginalBoxExtent;                                 // 0x0554(0x000C)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UCurveFloat*                            RainAudioParameterCurve;                           // 0x0560(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          ToggleDrawDistanceDebug_0;                         // 0x0568(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_569[0x7];                                      // 0x0569(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TMap<E_Van_Type, struct FSoftObjectPath>      ObstacleAsset;                                     // 0x0570(0x0050)(Edit, BlueprintVisible, DisableEditOnInstance)

public:
	void ExecuteUbergraph_BP_Van_Base(int32 EntryPoint);
	void AdjustWeather(float CurrentRainAmount, float CurrentWindIntensity, const struct FVector& CurrentWindDirection, float CurrentWetnessAmount);
	void AdjustRainIntensity(float CurrentRainAmount, float CurrentWetnessAmount);
	void SetHeavyRain(bool HeavyRain);
	void AdjustWindDirection(const struct FVector& CurrentWindDirection);
	void AdjustWindIntensity(float CurrentWindIntensity);
	void UserConstructionScript();
	void SetColours();
	void SetMeshes();
	void SetWheels();

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BP_Van_Base_C">();
	}
	static class ABP_Van_Base_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<ABP_Van_Base_C>();
	}
};
static_assert(alignof(ABP_Van_Base_C) == 0x000008, "Wrong alignment on ABP_Van_Base_C");
static_assert(sizeof(ABP_Van_Base_C) == 0x0005C0, "Wrong size on ABP_Van_Base_C");
static_assert(offsetof(ABP_Van_Base_C, UberGraphFrame_BP_Van_Base_C) == 0x0003A8, "Member 'ABP_Van_Base_C::UberGraphFrame_BP_Van_Base_C' has a wrong offset!");
static_assert(offsetof(ABP_Van_Base_C, GlassBack_SM) == 0x0003B0, "Member 'ABP_Van_Base_C::GlassBack_SM' has a wrong offset!");
static_assert(offsetof(ABP_Van_Base_C, GlassFront_SM) == 0x0003B8, "Member 'ABP_Van_Base_C::GlassFront_SM' has a wrong offset!");
static_assert(offsetof(ABP_Van_Base_C, BuriedCache_PolaroidSpawnPoint) == 0x0003C0, "Member 'ABP_Van_Base_C::BuriedCache_PolaroidSpawnPoint' has a wrong offset!");
static_assert(offsetof(ABP_Van_Base_C, RainAudio) == 0x0003C8, "Member 'ABP_Van_Base_C::RainAudio' has a wrong offset!");
static_assert(offsetof(ABP_Van_Base_C, Base) == 0x0003D0, "Member 'ABP_Van_Base_C::Base' has a wrong offset!");
static_assert(offsetof(ABP_Van_Base_C, Wheel4) == 0x0003D8, "Member 'ABP_Van_Base_C::Wheel4' has a wrong offset!");
static_assert(offsetof(ABP_Van_Base_C, Wheel3) == 0x0003E0, "Member 'ABP_Van_Base_C::Wheel3' has a wrong offset!");
static_assert(offsetof(ABP_Van_Base_C, Wheel2) == 0x0003E8, "Member 'ABP_Van_Base_C::Wheel2' has a wrong offset!");
static_assert(offsetof(ABP_Van_Base_C, Wheel1) == 0x0003F0, "Member 'ABP_Van_Base_C::Wheel1' has a wrong offset!");
static_assert(offsetof(ABP_Van_Base_C, Extension) == 0x0003F8, "Member 'ABP_Van_Base_C::Extension' has a wrong offset!");
static_assert(offsetof(ABP_Van_Base_C, Body) == 0x000400, "Member 'ABP_Van_Base_C::Body' has a wrong offset!");
static_assert(offsetof(ABP_Van_Base_C, Wheels) == 0x000408, "Member 'ABP_Van_Base_C::Wheels' has a wrong offset!");
static_assert(offsetof(ABP_Van_Base_C, Versions) == 0x000458, "Member 'ABP_Van_Base_C::Versions' has a wrong offset!");
static_assert(offsetof(ABP_Van_Base_C, BodyMesh) == 0x000460, "Member 'ABP_Van_Base_C::BodyMesh' has a wrong offset!");
static_assert(offsetof(ABP_Van_Base_C, WheelType) == 0x0004B0, "Member 'ABP_Van_Base_C::WheelType' has a wrong offset!");
static_assert(offsetof(ABP_Van_Base_C, Colours) == 0x0004B8, "Member 'ABP_Van_Base_C::Colours' has a wrong offset!");
static_assert(offsetof(ABP_Van_Base_C, Colour) == 0x000508, "Member 'ABP_Van_Base_C::Colour' has a wrong offset!");
static_assert(offsetof(ABP_Van_Base_C, Steering_Rotation) == 0x00050C, "Member 'ABP_Van_Base_C::Steering_Rotation' has a wrong offset!");
static_assert(offsetof(ABP_Van_Base_C, DecalLocation) == 0x000510, "Member 'ABP_Van_Base_C::DecalLocation' has a wrong offset!");
static_assert(offsetof(ABP_Van_Base_C, NewVar_3) == 0x000520, "Member 'ABP_Van_Base_C::NewVar_3' has a wrong offset!");
static_assert(offsetof(ABP_Van_Base_C, NewVar_4) == 0x000528, "Member 'ABP_Van_Base_C::NewVar_4' has a wrong offset!");
static_assert(offsetof(ABP_Van_Base_C, BaseColour) == 0x000530, "Member 'ABP_Van_Base_C::BaseColour' has a wrong offset!");
static_assert(offsetof(ABP_Van_Base_C, LineColour) == 0x000538, "Member 'ABP_Van_Base_C::LineColour' has a wrong offset!");
static_assert(offsetof(ABP_Van_Base_C, Advertisement) == 0x000540, "Member 'ABP_Van_Base_C::Advertisement' has a wrong offset!");
static_assert(offsetof(ABP_Van_Base_C, DecalScale) == 0x000548, "Member 'ABP_Van_Base_C::DecalScale' has a wrong offset!");
static_assert(offsetof(ABP_Van_Base_C, OriginalBoxExtent) == 0x000554, "Member 'ABP_Van_Base_C::OriginalBoxExtent' has a wrong offset!");
static_assert(offsetof(ABP_Van_Base_C, RainAudioParameterCurve) == 0x000560, "Member 'ABP_Van_Base_C::RainAudioParameterCurve' has a wrong offset!");
static_assert(offsetof(ABP_Van_Base_C, ToggleDrawDistanceDebug_0) == 0x000568, "Member 'ABP_Van_Base_C::ToggleDrawDistanceDebug_0' has a wrong offset!");
static_assert(offsetof(ABP_Van_Base_C, ObstacleAsset) == 0x000570, "Member 'ABP_Van_Base_C::ObstacleAsset' has a wrong offset!");

}

