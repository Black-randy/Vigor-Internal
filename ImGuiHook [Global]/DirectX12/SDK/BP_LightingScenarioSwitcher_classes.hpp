#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_LightingScenarioSwitcher

#include "Basic.hpp"

#include "Flame_structs.hpp"
#include "Engine_structs.hpp"
#include "Engine_classes.hpp"
#include "E_LightingScenarios_structs.hpp"


namespace SDK
{

// BlueprintGeneratedClass BP_LightingScenarioSwitcher.BP_LightingScenarioSwitcher_C
// 0x00D0 (0x02F0 - 0x0220)
class ABP_LightingScenarioSwitcher_C final : public AActor
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x0220(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class USceneComponent*                        Scene;                                             // 0x0228(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	TArray<class FString>                         LightingScenarioList;                              // 0x0230(0x0010)(Edit, BlueprintVisible)
	TMap<class FString, E_LightingScenarios>      LightScenarioString_To_WeatherType;                // 0x0240(0x0050)(Edit, BlueprintVisible)
	class FString                                 CurrentLightingScenario;                           // 0x0290(0x0010)(Edit, BlueprintVisible, Net, ZeroConstructor, RepNotify, HasGetValueTypeHash)
	int32                                         ForceLightingScenario;                             // 0x02A0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CurrentLightingScenarioIdx;                        // 0x02A4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         SelectedIdx;                                       // 0x02A8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2AC[0x4];                                      // 0x02AC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 SunnySubstring;                                    // 0x02B0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, HasGetValueTypeHash)
	class FString                                 PendingLevelToLoad;                                // 0x02C0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, HasGetValueTypeHash)
	FMulticastInlineDelegateProperty_             NewLightingLoaded;                                 // 0x02D0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	FMulticastInlineDelegateProperty_             LightScenarioStringChanged;                        // 0x02E0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)

public:
	void NewLightingLoaded__DelegateSignature(const class FString& NewScenario);
	void LightScenarioStringChanged__DelegateSignature(const class FString& LightScenarioString);
	void ExecuteUbergraph_BP_LightingScenarioSwitcher(int32 EntryPoint);
	void ServerNewSubLevelLoaded(const class FString& NewScenario);
	void SelechtLightingAfterLoadTheme(ESublevelTheme Theme);
	void ConsoleSetWeather(int32 Idx);
	void Select_Lighting_Scenario_by_Idx(int32 Idx);
	void Change_Weather();
	void Fill();
	void Select_Lighting_Scenario(const class FString& LevelName);
	void ReceiveBeginPlay();
	void FindLightingScenarioIndex(int32* Index_0);
	void PreferSunnyLevel(int32* Index_0);
	void OnRep_CurrentLightingScenario();

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BP_LightingScenarioSwitcher_C">();
	}
	static class ABP_LightingScenarioSwitcher_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<ABP_LightingScenarioSwitcher_C>();
	}
};
static_assert(alignof(ABP_LightingScenarioSwitcher_C) == 0x000008, "Wrong alignment on ABP_LightingScenarioSwitcher_C");
static_assert(sizeof(ABP_LightingScenarioSwitcher_C) == 0x0002F0, "Wrong size on ABP_LightingScenarioSwitcher_C");
static_assert(offsetof(ABP_LightingScenarioSwitcher_C, UberGraphFrame) == 0x000220, "Member 'ABP_LightingScenarioSwitcher_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(ABP_LightingScenarioSwitcher_C, Scene) == 0x000228, "Member 'ABP_LightingScenarioSwitcher_C::Scene' has a wrong offset!");
static_assert(offsetof(ABP_LightingScenarioSwitcher_C, LightingScenarioList) == 0x000230, "Member 'ABP_LightingScenarioSwitcher_C::LightingScenarioList' has a wrong offset!");
static_assert(offsetof(ABP_LightingScenarioSwitcher_C, LightScenarioString_To_WeatherType) == 0x000240, "Member 'ABP_LightingScenarioSwitcher_C::LightScenarioString_To_WeatherType' has a wrong offset!");
static_assert(offsetof(ABP_LightingScenarioSwitcher_C, CurrentLightingScenario) == 0x000290, "Member 'ABP_LightingScenarioSwitcher_C::CurrentLightingScenario' has a wrong offset!");
static_assert(offsetof(ABP_LightingScenarioSwitcher_C, ForceLightingScenario) == 0x0002A0, "Member 'ABP_LightingScenarioSwitcher_C::ForceLightingScenario' has a wrong offset!");
static_assert(offsetof(ABP_LightingScenarioSwitcher_C, CurrentLightingScenarioIdx) == 0x0002A4, "Member 'ABP_LightingScenarioSwitcher_C::CurrentLightingScenarioIdx' has a wrong offset!");
static_assert(offsetof(ABP_LightingScenarioSwitcher_C, SelectedIdx) == 0x0002A8, "Member 'ABP_LightingScenarioSwitcher_C::SelectedIdx' has a wrong offset!");
static_assert(offsetof(ABP_LightingScenarioSwitcher_C, SunnySubstring) == 0x0002B0, "Member 'ABP_LightingScenarioSwitcher_C::SunnySubstring' has a wrong offset!");
static_assert(offsetof(ABP_LightingScenarioSwitcher_C, PendingLevelToLoad) == 0x0002C0, "Member 'ABP_LightingScenarioSwitcher_C::PendingLevelToLoad' has a wrong offset!");
static_assert(offsetof(ABP_LightingScenarioSwitcher_C, NewLightingLoaded) == 0x0002D0, "Member 'ABP_LightingScenarioSwitcher_C::NewLightingLoaded' has a wrong offset!");
static_assert(offsetof(ABP_LightingScenarioSwitcher_C, LightScenarioStringChanged) == 0x0002E0, "Member 'ABP_LightingScenarioSwitcher_C::LightScenarioStringChanged' has a wrong offset!");

}

