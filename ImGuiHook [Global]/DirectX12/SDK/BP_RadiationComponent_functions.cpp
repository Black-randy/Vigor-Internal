#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_RadiationComponent

#include "Basic.hpp"

#include "BP_RadiationComponent_classes.hpp"
#include "BP_RadiationComponent_parameters.hpp"


namespace SDK
{

// Function BP_RadiationComponent.BP_RadiationComponent_C.ExecuteUbergraph_BP_RadiationComponent
// (Final, UbergraphFunction, HasDefaults)
// Parameters:
// int32                                   EntryPoint                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_RadiationComponent_C::ExecuteUbergraph_BP_RadiationComponent(int32 EntryPoint)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_RadiationComponent_C", "ExecuteUbergraph_BP_RadiationComponent");

	Params::BP_RadiationComponent_C_ExecuteUbergraph_BP_RadiationComponent Parms{};

	Parms.EntryPoint = EntryPoint;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_RadiationComponent.BP_RadiationComponent_C.Empty event to hold timer
// (BlueprintCallable, BlueprintEvent)

void UBP_RadiationComponent_C::Empty_event_to_hold_timer()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_RadiationComponent_C", "Empty event to hold timer");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_RadiationComponent.BP_RadiationComponent_C.Character Died
// (HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// class ABP_Character_C*                  DyingCharacter                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   DamageAmount                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// EDamageType                             DamageType                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class AHumanCharacter*                  InstigatingCharacter                                   (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class UClass*                           InstigatingItem                                        (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FHitResult                       HitResult                                              (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, ContainsInstancedReference)

void UBP_RadiationComponent_C::Character_Died(class ABP_Character_C* DyingCharacter, float DamageAmount, EDamageType DamageType, class AHumanCharacter* InstigatingCharacter, class UClass* InstigatingItem, const struct FHitResult& HitResult)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_RadiationComponent_C", "Character Died");

	Params::BP_RadiationComponent_C_Character_Died Parms{};

	Parms.DyingCharacter = DyingCharacter;
	Parms.DamageAmount = DamageAmount;
	Parms.DamageType = DamageType;
	Parms.InstigatingCharacter = InstigatingCharacter;
	Parms.InstigatingItem = InstigatingItem;
	Parms.HitResult = std::move(HitResult);

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_RadiationComponent.BP_RadiationComponent_C.Radiation Wave Determined
// (BlueprintCallable, BlueprintEvent)

void UBP_RadiationComponent_C::Radiation_Wave_Determined()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_RadiationComponent_C", "Radiation Wave Determined");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_RadiationComponent.BP_RadiationComponent_C.ReceiveTick
// (Event, Public, BlueprintEvent)
// Parameters:
// float                                   DeltaSeconds                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_RadiationComponent_C::ReceiveTick(float DeltaSeconds)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_RadiationComponent_C", "ReceiveTick");

	Params::BP_RadiationComponent_C_ReceiveTick Parms{};

	Parms.DeltaSeconds = DeltaSeconds;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_RadiationComponent.BP_RadiationComponent_C.ReceiveBeginPlay
// (Event, Public, BlueprintEvent)

void UBP_RadiationComponent_C::ReceiveBeginPlay()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_RadiationComponent_C", "ReceiveBeginPlay");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_RadiationComponent.BP_RadiationComponent_C.Add Radiation Exposure
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// float                                   Radiation_Exposure_0                                   (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_RadiationComponent_C::Add_Radiation_Exposure(float Radiation_Exposure_0)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_RadiationComponent_C", "Add Radiation Exposure");

	Params::BP_RadiationComponent_C_Add_Radiation_Exposure Parms{};

	Parms.Radiation_Exposure_0 = Radiation_Exposure_0;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_RadiationComponent.BP_RadiationComponent_C.Decrease Radiation Exposure
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// float                                   Radiation_Exposure_0                                   (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_RadiationComponent_C::Decrease_Radiation_Exposure(float Radiation_Exposure_0)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_RadiationComponent_C", "Decrease Radiation Exposure");

	Params::BP_RadiationComponent_C_Decrease_Radiation_Exposure Parms{};

	Parms.Radiation_Exposure_0 = Radiation_Exposure_0;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_RadiationComponent.BP_RadiationComponent_C.Check If Player Switched To Spectator
// (Private, HasDefaults, BlueprintCallable, BlueprintEvent)

void UBP_RadiationComponent_C::Check_If_Player_Switched_To_Spectator()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_RadiationComponent_C", "Check If Player Switched To Spectator");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_RadiationComponent.BP_RadiationComponent_C.Process Radiation Damage
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    Character_Died                                         (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void UBP_RadiationComponent_C::Process_Radiation_Damage(bool* Character_Died)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_RadiationComponent_C", "Process Radiation Damage");

	Params::BP_RadiationComponent_C_Process_Radiation_Damage Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Character_Died != nullptr)
		*Character_Died = Parms.Character_Died;
}


// Function BP_RadiationComponent.BP_RadiationComponent_C.Calculate radiation wave exposure
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// float                                   Wave_exposure_at_character_location                    (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_RadiationComponent_C::Calculate_radiation_wave_exposure(float* Wave_exposure_at_character_location)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_RadiationComponent_C", "Calculate radiation wave exposure");

	Params::BP_RadiationComponent_C_Calculate_radiation_wave_exposure Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Wave_exposure_at_character_location != nullptr)
		*Wave_exposure_at_character_location = Parms.Wave_exposure_at_character_location;
}


// Function BP_RadiationComponent.BP_RadiationComponent_C.Calculate and set radiation on character
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// float                                   DeltaSeconds                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   Cloud_Exposure_0                                       (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   Wave_Exposure_0                                        (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   Airdrop_Exposure_0                                     (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_RadiationComponent_C::Calculate_and_set_radiation_on_character(float DeltaSeconds, float Cloud_Exposure_0, float Wave_Exposure_0, float Airdrop_Exposure_0)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_RadiationComponent_C", "Calculate and set radiation on character");

	Params::BP_RadiationComponent_C_Calculate_and_set_radiation_on_character Parms{};

	Parms.DeltaSeconds = DeltaSeconds;
	Parms.Cloud_Exposure_0 = Cloud_Exposure_0;
	Parms.Wave_Exposure_0 = Wave_Exposure_0;
	Parms.Airdrop_Exposure_0 = Airdrop_Exposure_0;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_RadiationComponent.BP_RadiationComponent_C.Set radiation exposure
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// float                                   Value                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_RadiationComponent_C::Set_radiation_exposure(float Value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_RadiationComponent_C", "Set radiation exposure");

	Params::BP_RadiationComponent_C_Set_radiation_exposure Parms{};

	Parms.Value = Value;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_RadiationComponent.BP_RadiationComponent_C.Add Radiation Exposure from rad cloud
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// float                                   Incomming_Radiation_Exposure                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_RadiationComponent_C::Add_Radiation_Exposure_from_rad_cloud(float Incomming_Radiation_Exposure)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_RadiationComponent_C", "Add Radiation Exposure from rad cloud");

	Params::BP_RadiationComponent_C_Add_Radiation_Exposure_from_rad_cloud Parms{};

	Parms.Incomming_Radiation_Exposure = Incomming_Radiation_Exposure;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_RadiationComponent.BP_RadiationComponent_C.Calculate and set radiation cloud exposure
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// float                                   Delta_seconds                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_RadiationComponent_C::Calculate_and_set_radiation_cloud_exposure(float Delta_seconds)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_RadiationComponent_C", "Calculate and set radiation cloud exposure");

	Params::BP_RadiationComponent_C_Calculate_and_set_radiation_cloud_exposure Parms{};

	Parms.Delta_seconds = Delta_seconds;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_RadiationComponent.BP_RadiationComponent_C.Set radiation exposure from airdrop crate
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// float                                   Value                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_RadiationComponent_C::Set_radiation_exposure_from_airdrop_crate(float Value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_RadiationComponent_C", "Set radiation exposure from airdrop crate");

	Params::BP_RadiationComponent_C_Set_radiation_exposure_from_airdrop_crate Parms{};

	Parms.Value = Value;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_RadiationComponent.BP_RadiationComponent_C.SetupForTutorialWave
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class ABP_RadiationWave_C*              RadiationWave                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_RadiationComponent_C::SetupForTutorialWave(class ABP_RadiationWave_C* RadiationWave)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_RadiationComponent_C", "SetupForTutorialWave");

	Params::BP_RadiationComponent_C_SetupForTutorialWave Parms{};

	Parms.RadiationWave = RadiationWave;

	UObject::ProcessEvent(Func, &Parms);
}

}

