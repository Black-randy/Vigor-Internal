#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_CollisionCapture

#include "Basic.hpp"

#include "BP_CollisionCapture_classes.hpp"
#include "BP_CollisionCapture_parameters.hpp"


namespace SDK
{

// Function BP_CollisionCapture.BP_CollisionCapture_C.NewEventDispatcher_0__DelegateSignature
// (Public, Delegate, BlueprintCallable, BlueprintEvent)

void ABP_CollisionCapture_C::NewEventDispatcher_0__DelegateSignature()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_CollisionCapture_C", "NewEventDispatcher_0__DelegateSignature");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_CollisionCapture.BP_CollisionCapture_C.ExecuteUbergraph_BP_CollisionCapture
// (Final, UbergraphFunction)
// Parameters:
// int32                                   EntryPoint                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_CollisionCapture_C::ExecuteUbergraph_BP_CollisionCapture(int32 EntryPoint)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_CollisionCapture_C", "ExecuteUbergraph_BP_CollisionCapture");

	Params::BP_CollisionCapture_C_ExecuteUbergraph_BP_CollisionCapture Parms{};

	Parms.EntryPoint = EntryPoint;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_CollisionCapture.BP_CollisionCapture_C.OnDeath
// (BlueprintCallable, BlueprintEvent)

void ABP_CollisionCapture_C::OnDeath()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_CollisionCapture_C", "OnDeath");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_CollisionCapture.BP_CollisionCapture_C.Exapand Showlist
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// class AActor*                           Actor                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_CollisionCapture_C::Exapand_Showlist(class AActor* Actor)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_CollisionCapture_C", "Exapand Showlist");

	Params::BP_CollisionCapture_C_Exapand_Showlist Parms{};

	Parms.Actor = Actor;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_CollisionCapture.BP_CollisionCapture_C.ReceiveTick
// (Event, Public, BlueprintEvent)
// Parameters:
// float                                   DeltaSeconds                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_CollisionCapture_C::ReceiveTick(float DeltaSeconds)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_CollisionCapture_C", "ReceiveTick");

	Params::BP_CollisionCapture_C_ReceiveTick Parms{};

	Parms.DeltaSeconds = DeltaSeconds;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_CollisionCapture.BP_CollisionCapture_C.ReceiveBeginPlay
// (Event, Protected, BlueprintEvent)

void ABP_CollisionCapture_C::ReceiveBeginPlay()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_CollisionCapture_C", "ReceiveBeginPlay");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_CollisionCapture.BP_CollisionCapture_C.MoveCapture
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)

void ABP_CollisionCapture_C::MoveCapture()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_CollisionCapture_C", "MoveCapture");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_CollisionCapture.BP_CollisionCapture_C.Renew showlist
// (Public, BlueprintCallable, BlueprintEvent)

void ABP_CollisionCapture_C::Renew_showlist()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_CollisionCapture_C", "Renew showlist");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_CollisionCapture.BP_CollisionCapture_C.InitOwnerMovementComponent
// (Public, BlueprintCallable, BlueprintEvent)

void ABP_CollisionCapture_C::InitOwnerMovementComponent()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_CollisionCapture_C", "InitOwnerMovementComponent");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_CollisionCapture.BP_CollisionCapture_C.Init Showlist
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    LODTurnedOff                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ABP_CollisionCapture_C::Init_Showlist(bool LODTurnedOff)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_CollisionCapture_C", "Init Showlist");

	Params::BP_CollisionCapture_C_Init_Showlist Parms{};

	Parms.LODTurnedOff = LODTurnedOff;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_CollisionCapture.BP_CollisionCapture_C.Simulate
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// float                                   DeltaTime                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_CollisionCapture_C::Simulate(float DeltaTime)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_CollisionCapture_C", "Simulate");

	Params::BP_CollisionCapture_C_Simulate Parms{};

	Parms.DeltaTime = DeltaTime;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_CollisionCapture.BP_CollisionCapture_C.InitCaptures
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)

void ABP_CollisionCapture_C::InitCaptures()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_CollisionCapture_C", "InitCaptures");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_CollisionCapture.BP_CollisionCapture_C.DeactivateBend
// (Public, BlueprintCallable, BlueprintEvent)

void ABP_CollisionCapture_C::DeactivateBend()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_CollisionCapture_C", "DeactivateBend");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_CollisionCapture.BP_CollisionCapture_C.ExpandShowlist
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class AActor*                           Affector                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_CollisionCapture_C::ExpandShowlist(class AActor* Affector)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_CollisionCapture_C", "ExpandShowlist");

	Params::BP_CollisionCapture_C_ExpandShowlist Parms{};

	Parms.Affector = Affector;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_CollisionCapture.BP_CollisionCapture_C.AddComponentsToShowlist
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// class AActor*                           Object                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    LODTurnedOff                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ABP_CollisionCapture_C::AddComponentsToShowlist(class AActor* Object, bool LODTurnedOff)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_CollisionCapture_C", "AddComponentsToShowlist");

	Params::BP_CollisionCapture_C_AddComponentsToShowlist Parms{};

	Parms.Object = Object;
	Parms.LODTurnedOff = LODTurnedOff;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_CollisionCapture.BP_CollisionCapture_C.CheckTargetAndSet
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// class AActor*                           CollisionTarget_0                                      (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    Success                                                (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ABP_CollisionCapture_C::CheckTargetAndSet(class AActor* CollisionTarget_0, bool* Success)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_CollisionCapture_C", "CheckTargetAndSet");

	Params::BP_CollisionCapture_C_CheckTargetAndSet Parms{};

	Parms.CollisionTarget_0 = CollisionTarget_0;

	UObject::ProcessEvent(Func, &Parms);

	if (Success != nullptr)
		*Success = Parms.Success;
}


// Function BP_CollisionCapture.BP_CollisionCapture_C.ReCheckTarget
// (Public, BlueprintCallable, BlueprintEvent)

void ABP_CollisionCapture_C::ReCheckTarget()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_CollisionCapture_C", "ReCheckTarget");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_CollisionCapture.BP_CollisionCapture_C.SetterSpectator
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// class ABP_WorldSpectator_C*             Spectator_0                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    Success                                                (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ABP_CollisionCapture_C::SetterSpectator(class ABP_WorldSpectator_C* Spectator_0, bool* Success)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_CollisionCapture_C", "SetterSpectator");

	Params::BP_CollisionCapture_C_SetterSpectator Parms{};

	Parms.Spectator_0 = Spectator_0;

	UObject::ProcessEvent(Func, &Parms);

	if (Success != nullptr)
		*Success = Parms.Success;
}

}

