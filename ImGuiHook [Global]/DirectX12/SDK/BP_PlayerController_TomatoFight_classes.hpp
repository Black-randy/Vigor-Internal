#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_PlayerController_TomatoFight

#include "Basic.hpp"

#include "Flame_structs.hpp"
#include "Engine_structs.hpp"
#include "S_CustomMapMarker_structs.hpp"
#include "E_TeamsMatchPhase_structs.hpp"
#include "BP_PlayerController_Teams_classes.hpp"
#include "ERaidNotificationType_structs.hpp"


namespace SDK
{

// BlueprintGeneratedClass BP_PlayerController_TomatoFight.BP_PlayerController_TomatoFight_C
// 0x0108 (0x0EA0 - 0x0D98)
class ABP_PlayerController_TomatoFight_C final : public ABP_PlayerController_Teams_C
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame_BP_PlayerController_TomatoFight_C;  // 0x0D98(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class UBP_PingingSystemComponent_C*           BP_PingingSystemComponent;                         // 0x0DA0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UUI_GunFight_MatchProgress_C*           Match_Progress_UI;                                 // 0x0DA8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ABP_PlayerStart_Raid_C*                 Selected_Attacker_Start;                           // 0x0DB0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ABP_PlayerStart_Raid_C*                 Selected_Defender_Start;                           // 0x0DB8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UUI_Raid_SpawnPointSelection_C*         Spawn_Position_UI;                                 // 0x0DC0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UUI_GunFight_PreRoundCountDown_InputBlock_C* Round_Start_Countdown_UI;                          // 0x0DC8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TMap<class FName, struct FS_CustomMapMarker>  ThisRoundMapMarkers;                               // 0x0DD0(0x0050)(Edit, BlueprintVisible, DisableEditOnInstance)
	bool                                          Match_Started;                                     // 0x0E20(0x0001)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_E21[0x7];                                      // 0x0E21(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UUI_Raid_WaitingForMatchStart_C*        Wait_For_Match_Start_UI;                           // 0x0E28(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Is_Invincibile;                                    // 0x0E30(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_E31[0x7];                                      // 0x0E31(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class ABP_FreeCameraSpectator_C*              Player_Spectator;                                  // 0x0E38(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<int32>                                 Player_IDs_To_Set_Widget_On;                       // 0x0E40(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	TArray<class UWidgetComponent*>               Player_Widgets;                                    // 0x0E50(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance, ContainsInstancedReference)
	E_TeamsMatchPhase                             Phase_Before_Round_Start;                          // 0x0E60(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_E61[0x7];                                      // 0x0E61(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UUI_ItemTransfer_C*                     PreRound_Inventory_UI;                             // 0x0E68(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FTimerHandle                           Make_Ping_Timer;                                   // 0x0E70(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	int32                                         Ping_Tab_Count;                                    // 0x0E78(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_E7C[0x4];                                      // 0x0E7C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class FName>                           TeammateMarkers;                                   // 0x0E80(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	class ABP_PlayerStart_Raid_C*                 Last_Player_Start;                                 // 0x0E90(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          DisabledMovement;                                  // 0x0E98(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)

public:
	void ExecuteUbergraph_BP_PlayerController_TomatoFight(int32 EntryPoint);
	void DisableMovement_Client(bool Disable);
	void ReceiveTick(float DeltaSeconds);
	void Cheat_AddScore(class FName ScoreEvent);
	void DisableMovement_FromServer(bool Disable);
	void Show_Teammate_Positions();
	void Save_Match_ID_on_Client(const class FString& Match_ID);
	void Clear_All_Pings();
	void Get_Kicked_For_Teamkilling();
	void Remove_All_Player_Widgets();
	void PossessedServer(class ABP_Character_C* Possessed_Character);
	void Died();
	void Delete_the_Player_widget(class ABP_Character_C* Marked_character);
	void Create_the_Player_widget(class ABP_Character_C* Character_to_mark);
	void Set_Invincibility_at_Possesed(class ABP_Character_C* Possessed_Character);
	void Set_Invincibility(bool New_Invincibility);
	void Player_Connected_Server();
	void Remove_Objective_Marker(class AActor* Located_Actor);
	void Add_Objective_Marker(class AActor* Located_Actor);
	void Create_ScorePopUp();
	void Update_Round_Start_Countdown_UI(int32 Round_Starts_In);
	void Set_Round_Time(int32 Round_Time, bool Is_Objective_Phase);
	void Start_Countdown_in_Waiting_for_Match(int32 Time, bool All_Connected);
	void Hide_Waiting_For_Match_To_Start();
	void Show_Waiting_For_Match_To_Start();
	void Hide_Round_Start_Countdown_UI();
	void Show_Round_Start_Countdown_UI(int32 Round_Starts_In);
	void Hide_Spawn_Position_Selection_UI();
	void Update_Match_Progress(int32 Attackers_Won_Rounds, int32 Defenders_Won_Rounds);
	void Hide_Match_Progress_UI();
	void Show_Match_Progress_UI(int32 Round_Time, int32 Attackers_Won_Rounds, int32 Defenders_Won_Rounds);
	void Show_Player_Notification(const class FText& Title, const class FText& Reason, ERaidNotificationType Type);
	void Hide_End_Turn_UI();
	void Cheat_SkipMatch(bool LocalPlayerWins);
	void Client_Request_Pause_Match();
	void Request_Pause_Match();
	void Add_or_Remove_Objective_Marker(class AActor* Located_Actor, bool Add);
	void Start_Spectating();
	void Is_Attacker(bool* Is_Attacker_0);
	void Add_Teammate_Markers();
	void Player_Respawned();
	void ReceiveBeginPlay();
	void CheatHideUI(bool Hide);
	void Send_Kill_Scored_Event(class AHumanCharacter* Killer, class AHumanCharacter* Victim, class UClass* Instigating_Item, bool Headshot, bool Teamkill);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BP_PlayerController_TomatoFight_C">();
	}
	static class ABP_PlayerController_TomatoFight_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<ABP_PlayerController_TomatoFight_C>();
	}
};
static_assert(alignof(ABP_PlayerController_TomatoFight_C) == 0x000008, "Wrong alignment on ABP_PlayerController_TomatoFight_C");
static_assert(sizeof(ABP_PlayerController_TomatoFight_C) == 0x000EA0, "Wrong size on ABP_PlayerController_TomatoFight_C");
static_assert(offsetof(ABP_PlayerController_TomatoFight_C, UberGraphFrame_BP_PlayerController_TomatoFight_C) == 0x000D98, "Member 'ABP_PlayerController_TomatoFight_C::UberGraphFrame_BP_PlayerController_TomatoFight_C' has a wrong offset!");
static_assert(offsetof(ABP_PlayerController_TomatoFight_C, BP_PingingSystemComponent) == 0x000DA0, "Member 'ABP_PlayerController_TomatoFight_C::BP_PingingSystemComponent' has a wrong offset!");
static_assert(offsetof(ABP_PlayerController_TomatoFight_C, Match_Progress_UI) == 0x000DA8, "Member 'ABP_PlayerController_TomatoFight_C::Match_Progress_UI' has a wrong offset!");
static_assert(offsetof(ABP_PlayerController_TomatoFight_C, Selected_Attacker_Start) == 0x000DB0, "Member 'ABP_PlayerController_TomatoFight_C::Selected_Attacker_Start' has a wrong offset!");
static_assert(offsetof(ABP_PlayerController_TomatoFight_C, Selected_Defender_Start) == 0x000DB8, "Member 'ABP_PlayerController_TomatoFight_C::Selected_Defender_Start' has a wrong offset!");
static_assert(offsetof(ABP_PlayerController_TomatoFight_C, Spawn_Position_UI) == 0x000DC0, "Member 'ABP_PlayerController_TomatoFight_C::Spawn_Position_UI' has a wrong offset!");
static_assert(offsetof(ABP_PlayerController_TomatoFight_C, Round_Start_Countdown_UI) == 0x000DC8, "Member 'ABP_PlayerController_TomatoFight_C::Round_Start_Countdown_UI' has a wrong offset!");
static_assert(offsetof(ABP_PlayerController_TomatoFight_C, ThisRoundMapMarkers) == 0x000DD0, "Member 'ABP_PlayerController_TomatoFight_C::ThisRoundMapMarkers' has a wrong offset!");
static_assert(offsetof(ABP_PlayerController_TomatoFight_C, Match_Started) == 0x000E20, "Member 'ABP_PlayerController_TomatoFight_C::Match_Started' has a wrong offset!");
static_assert(offsetof(ABP_PlayerController_TomatoFight_C, Wait_For_Match_Start_UI) == 0x000E28, "Member 'ABP_PlayerController_TomatoFight_C::Wait_For_Match_Start_UI' has a wrong offset!");
static_assert(offsetof(ABP_PlayerController_TomatoFight_C, Is_Invincibile) == 0x000E30, "Member 'ABP_PlayerController_TomatoFight_C::Is_Invincibile' has a wrong offset!");
static_assert(offsetof(ABP_PlayerController_TomatoFight_C, Player_Spectator) == 0x000E38, "Member 'ABP_PlayerController_TomatoFight_C::Player_Spectator' has a wrong offset!");
static_assert(offsetof(ABP_PlayerController_TomatoFight_C, Player_IDs_To_Set_Widget_On) == 0x000E40, "Member 'ABP_PlayerController_TomatoFight_C::Player_IDs_To_Set_Widget_On' has a wrong offset!");
static_assert(offsetof(ABP_PlayerController_TomatoFight_C, Player_Widgets) == 0x000E50, "Member 'ABP_PlayerController_TomatoFight_C::Player_Widgets' has a wrong offset!");
static_assert(offsetof(ABP_PlayerController_TomatoFight_C, Phase_Before_Round_Start) == 0x000E60, "Member 'ABP_PlayerController_TomatoFight_C::Phase_Before_Round_Start' has a wrong offset!");
static_assert(offsetof(ABP_PlayerController_TomatoFight_C, PreRound_Inventory_UI) == 0x000E68, "Member 'ABP_PlayerController_TomatoFight_C::PreRound_Inventory_UI' has a wrong offset!");
static_assert(offsetof(ABP_PlayerController_TomatoFight_C, Make_Ping_Timer) == 0x000E70, "Member 'ABP_PlayerController_TomatoFight_C::Make_Ping_Timer' has a wrong offset!");
static_assert(offsetof(ABP_PlayerController_TomatoFight_C, Ping_Tab_Count) == 0x000E78, "Member 'ABP_PlayerController_TomatoFight_C::Ping_Tab_Count' has a wrong offset!");
static_assert(offsetof(ABP_PlayerController_TomatoFight_C, TeammateMarkers) == 0x000E80, "Member 'ABP_PlayerController_TomatoFight_C::TeammateMarkers' has a wrong offset!");
static_assert(offsetof(ABP_PlayerController_TomatoFight_C, Last_Player_Start) == 0x000E90, "Member 'ABP_PlayerController_TomatoFight_C::Last_Player_Start' has a wrong offset!");
static_assert(offsetof(ABP_PlayerController_TomatoFight_C, DisabledMovement) == 0x000E98, "Member 'ABP_PlayerController_TomatoFight_C::DisabledMovement' has a wrong offset!");

}

