#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_ShootingChallenges_GMComponent

#include "Basic.hpp"

#include "BP_ShootingChallenges_GMComponent_classes.hpp"
#include "BP_ShootingChallenges_GMComponent_parameters.hpp"


namespace SDK
{

// Function BP_ShootingChallenges_GMComponent.BP_ShootingChallenges_GMComponent_C.ChallengeHasStarted__DelegateSignature
// (Public, Delegate, BlueprintCallable, BlueprintEvent)

void UBP_ShootingChallenges_GMComponent_C::ChallengeHasStarted__DelegateSignature()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_ShootingChallenges_GMComponent_C", "ChallengeHasStarted__DelegateSignature");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_ShootingChallenges_GMComponent.BP_ShootingChallenges_GMComponent_C.ChallengesLoaded__DelegateSignature
// (Public, Delegate, BlueprintCallable, BlueprintEvent)
// Parameters:
// class AHumanPlayerController*           CurrentPlayer                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    Success                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void UBP_ShootingChallenges_GMComponent_C::ChallengesLoaded__DelegateSignature(class AHumanPlayerController* CurrentPlayer, bool Success)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_ShootingChallenges_GMComponent_C", "ChallengesLoaded__DelegateSignature");

	Params::BP_ShootingChallenges_GMComponent_C_ChallengesLoaded__DelegateSignature Parms{};

	Parms.CurrentPlayer = CurrentPlayer;
	Parms.Success = Success;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_ShootingChallenges_GMComponent.BP_ShootingChallenges_GMComponent_C.ChallengesSaved__DelegateSignature
// (Public, Delegate, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    Success                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// bool                                    OpenResultUI_0                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// float                                   PrevHighScore                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_ShootingChallenges_GMComponent_C::ChallengesSaved__DelegateSignature(bool Success, bool OpenResultUI_0, float PrevHighScore)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_ShootingChallenges_GMComponent_C", "ChallengesSaved__DelegateSignature");

	Params::BP_ShootingChallenges_GMComponent_C_ChallengesSaved__DelegateSignature Parms{};

	Parms.Success = Success;
	Parms.OpenResultUI_0 = OpenResultUI_0;
	Parms.PrevHighScore = PrevHighScore;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_ShootingChallenges_GMComponent.BP_ShootingChallenges_GMComponent_C.ExecuteUbergraph_BP_ShootingChallenges_GMComponent
// (Final, UbergraphFunction, HasDefaults)
// Parameters:
// int32                                   EntryPoint                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_ShootingChallenges_GMComponent_C::ExecuteUbergraph_BP_ShootingChallenges_GMComponent(int32 EntryPoint)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_ShootingChallenges_GMComponent_C", "ExecuteUbergraph_BP_ShootingChallenges_GMComponent");

	Params::BP_ShootingChallenges_GMComponent_C_ExecuteUbergraph_BP_ShootingChallenges_GMComponent Parms{};

	Parms.EntryPoint = EntryPoint;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_ShootingChallenges_GMComponent.BP_ShootingChallenges_GMComponent_C.EventChallengesSavingFinished
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    Success                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// bool                                    OpenResultUI_0                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// float                                   PrevHighScore                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_ShootingChallenges_GMComponent_C::EventChallengesSavingFinished(bool Success, bool OpenResultUI_0, float PrevHighScore)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_ShootingChallenges_GMComponent_C", "EventChallengesSavingFinished");

	Params::BP_ShootingChallenges_GMComponent_C_EventChallengesSavingFinished Parms{};

	Parms.Success = Success;
	Parms.OpenResultUI_0 = OpenResultUI_0;
	Parms.PrevHighScore = PrevHighScore;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_ShootingChallenges_GMComponent.BP_ShootingChallenges_GMComponent_C.CheckForNewWeapons
// (BlueprintCallable, BlueprintEvent)

void UBP_ShootingChallenges_GMComponent_C::CheckForNewWeapons()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_ShootingChallenges_GMComponent_C", "CheckForNewWeapons");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_ShootingChallenges_GMComponent.BP_ShootingChallenges_GMComponent_C.EventChallengesSaveGame
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    OpenResultUI_0                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// float                                   PrevHighScore                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_ShootingChallenges_GMComponent_C::EventChallengesSaveGame(bool OpenResultUI_0, float PrevHighScore)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_ShootingChallenges_GMComponent_C", "EventChallengesSaveGame");

	Params::BP_ShootingChallenges_GMComponent_C_EventChallengesSaveGame Parms{};

	Parms.OpenResultUI_0 = OpenResultUI_0;
	Parms.PrevHighScore = PrevHighScore;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_ShootingChallenges_GMComponent.BP_ShootingChallenges_GMComponent_C.EventChallengesLoadingFinished
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// class AHumanPlayerController*           CurrentPlayer                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    Success                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void UBP_ShootingChallenges_GMComponent_C::EventChallengesLoadingFinished(class AHumanPlayerController* CurrentPlayer, bool Success)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_ShootingChallenges_GMComponent_C", "EventChallengesLoadingFinished");

	Params::BP_ShootingChallenges_GMComponent_C_EventChallengesLoadingFinished Parms{};

	Parms.CurrentPlayer = CurrentPlayer;
	Parms.Success = Success;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_ShootingChallenges_GMComponent.BP_ShootingChallenges_GMComponent_C.EventLoadChallenges
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// class AHumanPlayerController*           CurrentPlayer                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_ShootingChallenges_GMComponent_C::EventLoadChallenges(class AHumanPlayerController* CurrentPlayer)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_ShootingChallenges_GMComponent_C", "EventLoadChallenges");

	Params::BP_ShootingChallenges_GMComponent_C_EventLoadChallenges Parms{};

	Parms.CurrentPlayer = CurrentPlayer;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_ShootingChallenges_GMComponent.BP_ShootingChallenges_GMComponent_C.ReceiveEndPlay
// (Event, Public, BlueprintEvent)
// Parameters:
// EEndPlayReason                          EndPlayReason                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_ShootingChallenges_GMComponent_C::ReceiveEndPlay(EEndPlayReason EndPlayReason)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_ShootingChallenges_GMComponent_C", "ReceiveEndPlay");

	Params::BP_ShootingChallenges_GMComponent_C_ReceiveEndPlay Parms{};

	Parms.EndPlayReason = EndPlayReason;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_ShootingChallenges_GMComponent.BP_ShootingChallenges_GMComponent_C.Clear Range
// (BlueprintCallable, BlueprintEvent)

void UBP_ShootingChallenges_GMComponent_C::Clear_Range()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_ShootingChallenges_GMComponent_C", "Clear Range");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_ShootingChallenges_GMComponent.BP_ShootingChallenges_GMComponent_C.Start Countdown
// (BlueprintCallable, BlueprintEvent)

void UBP_ShootingChallenges_GMComponent_C::Start_Countdown()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_ShootingChallenges_GMComponent_C", "Start Countdown");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_ShootingChallenges_GMComponent.BP_ShootingChallenges_GMComponent_C.Clear Range With Delay
// (BlueprintCallable, BlueprintEvent)

void UBP_ShootingChallenges_GMComponent_C::Clear_Range_With_Delay()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_ShootingChallenges_GMComponent_C", "Clear Range With Delay");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_ShootingChallenges_GMComponent.BP_ShootingChallenges_GMComponent_C.Start Challenge
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FS_ShootingChallenge             ActiveChallenge_0                                      (BlueprintVisible, BlueprintReadOnly, Parm, ContainsInstancedReference, HasGetValueTypeHash)
// bool                                    Restart                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void UBP_ShootingChallenges_GMComponent_C::Start_Challenge(const struct FS_ShootingChallenge& ActiveChallenge_0, bool Restart)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_ShootingChallenges_GMComponent_C", "Start Challenge");

	Params::BP_ShootingChallenges_GMComponent_C_Start_Challenge Parms{};

	Parms.ActiveChallenge_0 = std::move(ActiveChallenge_0);
	Parms.Restart = Restart;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_ShootingChallenges_GMComponent.BP_ShootingChallenges_GMComponent_C.StopChallenge
// (BlueprintCallable, BlueprintEvent)

void UBP_ShootingChallenges_GMComponent_C::StopChallenge()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_ShootingChallenges_GMComponent_C", "StopChallenge");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_ShootingChallenges_GMComponent.BP_ShootingChallenges_GMComponent_C.ChallengeTimerTick
// (BlueprintCallable, BlueprintEvent)

void UBP_ShootingChallenges_GMComponent_C::ChallengeTimerTick()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_ShootingChallenges_GMComponent_C", "ChallengeTimerTick");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_ShootingChallenges_GMComponent.BP_ShootingChallenges_GMComponent_C.CountdownTimerTick
// (BlueprintCallable, BlueprintEvent)

void UBP_ShootingChallenges_GMComponent_C::CountdownTimerTick()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_ShootingChallenges_GMComponent_C", "CountdownTimerTick");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_ShootingChallenges_GMComponent.BP_ShootingChallenges_GMComponent_C.OnLoadSucceed_3C54EAD94E7C6DC679F3EEB70F632FD9
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// class USaveGame*                        SaveGame                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_ShootingChallenges_GMComponent_C::OnLoadSucceed_3C54EAD94E7C6DC679F3EEB70F632FD9(class USaveGame* SaveGame)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_ShootingChallenges_GMComponent_C", "OnLoadSucceed_3C54EAD94E7C6DC679F3EEB70F632FD9");

	Params::BP_ShootingChallenges_GMComponent_C_OnLoadSucceed_3C54EAD94E7C6DC679F3EEB70F632FD9 Parms{};

	Parms.SaveGame = SaveGame;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_ShootingChallenges_GMComponent.BP_ShootingChallenges_GMComponent_C.OnLoadFailed_3C54EAD94E7C6DC679F3EEB70F632FD9
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// class USaveGame*                        SaveGame                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_ShootingChallenges_GMComponent_C::OnLoadFailed_3C54EAD94E7C6DC679F3EEB70F632FD9(class USaveGame* SaveGame)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_ShootingChallenges_GMComponent_C", "OnLoadFailed_3C54EAD94E7C6DC679F3EEB70F632FD9");

	Params::BP_ShootingChallenges_GMComponent_C_OnLoadFailed_3C54EAD94E7C6DC679F3EEB70F632FD9 Parms{};

	Parms.SaveGame = SaveGame;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_ShootingChallenges_GMComponent.BP_ShootingChallenges_GMComponent_C.OnSaveSucceed_8394D6FA4870C41A77AF78BB64CF4527
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// class FString                           SlotName                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)
// int32                                   UserIndex                                              (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_ShootingChallenges_GMComponent_C::OnSaveSucceed_8394D6FA4870C41A77AF78BB64CF4527(const class FString& SlotName, const int32 UserIndex)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_ShootingChallenges_GMComponent_C", "OnSaveSucceed_8394D6FA4870C41A77AF78BB64CF4527");

	Params::BP_ShootingChallenges_GMComponent_C_OnSaveSucceed_8394D6FA4870C41A77AF78BB64CF4527 Parms{};

	Parms.SlotName = std::move(SlotName);
	Parms.UserIndex = UserIndex;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_ShootingChallenges_GMComponent.BP_ShootingChallenges_GMComponent_C.OnSaveFailed_8394D6FA4870C41A77AF78BB64CF4527
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// class FString                           SlotName                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)
// int32                                   UserIndex                                              (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_ShootingChallenges_GMComponent_C::OnSaveFailed_8394D6FA4870C41A77AF78BB64CF4527(const class FString& SlotName, const int32 UserIndex)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_ShootingChallenges_GMComponent_C", "OnSaveFailed_8394D6FA4870C41A77AF78BB64CF4527");

	Params::BP_ShootingChallenges_GMComponent_C_OnSaveFailed_8394D6FA4870C41A77AF78BB64CF4527 Parms{};

	Parms.SlotName = std::move(SlotName);
	Parms.UserIndex = UserIndex;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_ShootingChallenges_GMComponent.BP_ShootingChallenges_GMComponent_C.Check Achievements Progress
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)

void UBP_ShootingChallenges_GMComponent_C::Check_Achievements_Progress()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_ShootingChallenges_GMComponent_C", "Check Achievements Progress");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_ShootingChallenges_GMComponent.BP_ShootingChallenges_GMComponent_C.OpenChallengesMenu
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class AHumanPlayerController*           CurrentPlayer                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_ShootingChallenges_GMComponent_C::OpenChallengesMenu(class AHumanPlayerController* CurrentPlayer)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_ShootingChallenges_GMComponent_C", "OpenChallengesMenu");

	Params::BP_ShootingChallenges_GMComponent_C_OpenChallengesMenu Parms{};

	Parms.CurrentPlayer = CurrentPlayer;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_ShootingChallenges_GMComponent.BP_ShootingChallenges_GMComponent_C.ScoreHit
// (Public, BlueprintCallable, BlueprintEvent)

void UBP_ShootingChallenges_GMComponent_C::ScoreHit()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_ShootingChallenges_GMComponent_C", "ScoreHit");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_ShootingChallenges_GMComponent.BP_ShootingChallenges_GMComponent_C.GetChallengeRank
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// struct FS_ShootingChallenge             ShootingChallenge                                      (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm, ContainsInstancedReference, HasGetValueTypeHash)
// float                                   ActualTime                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// E_ShootingChallengeResult               ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

E_ShootingChallengeResult UBP_ShootingChallenges_GMComponent_C::GetChallengeRank(const struct FS_ShootingChallenge& ShootingChallenge, float ActualTime)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_ShootingChallenges_GMComponent_C", "GetChallengeRank");

	Params::BP_ShootingChallenges_GMComponent_C_GetChallengeRank Parms{};

	Parms.ShootingChallenge = std::move(ShootingChallenge);
	Parms.ActualTime = ActualTime;

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function BP_ShootingChallenges_GMComponent.BP_ShootingChallenges_GMComponent_C.RestartChallenge
// (Public, BlueprintCallable, BlueprintEvent)

void UBP_ShootingChallenges_GMComponent_C::RestartChallenge()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_ShootingChallenges_GMComponent_C", "RestartChallenge");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_ShootingChallenges_GMComponent.BP_ShootingChallenges_GMComponent_C.CloseChallenge
// (Public, BlueprintCallable, BlueprintEvent)

void UBP_ShootingChallenges_GMComponent_C::CloseChallenge()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_ShootingChallenges_GMComponent_C", "CloseChallenge");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_ShootingChallenges_GMComponent.BP_ShootingChallenges_GMComponent_C.PrepareRangeForChallenge
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)

void UBP_ShootingChallenges_GMComponent_C::PrepareRangeForChallenge()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_ShootingChallenges_GMComponent_C", "PrepareRangeForChallenge");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_ShootingChallenges_GMComponent.BP_ShootingChallenges_GMComponent_C.ClearRangeAfterChallenge
// (Public, BlueprintCallable, BlueprintEvent)

void UBP_ShootingChallenges_GMComponent_C::ClearRangeAfterChallenge()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_ShootingChallenges_GMComponent_C", "ClearRangeAfterChallenge");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_ShootingChallenges_GMComponent.BP_ShootingChallenges_GMComponent_C.GetChallengeHighScore
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// struct FS_ShootingChallenge             ShootingChallenge                                      (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm, ContainsInstancedReference, HasGetValueTypeHash)
// E_ShootingChallengeResult               Rank                                                   (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   HighScore                                              (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_ShootingChallenges_GMComponent_C::GetChallengeHighScore(const struct FS_ShootingChallenge& ShootingChallenge, E_ShootingChallengeResult* Rank, float* HighScore)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_ShootingChallenges_GMComponent_C", "GetChallengeHighScore");

	Params::BP_ShootingChallenges_GMComponent_C_GetChallengeHighScore Parms{};

	Parms.ShootingChallenge = std::move(ShootingChallenge);

	UObject::ProcessEvent(Func, &Parms);

	if (Rank != nullptr)
		*Rank = Parms.Rank;

	if (HighScore != nullptr)
		*HighScore = Parms.HighScore;
}


// Function BP_ShootingChallenges_GMComponent.BP_ShootingChallenges_GMComponent_C.IsWeaponUnlocked
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// class UClass*                           Weapon                                                 (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)

bool UBP_ShootingChallenges_GMComponent_C::IsWeaponUnlocked(const class UClass*& Weapon)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_ShootingChallenges_GMComponent_C", "IsWeaponUnlocked");

	Params::BP_ShootingChallenges_GMComponent_C_IsWeaponUnlocked Parms{};

	Parms.Weapon = Weapon;

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function BP_ShootingChallenges_GMComponent.BP_ShootingChallenges_GMComponent_C.FailActiveChallenge
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// class FText                             FailingReason                                          (BlueprintVisible, BlueprintReadOnly, Parm)
// E_ShootingChallengeResult               Result                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_ShootingChallenges_GMComponent_C::FailActiveChallenge(const class FText& FailingReason, E_ShootingChallengeResult Result)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_ShootingChallenges_GMComponent_C", "FailActiveChallenge");

	Params::BP_ShootingChallenges_GMComponent_C_FailActiveChallenge Parms{};

	Parms.FailingReason = std::move(FailingReason);
	Parms.Result = Result;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_ShootingChallenges_GMComponent.BP_ShootingChallenges_GMComponent_C.FlooredTime
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// float                                   Time                                                   (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   Floored_Time                                           (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_ShootingChallenges_GMComponent_C::FlooredTime(float Time, float* Floored_Time)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_ShootingChallenges_GMComponent_C", "FlooredTime");

	Params::BP_ShootingChallenges_GMComponent_C_FlooredTime Parms{};

	Parms.Time = Time;

	UObject::ProcessEvent(Func, &Parms);

	if (Floored_Time != nullptr)
		*Floored_Time = Parms.Floored_Time;
}


// Function BP_ShootingChallenges_GMComponent.BP_ShootingChallenges_GMComponent_C.HandleResultScreenClosed
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    RetryChallenge                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void UBP_ShootingChallenges_GMComponent_C::HandleResultScreenClosed(bool RetryChallenge)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_ShootingChallenges_GMComponent_C", "HandleResultScreenClosed");

	Params::BP_ShootingChallenges_GMComponent_C_HandleResultScreenClosed Parms{};

	Parms.RetryChallenge = RetryChallenge;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_ShootingChallenges_GMComponent.BP_ShootingChallenges_GMComponent_C.OpenResultUI
// (Private, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// float                                   PrevHighScore                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_ShootingChallenges_GMComponent_C::OpenResultUI(float PrevHighScore)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_ShootingChallenges_GMComponent_C", "OpenResultUI");

	Params::BP_ShootingChallenges_GMComponent_C_OpenResultUI Parms{};

	Parms.PrevHighScore = PrevHighScore;

	UObject::ProcessEvent(Func, &Parms);
}

}

