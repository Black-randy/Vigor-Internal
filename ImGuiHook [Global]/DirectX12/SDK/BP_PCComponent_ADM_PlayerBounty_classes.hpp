#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_PCComponent_ADM_PlayerBounty

#include "Basic.hpp"

#include "Flame_structs.hpp"
#include "Engine_structs.hpp"
#include "CoreUObject_structs.hpp"
#include "BP_PCComponent_ADM_classes.hpp"
#include "E_PlayerMarkedStates_structs.hpp"


namespace SDK
{

// BlueprintGeneratedClass BP_PCComponent_ADM_PlayerBounty.BP_PCComponent_ADM_PlayerBounty_C
// 0x0110 (0x01F8 - 0x00E8)
class UBP_PCComponent_ADM_PlayerBounty_C final : public UBP_PCComponent_ADM_C
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame_BP_PCComponent_ADM_PlayerBounty_C;  // 0x00E8(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	float                                         ThreatActiveMarkerTime;                            // 0x00F0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         ThreatFadedMarkerTime;                             // 0x00F4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Kill_Count;                                        // 0x00F8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         TeamKillerActiveMarkerTime;                        // 0x00FC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         TeamKillerFadedMarkerTime;                         // 0x0100(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector2D                              Active_Bounty_Marker_Size;                         // 0x0104(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           Active_Bounty_Marker_Tint;                         // 0x010C(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector2D                              Faded_Bounty_Marker_Size;                          // 0x011C(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           Faded_Bounty_Marker_Tint;                          // 0x0124(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Already_Bound_to_Character_Dispatcher;             // 0x0134(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_135[0x3];                                      // 0x0135(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	TMap<class AHumanCharacter*, bool>            Tracked_Killers;                                   // 0x0138(0x0050)(Edit, BlueprintVisible, DisableEditOnTemplate, DisableEditOnInstance)
	TArray<class FName>                           Bounty_Markers;                                    // 0x0188(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	bool                                          IsThreat;                                          // 0x0198(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          IsTeamKiller;                                      // 0x0199(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_19A[0x6];                                      // 0x019A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTimerHandle                           TeamKillersTimer;                                  // 0x01A0(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	struct FTimerHandle                           ThreatsTimer;                                      // 0x01A8(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	TArray<struct FUniqueNetIdRepl>               TeamkilledUniqueNetIds;                            // 0x01B0(0x0010)(Edit, BlueprintVisible, Net, DisableEditOnInstance)
	class UBP_PCComponent_ADM_PlayerBounty_C*     MyKiller;                                          // 0x01C0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FUniqueNetIdRepl                       MyKillerUniqueNetId;                               // 0x01C8(0x0028)(Edit, BlueprintVisible, Net, DisableEditOnInstance, HasGetValueTypeHash)
	bool                                          Teamkilled;                                        // 0x01F0(0x0001)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)

public:
	void ExecuteUbergraph_BP_PCComponent_ADM_PlayerBounty(int32 EntryPoint);
	void CustomEvent_0();
	void Set_teamkiller_status(bool Is_Teamkiller);
	void Set_threat_status(bool Is_Threat);
	void Set_Threat_and_Teamkiller_Status(bool Is_Threat, bool Is_Teamkiller);
	void Remove_Teamkiller_Status_From_My_Teamkiller();
	void Remove_Teamkiller_Bounty_From_Another_Player(class AHumanCharacter* Human_Character, bool IsThreat_0);
	void Remove_Teamkiller_Bounty_From_This_Player();
	void UpdateTrackedKillers(class AHumanCharacter* Killer, bool IsThreat_0, bool IsTeamKiller_0);
	void TrackedPlayerExited();
	void UpdateThreats();
	void UpdateTeamKillers();
	void FadeThreats();
	void FadeTeamKillers();
	void Tracked_Player_Died(class AHumanCharacter* Killer);
	void Player_Died(class ABP_Character_C* DyingCharacter, float DamageAmount, EDamageType DamageType, class AHumanCharacter* InstigatingCharacter, class UClass* InstigatingItem, const struct FHitResult& HitResult);
	void TriggerThreatBlink();
	void ReceiveEndPlay(EEndPlayReason EndPlayReason);
	void Show_Bounty_Icon(bool IsTeamKiller_0);
	void Set_Bounty_on_This_Player(bool IsTeamKiller_0);
	void Set_Bounty_on_Another_Player(class AHumanCharacter* Killer, bool IsTeamKiller_0);
	void Add_Other_Player_Bounty_Message(bool IsTeamKiller_0);
	void Add_This_Player_Bounty_Message(bool IsTeamKiller_0);
	void Player_Scored_a_Kill(class ABP_PlayerController_Script_C* Killer, class ABP_PlayerController_Script_C* Victim);
	void Character_Possessed_on_Server(class ABP_Character_C* Possessed_Character);
	void ReceiveBeginPlay();
	void UpdateMarkers(bool AreTeamKillers);
	void FadeMarkers(bool AreTeamKillers);
	void SetThreatTeamkiller(bool NewIsThreat, bool NewIsTeamkiller, const class APlayerState* VictimPlayerState, bool* StateWasChanged);
	void IsTeamkilledVictim(const struct FUniqueNetIdRepl& Victim, bool* NewParam);
	void AddTeamkilledVictim(const class APlayerState*& VictimPlayerState);
	void RemoveTeamkilledVictim(const struct FUniqueNetIdRepl& Victim, bool* NoTeamKilledVictim);
	void IsWorldSpectatorYourTeamkiller(class ABP_WorldSpectator_C* WorldSpectator, bool* Output);
	void StoreMyKiller(class UBP_PCComponent_ADM_PlayerBounty_C* KillerComponent);
	void Team_member_killed(const class APlayerState* VictimPlayerState, bool* StateWasChanged);
	void Player_has_enough_kills_for_threat(bool* StateWasChanged);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BP_PCComponent_ADM_PlayerBounty_C">();
	}
	static class UBP_PCComponent_ADM_PlayerBounty_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UBP_PCComponent_ADM_PlayerBounty_C>();
	}
};
static_assert(alignof(UBP_PCComponent_ADM_PlayerBounty_C) == 0x000008, "Wrong alignment on UBP_PCComponent_ADM_PlayerBounty_C");
static_assert(sizeof(UBP_PCComponent_ADM_PlayerBounty_C) == 0x0001F8, "Wrong size on UBP_PCComponent_ADM_PlayerBounty_C");
static_assert(offsetof(UBP_PCComponent_ADM_PlayerBounty_C, UberGraphFrame_BP_PCComponent_ADM_PlayerBounty_C) == 0x0000E8, "Member 'UBP_PCComponent_ADM_PlayerBounty_C::UberGraphFrame_BP_PCComponent_ADM_PlayerBounty_C' has a wrong offset!");
static_assert(offsetof(UBP_PCComponent_ADM_PlayerBounty_C, ThreatActiveMarkerTime) == 0x0000F0, "Member 'UBP_PCComponent_ADM_PlayerBounty_C::ThreatActiveMarkerTime' has a wrong offset!");
static_assert(offsetof(UBP_PCComponent_ADM_PlayerBounty_C, ThreatFadedMarkerTime) == 0x0000F4, "Member 'UBP_PCComponent_ADM_PlayerBounty_C::ThreatFadedMarkerTime' has a wrong offset!");
static_assert(offsetof(UBP_PCComponent_ADM_PlayerBounty_C, Kill_Count) == 0x0000F8, "Member 'UBP_PCComponent_ADM_PlayerBounty_C::Kill_Count' has a wrong offset!");
static_assert(offsetof(UBP_PCComponent_ADM_PlayerBounty_C, TeamKillerActiveMarkerTime) == 0x0000FC, "Member 'UBP_PCComponent_ADM_PlayerBounty_C::TeamKillerActiveMarkerTime' has a wrong offset!");
static_assert(offsetof(UBP_PCComponent_ADM_PlayerBounty_C, TeamKillerFadedMarkerTime) == 0x000100, "Member 'UBP_PCComponent_ADM_PlayerBounty_C::TeamKillerFadedMarkerTime' has a wrong offset!");
static_assert(offsetof(UBP_PCComponent_ADM_PlayerBounty_C, Active_Bounty_Marker_Size) == 0x000104, "Member 'UBP_PCComponent_ADM_PlayerBounty_C::Active_Bounty_Marker_Size' has a wrong offset!");
static_assert(offsetof(UBP_PCComponent_ADM_PlayerBounty_C, Active_Bounty_Marker_Tint) == 0x00010C, "Member 'UBP_PCComponent_ADM_PlayerBounty_C::Active_Bounty_Marker_Tint' has a wrong offset!");
static_assert(offsetof(UBP_PCComponent_ADM_PlayerBounty_C, Faded_Bounty_Marker_Size) == 0x00011C, "Member 'UBP_PCComponent_ADM_PlayerBounty_C::Faded_Bounty_Marker_Size' has a wrong offset!");
static_assert(offsetof(UBP_PCComponent_ADM_PlayerBounty_C, Faded_Bounty_Marker_Tint) == 0x000124, "Member 'UBP_PCComponent_ADM_PlayerBounty_C::Faded_Bounty_Marker_Tint' has a wrong offset!");
static_assert(offsetof(UBP_PCComponent_ADM_PlayerBounty_C, Already_Bound_to_Character_Dispatcher) == 0x000134, "Member 'UBP_PCComponent_ADM_PlayerBounty_C::Already_Bound_to_Character_Dispatcher' has a wrong offset!");
static_assert(offsetof(UBP_PCComponent_ADM_PlayerBounty_C, Tracked_Killers) == 0x000138, "Member 'UBP_PCComponent_ADM_PlayerBounty_C::Tracked_Killers' has a wrong offset!");
static_assert(offsetof(UBP_PCComponent_ADM_PlayerBounty_C, Bounty_Markers) == 0x000188, "Member 'UBP_PCComponent_ADM_PlayerBounty_C::Bounty_Markers' has a wrong offset!");
static_assert(offsetof(UBP_PCComponent_ADM_PlayerBounty_C, IsThreat) == 0x000198, "Member 'UBP_PCComponent_ADM_PlayerBounty_C::IsThreat' has a wrong offset!");
static_assert(offsetof(UBP_PCComponent_ADM_PlayerBounty_C, IsTeamKiller) == 0x000199, "Member 'UBP_PCComponent_ADM_PlayerBounty_C::IsTeamKiller' has a wrong offset!");
static_assert(offsetof(UBP_PCComponent_ADM_PlayerBounty_C, TeamKillersTimer) == 0x0001A0, "Member 'UBP_PCComponent_ADM_PlayerBounty_C::TeamKillersTimer' has a wrong offset!");
static_assert(offsetof(UBP_PCComponent_ADM_PlayerBounty_C, ThreatsTimer) == 0x0001A8, "Member 'UBP_PCComponent_ADM_PlayerBounty_C::ThreatsTimer' has a wrong offset!");
static_assert(offsetof(UBP_PCComponent_ADM_PlayerBounty_C, TeamkilledUniqueNetIds) == 0x0001B0, "Member 'UBP_PCComponent_ADM_PlayerBounty_C::TeamkilledUniqueNetIds' has a wrong offset!");
static_assert(offsetof(UBP_PCComponent_ADM_PlayerBounty_C, MyKiller) == 0x0001C0, "Member 'UBP_PCComponent_ADM_PlayerBounty_C::MyKiller' has a wrong offset!");
static_assert(offsetof(UBP_PCComponent_ADM_PlayerBounty_C, MyKillerUniqueNetId) == 0x0001C8, "Member 'UBP_PCComponent_ADM_PlayerBounty_C::MyKillerUniqueNetId' has a wrong offset!");
static_assert(offsetof(UBP_PCComponent_ADM_PlayerBounty_C, Teamkilled) == 0x0001F0, "Member 'UBP_PCComponent_ADM_PlayerBounty_C::Teamkilled' has a wrong offset!");

}

