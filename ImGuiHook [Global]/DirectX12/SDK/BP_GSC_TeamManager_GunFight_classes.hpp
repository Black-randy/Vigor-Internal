#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_GSC_TeamManager_GunFight

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "BP_GSC_TeamManager_classes.hpp"


namespace SDK
{

// BlueprintGeneratedClass BP_GSC_TeamManager_GunFight.BP_GSC_TeamManager_GunFight_C
// 0x0038 (0x0178 - 0x0140)
class UBP_GSC_TeamManager_GunFight_C final : public UBP_GSC_TeamManager_C
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame_BP_GSC_TeamManager_GunFight_C;      // 0x0140(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	TArray<class UPlayerGroupInfo*>               Attacker_Player_Slots;                             // 0x0148(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	TArray<class UPlayerGroupInfo*>               Defender_Player_Slots;                             // 0x0158(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	int32                                         Free_Slots_Attackers;                              // 0x0168(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Free_Slots_Defenders;                              // 0x016C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         TeamSize;                                          // 0x0170(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

public:
	void ExecuteUbergraph_BP_GSC_TeamManager_GunFight(int32 EntryPoint);
	void SetupTeams_Server();
	void Assign_Sides_to_Teams(int32 Round);
	void ReceiveBeginPlay();
	void Find_Team_for_Player(class ABP_PlayerController_Teams_C* Player, class UBP_GSC_Team_C** Team);
	void Assign_Groups_To_Sides();
	void Get_Player_Count_In_Groups(TArray<class UPlayerGroupInfo*>& Groups, int32* Player_Count);
	void Get_Attacker_Team(class UBP_GSC_Team_C** Team);
	void Get_Defender_Team(class UBP_GSC_Team_C** Team);
	void Get_Number_Of_Slots_Left_In_Side(class UPlayerGroupInfo* Player_Group, int32* Attackers, int32* Defenders);
	void Remove_One_Slot_From_Group(TArray<class UPlayerGroupInfo*>& Groups, class UPlayerGroupInfo* Player_Slot);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BP_GSC_TeamManager_GunFight_C">();
	}
	static class UBP_GSC_TeamManager_GunFight_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UBP_GSC_TeamManager_GunFight_C>();
	}
};
static_assert(alignof(UBP_GSC_TeamManager_GunFight_C) == 0x000008, "Wrong alignment on UBP_GSC_TeamManager_GunFight_C");
static_assert(sizeof(UBP_GSC_TeamManager_GunFight_C) == 0x000178, "Wrong size on UBP_GSC_TeamManager_GunFight_C");
static_assert(offsetof(UBP_GSC_TeamManager_GunFight_C, UberGraphFrame_BP_GSC_TeamManager_GunFight_C) == 0x000140, "Member 'UBP_GSC_TeamManager_GunFight_C::UberGraphFrame_BP_GSC_TeamManager_GunFight_C' has a wrong offset!");
static_assert(offsetof(UBP_GSC_TeamManager_GunFight_C, Attacker_Player_Slots) == 0x000148, "Member 'UBP_GSC_TeamManager_GunFight_C::Attacker_Player_Slots' has a wrong offset!");
static_assert(offsetof(UBP_GSC_TeamManager_GunFight_C, Defender_Player_Slots) == 0x000158, "Member 'UBP_GSC_TeamManager_GunFight_C::Defender_Player_Slots' has a wrong offset!");
static_assert(offsetof(UBP_GSC_TeamManager_GunFight_C, Free_Slots_Attackers) == 0x000168, "Member 'UBP_GSC_TeamManager_GunFight_C::Free_Slots_Attackers' has a wrong offset!");
static_assert(offsetof(UBP_GSC_TeamManager_GunFight_C, Free_Slots_Defenders) == 0x00016C, "Member 'UBP_GSC_TeamManager_GunFight_C::Free_Slots_Defenders' has a wrong offset!");
static_assert(offsetof(UBP_GSC_TeamManager_GunFight_C, TeamSize) == 0x000170, "Member 'UBP_GSC_TeamManager_GunFight_C::TeamSize' has a wrong offset!");

}

