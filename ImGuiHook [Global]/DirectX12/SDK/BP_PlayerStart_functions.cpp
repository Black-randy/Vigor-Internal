#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_PlayerStart

#include "Basic.hpp"

#include "BP_PlayerStart_classes.hpp"
#include "BP_PlayerStart_parameters.hpp"


namespace SDK
{

// Function BP_PlayerStart.BP_PlayerStart_C.SetUseTime
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// int32                                   PlayerId                                               (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_PlayerStart_C::SetUseTime(const int32& PlayerId)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PlayerStart_C", "SetUseTime");

	Params::BP_PlayerStart_C_SetUseTime Parms{};

	Parms.PlayerId = PlayerId;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_PlayerStart.BP_PlayerStart_C.GetUsageData
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// int32                                   PlayerId                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   InAmountOfTime                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   Usage                                                  (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_PlayerStart_C::GetUsageData(int32 PlayerId, float InAmountOfTime, float* Usage)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PlayerStart_C", "GetUsageData");

	Params::BP_PlayerStart_C_GetUsageData Parms{};

	Parms.PlayerId = PlayerId;
	Parms.InAmountOfTime = InAmountOfTime;

	UObject::ProcessEvent(Func, &Parms);

	if (Usage != nullptr)
		*Usage = Parms.Usage;
}


// Function BP_PlayerStart.BP_PlayerStart_C.DEBUG_ViewBlockedDirections
// (Public, BlueprintCallable, BlueprintEvent)

void ABP_PlayerStart_C::DEBUG_ViewBlockedDirections()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PlayerStart_C", "DEBUG_ViewBlockedDirections");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_PlayerStart.BP_PlayerStart_C.CheckIfTheDirectionIsBlocked
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FVector                          Direction                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   Multiplier                                             (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_PlayerStart_C::CheckIfTheDirectionIsBlocked(const struct FVector& Direction, float* Multiplier)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PlayerStart_C", "CheckIfTheDirectionIsBlocked");

	Params::BP_PlayerStart_C_CheckIfTheDirectionIsBlocked Parms{};

	Parms.Direction = std::move(Direction);

	UObject::ProcessEvent(Func, &Parms);

	if (Multiplier != nullptr)
		*Multiplier = Parms.Multiplier;
}

}

