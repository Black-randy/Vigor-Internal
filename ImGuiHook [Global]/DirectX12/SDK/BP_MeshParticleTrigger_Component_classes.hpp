#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_MeshParticleTrigger_Component

#include "Basic.hpp"

#include "Flame_structs.hpp"
#include "Engine_structs.hpp"
#include "Engine_classes.hpp"
#include "E_ParticleTriggerConditions_structs.hpp"
#include "S_ParticleTriggerEffectArray_structs.hpp"
#include "E_Actions_structs.hpp"


namespace SDK
{

// BlueprintGeneratedClass BP_MeshParticleTrigger_Component.BP_MeshParticleTrigger_Component_C
// 0x00C0 (0x0170 - 0x00B0)
class UBP_MeshParticleTrigger_Component_C final : public UActorComponent
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x00B0(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	TMap<class FName, class UParticleSystemComponent*> UsedMeshParticles;                                 // 0x00B8(0x0050)(Edit, BlueprintVisible, DisableEditOnInstance, ContainsInstancedReference)
	TMap<E_ParticleTriggerConditions, struct FS_ParticleTriggerEffectArray> TriggerToUsedParticles;                            // 0x0108(0x0050)(Edit, BlueprintVisible, DisableEditOnInstance, ContainsInstancedReference)
	bool                                          IsMannequin_NotHumanChar_;                         // 0x0158(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_159[0x3];                                      // 0x0159(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         LastParticleTriggerTime;                           // 0x015C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsOnWeapon;                                        // 0x0160(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          WeaponHasAnySpecialSkins;                          // 0x0161(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          DelayedSkinCheckAlreadyHappened;                   // 0x0162(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_163[0x5];                                      // 0x0163(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	class AMannequin*                             Mannequin;                                         // 0x0168(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

public:
	void ExecuteUbergraph_BP_MeshParticleTrigger_Component(int32 EntryPoint);
	void ReCheckIfGunLoaded();
	void OnSkinChanged(TSubclassOf<class AItemSkin> NewSkinClass);
	void ReceiveBeginPlay();
	void OnScoredKill();
	void TriggerMeshSpecificParticle(E_ParticleTriggerConditions TriggerType, bool HandleReplicationYourself);
	void Multicast_Replicate_MeshParticles(const E_ParticleTriggerConditions TriggerType);
	void Server_Replicate_MeshParticles(const E_ParticleTriggerConditions TriggerType);
	void OnDied_TriggerParticle(class ABP_Character_C* DyingCharacter, float DamageAmount, EDamageType DamageType, class AHumanCharacter* InstigatingCharacter, class UClass* InstigatingItem, const struct FHitResult& HitResult);
	void TriggerMeshParticles(const E_ParticleTriggerConditions TriggerType);
	void UnbindAllParticleEffects();
	void OnDamageTakenParticleEffect(float DamageAmount, EDamageType DamageType, const class AHumanCharacter* InstigatingActor, class UClass* InstigatingItemClass, const struct FHitResultSimplified& HitOptimised);
	void UpdateAnimsAfterCustomizationChanges();
	void PutMapToRightHand();
	void ClearRightHand();
	void PutKitchenTimerToRightHand();
	void AnimHitReaction(class FName BoneName, const struct FVector& HitNormal, float Impact);
	void AnimInteraction(E_Actions Action, bool Interrupt);
	void CheckForMeshSpecificParticleEffects();
	void Add_Tracked_Triggers(const E_ParticleTriggerConditions& ParticleTrigger, class FName SocketName, TArray<struct FParticleSysParam>& NamedParameters, class USoundBase* Accompanying_Sound, const struct FVector& EffectTimings);
	void CheckForWeaponMeshLoaded(bool* MeshLoaded);
	void CheckForWeaponSkinSpecificParticleEffects(class UClass* WeaponSkin);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BP_MeshParticleTrigger_Component_C">();
	}
	static class UBP_MeshParticleTrigger_Component_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UBP_MeshParticleTrigger_Component_C>();
	}
};
static_assert(alignof(UBP_MeshParticleTrigger_Component_C) == 0x000008, "Wrong alignment on UBP_MeshParticleTrigger_Component_C");
static_assert(sizeof(UBP_MeshParticleTrigger_Component_C) == 0x000170, "Wrong size on UBP_MeshParticleTrigger_Component_C");
static_assert(offsetof(UBP_MeshParticleTrigger_Component_C, UberGraphFrame) == 0x0000B0, "Member 'UBP_MeshParticleTrigger_Component_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(UBP_MeshParticleTrigger_Component_C, UsedMeshParticles) == 0x0000B8, "Member 'UBP_MeshParticleTrigger_Component_C::UsedMeshParticles' has a wrong offset!");
static_assert(offsetof(UBP_MeshParticleTrigger_Component_C, TriggerToUsedParticles) == 0x000108, "Member 'UBP_MeshParticleTrigger_Component_C::TriggerToUsedParticles' has a wrong offset!");
static_assert(offsetof(UBP_MeshParticleTrigger_Component_C, IsMannequin_NotHumanChar_) == 0x000158, "Member 'UBP_MeshParticleTrigger_Component_C::IsMannequin_NotHumanChar_' has a wrong offset!");
static_assert(offsetof(UBP_MeshParticleTrigger_Component_C, LastParticleTriggerTime) == 0x00015C, "Member 'UBP_MeshParticleTrigger_Component_C::LastParticleTriggerTime' has a wrong offset!");
static_assert(offsetof(UBP_MeshParticleTrigger_Component_C, IsOnWeapon) == 0x000160, "Member 'UBP_MeshParticleTrigger_Component_C::IsOnWeapon' has a wrong offset!");
static_assert(offsetof(UBP_MeshParticleTrigger_Component_C, WeaponHasAnySpecialSkins) == 0x000161, "Member 'UBP_MeshParticleTrigger_Component_C::WeaponHasAnySpecialSkins' has a wrong offset!");
static_assert(offsetof(UBP_MeshParticleTrigger_Component_C, DelayedSkinCheckAlreadyHappened) == 0x000162, "Member 'UBP_MeshParticleTrigger_Component_C::DelayedSkinCheckAlreadyHappened' has a wrong offset!");
static_assert(offsetof(UBP_MeshParticleTrigger_Component_C, Mannequin) == 0x000168, "Member 'UBP_MeshParticleTrigger_Component_C::Mannequin' has a wrong offset!");

}

