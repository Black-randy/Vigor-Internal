#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_PlayerController_Matches

#include "Basic.hpp"

#include "CoreUObject_structs.hpp"
#include "Flame_structs.hpp"
#include "BP_PlayerController_Script_classes.hpp"
#include "Engine_structs.hpp"
#include "E_MatchPhase_structs.hpp"


namespace SDK
{

// BlueprintGeneratedClass BP_PlayerController_Matches.BP_PlayerController_Matches_C
// 0x0090 (0x0D90 - 0x0D00)
class ABP_PlayerController_Matches_C : public ABP_PlayerController_Script_C
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame_BP_PlayerController_Matches_C;      // 0x0D00(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class UBP_LobbyComponent_C*                   BP_LobbyComponent;                                 // 0x0D08(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UBP_PingingSystemComponent_C*           BP_PingingSystemComponent;                         // 0x0D10(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UBP_POIManagerComponent_C*              BP_POIManagerComponent;                            // 0x0D18(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UBP_UserInfoComponent_C*                BP_UserInfoComponent;                              // 0x0D20(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UBP_Lockpicking_C*                      BP_Lockpicking;                                    // 0x0D28(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class FString                                 Group_ID;                                          // 0x0D30(0x0010)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, HasGetValueTypeHash)
	bool                                          Has_Match_Started;                                 // 0x0D40(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          Delayed_Match_Start_is_in_Effect;                  // 0x0D41(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_D42[0x2];                                      // 0x0D42(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Delayed_Match_Start_Time_Remaining;                // 0x0D44(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          ForcedBlackScreenAlreadyHappened;                  // 0x0D48(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_D49[0x7];                                      // 0x0D49(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UFlameWidget*                           ForcedBlackScreen;                                 // 0x0D50(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UUI_LevelMapWhileWaitingToStartMatch_C* ForcedLevelMap;                                    // 0x0D58(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                Match_Start_Camera_Offset;                         // 0x0D60(0x000C)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                Match_Start_Camera_Position;                       // 0x0D6C(0x000C)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Match_Results_Sent;                                // 0x0D78(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_D79[0x3];                                      // 0x0D79(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Ping_Aggregate;                                    // 0x0D7C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Ping_Samples;                                      // 0x0D80(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Ping_sampling_period;                              // 0x0D84(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         AirdropPickup;                                     // 0x0D88(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

public:
	void ExecuteUbergraph_BP_PlayerController_Matches(int32 EntryPoint);
	void Sample_Ping();
	void First_Radiation_Damage_Taken();
	void Delayed_Match_Start_Anim_Step();
	void Delayed_Match_Start_Anim_Setup();
	void MovePawnToPlayerStartMulticasted(class AActor* PlayerStart);
	void Remove_Forced_Black_Screen();
	void Add_Forced_Black_Screen();
	void Remove_Forced_Level_Map();
	void Add_Forced_Level_Map();
	void Delayed_Match_Start_Countdown();
	void Begin_Delayed_Match_Start(int32 Delayed_Match_Start_Time_Remaning);
	void LeaveSession(class FName MapToReturnTo_0);
	void MakeTeamMateMarkerOrRemove(class FName Tag, const struct FS_CustomMapMarker& Marker, bool AutoGenerateTag, bool AddToMap, bool AddToCompass, bool Remove);
	void Initialize_Group_ID();
	void Match_Has_Started();
	void ReceiveBeginPlay();
	void Is_Player_Ready_for_Analytics(bool* Is_Client_Ready);
	void MovePawnToPlayerStart(class AActor* PlayerStart);
	void MarkTeamMember(class AHumanCharacter* TeamMemberCharacter);
	void FindTeamMember(class ABP_Character_C** OwningCharacter);
	void Is_Player_Last_Alive_In_Match(bool* Is_Last_In_Match);
	void Update_Ping_Average();
	void Get_Ping_Average(float* Average_Ping);
	void GetLobbyStateAndTimes(bool* Valid, bool* HasMatchStarted, bool* DelayedMatchStartIsInEffect, int32* RemainingTimeToEncounter, int32* TotalTimeToEncounter);
	void GetGroupID(bool* Valid, class FString* GroupId);

	EGameScenario GetGameScenario() const;

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BP_PlayerController_Matches_C">();
	}
	static class ABP_PlayerController_Matches_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<ABP_PlayerController_Matches_C>();
	}
};
static_assert(alignof(ABP_PlayerController_Matches_C) == 0x000008, "Wrong alignment on ABP_PlayerController_Matches_C");
static_assert(sizeof(ABP_PlayerController_Matches_C) == 0x000D90, "Wrong size on ABP_PlayerController_Matches_C");
static_assert(offsetof(ABP_PlayerController_Matches_C, UberGraphFrame_BP_PlayerController_Matches_C) == 0x000D00, "Member 'ABP_PlayerController_Matches_C::UberGraphFrame_BP_PlayerController_Matches_C' has a wrong offset!");
static_assert(offsetof(ABP_PlayerController_Matches_C, BP_LobbyComponent) == 0x000D08, "Member 'ABP_PlayerController_Matches_C::BP_LobbyComponent' has a wrong offset!");
static_assert(offsetof(ABP_PlayerController_Matches_C, BP_PingingSystemComponent) == 0x000D10, "Member 'ABP_PlayerController_Matches_C::BP_PingingSystemComponent' has a wrong offset!");
static_assert(offsetof(ABP_PlayerController_Matches_C, BP_POIManagerComponent) == 0x000D18, "Member 'ABP_PlayerController_Matches_C::BP_POIManagerComponent' has a wrong offset!");
static_assert(offsetof(ABP_PlayerController_Matches_C, BP_UserInfoComponent) == 0x000D20, "Member 'ABP_PlayerController_Matches_C::BP_UserInfoComponent' has a wrong offset!");
static_assert(offsetof(ABP_PlayerController_Matches_C, BP_Lockpicking) == 0x000D28, "Member 'ABP_PlayerController_Matches_C::BP_Lockpicking' has a wrong offset!");
static_assert(offsetof(ABP_PlayerController_Matches_C, Group_ID) == 0x000D30, "Member 'ABP_PlayerController_Matches_C::Group_ID' has a wrong offset!");
static_assert(offsetof(ABP_PlayerController_Matches_C, Has_Match_Started) == 0x000D40, "Member 'ABP_PlayerController_Matches_C::Has_Match_Started' has a wrong offset!");
static_assert(offsetof(ABP_PlayerController_Matches_C, Delayed_Match_Start_is_in_Effect) == 0x000D41, "Member 'ABP_PlayerController_Matches_C::Delayed_Match_Start_is_in_Effect' has a wrong offset!");
static_assert(offsetof(ABP_PlayerController_Matches_C, Delayed_Match_Start_Time_Remaining) == 0x000D44, "Member 'ABP_PlayerController_Matches_C::Delayed_Match_Start_Time_Remaining' has a wrong offset!");
static_assert(offsetof(ABP_PlayerController_Matches_C, ForcedBlackScreenAlreadyHappened) == 0x000D48, "Member 'ABP_PlayerController_Matches_C::ForcedBlackScreenAlreadyHappened' has a wrong offset!");
static_assert(offsetof(ABP_PlayerController_Matches_C, ForcedBlackScreen) == 0x000D50, "Member 'ABP_PlayerController_Matches_C::ForcedBlackScreen' has a wrong offset!");
static_assert(offsetof(ABP_PlayerController_Matches_C, ForcedLevelMap) == 0x000D58, "Member 'ABP_PlayerController_Matches_C::ForcedLevelMap' has a wrong offset!");
static_assert(offsetof(ABP_PlayerController_Matches_C, Match_Start_Camera_Offset) == 0x000D60, "Member 'ABP_PlayerController_Matches_C::Match_Start_Camera_Offset' has a wrong offset!");
static_assert(offsetof(ABP_PlayerController_Matches_C, Match_Start_Camera_Position) == 0x000D6C, "Member 'ABP_PlayerController_Matches_C::Match_Start_Camera_Position' has a wrong offset!");
static_assert(offsetof(ABP_PlayerController_Matches_C, Match_Results_Sent) == 0x000D78, "Member 'ABP_PlayerController_Matches_C::Match_Results_Sent' has a wrong offset!");
static_assert(offsetof(ABP_PlayerController_Matches_C, Ping_Aggregate) == 0x000D7C, "Member 'ABP_PlayerController_Matches_C::Ping_Aggregate' has a wrong offset!");
static_assert(offsetof(ABP_PlayerController_Matches_C, Ping_Samples) == 0x000D80, "Member 'ABP_PlayerController_Matches_C::Ping_Samples' has a wrong offset!");
static_assert(offsetof(ABP_PlayerController_Matches_C, Ping_sampling_period) == 0x000D84, "Member 'ABP_PlayerController_Matches_C::Ping_sampling_period' has a wrong offset!");
static_assert(offsetof(ABP_PlayerController_Matches_C, AirdropPickup) == 0x000D88, "Member 'ABP_PlayerController_Matches_C::AirdropPickup' has a wrong offset!");

}

