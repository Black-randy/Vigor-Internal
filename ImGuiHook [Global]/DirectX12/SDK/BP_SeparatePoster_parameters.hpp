#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_SeparatePoster

#include "Basic.hpp"

#include "FlameUI_structs.hpp"
#include "CoreUObject_structs.hpp"
#include "Engine_structs.hpp"
#include "PhysicsCore_structs.hpp"


namespace SDK::Params
{

// Function BP_SeparatePoster.BP_SeparatePoster_C.PosterTexturesUpdated__DelegateSignature
// 0x0008 (0x0008 - 0x0000)
struct BP_SeparatePoster_C_PosterTexturesUpdated__DelegateSignature final
{
public:
	class ABP_SeparatePoster_C*                   Poster;                                            // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_SeparatePoster_C_PosterTexturesUpdated__DelegateSignature) == 0x000008, "Wrong alignment on BP_SeparatePoster_C_PosterTexturesUpdated__DelegateSignature");
static_assert(sizeof(BP_SeparatePoster_C_PosterTexturesUpdated__DelegateSignature) == 0x000008, "Wrong size on BP_SeparatePoster_C_PosterTexturesUpdated__DelegateSignature");
static_assert(offsetof(BP_SeparatePoster_C_PosterTexturesUpdated__DelegateSignature, Poster) == 0x000000, "Member 'BP_SeparatePoster_C_PosterTexturesUpdated__DelegateSignature::Poster' has a wrong offset!");

// Function BP_SeparatePoster.BP_SeparatePoster_C.ExecuteUbergraph_BP_SeparatePoster
// 0x00D8 (0x00D8 - 0x0000)
struct BP_SeparatePoster_C_ExecuteUbergraph_BP_SeparatePoster final
{
public:
	int32                                         EntryPoint;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0004(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	TSoftObjectPtr<class UStaticMesh>             CallFunc_Conv_ObjectToSoftObjectReference_ReturnValue; // 0x0008(0x0028)(UObjectWrapper, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue_1;                    // 0x0030(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue_2;                    // 0x0031(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_32[0x6];                                       // 0x0032(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 CallFunc_GetProjectDirectory_ReturnValue;          // 0x0038(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	bool                                          CallFunc_SetStaticMesh_ReturnValue;                // 0x0048(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_49[0x7];                                       // 0x0049(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UInteractionItemComponent*              K2Node_ComponentBoundEvent_Sender;                 // 0x0050(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 K2Node_ComponentBoundEvent_Interacting_Actor;      // 0x0058(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AHumanPlayerController*                 CallFunc_GetFlameController_ReturnValue;           // 0x0060(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UUI_SeparatePosterMenu_C*               CallFunc_Create_ReturnValue;                       // 0x0068(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue_3;                    // 0x0070(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue_4;                    // 0x0071(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_72[0x6];                                       // 0x0072(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class UTexture*                               CallFunc_K2_GetTextureParameterValue_ReturnValue;  // 0x0078(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UTextureRenderTarget2D*                 K2Node_DynamicCast_AsTexture_Render_Target_2D;     // 0x0080(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0088(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_EqualEqual_IntInt_ReturnValue;            // 0x0089(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_8A[0x6];                                       // 0x008A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	TSoftObjectPtr<class UMaterialInterface>      CallFunc_Map_Find_Value;                           // 0x0090(0x0028)(HasGetValueTypeHash)
	bool                                          CallFunc_Map_Find_ReturnValue;                     // 0x00B8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue_5;                    // 0x00B9(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_BA[0x6];                                       // 0x00BA(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class UObject*                                CallFunc_LoadAsset_Blocking_ReturnValue;           // 0x00C0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UMaterialInterface*                     K2Node_DynamicCast_AsMaterial_Interface;           // 0x00C8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess_1;                     // 0x00D0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_SwitchInteger_CmpSuccess;                   // 0x00D1(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_SeparatePoster_C_ExecuteUbergraph_BP_SeparatePoster) == 0x000008, "Wrong alignment on BP_SeparatePoster_C_ExecuteUbergraph_BP_SeparatePoster");
static_assert(sizeof(BP_SeparatePoster_C_ExecuteUbergraph_BP_SeparatePoster) == 0x0000D8, "Wrong size on BP_SeparatePoster_C_ExecuteUbergraph_BP_SeparatePoster");
static_assert(offsetof(BP_SeparatePoster_C_ExecuteUbergraph_BP_SeparatePoster, EntryPoint) == 0x000000, "Member 'BP_SeparatePoster_C_ExecuteUbergraph_BP_SeparatePoster::EntryPoint' has a wrong offset!");
static_assert(offsetof(BP_SeparatePoster_C_ExecuteUbergraph_BP_SeparatePoster, CallFunc_IsValid_ReturnValue) == 0x000004, "Member 'BP_SeparatePoster_C_ExecuteUbergraph_BP_SeparatePoster::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_SeparatePoster_C_ExecuteUbergraph_BP_SeparatePoster, CallFunc_Conv_ObjectToSoftObjectReference_ReturnValue) == 0x000008, "Member 'BP_SeparatePoster_C_ExecuteUbergraph_BP_SeparatePoster::CallFunc_Conv_ObjectToSoftObjectReference_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_SeparatePoster_C_ExecuteUbergraph_BP_SeparatePoster, CallFunc_IsValid_ReturnValue_1) == 0x000030, "Member 'BP_SeparatePoster_C_ExecuteUbergraph_BP_SeparatePoster::CallFunc_IsValid_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_SeparatePoster_C_ExecuteUbergraph_BP_SeparatePoster, CallFunc_IsValid_ReturnValue_2) == 0x000031, "Member 'BP_SeparatePoster_C_ExecuteUbergraph_BP_SeparatePoster::CallFunc_IsValid_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BP_SeparatePoster_C_ExecuteUbergraph_BP_SeparatePoster, CallFunc_GetProjectDirectory_ReturnValue) == 0x000038, "Member 'BP_SeparatePoster_C_ExecuteUbergraph_BP_SeparatePoster::CallFunc_GetProjectDirectory_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_SeparatePoster_C_ExecuteUbergraph_BP_SeparatePoster, CallFunc_SetStaticMesh_ReturnValue) == 0x000048, "Member 'BP_SeparatePoster_C_ExecuteUbergraph_BP_SeparatePoster::CallFunc_SetStaticMesh_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_SeparatePoster_C_ExecuteUbergraph_BP_SeparatePoster, K2Node_ComponentBoundEvent_Sender) == 0x000050, "Member 'BP_SeparatePoster_C_ExecuteUbergraph_BP_SeparatePoster::K2Node_ComponentBoundEvent_Sender' has a wrong offset!");
static_assert(offsetof(BP_SeparatePoster_C_ExecuteUbergraph_BP_SeparatePoster, K2Node_ComponentBoundEvent_Interacting_Actor) == 0x000058, "Member 'BP_SeparatePoster_C_ExecuteUbergraph_BP_SeparatePoster::K2Node_ComponentBoundEvent_Interacting_Actor' has a wrong offset!");
static_assert(offsetof(BP_SeparatePoster_C_ExecuteUbergraph_BP_SeparatePoster, CallFunc_GetFlameController_ReturnValue) == 0x000060, "Member 'BP_SeparatePoster_C_ExecuteUbergraph_BP_SeparatePoster::CallFunc_GetFlameController_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_SeparatePoster_C_ExecuteUbergraph_BP_SeparatePoster, CallFunc_Create_ReturnValue) == 0x000068, "Member 'BP_SeparatePoster_C_ExecuteUbergraph_BP_SeparatePoster::CallFunc_Create_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_SeparatePoster_C_ExecuteUbergraph_BP_SeparatePoster, CallFunc_IsValid_ReturnValue_3) == 0x000070, "Member 'BP_SeparatePoster_C_ExecuteUbergraph_BP_SeparatePoster::CallFunc_IsValid_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(BP_SeparatePoster_C_ExecuteUbergraph_BP_SeparatePoster, CallFunc_IsValid_ReturnValue_4) == 0x000071, "Member 'BP_SeparatePoster_C_ExecuteUbergraph_BP_SeparatePoster::CallFunc_IsValid_ReturnValue_4' has a wrong offset!");
static_assert(offsetof(BP_SeparatePoster_C_ExecuteUbergraph_BP_SeparatePoster, CallFunc_K2_GetTextureParameterValue_ReturnValue) == 0x000078, "Member 'BP_SeparatePoster_C_ExecuteUbergraph_BP_SeparatePoster::CallFunc_K2_GetTextureParameterValue_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_SeparatePoster_C_ExecuteUbergraph_BP_SeparatePoster, K2Node_DynamicCast_AsTexture_Render_Target_2D) == 0x000080, "Member 'BP_SeparatePoster_C_ExecuteUbergraph_BP_SeparatePoster::K2Node_DynamicCast_AsTexture_Render_Target_2D' has a wrong offset!");
static_assert(offsetof(BP_SeparatePoster_C_ExecuteUbergraph_BP_SeparatePoster, K2Node_DynamicCast_bSuccess) == 0x000088, "Member 'BP_SeparatePoster_C_ExecuteUbergraph_BP_SeparatePoster::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(BP_SeparatePoster_C_ExecuteUbergraph_BP_SeparatePoster, CallFunc_EqualEqual_IntInt_ReturnValue) == 0x000089, "Member 'BP_SeparatePoster_C_ExecuteUbergraph_BP_SeparatePoster::CallFunc_EqualEqual_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_SeparatePoster_C_ExecuteUbergraph_BP_SeparatePoster, CallFunc_Map_Find_Value) == 0x000090, "Member 'BP_SeparatePoster_C_ExecuteUbergraph_BP_SeparatePoster::CallFunc_Map_Find_Value' has a wrong offset!");
static_assert(offsetof(BP_SeparatePoster_C_ExecuteUbergraph_BP_SeparatePoster, CallFunc_Map_Find_ReturnValue) == 0x0000B8, "Member 'BP_SeparatePoster_C_ExecuteUbergraph_BP_SeparatePoster::CallFunc_Map_Find_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_SeparatePoster_C_ExecuteUbergraph_BP_SeparatePoster, CallFunc_IsValid_ReturnValue_5) == 0x0000B9, "Member 'BP_SeparatePoster_C_ExecuteUbergraph_BP_SeparatePoster::CallFunc_IsValid_ReturnValue_5' has a wrong offset!");
static_assert(offsetof(BP_SeparatePoster_C_ExecuteUbergraph_BP_SeparatePoster, CallFunc_LoadAsset_Blocking_ReturnValue) == 0x0000C0, "Member 'BP_SeparatePoster_C_ExecuteUbergraph_BP_SeparatePoster::CallFunc_LoadAsset_Blocking_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_SeparatePoster_C_ExecuteUbergraph_BP_SeparatePoster, K2Node_DynamicCast_AsMaterial_Interface) == 0x0000C8, "Member 'BP_SeparatePoster_C_ExecuteUbergraph_BP_SeparatePoster::K2Node_DynamicCast_AsMaterial_Interface' has a wrong offset!");
static_assert(offsetof(BP_SeparatePoster_C_ExecuteUbergraph_BP_SeparatePoster, K2Node_DynamicCast_bSuccess_1) == 0x0000D0, "Member 'BP_SeparatePoster_C_ExecuteUbergraph_BP_SeparatePoster::K2Node_DynamicCast_bSuccess_1' has a wrong offset!");
static_assert(offsetof(BP_SeparatePoster_C_ExecuteUbergraph_BP_SeparatePoster, K2Node_SwitchInteger_CmpSuccess) == 0x0000D1, "Member 'BP_SeparatePoster_C_ExecuteUbergraph_BP_SeparatePoster::K2Node_SwitchInteger_CmpSuccess' has a wrong offset!");

// Function BP_SeparatePoster.BP_SeparatePoster_C.BndEvt__BP_InteractionItemComponent_K2Node_ComponentBoundEvent_0_Interaction Start On Client__DelegateSignature
// 0x0010 (0x0010 - 0x0000)
struct BP_SeparatePoster_C_BndEvt__BP_InteractionItemComponent_K2Node_ComponentBoundEvent_0_Interaction_Start_On_Client__DelegateSignature final
{
public:
	class UInteractionItemComponent*              Sender;                                            // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 Interacting_Actor;                                 // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_SeparatePoster_C_BndEvt__BP_InteractionItemComponent_K2Node_ComponentBoundEvent_0_Interaction_Start_On_Client__DelegateSignature) == 0x000008, "Wrong alignment on BP_SeparatePoster_C_BndEvt__BP_InteractionItemComponent_K2Node_ComponentBoundEvent_0_Interaction_Start_On_Client__DelegateSignature");
static_assert(sizeof(BP_SeparatePoster_C_BndEvt__BP_InteractionItemComponent_K2Node_ComponentBoundEvent_0_Interaction_Start_On_Client__DelegateSignature) == 0x000010, "Wrong size on BP_SeparatePoster_C_BndEvt__BP_InteractionItemComponent_K2Node_ComponentBoundEvent_0_Interaction_Start_On_Client__DelegateSignature");
static_assert(offsetof(BP_SeparatePoster_C_BndEvt__BP_InteractionItemComponent_K2Node_ComponentBoundEvent_0_Interaction_Start_On_Client__DelegateSignature, Sender) == 0x000000, "Member 'BP_SeparatePoster_C_BndEvt__BP_InteractionItemComponent_K2Node_ComponentBoundEvent_0_Interaction_Start_On_Client__DelegateSignature::Sender' has a wrong offset!");
static_assert(offsetof(BP_SeparatePoster_C_BndEvt__BP_InteractionItemComponent_K2Node_ComponentBoundEvent_0_Interaction_Start_On_Client__DelegateSignature, Interacting_Actor) == 0x000008, "Member 'BP_SeparatePoster_C_BndEvt__BP_InteractionItemComponent_K2Node_ComponentBoundEvent_0_Interaction_Start_On_Client__DelegateSignature::Interacting_Actor' has a wrong offset!");

// Function BP_SeparatePoster.BP_SeparatePoster_C.SetInitialVisibility
// 0x0002 (0x0002 - 0x0000)
struct BP_SeparatePoster_C_SetInitialVisibility final
{
public:
	bool                                          bHidden_0;                                         // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Not_PreBool_ReturnValue;                  // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_SeparatePoster_C_SetInitialVisibility) == 0x000001, "Wrong alignment on BP_SeparatePoster_C_SetInitialVisibility");
static_assert(sizeof(BP_SeparatePoster_C_SetInitialVisibility) == 0x000002, "Wrong size on BP_SeparatePoster_C_SetInitialVisibility");
static_assert(offsetof(BP_SeparatePoster_C_SetInitialVisibility, bHidden_0) == 0x000000, "Member 'BP_SeparatePoster_C_SetInitialVisibility::bHidden_0' has a wrong offset!");
static_assert(offsetof(BP_SeparatePoster_C_SetInitialVisibility, CallFunc_Not_PreBool_ReturnValue) == 0x000001, "Member 'BP_SeparatePoster_C_SetInitialVisibility::CallFunc_Not_PreBool_ReturnValue' has a wrong offset!");

// Function BP_SeparatePoster.BP_SeparatePoster_C.GetCameraPosition
// 0x0060 (0x0060 - 0x0000)
struct BP_SeparatePoster_C_GetCameraPosition final
{
public:
	struct FTransform                             ReturnValue;                                       // 0x0000(0x0030)(Parm, OutParm, ReturnParm, IsPlainOldData, NoDestructor)
	struct FTransform                             CallFunc_K2_GetComponentToWorld_ReturnValue;       // 0x0030(0x0030)(IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_SeparatePoster_C_GetCameraPosition) == 0x000010, "Wrong alignment on BP_SeparatePoster_C_GetCameraPosition");
static_assert(sizeof(BP_SeparatePoster_C_GetCameraPosition) == 0x000060, "Wrong size on BP_SeparatePoster_C_GetCameraPosition");
static_assert(offsetof(BP_SeparatePoster_C_GetCameraPosition, ReturnValue) == 0x000000, "Member 'BP_SeparatePoster_C_GetCameraPosition::ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_SeparatePoster_C_GetCameraPosition, CallFunc_K2_GetComponentToWorld_ReturnValue) == 0x000030, "Member 'BP_SeparatePoster_C_GetCameraPosition::CallFunc_K2_GetComponentToWorld_ReturnValue' has a wrong offset!");

// Function BP_SeparatePoster.BP_SeparatePoster_C.HighlightPoster
// 0x0010 (0x0010 - 0x0000)
struct BP_SeparatePoster_C_HighlightPoster final
{
public:
	bool                                          ShouldHighlight;                                   // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable;                                // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_2[0x2];                                        // 0x0002(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Temp_float_Variable;                               // 0x0004(0x0004)(ConstParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Temp_float_Variable_1;                             // 0x0008(0x0004)(ConstParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_Select_Default;                             // 0x000C(0x0004)(ConstParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_SeparatePoster_C_HighlightPoster) == 0x000004, "Wrong alignment on BP_SeparatePoster_C_HighlightPoster");
static_assert(sizeof(BP_SeparatePoster_C_HighlightPoster) == 0x000010, "Wrong size on BP_SeparatePoster_C_HighlightPoster");
static_assert(offsetof(BP_SeparatePoster_C_HighlightPoster, ShouldHighlight) == 0x000000, "Member 'BP_SeparatePoster_C_HighlightPoster::ShouldHighlight' has a wrong offset!");
static_assert(offsetof(BP_SeparatePoster_C_HighlightPoster, Temp_bool_Variable) == 0x000001, "Member 'BP_SeparatePoster_C_HighlightPoster::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(BP_SeparatePoster_C_HighlightPoster, Temp_float_Variable) == 0x000004, "Member 'BP_SeparatePoster_C_HighlightPoster::Temp_float_Variable' has a wrong offset!");
static_assert(offsetof(BP_SeparatePoster_C_HighlightPoster, Temp_float_Variable_1) == 0x000008, "Member 'BP_SeparatePoster_C_HighlightPoster::Temp_float_Variable_1' has a wrong offset!");
static_assert(offsetof(BP_SeparatePoster_C_HighlightPoster, K2Node_Select_Default) == 0x00000C, "Member 'BP_SeparatePoster_C_HighlightPoster::K2Node_Select_Default' has a wrong offset!");

// Function BP_SeparatePoster.BP_SeparatePoster_C.SetDynamicMaterial
// 0x0040 (0x0040 - 0x0000)
struct BP_SeparatePoster_C_SetDynamicMaterial final
{
public:
	class FName                                   OptionalName;                                      // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UMaterialInstanceDynamic*               ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable;                                // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UMaterialInterface*                     Temp_object_Variable;                              // 0x0018(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UMaterialInterface*                     Temp_object_Variable_1;                            // 0x0020(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_ObjectObject_ReturnValue;      // 0x0028(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_29[0x7];                                       // 0x0029(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UMaterialInterface*                     K2Node_Select_Default;                             // 0x0030(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UMaterialInstanceDynamic*               CallFunc_CreateDynamicMaterialInstance_ReturnValue; // 0x0038(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_SeparatePoster_C_SetDynamicMaterial) == 0x000008, "Wrong alignment on BP_SeparatePoster_C_SetDynamicMaterial");
static_assert(sizeof(BP_SeparatePoster_C_SetDynamicMaterial) == 0x000040, "Wrong size on BP_SeparatePoster_C_SetDynamicMaterial");
static_assert(offsetof(BP_SeparatePoster_C_SetDynamicMaterial, OptionalName) == 0x000000, "Member 'BP_SeparatePoster_C_SetDynamicMaterial::OptionalName' has a wrong offset!");
static_assert(offsetof(BP_SeparatePoster_C_SetDynamicMaterial, ReturnValue) == 0x000008, "Member 'BP_SeparatePoster_C_SetDynamicMaterial::ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_SeparatePoster_C_SetDynamicMaterial, Temp_bool_Variable) == 0x000010, "Member 'BP_SeparatePoster_C_SetDynamicMaterial::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(BP_SeparatePoster_C_SetDynamicMaterial, Temp_object_Variable) == 0x000018, "Member 'BP_SeparatePoster_C_SetDynamicMaterial::Temp_object_Variable' has a wrong offset!");
static_assert(offsetof(BP_SeparatePoster_C_SetDynamicMaterial, Temp_object_Variable_1) == 0x000020, "Member 'BP_SeparatePoster_C_SetDynamicMaterial::Temp_object_Variable_1' has a wrong offset!");
static_assert(offsetof(BP_SeparatePoster_C_SetDynamicMaterial, CallFunc_EqualEqual_ObjectObject_ReturnValue) == 0x000028, "Member 'BP_SeparatePoster_C_SetDynamicMaterial::CallFunc_EqualEqual_ObjectObject_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_SeparatePoster_C_SetDynamicMaterial, K2Node_Select_Default) == 0x000030, "Member 'BP_SeparatePoster_C_SetDynamicMaterial::K2Node_Select_Default' has a wrong offset!");
static_assert(offsetof(BP_SeparatePoster_C_SetDynamicMaterial, CallFunc_CreateDynamicMaterialInstance_ReturnValue) == 0x000038, "Member 'BP_SeparatePoster_C_SetDynamicMaterial::CallFunc_CreateDynamicMaterialInstance_ReturnValue' has a wrong offset!");

// Function BP_SeparatePoster.BP_SeparatePoster_C.SetCapturedRenderTexture
// 0x0010 (0x0010 - 0x0000)
struct BP_SeparatePoster_C_SetCapturedRenderTexture final
{
public:
	class UTextureRenderTarget2D*                 RenderTargetTexture;                               // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0008(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_SeparatePoster_C_SetCapturedRenderTexture) == 0x000008, "Wrong alignment on BP_SeparatePoster_C_SetCapturedRenderTexture");
static_assert(sizeof(BP_SeparatePoster_C_SetCapturedRenderTexture) == 0x000010, "Wrong size on BP_SeparatePoster_C_SetCapturedRenderTexture");
static_assert(offsetof(BP_SeparatePoster_C_SetCapturedRenderTexture, RenderTargetTexture) == 0x000000, "Member 'BP_SeparatePoster_C_SetCapturedRenderTexture::RenderTargetTexture' has a wrong offset!");
static_assert(offsetof(BP_SeparatePoster_C_SetCapturedRenderTexture, CallFunc_IsValid_ReturnValue) == 0x000008, "Member 'BP_SeparatePoster_C_SetCapturedRenderTexture::CallFunc_IsValid_ReturnValue' has a wrong offset!");

// Function BP_SeparatePoster.BP_SeparatePoster_C.SetMaterialTextureParam
// 0x0010 (0x0010 - 0x0000)
struct BP_SeparatePoster_C_SetMaterialTextureParam final
{
public:
	class UTexture2D*                             Texture;                                           // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0008(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_SeparatePoster_C_SetMaterialTextureParam) == 0x000008, "Wrong alignment on BP_SeparatePoster_C_SetMaterialTextureParam");
static_assert(sizeof(BP_SeparatePoster_C_SetMaterialTextureParam) == 0x000010, "Wrong size on BP_SeparatePoster_C_SetMaterialTextureParam");
static_assert(offsetof(BP_SeparatePoster_C_SetMaterialTextureParam, Texture) == 0x000000, "Member 'BP_SeparatePoster_C_SetMaterialTextureParam::Texture' has a wrong offset!");
static_assert(offsetof(BP_SeparatePoster_C_SetMaterialTextureParam, CallFunc_IsValid_ReturnValue) == 0x000008, "Member 'BP_SeparatePoster_C_SetMaterialTextureParam::CallFunc_IsValid_ReturnValue' has a wrong offset!");

// Function BP_SeparatePoster.BP_SeparatePoster_C.SetOverlayTexture
// 0x0010 (0x0010 - 0x0000)
struct BP_SeparatePoster_C_SetOverlayTexture final
{
public:
	class UTexture2D*                             Texture;                                           // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0008(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_SeparatePoster_C_SetOverlayTexture) == 0x000008, "Wrong alignment on BP_SeparatePoster_C_SetOverlayTexture");
static_assert(sizeof(BP_SeparatePoster_C_SetOverlayTexture) == 0x000010, "Wrong size on BP_SeparatePoster_C_SetOverlayTexture");
static_assert(offsetof(BP_SeparatePoster_C_SetOverlayTexture, Texture) == 0x000000, "Member 'BP_SeparatePoster_C_SetOverlayTexture::Texture' has a wrong offset!");
static_assert(offsetof(BP_SeparatePoster_C_SetOverlayTexture, CallFunc_IsValid_ReturnValue) == 0x000008, "Member 'BP_SeparatePoster_C_SetOverlayTexture::CallFunc_IsValid_ReturnValue' has a wrong offset!");

// Function BP_SeparatePoster.BP_SeparatePoster_C.ClearOverlayTexture
// 0x0001 (0x0001 - 0x0000)
struct BP_SeparatePoster_C_ClearOverlayTexture final
{
public:
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0000(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_SeparatePoster_C_ClearOverlayTexture) == 0x000001, "Wrong alignment on BP_SeparatePoster_C_ClearOverlayTexture");
static_assert(sizeof(BP_SeparatePoster_C_ClearOverlayTexture) == 0x000001, "Wrong size on BP_SeparatePoster_C_ClearOverlayTexture");
static_assert(offsetof(BP_SeparatePoster_C_ClearOverlayTexture, CallFunc_IsValid_ReturnValue) == 0x000000, "Member 'BP_SeparatePoster_C_ClearOverlayTexture::CallFunc_IsValid_ReturnValue' has a wrong offset!");

// Function BP_SeparatePoster.BP_SeparatePoster_C.GetRenderResolution
// 0x0038 (0x0038 - 0x0000)
struct BP_SeparatePoster_C_GetRenderResolution final
{
public:
	int32                                         X;                                                 // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Y;                                                 // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Temp_float_Variable;                               // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable;                                // 0x000C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_D[0x3];                                        // 0x000D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Temp_float_Variable_1;                             // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Temp_float_Variable_2;                             // 0x0014(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable_1;                              // 0x0018(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	EFlamePlatform                                CallFunc_GetCurrentPlatform_ReturnValue;           // 0x0019(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue;          // 0x001A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue_1;        // 0x001B(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue_2;        // 0x001C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue_3;        // 0x001D(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanOR_ReturnValue;                    // 0x001E(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanOR_ReturnValue_1;                  // 0x001F(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                         K2Node_Select_Default;                             // 0x0020(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_Select_Default_1;                           // 0x0024(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Multiply_IntFloat_ReturnValue;            // 0x0028(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Multiply_IntFloat_ReturnValue_1;          // 0x002C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Round_ReturnValue;                        // 0x0030(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Round_ReturnValue_1;                      // 0x0034(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_SeparatePoster_C_GetRenderResolution) == 0x000004, "Wrong alignment on BP_SeparatePoster_C_GetRenderResolution");
static_assert(sizeof(BP_SeparatePoster_C_GetRenderResolution) == 0x000038, "Wrong size on BP_SeparatePoster_C_GetRenderResolution");
static_assert(offsetof(BP_SeparatePoster_C_GetRenderResolution, X) == 0x000000, "Member 'BP_SeparatePoster_C_GetRenderResolution::X' has a wrong offset!");
static_assert(offsetof(BP_SeparatePoster_C_GetRenderResolution, Y) == 0x000004, "Member 'BP_SeparatePoster_C_GetRenderResolution::Y' has a wrong offset!");
static_assert(offsetof(BP_SeparatePoster_C_GetRenderResolution, Temp_float_Variable) == 0x000008, "Member 'BP_SeparatePoster_C_GetRenderResolution::Temp_float_Variable' has a wrong offset!");
static_assert(offsetof(BP_SeparatePoster_C_GetRenderResolution, Temp_bool_Variable) == 0x00000C, "Member 'BP_SeparatePoster_C_GetRenderResolution::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(BP_SeparatePoster_C_GetRenderResolution, Temp_float_Variable_1) == 0x000010, "Member 'BP_SeparatePoster_C_GetRenderResolution::Temp_float_Variable_1' has a wrong offset!");
static_assert(offsetof(BP_SeparatePoster_C_GetRenderResolution, Temp_float_Variable_2) == 0x000014, "Member 'BP_SeparatePoster_C_GetRenderResolution::Temp_float_Variable_2' has a wrong offset!");
static_assert(offsetof(BP_SeparatePoster_C_GetRenderResolution, Temp_bool_Variable_1) == 0x000018, "Member 'BP_SeparatePoster_C_GetRenderResolution::Temp_bool_Variable_1' has a wrong offset!");
static_assert(offsetof(BP_SeparatePoster_C_GetRenderResolution, CallFunc_GetCurrentPlatform_ReturnValue) == 0x000019, "Member 'BP_SeparatePoster_C_GetRenderResolution::CallFunc_GetCurrentPlatform_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_SeparatePoster_C_GetRenderResolution, CallFunc_EqualEqual_ByteByte_ReturnValue) == 0x00001A, "Member 'BP_SeparatePoster_C_GetRenderResolution::CallFunc_EqualEqual_ByteByte_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_SeparatePoster_C_GetRenderResolution, CallFunc_EqualEqual_ByteByte_ReturnValue_1) == 0x00001B, "Member 'BP_SeparatePoster_C_GetRenderResolution::CallFunc_EqualEqual_ByteByte_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_SeparatePoster_C_GetRenderResolution, CallFunc_EqualEqual_ByteByte_ReturnValue_2) == 0x00001C, "Member 'BP_SeparatePoster_C_GetRenderResolution::CallFunc_EqualEqual_ByteByte_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BP_SeparatePoster_C_GetRenderResolution, CallFunc_EqualEqual_ByteByte_ReturnValue_3) == 0x00001D, "Member 'BP_SeparatePoster_C_GetRenderResolution::CallFunc_EqualEqual_ByteByte_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(BP_SeparatePoster_C_GetRenderResolution, CallFunc_BooleanOR_ReturnValue) == 0x00001E, "Member 'BP_SeparatePoster_C_GetRenderResolution::CallFunc_BooleanOR_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_SeparatePoster_C_GetRenderResolution, CallFunc_BooleanOR_ReturnValue_1) == 0x00001F, "Member 'BP_SeparatePoster_C_GetRenderResolution::CallFunc_BooleanOR_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_SeparatePoster_C_GetRenderResolution, K2Node_Select_Default) == 0x000020, "Member 'BP_SeparatePoster_C_GetRenderResolution::K2Node_Select_Default' has a wrong offset!");
static_assert(offsetof(BP_SeparatePoster_C_GetRenderResolution, K2Node_Select_Default_1) == 0x000024, "Member 'BP_SeparatePoster_C_GetRenderResolution::K2Node_Select_Default_1' has a wrong offset!");
static_assert(offsetof(BP_SeparatePoster_C_GetRenderResolution, CallFunc_Multiply_IntFloat_ReturnValue) == 0x000028, "Member 'BP_SeparatePoster_C_GetRenderResolution::CallFunc_Multiply_IntFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_SeparatePoster_C_GetRenderResolution, CallFunc_Multiply_IntFloat_ReturnValue_1) == 0x00002C, "Member 'BP_SeparatePoster_C_GetRenderResolution::CallFunc_Multiply_IntFloat_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_SeparatePoster_C_GetRenderResolution, CallFunc_Round_ReturnValue) == 0x000030, "Member 'BP_SeparatePoster_C_GetRenderResolution::CallFunc_Round_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_SeparatePoster_C_GetRenderResolution, CallFunc_Round_ReturnValue_1) == 0x000034, "Member 'BP_SeparatePoster_C_GetRenderResolution::CallFunc_Round_ReturnValue_1' has a wrong offset!");

// Function BP_SeparatePoster.BP_SeparatePoster_C.SetPosterModel
// 0x0130 (0x0130 - 0x0000)
struct BP_SeparatePoster_C_SetPosterModel final
{
public:
	int32                                         ModelID;                                           // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TMap<class UStaticMesh*, int32>               MeshMap;                                           // 0x0008(0x0050)(Edit, BlueprintVisible)
	bool                                          CallFunc_K2_AttachToComponent_ReturnValue;         // 0x0058(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_59[0x7];                                       // 0x0059(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TSoftObjectPtr<class UStaticMesh>             CallFunc_Map_Find_Value;                           // 0x0060(0x0028)(HasGetValueTypeHash)
	bool                                          CallFunc_Map_Find_ReturnValue;                     // 0x0088(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_89[0x7];                                       // 0x0089(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UMaterialInstanceDynamic*               CallFunc_SetDynamicMaterial_ReturnValue;           // 0x0090(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UObject*                                CallFunc_LoadAsset_Blocking_ReturnValue;           // 0x0098(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UStaticMesh*                            K2Node_DynamicCast_AsStatic_Mesh;                  // 0x00A0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x00A8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_A9[0x7];                                       // 0x00A9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UTexture*                               CallFunc_K2_GetTextureParameterValue_ReturnValue;  // 0x00B0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UTextureRenderTarget2D*                 K2Node_DynamicCast_AsTexture_Render_Target_2D;     // 0x00B8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess_1;                     // 0x00C0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_C1[0x7];                                       // 0x00C1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UTexture*                               CallFunc_K2_GetTextureParameterValue_ReturnValue_1; // 0x00C8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UTexture2D*                             K2Node_DynamicCast_AsTexture_2D;                   // 0x00D0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess_2;                     // 0x00D8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_D9[0x7];                                       // 0x00D9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TMap<class UStaticMesh*, int32>               K2Node_MakeVariable_MakeVariableOutput;            // 0x00E0(0x0050)()
};
static_assert(alignof(BP_SeparatePoster_C_SetPosterModel) == 0x000008, "Wrong alignment on BP_SeparatePoster_C_SetPosterModel");
static_assert(sizeof(BP_SeparatePoster_C_SetPosterModel) == 0x000130, "Wrong size on BP_SeparatePoster_C_SetPosterModel");
static_assert(offsetof(BP_SeparatePoster_C_SetPosterModel, ModelID) == 0x000000, "Member 'BP_SeparatePoster_C_SetPosterModel::ModelID' has a wrong offset!");
static_assert(offsetof(BP_SeparatePoster_C_SetPosterModel, MeshMap) == 0x000008, "Member 'BP_SeparatePoster_C_SetPosterModel::MeshMap' has a wrong offset!");
static_assert(offsetof(BP_SeparatePoster_C_SetPosterModel, CallFunc_K2_AttachToComponent_ReturnValue) == 0x000058, "Member 'BP_SeparatePoster_C_SetPosterModel::CallFunc_K2_AttachToComponent_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_SeparatePoster_C_SetPosterModel, CallFunc_Map_Find_Value) == 0x000060, "Member 'BP_SeparatePoster_C_SetPosterModel::CallFunc_Map_Find_Value' has a wrong offset!");
static_assert(offsetof(BP_SeparatePoster_C_SetPosterModel, CallFunc_Map_Find_ReturnValue) == 0x000088, "Member 'BP_SeparatePoster_C_SetPosterModel::CallFunc_Map_Find_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_SeparatePoster_C_SetPosterModel, CallFunc_SetDynamicMaterial_ReturnValue) == 0x000090, "Member 'BP_SeparatePoster_C_SetPosterModel::CallFunc_SetDynamicMaterial_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_SeparatePoster_C_SetPosterModel, CallFunc_LoadAsset_Blocking_ReturnValue) == 0x000098, "Member 'BP_SeparatePoster_C_SetPosterModel::CallFunc_LoadAsset_Blocking_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_SeparatePoster_C_SetPosterModel, K2Node_DynamicCast_AsStatic_Mesh) == 0x0000A0, "Member 'BP_SeparatePoster_C_SetPosterModel::K2Node_DynamicCast_AsStatic_Mesh' has a wrong offset!");
static_assert(offsetof(BP_SeparatePoster_C_SetPosterModel, K2Node_DynamicCast_bSuccess) == 0x0000A8, "Member 'BP_SeparatePoster_C_SetPosterModel::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(BP_SeparatePoster_C_SetPosterModel, CallFunc_K2_GetTextureParameterValue_ReturnValue) == 0x0000B0, "Member 'BP_SeparatePoster_C_SetPosterModel::CallFunc_K2_GetTextureParameterValue_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_SeparatePoster_C_SetPosterModel, K2Node_DynamicCast_AsTexture_Render_Target_2D) == 0x0000B8, "Member 'BP_SeparatePoster_C_SetPosterModel::K2Node_DynamicCast_AsTexture_Render_Target_2D' has a wrong offset!");
static_assert(offsetof(BP_SeparatePoster_C_SetPosterModel, K2Node_DynamicCast_bSuccess_1) == 0x0000C0, "Member 'BP_SeparatePoster_C_SetPosterModel::K2Node_DynamicCast_bSuccess_1' has a wrong offset!");
static_assert(offsetof(BP_SeparatePoster_C_SetPosterModel, CallFunc_K2_GetTextureParameterValue_ReturnValue_1) == 0x0000C8, "Member 'BP_SeparatePoster_C_SetPosterModel::CallFunc_K2_GetTextureParameterValue_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_SeparatePoster_C_SetPosterModel, K2Node_DynamicCast_AsTexture_2D) == 0x0000D0, "Member 'BP_SeparatePoster_C_SetPosterModel::K2Node_DynamicCast_AsTexture_2D' has a wrong offset!");
static_assert(offsetof(BP_SeparatePoster_C_SetPosterModel, K2Node_DynamicCast_bSuccess_2) == 0x0000D8, "Member 'BP_SeparatePoster_C_SetPosterModel::K2Node_DynamicCast_bSuccess_2' has a wrong offset!");
static_assert(offsetof(BP_SeparatePoster_C_SetPosterModel, K2Node_MakeVariable_MakeVariableOutput) == 0x0000E0, "Member 'BP_SeparatePoster_C_SetPosterModel::K2Node_MakeVariable_MakeVariableOutput' has a wrong offset!");

// Function BP_SeparatePoster.BP_SeparatePoster_C.Check for Correct Wall Placement
// 0x0120 (0x0120 - 0x0000)
struct BP_SeparatePoster_C_Check_for_Correct_Wall_Placement final
{
public:
	TArray<class ABP_ValidPosterPlane_C*>         ValidWalls;                                        // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
	bool                                          Valid;                                             // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_11[0x3];                                       // 0x0011(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                PrevSocketLocation;                                // 0x0014(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bValidPosterPlacement;                             // 0x0020(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_True_if_break_was_hit_Variable;          // 0x0021(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_22[0x2];                                       // 0x0022(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x0024(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x0028(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x002C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_True_if_break_was_hit_Variable_1;        // 0x0030(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_31[0x3];                                       // 0x0031(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Temp_int_Array_Index_Variable;                     // 0x0034(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Array_Index_Variable_1;                   // 0x0038(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3C[0x4];                                       // 0x003C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class ABP_ValidPosterPlane_C*                 CallFunc_Array_Get_Item;                           // 0x0040(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0048(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_49[0x3];                                       // 0x0049(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_VSize_ReturnValue;                        // 0x004C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable_1;                  // 0x0050(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_FloatFloat_ReturnValue;        // 0x0054(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x0055(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_56[0x2];                                       // 0x0056(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Add_IntInt_ReturnValue_1;                 // 0x0058(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           Temp_struct_Variable;                              // 0x005C(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           Temp_struct_Variable_1;                            // 0x006C(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable;                                // 0x007C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_7D[0x3];                                       // 0x007D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class FName>                           K2Node_MakeArray_Array;                            // 0x0080(0x0010)(ReferenceParm)
	int32                                         CallFunc_Array_Length_ReturnValue_1;               // 0x0090(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   CallFunc_Array_Get_Item_1;                         // 0x0094(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue_1;                // 0x009C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_9D[0x3];                                       // 0x009D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             CallFunc_GetSocketTransform_ReturnValue;           // 0x00A0(0x0030)(IsPlainOldData, NoDestructor)
	struct FVector                                CallFunc_BreakTransform_Location;                  // 0x00D0(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               CallFunc_BreakTransform_Rotation;                  // 0x00DC(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FVector                                CallFunc_BreakTransform_Scale;                     // 0x00E8(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_GetClosestPointOnCollision_OutPointOnBody; // 0x00F4(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_GetClosestPointOnCollision_ReturnValue;   // 0x0100(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Greater_FloatFloat_ReturnValue;           // 0x0104(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_105[0x3];                                      // 0x0105(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FLinearColor                           K2Node_Select_Default;                             // 0x0108(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_SeparatePoster_C_Check_for_Correct_Wall_Placement) == 0x000010, "Wrong alignment on BP_SeparatePoster_C_Check_for_Correct_Wall_Placement");
static_assert(sizeof(BP_SeparatePoster_C_Check_for_Correct_Wall_Placement) == 0x000120, "Wrong size on BP_SeparatePoster_C_Check_for_Correct_Wall_Placement");
static_assert(offsetof(BP_SeparatePoster_C_Check_for_Correct_Wall_Placement, ValidWalls) == 0x000000, "Member 'BP_SeparatePoster_C_Check_for_Correct_Wall_Placement::ValidWalls' has a wrong offset!");
static_assert(offsetof(BP_SeparatePoster_C_Check_for_Correct_Wall_Placement, Valid) == 0x000010, "Member 'BP_SeparatePoster_C_Check_for_Correct_Wall_Placement::Valid' has a wrong offset!");
static_assert(offsetof(BP_SeparatePoster_C_Check_for_Correct_Wall_Placement, PrevSocketLocation) == 0x000014, "Member 'BP_SeparatePoster_C_Check_for_Correct_Wall_Placement::PrevSocketLocation' has a wrong offset!");
static_assert(offsetof(BP_SeparatePoster_C_Check_for_Correct_Wall_Placement, bValidPosterPlacement) == 0x000020, "Member 'BP_SeparatePoster_C_Check_for_Correct_Wall_Placement::bValidPosterPlacement' has a wrong offset!");
static_assert(offsetof(BP_SeparatePoster_C_Check_for_Correct_Wall_Placement, Temp_bool_True_if_break_was_hit_Variable) == 0x000021, "Member 'BP_SeparatePoster_C_Check_for_Correct_Wall_Placement::Temp_bool_True_if_break_was_hit_Variable' has a wrong offset!");
static_assert(offsetof(BP_SeparatePoster_C_Check_for_Correct_Wall_Placement, CallFunc_Array_Length_ReturnValue) == 0x000024, "Member 'BP_SeparatePoster_C_Check_for_Correct_Wall_Placement::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_SeparatePoster_C_Check_for_Correct_Wall_Placement, Temp_int_Loop_Counter_Variable) == 0x000028, "Member 'BP_SeparatePoster_C_Check_for_Correct_Wall_Placement::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(BP_SeparatePoster_C_Check_for_Correct_Wall_Placement, CallFunc_Add_IntInt_ReturnValue) == 0x00002C, "Member 'BP_SeparatePoster_C_Check_for_Correct_Wall_Placement::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_SeparatePoster_C_Check_for_Correct_Wall_Placement, Temp_bool_True_if_break_was_hit_Variable_1) == 0x000030, "Member 'BP_SeparatePoster_C_Check_for_Correct_Wall_Placement::Temp_bool_True_if_break_was_hit_Variable_1' has a wrong offset!");
static_assert(offsetof(BP_SeparatePoster_C_Check_for_Correct_Wall_Placement, Temp_int_Array_Index_Variable) == 0x000034, "Member 'BP_SeparatePoster_C_Check_for_Correct_Wall_Placement::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(BP_SeparatePoster_C_Check_for_Correct_Wall_Placement, Temp_int_Array_Index_Variable_1) == 0x000038, "Member 'BP_SeparatePoster_C_Check_for_Correct_Wall_Placement::Temp_int_Array_Index_Variable_1' has a wrong offset!");
static_assert(offsetof(BP_SeparatePoster_C_Check_for_Correct_Wall_Placement, CallFunc_Array_Get_Item) == 0x000040, "Member 'BP_SeparatePoster_C_Check_for_Correct_Wall_Placement::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(BP_SeparatePoster_C_Check_for_Correct_Wall_Placement, CallFunc_IsValid_ReturnValue) == 0x000048, "Member 'BP_SeparatePoster_C_Check_for_Correct_Wall_Placement::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_SeparatePoster_C_Check_for_Correct_Wall_Placement, CallFunc_VSize_ReturnValue) == 0x00004C, "Member 'BP_SeparatePoster_C_Check_for_Correct_Wall_Placement::CallFunc_VSize_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_SeparatePoster_C_Check_for_Correct_Wall_Placement, Temp_int_Loop_Counter_Variable_1) == 0x000050, "Member 'BP_SeparatePoster_C_Check_for_Correct_Wall_Placement::Temp_int_Loop_Counter_Variable_1' has a wrong offset!");
static_assert(offsetof(BP_SeparatePoster_C_Check_for_Correct_Wall_Placement, CallFunc_EqualEqual_FloatFloat_ReturnValue) == 0x000054, "Member 'BP_SeparatePoster_C_Check_for_Correct_Wall_Placement::CallFunc_EqualEqual_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_SeparatePoster_C_Check_for_Correct_Wall_Placement, CallFunc_Less_IntInt_ReturnValue) == 0x000055, "Member 'BP_SeparatePoster_C_Check_for_Correct_Wall_Placement::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_SeparatePoster_C_Check_for_Correct_Wall_Placement, CallFunc_Add_IntInt_ReturnValue_1) == 0x000058, "Member 'BP_SeparatePoster_C_Check_for_Correct_Wall_Placement::CallFunc_Add_IntInt_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_SeparatePoster_C_Check_for_Correct_Wall_Placement, Temp_struct_Variable) == 0x00005C, "Member 'BP_SeparatePoster_C_Check_for_Correct_Wall_Placement::Temp_struct_Variable' has a wrong offset!");
static_assert(offsetof(BP_SeparatePoster_C_Check_for_Correct_Wall_Placement, Temp_struct_Variable_1) == 0x00006C, "Member 'BP_SeparatePoster_C_Check_for_Correct_Wall_Placement::Temp_struct_Variable_1' has a wrong offset!");
static_assert(offsetof(BP_SeparatePoster_C_Check_for_Correct_Wall_Placement, Temp_bool_Variable) == 0x00007C, "Member 'BP_SeparatePoster_C_Check_for_Correct_Wall_Placement::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(BP_SeparatePoster_C_Check_for_Correct_Wall_Placement, K2Node_MakeArray_Array) == 0x000080, "Member 'BP_SeparatePoster_C_Check_for_Correct_Wall_Placement::K2Node_MakeArray_Array' has a wrong offset!");
static_assert(offsetof(BP_SeparatePoster_C_Check_for_Correct_Wall_Placement, CallFunc_Array_Length_ReturnValue_1) == 0x000090, "Member 'BP_SeparatePoster_C_Check_for_Correct_Wall_Placement::CallFunc_Array_Length_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_SeparatePoster_C_Check_for_Correct_Wall_Placement, CallFunc_Array_Get_Item_1) == 0x000094, "Member 'BP_SeparatePoster_C_Check_for_Correct_Wall_Placement::CallFunc_Array_Get_Item_1' has a wrong offset!");
static_assert(offsetof(BP_SeparatePoster_C_Check_for_Correct_Wall_Placement, CallFunc_Less_IntInt_ReturnValue_1) == 0x00009C, "Member 'BP_SeparatePoster_C_Check_for_Correct_Wall_Placement::CallFunc_Less_IntInt_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_SeparatePoster_C_Check_for_Correct_Wall_Placement, CallFunc_GetSocketTransform_ReturnValue) == 0x0000A0, "Member 'BP_SeparatePoster_C_Check_for_Correct_Wall_Placement::CallFunc_GetSocketTransform_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_SeparatePoster_C_Check_for_Correct_Wall_Placement, CallFunc_BreakTransform_Location) == 0x0000D0, "Member 'BP_SeparatePoster_C_Check_for_Correct_Wall_Placement::CallFunc_BreakTransform_Location' has a wrong offset!");
static_assert(offsetof(BP_SeparatePoster_C_Check_for_Correct_Wall_Placement, CallFunc_BreakTransform_Rotation) == 0x0000DC, "Member 'BP_SeparatePoster_C_Check_for_Correct_Wall_Placement::CallFunc_BreakTransform_Rotation' has a wrong offset!");
static_assert(offsetof(BP_SeparatePoster_C_Check_for_Correct_Wall_Placement, CallFunc_BreakTransform_Scale) == 0x0000E8, "Member 'BP_SeparatePoster_C_Check_for_Correct_Wall_Placement::CallFunc_BreakTransform_Scale' has a wrong offset!");
static_assert(offsetof(BP_SeparatePoster_C_Check_for_Correct_Wall_Placement, CallFunc_GetClosestPointOnCollision_OutPointOnBody) == 0x0000F4, "Member 'BP_SeparatePoster_C_Check_for_Correct_Wall_Placement::CallFunc_GetClosestPointOnCollision_OutPointOnBody' has a wrong offset!");
static_assert(offsetof(BP_SeparatePoster_C_Check_for_Correct_Wall_Placement, CallFunc_GetClosestPointOnCollision_ReturnValue) == 0x000100, "Member 'BP_SeparatePoster_C_Check_for_Correct_Wall_Placement::CallFunc_GetClosestPointOnCollision_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_SeparatePoster_C_Check_for_Correct_Wall_Placement, CallFunc_Greater_FloatFloat_ReturnValue) == 0x000104, "Member 'BP_SeparatePoster_C_Check_for_Correct_Wall_Placement::CallFunc_Greater_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_SeparatePoster_C_Check_for_Correct_Wall_Placement, K2Node_Select_Default) == 0x000108, "Member 'BP_SeparatePoster_C_Check_for_Correct_Wall_Placement::K2Node_Select_Default' has a wrong offset!");

// Function BP_SeparatePoster.BP_SeparatePoster_C.GetValidTeleportLocation
// 0x0080 (0x0080 - 0x0000)
struct BP_SeparatePoster_C_GetValidTeleportLocation final
{
public:
	struct FTransform                             ReturnValue;                                       // 0x0000(0x0030)(Parm, OutParm, ReturnParm, IsPlainOldData, NoDestructor)
	bool                                          Valid;                                             // 0x0030(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_31[0x7];                                       // 0x0031(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class ABP_ValidPosterPlane_C*                 CallFunc_GetTheWallPosterIsPlacedUpon_Wall;        // 0x0038(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0040(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_41[0xF];                                       // 0x0041(0x000F)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             CallFunc_K2_GetComponentToWorld_ReturnValue;       // 0x0050(0x0030)(IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_SeparatePoster_C_GetValidTeleportLocation) == 0x000010, "Wrong alignment on BP_SeparatePoster_C_GetValidTeleportLocation");
static_assert(sizeof(BP_SeparatePoster_C_GetValidTeleportLocation) == 0x000080, "Wrong size on BP_SeparatePoster_C_GetValidTeleportLocation");
static_assert(offsetof(BP_SeparatePoster_C_GetValidTeleportLocation, ReturnValue) == 0x000000, "Member 'BP_SeparatePoster_C_GetValidTeleportLocation::ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_SeparatePoster_C_GetValidTeleportLocation, Valid) == 0x000030, "Member 'BP_SeparatePoster_C_GetValidTeleportLocation::Valid' has a wrong offset!");
static_assert(offsetof(BP_SeparatePoster_C_GetValidTeleportLocation, CallFunc_GetTheWallPosterIsPlacedUpon_Wall) == 0x000038, "Member 'BP_SeparatePoster_C_GetValidTeleportLocation::CallFunc_GetTheWallPosterIsPlacedUpon_Wall' has a wrong offset!");
static_assert(offsetof(BP_SeparatePoster_C_GetValidTeleportLocation, CallFunc_IsValid_ReturnValue) == 0x000040, "Member 'BP_SeparatePoster_C_GetValidTeleportLocation::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_SeparatePoster_C_GetValidTeleportLocation, CallFunc_K2_GetComponentToWorld_ReturnValue) == 0x000050, "Member 'BP_SeparatePoster_C_GetValidTeleportLocation::CallFunc_K2_GetComponentToWorld_ReturnValue' has a wrong offset!");

// Function BP_SeparatePoster.BP_SeparatePoster_C.GetTheWallPosterIsPlacedUpon
// 0x0200 (0x0200 - 0x0000)
struct BP_SeparatePoster_C_GetTheWallPosterIsPlacedUpon final
{
public:
	class ABP_ValidPosterPlane_C*                 Wall;                                              // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_True_if_break_was_hit_Variable;          // 0x0008(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Temp_int_Array_Index_Variable;                     // 0x000C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class AActor*>                         Temp_object_Variable;                              // 0x0018(0x0010)(ConstParm, ReferenceParm)
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x0028(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_GetActorForwardVector_ReturnValue;        // 0x002C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_38[0x8];                                       // 0x0038(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             CallFunc_GetTransform_ReturnValue;                 // 0x0040(0x0030)(ConstParm, IsPlainOldData, NoDestructor)
	struct FVector                                CallFunc_Multiply_VectorFloat_ReturnValue;         // 0x0070(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakTransform_Location;                  // 0x007C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               CallFunc_BreakTransform_Rotation;                  // 0x0088(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FVector                                CallFunc_BreakTransform_Scale;                     // 0x0094(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Add_VectorVector_ReturnValue;             // 0x00A0(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_AC[0x4];                                       // 0x00AC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FHitResult>                     CallFunc_LineTraceMulti_OutHits;                   // 0x00B0(0x0010)(ReferenceParm, ContainsInstancedReference)
	bool                                          CallFunc_LineTraceMulti_ReturnValue;               // 0x00C0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_C1[0x3];                                       // 0x00C1(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x00C4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x00C8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_C9[0x3];                                       // 0x00C9(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FHitResult                             CallFunc_Array_Get_Item;                           // 0x00CC(0x008C)(IsPlainOldData, NoDestructor, ContainsInstancedReference)
	bool                                          CallFunc_BreakHitResult_bBlockingHit;              // 0x0158(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BreakHitResult_bInitialOverlap;           // 0x0159(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_15A[0x2];                                      // 0x015A(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_BreakHitResult_Time;                      // 0x015C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakHitResult_Distance;                  // 0x0160(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_Location;                  // 0x0164(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_ImpactPoint;               // 0x0170(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_Normal;                    // 0x017C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_ImpactNormal;              // 0x0188(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_194[0x4];                                      // 0x0194(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UPhysicalMaterial*                      CallFunc_BreakHitResult_PhysMat;                   // 0x0198(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 CallFunc_BreakHitResult_HitActor;                  // 0x01A0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UPrimitiveComponent*                    CallFunc_BreakHitResult_HitComponent;              // 0x01A8(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EPhysicalSurface                              CallFunc_BreakHitResult_ShapeSurfaceType;          // 0x01B0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1B1[0x3];                                      // 0x01B1(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   CallFunc_BreakHitResult_HitBoneName;               // 0x01B4(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_BreakHitResult_HitItem;                   // 0x01BC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_BreakHitResult_ElementIndex;              // 0x01C0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_BreakHitResult_FaceIndex;                 // 0x01C4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_TraceStart;                // 0x01C8(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_TraceEnd;                  // 0x01D4(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UClass*                                 CallFunc_GetObjectClass_ReturnValue;               // 0x01E0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ABP_ValidPosterPlane_C*                 K2Node_DynamicCast_AsBP_Valid_Poster_Plane;        // 0x01E8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x01F0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_ClassIsChildOf_ReturnValue;               // 0x01F1(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_SeparatePoster_C_GetTheWallPosterIsPlacedUpon) == 0x000010, "Wrong alignment on BP_SeparatePoster_C_GetTheWallPosterIsPlacedUpon");
static_assert(sizeof(BP_SeparatePoster_C_GetTheWallPosterIsPlacedUpon) == 0x000200, "Wrong size on BP_SeparatePoster_C_GetTheWallPosterIsPlacedUpon");
static_assert(offsetof(BP_SeparatePoster_C_GetTheWallPosterIsPlacedUpon, Wall) == 0x000000, "Member 'BP_SeparatePoster_C_GetTheWallPosterIsPlacedUpon::Wall' has a wrong offset!");
static_assert(offsetof(BP_SeparatePoster_C_GetTheWallPosterIsPlacedUpon, Temp_bool_True_if_break_was_hit_Variable) == 0x000008, "Member 'BP_SeparatePoster_C_GetTheWallPosterIsPlacedUpon::Temp_bool_True_if_break_was_hit_Variable' has a wrong offset!");
static_assert(offsetof(BP_SeparatePoster_C_GetTheWallPosterIsPlacedUpon, Temp_int_Array_Index_Variable) == 0x00000C, "Member 'BP_SeparatePoster_C_GetTheWallPosterIsPlacedUpon::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(BP_SeparatePoster_C_GetTheWallPosterIsPlacedUpon, Temp_int_Loop_Counter_Variable) == 0x000010, "Member 'BP_SeparatePoster_C_GetTheWallPosterIsPlacedUpon::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(BP_SeparatePoster_C_GetTheWallPosterIsPlacedUpon, Temp_object_Variable) == 0x000018, "Member 'BP_SeparatePoster_C_GetTheWallPosterIsPlacedUpon::Temp_object_Variable' has a wrong offset!");
static_assert(offsetof(BP_SeparatePoster_C_GetTheWallPosterIsPlacedUpon, CallFunc_Add_IntInt_ReturnValue) == 0x000028, "Member 'BP_SeparatePoster_C_GetTheWallPosterIsPlacedUpon::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_SeparatePoster_C_GetTheWallPosterIsPlacedUpon, CallFunc_GetActorForwardVector_ReturnValue) == 0x00002C, "Member 'BP_SeparatePoster_C_GetTheWallPosterIsPlacedUpon::CallFunc_GetActorForwardVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_SeparatePoster_C_GetTheWallPosterIsPlacedUpon, CallFunc_GetTransform_ReturnValue) == 0x000040, "Member 'BP_SeparatePoster_C_GetTheWallPosterIsPlacedUpon::CallFunc_GetTransform_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_SeparatePoster_C_GetTheWallPosterIsPlacedUpon, CallFunc_Multiply_VectorFloat_ReturnValue) == 0x000070, "Member 'BP_SeparatePoster_C_GetTheWallPosterIsPlacedUpon::CallFunc_Multiply_VectorFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_SeparatePoster_C_GetTheWallPosterIsPlacedUpon, CallFunc_BreakTransform_Location) == 0x00007C, "Member 'BP_SeparatePoster_C_GetTheWallPosterIsPlacedUpon::CallFunc_BreakTransform_Location' has a wrong offset!");
static_assert(offsetof(BP_SeparatePoster_C_GetTheWallPosterIsPlacedUpon, CallFunc_BreakTransform_Rotation) == 0x000088, "Member 'BP_SeparatePoster_C_GetTheWallPosterIsPlacedUpon::CallFunc_BreakTransform_Rotation' has a wrong offset!");
static_assert(offsetof(BP_SeparatePoster_C_GetTheWallPosterIsPlacedUpon, CallFunc_BreakTransform_Scale) == 0x000094, "Member 'BP_SeparatePoster_C_GetTheWallPosterIsPlacedUpon::CallFunc_BreakTransform_Scale' has a wrong offset!");
static_assert(offsetof(BP_SeparatePoster_C_GetTheWallPosterIsPlacedUpon, CallFunc_Add_VectorVector_ReturnValue) == 0x0000A0, "Member 'BP_SeparatePoster_C_GetTheWallPosterIsPlacedUpon::CallFunc_Add_VectorVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_SeparatePoster_C_GetTheWallPosterIsPlacedUpon, CallFunc_LineTraceMulti_OutHits) == 0x0000B0, "Member 'BP_SeparatePoster_C_GetTheWallPosterIsPlacedUpon::CallFunc_LineTraceMulti_OutHits' has a wrong offset!");
static_assert(offsetof(BP_SeparatePoster_C_GetTheWallPosterIsPlacedUpon, CallFunc_LineTraceMulti_ReturnValue) == 0x0000C0, "Member 'BP_SeparatePoster_C_GetTheWallPosterIsPlacedUpon::CallFunc_LineTraceMulti_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_SeparatePoster_C_GetTheWallPosterIsPlacedUpon, CallFunc_Array_Length_ReturnValue) == 0x0000C4, "Member 'BP_SeparatePoster_C_GetTheWallPosterIsPlacedUpon::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_SeparatePoster_C_GetTheWallPosterIsPlacedUpon, CallFunc_Less_IntInt_ReturnValue) == 0x0000C8, "Member 'BP_SeparatePoster_C_GetTheWallPosterIsPlacedUpon::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_SeparatePoster_C_GetTheWallPosterIsPlacedUpon, CallFunc_Array_Get_Item) == 0x0000CC, "Member 'BP_SeparatePoster_C_GetTheWallPosterIsPlacedUpon::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(BP_SeparatePoster_C_GetTheWallPosterIsPlacedUpon, CallFunc_BreakHitResult_bBlockingHit) == 0x000158, "Member 'BP_SeparatePoster_C_GetTheWallPosterIsPlacedUpon::CallFunc_BreakHitResult_bBlockingHit' has a wrong offset!");
static_assert(offsetof(BP_SeparatePoster_C_GetTheWallPosterIsPlacedUpon, CallFunc_BreakHitResult_bInitialOverlap) == 0x000159, "Member 'BP_SeparatePoster_C_GetTheWallPosterIsPlacedUpon::CallFunc_BreakHitResult_bInitialOverlap' has a wrong offset!");
static_assert(offsetof(BP_SeparatePoster_C_GetTheWallPosterIsPlacedUpon, CallFunc_BreakHitResult_Time) == 0x00015C, "Member 'BP_SeparatePoster_C_GetTheWallPosterIsPlacedUpon::CallFunc_BreakHitResult_Time' has a wrong offset!");
static_assert(offsetof(BP_SeparatePoster_C_GetTheWallPosterIsPlacedUpon, CallFunc_BreakHitResult_Distance) == 0x000160, "Member 'BP_SeparatePoster_C_GetTheWallPosterIsPlacedUpon::CallFunc_BreakHitResult_Distance' has a wrong offset!");
static_assert(offsetof(BP_SeparatePoster_C_GetTheWallPosterIsPlacedUpon, CallFunc_BreakHitResult_Location) == 0x000164, "Member 'BP_SeparatePoster_C_GetTheWallPosterIsPlacedUpon::CallFunc_BreakHitResult_Location' has a wrong offset!");
static_assert(offsetof(BP_SeparatePoster_C_GetTheWallPosterIsPlacedUpon, CallFunc_BreakHitResult_ImpactPoint) == 0x000170, "Member 'BP_SeparatePoster_C_GetTheWallPosterIsPlacedUpon::CallFunc_BreakHitResult_ImpactPoint' has a wrong offset!");
static_assert(offsetof(BP_SeparatePoster_C_GetTheWallPosterIsPlacedUpon, CallFunc_BreakHitResult_Normal) == 0x00017C, "Member 'BP_SeparatePoster_C_GetTheWallPosterIsPlacedUpon::CallFunc_BreakHitResult_Normal' has a wrong offset!");
static_assert(offsetof(BP_SeparatePoster_C_GetTheWallPosterIsPlacedUpon, CallFunc_BreakHitResult_ImpactNormal) == 0x000188, "Member 'BP_SeparatePoster_C_GetTheWallPosterIsPlacedUpon::CallFunc_BreakHitResult_ImpactNormal' has a wrong offset!");
static_assert(offsetof(BP_SeparatePoster_C_GetTheWallPosterIsPlacedUpon, CallFunc_BreakHitResult_PhysMat) == 0x000198, "Member 'BP_SeparatePoster_C_GetTheWallPosterIsPlacedUpon::CallFunc_BreakHitResult_PhysMat' has a wrong offset!");
static_assert(offsetof(BP_SeparatePoster_C_GetTheWallPosterIsPlacedUpon, CallFunc_BreakHitResult_HitActor) == 0x0001A0, "Member 'BP_SeparatePoster_C_GetTheWallPosterIsPlacedUpon::CallFunc_BreakHitResult_HitActor' has a wrong offset!");
static_assert(offsetof(BP_SeparatePoster_C_GetTheWallPosterIsPlacedUpon, CallFunc_BreakHitResult_HitComponent) == 0x0001A8, "Member 'BP_SeparatePoster_C_GetTheWallPosterIsPlacedUpon::CallFunc_BreakHitResult_HitComponent' has a wrong offset!");
static_assert(offsetof(BP_SeparatePoster_C_GetTheWallPosterIsPlacedUpon, CallFunc_BreakHitResult_ShapeSurfaceType) == 0x0001B0, "Member 'BP_SeparatePoster_C_GetTheWallPosterIsPlacedUpon::CallFunc_BreakHitResult_ShapeSurfaceType' has a wrong offset!");
static_assert(offsetof(BP_SeparatePoster_C_GetTheWallPosterIsPlacedUpon, CallFunc_BreakHitResult_HitBoneName) == 0x0001B4, "Member 'BP_SeparatePoster_C_GetTheWallPosterIsPlacedUpon::CallFunc_BreakHitResult_HitBoneName' has a wrong offset!");
static_assert(offsetof(BP_SeparatePoster_C_GetTheWallPosterIsPlacedUpon, CallFunc_BreakHitResult_HitItem) == 0x0001BC, "Member 'BP_SeparatePoster_C_GetTheWallPosterIsPlacedUpon::CallFunc_BreakHitResult_HitItem' has a wrong offset!");
static_assert(offsetof(BP_SeparatePoster_C_GetTheWallPosterIsPlacedUpon, CallFunc_BreakHitResult_ElementIndex) == 0x0001C0, "Member 'BP_SeparatePoster_C_GetTheWallPosterIsPlacedUpon::CallFunc_BreakHitResult_ElementIndex' has a wrong offset!");
static_assert(offsetof(BP_SeparatePoster_C_GetTheWallPosterIsPlacedUpon, CallFunc_BreakHitResult_FaceIndex) == 0x0001C4, "Member 'BP_SeparatePoster_C_GetTheWallPosterIsPlacedUpon::CallFunc_BreakHitResult_FaceIndex' has a wrong offset!");
static_assert(offsetof(BP_SeparatePoster_C_GetTheWallPosterIsPlacedUpon, CallFunc_BreakHitResult_TraceStart) == 0x0001C8, "Member 'BP_SeparatePoster_C_GetTheWallPosterIsPlacedUpon::CallFunc_BreakHitResult_TraceStart' has a wrong offset!");
static_assert(offsetof(BP_SeparatePoster_C_GetTheWallPosterIsPlacedUpon, CallFunc_BreakHitResult_TraceEnd) == 0x0001D4, "Member 'BP_SeparatePoster_C_GetTheWallPosterIsPlacedUpon::CallFunc_BreakHitResult_TraceEnd' has a wrong offset!");
static_assert(offsetof(BP_SeparatePoster_C_GetTheWallPosterIsPlacedUpon, CallFunc_GetObjectClass_ReturnValue) == 0x0001E0, "Member 'BP_SeparatePoster_C_GetTheWallPosterIsPlacedUpon::CallFunc_GetObjectClass_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_SeparatePoster_C_GetTheWallPosterIsPlacedUpon, K2Node_DynamicCast_AsBP_Valid_Poster_Plane) == 0x0001E8, "Member 'BP_SeparatePoster_C_GetTheWallPosterIsPlacedUpon::K2Node_DynamicCast_AsBP_Valid_Poster_Plane' has a wrong offset!");
static_assert(offsetof(BP_SeparatePoster_C_GetTheWallPosterIsPlacedUpon, K2Node_DynamicCast_bSuccess) == 0x0001F0, "Member 'BP_SeparatePoster_C_GetTheWallPosterIsPlacedUpon::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(BP_SeparatePoster_C_GetTheWallPosterIsPlacedUpon, CallFunc_ClassIsChildOf_ReturnValue) == 0x0001F1, "Member 'BP_SeparatePoster_C_GetTheWallPosterIsPlacedUpon::CallFunc_ClassIsChildOf_ReturnValue' has a wrong offset!");

// Function BP_SeparatePoster.BP_SeparatePoster_C.Adjust ScaleDependentStuff
// 0x0038 (0x0038 - 0x0000)
struct BP_SeparatePoster_C_Adjust_ScaleDependentStuff final
{
public:
	bool                                          Temp_bool_Variable;                                // 0x0000(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Temp_float_Variable;                               // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector2D_X;                          // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector2D_Y;                          // 0x000C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_K2_GetComponentScale_ReturnValue;         // 0x0010(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_X;                            // 0x001C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_Y;                            // 0x0020(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_Z;                            // 0x0024(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_MapRangeClamped_ReturnValue;              // 0x0028(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_MapRangeClamped_ReturnValue_1;            // 0x002C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_Select_Default;                             // 0x0030(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_MapRangeClamped_ReturnValue_2;            // 0x0034(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_SeparatePoster_C_Adjust_ScaleDependentStuff) == 0x000004, "Wrong alignment on BP_SeparatePoster_C_Adjust_ScaleDependentStuff");
static_assert(sizeof(BP_SeparatePoster_C_Adjust_ScaleDependentStuff) == 0x000038, "Wrong size on BP_SeparatePoster_C_Adjust_ScaleDependentStuff");
static_assert(offsetof(BP_SeparatePoster_C_Adjust_ScaleDependentStuff, Temp_bool_Variable) == 0x000000, "Member 'BP_SeparatePoster_C_Adjust_ScaleDependentStuff::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(BP_SeparatePoster_C_Adjust_ScaleDependentStuff, Temp_float_Variable) == 0x000004, "Member 'BP_SeparatePoster_C_Adjust_ScaleDependentStuff::Temp_float_Variable' has a wrong offset!");
static_assert(offsetof(BP_SeparatePoster_C_Adjust_ScaleDependentStuff, CallFunc_BreakVector2D_X) == 0x000008, "Member 'BP_SeparatePoster_C_Adjust_ScaleDependentStuff::CallFunc_BreakVector2D_X' has a wrong offset!");
static_assert(offsetof(BP_SeparatePoster_C_Adjust_ScaleDependentStuff, CallFunc_BreakVector2D_Y) == 0x00000C, "Member 'BP_SeparatePoster_C_Adjust_ScaleDependentStuff::CallFunc_BreakVector2D_Y' has a wrong offset!");
static_assert(offsetof(BP_SeparatePoster_C_Adjust_ScaleDependentStuff, CallFunc_K2_GetComponentScale_ReturnValue) == 0x000010, "Member 'BP_SeparatePoster_C_Adjust_ScaleDependentStuff::CallFunc_K2_GetComponentScale_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_SeparatePoster_C_Adjust_ScaleDependentStuff, CallFunc_BreakVector_X) == 0x00001C, "Member 'BP_SeparatePoster_C_Adjust_ScaleDependentStuff::CallFunc_BreakVector_X' has a wrong offset!");
static_assert(offsetof(BP_SeparatePoster_C_Adjust_ScaleDependentStuff, CallFunc_BreakVector_Y) == 0x000020, "Member 'BP_SeparatePoster_C_Adjust_ScaleDependentStuff::CallFunc_BreakVector_Y' has a wrong offset!");
static_assert(offsetof(BP_SeparatePoster_C_Adjust_ScaleDependentStuff, CallFunc_BreakVector_Z) == 0x000024, "Member 'BP_SeparatePoster_C_Adjust_ScaleDependentStuff::CallFunc_BreakVector_Z' has a wrong offset!");
static_assert(offsetof(BP_SeparatePoster_C_Adjust_ScaleDependentStuff, CallFunc_MapRangeClamped_ReturnValue) == 0x000028, "Member 'BP_SeparatePoster_C_Adjust_ScaleDependentStuff::CallFunc_MapRangeClamped_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_SeparatePoster_C_Adjust_ScaleDependentStuff, CallFunc_MapRangeClamped_ReturnValue_1) == 0x00002C, "Member 'BP_SeparatePoster_C_Adjust_ScaleDependentStuff::CallFunc_MapRangeClamped_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_SeparatePoster_C_Adjust_ScaleDependentStuff, K2Node_Select_Default) == 0x000030, "Member 'BP_SeparatePoster_C_Adjust_ScaleDependentStuff::K2Node_Select_Default' has a wrong offset!");
static_assert(offsetof(BP_SeparatePoster_C_Adjust_ScaleDependentStuff, CallFunc_MapRangeClamped_ReturnValue_2) == 0x000034, "Member 'BP_SeparatePoster_C_Adjust_ScaleDependentStuff::CallFunc_MapRangeClamped_ReturnValue_2' has a wrong offset!");

// Function BP_SeparatePoster.BP_SeparatePoster_C.DEBUG_PrintArmLength
// 0x0010 (0x0010 - 0x0000)
struct BP_SeparatePoster_C_DEBUG_PrintArmLength final
{
public:
	class FString                                 CallFunc_Conv_FloatToString_ReturnValue;           // 0x0000(0x0010)(ZeroConstructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_SeparatePoster_C_DEBUG_PrintArmLength) == 0x000008, "Wrong alignment on BP_SeparatePoster_C_DEBUG_PrintArmLength");
static_assert(sizeof(BP_SeparatePoster_C_DEBUG_PrintArmLength) == 0x000010, "Wrong size on BP_SeparatePoster_C_DEBUG_PrintArmLength");
static_assert(offsetof(BP_SeparatePoster_C_DEBUG_PrintArmLength, CallFunc_Conv_FloatToString_ReturnValue) == 0x000000, "Member 'BP_SeparatePoster_C_DEBUG_PrintArmLength::CallFunc_Conv_FloatToString_ReturnValue' has a wrong offset!");

// Function BP_SeparatePoster.BP_SeparatePoster_C.DEBUG_ReRenderPoster
// 0x0001 (0x0001 - 0x0000)
struct BP_SeparatePoster_C_DEBUG_ReRenderPoster final
{
public:
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0000(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_SeparatePoster_C_DEBUG_ReRenderPoster) == 0x000001, "Wrong alignment on BP_SeparatePoster_C_DEBUG_ReRenderPoster");
static_assert(sizeof(BP_SeparatePoster_C_DEBUG_ReRenderPoster) == 0x000001, "Wrong size on BP_SeparatePoster_C_DEBUG_ReRenderPoster");
static_assert(offsetof(BP_SeparatePoster_C_DEBUG_ReRenderPoster, CallFunc_IsValid_ReturnValue) == 0x000000, "Member 'BP_SeparatePoster_C_DEBUG_ReRenderPoster::CallFunc_IsValid_ReturnValue' has a wrong offset!");

// Function BP_SeparatePoster.BP_SeparatePoster_C.SetLightEnabled
// 0x0030 (0x0030 - 0x0000)
struct BP_SeparatePoster_C_SetLightEnabled final
{
public:
	bool                                          bNewEnabled;                                       // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable;                                // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_2[0x2];                                        // 0x0002(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Temp_float_Variable;                               // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector2D_X;                          // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector2D_Y;                          // 0x000C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_K2_GetComponentScale_ReturnValue;         // 0x0010(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_X;                            // 0x001C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_Y;                            // 0x0020(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_Z;                            // 0x0024(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_MapRangeClamped_ReturnValue;              // 0x0028(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_Select_Default;                             // 0x002C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_SeparatePoster_C_SetLightEnabled) == 0x000004, "Wrong alignment on BP_SeparatePoster_C_SetLightEnabled");
static_assert(sizeof(BP_SeparatePoster_C_SetLightEnabled) == 0x000030, "Wrong size on BP_SeparatePoster_C_SetLightEnabled");
static_assert(offsetof(BP_SeparatePoster_C_SetLightEnabled, bNewEnabled) == 0x000000, "Member 'BP_SeparatePoster_C_SetLightEnabled::bNewEnabled' has a wrong offset!");
static_assert(offsetof(BP_SeparatePoster_C_SetLightEnabled, Temp_bool_Variable) == 0x000001, "Member 'BP_SeparatePoster_C_SetLightEnabled::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(BP_SeparatePoster_C_SetLightEnabled, Temp_float_Variable) == 0x000004, "Member 'BP_SeparatePoster_C_SetLightEnabled::Temp_float_Variable' has a wrong offset!");
static_assert(offsetof(BP_SeparatePoster_C_SetLightEnabled, CallFunc_BreakVector2D_X) == 0x000008, "Member 'BP_SeparatePoster_C_SetLightEnabled::CallFunc_BreakVector2D_X' has a wrong offset!");
static_assert(offsetof(BP_SeparatePoster_C_SetLightEnabled, CallFunc_BreakVector2D_Y) == 0x00000C, "Member 'BP_SeparatePoster_C_SetLightEnabled::CallFunc_BreakVector2D_Y' has a wrong offset!");
static_assert(offsetof(BP_SeparatePoster_C_SetLightEnabled, CallFunc_K2_GetComponentScale_ReturnValue) == 0x000010, "Member 'BP_SeparatePoster_C_SetLightEnabled::CallFunc_K2_GetComponentScale_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_SeparatePoster_C_SetLightEnabled, CallFunc_BreakVector_X) == 0x00001C, "Member 'BP_SeparatePoster_C_SetLightEnabled::CallFunc_BreakVector_X' has a wrong offset!");
static_assert(offsetof(BP_SeparatePoster_C_SetLightEnabled, CallFunc_BreakVector_Y) == 0x000020, "Member 'BP_SeparatePoster_C_SetLightEnabled::CallFunc_BreakVector_Y' has a wrong offset!");
static_assert(offsetof(BP_SeparatePoster_C_SetLightEnabled, CallFunc_BreakVector_Z) == 0x000024, "Member 'BP_SeparatePoster_C_SetLightEnabled::CallFunc_BreakVector_Z' has a wrong offset!");
static_assert(offsetof(BP_SeparatePoster_C_SetLightEnabled, CallFunc_MapRangeClamped_ReturnValue) == 0x000028, "Member 'BP_SeparatePoster_C_SetLightEnabled::CallFunc_MapRangeClamped_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_SeparatePoster_C_SetLightEnabled, K2Node_Select_Default) == 0x00002C, "Member 'BP_SeparatePoster_C_SetLightEnabled::K2Node_Select_Default' has a wrong offset!");

// Function BP_SeparatePoster.BP_SeparatePoster_C.CheckForShelterPropsOverlaps
// 0x0140 (0x0140 - 0x0000)
struct BP_SeparatePoster_C_CheckForShelterPropsOverlaps final
{
public:
	TSet<class AActor*>                           TempArray;                                         // 0x0000(0x0050)(Edit, BlueprintVisible, DisableEditOnTemplate)
	class UPrimitiveComponent*                    TempComponent;                                     // 0x0050(0x0008)(Edit, BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x0058(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x005C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Array_Index_Variable;                     // 0x0060(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_64[0x4];                                       // 0x0064(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class AActor*>                         CallFunc_Set_ToArray_Result;                       // 0x0068(0x0010)(ReferenceParm)
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x0078(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Array_Index_Variable_1;                   // 0x007C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FTransform                             CallFunc_K2_GetComponentToWorld_ReturnValue;       // 0x0080(0x0030)(IsPlainOldData, NoDestructor)
	class AActor*                                 CallFunc_Array_Get_Item;                           // 0x00B0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Set_Remove_ReturnValue;                   // 0x00B8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_B9[0x7];                                       // 0x00B9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UBP_ShelterHideableProp_Component_C*    CallFunc_GetComponentByClass_ReturnValue;          // 0x00C0(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable_1;                  // 0x00C8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Test_Owner_for_Collisions_with_Posters_Overlaps; // 0x00CC(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Not_PreBool_ReturnValue;                  // 0x00CD(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x00CE(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_CF[0x1];                                       // 0x00CF(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Add_IntInt_ReturnValue_1;                 // 0x00D0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x00D4(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_D5[0x3];                                       // 0x00D5(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class AActor*>                         Temp_object_Variable;                              // 0x00D8(0x0010)(ConstParm, ReferenceParm)
	bool                                          CallFunc_IsValid_ReturnValue_1;                    // 0x00E8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_E9[0x7];                                       // 0x00E9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<EObjectTypeQuery>                      K2Node_MakeArray_Array;                            // 0x00F0(0x0010)(ConstParm, ReferenceParm)
	TArray<class AActor*>                         CallFunc_ComponentOverlapActors_OutActors;         // 0x0100(0x0010)(ReferenceParm)
	bool                                          CallFunc_ComponentOverlapActors_ReturnValue;       // 0x0110(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_111[0x3];                                      // 0x0111(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Array_Length_ReturnValue_1;               // 0x0114(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 CallFunc_Array_Get_Item_1;                         // 0x0118(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue_1;                // 0x0120(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_121[0x7];                                      // 0x0121(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UBP_ShelterHideableProp_Component_C*    CallFunc_GetComponentByClass_ReturnValue_1;        // 0x0128(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue_2;                    // 0x0130(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_SeparatePoster_C_CheckForShelterPropsOverlaps) == 0x000010, "Wrong alignment on BP_SeparatePoster_C_CheckForShelterPropsOverlaps");
static_assert(sizeof(BP_SeparatePoster_C_CheckForShelterPropsOverlaps) == 0x000140, "Wrong size on BP_SeparatePoster_C_CheckForShelterPropsOverlaps");
static_assert(offsetof(BP_SeparatePoster_C_CheckForShelterPropsOverlaps, TempArray) == 0x000000, "Member 'BP_SeparatePoster_C_CheckForShelterPropsOverlaps::TempArray' has a wrong offset!");
static_assert(offsetof(BP_SeparatePoster_C_CheckForShelterPropsOverlaps, TempComponent) == 0x000050, "Member 'BP_SeparatePoster_C_CheckForShelterPropsOverlaps::TempComponent' has a wrong offset!");
static_assert(offsetof(BP_SeparatePoster_C_CheckForShelterPropsOverlaps, Temp_int_Loop_Counter_Variable) == 0x000058, "Member 'BP_SeparatePoster_C_CheckForShelterPropsOverlaps::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(BP_SeparatePoster_C_CheckForShelterPropsOverlaps, CallFunc_Add_IntInt_ReturnValue) == 0x00005C, "Member 'BP_SeparatePoster_C_CheckForShelterPropsOverlaps::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_SeparatePoster_C_CheckForShelterPropsOverlaps, Temp_int_Array_Index_Variable) == 0x000060, "Member 'BP_SeparatePoster_C_CheckForShelterPropsOverlaps::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(BP_SeparatePoster_C_CheckForShelterPropsOverlaps, CallFunc_Set_ToArray_Result) == 0x000068, "Member 'BP_SeparatePoster_C_CheckForShelterPropsOverlaps::CallFunc_Set_ToArray_Result' has a wrong offset!");
static_assert(offsetof(BP_SeparatePoster_C_CheckForShelterPropsOverlaps, CallFunc_Array_Length_ReturnValue) == 0x000078, "Member 'BP_SeparatePoster_C_CheckForShelterPropsOverlaps::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_SeparatePoster_C_CheckForShelterPropsOverlaps, Temp_int_Array_Index_Variable_1) == 0x00007C, "Member 'BP_SeparatePoster_C_CheckForShelterPropsOverlaps::Temp_int_Array_Index_Variable_1' has a wrong offset!");
static_assert(offsetof(BP_SeparatePoster_C_CheckForShelterPropsOverlaps, CallFunc_K2_GetComponentToWorld_ReturnValue) == 0x000080, "Member 'BP_SeparatePoster_C_CheckForShelterPropsOverlaps::CallFunc_K2_GetComponentToWorld_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_SeparatePoster_C_CheckForShelterPropsOverlaps, CallFunc_Array_Get_Item) == 0x0000B0, "Member 'BP_SeparatePoster_C_CheckForShelterPropsOverlaps::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(BP_SeparatePoster_C_CheckForShelterPropsOverlaps, CallFunc_Set_Remove_ReturnValue) == 0x0000B8, "Member 'BP_SeparatePoster_C_CheckForShelterPropsOverlaps::CallFunc_Set_Remove_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_SeparatePoster_C_CheckForShelterPropsOverlaps, CallFunc_GetComponentByClass_ReturnValue) == 0x0000C0, "Member 'BP_SeparatePoster_C_CheckForShelterPropsOverlaps::CallFunc_GetComponentByClass_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_SeparatePoster_C_CheckForShelterPropsOverlaps, Temp_int_Loop_Counter_Variable_1) == 0x0000C8, "Member 'BP_SeparatePoster_C_CheckForShelterPropsOverlaps::Temp_int_Loop_Counter_Variable_1' has a wrong offset!");
static_assert(offsetof(BP_SeparatePoster_C_CheckForShelterPropsOverlaps, CallFunc_Test_Owner_for_Collisions_with_Posters_Overlaps) == 0x0000CC, "Member 'BP_SeparatePoster_C_CheckForShelterPropsOverlaps::CallFunc_Test_Owner_for_Collisions_with_Posters_Overlaps' has a wrong offset!");
static_assert(offsetof(BP_SeparatePoster_C_CheckForShelterPropsOverlaps, CallFunc_Not_PreBool_ReturnValue) == 0x0000CD, "Member 'BP_SeparatePoster_C_CheckForShelterPropsOverlaps::CallFunc_Not_PreBool_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_SeparatePoster_C_CheckForShelterPropsOverlaps, CallFunc_Less_IntInt_ReturnValue) == 0x0000CE, "Member 'BP_SeparatePoster_C_CheckForShelterPropsOverlaps::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_SeparatePoster_C_CheckForShelterPropsOverlaps, CallFunc_Add_IntInt_ReturnValue_1) == 0x0000D0, "Member 'BP_SeparatePoster_C_CheckForShelterPropsOverlaps::CallFunc_Add_IntInt_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_SeparatePoster_C_CheckForShelterPropsOverlaps, CallFunc_IsValid_ReturnValue) == 0x0000D4, "Member 'BP_SeparatePoster_C_CheckForShelterPropsOverlaps::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_SeparatePoster_C_CheckForShelterPropsOverlaps, Temp_object_Variable) == 0x0000D8, "Member 'BP_SeparatePoster_C_CheckForShelterPropsOverlaps::Temp_object_Variable' has a wrong offset!");
static_assert(offsetof(BP_SeparatePoster_C_CheckForShelterPropsOverlaps, CallFunc_IsValid_ReturnValue_1) == 0x0000E8, "Member 'BP_SeparatePoster_C_CheckForShelterPropsOverlaps::CallFunc_IsValid_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_SeparatePoster_C_CheckForShelterPropsOverlaps, K2Node_MakeArray_Array) == 0x0000F0, "Member 'BP_SeparatePoster_C_CheckForShelterPropsOverlaps::K2Node_MakeArray_Array' has a wrong offset!");
static_assert(offsetof(BP_SeparatePoster_C_CheckForShelterPropsOverlaps, CallFunc_ComponentOverlapActors_OutActors) == 0x000100, "Member 'BP_SeparatePoster_C_CheckForShelterPropsOverlaps::CallFunc_ComponentOverlapActors_OutActors' has a wrong offset!");
static_assert(offsetof(BP_SeparatePoster_C_CheckForShelterPropsOverlaps, CallFunc_ComponentOverlapActors_ReturnValue) == 0x000110, "Member 'BP_SeparatePoster_C_CheckForShelterPropsOverlaps::CallFunc_ComponentOverlapActors_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_SeparatePoster_C_CheckForShelterPropsOverlaps, CallFunc_Array_Length_ReturnValue_1) == 0x000114, "Member 'BP_SeparatePoster_C_CheckForShelterPropsOverlaps::CallFunc_Array_Length_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_SeparatePoster_C_CheckForShelterPropsOverlaps, CallFunc_Array_Get_Item_1) == 0x000118, "Member 'BP_SeparatePoster_C_CheckForShelterPropsOverlaps::CallFunc_Array_Get_Item_1' has a wrong offset!");
static_assert(offsetof(BP_SeparatePoster_C_CheckForShelterPropsOverlaps, CallFunc_Less_IntInt_ReturnValue_1) == 0x000120, "Member 'BP_SeparatePoster_C_CheckForShelterPropsOverlaps::CallFunc_Less_IntInt_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_SeparatePoster_C_CheckForShelterPropsOverlaps, CallFunc_GetComponentByClass_ReturnValue_1) == 0x000128, "Member 'BP_SeparatePoster_C_CheckForShelterPropsOverlaps::CallFunc_GetComponentByClass_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_SeparatePoster_C_CheckForShelterPropsOverlaps, CallFunc_IsValid_ReturnValue_2) == 0x000130, "Member 'BP_SeparatePoster_C_CheckForShelterPropsOverlaps::CallFunc_IsValid_ReturnValue_2' has a wrong offset!");

// Function BP_SeparatePoster.BP_SeparatePoster_C.Cycle to Another Poster ModelID
// 0x0010 (0x0010 - 0x0000)
struct BP_SeparatePoster_C_Cycle_to_Another_Poster_ModelID final
{
public:
	int32                                         NewPosterModel;                                    // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Map_Length_ReturnValue;                   // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Percent_IntInt_ReturnValue;               // 0x000C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_SeparatePoster_C_Cycle_to_Another_Poster_ModelID) == 0x000004, "Wrong alignment on BP_SeparatePoster_C_Cycle_to_Another_Poster_ModelID");
static_assert(sizeof(BP_SeparatePoster_C_Cycle_to_Another_Poster_ModelID) == 0x000010, "Wrong size on BP_SeparatePoster_C_Cycle_to_Another_Poster_ModelID");
static_assert(offsetof(BP_SeparatePoster_C_Cycle_to_Another_Poster_ModelID, NewPosterModel) == 0x000000, "Member 'BP_SeparatePoster_C_Cycle_to_Another_Poster_ModelID::NewPosterModel' has a wrong offset!");
static_assert(offsetof(BP_SeparatePoster_C_Cycle_to_Another_Poster_ModelID, CallFunc_Map_Length_ReturnValue) == 0x000004, "Member 'BP_SeparatePoster_C_Cycle_to_Another_Poster_ModelID::CallFunc_Map_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_SeparatePoster_C_Cycle_to_Another_Poster_ModelID, CallFunc_Add_IntInt_ReturnValue) == 0x000008, "Member 'BP_SeparatePoster_C_Cycle_to_Another_Poster_ModelID::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_SeparatePoster_C_Cycle_to_Another_Poster_ModelID, CallFunc_Percent_IntInt_ReturnValue) == 0x00000C, "Member 'BP_SeparatePoster_C_Cycle_to_Another_Poster_ModelID::CallFunc_Percent_IntInt_ReturnValue' has a wrong offset!");

// Function BP_SeparatePoster.BP_SeparatePoster_C.CheckForDefaultPosterMaterial
// 0x0018 (0x0018 - 0x0000)
struct BP_SeparatePoster_C_CheckForDefaultPosterMaterial final
{
public:
	bool                                          HasEmptyTexture;                                   // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_2[0x6];                                        // 0x0002(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class UTexture*                               CallFunc_K2_GetTextureParameterValue_ReturnValue;  // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_ObjectObject_ReturnValue;      // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_SeparatePoster_C_CheckForDefaultPosterMaterial) == 0x000008, "Wrong alignment on BP_SeparatePoster_C_CheckForDefaultPosterMaterial");
static_assert(sizeof(BP_SeparatePoster_C_CheckForDefaultPosterMaterial) == 0x000018, "Wrong size on BP_SeparatePoster_C_CheckForDefaultPosterMaterial");
static_assert(offsetof(BP_SeparatePoster_C_CheckForDefaultPosterMaterial, HasEmptyTexture) == 0x000000, "Member 'BP_SeparatePoster_C_CheckForDefaultPosterMaterial::HasEmptyTexture' has a wrong offset!");
static_assert(offsetof(BP_SeparatePoster_C_CheckForDefaultPosterMaterial, CallFunc_IsValid_ReturnValue) == 0x000001, "Member 'BP_SeparatePoster_C_CheckForDefaultPosterMaterial::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_SeparatePoster_C_CheckForDefaultPosterMaterial, CallFunc_K2_GetTextureParameterValue_ReturnValue) == 0x000008, "Member 'BP_SeparatePoster_C_CheckForDefaultPosterMaterial::CallFunc_K2_GetTextureParameterValue_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_SeparatePoster_C_CheckForDefaultPosterMaterial, CallFunc_EqualEqual_ObjectObject_ReturnValue) == 0x000010, "Member 'BP_SeparatePoster_C_CheckForDefaultPosterMaterial::CallFunc_EqualEqual_ObjectObject_ReturnValue' has a wrong offset!");

}

