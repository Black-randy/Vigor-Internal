#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_TC_Firework

#include "Basic.hpp"

#include "CoreUObject_structs.hpp"
#include "Engine_structs.hpp"
#include "PhysicsCore_structs.hpp"


namespace SDK::Params
{

// Function BP_TC_Firework.BP_TC_Firework_C.ExecuteUbergraph_BP_TC_Firework
// 0x0028 (0x0028 - 0x0000)
struct BP_TC_Firework_C_ExecuteUbergraph_BP_TC_Firework final
{
public:
	int32                                         EntryPoint;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TDelegate<void()>                             K2Node_CreateDelegate_OutputDelegate;              // 0x0004(0x0010)(ZeroConstructor, NoDestructor)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTimerHandle                           CallFunc_K2_SetTimerDelegate_ReturnValue;          // 0x0018(0x0008)(NoDestructor, HasGetValueTypeHash)
	EEndPlayReason                                K2Node_Event_EndPlayReason;                        // 0x0020(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_ThrowLinetracers_CanBeLaunched;           // 0x0021(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_PlacementIsCorrect_CanBePlaced;           // 0x0022(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_TC_Firework_C_ExecuteUbergraph_BP_TC_Firework) == 0x000008, "Wrong alignment on BP_TC_Firework_C_ExecuteUbergraph_BP_TC_Firework");
static_assert(sizeof(BP_TC_Firework_C_ExecuteUbergraph_BP_TC_Firework) == 0x000028, "Wrong size on BP_TC_Firework_C_ExecuteUbergraph_BP_TC_Firework");
static_assert(offsetof(BP_TC_Firework_C_ExecuteUbergraph_BP_TC_Firework, EntryPoint) == 0x000000, "Member 'BP_TC_Firework_C_ExecuteUbergraph_BP_TC_Firework::EntryPoint' has a wrong offset!");
static_assert(offsetof(BP_TC_Firework_C_ExecuteUbergraph_BP_TC_Firework, K2Node_CreateDelegate_OutputDelegate) == 0x000004, "Member 'BP_TC_Firework_C_ExecuteUbergraph_BP_TC_Firework::K2Node_CreateDelegate_OutputDelegate' has a wrong offset!");
static_assert(offsetof(BP_TC_Firework_C_ExecuteUbergraph_BP_TC_Firework, CallFunc_K2_SetTimerDelegate_ReturnValue) == 0x000018, "Member 'BP_TC_Firework_C_ExecuteUbergraph_BP_TC_Firework::CallFunc_K2_SetTimerDelegate_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_TC_Firework_C_ExecuteUbergraph_BP_TC_Firework, K2Node_Event_EndPlayReason) == 0x000020, "Member 'BP_TC_Firework_C_ExecuteUbergraph_BP_TC_Firework::K2Node_Event_EndPlayReason' has a wrong offset!");
static_assert(offsetof(BP_TC_Firework_C_ExecuteUbergraph_BP_TC_Firework, CallFunc_ThrowLinetracers_CanBeLaunched) == 0x000021, "Member 'BP_TC_Firework_C_ExecuteUbergraph_BP_TC_Firework::CallFunc_ThrowLinetracers_CanBeLaunched' has a wrong offset!");
static_assert(offsetof(BP_TC_Firework_C_ExecuteUbergraph_BP_TC_Firework, CallFunc_PlacementIsCorrect_CanBePlaced) == 0x000022, "Member 'BP_TC_Firework_C_ExecuteUbergraph_BP_TC_Firework::CallFunc_PlacementIsCorrect_CanBePlaced' has a wrong offset!");

// Function BP_TC_Firework.BP_TC_Firework_C.ReceiveEndPlay
// 0x0001 (0x0001 - 0x0000)
struct BP_TC_Firework_C_ReceiveEndPlay final
{
public:
	EEndPlayReason                                EndPlayReason;                                     // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_TC_Firework_C_ReceiveEndPlay) == 0x000001, "Wrong alignment on BP_TC_Firework_C_ReceiveEndPlay");
static_assert(sizeof(BP_TC_Firework_C_ReceiveEndPlay) == 0x000001, "Wrong size on BP_TC_Firework_C_ReceiveEndPlay");
static_assert(offsetof(BP_TC_Firework_C_ReceiveEndPlay, EndPlayReason) == 0x000000, "Member 'BP_TC_Firework_C_ReceiveEndPlay::EndPlayReason' has a wrong offset!");

// Function BP_TC_Firework.BP_TC_Firework_C.Trap_Placement_CanBePlaced
// 0x0138 (0x0138 - 0x0000)
struct BP_TC_Firework_C_Trap_Placement_CanBePlaced final
{
public:
	struct FHitResult                             Hit;                                               // 0x0000(0x008C)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, ContainsInstancedReference)
	float                                         MaxZNormal;                                        // 0x008C(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<TSoftClassPtr<class UClass>>           ActorsThatBlocksThePlacement;                      // 0x0090(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
	TArray<EPhysicalSurface>                      SurfacesThatBlocksThePlacement;                    // 0x00A0(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
	bool                                          Trap_CanBePlacedInWater;                           // 0x00B0(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Trap_CanBePlacedVertically;                        // 0x00B1(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CanBePlaced;                                       // 0x00B2(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Trap_Placement_CanBePlaced_CanBePlaced;   // 0x00B3(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanAND_ReturnValue;                   // 0x00B4(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BreakHitResult_bBlockingHit;              // 0x00B5(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BreakHitResult_bInitialOverlap;           // 0x00B6(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_B7[0x1];                                       // 0x00B7(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_BreakHitResult_Time;                      // 0x00B8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakHitResult_Distance;                  // 0x00BC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_Location;                  // 0x00C0(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_ImpactPoint;               // 0x00CC(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_Normal;                    // 0x00D8(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_ImpactNormal;              // 0x00E4(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UPhysicalMaterial*                      CallFunc_BreakHitResult_PhysMat;                   // 0x00F0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 CallFunc_BreakHitResult_HitActor;                  // 0x00F8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UPrimitiveComponent*                    CallFunc_BreakHitResult_HitComponent;              // 0x0100(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EPhysicalSurface                              CallFunc_BreakHitResult_ShapeSurfaceType;          // 0x0108(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_109[0x3];                                      // 0x0109(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   CallFunc_BreakHitResult_HitBoneName;               // 0x010C(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_BreakHitResult_HitItem;                   // 0x0114(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_BreakHitResult_ElementIndex;              // 0x0118(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_BreakHitResult_FaceIndex;                 // 0x011C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_TraceStart;                // 0x0120(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_TraceEnd;                  // 0x012C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_TC_Firework_C_Trap_Placement_CanBePlaced) == 0x000008, "Wrong alignment on BP_TC_Firework_C_Trap_Placement_CanBePlaced");
static_assert(sizeof(BP_TC_Firework_C_Trap_Placement_CanBePlaced) == 0x000138, "Wrong size on BP_TC_Firework_C_Trap_Placement_CanBePlaced");
static_assert(offsetof(BP_TC_Firework_C_Trap_Placement_CanBePlaced, Hit) == 0x000000, "Member 'BP_TC_Firework_C_Trap_Placement_CanBePlaced::Hit' has a wrong offset!");
static_assert(offsetof(BP_TC_Firework_C_Trap_Placement_CanBePlaced, MaxZNormal) == 0x00008C, "Member 'BP_TC_Firework_C_Trap_Placement_CanBePlaced::MaxZNormal' has a wrong offset!");
static_assert(offsetof(BP_TC_Firework_C_Trap_Placement_CanBePlaced, ActorsThatBlocksThePlacement) == 0x000090, "Member 'BP_TC_Firework_C_Trap_Placement_CanBePlaced::ActorsThatBlocksThePlacement' has a wrong offset!");
static_assert(offsetof(BP_TC_Firework_C_Trap_Placement_CanBePlaced, SurfacesThatBlocksThePlacement) == 0x0000A0, "Member 'BP_TC_Firework_C_Trap_Placement_CanBePlaced::SurfacesThatBlocksThePlacement' has a wrong offset!");
static_assert(offsetof(BP_TC_Firework_C_Trap_Placement_CanBePlaced, Trap_CanBePlacedInWater) == 0x0000B0, "Member 'BP_TC_Firework_C_Trap_Placement_CanBePlaced::Trap_CanBePlacedInWater' has a wrong offset!");
static_assert(offsetof(BP_TC_Firework_C_Trap_Placement_CanBePlaced, Trap_CanBePlacedVertically) == 0x0000B1, "Member 'BP_TC_Firework_C_Trap_Placement_CanBePlaced::Trap_CanBePlacedVertically' has a wrong offset!");
static_assert(offsetof(BP_TC_Firework_C_Trap_Placement_CanBePlaced, CanBePlaced) == 0x0000B2, "Member 'BP_TC_Firework_C_Trap_Placement_CanBePlaced::CanBePlaced' has a wrong offset!");
static_assert(offsetof(BP_TC_Firework_C_Trap_Placement_CanBePlaced, CallFunc_Trap_Placement_CanBePlaced_CanBePlaced) == 0x0000B3, "Member 'BP_TC_Firework_C_Trap_Placement_CanBePlaced::CallFunc_Trap_Placement_CanBePlaced_CanBePlaced' has a wrong offset!");
static_assert(offsetof(BP_TC_Firework_C_Trap_Placement_CanBePlaced, CallFunc_BooleanAND_ReturnValue) == 0x0000B4, "Member 'BP_TC_Firework_C_Trap_Placement_CanBePlaced::CallFunc_BooleanAND_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_TC_Firework_C_Trap_Placement_CanBePlaced, CallFunc_BreakHitResult_bBlockingHit) == 0x0000B5, "Member 'BP_TC_Firework_C_Trap_Placement_CanBePlaced::CallFunc_BreakHitResult_bBlockingHit' has a wrong offset!");
static_assert(offsetof(BP_TC_Firework_C_Trap_Placement_CanBePlaced, CallFunc_BreakHitResult_bInitialOverlap) == 0x0000B6, "Member 'BP_TC_Firework_C_Trap_Placement_CanBePlaced::CallFunc_BreakHitResult_bInitialOverlap' has a wrong offset!");
static_assert(offsetof(BP_TC_Firework_C_Trap_Placement_CanBePlaced, CallFunc_BreakHitResult_Time) == 0x0000B8, "Member 'BP_TC_Firework_C_Trap_Placement_CanBePlaced::CallFunc_BreakHitResult_Time' has a wrong offset!");
static_assert(offsetof(BP_TC_Firework_C_Trap_Placement_CanBePlaced, CallFunc_BreakHitResult_Distance) == 0x0000BC, "Member 'BP_TC_Firework_C_Trap_Placement_CanBePlaced::CallFunc_BreakHitResult_Distance' has a wrong offset!");
static_assert(offsetof(BP_TC_Firework_C_Trap_Placement_CanBePlaced, CallFunc_BreakHitResult_Location) == 0x0000C0, "Member 'BP_TC_Firework_C_Trap_Placement_CanBePlaced::CallFunc_BreakHitResult_Location' has a wrong offset!");
static_assert(offsetof(BP_TC_Firework_C_Trap_Placement_CanBePlaced, CallFunc_BreakHitResult_ImpactPoint) == 0x0000CC, "Member 'BP_TC_Firework_C_Trap_Placement_CanBePlaced::CallFunc_BreakHitResult_ImpactPoint' has a wrong offset!");
static_assert(offsetof(BP_TC_Firework_C_Trap_Placement_CanBePlaced, CallFunc_BreakHitResult_Normal) == 0x0000D8, "Member 'BP_TC_Firework_C_Trap_Placement_CanBePlaced::CallFunc_BreakHitResult_Normal' has a wrong offset!");
static_assert(offsetof(BP_TC_Firework_C_Trap_Placement_CanBePlaced, CallFunc_BreakHitResult_ImpactNormal) == 0x0000E4, "Member 'BP_TC_Firework_C_Trap_Placement_CanBePlaced::CallFunc_BreakHitResult_ImpactNormal' has a wrong offset!");
static_assert(offsetof(BP_TC_Firework_C_Trap_Placement_CanBePlaced, CallFunc_BreakHitResult_PhysMat) == 0x0000F0, "Member 'BP_TC_Firework_C_Trap_Placement_CanBePlaced::CallFunc_BreakHitResult_PhysMat' has a wrong offset!");
static_assert(offsetof(BP_TC_Firework_C_Trap_Placement_CanBePlaced, CallFunc_BreakHitResult_HitActor) == 0x0000F8, "Member 'BP_TC_Firework_C_Trap_Placement_CanBePlaced::CallFunc_BreakHitResult_HitActor' has a wrong offset!");
static_assert(offsetof(BP_TC_Firework_C_Trap_Placement_CanBePlaced, CallFunc_BreakHitResult_HitComponent) == 0x000100, "Member 'BP_TC_Firework_C_Trap_Placement_CanBePlaced::CallFunc_BreakHitResult_HitComponent' has a wrong offset!");
static_assert(offsetof(BP_TC_Firework_C_Trap_Placement_CanBePlaced, CallFunc_BreakHitResult_ShapeSurfaceType) == 0x000108, "Member 'BP_TC_Firework_C_Trap_Placement_CanBePlaced::CallFunc_BreakHitResult_ShapeSurfaceType' has a wrong offset!");
static_assert(offsetof(BP_TC_Firework_C_Trap_Placement_CanBePlaced, CallFunc_BreakHitResult_HitBoneName) == 0x00010C, "Member 'BP_TC_Firework_C_Trap_Placement_CanBePlaced::CallFunc_BreakHitResult_HitBoneName' has a wrong offset!");
static_assert(offsetof(BP_TC_Firework_C_Trap_Placement_CanBePlaced, CallFunc_BreakHitResult_HitItem) == 0x000114, "Member 'BP_TC_Firework_C_Trap_Placement_CanBePlaced::CallFunc_BreakHitResult_HitItem' has a wrong offset!");
static_assert(offsetof(BP_TC_Firework_C_Trap_Placement_CanBePlaced, CallFunc_BreakHitResult_ElementIndex) == 0x000118, "Member 'BP_TC_Firework_C_Trap_Placement_CanBePlaced::CallFunc_BreakHitResult_ElementIndex' has a wrong offset!");
static_assert(offsetof(BP_TC_Firework_C_Trap_Placement_CanBePlaced, CallFunc_BreakHitResult_FaceIndex) == 0x00011C, "Member 'BP_TC_Firework_C_Trap_Placement_CanBePlaced::CallFunc_BreakHitResult_FaceIndex' has a wrong offset!");
static_assert(offsetof(BP_TC_Firework_C_Trap_Placement_CanBePlaced, CallFunc_BreakHitResult_TraceStart) == 0x000120, "Member 'BP_TC_Firework_C_Trap_Placement_CanBePlaced::CallFunc_BreakHitResult_TraceStart' has a wrong offset!");
static_assert(offsetof(BP_TC_Firework_C_Trap_Placement_CanBePlaced, CallFunc_BreakHitResult_TraceEnd) == 0x00012C, "Member 'BP_TC_Firework_C_Trap_Placement_CanBePlaced::CallFunc_BreakHitResult_TraceEnd' has a wrong offset!");

// Function BP_TC_Firework.BP_TC_Firework_C.ThrowLinetracers
// 0x0190 (0x0190 - 0x0000)
struct BP_TC_Firework_C_ThrowLinetracers final
{
public:
	TArray<struct FVector>                        Array;                                             // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
	bool                                          CanBeLaunched_0;                                   // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_11[0x3];                                       // 0x0011(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   Temp_name_Variable;                                // 0x0014(0x0008)(ConstParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x001C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<class AActor*>                         Temp_object_Variable;                              // 0x0020(0x0010)(ConstParm, ReferenceParm)
	int32                                         Temp_int_Array_Index_Variable;                     // 0x0030(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x0034(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Array_Get_Item;                           // 0x0038(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x0044(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_45[0x3];                                       // 0x0045(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x0048(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4C[0x4];                                       // 0x004C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<EObjectTypeQuery>                      K2Node_MakeArray_Array;                            // 0x0050(0x0010)(ConstParm, ReferenceParm)
	struct FVector                                CallFunc_Add_VectorVector_ReturnValue;             // 0x0060(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Add_VectorVector_ReturnValue_1;           // 0x006C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FHitResult                             CallFunc_LineTraceSingleForObjects_OutHit;         // 0x0078(0x008C)(IsPlainOldData, NoDestructor, ContainsInstancedReference)
	bool                                          CallFunc_LineTraceSingleForObjects_ReturnValue;    // 0x0104(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BreakHitResult_bBlockingHit;              // 0x0105(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BreakHitResult_bInitialOverlap;           // 0x0106(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_107[0x1];                                      // 0x0107(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_BreakHitResult_Time;                      // 0x0108(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakHitResult_Distance;                  // 0x010C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_Location;                  // 0x0110(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_ImpactPoint;               // 0x011C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_Normal;                    // 0x0128(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_ImpactNormal;              // 0x0134(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UPhysicalMaterial*                      CallFunc_BreakHitResult_PhysMat;                   // 0x0140(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 CallFunc_BreakHitResult_HitActor;                  // 0x0148(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UPrimitiveComponent*                    CallFunc_BreakHitResult_HitComponent;              // 0x0150(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EPhysicalSurface                              CallFunc_BreakHitResult_ShapeSurfaceType;          // 0x0158(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_159[0x3];                                      // 0x0159(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   CallFunc_BreakHitResult_HitBoneName;               // 0x015C(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_BreakHitResult_HitItem;                   // 0x0164(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_BreakHitResult_ElementIndex;              // 0x0168(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_BreakHitResult_FaceIndex;                 // 0x016C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_TraceStart;                // 0x0170(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_TraceEnd;                  // 0x017C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Array_Contains_ReturnValue;               // 0x0188(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Not_PreBool_ReturnValue;                  // 0x0189(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_TC_Firework_C_ThrowLinetracers) == 0x000008, "Wrong alignment on BP_TC_Firework_C_ThrowLinetracers");
static_assert(sizeof(BP_TC_Firework_C_ThrowLinetracers) == 0x000190, "Wrong size on BP_TC_Firework_C_ThrowLinetracers");
static_assert(offsetof(BP_TC_Firework_C_ThrowLinetracers, Array) == 0x000000, "Member 'BP_TC_Firework_C_ThrowLinetracers::Array' has a wrong offset!");
static_assert(offsetof(BP_TC_Firework_C_ThrowLinetracers, CanBeLaunched_0) == 0x000010, "Member 'BP_TC_Firework_C_ThrowLinetracers::CanBeLaunched_0' has a wrong offset!");
static_assert(offsetof(BP_TC_Firework_C_ThrowLinetracers, Temp_name_Variable) == 0x000014, "Member 'BP_TC_Firework_C_ThrowLinetracers::Temp_name_Variable' has a wrong offset!");
static_assert(offsetof(BP_TC_Firework_C_ThrowLinetracers, CallFunc_Array_Length_ReturnValue) == 0x00001C, "Member 'BP_TC_Firework_C_ThrowLinetracers::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_TC_Firework_C_ThrowLinetracers, Temp_object_Variable) == 0x000020, "Member 'BP_TC_Firework_C_ThrowLinetracers::Temp_object_Variable' has a wrong offset!");
static_assert(offsetof(BP_TC_Firework_C_ThrowLinetracers, Temp_int_Array_Index_Variable) == 0x000030, "Member 'BP_TC_Firework_C_ThrowLinetracers::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(BP_TC_Firework_C_ThrowLinetracers, Temp_int_Loop_Counter_Variable) == 0x000034, "Member 'BP_TC_Firework_C_ThrowLinetracers::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(BP_TC_Firework_C_ThrowLinetracers, CallFunc_Array_Get_Item) == 0x000038, "Member 'BP_TC_Firework_C_ThrowLinetracers::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(BP_TC_Firework_C_ThrowLinetracers, CallFunc_Less_IntInt_ReturnValue) == 0x000044, "Member 'BP_TC_Firework_C_ThrowLinetracers::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_TC_Firework_C_ThrowLinetracers, CallFunc_Add_IntInt_ReturnValue) == 0x000048, "Member 'BP_TC_Firework_C_ThrowLinetracers::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_TC_Firework_C_ThrowLinetracers, K2Node_MakeArray_Array) == 0x000050, "Member 'BP_TC_Firework_C_ThrowLinetracers::K2Node_MakeArray_Array' has a wrong offset!");
static_assert(offsetof(BP_TC_Firework_C_ThrowLinetracers, CallFunc_Add_VectorVector_ReturnValue) == 0x000060, "Member 'BP_TC_Firework_C_ThrowLinetracers::CallFunc_Add_VectorVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_TC_Firework_C_ThrowLinetracers, CallFunc_Add_VectorVector_ReturnValue_1) == 0x00006C, "Member 'BP_TC_Firework_C_ThrowLinetracers::CallFunc_Add_VectorVector_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_TC_Firework_C_ThrowLinetracers, CallFunc_LineTraceSingleForObjects_OutHit) == 0x000078, "Member 'BP_TC_Firework_C_ThrowLinetracers::CallFunc_LineTraceSingleForObjects_OutHit' has a wrong offset!");
static_assert(offsetof(BP_TC_Firework_C_ThrowLinetracers, CallFunc_LineTraceSingleForObjects_ReturnValue) == 0x000104, "Member 'BP_TC_Firework_C_ThrowLinetracers::CallFunc_LineTraceSingleForObjects_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_TC_Firework_C_ThrowLinetracers, CallFunc_BreakHitResult_bBlockingHit) == 0x000105, "Member 'BP_TC_Firework_C_ThrowLinetracers::CallFunc_BreakHitResult_bBlockingHit' has a wrong offset!");
static_assert(offsetof(BP_TC_Firework_C_ThrowLinetracers, CallFunc_BreakHitResult_bInitialOverlap) == 0x000106, "Member 'BP_TC_Firework_C_ThrowLinetracers::CallFunc_BreakHitResult_bInitialOverlap' has a wrong offset!");
static_assert(offsetof(BP_TC_Firework_C_ThrowLinetracers, CallFunc_BreakHitResult_Time) == 0x000108, "Member 'BP_TC_Firework_C_ThrowLinetracers::CallFunc_BreakHitResult_Time' has a wrong offset!");
static_assert(offsetof(BP_TC_Firework_C_ThrowLinetracers, CallFunc_BreakHitResult_Distance) == 0x00010C, "Member 'BP_TC_Firework_C_ThrowLinetracers::CallFunc_BreakHitResult_Distance' has a wrong offset!");
static_assert(offsetof(BP_TC_Firework_C_ThrowLinetracers, CallFunc_BreakHitResult_Location) == 0x000110, "Member 'BP_TC_Firework_C_ThrowLinetracers::CallFunc_BreakHitResult_Location' has a wrong offset!");
static_assert(offsetof(BP_TC_Firework_C_ThrowLinetracers, CallFunc_BreakHitResult_ImpactPoint) == 0x00011C, "Member 'BP_TC_Firework_C_ThrowLinetracers::CallFunc_BreakHitResult_ImpactPoint' has a wrong offset!");
static_assert(offsetof(BP_TC_Firework_C_ThrowLinetracers, CallFunc_BreakHitResult_Normal) == 0x000128, "Member 'BP_TC_Firework_C_ThrowLinetracers::CallFunc_BreakHitResult_Normal' has a wrong offset!");
static_assert(offsetof(BP_TC_Firework_C_ThrowLinetracers, CallFunc_BreakHitResult_ImpactNormal) == 0x000134, "Member 'BP_TC_Firework_C_ThrowLinetracers::CallFunc_BreakHitResult_ImpactNormal' has a wrong offset!");
static_assert(offsetof(BP_TC_Firework_C_ThrowLinetracers, CallFunc_BreakHitResult_PhysMat) == 0x000140, "Member 'BP_TC_Firework_C_ThrowLinetracers::CallFunc_BreakHitResult_PhysMat' has a wrong offset!");
static_assert(offsetof(BP_TC_Firework_C_ThrowLinetracers, CallFunc_BreakHitResult_HitActor) == 0x000148, "Member 'BP_TC_Firework_C_ThrowLinetracers::CallFunc_BreakHitResult_HitActor' has a wrong offset!");
static_assert(offsetof(BP_TC_Firework_C_ThrowLinetracers, CallFunc_BreakHitResult_HitComponent) == 0x000150, "Member 'BP_TC_Firework_C_ThrowLinetracers::CallFunc_BreakHitResult_HitComponent' has a wrong offset!");
static_assert(offsetof(BP_TC_Firework_C_ThrowLinetracers, CallFunc_BreakHitResult_ShapeSurfaceType) == 0x000158, "Member 'BP_TC_Firework_C_ThrowLinetracers::CallFunc_BreakHitResult_ShapeSurfaceType' has a wrong offset!");
static_assert(offsetof(BP_TC_Firework_C_ThrowLinetracers, CallFunc_BreakHitResult_HitBoneName) == 0x00015C, "Member 'BP_TC_Firework_C_ThrowLinetracers::CallFunc_BreakHitResult_HitBoneName' has a wrong offset!");
static_assert(offsetof(BP_TC_Firework_C_ThrowLinetracers, CallFunc_BreakHitResult_HitItem) == 0x000164, "Member 'BP_TC_Firework_C_ThrowLinetracers::CallFunc_BreakHitResult_HitItem' has a wrong offset!");
static_assert(offsetof(BP_TC_Firework_C_ThrowLinetracers, CallFunc_BreakHitResult_ElementIndex) == 0x000168, "Member 'BP_TC_Firework_C_ThrowLinetracers::CallFunc_BreakHitResult_ElementIndex' has a wrong offset!");
static_assert(offsetof(BP_TC_Firework_C_ThrowLinetracers, CallFunc_BreakHitResult_FaceIndex) == 0x00016C, "Member 'BP_TC_Firework_C_ThrowLinetracers::CallFunc_BreakHitResult_FaceIndex' has a wrong offset!");
static_assert(offsetof(BP_TC_Firework_C_ThrowLinetracers, CallFunc_BreakHitResult_TraceStart) == 0x000170, "Member 'BP_TC_Firework_C_ThrowLinetracers::CallFunc_BreakHitResult_TraceStart' has a wrong offset!");
static_assert(offsetof(BP_TC_Firework_C_ThrowLinetracers, CallFunc_BreakHitResult_TraceEnd) == 0x00017C, "Member 'BP_TC_Firework_C_ThrowLinetracers::CallFunc_BreakHitResult_TraceEnd' has a wrong offset!");
static_assert(offsetof(BP_TC_Firework_C_ThrowLinetracers, CallFunc_Array_Contains_ReturnValue) == 0x000188, "Member 'BP_TC_Firework_C_ThrowLinetracers::CallFunc_Array_Contains_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_TC_Firework_C_ThrowLinetracers, CallFunc_Not_PreBool_ReturnValue) == 0x000189, "Member 'BP_TC_Firework_C_ThrowLinetracers::CallFunc_Not_PreBool_ReturnValue' has a wrong offset!");

// Function BP_TC_Firework.BP_TC_Firework_C.PlacementIsCorrect
// 0x0120 (0x0120 - 0x0000)
struct BP_TC_Firework_C_PlacementIsCorrect final
{
public:
	bool                                          CanBePlaced;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Hits;                                              // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Array_Index_Variable;                     // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x000C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class AActor*>                         Temp_object_Variable;                              // 0x0018(0x0010)(ConstParm, ReferenceParm)
	struct FRotator                               CallFunc_K2_GetActorRotation_ReturnValue;          // 0x0028(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_34[0x4];                                       // 0x0034(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FVector>                        K2Node_MakeArray_Array;                            // 0x0038(0x0010)(ReferenceParm)
	TArray<EObjectTypeQuery>                      K2Node_MakeArray_Array_1;                          // 0x0048(0x0010)(ConstParm, ReferenceParm)
	struct FVector                                CallFunc_Array_Get_Item;                           // 0x0058(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x0064(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_GreaterGreater_VectorRotator_ReturnValue; // 0x0068(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x0074(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_75[0x3];                                       // 0x0075(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_Add_VectorVector_ReturnValue;             // 0x0078(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Subtract_VectorVector_ReturnValue;        // 0x0084(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FHitResult                             CallFunc_LineTraceSingleForObjects_OutHit;         // 0x0090(0x008C)(IsPlainOldData, NoDestructor, ContainsInstancedReference)
	bool                                          CallFunc_LineTraceSingleForObjects_ReturnValue;    // 0x011C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_TC_Firework_C_PlacementIsCorrect) == 0x000008, "Wrong alignment on BP_TC_Firework_C_PlacementIsCorrect");
static_assert(sizeof(BP_TC_Firework_C_PlacementIsCorrect) == 0x000120, "Wrong size on BP_TC_Firework_C_PlacementIsCorrect");
static_assert(offsetof(BP_TC_Firework_C_PlacementIsCorrect, CanBePlaced) == 0x000000, "Member 'BP_TC_Firework_C_PlacementIsCorrect::CanBePlaced' has a wrong offset!");
static_assert(offsetof(BP_TC_Firework_C_PlacementIsCorrect, Hits) == 0x000004, "Member 'BP_TC_Firework_C_PlacementIsCorrect::Hits' has a wrong offset!");
static_assert(offsetof(BP_TC_Firework_C_PlacementIsCorrect, Temp_int_Array_Index_Variable) == 0x000008, "Member 'BP_TC_Firework_C_PlacementIsCorrect::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(BP_TC_Firework_C_PlacementIsCorrect, Temp_int_Loop_Counter_Variable) == 0x00000C, "Member 'BP_TC_Firework_C_PlacementIsCorrect::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(BP_TC_Firework_C_PlacementIsCorrect, CallFunc_Add_IntInt_ReturnValue) == 0x000010, "Member 'BP_TC_Firework_C_PlacementIsCorrect::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_TC_Firework_C_PlacementIsCorrect, Temp_object_Variable) == 0x000018, "Member 'BP_TC_Firework_C_PlacementIsCorrect::Temp_object_Variable' has a wrong offset!");
static_assert(offsetof(BP_TC_Firework_C_PlacementIsCorrect, CallFunc_K2_GetActorRotation_ReturnValue) == 0x000028, "Member 'BP_TC_Firework_C_PlacementIsCorrect::CallFunc_K2_GetActorRotation_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_TC_Firework_C_PlacementIsCorrect, K2Node_MakeArray_Array) == 0x000038, "Member 'BP_TC_Firework_C_PlacementIsCorrect::K2Node_MakeArray_Array' has a wrong offset!");
static_assert(offsetof(BP_TC_Firework_C_PlacementIsCorrect, K2Node_MakeArray_Array_1) == 0x000048, "Member 'BP_TC_Firework_C_PlacementIsCorrect::K2Node_MakeArray_Array_1' has a wrong offset!");
static_assert(offsetof(BP_TC_Firework_C_PlacementIsCorrect, CallFunc_Array_Get_Item) == 0x000058, "Member 'BP_TC_Firework_C_PlacementIsCorrect::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(BP_TC_Firework_C_PlacementIsCorrect, CallFunc_Array_Length_ReturnValue) == 0x000064, "Member 'BP_TC_Firework_C_PlacementIsCorrect::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_TC_Firework_C_PlacementIsCorrect, CallFunc_GreaterGreater_VectorRotator_ReturnValue) == 0x000068, "Member 'BP_TC_Firework_C_PlacementIsCorrect::CallFunc_GreaterGreater_VectorRotator_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_TC_Firework_C_PlacementIsCorrect, CallFunc_Less_IntInt_ReturnValue) == 0x000074, "Member 'BP_TC_Firework_C_PlacementIsCorrect::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_TC_Firework_C_PlacementIsCorrect, CallFunc_Add_VectorVector_ReturnValue) == 0x000078, "Member 'BP_TC_Firework_C_PlacementIsCorrect::CallFunc_Add_VectorVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_TC_Firework_C_PlacementIsCorrect, CallFunc_Subtract_VectorVector_ReturnValue) == 0x000084, "Member 'BP_TC_Firework_C_PlacementIsCorrect::CallFunc_Subtract_VectorVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_TC_Firework_C_PlacementIsCorrect, CallFunc_LineTraceSingleForObjects_OutHit) == 0x000090, "Member 'BP_TC_Firework_C_PlacementIsCorrect::CallFunc_LineTraceSingleForObjects_OutHit' has a wrong offset!");
static_assert(offsetof(BP_TC_Firework_C_PlacementIsCorrect, CallFunc_LineTraceSingleForObjects_ReturnValue) == 0x00011C, "Member 'BP_TC_Firework_C_PlacementIsCorrect::CallFunc_LineTraceSingleForObjects_ReturnValue' has a wrong offset!");

}

