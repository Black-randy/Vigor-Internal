#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_FootStepComponent

#include "Basic.hpp"

#include "CoreUObject_structs.hpp"
#include "Flame_structs.hpp"
#include "Flame_classes.hpp"
#include "Engine_structs.hpp"
#include "PhysicsCore_structs.hpp"


namespace SDK
{

// BlueprintGeneratedClass BP_FootStepComponent.BP_FootStepComponent_C
// 0x00E0 (0x0190 - 0x00B0)
class UBP_FootStepComponent_C final : public UFootStepComponent
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x00B0(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class USkeletalMeshComponent*                 Mesh;                                              // 0x00B8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UCharacterMovementComponent*            Movement;                                          // 0x00C0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AHumanCharacter*                        CharacterOwner;                                    // 0x00C8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   Left_Foot_Socket;                                  // 0x00D0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   Right_Foot_Socket;                                 // 0x00D8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<int32>                                 Footprint_Material_Left_Frames;                    // 0x00E0(0x0010)(Edit, BlueprintVisible)
	TArray<int32>                                 Footprint_Material_Right_Frames;                   // 0x00F0(0x0010)(Edit, BlueprintVisible)
	struct FVector                                Foot_Print_Size;                                   // 0x0100(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                Left_Footprint_Offset_Pos;                         // 0x010C(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                Right_Footprint_Offset_Pos;                        // 0x0118(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Left_Footprint_Orientation;                        // 0x0124(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Right_Footprint_Orientation;                       // 0x0128(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Max_Distance_From_Camera;                          // 0x012C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AFootprintManager*                      FootprintManager;                                  // 0x0130(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   Left_Arm_Socket;                                   // 0x0138(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   Right_Arm_Socket;                                  // 0x0140(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   Left_Leg_Socket;                                   // 0x0148(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   Right_Leg_Socket;                                  // 0x0150(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                Left_Arm_Offset_Pos;                               // 0x0158(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                Right_Arm_Offset_Pos;                              // 0x0164(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                Left_Leg_Offset_Pos;                               // 0x0170(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                Right_Leg_Offset_Pos;                              // 0x017C(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         WaterDepth;                                        // 0x0188(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         SoakedWaterIndex;                                  // 0x018C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

public:
	void ExecuteUbergraph_BP_FootStepComponent(int32 EntryPoint);
	void OnFootStep(class USkeletalMeshComponent* MeshComp, class UAnimSequenceBase* Animation, EFootStepLegIndex FootStepLegIndex, EFootStepMovementType FootStepMovementType);
	void ReceiveBeginPlay();
	void OnLadderStep(class USkeletalMeshComponent* MeshComp, class UAnimSequenceBase* Animation, EPhysicalSurface SurfaceType, ELadderStepLimbIndex LadderStepLimbIndex);
	void OnPlayerEnterWater();
	void OnPlayerInWaterTick();
	void OnPlayerExitWater();
	void OnProneStep(class USkeletalMeshComponent* MeshComp, class UAnimSequenceBase* Animation, EProneStepLimbIndex ProneStepLimbIndex);
	void GetMaterialFrame(EFootStepLegIndex FootStepLegIndex, int32* Frame);
	bool TraceGround(const struct FVector& LocationOffset, const struct FVector& MeshSocketLocation, struct FHitResult* OutHit);
	void SpawnDecal(const struct FVector& Location, const struct FVector& Normal, const struct FVector& Direction, float OrientationCoef, int32 FrameIndex, EPhysicalSurface SurfaceType);
	void SetWaterParameters(class UAudioComponent* Audio_Component);
	void GetFootStepSound(EPhysicalSurface SurfaceType, EFootStepMovementType FootStepMovementType, class USoundBase** Result);
	void SetVolumeAndPitch(class UAudioComponent* AudioComponent);
	void GetProneStepSound(EPhysicalSurface SurfaceType, EProneStepLimbIndex ProneStepLimbIndex, class USoundBase** Result);
	void PlayStepSound(class USoundBase* Sound, class UAudioComponent* ComponentToUse);
	void SetAttenuationSettings(class UAudioComponent* AudioComponent);
	class UAudioComponent* GetFootStepAudioComponent(EFootStepLegIndex FootStepLegIndex);
	class UAudioComponent* GetProneStepAudioComponent(EProneStepLimbIndex ProneStepLimbIndex);
	void ShouldProcessStep(bool* ToProcess);
	void SetEnvironmentParameters(class UAudioComponent* AudioComponent);
	void GetTargetWaterSoakIndex(float* SoakIndex, bool* ShouldInterpolate);
	void GetLadderStepSound(EPhysicalSurface SurfaceType, ELadderStepLimbIndex LadderStepLimbIndex, class USoundBase** Result);
	class UAudioComponent* GetLadderStepAudioComponent(ELadderStepLimbIndex LadderStepLimbIndex);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BP_FootStepComponent_C">();
	}
	static class UBP_FootStepComponent_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UBP_FootStepComponent_C>();
	}
};
static_assert(alignof(UBP_FootStepComponent_C) == 0x000008, "Wrong alignment on UBP_FootStepComponent_C");
static_assert(sizeof(UBP_FootStepComponent_C) == 0x000190, "Wrong size on UBP_FootStepComponent_C");
static_assert(offsetof(UBP_FootStepComponent_C, UberGraphFrame) == 0x0000B0, "Member 'UBP_FootStepComponent_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(UBP_FootStepComponent_C, Mesh) == 0x0000B8, "Member 'UBP_FootStepComponent_C::Mesh' has a wrong offset!");
static_assert(offsetof(UBP_FootStepComponent_C, Movement) == 0x0000C0, "Member 'UBP_FootStepComponent_C::Movement' has a wrong offset!");
static_assert(offsetof(UBP_FootStepComponent_C, CharacterOwner) == 0x0000C8, "Member 'UBP_FootStepComponent_C::CharacterOwner' has a wrong offset!");
static_assert(offsetof(UBP_FootStepComponent_C, Left_Foot_Socket) == 0x0000D0, "Member 'UBP_FootStepComponent_C::Left_Foot_Socket' has a wrong offset!");
static_assert(offsetof(UBP_FootStepComponent_C, Right_Foot_Socket) == 0x0000D8, "Member 'UBP_FootStepComponent_C::Right_Foot_Socket' has a wrong offset!");
static_assert(offsetof(UBP_FootStepComponent_C, Footprint_Material_Left_Frames) == 0x0000E0, "Member 'UBP_FootStepComponent_C::Footprint_Material_Left_Frames' has a wrong offset!");
static_assert(offsetof(UBP_FootStepComponent_C, Footprint_Material_Right_Frames) == 0x0000F0, "Member 'UBP_FootStepComponent_C::Footprint_Material_Right_Frames' has a wrong offset!");
static_assert(offsetof(UBP_FootStepComponent_C, Foot_Print_Size) == 0x000100, "Member 'UBP_FootStepComponent_C::Foot_Print_Size' has a wrong offset!");
static_assert(offsetof(UBP_FootStepComponent_C, Left_Footprint_Offset_Pos) == 0x00010C, "Member 'UBP_FootStepComponent_C::Left_Footprint_Offset_Pos' has a wrong offset!");
static_assert(offsetof(UBP_FootStepComponent_C, Right_Footprint_Offset_Pos) == 0x000118, "Member 'UBP_FootStepComponent_C::Right_Footprint_Offset_Pos' has a wrong offset!");
static_assert(offsetof(UBP_FootStepComponent_C, Left_Footprint_Orientation) == 0x000124, "Member 'UBP_FootStepComponent_C::Left_Footprint_Orientation' has a wrong offset!");
static_assert(offsetof(UBP_FootStepComponent_C, Right_Footprint_Orientation) == 0x000128, "Member 'UBP_FootStepComponent_C::Right_Footprint_Orientation' has a wrong offset!");
static_assert(offsetof(UBP_FootStepComponent_C, Max_Distance_From_Camera) == 0x00012C, "Member 'UBP_FootStepComponent_C::Max_Distance_From_Camera' has a wrong offset!");
static_assert(offsetof(UBP_FootStepComponent_C, FootprintManager) == 0x000130, "Member 'UBP_FootStepComponent_C::FootprintManager' has a wrong offset!");
static_assert(offsetof(UBP_FootStepComponent_C, Left_Arm_Socket) == 0x000138, "Member 'UBP_FootStepComponent_C::Left_Arm_Socket' has a wrong offset!");
static_assert(offsetof(UBP_FootStepComponent_C, Right_Arm_Socket) == 0x000140, "Member 'UBP_FootStepComponent_C::Right_Arm_Socket' has a wrong offset!");
static_assert(offsetof(UBP_FootStepComponent_C, Left_Leg_Socket) == 0x000148, "Member 'UBP_FootStepComponent_C::Left_Leg_Socket' has a wrong offset!");
static_assert(offsetof(UBP_FootStepComponent_C, Right_Leg_Socket) == 0x000150, "Member 'UBP_FootStepComponent_C::Right_Leg_Socket' has a wrong offset!");
static_assert(offsetof(UBP_FootStepComponent_C, Left_Arm_Offset_Pos) == 0x000158, "Member 'UBP_FootStepComponent_C::Left_Arm_Offset_Pos' has a wrong offset!");
static_assert(offsetof(UBP_FootStepComponent_C, Right_Arm_Offset_Pos) == 0x000164, "Member 'UBP_FootStepComponent_C::Right_Arm_Offset_Pos' has a wrong offset!");
static_assert(offsetof(UBP_FootStepComponent_C, Left_Leg_Offset_Pos) == 0x000170, "Member 'UBP_FootStepComponent_C::Left_Leg_Offset_Pos' has a wrong offset!");
static_assert(offsetof(UBP_FootStepComponent_C, Right_Leg_Offset_Pos) == 0x00017C, "Member 'UBP_FootStepComponent_C::Right_Leg_Offset_Pos' has a wrong offset!");
static_assert(offsetof(UBP_FootStepComponent_C, WaterDepth) == 0x000188, "Member 'UBP_FootStepComponent_C::WaterDepth' has a wrong offset!");
static_assert(offsetof(UBP_FootStepComponent_C, SoakedWaterIndex) == 0x00018C, "Member 'UBP_FootStepComponent_C::SoakedWaterIndex' has a wrong offset!");

}

