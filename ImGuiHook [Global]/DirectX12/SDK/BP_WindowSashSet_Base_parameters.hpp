#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_WindowSashSet_Base

#include "Basic.hpp"

#include "CoreUObject_structs.hpp"


namespace SDK::Params
{

// Function BP_WindowSashSet_Base.BP_WindowSashSet_Base_C.ExecuteUbergraph_BP_WindowSashSet_Base
// 0x00F0 (0x00F0 - 0x0000)
struct BP_WindowSashSet_Base_C_ExecuteUbergraph_BP_WindowSashSet_Base final
{
public:
	int32                                         EntryPoint;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class USceneComponent*                        CallFunc_K2_GetRootComponent_ReturnValue;          // 0x0008(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_K2_GetComponentLocation_ReturnValue;      // 0x0010(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Array_Index_Variable;                     // 0x001C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x0020(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x0024(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_Event_T;                                    // 0x0028(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2C[0x4];                                       // 0x002C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class AActor*>                         CallFunc_GetOverlappingActors_OverlappingActors;   // 0x0030(0x0010)(ReferenceParm)
	class AActor*                                 CallFunc_Array_Get_Item;                           // 0x0040(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_GetForwardVector_ReturnValue;             // 0x0048(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_54[0x4];                                       // 0x0054(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class AHumanCharacter*                        K2Node_DynamicCast_AsHuman_Character;              // 0x0058(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0060(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_61[0x3];                                       // 0x0061(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x0064(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x0068(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_69[0x3];                                       // 0x0069(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_Multiply_VectorFloat_ReturnValue;         // 0x006C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_Event_bOpen;                                // 0x0078(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_Event_bInstant;                             // 0x0079(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanOR_ReturnValue;                    // 0x007A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_7B[0x5];                                       // 0x007B(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class AActor*>                         CallFunc_GetOverlappingActors_OverlappingActors_1; // 0x0080(0x0010)(ReferenceParm)
	int32                                         CallFunc_Array_Length_ReturnValue_1;               // 0x0090(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_IntInt_ReturnValue;            // 0x0094(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_95[0x3];                                       // 0x0095(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                K2Node_Event_HitLocation;                          // 0x0098(0x000C)(ConstParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_A4[0xC];                                       // 0x00A4(0x000C)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             K2Node_Event_PaneTransform;                        // 0x00B0(0x0030)(ConstParm, IsPlainOldData, NoDestructor)
	class UStaticMesh*                            K2Node_Event_PaneMesh;                             // 0x00E0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_WindowSashSet_Base_C_ExecuteUbergraph_BP_WindowSashSet_Base) == 0x000010, "Wrong alignment on BP_WindowSashSet_Base_C_ExecuteUbergraph_BP_WindowSashSet_Base");
static_assert(sizeof(BP_WindowSashSet_Base_C_ExecuteUbergraph_BP_WindowSashSet_Base) == 0x0000F0, "Wrong size on BP_WindowSashSet_Base_C_ExecuteUbergraph_BP_WindowSashSet_Base");
static_assert(offsetof(BP_WindowSashSet_Base_C_ExecuteUbergraph_BP_WindowSashSet_Base, EntryPoint) == 0x000000, "Member 'BP_WindowSashSet_Base_C_ExecuteUbergraph_BP_WindowSashSet_Base::EntryPoint' has a wrong offset!");
static_assert(offsetof(BP_WindowSashSet_Base_C_ExecuteUbergraph_BP_WindowSashSet_Base, CallFunc_K2_GetRootComponent_ReturnValue) == 0x000008, "Member 'BP_WindowSashSet_Base_C_ExecuteUbergraph_BP_WindowSashSet_Base::CallFunc_K2_GetRootComponent_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_WindowSashSet_Base_C_ExecuteUbergraph_BP_WindowSashSet_Base, CallFunc_K2_GetComponentLocation_ReturnValue) == 0x000010, "Member 'BP_WindowSashSet_Base_C_ExecuteUbergraph_BP_WindowSashSet_Base::CallFunc_K2_GetComponentLocation_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_WindowSashSet_Base_C_ExecuteUbergraph_BP_WindowSashSet_Base, Temp_int_Array_Index_Variable) == 0x00001C, "Member 'BP_WindowSashSet_Base_C_ExecuteUbergraph_BP_WindowSashSet_Base::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(BP_WindowSashSet_Base_C_ExecuteUbergraph_BP_WindowSashSet_Base, Temp_int_Loop_Counter_Variable) == 0x000020, "Member 'BP_WindowSashSet_Base_C_ExecuteUbergraph_BP_WindowSashSet_Base::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(BP_WindowSashSet_Base_C_ExecuteUbergraph_BP_WindowSashSet_Base, CallFunc_Add_IntInt_ReturnValue) == 0x000024, "Member 'BP_WindowSashSet_Base_C_ExecuteUbergraph_BP_WindowSashSet_Base::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_WindowSashSet_Base_C_ExecuteUbergraph_BP_WindowSashSet_Base, K2Node_Event_T) == 0x000028, "Member 'BP_WindowSashSet_Base_C_ExecuteUbergraph_BP_WindowSashSet_Base::K2Node_Event_T' has a wrong offset!");
static_assert(offsetof(BP_WindowSashSet_Base_C_ExecuteUbergraph_BP_WindowSashSet_Base, CallFunc_GetOverlappingActors_OverlappingActors) == 0x000030, "Member 'BP_WindowSashSet_Base_C_ExecuteUbergraph_BP_WindowSashSet_Base::CallFunc_GetOverlappingActors_OverlappingActors' has a wrong offset!");
static_assert(offsetof(BP_WindowSashSet_Base_C_ExecuteUbergraph_BP_WindowSashSet_Base, CallFunc_Array_Get_Item) == 0x000040, "Member 'BP_WindowSashSet_Base_C_ExecuteUbergraph_BP_WindowSashSet_Base::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(BP_WindowSashSet_Base_C_ExecuteUbergraph_BP_WindowSashSet_Base, CallFunc_GetForwardVector_ReturnValue) == 0x000048, "Member 'BP_WindowSashSet_Base_C_ExecuteUbergraph_BP_WindowSashSet_Base::CallFunc_GetForwardVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_WindowSashSet_Base_C_ExecuteUbergraph_BP_WindowSashSet_Base, K2Node_DynamicCast_AsHuman_Character) == 0x000058, "Member 'BP_WindowSashSet_Base_C_ExecuteUbergraph_BP_WindowSashSet_Base::K2Node_DynamicCast_AsHuman_Character' has a wrong offset!");
static_assert(offsetof(BP_WindowSashSet_Base_C_ExecuteUbergraph_BP_WindowSashSet_Base, K2Node_DynamicCast_bSuccess) == 0x000060, "Member 'BP_WindowSashSet_Base_C_ExecuteUbergraph_BP_WindowSashSet_Base::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(BP_WindowSashSet_Base_C_ExecuteUbergraph_BP_WindowSashSet_Base, CallFunc_Array_Length_ReturnValue) == 0x000064, "Member 'BP_WindowSashSet_Base_C_ExecuteUbergraph_BP_WindowSashSet_Base::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_WindowSashSet_Base_C_ExecuteUbergraph_BP_WindowSashSet_Base, CallFunc_Less_IntInt_ReturnValue) == 0x000068, "Member 'BP_WindowSashSet_Base_C_ExecuteUbergraph_BP_WindowSashSet_Base::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_WindowSashSet_Base_C_ExecuteUbergraph_BP_WindowSashSet_Base, CallFunc_Multiply_VectorFloat_ReturnValue) == 0x00006C, "Member 'BP_WindowSashSet_Base_C_ExecuteUbergraph_BP_WindowSashSet_Base::CallFunc_Multiply_VectorFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_WindowSashSet_Base_C_ExecuteUbergraph_BP_WindowSashSet_Base, K2Node_Event_bOpen) == 0x000078, "Member 'BP_WindowSashSet_Base_C_ExecuteUbergraph_BP_WindowSashSet_Base::K2Node_Event_bOpen' has a wrong offset!");
static_assert(offsetof(BP_WindowSashSet_Base_C_ExecuteUbergraph_BP_WindowSashSet_Base, K2Node_Event_bInstant) == 0x000079, "Member 'BP_WindowSashSet_Base_C_ExecuteUbergraph_BP_WindowSashSet_Base::K2Node_Event_bInstant' has a wrong offset!");
static_assert(offsetof(BP_WindowSashSet_Base_C_ExecuteUbergraph_BP_WindowSashSet_Base, CallFunc_BooleanOR_ReturnValue) == 0x00007A, "Member 'BP_WindowSashSet_Base_C_ExecuteUbergraph_BP_WindowSashSet_Base::CallFunc_BooleanOR_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_WindowSashSet_Base_C_ExecuteUbergraph_BP_WindowSashSet_Base, CallFunc_GetOverlappingActors_OverlappingActors_1) == 0x000080, "Member 'BP_WindowSashSet_Base_C_ExecuteUbergraph_BP_WindowSashSet_Base::CallFunc_GetOverlappingActors_OverlappingActors_1' has a wrong offset!");
static_assert(offsetof(BP_WindowSashSet_Base_C_ExecuteUbergraph_BP_WindowSashSet_Base, CallFunc_Array_Length_ReturnValue_1) == 0x000090, "Member 'BP_WindowSashSet_Base_C_ExecuteUbergraph_BP_WindowSashSet_Base::CallFunc_Array_Length_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_WindowSashSet_Base_C_ExecuteUbergraph_BP_WindowSashSet_Base, CallFunc_EqualEqual_IntInt_ReturnValue) == 0x000094, "Member 'BP_WindowSashSet_Base_C_ExecuteUbergraph_BP_WindowSashSet_Base::CallFunc_EqualEqual_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_WindowSashSet_Base_C_ExecuteUbergraph_BP_WindowSashSet_Base, K2Node_Event_HitLocation) == 0x000098, "Member 'BP_WindowSashSet_Base_C_ExecuteUbergraph_BP_WindowSashSet_Base::K2Node_Event_HitLocation' has a wrong offset!");
static_assert(offsetof(BP_WindowSashSet_Base_C_ExecuteUbergraph_BP_WindowSashSet_Base, K2Node_Event_PaneTransform) == 0x0000B0, "Member 'BP_WindowSashSet_Base_C_ExecuteUbergraph_BP_WindowSashSet_Base::K2Node_Event_PaneTransform' has a wrong offset!");
static_assert(offsetof(BP_WindowSashSet_Base_C_ExecuteUbergraph_BP_WindowSashSet_Base, K2Node_Event_PaneMesh) == 0x0000E0, "Member 'BP_WindowSashSet_Base_C_ExecuteUbergraph_BP_WindowSashSet_Base::K2Node_Event_PaneMesh' has a wrong offset!");

// Function BP_WindowSashSet_Base.BP_WindowSashSet_Base_C.OnPaneShot
// 0x0050 (0x0050 - 0x0000)
struct BP_WindowSashSet_Base_C_OnPaneShot final
{
public:
	struct FVector                                HitLocation;                                       // 0x0000(0x000C)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             PaneTransform;                                     // 0x0010(0x0030)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor)
	class UStaticMesh*                            PaneMesh;                                          // 0x0040(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_WindowSashSet_Base_C_OnPaneShot) == 0x000010, "Wrong alignment on BP_WindowSashSet_Base_C_OnPaneShot");
static_assert(sizeof(BP_WindowSashSet_Base_C_OnPaneShot) == 0x000050, "Wrong size on BP_WindowSashSet_Base_C_OnPaneShot");
static_assert(offsetof(BP_WindowSashSet_Base_C_OnPaneShot, HitLocation) == 0x000000, "Member 'BP_WindowSashSet_Base_C_OnPaneShot::HitLocation' has a wrong offset!");
static_assert(offsetof(BP_WindowSashSet_Base_C_OnPaneShot, PaneTransform) == 0x000010, "Member 'BP_WindowSashSet_Base_C_OnPaneShot::PaneTransform' has a wrong offset!");
static_assert(offsetof(BP_WindowSashSet_Base_C_OnPaneShot, PaneMesh) == 0x000040, "Member 'BP_WindowSashSet_Base_C_OnPaneShot::PaneMesh' has a wrong offset!");

// Function BP_WindowSashSet_Base.BP_WindowSashSet_Base_C.OnPlayOpenAnimation
// 0x0002 (0x0002 - 0x0000)
struct BP_WindowSashSet_Base_C_OnPlayOpenAnimation final
{
public:
	bool                                          bOpen;                                             // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          bInstant;                                          // 0x0001(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_WindowSashSet_Base_C_OnPlayOpenAnimation) == 0x000001, "Wrong alignment on BP_WindowSashSet_Base_C_OnPlayOpenAnimation");
static_assert(sizeof(BP_WindowSashSet_Base_C_OnPlayOpenAnimation) == 0x000002, "Wrong size on BP_WindowSashSet_Base_C_OnPlayOpenAnimation");
static_assert(offsetof(BP_WindowSashSet_Base_C_OnPlayOpenAnimation, bOpen) == 0x000000, "Member 'BP_WindowSashSet_Base_C_OnPlayOpenAnimation::bOpen' has a wrong offset!");
static_assert(offsetof(BP_WindowSashSet_Base_C_OnPlayOpenAnimation, bInstant) == 0x000001, "Member 'BP_WindowSashSet_Base_C_OnPlayOpenAnimation::bInstant' has a wrong offset!");

// Function BP_WindowSashSet_Base.BP_WindowSashSet_Base_C.OpenAnimationUpdate
// 0x0004 (0x0004 - 0x0000)
struct BP_WindowSashSet_Base_C_OpenAnimationUpdate final
{
public:
	float                                         T;                                                 // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_WindowSashSet_Base_C_OpenAnimationUpdate) == 0x000004, "Wrong alignment on BP_WindowSashSet_Base_C_OpenAnimationUpdate");
static_assert(sizeof(BP_WindowSashSet_Base_C_OpenAnimationUpdate) == 0x000004, "Wrong size on BP_WindowSashSet_Base_C_OpenAnimationUpdate");
static_assert(offsetof(BP_WindowSashSet_Base_C_OpenAnimationUpdate, T) == 0x000000, "Member 'BP_WindowSashSet_Base_C_OpenAnimationUpdate::T' has a wrong offset!");

}

