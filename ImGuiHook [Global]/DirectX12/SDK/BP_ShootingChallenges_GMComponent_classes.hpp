#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_ShootingChallenges_GMComponent

#include "Basic.hpp"

#include "Flame_structs.hpp"
#include "Engine_structs.hpp"
#include "Engine_classes.hpp"
#include "S_ShootingChallenge_structs.hpp"
#include "E_ShootingChallengeResult_structs.hpp"


namespace SDK
{

// BlueprintGeneratedClass BP_ShootingChallenges_GMComponent.BP_ShootingChallenges_GMComponent_C
// 0x0248 (0x02F8 - 0x00B0)
class UBP_ShootingChallenges_GMComponent_C final : public UActorComponent
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x00B0(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	int32                                         Score;                                             // 0x00B8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         ActualChallengeTime;                               // 0x00BC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Countdown_in_Seconds;                              // 0x00C0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_C4[0x4];                                       // 0x00C4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class ABP_Character_Shelter_C*                Player_Reference;                                  // 0x00C8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UUI_SRChallenge_HUD_C*                  UI_ChallengeHUD;                                   // 0x00D0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          ChallengeAllowFire;                                // 0x00D8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_D9[0x7];                                       // 0x00D9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UUI_SRChallenge_Countdown_C*            UI_ChallengeCountdown;                             // 0x00E0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ABP_SRResetButton_C*                    ResetButtonReference;                              // 0x00E8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsChallengeActive;                                 // 0x00F0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_F1[0x7];                                       // 0x00F1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class ABP_PlayerStart_ShootingChallenges_C*   PlayerStart;                                       // 0x00F8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Last_Selected_Challenge;                           // 0x0100(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_104[0x4];                                      // 0x0104(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UClass*                                 Last_Selected_Weapon;                              // 0x0108(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AHumanPlayerController*                 Human_Player_controller_reference;                 // 0x0110(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLoadoutInfo                           Start_Loadout;                                     // 0x0118(0x0028)(Edit, BlueprintVisible, DisableEditOnInstance)
	struct FLoadoutInfo                           Empty_Loadout;                                     // 0x0140(0x0028)(Edit, BlueprintVisible, DisableEditOnInstance)
	class FString                                 ChallengesSaveFileName;                            // 0x0168(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, HasGetValueTypeHash)
	TArray<class AActor*>                         OriginalTargets;                                   // 0x0178(0x0010)(Edit, BlueprintVisible, DisableEditOnTemplate, DisableEditOnInstance)
	struct FS_ShootingChallenge                   ActiveChallenge;                                   // 0x0188(0x0090)(Edit, BlueprintVisible, DisableEditOnInstance, ContainsInstancedReference, HasGetValueTypeHash)
	TArray<class AActor*>                         SpawnedTargets;                                    // 0x0218(0x0010)(Edit, BlueprintVisible, DisableEditOnTemplate, DisableEditOnInstance)
	class UUI_SRChallenge_Menu_C*                 UI_ChallengesMenu;                                 // 0x0228(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UUI_SRChallenge_ResultScreen_Success_C* UI_Result;                                         // 0x0230(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UUI_SRChallenge_UnlockedWeapons_C*      UI_NewWeapons;                                     // 0x0238(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UUI_SRChallenge_ResultScreen_Failed_C*  UI_Failed;                                         // 0x0240(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TMap<class FName, struct FS_ShootingChallenge> LoadedChallenges;                                  // 0x0248(0x0050)(Edit, BlueprintVisible, DisableEditOnInstance, ContainsInstancedReference)
	class UBP_HighScore_Save_Challenges_C*        SaveGameSlot;                                      // 0x0298(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          RangePreparedForChallenge;                         // 0x02A0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_2A1[0x7];                                      // 0x02A1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	FMulticastInlineDelegateProperty_             ChallengeHasStarted;                               // 0x02A8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	struct FTimerHandle                           Start_Cooldown_Timer;                              // 0x02B8(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	struct FTimerHandle                           Challenge_Timer;                                   // 0x02C0(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	TArray<class UClass*>                         NewWeapons;                                        // 0x02C8(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	FMulticastInlineDelegateProperty_             ChallengesLoaded;                                  // 0x02D8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	FMulticastInlineDelegateProperty_             ChallengesSaved;                                   // 0x02E8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)

public:
	void ChallengeHasStarted__DelegateSignature();
	void ChallengesLoaded__DelegateSignature(class AHumanPlayerController* CurrentPlayer, bool Success);
	void ChallengesSaved__DelegateSignature(bool Success, bool OpenResultUI_0, float PrevHighScore);
	void ExecuteUbergraph_BP_ShootingChallenges_GMComponent(int32 EntryPoint);
	void EventChallengesSavingFinished(bool Success, bool OpenResultUI_0, float PrevHighScore);
	void CheckForNewWeapons();
	void EventChallengesSaveGame(bool OpenResultUI_0, float PrevHighScore);
	void EventChallengesLoadingFinished(class AHumanPlayerController* CurrentPlayer, bool Success);
	void EventLoadChallenges(class AHumanPlayerController* CurrentPlayer);
	void ReceiveEndPlay(EEndPlayReason EndPlayReason);
	void Clear_Range();
	void Start_Countdown();
	void Clear_Range_With_Delay();
	void Start_Challenge(const struct FS_ShootingChallenge& ActiveChallenge_0, bool Restart);
	void StopChallenge();
	void ChallengeTimerTick();
	void CountdownTimerTick();
	void OnLoadSucceed_3C54EAD94E7C6DC679F3EEB70F632FD9(class USaveGame* SaveGame);
	void OnLoadFailed_3C54EAD94E7C6DC679F3EEB70F632FD9(class USaveGame* SaveGame);
	void OnSaveSucceed_8394D6FA4870C41A77AF78BB64CF4527(const class FString& SlotName, const int32 UserIndex);
	void OnSaveFailed_8394D6FA4870C41A77AF78BB64CF4527(const class FString& SlotName, const int32 UserIndex);
	void Check_Achievements_Progress();
	void OpenChallengesMenu(class AHumanPlayerController* CurrentPlayer);
	void ScoreHit();
	E_ShootingChallengeResult GetChallengeRank(const struct FS_ShootingChallenge& ShootingChallenge, float ActualTime);
	void RestartChallenge();
	void CloseChallenge();
	void PrepareRangeForChallenge();
	void ClearRangeAfterChallenge();
	void GetChallengeHighScore(const struct FS_ShootingChallenge& ShootingChallenge, E_ShootingChallengeResult* Rank, float* HighScore);
	bool IsWeaponUnlocked(const class UClass*& Weapon);
	void FailActiveChallenge(const class FText& FailingReason, E_ShootingChallengeResult Result);
	void FlooredTime(float Time, float* Floored_Time);
	void HandleResultScreenClosed(bool RetryChallenge);
	void OpenResultUI(float PrevHighScore);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BP_ShootingChallenges_GMComponent_C">();
	}
	static class UBP_ShootingChallenges_GMComponent_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UBP_ShootingChallenges_GMComponent_C>();
	}
};
static_assert(alignof(UBP_ShootingChallenges_GMComponent_C) == 0x000008, "Wrong alignment on UBP_ShootingChallenges_GMComponent_C");
static_assert(sizeof(UBP_ShootingChallenges_GMComponent_C) == 0x0002F8, "Wrong size on UBP_ShootingChallenges_GMComponent_C");
static_assert(offsetof(UBP_ShootingChallenges_GMComponent_C, UberGraphFrame) == 0x0000B0, "Member 'UBP_ShootingChallenges_GMComponent_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(UBP_ShootingChallenges_GMComponent_C, Score) == 0x0000B8, "Member 'UBP_ShootingChallenges_GMComponent_C::Score' has a wrong offset!");
static_assert(offsetof(UBP_ShootingChallenges_GMComponent_C, ActualChallengeTime) == 0x0000BC, "Member 'UBP_ShootingChallenges_GMComponent_C::ActualChallengeTime' has a wrong offset!");
static_assert(offsetof(UBP_ShootingChallenges_GMComponent_C, Countdown_in_Seconds) == 0x0000C0, "Member 'UBP_ShootingChallenges_GMComponent_C::Countdown_in_Seconds' has a wrong offset!");
static_assert(offsetof(UBP_ShootingChallenges_GMComponent_C, Player_Reference) == 0x0000C8, "Member 'UBP_ShootingChallenges_GMComponent_C::Player_Reference' has a wrong offset!");
static_assert(offsetof(UBP_ShootingChallenges_GMComponent_C, UI_ChallengeHUD) == 0x0000D0, "Member 'UBP_ShootingChallenges_GMComponent_C::UI_ChallengeHUD' has a wrong offset!");
static_assert(offsetof(UBP_ShootingChallenges_GMComponent_C, ChallengeAllowFire) == 0x0000D8, "Member 'UBP_ShootingChallenges_GMComponent_C::ChallengeAllowFire' has a wrong offset!");
static_assert(offsetof(UBP_ShootingChallenges_GMComponent_C, UI_ChallengeCountdown) == 0x0000E0, "Member 'UBP_ShootingChallenges_GMComponent_C::UI_ChallengeCountdown' has a wrong offset!");
static_assert(offsetof(UBP_ShootingChallenges_GMComponent_C, ResetButtonReference) == 0x0000E8, "Member 'UBP_ShootingChallenges_GMComponent_C::ResetButtonReference' has a wrong offset!");
static_assert(offsetof(UBP_ShootingChallenges_GMComponent_C, IsChallengeActive) == 0x0000F0, "Member 'UBP_ShootingChallenges_GMComponent_C::IsChallengeActive' has a wrong offset!");
static_assert(offsetof(UBP_ShootingChallenges_GMComponent_C, PlayerStart) == 0x0000F8, "Member 'UBP_ShootingChallenges_GMComponent_C::PlayerStart' has a wrong offset!");
static_assert(offsetof(UBP_ShootingChallenges_GMComponent_C, Last_Selected_Challenge) == 0x000100, "Member 'UBP_ShootingChallenges_GMComponent_C::Last_Selected_Challenge' has a wrong offset!");
static_assert(offsetof(UBP_ShootingChallenges_GMComponent_C, Last_Selected_Weapon) == 0x000108, "Member 'UBP_ShootingChallenges_GMComponent_C::Last_Selected_Weapon' has a wrong offset!");
static_assert(offsetof(UBP_ShootingChallenges_GMComponent_C, Human_Player_controller_reference) == 0x000110, "Member 'UBP_ShootingChallenges_GMComponent_C::Human_Player_controller_reference' has a wrong offset!");
static_assert(offsetof(UBP_ShootingChallenges_GMComponent_C, Start_Loadout) == 0x000118, "Member 'UBP_ShootingChallenges_GMComponent_C::Start_Loadout' has a wrong offset!");
static_assert(offsetof(UBP_ShootingChallenges_GMComponent_C, Empty_Loadout) == 0x000140, "Member 'UBP_ShootingChallenges_GMComponent_C::Empty_Loadout' has a wrong offset!");
static_assert(offsetof(UBP_ShootingChallenges_GMComponent_C, ChallengesSaveFileName) == 0x000168, "Member 'UBP_ShootingChallenges_GMComponent_C::ChallengesSaveFileName' has a wrong offset!");
static_assert(offsetof(UBP_ShootingChallenges_GMComponent_C, OriginalTargets) == 0x000178, "Member 'UBP_ShootingChallenges_GMComponent_C::OriginalTargets' has a wrong offset!");
static_assert(offsetof(UBP_ShootingChallenges_GMComponent_C, ActiveChallenge) == 0x000188, "Member 'UBP_ShootingChallenges_GMComponent_C::ActiveChallenge' has a wrong offset!");
static_assert(offsetof(UBP_ShootingChallenges_GMComponent_C, SpawnedTargets) == 0x000218, "Member 'UBP_ShootingChallenges_GMComponent_C::SpawnedTargets' has a wrong offset!");
static_assert(offsetof(UBP_ShootingChallenges_GMComponent_C, UI_ChallengesMenu) == 0x000228, "Member 'UBP_ShootingChallenges_GMComponent_C::UI_ChallengesMenu' has a wrong offset!");
static_assert(offsetof(UBP_ShootingChallenges_GMComponent_C, UI_Result) == 0x000230, "Member 'UBP_ShootingChallenges_GMComponent_C::UI_Result' has a wrong offset!");
static_assert(offsetof(UBP_ShootingChallenges_GMComponent_C, UI_NewWeapons) == 0x000238, "Member 'UBP_ShootingChallenges_GMComponent_C::UI_NewWeapons' has a wrong offset!");
static_assert(offsetof(UBP_ShootingChallenges_GMComponent_C, UI_Failed) == 0x000240, "Member 'UBP_ShootingChallenges_GMComponent_C::UI_Failed' has a wrong offset!");
static_assert(offsetof(UBP_ShootingChallenges_GMComponent_C, LoadedChallenges) == 0x000248, "Member 'UBP_ShootingChallenges_GMComponent_C::LoadedChallenges' has a wrong offset!");
static_assert(offsetof(UBP_ShootingChallenges_GMComponent_C, SaveGameSlot) == 0x000298, "Member 'UBP_ShootingChallenges_GMComponent_C::SaveGameSlot' has a wrong offset!");
static_assert(offsetof(UBP_ShootingChallenges_GMComponent_C, RangePreparedForChallenge) == 0x0002A0, "Member 'UBP_ShootingChallenges_GMComponent_C::RangePreparedForChallenge' has a wrong offset!");
static_assert(offsetof(UBP_ShootingChallenges_GMComponent_C, ChallengeHasStarted) == 0x0002A8, "Member 'UBP_ShootingChallenges_GMComponent_C::ChallengeHasStarted' has a wrong offset!");
static_assert(offsetof(UBP_ShootingChallenges_GMComponent_C, Start_Cooldown_Timer) == 0x0002B8, "Member 'UBP_ShootingChallenges_GMComponent_C::Start_Cooldown_Timer' has a wrong offset!");
static_assert(offsetof(UBP_ShootingChallenges_GMComponent_C, Challenge_Timer) == 0x0002C0, "Member 'UBP_ShootingChallenges_GMComponent_C::Challenge_Timer' has a wrong offset!");
static_assert(offsetof(UBP_ShootingChallenges_GMComponent_C, NewWeapons) == 0x0002C8, "Member 'UBP_ShootingChallenges_GMComponent_C::NewWeapons' has a wrong offset!");
static_assert(offsetof(UBP_ShootingChallenges_GMComponent_C, ChallengesLoaded) == 0x0002D8, "Member 'UBP_ShootingChallenges_GMComponent_C::ChallengesLoaded' has a wrong offset!");
static_assert(offsetof(UBP_ShootingChallenges_GMComponent_C, ChallengesSaved) == 0x0002E8, "Member 'UBP_ShootingChallenges_GMComponent_C::ChallengesSaved' has a wrong offset!");

}

