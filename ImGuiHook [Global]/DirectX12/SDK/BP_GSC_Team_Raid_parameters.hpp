#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_GSC_Team_Raid

#include "Basic.hpp"


namespace SDK::Params
{

// Function BP_GSC_Team_Raid.BP_GSC_Team_Raid_C.ExecuteUbergraph_BP_GSC_Team_Raid
// 0x000C (0x000C - 0x0000)
struct BP_GSC_Team_Raid_C_ExecuteUbergraph_BP_GSC_Team_Raid final
{
public:
	int32                                         EntryPoint;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_CustomEvent_Is_Attacker;                    // 0x0004(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         K2Node_CustomEvent_New_Rounds_Won;                 // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_GSC_Team_Raid_C_ExecuteUbergraph_BP_GSC_Team_Raid) == 0x000004, "Wrong alignment on BP_GSC_Team_Raid_C_ExecuteUbergraph_BP_GSC_Team_Raid");
static_assert(sizeof(BP_GSC_Team_Raid_C_ExecuteUbergraph_BP_GSC_Team_Raid) == 0x00000C, "Wrong size on BP_GSC_Team_Raid_C_ExecuteUbergraph_BP_GSC_Team_Raid");
static_assert(offsetof(BP_GSC_Team_Raid_C_ExecuteUbergraph_BP_GSC_Team_Raid, EntryPoint) == 0x000000, "Member 'BP_GSC_Team_Raid_C_ExecuteUbergraph_BP_GSC_Team_Raid::EntryPoint' has a wrong offset!");
static_assert(offsetof(BP_GSC_Team_Raid_C_ExecuteUbergraph_BP_GSC_Team_Raid, K2Node_CustomEvent_Is_Attacker) == 0x000004, "Member 'BP_GSC_Team_Raid_C_ExecuteUbergraph_BP_GSC_Team_Raid::K2Node_CustomEvent_Is_Attacker' has a wrong offset!");
static_assert(offsetof(BP_GSC_Team_Raid_C_ExecuteUbergraph_BP_GSC_Team_Raid, K2Node_CustomEvent_New_Rounds_Won) == 0x000008, "Member 'BP_GSC_Team_Raid_C_ExecuteUbergraph_BP_GSC_Team_Raid::K2Node_CustomEvent_New_Rounds_Won' has a wrong offset!");

// Function BP_GSC_Team_Raid.BP_GSC_Team_Raid_C.Set Is Attacking Team
// 0x0001 (0x0001 - 0x0000)
struct BP_GSC_Team_Raid_C_Set_Is_Attacking_Team final
{
public:
	bool                                          Is_Attacker_0;                                     // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_GSC_Team_Raid_C_Set_Is_Attacking_Team) == 0x000001, "Wrong alignment on BP_GSC_Team_Raid_C_Set_Is_Attacking_Team");
static_assert(sizeof(BP_GSC_Team_Raid_C_Set_Is_Attacking_Team) == 0x000001, "Wrong size on BP_GSC_Team_Raid_C_Set_Is_Attacking_Team");
static_assert(offsetof(BP_GSC_Team_Raid_C_Set_Is_Attacking_Team, Is_Attacker_0) == 0x000000, "Member 'BP_GSC_Team_Raid_C_Set_Is_Attacking_Team::Is_Attacker_0' has a wrong offset!");

// Function BP_GSC_Team_Raid.BP_GSC_Team_Raid_C.Set Won Rounds
// 0x0004 (0x0004 - 0x0000)
struct BP_GSC_Team_Raid_C_Set_Won_Rounds final
{
public:
	int32                                         New_Rounds_Won;                                    // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_GSC_Team_Raid_C_Set_Won_Rounds) == 0x000004, "Wrong alignment on BP_GSC_Team_Raid_C_Set_Won_Rounds");
static_assert(sizeof(BP_GSC_Team_Raid_C_Set_Won_Rounds) == 0x000004, "Wrong size on BP_GSC_Team_Raid_C_Set_Won_Rounds");
static_assert(offsetof(BP_GSC_Team_Raid_C_Set_Won_Rounds, New_Rounds_Won) == 0x000000, "Member 'BP_GSC_Team_Raid_C_Set_Won_Rounds::New_Rounds_Won' has a wrong offset!");

// Function BP_GSC_Team_Raid.BP_GSC_Team_Raid_C.Is Attacker
// 0x0001 (0x0001 - 0x0000)
struct BP_GSC_Team_Raid_C_Is_Attacker final
{
public:
	bool                                          Is_Attacker_0;                                     // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_GSC_Team_Raid_C_Is_Attacker) == 0x000001, "Wrong alignment on BP_GSC_Team_Raid_C_Is_Attacker");
static_assert(sizeof(BP_GSC_Team_Raid_C_Is_Attacker) == 0x000001, "Wrong size on BP_GSC_Team_Raid_C_Is_Attacker");
static_assert(offsetof(BP_GSC_Team_Raid_C_Is_Attacker, Is_Attacker_0) == 0x000000, "Member 'BP_GSC_Team_Raid_C_Is_Attacker::Is_Attacker_0' has a wrong offset!");

// Function BP_GSC_Team_Raid.BP_GSC_Team_Raid_C.Is Everyone Dead
// 0x0040 (0x0040 - 0x0000)
struct BP_GSC_Team_Raid_C_Is_Everyone_Dead final
{
public:
	bool                                          AllDead;                                           // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Array_Index_Variable;                     // 0x000C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<class ABP_PlayerState_Teams_C*>        CallFunc_Get_Members_Member_States;                // 0x0010(0x0010)(ReferenceParm)
	class ABP_PlayerState_Teams_C*                CallFunc_Array_Get_Item;                           // 0x0020(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x0028(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x002C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x002D(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_2E[0x2];                                       // 0x002E(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	class AHumanPlayerCharacter*                  CallFunc_GetHumanCharacter_ReturnValue;            // 0x0030(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue_1;                    // 0x0038(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue_2;                    // 0x0039(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_GetIsDead_ReturnValue;                    // 0x003A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Not_PreBool_ReturnValue;                  // 0x003B(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue_3;                    // 0x003C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_GSC_Team_Raid_C_Is_Everyone_Dead) == 0x000008, "Wrong alignment on BP_GSC_Team_Raid_C_Is_Everyone_Dead");
static_assert(sizeof(BP_GSC_Team_Raid_C_Is_Everyone_Dead) == 0x000040, "Wrong size on BP_GSC_Team_Raid_C_Is_Everyone_Dead");
static_assert(offsetof(BP_GSC_Team_Raid_C_Is_Everyone_Dead, AllDead) == 0x000000, "Member 'BP_GSC_Team_Raid_C_Is_Everyone_Dead::AllDead' has a wrong offset!");
static_assert(offsetof(BP_GSC_Team_Raid_C_Is_Everyone_Dead, Temp_int_Loop_Counter_Variable) == 0x000004, "Member 'BP_GSC_Team_Raid_C_Is_Everyone_Dead::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(BP_GSC_Team_Raid_C_Is_Everyone_Dead, CallFunc_Add_IntInt_ReturnValue) == 0x000008, "Member 'BP_GSC_Team_Raid_C_Is_Everyone_Dead::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_GSC_Team_Raid_C_Is_Everyone_Dead, Temp_int_Array_Index_Variable) == 0x00000C, "Member 'BP_GSC_Team_Raid_C_Is_Everyone_Dead::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(BP_GSC_Team_Raid_C_Is_Everyone_Dead, CallFunc_Get_Members_Member_States) == 0x000010, "Member 'BP_GSC_Team_Raid_C_Is_Everyone_Dead::CallFunc_Get_Members_Member_States' has a wrong offset!");
static_assert(offsetof(BP_GSC_Team_Raid_C_Is_Everyone_Dead, CallFunc_Array_Get_Item) == 0x000020, "Member 'BP_GSC_Team_Raid_C_Is_Everyone_Dead::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(BP_GSC_Team_Raid_C_Is_Everyone_Dead, CallFunc_Array_Length_ReturnValue) == 0x000028, "Member 'BP_GSC_Team_Raid_C_Is_Everyone_Dead::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_GSC_Team_Raid_C_Is_Everyone_Dead, CallFunc_Less_IntInt_ReturnValue) == 0x00002C, "Member 'BP_GSC_Team_Raid_C_Is_Everyone_Dead::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_GSC_Team_Raid_C_Is_Everyone_Dead, CallFunc_IsValid_ReturnValue) == 0x00002D, "Member 'BP_GSC_Team_Raid_C_Is_Everyone_Dead::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_GSC_Team_Raid_C_Is_Everyone_Dead, CallFunc_GetHumanCharacter_ReturnValue) == 0x000030, "Member 'BP_GSC_Team_Raid_C_Is_Everyone_Dead::CallFunc_GetHumanCharacter_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_GSC_Team_Raid_C_Is_Everyone_Dead, CallFunc_IsValid_ReturnValue_1) == 0x000038, "Member 'BP_GSC_Team_Raid_C_Is_Everyone_Dead::CallFunc_IsValid_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_GSC_Team_Raid_C_Is_Everyone_Dead, CallFunc_IsValid_ReturnValue_2) == 0x000039, "Member 'BP_GSC_Team_Raid_C_Is_Everyone_Dead::CallFunc_IsValid_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BP_GSC_Team_Raid_C_Is_Everyone_Dead, CallFunc_GetIsDead_ReturnValue) == 0x00003A, "Member 'BP_GSC_Team_Raid_C_Is_Everyone_Dead::CallFunc_GetIsDead_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_GSC_Team_Raid_C_Is_Everyone_Dead, CallFunc_Not_PreBool_ReturnValue) == 0x00003B, "Member 'BP_GSC_Team_Raid_C_Is_Everyone_Dead::CallFunc_Not_PreBool_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_GSC_Team_Raid_C_Is_Everyone_Dead, CallFunc_IsValid_ReturnValue_3) == 0x00003C, "Member 'BP_GSC_Team_Raid_C_Is_Everyone_Dead::CallFunc_IsValid_ReturnValue_3' has a wrong offset!");

// Function BP_GSC_Team_Raid.BP_GSC_Team_Raid_C.Get Member Controllers
// 0x0058 (0x0058 - 0x0000)
struct BP_GSC_Team_Raid_C_Get_Member_Controllers final
{
public:
	TArray<class ABP_PlayerController_Teams_C*>   Player_Controllers;                                // 0x0000(0x0010)(Parm, OutParm)
	TArray<class ABP_PlayerController_Teams_C*>   Controllers;                                       // 0x0010(0x0010)(Edit, BlueprintVisible, DisableEditOnTemplate)
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x0020(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x0024(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Array_Index_Variable;                     // 0x0028(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2C[0x4];                                       // 0x002C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class ABP_PlayerState_Teams_C*>        CallFunc_Get_Members_Member_States;                // 0x0030(0x0010)(ReferenceParm)
	class ABP_PlayerState_Teams_C*                CallFunc_Array_Get_Item;                           // 0x0040(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x0048(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x004C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x004D(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_4E[0x2];                                       // 0x004E(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Array_Add_ReturnValue;                    // 0x0050(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue_1;                    // 0x0054(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_GSC_Team_Raid_C_Get_Member_Controllers) == 0x000008, "Wrong alignment on BP_GSC_Team_Raid_C_Get_Member_Controllers");
static_assert(sizeof(BP_GSC_Team_Raid_C_Get_Member_Controllers) == 0x000058, "Wrong size on BP_GSC_Team_Raid_C_Get_Member_Controllers");
static_assert(offsetof(BP_GSC_Team_Raid_C_Get_Member_Controllers, Player_Controllers) == 0x000000, "Member 'BP_GSC_Team_Raid_C_Get_Member_Controllers::Player_Controllers' has a wrong offset!");
static_assert(offsetof(BP_GSC_Team_Raid_C_Get_Member_Controllers, Controllers) == 0x000010, "Member 'BP_GSC_Team_Raid_C_Get_Member_Controllers::Controllers' has a wrong offset!");
static_assert(offsetof(BP_GSC_Team_Raid_C_Get_Member_Controllers, Temp_int_Loop_Counter_Variable) == 0x000020, "Member 'BP_GSC_Team_Raid_C_Get_Member_Controllers::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(BP_GSC_Team_Raid_C_Get_Member_Controllers, CallFunc_Add_IntInt_ReturnValue) == 0x000024, "Member 'BP_GSC_Team_Raid_C_Get_Member_Controllers::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_GSC_Team_Raid_C_Get_Member_Controllers, Temp_int_Array_Index_Variable) == 0x000028, "Member 'BP_GSC_Team_Raid_C_Get_Member_Controllers::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(BP_GSC_Team_Raid_C_Get_Member_Controllers, CallFunc_Get_Members_Member_States) == 0x000030, "Member 'BP_GSC_Team_Raid_C_Get_Member_Controllers::CallFunc_Get_Members_Member_States' has a wrong offset!");
static_assert(offsetof(BP_GSC_Team_Raid_C_Get_Member_Controllers, CallFunc_Array_Get_Item) == 0x000040, "Member 'BP_GSC_Team_Raid_C_Get_Member_Controllers::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(BP_GSC_Team_Raid_C_Get_Member_Controllers, CallFunc_Array_Length_ReturnValue) == 0x000048, "Member 'BP_GSC_Team_Raid_C_Get_Member_Controllers::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_GSC_Team_Raid_C_Get_Member_Controllers, CallFunc_Less_IntInt_ReturnValue) == 0x00004C, "Member 'BP_GSC_Team_Raid_C_Get_Member_Controllers::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_GSC_Team_Raid_C_Get_Member_Controllers, CallFunc_IsValid_ReturnValue) == 0x00004D, "Member 'BP_GSC_Team_Raid_C_Get_Member_Controllers::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_GSC_Team_Raid_C_Get_Member_Controllers, CallFunc_Array_Add_ReturnValue) == 0x000050, "Member 'BP_GSC_Team_Raid_C_Get_Member_Controllers::CallFunc_Array_Add_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_GSC_Team_Raid_C_Get_Member_Controllers, CallFunc_IsValid_ReturnValue_1) == 0x000054, "Member 'BP_GSC_Team_Raid_C_Get_Member_Controllers::CallFunc_IsValid_ReturnValue_1' has a wrong offset!");

// Function BP_GSC_Team_Raid.BP_GSC_Team_Raid_C.Set Side
// 0x000C (0x000C - 0x0000)
struct BP_GSC_Team_Raid_C_Set_Side final
{
public:
	class FName                                   Side_0;                                            // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Success;                                           // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Set_Side_Success;                         // 0x0009(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_EqualEqual_NameName_ReturnValue;          // 0x000A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_GSC_Team_Raid_C_Set_Side) == 0x000004, "Wrong alignment on BP_GSC_Team_Raid_C_Set_Side");
static_assert(sizeof(BP_GSC_Team_Raid_C_Set_Side) == 0x00000C, "Wrong size on BP_GSC_Team_Raid_C_Set_Side");
static_assert(offsetof(BP_GSC_Team_Raid_C_Set_Side, Side_0) == 0x000000, "Member 'BP_GSC_Team_Raid_C_Set_Side::Side_0' has a wrong offset!");
static_assert(offsetof(BP_GSC_Team_Raid_C_Set_Side, Success) == 0x000008, "Member 'BP_GSC_Team_Raid_C_Set_Side::Success' has a wrong offset!");
static_assert(offsetof(BP_GSC_Team_Raid_C_Set_Side, CallFunc_Set_Side_Success) == 0x000009, "Member 'BP_GSC_Team_Raid_C_Set_Side::CallFunc_Set_Side_Success' has a wrong offset!");
static_assert(offsetof(BP_GSC_Team_Raid_C_Set_Side, CallFunc_EqualEqual_NameName_ReturnValue) == 0x00000A, "Member 'BP_GSC_Team_Raid_C_Set_Side::CallFunc_EqualEqual_NameName_ReturnValue' has a wrong offset!");

// Function BP_GSC_Team_Raid.BP_GSC_Team_Raid_C.Add Player
// 0x0018 (0x0018 - 0x0000)
struct BP_GSC_Team_Raid_C_Add_Player final
{
public:
	class ABP_PlayerController_Teams_C*           Player;                                            // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Success;                                           // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Temp_int_Variable;                                 // 0x000C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Add_Player_Success;                       // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_11[0x3];                                       // 0x0011(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x0014(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_GSC_Team_Raid_C_Add_Player) == 0x000008, "Wrong alignment on BP_GSC_Team_Raid_C_Add_Player");
static_assert(sizeof(BP_GSC_Team_Raid_C_Add_Player) == 0x000018, "Wrong size on BP_GSC_Team_Raid_C_Add_Player");
static_assert(offsetof(BP_GSC_Team_Raid_C_Add_Player, Player) == 0x000000, "Member 'BP_GSC_Team_Raid_C_Add_Player::Player' has a wrong offset!");
static_assert(offsetof(BP_GSC_Team_Raid_C_Add_Player, Success) == 0x000008, "Member 'BP_GSC_Team_Raid_C_Add_Player::Success' has a wrong offset!");
static_assert(offsetof(BP_GSC_Team_Raid_C_Add_Player, Temp_int_Variable) == 0x00000C, "Member 'BP_GSC_Team_Raid_C_Add_Player::Temp_int_Variable' has a wrong offset!");
static_assert(offsetof(BP_GSC_Team_Raid_C_Add_Player, CallFunc_Add_Player_Success) == 0x000010, "Member 'BP_GSC_Team_Raid_C_Add_Player::CallFunc_Add_Player_Success' has a wrong offset!");
static_assert(offsetof(BP_GSC_Team_Raid_C_Add_Player, CallFunc_Add_IntInt_ReturnValue) == 0x000014, "Member 'BP_GSC_Team_Raid_C_Add_Player::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");

}

