#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: UI_GameInfo

#include "Basic.hpp"

#include "SlateCore_structs.hpp"
#include "UMG_structs.hpp"


namespace SDK::Params
{

// Function UI_GameInfo.UI_GameInfo_C.ExecuteUbergraph_UI_GameInfo
// 0x0004 (0x0004 - 0x0000)
struct UI_GameInfo_C_ExecuteUbergraph_UI_GameInfo final
{
public:
	int32                                         EntryPoint;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(UI_GameInfo_C_ExecuteUbergraph_UI_GameInfo) == 0x000004, "Wrong alignment on UI_GameInfo_C_ExecuteUbergraph_UI_GameInfo");
static_assert(sizeof(UI_GameInfo_C_ExecuteUbergraph_UI_GameInfo) == 0x000004, "Wrong size on UI_GameInfo_C_ExecuteUbergraph_UI_GameInfo");
static_assert(offsetof(UI_GameInfo_C_ExecuteUbergraph_UI_GameInfo, EntryPoint) == 0x000000, "Member 'UI_GameInfo_C_ExecuteUbergraph_UI_GameInfo::EntryPoint' has a wrong offset!");

// Function UI_GameInfo.UI_GameInfo_C.UpdateGameInfo
// 0x00A8 (0x00A8 - 0x0000)
struct UI_GameInfo_C_UpdateGameInfo final
{
public:
	ESlateVisibility                              Temp_byte_Variable;                                // 0x0000(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable;                                // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable_1;                              // 0x0002(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_3[0x5];                                        // 0x0003(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   Temp_text_Variable;                                // 0x0008(0x0018)()
	ESlateVisibility                              Temp_byte_Variable_1;                              // 0x0020(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable_2;                              // 0x0021(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_22[0x2];                                       // 0x0022(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x0024(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x0028(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Greater_IntInt_ReturnValue;               // 0x002C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	ESlateVisibility                              CallFunc_GetVisibility_ReturnValue;                // 0x002D(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue;          // 0x002E(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	ESlateVisibility                              Temp_byte_Variable_2;                              // 0x002F(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              Temp_byte_Variable_3;                              // 0x0030(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable_3;                              // 0x0031(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_32[0x2];                                       // 0x0032(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Array_Length_ReturnValue_1;               // 0x0034(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Greater_IntInt_ReturnValue_1;             // 0x0038(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Not_PreBool_ReturnValue;                  // 0x0039(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	ESlateVisibility                              CallFunc_GetVisibility_ReturnValue_1;              // 0x003A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue_1;        // 0x003B(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	ESlateVisibility                              K2Node_Select_Default;                             // 0x003C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable_4;                              // 0x003D(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_3E[0x2];                                       // 0x003E(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	class AGameStateBase*                         CallFunc_GetGameState_ReturnValue;                 // 0x0040(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         K2Node_Select_Default_1;                           // 0x0048(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4C[0x4];                                       // 0x004C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class ABP_GameState_C*                        K2Node_DynamicCast_AsBP_Game_State;                // 0x0050(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0058(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_59[0x3];                                       // 0x0059(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Add_IntInt_ReturnValue_1;                 // 0x005C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue_2;                 // 0x0060(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_64[0x4];                                       // 0x0064(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   CallFunc_Get_Game_Mode_Description_Game_Mode_Description; // 0x0068(0x0018)()
	int32                                         K2Node_Select_Default_2;                           // 0x0080(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_84[0x4];                                       // 0x0084(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   K2Node_Select_Default_3;                           // 0x0088(0x0018)()
	bool                                          CallFunc_TextIsEmpty_ReturnValue;                  // 0x00A0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	ESlateVisibility                              K2Node_Select_Default_4;                           // 0x00A1(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(UI_GameInfo_C_UpdateGameInfo) == 0x000008, "Wrong alignment on UI_GameInfo_C_UpdateGameInfo");
static_assert(sizeof(UI_GameInfo_C_UpdateGameInfo) == 0x0000A8, "Wrong size on UI_GameInfo_C_UpdateGameInfo");
static_assert(offsetof(UI_GameInfo_C_UpdateGameInfo, Temp_byte_Variable) == 0x000000, "Member 'UI_GameInfo_C_UpdateGameInfo::Temp_byte_Variable' has a wrong offset!");
static_assert(offsetof(UI_GameInfo_C_UpdateGameInfo, Temp_bool_Variable) == 0x000001, "Member 'UI_GameInfo_C_UpdateGameInfo::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(UI_GameInfo_C_UpdateGameInfo, Temp_bool_Variable_1) == 0x000002, "Member 'UI_GameInfo_C_UpdateGameInfo::Temp_bool_Variable_1' has a wrong offset!");
static_assert(offsetof(UI_GameInfo_C_UpdateGameInfo, Temp_text_Variable) == 0x000008, "Member 'UI_GameInfo_C_UpdateGameInfo::Temp_text_Variable' has a wrong offset!");
static_assert(offsetof(UI_GameInfo_C_UpdateGameInfo, Temp_byte_Variable_1) == 0x000020, "Member 'UI_GameInfo_C_UpdateGameInfo::Temp_byte_Variable_1' has a wrong offset!");
static_assert(offsetof(UI_GameInfo_C_UpdateGameInfo, Temp_bool_Variable_2) == 0x000021, "Member 'UI_GameInfo_C_UpdateGameInfo::Temp_bool_Variable_2' has a wrong offset!");
static_assert(offsetof(UI_GameInfo_C_UpdateGameInfo, CallFunc_Add_IntInt_ReturnValue) == 0x000024, "Member 'UI_GameInfo_C_UpdateGameInfo::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(UI_GameInfo_C_UpdateGameInfo, CallFunc_Array_Length_ReturnValue) == 0x000028, "Member 'UI_GameInfo_C_UpdateGameInfo::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(UI_GameInfo_C_UpdateGameInfo, CallFunc_Greater_IntInt_ReturnValue) == 0x00002C, "Member 'UI_GameInfo_C_UpdateGameInfo::CallFunc_Greater_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(UI_GameInfo_C_UpdateGameInfo, CallFunc_GetVisibility_ReturnValue) == 0x00002D, "Member 'UI_GameInfo_C_UpdateGameInfo::CallFunc_GetVisibility_ReturnValue' has a wrong offset!");
static_assert(offsetof(UI_GameInfo_C_UpdateGameInfo, CallFunc_EqualEqual_ByteByte_ReturnValue) == 0x00002E, "Member 'UI_GameInfo_C_UpdateGameInfo::CallFunc_EqualEqual_ByteByte_ReturnValue' has a wrong offset!");
static_assert(offsetof(UI_GameInfo_C_UpdateGameInfo, Temp_byte_Variable_2) == 0x00002F, "Member 'UI_GameInfo_C_UpdateGameInfo::Temp_byte_Variable_2' has a wrong offset!");
static_assert(offsetof(UI_GameInfo_C_UpdateGameInfo, Temp_byte_Variable_3) == 0x000030, "Member 'UI_GameInfo_C_UpdateGameInfo::Temp_byte_Variable_3' has a wrong offset!");
static_assert(offsetof(UI_GameInfo_C_UpdateGameInfo, Temp_bool_Variable_3) == 0x000031, "Member 'UI_GameInfo_C_UpdateGameInfo::Temp_bool_Variable_3' has a wrong offset!");
static_assert(offsetof(UI_GameInfo_C_UpdateGameInfo, CallFunc_Array_Length_ReturnValue_1) == 0x000034, "Member 'UI_GameInfo_C_UpdateGameInfo::CallFunc_Array_Length_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(UI_GameInfo_C_UpdateGameInfo, CallFunc_Greater_IntInt_ReturnValue_1) == 0x000038, "Member 'UI_GameInfo_C_UpdateGameInfo::CallFunc_Greater_IntInt_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(UI_GameInfo_C_UpdateGameInfo, CallFunc_Not_PreBool_ReturnValue) == 0x000039, "Member 'UI_GameInfo_C_UpdateGameInfo::CallFunc_Not_PreBool_ReturnValue' has a wrong offset!");
static_assert(offsetof(UI_GameInfo_C_UpdateGameInfo, CallFunc_GetVisibility_ReturnValue_1) == 0x00003A, "Member 'UI_GameInfo_C_UpdateGameInfo::CallFunc_GetVisibility_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(UI_GameInfo_C_UpdateGameInfo, CallFunc_EqualEqual_ByteByte_ReturnValue_1) == 0x00003B, "Member 'UI_GameInfo_C_UpdateGameInfo::CallFunc_EqualEqual_ByteByte_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(UI_GameInfo_C_UpdateGameInfo, K2Node_Select_Default) == 0x00003C, "Member 'UI_GameInfo_C_UpdateGameInfo::K2Node_Select_Default' has a wrong offset!");
static_assert(offsetof(UI_GameInfo_C_UpdateGameInfo, Temp_bool_Variable_4) == 0x00003D, "Member 'UI_GameInfo_C_UpdateGameInfo::Temp_bool_Variable_4' has a wrong offset!");
static_assert(offsetof(UI_GameInfo_C_UpdateGameInfo, CallFunc_GetGameState_ReturnValue) == 0x000040, "Member 'UI_GameInfo_C_UpdateGameInfo::CallFunc_GetGameState_ReturnValue' has a wrong offset!");
static_assert(offsetof(UI_GameInfo_C_UpdateGameInfo, K2Node_Select_Default_1) == 0x000048, "Member 'UI_GameInfo_C_UpdateGameInfo::K2Node_Select_Default_1' has a wrong offset!");
static_assert(offsetof(UI_GameInfo_C_UpdateGameInfo, K2Node_DynamicCast_AsBP_Game_State) == 0x000050, "Member 'UI_GameInfo_C_UpdateGameInfo::K2Node_DynamicCast_AsBP_Game_State' has a wrong offset!");
static_assert(offsetof(UI_GameInfo_C_UpdateGameInfo, K2Node_DynamicCast_bSuccess) == 0x000058, "Member 'UI_GameInfo_C_UpdateGameInfo::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(UI_GameInfo_C_UpdateGameInfo, CallFunc_Add_IntInt_ReturnValue_1) == 0x00005C, "Member 'UI_GameInfo_C_UpdateGameInfo::CallFunc_Add_IntInt_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(UI_GameInfo_C_UpdateGameInfo, CallFunc_Add_IntInt_ReturnValue_2) == 0x000060, "Member 'UI_GameInfo_C_UpdateGameInfo::CallFunc_Add_IntInt_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(UI_GameInfo_C_UpdateGameInfo, CallFunc_Get_Game_Mode_Description_Game_Mode_Description) == 0x000068, "Member 'UI_GameInfo_C_UpdateGameInfo::CallFunc_Get_Game_Mode_Description_Game_Mode_Description' has a wrong offset!");
static_assert(offsetof(UI_GameInfo_C_UpdateGameInfo, K2Node_Select_Default_2) == 0x000080, "Member 'UI_GameInfo_C_UpdateGameInfo::K2Node_Select_Default_2' has a wrong offset!");
static_assert(offsetof(UI_GameInfo_C_UpdateGameInfo, K2Node_Select_Default_3) == 0x000088, "Member 'UI_GameInfo_C_UpdateGameInfo::K2Node_Select_Default_3' has a wrong offset!");
static_assert(offsetof(UI_GameInfo_C_UpdateGameInfo, CallFunc_TextIsEmpty_ReturnValue) == 0x0000A0, "Member 'UI_GameInfo_C_UpdateGameInfo::CallFunc_TextIsEmpty_ReturnValue' has a wrong offset!");
static_assert(offsetof(UI_GameInfo_C_UpdateGameInfo, K2Node_Select_Default_4) == 0x0000A1, "Member 'UI_GameInfo_C_UpdateGameInfo::K2Node_Select_Default_4' has a wrong offset!");

// Function UI_GameInfo.UI_GameInfo_C.UpdatePlayerName
// 0x02C8 (0x02C8 - 0x0000)
struct UI_GameInfo_C_UpdatePlayerName final
{
public:
	struct FTextBlockStyle                        Nickname_Style;                                    // 0x0000(0x0270)(Edit, BlueprintVisible)
	class FText                                   CallFunc_GetRichPlayerNicknameWidget_ReturnValue;  // 0x0270(0x0018)()
	class APlayerController*                      CallFunc_GetOwningPlayer_ReturnValue;              // 0x0288(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FText                                   CallFunc_MakeLiteralText_ReturnValue;              // 0x0290(0x0018)()
	class AHumanPlayerState*                      K2Node_DynamicCast_AsHuman_Player_State;           // 0x02A8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x02B0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_2B1[0x7];                                      // 0x02B1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UConsoleEvents*                         CallFunc_GetConsoleEvents_ReturnValue;             // 0x02B8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsUserLoggedIn_ReturnValue;               // 0x02C0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(UI_GameInfo_C_UpdatePlayerName) == 0x000008, "Wrong alignment on UI_GameInfo_C_UpdatePlayerName");
static_assert(sizeof(UI_GameInfo_C_UpdatePlayerName) == 0x0002C8, "Wrong size on UI_GameInfo_C_UpdatePlayerName");
static_assert(offsetof(UI_GameInfo_C_UpdatePlayerName, Nickname_Style) == 0x000000, "Member 'UI_GameInfo_C_UpdatePlayerName::Nickname_Style' has a wrong offset!");
static_assert(offsetof(UI_GameInfo_C_UpdatePlayerName, CallFunc_GetRichPlayerNicknameWidget_ReturnValue) == 0x000270, "Member 'UI_GameInfo_C_UpdatePlayerName::CallFunc_GetRichPlayerNicknameWidget_ReturnValue' has a wrong offset!");
static_assert(offsetof(UI_GameInfo_C_UpdatePlayerName, CallFunc_GetOwningPlayer_ReturnValue) == 0x000288, "Member 'UI_GameInfo_C_UpdatePlayerName::CallFunc_GetOwningPlayer_ReturnValue' has a wrong offset!");
static_assert(offsetof(UI_GameInfo_C_UpdatePlayerName, CallFunc_MakeLiteralText_ReturnValue) == 0x000290, "Member 'UI_GameInfo_C_UpdatePlayerName::CallFunc_MakeLiteralText_ReturnValue' has a wrong offset!");
static_assert(offsetof(UI_GameInfo_C_UpdatePlayerName, K2Node_DynamicCast_AsHuman_Player_State) == 0x0002A8, "Member 'UI_GameInfo_C_UpdatePlayerName::K2Node_DynamicCast_AsHuman_Player_State' has a wrong offset!");
static_assert(offsetof(UI_GameInfo_C_UpdatePlayerName, K2Node_DynamicCast_bSuccess) == 0x0002B0, "Member 'UI_GameInfo_C_UpdatePlayerName::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(UI_GameInfo_C_UpdatePlayerName, CallFunc_GetConsoleEvents_ReturnValue) == 0x0002B8, "Member 'UI_GameInfo_C_UpdatePlayerName::CallFunc_GetConsoleEvents_ReturnValue' has a wrong offset!");
static_assert(offsetof(UI_GameInfo_C_UpdatePlayerName, CallFunc_IsUserLoggedIn_ReturnValue) == 0x0002C0, "Member 'UI_GameInfo_C_UpdatePlayerName::CallFunc_IsUserLoggedIn_ReturnValue' has a wrong offset!");

}

