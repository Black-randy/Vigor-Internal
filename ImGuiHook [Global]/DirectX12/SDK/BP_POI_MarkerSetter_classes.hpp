#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_POI_MarkerSetter

#include "Basic.hpp"

#include "Flame_structs.hpp"
#include "Engine_structs.hpp"
#include "Engine_classes.hpp"
#include "CoreUObject_structs.hpp"


namespace SDK
{

// BlueprintGeneratedClass BP_POI_MarkerSetter.BP_POI_MarkerSetter_C
// 0x0130 (0x0350 - 0x0220)
class ABP_POI_MarkerSetter_C final : public AActor
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x0220(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class UBP_CommoditySpawnNode_C*               BP_CommoditySpawnNode;                             // 0x0228(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USphereComponent*                       Sphere;                                            // 0x0230(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UTextRenderComponent*                   TextRender;                                        // 0x0238(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UBP_MapMarkerComponent_C*               MapMarkerComponent;                                // 0x0240(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USceneComponent*                        DefaultSceneRoot;                                  // 0x0248(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UTexture*                               Icon_Undiscovered;                                 // 0x0250(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash)
	EMapMarkerType                                Color_Undiscovered;                                // 0x0258(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash)
	uint8                                         Pad_259[0x3];                                      // 0x0259(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector2D                              IconSize_Undiscovered;                             // 0x025C(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash)
	float                                         Tilt_Undiscovered;                                 // 0x0264(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash)
	class FText                                   Label_Undiscovered;                                // 0x0268(0x0018)(Edit, BlueprintVisible, ExposeOnSpawn)
	class UTexture*                               Icon_Discovered;                                   // 0x0280(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash)
	EMapMarkerType                                Color_Discovered;                                  // 0x0288(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash)
	uint8                                         Pad_289[0x3];                                      // 0x0289(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector2D                              IconSize_Discovered;                               // 0x028C(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash)
	float                                         Tilt_Discovered;                                   // 0x0294(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash)
	class FText                                   Label_Discovered;                                  // 0x0298(0x0018)(Edit, BlueprintVisible, ExposeOnSpawn)
	TSet<class ABP_PlayerController_Script_C*>    ListOfAlreadyOverlapedPlayers;                     // 0x02B0(0x0050)(Edit, BlueprintVisible, DisableEditOnTemplate, DisableEditOnInstance)
	bool                                          ImageSizeIsRealWorldSize_Undiscovered;             // 0x0300(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn)
	bool                                          ImageSizeIsRealWorldSize_Discovered;               // 0x0301(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn)
	bool                                          IsMarkerActive;                                    // 0x0302(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn)
	uint8                                         Pad_303[0x5];                                      // 0x0303(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 SaveGameSlotName;                                  // 0x0308(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, HasGetValueTypeHash)
	class UUI_POI_C*                              POI_Widget;                                        // 0x0318(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UBP_POIManagerComponent_C*              POIManager;                                        // 0x0320(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Discover_Radius;                                   // 0x0328(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_32C[0x4];                                      // 0x032C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class AHumanCharacter*>                Overlapping_Before_Match_Start;                    // 0x0330(0x0010)(Edit, BlueprintVisible, DisableEditOnTemplate, DisableEditOnInstance)
	struct FTimerHandle                           Match_Start_Waiter;                                // 0x0340(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	bool                                          EnableLogging;                                     // 0x0348(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)

public:
	void ExecuteUbergraph_BP_POI_MarkerSetter(int32 EntryPoint);
	void Character_Overlapped_POI(class AHumanCharacter* Human_Character);
	void Wait_For_Match_Started();
	void ReceiveBeginPlay();
	void BndEvt__Sphere_K2Node_ComponentBoundEvent_0_ComponentBeginOverlapSignature__DelegateSignature(class UPrimitiveComponent* OverlappedComponent, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, int32 OtherBodyIndex, bool bFromSweep, const struct FHitResult& SweepResult);
	void UserConstructionScript();
	void AddLabelToSaveFile();
	bool IsLabelInSaveFile(const class FName& POI_Tag);
	void Get_POI_Tag(class FName* Tag);
	void Switch_Visuals_to_Discovered();
	class FString Get_Save_Game_Slot_Name();

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BP_POI_MarkerSetter_C">();
	}
	static class ABP_POI_MarkerSetter_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<ABP_POI_MarkerSetter_C>();
	}
};
static_assert(alignof(ABP_POI_MarkerSetter_C) == 0x000008, "Wrong alignment on ABP_POI_MarkerSetter_C");
static_assert(sizeof(ABP_POI_MarkerSetter_C) == 0x000350, "Wrong size on ABP_POI_MarkerSetter_C");
static_assert(offsetof(ABP_POI_MarkerSetter_C, UberGraphFrame) == 0x000220, "Member 'ABP_POI_MarkerSetter_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(ABP_POI_MarkerSetter_C, BP_CommoditySpawnNode) == 0x000228, "Member 'ABP_POI_MarkerSetter_C::BP_CommoditySpawnNode' has a wrong offset!");
static_assert(offsetof(ABP_POI_MarkerSetter_C, Sphere) == 0x000230, "Member 'ABP_POI_MarkerSetter_C::Sphere' has a wrong offset!");
static_assert(offsetof(ABP_POI_MarkerSetter_C, TextRender) == 0x000238, "Member 'ABP_POI_MarkerSetter_C::TextRender' has a wrong offset!");
static_assert(offsetof(ABP_POI_MarkerSetter_C, MapMarkerComponent) == 0x000240, "Member 'ABP_POI_MarkerSetter_C::MapMarkerComponent' has a wrong offset!");
static_assert(offsetof(ABP_POI_MarkerSetter_C, DefaultSceneRoot) == 0x000248, "Member 'ABP_POI_MarkerSetter_C::DefaultSceneRoot' has a wrong offset!");
static_assert(offsetof(ABP_POI_MarkerSetter_C, Icon_Undiscovered) == 0x000250, "Member 'ABP_POI_MarkerSetter_C::Icon_Undiscovered' has a wrong offset!");
static_assert(offsetof(ABP_POI_MarkerSetter_C, Color_Undiscovered) == 0x000258, "Member 'ABP_POI_MarkerSetter_C::Color_Undiscovered' has a wrong offset!");
static_assert(offsetof(ABP_POI_MarkerSetter_C, IconSize_Undiscovered) == 0x00025C, "Member 'ABP_POI_MarkerSetter_C::IconSize_Undiscovered' has a wrong offset!");
static_assert(offsetof(ABP_POI_MarkerSetter_C, Tilt_Undiscovered) == 0x000264, "Member 'ABP_POI_MarkerSetter_C::Tilt_Undiscovered' has a wrong offset!");
static_assert(offsetof(ABP_POI_MarkerSetter_C, Label_Undiscovered) == 0x000268, "Member 'ABP_POI_MarkerSetter_C::Label_Undiscovered' has a wrong offset!");
static_assert(offsetof(ABP_POI_MarkerSetter_C, Icon_Discovered) == 0x000280, "Member 'ABP_POI_MarkerSetter_C::Icon_Discovered' has a wrong offset!");
static_assert(offsetof(ABP_POI_MarkerSetter_C, Color_Discovered) == 0x000288, "Member 'ABP_POI_MarkerSetter_C::Color_Discovered' has a wrong offset!");
static_assert(offsetof(ABP_POI_MarkerSetter_C, IconSize_Discovered) == 0x00028C, "Member 'ABP_POI_MarkerSetter_C::IconSize_Discovered' has a wrong offset!");
static_assert(offsetof(ABP_POI_MarkerSetter_C, Tilt_Discovered) == 0x000294, "Member 'ABP_POI_MarkerSetter_C::Tilt_Discovered' has a wrong offset!");
static_assert(offsetof(ABP_POI_MarkerSetter_C, Label_Discovered) == 0x000298, "Member 'ABP_POI_MarkerSetter_C::Label_Discovered' has a wrong offset!");
static_assert(offsetof(ABP_POI_MarkerSetter_C, ListOfAlreadyOverlapedPlayers) == 0x0002B0, "Member 'ABP_POI_MarkerSetter_C::ListOfAlreadyOverlapedPlayers' has a wrong offset!");
static_assert(offsetof(ABP_POI_MarkerSetter_C, ImageSizeIsRealWorldSize_Undiscovered) == 0x000300, "Member 'ABP_POI_MarkerSetter_C::ImageSizeIsRealWorldSize_Undiscovered' has a wrong offset!");
static_assert(offsetof(ABP_POI_MarkerSetter_C, ImageSizeIsRealWorldSize_Discovered) == 0x000301, "Member 'ABP_POI_MarkerSetter_C::ImageSizeIsRealWorldSize_Discovered' has a wrong offset!");
static_assert(offsetof(ABP_POI_MarkerSetter_C, IsMarkerActive) == 0x000302, "Member 'ABP_POI_MarkerSetter_C::IsMarkerActive' has a wrong offset!");
static_assert(offsetof(ABP_POI_MarkerSetter_C, SaveGameSlotName) == 0x000308, "Member 'ABP_POI_MarkerSetter_C::SaveGameSlotName' has a wrong offset!");
static_assert(offsetof(ABP_POI_MarkerSetter_C, POI_Widget) == 0x000318, "Member 'ABP_POI_MarkerSetter_C::POI_Widget' has a wrong offset!");
static_assert(offsetof(ABP_POI_MarkerSetter_C, POIManager) == 0x000320, "Member 'ABP_POI_MarkerSetter_C::POIManager' has a wrong offset!");
static_assert(offsetof(ABP_POI_MarkerSetter_C, Discover_Radius) == 0x000328, "Member 'ABP_POI_MarkerSetter_C::Discover_Radius' has a wrong offset!");
static_assert(offsetof(ABP_POI_MarkerSetter_C, Overlapping_Before_Match_Start) == 0x000330, "Member 'ABP_POI_MarkerSetter_C::Overlapping_Before_Match_Start' has a wrong offset!");
static_assert(offsetof(ABP_POI_MarkerSetter_C, Match_Start_Waiter) == 0x000340, "Member 'ABP_POI_MarkerSetter_C::Match_Start_Waiter' has a wrong offset!");
static_assert(offsetof(ABP_POI_MarkerSetter_C, EnableLogging) == 0x000348, "Member 'ABP_POI_MarkerSetter_C::EnableLogging' has a wrong offset!");

}

