#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_PlayerController

#include "Basic.hpp"

#include "Flame_classes.hpp"
#include "Engine_structs.hpp"


namespace SDK
{

// BlueprintGeneratedClass BP_PlayerController.BP_PlayerController_C
// 0x0068 (0x0A38 - 0x09D0)
class ABP_PlayerController_C : public AHumanPlayerController
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x09D0(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class UBP_OnlineElevatorControllerComponent_C* BP_OnlineElevatorControllerComponent;              // 0x09D8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UBP_OnlineWeaponCustomizationsComponent_C* BP_OnlineWeaponCustomizationsComponent;            // 0x09E0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UBP_OnlineUserCountersComponent_C*      BP_OnlineUserCountersComponent;                    // 0x09E8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UBP_OnlineCustomizationComponent_C*     BP_OnlineCustomizationComponent;                   // 0x09F0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UBP_OnlineInventoryComponent_C*         BP_OnlineInventoryComponent;                       // 0x09F8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	uint8                                         InputAction;                                       // 0x0A00(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bAlreadyPossessedPawn;                             // 0x0A01(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_A02[0x6];                                      // 0x0A02(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	FMulticastInlineDelegateProperty_             Possessed_A_Character;                             // 0x0A08(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	FMulticastInlineDelegateProperty_             GameHasStarted;                                    // 0x0A18(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	class ABP_WeatherManager_C*                   WeatherManagerRef;                                 // 0x0A28(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CurrentWeaponIndex;                                // 0x0A30(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

public:
	void Possessed_A_Character__DelegateSignature(class ABP_Character_C* Possessed_Character);
	void GameHasStarted__DelegateSignature();
	void ExecuteUbergraph_BP_PlayerController(int32 EntryPoint);
	void InpAxisEvt_MouseWheel_K2Node_InputAxisEvent_0(float AxisValue);
	void ReceiveBeginPlay();
	void AddUserMessage(const class FText& Message, TSoftObjectPtr<class USoundBase> Optional2D_Sound);
	void AnyMatchStarted();
	void OnPlayerMenuAction();
	void CreateGlint(class USceneComponent* AttachComponent, float Size);
	void IncrementUsedAmmo();
	void IncrementShotsFired();
	void Possessed(class ABP_Character_C* Possessed_Character);
	void Add_User_Message(const class FText& Message, TSoftObjectPtr<class USoundBase> Optional2D_Sound);
	void PossessedServer(class ABP_Character_C* Possessed_Character);
	void InpActEvt_SecondaryWeaponTwo_K2Node_InputActionEvent_0(const struct FKey& Key);
	void InpActEvt_SecondaryWeaponOne_K2Node_InputActionEvent_1(const struct FKey& Key);
	void InpActEvt_PrimaryWeaponTwo_K2Node_InputActionEvent_2(const struct FKey& Key);
	void InpActEvt_PrimaryWeaponOne_K2Node_InputActionEvent_3(const struct FKey& Key);
	void SetWeatherManagerRef();
	void ChangeWeaponWheel(bool DoesIncrement);
	void BPI_RegisterMapMarkedActor(class UBP_MapMarkerComponent_C* MarkerComponent, bool* bValid, class FName* UsedTag);
	void BPI_UnRegisterMapMarkedActor(class UBP_MapMarkerComponent_C* MarkerComponent, bool* Success);
	void GetLobbyStateAndTimes(bool* Valid, bool* HasMatchStarted, bool* DelayedMatchStartIsInEffect, int32* RemainingTimeToEncounter, int32* TotalTimeToEncounter);
	void GetGroupID(bool* Valid, class FString* GroupId);
	void GetLastRespawnTime(bool* Valid, struct FDateTime* LastRespawnTime);
	void GetLastMatchID_Info(bool* Valid, bool* LastMatchIDReset, class FString* MatchID_ToSave);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BP_PlayerController_C">();
	}
	static class ABP_PlayerController_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<ABP_PlayerController_C>();
	}
};
static_assert(alignof(ABP_PlayerController_C) == 0x000008, "Wrong alignment on ABP_PlayerController_C");
static_assert(sizeof(ABP_PlayerController_C) == 0x000A38, "Wrong size on ABP_PlayerController_C");
static_assert(offsetof(ABP_PlayerController_C, UberGraphFrame) == 0x0009D0, "Member 'ABP_PlayerController_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(ABP_PlayerController_C, BP_OnlineElevatorControllerComponent) == 0x0009D8, "Member 'ABP_PlayerController_C::BP_OnlineElevatorControllerComponent' has a wrong offset!");
static_assert(offsetof(ABP_PlayerController_C, BP_OnlineWeaponCustomizationsComponent) == 0x0009E0, "Member 'ABP_PlayerController_C::BP_OnlineWeaponCustomizationsComponent' has a wrong offset!");
static_assert(offsetof(ABP_PlayerController_C, BP_OnlineUserCountersComponent) == 0x0009E8, "Member 'ABP_PlayerController_C::BP_OnlineUserCountersComponent' has a wrong offset!");
static_assert(offsetof(ABP_PlayerController_C, BP_OnlineCustomizationComponent) == 0x0009F0, "Member 'ABP_PlayerController_C::BP_OnlineCustomizationComponent' has a wrong offset!");
static_assert(offsetof(ABP_PlayerController_C, BP_OnlineInventoryComponent) == 0x0009F8, "Member 'ABP_PlayerController_C::BP_OnlineInventoryComponent' has a wrong offset!");
static_assert(offsetof(ABP_PlayerController_C, InputAction) == 0x000A00, "Member 'ABP_PlayerController_C::InputAction' has a wrong offset!");
static_assert(offsetof(ABP_PlayerController_C, bAlreadyPossessedPawn) == 0x000A01, "Member 'ABP_PlayerController_C::bAlreadyPossessedPawn' has a wrong offset!");
static_assert(offsetof(ABP_PlayerController_C, Possessed_A_Character) == 0x000A08, "Member 'ABP_PlayerController_C::Possessed_A_Character' has a wrong offset!");
static_assert(offsetof(ABP_PlayerController_C, GameHasStarted) == 0x000A18, "Member 'ABP_PlayerController_C::GameHasStarted' has a wrong offset!");
static_assert(offsetof(ABP_PlayerController_C, WeatherManagerRef) == 0x000A28, "Member 'ABP_PlayerController_C::WeatherManagerRef' has a wrong offset!");
static_assert(offsetof(ABP_PlayerController_C, CurrentWeaponIndex) == 0x000A30, "Member 'ABP_PlayerController_C::CurrentWeaponIndex' has a wrong offset!");

}

