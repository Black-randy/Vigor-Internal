#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_LobbyComponent

#include "Basic.hpp"

#include "BP_LobbyComponent_classes.hpp"
#include "BP_LobbyComponent_parameters.hpp"


namespace SDK
{

// Function BP_LobbyComponent.BP_LobbyComponent_C.ExecuteUbergraph_BP_LobbyComponent
// (Final, UbergraphFunction, HasDefaults)
// Parameters:
// int32                                   EntryPoint                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_LobbyComponent_C::ExecuteUbergraph_BP_LobbyComponent(int32 EntryPoint)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_LobbyComponent_C", "ExecuteUbergraph_BP_LobbyComponent");

	Params::BP_LobbyComponent_C_ExecuteUbergraph_BP_LobbyComponent Parms{};

	Parms.EntryPoint = EntryPoint;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_LobbyComponent.BP_LobbyComponent_C.Client_RequestCurrencyBlock
// (Net, NetReliable, NetClient, BlueprintCallable, BlueprintEvent)
// Parameters:
// EBooster                                Booster                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   Quantity                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class FString                           MatchCloudId                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)

void UBP_LobbyComponent_C::Client_RequestCurrencyBlock(EBooster Booster, int32 Quantity, const class FString& MatchCloudId)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_LobbyComponent_C", "Client_RequestCurrencyBlock");

	Params::BP_LobbyComponent_C_Client_RequestCurrencyBlock Parms{};

	Parms.Booster = Booster;
	Parms.Quantity = Quantity;
	Parms.MatchCloudId = std::move(MatchCloudId);

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_LobbyComponent.BP_LobbyComponent_C.Server_BlockCurrencyForPersonalTickets
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// EBooster                                Booster                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   Quantity                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class FString                           MatchCloudId                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)

void UBP_LobbyComponent_C::Server_BlockCurrencyForPersonalTickets(EBooster Booster, int32 Quantity, const class FString& MatchCloudId)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_LobbyComponent_C", "Server_BlockCurrencyForPersonalTickets");

	Params::BP_LobbyComponent_C_Server_BlockCurrencyForPersonalTickets Parms{};

	Parms.Booster = Booster;
	Parms.Quantity = Quantity;
	Parms.MatchCloudId = std::move(MatchCloudId);

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_LobbyComponent.BP_LobbyComponent_C.RequestUserInfoUpdate
// (BlueprintCallable, BlueprintEvent)

void UBP_LobbyComponent_C::RequestUserInfoUpdate()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_LobbyComponent_C", "RequestUserInfoUpdate");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_LobbyComponent.BP_LobbyComponent_C.In-MatchCurrencyForItemBlocked
// (HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FCloudRequestResult              RequestResult                                          (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
// class AHumanPlayerController*           Player                                                 (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class FString                           MatchCloudId                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)
// class FString                           ProductSku                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)

void UBP_LobbyComponent_C::InMinusMatchCurrencyForItemBlocked(const struct FCloudRequestResult& RequestResult, const class AHumanPlayerController* Player, const class FString& MatchCloudId, const class FString& ProductSku)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_LobbyComponent_C", "In-MatchCurrencyForItemBlocked");

	Params::BP_LobbyComponent_C_InMinusMatchCurrencyForItemBlocked Parms{};

	Parms.RequestResult = std::move(RequestResult);
	Parms.Player = Player;
	Parms.MatchCloudId = std::move(MatchCloudId);
	Parms.ProductSku = std::move(ProductSku);

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_LobbyComponent.BP_LobbyComponent_C.In-MatchBlockCurrency
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// class FString                           MatchCloudId                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)
// EBooster                                BoosterType                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   AlreadyOwnedAmount                                     (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_LobbyComponent_C::InMinusMatchBlockCurrency(const class FString& MatchCloudId, EBooster BoosterType, int32 AlreadyOwnedAmount)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_LobbyComponent_C", "In-MatchBlockCurrency");

	Params::BP_LobbyComponent_C_InMinusMatchBlockCurrency Parms{};

	Parms.MatchCloudId = std::move(MatchCloudId);
	Parms.BoosterType = BoosterType;
	Parms.AlreadyOwnedAmount = AlreadyOwnedAmount;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_LobbyComponent.BP_LobbyComponent_C.RefreshReadyUI
// (Net, NetReliable, HasOutParams, NetClient, BlueprintCallable, BlueprintEvent)
// Parameters:
// TArray<int32>                           ReadyIDs                                               (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)

void UBP_LobbyComponent_C::RefreshReadyUI(const TArray<int32>& ReadyIDs)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_LobbyComponent_C", "RefreshReadyUI");

	Params::BP_LobbyComponent_C_RefreshReadyUI Parms{};

	Parms.ReadyIDs = std::move(ReadyIDs);

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_LobbyComponent.BP_LobbyComponent_C.SetLobbyReadyState
// (Net, NetReliable, NetServer, BlueprintCallable, BlueprintEvent)

void UBP_LobbyComponent_C::SetLobbyReadyState()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_LobbyComponent_C", "SetLobbyReadyState");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_LobbyComponent.BP_LobbyComponent_C.StartLobbyClient
// (BlueprintCallable, BlueprintEvent)

void UBP_LobbyComponent_C::StartLobbyClient()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_LobbyComponent_C", "StartLobbyClient");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_LobbyComponent.BP_LobbyComponent_C.OnSetCloudUserId
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// class FString                           Userid                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)

void UBP_LobbyComponent_C::OnSetCloudUserId(const class FString& Userid)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_LobbyComponent_C", "OnSetCloudUserId");

	Params::BP_LobbyComponent_C_OnSetCloudUserId Parms{};

	Parms.Userid = std::move(Userid);

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_LobbyComponent.BP_LobbyComponent_C.StartLobbyServer
// (Net, NetReliable, NetServer, BlueprintCallable, BlueprintEvent)
// Parameters:
// class ABP_PlayerLobby_Base_C*           Lobby                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_LobbyComponent_C::StartLobbyServer(class ABP_PlayerLobby_Base_C* Lobby)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_LobbyComponent_C", "StartLobbyServer");

	Params::BP_LobbyComponent_C_StartLobbyServer Parms{};

	Parms.Lobby = Lobby;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_LobbyComponent.BP_LobbyComponent_C.PriceReceived
// (HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FCloudRequestResult              RequestResult                                          (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
// struct FCloudPriceList                  PriceList_0                                            (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)

void UBP_LobbyComponent_C::PriceReceived(const struct FCloudRequestResult& RequestResult, const struct FCloudPriceList& PriceList_0)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_LobbyComponent_C", "PriceReceived");

	Params::BP_LobbyComponent_C_PriceReceived Parms{};

	Parms.RequestResult = std::move(RequestResult);
	Parms.PriceList_0 = std::move(PriceList_0);

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_LobbyComponent.BP_LobbyComponent_C.CloseUI
// (Net, NetReliable, NetClient, BlueprintCallable, BlueprintEvent)

void UBP_LobbyComponent_C::CloseUI()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_LobbyComponent_C", "CloseUI");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_LobbyComponent.BP_LobbyComponent_C.SetRemainingTime_Encounter
// (Net, NetReliable, NetClient, BlueprintCallable, BlueprintEvent)
// Parameters:
// int32                                   Seconds                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_LobbyComponent_C::SetRemainingTime_Encounter(int32 Seconds)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_LobbyComponent_C", "SetRemainingTime_Encounter");

	Params::BP_LobbyComponent_C_SetRemainingTime_Encounter Parms{};

	Parms.Seconds = Seconds;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_LobbyComponent.BP_LobbyComponent_C.AckLockLobbyServer
// (Net, NetReliable, NetServer, BlueprintCallable, BlueprintEvent)

void UBP_LobbyComponent_C::AckLockLobbyServer()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_LobbyComponent_C", "AckLockLobbyServer");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_LobbyComponent.BP_LobbyComponent_C.BalanceReceived
// (HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FCloudRequestResult              RequestResult                                          (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
// class AHumanPlayerController*           Player                                                 (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FCloudUserBalance                Balance                                                (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm, NoDestructor)

void UBP_LobbyComponent_C::BalanceReceived(const struct FCloudRequestResult& RequestResult, const class AHumanPlayerController* Player, const struct FCloudUserBalance& Balance)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_LobbyComponent_C", "BalanceReceived");

	Params::BP_LobbyComponent_C_BalanceReceived Parms{};

	Parms.RequestResult = std::move(RequestResult);
	Parms.Player = Player;
	Parms.Balance = std::move(Balance);

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_LobbyComponent.BP_LobbyComponent_C.CurrencyBlocked
// (HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FCloudRequestResult              RequestResult                                          (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
// class AHumanPlayerController*           Player                                                 (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class FString                           MatchCloudId                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)
// class FString                           ProductSku                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)

void UBP_LobbyComponent_C::CurrencyBlocked(const struct FCloudRequestResult& RequestResult, const class AHumanPlayerController* Player, const class FString& MatchCloudId, const class FString& ProductSku)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_LobbyComponent_C", "CurrencyBlocked");

	Params::BP_LobbyComponent_C_CurrencyBlocked Parms{};

	Parms.RequestResult = std::move(RequestResult);
	Parms.Player = Player;
	Parms.MatchCloudId = std::move(MatchCloudId);
	Parms.ProductSku = std::move(ProductSku);

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_LobbyComponent.BP_LobbyComponent_C.LeaveLobbyConfirm
// (Net, NetReliable, NetClient, BlueprintCallable, BlueprintEvent)

void UBP_LobbyComponent_C::LeaveLobbyConfirm()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_LobbyComponent_C", "LeaveLobbyConfirm");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_LobbyComponent.BP_LobbyComponent_C.LeaveLobbyAsk
// (Net, NetReliable, NetServer, BlueprintCallable, BlueprintEvent)

void UBP_LobbyComponent_C::LeaveLobbyAsk()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_LobbyComponent_C", "LeaveLobbyAsk");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_LobbyComponent.BP_LobbyComponent_C.LockLobbyInComponent
// (Net, NetReliable, NetClient, BlueprintCallable, BlueprintEvent)
// Parameters:
// class FString                           MatchCloudId                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)

void UBP_LobbyComponent_C::LockLobbyInComponent(const class FString& MatchCloudId)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_LobbyComponent_C", "LockLobbyInComponent");

	Params::BP_LobbyComponent_C_LockLobbyInComponent Parms{};

	Parms.MatchCloudId = std::move(MatchCloudId);

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_LobbyComponent.BP_LobbyComponent_C.SetRemainingTime
// (Net, NetReliable, NetClient, BlueprintCallable, BlueprintEvent)
// Parameters:
// int32                                   Seconds                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_LobbyComponent_C::SetRemainingTime(int32 Seconds)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_LobbyComponent_C", "SetRemainingTime");

	Params::BP_LobbyComponent_C_SetRemainingTime Parms{};

	Parms.Seconds = Seconds;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_LobbyComponent.BP_LobbyComponent_C.SetBoosterState
// (Net, NetReliable, NetClient, BlueprintCallable, BlueprintEvent)
// Parameters:
// EBooster                                Booster                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   OrderedCount                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   TotalActiveCount                                       (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   MaxCount                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   TicketsUsed                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_LobbyComponent_C::SetBoosterState(EBooster Booster, int32 OrderedCount, int32 TotalActiveCount, int32 MaxCount, int32 TicketsUsed)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_LobbyComponent_C", "SetBoosterState");

	Params::BP_LobbyComponent_C_SetBoosterState Parms{};

	Parms.Booster = Booster;
	Parms.OrderedCount = OrderedCount;
	Parms.TotalActiveCount = TotalActiveCount;
	Parms.MaxCount = MaxCount;
	Parms.TicketsUsed = TicketsUsed;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_LobbyComponent.BP_LobbyComponent_C.SetUI
// (Net, NetReliable, NetClient, BlueprintCallable, BlueprintEvent)
// Parameters:
// class ULobbyBaseMenuWidget*             UI                                                     (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_LobbyComponent_C::SetUI(class ULobbyBaseMenuWidget* UI)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_LobbyComponent_C", "SetUI");

	Params::BP_LobbyComponent_C_SetUI Parms{};

	Parms.UI = UI;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_LobbyComponent.BP_LobbyComponent_C.RemoveBooster
// (Net, NetReliable, NetServer, BlueprintCallable, BlueprintEvent)
// Parameters:
// EBooster                                Booster                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_LobbyComponent_C::RemoveBooster(EBooster Booster)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_LobbyComponent_C", "RemoveBooster");

	Params::BP_LobbyComponent_C_RemoveBooster Parms{};

	Parms.Booster = Booster;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_LobbyComponent.BP_LobbyComponent_C.AddBooster
// (Net, NetReliable, NetServer, BlueprintCallable, BlueprintEvent)
// Parameters:
// EBooster                                Booster                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    TicketUsedInsteadOfCrowns                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void UBP_LobbyComponent_C::AddBooster(EBooster Booster, bool TicketUsedInsteadOfCrowns)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_LobbyComponent_C", "AddBooster");

	Params::BP_LobbyComponent_C_AddBooster Parms{};

	Parms.Booster = Booster;
	Parms.TicketUsedInsteadOfCrowns = TicketUsedInsteadOfCrowns;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_LobbyComponent.BP_LobbyComponent_C.DebugLobbyMsg
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class FString                           Message                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)
// bool                                    IsError                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void UBP_LobbyComponent_C::DebugLobbyMsg(const class FString& Message, bool IsError)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_LobbyComponent_C", "DebugLobbyMsg");

	Params::BP_LobbyComponent_C_DebugLobbyMsg Parms{};

	Parms.Message = std::move(Message);
	Parms.IsError = IsError;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_LobbyComponent.BP_LobbyComponent_C.HandleSoundsOnStart
// (Public, BlueprintCallable, BlueprintEvent)

void UBP_LobbyComponent_C::HandleSoundsOnStart()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_LobbyComponent_C", "HandleSoundsOnStart");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_LobbyComponent.BP_LobbyComponent_C.HandleSoundsOnEnd
// (Public, BlueprintCallable, BlueprintEvent)

void UBP_LobbyComponent_C::HandleSoundsOnEnd()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_LobbyComponent_C", "HandleSoundsOnEnd");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_LobbyComponent.BP_LobbyComponent_C.RemovePlayerFromBlocking
// (Public, BlueprintCallable, BlueprintEvent)

void UBP_LobbyComponent_C::RemovePlayerFromBlocking()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_LobbyComponent_C", "RemovePlayerFromBlocking");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_LobbyComponent.BP_LobbyComponent_C.SetUsedBoosterTicketCount
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// EBooster                                Booster                                                (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   AmountOfActivatedTickets                               (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_LobbyComponent_C::SetUsedBoosterTicketCount(const EBooster Booster, const int32 AmountOfActivatedTickets)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_LobbyComponent_C", "SetUsedBoosterTicketCount");

	Params::BP_LobbyComponent_C_SetUsedBoosterTicketCount Parms{};

	Parms.Booster = Booster;
	Parms.AmountOfActivatedTickets = AmountOfActivatedTickets;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_LobbyComponent.BP_LobbyComponent_C.SetCrownBoughtBoosterTicketCount
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// EBooster                                Booster                                                (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   AmountOfActivatedTickets                               (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_LobbyComponent_C::SetCrownBoughtBoosterTicketCount(const EBooster Booster, const int32 AmountOfActivatedTickets)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_LobbyComponent_C", "SetCrownBoughtBoosterTicketCount");

	Params::BP_LobbyComponent_C_SetCrownBoughtBoosterTicketCount Parms{};

	Parms.Booster = Booster;
	Parms.AmountOfActivatedTickets = AmountOfActivatedTickets;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_LobbyComponent.BP_LobbyComponent_C.GetCrownBoughtBoosterTicketCount
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// EBooster                                Booster                                                (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   UsedTickets                                            (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_LobbyComponent_C::GetCrownBoughtBoosterTicketCount(const EBooster& Booster, int32* UsedTickets)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_LobbyComponent_C", "GetCrownBoughtBoosterTicketCount");

	Params::BP_LobbyComponent_C_GetCrownBoughtBoosterTicketCount Parms{};

	Parms.Booster = Booster;

	UObject::ProcessEvent(Func, &Parms);

	if (UsedTickets != nullptr)
		*UsedTickets = Parms.UsedTickets;
}


// Function BP_LobbyComponent.BP_LobbyComponent_C.Get Booster SKU_BP
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure, Const)
// Parameters:
// EBooster                                Booster                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class FString                           SKU                                                    (Parm, OutParm, ZeroConstructor, HasGetValueTypeHash)

void UBP_LobbyComponent_C::Get_Booster_SKU_BP(EBooster Booster, class FString* SKU) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_LobbyComponent_C", "Get Booster SKU_BP");

	Params::BP_LobbyComponent_C_Get_Booster_SKU_BP Parms{};

	Parms.Booster = Booster;

	UObject::ProcessEvent(Func, &Parms);

	if (SKU != nullptr)
		*SKU = std::move(Parms.SKU);
}


// Function BP_LobbyComponent.BP_LobbyComponent_C.GetBoosterCost
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent, BlueprintPure, Const)
// Parameters:
// EBooster                                Booster                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   Cost                                                   (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   Cost_before_discount                                   (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   DiscountPercent                                        (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    Is_Discounted                                          (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void UBP_LobbyComponent_C::GetBoosterCost(EBooster Booster, int32* Cost, int32* Cost_before_discount, int32* DiscountPercent, bool* Is_Discounted) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_LobbyComponent_C", "GetBoosterCost");

	Params::BP_LobbyComponent_C_GetBoosterCost Parms{};

	Parms.Booster = Booster;

	UObject::ProcessEvent(Func, &Parms);

	if (Cost != nullptr)
		*Cost = Parms.Cost;

	if (Cost_before_discount != nullptr)
		*Cost_before_discount = Parms.Cost_before_discount;

	if (DiscountPercent != nullptr)
		*DiscountPercent = Parms.DiscountPercent;

	if (Is_Discounted != nullptr)
		*Is_Discounted = Parms.Is_Discounted;
}


// Function BP_LobbyComponent.BP_LobbyComponent_C.Get Used Booster Ticket Count_BP
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure, Const)
// Parameters:
// EBooster                                Booster                                                (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   UsedTickets                                            (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_LobbyComponent_C::Get_Used_Booster_Ticket_Count_BP(const EBooster& Booster, int32* UsedTickets) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_LobbyComponent_C", "Get Used Booster Ticket Count_BP");

	Params::BP_LobbyComponent_C_Get_Used_Booster_Ticket_Count_BP Parms{};

	Parms.Booster = Booster;

	UObject::ProcessEvent(Func, &Parms);

	if (UsedTickets != nullptr)
		*UsedTickets = Parms.UsedTickets;
}


// Function BP_LobbyComponent.BP_LobbyComponent_C.GetUsedBoosterTicketCount
// (Event, Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure, Const)
// Parameters:
// EBoosterTypes                           Booster                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// const int32                             ReturnValue                                            (ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

const int32 UBP_LobbyComponent_C::GetUsedBoosterTicketCount(EBoosterTypes Booster) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_LobbyComponent_C", "GetUsedBoosterTicketCount");

	Params::BP_LobbyComponent_C_GetUsedBoosterTicketCount Parms{};

	Parms.Booster = Booster;

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}

}

