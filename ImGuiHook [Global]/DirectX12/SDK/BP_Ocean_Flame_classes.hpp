#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_Ocean_Flame

#include "Basic.hpp"

#include "CoreUObject_structs.hpp"
#include "Engine_structs.hpp"
#include "OceanPlugin_structs.hpp"
#include "OceanPlugin_classes.hpp"
#include "OceanShaderEnum_structs.hpp"


namespace SDK
{

// BlueprintGeneratedClass BP_Ocean_Flame.BP_Ocean_Flame_C
// 0x0208 (0x04B0 - 0x02A8)
class ABP_Ocean_Flame_C final : public AOceanManager
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x02A8(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class UBoxComponent*                          Box;                                               // 0x02B0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UBillboardComponent*                    Icon;                                              // 0x02B8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UWaterComponent*                        Water;                                             // 0x02C0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UPlanarReflectionComponent*             PlanarReflection;                                  // 0x02C8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UInfiniteSystemComponent*               InfiniteSystem;                                    // 0x02D0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UStaticMeshComponent*                   DepthPlaneTopside;                                 // 0x02D8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UStaticMeshComponent*                   DepthPlaneUnderside;                               // 0x02E0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UStaticMeshComponent*                   OceanPlane;                                        // 0x02E8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           BaseColorDark;                                     // 0x02F0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           BaseColorLight;                                    // 0x0300(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           ShallowWaterColor;                                 // 0x0310(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         BaseColorLerp;                                     // 0x0320(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         FresnelPower;                                      // 0x0324(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Base_Fresnel_Reflect;                              // 0x0328(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Metallic;                                          // 0x032C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Roughness;                                         // 0x0330(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Specular;                                          // 0x0334(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         TesselationMultiplier;                             // 0x0338(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Opacity;                                           // 0x033C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         BaseDepthFade;                                     // 0x0340(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         DistortionStrength;                                // 0x0344(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         SceneColorCustomDepth;                             // 0x0348(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         FoamScale;                                         // 0x034C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         FoamDepth1;                                        // 0x0350(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         FoamDepth2;                                        // 0x0354(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         FoamTimeScale;                                     // 0x0358(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           Sss_color;                                         // 0x035C(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         SSS_Scale;                                         // 0x036C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         SSS_Intensity;                                     // 0x0370(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         SSS_LightDepth;                                    // 0x0374(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         DetailNormalScale;                                 // 0x0378(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         DetailNormalSpeed;                                 // 0x037C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         DetailNormalStrength;                              // 0x0380(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         MediumNormalScale;                                 // 0x0384(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         MediumNormalSpeed;                                 // 0x0388(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         MediumNormalStrength;                              // 0x038C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         FarNormalScale;                                    // 0x0390(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         FarNormalSpeed;                                    // 0x0394(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         FarNormalStrength;                                 // 0x0398(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         FarNormalBlendDistance;                            // 0x039C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         FarNormalBlendFalloff;                             // 0x03A0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         PanWaveLerp;                                       // 0x03A4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         PanWaveIntensity;                                  // 0x03A8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         PanWaveTimeScale;                                  // 0x03AC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         PanWaveSize;                                       // 0x03B0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                Panner01Speed;                                     // 0x03B4(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                Panner02Speed;                                     // 0x03C0(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                Panner03Speed;                                     // 0x03CC(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         MacroWaveScale;                                    // 0x03D8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         MacroWaveSpeed;                                    // 0x03DC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         MacroWaveAmplify;                                  // 0x03E0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         SSS_MacroNormalStrength;                           // 0x03E4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         FoamSoftness1;                                     // 0x03E8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         SceneDepthSoftness;                                // 0x03EC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         BaseDepthFadeSoftness;                             // 0x03F0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         FoamCapsOpacity;                                   // 0x03F4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         FoamCapsHeight;                                    // 0x03F8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         FoamCapsPower;                                     // 0x03FC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         SeafoamScale;                                      // 0x0400(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         SeafoamSpeed;                                      // 0x0404(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         SeafoamDistortion;                                 // 0x0408(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         SeafoamHeightPower;                                // 0x040C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         SeafoamHeightMultiply;                             // 0x0410(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         HeightmapScale;                                    // 0x0414(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         HeightmapSpeed;                                    // 0x0418(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         HeightmapDisplacement;                             // 0x041C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CubemapRelectionStrength;                          // 0x0420(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_424[0x4];                                      // 0x0424(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UTexture*                               SmallWaveNormal;                                   // 0x0428(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UTexture*                               MediumWaveNormal;                                  // 0x0430(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EOceanShaderEnum                              OceanShader;                                       // 0x0438(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_439[0x7];                                      // 0x0439(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UTexture*                               FarWaveNormal;                                     // 0x0440(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UTexture*                               ShoreFoam;                                         // 0x0448(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UTexture*                               ShoreFoam2;                                        // 0x0450(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UTexture*                               ShoreFoamRoughness;                                // 0x0458(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UTexture*                               Heightmap;                                         // 0x0460(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UTexture*                               Seafoam;                                           // 0x0468(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UMaterialInstanceDynamic*               MID_Ocean;                                         // 0x0470(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UMaterialInstanceDynamic*               MID_Ocean_Depth;                                   // 0x0478(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          UpdateInEditor;                                    // 0x0480(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	EFollowMethod                                 FollowMethod;                                      // 0x0481(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_482[0x2];                                      // 0x0482(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         GridSnapSize;                                      // 0x0484(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         MaxLookAtDistance;                                 // 0x0488(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          ScaleByDistance;                                   // 0x048C(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_48D[0x3];                                      // 0x048D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         ScaleDistanceFactor;                               // 0x0490(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         ScaleStartDistance;                                // 0x0494(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         ScaleMin;                                          // 0x0498(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         ScaleMax;                                          // 0x049C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<class AActor*>                         HideActors;                                        // 0x04A0(0x0010)(Edit, BlueprintVisible, DisableEditOnTemplate)

public:
	void ExecuteUbergraph_BP_Ocean_Flame(int32 EntryPoint);
	void SetNetworkOffset(float Offset);
	void ReceiveBeginPlay();
	void UserConstructionScript();
	void Create_Wave_Set();
	void Set_Display_Parameters();
	void Set_Global_Parameters();
	void GetOceanPoint(const struct FVector& WorldLocation, struct FVector* Output1);
	void Gerstner(const struct FVector& WorldPosition, const struct FVector& WaveDirection, float Wavelength, float WaveSpeed, float WaveAmplitude, float WaveSteepness, int32 NumWaves, float* WavePointX, float* WavePointY, float* WavePointZ);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BP_Ocean_Flame_C">();
	}
	static class ABP_Ocean_Flame_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<ABP_Ocean_Flame_C>();
	}
};
static_assert(alignof(ABP_Ocean_Flame_C) == 0x000008, "Wrong alignment on ABP_Ocean_Flame_C");
static_assert(sizeof(ABP_Ocean_Flame_C) == 0x0004B0, "Wrong size on ABP_Ocean_Flame_C");
static_assert(offsetof(ABP_Ocean_Flame_C, UberGraphFrame) == 0x0002A8, "Member 'ABP_Ocean_Flame_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(ABP_Ocean_Flame_C, Box) == 0x0002B0, "Member 'ABP_Ocean_Flame_C::Box' has a wrong offset!");
static_assert(offsetof(ABP_Ocean_Flame_C, Icon) == 0x0002B8, "Member 'ABP_Ocean_Flame_C::Icon' has a wrong offset!");
static_assert(offsetof(ABP_Ocean_Flame_C, Water) == 0x0002C0, "Member 'ABP_Ocean_Flame_C::Water' has a wrong offset!");
static_assert(offsetof(ABP_Ocean_Flame_C, PlanarReflection) == 0x0002C8, "Member 'ABP_Ocean_Flame_C::PlanarReflection' has a wrong offset!");
static_assert(offsetof(ABP_Ocean_Flame_C, InfiniteSystem) == 0x0002D0, "Member 'ABP_Ocean_Flame_C::InfiniteSystem' has a wrong offset!");
static_assert(offsetof(ABP_Ocean_Flame_C, DepthPlaneTopside) == 0x0002D8, "Member 'ABP_Ocean_Flame_C::DepthPlaneTopside' has a wrong offset!");
static_assert(offsetof(ABP_Ocean_Flame_C, DepthPlaneUnderside) == 0x0002E0, "Member 'ABP_Ocean_Flame_C::DepthPlaneUnderside' has a wrong offset!");
static_assert(offsetof(ABP_Ocean_Flame_C, OceanPlane) == 0x0002E8, "Member 'ABP_Ocean_Flame_C::OceanPlane' has a wrong offset!");
static_assert(offsetof(ABP_Ocean_Flame_C, BaseColorDark) == 0x0002F0, "Member 'ABP_Ocean_Flame_C::BaseColorDark' has a wrong offset!");
static_assert(offsetof(ABP_Ocean_Flame_C, BaseColorLight) == 0x000300, "Member 'ABP_Ocean_Flame_C::BaseColorLight' has a wrong offset!");
static_assert(offsetof(ABP_Ocean_Flame_C, ShallowWaterColor) == 0x000310, "Member 'ABP_Ocean_Flame_C::ShallowWaterColor' has a wrong offset!");
static_assert(offsetof(ABP_Ocean_Flame_C, BaseColorLerp) == 0x000320, "Member 'ABP_Ocean_Flame_C::BaseColorLerp' has a wrong offset!");
static_assert(offsetof(ABP_Ocean_Flame_C, FresnelPower) == 0x000324, "Member 'ABP_Ocean_Flame_C::FresnelPower' has a wrong offset!");
static_assert(offsetof(ABP_Ocean_Flame_C, Base_Fresnel_Reflect) == 0x000328, "Member 'ABP_Ocean_Flame_C::Base_Fresnel_Reflect' has a wrong offset!");
static_assert(offsetof(ABP_Ocean_Flame_C, Metallic) == 0x00032C, "Member 'ABP_Ocean_Flame_C::Metallic' has a wrong offset!");
static_assert(offsetof(ABP_Ocean_Flame_C, Roughness) == 0x000330, "Member 'ABP_Ocean_Flame_C::Roughness' has a wrong offset!");
static_assert(offsetof(ABP_Ocean_Flame_C, Specular) == 0x000334, "Member 'ABP_Ocean_Flame_C::Specular' has a wrong offset!");
static_assert(offsetof(ABP_Ocean_Flame_C, TesselationMultiplier) == 0x000338, "Member 'ABP_Ocean_Flame_C::TesselationMultiplier' has a wrong offset!");
static_assert(offsetof(ABP_Ocean_Flame_C, Opacity) == 0x00033C, "Member 'ABP_Ocean_Flame_C::Opacity' has a wrong offset!");
static_assert(offsetof(ABP_Ocean_Flame_C, BaseDepthFade) == 0x000340, "Member 'ABP_Ocean_Flame_C::BaseDepthFade' has a wrong offset!");
static_assert(offsetof(ABP_Ocean_Flame_C, DistortionStrength) == 0x000344, "Member 'ABP_Ocean_Flame_C::DistortionStrength' has a wrong offset!");
static_assert(offsetof(ABP_Ocean_Flame_C, SceneColorCustomDepth) == 0x000348, "Member 'ABP_Ocean_Flame_C::SceneColorCustomDepth' has a wrong offset!");
static_assert(offsetof(ABP_Ocean_Flame_C, FoamScale) == 0x00034C, "Member 'ABP_Ocean_Flame_C::FoamScale' has a wrong offset!");
static_assert(offsetof(ABP_Ocean_Flame_C, FoamDepth1) == 0x000350, "Member 'ABP_Ocean_Flame_C::FoamDepth1' has a wrong offset!");
static_assert(offsetof(ABP_Ocean_Flame_C, FoamDepth2) == 0x000354, "Member 'ABP_Ocean_Flame_C::FoamDepth2' has a wrong offset!");
static_assert(offsetof(ABP_Ocean_Flame_C, FoamTimeScale) == 0x000358, "Member 'ABP_Ocean_Flame_C::FoamTimeScale' has a wrong offset!");
static_assert(offsetof(ABP_Ocean_Flame_C, Sss_color) == 0x00035C, "Member 'ABP_Ocean_Flame_C::Sss_color' has a wrong offset!");
static_assert(offsetof(ABP_Ocean_Flame_C, SSS_Scale) == 0x00036C, "Member 'ABP_Ocean_Flame_C::SSS_Scale' has a wrong offset!");
static_assert(offsetof(ABP_Ocean_Flame_C, SSS_Intensity) == 0x000370, "Member 'ABP_Ocean_Flame_C::SSS_Intensity' has a wrong offset!");
static_assert(offsetof(ABP_Ocean_Flame_C, SSS_LightDepth) == 0x000374, "Member 'ABP_Ocean_Flame_C::SSS_LightDepth' has a wrong offset!");
static_assert(offsetof(ABP_Ocean_Flame_C, DetailNormalScale) == 0x000378, "Member 'ABP_Ocean_Flame_C::DetailNormalScale' has a wrong offset!");
static_assert(offsetof(ABP_Ocean_Flame_C, DetailNormalSpeed) == 0x00037C, "Member 'ABP_Ocean_Flame_C::DetailNormalSpeed' has a wrong offset!");
static_assert(offsetof(ABP_Ocean_Flame_C, DetailNormalStrength) == 0x000380, "Member 'ABP_Ocean_Flame_C::DetailNormalStrength' has a wrong offset!");
static_assert(offsetof(ABP_Ocean_Flame_C, MediumNormalScale) == 0x000384, "Member 'ABP_Ocean_Flame_C::MediumNormalScale' has a wrong offset!");
static_assert(offsetof(ABP_Ocean_Flame_C, MediumNormalSpeed) == 0x000388, "Member 'ABP_Ocean_Flame_C::MediumNormalSpeed' has a wrong offset!");
static_assert(offsetof(ABP_Ocean_Flame_C, MediumNormalStrength) == 0x00038C, "Member 'ABP_Ocean_Flame_C::MediumNormalStrength' has a wrong offset!");
static_assert(offsetof(ABP_Ocean_Flame_C, FarNormalScale) == 0x000390, "Member 'ABP_Ocean_Flame_C::FarNormalScale' has a wrong offset!");
static_assert(offsetof(ABP_Ocean_Flame_C, FarNormalSpeed) == 0x000394, "Member 'ABP_Ocean_Flame_C::FarNormalSpeed' has a wrong offset!");
static_assert(offsetof(ABP_Ocean_Flame_C, FarNormalStrength) == 0x000398, "Member 'ABP_Ocean_Flame_C::FarNormalStrength' has a wrong offset!");
static_assert(offsetof(ABP_Ocean_Flame_C, FarNormalBlendDistance) == 0x00039C, "Member 'ABP_Ocean_Flame_C::FarNormalBlendDistance' has a wrong offset!");
static_assert(offsetof(ABP_Ocean_Flame_C, FarNormalBlendFalloff) == 0x0003A0, "Member 'ABP_Ocean_Flame_C::FarNormalBlendFalloff' has a wrong offset!");
static_assert(offsetof(ABP_Ocean_Flame_C, PanWaveLerp) == 0x0003A4, "Member 'ABP_Ocean_Flame_C::PanWaveLerp' has a wrong offset!");
static_assert(offsetof(ABP_Ocean_Flame_C, PanWaveIntensity) == 0x0003A8, "Member 'ABP_Ocean_Flame_C::PanWaveIntensity' has a wrong offset!");
static_assert(offsetof(ABP_Ocean_Flame_C, PanWaveTimeScale) == 0x0003AC, "Member 'ABP_Ocean_Flame_C::PanWaveTimeScale' has a wrong offset!");
static_assert(offsetof(ABP_Ocean_Flame_C, PanWaveSize) == 0x0003B0, "Member 'ABP_Ocean_Flame_C::PanWaveSize' has a wrong offset!");
static_assert(offsetof(ABP_Ocean_Flame_C, Panner01Speed) == 0x0003B4, "Member 'ABP_Ocean_Flame_C::Panner01Speed' has a wrong offset!");
static_assert(offsetof(ABP_Ocean_Flame_C, Panner02Speed) == 0x0003C0, "Member 'ABP_Ocean_Flame_C::Panner02Speed' has a wrong offset!");
static_assert(offsetof(ABP_Ocean_Flame_C, Panner03Speed) == 0x0003CC, "Member 'ABP_Ocean_Flame_C::Panner03Speed' has a wrong offset!");
static_assert(offsetof(ABP_Ocean_Flame_C, MacroWaveScale) == 0x0003D8, "Member 'ABP_Ocean_Flame_C::MacroWaveScale' has a wrong offset!");
static_assert(offsetof(ABP_Ocean_Flame_C, MacroWaveSpeed) == 0x0003DC, "Member 'ABP_Ocean_Flame_C::MacroWaveSpeed' has a wrong offset!");
static_assert(offsetof(ABP_Ocean_Flame_C, MacroWaveAmplify) == 0x0003E0, "Member 'ABP_Ocean_Flame_C::MacroWaveAmplify' has a wrong offset!");
static_assert(offsetof(ABP_Ocean_Flame_C, SSS_MacroNormalStrength) == 0x0003E4, "Member 'ABP_Ocean_Flame_C::SSS_MacroNormalStrength' has a wrong offset!");
static_assert(offsetof(ABP_Ocean_Flame_C, FoamSoftness1) == 0x0003E8, "Member 'ABP_Ocean_Flame_C::FoamSoftness1' has a wrong offset!");
static_assert(offsetof(ABP_Ocean_Flame_C, SceneDepthSoftness) == 0x0003EC, "Member 'ABP_Ocean_Flame_C::SceneDepthSoftness' has a wrong offset!");
static_assert(offsetof(ABP_Ocean_Flame_C, BaseDepthFadeSoftness) == 0x0003F0, "Member 'ABP_Ocean_Flame_C::BaseDepthFadeSoftness' has a wrong offset!");
static_assert(offsetof(ABP_Ocean_Flame_C, FoamCapsOpacity) == 0x0003F4, "Member 'ABP_Ocean_Flame_C::FoamCapsOpacity' has a wrong offset!");
static_assert(offsetof(ABP_Ocean_Flame_C, FoamCapsHeight) == 0x0003F8, "Member 'ABP_Ocean_Flame_C::FoamCapsHeight' has a wrong offset!");
static_assert(offsetof(ABP_Ocean_Flame_C, FoamCapsPower) == 0x0003FC, "Member 'ABP_Ocean_Flame_C::FoamCapsPower' has a wrong offset!");
static_assert(offsetof(ABP_Ocean_Flame_C, SeafoamScale) == 0x000400, "Member 'ABP_Ocean_Flame_C::SeafoamScale' has a wrong offset!");
static_assert(offsetof(ABP_Ocean_Flame_C, SeafoamSpeed) == 0x000404, "Member 'ABP_Ocean_Flame_C::SeafoamSpeed' has a wrong offset!");
static_assert(offsetof(ABP_Ocean_Flame_C, SeafoamDistortion) == 0x000408, "Member 'ABP_Ocean_Flame_C::SeafoamDistortion' has a wrong offset!");
static_assert(offsetof(ABP_Ocean_Flame_C, SeafoamHeightPower) == 0x00040C, "Member 'ABP_Ocean_Flame_C::SeafoamHeightPower' has a wrong offset!");
static_assert(offsetof(ABP_Ocean_Flame_C, SeafoamHeightMultiply) == 0x000410, "Member 'ABP_Ocean_Flame_C::SeafoamHeightMultiply' has a wrong offset!");
static_assert(offsetof(ABP_Ocean_Flame_C, HeightmapScale) == 0x000414, "Member 'ABP_Ocean_Flame_C::HeightmapScale' has a wrong offset!");
static_assert(offsetof(ABP_Ocean_Flame_C, HeightmapSpeed) == 0x000418, "Member 'ABP_Ocean_Flame_C::HeightmapSpeed' has a wrong offset!");
static_assert(offsetof(ABP_Ocean_Flame_C, HeightmapDisplacement) == 0x00041C, "Member 'ABP_Ocean_Flame_C::HeightmapDisplacement' has a wrong offset!");
static_assert(offsetof(ABP_Ocean_Flame_C, CubemapRelectionStrength) == 0x000420, "Member 'ABP_Ocean_Flame_C::CubemapRelectionStrength' has a wrong offset!");
static_assert(offsetof(ABP_Ocean_Flame_C, SmallWaveNormal) == 0x000428, "Member 'ABP_Ocean_Flame_C::SmallWaveNormal' has a wrong offset!");
static_assert(offsetof(ABP_Ocean_Flame_C, MediumWaveNormal) == 0x000430, "Member 'ABP_Ocean_Flame_C::MediumWaveNormal' has a wrong offset!");
static_assert(offsetof(ABP_Ocean_Flame_C, OceanShader) == 0x000438, "Member 'ABP_Ocean_Flame_C::OceanShader' has a wrong offset!");
static_assert(offsetof(ABP_Ocean_Flame_C, FarWaveNormal) == 0x000440, "Member 'ABP_Ocean_Flame_C::FarWaveNormal' has a wrong offset!");
static_assert(offsetof(ABP_Ocean_Flame_C, ShoreFoam) == 0x000448, "Member 'ABP_Ocean_Flame_C::ShoreFoam' has a wrong offset!");
static_assert(offsetof(ABP_Ocean_Flame_C, ShoreFoam2) == 0x000450, "Member 'ABP_Ocean_Flame_C::ShoreFoam2' has a wrong offset!");
static_assert(offsetof(ABP_Ocean_Flame_C, ShoreFoamRoughness) == 0x000458, "Member 'ABP_Ocean_Flame_C::ShoreFoamRoughness' has a wrong offset!");
static_assert(offsetof(ABP_Ocean_Flame_C, Heightmap) == 0x000460, "Member 'ABP_Ocean_Flame_C::Heightmap' has a wrong offset!");
static_assert(offsetof(ABP_Ocean_Flame_C, Seafoam) == 0x000468, "Member 'ABP_Ocean_Flame_C::Seafoam' has a wrong offset!");
static_assert(offsetof(ABP_Ocean_Flame_C, MID_Ocean) == 0x000470, "Member 'ABP_Ocean_Flame_C::MID_Ocean' has a wrong offset!");
static_assert(offsetof(ABP_Ocean_Flame_C, MID_Ocean_Depth) == 0x000478, "Member 'ABP_Ocean_Flame_C::MID_Ocean_Depth' has a wrong offset!");
static_assert(offsetof(ABP_Ocean_Flame_C, UpdateInEditor) == 0x000480, "Member 'ABP_Ocean_Flame_C::UpdateInEditor' has a wrong offset!");
static_assert(offsetof(ABP_Ocean_Flame_C, FollowMethod) == 0x000481, "Member 'ABP_Ocean_Flame_C::FollowMethod' has a wrong offset!");
static_assert(offsetof(ABP_Ocean_Flame_C, GridSnapSize) == 0x000484, "Member 'ABP_Ocean_Flame_C::GridSnapSize' has a wrong offset!");
static_assert(offsetof(ABP_Ocean_Flame_C, MaxLookAtDistance) == 0x000488, "Member 'ABP_Ocean_Flame_C::MaxLookAtDistance' has a wrong offset!");
static_assert(offsetof(ABP_Ocean_Flame_C, ScaleByDistance) == 0x00048C, "Member 'ABP_Ocean_Flame_C::ScaleByDistance' has a wrong offset!");
static_assert(offsetof(ABP_Ocean_Flame_C, ScaleDistanceFactor) == 0x000490, "Member 'ABP_Ocean_Flame_C::ScaleDistanceFactor' has a wrong offset!");
static_assert(offsetof(ABP_Ocean_Flame_C, ScaleStartDistance) == 0x000494, "Member 'ABP_Ocean_Flame_C::ScaleStartDistance' has a wrong offset!");
static_assert(offsetof(ABP_Ocean_Flame_C, ScaleMin) == 0x000498, "Member 'ABP_Ocean_Flame_C::ScaleMin' has a wrong offset!");
static_assert(offsetof(ABP_Ocean_Flame_C, ScaleMax) == 0x00049C, "Member 'ABP_Ocean_Flame_C::ScaleMax' has a wrong offset!");
static_assert(offsetof(ABP_Ocean_Flame_C, HideActors) == 0x0004A0, "Member 'ABP_Ocean_Flame_C::HideActors' has a wrong offset!");

}

