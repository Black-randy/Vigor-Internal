#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: UI_WeaponSkins

#include "Basic.hpp"

#include "Flame_structs.hpp"
#include "Flame_classes.hpp"
#include "Engine_structs.hpp"
#include "FlameUI_structs.hpp"
#include "CoreUObject_structs.hpp"
#include "E_SellingPointStatus_structs.hpp"
#include "SlateCore_structs.hpp"


namespace SDK
{

// WidgetBlueprintGeneratedClass UI_WeaponSkins.UI_WeaponSkins_C
// 0x0128 (0x0440 - 0x0318)
class UUI_WeaponSkins_C final : public UUpdateableWidget
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x0318(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class UUI_InputActionWidget_C*                ActionMoreInfo;                                    // 0x0320(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UFlameTextBlock*                        ActionRotateText;                                  // 0x0328(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UCanvasPanel*                           CanvasPanel_0;                                     // 0x0330(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UImage*                                 Image;                                             // 0x0338(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UImage*                                 Image_87;                                          // 0x0340(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UScrollBox*                             ScrollBox_Content;                                 // 0x0348(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UTextBlock*                             SubMenuTitle;                                      // 0x0350(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UUI_InputActionWidget_C*                UI_GamepadActionSelect;                            // 0x0358(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UUI_InputActionWidget_C*                UI_GamepadActionWidget_C_0;                        // 0x0360(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UUI_InputActionWidget_C*                UI_GamepadActionWidgetClose;                       // 0x0368(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UUI_SellingPointButton_C*               UI_SellingPointButton;                             // 0x0370(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UUI_VariantsBox_C*                      UI_VariantsBox;                                    // 0x0378(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class ABP_ShelterUI_C*                        ShelterUI;                                         // 0x0380(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         SelectedColorSlot;                                 // 0x0388(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         RotationSpeed;                                     // 0x038C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UUI_WeaponSkinRowButton_C*              SelectedSkinButton;                                // 0x0390(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UClass*                                 FocusedVariant;                                    // 0x0398(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UClass*                                 FocusedBaseItem;                                   // 0x03A0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UWidget*                                LastFocusedNotUserWidget;                          // 0x03A8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UClass*                                 ForcedFocusedVariant;                              // 0x03B0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<class UClass*>                         OwnedSkins;                                        // 0x03B8(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	bool                                          Owned_Weapons_Filling_Started;                     // 0x03C8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          Available_Weapons_Filling_Started;                 // 0x03C9(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_3CA[0x2];                                      // 0x03CA(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Delay_Between_Fills;                               // 0x03CC(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<class UClass*>                         Owned_Weapons_To_Fill;                             // 0x03D0(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	TArray<class UClass*>                         Available_Weapons_To_Fill;                         // 0x03E0(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	class UClass*                                 Forced_Focus_Base_Item;                            // 0x03F0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Force_Focused;                                     // 0x03F8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_3F9[0x7];                                      // 0x03F9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTimerHandle                           Filling_Timer;                                     // 0x0400(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	TArray<class UClass*>                         WeaponsToFill;                                     // 0x0408(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	struct FDateTime                              DebugTime;                                         // 0x0418(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	class UUI_SubSubMenu_Label_C*                 Sub_Sub_Label;                                     // 0x0420(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Use_Sub_Sub_Label;                                 // 0x0428(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          IsWeaponSkinsMenuOpened_;                          // 0x0429(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_42A[0x2];                                      // 0x042A(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         OwnedVariantsCount;                                // 0x042C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UButton*                                FocusedListButton;                                 // 0x0430(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         LastFocusedVariantSlot;                            // 0x0438(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CanFocusVariantSlot;                               // 0x043C(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          IsPanning;                                         // 0x043D(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          CanZoom;                                           // 0x043E(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          ShouldReturnFocus;                                 // 0x043F(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)

public:
	void ExecuteUbergraph_UI_WeaponSkins(int32 EntryPoint);
	void FocusSetback(class UFlameWidget* FlameWidget);
	void HandleFocusReturn();
	void OnResetToDefaultState();
	void StopPanning();
	void StartPanning();
	void HandleMouseInput();
	void EquipSkinUsingMouse();
	void BndEvt__UI_WeaponSkins_UI_GamepadActionSelect_K2Node_ComponentBoundEvent_4_OnClickedEvent__DelegateSignature();
	void BndEvt__UI_WeaponSkins_UI_GamepadActionWidgetClose_K2Node_ComponentBoundEvent_3_OnClickedEvent__DelegateSignature();
	void ZoomOut();
	void ZoomIn();
	void ListenForMouseWheel();
	void BndEvt__ActionMoreInfo_K2Node_ComponentBoundEvent_3_OnActionReleasedEvent__DelegateSignature();
	void Reset_Focus_To_First();
	void BndEvt__UI_SellingPointButton_K2Node_ComponentBoundEvent_1_OnBoughtItemShowcaseClosed__DelegateSignature();
	void OnChildFocusLost(class UWidget* InWidget);
	void OnChildFocusReceived(class UWidget* InWidget);
	void OnPurchaseDone(EGameStorePurchaseType PurchaseType, const struct FUniqueNetIdRepl& InUserId, const int32 PurchaseRequestId, const struct FGameStoreProductId& RequestedProductId, const struct FCloudRequestResult& Result, const struct FGameStorePurchaseResult& PurchaseResult, const bool PurchaseListRefreshed);
	void PreConstruct(bool IsDesignTime);
	void BndEvt__UI_GamepadActionWidget_C_0_K2Node_ComponentBoundEvent_0_OnActionPressedEvent__DelegateSignature();
	void Tick(const struct FGeometry& MyGeometry, float InDeltaTime);
	void Construct();
	void Destruct();
	void FillMenu(class UClass* ForcedFocusBaseItem);
	void EquipSkin(class UButton* ListButton);
	void FillColorsBox(class UUI_WeaponSkinRowButton_C* SkinButton);
	void SetColorSlotFocus(int32 SlotIndex, bool IsItemOnPreview);
	class AStash* GetStash();
	class UWidget* NavigateLeftRight(EUINavigation Navigation_0);
	void VariantsComparator(class UClass* ClassA, class UClass* ClassB, bool* Return);
	void Fill_Weapons();
	void FillAllWeapons();
	void WeaponRowClick(class UButton* Sender);

	class UWidget* GetWidgetToFocus() const;

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"UI_WeaponSkins_C">();
	}
	static class UUI_WeaponSkins_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UUI_WeaponSkins_C>();
	}
};
static_assert(alignof(UUI_WeaponSkins_C) == 0x000008, "Wrong alignment on UUI_WeaponSkins_C");
static_assert(sizeof(UUI_WeaponSkins_C) == 0x000440, "Wrong size on UUI_WeaponSkins_C");
static_assert(offsetof(UUI_WeaponSkins_C, UberGraphFrame) == 0x000318, "Member 'UUI_WeaponSkins_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(UUI_WeaponSkins_C, ActionMoreInfo) == 0x000320, "Member 'UUI_WeaponSkins_C::ActionMoreInfo' has a wrong offset!");
static_assert(offsetof(UUI_WeaponSkins_C, ActionRotateText) == 0x000328, "Member 'UUI_WeaponSkins_C::ActionRotateText' has a wrong offset!");
static_assert(offsetof(UUI_WeaponSkins_C, CanvasPanel_0) == 0x000330, "Member 'UUI_WeaponSkins_C::CanvasPanel_0' has a wrong offset!");
static_assert(offsetof(UUI_WeaponSkins_C, Image) == 0x000338, "Member 'UUI_WeaponSkins_C::Image' has a wrong offset!");
static_assert(offsetof(UUI_WeaponSkins_C, Image_87) == 0x000340, "Member 'UUI_WeaponSkins_C::Image_87' has a wrong offset!");
static_assert(offsetof(UUI_WeaponSkins_C, ScrollBox_Content) == 0x000348, "Member 'UUI_WeaponSkins_C::ScrollBox_Content' has a wrong offset!");
static_assert(offsetof(UUI_WeaponSkins_C, SubMenuTitle) == 0x000350, "Member 'UUI_WeaponSkins_C::SubMenuTitle' has a wrong offset!");
static_assert(offsetof(UUI_WeaponSkins_C, UI_GamepadActionSelect) == 0x000358, "Member 'UUI_WeaponSkins_C::UI_GamepadActionSelect' has a wrong offset!");
static_assert(offsetof(UUI_WeaponSkins_C, UI_GamepadActionWidget_C_0) == 0x000360, "Member 'UUI_WeaponSkins_C::UI_GamepadActionWidget_C_0' has a wrong offset!");
static_assert(offsetof(UUI_WeaponSkins_C, UI_GamepadActionWidgetClose) == 0x000368, "Member 'UUI_WeaponSkins_C::UI_GamepadActionWidgetClose' has a wrong offset!");
static_assert(offsetof(UUI_WeaponSkins_C, UI_SellingPointButton) == 0x000370, "Member 'UUI_WeaponSkins_C::UI_SellingPointButton' has a wrong offset!");
static_assert(offsetof(UUI_WeaponSkins_C, UI_VariantsBox) == 0x000378, "Member 'UUI_WeaponSkins_C::UI_VariantsBox' has a wrong offset!");
static_assert(offsetof(UUI_WeaponSkins_C, ShelterUI) == 0x000380, "Member 'UUI_WeaponSkins_C::ShelterUI' has a wrong offset!");
static_assert(offsetof(UUI_WeaponSkins_C, SelectedColorSlot) == 0x000388, "Member 'UUI_WeaponSkins_C::SelectedColorSlot' has a wrong offset!");
static_assert(offsetof(UUI_WeaponSkins_C, RotationSpeed) == 0x00038C, "Member 'UUI_WeaponSkins_C::RotationSpeed' has a wrong offset!");
static_assert(offsetof(UUI_WeaponSkins_C, SelectedSkinButton) == 0x000390, "Member 'UUI_WeaponSkins_C::SelectedSkinButton' has a wrong offset!");
static_assert(offsetof(UUI_WeaponSkins_C, FocusedVariant) == 0x000398, "Member 'UUI_WeaponSkins_C::FocusedVariant' has a wrong offset!");
static_assert(offsetof(UUI_WeaponSkins_C, FocusedBaseItem) == 0x0003A0, "Member 'UUI_WeaponSkins_C::FocusedBaseItem' has a wrong offset!");
static_assert(offsetof(UUI_WeaponSkins_C, LastFocusedNotUserWidget) == 0x0003A8, "Member 'UUI_WeaponSkins_C::LastFocusedNotUserWidget' has a wrong offset!");
static_assert(offsetof(UUI_WeaponSkins_C, ForcedFocusedVariant) == 0x0003B0, "Member 'UUI_WeaponSkins_C::ForcedFocusedVariant' has a wrong offset!");
static_assert(offsetof(UUI_WeaponSkins_C, OwnedSkins) == 0x0003B8, "Member 'UUI_WeaponSkins_C::OwnedSkins' has a wrong offset!");
static_assert(offsetof(UUI_WeaponSkins_C, Owned_Weapons_Filling_Started) == 0x0003C8, "Member 'UUI_WeaponSkins_C::Owned_Weapons_Filling_Started' has a wrong offset!");
static_assert(offsetof(UUI_WeaponSkins_C, Available_Weapons_Filling_Started) == 0x0003C9, "Member 'UUI_WeaponSkins_C::Available_Weapons_Filling_Started' has a wrong offset!");
static_assert(offsetof(UUI_WeaponSkins_C, Delay_Between_Fills) == 0x0003CC, "Member 'UUI_WeaponSkins_C::Delay_Between_Fills' has a wrong offset!");
static_assert(offsetof(UUI_WeaponSkins_C, Owned_Weapons_To_Fill) == 0x0003D0, "Member 'UUI_WeaponSkins_C::Owned_Weapons_To_Fill' has a wrong offset!");
static_assert(offsetof(UUI_WeaponSkins_C, Available_Weapons_To_Fill) == 0x0003E0, "Member 'UUI_WeaponSkins_C::Available_Weapons_To_Fill' has a wrong offset!");
static_assert(offsetof(UUI_WeaponSkins_C, Forced_Focus_Base_Item) == 0x0003F0, "Member 'UUI_WeaponSkins_C::Forced_Focus_Base_Item' has a wrong offset!");
static_assert(offsetof(UUI_WeaponSkins_C, Force_Focused) == 0x0003F8, "Member 'UUI_WeaponSkins_C::Force_Focused' has a wrong offset!");
static_assert(offsetof(UUI_WeaponSkins_C, Filling_Timer) == 0x000400, "Member 'UUI_WeaponSkins_C::Filling_Timer' has a wrong offset!");
static_assert(offsetof(UUI_WeaponSkins_C, WeaponsToFill) == 0x000408, "Member 'UUI_WeaponSkins_C::WeaponsToFill' has a wrong offset!");
static_assert(offsetof(UUI_WeaponSkins_C, DebugTime) == 0x000418, "Member 'UUI_WeaponSkins_C::DebugTime' has a wrong offset!");
static_assert(offsetof(UUI_WeaponSkins_C, Sub_Sub_Label) == 0x000420, "Member 'UUI_WeaponSkins_C::Sub_Sub_Label' has a wrong offset!");
static_assert(offsetof(UUI_WeaponSkins_C, Use_Sub_Sub_Label) == 0x000428, "Member 'UUI_WeaponSkins_C::Use_Sub_Sub_Label' has a wrong offset!");
static_assert(offsetof(UUI_WeaponSkins_C, IsWeaponSkinsMenuOpened_) == 0x000429, "Member 'UUI_WeaponSkins_C::IsWeaponSkinsMenuOpened_' has a wrong offset!");
static_assert(offsetof(UUI_WeaponSkins_C, OwnedVariantsCount) == 0x00042C, "Member 'UUI_WeaponSkins_C::OwnedVariantsCount' has a wrong offset!");
static_assert(offsetof(UUI_WeaponSkins_C, FocusedListButton) == 0x000430, "Member 'UUI_WeaponSkins_C::FocusedListButton' has a wrong offset!");
static_assert(offsetof(UUI_WeaponSkins_C, LastFocusedVariantSlot) == 0x000438, "Member 'UUI_WeaponSkins_C::LastFocusedVariantSlot' has a wrong offset!");
static_assert(offsetof(UUI_WeaponSkins_C, CanFocusVariantSlot) == 0x00043C, "Member 'UUI_WeaponSkins_C::CanFocusVariantSlot' has a wrong offset!");
static_assert(offsetof(UUI_WeaponSkins_C, IsPanning) == 0x00043D, "Member 'UUI_WeaponSkins_C::IsPanning' has a wrong offset!");
static_assert(offsetof(UUI_WeaponSkins_C, CanZoom) == 0x00043E, "Member 'UUI_WeaponSkins_C::CanZoom' has a wrong offset!");
static_assert(offsetof(UUI_WeaponSkins_C, ShouldReturnFocus) == 0x00043F, "Member 'UUI_WeaponSkins_C::ShouldReturnFocus' has a wrong offset!");

}

