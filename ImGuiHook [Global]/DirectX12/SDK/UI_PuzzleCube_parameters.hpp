#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: UI_PuzzleCube

#include "Basic.hpp"

#include "E_PuzzleCube_SelectedSide_structs.hpp"
#include "CoreUObject_structs.hpp"
#include "UMG_structs.hpp"
#include "Flame_structs.hpp"
#include "Engine_structs.hpp"
#include "SlateCore_structs.hpp"


namespace SDK::Params
{

// Function UI_PuzzleCube.UI_PuzzleCube_C.ExecuteUbergraph_UI_PuzzleCube
// 0x0210 (0x0210 - 0x0000)
struct UI_PuzzleCube_C_ExecuteUbergraph_UI_PuzzleCube final
{
public:
	int32                                         EntryPoint;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Variable;                                 // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue_1;                 // 0x000C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue_2;                 // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Variable_1;                               // 0x0014(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_IntInt_ReturnValue;            // 0x0018(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_EqualEqual_IntInt_ReturnValue_1;          // 0x0019(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanOR_ReturnValue;                    // 0x001A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_EqualEqual_IntInt_ReturnValue_2;          // 0x001B(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_EqualEqual_IntInt_ReturnValue_3;          // 0x001C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable;                                // 0x001D(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanOR_ReturnValue_1;                  // 0x001E(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable_1;                              // 0x001F(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_EqualEqual_IntInt_ReturnValue_4;          // 0x0020(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_EqualEqual_IntInt_ReturnValue_5;          // 0x0021(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_EqualEqual_IntInt_ReturnValue_6;          // 0x0022(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_EqualEqual_IntInt_ReturnValue_7;          // 0x0023(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanOR_ReturnValue_2;                  // 0x0024(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanOR_ReturnValue_3;                  // 0x0025(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_26[0x2];                                       // 0x0026(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Temp_int_Variable_2;                               // 0x0028(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Variable_3;                               // 0x002C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_IntInt_ReturnValue_8;          // 0x0030(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable_2;                              // 0x0031(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_32[0x2];                                       // 0x0032(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Add_IntInt_ReturnValue_3;                 // 0x0034(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue_4;                 // 0x0038(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Variable_4;                               // 0x003C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable_3;                              // 0x0040(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_41[0x3];                                       // 0x0041(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	TDelegate<void(int32 PlayerIndex, EInputMode InputMode)> K2Node_CreateDelegate_OutputDelegate;              // 0x0044(0x0010)(ZeroConstructor, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0054(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Not_PreBool_ReturnValue;                  // 0x0055(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue_1;                    // 0x0056(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue_2;                    // 0x0057(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue_3;                    // 0x0058(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue_4;                    // 0x0059(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue_5;                    // 0x005A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_EqualEqual_IntInt_ReturnValue_9;          // 0x005B(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	int32                                         CallFunc_ResizeTheKube_CubeSize;                   // 0x005C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_CustomEvent_AxisValue_3;                    // 0x0060(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_CustomEvent_AxisValue_2;                    // 0x0064(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_CloseTheKube_WasClosed;                   // 0x0068(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_69[0x3];                                       // 0x0069(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         K2Node_CustomEvent_AxisValue_1;                    // 0x006C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TDelegate<void(float AxisValue)>              K2Node_CreateDelegate_OutputDelegate_1;            // 0x0070(0x0010)(ZeroConstructor, NoDestructor)
	float                                         K2Node_CustomEvent_AxisValue;                      // 0x0080(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Variable_5;                               // 0x0084(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FGeometry                              K2Node_Event_MyGeometry;                           // 0x0088(0x0038)(IsPlainOldData, NoDestructor)
	float                                         K2Node_Event_InDeltaTime;                          // 0x00C0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TDelegate<void(float AxisValue)>              K2Node_CreateDelegate_OutputDelegate_2;            // 0x00C4(0x0010)(ZeroConstructor, NoDestructor)
	uint8                                         Pad_D4[0x4];                                       // 0x00D4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FDateTime                              CallFunc_Now_ReturnValue;                          // 0x00D8(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue_6;                    // 0x00E0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_E1[0x7];                                       // 0x00E1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FDateTime                              CallFunc_Now_ReturnValue_1;                        // 0x00E8(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	struct FTimespan                              CallFunc_Subtract_DateTimeDateTime_ReturnValue;    // 0x00F0(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_GetTotalSeconds_ReturnValue;              // 0x00F8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue_5;                 // 0x00FC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_FTrunc_ReturnValue;                       // 0x0100(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Send_Cube_Closed_Event_ReturnValue;       // 0x0104(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_105[0x3];                                      // 0x0105(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Add_IntInt_ReturnValue_6;                 // 0x0108(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_10C[0x4];                                      // 0x010C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class APawn*                                  CallFunc_GetOwningPlayerPawn_ReturnValue;          // 0x0110(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AHumanPlayerCharacter*                  K2Node_DynamicCast_AsHuman_Player_Character;       // 0x0118(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0120(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_121[0x3];                                      // 0x0121(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	TDelegate<void(float AxisValue)>              K2Node_CreateDelegate_OutputDelegate_3;            // 0x0124(0x0010)(ZeroConstructor, NoDestructor)
	TDelegate<void(float AxisValue)>              K2Node_CreateDelegate_OutputDelegate_4;            // 0x0134(0x0010)(ZeroConstructor, NoDestructor)
	uint8                                         Pad_144[0x4];                                      // 0x0144(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UFlameGameInstance*                     CallFunc_GetFlameGameInstance_ReturnValue;         // 0x0148(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Conv_IntToFloat_ReturnValue;              // 0x0150(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_MathExpression_ReturnValue;                 // 0x0154(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         K2Node_CustomEvent_PlayerIndex;                    // 0x0158(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EInputMode                                    K2Node_CustomEvent_InputMode;                      // 0x015C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_15D[0x3];                                      // 0x015D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_MakeVector_ReturnValue;                   // 0x0160(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue;          // 0x016C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_16D[0x3];                                      // 0x016D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UFlameGameInstance*                     CallFunc_GetFlameGameInstance_ReturnValue_1;       // 0x0170(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Variable_6;                               // 0x0178(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EInputMode                                    CallFunc_GetLastInputMode_ReturnValue;             // 0x017C(0x0001)(ConstParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue_1;        // 0x017D(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_17E[0x2];                                      // 0x017E(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	struct FMargin                                K2Node_MakeStruct_Margin;                          // 0x0180(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	class UHorizontalBoxSlot*                     CallFunc_SlotAsHorizontalBoxSlot_ReturnValue;      // 0x0190(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UHorizontalBoxSlot*                     CallFunc_SlotAsHorizontalBoxSlot_ReturnValue_1;    // 0x0198(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FMargin                                K2Node_MakeStruct_Margin_1;                        // 0x01A0(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                         K2Node_Select_Default;                             // 0x01B0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue_1;        // 0x01B4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               CallFunc_MakeRotator_ReturnValue;                  // 0x01B8(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                         K2Node_Select_Default_1;                           // 0x01C4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue_2;        // 0x01C8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue_3;        // 0x01CC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               CallFunc_MakeRotator_ReturnValue_1;                // 0x01D0(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                         K2Node_Select_Default_2;                           // 0x01DC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue_4;        // 0x01E0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue_5;        // 0x01E4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_Select_Default_3;                           // 0x01E8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               CallFunc_MakeRotator_ReturnValue_2;                // 0x01EC(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue_6;        // 0x01F8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue_7;        // 0x01FC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               CallFunc_MakeRotator_ReturnValue_3;                // 0x0200(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(UI_PuzzleCube_C_ExecuteUbergraph_UI_PuzzleCube) == 0x000008, "Wrong alignment on UI_PuzzleCube_C_ExecuteUbergraph_UI_PuzzleCube");
static_assert(sizeof(UI_PuzzleCube_C_ExecuteUbergraph_UI_PuzzleCube) == 0x000210, "Wrong size on UI_PuzzleCube_C_ExecuteUbergraph_UI_PuzzleCube");
static_assert(offsetof(UI_PuzzleCube_C_ExecuteUbergraph_UI_PuzzleCube, EntryPoint) == 0x000000, "Member 'UI_PuzzleCube_C_ExecuteUbergraph_UI_PuzzleCube::EntryPoint' has a wrong offset!");
static_assert(offsetof(UI_PuzzleCube_C_ExecuteUbergraph_UI_PuzzleCube, CallFunc_Add_IntInt_ReturnValue) == 0x000004, "Member 'UI_PuzzleCube_C_ExecuteUbergraph_UI_PuzzleCube::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(UI_PuzzleCube_C_ExecuteUbergraph_UI_PuzzleCube, Temp_int_Variable) == 0x000008, "Member 'UI_PuzzleCube_C_ExecuteUbergraph_UI_PuzzleCube::Temp_int_Variable' has a wrong offset!");
static_assert(offsetof(UI_PuzzleCube_C_ExecuteUbergraph_UI_PuzzleCube, CallFunc_Add_IntInt_ReturnValue_1) == 0x00000C, "Member 'UI_PuzzleCube_C_ExecuteUbergraph_UI_PuzzleCube::CallFunc_Add_IntInt_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(UI_PuzzleCube_C_ExecuteUbergraph_UI_PuzzleCube, CallFunc_Add_IntInt_ReturnValue_2) == 0x000010, "Member 'UI_PuzzleCube_C_ExecuteUbergraph_UI_PuzzleCube::CallFunc_Add_IntInt_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(UI_PuzzleCube_C_ExecuteUbergraph_UI_PuzzleCube, Temp_int_Variable_1) == 0x000014, "Member 'UI_PuzzleCube_C_ExecuteUbergraph_UI_PuzzleCube::Temp_int_Variable_1' has a wrong offset!");
static_assert(offsetof(UI_PuzzleCube_C_ExecuteUbergraph_UI_PuzzleCube, CallFunc_EqualEqual_IntInt_ReturnValue) == 0x000018, "Member 'UI_PuzzleCube_C_ExecuteUbergraph_UI_PuzzleCube::CallFunc_EqualEqual_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(UI_PuzzleCube_C_ExecuteUbergraph_UI_PuzzleCube, CallFunc_EqualEqual_IntInt_ReturnValue_1) == 0x000019, "Member 'UI_PuzzleCube_C_ExecuteUbergraph_UI_PuzzleCube::CallFunc_EqualEqual_IntInt_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(UI_PuzzleCube_C_ExecuteUbergraph_UI_PuzzleCube, CallFunc_BooleanOR_ReturnValue) == 0x00001A, "Member 'UI_PuzzleCube_C_ExecuteUbergraph_UI_PuzzleCube::CallFunc_BooleanOR_ReturnValue' has a wrong offset!");
static_assert(offsetof(UI_PuzzleCube_C_ExecuteUbergraph_UI_PuzzleCube, CallFunc_EqualEqual_IntInt_ReturnValue_2) == 0x00001B, "Member 'UI_PuzzleCube_C_ExecuteUbergraph_UI_PuzzleCube::CallFunc_EqualEqual_IntInt_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(UI_PuzzleCube_C_ExecuteUbergraph_UI_PuzzleCube, CallFunc_EqualEqual_IntInt_ReturnValue_3) == 0x00001C, "Member 'UI_PuzzleCube_C_ExecuteUbergraph_UI_PuzzleCube::CallFunc_EqualEqual_IntInt_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(UI_PuzzleCube_C_ExecuteUbergraph_UI_PuzzleCube, Temp_bool_Variable) == 0x00001D, "Member 'UI_PuzzleCube_C_ExecuteUbergraph_UI_PuzzleCube::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(UI_PuzzleCube_C_ExecuteUbergraph_UI_PuzzleCube, CallFunc_BooleanOR_ReturnValue_1) == 0x00001E, "Member 'UI_PuzzleCube_C_ExecuteUbergraph_UI_PuzzleCube::CallFunc_BooleanOR_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(UI_PuzzleCube_C_ExecuteUbergraph_UI_PuzzleCube, Temp_bool_Variable_1) == 0x00001F, "Member 'UI_PuzzleCube_C_ExecuteUbergraph_UI_PuzzleCube::Temp_bool_Variable_1' has a wrong offset!");
static_assert(offsetof(UI_PuzzleCube_C_ExecuteUbergraph_UI_PuzzleCube, CallFunc_EqualEqual_IntInt_ReturnValue_4) == 0x000020, "Member 'UI_PuzzleCube_C_ExecuteUbergraph_UI_PuzzleCube::CallFunc_EqualEqual_IntInt_ReturnValue_4' has a wrong offset!");
static_assert(offsetof(UI_PuzzleCube_C_ExecuteUbergraph_UI_PuzzleCube, CallFunc_EqualEqual_IntInt_ReturnValue_5) == 0x000021, "Member 'UI_PuzzleCube_C_ExecuteUbergraph_UI_PuzzleCube::CallFunc_EqualEqual_IntInt_ReturnValue_5' has a wrong offset!");
static_assert(offsetof(UI_PuzzleCube_C_ExecuteUbergraph_UI_PuzzleCube, CallFunc_EqualEqual_IntInt_ReturnValue_6) == 0x000022, "Member 'UI_PuzzleCube_C_ExecuteUbergraph_UI_PuzzleCube::CallFunc_EqualEqual_IntInt_ReturnValue_6' has a wrong offset!");
static_assert(offsetof(UI_PuzzleCube_C_ExecuteUbergraph_UI_PuzzleCube, CallFunc_EqualEqual_IntInt_ReturnValue_7) == 0x000023, "Member 'UI_PuzzleCube_C_ExecuteUbergraph_UI_PuzzleCube::CallFunc_EqualEqual_IntInt_ReturnValue_7' has a wrong offset!");
static_assert(offsetof(UI_PuzzleCube_C_ExecuteUbergraph_UI_PuzzleCube, CallFunc_BooleanOR_ReturnValue_2) == 0x000024, "Member 'UI_PuzzleCube_C_ExecuteUbergraph_UI_PuzzleCube::CallFunc_BooleanOR_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(UI_PuzzleCube_C_ExecuteUbergraph_UI_PuzzleCube, CallFunc_BooleanOR_ReturnValue_3) == 0x000025, "Member 'UI_PuzzleCube_C_ExecuteUbergraph_UI_PuzzleCube::CallFunc_BooleanOR_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(UI_PuzzleCube_C_ExecuteUbergraph_UI_PuzzleCube, Temp_int_Variable_2) == 0x000028, "Member 'UI_PuzzleCube_C_ExecuteUbergraph_UI_PuzzleCube::Temp_int_Variable_2' has a wrong offset!");
static_assert(offsetof(UI_PuzzleCube_C_ExecuteUbergraph_UI_PuzzleCube, Temp_int_Variable_3) == 0x00002C, "Member 'UI_PuzzleCube_C_ExecuteUbergraph_UI_PuzzleCube::Temp_int_Variable_3' has a wrong offset!");
static_assert(offsetof(UI_PuzzleCube_C_ExecuteUbergraph_UI_PuzzleCube, CallFunc_EqualEqual_IntInt_ReturnValue_8) == 0x000030, "Member 'UI_PuzzleCube_C_ExecuteUbergraph_UI_PuzzleCube::CallFunc_EqualEqual_IntInt_ReturnValue_8' has a wrong offset!");
static_assert(offsetof(UI_PuzzleCube_C_ExecuteUbergraph_UI_PuzzleCube, Temp_bool_Variable_2) == 0x000031, "Member 'UI_PuzzleCube_C_ExecuteUbergraph_UI_PuzzleCube::Temp_bool_Variable_2' has a wrong offset!");
static_assert(offsetof(UI_PuzzleCube_C_ExecuteUbergraph_UI_PuzzleCube, CallFunc_Add_IntInt_ReturnValue_3) == 0x000034, "Member 'UI_PuzzleCube_C_ExecuteUbergraph_UI_PuzzleCube::CallFunc_Add_IntInt_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(UI_PuzzleCube_C_ExecuteUbergraph_UI_PuzzleCube, CallFunc_Add_IntInt_ReturnValue_4) == 0x000038, "Member 'UI_PuzzleCube_C_ExecuteUbergraph_UI_PuzzleCube::CallFunc_Add_IntInt_ReturnValue_4' has a wrong offset!");
static_assert(offsetof(UI_PuzzleCube_C_ExecuteUbergraph_UI_PuzzleCube, Temp_int_Variable_4) == 0x00003C, "Member 'UI_PuzzleCube_C_ExecuteUbergraph_UI_PuzzleCube::Temp_int_Variable_4' has a wrong offset!");
static_assert(offsetof(UI_PuzzleCube_C_ExecuteUbergraph_UI_PuzzleCube, Temp_bool_Variable_3) == 0x000040, "Member 'UI_PuzzleCube_C_ExecuteUbergraph_UI_PuzzleCube::Temp_bool_Variable_3' has a wrong offset!");
static_assert(offsetof(UI_PuzzleCube_C_ExecuteUbergraph_UI_PuzzleCube, K2Node_CreateDelegate_OutputDelegate) == 0x000044, "Member 'UI_PuzzleCube_C_ExecuteUbergraph_UI_PuzzleCube::K2Node_CreateDelegate_OutputDelegate' has a wrong offset!");
static_assert(offsetof(UI_PuzzleCube_C_ExecuteUbergraph_UI_PuzzleCube, CallFunc_IsValid_ReturnValue) == 0x000054, "Member 'UI_PuzzleCube_C_ExecuteUbergraph_UI_PuzzleCube::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(UI_PuzzleCube_C_ExecuteUbergraph_UI_PuzzleCube, CallFunc_Not_PreBool_ReturnValue) == 0x000055, "Member 'UI_PuzzleCube_C_ExecuteUbergraph_UI_PuzzleCube::CallFunc_Not_PreBool_ReturnValue' has a wrong offset!");
static_assert(offsetof(UI_PuzzleCube_C_ExecuteUbergraph_UI_PuzzleCube, CallFunc_IsValid_ReturnValue_1) == 0x000056, "Member 'UI_PuzzleCube_C_ExecuteUbergraph_UI_PuzzleCube::CallFunc_IsValid_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(UI_PuzzleCube_C_ExecuteUbergraph_UI_PuzzleCube, CallFunc_IsValid_ReturnValue_2) == 0x000057, "Member 'UI_PuzzleCube_C_ExecuteUbergraph_UI_PuzzleCube::CallFunc_IsValid_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(UI_PuzzleCube_C_ExecuteUbergraph_UI_PuzzleCube, CallFunc_IsValid_ReturnValue_3) == 0x000058, "Member 'UI_PuzzleCube_C_ExecuteUbergraph_UI_PuzzleCube::CallFunc_IsValid_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(UI_PuzzleCube_C_ExecuteUbergraph_UI_PuzzleCube, CallFunc_IsValid_ReturnValue_4) == 0x000059, "Member 'UI_PuzzleCube_C_ExecuteUbergraph_UI_PuzzleCube::CallFunc_IsValid_ReturnValue_4' has a wrong offset!");
static_assert(offsetof(UI_PuzzleCube_C_ExecuteUbergraph_UI_PuzzleCube, CallFunc_IsValid_ReturnValue_5) == 0x00005A, "Member 'UI_PuzzleCube_C_ExecuteUbergraph_UI_PuzzleCube::CallFunc_IsValid_ReturnValue_5' has a wrong offset!");
static_assert(offsetof(UI_PuzzleCube_C_ExecuteUbergraph_UI_PuzzleCube, CallFunc_EqualEqual_IntInt_ReturnValue_9) == 0x00005B, "Member 'UI_PuzzleCube_C_ExecuteUbergraph_UI_PuzzleCube::CallFunc_EqualEqual_IntInt_ReturnValue_9' has a wrong offset!");
static_assert(offsetof(UI_PuzzleCube_C_ExecuteUbergraph_UI_PuzzleCube, CallFunc_ResizeTheKube_CubeSize) == 0x00005C, "Member 'UI_PuzzleCube_C_ExecuteUbergraph_UI_PuzzleCube::CallFunc_ResizeTheKube_CubeSize' has a wrong offset!");
static_assert(offsetof(UI_PuzzleCube_C_ExecuteUbergraph_UI_PuzzleCube, K2Node_CustomEvent_AxisValue_3) == 0x000060, "Member 'UI_PuzzleCube_C_ExecuteUbergraph_UI_PuzzleCube::K2Node_CustomEvent_AxisValue_3' has a wrong offset!");
static_assert(offsetof(UI_PuzzleCube_C_ExecuteUbergraph_UI_PuzzleCube, K2Node_CustomEvent_AxisValue_2) == 0x000064, "Member 'UI_PuzzleCube_C_ExecuteUbergraph_UI_PuzzleCube::K2Node_CustomEvent_AxisValue_2' has a wrong offset!");
static_assert(offsetof(UI_PuzzleCube_C_ExecuteUbergraph_UI_PuzzleCube, CallFunc_CloseTheKube_WasClosed) == 0x000068, "Member 'UI_PuzzleCube_C_ExecuteUbergraph_UI_PuzzleCube::CallFunc_CloseTheKube_WasClosed' has a wrong offset!");
static_assert(offsetof(UI_PuzzleCube_C_ExecuteUbergraph_UI_PuzzleCube, K2Node_CustomEvent_AxisValue_1) == 0x00006C, "Member 'UI_PuzzleCube_C_ExecuteUbergraph_UI_PuzzleCube::K2Node_CustomEvent_AxisValue_1' has a wrong offset!");
static_assert(offsetof(UI_PuzzleCube_C_ExecuteUbergraph_UI_PuzzleCube, K2Node_CreateDelegate_OutputDelegate_1) == 0x000070, "Member 'UI_PuzzleCube_C_ExecuteUbergraph_UI_PuzzleCube::K2Node_CreateDelegate_OutputDelegate_1' has a wrong offset!");
static_assert(offsetof(UI_PuzzleCube_C_ExecuteUbergraph_UI_PuzzleCube, K2Node_CustomEvent_AxisValue) == 0x000080, "Member 'UI_PuzzleCube_C_ExecuteUbergraph_UI_PuzzleCube::K2Node_CustomEvent_AxisValue' has a wrong offset!");
static_assert(offsetof(UI_PuzzleCube_C_ExecuteUbergraph_UI_PuzzleCube, Temp_int_Variable_5) == 0x000084, "Member 'UI_PuzzleCube_C_ExecuteUbergraph_UI_PuzzleCube::Temp_int_Variable_5' has a wrong offset!");
static_assert(offsetof(UI_PuzzleCube_C_ExecuteUbergraph_UI_PuzzleCube, K2Node_Event_MyGeometry) == 0x000088, "Member 'UI_PuzzleCube_C_ExecuteUbergraph_UI_PuzzleCube::K2Node_Event_MyGeometry' has a wrong offset!");
static_assert(offsetof(UI_PuzzleCube_C_ExecuteUbergraph_UI_PuzzleCube, K2Node_Event_InDeltaTime) == 0x0000C0, "Member 'UI_PuzzleCube_C_ExecuteUbergraph_UI_PuzzleCube::K2Node_Event_InDeltaTime' has a wrong offset!");
static_assert(offsetof(UI_PuzzleCube_C_ExecuteUbergraph_UI_PuzzleCube, K2Node_CreateDelegate_OutputDelegate_2) == 0x0000C4, "Member 'UI_PuzzleCube_C_ExecuteUbergraph_UI_PuzzleCube::K2Node_CreateDelegate_OutputDelegate_2' has a wrong offset!");
static_assert(offsetof(UI_PuzzleCube_C_ExecuteUbergraph_UI_PuzzleCube, CallFunc_Now_ReturnValue) == 0x0000D8, "Member 'UI_PuzzleCube_C_ExecuteUbergraph_UI_PuzzleCube::CallFunc_Now_ReturnValue' has a wrong offset!");
static_assert(offsetof(UI_PuzzleCube_C_ExecuteUbergraph_UI_PuzzleCube, CallFunc_IsValid_ReturnValue_6) == 0x0000E0, "Member 'UI_PuzzleCube_C_ExecuteUbergraph_UI_PuzzleCube::CallFunc_IsValid_ReturnValue_6' has a wrong offset!");
static_assert(offsetof(UI_PuzzleCube_C_ExecuteUbergraph_UI_PuzzleCube, CallFunc_Now_ReturnValue_1) == 0x0000E8, "Member 'UI_PuzzleCube_C_ExecuteUbergraph_UI_PuzzleCube::CallFunc_Now_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(UI_PuzzleCube_C_ExecuteUbergraph_UI_PuzzleCube, CallFunc_Subtract_DateTimeDateTime_ReturnValue) == 0x0000F0, "Member 'UI_PuzzleCube_C_ExecuteUbergraph_UI_PuzzleCube::CallFunc_Subtract_DateTimeDateTime_ReturnValue' has a wrong offset!");
static_assert(offsetof(UI_PuzzleCube_C_ExecuteUbergraph_UI_PuzzleCube, CallFunc_GetTotalSeconds_ReturnValue) == 0x0000F8, "Member 'UI_PuzzleCube_C_ExecuteUbergraph_UI_PuzzleCube::CallFunc_GetTotalSeconds_ReturnValue' has a wrong offset!");
static_assert(offsetof(UI_PuzzleCube_C_ExecuteUbergraph_UI_PuzzleCube, CallFunc_Add_IntInt_ReturnValue_5) == 0x0000FC, "Member 'UI_PuzzleCube_C_ExecuteUbergraph_UI_PuzzleCube::CallFunc_Add_IntInt_ReturnValue_5' has a wrong offset!");
static_assert(offsetof(UI_PuzzleCube_C_ExecuteUbergraph_UI_PuzzleCube, CallFunc_FTrunc_ReturnValue) == 0x000100, "Member 'UI_PuzzleCube_C_ExecuteUbergraph_UI_PuzzleCube::CallFunc_FTrunc_ReturnValue' has a wrong offset!");
static_assert(offsetof(UI_PuzzleCube_C_ExecuteUbergraph_UI_PuzzleCube, CallFunc_Send_Cube_Closed_Event_ReturnValue) == 0x000104, "Member 'UI_PuzzleCube_C_ExecuteUbergraph_UI_PuzzleCube::CallFunc_Send_Cube_Closed_Event_ReturnValue' has a wrong offset!");
static_assert(offsetof(UI_PuzzleCube_C_ExecuteUbergraph_UI_PuzzleCube, CallFunc_Add_IntInt_ReturnValue_6) == 0x000108, "Member 'UI_PuzzleCube_C_ExecuteUbergraph_UI_PuzzleCube::CallFunc_Add_IntInt_ReturnValue_6' has a wrong offset!");
static_assert(offsetof(UI_PuzzleCube_C_ExecuteUbergraph_UI_PuzzleCube, CallFunc_GetOwningPlayerPawn_ReturnValue) == 0x000110, "Member 'UI_PuzzleCube_C_ExecuteUbergraph_UI_PuzzleCube::CallFunc_GetOwningPlayerPawn_ReturnValue' has a wrong offset!");
static_assert(offsetof(UI_PuzzleCube_C_ExecuteUbergraph_UI_PuzzleCube, K2Node_DynamicCast_AsHuman_Player_Character) == 0x000118, "Member 'UI_PuzzleCube_C_ExecuteUbergraph_UI_PuzzleCube::K2Node_DynamicCast_AsHuman_Player_Character' has a wrong offset!");
static_assert(offsetof(UI_PuzzleCube_C_ExecuteUbergraph_UI_PuzzleCube, K2Node_DynamicCast_bSuccess) == 0x000120, "Member 'UI_PuzzleCube_C_ExecuteUbergraph_UI_PuzzleCube::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(UI_PuzzleCube_C_ExecuteUbergraph_UI_PuzzleCube, K2Node_CreateDelegate_OutputDelegate_3) == 0x000124, "Member 'UI_PuzzleCube_C_ExecuteUbergraph_UI_PuzzleCube::K2Node_CreateDelegate_OutputDelegate_3' has a wrong offset!");
static_assert(offsetof(UI_PuzzleCube_C_ExecuteUbergraph_UI_PuzzleCube, K2Node_CreateDelegate_OutputDelegate_4) == 0x000134, "Member 'UI_PuzzleCube_C_ExecuteUbergraph_UI_PuzzleCube::K2Node_CreateDelegate_OutputDelegate_4' has a wrong offset!");
static_assert(offsetof(UI_PuzzleCube_C_ExecuteUbergraph_UI_PuzzleCube, CallFunc_GetFlameGameInstance_ReturnValue) == 0x000148, "Member 'UI_PuzzleCube_C_ExecuteUbergraph_UI_PuzzleCube::CallFunc_GetFlameGameInstance_ReturnValue' has a wrong offset!");
static_assert(offsetof(UI_PuzzleCube_C_ExecuteUbergraph_UI_PuzzleCube, CallFunc_Conv_IntToFloat_ReturnValue) == 0x000150, "Member 'UI_PuzzleCube_C_ExecuteUbergraph_UI_PuzzleCube::CallFunc_Conv_IntToFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(UI_PuzzleCube_C_ExecuteUbergraph_UI_PuzzleCube, K2Node_MathExpression_ReturnValue) == 0x000154, "Member 'UI_PuzzleCube_C_ExecuteUbergraph_UI_PuzzleCube::K2Node_MathExpression_ReturnValue' has a wrong offset!");
static_assert(offsetof(UI_PuzzleCube_C_ExecuteUbergraph_UI_PuzzleCube, K2Node_CustomEvent_PlayerIndex) == 0x000158, "Member 'UI_PuzzleCube_C_ExecuteUbergraph_UI_PuzzleCube::K2Node_CustomEvent_PlayerIndex' has a wrong offset!");
static_assert(offsetof(UI_PuzzleCube_C_ExecuteUbergraph_UI_PuzzleCube, K2Node_CustomEvent_InputMode) == 0x00015C, "Member 'UI_PuzzleCube_C_ExecuteUbergraph_UI_PuzzleCube::K2Node_CustomEvent_InputMode' has a wrong offset!");
static_assert(offsetof(UI_PuzzleCube_C_ExecuteUbergraph_UI_PuzzleCube, CallFunc_MakeVector_ReturnValue) == 0x000160, "Member 'UI_PuzzleCube_C_ExecuteUbergraph_UI_PuzzleCube::CallFunc_MakeVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(UI_PuzzleCube_C_ExecuteUbergraph_UI_PuzzleCube, CallFunc_EqualEqual_ByteByte_ReturnValue) == 0x00016C, "Member 'UI_PuzzleCube_C_ExecuteUbergraph_UI_PuzzleCube::CallFunc_EqualEqual_ByteByte_ReturnValue' has a wrong offset!");
static_assert(offsetof(UI_PuzzleCube_C_ExecuteUbergraph_UI_PuzzleCube, CallFunc_GetFlameGameInstance_ReturnValue_1) == 0x000170, "Member 'UI_PuzzleCube_C_ExecuteUbergraph_UI_PuzzleCube::CallFunc_GetFlameGameInstance_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(UI_PuzzleCube_C_ExecuteUbergraph_UI_PuzzleCube, Temp_int_Variable_6) == 0x000178, "Member 'UI_PuzzleCube_C_ExecuteUbergraph_UI_PuzzleCube::Temp_int_Variable_6' has a wrong offset!");
static_assert(offsetof(UI_PuzzleCube_C_ExecuteUbergraph_UI_PuzzleCube, CallFunc_GetLastInputMode_ReturnValue) == 0x00017C, "Member 'UI_PuzzleCube_C_ExecuteUbergraph_UI_PuzzleCube::CallFunc_GetLastInputMode_ReturnValue' has a wrong offset!");
static_assert(offsetof(UI_PuzzleCube_C_ExecuteUbergraph_UI_PuzzleCube, CallFunc_EqualEqual_ByteByte_ReturnValue_1) == 0x00017D, "Member 'UI_PuzzleCube_C_ExecuteUbergraph_UI_PuzzleCube::CallFunc_EqualEqual_ByteByte_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(UI_PuzzleCube_C_ExecuteUbergraph_UI_PuzzleCube, K2Node_MakeStruct_Margin) == 0x000180, "Member 'UI_PuzzleCube_C_ExecuteUbergraph_UI_PuzzleCube::K2Node_MakeStruct_Margin' has a wrong offset!");
static_assert(offsetof(UI_PuzzleCube_C_ExecuteUbergraph_UI_PuzzleCube, CallFunc_SlotAsHorizontalBoxSlot_ReturnValue) == 0x000190, "Member 'UI_PuzzleCube_C_ExecuteUbergraph_UI_PuzzleCube::CallFunc_SlotAsHorizontalBoxSlot_ReturnValue' has a wrong offset!");
static_assert(offsetof(UI_PuzzleCube_C_ExecuteUbergraph_UI_PuzzleCube, CallFunc_SlotAsHorizontalBoxSlot_ReturnValue_1) == 0x000198, "Member 'UI_PuzzleCube_C_ExecuteUbergraph_UI_PuzzleCube::CallFunc_SlotAsHorizontalBoxSlot_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(UI_PuzzleCube_C_ExecuteUbergraph_UI_PuzzleCube, K2Node_MakeStruct_Margin_1) == 0x0001A0, "Member 'UI_PuzzleCube_C_ExecuteUbergraph_UI_PuzzleCube::K2Node_MakeStruct_Margin_1' has a wrong offset!");
static_assert(offsetof(UI_PuzzleCube_C_ExecuteUbergraph_UI_PuzzleCube, K2Node_Select_Default) == 0x0001B0, "Member 'UI_PuzzleCube_C_ExecuteUbergraph_UI_PuzzleCube::K2Node_Select_Default' has a wrong offset!");
static_assert(offsetof(UI_PuzzleCube_C_ExecuteUbergraph_UI_PuzzleCube, CallFunc_Multiply_FloatFloat_ReturnValue_1) == 0x0001B4, "Member 'UI_PuzzleCube_C_ExecuteUbergraph_UI_PuzzleCube::CallFunc_Multiply_FloatFloat_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(UI_PuzzleCube_C_ExecuteUbergraph_UI_PuzzleCube, CallFunc_MakeRotator_ReturnValue) == 0x0001B8, "Member 'UI_PuzzleCube_C_ExecuteUbergraph_UI_PuzzleCube::CallFunc_MakeRotator_ReturnValue' has a wrong offset!");
static_assert(offsetof(UI_PuzzleCube_C_ExecuteUbergraph_UI_PuzzleCube, K2Node_Select_Default_1) == 0x0001C4, "Member 'UI_PuzzleCube_C_ExecuteUbergraph_UI_PuzzleCube::K2Node_Select_Default_1' has a wrong offset!");
static_assert(offsetof(UI_PuzzleCube_C_ExecuteUbergraph_UI_PuzzleCube, CallFunc_Multiply_FloatFloat_ReturnValue_2) == 0x0001C8, "Member 'UI_PuzzleCube_C_ExecuteUbergraph_UI_PuzzleCube::CallFunc_Multiply_FloatFloat_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(UI_PuzzleCube_C_ExecuteUbergraph_UI_PuzzleCube, CallFunc_Multiply_FloatFloat_ReturnValue_3) == 0x0001CC, "Member 'UI_PuzzleCube_C_ExecuteUbergraph_UI_PuzzleCube::CallFunc_Multiply_FloatFloat_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(UI_PuzzleCube_C_ExecuteUbergraph_UI_PuzzleCube, CallFunc_MakeRotator_ReturnValue_1) == 0x0001D0, "Member 'UI_PuzzleCube_C_ExecuteUbergraph_UI_PuzzleCube::CallFunc_MakeRotator_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(UI_PuzzleCube_C_ExecuteUbergraph_UI_PuzzleCube, K2Node_Select_Default_2) == 0x0001DC, "Member 'UI_PuzzleCube_C_ExecuteUbergraph_UI_PuzzleCube::K2Node_Select_Default_2' has a wrong offset!");
static_assert(offsetof(UI_PuzzleCube_C_ExecuteUbergraph_UI_PuzzleCube, CallFunc_Multiply_FloatFloat_ReturnValue_4) == 0x0001E0, "Member 'UI_PuzzleCube_C_ExecuteUbergraph_UI_PuzzleCube::CallFunc_Multiply_FloatFloat_ReturnValue_4' has a wrong offset!");
static_assert(offsetof(UI_PuzzleCube_C_ExecuteUbergraph_UI_PuzzleCube, CallFunc_Multiply_FloatFloat_ReturnValue_5) == 0x0001E4, "Member 'UI_PuzzleCube_C_ExecuteUbergraph_UI_PuzzleCube::CallFunc_Multiply_FloatFloat_ReturnValue_5' has a wrong offset!");
static_assert(offsetof(UI_PuzzleCube_C_ExecuteUbergraph_UI_PuzzleCube, K2Node_Select_Default_3) == 0x0001E8, "Member 'UI_PuzzleCube_C_ExecuteUbergraph_UI_PuzzleCube::K2Node_Select_Default_3' has a wrong offset!");
static_assert(offsetof(UI_PuzzleCube_C_ExecuteUbergraph_UI_PuzzleCube, CallFunc_MakeRotator_ReturnValue_2) == 0x0001EC, "Member 'UI_PuzzleCube_C_ExecuteUbergraph_UI_PuzzleCube::CallFunc_MakeRotator_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(UI_PuzzleCube_C_ExecuteUbergraph_UI_PuzzleCube, CallFunc_Multiply_FloatFloat_ReturnValue_6) == 0x0001F8, "Member 'UI_PuzzleCube_C_ExecuteUbergraph_UI_PuzzleCube::CallFunc_Multiply_FloatFloat_ReturnValue_6' has a wrong offset!");
static_assert(offsetof(UI_PuzzleCube_C_ExecuteUbergraph_UI_PuzzleCube, CallFunc_Multiply_FloatFloat_ReturnValue_7) == 0x0001FC, "Member 'UI_PuzzleCube_C_ExecuteUbergraph_UI_PuzzleCube::CallFunc_Multiply_FloatFloat_ReturnValue_7' has a wrong offset!");
static_assert(offsetof(UI_PuzzleCube_C_ExecuteUbergraph_UI_PuzzleCube, CallFunc_MakeRotator_ReturnValue_3) == 0x000200, "Member 'UI_PuzzleCube_C_ExecuteUbergraph_UI_PuzzleCube::CallFunc_MakeRotator_ReturnValue_3' has a wrong offset!");

// Function UI_PuzzleCube.UI_PuzzleCube_C.InputModeChanged
// 0x0008 (0x0008 - 0x0000)
struct UI_PuzzleCube_C_InputModeChanged final
{
public:
	int32                                         PlayerIndex;                                       // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EInputMode                                    InputMode;                                         // 0x0004(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(UI_PuzzleCube_C_InputModeChanged) == 0x000004, "Wrong alignment on UI_PuzzleCube_C_InputModeChanged");
static_assert(sizeof(UI_PuzzleCube_C_InputModeChanged) == 0x000008, "Wrong size on UI_PuzzleCube_C_InputModeChanged");
static_assert(offsetof(UI_PuzzleCube_C_InputModeChanged, PlayerIndex) == 0x000000, "Member 'UI_PuzzleCube_C_InputModeChanged::PlayerIndex' has a wrong offset!");
static_assert(offsetof(UI_PuzzleCube_C_InputModeChanged, InputMode) == 0x000004, "Member 'UI_PuzzleCube_C_InputModeChanged::InputMode' has a wrong offset!");

// Function UI_PuzzleCube.UI_PuzzleCube_C.Tick
// 0x003C (0x003C - 0x0000)
struct UI_PuzzleCube_C_Tick final
{
public:
	struct FGeometry                              MyGeometry;                                        // 0x0000(0x0038)(BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor)
	float                                         InDeltaTime;                                       // 0x0038(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(UI_PuzzleCube_C_Tick) == 0x000004, "Wrong alignment on UI_PuzzleCube_C_Tick");
static_assert(sizeof(UI_PuzzleCube_C_Tick) == 0x00003C, "Wrong size on UI_PuzzleCube_C_Tick");
static_assert(offsetof(UI_PuzzleCube_C_Tick, MyGeometry) == 0x000000, "Member 'UI_PuzzleCube_C_Tick::MyGeometry' has a wrong offset!");
static_assert(offsetof(UI_PuzzleCube_C_Tick, InDeltaTime) == 0x000038, "Member 'UI_PuzzleCube_C_Tick::InDeltaTime' has a wrong offset!");

// Function UI_PuzzleCube.UI_PuzzleCube_C.RightStickLeftRight
// 0x0004 (0x0004 - 0x0000)
struct UI_PuzzleCube_C_RightStickLeftRight final
{
public:
	float                                         AxisValue;                                         // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(UI_PuzzleCube_C_RightStickLeftRight) == 0x000004, "Wrong alignment on UI_PuzzleCube_C_RightStickLeftRight");
static_assert(sizeof(UI_PuzzleCube_C_RightStickLeftRight) == 0x000004, "Wrong size on UI_PuzzleCube_C_RightStickLeftRight");
static_assert(offsetof(UI_PuzzleCube_C_RightStickLeftRight, AxisValue) == 0x000000, "Member 'UI_PuzzleCube_C_RightStickLeftRight::AxisValue' has a wrong offset!");

// Function UI_PuzzleCube.UI_PuzzleCube_C.RightStickUpDown
// 0x0004 (0x0004 - 0x0000)
struct UI_PuzzleCube_C_RightStickUpDown final
{
public:
	float                                         AxisValue;                                         // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(UI_PuzzleCube_C_RightStickUpDown) == 0x000004, "Wrong alignment on UI_PuzzleCube_C_RightStickUpDown");
static_assert(sizeof(UI_PuzzleCube_C_RightStickUpDown) == 0x000004, "Wrong size on UI_PuzzleCube_C_RightStickUpDown");
static_assert(offsetof(UI_PuzzleCube_C_RightStickUpDown, AxisValue) == 0x000000, "Member 'UI_PuzzleCube_C_RightStickUpDown::AxisValue' has a wrong offset!");

// Function UI_PuzzleCube.UI_PuzzleCube_C.LeftStickLeftRight
// 0x0004 (0x0004 - 0x0000)
struct UI_PuzzleCube_C_LeftStickLeftRight final
{
public:
	float                                         AxisValue;                                         // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(UI_PuzzleCube_C_LeftStickLeftRight) == 0x000004, "Wrong alignment on UI_PuzzleCube_C_LeftStickLeftRight");
static_assert(sizeof(UI_PuzzleCube_C_LeftStickLeftRight) == 0x000004, "Wrong size on UI_PuzzleCube_C_LeftStickLeftRight");
static_assert(offsetof(UI_PuzzleCube_C_LeftStickLeftRight, AxisValue) == 0x000000, "Member 'UI_PuzzleCube_C_LeftStickLeftRight::AxisValue' has a wrong offset!");

// Function UI_PuzzleCube.UI_PuzzleCube_C.LeftStickUpDown
// 0x0004 (0x0004 - 0x0000)
struct UI_PuzzleCube_C_LeftStickUpDown final
{
public:
	float                                         AxisValue;                                         // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(UI_PuzzleCube_C_LeftStickUpDown) == 0x000004, "Wrong alignment on UI_PuzzleCube_C_LeftStickUpDown");
static_assert(sizeof(UI_PuzzleCube_C_LeftStickUpDown) == 0x000004, "Wrong size on UI_PuzzleCube_C_LeftStickUpDown");
static_assert(offsetof(UI_PuzzleCube_C_LeftStickUpDown, AxisValue) == 0x000000, "Member 'UI_PuzzleCube_C_LeftStickUpDown::AxisValue' has a wrong offset!");

// Function UI_PuzzleCube.UI_PuzzleCube_C.SpawnCube
// 0x00C0 (0x00C0 - 0x0000)
struct UI_PuzzleCube_C_SpawnCube final
{
public:
	float                                         CallFunc_Conv_IntToFloat_ReturnValue;              // 0x0000(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class APawn*                                  CallFunc_GetOwningPlayerPawn_ReturnValue;          // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_MathExpression_ReturnValue;                 // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class AHumanPlayerCharacter*                  K2Node_DynamicCast_AsHuman_Player_Character;       // 0x0018(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0020(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_21[0x3];                                       // 0x0021(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_MakeVector_ReturnValue;                   // 0x0024(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_K2_GetComponentLocation_ReturnValue;      // 0x0030(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_GetUpVector_ReturnValue;                  // 0x003C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_GetRightVector_ReturnValue;               // 0x0048(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_GetForwardVector_ReturnValue;             // 0x0054(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Multiply_VectorFloat_ReturnValue;         // 0x0060(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Add_VectorVector_ReturnValue;             // 0x006C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_78[0x8];                                       // 0x0078(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             CallFunc_MakeTransform_ReturnValue;                // 0x0080(0x0030)(IsPlainOldData, NoDestructor)
	class AActor*                                 CallFunc_BeginDeferredActorSpawnFromClass_ReturnValue; // 0x00B0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ABP_PuzzleCube_Functional_C*            CallFunc_FinishSpawningActor_ReturnValue;          // 0x00B8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(UI_PuzzleCube_C_SpawnCube) == 0x000010, "Wrong alignment on UI_PuzzleCube_C_SpawnCube");
static_assert(sizeof(UI_PuzzleCube_C_SpawnCube) == 0x0000C0, "Wrong size on UI_PuzzleCube_C_SpawnCube");
static_assert(offsetof(UI_PuzzleCube_C_SpawnCube, CallFunc_Conv_IntToFloat_ReturnValue) == 0x000000, "Member 'UI_PuzzleCube_C_SpawnCube::CallFunc_Conv_IntToFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(UI_PuzzleCube_C_SpawnCube, CallFunc_GetOwningPlayerPawn_ReturnValue) == 0x000008, "Member 'UI_PuzzleCube_C_SpawnCube::CallFunc_GetOwningPlayerPawn_ReturnValue' has a wrong offset!");
static_assert(offsetof(UI_PuzzleCube_C_SpawnCube, K2Node_MathExpression_ReturnValue) == 0x000010, "Member 'UI_PuzzleCube_C_SpawnCube::K2Node_MathExpression_ReturnValue' has a wrong offset!");
static_assert(offsetof(UI_PuzzleCube_C_SpawnCube, K2Node_DynamicCast_AsHuman_Player_Character) == 0x000018, "Member 'UI_PuzzleCube_C_SpawnCube::K2Node_DynamicCast_AsHuman_Player_Character' has a wrong offset!");
static_assert(offsetof(UI_PuzzleCube_C_SpawnCube, K2Node_DynamicCast_bSuccess) == 0x000020, "Member 'UI_PuzzleCube_C_SpawnCube::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(UI_PuzzleCube_C_SpawnCube, CallFunc_MakeVector_ReturnValue) == 0x000024, "Member 'UI_PuzzleCube_C_SpawnCube::CallFunc_MakeVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(UI_PuzzleCube_C_SpawnCube, CallFunc_K2_GetComponentLocation_ReturnValue) == 0x000030, "Member 'UI_PuzzleCube_C_SpawnCube::CallFunc_K2_GetComponentLocation_ReturnValue' has a wrong offset!");
static_assert(offsetof(UI_PuzzleCube_C_SpawnCube, CallFunc_GetUpVector_ReturnValue) == 0x00003C, "Member 'UI_PuzzleCube_C_SpawnCube::CallFunc_GetUpVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(UI_PuzzleCube_C_SpawnCube, CallFunc_GetRightVector_ReturnValue) == 0x000048, "Member 'UI_PuzzleCube_C_SpawnCube::CallFunc_GetRightVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(UI_PuzzleCube_C_SpawnCube, CallFunc_GetForwardVector_ReturnValue) == 0x000054, "Member 'UI_PuzzleCube_C_SpawnCube::CallFunc_GetForwardVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(UI_PuzzleCube_C_SpawnCube, CallFunc_Multiply_VectorFloat_ReturnValue) == 0x000060, "Member 'UI_PuzzleCube_C_SpawnCube::CallFunc_Multiply_VectorFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(UI_PuzzleCube_C_SpawnCube, CallFunc_Add_VectorVector_ReturnValue) == 0x00006C, "Member 'UI_PuzzleCube_C_SpawnCube::CallFunc_Add_VectorVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(UI_PuzzleCube_C_SpawnCube, CallFunc_MakeTransform_ReturnValue) == 0x000080, "Member 'UI_PuzzleCube_C_SpawnCube::CallFunc_MakeTransform_ReturnValue' has a wrong offset!");
static_assert(offsetof(UI_PuzzleCube_C_SpawnCube, CallFunc_BeginDeferredActorSpawnFromClass_ReturnValue) == 0x0000B0, "Member 'UI_PuzzleCube_C_SpawnCube::CallFunc_BeginDeferredActorSpawnFromClass_ReturnValue' has a wrong offset!");
static_assert(offsetof(UI_PuzzleCube_C_SpawnCube, CallFunc_FinishSpawningActor_ReturnValue) == 0x0000B8, "Member 'UI_PuzzleCube_C_SpawnCube::CallFunc_FinishSpawningActor_ReturnValue' has a wrong offset!");

// Function UI_PuzzleCube.UI_PuzzleCube_C.Rotate3DCube
// 0x001C (0x001C - 0x0000)
struct UI_PuzzleCube_C_Rotate3DCube final
{
public:
	struct FRotator                               DeltaRotation;                                     // 0x0000(0x000C)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FRotator                               CallFunc_TransformRotatorToCubeSpace_ReturnValue;  // 0x000C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0018(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(UI_PuzzleCube_C_Rotate3DCube) == 0x000004, "Wrong alignment on UI_PuzzleCube_C_Rotate3DCube");
static_assert(sizeof(UI_PuzzleCube_C_Rotate3DCube) == 0x00001C, "Wrong size on UI_PuzzleCube_C_Rotate3DCube");
static_assert(offsetof(UI_PuzzleCube_C_Rotate3DCube, DeltaRotation) == 0x000000, "Member 'UI_PuzzleCube_C_Rotate3DCube::DeltaRotation' has a wrong offset!");
static_assert(offsetof(UI_PuzzleCube_C_Rotate3DCube, CallFunc_TransformRotatorToCubeSpace_ReturnValue) == 0x00000C, "Member 'UI_PuzzleCube_C_Rotate3DCube::CallFunc_TransformRotatorToCubeSpace_ReturnValue' has a wrong offset!");
static_assert(offsetof(UI_PuzzleCube_C_Rotate3DCube, CallFunc_IsValid_ReturnValue) == 0x000018, "Member 'UI_PuzzleCube_C_Rotate3DCube::CallFunc_IsValid_ReturnValue' has a wrong offset!");

// Function UI_PuzzleCube.UI_PuzzleCube_C.FindActiveFace
// 0x0078 (0x0078 - 0x0000)
struct UI_PuzzleCube_C_FindActiveFace final
{
public:
	E_PuzzleCube_SelectedSide                     PrevSide;                                          // 0x0000(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_2[0x2];                                        // 0x0002(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_GetUpVector_ReturnValue;                  // 0x0004(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_GetRightVector_ReturnValue;               // 0x0010(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_GetForwardVector_ReturnValue;             // 0x001C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue_1;                    // 0x0028(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_29[0x7];                                       // 0x0029(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UAudioComponent*                        CallFunc_SpawnSound2D_ReturnValue;                 // 0x0030(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue_2;                    // 0x0038(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_39[0x3];                                       // 0x0039(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_NegateVector_ReturnValue;                 // 0x003C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Multiply_VectorFloat_ReturnValue;         // 0x0048(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Add_VectorVector_ReturnValue;             // 0x0054(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	E_PuzzleCube_SelectedSide                     CallFunc_FindClosestFaceToVector_Side1;            // 0x0060(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_61[0x3];                                       // 0x0061(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_FindClosestFaceToVector_NearestVector;    // 0x0064(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_NotEqual_ByteByte_ReturnValue;            // 0x0070(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(UI_PuzzleCube_C_FindActiveFace) == 0x000008, "Wrong alignment on UI_PuzzleCube_C_FindActiveFace");
static_assert(sizeof(UI_PuzzleCube_C_FindActiveFace) == 0x000078, "Wrong size on UI_PuzzleCube_C_FindActiveFace");
static_assert(offsetof(UI_PuzzleCube_C_FindActiveFace, PrevSide) == 0x000000, "Member 'UI_PuzzleCube_C_FindActiveFace::PrevSide' has a wrong offset!");
static_assert(offsetof(UI_PuzzleCube_C_FindActiveFace, CallFunc_IsValid_ReturnValue) == 0x000001, "Member 'UI_PuzzleCube_C_FindActiveFace::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(UI_PuzzleCube_C_FindActiveFace, CallFunc_GetUpVector_ReturnValue) == 0x000004, "Member 'UI_PuzzleCube_C_FindActiveFace::CallFunc_GetUpVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(UI_PuzzleCube_C_FindActiveFace, CallFunc_GetRightVector_ReturnValue) == 0x000010, "Member 'UI_PuzzleCube_C_FindActiveFace::CallFunc_GetRightVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(UI_PuzzleCube_C_FindActiveFace, CallFunc_GetForwardVector_ReturnValue) == 0x00001C, "Member 'UI_PuzzleCube_C_FindActiveFace::CallFunc_GetForwardVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(UI_PuzzleCube_C_FindActiveFace, CallFunc_IsValid_ReturnValue_1) == 0x000028, "Member 'UI_PuzzleCube_C_FindActiveFace::CallFunc_IsValid_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(UI_PuzzleCube_C_FindActiveFace, CallFunc_SpawnSound2D_ReturnValue) == 0x000030, "Member 'UI_PuzzleCube_C_FindActiveFace::CallFunc_SpawnSound2D_ReturnValue' has a wrong offset!");
static_assert(offsetof(UI_PuzzleCube_C_FindActiveFace, CallFunc_IsValid_ReturnValue_2) == 0x000038, "Member 'UI_PuzzleCube_C_FindActiveFace::CallFunc_IsValid_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(UI_PuzzleCube_C_FindActiveFace, CallFunc_NegateVector_ReturnValue) == 0x00003C, "Member 'UI_PuzzleCube_C_FindActiveFace::CallFunc_NegateVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(UI_PuzzleCube_C_FindActiveFace, CallFunc_Multiply_VectorFloat_ReturnValue) == 0x000048, "Member 'UI_PuzzleCube_C_FindActiveFace::CallFunc_Multiply_VectorFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(UI_PuzzleCube_C_FindActiveFace, CallFunc_Add_VectorVector_ReturnValue) == 0x000054, "Member 'UI_PuzzleCube_C_FindActiveFace::CallFunc_Add_VectorVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(UI_PuzzleCube_C_FindActiveFace, CallFunc_FindClosestFaceToVector_Side1) == 0x000060, "Member 'UI_PuzzleCube_C_FindActiveFace::CallFunc_FindClosestFaceToVector_Side1' has a wrong offset!");
static_assert(offsetof(UI_PuzzleCube_C_FindActiveFace, CallFunc_FindClosestFaceToVector_NearestVector) == 0x000064, "Member 'UI_PuzzleCube_C_FindActiveFace::CallFunc_FindClosestFaceToVector_NearestVector' has a wrong offset!");
static_assert(offsetof(UI_PuzzleCube_C_FindActiveFace, CallFunc_NotEqual_ByteByte_ReturnValue) == 0x000070, "Member 'UI_PuzzleCube_C_FindActiveFace::CallFunc_NotEqual_ByteByte_ReturnValue' has a wrong offset!");

// Function UI_PuzzleCube.UI_PuzzleCube_C.DebugArrow
// 0x0044 (0x0044 - 0x0000)
struct UI_PuzzleCube_C_DebugArrow final
{
public:
	struct FVector                                A;                                                 // 0x0000(0x000C)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           LineColor;                                         // 0x000C(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Duration;                                          // 0x001C(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Multiply_VectorFloat_ReturnValue;         // 0x0020(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_K2_GetActorLocation_ReturnValue;          // 0x002C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Add_VectorVector_ReturnValue;             // 0x0038(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(UI_PuzzleCube_C_DebugArrow) == 0x000004, "Wrong alignment on UI_PuzzleCube_C_DebugArrow");
static_assert(sizeof(UI_PuzzleCube_C_DebugArrow) == 0x000044, "Wrong size on UI_PuzzleCube_C_DebugArrow");
static_assert(offsetof(UI_PuzzleCube_C_DebugArrow, A) == 0x000000, "Member 'UI_PuzzleCube_C_DebugArrow::A' has a wrong offset!");
static_assert(offsetof(UI_PuzzleCube_C_DebugArrow, LineColor) == 0x00000C, "Member 'UI_PuzzleCube_C_DebugArrow::LineColor' has a wrong offset!");
static_assert(offsetof(UI_PuzzleCube_C_DebugArrow, Duration) == 0x00001C, "Member 'UI_PuzzleCube_C_DebugArrow::Duration' has a wrong offset!");
static_assert(offsetof(UI_PuzzleCube_C_DebugArrow, CallFunc_Multiply_VectorFloat_ReturnValue) == 0x000020, "Member 'UI_PuzzleCube_C_DebugArrow::CallFunc_Multiply_VectorFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(UI_PuzzleCube_C_DebugArrow, CallFunc_K2_GetActorLocation_ReturnValue) == 0x00002C, "Member 'UI_PuzzleCube_C_DebugArrow::CallFunc_K2_GetActorLocation_ReturnValue' has a wrong offset!");
static_assert(offsetof(UI_PuzzleCube_C_DebugArrow, CallFunc_Add_VectorVector_ReturnValue) == 0x000038, "Member 'UI_PuzzleCube_C_DebugArrow::CallFunc_Add_VectorVector_ReturnValue' has a wrong offset!");

// Function UI_PuzzleCube.UI_PuzzleCube_C.FindClosestFaceToVector
// 0x0128 (0x0128 - 0x0000)
struct UI_PuzzleCube_C_FindClosestFaceToVector final
{
public:
	struct FVector                                A;                                                 // 0x0000(0x000C)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                Forward;                                           // 0x000C(0x000C)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                Right;                                             // 0x0018(0x000C)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                Up;                                                // 0x0024(0x000C)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	E_PuzzleCube_SelectedSide                     Side1;                                             // 0x0030(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_31[0x3];                                       // 0x0031(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                NearestVector;                                     // 0x0034(0x000C)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                Vector;                                            // 0x0040(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         MinAngle;                                          // 0x004C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	E_PuzzleCube_SelectedSide                     Side;                                              // 0x0050(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_51[0x3];                                       // 0x0051(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FRotator                               CallFunc_RotationBetweenVectors_Rotator;           // 0x0054(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FVector                                CallFunc_RotationBetweenVectors_Axis;              // 0x0060(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_RotationBetweenVectors_Angle;             // 0x006C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_NegateVector_ReturnValue;                 // 0x0070(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               CallFunc_RotationBetweenVectors_Rotator_1;         // 0x007C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FVector                                CallFunc_RotationBetweenVectors_Axis_1;            // 0x0088(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_RotationBetweenVectors_Angle_1;           // 0x0094(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               CallFunc_RotationBetweenVectors_Rotator_2;         // 0x0098(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FVector                                CallFunc_RotationBetweenVectors_Axis_2;            // 0x00A4(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_RotationBetweenVectors_Angle_2;           // 0x00B0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_NegateVector_ReturnValue_1;               // 0x00B4(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               CallFunc_RotationBetweenVectors_Rotator_3;         // 0x00C0(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FVector                                CallFunc_RotationBetweenVectors_Axis_3;            // 0x00CC(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_RotationBetweenVectors_Angle_3;           // 0x00D8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               CallFunc_RotationBetweenVectors_Rotator_4;         // 0x00DC(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FVector                                CallFunc_RotationBetweenVectors_Axis_4;            // 0x00E8(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_RotationBetweenVectors_Angle_4;           // 0x00F4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_NegateVector_ReturnValue_2;               // 0x00F8(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               CallFunc_RotationBetweenVectors_Rotator_5;         // 0x0104(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FVector                                CallFunc_RotationBetweenVectors_Axis_5;            // 0x0110(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_RotationBetweenVectors_Angle_5;           // 0x011C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_FloatFloat_ReturnValue;              // 0x0120(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Less_FloatFloat_ReturnValue_1;            // 0x0121(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Less_FloatFloat_ReturnValue_2;            // 0x0122(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Less_FloatFloat_ReturnValue_3;            // 0x0123(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Less_FloatFloat_ReturnValue_4;            // 0x0124(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(UI_PuzzleCube_C_FindClosestFaceToVector) == 0x000004, "Wrong alignment on UI_PuzzleCube_C_FindClosestFaceToVector");
static_assert(sizeof(UI_PuzzleCube_C_FindClosestFaceToVector) == 0x000128, "Wrong size on UI_PuzzleCube_C_FindClosestFaceToVector");
static_assert(offsetof(UI_PuzzleCube_C_FindClosestFaceToVector, A) == 0x000000, "Member 'UI_PuzzleCube_C_FindClosestFaceToVector::A' has a wrong offset!");
static_assert(offsetof(UI_PuzzleCube_C_FindClosestFaceToVector, Forward) == 0x00000C, "Member 'UI_PuzzleCube_C_FindClosestFaceToVector::Forward' has a wrong offset!");
static_assert(offsetof(UI_PuzzleCube_C_FindClosestFaceToVector, Right) == 0x000018, "Member 'UI_PuzzleCube_C_FindClosestFaceToVector::Right' has a wrong offset!");
static_assert(offsetof(UI_PuzzleCube_C_FindClosestFaceToVector, Up) == 0x000024, "Member 'UI_PuzzleCube_C_FindClosestFaceToVector::Up' has a wrong offset!");
static_assert(offsetof(UI_PuzzleCube_C_FindClosestFaceToVector, Side1) == 0x000030, "Member 'UI_PuzzleCube_C_FindClosestFaceToVector::Side1' has a wrong offset!");
static_assert(offsetof(UI_PuzzleCube_C_FindClosestFaceToVector, NearestVector) == 0x000034, "Member 'UI_PuzzleCube_C_FindClosestFaceToVector::NearestVector' has a wrong offset!");
static_assert(offsetof(UI_PuzzleCube_C_FindClosestFaceToVector, Vector) == 0x000040, "Member 'UI_PuzzleCube_C_FindClosestFaceToVector::Vector' has a wrong offset!");
static_assert(offsetof(UI_PuzzleCube_C_FindClosestFaceToVector, MinAngle) == 0x00004C, "Member 'UI_PuzzleCube_C_FindClosestFaceToVector::MinAngle' has a wrong offset!");
static_assert(offsetof(UI_PuzzleCube_C_FindClosestFaceToVector, Side) == 0x000050, "Member 'UI_PuzzleCube_C_FindClosestFaceToVector::Side' has a wrong offset!");
static_assert(offsetof(UI_PuzzleCube_C_FindClosestFaceToVector, CallFunc_RotationBetweenVectors_Rotator) == 0x000054, "Member 'UI_PuzzleCube_C_FindClosestFaceToVector::CallFunc_RotationBetweenVectors_Rotator' has a wrong offset!");
static_assert(offsetof(UI_PuzzleCube_C_FindClosestFaceToVector, CallFunc_RotationBetweenVectors_Axis) == 0x000060, "Member 'UI_PuzzleCube_C_FindClosestFaceToVector::CallFunc_RotationBetweenVectors_Axis' has a wrong offset!");
static_assert(offsetof(UI_PuzzleCube_C_FindClosestFaceToVector, CallFunc_RotationBetweenVectors_Angle) == 0x00006C, "Member 'UI_PuzzleCube_C_FindClosestFaceToVector::CallFunc_RotationBetweenVectors_Angle' has a wrong offset!");
static_assert(offsetof(UI_PuzzleCube_C_FindClosestFaceToVector, CallFunc_NegateVector_ReturnValue) == 0x000070, "Member 'UI_PuzzleCube_C_FindClosestFaceToVector::CallFunc_NegateVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(UI_PuzzleCube_C_FindClosestFaceToVector, CallFunc_RotationBetweenVectors_Rotator_1) == 0x00007C, "Member 'UI_PuzzleCube_C_FindClosestFaceToVector::CallFunc_RotationBetweenVectors_Rotator_1' has a wrong offset!");
static_assert(offsetof(UI_PuzzleCube_C_FindClosestFaceToVector, CallFunc_RotationBetweenVectors_Axis_1) == 0x000088, "Member 'UI_PuzzleCube_C_FindClosestFaceToVector::CallFunc_RotationBetweenVectors_Axis_1' has a wrong offset!");
static_assert(offsetof(UI_PuzzleCube_C_FindClosestFaceToVector, CallFunc_RotationBetweenVectors_Angle_1) == 0x000094, "Member 'UI_PuzzleCube_C_FindClosestFaceToVector::CallFunc_RotationBetweenVectors_Angle_1' has a wrong offset!");
static_assert(offsetof(UI_PuzzleCube_C_FindClosestFaceToVector, CallFunc_RotationBetweenVectors_Rotator_2) == 0x000098, "Member 'UI_PuzzleCube_C_FindClosestFaceToVector::CallFunc_RotationBetweenVectors_Rotator_2' has a wrong offset!");
static_assert(offsetof(UI_PuzzleCube_C_FindClosestFaceToVector, CallFunc_RotationBetweenVectors_Axis_2) == 0x0000A4, "Member 'UI_PuzzleCube_C_FindClosestFaceToVector::CallFunc_RotationBetweenVectors_Axis_2' has a wrong offset!");
static_assert(offsetof(UI_PuzzleCube_C_FindClosestFaceToVector, CallFunc_RotationBetweenVectors_Angle_2) == 0x0000B0, "Member 'UI_PuzzleCube_C_FindClosestFaceToVector::CallFunc_RotationBetweenVectors_Angle_2' has a wrong offset!");
static_assert(offsetof(UI_PuzzleCube_C_FindClosestFaceToVector, CallFunc_NegateVector_ReturnValue_1) == 0x0000B4, "Member 'UI_PuzzleCube_C_FindClosestFaceToVector::CallFunc_NegateVector_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(UI_PuzzleCube_C_FindClosestFaceToVector, CallFunc_RotationBetweenVectors_Rotator_3) == 0x0000C0, "Member 'UI_PuzzleCube_C_FindClosestFaceToVector::CallFunc_RotationBetweenVectors_Rotator_3' has a wrong offset!");
static_assert(offsetof(UI_PuzzleCube_C_FindClosestFaceToVector, CallFunc_RotationBetweenVectors_Axis_3) == 0x0000CC, "Member 'UI_PuzzleCube_C_FindClosestFaceToVector::CallFunc_RotationBetweenVectors_Axis_3' has a wrong offset!");
static_assert(offsetof(UI_PuzzleCube_C_FindClosestFaceToVector, CallFunc_RotationBetweenVectors_Angle_3) == 0x0000D8, "Member 'UI_PuzzleCube_C_FindClosestFaceToVector::CallFunc_RotationBetweenVectors_Angle_3' has a wrong offset!");
static_assert(offsetof(UI_PuzzleCube_C_FindClosestFaceToVector, CallFunc_RotationBetweenVectors_Rotator_4) == 0x0000DC, "Member 'UI_PuzzleCube_C_FindClosestFaceToVector::CallFunc_RotationBetweenVectors_Rotator_4' has a wrong offset!");
static_assert(offsetof(UI_PuzzleCube_C_FindClosestFaceToVector, CallFunc_RotationBetweenVectors_Axis_4) == 0x0000E8, "Member 'UI_PuzzleCube_C_FindClosestFaceToVector::CallFunc_RotationBetweenVectors_Axis_4' has a wrong offset!");
static_assert(offsetof(UI_PuzzleCube_C_FindClosestFaceToVector, CallFunc_RotationBetweenVectors_Angle_4) == 0x0000F4, "Member 'UI_PuzzleCube_C_FindClosestFaceToVector::CallFunc_RotationBetweenVectors_Angle_4' has a wrong offset!");
static_assert(offsetof(UI_PuzzleCube_C_FindClosestFaceToVector, CallFunc_NegateVector_ReturnValue_2) == 0x0000F8, "Member 'UI_PuzzleCube_C_FindClosestFaceToVector::CallFunc_NegateVector_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(UI_PuzzleCube_C_FindClosestFaceToVector, CallFunc_RotationBetweenVectors_Rotator_5) == 0x000104, "Member 'UI_PuzzleCube_C_FindClosestFaceToVector::CallFunc_RotationBetweenVectors_Rotator_5' has a wrong offset!");
static_assert(offsetof(UI_PuzzleCube_C_FindClosestFaceToVector, CallFunc_RotationBetweenVectors_Axis_5) == 0x000110, "Member 'UI_PuzzleCube_C_FindClosestFaceToVector::CallFunc_RotationBetweenVectors_Axis_5' has a wrong offset!");
static_assert(offsetof(UI_PuzzleCube_C_FindClosestFaceToVector, CallFunc_RotationBetweenVectors_Angle_5) == 0x00011C, "Member 'UI_PuzzleCube_C_FindClosestFaceToVector::CallFunc_RotationBetweenVectors_Angle_5' has a wrong offset!");
static_assert(offsetof(UI_PuzzleCube_C_FindClosestFaceToVector, CallFunc_Less_FloatFloat_ReturnValue) == 0x000120, "Member 'UI_PuzzleCube_C_FindClosestFaceToVector::CallFunc_Less_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(UI_PuzzleCube_C_FindClosestFaceToVector, CallFunc_Less_FloatFloat_ReturnValue_1) == 0x000121, "Member 'UI_PuzzleCube_C_FindClosestFaceToVector::CallFunc_Less_FloatFloat_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(UI_PuzzleCube_C_FindClosestFaceToVector, CallFunc_Less_FloatFloat_ReturnValue_2) == 0x000122, "Member 'UI_PuzzleCube_C_FindClosestFaceToVector::CallFunc_Less_FloatFloat_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(UI_PuzzleCube_C_FindClosestFaceToVector, CallFunc_Less_FloatFloat_ReturnValue_3) == 0x000123, "Member 'UI_PuzzleCube_C_FindClosestFaceToVector::CallFunc_Less_FloatFloat_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(UI_PuzzleCube_C_FindClosestFaceToVector, CallFunc_Less_FloatFloat_ReturnValue_4) == 0x000124, "Member 'UI_PuzzleCube_C_FindClosestFaceToVector::CallFunc_Less_FloatFloat_ReturnValue_4' has a wrong offset!");

// Function UI_PuzzleCube.UI_PuzzleCube_C.ChangeActiveFace
// 0x00F8 (0x00F8 - 0x0000)
struct UI_PuzzleCube_C_ChangeActiveFace final
{
public:
	E_PuzzleCube_SelectedSide                     Dir;                                               // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	E_PuzzleCube_SelectedSide                     PrevSide;                                          // 0x0001(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2[0x2];                                        // 0x0002(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                Temp_struct_Variable;                              // 0x0004(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                Temp_struct_Variable_1;                            // 0x0010(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x001C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_1D[0x3];                                       // 0x001D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_GetForwardVector_ReturnValue;             // 0x0020(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_NegateVector_ReturnValue;                 // 0x002C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_GetRightVector_ReturnValue;               // 0x0038(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_GetUpVector_ReturnValue;                  // 0x0044(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_NegateVector_ReturnValue_1;               // 0x0050(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_NegateVector_ReturnValue_2;               // 0x005C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	E_PuzzleCube_SelectedSide                     CallFunc_FindFocus_FocusedSide;                    // 0x0068(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_69[0x3];                                       // 0x0069(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_NegateVector_ReturnValue_3;               // 0x006C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_NegateVector_ReturnValue_4;               // 0x0078(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_NegateVector_ReturnValue_5;               // 0x0084(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	E_PuzzleCube_SelectedSide                     Temp_byte_Variable;                                // 0x0090(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_91[0x3];                                       // 0x0091(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_NegateVector_ReturnValue_6;               // 0x0094(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	E_PuzzleCube_SelectedSide                     Temp_byte_Variable_1;                              // 0x00A0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	E_PuzzleCube_SelectedSide                     Temp_byte_Variable_2;                              // 0x00A1(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_A2[0x2];                                       // 0x00A2(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                K2Node_Select_Default;                             // 0x00A4(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                K2Node_Select_Default_1;                           // 0x00B0(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	E_PuzzleCube_SelectedSide                     Temp_byte_Variable_3;                              // 0x00BC(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	E_PuzzleCube_SelectedSide                     Temp_byte_Variable_4;                              // 0x00BD(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_BE[0x2];                                       // 0x00BE(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                K2Node_Select_Default_2;                           // 0x00C0(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                K2Node_Select_Default_3;                           // 0x00CC(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                K2Node_Select_Default_4;                           // 0x00D8(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	E_PuzzleCube_SelectedSide                     CallFunc_FindClosestFaceToVector_Side1;            // 0x00E4(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_E5[0x3];                                       // 0x00E5(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_FindClosestFaceToVector_NearestVector;    // 0x00E8(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_NotEqual_ByteByte_ReturnValue;            // 0x00F4(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(UI_PuzzleCube_C_ChangeActiveFace) == 0x000004, "Wrong alignment on UI_PuzzleCube_C_ChangeActiveFace");
static_assert(sizeof(UI_PuzzleCube_C_ChangeActiveFace) == 0x0000F8, "Wrong size on UI_PuzzleCube_C_ChangeActiveFace");
static_assert(offsetof(UI_PuzzleCube_C_ChangeActiveFace, Dir) == 0x000000, "Member 'UI_PuzzleCube_C_ChangeActiveFace::Dir' has a wrong offset!");
static_assert(offsetof(UI_PuzzleCube_C_ChangeActiveFace, PrevSide) == 0x000001, "Member 'UI_PuzzleCube_C_ChangeActiveFace::PrevSide' has a wrong offset!");
static_assert(offsetof(UI_PuzzleCube_C_ChangeActiveFace, Temp_struct_Variable) == 0x000004, "Member 'UI_PuzzleCube_C_ChangeActiveFace::Temp_struct_Variable' has a wrong offset!");
static_assert(offsetof(UI_PuzzleCube_C_ChangeActiveFace, Temp_struct_Variable_1) == 0x000010, "Member 'UI_PuzzleCube_C_ChangeActiveFace::Temp_struct_Variable_1' has a wrong offset!");
static_assert(offsetof(UI_PuzzleCube_C_ChangeActiveFace, CallFunc_IsValid_ReturnValue) == 0x00001C, "Member 'UI_PuzzleCube_C_ChangeActiveFace::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(UI_PuzzleCube_C_ChangeActiveFace, CallFunc_GetForwardVector_ReturnValue) == 0x000020, "Member 'UI_PuzzleCube_C_ChangeActiveFace::CallFunc_GetForwardVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(UI_PuzzleCube_C_ChangeActiveFace, CallFunc_NegateVector_ReturnValue) == 0x00002C, "Member 'UI_PuzzleCube_C_ChangeActiveFace::CallFunc_NegateVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(UI_PuzzleCube_C_ChangeActiveFace, CallFunc_GetRightVector_ReturnValue) == 0x000038, "Member 'UI_PuzzleCube_C_ChangeActiveFace::CallFunc_GetRightVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(UI_PuzzleCube_C_ChangeActiveFace, CallFunc_GetUpVector_ReturnValue) == 0x000044, "Member 'UI_PuzzleCube_C_ChangeActiveFace::CallFunc_GetUpVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(UI_PuzzleCube_C_ChangeActiveFace, CallFunc_NegateVector_ReturnValue_1) == 0x000050, "Member 'UI_PuzzleCube_C_ChangeActiveFace::CallFunc_NegateVector_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(UI_PuzzleCube_C_ChangeActiveFace, CallFunc_NegateVector_ReturnValue_2) == 0x00005C, "Member 'UI_PuzzleCube_C_ChangeActiveFace::CallFunc_NegateVector_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(UI_PuzzleCube_C_ChangeActiveFace, CallFunc_FindFocus_FocusedSide) == 0x000068, "Member 'UI_PuzzleCube_C_ChangeActiveFace::CallFunc_FindFocus_FocusedSide' has a wrong offset!");
static_assert(offsetof(UI_PuzzleCube_C_ChangeActiveFace, CallFunc_NegateVector_ReturnValue_3) == 0x00006C, "Member 'UI_PuzzleCube_C_ChangeActiveFace::CallFunc_NegateVector_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(UI_PuzzleCube_C_ChangeActiveFace, CallFunc_NegateVector_ReturnValue_4) == 0x000078, "Member 'UI_PuzzleCube_C_ChangeActiveFace::CallFunc_NegateVector_ReturnValue_4' has a wrong offset!");
static_assert(offsetof(UI_PuzzleCube_C_ChangeActiveFace, CallFunc_NegateVector_ReturnValue_5) == 0x000084, "Member 'UI_PuzzleCube_C_ChangeActiveFace::CallFunc_NegateVector_ReturnValue_5' has a wrong offset!");
static_assert(offsetof(UI_PuzzleCube_C_ChangeActiveFace, Temp_byte_Variable) == 0x000090, "Member 'UI_PuzzleCube_C_ChangeActiveFace::Temp_byte_Variable' has a wrong offset!");
static_assert(offsetof(UI_PuzzleCube_C_ChangeActiveFace, CallFunc_NegateVector_ReturnValue_6) == 0x000094, "Member 'UI_PuzzleCube_C_ChangeActiveFace::CallFunc_NegateVector_ReturnValue_6' has a wrong offset!");
static_assert(offsetof(UI_PuzzleCube_C_ChangeActiveFace, Temp_byte_Variable_1) == 0x0000A0, "Member 'UI_PuzzleCube_C_ChangeActiveFace::Temp_byte_Variable_1' has a wrong offset!");
static_assert(offsetof(UI_PuzzleCube_C_ChangeActiveFace, Temp_byte_Variable_2) == 0x0000A1, "Member 'UI_PuzzleCube_C_ChangeActiveFace::Temp_byte_Variable_2' has a wrong offset!");
static_assert(offsetof(UI_PuzzleCube_C_ChangeActiveFace, K2Node_Select_Default) == 0x0000A4, "Member 'UI_PuzzleCube_C_ChangeActiveFace::K2Node_Select_Default' has a wrong offset!");
static_assert(offsetof(UI_PuzzleCube_C_ChangeActiveFace, K2Node_Select_Default_1) == 0x0000B0, "Member 'UI_PuzzleCube_C_ChangeActiveFace::K2Node_Select_Default_1' has a wrong offset!");
static_assert(offsetof(UI_PuzzleCube_C_ChangeActiveFace, Temp_byte_Variable_3) == 0x0000BC, "Member 'UI_PuzzleCube_C_ChangeActiveFace::Temp_byte_Variable_3' has a wrong offset!");
static_assert(offsetof(UI_PuzzleCube_C_ChangeActiveFace, Temp_byte_Variable_4) == 0x0000BD, "Member 'UI_PuzzleCube_C_ChangeActiveFace::Temp_byte_Variable_4' has a wrong offset!");
static_assert(offsetof(UI_PuzzleCube_C_ChangeActiveFace, K2Node_Select_Default_2) == 0x0000C0, "Member 'UI_PuzzleCube_C_ChangeActiveFace::K2Node_Select_Default_2' has a wrong offset!");
static_assert(offsetof(UI_PuzzleCube_C_ChangeActiveFace, K2Node_Select_Default_3) == 0x0000CC, "Member 'UI_PuzzleCube_C_ChangeActiveFace::K2Node_Select_Default_3' has a wrong offset!");
static_assert(offsetof(UI_PuzzleCube_C_ChangeActiveFace, K2Node_Select_Default_4) == 0x0000D8, "Member 'UI_PuzzleCube_C_ChangeActiveFace::K2Node_Select_Default_4' has a wrong offset!");
static_assert(offsetof(UI_PuzzleCube_C_ChangeActiveFace, CallFunc_FindClosestFaceToVector_Side1) == 0x0000E4, "Member 'UI_PuzzleCube_C_ChangeActiveFace::CallFunc_FindClosestFaceToVector_Side1' has a wrong offset!");
static_assert(offsetof(UI_PuzzleCube_C_ChangeActiveFace, CallFunc_FindClosestFaceToVector_NearestVector) == 0x0000E8, "Member 'UI_PuzzleCube_C_ChangeActiveFace::CallFunc_FindClosestFaceToVector_NearestVector' has a wrong offset!");
static_assert(offsetof(UI_PuzzleCube_C_ChangeActiveFace, CallFunc_NotEqual_ByteByte_ReturnValue) == 0x0000F4, "Member 'UI_PuzzleCube_C_ChangeActiveFace::CallFunc_NotEqual_ByteByte_ReturnValue' has a wrong offset!");

// Function UI_PuzzleCube.UI_PuzzleCube_C.DrawDebugArrows
// 0x0050 (0x0050 - 0x0000)
struct UI_PuzzleCube_C_DrawDebugArrows final
{
public:
	float                                         Duration;                                          // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0004(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_GetForwardVector_ReturnValue;             // 0x0008(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_NegateVector_ReturnValue;                 // 0x0014(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_GetRightVector_ReturnValue;               // 0x0020(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_NegateVector_ReturnValue_1;               // 0x002C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_GetUpVector_ReturnValue;                  // 0x0038(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_NegateVector_ReturnValue_2;               // 0x0044(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(UI_PuzzleCube_C_DrawDebugArrows) == 0x000004, "Wrong alignment on UI_PuzzleCube_C_DrawDebugArrows");
static_assert(sizeof(UI_PuzzleCube_C_DrawDebugArrows) == 0x000050, "Wrong size on UI_PuzzleCube_C_DrawDebugArrows");
static_assert(offsetof(UI_PuzzleCube_C_DrawDebugArrows, Duration) == 0x000000, "Member 'UI_PuzzleCube_C_DrawDebugArrows::Duration' has a wrong offset!");
static_assert(offsetof(UI_PuzzleCube_C_DrawDebugArrows, CallFunc_IsValid_ReturnValue) == 0x000004, "Member 'UI_PuzzleCube_C_DrawDebugArrows::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(UI_PuzzleCube_C_DrawDebugArrows, CallFunc_GetForwardVector_ReturnValue) == 0x000008, "Member 'UI_PuzzleCube_C_DrawDebugArrows::CallFunc_GetForwardVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(UI_PuzzleCube_C_DrawDebugArrows, CallFunc_NegateVector_ReturnValue) == 0x000014, "Member 'UI_PuzzleCube_C_DrawDebugArrows::CallFunc_NegateVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(UI_PuzzleCube_C_DrawDebugArrows, CallFunc_GetRightVector_ReturnValue) == 0x000020, "Member 'UI_PuzzleCube_C_DrawDebugArrows::CallFunc_GetRightVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(UI_PuzzleCube_C_DrawDebugArrows, CallFunc_NegateVector_ReturnValue_1) == 0x00002C, "Member 'UI_PuzzleCube_C_DrawDebugArrows::CallFunc_NegateVector_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(UI_PuzzleCube_C_DrawDebugArrows, CallFunc_GetUpVector_ReturnValue) == 0x000038, "Member 'UI_PuzzleCube_C_DrawDebugArrows::CallFunc_GetUpVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(UI_PuzzleCube_C_DrawDebugArrows, CallFunc_NegateVector_ReturnValue_2) == 0x000044, "Member 'UI_PuzzleCube_C_DrawDebugArrows::CallFunc_NegateVector_ReturnValue_2' has a wrong offset!");

// Function UI_PuzzleCube.UI_PuzzleCube_C.TransformRotatorToCubeSpace
// 0x0060 (0x0060 - 0x0000)
struct UI_PuzzleCube_C_TransformRotatorToCubeSpace final
{
public:
	struct FRotator                               InRot;                                             // 0x0000(0x000C)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FRotator                               ReturnValue;                                       // 0x000C(0x000C)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)
	float                                         CallFunc_BreakRotator_Roll;                        // 0x0018(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakRotator_Pitch;                       // 0x001C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakRotator_Yaw;                         // 0x0020(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               CallFunc_RotatorFromAxisAndAngle_ReturnValue;      // 0x0024(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FRotator                               CallFunc_RotatorFromAxisAndAngle_ReturnValue_1;    // 0x0030(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FRotator                               CallFunc_ComposeRotators_ReturnValue;              // 0x003C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FRotator                               CallFunc_RotatorFromAxisAndAngle_ReturnValue_2;    // 0x0048(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FRotator                               CallFunc_ComposeRotators_ReturnValue_1;            // 0x0054(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(UI_PuzzleCube_C_TransformRotatorToCubeSpace) == 0x000004, "Wrong alignment on UI_PuzzleCube_C_TransformRotatorToCubeSpace");
static_assert(sizeof(UI_PuzzleCube_C_TransformRotatorToCubeSpace) == 0x000060, "Wrong size on UI_PuzzleCube_C_TransformRotatorToCubeSpace");
static_assert(offsetof(UI_PuzzleCube_C_TransformRotatorToCubeSpace, InRot) == 0x000000, "Member 'UI_PuzzleCube_C_TransformRotatorToCubeSpace::InRot' has a wrong offset!");
static_assert(offsetof(UI_PuzzleCube_C_TransformRotatorToCubeSpace, ReturnValue) == 0x00000C, "Member 'UI_PuzzleCube_C_TransformRotatorToCubeSpace::ReturnValue' has a wrong offset!");
static_assert(offsetof(UI_PuzzleCube_C_TransformRotatorToCubeSpace, CallFunc_BreakRotator_Roll) == 0x000018, "Member 'UI_PuzzleCube_C_TransformRotatorToCubeSpace::CallFunc_BreakRotator_Roll' has a wrong offset!");
static_assert(offsetof(UI_PuzzleCube_C_TransformRotatorToCubeSpace, CallFunc_BreakRotator_Pitch) == 0x00001C, "Member 'UI_PuzzleCube_C_TransformRotatorToCubeSpace::CallFunc_BreakRotator_Pitch' has a wrong offset!");
static_assert(offsetof(UI_PuzzleCube_C_TransformRotatorToCubeSpace, CallFunc_BreakRotator_Yaw) == 0x000020, "Member 'UI_PuzzleCube_C_TransformRotatorToCubeSpace::CallFunc_BreakRotator_Yaw' has a wrong offset!");
static_assert(offsetof(UI_PuzzleCube_C_TransformRotatorToCubeSpace, CallFunc_RotatorFromAxisAndAngle_ReturnValue) == 0x000024, "Member 'UI_PuzzleCube_C_TransformRotatorToCubeSpace::CallFunc_RotatorFromAxisAndAngle_ReturnValue' has a wrong offset!");
static_assert(offsetof(UI_PuzzleCube_C_TransformRotatorToCubeSpace, CallFunc_RotatorFromAxisAndAngle_ReturnValue_1) == 0x000030, "Member 'UI_PuzzleCube_C_TransformRotatorToCubeSpace::CallFunc_RotatorFromAxisAndAngle_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(UI_PuzzleCube_C_TransformRotatorToCubeSpace, CallFunc_ComposeRotators_ReturnValue) == 0x00003C, "Member 'UI_PuzzleCube_C_TransformRotatorToCubeSpace::CallFunc_ComposeRotators_ReturnValue' has a wrong offset!");
static_assert(offsetof(UI_PuzzleCube_C_TransformRotatorToCubeSpace, CallFunc_RotatorFromAxisAndAngle_ReturnValue_2) == 0x000048, "Member 'UI_PuzzleCube_C_TransformRotatorToCubeSpace::CallFunc_RotatorFromAxisAndAngle_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(UI_PuzzleCube_C_TransformRotatorToCubeSpace, CallFunc_ComposeRotators_ReturnValue_1) == 0x000054, "Member 'UI_PuzzleCube_C_TransformRotatorToCubeSpace::CallFunc_ComposeRotators_ReturnValue_1' has a wrong offset!");

// Function UI_PuzzleCube.UI_PuzzleCube_C.VisualFocusButtons
// 0x0002 (0x0002 - 0x0000)
struct UI_PuzzleCube_C_VisualFocusButtons final
{
public:
	E_PuzzleCube_SelectedSide                     CallFunc_FindFocus_FocusedSide;                    // 0x0000(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_SwitchEnum_CmpSuccess;                      // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(UI_PuzzleCube_C_VisualFocusButtons) == 0x000001, "Wrong alignment on UI_PuzzleCube_C_VisualFocusButtons");
static_assert(sizeof(UI_PuzzleCube_C_VisualFocusButtons) == 0x000002, "Wrong size on UI_PuzzleCube_C_VisualFocusButtons");
static_assert(offsetof(UI_PuzzleCube_C_VisualFocusButtons, CallFunc_FindFocus_FocusedSide) == 0x000000, "Member 'UI_PuzzleCube_C_VisualFocusButtons::CallFunc_FindFocus_FocusedSide' has a wrong offset!");
static_assert(offsetof(UI_PuzzleCube_C_VisualFocusButtons, K2Node_SwitchEnum_CmpSuccess) == 0x000001, "Member 'UI_PuzzleCube_C_VisualFocusButtons::K2Node_SwitchEnum_CmpSuccess' has a wrong offset!");

// Function UI_PuzzleCube.UI_PuzzleCube_C.UpdateMeasurement
// 0x01F8 (0x01F8 - 0x0000)
struct UI_PuzzleCube_C_UpdateMeasurement final
{
public:
	class FText                                   CallFunc_MakeLiteralText_ReturnValue;              // 0x0000(0x0018)()
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0018(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FFormatArgumentData                    K2Node_MakeStruct_FormatArgumentData;              // 0x0020(0x0040)(HasGetValueTypeHash)
	TArray<struct FFormatArgumentData>            K2Node_MakeArray_Array;                            // 0x0060(0x0010)(ReferenceParm)
	struct FTimespan                              CallFunc_GetTimeTaken_ReturnValue;                 // 0x0070(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class FText                                   CallFunc_Format_ReturnValue;                       // 0x0078(0x0018)()
	class FText                                   CallFunc_FormatTimespanDHMS_TimespanDHMSOut;       // 0x0090(0x0018)()
	struct FFormatArgumentData                    K2Node_MakeStruct_FormatArgumentData_1;            // 0x00A8(0x0040)(HasGetValueTypeHash)
	struct FFormatArgumentData                    K2Node_MakeStruct_FormatArgumentData_2;            // 0x00E8(0x0040)(HasGetValueTypeHash)
	TArray<struct FFormatArgumentData>            K2Node_MakeArray_Array_1;                          // 0x0128(0x0010)(ReferenceParm)
	TArray<struct FFormatArgumentData>            K2Node_MakeArray_Array_2;                          // 0x0138(0x0010)(ReferenceParm)
	class FText                                   CallFunc_Format_ReturnValue_1;                     // 0x0148(0x0018)()
	class FText                                   CallFunc_Format_ReturnValue_2;                     // 0x0160(0x0018)()
	class FText                                   CallFunc_MakeLiteralText_ReturnValue_1;            // 0x0178(0x0018)()
	struct FFormatArgumentData                    K2Node_MakeStruct_FormatArgumentData_3;            // 0x0190(0x0040)(HasGetValueTypeHash)
	TArray<struct FFormatArgumentData>            K2Node_MakeArray_Array_3;                          // 0x01D0(0x0010)(ReferenceParm)
	class FText                                   CallFunc_Format_ReturnValue_3;                     // 0x01E0(0x0018)()
};
static_assert(alignof(UI_PuzzleCube_C_UpdateMeasurement) == 0x000008, "Wrong alignment on UI_PuzzleCube_C_UpdateMeasurement");
static_assert(sizeof(UI_PuzzleCube_C_UpdateMeasurement) == 0x0001F8, "Wrong size on UI_PuzzleCube_C_UpdateMeasurement");
static_assert(offsetof(UI_PuzzleCube_C_UpdateMeasurement, CallFunc_MakeLiteralText_ReturnValue) == 0x000000, "Member 'UI_PuzzleCube_C_UpdateMeasurement::CallFunc_MakeLiteralText_ReturnValue' has a wrong offset!");
static_assert(offsetof(UI_PuzzleCube_C_UpdateMeasurement, CallFunc_IsValid_ReturnValue) == 0x000018, "Member 'UI_PuzzleCube_C_UpdateMeasurement::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(UI_PuzzleCube_C_UpdateMeasurement, K2Node_MakeStruct_FormatArgumentData) == 0x000020, "Member 'UI_PuzzleCube_C_UpdateMeasurement::K2Node_MakeStruct_FormatArgumentData' has a wrong offset!");
static_assert(offsetof(UI_PuzzleCube_C_UpdateMeasurement, K2Node_MakeArray_Array) == 0x000060, "Member 'UI_PuzzleCube_C_UpdateMeasurement::K2Node_MakeArray_Array' has a wrong offset!");
static_assert(offsetof(UI_PuzzleCube_C_UpdateMeasurement, CallFunc_GetTimeTaken_ReturnValue) == 0x000070, "Member 'UI_PuzzleCube_C_UpdateMeasurement::CallFunc_GetTimeTaken_ReturnValue' has a wrong offset!");
static_assert(offsetof(UI_PuzzleCube_C_UpdateMeasurement, CallFunc_Format_ReturnValue) == 0x000078, "Member 'UI_PuzzleCube_C_UpdateMeasurement::CallFunc_Format_ReturnValue' has a wrong offset!");
static_assert(offsetof(UI_PuzzleCube_C_UpdateMeasurement, CallFunc_FormatTimespanDHMS_TimespanDHMSOut) == 0x000090, "Member 'UI_PuzzleCube_C_UpdateMeasurement::CallFunc_FormatTimespanDHMS_TimespanDHMSOut' has a wrong offset!");
static_assert(offsetof(UI_PuzzleCube_C_UpdateMeasurement, K2Node_MakeStruct_FormatArgumentData_1) == 0x0000A8, "Member 'UI_PuzzleCube_C_UpdateMeasurement::K2Node_MakeStruct_FormatArgumentData_1' has a wrong offset!");
static_assert(offsetof(UI_PuzzleCube_C_UpdateMeasurement, K2Node_MakeStruct_FormatArgumentData_2) == 0x0000E8, "Member 'UI_PuzzleCube_C_UpdateMeasurement::K2Node_MakeStruct_FormatArgumentData_2' has a wrong offset!");
static_assert(offsetof(UI_PuzzleCube_C_UpdateMeasurement, K2Node_MakeArray_Array_1) == 0x000128, "Member 'UI_PuzzleCube_C_UpdateMeasurement::K2Node_MakeArray_Array_1' has a wrong offset!");
static_assert(offsetof(UI_PuzzleCube_C_UpdateMeasurement, K2Node_MakeArray_Array_2) == 0x000138, "Member 'UI_PuzzleCube_C_UpdateMeasurement::K2Node_MakeArray_Array_2' has a wrong offset!");
static_assert(offsetof(UI_PuzzleCube_C_UpdateMeasurement, CallFunc_Format_ReturnValue_1) == 0x000148, "Member 'UI_PuzzleCube_C_UpdateMeasurement::CallFunc_Format_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(UI_PuzzleCube_C_UpdateMeasurement, CallFunc_Format_ReturnValue_2) == 0x000160, "Member 'UI_PuzzleCube_C_UpdateMeasurement::CallFunc_Format_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(UI_PuzzleCube_C_UpdateMeasurement, CallFunc_MakeLiteralText_ReturnValue_1) == 0x000178, "Member 'UI_PuzzleCube_C_UpdateMeasurement::CallFunc_MakeLiteralText_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(UI_PuzzleCube_C_UpdateMeasurement, K2Node_MakeStruct_FormatArgumentData_3) == 0x000190, "Member 'UI_PuzzleCube_C_UpdateMeasurement::K2Node_MakeStruct_FormatArgumentData_3' has a wrong offset!");
static_assert(offsetof(UI_PuzzleCube_C_UpdateMeasurement, K2Node_MakeArray_Array_3) == 0x0001D0, "Member 'UI_PuzzleCube_C_UpdateMeasurement::K2Node_MakeArray_Array_3' has a wrong offset!");
static_assert(offsetof(UI_PuzzleCube_C_UpdateMeasurement, CallFunc_Format_ReturnValue_3) == 0x0001E0, "Member 'UI_PuzzleCube_C_UpdateMeasurement::CallFunc_Format_ReturnValue_3' has a wrong offset!");

// Function UI_PuzzleCube.UI_PuzzleCube_C.ShowWinMsg
// 0x0018 (0x0018 - 0x0000)
struct UI_PuzzleCube_C_ShowWinMsg final
{
public:
	bool                                          Win;                                               // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_2[0x2];                                        // 0x0002(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_GetTotalSeconds_ReturnValue;              // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_FTrunc_ReturnValue;                       // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Send_Cube_Solved_Event_ReturnValue;       // 0x000C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable;                                // 0x000D(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	ESlateVisibility                              Temp_byte_Variable;                                // 0x000E(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              Temp_byte_Variable_1;                              // 0x000F(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Increase_Achievement_Progress_Result_Code; // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              K2Node_Select_Default;                             // 0x0014(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(UI_PuzzleCube_C_ShowWinMsg) == 0x000004, "Wrong alignment on UI_PuzzleCube_C_ShowWinMsg");
static_assert(sizeof(UI_PuzzleCube_C_ShowWinMsg) == 0x000018, "Wrong size on UI_PuzzleCube_C_ShowWinMsg");
static_assert(offsetof(UI_PuzzleCube_C_ShowWinMsg, Win) == 0x000000, "Member 'UI_PuzzleCube_C_ShowWinMsg::Win' has a wrong offset!");
static_assert(offsetof(UI_PuzzleCube_C_ShowWinMsg, CallFunc_IsValid_ReturnValue) == 0x000001, "Member 'UI_PuzzleCube_C_ShowWinMsg::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(UI_PuzzleCube_C_ShowWinMsg, CallFunc_GetTotalSeconds_ReturnValue) == 0x000004, "Member 'UI_PuzzleCube_C_ShowWinMsg::CallFunc_GetTotalSeconds_ReturnValue' has a wrong offset!");
static_assert(offsetof(UI_PuzzleCube_C_ShowWinMsg, CallFunc_FTrunc_ReturnValue) == 0x000008, "Member 'UI_PuzzleCube_C_ShowWinMsg::CallFunc_FTrunc_ReturnValue' has a wrong offset!");
static_assert(offsetof(UI_PuzzleCube_C_ShowWinMsg, CallFunc_Send_Cube_Solved_Event_ReturnValue) == 0x00000C, "Member 'UI_PuzzleCube_C_ShowWinMsg::CallFunc_Send_Cube_Solved_Event_ReturnValue' has a wrong offset!");
static_assert(offsetof(UI_PuzzleCube_C_ShowWinMsg, Temp_bool_Variable) == 0x00000D, "Member 'UI_PuzzleCube_C_ShowWinMsg::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(UI_PuzzleCube_C_ShowWinMsg, Temp_byte_Variable) == 0x00000E, "Member 'UI_PuzzleCube_C_ShowWinMsg::Temp_byte_Variable' has a wrong offset!");
static_assert(offsetof(UI_PuzzleCube_C_ShowWinMsg, Temp_byte_Variable_1) == 0x00000F, "Member 'UI_PuzzleCube_C_ShowWinMsg::Temp_byte_Variable_1' has a wrong offset!");
static_assert(offsetof(UI_PuzzleCube_C_ShowWinMsg, CallFunc_Increase_Achievement_Progress_Result_Code) == 0x000010, "Member 'UI_PuzzleCube_C_ShowWinMsg::CallFunc_Increase_Achievement_Progress_Result_Code' has a wrong offset!");
static_assert(offsetof(UI_PuzzleCube_C_ShowWinMsg, K2Node_Select_Default) == 0x000014, "Member 'UI_PuzzleCube_C_ShowWinMsg::K2Node_Select_Default' has a wrong offset!");

// Function UI_PuzzleCube.UI_PuzzleCube_C.SetCameraBlur
// 0x0018 (0x0018 - 0x0000)
struct UI_PuzzleCube_C_SetCameraBlur final
{
public:
	class APawn*                                  CallFunc_GetOwningPlayerPawn_ReturnValue;          // 0x0000(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AHumanPlayerCharacter*                  K2Node_DynamicCast_AsHuman_Player_Character;       // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(UI_PuzzleCube_C_SetCameraBlur) == 0x000008, "Wrong alignment on UI_PuzzleCube_C_SetCameraBlur");
static_assert(sizeof(UI_PuzzleCube_C_SetCameraBlur) == 0x000018, "Wrong size on UI_PuzzleCube_C_SetCameraBlur");
static_assert(offsetof(UI_PuzzleCube_C_SetCameraBlur, CallFunc_GetOwningPlayerPawn_ReturnValue) == 0x000000, "Member 'UI_PuzzleCube_C_SetCameraBlur::CallFunc_GetOwningPlayerPawn_ReturnValue' has a wrong offset!");
static_assert(offsetof(UI_PuzzleCube_C_SetCameraBlur, K2Node_DynamicCast_AsHuman_Player_Character) == 0x000008, "Member 'UI_PuzzleCube_C_SetCameraBlur::K2Node_DynamicCast_AsHuman_Player_Character' has a wrong offset!");
static_assert(offsetof(UI_PuzzleCube_C_SetCameraBlur, K2Node_DynamicCast_bSuccess) == 0x000010, "Member 'UI_PuzzleCube_C_SetCameraBlur::K2Node_DynamicCast_bSuccess' has a wrong offset!");

// Function UI_PuzzleCube.UI_PuzzleCube_C.FindFocus
// 0x0068 (0x0068 - 0x0000)
struct UI_PuzzleCube_C_FindFocus final
{
public:
	E_PuzzleCube_SelectedSide                     FocusedSide;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	E_PuzzleCube_SelectedSide                     Temp_byte_Variable;                                // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0002(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_3[0x1];                                        // 0x0003(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_GetForwardVector_ReturnValue;             // 0x0004(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_GetRightVector_ReturnValue;               // 0x0010(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_NegateVector_ReturnValue;                 // 0x001C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_NegateVector_ReturnValue_1;               // 0x0028(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_GetUpVector_ReturnValue;                  // 0x0034(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_NegateVector_ReturnValue_2;               // 0x0040(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                K2Node_Select_Default;                             // 0x004C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	E_PuzzleCube_SelectedSide                     CallFunc_FindClosestFaceToVector_Side1;            // 0x0058(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_59[0x3];                                       // 0x0059(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_FindClosestFaceToVector_NearestVector;    // 0x005C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(UI_PuzzleCube_C_FindFocus) == 0x000004, "Wrong alignment on UI_PuzzleCube_C_FindFocus");
static_assert(sizeof(UI_PuzzleCube_C_FindFocus) == 0x000068, "Wrong size on UI_PuzzleCube_C_FindFocus");
static_assert(offsetof(UI_PuzzleCube_C_FindFocus, FocusedSide) == 0x000000, "Member 'UI_PuzzleCube_C_FindFocus::FocusedSide' has a wrong offset!");
static_assert(offsetof(UI_PuzzleCube_C_FindFocus, Temp_byte_Variable) == 0x000001, "Member 'UI_PuzzleCube_C_FindFocus::Temp_byte_Variable' has a wrong offset!");
static_assert(offsetof(UI_PuzzleCube_C_FindFocus, CallFunc_IsValid_ReturnValue) == 0x000002, "Member 'UI_PuzzleCube_C_FindFocus::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(UI_PuzzleCube_C_FindFocus, CallFunc_GetForwardVector_ReturnValue) == 0x000004, "Member 'UI_PuzzleCube_C_FindFocus::CallFunc_GetForwardVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(UI_PuzzleCube_C_FindFocus, CallFunc_GetRightVector_ReturnValue) == 0x000010, "Member 'UI_PuzzleCube_C_FindFocus::CallFunc_GetRightVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(UI_PuzzleCube_C_FindFocus, CallFunc_NegateVector_ReturnValue) == 0x00001C, "Member 'UI_PuzzleCube_C_FindFocus::CallFunc_NegateVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(UI_PuzzleCube_C_FindFocus, CallFunc_NegateVector_ReturnValue_1) == 0x000028, "Member 'UI_PuzzleCube_C_FindFocus::CallFunc_NegateVector_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(UI_PuzzleCube_C_FindFocus, CallFunc_GetUpVector_ReturnValue) == 0x000034, "Member 'UI_PuzzleCube_C_FindFocus::CallFunc_GetUpVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(UI_PuzzleCube_C_FindFocus, CallFunc_NegateVector_ReturnValue_2) == 0x000040, "Member 'UI_PuzzleCube_C_FindFocus::CallFunc_NegateVector_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(UI_PuzzleCube_C_FindFocus, K2Node_Select_Default) == 0x00004C, "Member 'UI_PuzzleCube_C_FindFocus::K2Node_Select_Default' has a wrong offset!");
static_assert(offsetof(UI_PuzzleCube_C_FindFocus, CallFunc_FindClosestFaceToVector_Side1) == 0x000058, "Member 'UI_PuzzleCube_C_FindFocus::CallFunc_FindClosestFaceToVector_Side1' has a wrong offset!");
static_assert(offsetof(UI_PuzzleCube_C_FindFocus, CallFunc_FindClosestFaceToVector_NearestVector) == 0x00005C, "Member 'UI_PuzzleCube_C_FindFocus::CallFunc_FindClosestFaceToVector_NearestVector' has a wrong offset!");

}

