#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BPI_HumanAnimInstance

#include "Basic.hpp"

#include "BPI_HumanAnimInstance_classes.hpp"
#include "BPI_HumanAnimInstance_parameters.hpp"


namespace SDK
{

// Function BPI_HumanAnimInstance.BPI_HumanAnimInstance_C.CassettesInspectStarted
// (Public, BlueprintCallable, BlueprintEvent)

void IBPI_HumanAnimInstance_C::CassettesInspectStarted()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPI_HumanAnimInstance_C", "CassettesInspectStarted");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BPI_HumanAnimInstance.BPI_HumanAnimInstance_C.CassettesRotationChanged
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// float                                   Angle                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void IBPI_HumanAnimInstance_C::CassettesRotationChanged(float Angle)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPI_HumanAnimInstance_C", "CassettesRotationChanged");

	Params::BPI_HumanAnimInstance_C_CassettesRotationChanged Parms{};

	Parms.Angle = Angle;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BPI_HumanAnimInstance.BPI_HumanAnimInstance_C.CassettesInspectStopped
// (Public, BlueprintCallable, BlueprintEvent)

void IBPI_HumanAnimInstance_C::CassettesInspectStopped()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPI_HumanAnimInstance_C", "CassettesInspectStopped");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BPI_HumanAnimInstance.BPI_HumanAnimInstance_C.SetJiggleTypes
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    bShouldSimJiggle                                       (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// struct FS_JiggleSettings                Uniform                                                (BlueprintVisible, BlueprintReadOnly, Parm, HasGetValueTypeHash)
// struct FS_JiggleSettings                Backpack                                               (BlueprintVisible, BlueprintReadOnly, Parm, HasGetValueTypeHash)
// struct FS_JiggleSettings                BottomHeadwear                                         (BlueprintVisible, BlueprintReadOnly, Parm, HasGetValueTypeHash)
// bool                                    bSuccess                                               (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void IBPI_HumanAnimInstance_C::SetJiggleTypes(bool bShouldSimJiggle, const struct FS_JiggleSettings& Uniform, const struct FS_JiggleSettings& Backpack, const struct FS_JiggleSettings& BottomHeadwear, bool* bSuccess)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPI_HumanAnimInstance_C", "SetJiggleTypes");

	Params::BPI_HumanAnimInstance_C_SetJiggleTypes Parms{};

	Parms.bShouldSimJiggle = bShouldSimJiggle;
	Parms.Uniform = std::move(Uniform);
	Parms.Backpack = std::move(Backpack);
	Parms.BottomHeadwear = std::move(BottomHeadwear);

	UObject::ProcessEvent(Func, &Parms);

	if (bSuccess != nullptr)
		*bSuccess = Parms.bSuccess;
}


// Function BPI_HumanAnimInstance.BPI_HumanAnimInstance_C.SetPrimaryHolsterLock
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    ShouldLock                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// bool                                    bRightSide_                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// bool                                    Success                                                (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void IBPI_HumanAnimInstance_C::SetPrimaryHolsterLock(bool ShouldLock, bool bRightSide_, bool* Success)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPI_HumanAnimInstance_C", "SetPrimaryHolsterLock");

	Params::BPI_HumanAnimInstance_C_SetPrimaryHolsterLock Parms{};

	Parms.ShouldLock = ShouldLock;
	Parms.bRightSide_ = bRightSide_;

	UObject::ProcessEvent(Func, &Parms);

	if (Success != nullptr)
		*Success = Parms.Success;
}


// Function BPI_HumanAnimInstance.BPI_HumanAnimInstance_C.SetDisableLeftHandIK
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    ShouldDisable                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// bool                                    Success                                                (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void IBPI_HumanAnimInstance_C::SetDisableLeftHandIK(bool ShouldDisable, bool* Success)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPI_HumanAnimInstance_C", "SetDisableLeftHandIK");

	Params::BPI_HumanAnimInstance_C_SetDisableLeftHandIK Parms{};

	Parms.ShouldDisable = ShouldDisable;

	UObject::ProcessEvent(Func, &Parms);

	if (Success != nullptr)
		*Success = Parms.Success;
}


// Function BPI_HumanAnimInstance.BPI_HumanAnimInstance_C.SetDisabledAiming
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    bDisabled                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// bool                                    Success                                                (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void IBPI_HumanAnimInstance_C::SetDisabledAiming(bool bDisabled, bool* Success)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPI_HumanAnimInstance_C", "SetDisabledAiming");

	Params::BPI_HumanAnimInstance_C_SetDisabledAiming Parms{};

	Parms.bDisabled = bDisabled;

	UObject::ProcessEvent(Func, &Parms);

	if (Success != nullptr)
		*Success = Parms.Success;
}


// Function BPI_HumanAnimInstance.BPI_HumanAnimInstance_C.SetActiveHardStanceTransition
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    bActive                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// bool                                    Success                                                (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void IBPI_HumanAnimInstance_C::SetActiveHardStanceTransition(bool bActive, bool* Success)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPI_HumanAnimInstance_C", "SetActiveHardStanceTransition");

	Params::BPI_HumanAnimInstance_C_SetActiveHardStanceTransition Parms{};

	Parms.bActive = bActive;

	UObject::ProcessEvent(Func, &Parms);

	if (Success != nullptr)
		*Success = Parms.Success;
}


// Function BPI_HumanAnimInstance.BPI_HumanAnimInstance_C.BPI_ResetNotifyKeys
// (Public, BlueprintCallable, BlueprintEvent)

void IBPI_HumanAnimInstance_C::BPI_ResetNotifyKeys()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPI_HumanAnimInstance_C", "BPI_ResetNotifyKeys");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BPI_HumanAnimInstance.BPI_HumanAnimInstance_C.SetShelterPreviewIdleAnim
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class UAnimSequenceBase*                Anim                                                   (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void IBPI_HumanAnimInstance_C::SetShelterPreviewIdleAnim(class UAnimSequenceBase* Anim)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPI_HumanAnimInstance_C", "SetShelterPreviewIdleAnim");

	Params::BPI_HumanAnimInstance_C_SetShelterPreviewIdleAnim Parms{};

	Parms.Anim = Anim;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BPI_HumanAnimInstance.BPI_HumanAnimInstance_C.CheckForJiggle
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// class USkeletalMeshComponent*           UniformMesh                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class USkeletalMeshComponent*           BackpackMesh                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class USkeletalMeshComponent*           BottomHeadwear                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    Processed                                              (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void IBPI_HumanAnimInstance_C::CheckForJiggle(class USkeletalMeshComponent* UniformMesh, class USkeletalMeshComponent* BackpackMesh, class USkeletalMeshComponent* BottomHeadwear, bool* Processed)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPI_HumanAnimInstance_C", "CheckForJiggle");

	Params::BPI_HumanAnimInstance_C_CheckForJiggle Parms{};

	Parms.UniformMesh = UniformMesh;
	Parms.BackpackMesh = BackpackMesh;
	Parms.BottomHeadwear = BottomHeadwear;

	UObject::ProcessEvent(Func, &Parms);

	if (Processed != nullptr)
		*Processed = Parms.Processed;
}

}

