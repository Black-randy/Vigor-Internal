#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: UI_WinnerScreen_Base

#include "Basic.hpp"

#include "Struct_ScoreboardTab_structs.hpp"
#include "FlameUI_structs.hpp"


namespace SDK::Params
{

// Function UI_WinnerScreen_Base.UI_WinnerScreen_Base_C.ExecuteUbergraph_UI_WinnerScreen_Base
// 0x0098 (0x0098 - 0x0000)
struct UI_WinnerScreen_Base_C_ExecuteUbergraph_UI_WinnerScreen_Base final
{
public:
	int32                                         EntryPoint;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         K2Node_CustomEvent_AwardedXP;                      // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TMap<class UClass*, int32>                    K2Node_CustomEvent_AwardedItems;                   // 0x0008(0x0050)()
	bool                                          K2Node_CustomEvent_IsLocalPlayerWinning;           // 0x0058(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_59[0x7];                                       // 0x0059(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FStruct_ScoreboardTab>          K2Node_CustomEvent_ScoreboardTabs;                 // 0x0060(0x0010)(ConstParm, ReferenceParm)
	float                                         K2Node_CustomEvent_FadeDelay;                      // 0x0070(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         K2Node_CustomEvent_Time;                           // 0x0074(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FString                                 K2Node_CustomEvent_PlayerName;                     // 0x0078(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	EFlamePlatform                                K2Node_CustomEvent_PlayerPlatform;                 // 0x0088(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_89[0x7];                                       // 0x0089(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AHumanPlayerState*                      K2Node_CustomEvent_PlayerState;                    // 0x0090(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(UI_WinnerScreen_Base_C_ExecuteUbergraph_UI_WinnerScreen_Base) == 0x000008, "Wrong alignment on UI_WinnerScreen_Base_C_ExecuteUbergraph_UI_WinnerScreen_Base");
static_assert(sizeof(UI_WinnerScreen_Base_C_ExecuteUbergraph_UI_WinnerScreen_Base) == 0x000098, "Wrong size on UI_WinnerScreen_Base_C_ExecuteUbergraph_UI_WinnerScreen_Base");
static_assert(offsetof(UI_WinnerScreen_Base_C_ExecuteUbergraph_UI_WinnerScreen_Base, EntryPoint) == 0x000000, "Member 'UI_WinnerScreen_Base_C_ExecuteUbergraph_UI_WinnerScreen_Base::EntryPoint' has a wrong offset!");
static_assert(offsetof(UI_WinnerScreen_Base_C_ExecuteUbergraph_UI_WinnerScreen_Base, K2Node_CustomEvent_AwardedXP) == 0x000004, "Member 'UI_WinnerScreen_Base_C_ExecuteUbergraph_UI_WinnerScreen_Base::K2Node_CustomEvent_AwardedXP' has a wrong offset!");
static_assert(offsetof(UI_WinnerScreen_Base_C_ExecuteUbergraph_UI_WinnerScreen_Base, K2Node_CustomEvent_AwardedItems) == 0x000008, "Member 'UI_WinnerScreen_Base_C_ExecuteUbergraph_UI_WinnerScreen_Base::K2Node_CustomEvent_AwardedItems' has a wrong offset!");
static_assert(offsetof(UI_WinnerScreen_Base_C_ExecuteUbergraph_UI_WinnerScreen_Base, K2Node_CustomEvent_IsLocalPlayerWinning) == 0x000058, "Member 'UI_WinnerScreen_Base_C_ExecuteUbergraph_UI_WinnerScreen_Base::K2Node_CustomEvent_IsLocalPlayerWinning' has a wrong offset!");
static_assert(offsetof(UI_WinnerScreen_Base_C_ExecuteUbergraph_UI_WinnerScreen_Base, K2Node_CustomEvent_ScoreboardTabs) == 0x000060, "Member 'UI_WinnerScreen_Base_C_ExecuteUbergraph_UI_WinnerScreen_Base::K2Node_CustomEvent_ScoreboardTabs' has a wrong offset!");
static_assert(offsetof(UI_WinnerScreen_Base_C_ExecuteUbergraph_UI_WinnerScreen_Base, K2Node_CustomEvent_FadeDelay) == 0x000070, "Member 'UI_WinnerScreen_Base_C_ExecuteUbergraph_UI_WinnerScreen_Base::K2Node_CustomEvent_FadeDelay' has a wrong offset!");
static_assert(offsetof(UI_WinnerScreen_Base_C_ExecuteUbergraph_UI_WinnerScreen_Base, K2Node_CustomEvent_Time) == 0x000074, "Member 'UI_WinnerScreen_Base_C_ExecuteUbergraph_UI_WinnerScreen_Base::K2Node_CustomEvent_Time' has a wrong offset!");
static_assert(offsetof(UI_WinnerScreen_Base_C_ExecuteUbergraph_UI_WinnerScreen_Base, K2Node_CustomEvent_PlayerName) == 0x000078, "Member 'UI_WinnerScreen_Base_C_ExecuteUbergraph_UI_WinnerScreen_Base::K2Node_CustomEvent_PlayerName' has a wrong offset!");
static_assert(offsetof(UI_WinnerScreen_Base_C_ExecuteUbergraph_UI_WinnerScreen_Base, K2Node_CustomEvent_PlayerPlatform) == 0x000088, "Member 'UI_WinnerScreen_Base_C_ExecuteUbergraph_UI_WinnerScreen_Base::K2Node_CustomEvent_PlayerPlatform' has a wrong offset!");
static_assert(offsetof(UI_WinnerScreen_Base_C_ExecuteUbergraph_UI_WinnerScreen_Base, K2Node_CustomEvent_PlayerState) == 0x000090, "Member 'UI_WinnerScreen_Base_C_ExecuteUbergraph_UI_WinnerScreen_Base::K2Node_CustomEvent_PlayerState' has a wrong offset!");

// Function UI_WinnerScreen_Base.UI_WinnerScreen_Base_C.ShowRewardPopUp
// 0x0058 (0x0058 - 0x0000)
struct UI_WinnerScreen_Base_C_ShowRewardPopUp final
{
public:
	int32                                         AwardedXP;                                         // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TMap<class UClass*, int32>                    AwardedItems;                                      // 0x0008(0x0050)(BlueprintVisible, BlueprintReadOnly, Parm)
};
static_assert(alignof(UI_WinnerScreen_Base_C_ShowRewardPopUp) == 0x000008, "Wrong alignment on UI_WinnerScreen_Base_C_ShowRewardPopUp");
static_assert(sizeof(UI_WinnerScreen_Base_C_ShowRewardPopUp) == 0x000058, "Wrong size on UI_WinnerScreen_Base_C_ShowRewardPopUp");
static_assert(offsetof(UI_WinnerScreen_Base_C_ShowRewardPopUp, AwardedXP) == 0x000000, "Member 'UI_WinnerScreen_Base_C_ShowRewardPopUp::AwardedXP' has a wrong offset!");
static_assert(offsetof(UI_WinnerScreen_Base_C_ShowRewardPopUp, AwardedItems) == 0x000008, "Member 'UI_WinnerScreen_Base_C_ShowRewardPopUp::AwardedItems' has a wrong offset!");

// Function UI_WinnerScreen_Base.UI_WinnerScreen_Base_C.Set Highlighted Player Name
// 0x0020 (0x0020 - 0x0000)
struct UI_WinnerScreen_Base_C_Set_Highlighted_Player_Name final
{
public:
	class FString                                 PlayerName;                                        // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)
	EFlamePlatform                                PlayerPlatform;                                    // 0x0010(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AHumanPlayerState*                      PlayerState;                                       // 0x0018(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(UI_WinnerScreen_Base_C_Set_Highlighted_Player_Name) == 0x000008, "Wrong alignment on UI_WinnerScreen_Base_C_Set_Highlighted_Player_Name");
static_assert(sizeof(UI_WinnerScreen_Base_C_Set_Highlighted_Player_Name) == 0x000020, "Wrong size on UI_WinnerScreen_Base_C_Set_Highlighted_Player_Name");
static_assert(offsetof(UI_WinnerScreen_Base_C_Set_Highlighted_Player_Name, PlayerName) == 0x000000, "Member 'UI_WinnerScreen_Base_C_Set_Highlighted_Player_Name::PlayerName' has a wrong offset!");
static_assert(offsetof(UI_WinnerScreen_Base_C_Set_Highlighted_Player_Name, PlayerPlatform) == 0x000010, "Member 'UI_WinnerScreen_Base_C_Set_Highlighted_Player_Name::PlayerPlatform' has a wrong offset!");
static_assert(offsetof(UI_WinnerScreen_Base_C_Set_Highlighted_Player_Name, PlayerState) == 0x000018, "Member 'UI_WinnerScreen_Base_C_Set_Highlighted_Player_Name::PlayerState' has a wrong offset!");

// Function UI_WinnerScreen_Base.UI_WinnerScreen_Base_C.Set Leave Time
// 0x0004 (0x0004 - 0x0000)
struct UI_WinnerScreen_Base_C_Set_Leave_Time final
{
public:
	int32                                         Time;                                              // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(UI_WinnerScreen_Base_C_Set_Leave_Time) == 0x000004, "Wrong alignment on UI_WinnerScreen_Base_C_Set_Leave_Time");
static_assert(sizeof(UI_WinnerScreen_Base_C_Set_Leave_Time) == 0x000004, "Wrong size on UI_WinnerScreen_Base_C_Set_Leave_Time");
static_assert(offsetof(UI_WinnerScreen_Base_C_Set_Leave_Time, Time) == 0x000000, "Member 'UI_WinnerScreen_Base_C_Set_Leave_Time::Time' has a wrong offset!");

// Function UI_WinnerScreen_Base.UI_WinnerScreen_Base_C.Show Scoreboard
// 0x0020 (0x0020 - 0x0000)
struct UI_WinnerScreen_Base_C_Show_Scoreboard final
{
public:
	bool                                          IsLocalPlayerWinning;                              // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FStruct_ScoreboardTab>          ScoreboardTabs;                                    // 0x0008(0x0010)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
	float                                         FadeDelay;                                         // 0x0018(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(UI_WinnerScreen_Base_C_Show_Scoreboard) == 0x000008, "Wrong alignment on UI_WinnerScreen_Base_C_Show_Scoreboard");
static_assert(sizeof(UI_WinnerScreen_Base_C_Show_Scoreboard) == 0x000020, "Wrong size on UI_WinnerScreen_Base_C_Show_Scoreboard");
static_assert(offsetof(UI_WinnerScreen_Base_C_Show_Scoreboard, IsLocalPlayerWinning) == 0x000000, "Member 'UI_WinnerScreen_Base_C_Show_Scoreboard::IsLocalPlayerWinning' has a wrong offset!");
static_assert(offsetof(UI_WinnerScreen_Base_C_Show_Scoreboard, ScoreboardTabs) == 0x000008, "Member 'UI_WinnerScreen_Base_C_Show_Scoreboard::ScoreboardTabs' has a wrong offset!");
static_assert(offsetof(UI_WinnerScreen_Base_C_Show_Scoreboard, FadeDelay) == 0x000018, "Member 'UI_WinnerScreen_Base_C_Show_Scoreboard::FadeDelay' has a wrong offset!");

}

