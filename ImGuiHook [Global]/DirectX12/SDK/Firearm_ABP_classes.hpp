#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: Firearm_ABP

#include "Basic.hpp"

#include "Flame_structs.hpp"
#include "Engine_structs.hpp"
#include "Engine_classes.hpp"
#include "AnimGraphRuntime_structs.hpp"


namespace SDK
{

// AnimBlueprintGeneratedClass Firearm_ABP.Firearm_ABP_C
// 0x1410 (0x16D0 - 0x02C0)
#pragma pack(push, 0x1)
class alignas(0x10) UFirearm_ABP_C : public UAnimInstance
{
public:
	uint8                                         Pad_2B8[0x8];                                      // 0x02B8(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x02C0(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	struct FAnimNode_Root                         AnimGraphNode_Root;                                // 0x02C8(0x0030)()
	struct FFluidAnimPlayer                       FluidAnimPlayerGraphNode_2;                        // 0x02F8(0x0168)()
	struct FAnimNode_BlendListByBool              AnimGraphNode_BlendListByBool_6;                   // 0x0460(0x00A0)()
	struct FAnimNode_BlendListByBool              AnimGraphNode_BlendListByBool_5;                   // 0x0500(0x00A0)()
	struct FAnimNode_SaveCachedPose               AnimGraphNode_SaveCachedPose_2;                    // 0x05A0(0x0158)()
	struct FAnimNode_UseCachedPose                AnimGraphNode_UseCachedPose_8;                     // 0x06F8(0x0028)()
	struct FFluidAnimPlayer                       FluidAnimPlayerGraphNode_1;                        // 0x0720(0x0168)()
	struct FAnimNode_ApplyAdditive                AnimGraphNode_ApplyAdditive_1;                     // 0x0888(0x00C8)()
	struct FAnimNode_UseCachedPose                AnimGraphNode_UseCachedPose_7;                     // 0x0950(0x0028)()
	struct FAnimNode_BlendListByBool              AnimGraphNode_BlendListByBool_4;                   // 0x0978(0x00A0)()
	struct FAnimNode_UseCachedPose                AnimGraphNode_UseCachedPose_6;                     // 0x0A18(0x0028)()
	struct FAnimNode_ConvertLocalToComponentSpace AnimGraphNode_LocalToComponentSpace;               // 0x0A40(0x0020)()
	struct FAnimNode_ModifyBone                   AnimGraphNode_ModifyBone;                          // 0x0A60(0x0108)()
	struct FAnimNode_ConvertComponentToLocalSpace AnimGraphNode_ComponentToLocalSpace;               // 0x0B68(0x0020)()
	struct FAnimNode_BlendListByBool              AnimGraphNode_BlendListByBool_3;                   // 0x0B88(0x00A0)()
	struct FAnimNode_UseCachedPose                AnimGraphNode_UseCachedPose_5;                     // 0x0C28(0x0028)()
	struct FAnimNode_BlendListByBool              AnimGraphNode_BlendListByBool_2;                   // 0x0C50(0x00A0)()
	struct FAnimNode_SaveCachedPose               AnimGraphNode_SaveCachedPose_1;                    // 0x0CF0(0x0158)()
	struct FAnimNode_Slot                         AnimGraphNode_Slot_3;                              // 0x0E48(0x0048)()
	struct FAnimNode_BlendListByEnum              AnimGraphNode_BlendListByEnum;                     // 0x0E90(0x00B0)()
	struct FAnimNode_Slot                         AnimGraphNode_Slot_2;                              // 0x0F40(0x0048)()
	struct FAnimNode_Slot                         AnimGraphNode_Slot_1;                              // 0x0F88(0x0048)()
	struct FAnimNode_Slot                         AnimGraphNode_Slot;                                // 0x0FD0(0x0048)()
	struct FAnimNode_BlendListByBool              AnimGraphNode_BlendListByBool_1;                   // 0x1018(0x00A0)()
	struct FAnimNode_UseCachedPose                AnimGraphNode_UseCachedPose_4;                     // 0x10B8(0x0028)()
	struct FFluidAnimPlayer                       FluidAnimPlayerGraphNode;                          // 0x10E0(0x0168)()
	struct FAnimNode_UseCachedPose                AnimGraphNode_UseCachedPose_3;                     // 0x1248(0x0028)()
	struct FAnimNode_ApplyAdditive                AnimGraphNode_ApplyAdditive;                       // 0x1270(0x00C8)()
	struct FAnimNode_SaveCachedPose               AnimGraphNode_SaveCachedPose;                      // 0x1338(0x0158)()
	struct FAnimNode_UseCachedPose                AnimGraphNode_UseCachedPose_2;                     // 0x1490(0x0028)()
	struct FAnimNode_UseCachedPose                AnimGraphNode_UseCachedPose_1;                     // 0x14B8(0x0028)()
	struct FAnimNode_BlendListByBool              AnimGraphNode_BlendListByBool;                     // 0x14E0(0x00A0)()
	struct FAnimNode_UseCachedPose                AnimGraphNode_UseCachedPose;                       // 0x1580(0x0028)()
	EStance                                       CurrentCharStance;                                 // 0x15A8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bShouldHideWhenHolstered;                          // 0x15A9(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          bShouldBeCurrentlyHidden;                          // 0x15AA(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_15AB[0x5];                                     // 0x15AB(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	class AHumanCharacter*                        PlayerBP;                                          // 0x15B0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          ShouldUpdateStance;                                // 0x15B8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          IsEmpty_;                                          // 0x15B9(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_15BA[0x6];                                     // 0x15BA(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	TSoftObjectPtr<class UAnimSequenceBase>       EmptyPose_SoftRef;                                 // 0x15C0(0x0028)(Edit, BlueprintVisible, DisableEditOnInstance, HasGetValueTypeHash)
	class UAnimSequenceBase*                      EmptyPose_HR;                                      // 0x15E8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          ShouldUseEmptyPose_;                               // 0x15F0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          ShouldTryToModifyBipod;                            // 0x15F1(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          bIsCurrentlyEquipped;                              // 0x15F2(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          ShouldTryToUseEmptyPose_;                          // 0x15F3(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_15F4[0x4];                                     // 0x15F4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TSoftObjectPtr<class UAnimSequenceBase>       HideBipodPose_SoftRef;                             // 0x15F8(0x0028)(Edit, BlueprintVisible, DisableEditOnInstance, HasGetValueTypeHash)
	class UAnimSequenceBase*                      HideBipodPose_HR;                                  // 0x1620(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bShouldFoldBipod;                                  // 0x1628(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_1629[0x7];                                     // 0x1629(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TSoftObjectPtr<class UAnimSequenceBase>       FoldStockPose_SoftRef;                             // 0x1630(0x0028)(Edit, BlueprintVisible, DisableEditOnInstance, HasGetValueTypeHash)
	class UAnimSequenceBase*                      FoldStockPose_HR;                                  // 0x1658(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bShouldFoldButtstock;                              // 0x1660(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          bShouldTryToModifyButtstock;                       // 0x1661(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          IsServer;                                          // 0x1662(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          NetworkRoleEstablished;                            // 0x1663(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_1664[0x4];                                     // 0x1664(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class AWeapon*                                WeaponBP;                                          // 0x1668(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TMap<EWeaponFireType, TSoftObjectPtr<class UAnimSequence>> FireMode_To_CustomAnimation;                       // 0x1670(0x0050)(Edit, BlueprintVisible, DisableEditOnInstance)
	EWeaponFireType                               LastFireModeType;                                  // 0x16C0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

public:
	void ExecuteUbergraph_Firearm_ABP(int32 EntryPoint);
	void BlueprintBeginPlay();
	void PlayerInvalidState();
	void UpdateIsMagazineEmpty(bool bIsEmpty);
	void InitializeVariables();
	void RefreshPlayerBipod();
	void CheckIfWeShouldHideTheBipod();
	void ReceiveFireShot(int32 RemainingAmmo);
	void BlueprintUpdateAnimation(float DeltaTimeX);
	void CheckIfStanceChanged();
	void RefreshPlayer();
	void RefreshStance();
	void CheckIfPlayerRefIsCorrect();
	void SetStance();
	void InitializeReferences();
	void BlueprintInitializeAnimation();
	void OnLoaded_303A9E7341428F48F05BE78A97496F05(class UObject* Loaded);
	void OnLoaded_303A9E7341428F48F05BE78AD37B979C(class UObject* Loaded);
	void OnLoaded_303A9E7341428F48F05BE78A1F67D92A(class UObject* Loaded);
	void RotateDrum();
	void SetBasicControlVariables();
	void UpdateWeaponControllVariables(bool bShouldFoldBipod_0, bool bIsCurrentlyEquipped_0);
	void UpdateCharStance(EStance NewStance);
	void SetIsEmpty(bool IsEmpty__0);
	void AnimGraph(struct FPoseLink* AnimGraph_0);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"Firearm_ABP_C">();
	}
	static class UFirearm_ABP_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UFirearm_ABP_C>();
	}
};
#pragma pack(pop)
static_assert(alignof(UFirearm_ABP_C) == 0x000010, "Wrong alignment on UFirearm_ABP_C");
static_assert(sizeof(UFirearm_ABP_C) == 0x0016D0, "Wrong size on UFirearm_ABP_C");
static_assert(offsetof(UFirearm_ABP_C, UberGraphFrame) == 0x0002C0, "Member 'UFirearm_ABP_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(UFirearm_ABP_C, AnimGraphNode_Root) == 0x0002C8, "Member 'UFirearm_ABP_C::AnimGraphNode_Root' has a wrong offset!");
static_assert(offsetof(UFirearm_ABP_C, FluidAnimPlayerGraphNode_2) == 0x0002F8, "Member 'UFirearm_ABP_C::FluidAnimPlayerGraphNode_2' has a wrong offset!");
static_assert(offsetof(UFirearm_ABP_C, AnimGraphNode_BlendListByBool_6) == 0x000460, "Member 'UFirearm_ABP_C::AnimGraphNode_BlendListByBool_6' has a wrong offset!");
static_assert(offsetof(UFirearm_ABP_C, AnimGraphNode_BlendListByBool_5) == 0x000500, "Member 'UFirearm_ABP_C::AnimGraphNode_BlendListByBool_5' has a wrong offset!");
static_assert(offsetof(UFirearm_ABP_C, AnimGraphNode_SaveCachedPose_2) == 0x0005A0, "Member 'UFirearm_ABP_C::AnimGraphNode_SaveCachedPose_2' has a wrong offset!");
static_assert(offsetof(UFirearm_ABP_C, AnimGraphNode_UseCachedPose_8) == 0x0006F8, "Member 'UFirearm_ABP_C::AnimGraphNode_UseCachedPose_8' has a wrong offset!");
static_assert(offsetof(UFirearm_ABP_C, FluidAnimPlayerGraphNode_1) == 0x000720, "Member 'UFirearm_ABP_C::FluidAnimPlayerGraphNode_1' has a wrong offset!");
static_assert(offsetof(UFirearm_ABP_C, AnimGraphNode_ApplyAdditive_1) == 0x000888, "Member 'UFirearm_ABP_C::AnimGraphNode_ApplyAdditive_1' has a wrong offset!");
static_assert(offsetof(UFirearm_ABP_C, AnimGraphNode_UseCachedPose_7) == 0x000950, "Member 'UFirearm_ABP_C::AnimGraphNode_UseCachedPose_7' has a wrong offset!");
static_assert(offsetof(UFirearm_ABP_C, AnimGraphNode_BlendListByBool_4) == 0x000978, "Member 'UFirearm_ABP_C::AnimGraphNode_BlendListByBool_4' has a wrong offset!");
static_assert(offsetof(UFirearm_ABP_C, AnimGraphNode_UseCachedPose_6) == 0x000A18, "Member 'UFirearm_ABP_C::AnimGraphNode_UseCachedPose_6' has a wrong offset!");
static_assert(offsetof(UFirearm_ABP_C, AnimGraphNode_LocalToComponentSpace) == 0x000A40, "Member 'UFirearm_ABP_C::AnimGraphNode_LocalToComponentSpace' has a wrong offset!");
static_assert(offsetof(UFirearm_ABP_C, AnimGraphNode_ModifyBone) == 0x000A60, "Member 'UFirearm_ABP_C::AnimGraphNode_ModifyBone' has a wrong offset!");
static_assert(offsetof(UFirearm_ABP_C, AnimGraphNode_ComponentToLocalSpace) == 0x000B68, "Member 'UFirearm_ABP_C::AnimGraphNode_ComponentToLocalSpace' has a wrong offset!");
static_assert(offsetof(UFirearm_ABP_C, AnimGraphNode_BlendListByBool_3) == 0x000B88, "Member 'UFirearm_ABP_C::AnimGraphNode_BlendListByBool_3' has a wrong offset!");
static_assert(offsetof(UFirearm_ABP_C, AnimGraphNode_UseCachedPose_5) == 0x000C28, "Member 'UFirearm_ABP_C::AnimGraphNode_UseCachedPose_5' has a wrong offset!");
static_assert(offsetof(UFirearm_ABP_C, AnimGraphNode_BlendListByBool_2) == 0x000C50, "Member 'UFirearm_ABP_C::AnimGraphNode_BlendListByBool_2' has a wrong offset!");
static_assert(offsetof(UFirearm_ABP_C, AnimGraphNode_SaveCachedPose_1) == 0x000CF0, "Member 'UFirearm_ABP_C::AnimGraphNode_SaveCachedPose_1' has a wrong offset!");
static_assert(offsetof(UFirearm_ABP_C, AnimGraphNode_Slot_3) == 0x000E48, "Member 'UFirearm_ABP_C::AnimGraphNode_Slot_3' has a wrong offset!");
static_assert(offsetof(UFirearm_ABP_C, AnimGraphNode_BlendListByEnum) == 0x000E90, "Member 'UFirearm_ABP_C::AnimGraphNode_BlendListByEnum' has a wrong offset!");
static_assert(offsetof(UFirearm_ABP_C, AnimGraphNode_Slot_2) == 0x000F40, "Member 'UFirearm_ABP_C::AnimGraphNode_Slot_2' has a wrong offset!");
static_assert(offsetof(UFirearm_ABP_C, AnimGraphNode_Slot_1) == 0x000F88, "Member 'UFirearm_ABP_C::AnimGraphNode_Slot_1' has a wrong offset!");
static_assert(offsetof(UFirearm_ABP_C, AnimGraphNode_Slot) == 0x000FD0, "Member 'UFirearm_ABP_C::AnimGraphNode_Slot' has a wrong offset!");
static_assert(offsetof(UFirearm_ABP_C, AnimGraphNode_BlendListByBool_1) == 0x001018, "Member 'UFirearm_ABP_C::AnimGraphNode_BlendListByBool_1' has a wrong offset!");
static_assert(offsetof(UFirearm_ABP_C, AnimGraphNode_UseCachedPose_4) == 0x0010B8, "Member 'UFirearm_ABP_C::AnimGraphNode_UseCachedPose_4' has a wrong offset!");
static_assert(offsetof(UFirearm_ABP_C, FluidAnimPlayerGraphNode) == 0x0010E0, "Member 'UFirearm_ABP_C::FluidAnimPlayerGraphNode' has a wrong offset!");
static_assert(offsetof(UFirearm_ABP_C, AnimGraphNode_UseCachedPose_3) == 0x001248, "Member 'UFirearm_ABP_C::AnimGraphNode_UseCachedPose_3' has a wrong offset!");
static_assert(offsetof(UFirearm_ABP_C, AnimGraphNode_ApplyAdditive) == 0x001270, "Member 'UFirearm_ABP_C::AnimGraphNode_ApplyAdditive' has a wrong offset!");
static_assert(offsetof(UFirearm_ABP_C, AnimGraphNode_SaveCachedPose) == 0x001338, "Member 'UFirearm_ABP_C::AnimGraphNode_SaveCachedPose' has a wrong offset!");
static_assert(offsetof(UFirearm_ABP_C, AnimGraphNode_UseCachedPose_2) == 0x001490, "Member 'UFirearm_ABP_C::AnimGraphNode_UseCachedPose_2' has a wrong offset!");
static_assert(offsetof(UFirearm_ABP_C, AnimGraphNode_UseCachedPose_1) == 0x0014B8, "Member 'UFirearm_ABP_C::AnimGraphNode_UseCachedPose_1' has a wrong offset!");
static_assert(offsetof(UFirearm_ABP_C, AnimGraphNode_BlendListByBool) == 0x0014E0, "Member 'UFirearm_ABP_C::AnimGraphNode_BlendListByBool' has a wrong offset!");
static_assert(offsetof(UFirearm_ABP_C, AnimGraphNode_UseCachedPose) == 0x001580, "Member 'UFirearm_ABP_C::AnimGraphNode_UseCachedPose' has a wrong offset!");
static_assert(offsetof(UFirearm_ABP_C, CurrentCharStance) == 0x0015A8, "Member 'UFirearm_ABP_C::CurrentCharStance' has a wrong offset!");
static_assert(offsetof(UFirearm_ABP_C, bShouldHideWhenHolstered) == 0x0015A9, "Member 'UFirearm_ABP_C::bShouldHideWhenHolstered' has a wrong offset!");
static_assert(offsetof(UFirearm_ABP_C, bShouldBeCurrentlyHidden) == 0x0015AA, "Member 'UFirearm_ABP_C::bShouldBeCurrentlyHidden' has a wrong offset!");
static_assert(offsetof(UFirearm_ABP_C, PlayerBP) == 0x0015B0, "Member 'UFirearm_ABP_C::PlayerBP' has a wrong offset!");
static_assert(offsetof(UFirearm_ABP_C, ShouldUpdateStance) == 0x0015B8, "Member 'UFirearm_ABP_C::ShouldUpdateStance' has a wrong offset!");
static_assert(offsetof(UFirearm_ABP_C, IsEmpty_) == 0x0015B9, "Member 'UFirearm_ABP_C::IsEmpty_' has a wrong offset!");
static_assert(offsetof(UFirearm_ABP_C, EmptyPose_SoftRef) == 0x0015C0, "Member 'UFirearm_ABP_C::EmptyPose_SoftRef' has a wrong offset!");
static_assert(offsetof(UFirearm_ABP_C, EmptyPose_HR) == 0x0015E8, "Member 'UFirearm_ABP_C::EmptyPose_HR' has a wrong offset!");
static_assert(offsetof(UFirearm_ABP_C, ShouldUseEmptyPose_) == 0x0015F0, "Member 'UFirearm_ABP_C::ShouldUseEmptyPose_' has a wrong offset!");
static_assert(offsetof(UFirearm_ABP_C, ShouldTryToModifyBipod) == 0x0015F1, "Member 'UFirearm_ABP_C::ShouldTryToModifyBipod' has a wrong offset!");
static_assert(offsetof(UFirearm_ABP_C, bIsCurrentlyEquipped) == 0x0015F2, "Member 'UFirearm_ABP_C::bIsCurrentlyEquipped' has a wrong offset!");
static_assert(offsetof(UFirearm_ABP_C, ShouldTryToUseEmptyPose_) == 0x0015F3, "Member 'UFirearm_ABP_C::ShouldTryToUseEmptyPose_' has a wrong offset!");
static_assert(offsetof(UFirearm_ABP_C, HideBipodPose_SoftRef) == 0x0015F8, "Member 'UFirearm_ABP_C::HideBipodPose_SoftRef' has a wrong offset!");
static_assert(offsetof(UFirearm_ABP_C, HideBipodPose_HR) == 0x001620, "Member 'UFirearm_ABP_C::HideBipodPose_HR' has a wrong offset!");
static_assert(offsetof(UFirearm_ABP_C, bShouldFoldBipod) == 0x001628, "Member 'UFirearm_ABP_C::bShouldFoldBipod' has a wrong offset!");
static_assert(offsetof(UFirearm_ABP_C, FoldStockPose_SoftRef) == 0x001630, "Member 'UFirearm_ABP_C::FoldStockPose_SoftRef' has a wrong offset!");
static_assert(offsetof(UFirearm_ABP_C, FoldStockPose_HR) == 0x001658, "Member 'UFirearm_ABP_C::FoldStockPose_HR' has a wrong offset!");
static_assert(offsetof(UFirearm_ABP_C, bShouldFoldButtstock) == 0x001660, "Member 'UFirearm_ABP_C::bShouldFoldButtstock' has a wrong offset!");
static_assert(offsetof(UFirearm_ABP_C, bShouldTryToModifyButtstock) == 0x001661, "Member 'UFirearm_ABP_C::bShouldTryToModifyButtstock' has a wrong offset!");
static_assert(offsetof(UFirearm_ABP_C, IsServer) == 0x001662, "Member 'UFirearm_ABP_C::IsServer' has a wrong offset!");
static_assert(offsetof(UFirearm_ABP_C, NetworkRoleEstablished) == 0x001663, "Member 'UFirearm_ABP_C::NetworkRoleEstablished' has a wrong offset!");
static_assert(offsetof(UFirearm_ABP_C, WeaponBP) == 0x001668, "Member 'UFirearm_ABP_C::WeaponBP' has a wrong offset!");
static_assert(offsetof(UFirearm_ABP_C, FireMode_To_CustomAnimation) == 0x001670, "Member 'UFirearm_ABP_C::FireMode_To_CustomAnimation' has a wrong offset!");
static_assert(offsetof(UFirearm_ABP_C, LastFireModeType) == 0x0016C0, "Member 'UFirearm_ABP_C::LastFireModeType' has a wrong offset!");

}

