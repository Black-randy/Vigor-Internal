#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_Character_TomatoFight

#include "Basic.hpp"

#include "Flame_structs.hpp"
#include "Engine_structs.hpp"
#include "EFightVariant_structs.hpp"
#include "PhysicsCore_structs.hpp"
#include "BP_Character_Teams_classes.hpp"


namespace SDK
{

// BlueprintGeneratedClass BP_Character_TomatoFight.BP_Character_TomatoFight_C
// 0x0080 (0x12C0 - 0x1240)
class ABP_Character_TomatoFight_C final : public ABP_Character_Teams_C
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame_BP_Character_TomatoFight_C;         // 0x1240(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class UStaticMeshComponent*                   Pumpkin_FlareCone;                                 // 0x1248(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USkeletalMeshComponent*                 PumpkinHead;                                       // 0x1250(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	struct FTimerHandle                           EquipFirstWeaponDelegate;                          // 0x1258(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	class ABP_GameMode_TomatoFight_C*             GameMode;                                          // 0x1260(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TMap<EFightVariant, TSoftClassPtr<class UClass>> ThrowableByVariant;                                // 0x1268(0x0050)(Edit, BlueprintVisible, DisableEditOnInstance)
	bool                                          Throwing;                                          // 0x12B8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)

public:
	void ExecuteUbergraph_BP_Character_TomatoFight(int32 EntryPoint);
	void EquipWeapon();
	void ClientEquipFirstWeapon();
	void ReceiveEndPlay(EEndPlayReason EndPlayReason);
	void OnTakeDamage(float DamageAmount, EDamageType DamageType, const class AHumanCharacter* InstigatingActor, TSubclassOf<class AItem> InstigatingItemClass, const struct FHitResultSimplified& HitOptimised, const TArray<TSubclassOf<class AItem>>& AffectedItems);
	void Remove_Marker();
	void Add_Item_To_Backpack(class UClass* Item_Type, int32 Amount);
	void Add_Weapon_To_Loadout(class UClass* Weapon_Type, int32 Ammo_in_Mag_Count, bool Chambered_Ammo);
	void Get_Loadout_From_Server();
	void Die(float DamageAmount, EDamageType DamageType, class AHumanCharacter* InstigatingCharacter, TSubclassOf<class AItem> InstigatingItem, const struct FHitResult& HitResult);
	void ReceiveTick(float DeltaSeconds);
	void ReceiveBeginPlay();
	bool ShouldTakeDamageBP(class AHumanCharacter* InstigatingCharacter, const class AActor* DamageCauser, TSubclassOf<class AItem> ItemClass, EDamageType DamageType);
	void GetFightGameMode(class ABP_GameMode_TomatoFight_C** FightGamemode);
	void GetCountsOfItemsByVariant(class UEquipmentStorageComponent* Equipment_Storage, int32* Sum_of_Items_Found, class UClass** Class_0);
	void GetFightGameState(class ABP_GameState_TomatoFight_C** GameState);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BP_Character_TomatoFight_C">();
	}
	static class ABP_Character_TomatoFight_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<ABP_Character_TomatoFight_C>();
	}
};
static_assert(alignof(ABP_Character_TomatoFight_C) == 0x000010, "Wrong alignment on ABP_Character_TomatoFight_C");
static_assert(sizeof(ABP_Character_TomatoFight_C) == 0x0012C0, "Wrong size on ABP_Character_TomatoFight_C");
static_assert(offsetof(ABP_Character_TomatoFight_C, UberGraphFrame_BP_Character_TomatoFight_C) == 0x001240, "Member 'ABP_Character_TomatoFight_C::UberGraphFrame_BP_Character_TomatoFight_C' has a wrong offset!");
static_assert(offsetof(ABP_Character_TomatoFight_C, Pumpkin_FlareCone) == 0x001248, "Member 'ABP_Character_TomatoFight_C::Pumpkin_FlareCone' has a wrong offset!");
static_assert(offsetof(ABP_Character_TomatoFight_C, PumpkinHead) == 0x001250, "Member 'ABP_Character_TomatoFight_C::PumpkinHead' has a wrong offset!");
static_assert(offsetof(ABP_Character_TomatoFight_C, EquipFirstWeaponDelegate) == 0x001258, "Member 'ABP_Character_TomatoFight_C::EquipFirstWeaponDelegate' has a wrong offset!");
static_assert(offsetof(ABP_Character_TomatoFight_C, GameMode) == 0x001260, "Member 'ABP_Character_TomatoFight_C::GameMode' has a wrong offset!");
static_assert(offsetof(ABP_Character_TomatoFight_C, ThrowableByVariant) == 0x001268, "Member 'ABP_Character_TomatoFight_C::ThrowableByVariant' has a wrong offset!");
static_assert(offsetof(ABP_Character_TomatoFight_C, Throwing) == 0x0012B8, "Member 'ABP_Character_TomatoFight_C::Throwing' has a wrong offset!");

}

