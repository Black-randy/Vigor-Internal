#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_FaceChanger

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "Flame_structs.hpp"
#include "CoreUObject_structs.hpp"


namespace SDK::Params
{

// Function BP_FaceChanger.BP_FaceChanger_C.ExecuteUbergraph_BP_FaceChanger
// 0x0340 (0x0340 - 0x0000)
struct BP_FaceChanger_C_ExecuteUbergraph_BP_FaceChanger final
{
public:
	int32                                         EntryPoint;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                K2Node_CustomEvent_FinalLocation;                  // 0x0004(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               K2Node_CustomEvent_FinalRotation;                  // 0x0010(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                         K2Node_CustomEvent_FinalFOV;                       // 0x001C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FTransform                             K2Node_CustomEvent_FinalPawnTransform;             // 0x0020(0x0030)(IsPlainOldData, NoDestructor)
	struct FVector                                CallFunc_BreakTransform_Location;                  // 0x0050(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               CallFunc_BreakTransform_Rotation;                  // 0x005C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FVector                                CallFunc_BreakTransform_Scale;                     // 0x0068(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               CallFunc_ComposeRotators_ReturnValue;              // 0x0074(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FRotator                               CallFunc_K2_GetComponentRotation_ReturnValue;      // 0x0080(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FVector                                CallFunc_K2_GetComponentLocation_ReturnValue;      // 0x008C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Lerp_ReturnValue;                         // 0x0098(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_CameraMorphPosition_Loc;                  // 0x009C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               CallFunc_CameraMorphPosition_Rot;                  // 0x00A8(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FHitResult                             CallFunc_K2_SetWorldRotation_SweepHitResult;       // 0x00B4(0x008C)(IsPlainOldData, NoDestructor, ContainsInstancedReference)
	struct FHitResult                             CallFunc_K2_SetWorldLocation_SweepHitResult;       // 0x0140(0x008C)(IsPlainOldData, NoDestructor, ContainsInstancedReference)
	uint8                                         Pad_1CC[0x4];                                      // 0x01CC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             CallFunc_K2_GetComponentToWorld_ReturnValue;       // 0x01D0(0x0030)(IsPlainOldData, NoDestructor)
	struct FVector                                CallFunc_GreaterGreater_VectorRotator_ReturnValue; // 0x0200(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_X;                            // 0x020C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_Y;                            // 0x0210(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_Z;                            // 0x0214(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_X_1;                          // 0x0218(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_Y_1;                          // 0x021C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_Z_1;                          // 0x0220(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_GetTimeToStand_TimeToStand;               // 0x0224(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_MakeVector_ReturnValue;                   // 0x0228(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Divide_FloatFloat_ReturnValue;            // 0x0234(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Add_VectorVector_ReturnValue;             // 0x0238(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_244[0xC];                                      // 0x0244(0x000C)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             CallFunc_MakeTransform_ReturnValue;                // 0x0250(0x0030)(IsPlainOldData, NoDestructor)
	struct FTransform                             CallFunc_TLerp_ReturnValue;                        // 0x0280(0x0030)(IsPlainOldData, NoDestructor)
	struct FHitResult                             CallFunc_K2_SetWorldTransform_SweepHitResult;      // 0x02B0(0x008C)(IsPlainOldData, NoDestructor, ContainsInstancedReference)
};
static_assert(alignof(BP_FaceChanger_C_ExecuteUbergraph_BP_FaceChanger) == 0x000010, "Wrong alignment on BP_FaceChanger_C_ExecuteUbergraph_BP_FaceChanger");
static_assert(sizeof(BP_FaceChanger_C_ExecuteUbergraph_BP_FaceChanger) == 0x000340, "Wrong size on BP_FaceChanger_C_ExecuteUbergraph_BP_FaceChanger");
static_assert(offsetof(BP_FaceChanger_C_ExecuteUbergraph_BP_FaceChanger, EntryPoint) == 0x000000, "Member 'BP_FaceChanger_C_ExecuteUbergraph_BP_FaceChanger::EntryPoint' has a wrong offset!");
static_assert(offsetof(BP_FaceChanger_C_ExecuteUbergraph_BP_FaceChanger, K2Node_CustomEvent_FinalLocation) == 0x000004, "Member 'BP_FaceChanger_C_ExecuteUbergraph_BP_FaceChanger::K2Node_CustomEvent_FinalLocation' has a wrong offset!");
static_assert(offsetof(BP_FaceChanger_C_ExecuteUbergraph_BP_FaceChanger, K2Node_CustomEvent_FinalRotation) == 0x000010, "Member 'BP_FaceChanger_C_ExecuteUbergraph_BP_FaceChanger::K2Node_CustomEvent_FinalRotation' has a wrong offset!");
static_assert(offsetof(BP_FaceChanger_C_ExecuteUbergraph_BP_FaceChanger, K2Node_CustomEvent_FinalFOV) == 0x00001C, "Member 'BP_FaceChanger_C_ExecuteUbergraph_BP_FaceChanger::K2Node_CustomEvent_FinalFOV' has a wrong offset!");
static_assert(offsetof(BP_FaceChanger_C_ExecuteUbergraph_BP_FaceChanger, K2Node_CustomEvent_FinalPawnTransform) == 0x000020, "Member 'BP_FaceChanger_C_ExecuteUbergraph_BP_FaceChanger::K2Node_CustomEvent_FinalPawnTransform' has a wrong offset!");
static_assert(offsetof(BP_FaceChanger_C_ExecuteUbergraph_BP_FaceChanger, CallFunc_BreakTransform_Location) == 0x000050, "Member 'BP_FaceChanger_C_ExecuteUbergraph_BP_FaceChanger::CallFunc_BreakTransform_Location' has a wrong offset!");
static_assert(offsetof(BP_FaceChanger_C_ExecuteUbergraph_BP_FaceChanger, CallFunc_BreakTransform_Rotation) == 0x00005C, "Member 'BP_FaceChanger_C_ExecuteUbergraph_BP_FaceChanger::CallFunc_BreakTransform_Rotation' has a wrong offset!");
static_assert(offsetof(BP_FaceChanger_C_ExecuteUbergraph_BP_FaceChanger, CallFunc_BreakTransform_Scale) == 0x000068, "Member 'BP_FaceChanger_C_ExecuteUbergraph_BP_FaceChanger::CallFunc_BreakTransform_Scale' has a wrong offset!");
static_assert(offsetof(BP_FaceChanger_C_ExecuteUbergraph_BP_FaceChanger, CallFunc_ComposeRotators_ReturnValue) == 0x000074, "Member 'BP_FaceChanger_C_ExecuteUbergraph_BP_FaceChanger::CallFunc_ComposeRotators_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_FaceChanger_C_ExecuteUbergraph_BP_FaceChanger, CallFunc_K2_GetComponentRotation_ReturnValue) == 0x000080, "Member 'BP_FaceChanger_C_ExecuteUbergraph_BP_FaceChanger::CallFunc_K2_GetComponentRotation_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_FaceChanger_C_ExecuteUbergraph_BP_FaceChanger, CallFunc_K2_GetComponentLocation_ReturnValue) == 0x00008C, "Member 'BP_FaceChanger_C_ExecuteUbergraph_BP_FaceChanger::CallFunc_K2_GetComponentLocation_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_FaceChanger_C_ExecuteUbergraph_BP_FaceChanger, CallFunc_Lerp_ReturnValue) == 0x000098, "Member 'BP_FaceChanger_C_ExecuteUbergraph_BP_FaceChanger::CallFunc_Lerp_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_FaceChanger_C_ExecuteUbergraph_BP_FaceChanger, CallFunc_CameraMorphPosition_Loc) == 0x00009C, "Member 'BP_FaceChanger_C_ExecuteUbergraph_BP_FaceChanger::CallFunc_CameraMorphPosition_Loc' has a wrong offset!");
static_assert(offsetof(BP_FaceChanger_C_ExecuteUbergraph_BP_FaceChanger, CallFunc_CameraMorphPosition_Rot) == 0x0000A8, "Member 'BP_FaceChanger_C_ExecuteUbergraph_BP_FaceChanger::CallFunc_CameraMorphPosition_Rot' has a wrong offset!");
static_assert(offsetof(BP_FaceChanger_C_ExecuteUbergraph_BP_FaceChanger, CallFunc_K2_SetWorldRotation_SweepHitResult) == 0x0000B4, "Member 'BP_FaceChanger_C_ExecuteUbergraph_BP_FaceChanger::CallFunc_K2_SetWorldRotation_SweepHitResult' has a wrong offset!");
static_assert(offsetof(BP_FaceChanger_C_ExecuteUbergraph_BP_FaceChanger, CallFunc_K2_SetWorldLocation_SweepHitResult) == 0x000140, "Member 'BP_FaceChanger_C_ExecuteUbergraph_BP_FaceChanger::CallFunc_K2_SetWorldLocation_SweepHitResult' has a wrong offset!");
static_assert(offsetof(BP_FaceChanger_C_ExecuteUbergraph_BP_FaceChanger, CallFunc_K2_GetComponentToWorld_ReturnValue) == 0x0001D0, "Member 'BP_FaceChanger_C_ExecuteUbergraph_BP_FaceChanger::CallFunc_K2_GetComponentToWorld_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_FaceChanger_C_ExecuteUbergraph_BP_FaceChanger, CallFunc_GreaterGreater_VectorRotator_ReturnValue) == 0x000200, "Member 'BP_FaceChanger_C_ExecuteUbergraph_BP_FaceChanger::CallFunc_GreaterGreater_VectorRotator_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_FaceChanger_C_ExecuteUbergraph_BP_FaceChanger, CallFunc_BreakVector_X) == 0x00020C, "Member 'BP_FaceChanger_C_ExecuteUbergraph_BP_FaceChanger::CallFunc_BreakVector_X' has a wrong offset!");
static_assert(offsetof(BP_FaceChanger_C_ExecuteUbergraph_BP_FaceChanger, CallFunc_BreakVector_Y) == 0x000210, "Member 'BP_FaceChanger_C_ExecuteUbergraph_BP_FaceChanger::CallFunc_BreakVector_Y' has a wrong offset!");
static_assert(offsetof(BP_FaceChanger_C_ExecuteUbergraph_BP_FaceChanger, CallFunc_BreakVector_Z) == 0x000214, "Member 'BP_FaceChanger_C_ExecuteUbergraph_BP_FaceChanger::CallFunc_BreakVector_Z' has a wrong offset!");
static_assert(offsetof(BP_FaceChanger_C_ExecuteUbergraph_BP_FaceChanger, CallFunc_BreakVector_X_1) == 0x000218, "Member 'BP_FaceChanger_C_ExecuteUbergraph_BP_FaceChanger::CallFunc_BreakVector_X_1' has a wrong offset!");
static_assert(offsetof(BP_FaceChanger_C_ExecuteUbergraph_BP_FaceChanger, CallFunc_BreakVector_Y_1) == 0x00021C, "Member 'BP_FaceChanger_C_ExecuteUbergraph_BP_FaceChanger::CallFunc_BreakVector_Y_1' has a wrong offset!");
static_assert(offsetof(BP_FaceChanger_C_ExecuteUbergraph_BP_FaceChanger, CallFunc_BreakVector_Z_1) == 0x000220, "Member 'BP_FaceChanger_C_ExecuteUbergraph_BP_FaceChanger::CallFunc_BreakVector_Z_1' has a wrong offset!");
static_assert(offsetof(BP_FaceChanger_C_ExecuteUbergraph_BP_FaceChanger, CallFunc_GetTimeToStand_TimeToStand) == 0x000224, "Member 'BP_FaceChanger_C_ExecuteUbergraph_BP_FaceChanger::CallFunc_GetTimeToStand_TimeToStand' has a wrong offset!");
static_assert(offsetof(BP_FaceChanger_C_ExecuteUbergraph_BP_FaceChanger, CallFunc_MakeVector_ReturnValue) == 0x000228, "Member 'BP_FaceChanger_C_ExecuteUbergraph_BP_FaceChanger::CallFunc_MakeVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_FaceChanger_C_ExecuteUbergraph_BP_FaceChanger, CallFunc_Divide_FloatFloat_ReturnValue) == 0x000234, "Member 'BP_FaceChanger_C_ExecuteUbergraph_BP_FaceChanger::CallFunc_Divide_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_FaceChanger_C_ExecuteUbergraph_BP_FaceChanger, CallFunc_Add_VectorVector_ReturnValue) == 0x000238, "Member 'BP_FaceChanger_C_ExecuteUbergraph_BP_FaceChanger::CallFunc_Add_VectorVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_FaceChanger_C_ExecuteUbergraph_BP_FaceChanger, CallFunc_MakeTransform_ReturnValue) == 0x000250, "Member 'BP_FaceChanger_C_ExecuteUbergraph_BP_FaceChanger::CallFunc_MakeTransform_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_FaceChanger_C_ExecuteUbergraph_BP_FaceChanger, CallFunc_TLerp_ReturnValue) == 0x000280, "Member 'BP_FaceChanger_C_ExecuteUbergraph_BP_FaceChanger::CallFunc_TLerp_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_FaceChanger_C_ExecuteUbergraph_BP_FaceChanger, CallFunc_K2_SetWorldTransform_SweepHitResult) == 0x0002B0, "Member 'BP_FaceChanger_C_ExecuteUbergraph_BP_FaceChanger::CallFunc_K2_SetWorldTransform_SweepHitResult' has a wrong offset!");

// Function BP_FaceChanger.BP_FaceChanger_C.CameraMorph
// 0x0050 (0x0050 - 0x0000)
struct BP_FaceChanger_C_CameraMorph final
{
public:
	struct FVector                                FinalLocation;                                     // 0x0000(0x000C)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               FinalRotation;                                     // 0x000C(0x000C)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                         FinalFOV;                                          // 0x0018(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             FinalPawnTransform;                                // 0x0020(0x0030)(BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_FaceChanger_C_CameraMorph) == 0x000010, "Wrong alignment on BP_FaceChanger_C_CameraMorph");
static_assert(sizeof(BP_FaceChanger_C_CameraMorph) == 0x000050, "Wrong size on BP_FaceChanger_C_CameraMorph");
static_assert(offsetof(BP_FaceChanger_C_CameraMorph, FinalLocation) == 0x000000, "Member 'BP_FaceChanger_C_CameraMorph::FinalLocation' has a wrong offset!");
static_assert(offsetof(BP_FaceChanger_C_CameraMorph, FinalRotation) == 0x00000C, "Member 'BP_FaceChanger_C_CameraMorph::FinalRotation' has a wrong offset!");
static_assert(offsetof(BP_FaceChanger_C_CameraMorph, FinalFOV) == 0x000018, "Member 'BP_FaceChanger_C_CameraMorph::FinalFOV' has a wrong offset!");
static_assert(offsetof(BP_FaceChanger_C_CameraMorph, FinalPawnTransform) == 0x000020, "Member 'BP_FaceChanger_C_CameraMorph::FinalPawnTransform' has a wrong offset!");

// Function BP_FaceChanger.BP_FaceChanger_C.CameraMorphPosition
// 0x0154 (0x0154 - 0x0000)
struct BP_FaceChanger_C_CameraMorphPosition final
{
public:
	struct FVector                                Center;                                            // 0x0000(0x000C)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Alpha;                                             // 0x000C(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                LocInit;                                           // 0x0010(0x000C)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               RotInit;                                           // 0x001C(0x000C)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FVector                                LocFinal;                                          // 0x0028(0x000C)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               RotFinal;                                          // 0x0034(0x000C)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                         RadiusMultiplier;                                  // 0x0040(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         YawLerp;                                           // 0x0044(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                Loc;                                               // 0x0048(0x000C)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               Rot;                                               // 0x0054(0x000C)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                         CallFunc_BreakVector_X;                            // 0x0060(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_Y;                            // 0x0064(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_Z;                            // 0x0068(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               CallFunc_RLerp_ReturnValue;                        // 0x006C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FVector                                CallFunc_Subtract_VectorVector_ReturnValue;        // 0x0078(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_X_1;                          // 0x0084(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_Y_1;                          // 0x0088(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_Z_1;                          // 0x008C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_X_2;                          // 0x0090(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_Y_2;                          // 0x0094(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_Z_2;                          // 0x0098(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Lerp_ReturnValue;                         // 0x009C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_MakeVector_ReturnValue;                   // 0x00A0(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Subtract_VectorVector_ReturnValue_1;      // 0x00AC(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Multiply_VectorFloat_ReturnValue;         // 0x00B8(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_X_3;                          // 0x00C4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_Y_3;                          // 0x00C8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_Z_3;                          // 0x00CC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_VSize_ReturnValue;                        // 0x00D0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_MakeVector_ReturnValue_1;                 // 0x00D4(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               CallFunc_Conv_VectorToRotator_ReturnValue;         // 0x00E0(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FVector                                CallFunc_Multiply_VectorFloat_ReturnValue_1;       // 0x00EC(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_VSize_ReturnValue_1;                      // 0x00F8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               CallFunc_Conv_VectorToRotator_ReturnValue_1;       // 0x00FC(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                         CallFunc_Lerp_ReturnValue_1;                       // 0x0108(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               CallFunc_RLerp_ReturnValue_1;                      // 0x010C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FVector                                CallFunc_MakeVector_ReturnValue_2;                 // 0x0118(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_GreaterGreater_VectorRotator_ReturnValue; // 0x0124(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Add_VectorVector_ReturnValue;             // 0x0130(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_X_4;                          // 0x013C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_Y_4;                          // 0x0140(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_Z_4;                          // 0x0144(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_MakeVector_ReturnValue_3;                 // 0x0148(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_FaceChanger_C_CameraMorphPosition) == 0x000004, "Wrong alignment on BP_FaceChanger_C_CameraMorphPosition");
static_assert(sizeof(BP_FaceChanger_C_CameraMorphPosition) == 0x000154, "Wrong size on BP_FaceChanger_C_CameraMorphPosition");
static_assert(offsetof(BP_FaceChanger_C_CameraMorphPosition, Center) == 0x000000, "Member 'BP_FaceChanger_C_CameraMorphPosition::Center' has a wrong offset!");
static_assert(offsetof(BP_FaceChanger_C_CameraMorphPosition, Alpha) == 0x00000C, "Member 'BP_FaceChanger_C_CameraMorphPosition::Alpha' has a wrong offset!");
static_assert(offsetof(BP_FaceChanger_C_CameraMorphPosition, LocInit) == 0x000010, "Member 'BP_FaceChanger_C_CameraMorphPosition::LocInit' has a wrong offset!");
static_assert(offsetof(BP_FaceChanger_C_CameraMorphPosition, RotInit) == 0x00001C, "Member 'BP_FaceChanger_C_CameraMorphPosition::RotInit' has a wrong offset!");
static_assert(offsetof(BP_FaceChanger_C_CameraMorphPosition, LocFinal) == 0x000028, "Member 'BP_FaceChanger_C_CameraMorphPosition::LocFinal' has a wrong offset!");
static_assert(offsetof(BP_FaceChanger_C_CameraMorphPosition, RotFinal) == 0x000034, "Member 'BP_FaceChanger_C_CameraMorphPosition::RotFinal' has a wrong offset!");
static_assert(offsetof(BP_FaceChanger_C_CameraMorphPosition, RadiusMultiplier) == 0x000040, "Member 'BP_FaceChanger_C_CameraMorphPosition::RadiusMultiplier' has a wrong offset!");
static_assert(offsetof(BP_FaceChanger_C_CameraMorphPosition, YawLerp) == 0x000044, "Member 'BP_FaceChanger_C_CameraMorphPosition::YawLerp' has a wrong offset!");
static_assert(offsetof(BP_FaceChanger_C_CameraMorphPosition, Loc) == 0x000048, "Member 'BP_FaceChanger_C_CameraMorphPosition::Loc' has a wrong offset!");
static_assert(offsetof(BP_FaceChanger_C_CameraMorphPosition, Rot) == 0x000054, "Member 'BP_FaceChanger_C_CameraMorphPosition::Rot' has a wrong offset!");
static_assert(offsetof(BP_FaceChanger_C_CameraMorphPosition, CallFunc_BreakVector_X) == 0x000060, "Member 'BP_FaceChanger_C_CameraMorphPosition::CallFunc_BreakVector_X' has a wrong offset!");
static_assert(offsetof(BP_FaceChanger_C_CameraMorphPosition, CallFunc_BreakVector_Y) == 0x000064, "Member 'BP_FaceChanger_C_CameraMorphPosition::CallFunc_BreakVector_Y' has a wrong offset!");
static_assert(offsetof(BP_FaceChanger_C_CameraMorphPosition, CallFunc_BreakVector_Z) == 0x000068, "Member 'BP_FaceChanger_C_CameraMorphPosition::CallFunc_BreakVector_Z' has a wrong offset!");
static_assert(offsetof(BP_FaceChanger_C_CameraMorphPosition, CallFunc_RLerp_ReturnValue) == 0x00006C, "Member 'BP_FaceChanger_C_CameraMorphPosition::CallFunc_RLerp_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_FaceChanger_C_CameraMorphPosition, CallFunc_Subtract_VectorVector_ReturnValue) == 0x000078, "Member 'BP_FaceChanger_C_CameraMorphPosition::CallFunc_Subtract_VectorVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_FaceChanger_C_CameraMorphPosition, CallFunc_BreakVector_X_1) == 0x000084, "Member 'BP_FaceChanger_C_CameraMorphPosition::CallFunc_BreakVector_X_1' has a wrong offset!");
static_assert(offsetof(BP_FaceChanger_C_CameraMorphPosition, CallFunc_BreakVector_Y_1) == 0x000088, "Member 'BP_FaceChanger_C_CameraMorphPosition::CallFunc_BreakVector_Y_1' has a wrong offset!");
static_assert(offsetof(BP_FaceChanger_C_CameraMorphPosition, CallFunc_BreakVector_Z_1) == 0x00008C, "Member 'BP_FaceChanger_C_CameraMorphPosition::CallFunc_BreakVector_Z_1' has a wrong offset!");
static_assert(offsetof(BP_FaceChanger_C_CameraMorphPosition, CallFunc_BreakVector_X_2) == 0x000090, "Member 'BP_FaceChanger_C_CameraMorphPosition::CallFunc_BreakVector_X_2' has a wrong offset!");
static_assert(offsetof(BP_FaceChanger_C_CameraMorphPosition, CallFunc_BreakVector_Y_2) == 0x000094, "Member 'BP_FaceChanger_C_CameraMorphPosition::CallFunc_BreakVector_Y_2' has a wrong offset!");
static_assert(offsetof(BP_FaceChanger_C_CameraMorphPosition, CallFunc_BreakVector_Z_2) == 0x000098, "Member 'BP_FaceChanger_C_CameraMorphPosition::CallFunc_BreakVector_Z_2' has a wrong offset!");
static_assert(offsetof(BP_FaceChanger_C_CameraMorphPosition, CallFunc_Lerp_ReturnValue) == 0x00009C, "Member 'BP_FaceChanger_C_CameraMorphPosition::CallFunc_Lerp_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_FaceChanger_C_CameraMorphPosition, CallFunc_MakeVector_ReturnValue) == 0x0000A0, "Member 'BP_FaceChanger_C_CameraMorphPosition::CallFunc_MakeVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_FaceChanger_C_CameraMorphPosition, CallFunc_Subtract_VectorVector_ReturnValue_1) == 0x0000AC, "Member 'BP_FaceChanger_C_CameraMorphPosition::CallFunc_Subtract_VectorVector_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_FaceChanger_C_CameraMorphPosition, CallFunc_Multiply_VectorFloat_ReturnValue) == 0x0000B8, "Member 'BP_FaceChanger_C_CameraMorphPosition::CallFunc_Multiply_VectorFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_FaceChanger_C_CameraMorphPosition, CallFunc_BreakVector_X_3) == 0x0000C4, "Member 'BP_FaceChanger_C_CameraMorphPosition::CallFunc_BreakVector_X_3' has a wrong offset!");
static_assert(offsetof(BP_FaceChanger_C_CameraMorphPosition, CallFunc_BreakVector_Y_3) == 0x0000C8, "Member 'BP_FaceChanger_C_CameraMorphPosition::CallFunc_BreakVector_Y_3' has a wrong offset!");
static_assert(offsetof(BP_FaceChanger_C_CameraMorphPosition, CallFunc_BreakVector_Z_3) == 0x0000CC, "Member 'BP_FaceChanger_C_CameraMorphPosition::CallFunc_BreakVector_Z_3' has a wrong offset!");
static_assert(offsetof(BP_FaceChanger_C_CameraMorphPosition, CallFunc_VSize_ReturnValue) == 0x0000D0, "Member 'BP_FaceChanger_C_CameraMorphPosition::CallFunc_VSize_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_FaceChanger_C_CameraMorphPosition, CallFunc_MakeVector_ReturnValue_1) == 0x0000D4, "Member 'BP_FaceChanger_C_CameraMorphPosition::CallFunc_MakeVector_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_FaceChanger_C_CameraMorphPosition, CallFunc_Conv_VectorToRotator_ReturnValue) == 0x0000E0, "Member 'BP_FaceChanger_C_CameraMorphPosition::CallFunc_Conv_VectorToRotator_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_FaceChanger_C_CameraMorphPosition, CallFunc_Multiply_VectorFloat_ReturnValue_1) == 0x0000EC, "Member 'BP_FaceChanger_C_CameraMorphPosition::CallFunc_Multiply_VectorFloat_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_FaceChanger_C_CameraMorphPosition, CallFunc_VSize_ReturnValue_1) == 0x0000F8, "Member 'BP_FaceChanger_C_CameraMorphPosition::CallFunc_VSize_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_FaceChanger_C_CameraMorphPosition, CallFunc_Conv_VectorToRotator_ReturnValue_1) == 0x0000FC, "Member 'BP_FaceChanger_C_CameraMorphPosition::CallFunc_Conv_VectorToRotator_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_FaceChanger_C_CameraMorphPosition, CallFunc_Lerp_ReturnValue_1) == 0x000108, "Member 'BP_FaceChanger_C_CameraMorphPosition::CallFunc_Lerp_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_FaceChanger_C_CameraMorphPosition, CallFunc_RLerp_ReturnValue_1) == 0x00010C, "Member 'BP_FaceChanger_C_CameraMorphPosition::CallFunc_RLerp_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_FaceChanger_C_CameraMorphPosition, CallFunc_MakeVector_ReturnValue_2) == 0x000118, "Member 'BP_FaceChanger_C_CameraMorphPosition::CallFunc_MakeVector_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BP_FaceChanger_C_CameraMorphPosition, CallFunc_GreaterGreater_VectorRotator_ReturnValue) == 0x000124, "Member 'BP_FaceChanger_C_CameraMorphPosition::CallFunc_GreaterGreater_VectorRotator_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_FaceChanger_C_CameraMorphPosition, CallFunc_Add_VectorVector_ReturnValue) == 0x000130, "Member 'BP_FaceChanger_C_CameraMorphPosition::CallFunc_Add_VectorVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_FaceChanger_C_CameraMorphPosition, CallFunc_BreakVector_X_4) == 0x00013C, "Member 'BP_FaceChanger_C_CameraMorphPosition::CallFunc_BreakVector_X_4' has a wrong offset!");
static_assert(offsetof(BP_FaceChanger_C_CameraMorphPosition, CallFunc_BreakVector_Y_4) == 0x000140, "Member 'BP_FaceChanger_C_CameraMorphPosition::CallFunc_BreakVector_Y_4' has a wrong offset!");
static_assert(offsetof(BP_FaceChanger_C_CameraMorphPosition, CallFunc_BreakVector_Z_4) == 0x000144, "Member 'BP_FaceChanger_C_CameraMorphPosition::CallFunc_BreakVector_Z_4' has a wrong offset!");
static_assert(offsetof(BP_FaceChanger_C_CameraMorphPosition, CallFunc_MakeVector_ReturnValue_3) == 0x000148, "Member 'BP_FaceChanger_C_CameraMorphPosition::CallFunc_MakeVector_ReturnValue_3' has a wrong offset!");

// Function BP_FaceChanger.BP_FaceChanger_C.AnimationStandUp
// 0x0010 (0x0010 - 0x0000)
struct BP_FaceChanger_C_AnimationStandUp final
{
public:
	float                                         SequenceLength;                                    // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable;                                // 0x0004(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsFemale_NewParam;                        // 0x0005(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_6[0x2];                                        // 0x0006(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	class UAnimSequenceBase*                      K2Node_Select_Default;                             // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_FaceChanger_C_AnimationStandUp) == 0x000008, "Wrong alignment on BP_FaceChanger_C_AnimationStandUp");
static_assert(sizeof(BP_FaceChanger_C_AnimationStandUp) == 0x000010, "Wrong size on BP_FaceChanger_C_AnimationStandUp");
static_assert(offsetof(BP_FaceChanger_C_AnimationStandUp, SequenceLength) == 0x000000, "Member 'BP_FaceChanger_C_AnimationStandUp::SequenceLength' has a wrong offset!");
static_assert(offsetof(BP_FaceChanger_C_AnimationStandUp, Temp_bool_Variable) == 0x000004, "Member 'BP_FaceChanger_C_AnimationStandUp::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(BP_FaceChanger_C_AnimationStandUp, CallFunc_IsFemale_NewParam) == 0x000005, "Member 'BP_FaceChanger_C_AnimationStandUp::CallFunc_IsFemale_NewParam' has a wrong offset!");
static_assert(offsetof(BP_FaceChanger_C_AnimationStandUp, K2Node_Select_Default) == 0x000008, "Member 'BP_FaceChanger_C_AnimationStandUp::K2Node_Select_Default' has a wrong offset!");

// Function BP_FaceChanger.BP_FaceChanger_C.WakeUpAnimation
// 0x0018 (0x0018 - 0x0000)
struct BP_FaceChanger_C_WakeUpAnimation final
{
public:
	float                                         SequenceLength;                                    // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable;                                // 0x0004(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsFemale_NewParam;                        // 0x0005(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_6[0x2];                                        // 0x0006(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	class UAnimSequenceBase*                      K2Node_Select_Default;                             // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FTimerHandle                           CallFunc_K2_SetTimer_ReturnValue;                  // 0x0010(0x0008)(NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_FaceChanger_C_WakeUpAnimation) == 0x000008, "Wrong alignment on BP_FaceChanger_C_WakeUpAnimation");
static_assert(sizeof(BP_FaceChanger_C_WakeUpAnimation) == 0x000018, "Wrong size on BP_FaceChanger_C_WakeUpAnimation");
static_assert(offsetof(BP_FaceChanger_C_WakeUpAnimation, SequenceLength) == 0x000000, "Member 'BP_FaceChanger_C_WakeUpAnimation::SequenceLength' has a wrong offset!");
static_assert(offsetof(BP_FaceChanger_C_WakeUpAnimation, Temp_bool_Variable) == 0x000004, "Member 'BP_FaceChanger_C_WakeUpAnimation::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(BP_FaceChanger_C_WakeUpAnimation, CallFunc_IsFemale_NewParam) == 0x000005, "Member 'BP_FaceChanger_C_WakeUpAnimation::CallFunc_IsFemale_NewParam' has a wrong offset!");
static_assert(offsetof(BP_FaceChanger_C_WakeUpAnimation, K2Node_Select_Default) == 0x000008, "Member 'BP_FaceChanger_C_WakeUpAnimation::K2Node_Select_Default' has a wrong offset!");
static_assert(offsetof(BP_FaceChanger_C_WakeUpAnimation, CallFunc_K2_SetTimer_ReturnValue) == 0x000010, "Member 'BP_FaceChanger_C_WakeUpAnimation::CallFunc_K2_SetTimer_ReturnValue' has a wrong offset!");

// Function BP_FaceChanger.BP_FaceChanger_C.WakeUpAnimation2
// 0x0010 (0x0010 - 0x0000)
struct BP_FaceChanger_C_WakeUpAnimation2 final
{
public:
	bool                                          Temp_bool_Variable;                                // 0x0000(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsFemale_NewParam;                        // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_2[0x6];                                        // 0x0002(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class UAnimationAsset*                        K2Node_Select_Default;                             // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_FaceChanger_C_WakeUpAnimation2) == 0x000008, "Wrong alignment on BP_FaceChanger_C_WakeUpAnimation2");
static_assert(sizeof(BP_FaceChanger_C_WakeUpAnimation2) == 0x000010, "Wrong size on BP_FaceChanger_C_WakeUpAnimation2");
static_assert(offsetof(BP_FaceChanger_C_WakeUpAnimation2, Temp_bool_Variable) == 0x000000, "Member 'BP_FaceChanger_C_WakeUpAnimation2::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(BP_FaceChanger_C_WakeUpAnimation2, CallFunc_IsFemale_NewParam) == 0x000001, "Member 'BP_FaceChanger_C_WakeUpAnimation2::CallFunc_IsFemale_NewParam' has a wrong offset!");
static_assert(offsetof(BP_FaceChanger_C_WakeUpAnimation2, K2Node_Select_Default) == 0x000008, "Member 'BP_FaceChanger_C_WakeUpAnimation2::K2Node_Select_Default' has a wrong offset!");

// Function BP_FaceChanger.BP_FaceChanger_C.GetTimeToStand
// 0x0010 (0x0010 - 0x0000)
struct BP_FaceChanger_C_GetTimeToStand final
{
public:
	float                                         TimeToStand;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable;                                // 0x0004(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsFemale_NewParam;                        // 0x0005(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_6[0x2];                                        // 0x0006(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	class UAnimSequenceBase*                      K2Node_Select_Default;                             // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_FaceChanger_C_GetTimeToStand) == 0x000008, "Wrong alignment on BP_FaceChanger_C_GetTimeToStand");
static_assert(sizeof(BP_FaceChanger_C_GetTimeToStand) == 0x000010, "Wrong size on BP_FaceChanger_C_GetTimeToStand");
static_assert(offsetof(BP_FaceChanger_C_GetTimeToStand, TimeToStand) == 0x000000, "Member 'BP_FaceChanger_C_GetTimeToStand::TimeToStand' has a wrong offset!");
static_assert(offsetof(BP_FaceChanger_C_GetTimeToStand, Temp_bool_Variable) == 0x000004, "Member 'BP_FaceChanger_C_GetTimeToStand::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(BP_FaceChanger_C_GetTimeToStand, CallFunc_IsFemale_NewParam) == 0x000005, "Member 'BP_FaceChanger_C_GetTimeToStand::CallFunc_IsFemale_NewParam' has a wrong offset!");
static_assert(offsetof(BP_FaceChanger_C_GetTimeToStand, K2Node_Select_Default) == 0x000008, "Member 'BP_FaceChanger_C_GetTimeToStand::K2Node_Select_Default' has a wrong offset!");

// Function BP_FaceChanger.BP_FaceChanger_C.IsFemale
// 0x0001 (0x0001 - 0x0000)
struct BP_FaceChanger_C_IsFemale final
{
public:
	bool                                          NewParam;                                          // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_FaceChanger_C_IsFemale) == 0x000001, "Wrong alignment on BP_FaceChanger_C_IsFemale");
static_assert(sizeof(BP_FaceChanger_C_IsFemale) == 0x000001, "Wrong size on BP_FaceChanger_C_IsFemale");
static_assert(offsetof(BP_FaceChanger_C_IsFemale, NewParam) == 0x000000, "Member 'BP_FaceChanger_C_IsFemale::NewParam' has a wrong offset!");

// Function BP_FaceChanger.BP_FaceChanger_C.DeadAnimation
// 0x0010 (0x0010 - 0x0000)
struct BP_FaceChanger_C_DeadAnimation final
{
public:
	bool                                          Temp_bool_Variable;                                // 0x0000(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsFemale_NewParam;                        // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_2[0x6];                                        // 0x0002(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class UAnimSequenceBase*                      K2Node_Select_Default;                             // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_FaceChanger_C_DeadAnimation) == 0x000008, "Wrong alignment on BP_FaceChanger_C_DeadAnimation");
static_assert(sizeof(BP_FaceChanger_C_DeadAnimation) == 0x000010, "Wrong size on BP_FaceChanger_C_DeadAnimation");
static_assert(offsetof(BP_FaceChanger_C_DeadAnimation, Temp_bool_Variable) == 0x000000, "Member 'BP_FaceChanger_C_DeadAnimation::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(BP_FaceChanger_C_DeadAnimation, CallFunc_IsFemale_NewParam) == 0x000001, "Member 'BP_FaceChanger_C_DeadAnimation::CallFunc_IsFemale_NewParam' has a wrong offset!");
static_assert(offsetof(BP_FaceChanger_C_DeadAnimation, K2Node_Select_Default) == 0x000008, "Member 'BP_FaceChanger_C_DeadAnimation::K2Node_Select_Default' has a wrong offset!");

// Function BP_FaceChanger.BP_FaceChanger_C.Get Player Customization Pairs Without Headgear
// 0x01A8 (0x01A8 - 0x0000)
struct BP_FaceChanger_C_Get_Player_Customization_Pairs_Without_Headgear final
{
public:
	class UClass*                                 ArchetypeVariant;                                  // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<struct FCustomizationSlotVariant>      CustomizationPairs;                                // 0x0008(0x0010)(Parm, OutParm)
	bool                                          bSuccess;                                          // 0x0018(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UClass*                                 ArchetypeVariantTemp;                              // 0x0020(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<struct FCustomizationSlotVariant>      Pairs;                                             // 0x0028(0x0010)(Edit, BlueprintVisible)
	TArray<class UClass*>                         SlotsToClear;                                      // 0x0038(0x0010)(Edit, BlueprintVisible)
	class AHumanPlayerController*                 PlayerController;                                  // 0x0048(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValidClass_ReturnValue;                 // 0x0050(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_True_if_break_was_hit_Variable;          // 0x0051(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_52[0x2];                                       // 0x0052(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Temp_int_Array_Index_Variable;                     // 0x0054(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x0058(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x005C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Array_Index_Variable_1;                   // 0x0060(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_True_if_break_was_hit_Variable_1;        // 0x0064(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_65[0x3];                                       // 0x0065(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Temp_int_Loop_Counter_Variable_1;                  // 0x0068(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue_1;                 // 0x006C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Array_Index_Variable_2;                   // 0x0070(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable_2;                  // 0x0074(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FCustomizationSlotVariant              K2Node_MakeStruct_CustomizationSlotVariant;        // 0x0078(0x0010)(NoDestructor)
	int32                                         CallFunc_Add_IntInt_ReturnValue_2;                 // 0x0088(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable_3;                  // 0x008C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue_3;                 // 0x0090(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_94[0x4];                                       // 0x0094(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class AHumanPlayerController*                 CallFunc_GetFlameController_ReturnValue;           // 0x0098(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x00A0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_A1[0x3];                                       // 0x00A1(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Temp_int_Array_Index_Variable_3;                   // 0x00A4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_True_if_break_was_hit_Variable_2;        // 0x00A8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_A9[0x7];                                       // 0x00A9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class UClass*>                         K2Node_MakeArray_Array;                            // 0x00B0(0x0010)(ReferenceParm)
	class UClass*                                 CallFunc_Array_Get_Item;                           // 0x00C0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x00C8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x00CC(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_CD[0x3];                                       // 0x00CD(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FCustomizationPair                     CallFunc_GetCustomizationInSlot_ReturnValue;       // 0x00D0(0x0010)(NoDestructor)
	class AHumanPlayerCharacter*                  CallFunc_GetHumanCharacter_ReturnValue;            // 0x00E0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue_1;                    // 0x00E8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_E9[0x7];                                       // 0x00E9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FCustomizationSlotVariant              K2Node_MakeStruct_CustomizationSlotVariant_1;      // 0x00F0(0x0010)(NoDestructor)
	TArray<TSubclassOf<class ACustomizationSlot>> CallFunc_Map_Values_Values;                        // 0x0100(0x0010)(ReferenceParm)
	int32                                         CallFunc_Array_Add_ReturnValue;                    // 0x0110(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_114[0x4];                                      // 0x0114(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UClass*                                 CallFunc_Array_Get_Item_1;                         // 0x0118(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue_1;               // 0x0120(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_124[0x4];                                      // 0x0124(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FCustomizationSlotVariant              K2Node_MakeStruct_CustomizationSlotVariant_2;      // 0x0128(0x0010)(NoDestructor)
	bool                                          CallFunc_Less_IntInt_ReturnValue_1;                // 0x0138(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_139[0x3];                                      // 0x0139(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Array_AddUnique_ReturnValue;              // 0x013C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_ClassIsChildOf_ReturnValue;               // 0x0140(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_141[0x7];                                      // 0x0141(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FCustomizationPair                     CallFunc_GetCustomizationInSlot_ReturnValue_1;     // 0x0148(0x0010)(NoDestructor)
	struct FCustomizationSlotVariant              CallFunc_Array_Get_Item_2;                         // 0x0158(0x0010)(NoDestructor)
	struct FCustomizationSlotVariant              K2Node_MakeStruct_CustomizationSlotVariant_3;      // 0x0168(0x0010)(NoDestructor)
	int32                                         CallFunc_Array_AddUnique_ReturnValue_1;            // 0x0178(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValidClass_ReturnValue_1;               // 0x017C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_ClassIsChildOf_ReturnValue_1;             // 0x017D(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValidClass_ReturnValue_2;               // 0x017E(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_17F[0x1];                                      // 0x017F(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<TSubclassOf<class ACustomizationSlot>> CallFunc_NeededSlotsForCustomization_ReturnValue;  // 0x0180(0x0010)(ReferenceParm)
	int32                                         CallFunc_Array_Length_ReturnValue_2;               // 0x0190(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Array_Contains_ReturnValue;               // 0x0194(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Less_IntInt_ReturnValue_2;                // 0x0195(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_196[0x2];                                      // 0x0196(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Array_Length_ReturnValue_3;               // 0x0198(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_AddUnique_ReturnValue_2;            // 0x019C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue_3;                // 0x01A0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_FaceChanger_C_Get_Player_Customization_Pairs_Without_Headgear) == 0x000008, "Wrong alignment on BP_FaceChanger_C_Get_Player_Customization_Pairs_Without_Headgear");
static_assert(sizeof(BP_FaceChanger_C_Get_Player_Customization_Pairs_Without_Headgear) == 0x0001A8, "Wrong size on BP_FaceChanger_C_Get_Player_Customization_Pairs_Without_Headgear");
static_assert(offsetof(BP_FaceChanger_C_Get_Player_Customization_Pairs_Without_Headgear, ArchetypeVariant) == 0x000000, "Member 'BP_FaceChanger_C_Get_Player_Customization_Pairs_Without_Headgear::ArchetypeVariant' has a wrong offset!");
static_assert(offsetof(BP_FaceChanger_C_Get_Player_Customization_Pairs_Without_Headgear, CustomizationPairs) == 0x000008, "Member 'BP_FaceChanger_C_Get_Player_Customization_Pairs_Without_Headgear::CustomizationPairs' has a wrong offset!");
static_assert(offsetof(BP_FaceChanger_C_Get_Player_Customization_Pairs_Without_Headgear, bSuccess) == 0x000018, "Member 'BP_FaceChanger_C_Get_Player_Customization_Pairs_Without_Headgear::bSuccess' has a wrong offset!");
static_assert(offsetof(BP_FaceChanger_C_Get_Player_Customization_Pairs_Without_Headgear, ArchetypeVariantTemp) == 0x000020, "Member 'BP_FaceChanger_C_Get_Player_Customization_Pairs_Without_Headgear::ArchetypeVariantTemp' has a wrong offset!");
static_assert(offsetof(BP_FaceChanger_C_Get_Player_Customization_Pairs_Without_Headgear, Pairs) == 0x000028, "Member 'BP_FaceChanger_C_Get_Player_Customization_Pairs_Without_Headgear::Pairs' has a wrong offset!");
static_assert(offsetof(BP_FaceChanger_C_Get_Player_Customization_Pairs_Without_Headgear, SlotsToClear) == 0x000038, "Member 'BP_FaceChanger_C_Get_Player_Customization_Pairs_Without_Headgear::SlotsToClear' has a wrong offset!");
static_assert(offsetof(BP_FaceChanger_C_Get_Player_Customization_Pairs_Without_Headgear, PlayerController) == 0x000048, "Member 'BP_FaceChanger_C_Get_Player_Customization_Pairs_Without_Headgear::PlayerController' has a wrong offset!");
static_assert(offsetof(BP_FaceChanger_C_Get_Player_Customization_Pairs_Without_Headgear, CallFunc_IsValidClass_ReturnValue) == 0x000050, "Member 'BP_FaceChanger_C_Get_Player_Customization_Pairs_Without_Headgear::CallFunc_IsValidClass_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_FaceChanger_C_Get_Player_Customization_Pairs_Without_Headgear, Temp_bool_True_if_break_was_hit_Variable) == 0x000051, "Member 'BP_FaceChanger_C_Get_Player_Customization_Pairs_Without_Headgear::Temp_bool_True_if_break_was_hit_Variable' has a wrong offset!");
static_assert(offsetof(BP_FaceChanger_C_Get_Player_Customization_Pairs_Without_Headgear, Temp_int_Array_Index_Variable) == 0x000054, "Member 'BP_FaceChanger_C_Get_Player_Customization_Pairs_Without_Headgear::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(BP_FaceChanger_C_Get_Player_Customization_Pairs_Without_Headgear, Temp_int_Loop_Counter_Variable) == 0x000058, "Member 'BP_FaceChanger_C_Get_Player_Customization_Pairs_Without_Headgear::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(BP_FaceChanger_C_Get_Player_Customization_Pairs_Without_Headgear, CallFunc_Add_IntInt_ReturnValue) == 0x00005C, "Member 'BP_FaceChanger_C_Get_Player_Customization_Pairs_Without_Headgear::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_FaceChanger_C_Get_Player_Customization_Pairs_Without_Headgear, Temp_int_Array_Index_Variable_1) == 0x000060, "Member 'BP_FaceChanger_C_Get_Player_Customization_Pairs_Without_Headgear::Temp_int_Array_Index_Variable_1' has a wrong offset!");
static_assert(offsetof(BP_FaceChanger_C_Get_Player_Customization_Pairs_Without_Headgear, Temp_bool_True_if_break_was_hit_Variable_1) == 0x000064, "Member 'BP_FaceChanger_C_Get_Player_Customization_Pairs_Without_Headgear::Temp_bool_True_if_break_was_hit_Variable_1' has a wrong offset!");
static_assert(offsetof(BP_FaceChanger_C_Get_Player_Customization_Pairs_Without_Headgear, Temp_int_Loop_Counter_Variable_1) == 0x000068, "Member 'BP_FaceChanger_C_Get_Player_Customization_Pairs_Without_Headgear::Temp_int_Loop_Counter_Variable_1' has a wrong offset!");
static_assert(offsetof(BP_FaceChanger_C_Get_Player_Customization_Pairs_Without_Headgear, CallFunc_Add_IntInt_ReturnValue_1) == 0x00006C, "Member 'BP_FaceChanger_C_Get_Player_Customization_Pairs_Without_Headgear::CallFunc_Add_IntInt_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_FaceChanger_C_Get_Player_Customization_Pairs_Without_Headgear, Temp_int_Array_Index_Variable_2) == 0x000070, "Member 'BP_FaceChanger_C_Get_Player_Customization_Pairs_Without_Headgear::Temp_int_Array_Index_Variable_2' has a wrong offset!");
static_assert(offsetof(BP_FaceChanger_C_Get_Player_Customization_Pairs_Without_Headgear, Temp_int_Loop_Counter_Variable_2) == 0x000074, "Member 'BP_FaceChanger_C_Get_Player_Customization_Pairs_Without_Headgear::Temp_int_Loop_Counter_Variable_2' has a wrong offset!");
static_assert(offsetof(BP_FaceChanger_C_Get_Player_Customization_Pairs_Without_Headgear, K2Node_MakeStruct_CustomizationSlotVariant) == 0x000078, "Member 'BP_FaceChanger_C_Get_Player_Customization_Pairs_Without_Headgear::K2Node_MakeStruct_CustomizationSlotVariant' has a wrong offset!");
static_assert(offsetof(BP_FaceChanger_C_Get_Player_Customization_Pairs_Without_Headgear, CallFunc_Add_IntInt_ReturnValue_2) == 0x000088, "Member 'BP_FaceChanger_C_Get_Player_Customization_Pairs_Without_Headgear::CallFunc_Add_IntInt_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BP_FaceChanger_C_Get_Player_Customization_Pairs_Without_Headgear, Temp_int_Loop_Counter_Variable_3) == 0x00008C, "Member 'BP_FaceChanger_C_Get_Player_Customization_Pairs_Without_Headgear::Temp_int_Loop_Counter_Variable_3' has a wrong offset!");
static_assert(offsetof(BP_FaceChanger_C_Get_Player_Customization_Pairs_Without_Headgear, CallFunc_Add_IntInt_ReturnValue_3) == 0x000090, "Member 'BP_FaceChanger_C_Get_Player_Customization_Pairs_Without_Headgear::CallFunc_Add_IntInt_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(BP_FaceChanger_C_Get_Player_Customization_Pairs_Without_Headgear, CallFunc_GetFlameController_ReturnValue) == 0x000098, "Member 'BP_FaceChanger_C_Get_Player_Customization_Pairs_Without_Headgear::CallFunc_GetFlameController_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_FaceChanger_C_Get_Player_Customization_Pairs_Without_Headgear, CallFunc_IsValid_ReturnValue) == 0x0000A0, "Member 'BP_FaceChanger_C_Get_Player_Customization_Pairs_Without_Headgear::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_FaceChanger_C_Get_Player_Customization_Pairs_Without_Headgear, Temp_int_Array_Index_Variable_3) == 0x0000A4, "Member 'BP_FaceChanger_C_Get_Player_Customization_Pairs_Without_Headgear::Temp_int_Array_Index_Variable_3' has a wrong offset!");
static_assert(offsetof(BP_FaceChanger_C_Get_Player_Customization_Pairs_Without_Headgear, Temp_bool_True_if_break_was_hit_Variable_2) == 0x0000A8, "Member 'BP_FaceChanger_C_Get_Player_Customization_Pairs_Without_Headgear::Temp_bool_True_if_break_was_hit_Variable_2' has a wrong offset!");
static_assert(offsetof(BP_FaceChanger_C_Get_Player_Customization_Pairs_Without_Headgear, K2Node_MakeArray_Array) == 0x0000B0, "Member 'BP_FaceChanger_C_Get_Player_Customization_Pairs_Without_Headgear::K2Node_MakeArray_Array' has a wrong offset!");
static_assert(offsetof(BP_FaceChanger_C_Get_Player_Customization_Pairs_Without_Headgear, CallFunc_Array_Get_Item) == 0x0000C0, "Member 'BP_FaceChanger_C_Get_Player_Customization_Pairs_Without_Headgear::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(BP_FaceChanger_C_Get_Player_Customization_Pairs_Without_Headgear, CallFunc_Array_Length_ReturnValue) == 0x0000C8, "Member 'BP_FaceChanger_C_Get_Player_Customization_Pairs_Without_Headgear::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_FaceChanger_C_Get_Player_Customization_Pairs_Without_Headgear, CallFunc_Less_IntInt_ReturnValue) == 0x0000CC, "Member 'BP_FaceChanger_C_Get_Player_Customization_Pairs_Without_Headgear::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_FaceChanger_C_Get_Player_Customization_Pairs_Without_Headgear, CallFunc_GetCustomizationInSlot_ReturnValue) == 0x0000D0, "Member 'BP_FaceChanger_C_Get_Player_Customization_Pairs_Without_Headgear::CallFunc_GetCustomizationInSlot_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_FaceChanger_C_Get_Player_Customization_Pairs_Without_Headgear, CallFunc_GetHumanCharacter_ReturnValue) == 0x0000E0, "Member 'BP_FaceChanger_C_Get_Player_Customization_Pairs_Without_Headgear::CallFunc_GetHumanCharacter_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_FaceChanger_C_Get_Player_Customization_Pairs_Without_Headgear, CallFunc_IsValid_ReturnValue_1) == 0x0000E8, "Member 'BP_FaceChanger_C_Get_Player_Customization_Pairs_Without_Headgear::CallFunc_IsValid_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_FaceChanger_C_Get_Player_Customization_Pairs_Without_Headgear, K2Node_MakeStruct_CustomizationSlotVariant_1) == 0x0000F0, "Member 'BP_FaceChanger_C_Get_Player_Customization_Pairs_Without_Headgear::K2Node_MakeStruct_CustomizationSlotVariant_1' has a wrong offset!");
static_assert(offsetof(BP_FaceChanger_C_Get_Player_Customization_Pairs_Without_Headgear, CallFunc_Map_Values_Values) == 0x000100, "Member 'BP_FaceChanger_C_Get_Player_Customization_Pairs_Without_Headgear::CallFunc_Map_Values_Values' has a wrong offset!");
static_assert(offsetof(BP_FaceChanger_C_Get_Player_Customization_Pairs_Without_Headgear, CallFunc_Array_Add_ReturnValue) == 0x000110, "Member 'BP_FaceChanger_C_Get_Player_Customization_Pairs_Without_Headgear::CallFunc_Array_Add_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_FaceChanger_C_Get_Player_Customization_Pairs_Without_Headgear, CallFunc_Array_Get_Item_1) == 0x000118, "Member 'BP_FaceChanger_C_Get_Player_Customization_Pairs_Without_Headgear::CallFunc_Array_Get_Item_1' has a wrong offset!");
static_assert(offsetof(BP_FaceChanger_C_Get_Player_Customization_Pairs_Without_Headgear, CallFunc_Array_Length_ReturnValue_1) == 0x000120, "Member 'BP_FaceChanger_C_Get_Player_Customization_Pairs_Without_Headgear::CallFunc_Array_Length_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_FaceChanger_C_Get_Player_Customization_Pairs_Without_Headgear, K2Node_MakeStruct_CustomizationSlotVariant_2) == 0x000128, "Member 'BP_FaceChanger_C_Get_Player_Customization_Pairs_Without_Headgear::K2Node_MakeStruct_CustomizationSlotVariant_2' has a wrong offset!");
static_assert(offsetof(BP_FaceChanger_C_Get_Player_Customization_Pairs_Without_Headgear, CallFunc_Less_IntInt_ReturnValue_1) == 0x000138, "Member 'BP_FaceChanger_C_Get_Player_Customization_Pairs_Without_Headgear::CallFunc_Less_IntInt_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_FaceChanger_C_Get_Player_Customization_Pairs_Without_Headgear, CallFunc_Array_AddUnique_ReturnValue) == 0x00013C, "Member 'BP_FaceChanger_C_Get_Player_Customization_Pairs_Without_Headgear::CallFunc_Array_AddUnique_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_FaceChanger_C_Get_Player_Customization_Pairs_Without_Headgear, CallFunc_ClassIsChildOf_ReturnValue) == 0x000140, "Member 'BP_FaceChanger_C_Get_Player_Customization_Pairs_Without_Headgear::CallFunc_ClassIsChildOf_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_FaceChanger_C_Get_Player_Customization_Pairs_Without_Headgear, CallFunc_GetCustomizationInSlot_ReturnValue_1) == 0x000148, "Member 'BP_FaceChanger_C_Get_Player_Customization_Pairs_Without_Headgear::CallFunc_GetCustomizationInSlot_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_FaceChanger_C_Get_Player_Customization_Pairs_Without_Headgear, CallFunc_Array_Get_Item_2) == 0x000158, "Member 'BP_FaceChanger_C_Get_Player_Customization_Pairs_Without_Headgear::CallFunc_Array_Get_Item_2' has a wrong offset!");
static_assert(offsetof(BP_FaceChanger_C_Get_Player_Customization_Pairs_Without_Headgear, K2Node_MakeStruct_CustomizationSlotVariant_3) == 0x000168, "Member 'BP_FaceChanger_C_Get_Player_Customization_Pairs_Without_Headgear::K2Node_MakeStruct_CustomizationSlotVariant_3' has a wrong offset!");
static_assert(offsetof(BP_FaceChanger_C_Get_Player_Customization_Pairs_Without_Headgear, CallFunc_Array_AddUnique_ReturnValue_1) == 0x000178, "Member 'BP_FaceChanger_C_Get_Player_Customization_Pairs_Without_Headgear::CallFunc_Array_AddUnique_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_FaceChanger_C_Get_Player_Customization_Pairs_Without_Headgear, CallFunc_IsValidClass_ReturnValue_1) == 0x00017C, "Member 'BP_FaceChanger_C_Get_Player_Customization_Pairs_Without_Headgear::CallFunc_IsValidClass_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_FaceChanger_C_Get_Player_Customization_Pairs_Without_Headgear, CallFunc_ClassIsChildOf_ReturnValue_1) == 0x00017D, "Member 'BP_FaceChanger_C_Get_Player_Customization_Pairs_Without_Headgear::CallFunc_ClassIsChildOf_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_FaceChanger_C_Get_Player_Customization_Pairs_Without_Headgear, CallFunc_IsValidClass_ReturnValue_2) == 0x00017E, "Member 'BP_FaceChanger_C_Get_Player_Customization_Pairs_Without_Headgear::CallFunc_IsValidClass_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BP_FaceChanger_C_Get_Player_Customization_Pairs_Without_Headgear, CallFunc_NeededSlotsForCustomization_ReturnValue) == 0x000180, "Member 'BP_FaceChanger_C_Get_Player_Customization_Pairs_Without_Headgear::CallFunc_NeededSlotsForCustomization_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_FaceChanger_C_Get_Player_Customization_Pairs_Without_Headgear, CallFunc_Array_Length_ReturnValue_2) == 0x000190, "Member 'BP_FaceChanger_C_Get_Player_Customization_Pairs_Without_Headgear::CallFunc_Array_Length_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BP_FaceChanger_C_Get_Player_Customization_Pairs_Without_Headgear, CallFunc_Array_Contains_ReturnValue) == 0x000194, "Member 'BP_FaceChanger_C_Get_Player_Customization_Pairs_Without_Headgear::CallFunc_Array_Contains_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_FaceChanger_C_Get_Player_Customization_Pairs_Without_Headgear, CallFunc_Less_IntInt_ReturnValue_2) == 0x000195, "Member 'BP_FaceChanger_C_Get_Player_Customization_Pairs_Without_Headgear::CallFunc_Less_IntInt_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BP_FaceChanger_C_Get_Player_Customization_Pairs_Without_Headgear, CallFunc_Array_Length_ReturnValue_3) == 0x000198, "Member 'BP_FaceChanger_C_Get_Player_Customization_Pairs_Without_Headgear::CallFunc_Array_Length_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(BP_FaceChanger_C_Get_Player_Customization_Pairs_Without_Headgear, CallFunc_Array_AddUnique_ReturnValue_2) == 0x00019C, "Member 'BP_FaceChanger_C_Get_Player_Customization_Pairs_Without_Headgear::CallFunc_Array_AddUnique_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BP_FaceChanger_C_Get_Player_Customization_Pairs_Without_Headgear, CallFunc_Less_IntInt_ReturnValue_3) == 0x0001A0, "Member 'BP_FaceChanger_C_Get_Player_Customization_Pairs_Without_Headgear::CallFunc_Less_IntInt_ReturnValue_3' has a wrong offset!");

}

