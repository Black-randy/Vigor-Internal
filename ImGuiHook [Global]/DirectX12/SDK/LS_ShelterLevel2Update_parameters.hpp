#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: LS_ShelterLevel2Update

#include "Basic.hpp"

#include "CoreUObject_structs.hpp"
#include "S_ActorTagVisibilityMapWrap_structs.hpp"


namespace SDK::Params
{

// Function LS_ShelterLevel2Update.SequenceDirector_C.ExecuteUbergraph_SequenceDirector
// 0x01C0 (0x01C0 - 0x0000)
struct SequenceDirector_C_ExecuteUbergraph_SequenceDirector final
{
public:
	int32                                         EntryPoint;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class ABP_AU_SpawnFireworks_C*                K2Node_CustomEvent_BP_AU_SpawnFireworks;           // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ABP_ShelterCameras_C*                   K2Node_CustomEvent_BP_ShelterCameras_1;            // 0x0010(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         K2Node_CustomEvent_Index;                          // 0x0018(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class ABP_Mannequin_C*                        K2Node_CustomEvent_BP_Mannequin;                   // 0x0020(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AHumanPlayerController*                 CallFunc_GetFlameController_ReturnValue;           // 0x0028(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ABP_ShelterCameras_C*                   K2Node_CustomEvent_BP_ShelterCameras_2;            // 0x0030(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         K2Node_CustomEvent_Index_1;                        // 0x0038(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3C[0x4];                                       // 0x003C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             K2Node_CustomEvent_OptionalCaptureLocationOffset;  // 0x0040(0x0030)(IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0070(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_71[0x7];                                       // 0x0071(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AHumanPlayerCharacter*                  CallFunc_GetHumanCharacter_ReturnValue;            // 0x0078(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   K2Node_CustomEvent_Tag;                            // 0x0080(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_CustomEvent_Visibility;                     // 0x0088(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue_1;                    // 0x0089(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_8A[0x6];                                       // 0x008A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	TMap<class FString, int32>                    K2Node_MakeMap_Map;                                // 0x0090(0x0050)()
	TMap<class FString, int32>                    K2Node_MakeMap_Map_1;                              // 0x00E0(0x0050)()
	struct FS_ActorTagVisibilityMapWrap           K2Node_MakeStruct_S_ActorTagVisibilityMapWrap;     // 0x0130(0x0050)(HasGetValueTypeHash)
	class ABP_ShelterCameras_C*                   K2Node_CustomEvent_BP_ShelterCameras;              // 0x0180(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         K2Node_CustomEvent_CaptureTotalCount;              // 0x0188(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_18C[0x4];                                      // 0x018C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class ABP_ShelterCameras_C*                   K2Node_CustomEvent_BP_ShelterCameras_3;            // 0x0190(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ABP_ShelterCameras_C*                   K2Node_CustomEvent_BP_ShelterCameras_4;            // 0x0198(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         K2Node_CustomEvent_CaptureIndex;                   // 0x01A0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_CustomEvent_bVisibility;                    // 0x01A4(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_1A5[0x3];                                      // 0x01A5(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class ABP_StreamingRepair_C*                  K2Node_CustomEvent_BP_StreamingRepair;             // 0x01A8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_CustomEvent_bShouldBeVisible;               // 0x01B0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_1B1[0x3];                                      // 0x01B1(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         K2Node_CustomEvent_ShelterLevel;                   // 0x01B4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(SequenceDirector_C_ExecuteUbergraph_SequenceDirector) == 0x000010, "Wrong alignment on SequenceDirector_C_ExecuteUbergraph_SequenceDirector");
static_assert(sizeof(SequenceDirector_C_ExecuteUbergraph_SequenceDirector) == 0x0001C0, "Wrong size on SequenceDirector_C_ExecuteUbergraph_SequenceDirector");
static_assert(offsetof(SequenceDirector_C_ExecuteUbergraph_SequenceDirector, EntryPoint) == 0x000000, "Member 'SequenceDirector_C_ExecuteUbergraph_SequenceDirector::EntryPoint' has a wrong offset!");
static_assert(offsetof(SequenceDirector_C_ExecuteUbergraph_SequenceDirector, K2Node_CustomEvent_BP_AU_SpawnFireworks) == 0x000008, "Member 'SequenceDirector_C_ExecuteUbergraph_SequenceDirector::K2Node_CustomEvent_BP_AU_SpawnFireworks' has a wrong offset!");
static_assert(offsetof(SequenceDirector_C_ExecuteUbergraph_SequenceDirector, K2Node_CustomEvent_BP_ShelterCameras_1) == 0x000010, "Member 'SequenceDirector_C_ExecuteUbergraph_SequenceDirector::K2Node_CustomEvent_BP_ShelterCameras_1' has a wrong offset!");
static_assert(offsetof(SequenceDirector_C_ExecuteUbergraph_SequenceDirector, K2Node_CustomEvent_Index) == 0x000018, "Member 'SequenceDirector_C_ExecuteUbergraph_SequenceDirector::K2Node_CustomEvent_Index' has a wrong offset!");
static_assert(offsetof(SequenceDirector_C_ExecuteUbergraph_SequenceDirector, K2Node_CustomEvent_BP_Mannequin) == 0x000020, "Member 'SequenceDirector_C_ExecuteUbergraph_SequenceDirector::K2Node_CustomEvent_BP_Mannequin' has a wrong offset!");
static_assert(offsetof(SequenceDirector_C_ExecuteUbergraph_SequenceDirector, CallFunc_GetFlameController_ReturnValue) == 0x000028, "Member 'SequenceDirector_C_ExecuteUbergraph_SequenceDirector::CallFunc_GetFlameController_ReturnValue' has a wrong offset!");
static_assert(offsetof(SequenceDirector_C_ExecuteUbergraph_SequenceDirector, K2Node_CustomEvent_BP_ShelterCameras_2) == 0x000030, "Member 'SequenceDirector_C_ExecuteUbergraph_SequenceDirector::K2Node_CustomEvent_BP_ShelterCameras_2' has a wrong offset!");
static_assert(offsetof(SequenceDirector_C_ExecuteUbergraph_SequenceDirector, K2Node_CustomEvent_Index_1) == 0x000038, "Member 'SequenceDirector_C_ExecuteUbergraph_SequenceDirector::K2Node_CustomEvent_Index_1' has a wrong offset!");
static_assert(offsetof(SequenceDirector_C_ExecuteUbergraph_SequenceDirector, K2Node_CustomEvent_OptionalCaptureLocationOffset) == 0x000040, "Member 'SequenceDirector_C_ExecuteUbergraph_SequenceDirector::K2Node_CustomEvent_OptionalCaptureLocationOffset' has a wrong offset!");
static_assert(offsetof(SequenceDirector_C_ExecuteUbergraph_SequenceDirector, CallFunc_IsValid_ReturnValue) == 0x000070, "Member 'SequenceDirector_C_ExecuteUbergraph_SequenceDirector::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(SequenceDirector_C_ExecuteUbergraph_SequenceDirector, CallFunc_GetHumanCharacter_ReturnValue) == 0x000078, "Member 'SequenceDirector_C_ExecuteUbergraph_SequenceDirector::CallFunc_GetHumanCharacter_ReturnValue' has a wrong offset!");
static_assert(offsetof(SequenceDirector_C_ExecuteUbergraph_SequenceDirector, K2Node_CustomEvent_Tag) == 0x000080, "Member 'SequenceDirector_C_ExecuteUbergraph_SequenceDirector::K2Node_CustomEvent_Tag' has a wrong offset!");
static_assert(offsetof(SequenceDirector_C_ExecuteUbergraph_SequenceDirector, K2Node_CustomEvent_Visibility) == 0x000088, "Member 'SequenceDirector_C_ExecuteUbergraph_SequenceDirector::K2Node_CustomEvent_Visibility' has a wrong offset!");
static_assert(offsetof(SequenceDirector_C_ExecuteUbergraph_SequenceDirector, CallFunc_IsValid_ReturnValue_1) == 0x000089, "Member 'SequenceDirector_C_ExecuteUbergraph_SequenceDirector::CallFunc_IsValid_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(SequenceDirector_C_ExecuteUbergraph_SequenceDirector, K2Node_MakeMap_Map) == 0x000090, "Member 'SequenceDirector_C_ExecuteUbergraph_SequenceDirector::K2Node_MakeMap_Map' has a wrong offset!");
static_assert(offsetof(SequenceDirector_C_ExecuteUbergraph_SequenceDirector, K2Node_MakeMap_Map_1) == 0x0000E0, "Member 'SequenceDirector_C_ExecuteUbergraph_SequenceDirector::K2Node_MakeMap_Map_1' has a wrong offset!");
static_assert(offsetof(SequenceDirector_C_ExecuteUbergraph_SequenceDirector, K2Node_MakeStruct_S_ActorTagVisibilityMapWrap) == 0x000130, "Member 'SequenceDirector_C_ExecuteUbergraph_SequenceDirector::K2Node_MakeStruct_S_ActorTagVisibilityMapWrap' has a wrong offset!");
static_assert(offsetof(SequenceDirector_C_ExecuteUbergraph_SequenceDirector, K2Node_CustomEvent_BP_ShelterCameras) == 0x000180, "Member 'SequenceDirector_C_ExecuteUbergraph_SequenceDirector::K2Node_CustomEvent_BP_ShelterCameras' has a wrong offset!");
static_assert(offsetof(SequenceDirector_C_ExecuteUbergraph_SequenceDirector, K2Node_CustomEvent_CaptureTotalCount) == 0x000188, "Member 'SequenceDirector_C_ExecuteUbergraph_SequenceDirector::K2Node_CustomEvent_CaptureTotalCount' has a wrong offset!");
static_assert(offsetof(SequenceDirector_C_ExecuteUbergraph_SequenceDirector, K2Node_CustomEvent_BP_ShelterCameras_3) == 0x000190, "Member 'SequenceDirector_C_ExecuteUbergraph_SequenceDirector::K2Node_CustomEvent_BP_ShelterCameras_3' has a wrong offset!");
static_assert(offsetof(SequenceDirector_C_ExecuteUbergraph_SequenceDirector, K2Node_CustomEvent_BP_ShelterCameras_4) == 0x000198, "Member 'SequenceDirector_C_ExecuteUbergraph_SequenceDirector::K2Node_CustomEvent_BP_ShelterCameras_4' has a wrong offset!");
static_assert(offsetof(SequenceDirector_C_ExecuteUbergraph_SequenceDirector, K2Node_CustomEvent_CaptureIndex) == 0x0001A0, "Member 'SequenceDirector_C_ExecuteUbergraph_SequenceDirector::K2Node_CustomEvent_CaptureIndex' has a wrong offset!");
static_assert(offsetof(SequenceDirector_C_ExecuteUbergraph_SequenceDirector, K2Node_CustomEvent_bVisibility) == 0x0001A4, "Member 'SequenceDirector_C_ExecuteUbergraph_SequenceDirector::K2Node_CustomEvent_bVisibility' has a wrong offset!");
static_assert(offsetof(SequenceDirector_C_ExecuteUbergraph_SequenceDirector, K2Node_CustomEvent_BP_StreamingRepair) == 0x0001A8, "Member 'SequenceDirector_C_ExecuteUbergraph_SequenceDirector::K2Node_CustomEvent_BP_StreamingRepair' has a wrong offset!");
static_assert(offsetof(SequenceDirector_C_ExecuteUbergraph_SequenceDirector, K2Node_CustomEvent_bShouldBeVisible) == 0x0001B0, "Member 'SequenceDirector_C_ExecuteUbergraph_SequenceDirector::K2Node_CustomEvent_bShouldBeVisible' has a wrong offset!");
static_assert(offsetof(SequenceDirector_C_ExecuteUbergraph_SequenceDirector, K2Node_CustomEvent_ShelterLevel) == 0x0001B4, "Member 'SequenceDirector_C_ExecuteUbergraph_SequenceDirector::K2Node_CustomEvent_ShelterLevel' has a wrong offset!");

// Function LS_ShelterLevel2Update.SequenceDirector_C.BP_AU_SpawnFireworks_Event_0
// 0x0008 (0x0008 - 0x0000)
struct SequenceDirector_C_BP_AU_SpawnFireworks_Event_0 final
{
public:
	class ABP_AU_SpawnFireworks_C*                BP_AU_SpawnFireworks;                              // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(SequenceDirector_C_BP_AU_SpawnFireworks_Event_0) == 0x000008, "Wrong alignment on SequenceDirector_C_BP_AU_SpawnFireworks_Event_0");
static_assert(sizeof(SequenceDirector_C_BP_AU_SpawnFireworks_Event_0) == 0x000008, "Wrong size on SequenceDirector_C_BP_AU_SpawnFireworks_Event_0");
static_assert(offsetof(SequenceDirector_C_BP_AU_SpawnFireworks_Event_0, BP_AU_SpawnFireworks) == 0x000000, "Member 'SequenceDirector_C_BP_AU_SpawnFireworks_Event_0::BP_AU_SpawnFireworks' has a wrong offset!");

// Function LS_ShelterLevel2Update.SequenceDirector_C.CaptureAllUsedCameras
// 0x0010 (0x0010 - 0x0000)
struct SequenceDirector_C_CaptureAllUsedCameras final
{
public:
	class ABP_ShelterCameras_C*                   BP_ShelterCameras;                                 // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CaptureTotalCount;                                 // 0x0008(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(SequenceDirector_C_CaptureAllUsedCameras) == 0x000008, "Wrong alignment on SequenceDirector_C_CaptureAllUsedCameras");
static_assert(sizeof(SequenceDirector_C_CaptureAllUsedCameras) == 0x000010, "Wrong size on SequenceDirector_C_CaptureAllUsedCameras");
static_assert(offsetof(SequenceDirector_C_CaptureAllUsedCameras, BP_ShelterCameras) == 0x000000, "Member 'SequenceDirector_C_CaptureAllUsedCameras::BP_ShelterCameras' has a wrong offset!");
static_assert(offsetof(SequenceDirector_C_CaptureAllUsedCameras, CaptureTotalCount) == 0x000008, "Member 'SequenceDirector_C_CaptureAllUsedCameras::CaptureTotalCount' has a wrong offset!");

// Function LS_ShelterLevel2Update.SequenceDirector_C.SetScafoldingVIsibilityByTag
// 0x000C (0x000C - 0x0000)
struct SequenceDirector_C_SetScafoldingVIsibilityByTag final
{
public:
	class FName                                   Tag;                                               // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Visibility;                                        // 0x0008(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(SequenceDirector_C_SetScafoldingVIsibilityByTag) == 0x000004, "Wrong alignment on SequenceDirector_C_SetScafoldingVIsibilityByTag");
static_assert(sizeof(SequenceDirector_C_SetScafoldingVIsibilityByTag) == 0x00000C, "Wrong size on SequenceDirector_C_SetScafoldingVIsibilityByTag");
static_assert(offsetof(SequenceDirector_C_SetScafoldingVIsibilityByTag, Tag) == 0x000000, "Member 'SequenceDirector_C_SetScafoldingVIsibilityByTag::Tag' has a wrong offset!");
static_assert(offsetof(SequenceDirector_C_SetScafoldingVIsibilityByTag, Visibility) == 0x000008, "Member 'SequenceDirector_C_SetScafoldingVIsibilityByTag::Visibility' has a wrong offset!");

// Function LS_ShelterLevel2Update.SequenceDirector_C.UsePlayerCosmetics
// 0x0008 (0x0008 - 0x0000)
struct SequenceDirector_C_UsePlayerCosmetics final
{
public:
	class ABP_Mannequin_C*                        BP_Mannequin;                                      // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(SequenceDirector_C_UsePlayerCosmetics) == 0x000008, "Wrong alignment on SequenceDirector_C_UsePlayerCosmetics");
static_assert(sizeof(SequenceDirector_C_UsePlayerCosmetics) == 0x000008, "Wrong size on SequenceDirector_C_UsePlayerCosmetics");
static_assert(offsetof(SequenceDirector_C_UsePlayerCosmetics, BP_Mannequin) == 0x000000, "Member 'SequenceDirector_C_UsePlayerCosmetics::BP_Mannequin' has a wrong offset!");

// Function LS_ShelterLevel2Update.SequenceDirector_C.CaptureFromHelper
// 0x0010 (0x0010 - 0x0000)
struct SequenceDirector_C_CaptureFromHelper final
{
public:
	class ABP_ShelterCameras_C*                   BP_ShelterCameras;                                 // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Index_0;                                           // 0x0008(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(SequenceDirector_C_CaptureFromHelper) == 0x000008, "Wrong alignment on SequenceDirector_C_CaptureFromHelper");
static_assert(sizeof(SequenceDirector_C_CaptureFromHelper) == 0x000010, "Wrong size on SequenceDirector_C_CaptureFromHelper");
static_assert(offsetof(SequenceDirector_C_CaptureFromHelper, BP_ShelterCameras) == 0x000000, "Member 'SequenceDirector_C_CaptureFromHelper::BP_ShelterCameras' has a wrong offset!");
static_assert(offsetof(SequenceDirector_C_CaptureFromHelper, Index_0) == 0x000008, "Member 'SequenceDirector_C_CaptureFromHelper::Index_0' has a wrong offset!");

// Function LS_ShelterLevel2Update.SequenceDirector_C.CaptureUpgradeSnapshot
// 0x0040 (0x0040 - 0x0000)
struct SequenceDirector_C_CaptureUpgradeSnapshot final
{
public:
	class ABP_ShelterCameras_C*                   BP_ShelterCameras;                                 // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Index_0;                                           // 0x0008(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             OptionalCaptureLocationOffset;                     // 0x0010(0x0030)(BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor)
};
static_assert(alignof(SequenceDirector_C_CaptureUpgradeSnapshot) == 0x000010, "Wrong alignment on SequenceDirector_C_CaptureUpgradeSnapshot");
static_assert(sizeof(SequenceDirector_C_CaptureUpgradeSnapshot) == 0x000040, "Wrong size on SequenceDirector_C_CaptureUpgradeSnapshot");
static_assert(offsetof(SequenceDirector_C_CaptureUpgradeSnapshot, BP_ShelterCameras) == 0x000000, "Member 'SequenceDirector_C_CaptureUpgradeSnapshot::BP_ShelterCameras' has a wrong offset!");
static_assert(offsetof(SequenceDirector_C_CaptureUpgradeSnapshot, Index_0) == 0x000008, "Member 'SequenceDirector_C_CaptureUpgradeSnapshot::Index_0' has a wrong offset!");
static_assert(offsetof(SequenceDirector_C_CaptureUpgradeSnapshot, OptionalCaptureLocationOffset) == 0x000010, "Member 'SequenceDirector_C_CaptureUpgradeSnapshot::OptionalCaptureLocationOffset' has a wrong offset!");

// Function LS_ShelterLevel2Update.SequenceDirector_C.UpdateDetailsTabNextStep
// 0x0008 (0x0008 - 0x0000)
struct SequenceDirector_C_UpdateDetailsTabNextStep final
{
public:
	class ABP_ShelterCameras_C*                   BP_ShelterCameras;                                 // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(SequenceDirector_C_UpdateDetailsTabNextStep) == 0x000008, "Wrong alignment on SequenceDirector_C_UpdateDetailsTabNextStep");
static_assert(sizeof(SequenceDirector_C_UpdateDetailsTabNextStep) == 0x000008, "Wrong size on SequenceDirector_C_UpdateDetailsTabNextStep");
static_assert(offsetof(SequenceDirector_C_UpdateDetailsTabNextStep, BP_ShelterCameras) == 0x000000, "Member 'SequenceDirector_C_UpdateDetailsTabNextStep::BP_ShelterCameras' has a wrong offset!");

// Function LS_ShelterLevel2Update.SequenceDirector_C.SetPhotoVisibility
// 0x0010 (0x0010 - 0x0000)
struct SequenceDirector_C_SetPhotoVisibility final
{
public:
	class ABP_ShelterCameras_C*                   BP_ShelterCameras;                                 // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CaptureIndex;                                      // 0x0008(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bVisibility;                                       // 0x000C(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(SequenceDirector_C_SetPhotoVisibility) == 0x000008, "Wrong alignment on SequenceDirector_C_SetPhotoVisibility");
static_assert(sizeof(SequenceDirector_C_SetPhotoVisibility) == 0x000010, "Wrong size on SequenceDirector_C_SetPhotoVisibility");
static_assert(offsetof(SequenceDirector_C_SetPhotoVisibility, BP_ShelterCameras) == 0x000000, "Member 'SequenceDirector_C_SetPhotoVisibility::BP_ShelterCameras' has a wrong offset!");
static_assert(offsetof(SequenceDirector_C_SetPhotoVisibility, CaptureIndex) == 0x000008, "Member 'SequenceDirector_C_SetPhotoVisibility::CaptureIndex' has a wrong offset!");
static_assert(offsetof(SequenceDirector_C_SetPhotoVisibility, bVisibility) == 0x00000C, "Member 'SequenceDirector_C_SetPhotoVisibility::bVisibility' has a wrong offset!");

// Function LS_ShelterLevel2Update.SequenceDirector_C.SetSeublevelVisibility
// 0x0010 (0x0010 - 0x0000)
struct SequenceDirector_C_SetSeublevelVisibility final
{
public:
	class ABP_StreamingRepair_C*                  BP_StreamingRepair;                                // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bShouldBeVisible;                                  // 0x0008(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         ShelterLevel;                                      // 0x000C(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(SequenceDirector_C_SetSeublevelVisibility) == 0x000008, "Wrong alignment on SequenceDirector_C_SetSeublevelVisibility");
static_assert(sizeof(SequenceDirector_C_SetSeublevelVisibility) == 0x000010, "Wrong size on SequenceDirector_C_SetSeublevelVisibility");
static_assert(offsetof(SequenceDirector_C_SetSeublevelVisibility, BP_StreamingRepair) == 0x000000, "Member 'SequenceDirector_C_SetSeublevelVisibility::BP_StreamingRepair' has a wrong offset!");
static_assert(offsetof(SequenceDirector_C_SetSeublevelVisibility, bShouldBeVisible) == 0x000008, "Member 'SequenceDirector_C_SetSeublevelVisibility::bShouldBeVisible' has a wrong offset!");
static_assert(offsetof(SequenceDirector_C_SetSeublevelVisibility, ShelterLevel) == 0x00000C, "Member 'SequenceDirector_C_SetSeublevelVisibility::ShelterLevel' has a wrong offset!");

// Function LS_ShelterLevel2Update.SequenceDirector_C.SequenceEvent__ENTRYPOINTSequenceDirector_0
// 0x0008 (0x0008 - 0x0000)
struct SequenceDirector_C_SequenceEvent__ENTRYPOINTSequenceDirector_0 final
{
public:
	class ABP_ShelterCameras_C*                   BP_ShelterCameras;                                 // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(SequenceDirector_C_SequenceEvent__ENTRYPOINTSequenceDirector_0) == 0x000008, "Wrong alignment on SequenceDirector_C_SequenceEvent__ENTRYPOINTSequenceDirector_0");
static_assert(sizeof(SequenceDirector_C_SequenceEvent__ENTRYPOINTSequenceDirector_0) == 0x000008, "Wrong size on SequenceDirector_C_SequenceEvent__ENTRYPOINTSequenceDirector_0");
static_assert(offsetof(SequenceDirector_C_SequenceEvent__ENTRYPOINTSequenceDirector_0, BP_ShelterCameras) == 0x000000, "Member 'SequenceDirector_C_SequenceEvent__ENTRYPOINTSequenceDirector_0::BP_ShelterCameras' has a wrong offset!");

// Function LS_ShelterLevel2Update.SequenceDirector_C.SequenceEvent__ENTRYPOINTSequenceDirector_1
// 0x0008 (0x0008 - 0x0000)
struct SequenceDirector_C_SequenceEvent__ENTRYPOINTSequenceDirector_1 final
{
public:
	class ABP_ShelterCameras_C*                   BP_ShelterCameras;                                 // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(SequenceDirector_C_SequenceEvent__ENTRYPOINTSequenceDirector_1) == 0x000008, "Wrong alignment on SequenceDirector_C_SequenceEvent__ENTRYPOINTSequenceDirector_1");
static_assert(sizeof(SequenceDirector_C_SequenceEvent__ENTRYPOINTSequenceDirector_1) == 0x000008, "Wrong size on SequenceDirector_C_SequenceEvent__ENTRYPOINTSequenceDirector_1");
static_assert(offsetof(SequenceDirector_C_SequenceEvent__ENTRYPOINTSequenceDirector_1, BP_ShelterCameras) == 0x000000, "Member 'SequenceDirector_C_SequenceEvent__ENTRYPOINTSequenceDirector_1::BP_ShelterCameras' has a wrong offset!");

// Function LS_ShelterLevel2Update.SequenceDirector_C.SequenceEvent__ENTRYPOINTSequenceDirector_2
// 0x0008 (0x0008 - 0x0000)
struct SequenceDirector_C_SequenceEvent__ENTRYPOINTSequenceDirector_2 final
{
public:
	class ABP_ShelterCameras_C*                   BP_ShelterCameras;                                 // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(SequenceDirector_C_SequenceEvent__ENTRYPOINTSequenceDirector_2) == 0x000008, "Wrong alignment on SequenceDirector_C_SequenceEvent__ENTRYPOINTSequenceDirector_2");
static_assert(sizeof(SequenceDirector_C_SequenceEvent__ENTRYPOINTSequenceDirector_2) == 0x000008, "Wrong size on SequenceDirector_C_SequenceEvent__ENTRYPOINTSequenceDirector_2");
static_assert(offsetof(SequenceDirector_C_SequenceEvent__ENTRYPOINTSequenceDirector_2, BP_ShelterCameras) == 0x000000, "Member 'SequenceDirector_C_SequenceEvent__ENTRYPOINTSequenceDirector_2::BP_ShelterCameras' has a wrong offset!");

// Function LS_ShelterLevel2Update.SequenceDirector_C.SequenceEvent__ENTRYPOINTSequenceDirector_3
// 0x0008 (0x0008 - 0x0000)
struct SequenceDirector_C_SequenceEvent__ENTRYPOINTSequenceDirector_3 final
{
public:
	class ABP_ShelterCameras_C*                   BP_ShelterCameras;                                 // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(SequenceDirector_C_SequenceEvent__ENTRYPOINTSequenceDirector_3) == 0x000008, "Wrong alignment on SequenceDirector_C_SequenceEvent__ENTRYPOINTSequenceDirector_3");
static_assert(sizeof(SequenceDirector_C_SequenceEvent__ENTRYPOINTSequenceDirector_3) == 0x000008, "Wrong size on SequenceDirector_C_SequenceEvent__ENTRYPOINTSequenceDirector_3");
static_assert(offsetof(SequenceDirector_C_SequenceEvent__ENTRYPOINTSequenceDirector_3, BP_ShelterCameras) == 0x000000, "Member 'SequenceDirector_C_SequenceEvent__ENTRYPOINTSequenceDirector_3::BP_ShelterCameras' has a wrong offset!");

// Function LS_ShelterLevel2Update.SequenceDirector_C.SequenceEvent__ENTRYPOINTSequenceDirector_4
// 0x0008 (0x0008 - 0x0000)
struct SequenceDirector_C_SequenceEvent__ENTRYPOINTSequenceDirector_4 final
{
public:
	class ABP_ShelterCameras_C*                   BP_ShelterCameras;                                 // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(SequenceDirector_C_SequenceEvent__ENTRYPOINTSequenceDirector_4) == 0x000008, "Wrong alignment on SequenceDirector_C_SequenceEvent__ENTRYPOINTSequenceDirector_4");
static_assert(sizeof(SequenceDirector_C_SequenceEvent__ENTRYPOINTSequenceDirector_4) == 0x000008, "Wrong size on SequenceDirector_C_SequenceEvent__ENTRYPOINTSequenceDirector_4");
static_assert(offsetof(SequenceDirector_C_SequenceEvent__ENTRYPOINTSequenceDirector_4, BP_ShelterCameras) == 0x000000, "Member 'SequenceDirector_C_SequenceEvent__ENTRYPOINTSequenceDirector_4::BP_ShelterCameras' has a wrong offset!");

// Function LS_ShelterLevel2Update.SequenceDirector_C.SequenceEvent__ENTRYPOINTSequenceDirector_5
// 0x0008 (0x0008 - 0x0000)
struct SequenceDirector_C_SequenceEvent__ENTRYPOINTSequenceDirector_5 final
{
public:
	class ABP_ShelterCameras_C*                   BP_ShelterCameras;                                 // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(SequenceDirector_C_SequenceEvent__ENTRYPOINTSequenceDirector_5) == 0x000008, "Wrong alignment on SequenceDirector_C_SequenceEvent__ENTRYPOINTSequenceDirector_5");
static_assert(sizeof(SequenceDirector_C_SequenceEvent__ENTRYPOINTSequenceDirector_5) == 0x000008, "Wrong size on SequenceDirector_C_SequenceEvent__ENTRYPOINTSequenceDirector_5");
static_assert(offsetof(SequenceDirector_C_SequenceEvent__ENTRYPOINTSequenceDirector_5, BP_ShelterCameras) == 0x000000, "Member 'SequenceDirector_C_SequenceEvent__ENTRYPOINTSequenceDirector_5::BP_ShelterCameras' has a wrong offset!");

// Function LS_ShelterLevel2Update.SequenceDirector_C.SequenceEvent__ENTRYPOINTSequenceDirector_6
// 0x0008 (0x0008 - 0x0000)
struct SequenceDirector_C_SequenceEvent__ENTRYPOINTSequenceDirector_6 final
{
public:
	class ABP_StreamingRepair_C*                  BP_StreamingRepair;                                // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(SequenceDirector_C_SequenceEvent__ENTRYPOINTSequenceDirector_6) == 0x000008, "Wrong alignment on SequenceDirector_C_SequenceEvent__ENTRYPOINTSequenceDirector_6");
static_assert(sizeof(SequenceDirector_C_SequenceEvent__ENTRYPOINTSequenceDirector_6) == 0x000008, "Wrong size on SequenceDirector_C_SequenceEvent__ENTRYPOINTSequenceDirector_6");
static_assert(offsetof(SequenceDirector_C_SequenceEvent__ENTRYPOINTSequenceDirector_6, BP_StreamingRepair) == 0x000000, "Member 'SequenceDirector_C_SequenceEvent__ENTRYPOINTSequenceDirector_6::BP_StreamingRepair' has a wrong offset!");

// Function LS_ShelterLevel2Update.SequenceDirector_C.SequenceEvent__ENTRYPOINTSequenceDirector_7
// 0x0008 (0x0008 - 0x0000)
struct SequenceDirector_C_SequenceEvent__ENTRYPOINTSequenceDirector_7 final
{
public:
	class ABP_StreamingRepair_C*                  BP_StreamingRepair;                                // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(SequenceDirector_C_SequenceEvent__ENTRYPOINTSequenceDirector_7) == 0x000008, "Wrong alignment on SequenceDirector_C_SequenceEvent__ENTRYPOINTSequenceDirector_7");
static_assert(sizeof(SequenceDirector_C_SequenceEvent__ENTRYPOINTSequenceDirector_7) == 0x000008, "Wrong size on SequenceDirector_C_SequenceEvent__ENTRYPOINTSequenceDirector_7");
static_assert(offsetof(SequenceDirector_C_SequenceEvent__ENTRYPOINTSequenceDirector_7, BP_StreamingRepair) == 0x000000, "Member 'SequenceDirector_C_SequenceEvent__ENTRYPOINTSequenceDirector_7::BP_StreamingRepair' has a wrong offset!");

// Function LS_ShelterLevel2Update.SequenceDirector_C.SequenceEvent__ENTRYPOINTSequenceDirector_8
// 0x0008 (0x0008 - 0x0000)
struct SequenceDirector_C_SequenceEvent__ENTRYPOINTSequenceDirector_8 final
{
public:
	class ABP_ShelterCameras_C*                   BP_ShelterCameras;                                 // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(SequenceDirector_C_SequenceEvent__ENTRYPOINTSequenceDirector_8) == 0x000008, "Wrong alignment on SequenceDirector_C_SequenceEvent__ENTRYPOINTSequenceDirector_8");
static_assert(sizeof(SequenceDirector_C_SequenceEvent__ENTRYPOINTSequenceDirector_8) == 0x000008, "Wrong size on SequenceDirector_C_SequenceEvent__ENTRYPOINTSequenceDirector_8");
static_assert(offsetof(SequenceDirector_C_SequenceEvent__ENTRYPOINTSequenceDirector_8, BP_ShelterCameras) == 0x000000, "Member 'SequenceDirector_C_SequenceEvent__ENTRYPOINTSequenceDirector_8::BP_ShelterCameras' has a wrong offset!");

// Function LS_ShelterLevel2Update.SequenceDirector_C.SequenceEvent__ENTRYPOINTSequenceDirector_9
// 0x0008 (0x0008 - 0x0000)
struct SequenceDirector_C_SequenceEvent__ENTRYPOINTSequenceDirector_9 final
{
public:
	class ABP_ShelterCameras_C*                   BP_ShelterCameras;                                 // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(SequenceDirector_C_SequenceEvent__ENTRYPOINTSequenceDirector_9) == 0x000008, "Wrong alignment on SequenceDirector_C_SequenceEvent__ENTRYPOINTSequenceDirector_9");
static_assert(sizeof(SequenceDirector_C_SequenceEvent__ENTRYPOINTSequenceDirector_9) == 0x000008, "Wrong size on SequenceDirector_C_SequenceEvent__ENTRYPOINTSequenceDirector_9");
static_assert(offsetof(SequenceDirector_C_SequenceEvent__ENTRYPOINTSequenceDirector_9, BP_ShelterCameras) == 0x000000, "Member 'SequenceDirector_C_SequenceEvent__ENTRYPOINTSequenceDirector_9::BP_ShelterCameras' has a wrong offset!");

// Function LS_ShelterLevel2Update.SequenceDirector_C.SequenceEvent__ENTRYPOINTSequenceDirector_10
// 0x0008 (0x0008 - 0x0000)
struct SequenceDirector_C_SequenceEvent__ENTRYPOINTSequenceDirector_10 final
{
public:
	class ABP_ShelterCameras_C*                   BP_ShelterCameras;                                 // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(SequenceDirector_C_SequenceEvent__ENTRYPOINTSequenceDirector_10) == 0x000008, "Wrong alignment on SequenceDirector_C_SequenceEvent__ENTRYPOINTSequenceDirector_10");
static_assert(sizeof(SequenceDirector_C_SequenceEvent__ENTRYPOINTSequenceDirector_10) == 0x000008, "Wrong size on SequenceDirector_C_SequenceEvent__ENTRYPOINTSequenceDirector_10");
static_assert(offsetof(SequenceDirector_C_SequenceEvent__ENTRYPOINTSequenceDirector_10, BP_ShelterCameras) == 0x000000, "Member 'SequenceDirector_C_SequenceEvent__ENTRYPOINTSequenceDirector_10::BP_ShelterCameras' has a wrong offset!");

// Function LS_ShelterLevel2Update.SequenceDirector_C.SequenceEvent__ENTRYPOINTSequenceDirector_11
// 0x0008 (0x0008 - 0x0000)
struct SequenceDirector_C_SequenceEvent__ENTRYPOINTSequenceDirector_11 final
{
public:
	class ABP_ShelterCameras_C*                   BP_ShelterCameras;                                 // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(SequenceDirector_C_SequenceEvent__ENTRYPOINTSequenceDirector_11) == 0x000008, "Wrong alignment on SequenceDirector_C_SequenceEvent__ENTRYPOINTSequenceDirector_11");
static_assert(sizeof(SequenceDirector_C_SequenceEvent__ENTRYPOINTSequenceDirector_11) == 0x000008, "Wrong size on SequenceDirector_C_SequenceEvent__ENTRYPOINTSequenceDirector_11");
static_assert(offsetof(SequenceDirector_C_SequenceEvent__ENTRYPOINTSequenceDirector_11, BP_ShelterCameras) == 0x000000, "Member 'SequenceDirector_C_SequenceEvent__ENTRYPOINTSequenceDirector_11::BP_ShelterCameras' has a wrong offset!");

// Function LS_ShelterLevel2Update.SequenceDirector_C.SequenceEvent__ENTRYPOINTSequenceDirector_12
// 0x0008 (0x0008 - 0x0000)
struct SequenceDirector_C_SequenceEvent__ENTRYPOINTSequenceDirector_12 final
{
public:
	class ABP_ShelterCameras_C*                   BP_ShelterCameras;                                 // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(SequenceDirector_C_SequenceEvent__ENTRYPOINTSequenceDirector_12) == 0x000008, "Wrong alignment on SequenceDirector_C_SequenceEvent__ENTRYPOINTSequenceDirector_12");
static_assert(sizeof(SequenceDirector_C_SequenceEvent__ENTRYPOINTSequenceDirector_12) == 0x000008, "Wrong size on SequenceDirector_C_SequenceEvent__ENTRYPOINTSequenceDirector_12");
static_assert(offsetof(SequenceDirector_C_SequenceEvent__ENTRYPOINTSequenceDirector_12, BP_ShelterCameras) == 0x000000, "Member 'SequenceDirector_C_SequenceEvent__ENTRYPOINTSequenceDirector_12::BP_ShelterCameras' has a wrong offset!");

// Function LS_ShelterLevel2Update.SequenceDirector_C.SequenceEvent__ENTRYPOINTSequenceDirector_13
// 0x0008 (0x0008 - 0x0000)
struct SequenceDirector_C_SequenceEvent__ENTRYPOINTSequenceDirector_13 final
{
public:
	class ABP_ShelterCameras_C*                   BP_ShelterCameras;                                 // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(SequenceDirector_C_SequenceEvent__ENTRYPOINTSequenceDirector_13) == 0x000008, "Wrong alignment on SequenceDirector_C_SequenceEvent__ENTRYPOINTSequenceDirector_13");
static_assert(sizeof(SequenceDirector_C_SequenceEvent__ENTRYPOINTSequenceDirector_13) == 0x000008, "Wrong size on SequenceDirector_C_SequenceEvent__ENTRYPOINTSequenceDirector_13");
static_assert(offsetof(SequenceDirector_C_SequenceEvent__ENTRYPOINTSequenceDirector_13, BP_ShelterCameras) == 0x000000, "Member 'SequenceDirector_C_SequenceEvent__ENTRYPOINTSequenceDirector_13::BP_ShelterCameras' has a wrong offset!");

// Function LS_ShelterLevel2Update.SequenceDirector_C.SequenceEvent__ENTRYPOINTSequenceDirector_14
// 0x0008 (0x0008 - 0x0000)
struct SequenceDirector_C_SequenceEvent__ENTRYPOINTSequenceDirector_14 final
{
public:
	class ABP_Mannequin_C*                        BP_Mannequin;                                      // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(SequenceDirector_C_SequenceEvent__ENTRYPOINTSequenceDirector_14) == 0x000008, "Wrong alignment on SequenceDirector_C_SequenceEvent__ENTRYPOINTSequenceDirector_14");
static_assert(sizeof(SequenceDirector_C_SequenceEvent__ENTRYPOINTSequenceDirector_14) == 0x000008, "Wrong size on SequenceDirector_C_SequenceEvent__ENTRYPOINTSequenceDirector_14");
static_assert(offsetof(SequenceDirector_C_SequenceEvent__ENTRYPOINTSequenceDirector_14, BP_Mannequin) == 0x000000, "Member 'SequenceDirector_C_SequenceEvent__ENTRYPOINTSequenceDirector_14::BP_Mannequin' has a wrong offset!");

// Function LS_ShelterLevel2Update.SequenceDirector_C.SequenceEvent__ENTRYPOINTSequenceDirector_21
// 0x0008 (0x0008 - 0x0000)
struct SequenceDirector_C_SequenceEvent__ENTRYPOINTSequenceDirector_21 final
{
public:
	class ABP_ShelterCameras_C*                   BP_ShelterCameras;                                 // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(SequenceDirector_C_SequenceEvent__ENTRYPOINTSequenceDirector_21) == 0x000008, "Wrong alignment on SequenceDirector_C_SequenceEvent__ENTRYPOINTSequenceDirector_21");
static_assert(sizeof(SequenceDirector_C_SequenceEvent__ENTRYPOINTSequenceDirector_21) == 0x000008, "Wrong size on SequenceDirector_C_SequenceEvent__ENTRYPOINTSequenceDirector_21");
static_assert(offsetof(SequenceDirector_C_SequenceEvent__ENTRYPOINTSequenceDirector_21, BP_ShelterCameras) == 0x000000, "Member 'SequenceDirector_C_SequenceEvent__ENTRYPOINTSequenceDirector_21::BP_ShelterCameras' has a wrong offset!");

// Function LS_ShelterLevel2Update.SequenceDirector_C.SequenceEvent__ENTRYPOINTSequenceDirector_22
// 0x0008 (0x0008 - 0x0000)
struct SequenceDirector_C_SequenceEvent__ENTRYPOINTSequenceDirector_22 final
{
public:
	class ABP_ShelterCameras_C*                   BP_ShelterCameras;                                 // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(SequenceDirector_C_SequenceEvent__ENTRYPOINTSequenceDirector_22) == 0x000008, "Wrong alignment on SequenceDirector_C_SequenceEvent__ENTRYPOINTSequenceDirector_22");
static_assert(sizeof(SequenceDirector_C_SequenceEvent__ENTRYPOINTSequenceDirector_22) == 0x000008, "Wrong size on SequenceDirector_C_SequenceEvent__ENTRYPOINTSequenceDirector_22");
static_assert(offsetof(SequenceDirector_C_SequenceEvent__ENTRYPOINTSequenceDirector_22, BP_ShelterCameras) == 0x000000, "Member 'SequenceDirector_C_SequenceEvent__ENTRYPOINTSequenceDirector_22::BP_ShelterCameras' has a wrong offset!");

// Function LS_ShelterLevel2Update.SequenceDirector_C.SequenceEvent__ENTRYPOINTSequenceDirector_23
// 0x0008 (0x0008 - 0x0000)
struct SequenceDirector_C_SequenceEvent__ENTRYPOINTSequenceDirector_23 final
{
public:
	class ABP_ShelterCameras_C*                   BP_ShelterCameras;                                 // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(SequenceDirector_C_SequenceEvent__ENTRYPOINTSequenceDirector_23) == 0x000008, "Wrong alignment on SequenceDirector_C_SequenceEvent__ENTRYPOINTSequenceDirector_23");
static_assert(sizeof(SequenceDirector_C_SequenceEvent__ENTRYPOINTSequenceDirector_23) == 0x000008, "Wrong size on SequenceDirector_C_SequenceEvent__ENTRYPOINTSequenceDirector_23");
static_assert(offsetof(SequenceDirector_C_SequenceEvent__ENTRYPOINTSequenceDirector_23, BP_ShelterCameras) == 0x000000, "Member 'SequenceDirector_C_SequenceEvent__ENTRYPOINTSequenceDirector_23::BP_ShelterCameras' has a wrong offset!");

// Function LS_ShelterLevel2Update.SequenceDirector_C.SequenceEvent__ENTRYPOINTSequenceDirector_24
// 0x0008 (0x0008 - 0x0000)
struct SequenceDirector_C_SequenceEvent__ENTRYPOINTSequenceDirector_24 final
{
public:
	class ABP_StreamingRepair_C*                  BP_StreamingRepair;                                // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(SequenceDirector_C_SequenceEvent__ENTRYPOINTSequenceDirector_24) == 0x000008, "Wrong alignment on SequenceDirector_C_SequenceEvent__ENTRYPOINTSequenceDirector_24");
static_assert(sizeof(SequenceDirector_C_SequenceEvent__ENTRYPOINTSequenceDirector_24) == 0x000008, "Wrong size on SequenceDirector_C_SequenceEvent__ENTRYPOINTSequenceDirector_24");
static_assert(offsetof(SequenceDirector_C_SequenceEvent__ENTRYPOINTSequenceDirector_24, BP_StreamingRepair) == 0x000000, "Member 'SequenceDirector_C_SequenceEvent__ENTRYPOINTSequenceDirector_24::BP_StreamingRepair' has a wrong offset!");

// Function LS_ShelterLevel2Update.SequenceDirector_C.SequenceEvent__ENTRYPOINTSequenceDirector_25
// 0x0008 (0x0008 - 0x0000)
struct SequenceDirector_C_SequenceEvent__ENTRYPOINTSequenceDirector_25 final
{
public:
	class ABP_StreamingRepair_C*                  BP_StreamingRepair;                                // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(SequenceDirector_C_SequenceEvent__ENTRYPOINTSequenceDirector_25) == 0x000008, "Wrong alignment on SequenceDirector_C_SequenceEvent__ENTRYPOINTSequenceDirector_25");
static_assert(sizeof(SequenceDirector_C_SequenceEvent__ENTRYPOINTSequenceDirector_25) == 0x000008, "Wrong size on SequenceDirector_C_SequenceEvent__ENTRYPOINTSequenceDirector_25");
static_assert(offsetof(SequenceDirector_C_SequenceEvent__ENTRYPOINTSequenceDirector_25, BP_StreamingRepair) == 0x000000, "Member 'SequenceDirector_C_SequenceEvent__ENTRYPOINTSequenceDirector_25::BP_StreamingRepair' has a wrong offset!");

// Function LS_ShelterLevel2Update.SequenceDirector_C.SequenceEvent__ENTRYPOINTSequenceDirector_26
// 0x0008 (0x0008 - 0x0000)
struct SequenceDirector_C_SequenceEvent__ENTRYPOINTSequenceDirector_26 final
{
public:
	class ABP_AU_SpawnFireworks_C*                BP_AU_SpawnFireworks;                              // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(SequenceDirector_C_SequenceEvent__ENTRYPOINTSequenceDirector_26) == 0x000008, "Wrong alignment on SequenceDirector_C_SequenceEvent__ENTRYPOINTSequenceDirector_26");
static_assert(sizeof(SequenceDirector_C_SequenceEvent__ENTRYPOINTSequenceDirector_26) == 0x000008, "Wrong size on SequenceDirector_C_SequenceEvent__ENTRYPOINTSequenceDirector_26");
static_assert(offsetof(SequenceDirector_C_SequenceEvent__ENTRYPOINTSequenceDirector_26, BP_AU_SpawnFireworks) == 0x000000, "Member 'SequenceDirector_C_SequenceEvent__ENTRYPOINTSequenceDirector_26::BP_AU_SpawnFireworks' has a wrong offset!");

}

