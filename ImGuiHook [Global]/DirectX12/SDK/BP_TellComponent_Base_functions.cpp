#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_TellComponent_Base

#include "Basic.hpp"

#include "BP_TellComponent_Base_classes.hpp"
#include "BP_TellComponent_Base_parameters.hpp"


namespace SDK
{

// Function BP_TellComponent_Base.BP_TellComponent_Base_C.ExecuteUbergraph_BP_TellComponent_Base
// (Final, UbergraphFunction, HasDefaults)
// Parameters:
// int32                                   EntryPoint                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_TellComponent_Base_C::ExecuteUbergraph_BP_TellComponent_Base(int32 EntryPoint)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_TellComponent_Base_C", "ExecuteUbergraph_BP_TellComponent_Base");

	Params::BP_TellComponent_Base_C_ExecuteUbergraph_BP_TellComponent_Base Parms{};

	Parms.EntryPoint = EntryPoint;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_TellComponent_Base.BP_TellComponent_Base_C.NetworkPlayTellEffect
// (Net, NetReliable, NetMulticast, BlueprintCallable, BlueprintEvent)

void UBP_TellComponent_Base_C::NetworkPlayTellEffect()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_TellComponent_Base_C", "NetworkPlayTellEffect");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_TellComponent_Base.BP_TellComponent_Base_C.EncounterStarted
// (BlueprintCallable, BlueprintEvent)

void UBP_TellComponent_Base_C::EncounterStarted()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_TellComponent_Base_C", "EncounterStarted");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_TellComponent_Base.BP_TellComponent_Base_C.ReceiveBeginPlay
// (Event, Public, BlueprintEvent)

void UBP_TellComponent_Base_C::ReceiveBeginPlay()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_TellComponent_Base_C", "ReceiveBeginPlay");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_TellComponent_Base.BP_TellComponent_Base_C.OnBeginOverlap
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// class UPrimitiveComponent*              OverlappedComponent                                    (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class AActor*                           OtherActor                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class UPrimitiveComponent*              OtherComp                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   OtherBodyIndex                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    bFromSweep                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// struct FHitResult                       SweepResult                                            (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, ContainsInstancedReference)

void UBP_TellComponent_Base_C::OnBeginOverlap(class UPrimitiveComponent* OverlappedComponent, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, int32 OtherBodyIndex, bool bFromSweep, const struct FHitResult& SweepResult)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_TellComponent_Base_C", "OnBeginOverlap");

	Params::BP_TellComponent_Base_C_OnBeginOverlap Parms{};

	Parms.OverlappedComponent = OverlappedComponent;
	Parms.OtherActor = OtherActor;
	Parms.OtherComp = OtherComp;
	Parms.OtherBodyIndex = OtherBodyIndex;
	Parms.bFromSweep = bFromSweep;
	Parms.SweepResult = std::move(SweepResult);

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_TellComponent_Base.BP_TellComponent_Base_C.OnEndOverlap
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class UPrimitiveComponent*              OverlappedComponent                                    (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class AActor*                           OtherActor                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class UPrimitiveComponent*              OtherComp                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   OtherBodyIndex                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_TellComponent_Base_C::OnEndOverlap(class UPrimitiveComponent* OverlappedComponent, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, int32 OtherBodyIndex)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_TellComponent_Base_C", "OnEndOverlap");

	Params::BP_TellComponent_Base_C_OnEndOverlap Parms{};

	Parms.OverlappedComponent = OverlappedComponent;
	Parms.OtherActor = OtherActor;
	Parms.OtherComp = OtherComp;
	Parms.OtherBodyIndex = OtherBodyIndex;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_TellComponent_Base.BP_TellComponent_Base_C.PlayTellEffect
// (Public, BlueprintCallable, BlueprintEvent)

void UBP_TellComponent_Base_C::PlayTellEffect()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_TellComponent_Base_C", "PlayTellEffect");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_TellComponent_Base.BP_TellComponent_Base_C.OnCooldown
// (Public, BlueprintCallable, BlueprintEvent)

void UBP_TellComponent_Base_C::OnCooldown()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_TellComponent_Base_C", "OnCooldown");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_TellComponent_Base.BP_TellComponent_Base_C.SendAnalyticEvent
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// class AHumanCharacter*                  IncomingPlayer                                         (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// TSet<class AHumanCharacter*>            Campers                                                (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
// bool                                    TellFired                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void UBP_TellComponent_Base_C::SendAnalyticEvent(class AHumanCharacter*& IncomingPlayer, TSet<class AHumanCharacter*>& Campers, bool TellFired)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_TellComponent_Base_C", "SendAnalyticEvent");

	Params::BP_TellComponent_Base_C_SendAnalyticEvent Parms{};

	Parms.IncomingPlayer = IncomingPlayer;
	Parms.Campers = std::move(Campers);
	Parms.TellFired = TellFired;

	UObject::ProcessEvent(Func, &Parms);

	IncomingPlayer = Parms.IncomingPlayer;
	Campers = std::move(Parms.Campers);
}

}

