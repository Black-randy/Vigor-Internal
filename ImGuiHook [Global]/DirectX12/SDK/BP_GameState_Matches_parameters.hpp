#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_GameState_Matches

#include "Basic.hpp"

#include "S_MatchPlayerInfo_structs.hpp"


namespace SDK::Params
{

// Function BP_GameState_Matches.BP_GameState_Matches_C.ExecuteUbergraph_BP_GameState_Matches
// 0x00A8 (0x00A8 - 0x0000)
struct BP_GameState_Matches_C_ExecuteUbergraph_BP_GameState_Matches final
{
public:
	int32                                         EntryPoint;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         K2Node_CustomEvent_PlayerID;                       // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FS_MatchPlayerInfo                     K2Node_CustomEvent_Match_Player_Info;              // 0x0008(0x00A0)(HasGetValueTypeHash)
};
static_assert(alignof(BP_GameState_Matches_C_ExecuteUbergraph_BP_GameState_Matches) == 0x000008, "Wrong alignment on BP_GameState_Matches_C_ExecuteUbergraph_BP_GameState_Matches");
static_assert(sizeof(BP_GameState_Matches_C_ExecuteUbergraph_BP_GameState_Matches) == 0x0000A8, "Wrong size on BP_GameState_Matches_C_ExecuteUbergraph_BP_GameState_Matches");
static_assert(offsetof(BP_GameState_Matches_C_ExecuteUbergraph_BP_GameState_Matches, EntryPoint) == 0x000000, "Member 'BP_GameState_Matches_C_ExecuteUbergraph_BP_GameState_Matches::EntryPoint' has a wrong offset!");
static_assert(offsetof(BP_GameState_Matches_C_ExecuteUbergraph_BP_GameState_Matches, K2Node_CustomEvent_PlayerID) == 0x000004, "Member 'BP_GameState_Matches_C_ExecuteUbergraph_BP_GameState_Matches::K2Node_CustomEvent_PlayerID' has a wrong offset!");
static_assert(offsetof(BP_GameState_Matches_C_ExecuteUbergraph_BP_GameState_Matches, K2Node_CustomEvent_Match_Player_Info) == 0x000008, "Member 'BP_GameState_Matches_C_ExecuteUbergraph_BP_GameState_Matches::K2Node_CustomEvent_Match_Player_Info' has a wrong offset!");

// Function BP_GameState_Matches.BP_GameState_Matches_C.Add Player Info
// 0x00A8 (0x00A8 - 0x0000)
struct BP_GameState_Matches_C_Add_Player_Info final
{
public:
	int32                                         PlayerId;                                          // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FS_MatchPlayerInfo                     Match_Player_Info;                                 // 0x0008(0x00A0)(BlueprintVisible, BlueprintReadOnly, Parm, HasGetValueTypeHash)
};
static_assert(alignof(BP_GameState_Matches_C_Add_Player_Info) == 0x000008, "Wrong alignment on BP_GameState_Matches_C_Add_Player_Info");
static_assert(sizeof(BP_GameState_Matches_C_Add_Player_Info) == 0x0000A8, "Wrong size on BP_GameState_Matches_C_Add_Player_Info");
static_assert(offsetof(BP_GameState_Matches_C_Add_Player_Info, PlayerId) == 0x000000, "Member 'BP_GameState_Matches_C_Add_Player_Info::PlayerId' has a wrong offset!");
static_assert(offsetof(BP_GameState_Matches_C_Add_Player_Info, Match_Player_Info) == 0x000008, "Member 'BP_GameState_Matches_C_Add_Player_Info::Match_Player_Info' has a wrong offset!");

}

