#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: UI_BattlePassTile

#include "Basic.hpp"

#include "UI_BattlePassTile_classes.hpp"
#include "UI_BattlePassTile_parameters.hpp"


namespace SDK
{

// Function UI_BattlePassTile.UI_BattlePassTile_C.SlotInTileClicked__DelegateSignature
// (Public, Delegate, BlueprintCallable, BlueprintEvent)

void UUI_BattlePassTile_C::SlotInTileClicked__DelegateSignature()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UI_BattlePassTile_C", "SlotInTileClicked__DelegateSignature");

	UObject::ProcessEvent(Func, nullptr);
}


// Function UI_BattlePassTile.UI_BattlePassTile_C.ExecuteUbergraph_UI_BattlePassTile
// (Final, UbergraphFunction, HasDefaults)
// Parameters:
// int32                                   EntryPoint                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UUI_BattlePassTile_C::ExecuteUbergraph_UI_BattlePassTile(int32 EntryPoint)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UI_BattlePassTile_C", "ExecuteUbergraph_UI_BattlePassTile");

	Params::UI_BattlePassTile_C_ExecuteUbergraph_UI_BattlePassTile Parms{};

	Parms.EntryPoint = EntryPoint;

	UObject::ProcessEvent(Func, &Parms);
}


// Function UI_BattlePassTile.UI_BattlePassTile_C.ScaleWidget
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FVector2D                        Scale                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UUI_BattlePassTile_C::ScaleWidget(const struct FVector2D& Scale)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UI_BattlePassTile_C", "ScaleWidget");

	Params::UI_BattlePassTile_C_ScaleWidget Parms{};

	Parms.Scale = std::move(Scale);

	UObject::ProcessEvent(Func, &Parms);
}


// Function UI_BattlePassTile.UI_BattlePassTile_C.BndEvt__UI_BattlePassTile_SelectButton_K2Node_ComponentBoundEvent_2_OnButtonHoverEvent__DelegateSignature
// (BlueprintEvent)
// Parameters:
// class UButton*                          Sender                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UUI_BattlePassTile_C::BndEvt__UI_BattlePassTile_SelectButton_K2Node_ComponentBoundEvent_2_OnButtonHoverEvent__DelegateSignature(class UButton* Sender)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UI_BattlePassTile_C", "BndEvt__UI_BattlePassTile_SelectButton_K2Node_ComponentBoundEvent_2_OnButtonHoverEvent__DelegateSignature");

	Params::UI_BattlePassTile_C_BndEvt__UI_BattlePassTile_SelectButton_K2Node_ComponentBoundEvent_2_OnButtonHoverEvent__DelegateSignature Parms{};

	Parms.Sender = Sender;

	UObject::ProcessEvent(Func, &Parms);
}


// Function UI_BattlePassTile.UI_BattlePassTile_C.BndEvt__UI_BattlePassTile_SelectButton_K2Node_ComponentBoundEvent_1_OnButtonHoverEvent__DelegateSignature
// (BlueprintEvent)
// Parameters:
// class UButton*                          Sender                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UUI_BattlePassTile_C::BndEvt__UI_BattlePassTile_SelectButton_K2Node_ComponentBoundEvent_1_OnButtonHoverEvent__DelegateSignature(class UButton* Sender)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UI_BattlePassTile_C", "BndEvt__UI_BattlePassTile_SelectButton_K2Node_ComponentBoundEvent_1_OnButtonHoverEvent__DelegateSignature");

	Params::UI_BattlePassTile_C_BndEvt__UI_BattlePassTile_SelectButton_K2Node_ComponentBoundEvent_1_OnButtonHoverEvent__DelegateSignature Parms{};

	Parms.Sender = Sender;

	UObject::ProcessEvent(Func, &Parms);
}


// Function UI_BattlePassTile.UI_BattlePassTile_C.BndEvt__UI_BattlePassTile_SelectButton_K2Node_ComponentBoundEvent_0_OnButtonClickedEvent__DelegateSignature
// (BlueprintEvent)
// Parameters:
// class UButton*                          Sender                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UUI_BattlePassTile_C::BndEvt__UI_BattlePassTile_SelectButton_K2Node_ComponentBoundEvent_0_OnButtonClickedEvent__DelegateSignature(class UButton* Sender)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UI_BattlePassTile_C", "BndEvt__UI_BattlePassTile_SelectButton_K2Node_ComponentBoundEvent_0_OnButtonClickedEvent__DelegateSignature");

	Params::UI_BattlePassTile_C_BndEvt__UI_BattlePassTile_SelectButton_K2Node_ComponentBoundEvent_0_OnButtonClickedEvent__DelegateSignature Parms{};

	Parms.Sender = Sender;

	UObject::ProcessEvent(Func, &Parms);
}


// Function UI_BattlePassTile.UI_BattlePassTile_C.EventSlotClicked
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// class UButton*                          Button                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UUI_BattlePassTile_C::EventSlotClicked(class UButton* Button)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UI_BattlePassTile_C", "EventSlotClicked");

	Params::UI_BattlePassTile_C_EventSlotClicked Parms{};

	Parms.Button = Button;

	UObject::ProcessEvent(Func, &Parms);
}


// Function UI_BattlePassTile.UI_BattlePassTile_C.OnChildFocusLost
// (Event, Protected, BlueprintEvent)
// Parameters:
// class UWidget*                          InWidget                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UUI_BattlePassTile_C::OnChildFocusLost(class UWidget* InWidget)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UI_BattlePassTile_C", "OnChildFocusLost");

	Params::UI_BattlePassTile_C_OnChildFocusLost Parms{};

	Parms.InWidget = InWidget;

	UObject::ProcessEvent(Func, &Parms);
}


// Function UI_BattlePassTile.UI_BattlePassTile_C.OnChildFocusReceived
// (Event, Protected, BlueprintEvent)
// Parameters:
// class UWidget*                          InWidget                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UUI_BattlePassTile_C::OnChildFocusReceived(class UWidget* InWidget)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UI_BattlePassTile_C", "OnChildFocusReceived");

	Params::UI_BattlePassTile_C_OnChildFocusReceived Parms{};

	Parms.InWidget = InWidget;

	UObject::ProcessEvent(Func, &Parms);
}


// Function UI_BattlePassTile.UI_BattlePassTile_C.Construct
// (BlueprintCosmetic, Event, Public, BlueprintEvent)

void UUI_BattlePassTile_C::Construct()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UI_BattlePassTile_C", "Construct");

	UObject::ProcessEvent(Func, nullptr);
}


// Function UI_BattlePassTile.UI_BattlePassTile_C.FillTileContent
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class UClass*                           ItemClass                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UUI_BattlePassTile_C::FillTileContent(class UClass* ItemClass)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UI_BattlePassTile_C", "FillTileContent");

	Params::UI_BattlePassTile_C_FillTileContent Parms{};

	Parms.ItemClass = ItemClass;

	UObject::ProcessEvent(Func, &Parms);
}


// Function UI_BattlePassTile.UI_BattlePassTile_C.GetTileItemRarity
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// bool                                    OutputValid                                            (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
// struct FItemRarity                      ItemRarity                                             (Parm, OutParm)

void UUI_BattlePassTile_C::GetTileItemRarity(bool* OutputValid, struct FItemRarity* ItemRarity)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UI_BattlePassTile_C", "GetTileItemRarity");

	Params::UI_BattlePassTile_C_GetTileItemRarity Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (OutputValid != nullptr)
		*OutputValid = Parms.OutputValid;

	if (ItemRarity != nullptr)
		*ItemRarity = std::move(Parms.ItemRarity);
}


// Function UI_BattlePassTile.UI_BattlePassTile_C.GetTileItemName
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// class FText                             ItemName                                               (Parm, OutParm)

void UUI_BattlePassTile_C::GetTileItemName(class FText* ItemName)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UI_BattlePassTile_C", "GetTileItemName");

	Params::UI_BattlePassTile_C_GetTileItemName Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (ItemName != nullptr)
		*ItemName = std::move(Parms.ItemName);
}


// Function UI_BattlePassTile.UI_BattlePassTile_C.GetTileItemCategory
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// class FText                             ItemCategory                                           (Parm, OutParm)

void UUI_BattlePassTile_C::GetTileItemCategory(class FText* ItemCategory)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UI_BattlePassTile_C", "GetTileItemCategory");

	Params::UI_BattlePassTile_C_GetTileItemCategory Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (ItemCategory != nullptr)
		*ItemCategory = std::move(Parms.ItemCategory);
}


// Function UI_BattlePassTile.UI_BattlePassTile_C.Add Slots to Tile
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// TArray<struct FS_BattlePassLevelRewardFull>RewardsArray                                           (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)

void UUI_BattlePassTile_C::Add_Slots_to_Tile(const TArray<struct FS_BattlePassLevelRewardFull>& RewardsArray)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UI_BattlePassTile_C", "Add Slots to Tile");

	Params::UI_BattlePassTile_C_Add_Slots_to_Tile Parms{};

	Parms.RewardsArray = std::move(RewardsArray);

	UObject::ProcessEvent(Func, &Parms);
}


// Function UI_BattlePassTile.UI_BattlePassTile_C.SetTileFocus
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    FocusWasSet                                            (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void UUI_BattlePassTile_C::SetTileFocus(bool* FocusWasSet)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UI_BattlePassTile_C", "SetTileFocus");

	Params::UI_BattlePassTile_C_SetTileFocus Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (FocusWasSet != nullptr)
		*FocusWasSet = Parms.FocusWasSet;
}


// Function UI_BattlePassTile.UI_BattlePassTile_C.SetTileLocked
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    IsLockedIn                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void UUI_BattlePassTile_C::SetTileLocked(bool IsLockedIn)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UI_BattlePassTile_C", "SetTileLocked");

	Params::UI_BattlePassTile_C_SetTileLocked Parms{};

	Parms.IsLockedIn = IsLockedIn;

	UObject::ProcessEvent(Func, &Parms);
}


// Function UI_BattlePassTile.UI_BattlePassTile_C.SetTileClaimed
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    IsClaimedIn                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void UUI_BattlePassTile_C::SetTileClaimed(bool IsClaimedIn)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UI_BattlePassTile_C", "SetTileClaimed");

	Params::UI_BattlePassTile_C_SetTileClaimed Parms{};

	Parms.IsClaimedIn = IsClaimedIn;

	UObject::ProcessEvent(Func, &Parms);
}


// Function UI_BattlePassTile.UI_BattlePassTile_C.SetTileRequiredLevel
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// int32                                   TileRequiredLevel_0                                    (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UUI_BattlePassTile_C::SetTileRequiredLevel(int32 TileRequiredLevel_0)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UI_BattlePassTile_C", "SetTileRequiredLevel");

	Params::UI_BattlePassTile_C_SetTileRequiredLevel Parms{};

	Parms.TileRequiredLevel_0 = TileRequiredLevel_0;

	UObject::ProcessEvent(Func, &Parms);
}


// Function UI_BattlePassTile.UI_BattlePassTile_C.ShowTileHighlight
// (Public, BlueprintCallable, BlueprintEvent)

void UUI_BattlePassTile_C::ShowTileHighlight()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UI_BattlePassTile_C", "ShowTileHighlight");

	UObject::ProcessEvent(Func, nullptr);
}


// Function UI_BattlePassTile.UI_BattlePassTile_C.HideTileHighlight
// (Public, BlueprintCallable, BlueprintEvent)

void UUI_BattlePassTile_C::HideTileHighlight()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UI_BattlePassTile_C", "HideTileHighlight");

	UObject::ProcessEvent(Func, nullptr);
}


// Function UI_BattlePassTile.UI_BattlePassTile_C.SetTileRequiredLevelAchieved
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    IsLevelAchievedIn                                      (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void UUI_BattlePassTile_C::SetTileRequiredLevelAchieved(bool IsLevelAchievedIn)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UI_BattlePassTile_C", "SetTileRequiredLevelAchieved");

	Params::UI_BattlePassTile_C_SetTileRequiredLevelAchieved Parms{};

	Parms.IsLevelAchievedIn = IsLevelAchievedIn;

	UObject::ProcessEvent(Func, &Parms);
}


// Function UI_BattlePassTile.UI_BattlePassTile_C.GetTileLocked
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure, Const)
// Parameters:
// bool                                    IsTileLocked_0                                         (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void UUI_BattlePassTile_C::GetTileLocked(bool* IsTileLocked_0) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UI_BattlePassTile_C", "GetTileLocked");

	Params::UI_BattlePassTile_C_GetTileLocked Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (IsTileLocked_0 != nullptr)
		*IsTileLocked_0 = Parms.IsTileLocked_0;
}


// Function UI_BattlePassTile.UI_BattlePassTile_C.GetTileClaimed
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure, Const)
// Parameters:
// bool                                    IsTileClaimed_0                                        (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void UUI_BattlePassTile_C::GetTileClaimed(bool* IsTileClaimed_0) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UI_BattlePassTile_C", "GetTileClaimed");

	Params::UI_BattlePassTile_C_GetTileClaimed Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (IsTileClaimed_0 != nullptr)
		*IsTileClaimed_0 = Parms.IsTileClaimed_0;
}


// Function UI_BattlePassTile.UI_BattlePassTile_C.GetTileRequiredLevel
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure, Const)
// Parameters:
// int32                                   TileRequiredLevel_0                                    (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UUI_BattlePassTile_C::GetTileRequiredLevel(int32* TileRequiredLevel_0) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UI_BattlePassTile_C", "GetTileRequiredLevel");

	Params::UI_BattlePassTile_C_GetTileRequiredLevel Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (TileRequiredLevel_0 != nullptr)
		*TileRequiredLevel_0 = Parms.TileRequiredLevel_0;
}


// Function UI_BattlePassTile.UI_BattlePassTile_C.GetTileEmpty
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure, Const)
// Parameters:
// bool                                    IsTileEmpty_0                                          (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void UUI_BattlePassTile_C::GetTileEmpty(bool* IsTileEmpty_0) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UI_BattlePassTile_C", "GetTileEmpty");

	Params::UI_BattlePassTile_C_GetTileEmpty Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (IsTileEmpty_0 != nullptr)
		*IsTileEmpty_0 = Parms.IsTileEmpty_0;
}

}

