#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_GameState_Script

#include "Basic.hpp"

#include "BP_GameState_Script_classes.hpp"
#include "BP_GameState_Script_parameters.hpp"


namespace SDK
{

// Function BP_GameState_Script.BP_GameState_Script_C.OnThemeLoaded__DelegateSignature
// (Public, Delegate, BlueprintCallable, BlueprintEvent)
// Parameters:
// ESublevelTheme                          Theme_0                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_GameState_Script_C::OnThemeLoaded__DelegateSignature(ESublevelTheme Theme_0)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_GameState_Script_C", "OnThemeLoaded__DelegateSignature");

	Params::BP_GameState_Script_C_OnThemeLoaded__DelegateSignature Parms{};

	Parms.Theme_0 = Theme_0;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_GameState_Script.BP_GameState_Script_C.ExecuteUbergraph_BP_GameState_Script
// (Final, UbergraphFunction, HasDefaults)
// Parameters:
// int32                                   EntryPoint                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_GameState_Script_C::ExecuteUbergraph_BP_GameState_Script(int32 EntryPoint)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_GameState_Script_C", "ExecuteUbergraph_BP_GameState_Script");

	Params::BP_GameState_Script_C_ExecuteUbergraph_BP_GameState_Script Parms{};

	Parms.EntryPoint = EntryPoint;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_GameState_Script.BP_GameState_Script_C.Save all players to last played array
// (BlueprintCallable, BlueprintEvent)

void ABP_GameState_Script_C::Save_all_players_to_last_played_array()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_GameState_Script_C", "Save all players to last played array");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_GameState_Script.BP_GameState_Script_C.MulticastSetTheme
// (Net, NetMulticast, BlueprintCallable, BlueprintEvent)

void ABP_GameState_Script_C::MulticastSetTheme()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_GameState_Script_C", "MulticastSetTheme");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_GameState_Script.BP_GameState_Script_C.SetupTheme
// (BlueprintCallable, BlueprintEvent)

void ABP_GameState_Script_C::SetupTheme()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_GameState_Script_C", "SetupTheme");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_GameState_Script.BP_GameState_Script_C.SetupThemeServer
// (Net, NetServer, BlueprintCallable, BlueprintEvent)
// Parameters:
// ESublevelTheme                          Theme_0                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_GameState_Script_C::SetupThemeServer(ESublevelTheme Theme_0)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_GameState_Script_C", "SetupThemeServer");

	Params::BP_GameState_Script_C_SetupThemeServer Parms{};

	Parms.Theme_0 = Theme_0;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_GameState_Script.BP_GameState_Script_C.Save All Players Unique IDs
// (BlueprintCallable, BlueprintEvent)

void ABP_GameState_Script_C::Save_All_Players_Unique_IDs()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_GameState_Script_C", "Save All Players Unique IDs");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_GameState_Script.BP_GameState_Script_C.Check If Match Has Started
// (BlueprintCallable, BlueprintEvent)

void ABP_GameState_Script_C::Check_If_Match_Has_Started()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_GameState_Script_C", "Check If Match Has Started");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_GameState_Script.BP_GameState_Script_C.Broadcast Print String
// (Net, NetReliable, NetMulticast, BlueprintCallable, BlueprintEvent)
// Parameters:
// class FString                           InString                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)
// bool                                    bPrintToScreen                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// bool                                    bPrintToLog                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// struct FLinearColor                     TextColor                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   Duration                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_GameState_Script_C::Broadcast_Print_String(const class FString& InString, bool bPrintToScreen, bool bPrintToLog, const struct FLinearColor& TextColor, float Duration)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_GameState_Script_C", "Broadcast Print String");

	Params::BP_GameState_Script_C_Broadcast_Print_String Parms{};

	Parms.InString = std::move(InString);
	Parms.bPrintToScreen = bPrintToScreen;
	Parms.bPrintToLog = bPrintToLog;
	Parms.TextColor = std::move(TextColor);
	Parms.Duration = Duration;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_GameState_Script.BP_GameState_Script_C.ReceiveBeginPlay
// (Event, Protected, BlueprintEvent)

void ABP_GameState_Script_C::ReceiveBeginPlay()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_GameState_Script_C", "ReceiveBeginPlay");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_GameState_Script.BP_GameState_Script_C.Broadcast Cheating
// (Net, NetReliable, NetMulticast, BlueprintCallable, BlueprintEvent)
// Parameters:
// class FString                           Message                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)

void ABP_GameState_Script_C::Broadcast_Cheating(const class FString& Message)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_GameState_Script_C", "Broadcast Cheating");

	Params::BP_GameState_Script_C_Broadcast_Cheating Parms{};

	Parms.Message = std::move(Message);

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_GameState_Script.BP_GameState_Script_C.OnRep_Wind Direction
// (HasDefaults, BlueprintCallable, BlueprintEvent)

void ABP_GameState_Script_C::OnRep_Wind_Direction()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_GameState_Script_C", "OnRep_Wind Direction");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_GameState_Script.BP_GameState_Script_C.OnRep_Radiation Present
// (HasDefaults, BlueprintCallable, BlueprintEvent)

void ABP_GameState_Script_C::OnRep_Radiation_Present()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_GameState_Script_C", "OnRep_Radiation Present");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_GameState_Script.BP_GameState_Script_C.GetScoreboardTabs
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// TArray<struct FStruct_ScoreboardTab>    Tabs                                                   (Parm, OutParm)

void ABP_GameState_Script_C::GetScoreboardTabs(TArray<struct FStruct_ScoreboardTab>* Tabs)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_GameState_Script_C", "GetScoreboardTabs");

	Params::BP_GameState_Script_C_GetScoreboardTabs Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Tabs != nullptr)
		*Tabs = std::move(Parms.Tabs);
}


// Function BP_GameState_Script.BP_GameState_Script_C.IsLocalPlayerWinning
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    IsWinning                                              (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ABP_GameState_Script_C::IsLocalPlayerWinning(bool* IsWinning)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_GameState_Script_C", "IsLocalPlayerWinning");

	Params::BP_GameState_Script_C_IsLocalPlayerWinning Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (IsWinning != nullptr)
		*IsWinning = Parms.IsWinning;
}


// Function BP_GameState_Script.BP_GameState_Script_C.SetDynamicRes
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// float                                   InFloat                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_GameState_Script_C::SetDynamicRes(float InFloat)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_GameState_Script_C", "SetDynamicRes");

	Params::BP_GameState_Script_C_SetDynamicRes Parms{};

	Parms.InFloat = InFloat;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_GameState_Script.BP_GameState_Script_C.Get Player Has Map Tool
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// bool                                    Player_Has_Map_Tool_0                                  (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ABP_GameState_Script_C::Get_Player_Has_Map_Tool(bool* Player_Has_Map_Tool_0)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_GameState_Script_C", "Get Player Has Map Tool");

	Params::BP_GameState_Script_C_Get_Player_Has_Map_Tool Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Player_Has_Map_Tool_0 != nullptr)
		*Player_Has_Map_Tool_0 = Parms.Player_Has_Map_Tool_0;
}


// Function BP_GameState_Script.BP_GameState_Script_C.Check Player Has Map Tool
// (Private, BlueprintCallable, BlueprintEvent)

void ABP_GameState_Script_C::Check_Player_Has_Map_Tool()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_GameState_Script_C", "Check Player Has Map Tool");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_GameState_Script.BP_GameState_Script_C.OnRep_Theme
// (BlueprintCallable, BlueprintEvent)

void ABP_GameState_Script_C::OnRep_Theme()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_GameState_Script_C", "OnRep_Theme");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_GameState_Script.BP_GameState_Script_C.IsChristmasTheme
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// bool                                    ChristmasOn                                            (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ABP_GameState_Script_C::IsChristmasTheme(bool* ChristmasOn)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_GameState_Script_C", "IsChristmasTheme");

	Params::BP_GameState_Script_C_IsChristmasTheme Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (ChristmasOn != nullptr)
		*ChristmasOn = Parms.ChristmasOn;
}

}

