#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_GMComponent_ADM_Reward_TrackedBox

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "S_CustomMapMarker_structs.hpp"
#include "BP_GMComponent_ADM_Reward_Base_classes.hpp"


namespace SDK
{

// BlueprintGeneratedClass BP_GMComponent_ADM_Reward_TrackedBox.BP_GMComponent_ADM_Reward_TrackedBox_C
// 0x0078 (0x01B0 - 0x0138)
class UBP_GMComponent_ADM_Reward_TrackedBox_C final : public UBP_GMComponent_ADM_Reward_Base_C
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame_BP_GMComponent_ADM_Reward_TrackedBox_C; // 0x0138(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class UClass*                                 Tracked_Objective_Item_Class;                      // 0x0140(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Ping_Frequency;                                    // 0x0148(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Ping_Duration;                                     // 0x014C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FS_CustomMapMarker                     Ping_Marker;                                       // 0x0150(0x0050)(Edit, BlueprintVisible, HasGetValueTypeHash)
	struct FTimerHandle                           Ping_Timer;                                        // 0x01A0(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	bool                                          Can_Track;                                         // 0x01A8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          Comm_station_stealth_active;                       // 0x01A9(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)

public:
	void ExecuteUbergraph_BP_GMComponent_ADM_Reward_TrackedBox(int32 EntryPoint);
	void Toggle_comm_station_stealth_buff(bool Active);
	void Disable_Tracking();
	void Match_Has_Started();
	void Start_Tracking(class ABP_AirDropContainer_Base_C* Looted_Container, class UClass* Item_Taken);
	void Initialize_Component();
	void Game_Mode_Toggled(bool Game_Mode_Is_Running);
	void Ping_Carriers();
	void Create_PCComponent_for_Player_Controller(class ABP_PlayerController_AirDropModular_C* Controller, class UBP_PCComponent_ADM_C** Player_Controller_Component);
	void Is_Player_Winner(class ABP_PlayerController_AirDropModular_C* Player_Controller, bool* Player_Is_Winner, bool* Output_is_Valid);
	void Initialize_Bindings(bool* Success);
	void Get_Rewards_For_Player(class ABP_PlayerController_AirDropModular_C* Player_Controller, TArray<class FString>* Rewards);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BP_GMComponent_ADM_Reward_TrackedBox_C">();
	}
	static class UBP_GMComponent_ADM_Reward_TrackedBox_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UBP_GMComponent_ADM_Reward_TrackedBox_C>();
	}
};
static_assert(alignof(UBP_GMComponent_ADM_Reward_TrackedBox_C) == 0x000008, "Wrong alignment on UBP_GMComponent_ADM_Reward_TrackedBox_C");
static_assert(sizeof(UBP_GMComponent_ADM_Reward_TrackedBox_C) == 0x0001B0, "Wrong size on UBP_GMComponent_ADM_Reward_TrackedBox_C");
static_assert(offsetof(UBP_GMComponent_ADM_Reward_TrackedBox_C, UberGraphFrame_BP_GMComponent_ADM_Reward_TrackedBox_C) == 0x000138, "Member 'UBP_GMComponent_ADM_Reward_TrackedBox_C::UberGraphFrame_BP_GMComponent_ADM_Reward_TrackedBox_C' has a wrong offset!");
static_assert(offsetof(UBP_GMComponent_ADM_Reward_TrackedBox_C, Tracked_Objective_Item_Class) == 0x000140, "Member 'UBP_GMComponent_ADM_Reward_TrackedBox_C::Tracked_Objective_Item_Class' has a wrong offset!");
static_assert(offsetof(UBP_GMComponent_ADM_Reward_TrackedBox_C, Ping_Frequency) == 0x000148, "Member 'UBP_GMComponent_ADM_Reward_TrackedBox_C::Ping_Frequency' has a wrong offset!");
static_assert(offsetof(UBP_GMComponent_ADM_Reward_TrackedBox_C, Ping_Duration) == 0x00014C, "Member 'UBP_GMComponent_ADM_Reward_TrackedBox_C::Ping_Duration' has a wrong offset!");
static_assert(offsetof(UBP_GMComponent_ADM_Reward_TrackedBox_C, Ping_Marker) == 0x000150, "Member 'UBP_GMComponent_ADM_Reward_TrackedBox_C::Ping_Marker' has a wrong offset!");
static_assert(offsetof(UBP_GMComponent_ADM_Reward_TrackedBox_C, Ping_Timer) == 0x0001A0, "Member 'UBP_GMComponent_ADM_Reward_TrackedBox_C::Ping_Timer' has a wrong offset!");
static_assert(offsetof(UBP_GMComponent_ADM_Reward_TrackedBox_C, Can_Track) == 0x0001A8, "Member 'UBP_GMComponent_ADM_Reward_TrackedBox_C::Can_Track' has a wrong offset!");
static_assert(offsetof(UBP_GMComponent_ADM_Reward_TrackedBox_C, Comm_station_stealth_active) == 0x0001A9, "Member 'UBP_GMComponent_ADM_Reward_TrackedBox_C::Comm_station_stealth_active' has a wrong offset!");

}

