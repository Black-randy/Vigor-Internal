#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_TC_MortarStrike

#include "Basic.hpp"

#include "BP_TC_MortarStrike_classes.hpp"
#include "BP_TC_MortarStrike_parameters.hpp"


namespace SDK
{

// Function BP_TC_MortarStrike.BP_TC_MortarStrike_C.ExecuteUbergraph_BP_TC_MortarStrike
// (Final, UbergraphFunction, HasDefaults)
// Parameters:
// int32                                   EntryPoint                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_TC_MortarStrike_C::ExecuteUbergraph_BP_TC_MortarStrike(int32 EntryPoint)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_TC_MortarStrike_C", "ExecuteUbergraph_BP_TC_MortarStrike");

	Params::BP_TC_MortarStrike_C_ExecuteUbergraph_BP_TC_MortarStrike Parms{};

	Parms.EntryPoint = EntryPoint;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_TC_MortarStrike.BP_TC_MortarStrike_C.ShowHologram
// (Net, NetReliable, NetClient, BlueprintCallable, BlueprintEvent)

void ABP_TC_MortarStrike_C::ShowHologram()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_TC_MortarStrike_C", "ShowHologram");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_TC_MortarStrike.BP_TC_MortarStrike_C.Play Activation Sound
// (Net, NetReliable, NetMulticast, BlueprintCallable, BlueprintEvent)

void ABP_TC_MortarStrike_C::Play_Activation_Sound()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_TC_MortarStrike_C", "Play Activation Sound");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_TC_MortarStrike.BP_TC_MortarStrike_C.Trap_Object_Spawn
// (Net, NetReliable, NetServer, BlueprintCallable, BlueprintEvent)
// Parameters:
// class APlayerController*                PlayerController                                       (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_TC_MortarStrike_C::Trap_Object_Spawn(class APlayerController* PlayerController)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_TC_MortarStrike_C", "Trap_Object_Spawn");

	Params::BP_TC_MortarStrike_C_Trap_Object_Spawn Parms{};

	Parms.PlayerController = PlayerController;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_TC_MortarStrike.BP_TC_MortarStrike_C.Trap_Set_Variables
// (Net, NetReliable, NetServer, BlueprintCallable, BlueprintEvent)
// Parameters:
// class ABP_PlacableTrap_Object_Base_C*   PlacedTrap                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_TC_MortarStrike_C::Trap_Set_Variables(class ABP_PlacableTrap_Object_Base_C* PlacedTrap)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_TC_MortarStrike_C", "Trap_Set_Variables");

	Params::BP_TC_MortarStrike_C_Trap_Set_Variables Parms{};

	Parms.PlacedTrap = PlacedTrap;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_TC_MortarStrike.BP_TC_MortarStrike_C.Trap_Placement_CanBePlaced
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FHitResult                       Hit                                                    (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, ContainsInstancedReference)
// float                                   MaxZNormal                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// TArray<TSoftClassPtr<class UClass>>     ActorsThatBlocksThePlacement                           (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
// TArray<EPhysicalSurface>                SurfacesThatBlocksThePlacement                         (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
// bool                                    Trap_CanBePlacedInWater                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// bool                                    Trap_CanBePlacedVertically                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// bool                                    CanBePlaced                                            (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ABP_TC_MortarStrike_C::Trap_Placement_CanBePlaced(const struct FHitResult& Hit, float MaxZNormal, TArray<TSoftClassPtr<class UClass>>& ActorsThatBlocksThePlacement, TArray<EPhysicalSurface>& SurfacesThatBlocksThePlacement, bool Trap_CanBePlacedInWater, bool Trap_CanBePlacedVertically, bool* CanBePlaced)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_TC_MortarStrike_C", "Trap_Placement_CanBePlaced");

	Params::BP_TC_MortarStrike_C_Trap_Placement_CanBePlaced Parms{};

	Parms.Hit = std::move(Hit);
	Parms.MaxZNormal = MaxZNormal;
	Parms.ActorsThatBlocksThePlacement = std::move(ActorsThatBlocksThePlacement);
	Parms.SurfacesThatBlocksThePlacement = std::move(SurfacesThatBlocksThePlacement);
	Parms.Trap_CanBePlacedInWater = Trap_CanBePlacedInWater;
	Parms.Trap_CanBePlacedVertically = Trap_CanBePlacedVertically;

	UObject::ProcessEvent(Func, &Parms);

	ActorsThatBlocksThePlacement = std::move(Parms.ActorsThatBlocksThePlacement);
	SurfacesThatBlocksThePlacement = std::move(Parms.SurfacesThatBlocksThePlacement);

	if (CanBePlaced != nullptr)
		*CanBePlaced = Parms.CanBePlaced;
}

}

