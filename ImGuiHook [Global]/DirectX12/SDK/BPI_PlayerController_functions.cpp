#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BPI_PlayerController

#include "Basic.hpp"

#include "BPI_PlayerController_classes.hpp"
#include "BPI_PlayerController_parameters.hpp"


namespace SDK
{

// Function BPI_PlayerController.BPI_PlayerController_C.AddUserMessage
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class FText                             Message                                                (BlueprintVisible, BlueprintReadOnly, Parm)
// TSoftObjectPtr<class USoundBase>        Optional2D_Sound                                       (BlueprintVisible, BlueprintReadOnly, Parm, HasGetValueTypeHash)

void IBPI_PlayerController_C::AddUserMessage(const class FText& Message, TSoftObjectPtr<class USoundBase> Optional2D_Sound)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPI_PlayerController_C", "AddUserMessage");

	Params::BPI_PlayerController_C_AddUserMessage Parms{};

	Parms.Message = std::move(Message);
	Parms.Optional2D_Sound = Optional2D_Sound;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BPI_PlayerController.BPI_PlayerController_C.IncrementUsedAmmo
// (Public, BlueprintCallable, BlueprintEvent)

void IBPI_PlayerController_C::IncrementUsedAmmo()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPI_PlayerController_C", "IncrementUsedAmmo");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BPI_PlayerController.BPI_PlayerController_C.IncrementShotsFired
// (Public, BlueprintCallable, BlueprintEvent)

void IBPI_PlayerController_C::IncrementShotsFired()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPI_PlayerController_C", "IncrementShotsFired");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BPI_PlayerController.BPI_PlayerController_C.BPI_RegisterMapMarkedActor
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// class UBP_MapMarkerComponent_C*         MarkerComponent                                        (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    bValid                                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
// class FName                             UsedTag                                                (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void IBPI_PlayerController_C::BPI_RegisterMapMarkedActor(class UBP_MapMarkerComponent_C* MarkerComponent, bool* bValid, class FName* UsedTag)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPI_PlayerController_C", "BPI_RegisterMapMarkedActor");

	Params::BPI_PlayerController_C_BPI_RegisterMapMarkedActor Parms{};

	Parms.MarkerComponent = MarkerComponent;

	UObject::ProcessEvent(Func, &Parms);

	if (bValid != nullptr)
		*bValid = Parms.bValid;

	if (UsedTag != nullptr)
		*UsedTag = Parms.UsedTag;
}


// Function BPI_PlayerController.BPI_PlayerController_C.BPI_UnRegisterMapMarkedActor
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// class UBP_MapMarkerComponent_C*         MarkerComponent                                        (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    Success                                                (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void IBPI_PlayerController_C::BPI_UnRegisterMapMarkedActor(class UBP_MapMarkerComponent_C* MarkerComponent, bool* Success)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPI_PlayerController_C", "BPI_UnRegisterMapMarkedActor");

	Params::BPI_PlayerController_C_BPI_UnRegisterMapMarkedActor Parms{};

	Parms.MarkerComponent = MarkerComponent;

	UObject::ProcessEvent(Func, &Parms);

	if (Success != nullptr)
		*Success = Parms.Success;
}


// Function BPI_PlayerController.BPI_PlayerController_C.GetLobbyStateAndTimes
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    Valid                                                  (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
// bool                                    HasMatchStarted                                        (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
// bool                                    DelayedMatchStartIsInEffect                            (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
// int32                                   RemainingTimeToEncounter                               (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   TotalTimeToEncounter                                   (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void IBPI_PlayerController_C::GetLobbyStateAndTimes(bool* Valid, bool* HasMatchStarted, bool* DelayedMatchStartIsInEffect, int32* RemainingTimeToEncounter, int32* TotalTimeToEncounter)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPI_PlayerController_C", "GetLobbyStateAndTimes");

	Params::BPI_PlayerController_C_GetLobbyStateAndTimes Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Valid != nullptr)
		*Valid = Parms.Valid;

	if (HasMatchStarted != nullptr)
		*HasMatchStarted = Parms.HasMatchStarted;

	if (DelayedMatchStartIsInEffect != nullptr)
		*DelayedMatchStartIsInEffect = Parms.DelayedMatchStartIsInEffect;

	if (RemainingTimeToEncounter != nullptr)
		*RemainingTimeToEncounter = Parms.RemainingTimeToEncounter;

	if (TotalTimeToEncounter != nullptr)
		*TotalTimeToEncounter = Parms.TotalTimeToEncounter;
}


// Function BPI_PlayerController.BPI_PlayerController_C.GetGroupID
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    Valid                                                  (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
// class FString                           GroupId                                                (Parm, OutParm, ZeroConstructor, HasGetValueTypeHash)

void IBPI_PlayerController_C::GetGroupID(bool* Valid, class FString* GroupId)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPI_PlayerController_C", "GetGroupID");

	Params::BPI_PlayerController_C_GetGroupID Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Valid != nullptr)
		*Valid = Parms.Valid;

	if (GroupId != nullptr)
		*GroupId = std::move(Parms.GroupId);
}


// Function BPI_PlayerController.BPI_PlayerController_C.GetLastRespawnTime
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    Valid                                                  (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
// struct FDateTime                        LastRespawnTime                                        (Parm, OutParm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)

void IBPI_PlayerController_C::GetLastRespawnTime(bool* Valid, struct FDateTime* LastRespawnTime)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPI_PlayerController_C", "GetLastRespawnTime");

	Params::BPI_PlayerController_C_GetLastRespawnTime Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Valid != nullptr)
		*Valid = Parms.Valid;

	if (LastRespawnTime != nullptr)
		*LastRespawnTime = std::move(Parms.LastRespawnTime);
}


// Function BPI_PlayerController.BPI_PlayerController_C.GetLastMatchID_Info
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    Valid                                                  (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
// bool                                    LastMatchIDReset                                       (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
// class FString                           MatchID_ToSave                                         (Parm, OutParm, ZeroConstructor, HasGetValueTypeHash)

void IBPI_PlayerController_C::GetLastMatchID_Info(bool* Valid, bool* LastMatchIDReset, class FString* MatchID_ToSave)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPI_PlayerController_C", "GetLastMatchID_Info");

	Params::BPI_PlayerController_C_GetLastMatchID_Info Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Valid != nullptr)
		*Valid = Parms.Valid;

	if (LastMatchIDReset != nullptr)
		*LastMatchIDReset = Parms.LastMatchIDReset;

	if (MatchID_ToSave != nullptr)
		*MatchID_ToSave = std::move(Parms.MatchID_ToSave);
}

}

