#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_MapsManager

#include "Basic.hpp"

#include "Flame_structs.hpp"
#include "Flame_classes.hpp"
#include "Engine_structs.hpp"
#include "E_MapsManagerState_structs.hpp"


namespace SDK
{

// BlueprintGeneratedClass BP_MapsManager.BP_MapsManager_C
// 0x0080 (0x00C0 - 0x0040)
class UBP_MapsManager_C final : public UMapsManager
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x0040(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	TArray<struct FCloudMapRotationSlot>          MapRotationSlots;                                  // 0x0048(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	struct FCloudMapRotationSlot                  DefaultQuickPlaySlot;                              // 0x0058(0x0050)(Edit, BlueprintVisible, DisableEditOnInstance)
	FMulticastInlineDelegateProperty_             OnMapsRotationUpdated;                             // 0x00A8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	bool                                          IsInitialized;                                     // 0x00B8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	E_MapsManagerState                            State;                                             // 0x00B9(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          SimulateLateResponse;                              // 0x00BA(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_BB[0x1];                                       // 0x00BB(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         LateResponseDelay;                                 // 0x00BC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

public:
	void OnMapsRotationUpdated__DelegateSignature();
	void ExecuteUbergraph_BP_MapsManager(int32 EntryPoint);
	void OnRefreshScheduled();
	void OnCloudResponseProcessed();
	void OnLevelEntered();
	void OnGetMapsRotationFinished(const struct FCloudRequestResult& RequestResult, const class FString& Userid, const struct FCloudMapRotationsResponse& Data);
	void BlueprintDeInit();
	void BlueprintInit();
	void BindDelegates();
	void UnbindDelegates();
	void ProcessCloudResponse(const struct FCloudRequestResult& RequestResult, const struct FCloudMapRotationsResponse& MapRotationsResponse);
	void UpdateMapsRotation();
	void IsRequestInProgress(bool* Result);
	void HasMapsRotationAvailable(bool* Result);
	void ScheduleNextRefresh();

	void GetMapRotationSlots(TArray<struct FCloudMapRotationSlot>* Slots) const;

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BP_MapsManager_C">();
	}
	static class UBP_MapsManager_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UBP_MapsManager_C>();
	}
};
static_assert(alignof(UBP_MapsManager_C) == 0x000008, "Wrong alignment on UBP_MapsManager_C");
static_assert(sizeof(UBP_MapsManager_C) == 0x0000C0, "Wrong size on UBP_MapsManager_C");
static_assert(offsetof(UBP_MapsManager_C, UberGraphFrame) == 0x000040, "Member 'UBP_MapsManager_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(UBP_MapsManager_C, MapRotationSlots) == 0x000048, "Member 'UBP_MapsManager_C::MapRotationSlots' has a wrong offset!");
static_assert(offsetof(UBP_MapsManager_C, DefaultQuickPlaySlot) == 0x000058, "Member 'UBP_MapsManager_C::DefaultQuickPlaySlot' has a wrong offset!");
static_assert(offsetof(UBP_MapsManager_C, OnMapsRotationUpdated) == 0x0000A8, "Member 'UBP_MapsManager_C::OnMapsRotationUpdated' has a wrong offset!");
static_assert(offsetof(UBP_MapsManager_C, IsInitialized) == 0x0000B8, "Member 'UBP_MapsManager_C::IsInitialized' has a wrong offset!");
static_assert(offsetof(UBP_MapsManager_C, State) == 0x0000B9, "Member 'UBP_MapsManager_C::State' has a wrong offset!");
static_assert(offsetof(UBP_MapsManager_C, SimulateLateResponse) == 0x0000BA, "Member 'UBP_MapsManager_C::SimulateLateResponse' has a wrong offset!");
static_assert(offsetof(UBP_MapsManager_C, LateResponseDelay) == 0x0000BC, "Member 'UBP_MapsManager_C::LateResponseDelay' has a wrong offset!");

}

