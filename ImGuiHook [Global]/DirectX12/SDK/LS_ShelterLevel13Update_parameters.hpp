#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: LS_ShelterLevel13Update

#include "Basic.hpp"


namespace SDK::Params
{

// Function LS_ShelterLevel13Update.SequenceDirector_C.ExecuteUbergraph_SequenceDirector
// 0x0070 (0x0070 - 0x0000)
struct SequenceDirector_C_ExecuteUbergraph_SequenceDirector final
{
public:
	int32                                         EntryPoint;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class ABP_AU_SpawnFireworks_C*                K2Node_CustomEvent_BP_AU_SpawnFireworks;           // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ABP_StreamingRepair_C*                  K2Node_CustomEvent_BP_StreamingRepair_2;           // 0x0010(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_CustomEvent_bShouldBeVisible;               // 0x0018(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_19[0x3];                                       // 0x0019(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         K2Node_CustomEvent_ShelterLevel_2;                 // 0x001C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ABP_ShelterCameras_C*                   K2Node_CustomEvent_BP_ShelterCameras_1;            // 0x0020(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ABP_Mannequin_C*                        K2Node_CustomEvent_BP_Mannequin;                   // 0x0028(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AHumanPlayerController*                 CallFunc_GetFlameController_ReturnValue;           // 0x0030(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ABP_ShelterCameras_C*                   K2Node_CustomEvent_BP_ShelterCameras;              // 0x0038(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         K2Node_CustomEvent_CaptureTotalCount;              // 0x0040(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0044(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_45[0x3];                                       // 0x0045(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class AHumanPlayerCharacter*                  CallFunc_GetHumanCharacter_ReturnValue;            // 0x0048(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ABP_StreamingRepair_C*                  K2Node_CustomEvent_BP_StreamingRepair_1;           // 0x0050(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         K2Node_CustomEvent_ShelterLevel_1;                 // 0x0058(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue_1;                    // 0x005C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_5D[0x3];                                       // 0x005D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class ABP_StreamingRepair_C*                  K2Node_CustomEvent_BP_StreamingRepair;             // 0x0060(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         K2Node_CustomEvent_ShelterLevel;                   // 0x0068(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(SequenceDirector_C_ExecuteUbergraph_SequenceDirector) == 0x000008, "Wrong alignment on SequenceDirector_C_ExecuteUbergraph_SequenceDirector");
static_assert(sizeof(SequenceDirector_C_ExecuteUbergraph_SequenceDirector) == 0x000070, "Wrong size on SequenceDirector_C_ExecuteUbergraph_SequenceDirector");
static_assert(offsetof(SequenceDirector_C_ExecuteUbergraph_SequenceDirector, EntryPoint) == 0x000000, "Member 'SequenceDirector_C_ExecuteUbergraph_SequenceDirector::EntryPoint' has a wrong offset!");
static_assert(offsetof(SequenceDirector_C_ExecuteUbergraph_SequenceDirector, K2Node_CustomEvent_BP_AU_SpawnFireworks) == 0x000008, "Member 'SequenceDirector_C_ExecuteUbergraph_SequenceDirector::K2Node_CustomEvent_BP_AU_SpawnFireworks' has a wrong offset!");
static_assert(offsetof(SequenceDirector_C_ExecuteUbergraph_SequenceDirector, K2Node_CustomEvent_BP_StreamingRepair_2) == 0x000010, "Member 'SequenceDirector_C_ExecuteUbergraph_SequenceDirector::K2Node_CustomEvent_BP_StreamingRepair_2' has a wrong offset!");
static_assert(offsetof(SequenceDirector_C_ExecuteUbergraph_SequenceDirector, K2Node_CustomEvent_bShouldBeVisible) == 0x000018, "Member 'SequenceDirector_C_ExecuteUbergraph_SequenceDirector::K2Node_CustomEvent_bShouldBeVisible' has a wrong offset!");
static_assert(offsetof(SequenceDirector_C_ExecuteUbergraph_SequenceDirector, K2Node_CustomEvent_ShelterLevel_2) == 0x00001C, "Member 'SequenceDirector_C_ExecuteUbergraph_SequenceDirector::K2Node_CustomEvent_ShelterLevel_2' has a wrong offset!");
static_assert(offsetof(SequenceDirector_C_ExecuteUbergraph_SequenceDirector, K2Node_CustomEvent_BP_ShelterCameras_1) == 0x000020, "Member 'SequenceDirector_C_ExecuteUbergraph_SequenceDirector::K2Node_CustomEvent_BP_ShelterCameras_1' has a wrong offset!");
static_assert(offsetof(SequenceDirector_C_ExecuteUbergraph_SequenceDirector, K2Node_CustomEvent_BP_Mannequin) == 0x000028, "Member 'SequenceDirector_C_ExecuteUbergraph_SequenceDirector::K2Node_CustomEvent_BP_Mannequin' has a wrong offset!");
static_assert(offsetof(SequenceDirector_C_ExecuteUbergraph_SequenceDirector, CallFunc_GetFlameController_ReturnValue) == 0x000030, "Member 'SequenceDirector_C_ExecuteUbergraph_SequenceDirector::CallFunc_GetFlameController_ReturnValue' has a wrong offset!");
static_assert(offsetof(SequenceDirector_C_ExecuteUbergraph_SequenceDirector, K2Node_CustomEvent_BP_ShelterCameras) == 0x000038, "Member 'SequenceDirector_C_ExecuteUbergraph_SequenceDirector::K2Node_CustomEvent_BP_ShelterCameras' has a wrong offset!");
static_assert(offsetof(SequenceDirector_C_ExecuteUbergraph_SequenceDirector, K2Node_CustomEvent_CaptureTotalCount) == 0x000040, "Member 'SequenceDirector_C_ExecuteUbergraph_SequenceDirector::K2Node_CustomEvent_CaptureTotalCount' has a wrong offset!");
static_assert(offsetof(SequenceDirector_C_ExecuteUbergraph_SequenceDirector, CallFunc_IsValid_ReturnValue) == 0x000044, "Member 'SequenceDirector_C_ExecuteUbergraph_SequenceDirector::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(SequenceDirector_C_ExecuteUbergraph_SequenceDirector, CallFunc_GetHumanCharacter_ReturnValue) == 0x000048, "Member 'SequenceDirector_C_ExecuteUbergraph_SequenceDirector::CallFunc_GetHumanCharacter_ReturnValue' has a wrong offset!");
static_assert(offsetof(SequenceDirector_C_ExecuteUbergraph_SequenceDirector, K2Node_CustomEvent_BP_StreamingRepair_1) == 0x000050, "Member 'SequenceDirector_C_ExecuteUbergraph_SequenceDirector::K2Node_CustomEvent_BP_StreamingRepair_1' has a wrong offset!");
static_assert(offsetof(SequenceDirector_C_ExecuteUbergraph_SequenceDirector, K2Node_CustomEvent_ShelterLevel_1) == 0x000058, "Member 'SequenceDirector_C_ExecuteUbergraph_SequenceDirector::K2Node_CustomEvent_ShelterLevel_1' has a wrong offset!");
static_assert(offsetof(SequenceDirector_C_ExecuteUbergraph_SequenceDirector, CallFunc_IsValid_ReturnValue_1) == 0x00005C, "Member 'SequenceDirector_C_ExecuteUbergraph_SequenceDirector::CallFunc_IsValid_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(SequenceDirector_C_ExecuteUbergraph_SequenceDirector, K2Node_CustomEvent_BP_StreamingRepair) == 0x000060, "Member 'SequenceDirector_C_ExecuteUbergraph_SequenceDirector::K2Node_CustomEvent_BP_StreamingRepair' has a wrong offset!");
static_assert(offsetof(SequenceDirector_C_ExecuteUbergraph_SequenceDirector, K2Node_CustomEvent_ShelterLevel) == 0x000068, "Member 'SequenceDirector_C_ExecuteUbergraph_SequenceDirector::K2Node_CustomEvent_ShelterLevel' has a wrong offset!");

// Function LS_ShelterLevel13Update.SequenceDirector_C.BP_AU_SpawnFireworks_Event_0
// 0x0008 (0x0008 - 0x0000)
struct SequenceDirector_C_BP_AU_SpawnFireworks_Event_0 final
{
public:
	class ABP_AU_SpawnFireworks_C*                BP_AU_SpawnFireworks;                              // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(SequenceDirector_C_BP_AU_SpawnFireworks_Event_0) == 0x000008, "Wrong alignment on SequenceDirector_C_BP_AU_SpawnFireworks_Event_0");
static_assert(sizeof(SequenceDirector_C_BP_AU_SpawnFireworks_Event_0) == 0x000008, "Wrong size on SequenceDirector_C_BP_AU_SpawnFireworks_Event_0");
static_assert(offsetof(SequenceDirector_C_BP_AU_SpawnFireworks_Event_0, BP_AU_SpawnFireworks) == 0x000000, "Member 'SequenceDirector_C_BP_AU_SpawnFireworks_Event_0::BP_AU_SpawnFireworks' has a wrong offset!");

// Function LS_ShelterLevel13Update.SequenceDirector_C.ShowNewLevel
// 0x0010 (0x0010 - 0x0000)
struct SequenceDirector_C_ShowNewLevel final
{
public:
	class ABP_StreamingRepair_C*                  BP_StreamingRepair;                                // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         ShelterLevel;                                      // 0x0008(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(SequenceDirector_C_ShowNewLevel) == 0x000008, "Wrong alignment on SequenceDirector_C_ShowNewLevel");
static_assert(sizeof(SequenceDirector_C_ShowNewLevel) == 0x000010, "Wrong size on SequenceDirector_C_ShowNewLevel");
static_assert(offsetof(SequenceDirector_C_ShowNewLevel, BP_StreamingRepair) == 0x000000, "Member 'SequenceDirector_C_ShowNewLevel::BP_StreamingRepair' has a wrong offset!");
static_assert(offsetof(SequenceDirector_C_ShowNewLevel, ShelterLevel) == 0x000008, "Member 'SequenceDirector_C_ShowNewLevel::ShelterLevel' has a wrong offset!");

// Function LS_ShelterLevel13Update.SequenceDirector_C.HideOldLevel
// 0x0010 (0x0010 - 0x0000)
struct SequenceDirector_C_HideOldLevel final
{
public:
	class ABP_StreamingRepair_C*                  BP_StreamingRepair;                                // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         ShelterLevel;                                      // 0x0008(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(SequenceDirector_C_HideOldLevel) == 0x000008, "Wrong alignment on SequenceDirector_C_HideOldLevel");
static_assert(sizeof(SequenceDirector_C_HideOldLevel) == 0x000010, "Wrong size on SequenceDirector_C_HideOldLevel");
static_assert(offsetof(SequenceDirector_C_HideOldLevel, BP_StreamingRepair) == 0x000000, "Member 'SequenceDirector_C_HideOldLevel::BP_StreamingRepair' has a wrong offset!");
static_assert(offsetof(SequenceDirector_C_HideOldLevel, ShelterLevel) == 0x000008, "Member 'SequenceDirector_C_HideOldLevel::ShelterLevel' has a wrong offset!");

// Function LS_ShelterLevel13Update.SequenceDirector_C.CaptureAllCameras
// 0x0010 (0x0010 - 0x0000)
struct SequenceDirector_C_CaptureAllCameras final
{
public:
	class ABP_ShelterCameras_C*                   BP_ShelterCameras;                                 // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CaptureTotalCount;                                 // 0x0008(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(SequenceDirector_C_CaptureAllCameras) == 0x000008, "Wrong alignment on SequenceDirector_C_CaptureAllCameras");
static_assert(sizeof(SequenceDirector_C_CaptureAllCameras) == 0x000010, "Wrong size on SequenceDirector_C_CaptureAllCameras");
static_assert(offsetof(SequenceDirector_C_CaptureAllCameras, BP_ShelterCameras) == 0x000000, "Member 'SequenceDirector_C_CaptureAllCameras::BP_ShelterCameras' has a wrong offset!");
static_assert(offsetof(SequenceDirector_C_CaptureAllCameras, CaptureTotalCount) == 0x000008, "Member 'SequenceDirector_C_CaptureAllCameras::CaptureTotalCount' has a wrong offset!");

// Function LS_ShelterLevel13Update.SequenceDirector_C.UsePlayerCustomizations
// 0x0008 (0x0008 - 0x0000)
struct SequenceDirector_C_UsePlayerCustomizations final
{
public:
	class ABP_Mannequin_C*                        BP_Mannequin;                                      // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(SequenceDirector_C_UsePlayerCustomizations) == 0x000008, "Wrong alignment on SequenceDirector_C_UsePlayerCustomizations");
static_assert(sizeof(SequenceDirector_C_UsePlayerCustomizations) == 0x000008, "Wrong size on SequenceDirector_C_UsePlayerCustomizations");
static_assert(offsetof(SequenceDirector_C_UsePlayerCustomizations, BP_Mannequin) == 0x000000, "Member 'SequenceDirector_C_UsePlayerCustomizations::BP_Mannequin' has a wrong offset!");

// Function LS_ShelterLevel13Update.SequenceDirector_C.PassNextUIContext
// 0x0008 (0x0008 - 0x0000)
struct SequenceDirector_C_PassNextUIContext final
{
public:
	class ABP_ShelterCameras_C*                   BP_ShelterCameras;                                 // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(SequenceDirector_C_PassNextUIContext) == 0x000008, "Wrong alignment on SequenceDirector_C_PassNextUIContext");
static_assert(sizeof(SequenceDirector_C_PassNextUIContext) == 0x000008, "Wrong size on SequenceDirector_C_PassNextUIContext");
static_assert(offsetof(SequenceDirector_C_PassNextUIContext, BP_ShelterCameras) == 0x000000, "Member 'SequenceDirector_C_PassNextUIContext::BP_ShelterCameras' has a wrong offset!");

// Function LS_ShelterLevel13Update.SequenceDirector_C.SetSublevelVisibility
// 0x0010 (0x0010 - 0x0000)
struct SequenceDirector_C_SetSublevelVisibility final
{
public:
	class ABP_StreamingRepair_C*                  BP_StreamingRepair;                                // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bShouldBeVisible;                                  // 0x0008(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         ShelterLevel;                                      // 0x000C(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(SequenceDirector_C_SetSublevelVisibility) == 0x000008, "Wrong alignment on SequenceDirector_C_SetSublevelVisibility");
static_assert(sizeof(SequenceDirector_C_SetSublevelVisibility) == 0x000010, "Wrong size on SequenceDirector_C_SetSublevelVisibility");
static_assert(offsetof(SequenceDirector_C_SetSublevelVisibility, BP_StreamingRepair) == 0x000000, "Member 'SequenceDirector_C_SetSublevelVisibility::BP_StreamingRepair' has a wrong offset!");
static_assert(offsetof(SequenceDirector_C_SetSublevelVisibility, bShouldBeVisible) == 0x000008, "Member 'SequenceDirector_C_SetSublevelVisibility::bShouldBeVisible' has a wrong offset!");
static_assert(offsetof(SequenceDirector_C_SetSublevelVisibility, ShelterLevel) == 0x00000C, "Member 'SequenceDirector_C_SetSublevelVisibility::ShelterLevel' has a wrong offset!");

// Function LS_ShelterLevel13Update.SequenceDirector_C.SequenceEvent__ENTRYPOINTSequenceDirector_0
// 0x0008 (0x0008 - 0x0000)
struct SequenceDirector_C_SequenceEvent__ENTRYPOINTSequenceDirector_0 final
{
public:
	class ABP_ShelterCameras_C*                   BP_ShelterCameras;                                 // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(SequenceDirector_C_SequenceEvent__ENTRYPOINTSequenceDirector_0) == 0x000008, "Wrong alignment on SequenceDirector_C_SequenceEvent__ENTRYPOINTSequenceDirector_0");
static_assert(sizeof(SequenceDirector_C_SequenceEvent__ENTRYPOINTSequenceDirector_0) == 0x000008, "Wrong size on SequenceDirector_C_SequenceEvent__ENTRYPOINTSequenceDirector_0");
static_assert(offsetof(SequenceDirector_C_SequenceEvent__ENTRYPOINTSequenceDirector_0, BP_ShelterCameras) == 0x000000, "Member 'SequenceDirector_C_SequenceEvent__ENTRYPOINTSequenceDirector_0::BP_ShelterCameras' has a wrong offset!");

// Function LS_ShelterLevel13Update.SequenceDirector_C.SequenceEvent__ENTRYPOINTSequenceDirector_1
// 0x0008 (0x0008 - 0x0000)
struct SequenceDirector_C_SequenceEvent__ENTRYPOINTSequenceDirector_1 final
{
public:
	class ABP_ShelterCameras_C*                   BP_ShelterCameras;                                 // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(SequenceDirector_C_SequenceEvent__ENTRYPOINTSequenceDirector_1) == 0x000008, "Wrong alignment on SequenceDirector_C_SequenceEvent__ENTRYPOINTSequenceDirector_1");
static_assert(sizeof(SequenceDirector_C_SequenceEvent__ENTRYPOINTSequenceDirector_1) == 0x000008, "Wrong size on SequenceDirector_C_SequenceEvent__ENTRYPOINTSequenceDirector_1");
static_assert(offsetof(SequenceDirector_C_SequenceEvent__ENTRYPOINTSequenceDirector_1, BP_ShelterCameras) == 0x000000, "Member 'SequenceDirector_C_SequenceEvent__ENTRYPOINTSequenceDirector_1::BP_ShelterCameras' has a wrong offset!");

// Function LS_ShelterLevel13Update.SequenceDirector_C.SequenceEvent__ENTRYPOINTSequenceDirector_2
// 0x0008 (0x0008 - 0x0000)
struct SequenceDirector_C_SequenceEvent__ENTRYPOINTSequenceDirector_2 final
{
public:
	class ABP_ShelterCameras_C*                   BP_ShelterCameras;                                 // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(SequenceDirector_C_SequenceEvent__ENTRYPOINTSequenceDirector_2) == 0x000008, "Wrong alignment on SequenceDirector_C_SequenceEvent__ENTRYPOINTSequenceDirector_2");
static_assert(sizeof(SequenceDirector_C_SequenceEvent__ENTRYPOINTSequenceDirector_2) == 0x000008, "Wrong size on SequenceDirector_C_SequenceEvent__ENTRYPOINTSequenceDirector_2");
static_assert(offsetof(SequenceDirector_C_SequenceEvent__ENTRYPOINTSequenceDirector_2, BP_ShelterCameras) == 0x000000, "Member 'SequenceDirector_C_SequenceEvent__ENTRYPOINTSequenceDirector_2::BP_ShelterCameras' has a wrong offset!");

// Function LS_ShelterLevel13Update.SequenceDirector_C.SequenceEvent__ENTRYPOINTSequenceDirector_3
// 0x0008 (0x0008 - 0x0000)
struct SequenceDirector_C_SequenceEvent__ENTRYPOINTSequenceDirector_3 final
{
public:
	class ABP_Mannequin_C*                        BP_Mannequin;                                      // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(SequenceDirector_C_SequenceEvent__ENTRYPOINTSequenceDirector_3) == 0x000008, "Wrong alignment on SequenceDirector_C_SequenceEvent__ENTRYPOINTSequenceDirector_3");
static_assert(sizeof(SequenceDirector_C_SequenceEvent__ENTRYPOINTSequenceDirector_3) == 0x000008, "Wrong size on SequenceDirector_C_SequenceEvent__ENTRYPOINTSequenceDirector_3");
static_assert(offsetof(SequenceDirector_C_SequenceEvent__ENTRYPOINTSequenceDirector_3, BP_Mannequin) == 0x000000, "Member 'SequenceDirector_C_SequenceEvent__ENTRYPOINTSequenceDirector_3::BP_Mannequin' has a wrong offset!");

// Function LS_ShelterLevel13Update.SequenceDirector_C.SequenceEvent__ENTRYPOINTSequenceDirector_4
// 0x0008 (0x0008 - 0x0000)
struct SequenceDirector_C_SequenceEvent__ENTRYPOINTSequenceDirector_4 final
{
public:
	class ABP_StreamingRepair_C*                  BP_StreamingRepair;                                // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(SequenceDirector_C_SequenceEvent__ENTRYPOINTSequenceDirector_4) == 0x000008, "Wrong alignment on SequenceDirector_C_SequenceEvent__ENTRYPOINTSequenceDirector_4");
static_assert(sizeof(SequenceDirector_C_SequenceEvent__ENTRYPOINTSequenceDirector_4) == 0x000008, "Wrong size on SequenceDirector_C_SequenceEvent__ENTRYPOINTSequenceDirector_4");
static_assert(offsetof(SequenceDirector_C_SequenceEvent__ENTRYPOINTSequenceDirector_4, BP_StreamingRepair) == 0x000000, "Member 'SequenceDirector_C_SequenceEvent__ENTRYPOINTSequenceDirector_4::BP_StreamingRepair' has a wrong offset!");

// Function LS_ShelterLevel13Update.SequenceDirector_C.SequenceEvent__ENTRYPOINTSequenceDirector_5
// 0x0008 (0x0008 - 0x0000)
struct SequenceDirector_C_SequenceEvent__ENTRYPOINTSequenceDirector_5 final
{
public:
	class ABP_StreamingRepair_C*                  BP_StreamingRepair;                                // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(SequenceDirector_C_SequenceEvent__ENTRYPOINTSequenceDirector_5) == 0x000008, "Wrong alignment on SequenceDirector_C_SequenceEvent__ENTRYPOINTSequenceDirector_5");
static_assert(sizeof(SequenceDirector_C_SequenceEvent__ENTRYPOINTSequenceDirector_5) == 0x000008, "Wrong size on SequenceDirector_C_SequenceEvent__ENTRYPOINTSequenceDirector_5");
static_assert(offsetof(SequenceDirector_C_SequenceEvent__ENTRYPOINTSequenceDirector_5, BP_StreamingRepair) == 0x000000, "Member 'SequenceDirector_C_SequenceEvent__ENTRYPOINTSequenceDirector_5::BP_StreamingRepair' has a wrong offset!");

// Function LS_ShelterLevel13Update.SequenceDirector_C.SequenceEvent__ENTRYPOINTSequenceDirector_6
// 0x0008 (0x0008 - 0x0000)
struct SequenceDirector_C_SequenceEvent__ENTRYPOINTSequenceDirector_6 final
{
public:
	class ABP_AU_SpawnFireworks_C*                BP_AU_SpawnFireworks;                              // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(SequenceDirector_C_SequenceEvent__ENTRYPOINTSequenceDirector_6) == 0x000008, "Wrong alignment on SequenceDirector_C_SequenceEvent__ENTRYPOINTSequenceDirector_6");
static_assert(sizeof(SequenceDirector_C_SequenceEvent__ENTRYPOINTSequenceDirector_6) == 0x000008, "Wrong size on SequenceDirector_C_SequenceEvent__ENTRYPOINTSequenceDirector_6");
static_assert(offsetof(SequenceDirector_C_SequenceEvent__ENTRYPOINTSequenceDirector_6, BP_AU_SpawnFireworks) == 0x000000, "Member 'SequenceDirector_C_SequenceEvent__ENTRYPOINTSequenceDirector_6::BP_AU_SpawnFireworks' has a wrong offset!");

}

