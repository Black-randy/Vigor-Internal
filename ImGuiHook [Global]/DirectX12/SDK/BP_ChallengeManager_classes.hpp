#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_ChallengeManager

#include "Basic.hpp"

#include "Struct_ChallengeSlotsCategory_structs.hpp"
#include "Flame_structs.hpp"
#include "Flame_classes.hpp"
#include "Engine_structs.hpp"
#include "E_ChallengeManagerState_structs.hpp"
#include "CoreUObject_structs.hpp"
#include "E_ChallengeSlotState_structs.hpp"


namespace SDK
{

// BlueprintGeneratedClass BP_ChallengeManager.BP_ChallengeManager_C
// 0x0218 (0x0458 - 0x0240)
class ABP_ChallengeManager_C final : public AChallengeManager
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x0240(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class UBP_OnlineChallengesComponent_C*        BP_OnlineChallengesComponent;                      // 0x0248(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	bool                                          Slots_Loaded;                                      // 0x0250(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          Stats_Loaded;                                      // 0x0251(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          Prerequisites_Loaded;                              // 0x0252(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_253[0x5];                                      // 0x0253(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FCloudChallengeSlotInfo>        Cloud_Slots_Data;                                  // 0x0258(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	TMap<class FName, struct FDateTime>           Cloud_Stats_Data;                                  // 0x0268(0x0050)(Edit, BlueprintVisible, DisableEditOnInstance)
	float                                         Cloud_Request_Retry_Interval;                      // 0x02B8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	E_ChallengeManagerState                       State;                                             // 0x02BC(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2BD[0x3];                                      // 0x02BD(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FDateTime                              Reset_Time;                                        // 0x02C0(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	TMap<TSoftClassPtr<class UClass>, class AChallengePrerequisite*> Prerequisite_Pool;                                 // 0x02C8(0x0050)(Edit, BlueprintVisible, DisableEditOnInstance)
	TArray<TSoftClassPtr<class UClass>>           Prerequisites_to_Load;                             // 0x0318(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	struct FTimerHandle                           Next_Reset_Timer;                                  // 0x0328(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	FMulticastInlineDelegateProperty_             Challenge_Manager_Initialized;                     // 0x0330(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	bool                                          Ignore_Daily_Reset_Constraint;                     // 0x0340(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_341[0x7];                                      // 0x0341(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	FMulticastInlineDelegateProperty_             ChallengeManagerDailyReseted;                      // 0x0348(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	TArray<struct FCloudChallengeSlotInfo>        DailyChallengeSlotData;                            // 0x0358(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	FMulticastInlineDelegateProperty_             NewChallengeSlotInitialized;                       // 0x0368(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	int32                                         CloudRequestRetryAttemptsLimit;                    // 0x0378(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CloudRequestRetryAttempts;                         // 0x037C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	FMulticastInlineDelegateProperty_             Challenge_Manager_Pending;                         // 0x0380(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	TMap<class FString, struct FStruct_ChallengeSlotsCategory> AllChallengeSlots;                                 // 0x0390(0x0050)(Edit, BlueprintVisible, DisableEditOnInstance)
	int32                                         SeasonalRewardProgress;                            // 0x03E0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         SeasonalRewardMax;                                 // 0x03E4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          HasSeasonalRewardBeenClaimed;                      // 0x03E8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_3E9[0x7];                                      // 0x03E9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TMap<class UClass*, int32>                    SeasonalRewardList;                                // 0x03F0(0x0050)(Edit, BlueprintVisible, DisableEditOnInstance)
	TArray<class ABP_ChallengeSlot_C*>            ChallengeSlotsSorted;                              // 0x0440(0x0010)(Edit, BlueprintVisible, DisableEditOnTemplate, DisableEditOnInstance)
	bool                                          IsRerolling;                                       // 0x0450(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)

public:
	void Challenge_Manager_Initialized__DelegateSignature();
	void ChallengeManagerDailyReseted__DelegateSignature(const struct FDateTime& Next_Reset_Timestamp);
	void NewChallengeSlotInitialized__DelegateSignature(class ABP_ChallengeSlot_C* ChallengeSlot);
	void Challenge_Manager_Pending__DelegateSignature();
	void ExecuteUbergraph_BP_ChallengeManager(int32 EntryPoint);
	void OnChallengeProgressUpdated(class ABP_ChallengeSlot_C* Slot, int32 New_Progress);
	void BndEvt__BP_OnlineChallengesComponent_K2Node_ComponentBoundEvent_5_ClaimUserSeasonChallengeDelegate__DelegateSignature(const struct FCloudRequestResult& RequestResult, const struct FCloudSeasonChallengeClaimResult& ClaimResult);
	void BndEvt__BP_OnlineChallengesComponent_K2Node_ComponentBoundEvent_1_GetUserSeasonChallengeRewardsDelegate__DelegateSignature(const struct FCloudRequestResult& RequestResult, const struct FCloudSeasonChallengeRewardsResult& Response);
	void BndEvt__BP_OnlineChallengesComponent_K2Node_ComponentBoundEvent_0_GetUserSeasonChallengeProgressDelegate__DelegateSignature(const struct FCloudRequestResult& RequestResult, const struct FCloudSeasonChallengeProgressResult& Response);
	void BndEvt__BP_OnlineChallengesComponent_K2Node_ComponentBoundEvent_4_ClaimUserChallengeDelegate__DelegateSignature(const struct FCloudRequestResult& RequestResult, const struct FCloudChallengeClaimResult& ClaimResult);
	void BndEvt__BP_OnlineChallengesComponent_K2Node_ComponentBoundEvent_3_SetUserChallengeProgressDelegate__DelegateSignature(const struct FCloudRequestResult& RequestResult, const struct FCloudChallengeSlotInfo& ProgressResult);
	void BndEvt__BP_OnlineChallengesComponent_K2Node_ComponentBoundEvent_4_ReRollUserChallengeDelegate__DelegateSignature(const struct FCloudRequestResult& RequestResult, const struct FCloudChallengeClaimResult& Response);
	void BndEvt__BP_OnlineChallengesComponent_K2Node_ComponentBoundEvent_2_GetUserChallengeSlotsDelegate__DelegateSignature(const struct FCloudRequestResult& RequestResult, const struct FCloudGetChallengeResponse& Response);
	void RetryChallengeRequest();
	void Initialize_Reset_Timer();
	void Daily_Reset();
	void ReceiveEndPlay(EEndPlayReason EndPlayReason);
	void Wait_for_Controller();
	void Wait_for_Cloud_ID(const class FString& Userid);
	void Load_Prerequisite_Objects();
	void Slot_Initialized(class ABP_ChallengeSlot_C* Slot);
	void Load_Stats_From_Cloud();
	void Load_Slots_From_Cloud();
	void Wait_for_Data_Tables(EDataProviderState OldState, EDataProviderState NewState);
	void BlueprintInit();
	void OnLoaded_B08996E843B69641864BC48B08A89CC2(TSubclassOf<class UObject> Loaded);
	void Check_Prerequisite(const struct FChallengePrerequisiteInfo& Prerequisite, bool* Passed);
	void Validate_Challenge_Name(class FName Input_Name, class FName* Output_Name, bool* Input_Was_Valid, bool* Input_Enabled, bool* Input_Condition_Valid);
	void Initialize_Slots();
	bool Is_Story_Challenge_Active();
	bool Is_Any_Slot_Empty();
	void Validate_Cloud_Data();
	void Update_Slot_Content();
	void Find_Next_Story_Challenge(class FName* Challenge_Name);
	void Choose_Daily_Challenge(bool Log_Progress, class FName* Challenge_Name);
	bool Is_Slot_Past_Daily_Reset(class ABP_ChallengeSlot_C* Slot);
	void Get_Cloud_Stats(TMap<class FName, struct FDateTime>* Cloud_Stats_Data_0);
	void Are_Cloud_Stats_Loaded(bool* Stats_Loaded_0);
	void Assign_Slot_IDs(bool* Success);
	void Find_Slot_by_ID(int32 Slot_ID, class ABP_ChallengeSlot_C** Slot, bool* Success);
	void Print_Status();
	void Print_Challenge_Slots_Received_Result(const struct FCloudRequestResult& CloudRequestResult);
	void Print_Challenge_Stats_Received_Result(const struct FCloudRequestResult& CloudRequestResult);
	void Print_Challenge_Assigned_Result(const struct FCloudRequestResult& CloudRequestResult, const struct FCloudChallengeSlotInfo& CloudChallengeSlotInfo);
	void Print_Challenge_Progress_Set_Result(const struct FCloudRequestResult& CloudRequestResult, const struct FCloudChallengeSlotInfo& CloudChallengeSlotInfo);
	void Print_Challenge_Rewards_Claimed_Result(const struct FCloudRequestResult& CloudRequestResult, const struct FCloudChallengeClaimResult& CloudChallengeClaimResult);
	void Print_Challenge_Cancelled_Result(const struct FCloudRequestResult& CloudRequestResult);
	void Get_Next_Reset_Timestamp(struct FDateTime* Next_Reset_Timestamp);
	struct FTimespan Get_Time_to_Next_Reset();
	void Get_Last_Reset_Timestamp(struct FDateTime* Last_Reset_Timestamp);
	struct FTimespan Get_Time_since_Last_Reset();
	void Get_Challenge_Manager_State(E_ChallengeManagerState* State_0);
	void Toggle_Daily_Reset_Constraint(bool Ignore_Limit);
	void CheckCategoryAgainstCandidates(EChallengeCategory Challenge_Category, TArray<class FName>& CandidateArray, bool* Valid);
	void InitializeChallengesFromCloud(const struct FCloudChallengeCategorySlots& Challenges_Category, TArray<class ABP_ChallengeSlot_C*>& ChallengeCategorySlots, TArray<class ABP_ChallengeSlot_C*>* Challenge_Slots);
	void GetChallengeSlotsByProgress(TArray<class ABP_ChallengeSlot_C*>& Challenge_Slots, TArray<class ABP_ChallengeSlot_C*>* Sorted_Challenge_Slots);
	void ChallengeSlotComparatorByProgress(class UObject* ObjectA, class UObject* ObjectB, bool* Return);
	void GetChallengeSlotsByCategory(const class FString& Slot_Category, TArray<class ABP_ChallengeSlot_C*>* ChallengeSlots_0);
	void GetChallengeSlotsByMultipleCategories(const TSet<class FString>& Slot_Categories, TArray<class ABP_ChallengeSlot_C*>* Challenge_Slots);
	void GetAllChallengeSlots(TArray<class ABP_ChallengeSlot_C*>* Challenge_Slots);
	void GetAllChallengeSlotsSorted(TArray<class ABP_ChallengeSlot_C*>* ChallengeSlotsSorted_0);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BP_ChallengeManager_C">();
	}
	static class ABP_ChallengeManager_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<ABP_ChallengeManager_C>();
	}
};
static_assert(alignof(ABP_ChallengeManager_C) == 0x000008, "Wrong alignment on ABP_ChallengeManager_C");
static_assert(sizeof(ABP_ChallengeManager_C) == 0x000458, "Wrong size on ABP_ChallengeManager_C");
static_assert(offsetof(ABP_ChallengeManager_C, UberGraphFrame) == 0x000240, "Member 'ABP_ChallengeManager_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(ABP_ChallengeManager_C, BP_OnlineChallengesComponent) == 0x000248, "Member 'ABP_ChallengeManager_C::BP_OnlineChallengesComponent' has a wrong offset!");
static_assert(offsetof(ABP_ChallengeManager_C, Slots_Loaded) == 0x000250, "Member 'ABP_ChallengeManager_C::Slots_Loaded' has a wrong offset!");
static_assert(offsetof(ABP_ChallengeManager_C, Stats_Loaded) == 0x000251, "Member 'ABP_ChallengeManager_C::Stats_Loaded' has a wrong offset!");
static_assert(offsetof(ABP_ChallengeManager_C, Prerequisites_Loaded) == 0x000252, "Member 'ABP_ChallengeManager_C::Prerequisites_Loaded' has a wrong offset!");
static_assert(offsetof(ABP_ChallengeManager_C, Cloud_Slots_Data) == 0x000258, "Member 'ABP_ChallengeManager_C::Cloud_Slots_Data' has a wrong offset!");
static_assert(offsetof(ABP_ChallengeManager_C, Cloud_Stats_Data) == 0x000268, "Member 'ABP_ChallengeManager_C::Cloud_Stats_Data' has a wrong offset!");
static_assert(offsetof(ABP_ChallengeManager_C, Cloud_Request_Retry_Interval) == 0x0002B8, "Member 'ABP_ChallengeManager_C::Cloud_Request_Retry_Interval' has a wrong offset!");
static_assert(offsetof(ABP_ChallengeManager_C, State) == 0x0002BC, "Member 'ABP_ChallengeManager_C::State' has a wrong offset!");
static_assert(offsetof(ABP_ChallengeManager_C, Reset_Time) == 0x0002C0, "Member 'ABP_ChallengeManager_C::Reset_Time' has a wrong offset!");
static_assert(offsetof(ABP_ChallengeManager_C, Prerequisite_Pool) == 0x0002C8, "Member 'ABP_ChallengeManager_C::Prerequisite_Pool' has a wrong offset!");
static_assert(offsetof(ABP_ChallengeManager_C, Prerequisites_to_Load) == 0x000318, "Member 'ABP_ChallengeManager_C::Prerequisites_to_Load' has a wrong offset!");
static_assert(offsetof(ABP_ChallengeManager_C, Next_Reset_Timer) == 0x000328, "Member 'ABP_ChallengeManager_C::Next_Reset_Timer' has a wrong offset!");
static_assert(offsetof(ABP_ChallengeManager_C, Challenge_Manager_Initialized) == 0x000330, "Member 'ABP_ChallengeManager_C::Challenge_Manager_Initialized' has a wrong offset!");
static_assert(offsetof(ABP_ChallengeManager_C, Ignore_Daily_Reset_Constraint) == 0x000340, "Member 'ABP_ChallengeManager_C::Ignore_Daily_Reset_Constraint' has a wrong offset!");
static_assert(offsetof(ABP_ChallengeManager_C, ChallengeManagerDailyReseted) == 0x000348, "Member 'ABP_ChallengeManager_C::ChallengeManagerDailyReseted' has a wrong offset!");
static_assert(offsetof(ABP_ChallengeManager_C, DailyChallengeSlotData) == 0x000358, "Member 'ABP_ChallengeManager_C::DailyChallengeSlotData' has a wrong offset!");
static_assert(offsetof(ABP_ChallengeManager_C, NewChallengeSlotInitialized) == 0x000368, "Member 'ABP_ChallengeManager_C::NewChallengeSlotInitialized' has a wrong offset!");
static_assert(offsetof(ABP_ChallengeManager_C, CloudRequestRetryAttemptsLimit) == 0x000378, "Member 'ABP_ChallengeManager_C::CloudRequestRetryAttemptsLimit' has a wrong offset!");
static_assert(offsetof(ABP_ChallengeManager_C, CloudRequestRetryAttempts) == 0x00037C, "Member 'ABP_ChallengeManager_C::CloudRequestRetryAttempts' has a wrong offset!");
static_assert(offsetof(ABP_ChallengeManager_C, Challenge_Manager_Pending) == 0x000380, "Member 'ABP_ChallengeManager_C::Challenge_Manager_Pending' has a wrong offset!");
static_assert(offsetof(ABP_ChallengeManager_C, AllChallengeSlots) == 0x000390, "Member 'ABP_ChallengeManager_C::AllChallengeSlots' has a wrong offset!");
static_assert(offsetof(ABP_ChallengeManager_C, SeasonalRewardProgress) == 0x0003E0, "Member 'ABP_ChallengeManager_C::SeasonalRewardProgress' has a wrong offset!");
static_assert(offsetof(ABP_ChallengeManager_C, SeasonalRewardMax) == 0x0003E4, "Member 'ABP_ChallengeManager_C::SeasonalRewardMax' has a wrong offset!");
static_assert(offsetof(ABP_ChallengeManager_C, HasSeasonalRewardBeenClaimed) == 0x0003E8, "Member 'ABP_ChallengeManager_C::HasSeasonalRewardBeenClaimed' has a wrong offset!");
static_assert(offsetof(ABP_ChallengeManager_C, SeasonalRewardList) == 0x0003F0, "Member 'ABP_ChallengeManager_C::SeasonalRewardList' has a wrong offset!");
static_assert(offsetof(ABP_ChallengeManager_C, ChallengeSlotsSorted) == 0x000440, "Member 'ABP_ChallengeManager_C::ChallengeSlotsSorted' has a wrong offset!");
static_assert(offsetof(ABP_ChallengeManager_C, IsRerolling) == 0x000450, "Member 'ABP_ChallengeManager_C::IsRerolling' has a wrong offset!");

}

