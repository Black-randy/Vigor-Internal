#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_TitleLogic_Base

#include "Basic.hpp"

#include "BP_TitleLogic_Base_classes.hpp"
#include "BP_TitleLogic_Base_parameters.hpp"


namespace SDK
{

// Function BP_TitleLogic_Base.BP_TitleLogic_Base_C.Initialization Finished__DelegateSignature
// (Public, Delegate, BlueprintCallable, BlueprintEvent)

void ABP_TitleLogic_Base_C::Initialization_Finished__DelegateSignature()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_TitleLogic_Base_C", "Initialization Finished__DelegateSignature");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_TitleLogic_Base.BP_TitleLogic_Base_C.Is Initialized
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// bool                                    Initialized                                            (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ABP_TitleLogic_Base_C::Is_Initialized(bool* Initialized)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_TitleLogic_Base_C", "Is Initialized");

	Params::BP_TitleLogic_Base_C_Is_Initialized Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Initialized != nullptr)
		*Initialized = Parms.Initialized;
}


// Function BP_TitleLogic_Base.BP_TitleLogic_Base_C.Is Title Owned
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// int32                                   Title_ID                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    Title_Owned                                            (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
// int32                                   Rank_Index                                             (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_TitleLogic_Base_C::Is_Title_Owned(int32 Title_ID, bool* Title_Owned, int32* Rank_Index)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_TitleLogic_Base_C", "Is Title Owned");

	Params::BP_TitleLogic_Base_C_Is_Title_Owned Parms{};

	Parms.Title_ID = Title_ID;

	UObject::ProcessEvent(Func, &Parms);

	if (Title_Owned != nullptr)
		*Title_Owned = Parms.Title_Owned;

	if (Rank_Index != nullptr)
		*Rank_Index = Parms.Rank_Index;
}


// Function BP_TitleLogic_Base.BP_TitleLogic_Base_C.Is Rank Owned
// (Protected, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// struct FF_TitleRank                     Rank_Info                                              (BlueprintVisible, BlueprintReadOnly, Parm, HasGetValueTypeHash)
// bool                                    Owned                                                  (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ABP_TitleLogic_Base_C::Is_Rank_Owned(const struct FF_TitleRank& Rank_Info, bool* Owned)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_TitleLogic_Base_C", "Is Rank Owned");

	Params::BP_TitleLogic_Base_C_Is_Rank_Owned Parms{};

	Parms.Rank_Info = std::move(Rank_Info);

	UObject::ProcessEvent(Func, &Parms);

	if (Owned != nullptr)
		*Owned = Parms.Owned;
}


// Function BP_TitleLogic_Base.BP_TitleLogic_Base_C.Get Title Logic Status Log
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// class FString                           Log                                                    (Parm, OutParm, ZeroConstructor, HasGetValueTypeHash)

void ABP_TitleLogic_Base_C::Get_Title_Logic_Status_Log(class FString* Log)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_TitleLogic_Base_C", "Get Title Logic Status Log");

	Params::BP_TitleLogic_Base_C_Get_Title_Logic_Status_Log Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Log != nullptr)
		*Log = std::move(Parms.Log);
}


// Function BP_TitleLogic_Base.BP_TitleLogic_Base_C.Get Title Item
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FF_TitleRank                     Rank                                                   (BlueprintVisible, BlueprintReadOnly, Parm, HasGetValueTypeHash)
// class UClass*                           Item                                                   (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    Valid                                                  (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ABP_TitleLogic_Base_C::Get_Title_Item(const struct FF_TitleRank& Rank, class UClass** Item, bool* Valid)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_TitleLogic_Base_C", "Get Title Item");

	Params::BP_TitleLogic_Base_C_Get_Title_Item Parms{};

	Parms.Rank = std::move(Rank);

	UObject::ProcessEvent(Func, &Parms);

	if (Item != nullptr)
		*Item = Parms.Item;

	if (Valid != nullptr)
		*Valid = Parms.Valid;
}

}

