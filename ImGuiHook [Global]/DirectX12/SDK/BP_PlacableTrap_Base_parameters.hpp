#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_PlacableTrap_Base

#include "Basic.hpp"

#include "CoreUObject_structs.hpp"
#include "Engine_structs.hpp"
#include "PhysicsCore_structs.hpp"


namespace SDK::Params
{

// Function BP_PlacableTrap_Base.BP_PlacableTrap_Base_C.ExecuteUbergraph_BP_PlacableTrap_Base
// 0x0130 (0x0130 - 0x0000)
struct BP_PlacableTrap_Base_C_ExecuteUbergraph_BP_PlacableTrap_Base final
{
public:
	int32                                         EntryPoint;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UClass*                                 CallFunc_GetObjectClass_ReturnValue;               // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue_1;                    // 0x0011(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanAND_ReturnValue;                   // 0x0012(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_CustomEvent_TrapCanBePlaced;                // 0x0013(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_HasAuthority_ReturnValue;                 // 0x0014(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_15[0x3];                                       // 0x0015(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         K2Node_Event_DeltaSeconds;                         // 0x0018(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class ABP_PlacableTrap_Object_Base_C*         K2Node_CustomEvent_PlacedTrap;                     // 0x0020(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue_2;                    // 0x0028(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_29[0x3];                                       // 0x0029(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FHitResult                             CallFunc_Trap_Placement_Calculate_ReturnValue;     // 0x002C(0x008C)(IsPlainOldData, NoDestructor, ContainsInstancedReference)
	bool                                          CallFunc_Trap_Placement_Calculate_WasHit;          // 0x00B8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Not_PreBool_ReturnValue;                  // 0x00B9(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue_3;                    // 0x00BA(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Trap_Placement_CanBePlaced_CanBePlaced;   // 0x00BB(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsClimbingLadder_ReturnValue;             // 0x00BC(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue_4;                    // 0x00BD(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanAND_ReturnValue_1;                 // 0x00BE(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_GetIsDead_ReturnValue;                    // 0x00BF(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsSprinting_ReturnValue;                  // 0x00C0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanOR_ReturnValue;                    // 0x00C1(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanOR_ReturnValue_1;                  // 0x00C2(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_C3[0x5];                                       // 0x00C3(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	class APlayerController*                      K2Node_CustomEvent_PlayerController;               // 0x00C8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AItem*                                  K2Node_ComponentBoundEvent_Item;                   // 0x00D0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AHumanCharacter*                        K2Node_ComponentBoundEvent_ItemOwner;              // 0x00D8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 K2Node_ComponentBoundEvent_TargetActor;            // 0x00E0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AController*                            CallFunc_GetController_ReturnValue;                // 0x00E8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AHumanCharacter*                        K2Node_Event_ParentCharacter_1;                    // 0x00F0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AHumanPlayerController*                 K2Node_DynamicCast_AsHuman_Player_Controller;      // 0x00F8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0100(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_101[0x7];                                      // 0x0101(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AController*                            CallFunc_GetController_ReturnValue_1;              // 0x0108(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class APlayerController*                      K2Node_DynamicCast_AsPlayer_Controller;            // 0x0110(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess_1;                     // 0x0118(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_119[0x7];                                      // 0x0119(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AHumanCharacter*                        K2Node_Event_ParentCharacter;                      // 0x0120(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue_5;                    // 0x0128(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_PlacableTrap_Base_C_ExecuteUbergraph_BP_PlacableTrap_Base) == 0x000008, "Wrong alignment on BP_PlacableTrap_Base_C_ExecuteUbergraph_BP_PlacableTrap_Base");
static_assert(sizeof(BP_PlacableTrap_Base_C_ExecuteUbergraph_BP_PlacableTrap_Base) == 0x000130, "Wrong size on BP_PlacableTrap_Base_C_ExecuteUbergraph_BP_PlacableTrap_Base");
static_assert(offsetof(BP_PlacableTrap_Base_C_ExecuteUbergraph_BP_PlacableTrap_Base, EntryPoint) == 0x000000, "Member 'BP_PlacableTrap_Base_C_ExecuteUbergraph_BP_PlacableTrap_Base::EntryPoint' has a wrong offset!");
static_assert(offsetof(BP_PlacableTrap_Base_C_ExecuteUbergraph_BP_PlacableTrap_Base, CallFunc_GetObjectClass_ReturnValue) == 0x000008, "Member 'BP_PlacableTrap_Base_C_ExecuteUbergraph_BP_PlacableTrap_Base::CallFunc_GetObjectClass_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlacableTrap_Base_C_ExecuteUbergraph_BP_PlacableTrap_Base, CallFunc_IsValid_ReturnValue) == 0x000010, "Member 'BP_PlacableTrap_Base_C_ExecuteUbergraph_BP_PlacableTrap_Base::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlacableTrap_Base_C_ExecuteUbergraph_BP_PlacableTrap_Base, CallFunc_IsValid_ReturnValue_1) == 0x000011, "Member 'BP_PlacableTrap_Base_C_ExecuteUbergraph_BP_PlacableTrap_Base::CallFunc_IsValid_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_PlacableTrap_Base_C_ExecuteUbergraph_BP_PlacableTrap_Base, CallFunc_BooleanAND_ReturnValue) == 0x000012, "Member 'BP_PlacableTrap_Base_C_ExecuteUbergraph_BP_PlacableTrap_Base::CallFunc_BooleanAND_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlacableTrap_Base_C_ExecuteUbergraph_BP_PlacableTrap_Base, K2Node_CustomEvent_TrapCanBePlaced) == 0x000013, "Member 'BP_PlacableTrap_Base_C_ExecuteUbergraph_BP_PlacableTrap_Base::K2Node_CustomEvent_TrapCanBePlaced' has a wrong offset!");
static_assert(offsetof(BP_PlacableTrap_Base_C_ExecuteUbergraph_BP_PlacableTrap_Base, CallFunc_HasAuthority_ReturnValue) == 0x000014, "Member 'BP_PlacableTrap_Base_C_ExecuteUbergraph_BP_PlacableTrap_Base::CallFunc_HasAuthority_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlacableTrap_Base_C_ExecuteUbergraph_BP_PlacableTrap_Base, K2Node_Event_DeltaSeconds) == 0x000018, "Member 'BP_PlacableTrap_Base_C_ExecuteUbergraph_BP_PlacableTrap_Base::K2Node_Event_DeltaSeconds' has a wrong offset!");
static_assert(offsetof(BP_PlacableTrap_Base_C_ExecuteUbergraph_BP_PlacableTrap_Base, K2Node_CustomEvent_PlacedTrap) == 0x000020, "Member 'BP_PlacableTrap_Base_C_ExecuteUbergraph_BP_PlacableTrap_Base::K2Node_CustomEvent_PlacedTrap' has a wrong offset!");
static_assert(offsetof(BP_PlacableTrap_Base_C_ExecuteUbergraph_BP_PlacableTrap_Base, CallFunc_IsValid_ReturnValue_2) == 0x000028, "Member 'BP_PlacableTrap_Base_C_ExecuteUbergraph_BP_PlacableTrap_Base::CallFunc_IsValid_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BP_PlacableTrap_Base_C_ExecuteUbergraph_BP_PlacableTrap_Base, CallFunc_Trap_Placement_Calculate_ReturnValue) == 0x00002C, "Member 'BP_PlacableTrap_Base_C_ExecuteUbergraph_BP_PlacableTrap_Base::CallFunc_Trap_Placement_Calculate_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlacableTrap_Base_C_ExecuteUbergraph_BP_PlacableTrap_Base, CallFunc_Trap_Placement_Calculate_WasHit) == 0x0000B8, "Member 'BP_PlacableTrap_Base_C_ExecuteUbergraph_BP_PlacableTrap_Base::CallFunc_Trap_Placement_Calculate_WasHit' has a wrong offset!");
static_assert(offsetof(BP_PlacableTrap_Base_C_ExecuteUbergraph_BP_PlacableTrap_Base, CallFunc_Not_PreBool_ReturnValue) == 0x0000B9, "Member 'BP_PlacableTrap_Base_C_ExecuteUbergraph_BP_PlacableTrap_Base::CallFunc_Not_PreBool_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlacableTrap_Base_C_ExecuteUbergraph_BP_PlacableTrap_Base, CallFunc_IsValid_ReturnValue_3) == 0x0000BA, "Member 'BP_PlacableTrap_Base_C_ExecuteUbergraph_BP_PlacableTrap_Base::CallFunc_IsValid_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(BP_PlacableTrap_Base_C_ExecuteUbergraph_BP_PlacableTrap_Base, CallFunc_Trap_Placement_CanBePlaced_CanBePlaced) == 0x0000BB, "Member 'BP_PlacableTrap_Base_C_ExecuteUbergraph_BP_PlacableTrap_Base::CallFunc_Trap_Placement_CanBePlaced_CanBePlaced' has a wrong offset!");
static_assert(offsetof(BP_PlacableTrap_Base_C_ExecuteUbergraph_BP_PlacableTrap_Base, CallFunc_IsClimbingLadder_ReturnValue) == 0x0000BC, "Member 'BP_PlacableTrap_Base_C_ExecuteUbergraph_BP_PlacableTrap_Base::CallFunc_IsClimbingLadder_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlacableTrap_Base_C_ExecuteUbergraph_BP_PlacableTrap_Base, CallFunc_IsValid_ReturnValue_4) == 0x0000BD, "Member 'BP_PlacableTrap_Base_C_ExecuteUbergraph_BP_PlacableTrap_Base::CallFunc_IsValid_ReturnValue_4' has a wrong offset!");
static_assert(offsetof(BP_PlacableTrap_Base_C_ExecuteUbergraph_BP_PlacableTrap_Base, CallFunc_BooleanAND_ReturnValue_1) == 0x0000BE, "Member 'BP_PlacableTrap_Base_C_ExecuteUbergraph_BP_PlacableTrap_Base::CallFunc_BooleanAND_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_PlacableTrap_Base_C_ExecuteUbergraph_BP_PlacableTrap_Base, CallFunc_GetIsDead_ReturnValue) == 0x0000BF, "Member 'BP_PlacableTrap_Base_C_ExecuteUbergraph_BP_PlacableTrap_Base::CallFunc_GetIsDead_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlacableTrap_Base_C_ExecuteUbergraph_BP_PlacableTrap_Base, CallFunc_IsSprinting_ReturnValue) == 0x0000C0, "Member 'BP_PlacableTrap_Base_C_ExecuteUbergraph_BP_PlacableTrap_Base::CallFunc_IsSprinting_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlacableTrap_Base_C_ExecuteUbergraph_BP_PlacableTrap_Base, CallFunc_BooleanOR_ReturnValue) == 0x0000C1, "Member 'BP_PlacableTrap_Base_C_ExecuteUbergraph_BP_PlacableTrap_Base::CallFunc_BooleanOR_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlacableTrap_Base_C_ExecuteUbergraph_BP_PlacableTrap_Base, CallFunc_BooleanOR_ReturnValue_1) == 0x0000C2, "Member 'BP_PlacableTrap_Base_C_ExecuteUbergraph_BP_PlacableTrap_Base::CallFunc_BooleanOR_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_PlacableTrap_Base_C_ExecuteUbergraph_BP_PlacableTrap_Base, K2Node_CustomEvent_PlayerController) == 0x0000C8, "Member 'BP_PlacableTrap_Base_C_ExecuteUbergraph_BP_PlacableTrap_Base::K2Node_CustomEvent_PlayerController' has a wrong offset!");
static_assert(offsetof(BP_PlacableTrap_Base_C_ExecuteUbergraph_BP_PlacableTrap_Base, K2Node_ComponentBoundEvent_Item) == 0x0000D0, "Member 'BP_PlacableTrap_Base_C_ExecuteUbergraph_BP_PlacableTrap_Base::K2Node_ComponentBoundEvent_Item' has a wrong offset!");
static_assert(offsetof(BP_PlacableTrap_Base_C_ExecuteUbergraph_BP_PlacableTrap_Base, K2Node_ComponentBoundEvent_ItemOwner) == 0x0000D8, "Member 'BP_PlacableTrap_Base_C_ExecuteUbergraph_BP_PlacableTrap_Base::K2Node_ComponentBoundEvent_ItemOwner' has a wrong offset!");
static_assert(offsetof(BP_PlacableTrap_Base_C_ExecuteUbergraph_BP_PlacableTrap_Base, K2Node_ComponentBoundEvent_TargetActor) == 0x0000E0, "Member 'BP_PlacableTrap_Base_C_ExecuteUbergraph_BP_PlacableTrap_Base::K2Node_ComponentBoundEvent_TargetActor' has a wrong offset!");
static_assert(offsetof(BP_PlacableTrap_Base_C_ExecuteUbergraph_BP_PlacableTrap_Base, CallFunc_GetController_ReturnValue) == 0x0000E8, "Member 'BP_PlacableTrap_Base_C_ExecuteUbergraph_BP_PlacableTrap_Base::CallFunc_GetController_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlacableTrap_Base_C_ExecuteUbergraph_BP_PlacableTrap_Base, K2Node_Event_ParentCharacter_1) == 0x0000F0, "Member 'BP_PlacableTrap_Base_C_ExecuteUbergraph_BP_PlacableTrap_Base::K2Node_Event_ParentCharacter_1' has a wrong offset!");
static_assert(offsetof(BP_PlacableTrap_Base_C_ExecuteUbergraph_BP_PlacableTrap_Base, K2Node_DynamicCast_AsHuman_Player_Controller) == 0x0000F8, "Member 'BP_PlacableTrap_Base_C_ExecuteUbergraph_BP_PlacableTrap_Base::K2Node_DynamicCast_AsHuman_Player_Controller' has a wrong offset!");
static_assert(offsetof(BP_PlacableTrap_Base_C_ExecuteUbergraph_BP_PlacableTrap_Base, K2Node_DynamicCast_bSuccess) == 0x000100, "Member 'BP_PlacableTrap_Base_C_ExecuteUbergraph_BP_PlacableTrap_Base::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(BP_PlacableTrap_Base_C_ExecuteUbergraph_BP_PlacableTrap_Base, CallFunc_GetController_ReturnValue_1) == 0x000108, "Member 'BP_PlacableTrap_Base_C_ExecuteUbergraph_BP_PlacableTrap_Base::CallFunc_GetController_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_PlacableTrap_Base_C_ExecuteUbergraph_BP_PlacableTrap_Base, K2Node_DynamicCast_AsPlayer_Controller) == 0x000110, "Member 'BP_PlacableTrap_Base_C_ExecuteUbergraph_BP_PlacableTrap_Base::K2Node_DynamicCast_AsPlayer_Controller' has a wrong offset!");
static_assert(offsetof(BP_PlacableTrap_Base_C_ExecuteUbergraph_BP_PlacableTrap_Base, K2Node_DynamicCast_bSuccess_1) == 0x000118, "Member 'BP_PlacableTrap_Base_C_ExecuteUbergraph_BP_PlacableTrap_Base::K2Node_DynamicCast_bSuccess_1' has a wrong offset!");
static_assert(offsetof(BP_PlacableTrap_Base_C_ExecuteUbergraph_BP_PlacableTrap_Base, K2Node_Event_ParentCharacter) == 0x000120, "Member 'BP_PlacableTrap_Base_C_ExecuteUbergraph_BP_PlacableTrap_Base::K2Node_Event_ParentCharacter' has a wrong offset!");
static_assert(offsetof(BP_PlacableTrap_Base_C_ExecuteUbergraph_BP_PlacableTrap_Base, CallFunc_IsValid_ReturnValue_5) == 0x000128, "Member 'BP_PlacableTrap_Base_C_ExecuteUbergraph_BP_PlacableTrap_Base::CallFunc_IsValid_ReturnValue_5' has a wrong offset!");

// Function BP_PlacableTrap_Base.BP_PlacableTrap_Base_C.OnUngotFromHandsImplementable
// 0x0008 (0x0008 - 0x0000)
struct BP_PlacableTrap_Base_C_OnUngotFromHandsImplementable final
{
public:
	class AHumanCharacter*                        ParentCharacter;                                   // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_PlacableTrap_Base_C_OnUngotFromHandsImplementable) == 0x000008, "Wrong alignment on BP_PlacableTrap_Base_C_OnUngotFromHandsImplementable");
static_assert(sizeof(BP_PlacableTrap_Base_C_OnUngotFromHandsImplementable) == 0x000008, "Wrong size on BP_PlacableTrap_Base_C_OnUngotFromHandsImplementable");
static_assert(offsetof(BP_PlacableTrap_Base_C_OnUngotFromHandsImplementable, ParentCharacter) == 0x000000, "Member 'BP_PlacableTrap_Base_C_OnUngotFromHandsImplementable::ParentCharacter' has a wrong offset!");

// Function BP_PlacableTrap_Base.BP_PlacableTrap_Base_C.OnGotIntoHandsImplementable
// 0x0008 (0x0008 - 0x0000)
struct BP_PlacableTrap_Base_C_OnGotIntoHandsImplementable final
{
public:
	class AHumanCharacter*                        ParentCharacter;                                   // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_PlacableTrap_Base_C_OnGotIntoHandsImplementable) == 0x000008, "Wrong alignment on BP_PlacableTrap_Base_C_OnGotIntoHandsImplementable");
static_assert(sizeof(BP_PlacableTrap_Base_C_OnGotIntoHandsImplementable) == 0x000008, "Wrong size on BP_PlacableTrap_Base_C_OnGotIntoHandsImplementable");
static_assert(offsetof(BP_PlacableTrap_Base_C_OnGotIntoHandsImplementable, ParentCharacter) == 0x000000, "Member 'BP_PlacableTrap_Base_C_OnGotIntoHandsImplementable::ParentCharacter' has a wrong offset!");

// Function BP_PlacableTrap_Base.BP_PlacableTrap_Base_C.Trap_Set_Variables
// 0x0008 (0x0008 - 0x0000)
struct BP_PlacableTrap_Base_C_Trap_Set_Variables final
{
public:
	class ABP_PlacableTrap_Object_Base_C*         PlacedTrap;                                        // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_PlacableTrap_Base_C_Trap_Set_Variables) == 0x000008, "Wrong alignment on BP_PlacableTrap_Base_C_Trap_Set_Variables");
static_assert(sizeof(BP_PlacableTrap_Base_C_Trap_Set_Variables) == 0x000008, "Wrong size on BP_PlacableTrap_Base_C_Trap_Set_Variables");
static_assert(offsetof(BP_PlacableTrap_Base_C_Trap_Set_Variables, PlacedTrap) == 0x000000, "Member 'BP_PlacableTrap_Base_C_Trap_Set_Variables::PlacedTrap' has a wrong offset!");

// Function BP_PlacableTrap_Base.BP_PlacableTrap_Base_C.ReplicateTrapCanBePlaced
// 0x0001 (0x0001 - 0x0000)
struct BP_PlacableTrap_Base_C_ReplicateTrapCanBePlaced final
{
public:
	bool                                          TrapCanBePlaced;                                   // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_PlacableTrap_Base_C_ReplicateTrapCanBePlaced) == 0x000001, "Wrong alignment on BP_PlacableTrap_Base_C_ReplicateTrapCanBePlaced");
static_assert(sizeof(BP_PlacableTrap_Base_C_ReplicateTrapCanBePlaced) == 0x000001, "Wrong size on BP_PlacableTrap_Base_C_ReplicateTrapCanBePlaced");
static_assert(offsetof(BP_PlacableTrap_Base_C_ReplicateTrapCanBePlaced, TrapCanBePlaced) == 0x000000, "Member 'BP_PlacableTrap_Base_C_ReplicateTrapCanBePlaced::TrapCanBePlaced' has a wrong offset!");

// Function BP_PlacableTrap_Base.BP_PlacableTrap_Base_C.ReceiveTick
// 0x0004 (0x0004 - 0x0000)
struct BP_PlacableTrap_Base_C_ReceiveTick final
{
public:
	float                                         DeltaSeconds;                                      // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_PlacableTrap_Base_C_ReceiveTick) == 0x000004, "Wrong alignment on BP_PlacableTrap_Base_C_ReceiveTick");
static_assert(sizeof(BP_PlacableTrap_Base_C_ReceiveTick) == 0x000004, "Wrong size on BP_PlacableTrap_Base_C_ReceiveTick");
static_assert(offsetof(BP_PlacableTrap_Base_C_ReceiveTick, DeltaSeconds) == 0x000000, "Member 'BP_PlacableTrap_Base_C_ReceiveTick::DeltaSeconds' has a wrong offset!");

// Function BP_PlacableTrap_Base.BP_PlacableTrap_Base_C.Trap_Object_Spawn
// 0x0008 (0x0008 - 0x0000)
struct BP_PlacableTrap_Base_C_Trap_Object_Spawn final
{
public:
	class APlayerController*                      PlayerController;                                  // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_PlacableTrap_Base_C_Trap_Object_Spawn) == 0x000008, "Wrong alignment on BP_PlacableTrap_Base_C_Trap_Object_Spawn");
static_assert(sizeof(BP_PlacableTrap_Base_C_Trap_Object_Spawn) == 0x000008, "Wrong size on BP_PlacableTrap_Base_C_Trap_Object_Spawn");
static_assert(offsetof(BP_PlacableTrap_Base_C_Trap_Object_Spawn, PlayerController) == 0x000000, "Member 'BP_PlacableTrap_Base_C_Trap_Object_Spawn::PlayerController' has a wrong offset!");

// Function BP_PlacableTrap_Base.BP_PlacableTrap_Base_C.BndEvt__Usable_K2Node_ComponentBoundEvent_0_Used__DelegateSignature
// 0x0018 (0x0018 - 0x0000)
struct BP_PlacableTrap_Base_C_BndEvt__Usable_K2Node_ComponentBoundEvent_0_Used__DelegateSignature final
{
public:
	class AItem*                                  Item;                                              // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AHumanCharacter*                        ItemOwner;                                         // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 TargetActor;                                       // 0x0010(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_PlacableTrap_Base_C_BndEvt__Usable_K2Node_ComponentBoundEvent_0_Used__DelegateSignature) == 0x000008, "Wrong alignment on BP_PlacableTrap_Base_C_BndEvt__Usable_K2Node_ComponentBoundEvent_0_Used__DelegateSignature");
static_assert(sizeof(BP_PlacableTrap_Base_C_BndEvt__Usable_K2Node_ComponentBoundEvent_0_Used__DelegateSignature) == 0x000018, "Wrong size on BP_PlacableTrap_Base_C_BndEvt__Usable_K2Node_ComponentBoundEvent_0_Used__DelegateSignature");
static_assert(offsetof(BP_PlacableTrap_Base_C_BndEvt__Usable_K2Node_ComponentBoundEvent_0_Used__DelegateSignature, Item) == 0x000000, "Member 'BP_PlacableTrap_Base_C_BndEvt__Usable_K2Node_ComponentBoundEvent_0_Used__DelegateSignature::Item' has a wrong offset!");
static_assert(offsetof(BP_PlacableTrap_Base_C_BndEvt__Usable_K2Node_ComponentBoundEvent_0_Used__DelegateSignature, ItemOwner) == 0x000008, "Member 'BP_PlacableTrap_Base_C_BndEvt__Usable_K2Node_ComponentBoundEvent_0_Used__DelegateSignature::ItemOwner' has a wrong offset!");
static_assert(offsetof(BP_PlacableTrap_Base_C_BndEvt__Usable_K2Node_ComponentBoundEvent_0_Used__DelegateSignature, TargetActor) == 0x000010, "Member 'BP_PlacableTrap_Base_C_BndEvt__Usable_K2Node_ComponentBoundEvent_0_Used__DelegateSignature::TargetActor' has a wrong offset!");

// Function BP_PlacableTrap_Base.BP_PlacableTrap_Base_C.Trap_Placement_CanBePlaced
// 0x0338 (0x0338 - 0x0000)
struct BP_PlacableTrap_Base_C_Trap_Placement_CanBePlaced final
{
public:
	struct FHitResult                             Hit;                                               // 0x0000(0x008C)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, ContainsInstancedReference)
	float                                         MaxZNormal;                                        // 0x008C(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<TSoftClassPtr<class UClass>>           ActorsThatBlocksThePlacement;                      // 0x0090(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
	TArray<EPhysicalSurface>                      SurfacesThatBlocksThePlacement;                    // 0x00A0(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
	bool                                          Trap_CanBePlacedInWater;                           // 0x00B0(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Trap_CanBePlacedVertically;                        // 0x00B1(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CanBePlaced;                                       // 0x00B2(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_B3[0x5];                                       // 0x00B3(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class AActor*>                         Helper;                                            // 0x00B8(0x0010)(Edit, BlueprintVisible, DisableEditOnTemplate)
	class APawn*                                  CallFunc_K2_GetPawn_ReturnValue;                   // 0x00C8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_K2_GetActorLocation_ReturnValue;          // 0x00D0(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               CallFunc_GetCameraRotation_ReturnValue;            // 0x00DC(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FVector                                CallFunc_GetCameraLocation_ReturnValue;            // 0x00E8(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_GetForwardVector_ReturnValue;             // 0x00F4(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_ProjectPointOnToPlane_ReturnValue;        // 0x0100(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x010C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Vector_DistanceSquared_ReturnValue;       // 0x0110(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue_1;               // 0x0114(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue_2;               // 0x0118(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Greater_IntInt_ReturnValue;               // 0x011C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_11D[0x3];                                      // 0x011D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Array_Length_ReturnValue_3;               // 0x0120(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Greater_IntInt_ReturnValue_1;             // 0x0124(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BreakHitResult_bBlockingHit;              // 0x0125(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BreakHitResult_bInitialOverlap;           // 0x0126(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_127[0x1];                                      // 0x0127(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_BreakHitResult_Time;                      // 0x0128(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakHitResult_Distance;                  // 0x012C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_Location;                  // 0x0130(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_ImpactPoint;               // 0x013C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_Normal;                    // 0x0148(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_ImpactNormal;              // 0x0154(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UPhysicalMaterial*                      CallFunc_BreakHitResult_PhysMat;                   // 0x0160(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 CallFunc_BreakHitResult_HitActor;                  // 0x0168(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UPrimitiveComponent*                    CallFunc_BreakHitResult_HitComponent;              // 0x0170(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EPhysicalSurface                              CallFunc_BreakHitResult_ShapeSurfaceType;          // 0x0178(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_179[0x3];                                      // 0x0179(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   CallFunc_BreakHitResult_HitBoneName;               // 0x017C(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_BreakHitResult_HitItem;                   // 0x0184(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_BreakHitResult_ElementIndex;              // 0x0188(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_BreakHitResult_FaceIndex;                 // 0x018C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_TraceStart;                // 0x0190(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_TraceEnd;                  // 0x019C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UClass*                                 CallFunc_GetObjectClass_ReturnValue;               // 0x01A8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_X;                            // 0x01B0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_Y;                            // 0x01B4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_Z;                            // 0x01B8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_ProjectPointOnToPlane_ReturnValue_1;      // 0x01BC(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_GreaterEqual_FloatFloat_ReturnValue;      // 0x01C8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_1C9[0x3];                                      // 0x01C9(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_Vector_DistanceSquared_ReturnValue_1;     // 0x01CC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_FloatFloat_ReturnValue;              // 0x01D0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_1D1[0x3];                                      // 0x01D1(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_IsPointInWater_Depth;                     // 0x01D4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_IsPointInWater_WaterSurfaceLocation;      // 0x01D8(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsPointInWater_ReturnValue;               // 0x01E4(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_1E5[0x3];                                      // 0x01E5(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_Add_VectorVector_ReturnValue;             // 0x01E8(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x01F4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x01F8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_1F9[0x3];                                      // 0x01F9(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x01FC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue_4;               // 0x0200(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Hologram_CanBePlaced_CanBePlaced;         // 0x0204(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Greater_IntInt_ReturnValue_2;             // 0x0205(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Not_PreBool_ReturnValue;                  // 0x0206(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Array_RemoveItem_ReturnValue;             // 0x0207(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	TArray<class AActor*>                         CallFunc_GetOverlappingActors_OverlappingActors;   // 0x0208(0x0010)(ReferenceParm)
	class UFlameAssetManager*                     CallFunc_GetAssetManagerSystem_ReturnValue;        // 0x0218(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_True_if_break_was_hit_Variable;          // 0x0220(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_221[0x7];                                      // 0x0221(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class AActor*>                         K2Node_MakeArray_Array;                            // 0x0228(0x0010)(ConstParm, ReferenceParm)
	int32                                         Temp_int_Array_Index_Variable;                     // 0x0238(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_23C[0x4];                                      // 0x023C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TSoftClassPtr<class UClass>                   CallFunc_Array_Get_Item;                           // 0x0240(0x0028)(HasGetValueTypeHash)
	class APawn*                                  CallFunc_K2_GetPawn_ReturnValue_1;                 // 0x0268(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UClass*                                 CallFunc_LoadSoftClassReference_ReturnValue;       // 0x0270(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_K2_GetActorLocation_ReturnValue_1;        // 0x0278(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_ClassIsChildOf_ReturnValue;               // 0x0284(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValidClass_ReturnValue;                 // 0x0285(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValidSoftClassReference_ReturnValue;    // 0x0286(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanAND_ReturnValue;                   // 0x0287(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_True_if_break_was_hit_Variable_1;        // 0x0288(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_289[0x3];                                      // 0x0289(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Temp_int_Loop_Counter_Variable_1;                  // 0x028C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue_1;                // 0x0290(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_291[0x3];                                      // 0x0291(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Add_IntInt_ReturnValue_1;                 // 0x0294(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Array_Index_Variable_1;                   // 0x0298(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EPhysicalSurface                              CallFunc_Array_Get_Item_1;                         // 0x029C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue;          // 0x029D(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	EDrawDebugTrace                               Temp_byte_Variable;                                // 0x029E(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EDrawDebugTrace                               Temp_byte_Variable_1;                              // 0x029F(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable;                                // 0x02A0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	EDrawDebugTrace                               K2Node_Select_Default;                             // 0x02A1(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2A2[0x2];                                      // 0x02A2(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	struct FHitResult                             CallFunc_LineTraceSingle_OutHit;                   // 0x02A4(0x008C)(IsPlainOldData, NoDestructor, ContainsInstancedReference)
	bool                                          CallFunc_LineTraceSingle_ReturnValue;              // 0x0330(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_PlacableTrap_Base_C_Trap_Placement_CanBePlaced) == 0x000008, "Wrong alignment on BP_PlacableTrap_Base_C_Trap_Placement_CanBePlaced");
static_assert(sizeof(BP_PlacableTrap_Base_C_Trap_Placement_CanBePlaced) == 0x000338, "Wrong size on BP_PlacableTrap_Base_C_Trap_Placement_CanBePlaced");
static_assert(offsetof(BP_PlacableTrap_Base_C_Trap_Placement_CanBePlaced, Hit) == 0x000000, "Member 'BP_PlacableTrap_Base_C_Trap_Placement_CanBePlaced::Hit' has a wrong offset!");
static_assert(offsetof(BP_PlacableTrap_Base_C_Trap_Placement_CanBePlaced, MaxZNormal) == 0x00008C, "Member 'BP_PlacableTrap_Base_C_Trap_Placement_CanBePlaced::MaxZNormal' has a wrong offset!");
static_assert(offsetof(BP_PlacableTrap_Base_C_Trap_Placement_CanBePlaced, ActorsThatBlocksThePlacement) == 0x000090, "Member 'BP_PlacableTrap_Base_C_Trap_Placement_CanBePlaced::ActorsThatBlocksThePlacement' has a wrong offset!");
static_assert(offsetof(BP_PlacableTrap_Base_C_Trap_Placement_CanBePlaced, SurfacesThatBlocksThePlacement) == 0x0000A0, "Member 'BP_PlacableTrap_Base_C_Trap_Placement_CanBePlaced::SurfacesThatBlocksThePlacement' has a wrong offset!");
static_assert(offsetof(BP_PlacableTrap_Base_C_Trap_Placement_CanBePlaced, Trap_CanBePlacedInWater) == 0x0000B0, "Member 'BP_PlacableTrap_Base_C_Trap_Placement_CanBePlaced::Trap_CanBePlacedInWater' has a wrong offset!");
static_assert(offsetof(BP_PlacableTrap_Base_C_Trap_Placement_CanBePlaced, Trap_CanBePlacedVertically) == 0x0000B1, "Member 'BP_PlacableTrap_Base_C_Trap_Placement_CanBePlaced::Trap_CanBePlacedVertically' has a wrong offset!");
static_assert(offsetof(BP_PlacableTrap_Base_C_Trap_Placement_CanBePlaced, CanBePlaced) == 0x0000B2, "Member 'BP_PlacableTrap_Base_C_Trap_Placement_CanBePlaced::CanBePlaced' has a wrong offset!");
static_assert(offsetof(BP_PlacableTrap_Base_C_Trap_Placement_CanBePlaced, Helper) == 0x0000B8, "Member 'BP_PlacableTrap_Base_C_Trap_Placement_CanBePlaced::Helper' has a wrong offset!");
static_assert(offsetof(BP_PlacableTrap_Base_C_Trap_Placement_CanBePlaced, CallFunc_K2_GetPawn_ReturnValue) == 0x0000C8, "Member 'BP_PlacableTrap_Base_C_Trap_Placement_CanBePlaced::CallFunc_K2_GetPawn_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlacableTrap_Base_C_Trap_Placement_CanBePlaced, CallFunc_K2_GetActorLocation_ReturnValue) == 0x0000D0, "Member 'BP_PlacableTrap_Base_C_Trap_Placement_CanBePlaced::CallFunc_K2_GetActorLocation_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlacableTrap_Base_C_Trap_Placement_CanBePlaced, CallFunc_GetCameraRotation_ReturnValue) == 0x0000DC, "Member 'BP_PlacableTrap_Base_C_Trap_Placement_CanBePlaced::CallFunc_GetCameraRotation_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlacableTrap_Base_C_Trap_Placement_CanBePlaced, CallFunc_GetCameraLocation_ReturnValue) == 0x0000E8, "Member 'BP_PlacableTrap_Base_C_Trap_Placement_CanBePlaced::CallFunc_GetCameraLocation_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlacableTrap_Base_C_Trap_Placement_CanBePlaced, CallFunc_GetForwardVector_ReturnValue) == 0x0000F4, "Member 'BP_PlacableTrap_Base_C_Trap_Placement_CanBePlaced::CallFunc_GetForwardVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlacableTrap_Base_C_Trap_Placement_CanBePlaced, CallFunc_ProjectPointOnToPlane_ReturnValue) == 0x000100, "Member 'BP_PlacableTrap_Base_C_Trap_Placement_CanBePlaced::CallFunc_ProjectPointOnToPlane_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlacableTrap_Base_C_Trap_Placement_CanBePlaced, CallFunc_Array_Length_ReturnValue) == 0x00010C, "Member 'BP_PlacableTrap_Base_C_Trap_Placement_CanBePlaced::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlacableTrap_Base_C_Trap_Placement_CanBePlaced, CallFunc_Vector_DistanceSquared_ReturnValue) == 0x000110, "Member 'BP_PlacableTrap_Base_C_Trap_Placement_CanBePlaced::CallFunc_Vector_DistanceSquared_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlacableTrap_Base_C_Trap_Placement_CanBePlaced, CallFunc_Array_Length_ReturnValue_1) == 0x000114, "Member 'BP_PlacableTrap_Base_C_Trap_Placement_CanBePlaced::CallFunc_Array_Length_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_PlacableTrap_Base_C_Trap_Placement_CanBePlaced, CallFunc_Array_Length_ReturnValue_2) == 0x000118, "Member 'BP_PlacableTrap_Base_C_Trap_Placement_CanBePlaced::CallFunc_Array_Length_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BP_PlacableTrap_Base_C_Trap_Placement_CanBePlaced, CallFunc_Greater_IntInt_ReturnValue) == 0x00011C, "Member 'BP_PlacableTrap_Base_C_Trap_Placement_CanBePlaced::CallFunc_Greater_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlacableTrap_Base_C_Trap_Placement_CanBePlaced, CallFunc_Array_Length_ReturnValue_3) == 0x000120, "Member 'BP_PlacableTrap_Base_C_Trap_Placement_CanBePlaced::CallFunc_Array_Length_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(BP_PlacableTrap_Base_C_Trap_Placement_CanBePlaced, CallFunc_Greater_IntInt_ReturnValue_1) == 0x000124, "Member 'BP_PlacableTrap_Base_C_Trap_Placement_CanBePlaced::CallFunc_Greater_IntInt_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_PlacableTrap_Base_C_Trap_Placement_CanBePlaced, CallFunc_BreakHitResult_bBlockingHit) == 0x000125, "Member 'BP_PlacableTrap_Base_C_Trap_Placement_CanBePlaced::CallFunc_BreakHitResult_bBlockingHit' has a wrong offset!");
static_assert(offsetof(BP_PlacableTrap_Base_C_Trap_Placement_CanBePlaced, CallFunc_BreakHitResult_bInitialOverlap) == 0x000126, "Member 'BP_PlacableTrap_Base_C_Trap_Placement_CanBePlaced::CallFunc_BreakHitResult_bInitialOverlap' has a wrong offset!");
static_assert(offsetof(BP_PlacableTrap_Base_C_Trap_Placement_CanBePlaced, CallFunc_BreakHitResult_Time) == 0x000128, "Member 'BP_PlacableTrap_Base_C_Trap_Placement_CanBePlaced::CallFunc_BreakHitResult_Time' has a wrong offset!");
static_assert(offsetof(BP_PlacableTrap_Base_C_Trap_Placement_CanBePlaced, CallFunc_BreakHitResult_Distance) == 0x00012C, "Member 'BP_PlacableTrap_Base_C_Trap_Placement_CanBePlaced::CallFunc_BreakHitResult_Distance' has a wrong offset!");
static_assert(offsetof(BP_PlacableTrap_Base_C_Trap_Placement_CanBePlaced, CallFunc_BreakHitResult_Location) == 0x000130, "Member 'BP_PlacableTrap_Base_C_Trap_Placement_CanBePlaced::CallFunc_BreakHitResult_Location' has a wrong offset!");
static_assert(offsetof(BP_PlacableTrap_Base_C_Trap_Placement_CanBePlaced, CallFunc_BreakHitResult_ImpactPoint) == 0x00013C, "Member 'BP_PlacableTrap_Base_C_Trap_Placement_CanBePlaced::CallFunc_BreakHitResult_ImpactPoint' has a wrong offset!");
static_assert(offsetof(BP_PlacableTrap_Base_C_Trap_Placement_CanBePlaced, CallFunc_BreakHitResult_Normal) == 0x000148, "Member 'BP_PlacableTrap_Base_C_Trap_Placement_CanBePlaced::CallFunc_BreakHitResult_Normal' has a wrong offset!");
static_assert(offsetof(BP_PlacableTrap_Base_C_Trap_Placement_CanBePlaced, CallFunc_BreakHitResult_ImpactNormal) == 0x000154, "Member 'BP_PlacableTrap_Base_C_Trap_Placement_CanBePlaced::CallFunc_BreakHitResult_ImpactNormal' has a wrong offset!");
static_assert(offsetof(BP_PlacableTrap_Base_C_Trap_Placement_CanBePlaced, CallFunc_BreakHitResult_PhysMat) == 0x000160, "Member 'BP_PlacableTrap_Base_C_Trap_Placement_CanBePlaced::CallFunc_BreakHitResult_PhysMat' has a wrong offset!");
static_assert(offsetof(BP_PlacableTrap_Base_C_Trap_Placement_CanBePlaced, CallFunc_BreakHitResult_HitActor) == 0x000168, "Member 'BP_PlacableTrap_Base_C_Trap_Placement_CanBePlaced::CallFunc_BreakHitResult_HitActor' has a wrong offset!");
static_assert(offsetof(BP_PlacableTrap_Base_C_Trap_Placement_CanBePlaced, CallFunc_BreakHitResult_HitComponent) == 0x000170, "Member 'BP_PlacableTrap_Base_C_Trap_Placement_CanBePlaced::CallFunc_BreakHitResult_HitComponent' has a wrong offset!");
static_assert(offsetof(BP_PlacableTrap_Base_C_Trap_Placement_CanBePlaced, CallFunc_BreakHitResult_ShapeSurfaceType) == 0x000178, "Member 'BP_PlacableTrap_Base_C_Trap_Placement_CanBePlaced::CallFunc_BreakHitResult_ShapeSurfaceType' has a wrong offset!");
static_assert(offsetof(BP_PlacableTrap_Base_C_Trap_Placement_CanBePlaced, CallFunc_BreakHitResult_HitBoneName) == 0x00017C, "Member 'BP_PlacableTrap_Base_C_Trap_Placement_CanBePlaced::CallFunc_BreakHitResult_HitBoneName' has a wrong offset!");
static_assert(offsetof(BP_PlacableTrap_Base_C_Trap_Placement_CanBePlaced, CallFunc_BreakHitResult_HitItem) == 0x000184, "Member 'BP_PlacableTrap_Base_C_Trap_Placement_CanBePlaced::CallFunc_BreakHitResult_HitItem' has a wrong offset!");
static_assert(offsetof(BP_PlacableTrap_Base_C_Trap_Placement_CanBePlaced, CallFunc_BreakHitResult_ElementIndex) == 0x000188, "Member 'BP_PlacableTrap_Base_C_Trap_Placement_CanBePlaced::CallFunc_BreakHitResult_ElementIndex' has a wrong offset!");
static_assert(offsetof(BP_PlacableTrap_Base_C_Trap_Placement_CanBePlaced, CallFunc_BreakHitResult_FaceIndex) == 0x00018C, "Member 'BP_PlacableTrap_Base_C_Trap_Placement_CanBePlaced::CallFunc_BreakHitResult_FaceIndex' has a wrong offset!");
static_assert(offsetof(BP_PlacableTrap_Base_C_Trap_Placement_CanBePlaced, CallFunc_BreakHitResult_TraceStart) == 0x000190, "Member 'BP_PlacableTrap_Base_C_Trap_Placement_CanBePlaced::CallFunc_BreakHitResult_TraceStart' has a wrong offset!");
static_assert(offsetof(BP_PlacableTrap_Base_C_Trap_Placement_CanBePlaced, CallFunc_BreakHitResult_TraceEnd) == 0x00019C, "Member 'BP_PlacableTrap_Base_C_Trap_Placement_CanBePlaced::CallFunc_BreakHitResult_TraceEnd' has a wrong offset!");
static_assert(offsetof(BP_PlacableTrap_Base_C_Trap_Placement_CanBePlaced, CallFunc_GetObjectClass_ReturnValue) == 0x0001A8, "Member 'BP_PlacableTrap_Base_C_Trap_Placement_CanBePlaced::CallFunc_GetObjectClass_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlacableTrap_Base_C_Trap_Placement_CanBePlaced, CallFunc_BreakVector_X) == 0x0001B0, "Member 'BP_PlacableTrap_Base_C_Trap_Placement_CanBePlaced::CallFunc_BreakVector_X' has a wrong offset!");
static_assert(offsetof(BP_PlacableTrap_Base_C_Trap_Placement_CanBePlaced, CallFunc_BreakVector_Y) == 0x0001B4, "Member 'BP_PlacableTrap_Base_C_Trap_Placement_CanBePlaced::CallFunc_BreakVector_Y' has a wrong offset!");
static_assert(offsetof(BP_PlacableTrap_Base_C_Trap_Placement_CanBePlaced, CallFunc_BreakVector_Z) == 0x0001B8, "Member 'BP_PlacableTrap_Base_C_Trap_Placement_CanBePlaced::CallFunc_BreakVector_Z' has a wrong offset!");
static_assert(offsetof(BP_PlacableTrap_Base_C_Trap_Placement_CanBePlaced, CallFunc_ProjectPointOnToPlane_ReturnValue_1) == 0x0001BC, "Member 'BP_PlacableTrap_Base_C_Trap_Placement_CanBePlaced::CallFunc_ProjectPointOnToPlane_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_PlacableTrap_Base_C_Trap_Placement_CanBePlaced, CallFunc_GreaterEqual_FloatFloat_ReturnValue) == 0x0001C8, "Member 'BP_PlacableTrap_Base_C_Trap_Placement_CanBePlaced::CallFunc_GreaterEqual_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlacableTrap_Base_C_Trap_Placement_CanBePlaced, CallFunc_Vector_DistanceSquared_ReturnValue_1) == 0x0001CC, "Member 'BP_PlacableTrap_Base_C_Trap_Placement_CanBePlaced::CallFunc_Vector_DistanceSquared_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_PlacableTrap_Base_C_Trap_Placement_CanBePlaced, CallFunc_Less_FloatFloat_ReturnValue) == 0x0001D0, "Member 'BP_PlacableTrap_Base_C_Trap_Placement_CanBePlaced::CallFunc_Less_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlacableTrap_Base_C_Trap_Placement_CanBePlaced, CallFunc_IsPointInWater_Depth) == 0x0001D4, "Member 'BP_PlacableTrap_Base_C_Trap_Placement_CanBePlaced::CallFunc_IsPointInWater_Depth' has a wrong offset!");
static_assert(offsetof(BP_PlacableTrap_Base_C_Trap_Placement_CanBePlaced, CallFunc_IsPointInWater_WaterSurfaceLocation) == 0x0001D8, "Member 'BP_PlacableTrap_Base_C_Trap_Placement_CanBePlaced::CallFunc_IsPointInWater_WaterSurfaceLocation' has a wrong offset!");
static_assert(offsetof(BP_PlacableTrap_Base_C_Trap_Placement_CanBePlaced, CallFunc_IsPointInWater_ReturnValue) == 0x0001E4, "Member 'BP_PlacableTrap_Base_C_Trap_Placement_CanBePlaced::CallFunc_IsPointInWater_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlacableTrap_Base_C_Trap_Placement_CanBePlaced, CallFunc_Add_VectorVector_ReturnValue) == 0x0001E8, "Member 'BP_PlacableTrap_Base_C_Trap_Placement_CanBePlaced::CallFunc_Add_VectorVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlacableTrap_Base_C_Trap_Placement_CanBePlaced, Temp_int_Loop_Counter_Variable) == 0x0001F4, "Member 'BP_PlacableTrap_Base_C_Trap_Placement_CanBePlaced::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(BP_PlacableTrap_Base_C_Trap_Placement_CanBePlaced, CallFunc_Less_IntInt_ReturnValue) == 0x0001F8, "Member 'BP_PlacableTrap_Base_C_Trap_Placement_CanBePlaced::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlacableTrap_Base_C_Trap_Placement_CanBePlaced, CallFunc_Add_IntInt_ReturnValue) == 0x0001FC, "Member 'BP_PlacableTrap_Base_C_Trap_Placement_CanBePlaced::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlacableTrap_Base_C_Trap_Placement_CanBePlaced, CallFunc_Array_Length_ReturnValue_4) == 0x000200, "Member 'BP_PlacableTrap_Base_C_Trap_Placement_CanBePlaced::CallFunc_Array_Length_ReturnValue_4' has a wrong offset!");
static_assert(offsetof(BP_PlacableTrap_Base_C_Trap_Placement_CanBePlaced, CallFunc_Hologram_CanBePlaced_CanBePlaced) == 0x000204, "Member 'BP_PlacableTrap_Base_C_Trap_Placement_CanBePlaced::CallFunc_Hologram_CanBePlaced_CanBePlaced' has a wrong offset!");
static_assert(offsetof(BP_PlacableTrap_Base_C_Trap_Placement_CanBePlaced, CallFunc_Greater_IntInt_ReturnValue_2) == 0x000205, "Member 'BP_PlacableTrap_Base_C_Trap_Placement_CanBePlaced::CallFunc_Greater_IntInt_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BP_PlacableTrap_Base_C_Trap_Placement_CanBePlaced, CallFunc_Not_PreBool_ReturnValue) == 0x000206, "Member 'BP_PlacableTrap_Base_C_Trap_Placement_CanBePlaced::CallFunc_Not_PreBool_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlacableTrap_Base_C_Trap_Placement_CanBePlaced, CallFunc_Array_RemoveItem_ReturnValue) == 0x000207, "Member 'BP_PlacableTrap_Base_C_Trap_Placement_CanBePlaced::CallFunc_Array_RemoveItem_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlacableTrap_Base_C_Trap_Placement_CanBePlaced, CallFunc_GetOverlappingActors_OverlappingActors) == 0x000208, "Member 'BP_PlacableTrap_Base_C_Trap_Placement_CanBePlaced::CallFunc_GetOverlappingActors_OverlappingActors' has a wrong offset!");
static_assert(offsetof(BP_PlacableTrap_Base_C_Trap_Placement_CanBePlaced, CallFunc_GetAssetManagerSystem_ReturnValue) == 0x000218, "Member 'BP_PlacableTrap_Base_C_Trap_Placement_CanBePlaced::CallFunc_GetAssetManagerSystem_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlacableTrap_Base_C_Trap_Placement_CanBePlaced, Temp_bool_True_if_break_was_hit_Variable) == 0x000220, "Member 'BP_PlacableTrap_Base_C_Trap_Placement_CanBePlaced::Temp_bool_True_if_break_was_hit_Variable' has a wrong offset!");
static_assert(offsetof(BP_PlacableTrap_Base_C_Trap_Placement_CanBePlaced, K2Node_MakeArray_Array) == 0x000228, "Member 'BP_PlacableTrap_Base_C_Trap_Placement_CanBePlaced::K2Node_MakeArray_Array' has a wrong offset!");
static_assert(offsetof(BP_PlacableTrap_Base_C_Trap_Placement_CanBePlaced, Temp_int_Array_Index_Variable) == 0x000238, "Member 'BP_PlacableTrap_Base_C_Trap_Placement_CanBePlaced::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(BP_PlacableTrap_Base_C_Trap_Placement_CanBePlaced, CallFunc_Array_Get_Item) == 0x000240, "Member 'BP_PlacableTrap_Base_C_Trap_Placement_CanBePlaced::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(BP_PlacableTrap_Base_C_Trap_Placement_CanBePlaced, CallFunc_K2_GetPawn_ReturnValue_1) == 0x000268, "Member 'BP_PlacableTrap_Base_C_Trap_Placement_CanBePlaced::CallFunc_K2_GetPawn_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_PlacableTrap_Base_C_Trap_Placement_CanBePlaced, CallFunc_LoadSoftClassReference_ReturnValue) == 0x000270, "Member 'BP_PlacableTrap_Base_C_Trap_Placement_CanBePlaced::CallFunc_LoadSoftClassReference_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlacableTrap_Base_C_Trap_Placement_CanBePlaced, CallFunc_K2_GetActorLocation_ReturnValue_1) == 0x000278, "Member 'BP_PlacableTrap_Base_C_Trap_Placement_CanBePlaced::CallFunc_K2_GetActorLocation_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_PlacableTrap_Base_C_Trap_Placement_CanBePlaced, CallFunc_ClassIsChildOf_ReturnValue) == 0x000284, "Member 'BP_PlacableTrap_Base_C_Trap_Placement_CanBePlaced::CallFunc_ClassIsChildOf_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlacableTrap_Base_C_Trap_Placement_CanBePlaced, CallFunc_IsValidClass_ReturnValue) == 0x000285, "Member 'BP_PlacableTrap_Base_C_Trap_Placement_CanBePlaced::CallFunc_IsValidClass_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlacableTrap_Base_C_Trap_Placement_CanBePlaced, CallFunc_IsValidSoftClassReference_ReturnValue) == 0x000286, "Member 'BP_PlacableTrap_Base_C_Trap_Placement_CanBePlaced::CallFunc_IsValidSoftClassReference_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlacableTrap_Base_C_Trap_Placement_CanBePlaced, CallFunc_BooleanAND_ReturnValue) == 0x000287, "Member 'BP_PlacableTrap_Base_C_Trap_Placement_CanBePlaced::CallFunc_BooleanAND_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlacableTrap_Base_C_Trap_Placement_CanBePlaced, Temp_bool_True_if_break_was_hit_Variable_1) == 0x000288, "Member 'BP_PlacableTrap_Base_C_Trap_Placement_CanBePlaced::Temp_bool_True_if_break_was_hit_Variable_1' has a wrong offset!");
static_assert(offsetof(BP_PlacableTrap_Base_C_Trap_Placement_CanBePlaced, Temp_int_Loop_Counter_Variable_1) == 0x00028C, "Member 'BP_PlacableTrap_Base_C_Trap_Placement_CanBePlaced::Temp_int_Loop_Counter_Variable_1' has a wrong offset!");
static_assert(offsetof(BP_PlacableTrap_Base_C_Trap_Placement_CanBePlaced, CallFunc_Less_IntInt_ReturnValue_1) == 0x000290, "Member 'BP_PlacableTrap_Base_C_Trap_Placement_CanBePlaced::CallFunc_Less_IntInt_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_PlacableTrap_Base_C_Trap_Placement_CanBePlaced, CallFunc_Add_IntInt_ReturnValue_1) == 0x000294, "Member 'BP_PlacableTrap_Base_C_Trap_Placement_CanBePlaced::CallFunc_Add_IntInt_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_PlacableTrap_Base_C_Trap_Placement_CanBePlaced, Temp_int_Array_Index_Variable_1) == 0x000298, "Member 'BP_PlacableTrap_Base_C_Trap_Placement_CanBePlaced::Temp_int_Array_Index_Variable_1' has a wrong offset!");
static_assert(offsetof(BP_PlacableTrap_Base_C_Trap_Placement_CanBePlaced, CallFunc_Array_Get_Item_1) == 0x00029C, "Member 'BP_PlacableTrap_Base_C_Trap_Placement_CanBePlaced::CallFunc_Array_Get_Item_1' has a wrong offset!");
static_assert(offsetof(BP_PlacableTrap_Base_C_Trap_Placement_CanBePlaced, CallFunc_EqualEqual_ByteByte_ReturnValue) == 0x00029D, "Member 'BP_PlacableTrap_Base_C_Trap_Placement_CanBePlaced::CallFunc_EqualEqual_ByteByte_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlacableTrap_Base_C_Trap_Placement_CanBePlaced, Temp_byte_Variable) == 0x00029E, "Member 'BP_PlacableTrap_Base_C_Trap_Placement_CanBePlaced::Temp_byte_Variable' has a wrong offset!");
static_assert(offsetof(BP_PlacableTrap_Base_C_Trap_Placement_CanBePlaced, Temp_byte_Variable_1) == 0x00029F, "Member 'BP_PlacableTrap_Base_C_Trap_Placement_CanBePlaced::Temp_byte_Variable_1' has a wrong offset!");
static_assert(offsetof(BP_PlacableTrap_Base_C_Trap_Placement_CanBePlaced, Temp_bool_Variable) == 0x0002A0, "Member 'BP_PlacableTrap_Base_C_Trap_Placement_CanBePlaced::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(BP_PlacableTrap_Base_C_Trap_Placement_CanBePlaced, K2Node_Select_Default) == 0x0002A1, "Member 'BP_PlacableTrap_Base_C_Trap_Placement_CanBePlaced::K2Node_Select_Default' has a wrong offset!");
static_assert(offsetof(BP_PlacableTrap_Base_C_Trap_Placement_CanBePlaced, CallFunc_LineTraceSingle_OutHit) == 0x0002A4, "Member 'BP_PlacableTrap_Base_C_Trap_Placement_CanBePlaced::CallFunc_LineTraceSingle_OutHit' has a wrong offset!");
static_assert(offsetof(BP_PlacableTrap_Base_C_Trap_Placement_CanBePlaced, CallFunc_LineTraceSingle_ReturnValue) == 0x000330, "Member 'BP_PlacableTrap_Base_C_Trap_Placement_CanBePlaced::CallFunc_LineTraceSingle_ReturnValue' has a wrong offset!");

// Function BP_PlacableTrap_Base.BP_PlacableTrap_Base_C.ChangeHologramVisuals
// 0x0010 (0x0010 - 0x0000)
struct BP_PlacableTrap_Base_C_ChangeHologramVisuals final
{
public:
	class ABP_PlacableTrap_Hologram_Base_C*       Target;                                            // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CanBePlaced;                                       // 0x0008(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_PlacableTrap_Base_C_ChangeHologramVisuals) == 0x000008, "Wrong alignment on BP_PlacableTrap_Base_C_ChangeHologramVisuals");
static_assert(sizeof(BP_PlacableTrap_Base_C_ChangeHologramVisuals) == 0x000010, "Wrong size on BP_PlacableTrap_Base_C_ChangeHologramVisuals");
static_assert(offsetof(BP_PlacableTrap_Base_C_ChangeHologramVisuals, Target) == 0x000000, "Member 'BP_PlacableTrap_Base_C_ChangeHologramVisuals::Target' has a wrong offset!");
static_assert(offsetof(BP_PlacableTrap_Base_C_ChangeHologramVisuals, CanBePlaced) == 0x000008, "Member 'BP_PlacableTrap_Base_C_ChangeHologramVisuals::CanBePlaced' has a wrong offset!");

// Function BP_PlacableTrap_Base.BP_PlacableTrap_Base_C.Trap_Placement_Calculate
// 0x0300 (0x0300 - 0x0000)
struct BP_PlacableTrap_Base_C_Trap_Placement_Calculate final
{
public:
	struct FHitResult                             ReturnValue;                                       // 0x0000(0x008C)(Parm, OutParm, ReturnParm, IsPlainOldData, NoDestructor, ContainsInstancedReference)
	bool                                          WasHit;                                            // 0x008C(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable;                                // 0x008D(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_8E[0x2];                                       // 0x008E(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class AActor*>                         K2Node_MakeArray_Array;                            // 0x0090(0x0010)(ConstParm, ReferenceParm)
	TArray<class AActor*>                         K2Node_MakeArray_Array_1;                          // 0x00A0(0x0010)(ConstParm, ReferenceParm)
	EDrawDebugTrace                               Temp_byte_Variable;                                // 0x00B0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EDrawDebugTrace                               Temp_byte_Variable_1;                              // 0x00B1(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EDrawDebugTrace                               Temp_byte_Variable_2;                              // 0x00B2(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable_1;                              // 0x00B3(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	EDrawDebugTrace                               Temp_byte_Variable_3;                              // 0x00B4(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EDrawDebugTrace                               K2Node_Select_Default;                             // 0x00B5(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EDrawDebugTrace                               K2Node_Select_Default_1;                           // 0x00B6(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x00B7(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	class APawn*                                  CallFunc_K2_GetPawn_ReturnValue;                   // 0x00B8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue_1;                    // 0x00C0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_C1[0x3];                                       // 0x00C1(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_K2_GetActorLocation_ReturnValue;          // 0x00C4(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_X;                            // 0x00D0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_Y;                            // 0x00D4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_Z;                            // 0x00D8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               CallFunc_GetCameraRotation_ReturnValue;            // 0x00DC(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FVector                                CallFunc_GetCameraLocation_ReturnValue;            // 0x00E8(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_GetForwardVector_ReturnValue;             // 0x00F4(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Subtract_VectorVector_ReturnValue;        // 0x0100(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_VSize_ReturnValue;                        // 0x010C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Add_FloatFloat_ReturnValue;               // 0x0110(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Multiply_VectorFloat_ReturnValue;         // 0x0114(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Add_VectorVector_ReturnValue;             // 0x0120(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FHitResult                             CallFunc_LineTraceSingle_OutHit;                   // 0x012C(0x008C)(IsPlainOldData, NoDestructor, ContainsInstancedReference)
	bool                                          CallFunc_LineTraceSingle_ReturnValue;              // 0x01B8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BreakHitResult_bBlockingHit;              // 0x01B9(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BreakHitResult_bInitialOverlap;           // 0x01BA(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_1BB[0x1];                                      // 0x01BB(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_BreakHitResult_Time;                      // 0x01BC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakHitResult_Distance;                  // 0x01C0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_Location;                  // 0x01C4(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_ImpactPoint;               // 0x01D0(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_Normal;                    // 0x01DC(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_ImpactNormal;              // 0x01E8(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1F4[0x4];                                      // 0x01F4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UPhysicalMaterial*                      CallFunc_BreakHitResult_PhysMat;                   // 0x01F8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 CallFunc_BreakHitResult_HitActor;                  // 0x0200(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UPrimitiveComponent*                    CallFunc_BreakHitResult_HitComponent;              // 0x0208(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EPhysicalSurface                              CallFunc_BreakHitResult_ShapeSurfaceType;          // 0x0210(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_211[0x3];                                      // 0x0211(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   CallFunc_BreakHitResult_HitBoneName;               // 0x0214(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_BreakHitResult_HitItem;                   // 0x021C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_BreakHitResult_ElementIndex;              // 0x0220(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_BreakHitResult_FaceIndex;                 // 0x0224(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_TraceStart;                // 0x0228(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_TraceEnd;                  // 0x0234(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_X_1;                          // 0x0240(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_Y_1;                          // 0x0244(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_Z_1;                          // 0x0248(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Subtract_FloatFloat_ReturnValue;          // 0x024C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Add_FloatFloat_ReturnValue_1;             // 0x0250(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_MakeVector_ReturnValue;                   // 0x0254(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Subtract_VectorVector_ReturnValue_1;      // 0x0260(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FHitResult                             CallFunc_LineTraceSingle_OutHit_1;                 // 0x026C(0x008C)(IsPlainOldData, NoDestructor, ContainsInstancedReference)
	bool                                          CallFunc_LineTraceSingle_ReturnValue_1;            // 0x02F8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_PlacableTrap_Base_C_Trap_Placement_Calculate) == 0x000008, "Wrong alignment on BP_PlacableTrap_Base_C_Trap_Placement_Calculate");
static_assert(sizeof(BP_PlacableTrap_Base_C_Trap_Placement_Calculate) == 0x000300, "Wrong size on BP_PlacableTrap_Base_C_Trap_Placement_Calculate");
static_assert(offsetof(BP_PlacableTrap_Base_C_Trap_Placement_Calculate, ReturnValue) == 0x000000, "Member 'BP_PlacableTrap_Base_C_Trap_Placement_Calculate::ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlacableTrap_Base_C_Trap_Placement_Calculate, WasHit) == 0x00008C, "Member 'BP_PlacableTrap_Base_C_Trap_Placement_Calculate::WasHit' has a wrong offset!");
static_assert(offsetof(BP_PlacableTrap_Base_C_Trap_Placement_Calculate, Temp_bool_Variable) == 0x00008D, "Member 'BP_PlacableTrap_Base_C_Trap_Placement_Calculate::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(BP_PlacableTrap_Base_C_Trap_Placement_Calculate, K2Node_MakeArray_Array) == 0x000090, "Member 'BP_PlacableTrap_Base_C_Trap_Placement_Calculate::K2Node_MakeArray_Array' has a wrong offset!");
static_assert(offsetof(BP_PlacableTrap_Base_C_Trap_Placement_Calculate, K2Node_MakeArray_Array_1) == 0x0000A0, "Member 'BP_PlacableTrap_Base_C_Trap_Placement_Calculate::K2Node_MakeArray_Array_1' has a wrong offset!");
static_assert(offsetof(BP_PlacableTrap_Base_C_Trap_Placement_Calculate, Temp_byte_Variable) == 0x0000B0, "Member 'BP_PlacableTrap_Base_C_Trap_Placement_Calculate::Temp_byte_Variable' has a wrong offset!");
static_assert(offsetof(BP_PlacableTrap_Base_C_Trap_Placement_Calculate, Temp_byte_Variable_1) == 0x0000B1, "Member 'BP_PlacableTrap_Base_C_Trap_Placement_Calculate::Temp_byte_Variable_1' has a wrong offset!");
static_assert(offsetof(BP_PlacableTrap_Base_C_Trap_Placement_Calculate, Temp_byte_Variable_2) == 0x0000B2, "Member 'BP_PlacableTrap_Base_C_Trap_Placement_Calculate::Temp_byte_Variable_2' has a wrong offset!");
static_assert(offsetof(BP_PlacableTrap_Base_C_Trap_Placement_Calculate, Temp_bool_Variable_1) == 0x0000B3, "Member 'BP_PlacableTrap_Base_C_Trap_Placement_Calculate::Temp_bool_Variable_1' has a wrong offset!");
static_assert(offsetof(BP_PlacableTrap_Base_C_Trap_Placement_Calculate, Temp_byte_Variable_3) == 0x0000B4, "Member 'BP_PlacableTrap_Base_C_Trap_Placement_Calculate::Temp_byte_Variable_3' has a wrong offset!");
static_assert(offsetof(BP_PlacableTrap_Base_C_Trap_Placement_Calculate, K2Node_Select_Default) == 0x0000B5, "Member 'BP_PlacableTrap_Base_C_Trap_Placement_Calculate::K2Node_Select_Default' has a wrong offset!");
static_assert(offsetof(BP_PlacableTrap_Base_C_Trap_Placement_Calculate, K2Node_Select_Default_1) == 0x0000B6, "Member 'BP_PlacableTrap_Base_C_Trap_Placement_Calculate::K2Node_Select_Default_1' has a wrong offset!");
static_assert(offsetof(BP_PlacableTrap_Base_C_Trap_Placement_Calculate, CallFunc_IsValid_ReturnValue) == 0x0000B7, "Member 'BP_PlacableTrap_Base_C_Trap_Placement_Calculate::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlacableTrap_Base_C_Trap_Placement_Calculate, CallFunc_K2_GetPawn_ReturnValue) == 0x0000B8, "Member 'BP_PlacableTrap_Base_C_Trap_Placement_Calculate::CallFunc_K2_GetPawn_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlacableTrap_Base_C_Trap_Placement_Calculate, CallFunc_IsValid_ReturnValue_1) == 0x0000C0, "Member 'BP_PlacableTrap_Base_C_Trap_Placement_Calculate::CallFunc_IsValid_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_PlacableTrap_Base_C_Trap_Placement_Calculate, CallFunc_K2_GetActorLocation_ReturnValue) == 0x0000C4, "Member 'BP_PlacableTrap_Base_C_Trap_Placement_Calculate::CallFunc_K2_GetActorLocation_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlacableTrap_Base_C_Trap_Placement_Calculate, CallFunc_BreakVector_X) == 0x0000D0, "Member 'BP_PlacableTrap_Base_C_Trap_Placement_Calculate::CallFunc_BreakVector_X' has a wrong offset!");
static_assert(offsetof(BP_PlacableTrap_Base_C_Trap_Placement_Calculate, CallFunc_BreakVector_Y) == 0x0000D4, "Member 'BP_PlacableTrap_Base_C_Trap_Placement_Calculate::CallFunc_BreakVector_Y' has a wrong offset!");
static_assert(offsetof(BP_PlacableTrap_Base_C_Trap_Placement_Calculate, CallFunc_BreakVector_Z) == 0x0000D8, "Member 'BP_PlacableTrap_Base_C_Trap_Placement_Calculate::CallFunc_BreakVector_Z' has a wrong offset!");
static_assert(offsetof(BP_PlacableTrap_Base_C_Trap_Placement_Calculate, CallFunc_GetCameraRotation_ReturnValue) == 0x0000DC, "Member 'BP_PlacableTrap_Base_C_Trap_Placement_Calculate::CallFunc_GetCameraRotation_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlacableTrap_Base_C_Trap_Placement_Calculate, CallFunc_GetCameraLocation_ReturnValue) == 0x0000E8, "Member 'BP_PlacableTrap_Base_C_Trap_Placement_Calculate::CallFunc_GetCameraLocation_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlacableTrap_Base_C_Trap_Placement_Calculate, CallFunc_GetForwardVector_ReturnValue) == 0x0000F4, "Member 'BP_PlacableTrap_Base_C_Trap_Placement_Calculate::CallFunc_GetForwardVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlacableTrap_Base_C_Trap_Placement_Calculate, CallFunc_Subtract_VectorVector_ReturnValue) == 0x000100, "Member 'BP_PlacableTrap_Base_C_Trap_Placement_Calculate::CallFunc_Subtract_VectorVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlacableTrap_Base_C_Trap_Placement_Calculate, CallFunc_VSize_ReturnValue) == 0x00010C, "Member 'BP_PlacableTrap_Base_C_Trap_Placement_Calculate::CallFunc_VSize_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlacableTrap_Base_C_Trap_Placement_Calculate, CallFunc_Add_FloatFloat_ReturnValue) == 0x000110, "Member 'BP_PlacableTrap_Base_C_Trap_Placement_Calculate::CallFunc_Add_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlacableTrap_Base_C_Trap_Placement_Calculate, CallFunc_Multiply_VectorFloat_ReturnValue) == 0x000114, "Member 'BP_PlacableTrap_Base_C_Trap_Placement_Calculate::CallFunc_Multiply_VectorFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlacableTrap_Base_C_Trap_Placement_Calculate, CallFunc_Add_VectorVector_ReturnValue) == 0x000120, "Member 'BP_PlacableTrap_Base_C_Trap_Placement_Calculate::CallFunc_Add_VectorVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlacableTrap_Base_C_Trap_Placement_Calculate, CallFunc_LineTraceSingle_OutHit) == 0x00012C, "Member 'BP_PlacableTrap_Base_C_Trap_Placement_Calculate::CallFunc_LineTraceSingle_OutHit' has a wrong offset!");
static_assert(offsetof(BP_PlacableTrap_Base_C_Trap_Placement_Calculate, CallFunc_LineTraceSingle_ReturnValue) == 0x0001B8, "Member 'BP_PlacableTrap_Base_C_Trap_Placement_Calculate::CallFunc_LineTraceSingle_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlacableTrap_Base_C_Trap_Placement_Calculate, CallFunc_BreakHitResult_bBlockingHit) == 0x0001B9, "Member 'BP_PlacableTrap_Base_C_Trap_Placement_Calculate::CallFunc_BreakHitResult_bBlockingHit' has a wrong offset!");
static_assert(offsetof(BP_PlacableTrap_Base_C_Trap_Placement_Calculate, CallFunc_BreakHitResult_bInitialOverlap) == 0x0001BA, "Member 'BP_PlacableTrap_Base_C_Trap_Placement_Calculate::CallFunc_BreakHitResult_bInitialOverlap' has a wrong offset!");
static_assert(offsetof(BP_PlacableTrap_Base_C_Trap_Placement_Calculate, CallFunc_BreakHitResult_Time) == 0x0001BC, "Member 'BP_PlacableTrap_Base_C_Trap_Placement_Calculate::CallFunc_BreakHitResult_Time' has a wrong offset!");
static_assert(offsetof(BP_PlacableTrap_Base_C_Trap_Placement_Calculate, CallFunc_BreakHitResult_Distance) == 0x0001C0, "Member 'BP_PlacableTrap_Base_C_Trap_Placement_Calculate::CallFunc_BreakHitResult_Distance' has a wrong offset!");
static_assert(offsetof(BP_PlacableTrap_Base_C_Trap_Placement_Calculate, CallFunc_BreakHitResult_Location) == 0x0001C4, "Member 'BP_PlacableTrap_Base_C_Trap_Placement_Calculate::CallFunc_BreakHitResult_Location' has a wrong offset!");
static_assert(offsetof(BP_PlacableTrap_Base_C_Trap_Placement_Calculate, CallFunc_BreakHitResult_ImpactPoint) == 0x0001D0, "Member 'BP_PlacableTrap_Base_C_Trap_Placement_Calculate::CallFunc_BreakHitResult_ImpactPoint' has a wrong offset!");
static_assert(offsetof(BP_PlacableTrap_Base_C_Trap_Placement_Calculate, CallFunc_BreakHitResult_Normal) == 0x0001DC, "Member 'BP_PlacableTrap_Base_C_Trap_Placement_Calculate::CallFunc_BreakHitResult_Normal' has a wrong offset!");
static_assert(offsetof(BP_PlacableTrap_Base_C_Trap_Placement_Calculate, CallFunc_BreakHitResult_ImpactNormal) == 0x0001E8, "Member 'BP_PlacableTrap_Base_C_Trap_Placement_Calculate::CallFunc_BreakHitResult_ImpactNormal' has a wrong offset!");
static_assert(offsetof(BP_PlacableTrap_Base_C_Trap_Placement_Calculate, CallFunc_BreakHitResult_PhysMat) == 0x0001F8, "Member 'BP_PlacableTrap_Base_C_Trap_Placement_Calculate::CallFunc_BreakHitResult_PhysMat' has a wrong offset!");
static_assert(offsetof(BP_PlacableTrap_Base_C_Trap_Placement_Calculate, CallFunc_BreakHitResult_HitActor) == 0x000200, "Member 'BP_PlacableTrap_Base_C_Trap_Placement_Calculate::CallFunc_BreakHitResult_HitActor' has a wrong offset!");
static_assert(offsetof(BP_PlacableTrap_Base_C_Trap_Placement_Calculate, CallFunc_BreakHitResult_HitComponent) == 0x000208, "Member 'BP_PlacableTrap_Base_C_Trap_Placement_Calculate::CallFunc_BreakHitResult_HitComponent' has a wrong offset!");
static_assert(offsetof(BP_PlacableTrap_Base_C_Trap_Placement_Calculate, CallFunc_BreakHitResult_ShapeSurfaceType) == 0x000210, "Member 'BP_PlacableTrap_Base_C_Trap_Placement_Calculate::CallFunc_BreakHitResult_ShapeSurfaceType' has a wrong offset!");
static_assert(offsetof(BP_PlacableTrap_Base_C_Trap_Placement_Calculate, CallFunc_BreakHitResult_HitBoneName) == 0x000214, "Member 'BP_PlacableTrap_Base_C_Trap_Placement_Calculate::CallFunc_BreakHitResult_HitBoneName' has a wrong offset!");
static_assert(offsetof(BP_PlacableTrap_Base_C_Trap_Placement_Calculate, CallFunc_BreakHitResult_HitItem) == 0x00021C, "Member 'BP_PlacableTrap_Base_C_Trap_Placement_Calculate::CallFunc_BreakHitResult_HitItem' has a wrong offset!");
static_assert(offsetof(BP_PlacableTrap_Base_C_Trap_Placement_Calculate, CallFunc_BreakHitResult_ElementIndex) == 0x000220, "Member 'BP_PlacableTrap_Base_C_Trap_Placement_Calculate::CallFunc_BreakHitResult_ElementIndex' has a wrong offset!");
static_assert(offsetof(BP_PlacableTrap_Base_C_Trap_Placement_Calculate, CallFunc_BreakHitResult_FaceIndex) == 0x000224, "Member 'BP_PlacableTrap_Base_C_Trap_Placement_Calculate::CallFunc_BreakHitResult_FaceIndex' has a wrong offset!");
static_assert(offsetof(BP_PlacableTrap_Base_C_Trap_Placement_Calculate, CallFunc_BreakHitResult_TraceStart) == 0x000228, "Member 'BP_PlacableTrap_Base_C_Trap_Placement_Calculate::CallFunc_BreakHitResult_TraceStart' has a wrong offset!");
static_assert(offsetof(BP_PlacableTrap_Base_C_Trap_Placement_Calculate, CallFunc_BreakHitResult_TraceEnd) == 0x000234, "Member 'BP_PlacableTrap_Base_C_Trap_Placement_Calculate::CallFunc_BreakHitResult_TraceEnd' has a wrong offset!");
static_assert(offsetof(BP_PlacableTrap_Base_C_Trap_Placement_Calculate, CallFunc_BreakVector_X_1) == 0x000240, "Member 'BP_PlacableTrap_Base_C_Trap_Placement_Calculate::CallFunc_BreakVector_X_1' has a wrong offset!");
static_assert(offsetof(BP_PlacableTrap_Base_C_Trap_Placement_Calculate, CallFunc_BreakVector_Y_1) == 0x000244, "Member 'BP_PlacableTrap_Base_C_Trap_Placement_Calculate::CallFunc_BreakVector_Y_1' has a wrong offset!");
static_assert(offsetof(BP_PlacableTrap_Base_C_Trap_Placement_Calculate, CallFunc_BreakVector_Z_1) == 0x000248, "Member 'BP_PlacableTrap_Base_C_Trap_Placement_Calculate::CallFunc_BreakVector_Z_1' has a wrong offset!");
static_assert(offsetof(BP_PlacableTrap_Base_C_Trap_Placement_Calculate, CallFunc_Subtract_FloatFloat_ReturnValue) == 0x00024C, "Member 'BP_PlacableTrap_Base_C_Trap_Placement_Calculate::CallFunc_Subtract_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlacableTrap_Base_C_Trap_Placement_Calculate, CallFunc_Add_FloatFloat_ReturnValue_1) == 0x000250, "Member 'BP_PlacableTrap_Base_C_Trap_Placement_Calculate::CallFunc_Add_FloatFloat_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_PlacableTrap_Base_C_Trap_Placement_Calculate, CallFunc_MakeVector_ReturnValue) == 0x000254, "Member 'BP_PlacableTrap_Base_C_Trap_Placement_Calculate::CallFunc_MakeVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlacableTrap_Base_C_Trap_Placement_Calculate, CallFunc_Subtract_VectorVector_ReturnValue_1) == 0x000260, "Member 'BP_PlacableTrap_Base_C_Trap_Placement_Calculate::CallFunc_Subtract_VectorVector_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_PlacableTrap_Base_C_Trap_Placement_Calculate, CallFunc_LineTraceSingle_OutHit_1) == 0x00026C, "Member 'BP_PlacableTrap_Base_C_Trap_Placement_Calculate::CallFunc_LineTraceSingle_OutHit_1' has a wrong offset!");
static_assert(offsetof(BP_PlacableTrap_Base_C_Trap_Placement_Calculate, CallFunc_LineTraceSingle_ReturnValue_1) == 0x0002F8, "Member 'BP_PlacableTrap_Base_C_Trap_Placement_Calculate::CallFunc_LineTraceSingle_ReturnValue_1' has a wrong offset!");

// Function BP_PlacableTrap_Base.BP_PlacableTrap_Base_C.Trap_Hologram_SetAndReplicateTransform
// 0x01F0 (0x01F0 - 0x0000)
struct BP_PlacableTrap_Base_C_Trap_Hologram_SetAndReplicateTransform final
{
public:
	struct FHitResult                             Hit;                                               // 0x0000(0x008C)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, ContainsInstancedReference)
	bool                                          CallFunc_BreakHitResult_bBlockingHit;              // 0x008C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BreakHitResult_bInitialOverlap;           // 0x008D(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_8E[0x2];                                       // 0x008E(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_BreakHitResult_Time;                      // 0x0090(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakHitResult_Distance;                  // 0x0094(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_Location;                  // 0x0098(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_ImpactPoint;               // 0x00A4(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_Normal;                    // 0x00B0(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_ImpactNormal;              // 0x00BC(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UPhysicalMaterial*                      CallFunc_BreakHitResult_PhysMat;                   // 0x00C8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 CallFunc_BreakHitResult_HitActor;                  // 0x00D0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UPrimitiveComponent*                    CallFunc_BreakHitResult_HitComponent;              // 0x00D8(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EPhysicalSurface                              CallFunc_BreakHitResult_ShapeSurfaceType;          // 0x00E0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_E1[0x3];                                       // 0x00E1(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   CallFunc_BreakHitResult_HitBoneName;               // 0x00E4(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_BreakHitResult_HitItem;                   // 0x00EC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_BreakHitResult_ElementIndex;              // 0x00F0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_BreakHitResult_FaceIndex;                 // 0x00F4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_TraceStart;                // 0x00F8(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_TraceEnd;                  // 0x0104(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class APawn*                                  CallFunc_K2_GetPawn_ReturnValue;                   // 0x0110(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_K2_GetActorLocation_ReturnValue;          // 0x0118(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               CallFunc_Trap_Placement_Calculate_Rotation_ReturnValue; // 0x0124(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FHitResult                             CallFunc_K2_SetActorLocationAndRotation_SweepHitResult; // 0x0130(0x008C)(IsPlainOldData, NoDestructor, ContainsInstancedReference)
	bool                                          CallFunc_K2_SetActorLocationAndRotation_ReturnValue; // 0x01BC(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_1BD[0x3];                                      // 0x01BD(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             CallFunc_MakeTransform_ReturnValue;                // 0x01C0(0x0030)(IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_PlacableTrap_Base_C_Trap_Hologram_SetAndReplicateTransform) == 0x000010, "Wrong alignment on BP_PlacableTrap_Base_C_Trap_Hologram_SetAndReplicateTransform");
static_assert(sizeof(BP_PlacableTrap_Base_C_Trap_Hologram_SetAndReplicateTransform) == 0x0001F0, "Wrong size on BP_PlacableTrap_Base_C_Trap_Hologram_SetAndReplicateTransform");
static_assert(offsetof(BP_PlacableTrap_Base_C_Trap_Hologram_SetAndReplicateTransform, Hit) == 0x000000, "Member 'BP_PlacableTrap_Base_C_Trap_Hologram_SetAndReplicateTransform::Hit' has a wrong offset!");
static_assert(offsetof(BP_PlacableTrap_Base_C_Trap_Hologram_SetAndReplicateTransform, CallFunc_BreakHitResult_bBlockingHit) == 0x00008C, "Member 'BP_PlacableTrap_Base_C_Trap_Hologram_SetAndReplicateTransform::CallFunc_BreakHitResult_bBlockingHit' has a wrong offset!");
static_assert(offsetof(BP_PlacableTrap_Base_C_Trap_Hologram_SetAndReplicateTransform, CallFunc_BreakHitResult_bInitialOverlap) == 0x00008D, "Member 'BP_PlacableTrap_Base_C_Trap_Hologram_SetAndReplicateTransform::CallFunc_BreakHitResult_bInitialOverlap' has a wrong offset!");
static_assert(offsetof(BP_PlacableTrap_Base_C_Trap_Hologram_SetAndReplicateTransform, CallFunc_BreakHitResult_Time) == 0x000090, "Member 'BP_PlacableTrap_Base_C_Trap_Hologram_SetAndReplicateTransform::CallFunc_BreakHitResult_Time' has a wrong offset!");
static_assert(offsetof(BP_PlacableTrap_Base_C_Trap_Hologram_SetAndReplicateTransform, CallFunc_BreakHitResult_Distance) == 0x000094, "Member 'BP_PlacableTrap_Base_C_Trap_Hologram_SetAndReplicateTransform::CallFunc_BreakHitResult_Distance' has a wrong offset!");
static_assert(offsetof(BP_PlacableTrap_Base_C_Trap_Hologram_SetAndReplicateTransform, CallFunc_BreakHitResult_Location) == 0x000098, "Member 'BP_PlacableTrap_Base_C_Trap_Hologram_SetAndReplicateTransform::CallFunc_BreakHitResult_Location' has a wrong offset!");
static_assert(offsetof(BP_PlacableTrap_Base_C_Trap_Hologram_SetAndReplicateTransform, CallFunc_BreakHitResult_ImpactPoint) == 0x0000A4, "Member 'BP_PlacableTrap_Base_C_Trap_Hologram_SetAndReplicateTransform::CallFunc_BreakHitResult_ImpactPoint' has a wrong offset!");
static_assert(offsetof(BP_PlacableTrap_Base_C_Trap_Hologram_SetAndReplicateTransform, CallFunc_BreakHitResult_Normal) == 0x0000B0, "Member 'BP_PlacableTrap_Base_C_Trap_Hologram_SetAndReplicateTransform::CallFunc_BreakHitResult_Normal' has a wrong offset!");
static_assert(offsetof(BP_PlacableTrap_Base_C_Trap_Hologram_SetAndReplicateTransform, CallFunc_BreakHitResult_ImpactNormal) == 0x0000BC, "Member 'BP_PlacableTrap_Base_C_Trap_Hologram_SetAndReplicateTransform::CallFunc_BreakHitResult_ImpactNormal' has a wrong offset!");
static_assert(offsetof(BP_PlacableTrap_Base_C_Trap_Hologram_SetAndReplicateTransform, CallFunc_BreakHitResult_PhysMat) == 0x0000C8, "Member 'BP_PlacableTrap_Base_C_Trap_Hologram_SetAndReplicateTransform::CallFunc_BreakHitResult_PhysMat' has a wrong offset!");
static_assert(offsetof(BP_PlacableTrap_Base_C_Trap_Hologram_SetAndReplicateTransform, CallFunc_BreakHitResult_HitActor) == 0x0000D0, "Member 'BP_PlacableTrap_Base_C_Trap_Hologram_SetAndReplicateTransform::CallFunc_BreakHitResult_HitActor' has a wrong offset!");
static_assert(offsetof(BP_PlacableTrap_Base_C_Trap_Hologram_SetAndReplicateTransform, CallFunc_BreakHitResult_HitComponent) == 0x0000D8, "Member 'BP_PlacableTrap_Base_C_Trap_Hologram_SetAndReplicateTransform::CallFunc_BreakHitResult_HitComponent' has a wrong offset!");
static_assert(offsetof(BP_PlacableTrap_Base_C_Trap_Hologram_SetAndReplicateTransform, CallFunc_BreakHitResult_ShapeSurfaceType) == 0x0000E0, "Member 'BP_PlacableTrap_Base_C_Trap_Hologram_SetAndReplicateTransform::CallFunc_BreakHitResult_ShapeSurfaceType' has a wrong offset!");
static_assert(offsetof(BP_PlacableTrap_Base_C_Trap_Hologram_SetAndReplicateTransform, CallFunc_BreakHitResult_HitBoneName) == 0x0000E4, "Member 'BP_PlacableTrap_Base_C_Trap_Hologram_SetAndReplicateTransform::CallFunc_BreakHitResult_HitBoneName' has a wrong offset!");
static_assert(offsetof(BP_PlacableTrap_Base_C_Trap_Hologram_SetAndReplicateTransform, CallFunc_BreakHitResult_HitItem) == 0x0000EC, "Member 'BP_PlacableTrap_Base_C_Trap_Hologram_SetAndReplicateTransform::CallFunc_BreakHitResult_HitItem' has a wrong offset!");
static_assert(offsetof(BP_PlacableTrap_Base_C_Trap_Hologram_SetAndReplicateTransform, CallFunc_BreakHitResult_ElementIndex) == 0x0000F0, "Member 'BP_PlacableTrap_Base_C_Trap_Hologram_SetAndReplicateTransform::CallFunc_BreakHitResult_ElementIndex' has a wrong offset!");
static_assert(offsetof(BP_PlacableTrap_Base_C_Trap_Hologram_SetAndReplicateTransform, CallFunc_BreakHitResult_FaceIndex) == 0x0000F4, "Member 'BP_PlacableTrap_Base_C_Trap_Hologram_SetAndReplicateTransform::CallFunc_BreakHitResult_FaceIndex' has a wrong offset!");
static_assert(offsetof(BP_PlacableTrap_Base_C_Trap_Hologram_SetAndReplicateTransform, CallFunc_BreakHitResult_TraceStart) == 0x0000F8, "Member 'BP_PlacableTrap_Base_C_Trap_Hologram_SetAndReplicateTransform::CallFunc_BreakHitResult_TraceStart' has a wrong offset!");
static_assert(offsetof(BP_PlacableTrap_Base_C_Trap_Hologram_SetAndReplicateTransform, CallFunc_BreakHitResult_TraceEnd) == 0x000104, "Member 'BP_PlacableTrap_Base_C_Trap_Hologram_SetAndReplicateTransform::CallFunc_BreakHitResult_TraceEnd' has a wrong offset!");
static_assert(offsetof(BP_PlacableTrap_Base_C_Trap_Hologram_SetAndReplicateTransform, CallFunc_K2_GetPawn_ReturnValue) == 0x000110, "Member 'BP_PlacableTrap_Base_C_Trap_Hologram_SetAndReplicateTransform::CallFunc_K2_GetPawn_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlacableTrap_Base_C_Trap_Hologram_SetAndReplicateTransform, CallFunc_K2_GetActorLocation_ReturnValue) == 0x000118, "Member 'BP_PlacableTrap_Base_C_Trap_Hologram_SetAndReplicateTransform::CallFunc_K2_GetActorLocation_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlacableTrap_Base_C_Trap_Hologram_SetAndReplicateTransform, CallFunc_Trap_Placement_Calculate_Rotation_ReturnValue) == 0x000124, "Member 'BP_PlacableTrap_Base_C_Trap_Hologram_SetAndReplicateTransform::CallFunc_Trap_Placement_Calculate_Rotation_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlacableTrap_Base_C_Trap_Hologram_SetAndReplicateTransform, CallFunc_K2_SetActorLocationAndRotation_SweepHitResult) == 0x000130, "Member 'BP_PlacableTrap_Base_C_Trap_Hologram_SetAndReplicateTransform::CallFunc_K2_SetActorLocationAndRotation_SweepHitResult' has a wrong offset!");
static_assert(offsetof(BP_PlacableTrap_Base_C_Trap_Hologram_SetAndReplicateTransform, CallFunc_K2_SetActorLocationAndRotation_ReturnValue) == 0x0001BC, "Member 'BP_PlacableTrap_Base_C_Trap_Hologram_SetAndReplicateTransform::CallFunc_K2_SetActorLocationAndRotation_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlacableTrap_Base_C_Trap_Hologram_SetAndReplicateTransform, CallFunc_MakeTransform_ReturnValue) == 0x0001C0, "Member 'BP_PlacableTrap_Base_C_Trap_Hologram_SetAndReplicateTransform::CallFunc_MakeTransform_ReturnValue' has a wrong offset!");

// Function BP_PlacableTrap_Base.BP_PlacableTrap_Base_C.Trap_Placement_Debug
// 0x02E8 (0x02E8 - 0x0000)
struct BP_PlacableTrap_Base_C_Trap_Placement_Debug final
{
public:
	struct FHitResult                             Hit;                                               // 0x0000(0x008C)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, ContainsInstancedReference)
	bool                                          CanBePlaced;                                       // 0x008C(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable;                                // 0x008D(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BreakHitResult_bBlockingHit;              // 0x008E(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BreakHitResult_bInitialOverlap;           // 0x008F(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                         CallFunc_BreakHitResult_Time;                      // 0x0090(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakHitResult_Distance;                  // 0x0094(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_Location;                  // 0x0098(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_ImpactPoint;               // 0x00A4(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_Normal;                    // 0x00B0(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_ImpactNormal;              // 0x00BC(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UPhysicalMaterial*                      CallFunc_BreakHitResult_PhysMat;                   // 0x00C8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 CallFunc_BreakHitResult_HitActor;                  // 0x00D0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UPrimitiveComponent*                    CallFunc_BreakHitResult_HitComponent;              // 0x00D8(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EPhysicalSurface                              CallFunc_BreakHitResult_ShapeSurfaceType;          // 0x00E0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_E1[0x3];                                       // 0x00E1(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   CallFunc_BreakHitResult_HitBoneName;               // 0x00E4(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_BreakHitResult_HitItem;                   // 0x00EC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_BreakHitResult_ElementIndex;              // 0x00F0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_BreakHitResult_FaceIndex;                 // 0x00F4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_TraceStart;                // 0x00F8(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_TraceEnd;                  // 0x0104(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FString                                 CallFunc_GetEnumeratorUserFriendlyName_ReturnValue; // 0x0110(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FString                                 CallFunc_GetDisplayName_ReturnValue;               // 0x0120(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FString                                 CallFunc_GetDisplayName_ReturnValue_1;             // 0x0130(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class UClass*                                 CallFunc_GetObjectClass_ReturnValue;               // 0x0140(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FString                                 CallFunc_GetDisplayName_ReturnValue_2;             // 0x0148(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	TSoftClassPtr<class UClass>                   CallFunc_Conv_ClassToSoftClassReference_ReturnValue; // 0x0158(0x0028)(UObjectWrapper, HasGetValueTypeHash)
	class FString                                 CallFunc_Concat_StrStr_ReturnValue;                // 0x0180(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	struct FLinearColor                           Temp_struct_Variable;                              // 0x0190(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FString                                 CallFunc_Concat_StrStr_ReturnValue_1;              // 0x01A0(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FString                                 CallFunc_Concat_StrStr_ReturnValue_2;              // 0x01B0(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	struct FLinearColor                           Temp_struct_Variable_1;                            // 0x01C0(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FString                                 CallFunc_Concat_StrStr_ReturnValue_3;              // 0x01D0(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	struct FLinearColor                           K2Node_Select_Default;                             // 0x01E0(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class APawn*                                  CallFunc_K2_GetPawn_ReturnValue;                   // 0x01F0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_K2_GetActorLocation_ReturnValue;          // 0x01F8(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Array_Contains_ReturnValue;               // 0x0204(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_205[0x3];                                      // 0x0205(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_Subtract_VectorVector_ReturnValue;        // 0x0208(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_214[0x4];                                      // 0x0214(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 CallFunc_Conv_BoolToString_ReturnValue;            // 0x0218(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	float                                         CallFunc_VSize_ReturnValue;                        // 0x0228(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_22C[0x4];                                      // 0x022C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 CallFunc_Concat_StrStr_ReturnValue_4;              // 0x0230(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FString                                 CallFunc_Conv_FloatToString_ReturnValue;           // 0x0240(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FString                                 CallFunc_Concat_StrStr_ReturnValue_5;              // 0x0250(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FString                                 CallFunc_Concat_StrStr_ReturnValue_6;              // 0x0260(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	bool                                          CallFunc_Array_Contains_ReturnValue_1;             // 0x0270(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_271[0x7];                                      // 0x0271(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 CallFunc_Concat_StrStr_ReturnValue_7;              // 0x0278(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FString                                 CallFunc_Conv_BoolToString_ReturnValue_1;          // 0x0288(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FString                                 CallFunc_Concat_StrStr_ReturnValue_8;              // 0x0298(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FString                                 CallFunc_Concat_StrStr_ReturnValue_9;              // 0x02A8(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FString                                 CallFunc_Concat_StrStr_ReturnValue_10;             // 0x02B8(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FString                                 CallFunc_Concat_StrStr_ReturnValue_11;             // 0x02C8(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FString                                 CallFunc_Concat_StrStr_ReturnValue_12;             // 0x02D8(0x0010)(ZeroConstructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_PlacableTrap_Base_C_Trap_Placement_Debug) == 0x000008, "Wrong alignment on BP_PlacableTrap_Base_C_Trap_Placement_Debug");
static_assert(sizeof(BP_PlacableTrap_Base_C_Trap_Placement_Debug) == 0x0002E8, "Wrong size on BP_PlacableTrap_Base_C_Trap_Placement_Debug");
static_assert(offsetof(BP_PlacableTrap_Base_C_Trap_Placement_Debug, Hit) == 0x000000, "Member 'BP_PlacableTrap_Base_C_Trap_Placement_Debug::Hit' has a wrong offset!");
static_assert(offsetof(BP_PlacableTrap_Base_C_Trap_Placement_Debug, CanBePlaced) == 0x00008C, "Member 'BP_PlacableTrap_Base_C_Trap_Placement_Debug::CanBePlaced' has a wrong offset!");
static_assert(offsetof(BP_PlacableTrap_Base_C_Trap_Placement_Debug, Temp_bool_Variable) == 0x00008D, "Member 'BP_PlacableTrap_Base_C_Trap_Placement_Debug::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(BP_PlacableTrap_Base_C_Trap_Placement_Debug, CallFunc_BreakHitResult_bBlockingHit) == 0x00008E, "Member 'BP_PlacableTrap_Base_C_Trap_Placement_Debug::CallFunc_BreakHitResult_bBlockingHit' has a wrong offset!");
static_assert(offsetof(BP_PlacableTrap_Base_C_Trap_Placement_Debug, CallFunc_BreakHitResult_bInitialOverlap) == 0x00008F, "Member 'BP_PlacableTrap_Base_C_Trap_Placement_Debug::CallFunc_BreakHitResult_bInitialOverlap' has a wrong offset!");
static_assert(offsetof(BP_PlacableTrap_Base_C_Trap_Placement_Debug, CallFunc_BreakHitResult_Time) == 0x000090, "Member 'BP_PlacableTrap_Base_C_Trap_Placement_Debug::CallFunc_BreakHitResult_Time' has a wrong offset!");
static_assert(offsetof(BP_PlacableTrap_Base_C_Trap_Placement_Debug, CallFunc_BreakHitResult_Distance) == 0x000094, "Member 'BP_PlacableTrap_Base_C_Trap_Placement_Debug::CallFunc_BreakHitResult_Distance' has a wrong offset!");
static_assert(offsetof(BP_PlacableTrap_Base_C_Trap_Placement_Debug, CallFunc_BreakHitResult_Location) == 0x000098, "Member 'BP_PlacableTrap_Base_C_Trap_Placement_Debug::CallFunc_BreakHitResult_Location' has a wrong offset!");
static_assert(offsetof(BP_PlacableTrap_Base_C_Trap_Placement_Debug, CallFunc_BreakHitResult_ImpactPoint) == 0x0000A4, "Member 'BP_PlacableTrap_Base_C_Trap_Placement_Debug::CallFunc_BreakHitResult_ImpactPoint' has a wrong offset!");
static_assert(offsetof(BP_PlacableTrap_Base_C_Trap_Placement_Debug, CallFunc_BreakHitResult_Normal) == 0x0000B0, "Member 'BP_PlacableTrap_Base_C_Trap_Placement_Debug::CallFunc_BreakHitResult_Normal' has a wrong offset!");
static_assert(offsetof(BP_PlacableTrap_Base_C_Trap_Placement_Debug, CallFunc_BreakHitResult_ImpactNormal) == 0x0000BC, "Member 'BP_PlacableTrap_Base_C_Trap_Placement_Debug::CallFunc_BreakHitResult_ImpactNormal' has a wrong offset!");
static_assert(offsetof(BP_PlacableTrap_Base_C_Trap_Placement_Debug, CallFunc_BreakHitResult_PhysMat) == 0x0000C8, "Member 'BP_PlacableTrap_Base_C_Trap_Placement_Debug::CallFunc_BreakHitResult_PhysMat' has a wrong offset!");
static_assert(offsetof(BP_PlacableTrap_Base_C_Trap_Placement_Debug, CallFunc_BreakHitResult_HitActor) == 0x0000D0, "Member 'BP_PlacableTrap_Base_C_Trap_Placement_Debug::CallFunc_BreakHitResult_HitActor' has a wrong offset!");
static_assert(offsetof(BP_PlacableTrap_Base_C_Trap_Placement_Debug, CallFunc_BreakHitResult_HitComponent) == 0x0000D8, "Member 'BP_PlacableTrap_Base_C_Trap_Placement_Debug::CallFunc_BreakHitResult_HitComponent' has a wrong offset!");
static_assert(offsetof(BP_PlacableTrap_Base_C_Trap_Placement_Debug, CallFunc_BreakHitResult_ShapeSurfaceType) == 0x0000E0, "Member 'BP_PlacableTrap_Base_C_Trap_Placement_Debug::CallFunc_BreakHitResult_ShapeSurfaceType' has a wrong offset!");
static_assert(offsetof(BP_PlacableTrap_Base_C_Trap_Placement_Debug, CallFunc_BreakHitResult_HitBoneName) == 0x0000E4, "Member 'BP_PlacableTrap_Base_C_Trap_Placement_Debug::CallFunc_BreakHitResult_HitBoneName' has a wrong offset!");
static_assert(offsetof(BP_PlacableTrap_Base_C_Trap_Placement_Debug, CallFunc_BreakHitResult_HitItem) == 0x0000EC, "Member 'BP_PlacableTrap_Base_C_Trap_Placement_Debug::CallFunc_BreakHitResult_HitItem' has a wrong offset!");
static_assert(offsetof(BP_PlacableTrap_Base_C_Trap_Placement_Debug, CallFunc_BreakHitResult_ElementIndex) == 0x0000F0, "Member 'BP_PlacableTrap_Base_C_Trap_Placement_Debug::CallFunc_BreakHitResult_ElementIndex' has a wrong offset!");
static_assert(offsetof(BP_PlacableTrap_Base_C_Trap_Placement_Debug, CallFunc_BreakHitResult_FaceIndex) == 0x0000F4, "Member 'BP_PlacableTrap_Base_C_Trap_Placement_Debug::CallFunc_BreakHitResult_FaceIndex' has a wrong offset!");
static_assert(offsetof(BP_PlacableTrap_Base_C_Trap_Placement_Debug, CallFunc_BreakHitResult_TraceStart) == 0x0000F8, "Member 'BP_PlacableTrap_Base_C_Trap_Placement_Debug::CallFunc_BreakHitResult_TraceStart' has a wrong offset!");
static_assert(offsetof(BP_PlacableTrap_Base_C_Trap_Placement_Debug, CallFunc_BreakHitResult_TraceEnd) == 0x000104, "Member 'BP_PlacableTrap_Base_C_Trap_Placement_Debug::CallFunc_BreakHitResult_TraceEnd' has a wrong offset!");
static_assert(offsetof(BP_PlacableTrap_Base_C_Trap_Placement_Debug, CallFunc_GetEnumeratorUserFriendlyName_ReturnValue) == 0x000110, "Member 'BP_PlacableTrap_Base_C_Trap_Placement_Debug::CallFunc_GetEnumeratorUserFriendlyName_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlacableTrap_Base_C_Trap_Placement_Debug, CallFunc_GetDisplayName_ReturnValue) == 0x000120, "Member 'BP_PlacableTrap_Base_C_Trap_Placement_Debug::CallFunc_GetDisplayName_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlacableTrap_Base_C_Trap_Placement_Debug, CallFunc_GetDisplayName_ReturnValue_1) == 0x000130, "Member 'BP_PlacableTrap_Base_C_Trap_Placement_Debug::CallFunc_GetDisplayName_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_PlacableTrap_Base_C_Trap_Placement_Debug, CallFunc_GetObjectClass_ReturnValue) == 0x000140, "Member 'BP_PlacableTrap_Base_C_Trap_Placement_Debug::CallFunc_GetObjectClass_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlacableTrap_Base_C_Trap_Placement_Debug, CallFunc_GetDisplayName_ReturnValue_2) == 0x000148, "Member 'BP_PlacableTrap_Base_C_Trap_Placement_Debug::CallFunc_GetDisplayName_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BP_PlacableTrap_Base_C_Trap_Placement_Debug, CallFunc_Conv_ClassToSoftClassReference_ReturnValue) == 0x000158, "Member 'BP_PlacableTrap_Base_C_Trap_Placement_Debug::CallFunc_Conv_ClassToSoftClassReference_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlacableTrap_Base_C_Trap_Placement_Debug, CallFunc_Concat_StrStr_ReturnValue) == 0x000180, "Member 'BP_PlacableTrap_Base_C_Trap_Placement_Debug::CallFunc_Concat_StrStr_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlacableTrap_Base_C_Trap_Placement_Debug, Temp_struct_Variable) == 0x000190, "Member 'BP_PlacableTrap_Base_C_Trap_Placement_Debug::Temp_struct_Variable' has a wrong offset!");
static_assert(offsetof(BP_PlacableTrap_Base_C_Trap_Placement_Debug, CallFunc_Concat_StrStr_ReturnValue_1) == 0x0001A0, "Member 'BP_PlacableTrap_Base_C_Trap_Placement_Debug::CallFunc_Concat_StrStr_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_PlacableTrap_Base_C_Trap_Placement_Debug, CallFunc_Concat_StrStr_ReturnValue_2) == 0x0001B0, "Member 'BP_PlacableTrap_Base_C_Trap_Placement_Debug::CallFunc_Concat_StrStr_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BP_PlacableTrap_Base_C_Trap_Placement_Debug, Temp_struct_Variable_1) == 0x0001C0, "Member 'BP_PlacableTrap_Base_C_Trap_Placement_Debug::Temp_struct_Variable_1' has a wrong offset!");
static_assert(offsetof(BP_PlacableTrap_Base_C_Trap_Placement_Debug, CallFunc_Concat_StrStr_ReturnValue_3) == 0x0001D0, "Member 'BP_PlacableTrap_Base_C_Trap_Placement_Debug::CallFunc_Concat_StrStr_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(BP_PlacableTrap_Base_C_Trap_Placement_Debug, K2Node_Select_Default) == 0x0001E0, "Member 'BP_PlacableTrap_Base_C_Trap_Placement_Debug::K2Node_Select_Default' has a wrong offset!");
static_assert(offsetof(BP_PlacableTrap_Base_C_Trap_Placement_Debug, CallFunc_K2_GetPawn_ReturnValue) == 0x0001F0, "Member 'BP_PlacableTrap_Base_C_Trap_Placement_Debug::CallFunc_K2_GetPawn_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlacableTrap_Base_C_Trap_Placement_Debug, CallFunc_K2_GetActorLocation_ReturnValue) == 0x0001F8, "Member 'BP_PlacableTrap_Base_C_Trap_Placement_Debug::CallFunc_K2_GetActorLocation_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlacableTrap_Base_C_Trap_Placement_Debug, CallFunc_Array_Contains_ReturnValue) == 0x000204, "Member 'BP_PlacableTrap_Base_C_Trap_Placement_Debug::CallFunc_Array_Contains_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlacableTrap_Base_C_Trap_Placement_Debug, CallFunc_Subtract_VectorVector_ReturnValue) == 0x000208, "Member 'BP_PlacableTrap_Base_C_Trap_Placement_Debug::CallFunc_Subtract_VectorVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlacableTrap_Base_C_Trap_Placement_Debug, CallFunc_Conv_BoolToString_ReturnValue) == 0x000218, "Member 'BP_PlacableTrap_Base_C_Trap_Placement_Debug::CallFunc_Conv_BoolToString_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlacableTrap_Base_C_Trap_Placement_Debug, CallFunc_VSize_ReturnValue) == 0x000228, "Member 'BP_PlacableTrap_Base_C_Trap_Placement_Debug::CallFunc_VSize_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlacableTrap_Base_C_Trap_Placement_Debug, CallFunc_Concat_StrStr_ReturnValue_4) == 0x000230, "Member 'BP_PlacableTrap_Base_C_Trap_Placement_Debug::CallFunc_Concat_StrStr_ReturnValue_4' has a wrong offset!");
static_assert(offsetof(BP_PlacableTrap_Base_C_Trap_Placement_Debug, CallFunc_Conv_FloatToString_ReturnValue) == 0x000240, "Member 'BP_PlacableTrap_Base_C_Trap_Placement_Debug::CallFunc_Conv_FloatToString_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlacableTrap_Base_C_Trap_Placement_Debug, CallFunc_Concat_StrStr_ReturnValue_5) == 0x000250, "Member 'BP_PlacableTrap_Base_C_Trap_Placement_Debug::CallFunc_Concat_StrStr_ReturnValue_5' has a wrong offset!");
static_assert(offsetof(BP_PlacableTrap_Base_C_Trap_Placement_Debug, CallFunc_Concat_StrStr_ReturnValue_6) == 0x000260, "Member 'BP_PlacableTrap_Base_C_Trap_Placement_Debug::CallFunc_Concat_StrStr_ReturnValue_6' has a wrong offset!");
static_assert(offsetof(BP_PlacableTrap_Base_C_Trap_Placement_Debug, CallFunc_Array_Contains_ReturnValue_1) == 0x000270, "Member 'BP_PlacableTrap_Base_C_Trap_Placement_Debug::CallFunc_Array_Contains_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_PlacableTrap_Base_C_Trap_Placement_Debug, CallFunc_Concat_StrStr_ReturnValue_7) == 0x000278, "Member 'BP_PlacableTrap_Base_C_Trap_Placement_Debug::CallFunc_Concat_StrStr_ReturnValue_7' has a wrong offset!");
static_assert(offsetof(BP_PlacableTrap_Base_C_Trap_Placement_Debug, CallFunc_Conv_BoolToString_ReturnValue_1) == 0x000288, "Member 'BP_PlacableTrap_Base_C_Trap_Placement_Debug::CallFunc_Conv_BoolToString_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_PlacableTrap_Base_C_Trap_Placement_Debug, CallFunc_Concat_StrStr_ReturnValue_8) == 0x000298, "Member 'BP_PlacableTrap_Base_C_Trap_Placement_Debug::CallFunc_Concat_StrStr_ReturnValue_8' has a wrong offset!");
static_assert(offsetof(BP_PlacableTrap_Base_C_Trap_Placement_Debug, CallFunc_Concat_StrStr_ReturnValue_9) == 0x0002A8, "Member 'BP_PlacableTrap_Base_C_Trap_Placement_Debug::CallFunc_Concat_StrStr_ReturnValue_9' has a wrong offset!");
static_assert(offsetof(BP_PlacableTrap_Base_C_Trap_Placement_Debug, CallFunc_Concat_StrStr_ReturnValue_10) == 0x0002B8, "Member 'BP_PlacableTrap_Base_C_Trap_Placement_Debug::CallFunc_Concat_StrStr_ReturnValue_10' has a wrong offset!");
static_assert(offsetof(BP_PlacableTrap_Base_C_Trap_Placement_Debug, CallFunc_Concat_StrStr_ReturnValue_11) == 0x0002C8, "Member 'BP_PlacableTrap_Base_C_Trap_Placement_Debug::CallFunc_Concat_StrStr_ReturnValue_11' has a wrong offset!");
static_assert(offsetof(BP_PlacableTrap_Base_C_Trap_Placement_Debug, CallFunc_Concat_StrStr_ReturnValue_12) == 0x0002D8, "Member 'BP_PlacableTrap_Base_C_Trap_Placement_Debug::CallFunc_Concat_StrStr_ReturnValue_12' has a wrong offset!");

// Function BP_PlacableTrap_Base.BP_PlacableTrap_Base_C.Trap_Hologram_ReplicateAndChangeVisuals
// 0x0094 (0x0094 - 0x0000)
struct BP_PlacableTrap_Base_C_Trap_Hologram_ReplicateAndChangeVisuals final
{
public:
	bool                                          CanBePlaced;                                       // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FHitResult                             Hit;                                               // 0x0004(0x008C)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, ContainsInstancedReference)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0090(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_PlacableTrap_Base_C_Trap_Hologram_ReplicateAndChangeVisuals) == 0x000004, "Wrong alignment on BP_PlacableTrap_Base_C_Trap_Hologram_ReplicateAndChangeVisuals");
static_assert(sizeof(BP_PlacableTrap_Base_C_Trap_Hologram_ReplicateAndChangeVisuals) == 0x000094, "Wrong size on BP_PlacableTrap_Base_C_Trap_Hologram_ReplicateAndChangeVisuals");
static_assert(offsetof(BP_PlacableTrap_Base_C_Trap_Hologram_ReplicateAndChangeVisuals, CanBePlaced) == 0x000000, "Member 'BP_PlacableTrap_Base_C_Trap_Hologram_ReplicateAndChangeVisuals::CanBePlaced' has a wrong offset!");
static_assert(offsetof(BP_PlacableTrap_Base_C_Trap_Hologram_ReplicateAndChangeVisuals, Hit) == 0x000004, "Member 'BP_PlacableTrap_Base_C_Trap_Hologram_ReplicateAndChangeVisuals::Hit' has a wrong offset!");
static_assert(offsetof(BP_PlacableTrap_Base_C_Trap_Hologram_ReplicateAndChangeVisuals, CallFunc_IsValid_ReturnValue) == 0x000090, "Member 'BP_PlacableTrap_Base_C_Trap_Hologram_ReplicateAndChangeVisuals::CallFunc_IsValid_ReturnValue' has a wrong offset!");

// Function BP_PlacableTrap_Base.BP_PlacableTrap_Base_C.Trap_Hologram_Show
// 0x0050 (0x0050 - 0x0000)
struct BP_PlacableTrap_Base_C_Trap_Hologram_Show final
{
public:
	class AActor*                                 CallFunc_GetOwner_ReturnValue;                     // 0x0000(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_8[0x8];                                        // 0x0008(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             CallFunc_MakeTransform_ReturnValue;                // 0x0010(0x0030)(IsPlainOldData, NoDestructor)
	class AActor*                                 CallFunc_BeginDeferredActorSpawnFromClass_ReturnValue; // 0x0040(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ABP_PlacableTrap_Hologram_Base_C*       CallFunc_FinishSpawningActor_ReturnValue;          // 0x0048(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_PlacableTrap_Base_C_Trap_Hologram_Show) == 0x000010, "Wrong alignment on BP_PlacableTrap_Base_C_Trap_Hologram_Show");
static_assert(sizeof(BP_PlacableTrap_Base_C_Trap_Hologram_Show) == 0x000050, "Wrong size on BP_PlacableTrap_Base_C_Trap_Hologram_Show");
static_assert(offsetof(BP_PlacableTrap_Base_C_Trap_Hologram_Show, CallFunc_GetOwner_ReturnValue) == 0x000000, "Member 'BP_PlacableTrap_Base_C_Trap_Hologram_Show::CallFunc_GetOwner_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlacableTrap_Base_C_Trap_Hologram_Show, CallFunc_MakeTransform_ReturnValue) == 0x000010, "Member 'BP_PlacableTrap_Base_C_Trap_Hologram_Show::CallFunc_MakeTransform_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlacableTrap_Base_C_Trap_Hologram_Show, CallFunc_BeginDeferredActorSpawnFromClass_ReturnValue) == 0x000040, "Member 'BP_PlacableTrap_Base_C_Trap_Hologram_Show::CallFunc_BeginDeferredActorSpawnFromClass_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlacableTrap_Base_C_Trap_Hologram_Show, CallFunc_FinishSpawningActor_ReturnValue) == 0x000048, "Member 'BP_PlacableTrap_Base_C_Trap_Hologram_Show::CallFunc_FinishSpawningActor_ReturnValue' has a wrong offset!");

// Function BP_PlacableTrap_Base.BP_PlacableTrap_Base_C.Trap_Hologram_Hide
// 0x0001 (0x0001 - 0x0000)
struct BP_PlacableTrap_Base_C_Trap_Hologram_Hide final
{
public:
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0000(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_PlacableTrap_Base_C_Trap_Hologram_Hide) == 0x000001, "Wrong alignment on BP_PlacableTrap_Base_C_Trap_Hologram_Hide");
static_assert(sizeof(BP_PlacableTrap_Base_C_Trap_Hologram_Hide) == 0x000001, "Wrong size on BP_PlacableTrap_Base_C_Trap_Hologram_Hide");
static_assert(offsetof(BP_PlacableTrap_Base_C_Trap_Hologram_Hide, CallFunc_IsValid_ReturnValue) == 0x000000, "Member 'BP_PlacableTrap_Base_C_Trap_Hologram_Hide::CallFunc_IsValid_ReturnValue' has a wrong offset!");

// Function BP_PlacableTrap_Base.BP_PlacableTrap_Base_C.Trap_Placement_SpawnObject
// 0x0190 (0x0190 - 0x0000)
struct BP_PlacableTrap_Base_C_Trap_Placement_SpawnObject final
{
public:
	struct FHitResult                             CallFunc_Trap_Placement_Calculate_ReturnValue;     // 0x0000(0x008C)(IsPlainOldData, NoDestructor, ContainsInstancedReference)
	bool                                          CallFunc_Trap_Placement_Calculate_WasHit;          // 0x008C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BreakHitResult_bBlockingHit;              // 0x008D(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BreakHitResult_bInitialOverlap;           // 0x008E(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_8F[0x1];                                       // 0x008F(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_BreakHitResult_Time;                      // 0x0090(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakHitResult_Distance;                  // 0x0094(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_Location;                  // 0x0098(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_ImpactPoint;               // 0x00A4(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_Normal;                    // 0x00B0(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_ImpactNormal;              // 0x00BC(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UPhysicalMaterial*                      CallFunc_BreakHitResult_PhysMat;                   // 0x00C8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 CallFunc_BreakHitResult_HitActor;                  // 0x00D0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UPrimitiveComponent*                    CallFunc_BreakHitResult_HitComponent;              // 0x00D8(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EPhysicalSurface                              CallFunc_BreakHitResult_ShapeSurfaceType;          // 0x00E0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_E1[0x3];                                       // 0x00E1(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   CallFunc_BreakHitResult_HitBoneName;               // 0x00E4(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_BreakHitResult_HitItem;                   // 0x00EC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_BreakHitResult_ElementIndex;              // 0x00F0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_BreakHitResult_FaceIndex;                 // 0x00F4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_TraceStart;                // 0x00F8(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_TraceEnd;                  // 0x0104(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UClass*                                 CallFunc_GetObjectClass_ReturnValue;               // 0x0110(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class APawn*                                  CallFunc_K2_GetPawn_ReturnValue;                   // 0x0118(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_K2_GetActorLocation_ReturnValue;          // 0x0120(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_12C[0x4];                                      // 0x012C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class ABP_PlayerState_C*                      K2Node_DynamicCast_AsBP_Player_State;              // 0x0130(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0138(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_139[0x3];                                      // 0x0139(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FRotator                               CallFunc_Trap_Placement_Calculate_Rotation_ReturnValue; // 0x013C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_148[0x8];                                      // 0x0148(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             CallFunc_MakeTransform_ReturnValue;                // 0x0150(0x0030)(IsPlainOldData, NoDestructor)
	class AActor*                                 CallFunc_BeginDeferredActorSpawnFromClass_ReturnValue; // 0x0180(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ABP_PlacableTrap_Object_Base_C*         CallFunc_FinishSpawningActor_ReturnValue;          // 0x0188(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_PlacableTrap_Base_C_Trap_Placement_SpawnObject) == 0x000010, "Wrong alignment on BP_PlacableTrap_Base_C_Trap_Placement_SpawnObject");
static_assert(sizeof(BP_PlacableTrap_Base_C_Trap_Placement_SpawnObject) == 0x000190, "Wrong size on BP_PlacableTrap_Base_C_Trap_Placement_SpawnObject");
static_assert(offsetof(BP_PlacableTrap_Base_C_Trap_Placement_SpawnObject, CallFunc_Trap_Placement_Calculate_ReturnValue) == 0x000000, "Member 'BP_PlacableTrap_Base_C_Trap_Placement_SpawnObject::CallFunc_Trap_Placement_Calculate_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlacableTrap_Base_C_Trap_Placement_SpawnObject, CallFunc_Trap_Placement_Calculate_WasHit) == 0x00008C, "Member 'BP_PlacableTrap_Base_C_Trap_Placement_SpawnObject::CallFunc_Trap_Placement_Calculate_WasHit' has a wrong offset!");
static_assert(offsetof(BP_PlacableTrap_Base_C_Trap_Placement_SpawnObject, CallFunc_BreakHitResult_bBlockingHit) == 0x00008D, "Member 'BP_PlacableTrap_Base_C_Trap_Placement_SpawnObject::CallFunc_BreakHitResult_bBlockingHit' has a wrong offset!");
static_assert(offsetof(BP_PlacableTrap_Base_C_Trap_Placement_SpawnObject, CallFunc_BreakHitResult_bInitialOverlap) == 0x00008E, "Member 'BP_PlacableTrap_Base_C_Trap_Placement_SpawnObject::CallFunc_BreakHitResult_bInitialOverlap' has a wrong offset!");
static_assert(offsetof(BP_PlacableTrap_Base_C_Trap_Placement_SpawnObject, CallFunc_BreakHitResult_Time) == 0x000090, "Member 'BP_PlacableTrap_Base_C_Trap_Placement_SpawnObject::CallFunc_BreakHitResult_Time' has a wrong offset!");
static_assert(offsetof(BP_PlacableTrap_Base_C_Trap_Placement_SpawnObject, CallFunc_BreakHitResult_Distance) == 0x000094, "Member 'BP_PlacableTrap_Base_C_Trap_Placement_SpawnObject::CallFunc_BreakHitResult_Distance' has a wrong offset!");
static_assert(offsetof(BP_PlacableTrap_Base_C_Trap_Placement_SpawnObject, CallFunc_BreakHitResult_Location) == 0x000098, "Member 'BP_PlacableTrap_Base_C_Trap_Placement_SpawnObject::CallFunc_BreakHitResult_Location' has a wrong offset!");
static_assert(offsetof(BP_PlacableTrap_Base_C_Trap_Placement_SpawnObject, CallFunc_BreakHitResult_ImpactPoint) == 0x0000A4, "Member 'BP_PlacableTrap_Base_C_Trap_Placement_SpawnObject::CallFunc_BreakHitResult_ImpactPoint' has a wrong offset!");
static_assert(offsetof(BP_PlacableTrap_Base_C_Trap_Placement_SpawnObject, CallFunc_BreakHitResult_Normal) == 0x0000B0, "Member 'BP_PlacableTrap_Base_C_Trap_Placement_SpawnObject::CallFunc_BreakHitResult_Normal' has a wrong offset!");
static_assert(offsetof(BP_PlacableTrap_Base_C_Trap_Placement_SpawnObject, CallFunc_BreakHitResult_ImpactNormal) == 0x0000BC, "Member 'BP_PlacableTrap_Base_C_Trap_Placement_SpawnObject::CallFunc_BreakHitResult_ImpactNormal' has a wrong offset!");
static_assert(offsetof(BP_PlacableTrap_Base_C_Trap_Placement_SpawnObject, CallFunc_BreakHitResult_PhysMat) == 0x0000C8, "Member 'BP_PlacableTrap_Base_C_Trap_Placement_SpawnObject::CallFunc_BreakHitResult_PhysMat' has a wrong offset!");
static_assert(offsetof(BP_PlacableTrap_Base_C_Trap_Placement_SpawnObject, CallFunc_BreakHitResult_HitActor) == 0x0000D0, "Member 'BP_PlacableTrap_Base_C_Trap_Placement_SpawnObject::CallFunc_BreakHitResult_HitActor' has a wrong offset!");
static_assert(offsetof(BP_PlacableTrap_Base_C_Trap_Placement_SpawnObject, CallFunc_BreakHitResult_HitComponent) == 0x0000D8, "Member 'BP_PlacableTrap_Base_C_Trap_Placement_SpawnObject::CallFunc_BreakHitResult_HitComponent' has a wrong offset!");
static_assert(offsetof(BP_PlacableTrap_Base_C_Trap_Placement_SpawnObject, CallFunc_BreakHitResult_ShapeSurfaceType) == 0x0000E0, "Member 'BP_PlacableTrap_Base_C_Trap_Placement_SpawnObject::CallFunc_BreakHitResult_ShapeSurfaceType' has a wrong offset!");
static_assert(offsetof(BP_PlacableTrap_Base_C_Trap_Placement_SpawnObject, CallFunc_BreakHitResult_HitBoneName) == 0x0000E4, "Member 'BP_PlacableTrap_Base_C_Trap_Placement_SpawnObject::CallFunc_BreakHitResult_HitBoneName' has a wrong offset!");
static_assert(offsetof(BP_PlacableTrap_Base_C_Trap_Placement_SpawnObject, CallFunc_BreakHitResult_HitItem) == 0x0000EC, "Member 'BP_PlacableTrap_Base_C_Trap_Placement_SpawnObject::CallFunc_BreakHitResult_HitItem' has a wrong offset!");
static_assert(offsetof(BP_PlacableTrap_Base_C_Trap_Placement_SpawnObject, CallFunc_BreakHitResult_ElementIndex) == 0x0000F0, "Member 'BP_PlacableTrap_Base_C_Trap_Placement_SpawnObject::CallFunc_BreakHitResult_ElementIndex' has a wrong offset!");
static_assert(offsetof(BP_PlacableTrap_Base_C_Trap_Placement_SpawnObject, CallFunc_BreakHitResult_FaceIndex) == 0x0000F4, "Member 'BP_PlacableTrap_Base_C_Trap_Placement_SpawnObject::CallFunc_BreakHitResult_FaceIndex' has a wrong offset!");
static_assert(offsetof(BP_PlacableTrap_Base_C_Trap_Placement_SpawnObject, CallFunc_BreakHitResult_TraceStart) == 0x0000F8, "Member 'BP_PlacableTrap_Base_C_Trap_Placement_SpawnObject::CallFunc_BreakHitResult_TraceStart' has a wrong offset!");
static_assert(offsetof(BP_PlacableTrap_Base_C_Trap_Placement_SpawnObject, CallFunc_BreakHitResult_TraceEnd) == 0x000104, "Member 'BP_PlacableTrap_Base_C_Trap_Placement_SpawnObject::CallFunc_BreakHitResult_TraceEnd' has a wrong offset!");
static_assert(offsetof(BP_PlacableTrap_Base_C_Trap_Placement_SpawnObject, CallFunc_GetObjectClass_ReturnValue) == 0x000110, "Member 'BP_PlacableTrap_Base_C_Trap_Placement_SpawnObject::CallFunc_GetObjectClass_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlacableTrap_Base_C_Trap_Placement_SpawnObject, CallFunc_K2_GetPawn_ReturnValue) == 0x000118, "Member 'BP_PlacableTrap_Base_C_Trap_Placement_SpawnObject::CallFunc_K2_GetPawn_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlacableTrap_Base_C_Trap_Placement_SpawnObject, CallFunc_K2_GetActorLocation_ReturnValue) == 0x000120, "Member 'BP_PlacableTrap_Base_C_Trap_Placement_SpawnObject::CallFunc_K2_GetActorLocation_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlacableTrap_Base_C_Trap_Placement_SpawnObject, K2Node_DynamicCast_AsBP_Player_State) == 0x000130, "Member 'BP_PlacableTrap_Base_C_Trap_Placement_SpawnObject::K2Node_DynamicCast_AsBP_Player_State' has a wrong offset!");
static_assert(offsetof(BP_PlacableTrap_Base_C_Trap_Placement_SpawnObject, K2Node_DynamicCast_bSuccess) == 0x000138, "Member 'BP_PlacableTrap_Base_C_Trap_Placement_SpawnObject::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(BP_PlacableTrap_Base_C_Trap_Placement_SpawnObject, CallFunc_Trap_Placement_Calculate_Rotation_ReturnValue) == 0x00013C, "Member 'BP_PlacableTrap_Base_C_Trap_Placement_SpawnObject::CallFunc_Trap_Placement_Calculate_Rotation_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlacableTrap_Base_C_Trap_Placement_SpawnObject, CallFunc_MakeTransform_ReturnValue) == 0x000150, "Member 'BP_PlacableTrap_Base_C_Trap_Placement_SpawnObject::CallFunc_MakeTransform_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlacableTrap_Base_C_Trap_Placement_SpawnObject, CallFunc_BeginDeferredActorSpawnFromClass_ReturnValue) == 0x000180, "Member 'BP_PlacableTrap_Base_C_Trap_Placement_SpawnObject::CallFunc_BeginDeferredActorSpawnFromClass_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlacableTrap_Base_C_Trap_Placement_SpawnObject, CallFunc_FinishSpawningActor_ReturnValue) == 0x000188, "Member 'BP_PlacableTrap_Base_C_Trap_Placement_SpawnObject::CallFunc_FinishSpawningActor_ReturnValue' has a wrong offset!");

// Function BP_PlacableTrap_Base.BP_PlacableTrap_Base_C.Trap_Placement_Calculate_Rotation
// 0x00C4 (0x00C4 - 0x0000)
struct BP_PlacableTrap_Base_C_Trap_Placement_Calculate_Rotation final
{
public:
	struct FVector                                ImpactPoint;                                       // 0x0000(0x000C)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                Normal;                                            // 0x000C(0x000C)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                ActorLocation;                                     // 0x0018(0x000C)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               ReturnValue;                                       // 0x0024(0x000C)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable;                                // 0x0030(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_31[0x3];                                       // 0x0031(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FRotator                               CallFunc_FindLookAtRotation_ReturnValue;           // 0x0034(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                         CallFunc_BreakVector_X;                            // 0x0040(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_Y;                            // 0x0044(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_Z;                            // 0x0048(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakRotator_Roll;                        // 0x004C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakRotator_Pitch;                       // 0x0050(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakRotator_Yaw;                         // 0x0054(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_LessEqual_FloatFloat_ReturnValue;         // 0x0058(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_59[0x3];                                       // 0x0059(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue;          // 0x005C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Temp_float_Variable;                               // 0x0060(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Temp_float_Variable_1;                             // 0x0064(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Temp_float_Variable_2;                             // 0x0068(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_X_1;                          // 0x006C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_Y_1;                          // 0x0070(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_Z_1;                          // 0x0074(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_GreaterEqual_FloatFloat_ReturnValue;      // 0x0078(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_79[0x3];                                       // 0x0079(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_Subtract_VectorVector_ReturnValue;        // 0x007C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_ProjectVectorOnToPlane_ReturnValue;       // 0x0088(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               CallFunc_MakeRotFromXZ_ReturnValue;                // 0x0094(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable_1;                              // 0x00A0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_A1[0x3];                                       // 0x00A1(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Temp_float_Variable_3;                             // 0x00A4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable_2;                              // 0x00A8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanAND_ReturnValue;                   // 0x00A9(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_AA[0x2];                                       // 0x00AA(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         K2Node_Select_Default;                             // 0x00AC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_Select_Default_1;                           // 0x00B0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_Select_Default_2;                           // 0x00B4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               CallFunc_MakeRotator_ReturnValue;                  // 0x00B8(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_PlacableTrap_Base_C_Trap_Placement_Calculate_Rotation) == 0x000004, "Wrong alignment on BP_PlacableTrap_Base_C_Trap_Placement_Calculate_Rotation");
static_assert(sizeof(BP_PlacableTrap_Base_C_Trap_Placement_Calculate_Rotation) == 0x0000C4, "Wrong size on BP_PlacableTrap_Base_C_Trap_Placement_Calculate_Rotation");
static_assert(offsetof(BP_PlacableTrap_Base_C_Trap_Placement_Calculate_Rotation, ImpactPoint) == 0x000000, "Member 'BP_PlacableTrap_Base_C_Trap_Placement_Calculate_Rotation::ImpactPoint' has a wrong offset!");
static_assert(offsetof(BP_PlacableTrap_Base_C_Trap_Placement_Calculate_Rotation, Normal) == 0x00000C, "Member 'BP_PlacableTrap_Base_C_Trap_Placement_Calculate_Rotation::Normal' has a wrong offset!");
static_assert(offsetof(BP_PlacableTrap_Base_C_Trap_Placement_Calculate_Rotation, ActorLocation) == 0x000018, "Member 'BP_PlacableTrap_Base_C_Trap_Placement_Calculate_Rotation::ActorLocation' has a wrong offset!");
static_assert(offsetof(BP_PlacableTrap_Base_C_Trap_Placement_Calculate_Rotation, ReturnValue) == 0x000024, "Member 'BP_PlacableTrap_Base_C_Trap_Placement_Calculate_Rotation::ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlacableTrap_Base_C_Trap_Placement_Calculate_Rotation, Temp_bool_Variable) == 0x000030, "Member 'BP_PlacableTrap_Base_C_Trap_Placement_Calculate_Rotation::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(BP_PlacableTrap_Base_C_Trap_Placement_Calculate_Rotation, CallFunc_FindLookAtRotation_ReturnValue) == 0x000034, "Member 'BP_PlacableTrap_Base_C_Trap_Placement_Calculate_Rotation::CallFunc_FindLookAtRotation_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlacableTrap_Base_C_Trap_Placement_Calculate_Rotation, CallFunc_BreakVector_X) == 0x000040, "Member 'BP_PlacableTrap_Base_C_Trap_Placement_Calculate_Rotation::CallFunc_BreakVector_X' has a wrong offset!");
static_assert(offsetof(BP_PlacableTrap_Base_C_Trap_Placement_Calculate_Rotation, CallFunc_BreakVector_Y) == 0x000044, "Member 'BP_PlacableTrap_Base_C_Trap_Placement_Calculate_Rotation::CallFunc_BreakVector_Y' has a wrong offset!");
static_assert(offsetof(BP_PlacableTrap_Base_C_Trap_Placement_Calculate_Rotation, CallFunc_BreakVector_Z) == 0x000048, "Member 'BP_PlacableTrap_Base_C_Trap_Placement_Calculate_Rotation::CallFunc_BreakVector_Z' has a wrong offset!");
static_assert(offsetof(BP_PlacableTrap_Base_C_Trap_Placement_Calculate_Rotation, CallFunc_BreakRotator_Roll) == 0x00004C, "Member 'BP_PlacableTrap_Base_C_Trap_Placement_Calculate_Rotation::CallFunc_BreakRotator_Roll' has a wrong offset!");
static_assert(offsetof(BP_PlacableTrap_Base_C_Trap_Placement_Calculate_Rotation, CallFunc_BreakRotator_Pitch) == 0x000050, "Member 'BP_PlacableTrap_Base_C_Trap_Placement_Calculate_Rotation::CallFunc_BreakRotator_Pitch' has a wrong offset!");
static_assert(offsetof(BP_PlacableTrap_Base_C_Trap_Placement_Calculate_Rotation, CallFunc_BreakRotator_Yaw) == 0x000054, "Member 'BP_PlacableTrap_Base_C_Trap_Placement_Calculate_Rotation::CallFunc_BreakRotator_Yaw' has a wrong offset!");
static_assert(offsetof(BP_PlacableTrap_Base_C_Trap_Placement_Calculate_Rotation, CallFunc_LessEqual_FloatFloat_ReturnValue) == 0x000058, "Member 'BP_PlacableTrap_Base_C_Trap_Placement_Calculate_Rotation::CallFunc_LessEqual_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlacableTrap_Base_C_Trap_Placement_Calculate_Rotation, CallFunc_Multiply_FloatFloat_ReturnValue) == 0x00005C, "Member 'BP_PlacableTrap_Base_C_Trap_Placement_Calculate_Rotation::CallFunc_Multiply_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlacableTrap_Base_C_Trap_Placement_Calculate_Rotation, Temp_float_Variable) == 0x000060, "Member 'BP_PlacableTrap_Base_C_Trap_Placement_Calculate_Rotation::Temp_float_Variable' has a wrong offset!");
static_assert(offsetof(BP_PlacableTrap_Base_C_Trap_Placement_Calculate_Rotation, Temp_float_Variable_1) == 0x000064, "Member 'BP_PlacableTrap_Base_C_Trap_Placement_Calculate_Rotation::Temp_float_Variable_1' has a wrong offset!");
static_assert(offsetof(BP_PlacableTrap_Base_C_Trap_Placement_Calculate_Rotation, Temp_float_Variable_2) == 0x000068, "Member 'BP_PlacableTrap_Base_C_Trap_Placement_Calculate_Rotation::Temp_float_Variable_2' has a wrong offset!");
static_assert(offsetof(BP_PlacableTrap_Base_C_Trap_Placement_Calculate_Rotation, CallFunc_BreakVector_X_1) == 0x00006C, "Member 'BP_PlacableTrap_Base_C_Trap_Placement_Calculate_Rotation::CallFunc_BreakVector_X_1' has a wrong offset!");
static_assert(offsetof(BP_PlacableTrap_Base_C_Trap_Placement_Calculate_Rotation, CallFunc_BreakVector_Y_1) == 0x000070, "Member 'BP_PlacableTrap_Base_C_Trap_Placement_Calculate_Rotation::CallFunc_BreakVector_Y_1' has a wrong offset!");
static_assert(offsetof(BP_PlacableTrap_Base_C_Trap_Placement_Calculate_Rotation, CallFunc_BreakVector_Z_1) == 0x000074, "Member 'BP_PlacableTrap_Base_C_Trap_Placement_Calculate_Rotation::CallFunc_BreakVector_Z_1' has a wrong offset!");
static_assert(offsetof(BP_PlacableTrap_Base_C_Trap_Placement_Calculate_Rotation, CallFunc_GreaterEqual_FloatFloat_ReturnValue) == 0x000078, "Member 'BP_PlacableTrap_Base_C_Trap_Placement_Calculate_Rotation::CallFunc_GreaterEqual_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlacableTrap_Base_C_Trap_Placement_Calculate_Rotation, CallFunc_Subtract_VectorVector_ReturnValue) == 0x00007C, "Member 'BP_PlacableTrap_Base_C_Trap_Placement_Calculate_Rotation::CallFunc_Subtract_VectorVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlacableTrap_Base_C_Trap_Placement_Calculate_Rotation, CallFunc_ProjectVectorOnToPlane_ReturnValue) == 0x000088, "Member 'BP_PlacableTrap_Base_C_Trap_Placement_Calculate_Rotation::CallFunc_ProjectVectorOnToPlane_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlacableTrap_Base_C_Trap_Placement_Calculate_Rotation, CallFunc_MakeRotFromXZ_ReturnValue) == 0x000094, "Member 'BP_PlacableTrap_Base_C_Trap_Placement_Calculate_Rotation::CallFunc_MakeRotFromXZ_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlacableTrap_Base_C_Trap_Placement_Calculate_Rotation, Temp_bool_Variable_1) == 0x0000A0, "Member 'BP_PlacableTrap_Base_C_Trap_Placement_Calculate_Rotation::Temp_bool_Variable_1' has a wrong offset!");
static_assert(offsetof(BP_PlacableTrap_Base_C_Trap_Placement_Calculate_Rotation, Temp_float_Variable_3) == 0x0000A4, "Member 'BP_PlacableTrap_Base_C_Trap_Placement_Calculate_Rotation::Temp_float_Variable_3' has a wrong offset!");
static_assert(offsetof(BP_PlacableTrap_Base_C_Trap_Placement_Calculate_Rotation, Temp_bool_Variable_2) == 0x0000A8, "Member 'BP_PlacableTrap_Base_C_Trap_Placement_Calculate_Rotation::Temp_bool_Variable_2' has a wrong offset!");
static_assert(offsetof(BP_PlacableTrap_Base_C_Trap_Placement_Calculate_Rotation, CallFunc_BooleanAND_ReturnValue) == 0x0000A9, "Member 'BP_PlacableTrap_Base_C_Trap_Placement_Calculate_Rotation::CallFunc_BooleanAND_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlacableTrap_Base_C_Trap_Placement_Calculate_Rotation, K2Node_Select_Default) == 0x0000AC, "Member 'BP_PlacableTrap_Base_C_Trap_Placement_Calculate_Rotation::K2Node_Select_Default' has a wrong offset!");
static_assert(offsetof(BP_PlacableTrap_Base_C_Trap_Placement_Calculate_Rotation, K2Node_Select_Default_1) == 0x0000B0, "Member 'BP_PlacableTrap_Base_C_Trap_Placement_Calculate_Rotation::K2Node_Select_Default_1' has a wrong offset!");
static_assert(offsetof(BP_PlacableTrap_Base_C_Trap_Placement_Calculate_Rotation, K2Node_Select_Default_2) == 0x0000B4, "Member 'BP_PlacableTrap_Base_C_Trap_Placement_Calculate_Rotation::K2Node_Select_Default_2' has a wrong offset!");
static_assert(offsetof(BP_PlacableTrap_Base_C_Trap_Placement_Calculate_Rotation, CallFunc_MakeRotator_ReturnValue) == 0x0000B8, "Member 'BP_PlacableTrap_Base_C_Trap_Placement_Calculate_Rotation::CallFunc_MakeRotator_ReturnValue' has a wrong offset!");

// Function BP_PlacableTrap_Base.BP_PlacableTrap_Base_C.Trap_Placement_SetValidLocation
// 0x0003 (0x0003 - 0x0000)
struct BP_PlacableTrap_Base_C_Trap_Placement_SetValidLocation final
{
public:
	bool                                          CanBePlaced;                                       // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          ChangedPlacementValidLocation;                     // 0x0001(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_NotEqual_BoolBool_ReturnValue;            // 0x0002(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_PlacableTrap_Base_C_Trap_Placement_SetValidLocation) == 0x000001, "Wrong alignment on BP_PlacableTrap_Base_C_Trap_Placement_SetValidLocation");
static_assert(sizeof(BP_PlacableTrap_Base_C_Trap_Placement_SetValidLocation) == 0x000003, "Wrong size on BP_PlacableTrap_Base_C_Trap_Placement_SetValidLocation");
static_assert(offsetof(BP_PlacableTrap_Base_C_Trap_Placement_SetValidLocation, CanBePlaced) == 0x000000, "Member 'BP_PlacableTrap_Base_C_Trap_Placement_SetValidLocation::CanBePlaced' has a wrong offset!");
static_assert(offsetof(BP_PlacableTrap_Base_C_Trap_Placement_SetValidLocation, ChangedPlacementValidLocation) == 0x000001, "Member 'BP_PlacableTrap_Base_C_Trap_Placement_SetValidLocation::ChangedPlacementValidLocation' has a wrong offset!");
static_assert(offsetof(BP_PlacableTrap_Base_C_Trap_Placement_SetValidLocation, CallFunc_NotEqual_BoolBool_ReturnValue) == 0x000002, "Member 'BP_PlacableTrap_Base_C_Trap_Placement_SetValidLocation::CallFunc_NotEqual_BoolBool_ReturnValue' has a wrong offset!");

// Function BP_PlacableTrap_Base.BP_PlacableTrap_Base_C.GetCustomGripAnimation
// 0x0040 (0x0040 - 0x0000)
struct BP_PlacableTrap_Base_C_GetCustomGripAnimation final
{
public:
	class UAnimSequence*                          HandAnim;                                          // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Valid;                                             // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValidSoftObjectReference_ReturnValue;   // 0x0009(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_A[0x6];                                        // 0x000A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class UObject*                                CallFunc_Conv_SoftObjectReferenceToObject_ReturnValue; // 0x0010(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UAnimSequence*                          K2Node_DynamicCast_AsAnim_Sequence;                // 0x0018(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0020(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_21[0x7];                                       // 0x0021(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UObject*                                CallFunc_LoadAsset_Blocking_ReturnValue;           // 0x0028(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UAnimSequence*                          K2Node_DynamicCast_AsAnim_Sequence_1;              // 0x0030(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess_1;                     // 0x0038(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0039(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_PlacableTrap_Base_C_GetCustomGripAnimation) == 0x000008, "Wrong alignment on BP_PlacableTrap_Base_C_GetCustomGripAnimation");
static_assert(sizeof(BP_PlacableTrap_Base_C_GetCustomGripAnimation) == 0x000040, "Wrong size on BP_PlacableTrap_Base_C_GetCustomGripAnimation");
static_assert(offsetof(BP_PlacableTrap_Base_C_GetCustomGripAnimation, HandAnim) == 0x000000, "Member 'BP_PlacableTrap_Base_C_GetCustomGripAnimation::HandAnim' has a wrong offset!");
static_assert(offsetof(BP_PlacableTrap_Base_C_GetCustomGripAnimation, Valid) == 0x000008, "Member 'BP_PlacableTrap_Base_C_GetCustomGripAnimation::Valid' has a wrong offset!");
static_assert(offsetof(BP_PlacableTrap_Base_C_GetCustomGripAnimation, CallFunc_IsValidSoftObjectReference_ReturnValue) == 0x000009, "Member 'BP_PlacableTrap_Base_C_GetCustomGripAnimation::CallFunc_IsValidSoftObjectReference_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlacableTrap_Base_C_GetCustomGripAnimation, CallFunc_Conv_SoftObjectReferenceToObject_ReturnValue) == 0x000010, "Member 'BP_PlacableTrap_Base_C_GetCustomGripAnimation::CallFunc_Conv_SoftObjectReferenceToObject_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlacableTrap_Base_C_GetCustomGripAnimation, K2Node_DynamicCast_AsAnim_Sequence) == 0x000018, "Member 'BP_PlacableTrap_Base_C_GetCustomGripAnimation::K2Node_DynamicCast_AsAnim_Sequence' has a wrong offset!");
static_assert(offsetof(BP_PlacableTrap_Base_C_GetCustomGripAnimation, K2Node_DynamicCast_bSuccess) == 0x000020, "Member 'BP_PlacableTrap_Base_C_GetCustomGripAnimation::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(BP_PlacableTrap_Base_C_GetCustomGripAnimation, CallFunc_LoadAsset_Blocking_ReturnValue) == 0x000028, "Member 'BP_PlacableTrap_Base_C_GetCustomGripAnimation::CallFunc_LoadAsset_Blocking_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlacableTrap_Base_C_GetCustomGripAnimation, K2Node_DynamicCast_AsAnim_Sequence_1) == 0x000030, "Member 'BP_PlacableTrap_Base_C_GetCustomGripAnimation::K2Node_DynamicCast_AsAnim_Sequence_1' has a wrong offset!");
static_assert(offsetof(BP_PlacableTrap_Base_C_GetCustomGripAnimation, K2Node_DynamicCast_bSuccess_1) == 0x000038, "Member 'BP_PlacableTrap_Base_C_GetCustomGripAnimation::K2Node_DynamicCast_bSuccess_1' has a wrong offset!");
static_assert(offsetof(BP_PlacableTrap_Base_C_GetCustomGripAnimation, CallFunc_IsValid_ReturnValue) == 0x000039, "Member 'BP_PlacableTrap_Base_C_GetCustomGripAnimation::CallFunc_IsValid_ReturnValue' has a wrong offset!");

// Function BP_PlacableTrap_Base.BP_PlacableTrap_Base_C.CanBeUsedImpl
// 0x0003 (0x0003 - 0x0000)
struct BP_PlacableTrap_Base_C_CanBeUsedImpl final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_CanBeUsedImpl_ReturnValue;                // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanAND_ReturnValue;                   // 0x0002(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_PlacableTrap_Base_C_CanBeUsedImpl) == 0x000001, "Wrong alignment on BP_PlacableTrap_Base_C_CanBeUsedImpl");
static_assert(sizeof(BP_PlacableTrap_Base_C_CanBeUsedImpl) == 0x000003, "Wrong size on BP_PlacableTrap_Base_C_CanBeUsedImpl");
static_assert(offsetof(BP_PlacableTrap_Base_C_CanBeUsedImpl, ReturnValue) == 0x000000, "Member 'BP_PlacableTrap_Base_C_CanBeUsedImpl::ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlacableTrap_Base_C_CanBeUsedImpl, CallFunc_CanBeUsedImpl_ReturnValue) == 0x000001, "Member 'BP_PlacableTrap_Base_C_CanBeUsedImpl::CallFunc_CanBeUsedImpl_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlacableTrap_Base_C_CanBeUsedImpl, CallFunc_BooleanAND_ReturnValue) == 0x000002, "Member 'BP_PlacableTrap_Base_C_CanBeUsedImpl::CallFunc_BooleanAND_ReturnValue' has a wrong offset!");

}

