#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: UI_HitIndications

#include "Basic.hpp"

#include "CoreUObject_structs.hpp"


namespace SDK::Params
{

// Function UI_HitIndications.UI_HitIndications_C.ExecuteUbergraph_UI_HitIndications
// 0x0008 (0x0008 - 0x0000)
struct UI_HitIndications_C_ExecuteUbergraph_UI_HitIndications final
{
public:
	int32                                         EntryPoint;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_Event_IsDesignTime;                         // 0x0004(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(UI_HitIndications_C_ExecuteUbergraph_UI_HitIndications) == 0x000004, "Wrong alignment on UI_HitIndications_C_ExecuteUbergraph_UI_HitIndications");
static_assert(sizeof(UI_HitIndications_C_ExecuteUbergraph_UI_HitIndications) == 0x000008, "Wrong size on UI_HitIndications_C_ExecuteUbergraph_UI_HitIndications");
static_assert(offsetof(UI_HitIndications_C_ExecuteUbergraph_UI_HitIndications, EntryPoint) == 0x000000, "Member 'UI_HitIndications_C_ExecuteUbergraph_UI_HitIndications::EntryPoint' has a wrong offset!");
static_assert(offsetof(UI_HitIndications_C_ExecuteUbergraph_UI_HitIndications, K2Node_Event_IsDesignTime) == 0x000004, "Member 'UI_HitIndications_C_ExecuteUbergraph_UI_HitIndications::K2Node_Event_IsDesignTime' has a wrong offset!");

// Function UI_HitIndications.UI_HitIndications_C.PreConstruct
// 0x0001 (0x0001 - 0x0000)
struct UI_HitIndications_C_PreConstruct final
{
public:
	bool                                          IsDesignTime;                                      // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(UI_HitIndications_C_PreConstruct) == 0x000001, "Wrong alignment on UI_HitIndications_C_PreConstruct");
static_assert(sizeof(UI_HitIndications_C_PreConstruct) == 0x000001, "Wrong size on UI_HitIndications_C_PreConstruct");
static_assert(offsetof(UI_HitIndications_C_PreConstruct, IsDesignTime) == 0x000000, "Member 'UI_HitIndications_C_PreConstruct::IsDesignTime' has a wrong offset!");

// Function UI_HitIndications.UI_HitIndications_C.InitializeHitIndication
// 0x0020 (0x0020 - 0x0000)
struct UI_HitIndications_C_InitializeHitIndication final
{
public:
	class UUI_HitIndication_C*                    Target;                                            // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                BulletOrigin;                                      // 0x0008(0x000C)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsPlayerHit;                                       // 0x0014(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          IsArmorHit;                                        // 0x0015(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          IsFriendlyFire;                                    // 0x0016(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_17[0x1];                                       // 0x0017(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	class ABP_Character_Script_C*                 Caster;                                            // 0x0018(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(UI_HitIndications_C_InitializeHitIndication) == 0x000008, "Wrong alignment on UI_HitIndications_C_InitializeHitIndication");
static_assert(sizeof(UI_HitIndications_C_InitializeHitIndication) == 0x000020, "Wrong size on UI_HitIndications_C_InitializeHitIndication");
static_assert(offsetof(UI_HitIndications_C_InitializeHitIndication, Target) == 0x000000, "Member 'UI_HitIndications_C_InitializeHitIndication::Target' has a wrong offset!");
static_assert(offsetof(UI_HitIndications_C_InitializeHitIndication, BulletOrigin) == 0x000008, "Member 'UI_HitIndications_C_InitializeHitIndication::BulletOrigin' has a wrong offset!");
static_assert(offsetof(UI_HitIndications_C_InitializeHitIndication, IsPlayerHit) == 0x000014, "Member 'UI_HitIndications_C_InitializeHitIndication::IsPlayerHit' has a wrong offset!");
static_assert(offsetof(UI_HitIndications_C_InitializeHitIndication, IsArmorHit) == 0x000015, "Member 'UI_HitIndications_C_InitializeHitIndication::IsArmorHit' has a wrong offset!");
static_assert(offsetof(UI_HitIndications_C_InitializeHitIndication, IsFriendlyFire) == 0x000016, "Member 'UI_HitIndications_C_InitializeHitIndication::IsFriendlyFire' has a wrong offset!");
static_assert(offsetof(UI_HitIndications_C_InitializeHitIndication, Caster) == 0x000018, "Member 'UI_HitIndications_C_InitializeHitIndication::Caster' has a wrong offset!");

// Function UI_HitIndications.UI_HitIndications_C.CreateHitLocation
// 0x0038 (0x0038 - 0x0000)
struct UI_HitIndications_C_CreateHitLocation final
{
public:
	struct FVector                                BulletOrigin;                                      // 0x0000(0x000C)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsPlayerHit;                                       // 0x000C(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          IsArmorHit;                                        // 0x000D(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          IsFriendlyFire;                                    // 0x000E(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_F[0x1];                                        // 0x000F(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	class ABP_Character_Script_C*                 Caster;                                            // 0x0010(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UUI_HitIndication_C*                    OutputPin;                                         // 0x0018(0x0008)(Parm, OutParm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UUI_HitIndication_C*                    CallFunc_Create_ReturnValue;                       // 0x0020(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UPanelSlot*                             CallFunc_AddChild_ReturnValue;                     // 0x0028(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UOverlaySlot*                           CallFunc_SlotAsOverlaySlot_ReturnValue;            // 0x0030(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(UI_HitIndications_C_CreateHitLocation) == 0x000008, "Wrong alignment on UI_HitIndications_C_CreateHitLocation");
static_assert(sizeof(UI_HitIndications_C_CreateHitLocation) == 0x000038, "Wrong size on UI_HitIndications_C_CreateHitLocation");
static_assert(offsetof(UI_HitIndications_C_CreateHitLocation, BulletOrigin) == 0x000000, "Member 'UI_HitIndications_C_CreateHitLocation::BulletOrigin' has a wrong offset!");
static_assert(offsetof(UI_HitIndications_C_CreateHitLocation, IsPlayerHit) == 0x00000C, "Member 'UI_HitIndications_C_CreateHitLocation::IsPlayerHit' has a wrong offset!");
static_assert(offsetof(UI_HitIndications_C_CreateHitLocation, IsArmorHit) == 0x00000D, "Member 'UI_HitIndications_C_CreateHitLocation::IsArmorHit' has a wrong offset!");
static_assert(offsetof(UI_HitIndications_C_CreateHitLocation, IsFriendlyFire) == 0x00000E, "Member 'UI_HitIndications_C_CreateHitLocation::IsFriendlyFire' has a wrong offset!");
static_assert(offsetof(UI_HitIndications_C_CreateHitLocation, Caster) == 0x000010, "Member 'UI_HitIndications_C_CreateHitLocation::Caster' has a wrong offset!");
static_assert(offsetof(UI_HitIndications_C_CreateHitLocation, OutputPin) == 0x000018, "Member 'UI_HitIndications_C_CreateHitLocation::OutputPin' has a wrong offset!");
static_assert(offsetof(UI_HitIndications_C_CreateHitLocation, CallFunc_Create_ReturnValue) == 0x000020, "Member 'UI_HitIndications_C_CreateHitLocation::CallFunc_Create_ReturnValue' has a wrong offset!");
static_assert(offsetof(UI_HitIndications_C_CreateHitLocation, CallFunc_AddChild_ReturnValue) == 0x000028, "Member 'UI_HitIndications_C_CreateHitLocation::CallFunc_AddChild_ReturnValue' has a wrong offset!");
static_assert(offsetof(UI_HitIndications_C_CreateHitLocation, CallFunc_SlotAsOverlaySlot_ReturnValue) == 0x000030, "Member 'UI_HitIndications_C_CreateHitLocation::CallFunc_SlotAsOverlaySlot_ReturnValue' has a wrong offset!");

}

