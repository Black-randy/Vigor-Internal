#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_GMComponent_ADM_Radiation_Timed

#include "Basic.hpp"

#include "CoreUObject_structs.hpp"
#include "Engine_structs.hpp"
#include "BP_GMComponent_ADM_Radiation_Base_classes.hpp"


namespace SDK
{

// BlueprintGeneratedClass BP_GMComponent_ADM_Radiation_Timed.BP_GMComponent_ADM_Radiation_Timed_C
// 0x0040 (0x0178 - 0x0138)
class UBP_GMComponent_ADM_Radiation_Timed_C final : public UBP_GMComponent_ADM_Radiation_Base_C
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame_BP_GMComponent_ADM_Radiation_Timed_C; // 0x0138(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	TArray<struct FVector>                        Playable_Area_Border;                              // 0x0140(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	int32                                         Radiation_Delay;                                   // 0x0150(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash)
	float                                         Radiation_Wave_Speed;                              // 0x0154(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FTimerHandle                           Radiation_Timer;                                   // 0x0158(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	struct FTimerHandle                           Radiation_Warning_Timer;                           // 0x0160(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	float                                         RadiationWarningSubtrahend;                        // 0x0168(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_16C[0x4];                                      // 0x016C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UClass*                                 RadiationWaveClass;                                // 0x0170(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

public:
	void ExecuteUbergraph_BP_GMComponent_ADM_Radiation_Timed(int32 EntryPoint);
	void Play_Radiation_Warning();
	void Hide_Passive_UI();
	void Show_Passive_UI();
	void Radiation_Active();
	void Match_Has_Started();
	void Initialize_Radiation_Wave(class ABP_AirDropLocation_C* Drop_Zone_Actor);
	void Initialize_Component();
	void Start_Radiation_Wave();
	void Game_Mode_Toggled(bool Game_Mode_Is_Running);
	void Initialize_Playable_Area_Border();
	void Initialize_Bindings(bool* Success);
	void Get_Radiation_Spawn_Location(float* Location_X, float* Location_Y);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BP_GMComponent_ADM_Radiation_Timed_C">();
	}
	static class UBP_GMComponent_ADM_Radiation_Timed_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UBP_GMComponent_ADM_Radiation_Timed_C>();
	}
};
static_assert(alignof(UBP_GMComponent_ADM_Radiation_Timed_C) == 0x000008, "Wrong alignment on UBP_GMComponent_ADM_Radiation_Timed_C");
static_assert(sizeof(UBP_GMComponent_ADM_Radiation_Timed_C) == 0x000178, "Wrong size on UBP_GMComponent_ADM_Radiation_Timed_C");
static_assert(offsetof(UBP_GMComponent_ADM_Radiation_Timed_C, UberGraphFrame_BP_GMComponent_ADM_Radiation_Timed_C) == 0x000138, "Member 'UBP_GMComponent_ADM_Radiation_Timed_C::UberGraphFrame_BP_GMComponent_ADM_Radiation_Timed_C' has a wrong offset!");
static_assert(offsetof(UBP_GMComponent_ADM_Radiation_Timed_C, Playable_Area_Border) == 0x000140, "Member 'UBP_GMComponent_ADM_Radiation_Timed_C::Playable_Area_Border' has a wrong offset!");
static_assert(offsetof(UBP_GMComponent_ADM_Radiation_Timed_C, Radiation_Delay) == 0x000150, "Member 'UBP_GMComponent_ADM_Radiation_Timed_C::Radiation_Delay' has a wrong offset!");
static_assert(offsetof(UBP_GMComponent_ADM_Radiation_Timed_C, Radiation_Wave_Speed) == 0x000154, "Member 'UBP_GMComponent_ADM_Radiation_Timed_C::Radiation_Wave_Speed' has a wrong offset!");
static_assert(offsetof(UBP_GMComponent_ADM_Radiation_Timed_C, Radiation_Timer) == 0x000158, "Member 'UBP_GMComponent_ADM_Radiation_Timed_C::Radiation_Timer' has a wrong offset!");
static_assert(offsetof(UBP_GMComponent_ADM_Radiation_Timed_C, Radiation_Warning_Timer) == 0x000160, "Member 'UBP_GMComponent_ADM_Radiation_Timed_C::Radiation_Warning_Timer' has a wrong offset!");
static_assert(offsetof(UBP_GMComponent_ADM_Radiation_Timed_C, RadiationWarningSubtrahend) == 0x000168, "Member 'UBP_GMComponent_ADM_Radiation_Timed_C::RadiationWarningSubtrahend' has a wrong offset!");
static_assert(offsetof(UBP_GMComponent_ADM_Radiation_Timed_C, RadiationWaveClass) == 0x000170, "Member 'UBP_GMComponent_ADM_Radiation_Timed_C::RadiationWaveClass' has a wrong offset!");

}

