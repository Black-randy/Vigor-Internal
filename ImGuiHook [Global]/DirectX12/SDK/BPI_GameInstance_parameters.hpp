#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BPI_GameInstance

#include "Basic.hpp"


namespace SDK::Params
{

// Function BPI_GameInstance.BPI_GameInstance_C.IsHealingOthersActive
// 0x0001 (0x0001 - 0x0000)
struct BPI_GameInstance_C_IsHealingOthersActive final
{
public:
	bool                                          IsActive;                                          // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BPI_GameInstance_C_IsHealingOthersActive) == 0x000001, "Wrong alignment on BPI_GameInstance_C_IsHealingOthersActive");
static_assert(sizeof(BPI_GameInstance_C_IsHealingOthersActive) == 0x000001, "Wrong size on BPI_GameInstance_C_IsHealingOthersActive");
static_assert(offsetof(BPI_GameInstance_C_IsHealingOthersActive, IsActive) == 0x000000, "Member 'BPI_GameInstance_C_IsHealingOthersActive::IsActive' has a wrong offset!");

// Function BPI_GameInstance.BPI_GameInstance_C.BPI_StoreAchievementProgress
// 0x000C (0x000C - 0x0000)
struct BPI_GameInstance_C_BPI_StoreAchievementProgress final
{
public:
	class FName                                   AchievementName;                                   // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         IncreaseProgressBy;                                // 0x0008(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BPI_GameInstance_C_BPI_StoreAchievementProgress) == 0x000004, "Wrong alignment on BPI_GameInstance_C_BPI_StoreAchievementProgress");
static_assert(sizeof(BPI_GameInstance_C_BPI_StoreAchievementProgress) == 0x00000C, "Wrong size on BPI_GameInstance_C_BPI_StoreAchievementProgress");
static_assert(offsetof(BPI_GameInstance_C_BPI_StoreAchievementProgress, AchievementName) == 0x000000, "Member 'BPI_GameInstance_C_BPI_StoreAchievementProgress::AchievementName' has a wrong offset!");
static_assert(offsetof(BPI_GameInstance_C_BPI_StoreAchievementProgress, IncreaseProgressBy) == 0x000008, "Member 'BPI_GameInstance_C_BPI_StoreAchievementProgress::IncreaseProgressBy' has a wrong offset!");

// Function BPI_GameInstance.BPI_GameInstance_C.BPI_GetAchievementProgressFromSave_Pure
// 0x0010 (0x0010 - 0x0000)
struct BPI_GameInstance_C_BPI_GetAchievementProgressFromSave_Pure final
{
public:
	class FName                                   AchievementName;                                   // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bValid;                                            // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         AchievementProgress;                               // 0x000C(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BPI_GameInstance_C_BPI_GetAchievementProgressFromSave_Pure) == 0x000004, "Wrong alignment on BPI_GameInstance_C_BPI_GetAchievementProgressFromSave_Pure");
static_assert(sizeof(BPI_GameInstance_C_BPI_GetAchievementProgressFromSave_Pure) == 0x000010, "Wrong size on BPI_GameInstance_C_BPI_GetAchievementProgressFromSave_Pure");
static_assert(offsetof(BPI_GameInstance_C_BPI_GetAchievementProgressFromSave_Pure, AchievementName) == 0x000000, "Member 'BPI_GameInstance_C_BPI_GetAchievementProgressFromSave_Pure::AchievementName' has a wrong offset!");
static_assert(offsetof(BPI_GameInstance_C_BPI_GetAchievementProgressFromSave_Pure, bValid) == 0x000008, "Member 'BPI_GameInstance_C_BPI_GetAchievementProgressFromSave_Pure::bValid' has a wrong offset!");
static_assert(offsetof(BPI_GameInstance_C_BPI_GetAchievementProgressFromSave_Pure, AchievementProgress) == 0x00000C, "Member 'BPI_GameInstance_C_BPI_GetAchievementProgressFromSave_Pure::AchievementProgress' has a wrong offset!");

// Function BPI_GameInstance.BPI_GameInstance_C.BPI_AddToAchievementQueue
// 0x0018 (0x0018 - 0x0000)
struct BPI_GameInstance_C_BPI_AddToAchievementQueue final
{
public:
	class APlayerController*                      PlayerController;                                  // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   AchievementName;                                   // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Progress;                                          // 0x0010(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BPI_GameInstance_C_BPI_AddToAchievementQueue) == 0x000008, "Wrong alignment on BPI_GameInstance_C_BPI_AddToAchievementQueue");
static_assert(sizeof(BPI_GameInstance_C_BPI_AddToAchievementQueue) == 0x000018, "Wrong size on BPI_GameInstance_C_BPI_AddToAchievementQueue");
static_assert(offsetof(BPI_GameInstance_C_BPI_AddToAchievementQueue, PlayerController) == 0x000000, "Member 'BPI_GameInstance_C_BPI_AddToAchievementQueue::PlayerController' has a wrong offset!");
static_assert(offsetof(BPI_GameInstance_C_BPI_AddToAchievementQueue, AchievementName) == 0x000008, "Member 'BPI_GameInstance_C_BPI_AddToAchievementQueue::AchievementName' has a wrong offset!");
static_assert(offsetof(BPI_GameInstance_C_BPI_AddToAchievementQueue, Progress) == 0x000010, "Member 'BPI_GameInstance_C_BPI_AddToAchievementQueue::Progress' has a wrong offset!");

// Function BPI_GameInstance.BPI_GameInstance_C.BPI_GetAchievementProgress
// 0x0018 (0x0018 - 0x0000)
struct BPI_GameInstance_C_BPI_GetAchievementProgress final
{
public:
	class APlayerController*                      PlayerController;                                  // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   AchievementName;                                   // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          ValidOutput;                                       // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          MightBeOutOfDate;                                  // 0x0011(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_12[0x2];                                       // 0x0012(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         AchievementProgress;                               // 0x0014(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BPI_GameInstance_C_BPI_GetAchievementProgress) == 0x000008, "Wrong alignment on BPI_GameInstance_C_BPI_GetAchievementProgress");
static_assert(sizeof(BPI_GameInstance_C_BPI_GetAchievementProgress) == 0x000018, "Wrong size on BPI_GameInstance_C_BPI_GetAchievementProgress");
static_assert(offsetof(BPI_GameInstance_C_BPI_GetAchievementProgress, PlayerController) == 0x000000, "Member 'BPI_GameInstance_C_BPI_GetAchievementProgress::PlayerController' has a wrong offset!");
static_assert(offsetof(BPI_GameInstance_C_BPI_GetAchievementProgress, AchievementName) == 0x000008, "Member 'BPI_GameInstance_C_BPI_GetAchievementProgress::AchievementName' has a wrong offset!");
static_assert(offsetof(BPI_GameInstance_C_BPI_GetAchievementProgress, ValidOutput) == 0x000010, "Member 'BPI_GameInstance_C_BPI_GetAchievementProgress::ValidOutput' has a wrong offset!");
static_assert(offsetof(BPI_GameInstance_C_BPI_GetAchievementProgress, MightBeOutOfDate) == 0x000011, "Member 'BPI_GameInstance_C_BPI_GetAchievementProgress::MightBeOutOfDate' has a wrong offset!");
static_assert(offsetof(BPI_GameInstance_C_BPI_GetAchievementProgress, AchievementProgress) == 0x000014, "Member 'BPI_GameInstance_C_BPI_GetAchievementProgress::AchievementProgress' has a wrong offset!");

// Function BPI_GameInstance.BPI_GameInstance_C.BPI_CheckForValidGameInstance
// 0x0001 (0x0001 - 0x0000)
struct BPI_GameInstance_C_BPI_CheckForValidGameInstance final
{
public:
	bool                                          bValid;                                            // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BPI_GameInstance_C_BPI_CheckForValidGameInstance) == 0x000001, "Wrong alignment on BPI_GameInstance_C_BPI_CheckForValidGameInstance");
static_assert(sizeof(BPI_GameInstance_C_BPI_CheckForValidGameInstance) == 0x000001, "Wrong size on BPI_GameInstance_C_BPI_CheckForValidGameInstance");
static_assert(offsetof(BPI_GameInstance_C_BPI_CheckForValidGameInstance, bValid) == 0x000000, "Member 'BPI_GameInstance_C_BPI_CheckForValidGameInstance::bValid' has a wrong offset!");

}

