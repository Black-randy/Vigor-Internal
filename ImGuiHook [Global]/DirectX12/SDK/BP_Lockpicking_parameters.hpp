#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_Lockpicking

#include "Basic.hpp"


namespace SDK::Params
{

// Function BP_Lockpicking.BP_Lockpicking_C.ExecuteUbergraph_BP_Lockpicking
// 0x0050 (0x0050 - 0x0000)
struct BP_Lockpicking_C_ExecuteUbergraph_BP_Lockpicking final
{
public:
	int32                                         EntryPoint;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Increase_Achievement_Progress_Result_Code; // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	const class ABP_ADM_CombinationChest_C*       K2Node_CustomEvent_Locked_Lootable_Box_2;          // 0x0008(0x0008)(ConstParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ABP_ADM_CombinationChest_C*             K2Node_CustomEvent_Locked_Lootable_Box_1;          // 0x0010(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<int32>                                 K2Node_CustomEvent_Current_code_1;                 // 0x0018(0x0010)(ConstParm, ReferenceParm)
	class ABP_ADM_CombinationChest_C*             K2Node_CustomEvent_Locked_Lootable_Box;            // 0x0028(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<int32>                                 K2Node_CustomEvent_Current_code;                   // 0x0030(0x0010)(ConstParm, ReferenceParm)
	class ABP_ADM_CombinationChest_C*             K2Node_CustomEvent_Container;                      // 0x0040(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Send_Combination_Lock_Chest_Unlocked_Event_ReturnValue; // 0x0048(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_Lockpicking_C_ExecuteUbergraph_BP_Lockpicking) == 0x000008, "Wrong alignment on BP_Lockpicking_C_ExecuteUbergraph_BP_Lockpicking");
static_assert(sizeof(BP_Lockpicking_C_ExecuteUbergraph_BP_Lockpicking) == 0x000050, "Wrong size on BP_Lockpicking_C_ExecuteUbergraph_BP_Lockpicking");
static_assert(offsetof(BP_Lockpicking_C_ExecuteUbergraph_BP_Lockpicking, EntryPoint) == 0x000000, "Member 'BP_Lockpicking_C_ExecuteUbergraph_BP_Lockpicking::EntryPoint' has a wrong offset!");
static_assert(offsetof(BP_Lockpicking_C_ExecuteUbergraph_BP_Lockpicking, CallFunc_Increase_Achievement_Progress_Result_Code) == 0x000004, "Member 'BP_Lockpicking_C_ExecuteUbergraph_BP_Lockpicking::CallFunc_Increase_Achievement_Progress_Result_Code' has a wrong offset!");
static_assert(offsetof(BP_Lockpicking_C_ExecuteUbergraph_BP_Lockpicking, K2Node_CustomEvent_Locked_Lootable_Box_2) == 0x000008, "Member 'BP_Lockpicking_C_ExecuteUbergraph_BP_Lockpicking::K2Node_CustomEvent_Locked_Lootable_Box_2' has a wrong offset!");
static_assert(offsetof(BP_Lockpicking_C_ExecuteUbergraph_BP_Lockpicking, K2Node_CustomEvent_Locked_Lootable_Box_1) == 0x000010, "Member 'BP_Lockpicking_C_ExecuteUbergraph_BP_Lockpicking::K2Node_CustomEvent_Locked_Lootable_Box_1' has a wrong offset!");
static_assert(offsetof(BP_Lockpicking_C_ExecuteUbergraph_BP_Lockpicking, K2Node_CustomEvent_Current_code_1) == 0x000018, "Member 'BP_Lockpicking_C_ExecuteUbergraph_BP_Lockpicking::K2Node_CustomEvent_Current_code_1' has a wrong offset!");
static_assert(offsetof(BP_Lockpicking_C_ExecuteUbergraph_BP_Lockpicking, K2Node_CustomEvent_Locked_Lootable_Box) == 0x000028, "Member 'BP_Lockpicking_C_ExecuteUbergraph_BP_Lockpicking::K2Node_CustomEvent_Locked_Lootable_Box' has a wrong offset!");
static_assert(offsetof(BP_Lockpicking_C_ExecuteUbergraph_BP_Lockpicking, K2Node_CustomEvent_Current_code) == 0x000030, "Member 'BP_Lockpicking_C_ExecuteUbergraph_BP_Lockpicking::K2Node_CustomEvent_Current_code' has a wrong offset!");
static_assert(offsetof(BP_Lockpicking_C_ExecuteUbergraph_BP_Lockpicking, K2Node_CustomEvent_Container) == 0x000040, "Member 'BP_Lockpicking_C_ExecuteUbergraph_BP_Lockpicking::K2Node_CustomEvent_Container' has a wrong offset!");
static_assert(offsetof(BP_Lockpicking_C_ExecuteUbergraph_BP_Lockpicking, CallFunc_Send_Combination_Lock_Chest_Unlocked_Event_ReturnValue) == 0x000048, "Member 'BP_Lockpicking_C_ExecuteUbergraph_BP_Lockpicking::CallFunc_Send_Combination_Lock_Chest_Unlocked_Event_ReturnValue' has a wrong offset!");

// Function BP_Lockpicking.BP_Lockpicking_C.Client: Player Unlocked Container
// 0x0008 (0x0008 - 0x0000)
struct BP_Lockpicking_C_Client__Player_Unlocked_Container final
{
public:
	class ABP_ADM_CombinationChest_C*             Container;                                         // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_Lockpicking_C_Client__Player_Unlocked_Container) == 0x000008, "Wrong alignment on BP_Lockpicking_C_Client__Player_Unlocked_Container");
static_assert(sizeof(BP_Lockpicking_C_Client__Player_Unlocked_Container) == 0x000008, "Wrong size on BP_Lockpicking_C_Client__Player_Unlocked_Container");
static_assert(offsetof(BP_Lockpicking_C_Client__Player_Unlocked_Container, Container) == 0x000000, "Member 'BP_Lockpicking_C_Client__Player_Unlocked_Container::Container' has a wrong offset!");

// Function BP_Lockpicking.BP_Lockpicking_C.Server: is code correct
// 0x0018 (0x0018 - 0x0000)
struct BP_Lockpicking_C_Server__is_code_correct final
{
public:
	class ABP_ADM_CombinationChest_C*             Locked_Lootable_Box;                               // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<int32>                                 Current_code;                                      // 0x0008(0x0010)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
};
static_assert(alignof(BP_Lockpicking_C_Server__is_code_correct) == 0x000008, "Wrong alignment on BP_Lockpicking_C_Server__is_code_correct");
static_assert(sizeof(BP_Lockpicking_C_Server__is_code_correct) == 0x000018, "Wrong size on BP_Lockpicking_C_Server__is_code_correct");
static_assert(offsetof(BP_Lockpicking_C_Server__is_code_correct, Locked_Lootable_Box) == 0x000000, "Member 'BP_Lockpicking_C_Server__is_code_correct::Locked_Lootable_Box' has a wrong offset!");
static_assert(offsetof(BP_Lockpicking_C_Server__is_code_correct, Current_code) == 0x000008, "Member 'BP_Lockpicking_C_Server__is_code_correct::Current_code' has a wrong offset!");

// Function BP_Lockpicking.BP_Lockpicking_C.Server: save combination code
// 0x0018 (0x0018 - 0x0000)
struct BP_Lockpicking_C_Server__save_combination_code final
{
public:
	class ABP_ADM_CombinationChest_C*             Locked_Lootable_Box;                               // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<int32>                                 Current_code;                                      // 0x0008(0x0010)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
};
static_assert(alignof(BP_Lockpicking_C_Server__save_combination_code) == 0x000008, "Wrong alignment on BP_Lockpicking_C_Server__save_combination_code");
static_assert(sizeof(BP_Lockpicking_C_Server__save_combination_code) == 0x000018, "Wrong size on BP_Lockpicking_C_Server__save_combination_code");
static_assert(offsetof(BP_Lockpicking_C_Server__save_combination_code, Locked_Lootable_Box) == 0x000000, "Member 'BP_Lockpicking_C_Server__save_combination_code::Locked_Lootable_Box' has a wrong offset!");
static_assert(offsetof(BP_Lockpicking_C_Server__save_combination_code, Current_code) == 0x000008, "Member 'BP_Lockpicking_C_Server__save_combination_code::Current_code' has a wrong offset!");

// Function BP_Lockpicking.BP_Lockpicking_C.Server: open combination lock
// 0x0008 (0x0008 - 0x0000)
struct BP_Lockpicking_C_Server__open_combination_lock final
{
public:
	const class ABP_ADM_CombinationChest_C*       Locked_Lootable_Box;                               // 0x0000(0x0008)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_Lockpicking_C_Server__open_combination_lock) == 0x000008, "Wrong alignment on BP_Lockpicking_C_Server__open_combination_lock");
static_assert(sizeof(BP_Lockpicking_C_Server__open_combination_lock) == 0x000008, "Wrong size on BP_Lockpicking_C_Server__open_combination_lock");
static_assert(offsetof(BP_Lockpicking_C_Server__open_combination_lock, Locked_Lootable_Box) == 0x000000, "Member 'BP_Lockpicking_C_Server__open_combination_lock::Locked_Lootable_Box' has a wrong offset!");

}

