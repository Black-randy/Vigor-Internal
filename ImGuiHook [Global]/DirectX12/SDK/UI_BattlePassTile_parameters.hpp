#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: UI_BattlePassTile

#include "Basic.hpp"

#include "SlateCore_structs.hpp"
#include "UMG_structs.hpp"
#include "S_BattlePassLevelRewardFull_structs.hpp"
#include "Flame_structs.hpp"
#include "CoreUObject_structs.hpp"


namespace SDK::Params
{

// Function UI_BattlePassTile.UI_BattlePassTile_C.ExecuteUbergraph_UI_BattlePassTile
// 0x00D8 (0x00D8 - 0x0000)
struct UI_BattlePassTile_C_ExecuteUbergraph_UI_BattlePassTile final
{
public:
	int32                                         EntryPoint;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Variable;                                 // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Variable_1;                               // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x000C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue_1;                 // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UWidget*                                K2Node_Event_InWidget_1;                           // 0x0018(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UWidget*                                K2Node_Event_InWidget;                             // 0x0020(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UButton*                                K2Node_CustomEvent_Button;                         // 0x0028(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UWidget*                                CallFunc_GetFocusedWidget_ReturnValue;             // 0x0030(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UUMGSequencePlayer*                     CallFunc_PlayAnimation_ReturnValue;                // 0x0038(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0040(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_41[0x7];                                       // 0x0041(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UButton*                                K2Node_ComponentBoundEvent_Sender_2;               // 0x0048(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UButton*                                K2Node_ComponentBoundEvent_Sender_1;               // 0x0050(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UWidget*                                CallFunc_GetChildAt_ReturnValue;                   // 0x0058(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UButton*                                K2Node_ComponentBoundEvent_Sender;                 // 0x0060(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UUI_ItemGridSlotBattlePass_C*           K2Node_DynamicCast_AsUI_Item_Grid_Slot_Battle_Pass; // 0x0068(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0070(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsPlatformGroupDesktop_ReturnValue;       // 0x0071(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_72[0x6];                                       // 0x0072(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class UUI_CustomCursor_C*>             CallFunc_GetAllWidgetsOfClass_FoundWidgets;        // 0x0078(0x0010)(ReferenceParm, ContainsInstancedReference)
	bool                                          CallFunc_IsPlatformGroupDesktop_ReturnValue_1;     // 0x0088(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_89[0x7];                                       // 0x0089(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UUI_CustomCursor_C*                     CallFunc_Array_Get_Item;                           // 0x0090(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x0098(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_9C[0x4];                                       // 0x009C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class UUI_CustomCursor_C*>             CallFunc_GetAllWidgetsOfClass_FoundWidgets_1;      // 0x00A0(0x0010)(ReferenceParm, ContainsInstancedReference)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x00B0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_B1[0x7];                                       // 0x00B1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UUI_CustomCursor_C*                     CallFunc_Array_Get_Item_1;                         // 0x00B8(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue_1;               // 0x00C0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector2D                              K2Node_CustomEvent_Scale;                          // 0x00C4(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue_1;                // 0x00CC(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_NotEqual_ObjectObject_ReturnValue;        // 0x00CD(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Not_PreBool_ReturnValue;                  // 0x00CE(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_NotEqual_ObjectObject_ReturnValue_1;      // 0x00CF(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanOR_ReturnValue;                    // 0x00D0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Not_PreBool_ReturnValue_1;                // 0x00D1(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanOR_ReturnValue_1;                  // 0x00D2(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(UI_BattlePassTile_C_ExecuteUbergraph_UI_BattlePassTile) == 0x000008, "Wrong alignment on UI_BattlePassTile_C_ExecuteUbergraph_UI_BattlePassTile");
static_assert(sizeof(UI_BattlePassTile_C_ExecuteUbergraph_UI_BattlePassTile) == 0x0000D8, "Wrong size on UI_BattlePassTile_C_ExecuteUbergraph_UI_BattlePassTile");
static_assert(offsetof(UI_BattlePassTile_C_ExecuteUbergraph_UI_BattlePassTile, EntryPoint) == 0x000000, "Member 'UI_BattlePassTile_C_ExecuteUbergraph_UI_BattlePassTile::EntryPoint' has a wrong offset!");
static_assert(offsetof(UI_BattlePassTile_C_ExecuteUbergraph_UI_BattlePassTile, Temp_int_Variable) == 0x000004, "Member 'UI_BattlePassTile_C_ExecuteUbergraph_UI_BattlePassTile::Temp_int_Variable' has a wrong offset!");
static_assert(offsetof(UI_BattlePassTile_C_ExecuteUbergraph_UI_BattlePassTile, Temp_int_Variable_1) == 0x000008, "Member 'UI_BattlePassTile_C_ExecuteUbergraph_UI_BattlePassTile::Temp_int_Variable_1' has a wrong offset!");
static_assert(offsetof(UI_BattlePassTile_C_ExecuteUbergraph_UI_BattlePassTile, CallFunc_Add_IntInt_ReturnValue) == 0x00000C, "Member 'UI_BattlePassTile_C_ExecuteUbergraph_UI_BattlePassTile::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(UI_BattlePassTile_C_ExecuteUbergraph_UI_BattlePassTile, CallFunc_Add_IntInt_ReturnValue_1) == 0x000010, "Member 'UI_BattlePassTile_C_ExecuteUbergraph_UI_BattlePassTile::CallFunc_Add_IntInt_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(UI_BattlePassTile_C_ExecuteUbergraph_UI_BattlePassTile, K2Node_Event_InWidget_1) == 0x000018, "Member 'UI_BattlePassTile_C_ExecuteUbergraph_UI_BattlePassTile::K2Node_Event_InWidget_1' has a wrong offset!");
static_assert(offsetof(UI_BattlePassTile_C_ExecuteUbergraph_UI_BattlePassTile, K2Node_Event_InWidget) == 0x000020, "Member 'UI_BattlePassTile_C_ExecuteUbergraph_UI_BattlePassTile::K2Node_Event_InWidget' has a wrong offset!");
static_assert(offsetof(UI_BattlePassTile_C_ExecuteUbergraph_UI_BattlePassTile, K2Node_CustomEvent_Button) == 0x000028, "Member 'UI_BattlePassTile_C_ExecuteUbergraph_UI_BattlePassTile::K2Node_CustomEvent_Button' has a wrong offset!");
static_assert(offsetof(UI_BattlePassTile_C_ExecuteUbergraph_UI_BattlePassTile, CallFunc_GetFocusedWidget_ReturnValue) == 0x000030, "Member 'UI_BattlePassTile_C_ExecuteUbergraph_UI_BattlePassTile::CallFunc_GetFocusedWidget_ReturnValue' has a wrong offset!");
static_assert(offsetof(UI_BattlePassTile_C_ExecuteUbergraph_UI_BattlePassTile, CallFunc_PlayAnimation_ReturnValue) == 0x000038, "Member 'UI_BattlePassTile_C_ExecuteUbergraph_UI_BattlePassTile::CallFunc_PlayAnimation_ReturnValue' has a wrong offset!");
static_assert(offsetof(UI_BattlePassTile_C_ExecuteUbergraph_UI_BattlePassTile, CallFunc_IsValid_ReturnValue) == 0x000040, "Member 'UI_BattlePassTile_C_ExecuteUbergraph_UI_BattlePassTile::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(UI_BattlePassTile_C_ExecuteUbergraph_UI_BattlePassTile, K2Node_ComponentBoundEvent_Sender_2) == 0x000048, "Member 'UI_BattlePassTile_C_ExecuteUbergraph_UI_BattlePassTile::K2Node_ComponentBoundEvent_Sender_2' has a wrong offset!");
static_assert(offsetof(UI_BattlePassTile_C_ExecuteUbergraph_UI_BattlePassTile, K2Node_ComponentBoundEvent_Sender_1) == 0x000050, "Member 'UI_BattlePassTile_C_ExecuteUbergraph_UI_BattlePassTile::K2Node_ComponentBoundEvent_Sender_1' has a wrong offset!");
static_assert(offsetof(UI_BattlePassTile_C_ExecuteUbergraph_UI_BattlePassTile, CallFunc_GetChildAt_ReturnValue) == 0x000058, "Member 'UI_BattlePassTile_C_ExecuteUbergraph_UI_BattlePassTile::CallFunc_GetChildAt_ReturnValue' has a wrong offset!");
static_assert(offsetof(UI_BattlePassTile_C_ExecuteUbergraph_UI_BattlePassTile, K2Node_ComponentBoundEvent_Sender) == 0x000060, "Member 'UI_BattlePassTile_C_ExecuteUbergraph_UI_BattlePassTile::K2Node_ComponentBoundEvent_Sender' has a wrong offset!");
static_assert(offsetof(UI_BattlePassTile_C_ExecuteUbergraph_UI_BattlePassTile, K2Node_DynamicCast_AsUI_Item_Grid_Slot_Battle_Pass) == 0x000068, "Member 'UI_BattlePassTile_C_ExecuteUbergraph_UI_BattlePassTile::K2Node_DynamicCast_AsUI_Item_Grid_Slot_Battle_Pass' has a wrong offset!");
static_assert(offsetof(UI_BattlePassTile_C_ExecuteUbergraph_UI_BattlePassTile, K2Node_DynamicCast_bSuccess) == 0x000070, "Member 'UI_BattlePassTile_C_ExecuteUbergraph_UI_BattlePassTile::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(UI_BattlePassTile_C_ExecuteUbergraph_UI_BattlePassTile, CallFunc_IsPlatformGroupDesktop_ReturnValue) == 0x000071, "Member 'UI_BattlePassTile_C_ExecuteUbergraph_UI_BattlePassTile::CallFunc_IsPlatformGroupDesktop_ReturnValue' has a wrong offset!");
static_assert(offsetof(UI_BattlePassTile_C_ExecuteUbergraph_UI_BattlePassTile, CallFunc_GetAllWidgetsOfClass_FoundWidgets) == 0x000078, "Member 'UI_BattlePassTile_C_ExecuteUbergraph_UI_BattlePassTile::CallFunc_GetAllWidgetsOfClass_FoundWidgets' has a wrong offset!");
static_assert(offsetof(UI_BattlePassTile_C_ExecuteUbergraph_UI_BattlePassTile, CallFunc_IsPlatformGroupDesktop_ReturnValue_1) == 0x000088, "Member 'UI_BattlePassTile_C_ExecuteUbergraph_UI_BattlePassTile::CallFunc_IsPlatformGroupDesktop_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(UI_BattlePassTile_C_ExecuteUbergraph_UI_BattlePassTile, CallFunc_Array_Get_Item) == 0x000090, "Member 'UI_BattlePassTile_C_ExecuteUbergraph_UI_BattlePassTile::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(UI_BattlePassTile_C_ExecuteUbergraph_UI_BattlePassTile, CallFunc_Array_Length_ReturnValue) == 0x000098, "Member 'UI_BattlePassTile_C_ExecuteUbergraph_UI_BattlePassTile::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(UI_BattlePassTile_C_ExecuteUbergraph_UI_BattlePassTile, CallFunc_GetAllWidgetsOfClass_FoundWidgets_1) == 0x0000A0, "Member 'UI_BattlePassTile_C_ExecuteUbergraph_UI_BattlePassTile::CallFunc_GetAllWidgetsOfClass_FoundWidgets_1' has a wrong offset!");
static_assert(offsetof(UI_BattlePassTile_C_ExecuteUbergraph_UI_BattlePassTile, CallFunc_Less_IntInt_ReturnValue) == 0x0000B0, "Member 'UI_BattlePassTile_C_ExecuteUbergraph_UI_BattlePassTile::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(UI_BattlePassTile_C_ExecuteUbergraph_UI_BattlePassTile, CallFunc_Array_Get_Item_1) == 0x0000B8, "Member 'UI_BattlePassTile_C_ExecuteUbergraph_UI_BattlePassTile::CallFunc_Array_Get_Item_1' has a wrong offset!");
static_assert(offsetof(UI_BattlePassTile_C_ExecuteUbergraph_UI_BattlePassTile, CallFunc_Array_Length_ReturnValue_1) == 0x0000C0, "Member 'UI_BattlePassTile_C_ExecuteUbergraph_UI_BattlePassTile::CallFunc_Array_Length_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(UI_BattlePassTile_C_ExecuteUbergraph_UI_BattlePassTile, K2Node_CustomEvent_Scale) == 0x0000C4, "Member 'UI_BattlePassTile_C_ExecuteUbergraph_UI_BattlePassTile::K2Node_CustomEvent_Scale' has a wrong offset!");
static_assert(offsetof(UI_BattlePassTile_C_ExecuteUbergraph_UI_BattlePassTile, CallFunc_Less_IntInt_ReturnValue_1) == 0x0000CC, "Member 'UI_BattlePassTile_C_ExecuteUbergraph_UI_BattlePassTile::CallFunc_Less_IntInt_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(UI_BattlePassTile_C_ExecuteUbergraph_UI_BattlePassTile, CallFunc_NotEqual_ObjectObject_ReturnValue) == 0x0000CD, "Member 'UI_BattlePassTile_C_ExecuteUbergraph_UI_BattlePassTile::CallFunc_NotEqual_ObjectObject_ReturnValue' has a wrong offset!");
static_assert(offsetof(UI_BattlePassTile_C_ExecuteUbergraph_UI_BattlePassTile, CallFunc_Not_PreBool_ReturnValue) == 0x0000CE, "Member 'UI_BattlePassTile_C_ExecuteUbergraph_UI_BattlePassTile::CallFunc_Not_PreBool_ReturnValue' has a wrong offset!");
static_assert(offsetof(UI_BattlePassTile_C_ExecuteUbergraph_UI_BattlePassTile, CallFunc_NotEqual_ObjectObject_ReturnValue_1) == 0x0000CF, "Member 'UI_BattlePassTile_C_ExecuteUbergraph_UI_BattlePassTile::CallFunc_NotEqual_ObjectObject_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(UI_BattlePassTile_C_ExecuteUbergraph_UI_BattlePassTile, CallFunc_BooleanOR_ReturnValue) == 0x0000D0, "Member 'UI_BattlePassTile_C_ExecuteUbergraph_UI_BattlePassTile::CallFunc_BooleanOR_ReturnValue' has a wrong offset!");
static_assert(offsetof(UI_BattlePassTile_C_ExecuteUbergraph_UI_BattlePassTile, CallFunc_Not_PreBool_ReturnValue_1) == 0x0000D1, "Member 'UI_BattlePassTile_C_ExecuteUbergraph_UI_BattlePassTile::CallFunc_Not_PreBool_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(UI_BattlePassTile_C_ExecuteUbergraph_UI_BattlePassTile, CallFunc_BooleanOR_ReturnValue_1) == 0x0000D2, "Member 'UI_BattlePassTile_C_ExecuteUbergraph_UI_BattlePassTile::CallFunc_BooleanOR_ReturnValue_1' has a wrong offset!");

// Function UI_BattlePassTile.UI_BattlePassTile_C.ScaleWidget
// 0x0008 (0x0008 - 0x0000)
struct UI_BattlePassTile_C_ScaleWidget final
{
public:
	struct FVector2D                              Scale;                                             // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(UI_BattlePassTile_C_ScaleWidget) == 0x000004, "Wrong alignment on UI_BattlePassTile_C_ScaleWidget");
static_assert(sizeof(UI_BattlePassTile_C_ScaleWidget) == 0x000008, "Wrong size on UI_BattlePassTile_C_ScaleWidget");
static_assert(offsetof(UI_BattlePassTile_C_ScaleWidget, Scale) == 0x000000, "Member 'UI_BattlePassTile_C_ScaleWidget::Scale' has a wrong offset!");

// Function UI_BattlePassTile.UI_BattlePassTile_C.BndEvt__UI_BattlePassTile_SelectButton_K2Node_ComponentBoundEvent_2_OnButtonHoverEvent__DelegateSignature
// 0x0008 (0x0008 - 0x0000)
struct UI_BattlePassTile_C_BndEvt__UI_BattlePassTile_SelectButton_K2Node_ComponentBoundEvent_2_OnButtonHoverEvent__DelegateSignature final
{
public:
	class UButton*                                Sender;                                            // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(UI_BattlePassTile_C_BndEvt__UI_BattlePassTile_SelectButton_K2Node_ComponentBoundEvent_2_OnButtonHoverEvent__DelegateSignature) == 0x000008, "Wrong alignment on UI_BattlePassTile_C_BndEvt__UI_BattlePassTile_SelectButton_K2Node_ComponentBoundEvent_2_OnButtonHoverEvent__DelegateSignature");
static_assert(sizeof(UI_BattlePassTile_C_BndEvt__UI_BattlePassTile_SelectButton_K2Node_ComponentBoundEvent_2_OnButtonHoverEvent__DelegateSignature) == 0x000008, "Wrong size on UI_BattlePassTile_C_BndEvt__UI_BattlePassTile_SelectButton_K2Node_ComponentBoundEvent_2_OnButtonHoverEvent__DelegateSignature");
static_assert(offsetof(UI_BattlePassTile_C_BndEvt__UI_BattlePassTile_SelectButton_K2Node_ComponentBoundEvent_2_OnButtonHoverEvent__DelegateSignature, Sender) == 0x000000, "Member 'UI_BattlePassTile_C_BndEvt__UI_BattlePassTile_SelectButton_K2Node_ComponentBoundEvent_2_OnButtonHoverEvent__DelegateSignature::Sender' has a wrong offset!");

// Function UI_BattlePassTile.UI_BattlePassTile_C.BndEvt__UI_BattlePassTile_SelectButton_K2Node_ComponentBoundEvent_1_OnButtonHoverEvent__DelegateSignature
// 0x0008 (0x0008 - 0x0000)
struct UI_BattlePassTile_C_BndEvt__UI_BattlePassTile_SelectButton_K2Node_ComponentBoundEvent_1_OnButtonHoverEvent__DelegateSignature final
{
public:
	class UButton*                                Sender;                                            // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(UI_BattlePassTile_C_BndEvt__UI_BattlePassTile_SelectButton_K2Node_ComponentBoundEvent_1_OnButtonHoverEvent__DelegateSignature) == 0x000008, "Wrong alignment on UI_BattlePassTile_C_BndEvt__UI_BattlePassTile_SelectButton_K2Node_ComponentBoundEvent_1_OnButtonHoverEvent__DelegateSignature");
static_assert(sizeof(UI_BattlePassTile_C_BndEvt__UI_BattlePassTile_SelectButton_K2Node_ComponentBoundEvent_1_OnButtonHoverEvent__DelegateSignature) == 0x000008, "Wrong size on UI_BattlePassTile_C_BndEvt__UI_BattlePassTile_SelectButton_K2Node_ComponentBoundEvent_1_OnButtonHoverEvent__DelegateSignature");
static_assert(offsetof(UI_BattlePassTile_C_BndEvt__UI_BattlePassTile_SelectButton_K2Node_ComponentBoundEvent_1_OnButtonHoverEvent__DelegateSignature, Sender) == 0x000000, "Member 'UI_BattlePassTile_C_BndEvt__UI_BattlePassTile_SelectButton_K2Node_ComponentBoundEvent_1_OnButtonHoverEvent__DelegateSignature::Sender' has a wrong offset!");

// Function UI_BattlePassTile.UI_BattlePassTile_C.BndEvt__UI_BattlePassTile_SelectButton_K2Node_ComponentBoundEvent_0_OnButtonClickedEvent__DelegateSignature
// 0x0008 (0x0008 - 0x0000)
struct UI_BattlePassTile_C_BndEvt__UI_BattlePassTile_SelectButton_K2Node_ComponentBoundEvent_0_OnButtonClickedEvent__DelegateSignature final
{
public:
	class UButton*                                Sender;                                            // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(UI_BattlePassTile_C_BndEvt__UI_BattlePassTile_SelectButton_K2Node_ComponentBoundEvent_0_OnButtonClickedEvent__DelegateSignature) == 0x000008, "Wrong alignment on UI_BattlePassTile_C_BndEvt__UI_BattlePassTile_SelectButton_K2Node_ComponentBoundEvent_0_OnButtonClickedEvent__DelegateSignature");
static_assert(sizeof(UI_BattlePassTile_C_BndEvt__UI_BattlePassTile_SelectButton_K2Node_ComponentBoundEvent_0_OnButtonClickedEvent__DelegateSignature) == 0x000008, "Wrong size on UI_BattlePassTile_C_BndEvt__UI_BattlePassTile_SelectButton_K2Node_ComponentBoundEvent_0_OnButtonClickedEvent__DelegateSignature");
static_assert(offsetof(UI_BattlePassTile_C_BndEvt__UI_BattlePassTile_SelectButton_K2Node_ComponentBoundEvent_0_OnButtonClickedEvent__DelegateSignature, Sender) == 0x000000, "Member 'UI_BattlePassTile_C_BndEvt__UI_BattlePassTile_SelectButton_K2Node_ComponentBoundEvent_0_OnButtonClickedEvent__DelegateSignature::Sender' has a wrong offset!");

// Function UI_BattlePassTile.UI_BattlePassTile_C.EventSlotClicked
// 0x0008 (0x0008 - 0x0000)
struct UI_BattlePassTile_C_EventSlotClicked final
{
public:
	class UButton*                                Button;                                            // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(UI_BattlePassTile_C_EventSlotClicked) == 0x000008, "Wrong alignment on UI_BattlePassTile_C_EventSlotClicked");
static_assert(sizeof(UI_BattlePassTile_C_EventSlotClicked) == 0x000008, "Wrong size on UI_BattlePassTile_C_EventSlotClicked");
static_assert(offsetof(UI_BattlePassTile_C_EventSlotClicked, Button) == 0x000000, "Member 'UI_BattlePassTile_C_EventSlotClicked::Button' has a wrong offset!");

// Function UI_BattlePassTile.UI_BattlePassTile_C.OnChildFocusLost
// 0x0008 (0x0008 - 0x0000)
struct UI_BattlePassTile_C_OnChildFocusLost final
{
public:
	class UWidget*                                InWidget;                                          // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(UI_BattlePassTile_C_OnChildFocusLost) == 0x000008, "Wrong alignment on UI_BattlePassTile_C_OnChildFocusLost");
static_assert(sizeof(UI_BattlePassTile_C_OnChildFocusLost) == 0x000008, "Wrong size on UI_BattlePassTile_C_OnChildFocusLost");
static_assert(offsetof(UI_BattlePassTile_C_OnChildFocusLost, InWidget) == 0x000000, "Member 'UI_BattlePassTile_C_OnChildFocusLost::InWidget' has a wrong offset!");

// Function UI_BattlePassTile.UI_BattlePassTile_C.OnChildFocusReceived
// 0x0008 (0x0008 - 0x0000)
struct UI_BattlePassTile_C_OnChildFocusReceived final
{
public:
	class UWidget*                                InWidget;                                          // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(UI_BattlePassTile_C_OnChildFocusReceived) == 0x000008, "Wrong alignment on UI_BattlePassTile_C_OnChildFocusReceived");
static_assert(sizeof(UI_BattlePassTile_C_OnChildFocusReceived) == 0x000008, "Wrong size on UI_BattlePassTile_C_OnChildFocusReceived");
static_assert(offsetof(UI_BattlePassTile_C_OnChildFocusReceived, InWidget) == 0x000000, "Member 'UI_BattlePassTile_C_OnChildFocusReceived::InWidget' has a wrong offset!");

// Function UI_BattlePassTile.UI_BattlePassTile_C.FillTileContent
// 0x0010 (0x0010 - 0x0000)
struct UI_BattlePassTile_C_FillTileContent final
{
public:
	class UClass*                                 ItemClass;                                         // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValidClass_ReturnValue;                 // 0x0008(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(UI_BattlePassTile_C_FillTileContent) == 0x000008, "Wrong alignment on UI_BattlePassTile_C_FillTileContent");
static_assert(sizeof(UI_BattlePassTile_C_FillTileContent) == 0x000010, "Wrong size on UI_BattlePassTile_C_FillTileContent");
static_assert(offsetof(UI_BattlePassTile_C_FillTileContent, ItemClass) == 0x000000, "Member 'UI_BattlePassTile_C_FillTileContent::ItemClass' has a wrong offset!");
static_assert(offsetof(UI_BattlePassTile_C_FillTileContent, CallFunc_IsValidClass_ReturnValue) == 0x000008, "Member 'UI_BattlePassTile_C_FillTileContent::CallFunc_IsValidClass_ReturnValue' has a wrong offset!");

// Function UI_BattlePassTile.UI_BattlePassTile_C.GetTileItemRarity
// 0x0068 (0x0068 - 0x0000)
struct UI_BattlePassTile_C_GetTileItemRarity final
{
public:
	bool                                          OutputValid;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FItemRarity                            ItemRarity;                                        // 0x0008(0x0028)(Parm, OutParm)
	class AItem*                                  CallFunc_GetClassDefaultObject_ReturnValue;        // 0x0030(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValidClass_ReturnValue;                 // 0x0038(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_39[0x7];                                       // 0x0039(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FItemRarity                            CallFunc_GetItemRarity_ReturnValue;                // 0x0040(0x0028)(ConstParm)
};
static_assert(alignof(UI_BattlePassTile_C_GetTileItemRarity) == 0x000008, "Wrong alignment on UI_BattlePassTile_C_GetTileItemRarity");
static_assert(sizeof(UI_BattlePassTile_C_GetTileItemRarity) == 0x000068, "Wrong size on UI_BattlePassTile_C_GetTileItemRarity");
static_assert(offsetof(UI_BattlePassTile_C_GetTileItemRarity, OutputValid) == 0x000000, "Member 'UI_BattlePassTile_C_GetTileItemRarity::OutputValid' has a wrong offset!");
static_assert(offsetof(UI_BattlePassTile_C_GetTileItemRarity, ItemRarity) == 0x000008, "Member 'UI_BattlePassTile_C_GetTileItemRarity::ItemRarity' has a wrong offset!");
static_assert(offsetof(UI_BattlePassTile_C_GetTileItemRarity, CallFunc_GetClassDefaultObject_ReturnValue) == 0x000030, "Member 'UI_BattlePassTile_C_GetTileItemRarity::CallFunc_GetClassDefaultObject_ReturnValue' has a wrong offset!");
static_assert(offsetof(UI_BattlePassTile_C_GetTileItemRarity, CallFunc_IsValidClass_ReturnValue) == 0x000038, "Member 'UI_BattlePassTile_C_GetTileItemRarity::CallFunc_IsValidClass_ReturnValue' has a wrong offset!");
static_assert(offsetof(UI_BattlePassTile_C_GetTileItemRarity, CallFunc_GetItemRarity_ReturnValue) == 0x000040, "Member 'UI_BattlePassTile_C_GetTileItemRarity::CallFunc_GetItemRarity_ReturnValue' has a wrong offset!");

// Function UI_BattlePassTile.UI_BattlePassTile_C.GetTileItemName
// 0x0040 (0x0040 - 0x0000)
struct UI_BattlePassTile_C_GetTileItemName final
{
public:
	class FText                                   ItemName;                                          // 0x0000(0x0018)(Parm, OutParm)
	class AItem*                                  CallFunc_GetClassDefaultObject_ReturnValue;        // 0x0018(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValidClass_ReturnValue;                 // 0x0020(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_21[0x7];                                       // 0x0021(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   CallFunc_GetItemName_ReturnValue;                  // 0x0028(0x0018)()
};
static_assert(alignof(UI_BattlePassTile_C_GetTileItemName) == 0x000008, "Wrong alignment on UI_BattlePassTile_C_GetTileItemName");
static_assert(sizeof(UI_BattlePassTile_C_GetTileItemName) == 0x000040, "Wrong size on UI_BattlePassTile_C_GetTileItemName");
static_assert(offsetof(UI_BattlePassTile_C_GetTileItemName, ItemName) == 0x000000, "Member 'UI_BattlePassTile_C_GetTileItemName::ItemName' has a wrong offset!");
static_assert(offsetof(UI_BattlePassTile_C_GetTileItemName, CallFunc_GetClassDefaultObject_ReturnValue) == 0x000018, "Member 'UI_BattlePassTile_C_GetTileItemName::CallFunc_GetClassDefaultObject_ReturnValue' has a wrong offset!");
static_assert(offsetof(UI_BattlePassTile_C_GetTileItemName, CallFunc_IsValidClass_ReturnValue) == 0x000020, "Member 'UI_BattlePassTile_C_GetTileItemName::CallFunc_IsValidClass_ReturnValue' has a wrong offset!");
static_assert(offsetof(UI_BattlePassTile_C_GetTileItemName, CallFunc_GetItemName_ReturnValue) == 0x000028, "Member 'UI_BattlePassTile_C_GetTileItemName::CallFunc_GetItemName_ReturnValue' has a wrong offset!");

// Function UI_BattlePassTile.UI_BattlePassTile_C.GetTileItemCategory
// 0x0040 (0x0040 - 0x0000)
struct UI_BattlePassTile_C_GetTileItemCategory final
{
public:
	class FText                                   ItemCategory;                                      // 0x0000(0x0018)(Parm, OutParm)
	class AItem*                                  CallFunc_GetClassDefaultObject_ReturnValue;        // 0x0018(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValidClass_ReturnValue;                 // 0x0020(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_21[0x7];                                       // 0x0021(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   CallFunc_GetCategoryName_ReturnValue;              // 0x0028(0x0018)()
};
static_assert(alignof(UI_BattlePassTile_C_GetTileItemCategory) == 0x000008, "Wrong alignment on UI_BattlePassTile_C_GetTileItemCategory");
static_assert(sizeof(UI_BattlePassTile_C_GetTileItemCategory) == 0x000040, "Wrong size on UI_BattlePassTile_C_GetTileItemCategory");
static_assert(offsetof(UI_BattlePassTile_C_GetTileItemCategory, ItemCategory) == 0x000000, "Member 'UI_BattlePassTile_C_GetTileItemCategory::ItemCategory' has a wrong offset!");
static_assert(offsetof(UI_BattlePassTile_C_GetTileItemCategory, CallFunc_GetClassDefaultObject_ReturnValue) == 0x000018, "Member 'UI_BattlePassTile_C_GetTileItemCategory::CallFunc_GetClassDefaultObject_ReturnValue' has a wrong offset!");
static_assert(offsetof(UI_BattlePassTile_C_GetTileItemCategory, CallFunc_IsValidClass_ReturnValue) == 0x000020, "Member 'UI_BattlePassTile_C_GetTileItemCategory::CallFunc_IsValidClass_ReturnValue' has a wrong offset!");
static_assert(offsetof(UI_BattlePassTile_C_GetTileItemCategory, CallFunc_GetCategoryName_ReturnValue) == 0x000028, "Member 'UI_BattlePassTile_C_GetTileItemCategory::CallFunc_GetCategoryName_ReturnValue' has a wrong offset!");

// Function UI_BattlePassTile.UI_BattlePassTile_C.Add Slots to Tile
// 0x00B8 (0x00B8 - 0x0000)
struct UI_BattlePassTile_C_Add_Slots_to_Tile final
{
public:
	TArray<struct FS_BattlePassLevelRewardFull>   RewardsArray;                                      // 0x0000(0x0010)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
	class UHorizontalBoxSlot*                     AddedHorizontalBoxSlot;                            // 0x0010(0x0008)(Edit, BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsWeapon;                                          // 0x0018(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UUI_ItemGridSlotBattlePass_C*           AddedItemSlot;                                     // 0x0020(0x0008)(Edit, BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class APlayerController*                      CallFunc_GetOwningPlayer_ReturnValue;              // 0x0028(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x0030(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_34[0x4];                                       // 0x0034(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UUI_ItemGridSlotBattlePass_C*           CallFunc_Create_ReturnValue;                       // 0x0038(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue_1;               // 0x0040(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x0044(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_SwitchInteger_CmpSuccess;                   // 0x0048(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x0049(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_4A[0x2];                                       // 0x004A(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x004C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Array_Index_Variable;                     // 0x0050(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_54[0x4];                                       // 0x0054(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FS_BattlePassLevelRewardFull           CallFunc_Array_Get_Item;                           // 0x0058(0x0020)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValidClass_ReturnValue;                 // 0x0078(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_79[0x3];                                       // 0x0079(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	TDelegate<void(class UButton* Sender)>        K2Node_CreateDelegate_OutputDelegate;              // 0x007C(0x0010)(ZeroConstructor, NoDestructor)
	uint8                                         Pad_8C[0x4];                                       // 0x008C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UWidget*                                CallFunc_GetChildAt_ReturnValue;                   // 0x0090(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UUI_ItemGridSlotBattlePass_C*           K2Node_DynamicCast_AsUI_Item_Grid_Slot_Battle_Pass; // 0x0098(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x00A0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_A1[0x7];                                       // 0x00A1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UHorizontalBoxSlot*                     CallFunc_AddChildToHorizontalBox_ReturnValue;      // 0x00A8(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TSubclassOf<class AItem>                      CallFunc_GetItemType_ReturnValue;                  // 0x00B0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash)
};
static_assert(alignof(UI_BattlePassTile_C_Add_Slots_to_Tile) == 0x000008, "Wrong alignment on UI_BattlePassTile_C_Add_Slots_to_Tile");
static_assert(sizeof(UI_BattlePassTile_C_Add_Slots_to_Tile) == 0x0000B8, "Wrong size on UI_BattlePassTile_C_Add_Slots_to_Tile");
static_assert(offsetof(UI_BattlePassTile_C_Add_Slots_to_Tile, RewardsArray) == 0x000000, "Member 'UI_BattlePassTile_C_Add_Slots_to_Tile::RewardsArray' has a wrong offset!");
static_assert(offsetof(UI_BattlePassTile_C_Add_Slots_to_Tile, AddedHorizontalBoxSlot) == 0x000010, "Member 'UI_BattlePassTile_C_Add_Slots_to_Tile::AddedHorizontalBoxSlot' has a wrong offset!");
static_assert(offsetof(UI_BattlePassTile_C_Add_Slots_to_Tile, IsWeapon) == 0x000018, "Member 'UI_BattlePassTile_C_Add_Slots_to_Tile::IsWeapon' has a wrong offset!");
static_assert(offsetof(UI_BattlePassTile_C_Add_Slots_to_Tile, AddedItemSlot) == 0x000020, "Member 'UI_BattlePassTile_C_Add_Slots_to_Tile::AddedItemSlot' has a wrong offset!");
static_assert(offsetof(UI_BattlePassTile_C_Add_Slots_to_Tile, CallFunc_GetOwningPlayer_ReturnValue) == 0x000028, "Member 'UI_BattlePassTile_C_Add_Slots_to_Tile::CallFunc_GetOwningPlayer_ReturnValue' has a wrong offset!");
static_assert(offsetof(UI_BattlePassTile_C_Add_Slots_to_Tile, CallFunc_Array_Length_ReturnValue) == 0x000030, "Member 'UI_BattlePassTile_C_Add_Slots_to_Tile::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(UI_BattlePassTile_C_Add_Slots_to_Tile, CallFunc_Create_ReturnValue) == 0x000038, "Member 'UI_BattlePassTile_C_Add_Slots_to_Tile::CallFunc_Create_ReturnValue' has a wrong offset!");
static_assert(offsetof(UI_BattlePassTile_C_Add_Slots_to_Tile, CallFunc_Array_Length_ReturnValue_1) == 0x000040, "Member 'UI_BattlePassTile_C_Add_Slots_to_Tile::CallFunc_Array_Length_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(UI_BattlePassTile_C_Add_Slots_to_Tile, Temp_int_Loop_Counter_Variable) == 0x000044, "Member 'UI_BattlePassTile_C_Add_Slots_to_Tile::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(UI_BattlePassTile_C_Add_Slots_to_Tile, K2Node_SwitchInteger_CmpSuccess) == 0x000048, "Member 'UI_BattlePassTile_C_Add_Slots_to_Tile::K2Node_SwitchInteger_CmpSuccess' has a wrong offset!");
static_assert(offsetof(UI_BattlePassTile_C_Add_Slots_to_Tile, CallFunc_Less_IntInt_ReturnValue) == 0x000049, "Member 'UI_BattlePassTile_C_Add_Slots_to_Tile::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(UI_BattlePassTile_C_Add_Slots_to_Tile, CallFunc_Add_IntInt_ReturnValue) == 0x00004C, "Member 'UI_BattlePassTile_C_Add_Slots_to_Tile::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(UI_BattlePassTile_C_Add_Slots_to_Tile, Temp_int_Array_Index_Variable) == 0x000050, "Member 'UI_BattlePassTile_C_Add_Slots_to_Tile::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(UI_BattlePassTile_C_Add_Slots_to_Tile, CallFunc_Array_Get_Item) == 0x000058, "Member 'UI_BattlePassTile_C_Add_Slots_to_Tile::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(UI_BattlePassTile_C_Add_Slots_to_Tile, CallFunc_IsValidClass_ReturnValue) == 0x000078, "Member 'UI_BattlePassTile_C_Add_Slots_to_Tile::CallFunc_IsValidClass_ReturnValue' has a wrong offset!");
static_assert(offsetof(UI_BattlePassTile_C_Add_Slots_to_Tile, K2Node_CreateDelegate_OutputDelegate) == 0x00007C, "Member 'UI_BattlePassTile_C_Add_Slots_to_Tile::K2Node_CreateDelegate_OutputDelegate' has a wrong offset!");
static_assert(offsetof(UI_BattlePassTile_C_Add_Slots_to_Tile, CallFunc_GetChildAt_ReturnValue) == 0x000090, "Member 'UI_BattlePassTile_C_Add_Slots_to_Tile::CallFunc_GetChildAt_ReturnValue' has a wrong offset!");
static_assert(offsetof(UI_BattlePassTile_C_Add_Slots_to_Tile, K2Node_DynamicCast_AsUI_Item_Grid_Slot_Battle_Pass) == 0x000098, "Member 'UI_BattlePassTile_C_Add_Slots_to_Tile::K2Node_DynamicCast_AsUI_Item_Grid_Slot_Battle_Pass' has a wrong offset!");
static_assert(offsetof(UI_BattlePassTile_C_Add_Slots_to_Tile, K2Node_DynamicCast_bSuccess) == 0x0000A0, "Member 'UI_BattlePassTile_C_Add_Slots_to_Tile::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(UI_BattlePassTile_C_Add_Slots_to_Tile, CallFunc_AddChildToHorizontalBox_ReturnValue) == 0x0000A8, "Member 'UI_BattlePassTile_C_Add_Slots_to_Tile::CallFunc_AddChildToHorizontalBox_ReturnValue' has a wrong offset!");
static_assert(offsetof(UI_BattlePassTile_C_Add_Slots_to_Tile, CallFunc_GetItemType_ReturnValue) == 0x0000B0, "Member 'UI_BattlePassTile_C_Add_Slots_to_Tile::CallFunc_GetItemType_ReturnValue' has a wrong offset!");

// Function UI_BattlePassTile.UI_BattlePassTile_C.SetTileFocus
// 0x0020 (0x0020 - 0x0000)
struct UI_BattlePassTile_C_SetTileFocus final
{
public:
	bool                                          FocusWasSet;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UWidget*                                CallFunc_GetChildAt_ReturnValue;                   // 0x0008(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class APlayerController*                      CallFunc_GetOwningPlayer_ReturnValue;              // 0x0018(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(UI_BattlePassTile_C_SetTileFocus) == 0x000008, "Wrong alignment on UI_BattlePassTile_C_SetTileFocus");
static_assert(sizeof(UI_BattlePassTile_C_SetTileFocus) == 0x000020, "Wrong size on UI_BattlePassTile_C_SetTileFocus");
static_assert(offsetof(UI_BattlePassTile_C_SetTileFocus, FocusWasSet) == 0x000000, "Member 'UI_BattlePassTile_C_SetTileFocus::FocusWasSet' has a wrong offset!");
static_assert(offsetof(UI_BattlePassTile_C_SetTileFocus, CallFunc_GetChildAt_ReturnValue) == 0x000008, "Member 'UI_BattlePassTile_C_SetTileFocus::CallFunc_GetChildAt_ReturnValue' has a wrong offset!");
static_assert(offsetof(UI_BattlePassTile_C_SetTileFocus, CallFunc_IsValid_ReturnValue) == 0x000010, "Member 'UI_BattlePassTile_C_SetTileFocus::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(UI_BattlePassTile_C_SetTileFocus, CallFunc_GetOwningPlayer_ReturnValue) == 0x000018, "Member 'UI_BattlePassTile_C_SetTileFocus::CallFunc_GetOwningPlayer_ReturnValue' has a wrong offset!");

// Function UI_BattlePassTile.UI_BattlePassTile_C.SetTileLocked
// 0x0001 (0x0001 - 0x0000)
struct UI_BattlePassTile_C_SetTileLocked final
{
public:
	bool                                          IsLockedIn;                                        // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(UI_BattlePassTile_C_SetTileLocked) == 0x000001, "Wrong alignment on UI_BattlePassTile_C_SetTileLocked");
static_assert(sizeof(UI_BattlePassTile_C_SetTileLocked) == 0x000001, "Wrong size on UI_BattlePassTile_C_SetTileLocked");
static_assert(offsetof(UI_BattlePassTile_C_SetTileLocked, IsLockedIn) == 0x000000, "Member 'UI_BattlePassTile_C_SetTileLocked::IsLockedIn' has a wrong offset!");

// Function UI_BattlePassTile.UI_BattlePassTile_C.SetTileClaimed
// 0x0005 (0x0005 - 0x0000)
struct UI_BattlePassTile_C_SetTileClaimed final
{
public:
	bool                                          IsClaimedIn;                                       // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable;                                // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	ESlateVisibility                              Temp_byte_Variable;                                // 0x0002(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              Temp_byte_Variable_1;                              // 0x0003(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              K2Node_Select_Default;                             // 0x0004(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(UI_BattlePassTile_C_SetTileClaimed) == 0x000001, "Wrong alignment on UI_BattlePassTile_C_SetTileClaimed");
static_assert(sizeof(UI_BattlePassTile_C_SetTileClaimed) == 0x000005, "Wrong size on UI_BattlePassTile_C_SetTileClaimed");
static_assert(offsetof(UI_BattlePassTile_C_SetTileClaimed, IsClaimedIn) == 0x000000, "Member 'UI_BattlePassTile_C_SetTileClaimed::IsClaimedIn' has a wrong offset!");
static_assert(offsetof(UI_BattlePassTile_C_SetTileClaimed, Temp_bool_Variable) == 0x000001, "Member 'UI_BattlePassTile_C_SetTileClaimed::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(UI_BattlePassTile_C_SetTileClaimed, Temp_byte_Variable) == 0x000002, "Member 'UI_BattlePassTile_C_SetTileClaimed::Temp_byte_Variable' has a wrong offset!");
static_assert(offsetof(UI_BattlePassTile_C_SetTileClaimed, Temp_byte_Variable_1) == 0x000003, "Member 'UI_BattlePassTile_C_SetTileClaimed::Temp_byte_Variable_1' has a wrong offset!");
static_assert(offsetof(UI_BattlePassTile_C_SetTileClaimed, K2Node_Select_Default) == 0x000004, "Member 'UI_BattlePassTile_C_SetTileClaimed::K2Node_Select_Default' has a wrong offset!");

// Function UI_BattlePassTile.UI_BattlePassTile_C.SetTileRequiredLevel
// 0x0004 (0x0004 - 0x0000)
struct UI_BattlePassTile_C_SetTileRequiredLevel final
{
public:
	int32                                         TileRequiredLevel_0;                               // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(UI_BattlePassTile_C_SetTileRequiredLevel) == 0x000004, "Wrong alignment on UI_BattlePassTile_C_SetTileRequiredLevel");
static_assert(sizeof(UI_BattlePassTile_C_SetTileRequiredLevel) == 0x000004, "Wrong size on UI_BattlePassTile_C_SetTileRequiredLevel");
static_assert(offsetof(UI_BattlePassTile_C_SetTileRequiredLevel, TileRequiredLevel_0) == 0x000000, "Member 'UI_BattlePassTile_C_SetTileRequiredLevel::TileRequiredLevel_0' has a wrong offset!");

// Function UI_BattlePassTile.UI_BattlePassTile_C.SetTileRequiredLevelAchieved
// 0x0080 (0x0080 - 0x0000)
struct UI_BattlePassTile_C_SetTileRequiredLevelAchieved final
{
public:
	bool                                          IsLevelAchievedIn;                                 // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable;                                // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_2[0x6];                                        // 0x0002(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSlateColor                            K2Node_MakeStruct_SlateColor;                      // 0x0008(0x0028)()
	struct FSlateColor                            K2Node_MakeStruct_SlateColor_1;                    // 0x0030(0x0028)()
	struct FSlateColor                            K2Node_Select_Default;                             // 0x0058(0x0028)()
};
static_assert(alignof(UI_BattlePassTile_C_SetTileRequiredLevelAchieved) == 0x000008, "Wrong alignment on UI_BattlePassTile_C_SetTileRequiredLevelAchieved");
static_assert(sizeof(UI_BattlePassTile_C_SetTileRequiredLevelAchieved) == 0x000080, "Wrong size on UI_BattlePassTile_C_SetTileRequiredLevelAchieved");
static_assert(offsetof(UI_BattlePassTile_C_SetTileRequiredLevelAchieved, IsLevelAchievedIn) == 0x000000, "Member 'UI_BattlePassTile_C_SetTileRequiredLevelAchieved::IsLevelAchievedIn' has a wrong offset!");
static_assert(offsetof(UI_BattlePassTile_C_SetTileRequiredLevelAchieved, Temp_bool_Variable) == 0x000001, "Member 'UI_BattlePassTile_C_SetTileRequiredLevelAchieved::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(UI_BattlePassTile_C_SetTileRequiredLevelAchieved, K2Node_MakeStruct_SlateColor) == 0x000008, "Member 'UI_BattlePassTile_C_SetTileRequiredLevelAchieved::K2Node_MakeStruct_SlateColor' has a wrong offset!");
static_assert(offsetof(UI_BattlePassTile_C_SetTileRequiredLevelAchieved, K2Node_MakeStruct_SlateColor_1) == 0x000030, "Member 'UI_BattlePassTile_C_SetTileRequiredLevelAchieved::K2Node_MakeStruct_SlateColor_1' has a wrong offset!");
static_assert(offsetof(UI_BattlePassTile_C_SetTileRequiredLevelAchieved, K2Node_Select_Default) == 0x000058, "Member 'UI_BattlePassTile_C_SetTileRequiredLevelAchieved::K2Node_Select_Default' has a wrong offset!");

// Function UI_BattlePassTile.UI_BattlePassTile_C.GetTileLocked
// 0x0001 (0x0001 - 0x0000)
struct UI_BattlePassTile_C_GetTileLocked final
{
public:
	bool                                          IsTileLocked_0;                                    // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(UI_BattlePassTile_C_GetTileLocked) == 0x000001, "Wrong alignment on UI_BattlePassTile_C_GetTileLocked");
static_assert(sizeof(UI_BattlePassTile_C_GetTileLocked) == 0x000001, "Wrong size on UI_BattlePassTile_C_GetTileLocked");
static_assert(offsetof(UI_BattlePassTile_C_GetTileLocked, IsTileLocked_0) == 0x000000, "Member 'UI_BattlePassTile_C_GetTileLocked::IsTileLocked_0' has a wrong offset!");

// Function UI_BattlePassTile.UI_BattlePassTile_C.GetTileClaimed
// 0x0001 (0x0001 - 0x0000)
struct UI_BattlePassTile_C_GetTileClaimed final
{
public:
	bool                                          IsTileClaimed_0;                                   // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(UI_BattlePassTile_C_GetTileClaimed) == 0x000001, "Wrong alignment on UI_BattlePassTile_C_GetTileClaimed");
static_assert(sizeof(UI_BattlePassTile_C_GetTileClaimed) == 0x000001, "Wrong size on UI_BattlePassTile_C_GetTileClaimed");
static_assert(offsetof(UI_BattlePassTile_C_GetTileClaimed, IsTileClaimed_0) == 0x000000, "Member 'UI_BattlePassTile_C_GetTileClaimed::IsTileClaimed_0' has a wrong offset!");

// Function UI_BattlePassTile.UI_BattlePassTile_C.GetTileRequiredLevel
// 0x0004 (0x0004 - 0x0000)
struct UI_BattlePassTile_C_GetTileRequiredLevel final
{
public:
	int32                                         TileRequiredLevel_0;                               // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(UI_BattlePassTile_C_GetTileRequiredLevel) == 0x000004, "Wrong alignment on UI_BattlePassTile_C_GetTileRequiredLevel");
static_assert(sizeof(UI_BattlePassTile_C_GetTileRequiredLevel) == 0x000004, "Wrong size on UI_BattlePassTile_C_GetTileRequiredLevel");
static_assert(offsetof(UI_BattlePassTile_C_GetTileRequiredLevel, TileRequiredLevel_0) == 0x000000, "Member 'UI_BattlePassTile_C_GetTileRequiredLevel::TileRequiredLevel_0' has a wrong offset!");

// Function UI_BattlePassTile.UI_BattlePassTile_C.GetTileEmpty
// 0x0001 (0x0001 - 0x0000)
struct UI_BattlePassTile_C_GetTileEmpty final
{
public:
	bool                                          IsTileEmpty_0;                                     // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(UI_BattlePassTile_C_GetTileEmpty) == 0x000001, "Wrong alignment on UI_BattlePassTile_C_GetTileEmpty");
static_assert(sizeof(UI_BattlePassTile_C_GetTileEmpty) == 0x000001, "Wrong size on UI_BattlePassTile_C_GetTileEmpty");
static_assert(offsetof(UI_BattlePassTile_C_GetTileEmpty, IsTileEmpty_0) == 0x000000, "Member 'UI_BattlePassTile_C_GetTileEmpty::IsTileEmpty_0' has a wrong offset!");

}

