#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: WeatherManager

#include "Basic.hpp"


namespace SDK
{

// Enum WeatherManager.EWeatherType
// NumValues: 0x0003
enum class EWeatherType : uint8
{
	Rain                                     = 0,
	Snow                                     = 1,
	EWeatherType_MAX                         = 2,
};

// ScriptStruct WeatherManager.WeatherForecastSetup
// 0x0038 (0x0038 - 0x0000)
struct FWeatherForecastSetup final
{
public:
	float                                         MinAmount;                                         // 0x0000(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MaxAmount;                                         // 0x0004(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MinChangeTime;                                     // 0x0008(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MaxChangetTime;                                    // 0x000C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UCurveFloat*                            ForecastCurve;                                     // 0x0010(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bLoopForecastCurve;                                // 0x0018(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x1F];                                      // 0x0019(0x001F)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FWeatherForecastSetup) == 0x000008, "Wrong alignment on FWeatherForecastSetup");
static_assert(sizeof(FWeatherForecastSetup) == 0x000038, "Wrong size on FWeatherForecastSetup");
static_assert(offsetof(FWeatherForecastSetup, MinAmount) == 0x000000, "Member 'FWeatherForecastSetup::MinAmount' has a wrong offset!");
static_assert(offsetof(FWeatherForecastSetup, MaxAmount) == 0x000004, "Member 'FWeatherForecastSetup::MaxAmount' has a wrong offset!");
static_assert(offsetof(FWeatherForecastSetup, MinChangeTime) == 0x000008, "Member 'FWeatherForecastSetup::MinChangeTime' has a wrong offset!");
static_assert(offsetof(FWeatherForecastSetup, MaxChangetTime) == 0x00000C, "Member 'FWeatherForecastSetup::MaxChangetTime' has a wrong offset!");
static_assert(offsetof(FWeatherForecastSetup, ForecastCurve) == 0x000010, "Member 'FWeatherForecastSetup::ForecastCurve' has a wrong offset!");
static_assert(offsetof(FWeatherForecastSetup, bLoopForecastCurve) == 0x000018, "Member 'FWeatherForecastSetup::bLoopForecastCurve' has a wrong offset!");

}

