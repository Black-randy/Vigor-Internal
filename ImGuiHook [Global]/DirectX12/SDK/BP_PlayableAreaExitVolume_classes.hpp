#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_PlayableAreaExitVolume

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "Engine_classes.hpp"


namespace SDK
{

// BlueprintGeneratedClass BP_PlayableAreaExitVolume.BP_PlayableAreaExitVolume_C
// 0x0040 (0x0260 - 0x0220)
class ABP_PlayableAreaExitVolume_C : public AActor
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x0220(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class UBP_Challenge_GrenadeHitComponent_C*    BP_Challenge_GrenadeHitComponent;                  // 0x0228(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UBP_TellComponent_Exit_C*               BP_TellComponent_Exit;                             // 0x0230(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UStaticMeshComponent*                   TellVolume;                                        // 0x0238(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UStaticMeshComponent*                   OverlapVolumeEncounterHint;                        // 0x0240(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UBP_MapMarkerComponent_C*               MapMarkerComponent;                                // 0x0248(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UBoxComponent*                          OverlapVolume;                                     // 0x0250(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USceneComponent*                        DefaultSceneRoot;                                  // 0x0258(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)

public:
	void ExecuteUbergraph_BP_PlayableAreaExitVolume(int32 EntryPoint);
	void ReceiveBeginPlay();
	void BndEvt__OverlapVolume_K2Node_ComponentBoundEvent_2_ComponentEndOverlapSignature__DelegateSignature(class UPrimitiveComponent* OverlappedComponent, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, int32 OtherBodyIndex);
	void BndEvt__OverlapVolume_K2Node_ComponentBoundEvent_1_ComponentBeginOverlapSignature__DelegateSignature(class UPrimitiveComponent* OverlappedComponent, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, int32 OtherBodyIndex, bool bFromSweep, const struct FHitResult& SweepResult);
	void BndEvt__Cylinder_K2Node_ComponentBoundEvent_0_ComponentBeginOverlapSignature__DelegateSignature(class UPrimitiveComponent* OverlappedComponent, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, int32 OtherBodyIndex, bool bFromSweep, const struct FHitResult& SweepResult);
	void UserConstructionScript();
	void Character_Stepped_Into_Exit(class ABP_Character_Script_C* Character);
	void Character_Stepped_Out_Of_Exit(class ABP_Character_Script_C* Character);
	void Call_First_Frame_Overlap();

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BP_PlayableAreaExitVolume_C">();
	}
	static class ABP_PlayableAreaExitVolume_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<ABP_PlayableAreaExitVolume_C>();
	}
};
static_assert(alignof(ABP_PlayableAreaExitVolume_C) == 0x000008, "Wrong alignment on ABP_PlayableAreaExitVolume_C");
static_assert(sizeof(ABP_PlayableAreaExitVolume_C) == 0x000260, "Wrong size on ABP_PlayableAreaExitVolume_C");
static_assert(offsetof(ABP_PlayableAreaExitVolume_C, UberGraphFrame) == 0x000220, "Member 'ABP_PlayableAreaExitVolume_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(ABP_PlayableAreaExitVolume_C, BP_Challenge_GrenadeHitComponent) == 0x000228, "Member 'ABP_PlayableAreaExitVolume_C::BP_Challenge_GrenadeHitComponent' has a wrong offset!");
static_assert(offsetof(ABP_PlayableAreaExitVolume_C, BP_TellComponent_Exit) == 0x000230, "Member 'ABP_PlayableAreaExitVolume_C::BP_TellComponent_Exit' has a wrong offset!");
static_assert(offsetof(ABP_PlayableAreaExitVolume_C, TellVolume) == 0x000238, "Member 'ABP_PlayableAreaExitVolume_C::TellVolume' has a wrong offset!");
static_assert(offsetof(ABP_PlayableAreaExitVolume_C, OverlapVolumeEncounterHint) == 0x000240, "Member 'ABP_PlayableAreaExitVolume_C::OverlapVolumeEncounterHint' has a wrong offset!");
static_assert(offsetof(ABP_PlayableAreaExitVolume_C, MapMarkerComponent) == 0x000248, "Member 'ABP_PlayableAreaExitVolume_C::MapMarkerComponent' has a wrong offset!");
static_assert(offsetof(ABP_PlayableAreaExitVolume_C, OverlapVolume) == 0x000250, "Member 'ABP_PlayableAreaExitVolume_C::OverlapVolume' has a wrong offset!");
static_assert(offsetof(ABP_PlayableAreaExitVolume_C, DefaultSceneRoot) == 0x000258, "Member 'ABP_PlayableAreaExitVolume_C::DefaultSceneRoot' has a wrong offset!");

}

