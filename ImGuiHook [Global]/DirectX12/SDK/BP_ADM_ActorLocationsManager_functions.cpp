#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_ADM_ActorLocationsManager

#include "Basic.hpp"

#include "BP_ADM_ActorLocationsManager_classes.hpp"
#include "BP_ADM_ActorLocationsManager_parameters.hpp"


namespace SDK
{

// Function BP_ADM_ActorLocationsManager.BP_ADM_ActorLocationsManager_C.Get Locations
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// class UClass*                           Location_Type                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    Only_Free_Locations                                    (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// TArray<class ABP_ADM_ActorLocation_Base_C*>Locations                                              (Parm, OutParm)

void UBP_ADM_ActorLocationsManager_C::Get_Locations(class UClass* Location_Type, bool Only_Free_Locations, TArray<class ABP_ADM_ActorLocation_Base_C*>* Locations)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_ADM_ActorLocationsManager_C", "Get Locations");

	Params::BP_ADM_ActorLocationsManager_C_Get_Locations Parms{};

	Parms.Location_Type = Location_Type;
	Parms.Only_Free_Locations = Only_Free_Locations;

	UObject::ProcessEvent(Func, &Parms);

	if (Locations != nullptr)
		*Locations = std::move(Parms.Locations);
}


// Function BP_ADM_ActorLocationsManager.BP_ADM_ActorLocationsManager_C.Get Location Most Distant from Location Types
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// class UClass*                           Location_Type                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    Only_Free_Location                                     (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// TArray<class UClass*>                   Location_Types                                         (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
// bool                                    Only_Used_Locations                                    (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// class ABP_ADM_ActorLocation_Base_C*     Location                                               (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_ADM_ActorLocationsManager_C::Get_Location_Most_Distant_from_Location_Types(class UClass* Location_Type, bool Only_Free_Location, TArray<class UClass*>& Location_Types, bool Only_Used_Locations, class ABP_ADM_ActorLocation_Base_C** Location)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_ADM_ActorLocationsManager_C", "Get Location Most Distant from Location Types");

	Params::BP_ADM_ActorLocationsManager_C_Get_Location_Most_Distant_from_Location_Types Parms{};

	Parms.Location_Type = Location_Type;
	Parms.Only_Free_Location = Only_Free_Location;
	Parms.Location_Types = std::move(Location_Types);
	Parms.Only_Used_Locations = Only_Used_Locations;

	UObject::ProcessEvent(Func, &Parms);

	Location_Types = std::move(Parms.Location_Types);

	if (Location != nullptr)
		*Location = Parms.Location;
}


// Function BP_ADM_ActorLocationsManager.BP_ADM_ActorLocationsManager_C.Get Locations Some Distance from Nearest Location Types
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// class UClass*                           Location_Type                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    Only_Free_Locations                                    (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// TArray<class UClass*>                   Location_Types                                         (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
// bool                                    Only_Used_Locations                                    (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// float                                   Minimum_Distance                                       (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   Maximum_Distance                                       (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// TArray<class ABP_ADM_ActorLocation_Base_C*>Locations                                              (Parm, OutParm)

void UBP_ADM_ActorLocationsManager_C::Get_Locations_Some_Distance_from_Nearest_Location_Types(class UClass* Location_Type, bool Only_Free_Locations, TArray<class UClass*>& Location_Types, bool Only_Used_Locations, float Minimum_Distance, float Maximum_Distance, TArray<class ABP_ADM_ActorLocation_Base_C*>* Locations)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_ADM_ActorLocationsManager_C", "Get Locations Some Distance from Nearest Location Types");

	Params::BP_ADM_ActorLocationsManager_C_Get_Locations_Some_Distance_from_Nearest_Location_Types Parms{};

	Parms.Location_Type = Location_Type;
	Parms.Only_Free_Locations = Only_Free_Locations;
	Parms.Location_Types = std::move(Location_Types);
	Parms.Only_Used_Locations = Only_Used_Locations;
	Parms.Minimum_Distance = Minimum_Distance;
	Parms.Maximum_Distance = Maximum_Distance;

	UObject::ProcessEvent(Func, &Parms);

	Location_Types = std::move(Parms.Location_Types);

	if (Locations != nullptr)
		*Locations = std::move(Parms.Locations);
}


// Function BP_ADM_ActorLocationsManager.BP_ADM_ActorLocationsManager_C.Get Locations Used by Module
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// class UClass*                           Location_Type                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class UBP_GMComponent_ADM_Base_C*       Module                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// TArray<class ABP_ADM_ActorLocation_Base_C*>Locations                                              (Parm, OutParm)

void UBP_ADM_ActorLocationsManager_C::Get_Locations_Used_by_Module(class UClass* Location_Type, class UBP_GMComponent_ADM_Base_C* Module, TArray<class ABP_ADM_ActorLocation_Base_C*>* Locations)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_ADM_ActorLocationsManager_C", "Get Locations Used by Module");

	Params::BP_ADM_ActorLocationsManager_C_Get_Locations_Used_by_Module Parms{};

	Parms.Location_Type = Location_Type;
	Parms.Module = Module;

	UObject::ProcessEvent(Func, &Parms);

	if (Locations != nullptr)
		*Locations = std::move(Parms.Locations);
}

}

