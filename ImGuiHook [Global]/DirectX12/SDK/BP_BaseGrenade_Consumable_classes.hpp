#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_BaseGrenade_Consumable

#include "Basic.hpp"

#include "Flame_classes.hpp"
#include "Engine_structs.hpp"


namespace SDK
{

// BlueprintGeneratedClass BP_BaseGrenade_Consumable.BP_BaseGrenade_Consumable_C
// 0x0078 (0x0510 - 0x0498)
class ABP_BaseGrenade_Consumable_C : public AThrowableConsumable
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x0498(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class UBP_ThrowableConsumableHUD_C*           BP_ThrowableConsumableHUD;                         // 0x04A0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UBP_ConsumableBasis_C*                  BP_ConsumableBasis;                                // 0x04A8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	TArray<class USplineMeshComponent*>           Meshes;                                            // 0x04B0(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance, ContainsInstancedReference)
	int32                                         Max_splines;                                       // 0x04C0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4C4[0x4];                                      // 0x04C4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UStaticMeshComponent*                   ImpactPointMesh;                                   // 0x04C8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         MaterialSpeedMultiplier;                           // 0x04D0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         MaterialLoop;                                      // 0x04D4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FTimerHandle                           MaterialArcTimer;                                  // 0x04D8(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	class ADecalActor*                            Decal;                                             // 0x04E0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TSoftObjectPtr<class UAnimSequence>           CustomGrip_AnimHandPose;                           // 0x04E8(0x0028)(Edit, BlueprintVisible, DisableEditOnInstance, HasGetValueTypeHash)

public:
	void ExecuteUbergraph_BP_BaseGrenade_Consumable(int32 EntryPoint);
	void ReceiveBeginPlay();
	void CreateArcBP();
	void CalculateAimingArc();
	void OnAimingChanged(const bool ShowArc);
	void PlayMeshThrowAnimation();
	void PlayUsageAnimation();
	void Calculate_Direction_BP(class AHumanCharacter* Owner_0, struct FVector* Impuls);
	void Calculate_Location_BP(class AHumanCharacter* Owner_0, struct FVector* Location);
	void GetCustomGripAnimation(class UAnimSequence** HandAnim, bool* Valid);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BP_BaseGrenade_Consumable_C">();
	}
	static class ABP_BaseGrenade_Consumable_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<ABP_BaseGrenade_Consumable_C>();
	}
};
static_assert(alignof(ABP_BaseGrenade_Consumable_C) == 0x000008, "Wrong alignment on ABP_BaseGrenade_Consumable_C");
static_assert(sizeof(ABP_BaseGrenade_Consumable_C) == 0x000510, "Wrong size on ABP_BaseGrenade_Consumable_C");
static_assert(offsetof(ABP_BaseGrenade_Consumable_C, UberGraphFrame) == 0x000498, "Member 'ABP_BaseGrenade_Consumable_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(ABP_BaseGrenade_Consumable_C, BP_ThrowableConsumableHUD) == 0x0004A0, "Member 'ABP_BaseGrenade_Consumable_C::BP_ThrowableConsumableHUD' has a wrong offset!");
static_assert(offsetof(ABP_BaseGrenade_Consumable_C, BP_ConsumableBasis) == 0x0004A8, "Member 'ABP_BaseGrenade_Consumable_C::BP_ConsumableBasis' has a wrong offset!");
static_assert(offsetof(ABP_BaseGrenade_Consumable_C, Meshes) == 0x0004B0, "Member 'ABP_BaseGrenade_Consumable_C::Meshes' has a wrong offset!");
static_assert(offsetof(ABP_BaseGrenade_Consumable_C, Max_splines) == 0x0004C0, "Member 'ABP_BaseGrenade_Consumable_C::Max_splines' has a wrong offset!");
static_assert(offsetof(ABP_BaseGrenade_Consumable_C, ImpactPointMesh) == 0x0004C8, "Member 'ABP_BaseGrenade_Consumable_C::ImpactPointMesh' has a wrong offset!");
static_assert(offsetof(ABP_BaseGrenade_Consumable_C, MaterialSpeedMultiplier) == 0x0004D0, "Member 'ABP_BaseGrenade_Consumable_C::MaterialSpeedMultiplier' has a wrong offset!");
static_assert(offsetof(ABP_BaseGrenade_Consumable_C, MaterialLoop) == 0x0004D4, "Member 'ABP_BaseGrenade_Consumable_C::MaterialLoop' has a wrong offset!");
static_assert(offsetof(ABP_BaseGrenade_Consumable_C, MaterialArcTimer) == 0x0004D8, "Member 'ABP_BaseGrenade_Consumable_C::MaterialArcTimer' has a wrong offset!");
static_assert(offsetof(ABP_BaseGrenade_Consumable_C, Decal) == 0x0004E0, "Member 'ABP_BaseGrenade_Consumable_C::Decal' has a wrong offset!");
static_assert(offsetof(ABP_BaseGrenade_Consumable_C, CustomGrip_AnimHandPose) == 0x0004E8, "Member 'ABP_BaseGrenade_Consumable_C::CustomGrip_AnimHandPose' has a wrong offset!");

}

