#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_ChallengeCondition_SingleEncounterUseEachConsumable

#include "Basic.hpp"

#include "BP_ChallengeCondition_SingleEncounterUseEachConsumable_classes.hpp"
#include "BP_ChallengeCondition_SingleEncounterUseEachConsumable_parameters.hpp"


namespace SDK
{

// Function BP_ChallengeCondition_SingleEncounterUseEachConsumable.BP_ChallengeCondition_SingleEncounterUseEachConsumable_C.ExecuteUbergraph_BP_ChallengeCondition_SingleEncounterUseEachConsumable
// (Final, UbergraphFunction, HasDefaults)
// Parameters:
// int32                                   EntryPoint                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_ChallengeCondition_SingleEncounterUseEachConsumable_C::ExecuteUbergraph_BP_ChallengeCondition_SingleEncounterUseEachConsumable(int32 EntryPoint)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_ChallengeCondition_SingleEncounterUseEachConsumable_C", "ExecuteUbergraph_BP_ChallengeCondition_SingleEncounterUseEachConsumable");

	Params::BP_ChallengeCondition_SingleEncounterUseEachConsumable_C_ExecuteUbergraph_BP_ChallengeCondition_SingleEncounterUseEachConsumable Parms{};

	Parms.EntryPoint = EntryPoint;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_ChallengeCondition_SingleEncounterUseEachConsumable.BP_ChallengeCondition_SingleEncounterUseEachConsumable_C.OnMatchFinished
// (BlueprintCallable, BlueprintEvent)

void ABP_ChallengeCondition_SingleEncounterUseEachConsumable_C::OnMatchFinished()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_ChallengeCondition_SingleEncounterUseEachConsumable_C", "OnMatchFinished");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_ChallengeCondition_SingleEncounterUseEachConsumable.BP_ChallengeCondition_SingleEncounterUseEachConsumable_C.OnConsumableUsed
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// class UClass*                           UsedConsumable                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class APlayerState*                     User                                                   (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_ChallengeCondition_SingleEncounterUseEachConsumable_C::OnConsumableUsed(class UClass* UsedConsumable, class APlayerState* User)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_ChallengeCondition_SingleEncounterUseEachConsumable_C", "OnConsumableUsed");

	Params::BP_ChallengeCondition_SingleEncounterUseEachConsumable_C_OnConsumableUsed Parms{};

	Parms.UsedConsumable = UsedConsumable;
	Parms.User = User;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_ChallengeCondition_SingleEncounterUseEachConsumable.BP_ChallengeCondition_SingleEncounterUseEachConsumable_C.ReceiveBeginPlay
// (Event, Protected, BlueprintEvent)

void ABP_ChallengeCondition_SingleEncounterUseEachConsumable_C::ReceiveBeginPlay()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_ChallengeCondition_SingleEncounterUseEachConsumable_C", "ReceiveBeginPlay");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_ChallengeCondition_SingleEncounterUseEachConsumable.BP_ChallengeCondition_SingleEncounterUseEachConsumable_C.Get Maximum Progress
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// int32                                   Maximum_Progress                                       (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_ChallengeCondition_SingleEncounterUseEachConsumable_C::Get_Maximum_Progress(int32* Maximum_Progress)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_ChallengeCondition_SingleEncounterUseEachConsumable_C", "Get Maximum Progress");

	Params::BP_ChallengeCondition_SingleEncounterUseEachConsumable_C_Get_Maximum_Progress Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Maximum_Progress != nullptr)
		*Maximum_Progress = Parms.Maximum_Progress;
}


// Function BP_ChallengeCondition_SingleEncounterUseEachConsumable.BP_ChallengeCondition_SingleEncounterUseEachConsumable_C.EvaluateCondition
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    ConditionCompleted                                     (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ABP_ChallengeCondition_SingleEncounterUseEachConsumable_C::EvaluateCondition(bool* ConditionCompleted)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_ChallengeCondition_SingleEncounterUseEachConsumable_C", "EvaluateCondition");

	Params::BP_ChallengeCondition_SingleEncounterUseEachConsumable_C_EvaluateCondition Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (ConditionCompleted != nullptr)
		*ConditionCompleted = Parms.ConditionCompleted;
}

}

