#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_PlayerState_GunFight

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "EGunFightRole_structs.hpp"
#include "Struct_Gunfight_LoadoutAnalyticsInfo_structs.hpp"
#include "Struct_GunFightStatistics_structs.hpp"
#include "Struct_GunfightRoundStats_structs.hpp"
#include "BP_PlayerState_Teams_classes.hpp"


namespace SDK
{

// BlueprintGeneratedClass BP_PlayerState_GunFight.BP_PlayerState_GunFight_C
// 0x0148 (0x0808 - 0x06C0)
class ABP_PlayerState_GunFight_C final : public ABP_PlayerState_Teams_C
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame_BP_PlayerState_GunFight_C;          // 0x06C0(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	struct FStruct_GunFightStatistics             StatisticGunFight;                                 // 0x06C8(0x0050)(Edit, BlueprintVisible, Net, DisableEditOnInstance, RepNotify, HasGetValueTypeHash)
	EGunFightRole                                 Role_This_Round;                                   // 0x0718(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_719[0x7];                                      // 0x0719(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FStruct_GunfightRoundStats>     GunfightRoundStatistics;                           // 0x0720(0x0010)(Edit, BlueprintVisible, Net)
	struct FStruct_GunfightRoundStats             CurrentRoundStatistics;                            // 0x0730(0x001C)(Edit, BlueprintVisible, Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_74C[0x4];                                      // 0x074C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FStruct_Gunfight_LoadoutAnalyticsInfo> GunfightLoadoutStatistics;                         // 0x0750(0x0010)(Edit, BlueprintVisible, Net)
	struct FStruct_Gunfight_LoadoutAnalyticsInfo  CurrentLoadoutInfo;                                // 0x0760(0x0040)(Edit, BlueprintVisible, Net, HasGetValueTypeHash)
	int32                                         PreviousLoadoutIndex;                              // 0x07A0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         RemainingTickets;                                  // 0x07A4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         InstantLockBreaksUsed;                             // 0x07A8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bIsAttacker;                                       // 0x07AC(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          bTeamsRoleReplicated;                              // 0x07AD(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_7AE[0x2];                                      // 0x07AE(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	TMap<class UClass*, int32>                    WinnerScreenRewards;                               // 0x07B0(0x0050)(Edit, BlueprintVisible, DisableEditOnInstance)
	int32                                         WinnerScreenXP_Reward;                             // 0x0800(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

public:
	void ExecuteUbergraph_BP_PlayerState_GunFight(int32 EntryPoint);
	void SetRoundLoadoutInfo(const struct FStruct_Gunfight_LoadoutAnalyticsInfo& CurrentLoadoutInfo_0);
	void StoreRoundStatistics();
	void StoreRoundLoadoutInfo();
	void IncrementInstantLockBreaksUsed();
	void ShowScoreEventFeedRow(const class FString& ScoreEventString, int32 PointsAwarded);
	void SetMatchRelevantBoosterCount(int32 Tickets);
	void ReplicateRemainingTickets(int32 RemainingTickets_0);
	void RemoveTicketUponLockBreak();
	void SetPreviousLoadoutIndex_Locally(int32 Index_0);
	void SetPreviousLoadoutIndex(int32 Index_0);
	void ReceiveBeginPlay();
	void SetCharacterRoleInGunFight(EGunFightRole Role_0);
	void Set_StatisticGunFight(const struct FStruct_GunFightStatistics& Statistic);
	void GetStatisticGunFight(struct FStruct_GunFightStatistics* Statistic);
	void OnRep_StatisticGunFight();
	void PlayerResult_Analytics_AttachRelevantData(class UJsonObject* JsonObject, class UJsonObject** JsonObjectOut);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BP_PlayerState_GunFight_C">();
	}
	static class ABP_PlayerState_GunFight_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<ABP_PlayerState_GunFight_C>();
	}
};
static_assert(alignof(ABP_PlayerState_GunFight_C) == 0x000008, "Wrong alignment on ABP_PlayerState_GunFight_C");
static_assert(sizeof(ABP_PlayerState_GunFight_C) == 0x000808, "Wrong size on ABP_PlayerState_GunFight_C");
static_assert(offsetof(ABP_PlayerState_GunFight_C, UberGraphFrame_BP_PlayerState_GunFight_C) == 0x0006C0, "Member 'ABP_PlayerState_GunFight_C::UberGraphFrame_BP_PlayerState_GunFight_C' has a wrong offset!");
static_assert(offsetof(ABP_PlayerState_GunFight_C, StatisticGunFight) == 0x0006C8, "Member 'ABP_PlayerState_GunFight_C::StatisticGunFight' has a wrong offset!");
static_assert(offsetof(ABP_PlayerState_GunFight_C, Role_This_Round) == 0x000718, "Member 'ABP_PlayerState_GunFight_C::Role_This_Round' has a wrong offset!");
static_assert(offsetof(ABP_PlayerState_GunFight_C, GunfightRoundStatistics) == 0x000720, "Member 'ABP_PlayerState_GunFight_C::GunfightRoundStatistics' has a wrong offset!");
static_assert(offsetof(ABP_PlayerState_GunFight_C, CurrentRoundStatistics) == 0x000730, "Member 'ABP_PlayerState_GunFight_C::CurrentRoundStatistics' has a wrong offset!");
static_assert(offsetof(ABP_PlayerState_GunFight_C, GunfightLoadoutStatistics) == 0x000750, "Member 'ABP_PlayerState_GunFight_C::GunfightLoadoutStatistics' has a wrong offset!");
static_assert(offsetof(ABP_PlayerState_GunFight_C, CurrentLoadoutInfo) == 0x000760, "Member 'ABP_PlayerState_GunFight_C::CurrentLoadoutInfo' has a wrong offset!");
static_assert(offsetof(ABP_PlayerState_GunFight_C, PreviousLoadoutIndex) == 0x0007A0, "Member 'ABP_PlayerState_GunFight_C::PreviousLoadoutIndex' has a wrong offset!");
static_assert(offsetof(ABP_PlayerState_GunFight_C, RemainingTickets) == 0x0007A4, "Member 'ABP_PlayerState_GunFight_C::RemainingTickets' has a wrong offset!");
static_assert(offsetof(ABP_PlayerState_GunFight_C, InstantLockBreaksUsed) == 0x0007A8, "Member 'ABP_PlayerState_GunFight_C::InstantLockBreaksUsed' has a wrong offset!");
static_assert(offsetof(ABP_PlayerState_GunFight_C, bIsAttacker) == 0x0007AC, "Member 'ABP_PlayerState_GunFight_C::bIsAttacker' has a wrong offset!");
static_assert(offsetof(ABP_PlayerState_GunFight_C, bTeamsRoleReplicated) == 0x0007AD, "Member 'ABP_PlayerState_GunFight_C::bTeamsRoleReplicated' has a wrong offset!");
static_assert(offsetof(ABP_PlayerState_GunFight_C, WinnerScreenRewards) == 0x0007B0, "Member 'ABP_PlayerState_GunFight_C::WinnerScreenRewards' has a wrong offset!");
static_assert(offsetof(ABP_PlayerState_GunFight_C, WinnerScreenXP_Reward) == 0x000800, "Member 'ABP_PlayerState_GunFight_C::WinnerScreenXP_Reward' has a wrong offset!");

}

