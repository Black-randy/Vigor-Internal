#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_MementoLootManager_Base

#include "Basic.hpp"

#include "BP_LootSpawnManager_classes.hpp"


namespace SDK
{

// BlueprintGeneratedClass BP_MementoLootManager_Base.BP_MementoLootManager_Base_C
// 0x0010 (0x02C8 - 0x02B8)
class ABP_MementoLootManager_Base_C final : public ABP_LootSpawnManager_C
{
public:
	FMulticastInlineDelegateProperty_             Mementos_Spawned;                                  // 0x02B8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)

public:
	void Mementos_Spawned__DelegateSignature(TArray<class UClass*>& Items);
	void Spawn_Mementos(bool Cheat_in_All, TArray<class UClass*>* Spawned_Mementos);
	void Is_Cheating_Allowed(bool* Result);
	void Set_Up_Commodities_to_Spawn_on_All_Locations(TArray<class UClass*>& Memento_Pool, TArray<class UClass*>* Mementos_Set);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BP_MementoLootManager_Base_C">();
	}
	static class ABP_MementoLootManager_Base_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<ABP_MementoLootManager_Base_C>();
	}
};
static_assert(alignof(ABP_MementoLootManager_Base_C) == 0x000008, "Wrong alignment on ABP_MementoLootManager_Base_C");
static_assert(sizeof(ABP_MementoLootManager_Base_C) == 0x0002C8, "Wrong size on ABP_MementoLootManager_Base_C");
static_assert(offsetof(ABP_MementoLootManager_Base_C, Mementos_Spawned) == 0x0002B8, "Member 'ABP_MementoLootManager_Base_C::Mementos_Spawned' has a wrong offset!");

}

