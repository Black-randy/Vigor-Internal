#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_WinnerScreen_GunFight

#include "Basic.hpp"

#include "CoreUObject_structs.hpp"
#include "Struct_ScoreboardTab_structs.hpp"
#include "Engine_structs.hpp"
#include "Struct_GunFightStatistics_structs.hpp"
#include "Struct_NonEncounterMatchRewards_structs.hpp"
#include "BP_WinnerScreen_Base_classes.hpp"


namespace SDK
{

// BlueprintGeneratedClass BP_WinnerScreen_GunFight.BP_WinnerScreen_GunFight_C
// 0x0290 (0x05B0 - 0x0320)
class ABP_WinnerScreen_GunFight_C final : public ABP_WinnerScreen_Base_C
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame_BP_WinnerScreen_GunFight_C;         // 0x0320(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class USceneComponent*                        CameraUnrotatedHelper;                             // 0x0328(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USceneComponent*                        Scene_FinalCameraSpot;                             // 0x0330(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USpotLightComponent*                    SpotLight3;                                        // 0x0338(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USpotLightComponent*                    SpotLight2;                                        // 0x0340(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USpotLightComponent*                    SpotLight1;                                        // 0x0348(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	float                                         BoostPhaseTimeline_BoostPercentageTrack_19E7A4EB44A2ECFAC6A7BC8583A8499B; // 0x0350(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ETimelineDirection                            BoostPhaseTimeline__Direction_19E7A4EB44A2ECFAC6A7BC8583A8499B; // 0x0354(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_355[0x3];                                      // 0x0355(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UTimelineComponent*                     BoostPhaseTimeline;                                // 0x0358(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Last_Mannequin_Index;                              // 0x0360(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         ScoreHighlightMannequinIndex;                      // 0x0364(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         TotalTeamScoreBase;                                // 0x0368(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CurrentVisibleScore;                               // 0x036C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         LocalPlayerTeamIndex;                              // 0x0370(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          AttackersWon;                                      // 0x0374(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_375[0x3];                                      // 0x0375(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FStruct_GunFightStatistics>     DEBUG_Scores;                                      // 0x0378(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	TMap<int32, float>                            ScoreTresholdToFillTime;                           // 0x0388(0x0050)(Edit, BlueprintVisible, DisableEditOnInstance)
	class UUI_WinnerScreen_GunFight_C*            GunfightWinnerScreenUI;                            // 0x03D8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         HighestScoreHelper;                                // 0x03E0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          ScoreBoardAlreadyShown;                            // 0x03E4(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          BoostShowcasePhaseActive;                          // 0x03E5(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          RewardCranePhaseActive;                            // 0x03E6(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_3E7[0x1];                                      // 0x03E7(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class AHumanCharacter*>                HighlightedPlayerCharacterTeam2;                   // 0x03E8(0x0010)(Edit, BlueprintVisible, DisableEditOnTemplate, DisableEditOnInstance)
	TArray<struct FStruct_GunFightStatistics>     Team1_Statistics;                                  // 0x03F8(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	TArray<struct FStruct_GunFightStatistics>     Team2_Statistics;                                  // 0x0408(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	TMap<int32, bool>                             Win_RewardScore_To_AlreadyPlayedBool;              // 0x0418(0x0050)(Edit, BlueprintVisible, DisableEditOnInstance)
	TMap<int32, bool>                             Lose_RewardScore_To_AlreadyPlayedBool;             // 0x0468(0x0050)(Edit, BlueprintVisible, DisableEditOnInstance)
	int32                                         Team1_ScoreBoostCount;                             // 0x04B8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Team2_ScoreBoostCount;                             // 0x04BC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UAudioComponent*                        FillSoundEffect;                                   // 0x04C0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UAudioComponent*                        SkipSoundEffect;                                   // 0x04C8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FTimerHandle                           AnimRepeatTimer;                                   // 0x04D0(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	struct FTimerHandle                           BoostAdditionTimer;                                // 0x04D8(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	struct FTimerHandle                           SetupRewardThresholdTimer;                         // 0x04E0(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	TArray<int32>                                 BoostCountToBoostPercent;                          // 0x04E8(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	TArray<struct FStruct_ScoreboardTab>          ScoreTabsArray;                                    // 0x04F8(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	class UDataTable*                             RewardDataTable;                                   // 0x0508(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<struct FStruct_NonEncounterMatchRewards> Win_RewardSettings;                                // 0x0510(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	TArray<struct FStruct_NonEncounterMatchRewards> Lose_RewardSettings;                               // 0x0520(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	class ABP_AnimPlayHelper_Base_C*              CraneAnimActor;                                    // 0x0530(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_538[0x8];                                      // 0x0538(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             Camera_OriginalWorldTransform;                     // 0x0540(0x0030)(Edit, BlueprintVisible, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	struct FTransform                             Target_CameraTransform;                            // 0x0570(0x0030)(Edit, BlueprintVisible, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	int32                                         ScoreFromDisconnectedPlayers;                      // 0x05A0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          LocalPlayerAttacker;                               // 0x05A4(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)

public:
	void ExecuteUbergraph_BP_WinnerScreen_GunFight(int32 EntryPoint);
	void StartWinnerScreenTick();
	void StartLooserMontage();
	void AnimateMannequins();
	void SkipCraneRewardAnim();
	void SpillAnimFinished();
	void RewardCranePhaseStart();
	void CraneAnimStopped();
	void ReceiveTick(float DeltaSeconds);
	void DelayedRewardThresholdUpdate();
	void ReceiveBeginPlay();
	void SkipBoostPhase();
	void BoostPhaseEnded();
	void BoostPhaseStart();
	void PreBoostPhaseEnded();
	void ShowRewardPreview();
	void PeriodicallyAnimateMannequins();
	void ReceiveDestroyed();
	void StopFillSoundEffect();
	void PlayScoreSkipSoundEffect();
	void PlayFillSoundEffect(bool PlayBeefierSound);
	void WinningScreenReadyGunfight(const TArray<class AHumanCharacter*>& Team1Characters, const TArray<struct FStruct_GunFightStatistics>& Team1_Statistics_0, int32 Team1_BoosterCount, const TArray<class AHumanCharacter*>& Team2Characters, const TArray<struct FStruct_GunFightStatistics>& Team2_Statistics_0, int32 Team2_BoosterCount);
	void WaitForFadeIn();
	void Winning_Screen_Delay();
	void CharactersForUI_Ready();
	void WinnerScreenAdded();
	void ShowScoreboardGunfight();
	void Start_FadeOut();
	void InitializeAllValidMannequinScoreWidgets();
	void OnScoreShownUpdated(int32 ScoreShown);
	void ResetScoreAddition();
	void OnMannequinScoreDone_Event(class ABP_Mannequin_WinnerScreen_GunFight_C* Mannequin, bool Skipped);
	void WinningScreenReadyGM_Specific_ClientEvent();
	void StartTheScoreTeamAddition();
	void Set_Highlighted_Player(class AHumanCharacter* HumanCharacter);
	void BoostPhaseTimeline__UpdateFunc();
	void BoostPhaseTimeline__FinishedFunc();
	void Cycle_Next_Hightlighted_Player();
	void GetCurrentlyShowcasingMannequin(bool* bFound, class ABP_Mannequin_WinnerScreen_GunFight_C** Mannequin);
	void GetScoreFillTime(int32 Score, float* Value);
	void FilterOutOppositeTeam();
	void FilterControllersIntoTeams(const TMap<class AHumanPlayerController*, class AHumanCharacter*>& ControllersToCharacters, TArray<class AHumanCharacter*>* Team1_Characters, TArray<struct FStruct_GunFightStatistics>* Team1_Statistics_0, int32* Team1_BoosterCount, TArray<class AHumanCharacter*>* Team2_Characters, TArray<struct FStruct_GunFightStatistics>* Team2_Statistics_0, int32* Team2_BoosterCount);
	void PlayRewardSoundEffect(bool bPlayerWon, int32 RewardTier);
	void HandleRewardTresholds(bool CheckAll);
	void UpdateRewardUI(int32 RewardTier);
	void GetLocalTeamRewardTresholdMultiplier(float* TresholdMultiplier);
	void Setup_Reward_Thresholds();
	void GetHighestRewardReached(int32* RewardIndex, TArray<class UClass*>* MatchInfoRewards);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BP_WinnerScreen_GunFight_C">();
	}
	static class ABP_WinnerScreen_GunFight_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<ABP_WinnerScreen_GunFight_C>();
	}
};
static_assert(alignof(ABP_WinnerScreen_GunFight_C) == 0x000010, "Wrong alignment on ABP_WinnerScreen_GunFight_C");
static_assert(sizeof(ABP_WinnerScreen_GunFight_C) == 0x0005B0, "Wrong size on ABP_WinnerScreen_GunFight_C");
static_assert(offsetof(ABP_WinnerScreen_GunFight_C, UberGraphFrame_BP_WinnerScreen_GunFight_C) == 0x000320, "Member 'ABP_WinnerScreen_GunFight_C::UberGraphFrame_BP_WinnerScreen_GunFight_C' has a wrong offset!");
static_assert(offsetof(ABP_WinnerScreen_GunFight_C, CameraUnrotatedHelper) == 0x000328, "Member 'ABP_WinnerScreen_GunFight_C::CameraUnrotatedHelper' has a wrong offset!");
static_assert(offsetof(ABP_WinnerScreen_GunFight_C, Scene_FinalCameraSpot) == 0x000330, "Member 'ABP_WinnerScreen_GunFight_C::Scene_FinalCameraSpot' has a wrong offset!");
static_assert(offsetof(ABP_WinnerScreen_GunFight_C, SpotLight3) == 0x000338, "Member 'ABP_WinnerScreen_GunFight_C::SpotLight3' has a wrong offset!");
static_assert(offsetof(ABP_WinnerScreen_GunFight_C, SpotLight2) == 0x000340, "Member 'ABP_WinnerScreen_GunFight_C::SpotLight2' has a wrong offset!");
static_assert(offsetof(ABP_WinnerScreen_GunFight_C, SpotLight1) == 0x000348, "Member 'ABP_WinnerScreen_GunFight_C::SpotLight1' has a wrong offset!");
static_assert(offsetof(ABP_WinnerScreen_GunFight_C, BoostPhaseTimeline_BoostPercentageTrack_19E7A4EB44A2ECFAC6A7BC8583A8499B) == 0x000350, "Member 'ABP_WinnerScreen_GunFight_C::BoostPhaseTimeline_BoostPercentageTrack_19E7A4EB44A2ECFAC6A7BC8583A8499B' has a wrong offset!");
static_assert(offsetof(ABP_WinnerScreen_GunFight_C, BoostPhaseTimeline__Direction_19E7A4EB44A2ECFAC6A7BC8583A8499B) == 0x000354, "Member 'ABP_WinnerScreen_GunFight_C::BoostPhaseTimeline__Direction_19E7A4EB44A2ECFAC6A7BC8583A8499B' has a wrong offset!");
static_assert(offsetof(ABP_WinnerScreen_GunFight_C, BoostPhaseTimeline) == 0x000358, "Member 'ABP_WinnerScreen_GunFight_C::BoostPhaseTimeline' has a wrong offset!");
static_assert(offsetof(ABP_WinnerScreen_GunFight_C, Last_Mannequin_Index) == 0x000360, "Member 'ABP_WinnerScreen_GunFight_C::Last_Mannequin_Index' has a wrong offset!");
static_assert(offsetof(ABP_WinnerScreen_GunFight_C, ScoreHighlightMannequinIndex) == 0x000364, "Member 'ABP_WinnerScreen_GunFight_C::ScoreHighlightMannequinIndex' has a wrong offset!");
static_assert(offsetof(ABP_WinnerScreen_GunFight_C, TotalTeamScoreBase) == 0x000368, "Member 'ABP_WinnerScreen_GunFight_C::TotalTeamScoreBase' has a wrong offset!");
static_assert(offsetof(ABP_WinnerScreen_GunFight_C, CurrentVisibleScore) == 0x00036C, "Member 'ABP_WinnerScreen_GunFight_C::CurrentVisibleScore' has a wrong offset!");
static_assert(offsetof(ABP_WinnerScreen_GunFight_C, LocalPlayerTeamIndex) == 0x000370, "Member 'ABP_WinnerScreen_GunFight_C::LocalPlayerTeamIndex' has a wrong offset!");
static_assert(offsetof(ABP_WinnerScreen_GunFight_C, AttackersWon) == 0x000374, "Member 'ABP_WinnerScreen_GunFight_C::AttackersWon' has a wrong offset!");
static_assert(offsetof(ABP_WinnerScreen_GunFight_C, DEBUG_Scores) == 0x000378, "Member 'ABP_WinnerScreen_GunFight_C::DEBUG_Scores' has a wrong offset!");
static_assert(offsetof(ABP_WinnerScreen_GunFight_C, ScoreTresholdToFillTime) == 0x000388, "Member 'ABP_WinnerScreen_GunFight_C::ScoreTresholdToFillTime' has a wrong offset!");
static_assert(offsetof(ABP_WinnerScreen_GunFight_C, GunfightWinnerScreenUI) == 0x0003D8, "Member 'ABP_WinnerScreen_GunFight_C::GunfightWinnerScreenUI' has a wrong offset!");
static_assert(offsetof(ABP_WinnerScreen_GunFight_C, HighestScoreHelper) == 0x0003E0, "Member 'ABP_WinnerScreen_GunFight_C::HighestScoreHelper' has a wrong offset!");
static_assert(offsetof(ABP_WinnerScreen_GunFight_C, ScoreBoardAlreadyShown) == 0x0003E4, "Member 'ABP_WinnerScreen_GunFight_C::ScoreBoardAlreadyShown' has a wrong offset!");
static_assert(offsetof(ABP_WinnerScreen_GunFight_C, BoostShowcasePhaseActive) == 0x0003E5, "Member 'ABP_WinnerScreen_GunFight_C::BoostShowcasePhaseActive' has a wrong offset!");
static_assert(offsetof(ABP_WinnerScreen_GunFight_C, RewardCranePhaseActive) == 0x0003E6, "Member 'ABP_WinnerScreen_GunFight_C::RewardCranePhaseActive' has a wrong offset!");
static_assert(offsetof(ABP_WinnerScreen_GunFight_C, HighlightedPlayerCharacterTeam2) == 0x0003E8, "Member 'ABP_WinnerScreen_GunFight_C::HighlightedPlayerCharacterTeam2' has a wrong offset!");
static_assert(offsetof(ABP_WinnerScreen_GunFight_C, Team1_Statistics) == 0x0003F8, "Member 'ABP_WinnerScreen_GunFight_C::Team1_Statistics' has a wrong offset!");
static_assert(offsetof(ABP_WinnerScreen_GunFight_C, Team2_Statistics) == 0x000408, "Member 'ABP_WinnerScreen_GunFight_C::Team2_Statistics' has a wrong offset!");
static_assert(offsetof(ABP_WinnerScreen_GunFight_C, Win_RewardScore_To_AlreadyPlayedBool) == 0x000418, "Member 'ABP_WinnerScreen_GunFight_C::Win_RewardScore_To_AlreadyPlayedBool' has a wrong offset!");
static_assert(offsetof(ABP_WinnerScreen_GunFight_C, Lose_RewardScore_To_AlreadyPlayedBool) == 0x000468, "Member 'ABP_WinnerScreen_GunFight_C::Lose_RewardScore_To_AlreadyPlayedBool' has a wrong offset!");
static_assert(offsetof(ABP_WinnerScreen_GunFight_C, Team1_ScoreBoostCount) == 0x0004B8, "Member 'ABP_WinnerScreen_GunFight_C::Team1_ScoreBoostCount' has a wrong offset!");
static_assert(offsetof(ABP_WinnerScreen_GunFight_C, Team2_ScoreBoostCount) == 0x0004BC, "Member 'ABP_WinnerScreen_GunFight_C::Team2_ScoreBoostCount' has a wrong offset!");
static_assert(offsetof(ABP_WinnerScreen_GunFight_C, FillSoundEffect) == 0x0004C0, "Member 'ABP_WinnerScreen_GunFight_C::FillSoundEffect' has a wrong offset!");
static_assert(offsetof(ABP_WinnerScreen_GunFight_C, SkipSoundEffect) == 0x0004C8, "Member 'ABP_WinnerScreen_GunFight_C::SkipSoundEffect' has a wrong offset!");
static_assert(offsetof(ABP_WinnerScreen_GunFight_C, AnimRepeatTimer) == 0x0004D0, "Member 'ABP_WinnerScreen_GunFight_C::AnimRepeatTimer' has a wrong offset!");
static_assert(offsetof(ABP_WinnerScreen_GunFight_C, BoostAdditionTimer) == 0x0004D8, "Member 'ABP_WinnerScreen_GunFight_C::BoostAdditionTimer' has a wrong offset!");
static_assert(offsetof(ABP_WinnerScreen_GunFight_C, SetupRewardThresholdTimer) == 0x0004E0, "Member 'ABP_WinnerScreen_GunFight_C::SetupRewardThresholdTimer' has a wrong offset!");
static_assert(offsetof(ABP_WinnerScreen_GunFight_C, BoostCountToBoostPercent) == 0x0004E8, "Member 'ABP_WinnerScreen_GunFight_C::BoostCountToBoostPercent' has a wrong offset!");
static_assert(offsetof(ABP_WinnerScreen_GunFight_C, ScoreTabsArray) == 0x0004F8, "Member 'ABP_WinnerScreen_GunFight_C::ScoreTabsArray' has a wrong offset!");
static_assert(offsetof(ABP_WinnerScreen_GunFight_C, RewardDataTable) == 0x000508, "Member 'ABP_WinnerScreen_GunFight_C::RewardDataTable' has a wrong offset!");
static_assert(offsetof(ABP_WinnerScreen_GunFight_C, Win_RewardSettings) == 0x000510, "Member 'ABP_WinnerScreen_GunFight_C::Win_RewardSettings' has a wrong offset!");
static_assert(offsetof(ABP_WinnerScreen_GunFight_C, Lose_RewardSettings) == 0x000520, "Member 'ABP_WinnerScreen_GunFight_C::Lose_RewardSettings' has a wrong offset!");
static_assert(offsetof(ABP_WinnerScreen_GunFight_C, CraneAnimActor) == 0x000530, "Member 'ABP_WinnerScreen_GunFight_C::CraneAnimActor' has a wrong offset!");
static_assert(offsetof(ABP_WinnerScreen_GunFight_C, Camera_OriginalWorldTransform) == 0x000540, "Member 'ABP_WinnerScreen_GunFight_C::Camera_OriginalWorldTransform' has a wrong offset!");
static_assert(offsetof(ABP_WinnerScreen_GunFight_C, Target_CameraTransform) == 0x000570, "Member 'ABP_WinnerScreen_GunFight_C::Target_CameraTransform' has a wrong offset!");
static_assert(offsetof(ABP_WinnerScreen_GunFight_C, ScoreFromDisconnectedPlayers) == 0x0005A0, "Member 'ABP_WinnerScreen_GunFight_C::ScoreFromDisconnectedPlayers' has a wrong offset!");
static_assert(offsetof(ABP_WinnerScreen_GunFight_C, LocalPlayerAttacker) == 0x0005A4, "Member 'ABP_WinnerScreen_GunFight_C::LocalPlayerAttacker' has a wrong offset!");

}

