#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_FaceChanger

#include "Basic.hpp"

#include "CoreUObject_structs.hpp"
#include "Engine_structs.hpp"
#include "BP_Mannequin_classes.hpp"


namespace SDK
{

// BlueprintGeneratedClass BP_FaceChanger.BP_FaceChanger_C
// 0x00F0 (0x0370 - 0x0280)
class ABP_FaceChanger_C final : public ABP_Mannequin_C
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x0280(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class UCameraComponent*                       CameraFace;                                        // 0x0288(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	float                                         CharacterMove_Alpha_6FE390594431417B17D443A04272A87F; // 0x0290(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ETimelineDirection                            CharacterMove__Direction_6FE390594431417B17D443A04272A87F; // 0x0294(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_295[0x3];                                      // 0x0295(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UTimelineComponent*                     CharacterMove;                                     // 0x0298(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CameraMove_YawLerp_857DBBCE4FC78D594189CDAC51E5508D; // 0x02A0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CameraMove_AdditionalRadius_857DBBCE4FC78D594189CDAC51E5508D; // 0x02A4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CameraMove_Alpha_857DBBCE4FC78D594189CDAC51E5508D; // 0x02A8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ETimelineDirection                            CameraMove__Direction_857DBBCE4FC78D594189CDAC51E5508D; // 0x02AC(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2AD[0x3];                                      // 0x02AD(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UTimelineComponent*                     CameraMove;                                        // 0x02B0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                InitialLocation;                                   // 0x02B8(0x000C)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               InitialRotation;                                   // 0x02C4(0x000C)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	float                                         FadeOutTime;                                       // 0x02D0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash)
	float                                         DelayBeforeStart;                                  // 0x02D4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash)
	float                                         InitialFOV;                                        // 0x02D8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                UniformOffset;                                     // 0x02DC(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash)
	uint8                                         Pad_2E8[0x8];                                      // 0x02E8(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             UniformInitialTransform;                           // 0x02F0(0x0030)(Edit, BlueprintVisible, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          SkipCinematics;                                    // 0x0320(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn)
	bool                                          SkipCharacterSelection;                            // 0x0321(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn)
	uint8                                         Pad_322[0x6];                                      // 0x0322(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class UAnimSequenceBase*                      AnimationDeadMale;                                 // 0x0328(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash)
	class UAnimSequenceBase*                      AnimationDeadFemale;                               // 0x0330(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash)
	class UAnimSequenceBase*                      AnimationWakeMale;                                 // 0x0338(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash)
	class UAnimSequenceBase*                      AnimationWakeFemale;                               // 0x0340(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash)
	class UAnimSequenceBase*                      AnimationAwakeMale;                                // 0x0348(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash)
	class UAnimSequenceBase*                      AnimationAwakeFemale;                              // 0x0350(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash)
	class UAnimSequenceBase*                      AnimationStandMale;                                // 0x0358(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash)
	class UAnimSequenceBase*                      AnimationStandFemale;                              // 0x0360(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash)
	bool                                          VarIsFemale;                                       // 0x0368(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)

public:
	void ExecuteUbergraph_BP_FaceChanger(int32 EntryPoint);
	void ReceiveBeginPlay();
	void CameraMorph(const struct FVector& FinalLocation, const struct FRotator& FinalRotation, float FinalFOV, const struct FTransform& FinalPawnTransform);
	void CharacterMove__UpdateFunc();
	void CharacterMove__FinishedFunc();
	void CameraMove__UpdateFunc();
	void CameraMove__FinishedFunc();
	void UserConstructionScript();
	void CameraMorphPosition(const struct FVector& Center, float Alpha, const struct FVector& LocInit, const struct FRotator& RotInit, const struct FVector& LocFinal, const struct FRotator& RotFinal, float RadiusMultiplier, float YawLerp, struct FVector* Loc, struct FRotator* Rot);
	void AnimationStandUp(float* SequenceLength);
	void WakeUpAnimation(float* SequenceLength);
	void WakeUpAnimation2();
	void GetTimeToStand(float* TimeToStand);
	void IsFemale(bool* NewParam);
	void DeadAnimation();
	void Get_Player_Customization_Pairs_Without_Headgear(class UClass* ArchetypeVariant, TArray<struct FCustomizationSlotVariant>* CustomizationPairs, bool* bSuccess);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BP_FaceChanger_C">();
	}
	static class ABP_FaceChanger_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<ABP_FaceChanger_C>();
	}
};
static_assert(alignof(ABP_FaceChanger_C) == 0x000010, "Wrong alignment on ABP_FaceChanger_C");
static_assert(sizeof(ABP_FaceChanger_C) == 0x000370, "Wrong size on ABP_FaceChanger_C");
static_assert(offsetof(ABP_FaceChanger_C, UberGraphFrame) == 0x000280, "Member 'ABP_FaceChanger_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(ABP_FaceChanger_C, CameraFace) == 0x000288, "Member 'ABP_FaceChanger_C::CameraFace' has a wrong offset!");
static_assert(offsetof(ABP_FaceChanger_C, CharacterMove_Alpha_6FE390594431417B17D443A04272A87F) == 0x000290, "Member 'ABP_FaceChanger_C::CharacterMove_Alpha_6FE390594431417B17D443A04272A87F' has a wrong offset!");
static_assert(offsetof(ABP_FaceChanger_C, CharacterMove__Direction_6FE390594431417B17D443A04272A87F) == 0x000294, "Member 'ABP_FaceChanger_C::CharacterMove__Direction_6FE390594431417B17D443A04272A87F' has a wrong offset!");
static_assert(offsetof(ABP_FaceChanger_C, CharacterMove) == 0x000298, "Member 'ABP_FaceChanger_C::CharacterMove' has a wrong offset!");
static_assert(offsetof(ABP_FaceChanger_C, CameraMove_YawLerp_857DBBCE4FC78D594189CDAC51E5508D) == 0x0002A0, "Member 'ABP_FaceChanger_C::CameraMove_YawLerp_857DBBCE4FC78D594189CDAC51E5508D' has a wrong offset!");
static_assert(offsetof(ABP_FaceChanger_C, CameraMove_AdditionalRadius_857DBBCE4FC78D594189CDAC51E5508D) == 0x0002A4, "Member 'ABP_FaceChanger_C::CameraMove_AdditionalRadius_857DBBCE4FC78D594189CDAC51E5508D' has a wrong offset!");
static_assert(offsetof(ABP_FaceChanger_C, CameraMove_Alpha_857DBBCE4FC78D594189CDAC51E5508D) == 0x0002A8, "Member 'ABP_FaceChanger_C::CameraMove_Alpha_857DBBCE4FC78D594189CDAC51E5508D' has a wrong offset!");
static_assert(offsetof(ABP_FaceChanger_C, CameraMove__Direction_857DBBCE4FC78D594189CDAC51E5508D) == 0x0002AC, "Member 'ABP_FaceChanger_C::CameraMove__Direction_857DBBCE4FC78D594189CDAC51E5508D' has a wrong offset!");
static_assert(offsetof(ABP_FaceChanger_C, CameraMove) == 0x0002B0, "Member 'ABP_FaceChanger_C::CameraMove' has a wrong offset!");
static_assert(offsetof(ABP_FaceChanger_C, InitialLocation) == 0x0002B8, "Member 'ABP_FaceChanger_C::InitialLocation' has a wrong offset!");
static_assert(offsetof(ABP_FaceChanger_C, InitialRotation) == 0x0002C4, "Member 'ABP_FaceChanger_C::InitialRotation' has a wrong offset!");
static_assert(offsetof(ABP_FaceChanger_C, FadeOutTime) == 0x0002D0, "Member 'ABP_FaceChanger_C::FadeOutTime' has a wrong offset!");
static_assert(offsetof(ABP_FaceChanger_C, DelayBeforeStart) == 0x0002D4, "Member 'ABP_FaceChanger_C::DelayBeforeStart' has a wrong offset!");
static_assert(offsetof(ABP_FaceChanger_C, InitialFOV) == 0x0002D8, "Member 'ABP_FaceChanger_C::InitialFOV' has a wrong offset!");
static_assert(offsetof(ABP_FaceChanger_C, UniformOffset) == 0x0002DC, "Member 'ABP_FaceChanger_C::UniformOffset' has a wrong offset!");
static_assert(offsetof(ABP_FaceChanger_C, UniformInitialTransform) == 0x0002F0, "Member 'ABP_FaceChanger_C::UniformInitialTransform' has a wrong offset!");
static_assert(offsetof(ABP_FaceChanger_C, SkipCinematics) == 0x000320, "Member 'ABP_FaceChanger_C::SkipCinematics' has a wrong offset!");
static_assert(offsetof(ABP_FaceChanger_C, SkipCharacterSelection) == 0x000321, "Member 'ABP_FaceChanger_C::SkipCharacterSelection' has a wrong offset!");
static_assert(offsetof(ABP_FaceChanger_C, AnimationDeadMale) == 0x000328, "Member 'ABP_FaceChanger_C::AnimationDeadMale' has a wrong offset!");
static_assert(offsetof(ABP_FaceChanger_C, AnimationDeadFemale) == 0x000330, "Member 'ABP_FaceChanger_C::AnimationDeadFemale' has a wrong offset!");
static_assert(offsetof(ABP_FaceChanger_C, AnimationWakeMale) == 0x000338, "Member 'ABP_FaceChanger_C::AnimationWakeMale' has a wrong offset!");
static_assert(offsetof(ABP_FaceChanger_C, AnimationWakeFemale) == 0x000340, "Member 'ABP_FaceChanger_C::AnimationWakeFemale' has a wrong offset!");
static_assert(offsetof(ABP_FaceChanger_C, AnimationAwakeMale) == 0x000348, "Member 'ABP_FaceChanger_C::AnimationAwakeMale' has a wrong offset!");
static_assert(offsetof(ABP_FaceChanger_C, AnimationAwakeFemale) == 0x000350, "Member 'ABP_FaceChanger_C::AnimationAwakeFemale' has a wrong offset!");
static_assert(offsetof(ABP_FaceChanger_C, AnimationStandMale) == 0x000358, "Member 'ABP_FaceChanger_C::AnimationStandMale' has a wrong offset!");
static_assert(offsetof(ABP_FaceChanger_C, AnimationStandFemale) == 0x000360, "Member 'ABP_FaceChanger_C::AnimationStandFemale' has a wrong offset!");
static_assert(offsetof(ABP_FaceChanger_C, VarIsFemale) == 0x000368, "Member 'ABP_FaceChanger_C::VarIsFemale' has a wrong offset!");

}

