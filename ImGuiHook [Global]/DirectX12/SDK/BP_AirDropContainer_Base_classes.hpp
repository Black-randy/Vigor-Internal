#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_AirDropContainer_Base

#include "Basic.hpp"

#include "CoreUObject_structs.hpp"
#include "Engine_structs.hpp"
#include "BP_Lootable_Base_classes.hpp"
#include "E_Lootable_State_structs.hpp"


namespace SDK
{

// BlueprintGeneratedClass BP_AirDropContainer_Base.BP_AirDropContainer_Base_C
// 0x0120 (0x04C8 - 0x03A8)
class ABP_AirDropContainer_Base_C : public ABP_Lootable_Base_C
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame_BP_AirDropContainer_Base_C;         // 0x03A8(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class UStaticMeshComponent*                   CollisionCube;                                     // 0x03B0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UStaticMeshComponent*                   Parachute;                                         // 0x03B8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	float                                         Parachute_Collapse_Timeline_DisappearPhase_C3A91B4F45026602F93CF2A5260272AA; // 0x03C0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Parachute_Collapse_Timeline_Parachute_Material_Scalar_C3A91B4F45026602F93CF2A5260272AA; // 0x03C4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ETimelineDirection                            Parachute_Collapse_Timeline__Direction_C3A91B4F45026602F93CF2A5260272AA; // 0x03C8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3C9[0x7];                                      // 0x03C9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UTimelineComponent*                     Parachute_Collapse_Timeline;                       // 0x03D0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<class UClass*>                         Loot;                                              // 0x03D8(0x0010)(Edit, BlueprintVisible, ExposeOnSpawn)
	bool                                          Is_Falling_On_Parachute;                           // 0x03E8(0x0001)(Edit, BlueprintVisible, Net, ZeroConstructor, IsPlainOldData, RepNotify, NoDestructor, ExposeOnSpawn)
	uint8                                         Pad_3E9[0x3];                                      // 0x03E9(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         DurationOfChuteOnGround;                           // 0x03EC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                StartPosition;                                     // 0x03F0(0x000C)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                EndPosition;                                       // 0x03FC(0x000C)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         TotalFallTime;                                     // 0x0408(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         AccumulatedFallTime;                               // 0x040C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UCurveFloat*                            FallCurve;                                         // 0x0410(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                DropZoneLocation;                                  // 0x0418(0x000C)(Edit, BlueprintVisible, Net, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash)
	uint8                                         Pad_424[0x4];                                      // 0x0424(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class AItem*                                  Last_Item_Looted;                                  // 0x0428(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Loot_Looted;                                       // 0x0430(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_431[0x7];                                      // 0x0431(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class UClass*>                         Curent_Loot;                                       // 0x0438(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	TArray<class UMaterialInstanceDynamic*>       ParachuteMaterialInstances;                        // 0x0448(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	class UStaticMesh*                            ParachuteLandedMesh;                               // 0x0458(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   MarkerTag;                                         // 0x0460(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               RotationOnLand;                                    // 0x0468(0x000C)(Edit, BlueprintVisible, Net, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn)
	uint8                                         Pad_474[0x4];                                      // 0x0474(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TSoftObjectPtr<class UObject>                 ParachuteLandMesh_SoftRef;                         // 0x0478(0x0028)(Edit, BlueprintVisible, DisableEditOnInstance, HasGetValueTypeHash)
	TSoftObjectPtr<class UObject>                 ParachuteFallMesh_SoftRef;                         // 0x04A0(0x0028)(Edit, BlueprintVisible, DisableEditOnInstance, HasGetValueTypeHash)

public:
	void ExecuteUbergraph_BP_AirDropContainer_Base(int32 EntryPoint);
	void BndEvt__BP_InteractionItemComponent_K2Node_ComponentBoundEvent_4_PreInteraction_End_on_Server__DelegateSignature(class UInteractionItemComponent* Sender, class AActor* Interacting_Actor, bool Canceled);
	void BndEvt__BP_InteractionItemComponent_K2Node_ComponentBoundEvent_5_PreInteraction_Start_on_Server__DelegateSignature(class UInteractionItemComponent* Sender, class AActor* Interacting_Actor);
	void Landed();
	void Loot_Stored(class UClass* Item_Type);
	void Loot_Taken(class UClass* Item_Type);
	void BndEvt__Cube1_K2Node_ComponentBoundEvent_5_ComponentBeginOverlapSignature__DelegateSignature(class UPrimitiveComponent* OverlappedComponent, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, int32 OtherBodyIndex, bool bFromSweep, const struct FHitResult& SweepResult);
	void BoxColliderOverlap(class AActor* Other_Actor);
	void CollapseParachute();
	void VisualizeEmptyLoot();
	void CollisionEffect();
	void Parachute_Collapse_Timeline__UpdateFunc();
	void Parachute_Collapse_Timeline__FinishedFunc();
	void OnRep_Is_Falling_On_Parachute();
	void AddLoot(TArray<class UClass*>& Array);
	void Check_Loot_Presence();
	void Loot_Accessed();
	void Close_Local_Inventory_UI();
	void ReceiveBeginPlay();
	void ReceiveTick(float DeltaSeconds);
	void UserConstructionScript();
	void Determine_State_Based_On_Current_Circumstances(E_Lootable_State* Appropriate_State);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BP_AirDropContainer_Base_C">();
	}
	static class ABP_AirDropContainer_Base_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<ABP_AirDropContainer_Base_C>();
	}
};
static_assert(alignof(ABP_AirDropContainer_Base_C) == 0x000008, "Wrong alignment on ABP_AirDropContainer_Base_C");
static_assert(sizeof(ABP_AirDropContainer_Base_C) == 0x0004C8, "Wrong size on ABP_AirDropContainer_Base_C");
static_assert(offsetof(ABP_AirDropContainer_Base_C, UberGraphFrame_BP_AirDropContainer_Base_C) == 0x0003A8, "Member 'ABP_AirDropContainer_Base_C::UberGraphFrame_BP_AirDropContainer_Base_C' has a wrong offset!");
static_assert(offsetof(ABP_AirDropContainer_Base_C, CollisionCube) == 0x0003B0, "Member 'ABP_AirDropContainer_Base_C::CollisionCube' has a wrong offset!");
static_assert(offsetof(ABP_AirDropContainer_Base_C, Parachute) == 0x0003B8, "Member 'ABP_AirDropContainer_Base_C::Parachute' has a wrong offset!");
static_assert(offsetof(ABP_AirDropContainer_Base_C, Parachute_Collapse_Timeline_DisappearPhase_C3A91B4F45026602F93CF2A5260272AA) == 0x0003C0, "Member 'ABP_AirDropContainer_Base_C::Parachute_Collapse_Timeline_DisappearPhase_C3A91B4F45026602F93CF2A5260272AA' has a wrong offset!");
static_assert(offsetof(ABP_AirDropContainer_Base_C, Parachute_Collapse_Timeline_Parachute_Material_Scalar_C3A91B4F45026602F93CF2A5260272AA) == 0x0003C4, "Member 'ABP_AirDropContainer_Base_C::Parachute_Collapse_Timeline_Parachute_Material_Scalar_C3A91B4F45026602F93CF2A5260272AA' has a wrong offset!");
static_assert(offsetof(ABP_AirDropContainer_Base_C, Parachute_Collapse_Timeline__Direction_C3A91B4F45026602F93CF2A5260272AA) == 0x0003C8, "Member 'ABP_AirDropContainer_Base_C::Parachute_Collapse_Timeline__Direction_C3A91B4F45026602F93CF2A5260272AA' has a wrong offset!");
static_assert(offsetof(ABP_AirDropContainer_Base_C, Parachute_Collapse_Timeline) == 0x0003D0, "Member 'ABP_AirDropContainer_Base_C::Parachute_Collapse_Timeline' has a wrong offset!");
static_assert(offsetof(ABP_AirDropContainer_Base_C, Loot) == 0x0003D8, "Member 'ABP_AirDropContainer_Base_C::Loot' has a wrong offset!");
static_assert(offsetof(ABP_AirDropContainer_Base_C, Is_Falling_On_Parachute) == 0x0003E8, "Member 'ABP_AirDropContainer_Base_C::Is_Falling_On_Parachute' has a wrong offset!");
static_assert(offsetof(ABP_AirDropContainer_Base_C, DurationOfChuteOnGround) == 0x0003EC, "Member 'ABP_AirDropContainer_Base_C::DurationOfChuteOnGround' has a wrong offset!");
static_assert(offsetof(ABP_AirDropContainer_Base_C, StartPosition) == 0x0003F0, "Member 'ABP_AirDropContainer_Base_C::StartPosition' has a wrong offset!");
static_assert(offsetof(ABP_AirDropContainer_Base_C, EndPosition) == 0x0003FC, "Member 'ABP_AirDropContainer_Base_C::EndPosition' has a wrong offset!");
static_assert(offsetof(ABP_AirDropContainer_Base_C, TotalFallTime) == 0x000408, "Member 'ABP_AirDropContainer_Base_C::TotalFallTime' has a wrong offset!");
static_assert(offsetof(ABP_AirDropContainer_Base_C, AccumulatedFallTime) == 0x00040C, "Member 'ABP_AirDropContainer_Base_C::AccumulatedFallTime' has a wrong offset!");
static_assert(offsetof(ABP_AirDropContainer_Base_C, FallCurve) == 0x000410, "Member 'ABP_AirDropContainer_Base_C::FallCurve' has a wrong offset!");
static_assert(offsetof(ABP_AirDropContainer_Base_C, DropZoneLocation) == 0x000418, "Member 'ABP_AirDropContainer_Base_C::DropZoneLocation' has a wrong offset!");
static_assert(offsetof(ABP_AirDropContainer_Base_C, Last_Item_Looted) == 0x000428, "Member 'ABP_AirDropContainer_Base_C::Last_Item_Looted' has a wrong offset!");
static_assert(offsetof(ABP_AirDropContainer_Base_C, Loot_Looted) == 0x000430, "Member 'ABP_AirDropContainer_Base_C::Loot_Looted' has a wrong offset!");
static_assert(offsetof(ABP_AirDropContainer_Base_C, Curent_Loot) == 0x000438, "Member 'ABP_AirDropContainer_Base_C::Curent_Loot' has a wrong offset!");
static_assert(offsetof(ABP_AirDropContainer_Base_C, ParachuteMaterialInstances) == 0x000448, "Member 'ABP_AirDropContainer_Base_C::ParachuteMaterialInstances' has a wrong offset!");
static_assert(offsetof(ABP_AirDropContainer_Base_C, ParachuteLandedMesh) == 0x000458, "Member 'ABP_AirDropContainer_Base_C::ParachuteLandedMesh' has a wrong offset!");
static_assert(offsetof(ABP_AirDropContainer_Base_C, MarkerTag) == 0x000460, "Member 'ABP_AirDropContainer_Base_C::MarkerTag' has a wrong offset!");
static_assert(offsetof(ABP_AirDropContainer_Base_C, RotationOnLand) == 0x000468, "Member 'ABP_AirDropContainer_Base_C::RotationOnLand' has a wrong offset!");
static_assert(offsetof(ABP_AirDropContainer_Base_C, ParachuteLandMesh_SoftRef) == 0x000478, "Member 'ABP_AirDropContainer_Base_C::ParachuteLandMesh_SoftRef' has a wrong offset!");
static_assert(offsetof(ABP_AirDropContainer_Base_C, ParachuteFallMesh_SoftRef) == 0x0004A0, "Member 'ABP_AirDropContainer_Base_C::ParachuteFallMesh_SoftRef' has a wrong offset!");

}

