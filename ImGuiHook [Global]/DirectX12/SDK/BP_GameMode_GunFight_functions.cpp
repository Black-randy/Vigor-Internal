#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_GameMode_GunFight

#include "Basic.hpp"

#include "BP_GameMode_GunFight_classes.hpp"
#include "BP_GameMode_GunFight_parameters.hpp"


namespace SDK
{

// Function BP_GameMode_GunFight.BP_GameMode_GunFight_C.ExecuteUbergraph_BP_GameMode_GunFight
// (Final, UbergraphFunction, HasDefaults)
// Parameters:
// int32                                   EntryPoint                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_GameMode_GunFight_C::ExecuteUbergraph_BP_GameMode_GunFight(int32 EntryPoint)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_GameMode_GunFight_C", "ExecuteUbergraph_BP_GameMode_GunFight");

	Params::BP_GameMode_GunFight_C_ExecuteUbergraph_BP_GameMode_GunFight Parms{};

	Parms.EntryPoint = EntryPoint;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_GameMode_GunFight.BP_GameMode_GunFight_C.HandleVoteKickeeDisconnect
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// class AController*                      DisconnectingController                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_GameMode_GunFight_C::HandleVoteKickeeDisconnect(class AController* DisconnectingController)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_GameMode_GunFight_C", "HandleVoteKickeeDisconnect");

	Params::BP_GameMode_GunFight_C_HandleVoteKickeeDisconnect Parms{};

	Parms.DisconnectingController = DisconnectingController;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_GameMode_GunFight.BP_GameMode_GunFight_C.UpdateLoadoutPlayerCount
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// class UBP_GSC_Team_C*                   TeamToUpdate                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   LoadoutIndex                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   PlayerCount                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_GameMode_GunFight_C::UpdateLoadoutPlayerCount(class UBP_GSC_Team_C* TeamToUpdate, int32 LoadoutIndex, int32 PlayerCount)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_GameMode_GunFight_C", "UpdateLoadoutPlayerCount");

	Params::BP_GameMode_GunFight_C_UpdateLoadoutPlayerCount Parms{};

	Parms.TeamToUpdate = TeamToUpdate;
	Parms.LoadoutIndex = LoadoutIndex;
	Parms.PlayerCount = PlayerCount;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_GameMode_GunFight.BP_GameMode_GunFight_C.DelayedAlternativeStartMatch
// (BlueprintCallable, BlueprintEvent)

void ABP_GameMode_GunFight_C::DelayedAlternativeStartMatch()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_GameMode_GunFight_C", "DelayedAlternativeStartMatch");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_GameMode_GunFight.BP_GameMode_GunFight_C.BreakLockUsingCrowns
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// class ABP_PlayerController_GunFight_C*  PlayerController                                       (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_GameMode_GunFight_C::BreakLockUsingCrowns(class ABP_PlayerController_GunFight_C* PlayerController)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_GameMode_GunFight_C", "BreakLockUsingCrowns");

	Params::BP_GameMode_GunFight_C_BreakLockUsingCrowns Parms{};

	Parms.PlayerController = PlayerController;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_GameMode_GunFight.BP_GameMode_GunFight_C.SubLevelsReturned
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    SLM_Load_Complete                                      (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ABP_GameMode_GunFight_C::SubLevelsReturned(bool SLM_Load_Complete)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_GameMode_GunFight_C", "SubLevelsReturned");

	Params::BP_GameMode_GunFight_C_SubLevelsReturned Parms{};

	Parms.SLM_Load_Complete = SLM_Load_Complete;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_GameMode_GunFight.BP_GameMode_GunFight_C.Lobby Finished
// (HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FCloudRequestResult              RequestResult                                          (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
// struct FCloudMatchCommitInfo            CloudSettings                                          (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)

void ABP_GameMode_GunFight_C::Lobby_Finished(const struct FCloudRequestResult& RequestResult, const struct FCloudMatchCommitInfo& CloudSettings)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_GameMode_GunFight_C", "Lobby Finished");

	Params::BP_GameMode_GunFight_C_Lobby_Finished Parms{};

	Parms.RequestResult = std::move(RequestResult);
	Parms.CloudSettings = std::move(CloudSettings);

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_GameMode_GunFight.BP_GameMode_GunFight_C.BreakLock
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// class ABP_PlayerController_GunFight_C*  PlayerController                                       (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   LoadoutIndex                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_GameMode_GunFight_C::BreakLock(class ABP_PlayerController_GunFight_C* PlayerController, int32 LoadoutIndex)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_GameMode_GunFight_C", "BreakLock");

	Params::BP_GameMode_GunFight_C_BreakLock Parms{};

	Parms.PlayerController = PlayerController;
	Parms.LoadoutIndex = LoadoutIndex;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_GameMode_GunFight.BP_GameMode_GunFight_C.TryToLockLoadout
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// class ABP_PlayerController_GunFight_C*  PlayerController                                       (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   LoadoutIndex                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_GameMode_GunFight_C::TryToLockLoadout(class ABP_PlayerController_GunFight_C* PlayerController, int32 LoadoutIndex)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_GameMode_GunFight_C", "TryToLockLoadout");

	Params::BP_GameMode_GunFight_C_TryToLockLoadout Parms{};

	Parms.PlayerController = PlayerController;
	Parms.LoadoutIndex = LoadoutIndex;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_GameMode_GunFight.BP_GameMode_GunFight_C.K2_PostLogin
// (Event, Public, BlueprintEvent)
// Parameters:
// class APlayerController*                NewPlayer                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_GameMode_GunFight_C::K2_PostLogin(class APlayerController* NewPlayer)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_GameMode_GunFight_C", "K2_PostLogin");

	Params::BP_GameMode_GunFight_C_K2_PostLogin Parms{};

	Parms.NewPlayer = NewPlayer;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_GameMode_GunFight.BP_GameMode_GunFight_C.Report Enemy Hit
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// float                                   Damage                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class AHumanCharacter*                  Attacking_Character                                    (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_GameMode_GunFight_C::Report_Enemy_Hit(float Damage, class AHumanCharacter* Attacking_Character)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_GameMode_GunFight_C", "Report Enemy Hit");

	Params::BP_GameMode_GunFight_C_Report_Enemy_Hit Parms{};

	Parms.Damage = Damage;
	Parms.Attacking_Character = Attacking_Character;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_GameMode_GunFight.BP_GameMode_GunFight_C.K2_OnLogout
// (Event, Public, BlueprintEvent)
// Parameters:
// class AController*                      ExitingController                                      (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_GameMode_GunFight_C::K2_OnLogout(class AController* ExitingController)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_GameMode_GunFight_C", "K2_OnLogout");

	Params::BP_GameMode_GunFight_C_K2_OnLogout Parms{};

	Parms.ExitingController = ExitingController;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_GameMode_GunFight.BP_GameMode_GunFight_C.Kick Player For Teamkilling
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// class ABP_PlayerState_GunFight_C*       Player_State                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_GameMode_GunFight_C::Kick_Player_For_Teamkilling(class ABP_PlayerState_GunFight_C* Player_State)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_GameMode_GunFight_C", "Kick Player For Teamkilling");

	Params::BP_GameMode_GunFight_C_Kick_Player_For_Teamkilling Parms{};

	Parms.Player_State = Player_State;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_GameMode_GunFight.BP_GameMode_GunFight_C.Report Team Damage
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// float                                   Damage                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class AHumanCharacter*                  Attacking_Character                                    (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_GameMode_GunFight_C::Report_Team_Damage(float Damage, class AHumanCharacter* Attacking_Character)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_GameMode_GunFight_C", "Report Team Damage");

	Params::BP_GameMode_GunFight_C_Report_Team_Damage Parms{};

	Parms.Damage = Damage;
	Parms.Attacking_Character = Attacking_Character;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_GameMode_GunFight.BP_GameMode_GunFight_C.None Won
// (BlueprintCallable, BlueprintEvent)

void ABP_GameMode_GunFight_C::None_Won()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_GameMode_GunFight_C", "None Won");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_GameMode_GunFight.BP_GameMode_GunFight_C.Objective Used
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// class AHumanCharacter*                  Character                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_GameMode_GunFight_C::Objective_Used(class AHumanCharacter* Character)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_GameMode_GunFight_C", "Objective Used");

	Params::BP_GameMode_GunFight_C_Objective_Used Parms{};

	Parms.Character = Character;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_GameMode_GunFight.BP_GameMode_GunFight_C.Increment Rounds and assign sides to teams
// (BlueprintCallable, BlueprintEvent)

void ABP_GameMode_GunFight_C::Increment_Rounds_and_assign_sides_to_teams()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_GameMode_GunFight_C", "Increment Rounds and assign sides to teams");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_GameMode_GunFight.BP_GameMode_GunFight_C.Second On Server Passed
// (BlueprintCallable, BlueprintEvent)

void ABP_GameMode_GunFight_C::Second_On_Server_Passed()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_GameMode_GunFight_C", "Second On Server Passed");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_GameMode_GunFight.BP_GameMode_GunFight_C.Player Connected To Match
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// class ABP_PlayerController_GunFight_C*  Player_Controller                                      (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_GameMode_GunFight_C::Player_Connected_To_Match(class ABP_PlayerController_GunFight_C* Player_Controller)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_GameMode_GunFight_C", "Player Connected To Match");

	Params::BP_GameMode_GunFight_C_Player_Connected_To_Match Parms{};

	Parms.Player_Controller = Player_Controller;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_GameMode_GunFight.BP_GameMode_GunFight_C.Attackers Won
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// EGunFightWinReason                      Win_Reason                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_GameMode_GunFight_C::Attackers_Won(EGunFightWinReason Win_Reason)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_GameMode_GunFight_C", "Attackers Won");

	Params::BP_GameMode_GunFight_C_Attackers_Won Parms{};

	Parms.Win_Reason = Win_Reason;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_GameMode_GunFight.BP_GameMode_GunFight_C.Defenders Won
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// EGunFightWinReason                      Win_Reason                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_GameMode_GunFight_C::Defenders_Won(EGunFightWinReason Win_Reason)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_GameMode_GunFight_C", "Defenders Won");

	Params::BP_GameMode_GunFight_C_Defenders_Won Parms{};

	Parms.Win_Reason = Win_Reason;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_GameMode_GunFight.BP_GameMode_GunFight_C.Player Died
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// class ABP_Character_GunFight_C*         Victim_Character                                       (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class AHumanCharacter*                  Killer_Character                                       (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// EDamageType                             DamageType                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class UClass*                           Instigating_Item                                       (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    IsHeadshot                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ABP_GameMode_GunFight_C::Player_Died(class ABP_Character_GunFight_C* Victim_Character, class AHumanCharacter* Killer_Character, EDamageType DamageType, class UClass* Instigating_Item, bool IsHeadshot)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_GameMode_GunFight_C", "Player Died");

	Params::BP_GameMode_GunFight_C_Player_Died Parms{};

	Parms.Victim_Character = Victim_Character;
	Parms.Killer_Character = Killer_Character;
	Parms.DamageType = DamageType;
	Parms.Instigating_Item = Instigating_Item;
	Parms.IsHeadshot = IsHeadshot;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_GameMode_GunFight.BP_GameMode_GunFight_C.DEV_CollectTelemetry
// (Net, NetServer, BlueprintCallable, BlueprintEvent)

void ABP_GameMode_GunFight_C::DEV_CollectTelemetry()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_GameMode_GunFight_C", "DEV_CollectTelemetry");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_GameMode_GunFight.BP_GameMode_GunFight_C.ReceiveAFK_CheckResult
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    bToBeKicked                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// bool                                    Attempted                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// class ABP_PlayerController_GunFight_C*  Controller                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_GameMode_GunFight_C::ReceiveAFK_CheckResult(bool bToBeKicked, bool Attempted, class ABP_PlayerController_GunFight_C* Controller)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_GameMode_GunFight_C", "ReceiveAFK_CheckResult");

	Params::BP_GameMode_GunFight_C_ReceiveAFK_CheckResult Parms{};

	Parms.bToBeKicked = bToBeKicked;
	Parms.Attempted = Attempted;
	Parms.Controller = Controller;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_GameMode_GunFight.BP_GameMode_GunFight_C.CheckForVoteKickTimeout
// (BlueprintCallable, BlueprintEvent)

void ABP_GameMode_GunFight_C::CheckForVoteKickTimeout()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_GameMode_GunFight_C", "CheckForVoteKickTimeout");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_GameMode_GunFight.BP_GameMode_GunFight_C.StartVotingTimeout
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// int32                                   TeamIndex                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_GameMode_GunFight_C::StartVotingTimeout(int32 TeamIndex)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_GameMode_GunFight_C", "StartVotingTimeout");

	Params::BP_GameMode_GunFight_C_StartVotingTimeout Parms{};

	Parms.TeamIndex = TeamIndex;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_GameMode_GunFight.BP_GameMode_GunFight_C.ClearKickVoting
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// int32                                   TeamIndex                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    ClearOnlyVoteTimes                                     (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ABP_GameMode_GunFight_C::ClearKickVoting(int32 TeamIndex, bool ClearOnlyVoteTimes)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_GameMode_GunFight_C", "ClearKickVoting");

	Params::BP_GameMode_GunFight_C_ClearKickVoting Parms{};

	Parms.TeamIndex = TeamIndex;
	Parms.ClearOnlyVoteTimes = ClearOnlyVoteTimes;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_GameMode_GunFight.BP_GameMode_GunFight_C.Match Start
// (BlueprintCallable, BlueprintEvent)

void ABP_GameMode_GunFight_C::Match_Start()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_GameMode_GunFight_C", "Match Start");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_GameMode_GunFight.BP_GameMode_GunFight_C.Move To Next Phase
// (BlueprintCallable, BlueprintEvent)

void ABP_GameMode_GunFight_C::Move_To_Next_Phase()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_GameMode_GunFight_C", "Move To Next Phase");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_GameMode_GunFight.BP_GameMode_GunFight_C.Match Finish
// (BlueprintCallable, BlueprintEvent)

void ABP_GameMode_GunFight_C::Match_Finish()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_GameMode_GunFight_C", "Match Finish");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_GameMode_GunFight.BP_GameMode_GunFight_C.Match Cleanup
// (BlueprintCallable, BlueprintEvent)

void ABP_GameMode_GunFight_C::Match_Cleanup()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_GameMode_GunFight_C", "Match Cleanup");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_GameMode_GunFight.BP_GameMode_GunFight_C.Match Initialization
// (BlueprintCallable, BlueprintEvent)

void ABP_GameMode_GunFight_C::Match_Initialization()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_GameMode_GunFight_C", "Match Initialization");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_GameMode_GunFight.BP_GameMode_GunFight_C.SkipToEndOfLoadoutPicker
// (BlueprintCallable, BlueprintEvent)

void ABP_GameMode_GunFight_C::SkipToEndOfLoadoutPicker()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_GameMode_GunFight_C", "SkipToEndOfLoadoutPicker");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_GameMode_GunFight.BP_GameMode_GunFight_C.AssignWeapons
// (BlueprintCallable, BlueprintEvent)

void ABP_GameMode_GunFight_C::AssignWeapons()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_GameMode_GunFight_C", "AssignWeapons");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_GameMode_GunFight.BP_GameMode_GunFight_C.Start the Round
// (BlueprintCallable, BlueprintEvent)

void ABP_GameMode_GunFight_C::Start_the_Round()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_GameMode_GunFight_C", "Start the Round");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_GameMode_GunFight.BP_GameMode_GunFight_C.Spawn Objective
// (BlueprintCallable, BlueprintEvent)

void ABP_GameMode_GunFight_C::Spawn_Objective()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_GameMode_GunFight_C", "Spawn Objective");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_GameMode_GunFight.BP_GameMode_GunFight_C.Initialize New Round
// (BlueprintCallable, BlueprintEvent)

void ABP_GameMode_GunFight_C::Initialize_New_Round()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_GameMode_GunFight_C", "Initialize New Round");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_GameMode_GunFight.BP_GameMode_GunFight_C.Round Timer Expired
// (BlueprintCallable, BlueprintEvent)

void ABP_GameMode_GunFight_C::Round_Timer_Expired()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_GameMode_GunFight_C", "Round Timer Expired");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_GameMode_GunFight.BP_GameMode_GunFight_C.Round In Progress
// (BlueprintCallable, BlueprintEvent)

void ABP_GameMode_GunFight_C::Round_In_Progress()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_GameMode_GunFight_C", "Round In Progress");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_GameMode_GunFight.BP_GameMode_GunFight_C.Round Start
// (BlueprintCallable, BlueprintEvent)

void ABP_GameMode_GunFight_C::Round_Start()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_GameMode_GunFight_C", "Round Start");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_GameMode_GunFight.BP_GameMode_GunFight_C.Round Finish
// (BlueprintCallable, BlueprintEvent)

void ABP_GameMode_GunFight_C::Round_Finish()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_GameMode_GunFight_C", "Round Finish");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_GameMode_GunFight.BP_GameMode_GunFight_C.Round Cleanup
// (BlueprintCallable, BlueprintEvent)

void ABP_GameMode_GunFight_C::Round_Cleanup()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_GameMode_GunFight_C", "Round Cleanup");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_GameMode_GunFight.BP_GameMode_GunFight_C.Round Initialization
// (BlueprintCallable, BlueprintEvent)

void ABP_GameMode_GunFight_C::Round_Initialization()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_GameMode_GunFight_C", "Round Initialization");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_GameMode_GunFight.BP_GameMode_GunFight_C.Players Result Sent To Cloud
// (HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FCloudRequestResult              RequestResult                                          (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
// class AHumanPlayerController*           Player                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FUserMatchReward                 Reward                                                 (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)

void ABP_GameMode_GunFight_C::Players_Result_Sent_To_Cloud(const struct FCloudRequestResult& RequestResult, class AHumanPlayerController* Player, const struct FUserMatchReward& Reward)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_GameMode_GunFight_C", "Players Result Sent To Cloud");

	Params::BP_GameMode_GunFight_C_Players_Result_Sent_To_Cloud Parms{};

	Parms.RequestResult = std::move(RequestResult);
	Parms.Player = Player;
	Parms.Reward = std::move(Reward);

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_GameMode_GunFight.BP_GameMode_GunFight_C.Match ID Available
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// class FString                           Match_ID                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)

void ABP_GameMode_GunFight_C::Match_ID_Available(const class FString& Match_ID)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_GameMode_GunFight_C", "Match ID Available");

	Params::BP_GameMode_GunFight_C_Match_ID_Available Parms{};

	Parms.Match_ID = std::move(Match_ID);

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_GameMode_GunFight.BP_GameMode_GunFight_C.Player Cloud Id available
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// class FString                           Userid                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)

void ABP_GameMode_GunFight_C::Player_Cloud_Id_available(const class FString& Userid)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_GameMode_GunFight_C", "Player Cloud Id available");

	Params::BP_GameMode_GunFight_C_Player_Cloud_Id_available Parms{};

	Parms.Userid = std::move(Userid);

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_GameMode_GunFight.BP_GameMode_GunFight_C.Register Player Match ID
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// class ABP_PlayerController_GunFight_C*  Player_Controller                                      (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_GameMode_GunFight_C::Register_Player_Match_ID(class ABP_PlayerController_GunFight_C* Player_Controller)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_GameMode_GunFight_C", "Register Player Match ID");

	Params::BP_GameMode_GunFight_C_Register_Player_Match_ID Parms{};

	Parms.Player_Controller = Player_Controller;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_GameMode_GunFight.BP_GameMode_GunFight_C.All Player Results Sent
// (BlueprintCallable, BlueprintEvent)

void ABP_GameMode_GunFight_C::All_Player_Results_Sent()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_GameMode_GunFight_C", "All Player Results Sent");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_GameMode_GunFight.BP_GameMode_GunFight_C.Match Unregistered From Cloud
// (HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FCloudRequestResult              RequestResult                                          (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)

void ABP_GameMode_GunFight_C::Match_Unregistered_From_Cloud(const struct FCloudRequestResult& RequestResult)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_GameMode_GunFight_C", "Match Unregistered From Cloud");

	Params::BP_GameMode_GunFight_C_Match_Unregistered_From_Cloud Parms{};

	Parms.RequestResult = std::move(RequestResult);

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_GameMode_GunFight.BP_GameMode_GunFight_C.Match Registered To Cloud
// (HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FCloudRequestResult              RequestResult                                          (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
// class FString                           MatchID                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)

void ABP_GameMode_GunFight_C::Match_Registered_To_Cloud(const struct FCloudRequestResult& RequestResult, const class FString& MatchID)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_GameMode_GunFight_C", "Match Registered To Cloud");

	Params::BP_GameMode_GunFight_C_Match_Registered_To_Cloud Parms{};

	Parms.RequestResult = std::move(RequestResult);
	Parms.MatchID = std::move(MatchID);

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_GameMode_GunFight.BP_GameMode_GunFight_C.User Registered To Cloud
// (HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FCloudRequestResult              RequestResult                                          (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
// class AHumanPlayerController*           Player                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_GameMode_GunFight_C::User_Registered_To_Cloud(const struct FCloudRequestResult& RequestResult, class AHumanPlayerController* Player)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_GameMode_GunFight_C", "User Registered To Cloud");

	Params::BP_GameMode_GunFight_C_User_Registered_To_Cloud Parms{};

	Parms.RequestResult = std::move(RequestResult);
	Parms.Player = Player;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_GameMode_GunFight.BP_GameMode_GunFight_C.Cheat_SetRoundsToWin
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// int32                                   RoundsToWin                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_GameMode_GunFight_C::Cheat_SetRoundsToWin(int32 RoundsToWin)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_GameMode_GunFight_C", "Cheat_SetRoundsToWin");

	Params::BP_GameMode_GunFight_C_Cheat_SetRoundsToWin Parms{};

	Parms.RoundsToWin = RoundsToWin;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_GameMode_GunFight.BP_GameMode_GunFight_C.Cheat_RollNewLoadouts
// (BlueprintCallable, BlueprintEvent)

void ABP_GameMode_GunFight_C::Cheat_RollNewLoadouts()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_GameMode_GunFight_C", "Cheat_RollNewLoadouts");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_GameMode_GunFight.BP_GameMode_GunFight_C.Cheat_SkipRound
// (BlueprintCallable, BlueprintEvent)

void ABP_GameMode_GunFight_C::Cheat_SkipRound()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_GameMode_GunFight_C", "Cheat_SkipRound");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_GameMode_GunFight.BP_GameMode_GunFight_C.Cheat_SkipMatch
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    bAttackersWon                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ABP_GameMode_GunFight_C::Cheat_SkipMatch(bool bAttackersWon)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_GameMode_GunFight_C", "Cheat_SkipMatch");

	Params::BP_GameMode_GunFight_C_Cheat_SkipMatch Parms{};

	Parms.bAttackersWon = bAttackersWon;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_GameMode_GunFight.BP_GameMode_GunFight_C.Cheat_ResetScore
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// class ABP_PlayerController_GunFight_C*  Controller                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_GameMode_GunFight_C::Cheat_ResetScore(class ABP_PlayerController_GunFight_C* Controller)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_GameMode_GunFight_C", "Cheat_ResetScore");

	Params::BP_GameMode_GunFight_C_Cheat_ResetScore Parms{};

	Parms.Controller = Controller;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_GameMode_GunFight.BP_GameMode_GunFight_C.Cheat_AddScore
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// class ABP_PlayerController_GunFight_C*  Controller                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class FName                             ScoreEvent                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_GameMode_GunFight_C::Cheat_AddScore(class ABP_PlayerController_GunFight_C* Controller, class FName ScoreEvent)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_GameMode_GunFight_C", "Cheat_AddScore");

	Params::BP_GameMode_GunFight_C_Cheat_AddScore Parms{};

	Parms.Controller = Controller;
	Parms.ScoreEvent = ScoreEvent;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_GameMode_GunFight.BP_GameMode_GunFight_C.Set Pause Match
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    Pause                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ABP_GameMode_GunFight_C::Set_Pause_Match(bool Pause)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_GameMode_GunFight_C", "Set Pause Match");

	Params::BP_GameMode_GunFight_C_Set_Pause_Match Parms{};

	Parms.Pause = Pause;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_GameMode_GunFight.BP_GameMode_GunFight_C.CheatEndMatch
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// int32                                   WinnerTeam                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_GameMode_GunFight_C::CheatEndMatch(int32 WinnerTeam)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_GameMode_GunFight_C", "CheatEndMatch");

	Params::BP_GameMode_GunFight_C_CheatEndMatch Parms{};

	Parms.WinnerTeam = WinnerTeam;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_GameMode_GunFight.BP_GameMode_GunFight_C.SetSettingID
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// int32                                   Input                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_GameMode_GunFight_C::SetSettingID(int32 Input)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_GameMode_GunFight_C", "SetSettingID");

	Params::BP_GameMode_GunFight_C_SetSettingID Parms{};

	Parms.Input = Input;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_GameMode_GunFight.BP_GameMode_GunFight_C.Find Objective Spawn Positions
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)

void ABP_GameMode_GunFight_C::Find_Objective_Spawn_Positions()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_GameMode_GunFight_C", "Find Objective Spawn Positions");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_GameMode_GunFight.BP_GameMode_GunFight_C.Spawn Objective On Server
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)

void ABP_GameMode_GunFight_C::Spawn_Objective_On_Server()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_GameMode_GunFight_C", "Spawn Objective On Server");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_GameMode_GunFight.BP_GameMode_GunFight_C.Destroy Objective On Server
// (Public, BlueprintCallable, BlueprintEvent)

void ABP_GameMode_GunFight_C::Destroy_Objective_On_Server()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_GameMode_GunFight_C", "Destroy Objective On Server");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_GameMode_GunFight.BP_GameMode_GunFight_C.Check for Winner
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    Winner_Found                                           (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
// class UBP_GSC_Team_Raid_C*              WinnerTeam                                             (Parm, OutParm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_GameMode_GunFight_C::Check_for_Winner(bool* Winner_Found, class UBP_GSC_Team_Raid_C** WinnerTeam)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_GameMode_GunFight_C", "Check for Winner");

	Params::BP_GameMode_GunFight_C_Check_for_Winner Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Winner_Found != nullptr)
		*Winner_Found = Parms.Winner_Found;

	if (WinnerTeam != nullptr)
		*WinnerTeam = Parms.WinnerTeam;
}


// Function BP_GameMode_GunFight.BP_GameMode_GunFight_C.Get Attacking Team
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// class UBP_GSC_Team_Raid_C*              Team                                                   (Parm, OutParm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_GameMode_GunFight_C::Get_Attacking_Team(class UBP_GSC_Team_Raid_C** Team)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_GameMode_GunFight_C", "Get Attacking Team");

	Params::BP_GameMode_GunFight_C_Get_Attacking_Team Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Team != nullptr)
		*Team = Parms.Team;
}


// Function BP_GameMode_GunFight.BP_GameMode_GunFight_C.Get Defending Team
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// class UBP_GSC_Team_Raid_C*              Defending_Team                                         (Parm, OutParm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_GameMode_GunFight_C::Get_Defending_Team(class UBP_GSC_Team_Raid_C** Defending_Team)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_GameMode_GunFight_C", "Get Defending Team");

	Params::BP_GameMode_GunFight_C_Get_Defending_Team Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Defending_Team != nullptr)
		*Defending_Team = Parms.Defending_Team;
}


// Function BP_GameMode_GunFight.BP_GameMode_GunFight_C.Spawn All Players
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)

void ABP_GameMode_GunFight_C::Spawn_All_Players()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_GameMode_GunFight_C", "Spawn All Players");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_GameMode_GunFight.BP_GameMode_GunFight_C.Get Round Winner by Player Elimination
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// class ABP_PlayerController_Teams_C*     Killed_Player_Controller                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    Attackers_Won                                          (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
// bool                                    Defenders_Won                                          (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ABP_GameMode_GunFight_C::Get_Round_Winner_by_Player_Elimination(class ABP_PlayerController_Teams_C* Killed_Player_Controller, bool* Attackers_Won, bool* Defenders_Won)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_GameMode_GunFight_C", "Get Round Winner by Player Elimination");

	Params::BP_GameMode_GunFight_C_Get_Round_Winner_by_Player_Elimination Parms{};

	Parms.Killed_Player_Controller = Killed_Player_Controller;

	UObject::ProcessEvent(Func, &Parms);

	if (Attackers_Won != nullptr)
		*Attackers_Won = Parms.Attackers_Won;

	if (Defenders_Won != nullptr)
		*Defenders_Won = Parms.Defenders_Won;
}


// Function BP_GameMode_GunFight.BP_GameMode_GunFight_C.Get All Players
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// TArray<class ABP_PlayerController_GunFight_C*>All_Players                                            (Parm, OutParm)

void ABP_GameMode_GunFight_C::Get_All_Players(TArray<class ABP_PlayerController_GunFight_C*>* All_Players)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_GameMode_GunFight_C", "Get All Players");

	Params::BP_GameMode_GunFight_C_Get_All_Players Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (All_Players != nullptr)
		*All_Players = std::move(Parms.All_Players);
}


// Function BP_GameMode_GunFight.BP_GameMode_GunFight_C.Spawn Player
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class AActor*                           Player_Start                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class ABP_PlayerController_C*           Player_Controller                                      (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_GameMode_GunFight_C::Spawn_Player(class AActor* Player_Start, class ABP_PlayerController_C* Player_Controller)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_GameMode_GunFight_C", "Spawn Player");

	Params::BP_GameMode_GunFight_C_Spawn_Player Parms{};

	Parms.Player_Start = Player_Start;
	Parms.Player_Controller = Player_Controller;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_GameMode_GunFight.BP_GameMode_GunFight_C.Get Player Spawn Position
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// class ABP_PlayerController_GunFight_C*  Player_Controller                                      (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class AActor*                           Spawn_Position                                         (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_GameMode_GunFight_C::Get_Player_Spawn_Position(class ABP_PlayerController_GunFight_C* Player_Controller, class AActor** Spawn_Position)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_GameMode_GunFight_C", "Get Player Spawn Position");

	Params::BP_GameMode_GunFight_C_Get_Player_Spawn_Position Parms{};

	Parms.Player_Controller = Player_Controller;

	UObject::ProcessEvent(Func, &Parms);

	if (Spawn_Position != nullptr)
		*Spawn_Position = Parms.Spawn_Position;
}


// Function BP_GameMode_GunFight.BP_GameMode_GunFight_C.Remove Objective Markers
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)

void ABP_GameMode_GunFight_C::Remove_Objective_Markers()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_GameMode_GunFight_C", "Remove Objective Markers");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_GameMode_GunFight.BP_GameMode_GunFight_C.Clean Map Of Corpse Containers
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)

void ABP_GameMode_GunFight_C::Clean_Map_Of_Corpse_Containers()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_GameMode_GunFight_C", "Clean Map Of Corpse Containers");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_GameMode_GunFight.BP_GameMode_GunFight_C.Get Player Statistics
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// class AHumanPlayerController*           Player_Controller                                      (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    Found                                                  (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
// struct FStruct_GunFightStatistics       Statistic                                              (Parm, OutParm, HasGetValueTypeHash)

void ABP_GameMode_GunFight_C::Get_Player_Statistics(class AHumanPlayerController* Player_Controller, bool* Found, struct FStruct_GunFightStatistics* Statistic)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_GameMode_GunFight_C", "Get Player Statistics");

	Params::BP_GameMode_GunFight_C_Get_Player_Statistics Parms{};

	Parms.Player_Controller = Player_Controller;

	UObject::ProcessEvent(Func, &Parms);

	if (Found != nullptr)
		*Found = Parms.Found;

	if (Statistic != nullptr)
		*Statistic = std::move(Parms.Statistic);
}


// Function BP_GameMode_GunFight.BP_GameMode_GunFight_C.Teleport All Players To Random Spawn
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)

void ABP_GameMode_GunFight_C::Teleport_All_Players_To_Random_Spawn()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_GameMode_GunFight_C", "Teleport All Players To Random Spawn");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_GameMode_GunFight.BP_GameMode_GunFight_C.Get Random Spawn Position
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// class AActor*                           Spawn_Position                                         (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_GameMode_GunFight_C::Get_Random_Spawn_Position(class AActor** Spawn_Position)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_GameMode_GunFight_C", "Get Random Spawn Position");

	Params::BP_GameMode_GunFight_C_Get_Random_Spawn_Position Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Spawn_Position != nullptr)
		*Spawn_Position = Parms.Spawn_Position;
}


// Function BP_GameMode_GunFight.BP_GameMode_GunFight_C.Set All Players Invicibility
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    Set_Invincible                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ABP_GameMode_GunFight_C::Set_All_Players_Invicibility(bool Set_Invincible)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_GameMode_GunFight_C", "Set All Players Invicibility");

	Params::BP_GameMode_GunFight_C_Set_All_Players_Invicibility Parms{};

	Parms.Set_Invincible = Set_Invincible;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_GameMode_GunFight.BP_GameMode_GunFight_C.Are Teams Full
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    Teams_Full                                             (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ABP_GameMode_GunFight_C::Are_Teams_Full(bool* Teams_Full)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_GameMode_GunFight_C", "Are Teams Full");

	Params::BP_GameMode_GunFight_C_Are_Teams_Full Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Teams_Full != nullptr)
		*Teams_Full = Parms.Teams_Full;
}


// Function BP_GameMode_GunFight.BP_GameMode_GunFight_C.PlayerCanRestart
// (Event, Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// class APlayerController*                Player                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)

bool ABP_GameMode_GunFight_C::PlayerCanRestart(class APlayerController* Player)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_GameMode_GunFight_C", "PlayerCanRestart");

	Params::BP_GameMode_GunFight_C_PlayerCanRestart Parms{};

	Parms.Player = Player;

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function BP_GameMode_GunFight.BP_GameMode_GunFight_C.Player Died Update Statistic
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// class AHumanCharacter*                  Victim_Character                                       (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class AHumanCharacter*                  Killer_Character                                       (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    Is_Headshot                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ABP_GameMode_GunFight_C::Player_Died_Update_Statistic(class AHumanCharacter* Victim_Character, class AHumanCharacter* Killer_Character, bool Is_Headshot)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_GameMode_GunFight_C", "Player Died Update Statistic");

	Params::BP_GameMode_GunFight_C_Player_Died_Update_Statistic Parms{};

	Parms.Victim_Character = Victim_Character;
	Parms.Killer_Character = Killer_Character;
	Parms.Is_Headshot = Is_Headshot;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_GameMode_GunFight.BP_GameMode_GunFight_C.Increase Objective Statistic
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// class AHumanCharacter*                  Character                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_GameMode_GunFight_C::Increase_Objective_Statistic(class AHumanCharacter* Character)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_GameMode_GunFight_C", "Increase Objective Statistic");

	Params::BP_GameMode_GunFight_C_Increase_Objective_Statistic Parms{};

	Parms.Character = Character;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_GameMode_GunFight.BP_GameMode_GunFight_C.Get Team With More Health
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// class UBP_GSC_Team_Raid_C*              Team_With_More_Health                                  (Parm, OutParm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_GameMode_GunFight_C::Get_Team_With_More_Health(class UBP_GSC_Team_Raid_C** Team_With_More_Health)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_GameMode_GunFight_C", "Get Team With More Health");

	Params::BP_GameMode_GunFight_C_Get_Team_With_More_Health Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Team_With_More_Health != nullptr)
		*Team_With_More_Health = Parms.Team_With_More_Health;
}


// Function BP_GameMode_GunFight.BP_GameMode_GunFight_C.Assign New Setting ID
// (Public, BlueprintCallable, BlueprintEvent)

void ABP_GameMode_GunFight_C::Assign_New_Setting_ID()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_GameMode_GunFight_C", "Assign New Setting ID");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_GameMode_GunFight.BP_GameMode_GunFight_C.Replicate Players Kill Feed
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// class AHumanCharacter*                  Victim                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class AHumanCharacter*                  Killer                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// EDamageType                             Damage_Type                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class UClass*                           Instigating_Item                                       (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    Is_Headshot                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ABP_GameMode_GunFight_C::Replicate_Players_Kill_Feed(class AHumanCharacter* Victim, class AHumanCharacter* Killer, EDamageType Damage_Type, class UClass* Instigating_Item, bool Is_Headshot)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_GameMode_GunFight_C", "Replicate Players Kill Feed");

	Params::BP_GameMode_GunFight_C_Replicate_Players_Kill_Feed Parms{};

	Parms.Victim = Victim;
	Parms.Killer = Killer;
	Parms.Damage_Type = Damage_Type;
	Parms.Instigating_Item = Instigating_Item;
	Parms.Is_Headshot = Is_Headshot;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_GameMode_GunFight.BP_GameMode_GunFight_C.Evaluate Score
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// struct FStruct_GunFightStatistics       Statistic                                              (BlueprintVisible, BlueprintReadOnly, Parm, HasGetValueTypeHash)
// struct FStruct_GunFightStatistics       Evaluated_Statistic                                    (Parm, OutParm, HasGetValueTypeHash)

void ABP_GameMode_GunFight_C::Evaluate_Score(const struct FStruct_GunFightStatistics& Statistic, struct FStruct_GunFightStatistics* Evaluated_Statistic)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_GameMode_GunFight_C", "Evaluate Score");

	Params::BP_GameMode_GunFight_C_Evaluate_Score Parms{};

	Parms.Statistic = std::move(Statistic);

	UObject::ProcessEvent(Func, &Parms);

	if (Evaluated_Statistic != nullptr)
		*Evaluated_Statistic = std::move(Parms.Evaluated_Statistic);
}


// Function BP_GameMode_GunFight.BP_GameMode_GunFight_C.Evaluate Gunfight Score With Boosters
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// struct FStruct_GunFightStatistics       Statistic                                              (BlueprintVisible, BlueprintReadOnly, Parm, HasGetValueTypeHash)
// int32                                   TeamIndex                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FStruct_GunFightStatistics       Evaluated_Statistic                                    (Parm, OutParm, HasGetValueTypeHash)

void ABP_GameMode_GunFight_C::Evaluate_Gunfight_Score_With_Boosters(const struct FStruct_GunFightStatistics& Statistic, int32 TeamIndex, struct FStruct_GunFightStatistics* Evaluated_Statistic)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_GameMode_GunFight_C", "Evaluate Gunfight Score With Boosters");

	Params::BP_GameMode_GunFight_C_Evaluate_Gunfight_Score_With_Boosters Parms{};

	Parms.Statistic = std::move(Statistic);
	Parms.TeamIndex = TeamIndex;

	UObject::ProcessEvent(Func, &Parms);

	if (Evaluated_Statistic != nullptr)
		*Evaluated_Statistic = std::move(Parms.Evaluated_Statistic);
}


// Function BP_GameMode_GunFight.BP_GameMode_GunFight_C.Set Total Team Score
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// TArray<class ABP_PlayerState_Teams_C*>  TeamMembersPlayerStates                                (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
// bool                                    bWon                                                   (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ABP_GameMode_GunFight_C::Set_Total_Team_Score(TArray<class ABP_PlayerState_Teams_C*>& TeamMembersPlayerStates, bool bWon)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_GameMode_GunFight_C", "Set Total Team Score");

	Params::BP_GameMode_GunFight_C_Set_Total_Team_Score Parms{};

	Parms.TeamMembersPlayerStates = std::move(TeamMembersPlayerStates);
	Parms.bWon = bWon;

	UObject::ProcessEvent(Func, &Parms);

	TeamMembersPlayerStates = std::move(Parms.TeamMembersPlayerStates);
}


// Function BP_GameMode_GunFight.BP_GameMode_GunFight_C.Evaluate And Return Total Team Score
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// TArray<class ABP_PlayerState_Teams_C*>  TeamMembersPlayerStates                                (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
// bool                                    bWon                                                   (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// int32                                   Total_Team_Score                                       (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   ThresholdMultiplier                                    (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_GameMode_GunFight_C::Evaluate_And_Return_Total_Team_Score(TArray<class ABP_PlayerState_Teams_C*>& TeamMembersPlayerStates, bool bWon, int32* Total_Team_Score, float* ThresholdMultiplier)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_GameMode_GunFight_C", "Evaluate And Return Total Team Score");

	Params::BP_GameMode_GunFight_C_Evaluate_And_Return_Total_Team_Score Parms{};

	Parms.TeamMembersPlayerStates = std::move(TeamMembersPlayerStates);
	Parms.bWon = bWon;

	UObject::ProcessEvent(Func, &Parms);

	TeamMembersPlayerStates = std::move(Parms.TeamMembersPlayerStates);

	if (Total_Team_Score != nullptr)
		*Total_Team_Score = Parms.Total_Team_Score;

	if (ThresholdMultiplier != nullptr)
		*ThresholdMultiplier = Parms.ThresholdMultiplier;
}


// Function BP_GameMode_GunFight.BP_GameMode_GunFight_C.Get Score Value From Table
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// class FName                             Score_Type                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   Score                                                  (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_GameMode_GunFight_C::Get_Score_Value_From_Table(class FName Score_Type, int32* Score)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_GameMode_GunFight_C", "Get Score Value From Table");

	Params::BP_GameMode_GunFight_C_Get_Score_Value_From_Table Parms{};

	Parms.Score_Type = Score_Type;

	UObject::ProcessEvent(Func, &Parms);

	if (Score != nullptr)
		*Score = Parms.Score;
}


// Function BP_GameMode_GunFight.BP_GameMode_GunFight_C.Find Barricades
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)

void ABP_GameMode_GunFight_C::Find_Barricades()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_GameMode_GunFight_C", "Find Barricades");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_GameMode_GunFight.BP_GameMode_GunFight_C.Set Barricades Active State
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    Is_active                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ABP_GameMode_GunFight_C::Set_Barricades_Active_State(bool Is_active)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_GameMode_GunFight_C", "Set Barricades Active State");

	Params::BP_GameMode_GunFight_C_Set_Barricades_Active_State Parms{};

	Parms.Is_active = Is_active;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_GameMode_GunFight.BP_GameMode_GunFight_C.Get Survivor Count
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// int32                                   Attacker_Survivors                                     (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   Defender_Survivors                                     (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_GameMode_GunFight_C::Get_Survivor_Count(int32* Attacker_Survivors, int32* Defender_Survivors)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_GameMode_GunFight_C", "Get Survivor Count");

	Params::BP_GameMode_GunFight_C_Get_Survivor_Count Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Attacker_Survivors != nullptr)
		*Attacker_Survivors = Parms.Attacker_Survivors;

	if (Defender_Survivors != nullptr)
		*Defender_Survivors = Parms.Defender_Survivors;
}


// Function BP_GameMode_GunFight.BP_GameMode_GunFight_C.Increase TeamDamage Statistic
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// float                                   Damage                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class AHumanCharacter*                  Character                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_GameMode_GunFight_C::Increase_TeamDamage_Statistic(float Damage, class AHumanCharacter* Character)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_GameMode_GunFight_C", "Increase TeamDamage Statistic");

	Params::BP_GameMode_GunFight_C_Increase_TeamDamage_Statistic Parms{};

	Parms.Damage = Damage;
	Parms.Character = Character;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_GameMode_GunFight.BP_GameMode_GunFight_C.Assign Roles To Players
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)

void ABP_GameMode_GunFight_C::Assign_Roles_To_Players()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_GameMode_GunFight_C", "Assign Roles To Players");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_GameMode_GunFight.BP_GameMode_GunFight_C.Select Objective Spawn Point
// (Public, BlueprintCallable, BlueprintEvent)

void ABP_GameMode_GunFight_C::Select_Objective_Spawn_Point()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_GameMode_GunFight_C", "Select Objective Spawn Point");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_GameMode_GunFight.BP_GameMode_GunFight_C.Show Players Objective Spawn Position
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)

void ABP_GameMode_GunFight_C::Show_Players_Objective_Spawn_Position()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_GameMode_GunFight_C", "Show Players Objective Spawn Position");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_GameMode_GunFight.BP_GameMode_GunFight_C.Increase EnemyHit Statistic
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// float                                   Damage                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class AHumanCharacter*                  Character                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_GameMode_GunFight_C::Increase_EnemyHit_Statistic(float Damage, class AHumanCharacter* Character)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_GameMode_GunFight_C", "Increase EnemyHit Statistic");

	Params::BP_GameMode_GunFight_C_Increase_EnemyHit_Statistic Parms{};

	Parms.Damage = Damage;
	Parms.Character = Character;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_GameMode_GunFight.BP_GameMode_GunFight_C.Process All Player Results on Match End
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)

void ABP_GameMode_GunFight_C::Process_All_Player_Results_on_Match_End()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_GameMode_GunFight_C", "Process All Player Results on Match End");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_GameMode_GunFight.BP_GameMode_GunFight_C.Process Single Player Result
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// class ABP_PlayerState_GunFight_C*       Player_State                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    Is_Winner                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// bool                                    End_Of_Match                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ABP_GameMode_GunFight_C::Process_Single_Player_Result(class ABP_PlayerState_GunFight_C* Player_State, bool Is_Winner, bool End_Of_Match)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_GameMode_GunFight_C", "Process Single Player Result");

	Params::BP_GameMode_GunFight_C_Process_Single_Player_Result Parms{};

	Parms.Player_State = Player_State;
	Parms.Is_Winner = Is_Winner;
	Parms.End_Of_Match = End_Of_Match;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_GameMode_GunFight.BP_GameMode_GunFight_C.OnPlayerDied
// (Event, Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// class AHumanCharacter*                  Player                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class AHumanCharacter*                  Killer                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)

bool ABP_GameMode_GunFight_C::OnPlayerDied(class AHumanCharacter* Player, class AHumanCharacter* Killer)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_GameMode_GunFight_C", "OnPlayerDied");

	Params::BP_GameMode_GunFight_C_OnPlayerDied Parms{};

	Parms.Player = Player;
	Parms.Killer = Killer;

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function BP_GameMode_GunFight.BP_GameMode_GunFight_C.GetTeammates
// (Event, Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// class AHumanPlayerController*           Player                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// TArray<class AHumanPlayerController*>   OutControllerList                                      (Parm, OutParm)

void ABP_GameMode_GunFight_C::GetTeammates(class AHumanPlayerController* Player, TArray<class AHumanPlayerController*>* OutControllerList)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_GameMode_GunFight_C", "GetTeammates");

	Params::BP_GameMode_GunFight_C_GetTeammates Parms{};

	Parms.Player = Player;

	UObject::ProcessEvent(Func, &Parms);

	if (OutControllerList != nullptr)
		*OutControllerList = std::move(Parms.OutControllerList);
}


// Function BP_GameMode_GunFight.BP_GameMode_GunFight_C.ResetAllSpawns
// (Public, BlueprintCallable, BlueprintEvent)

void ABP_GameMode_GunFight_C::ResetAllSpawns()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_GameMode_GunFight_C", "ResetAllSpawns");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_GameMode_GunFight.BP_GameMode_GunFight_C.GetSpawnForTeam
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// TArray<class ABP_PlayerStart_Raid_C*>   PlayerStarts_0                                         (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
// class ABP_PlayerController_GunFight_C*  PlayerController                                       (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class AActor*                           Random_Secondary_Start                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_GameMode_GunFight_C::GetSpawnForTeam(TArray<class ABP_PlayerStart_Raid_C*>& PlayerStarts_0, class ABP_PlayerController_GunFight_C* PlayerController, class AActor** Random_Secondary_Start)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_GameMode_GunFight_C", "GetSpawnForTeam");

	Params::BP_GameMode_GunFight_C_GetSpawnForTeam Parms{};

	Parms.PlayerStarts_0 = std::move(PlayerStarts_0);
	Parms.PlayerController = PlayerController;

	UObject::ProcessEvent(Func, &Parms);

	PlayerStarts_0 = std::move(Parms.PlayerStarts_0);

	if (Random_Secondary_Start != nullptr)
		*Random_Secondary_Start = Parms.Random_Secondary_Start;
}


// Function BP_GameMode_GunFight.BP_GameMode_GunFight_C.GetPlayerTierOfReward
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// class ABP_PlayerController_C*           Player                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class FName                             Tier                                                   (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_GameMode_GunFight_C::GetPlayerTierOfReward(class ABP_PlayerController_C* Player, class FName* Tier)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_GameMode_GunFight_C", "GetPlayerTierOfReward");

	Params::BP_GameMode_GunFight_C_GetPlayerTierOfReward Parms{};

	Parms.Player = Player;

	UObject::ProcessEvent(Func, &Parms);

	if (Tier != nullptr)
		*Tier = Parms.Tier;
}


// Function BP_GameMode_GunFight.BP_GameMode_GunFight_C.CleanLoadoutSlots
// (Public, BlueprintCallable, BlueprintEvent)

void ABP_GameMode_GunFight_C::CleanLoadoutSlots()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_GameMode_GunFight_C", "CleanLoadoutSlots");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_GameMode_GunFight.BP_GameMode_GunFight_C.UpdateTicketCount
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class ABP_PlayerController_GunFight_C*  PlayerController                                       (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class ABP_PlayerState_GunFight_C*       PlayerState                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_GameMode_GunFight_C::UpdateTicketCount(class ABP_PlayerController_GunFight_C* PlayerController, class ABP_PlayerState_GunFight_C* PlayerState)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_GameMode_GunFight_C", "UpdateTicketCount");

	Params::BP_GameMode_GunFight_C_UpdateTicketCount Parms{};

	Parms.PlayerController = PlayerController;
	Parms.PlayerState = PlayerState;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_GameMode_GunFight.BP_GameMode_GunFight_C.SetPickedLoadoutToPlayers
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)

void ABP_GameMode_GunFight_C::SetPickedLoadoutToPlayers()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_GameMode_GunFight_C", "SetPickedLoadoutToPlayers");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_GameMode_GunFight.BP_GameMode_GunFight_C.GetPlayerStartsForLobby
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// TArray<class ABP_PlayerStart_Raid_C*>   LobbyCharStarts                                        (Parm, OutParm)

void ABP_GameMode_GunFight_C::GetPlayerStartsForLobby(TArray<class ABP_PlayerStart_Raid_C*>* LobbyCharStarts)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_GameMode_GunFight_C", "GetPlayerStartsForLobby");

	Params::BP_GameMode_GunFight_C_GetPlayerStartsForLobby Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (LobbyCharStarts != nullptr)
		*LobbyCharStarts = std::move(Parms.LobbyCharStarts);
}


// Function BP_GameMode_GunFight.BP_GameMode_GunFight_C.ReadyToStartMatch
// (Event, Protected, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)

bool ABP_GameMode_GunFight_C::ReadyToStartMatch()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_GameMode_GunFight_C", "ReadyToStartMatch");

	Params::BP_GameMode_GunFight_C_ReadyToStartMatch Parms{};

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function BP_GameMode_GunFight.BP_GameMode_GunFight_C.ShouldStartMatchBP
// (Event, Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)

bool ABP_GameMode_GunFight_C::ShouldStartMatchBP()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_GameMode_GunFight_C", "ShouldStartMatchBP");

	Params::BP_GameMode_GunFight_C_ShouldStartMatchBP Parms{};

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function BP_GameMode_GunFight.BP_GameMode_GunFight_C.Increase WholeTeamSurvived Statistic
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// class ABP_PlayerState_Teams_C*          PlayerState                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    AttackersWon                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ABP_GameMode_GunFight_C::Increase_WholeTeamSurvived_Statistic(class ABP_PlayerState_Teams_C* PlayerState, bool AttackersWon)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_GameMode_GunFight_C", "Increase WholeTeamSurvived Statistic");

	Params::BP_GameMode_GunFight_C_Increase_WholeTeamSurvived_Statistic Parms{};

	Parms.PlayerState = PlayerState;
	Parms.AttackersWon = AttackersWon;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_GameMode_GunFight.BP_GameMode_GunFight_C.CheckIfWholeTeamSurvived
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// class UBP_GSC_Team_C*                   Team                                                   (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    bWholeTeamSurvived                                     (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ABP_GameMode_GunFight_C::CheckIfWholeTeamSurvived(class UBP_GSC_Team_C* Team, bool* bWholeTeamSurvived)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_GameMode_GunFight_C", "CheckIfWholeTeamSurvived");

	Params::BP_GameMode_GunFight_C_CheckIfWholeTeamSurvived Parms{};

	Parms.Team = Team;

	UObject::ProcessEvent(Func, &Parms);

	if (bWholeTeamSurvived != nullptr)
		*bWholeTeamSurvived = Parms.bWholeTeamSurvived;
}


// Function BP_GameMode_GunFight.BP_GameMode_GunFight_C.AddCorrectWholeTeamSurvivedScore
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// struct FStruct_GunFightStatistics       Statistics                                             (BlueprintVisible, BlueprintReadOnly, Parm, HasGetValueTypeHash)
// bool                                    AttackersSurvived                                      (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// struct FStruct_GunFightStatistics       StructOut                                              (Parm, OutParm, HasGetValueTypeHash)

void ABP_GameMode_GunFight_C::AddCorrectWholeTeamSurvivedScore(const struct FStruct_GunFightStatistics& Statistics, bool AttackersSurvived, struct FStruct_GunFightStatistics* StructOut)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_GameMode_GunFight_C", "AddCorrectWholeTeamSurvivedScore");

	Params::BP_GameMode_GunFight_C_AddCorrectWholeTeamSurvivedScore Parms{};

	Parms.Statistics = std::move(Statistics);
	Parms.AttackersSurvived = AttackersSurvived;

	UObject::ProcessEvent(Func, &Parms);

	if (StructOut != nullptr)
		*StructOut = std::move(Parms.StructOut);
}


// Function BP_GameMode_GunFight.BP_GameMode_GunFight_C.ScoreBoosterMultiplierEffect
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// int32                                   TeamIndex                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   Score                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   BoostedScore                                           (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_GameMode_GunFight_C::ScoreBoosterMultiplierEffect(int32 TeamIndex, int32 Score, int32* BoostedScore)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_GameMode_GunFight_C", "ScoreBoosterMultiplierEffect");

	Params::BP_GameMode_GunFight_C_ScoreBoosterMultiplierEffect Parms{};

	Parms.TeamIndex = TeamIndex;
	Parms.Score = Score;

	UObject::ProcessEvent(Func, &Parms);

	if (BoostedScore != nullptr)
		*BoostedScore = Parms.BoostedScore;
}


// Function BP_GameMode_GunFight.BP_GameMode_GunFight_C.Cheat_IncreaseScore
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// class FName                             ScoreEvent                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class ABP_PlayerController_GunFight_C*  GunfightController                                     (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_GameMode_GunFight_C::Cheat_IncreaseScore(class FName ScoreEvent, class ABP_PlayerController_GunFight_C* GunfightController)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_GameMode_GunFight_C", "Cheat_IncreaseScore");

	Params::BP_GameMode_GunFight_C_Cheat_IncreaseScore Parms{};

	Parms.ScoreEvent = ScoreEvent;
	Parms.GunfightController = GunfightController;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_GameMode_GunFight.BP_GameMode_GunFight_C.Cheat_ResetStatistics
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// class ABP_PlayerController_GunFight_C*  GunfightController                                     (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_GameMode_GunFight_C::Cheat_ResetStatistics(class ABP_PlayerController_GunFight_C* GunfightController)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_GameMode_GunFight_C", "Cheat_ResetStatistics");

	Params::BP_GameMode_GunFight_C_Cheat_ResetStatistics Parms{};

	Parms.GunfightController = GunfightController;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_GameMode_GunFight.BP_GameMode_GunFight_C.GetRewardByScore
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// int32                                   Score                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// TArray<struct FStruct_NonEncounterMatchRewards>PossibleRewards                                        (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
// float                                   ScoreThresholdsMultiplier                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FStruct_NonEncounterMatchRewards ReachedReward                                          (Parm, OutParm, HasGetValueTypeHash)

void ABP_GameMode_GunFight_C::GetRewardByScore(int32 Score, TArray<struct FStruct_NonEncounterMatchRewards>& PossibleRewards, float ScoreThresholdsMultiplier, struct FStruct_NonEncounterMatchRewards* ReachedReward)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_GameMode_GunFight_C", "GetRewardByScore");

	Params::BP_GameMode_GunFight_C_GetRewardByScore Parms{};

	Parms.Score = Score;
	Parms.PossibleRewards = std::move(PossibleRewards);
	Parms.ScoreThresholdsMultiplier = ScoreThresholdsMultiplier;

	UObject::ProcessEvent(Func, &Parms);

	PossibleRewards = std::move(Parms.PossibleRewards);

	if (ReachedReward != nullptr)
		*ReachedReward = std::move(Parms.ReachedReward);
}


// Function BP_GameMode_GunFight.BP_GameMode_GunFight_C.ResetAllPlayers
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)

void ABP_GameMode_GunFight_C::ResetAllPlayers()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_GameMode_GunFight_C", "ResetAllPlayers");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_GameMode_GunFight.BP_GameMode_GunFight_C.ResolveKickVoting
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// int32                                   TeamIndex                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    bShouldKick                                            (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ABP_GameMode_GunFight_C::ResolveKickVoting(int32 TeamIndex, bool* bShouldKick)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_GameMode_GunFight_C", "ResolveKickVoting");

	Params::BP_GameMode_GunFight_C_ResolveKickVoting Parms{};

	Parms.TeamIndex = TeamIndex;

	UObject::ProcessEvent(Func, &Parms);

	if (bShouldKick != nullptr)
		*bShouldKick = Parms.bShouldKick;
}


// Function BP_GameMode_GunFight.BP_GameMode_GunFight_C.VoteKick_GetVoteCounts
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// int32                                   TeamIndex                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   _YesCount                                              (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   _NoCount                                               (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_GameMode_GunFight_C::VoteKick_GetVoteCounts(int32 TeamIndex, int32* _YesCount, int32* _NoCount)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_GameMode_GunFight_C", "VoteKick_GetVoteCounts");

	Params::BP_GameMode_GunFight_C_VoteKick_GetVoteCounts Parms{};

	Parms.TeamIndex = TeamIndex;

	UObject::ProcessEvent(Func, &Parms);

	if (_YesCount != nullptr)
		*_YesCount = Parms._YesCount;

	if (_NoCount != nullptr)
		*_NoCount = Parms._NoCount;
}


// Function BP_GameMode_GunFight.BP_GameMode_GunFight_C.ReceiveKickVote
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// TMap<class ABP_PlayerController_GunFight_C*, bool>PlayerToKickVote                                       (BlueprintVisible, BlueprintReadOnly, Parm)
// bool                                    ReplicateVoteCount                                     (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// int32                                   TeamIndex                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_GameMode_GunFight_C::ReceiveKickVote(const TMap<class ABP_PlayerController_GunFight_C*, bool>& PlayerToKickVote, bool ReplicateVoteCount, int32 TeamIndex)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_GameMode_GunFight_C", "ReceiveKickVote");

	Params::BP_GameMode_GunFight_C_ReceiveKickVote Parms{};

	Parms.PlayerToKickVote = std::move(PlayerToKickVote);
	Parms.ReplicateVoteCount = ReplicateVoteCount;
	Parms.TeamIndex = TeamIndex;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_GameMode_GunFight.BP_GameMode_GunFight_C.Request Player Vote Kick
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// class ABP_PlayerState_GunFight_C*       PlayerToKick                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class ABP_PlayerState_GunFight_C*       PlayerStartingTheVote                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_GameMode_GunFight_C::Request_Player_Vote_Kick(class ABP_PlayerState_GunFight_C* PlayerToKick, class ABP_PlayerState_GunFight_C* PlayerStartingTheVote)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_GameMode_GunFight_C", "Request Player Vote Kick");

	Params::BP_GameMode_GunFight_C_Request_Player_Vote_Kick Parms{};

	Parms.PlayerToKick = PlayerToKick;
	Parms.PlayerStartingTheVote = PlayerStartingTheVote;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_GameMode_GunFight.BP_GameMode_GunFight_C.SendInKickAnalytics
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    VotingResult                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// int32                                   AFKCheck_Result                                        (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class UBP_GSC_Team_C*                   VotingTeam                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_GameMode_GunFight_C::SendInKickAnalytics(bool VotingResult, int32 AFKCheck_Result, class UBP_GSC_Team_C* VotingTeam)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_GameMode_GunFight_C", "SendInKickAnalytics");

	Params::BP_GameMode_GunFight_C_SendInKickAnalytics Parms{};

	Parms.VotingResult = VotingResult;
	Parms.AFKCheck_Result = AFKCheck_Result;
	Parms.VotingTeam = VotingTeam;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_GameMode_GunFight.BP_GameMode_GunFight_C.DEV_RecordPlayerPositions
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// class UJsonObject*                      AllPlayerPositions                                     (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_GameMode_GunFight_C::DEV_RecordPlayerPositions(class UJsonObject** AllPlayerPositions)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_GameMode_GunFight_C", "DEV_RecordPlayerPositions");

	Params::BP_GameMode_GunFight_C_DEV_RecordPlayerPositions Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (AllPlayerPositions != nullptr)
		*AllPlayerPositions = Parms.AllPlayerPositions;
}


// Function BP_GameMode_GunFight.BP_GameMode_GunFight_C.SendRoundFinishAnalytics
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)

void ABP_GameMode_GunFight_C::SendRoundFinishAnalytics()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_GameMode_GunFight_C", "SendRoundFinishAnalytics");

	UObject::ProcessEvent(Func, nullptr);
}

}

