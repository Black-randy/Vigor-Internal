#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_PlayableAreaExitVolume

#include "Basic.hpp"

#include "Engine_structs.hpp"


namespace SDK::Params
{

// Function BP_PlayableAreaExitVolume.BP_PlayableAreaExitVolume_C.ExecuteUbergraph_BP_PlayableAreaExitVolume
// 0x0208 (0x0208 - 0x0000)
struct BP_PlayableAreaExitVolume_C_ExecuteUbergraph_BP_PlayableAreaExitVolume final
{
public:
	int32                                         EntryPoint;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TDelegate<void()>                             K2Node_CreateDelegate_OutputDelegate;              // 0x0004(0x0010)(ZeroConstructor, NoDestructor)
	bool                                          CallFunc_HasAuthority_ReturnValue;                 // 0x0014(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_15[0x3];                                       // 0x0015(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UPrimitiveComponent*                    K2Node_ComponentBoundEvent_OverlappedComponent_2;  // 0x0018(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 K2Node_ComponentBoundEvent_OtherActor_2;           // 0x0020(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UPrimitiveComponent*                    K2Node_ComponentBoundEvent_OtherComp_2;            // 0x0028(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         K2Node_ComponentBoundEvent_OtherBodyIndex_2;       // 0x0030(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_ComponentBoundEvent_bFromSweep_1;           // 0x0034(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_35[0x3];                                       // 0x0035(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FHitResult                             K2Node_ComponentBoundEvent_SweepResult_1;          // 0x0038(0x008C)(ConstParm, IsPlainOldData, NoDestructor, ContainsInstancedReference)
	uint8                                         Pad_C4[0x4];                                       // 0x00C4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class AHumanCharacter*                        K2Node_DynamicCast_AsHuman_Character;              // 0x00C8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x00D0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_D1[0x7];                                       // 0x00D1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UEventSystem*                           CallFunc_GetEventSystem_ReturnValue;               // 0x00D8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ENetRole                                      CallFunc_GetNetworkRole_ReturnValue;               // 0x00E0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_E1[0x7];                                       // 0x00E1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UBP_EventSystem_C*                      K2Node_DynamicCast_AsBP_Event_System;              // 0x00E8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess_1;                     // 0x00F0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue;          // 0x00F1(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_F2[0x6];                                       // 0x00F2(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class UPrimitiveComponent*                    K2Node_ComponentBoundEvent_OverlappedComponent_1;  // 0x00F8(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 K2Node_ComponentBoundEvent_OtherActor_1;           // 0x0100(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UPrimitiveComponent*                    K2Node_ComponentBoundEvent_OtherComp_1;            // 0x0108(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         K2Node_ComponentBoundEvent_OtherBodyIndex_1;       // 0x0110(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_ComponentBoundEvent_bFromSweep;             // 0x0114(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_115[0x3];                                      // 0x0115(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FHitResult                             K2Node_ComponentBoundEvent_SweepResult;            // 0x0118(0x008C)(ConstParm, IsPlainOldData, NoDestructor, ContainsInstancedReference)
	uint8                                         Pad_1A4[0x4];                                      // 0x01A4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UPrimitiveComponent*                    K2Node_ComponentBoundEvent_OverlappedComponent;    // 0x01A8(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 K2Node_ComponentBoundEvent_OtherActor;             // 0x01B0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UPrimitiveComponent*                    K2Node_ComponentBoundEvent_OtherComp;              // 0x01B8(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         K2Node_ComponentBoundEvent_OtherBodyIndex;         // 0x01C0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1C4[0x4];                                      // 0x01C4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class ABP_Character_Script_C*                 K2Node_DynamicCast_AsBP_Character_Script;          // 0x01C8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess_2;                     // 0x01D0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_1D1[0x7];                                      // 0x01D1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class ABP_Character_Script_C*                 K2Node_DynamicCast_AsBP_Character_Script_1;        // 0x01D8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess_3;                     // 0x01E0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsDedicatedServer_ReturnValue;            // 0x01E1(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_1E2[0x6];                                      // 0x01E2(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class AGameModeBase*                          CallFunc_GetGameMode_ReturnValue;                  // 0x01E8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_HasAuthority_ReturnValue_1;               // 0x01F0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_1F1[0x7];                                      // 0x01F1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class ABP_GameMode_ADM_Public_C*              K2Node_DynamicCast_AsBP_Game_Mode_ADM_Public;      // 0x01F8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess_4;                     // 0x0200(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_PlayableAreaExitVolume_C_ExecuteUbergraph_BP_PlayableAreaExitVolume) == 0x000008, "Wrong alignment on BP_PlayableAreaExitVolume_C_ExecuteUbergraph_BP_PlayableAreaExitVolume");
static_assert(sizeof(BP_PlayableAreaExitVolume_C_ExecuteUbergraph_BP_PlayableAreaExitVolume) == 0x000208, "Wrong size on BP_PlayableAreaExitVolume_C_ExecuteUbergraph_BP_PlayableAreaExitVolume");
static_assert(offsetof(BP_PlayableAreaExitVolume_C_ExecuteUbergraph_BP_PlayableAreaExitVolume, EntryPoint) == 0x000000, "Member 'BP_PlayableAreaExitVolume_C_ExecuteUbergraph_BP_PlayableAreaExitVolume::EntryPoint' has a wrong offset!");
static_assert(offsetof(BP_PlayableAreaExitVolume_C_ExecuteUbergraph_BP_PlayableAreaExitVolume, K2Node_CreateDelegate_OutputDelegate) == 0x000004, "Member 'BP_PlayableAreaExitVolume_C_ExecuteUbergraph_BP_PlayableAreaExitVolume::K2Node_CreateDelegate_OutputDelegate' has a wrong offset!");
static_assert(offsetof(BP_PlayableAreaExitVolume_C_ExecuteUbergraph_BP_PlayableAreaExitVolume, CallFunc_HasAuthority_ReturnValue) == 0x000014, "Member 'BP_PlayableAreaExitVolume_C_ExecuteUbergraph_BP_PlayableAreaExitVolume::CallFunc_HasAuthority_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayableAreaExitVolume_C_ExecuteUbergraph_BP_PlayableAreaExitVolume, K2Node_ComponentBoundEvent_OverlappedComponent_2) == 0x000018, "Member 'BP_PlayableAreaExitVolume_C_ExecuteUbergraph_BP_PlayableAreaExitVolume::K2Node_ComponentBoundEvent_OverlappedComponent_2' has a wrong offset!");
static_assert(offsetof(BP_PlayableAreaExitVolume_C_ExecuteUbergraph_BP_PlayableAreaExitVolume, K2Node_ComponentBoundEvent_OtherActor_2) == 0x000020, "Member 'BP_PlayableAreaExitVolume_C_ExecuteUbergraph_BP_PlayableAreaExitVolume::K2Node_ComponentBoundEvent_OtherActor_2' has a wrong offset!");
static_assert(offsetof(BP_PlayableAreaExitVolume_C_ExecuteUbergraph_BP_PlayableAreaExitVolume, K2Node_ComponentBoundEvent_OtherComp_2) == 0x000028, "Member 'BP_PlayableAreaExitVolume_C_ExecuteUbergraph_BP_PlayableAreaExitVolume::K2Node_ComponentBoundEvent_OtherComp_2' has a wrong offset!");
static_assert(offsetof(BP_PlayableAreaExitVolume_C_ExecuteUbergraph_BP_PlayableAreaExitVolume, K2Node_ComponentBoundEvent_OtherBodyIndex_2) == 0x000030, "Member 'BP_PlayableAreaExitVolume_C_ExecuteUbergraph_BP_PlayableAreaExitVolume::K2Node_ComponentBoundEvent_OtherBodyIndex_2' has a wrong offset!");
static_assert(offsetof(BP_PlayableAreaExitVolume_C_ExecuteUbergraph_BP_PlayableAreaExitVolume, K2Node_ComponentBoundEvent_bFromSweep_1) == 0x000034, "Member 'BP_PlayableAreaExitVolume_C_ExecuteUbergraph_BP_PlayableAreaExitVolume::K2Node_ComponentBoundEvent_bFromSweep_1' has a wrong offset!");
static_assert(offsetof(BP_PlayableAreaExitVolume_C_ExecuteUbergraph_BP_PlayableAreaExitVolume, K2Node_ComponentBoundEvent_SweepResult_1) == 0x000038, "Member 'BP_PlayableAreaExitVolume_C_ExecuteUbergraph_BP_PlayableAreaExitVolume::K2Node_ComponentBoundEvent_SweepResult_1' has a wrong offset!");
static_assert(offsetof(BP_PlayableAreaExitVolume_C_ExecuteUbergraph_BP_PlayableAreaExitVolume, K2Node_DynamicCast_AsHuman_Character) == 0x0000C8, "Member 'BP_PlayableAreaExitVolume_C_ExecuteUbergraph_BP_PlayableAreaExitVolume::K2Node_DynamicCast_AsHuman_Character' has a wrong offset!");
static_assert(offsetof(BP_PlayableAreaExitVolume_C_ExecuteUbergraph_BP_PlayableAreaExitVolume, K2Node_DynamicCast_bSuccess) == 0x0000D0, "Member 'BP_PlayableAreaExitVolume_C_ExecuteUbergraph_BP_PlayableAreaExitVolume::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(BP_PlayableAreaExitVolume_C_ExecuteUbergraph_BP_PlayableAreaExitVolume, CallFunc_GetEventSystem_ReturnValue) == 0x0000D8, "Member 'BP_PlayableAreaExitVolume_C_ExecuteUbergraph_BP_PlayableAreaExitVolume::CallFunc_GetEventSystem_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayableAreaExitVolume_C_ExecuteUbergraph_BP_PlayableAreaExitVolume, CallFunc_GetNetworkRole_ReturnValue) == 0x0000E0, "Member 'BP_PlayableAreaExitVolume_C_ExecuteUbergraph_BP_PlayableAreaExitVolume::CallFunc_GetNetworkRole_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayableAreaExitVolume_C_ExecuteUbergraph_BP_PlayableAreaExitVolume, K2Node_DynamicCast_AsBP_Event_System) == 0x0000E8, "Member 'BP_PlayableAreaExitVolume_C_ExecuteUbergraph_BP_PlayableAreaExitVolume::K2Node_DynamicCast_AsBP_Event_System' has a wrong offset!");
static_assert(offsetof(BP_PlayableAreaExitVolume_C_ExecuteUbergraph_BP_PlayableAreaExitVolume, K2Node_DynamicCast_bSuccess_1) == 0x0000F0, "Member 'BP_PlayableAreaExitVolume_C_ExecuteUbergraph_BP_PlayableAreaExitVolume::K2Node_DynamicCast_bSuccess_1' has a wrong offset!");
static_assert(offsetof(BP_PlayableAreaExitVolume_C_ExecuteUbergraph_BP_PlayableAreaExitVolume, CallFunc_EqualEqual_ByteByte_ReturnValue) == 0x0000F1, "Member 'BP_PlayableAreaExitVolume_C_ExecuteUbergraph_BP_PlayableAreaExitVolume::CallFunc_EqualEqual_ByteByte_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayableAreaExitVolume_C_ExecuteUbergraph_BP_PlayableAreaExitVolume, K2Node_ComponentBoundEvent_OverlappedComponent_1) == 0x0000F8, "Member 'BP_PlayableAreaExitVolume_C_ExecuteUbergraph_BP_PlayableAreaExitVolume::K2Node_ComponentBoundEvent_OverlappedComponent_1' has a wrong offset!");
static_assert(offsetof(BP_PlayableAreaExitVolume_C_ExecuteUbergraph_BP_PlayableAreaExitVolume, K2Node_ComponentBoundEvent_OtherActor_1) == 0x000100, "Member 'BP_PlayableAreaExitVolume_C_ExecuteUbergraph_BP_PlayableAreaExitVolume::K2Node_ComponentBoundEvent_OtherActor_1' has a wrong offset!");
static_assert(offsetof(BP_PlayableAreaExitVolume_C_ExecuteUbergraph_BP_PlayableAreaExitVolume, K2Node_ComponentBoundEvent_OtherComp_1) == 0x000108, "Member 'BP_PlayableAreaExitVolume_C_ExecuteUbergraph_BP_PlayableAreaExitVolume::K2Node_ComponentBoundEvent_OtherComp_1' has a wrong offset!");
static_assert(offsetof(BP_PlayableAreaExitVolume_C_ExecuteUbergraph_BP_PlayableAreaExitVolume, K2Node_ComponentBoundEvent_OtherBodyIndex_1) == 0x000110, "Member 'BP_PlayableAreaExitVolume_C_ExecuteUbergraph_BP_PlayableAreaExitVolume::K2Node_ComponentBoundEvent_OtherBodyIndex_1' has a wrong offset!");
static_assert(offsetof(BP_PlayableAreaExitVolume_C_ExecuteUbergraph_BP_PlayableAreaExitVolume, K2Node_ComponentBoundEvent_bFromSweep) == 0x000114, "Member 'BP_PlayableAreaExitVolume_C_ExecuteUbergraph_BP_PlayableAreaExitVolume::K2Node_ComponentBoundEvent_bFromSweep' has a wrong offset!");
static_assert(offsetof(BP_PlayableAreaExitVolume_C_ExecuteUbergraph_BP_PlayableAreaExitVolume, K2Node_ComponentBoundEvent_SweepResult) == 0x000118, "Member 'BP_PlayableAreaExitVolume_C_ExecuteUbergraph_BP_PlayableAreaExitVolume::K2Node_ComponentBoundEvent_SweepResult' has a wrong offset!");
static_assert(offsetof(BP_PlayableAreaExitVolume_C_ExecuteUbergraph_BP_PlayableAreaExitVolume, K2Node_ComponentBoundEvent_OverlappedComponent) == 0x0001A8, "Member 'BP_PlayableAreaExitVolume_C_ExecuteUbergraph_BP_PlayableAreaExitVolume::K2Node_ComponentBoundEvent_OverlappedComponent' has a wrong offset!");
static_assert(offsetof(BP_PlayableAreaExitVolume_C_ExecuteUbergraph_BP_PlayableAreaExitVolume, K2Node_ComponentBoundEvent_OtherActor) == 0x0001B0, "Member 'BP_PlayableAreaExitVolume_C_ExecuteUbergraph_BP_PlayableAreaExitVolume::K2Node_ComponentBoundEvent_OtherActor' has a wrong offset!");
static_assert(offsetof(BP_PlayableAreaExitVolume_C_ExecuteUbergraph_BP_PlayableAreaExitVolume, K2Node_ComponentBoundEvent_OtherComp) == 0x0001B8, "Member 'BP_PlayableAreaExitVolume_C_ExecuteUbergraph_BP_PlayableAreaExitVolume::K2Node_ComponentBoundEvent_OtherComp' has a wrong offset!");
static_assert(offsetof(BP_PlayableAreaExitVolume_C_ExecuteUbergraph_BP_PlayableAreaExitVolume, K2Node_ComponentBoundEvent_OtherBodyIndex) == 0x0001C0, "Member 'BP_PlayableAreaExitVolume_C_ExecuteUbergraph_BP_PlayableAreaExitVolume::K2Node_ComponentBoundEvent_OtherBodyIndex' has a wrong offset!");
static_assert(offsetof(BP_PlayableAreaExitVolume_C_ExecuteUbergraph_BP_PlayableAreaExitVolume, K2Node_DynamicCast_AsBP_Character_Script) == 0x0001C8, "Member 'BP_PlayableAreaExitVolume_C_ExecuteUbergraph_BP_PlayableAreaExitVolume::K2Node_DynamicCast_AsBP_Character_Script' has a wrong offset!");
static_assert(offsetof(BP_PlayableAreaExitVolume_C_ExecuteUbergraph_BP_PlayableAreaExitVolume, K2Node_DynamicCast_bSuccess_2) == 0x0001D0, "Member 'BP_PlayableAreaExitVolume_C_ExecuteUbergraph_BP_PlayableAreaExitVolume::K2Node_DynamicCast_bSuccess_2' has a wrong offset!");
static_assert(offsetof(BP_PlayableAreaExitVolume_C_ExecuteUbergraph_BP_PlayableAreaExitVolume, K2Node_DynamicCast_AsBP_Character_Script_1) == 0x0001D8, "Member 'BP_PlayableAreaExitVolume_C_ExecuteUbergraph_BP_PlayableAreaExitVolume::K2Node_DynamicCast_AsBP_Character_Script_1' has a wrong offset!");
static_assert(offsetof(BP_PlayableAreaExitVolume_C_ExecuteUbergraph_BP_PlayableAreaExitVolume, K2Node_DynamicCast_bSuccess_3) == 0x0001E0, "Member 'BP_PlayableAreaExitVolume_C_ExecuteUbergraph_BP_PlayableAreaExitVolume::K2Node_DynamicCast_bSuccess_3' has a wrong offset!");
static_assert(offsetof(BP_PlayableAreaExitVolume_C_ExecuteUbergraph_BP_PlayableAreaExitVolume, CallFunc_IsDedicatedServer_ReturnValue) == 0x0001E1, "Member 'BP_PlayableAreaExitVolume_C_ExecuteUbergraph_BP_PlayableAreaExitVolume::CallFunc_IsDedicatedServer_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayableAreaExitVolume_C_ExecuteUbergraph_BP_PlayableAreaExitVolume, CallFunc_GetGameMode_ReturnValue) == 0x0001E8, "Member 'BP_PlayableAreaExitVolume_C_ExecuteUbergraph_BP_PlayableAreaExitVolume::CallFunc_GetGameMode_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayableAreaExitVolume_C_ExecuteUbergraph_BP_PlayableAreaExitVolume, CallFunc_HasAuthority_ReturnValue_1) == 0x0001F0, "Member 'BP_PlayableAreaExitVolume_C_ExecuteUbergraph_BP_PlayableAreaExitVolume::CallFunc_HasAuthority_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_PlayableAreaExitVolume_C_ExecuteUbergraph_BP_PlayableAreaExitVolume, K2Node_DynamicCast_AsBP_Game_Mode_ADM_Public) == 0x0001F8, "Member 'BP_PlayableAreaExitVolume_C_ExecuteUbergraph_BP_PlayableAreaExitVolume::K2Node_DynamicCast_AsBP_Game_Mode_ADM_Public' has a wrong offset!");
static_assert(offsetof(BP_PlayableAreaExitVolume_C_ExecuteUbergraph_BP_PlayableAreaExitVolume, K2Node_DynamicCast_bSuccess_4) == 0x000200, "Member 'BP_PlayableAreaExitVolume_C_ExecuteUbergraph_BP_PlayableAreaExitVolume::K2Node_DynamicCast_bSuccess_4' has a wrong offset!");

// Function BP_PlayableAreaExitVolume.BP_PlayableAreaExitVolume_C.BndEvt__OverlapVolume_K2Node_ComponentBoundEvent_2_ComponentEndOverlapSignature__DelegateSignature
// 0x0020 (0x0020 - 0x0000)
struct BP_PlayableAreaExitVolume_C_BndEvt__OverlapVolume_K2Node_ComponentBoundEvent_2_ComponentEndOverlapSignature__DelegateSignature final
{
public:
	class UPrimitiveComponent*                    OverlappedComponent;                               // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 OtherActor;                                        // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UPrimitiveComponent*                    OtherComp;                                         // 0x0010(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         OtherBodyIndex;                                    // 0x0018(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_PlayableAreaExitVolume_C_BndEvt__OverlapVolume_K2Node_ComponentBoundEvent_2_ComponentEndOverlapSignature__DelegateSignature) == 0x000008, "Wrong alignment on BP_PlayableAreaExitVolume_C_BndEvt__OverlapVolume_K2Node_ComponentBoundEvent_2_ComponentEndOverlapSignature__DelegateSignature");
static_assert(sizeof(BP_PlayableAreaExitVolume_C_BndEvt__OverlapVolume_K2Node_ComponentBoundEvent_2_ComponentEndOverlapSignature__DelegateSignature) == 0x000020, "Wrong size on BP_PlayableAreaExitVolume_C_BndEvt__OverlapVolume_K2Node_ComponentBoundEvent_2_ComponentEndOverlapSignature__DelegateSignature");
static_assert(offsetof(BP_PlayableAreaExitVolume_C_BndEvt__OverlapVolume_K2Node_ComponentBoundEvent_2_ComponentEndOverlapSignature__DelegateSignature, OverlappedComponent) == 0x000000, "Member 'BP_PlayableAreaExitVolume_C_BndEvt__OverlapVolume_K2Node_ComponentBoundEvent_2_ComponentEndOverlapSignature__DelegateSignature::OverlappedComponent' has a wrong offset!");
static_assert(offsetof(BP_PlayableAreaExitVolume_C_BndEvt__OverlapVolume_K2Node_ComponentBoundEvent_2_ComponentEndOverlapSignature__DelegateSignature, OtherActor) == 0x000008, "Member 'BP_PlayableAreaExitVolume_C_BndEvt__OverlapVolume_K2Node_ComponentBoundEvent_2_ComponentEndOverlapSignature__DelegateSignature::OtherActor' has a wrong offset!");
static_assert(offsetof(BP_PlayableAreaExitVolume_C_BndEvt__OverlapVolume_K2Node_ComponentBoundEvent_2_ComponentEndOverlapSignature__DelegateSignature, OtherComp) == 0x000010, "Member 'BP_PlayableAreaExitVolume_C_BndEvt__OverlapVolume_K2Node_ComponentBoundEvent_2_ComponentEndOverlapSignature__DelegateSignature::OtherComp' has a wrong offset!");
static_assert(offsetof(BP_PlayableAreaExitVolume_C_BndEvt__OverlapVolume_K2Node_ComponentBoundEvent_2_ComponentEndOverlapSignature__DelegateSignature, OtherBodyIndex) == 0x000018, "Member 'BP_PlayableAreaExitVolume_C_BndEvt__OverlapVolume_K2Node_ComponentBoundEvent_2_ComponentEndOverlapSignature__DelegateSignature::OtherBodyIndex' has a wrong offset!");

// Function BP_PlayableAreaExitVolume.BP_PlayableAreaExitVolume_C.BndEvt__OverlapVolume_K2Node_ComponentBoundEvent_1_ComponentBeginOverlapSignature__DelegateSignature
// 0x00B0 (0x00B0 - 0x0000)
struct BP_PlayableAreaExitVolume_C_BndEvt__OverlapVolume_K2Node_ComponentBoundEvent_1_ComponentBeginOverlapSignature__DelegateSignature final
{
public:
	class UPrimitiveComponent*                    OverlappedComponent;                               // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 OtherActor;                                        // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UPrimitiveComponent*                    OtherComp;                                         // 0x0010(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         OtherBodyIndex;                                    // 0x0018(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bFromSweep;                                        // 0x001C(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_1D[0x3];                                       // 0x001D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FHitResult                             SweepResult;                                       // 0x0020(0x008C)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, ContainsInstancedReference)
};
static_assert(alignof(BP_PlayableAreaExitVolume_C_BndEvt__OverlapVolume_K2Node_ComponentBoundEvent_1_ComponentBeginOverlapSignature__DelegateSignature) == 0x000008, "Wrong alignment on BP_PlayableAreaExitVolume_C_BndEvt__OverlapVolume_K2Node_ComponentBoundEvent_1_ComponentBeginOverlapSignature__DelegateSignature");
static_assert(sizeof(BP_PlayableAreaExitVolume_C_BndEvt__OverlapVolume_K2Node_ComponentBoundEvent_1_ComponentBeginOverlapSignature__DelegateSignature) == 0x0000B0, "Wrong size on BP_PlayableAreaExitVolume_C_BndEvt__OverlapVolume_K2Node_ComponentBoundEvent_1_ComponentBeginOverlapSignature__DelegateSignature");
static_assert(offsetof(BP_PlayableAreaExitVolume_C_BndEvt__OverlapVolume_K2Node_ComponentBoundEvent_1_ComponentBeginOverlapSignature__DelegateSignature, OverlappedComponent) == 0x000000, "Member 'BP_PlayableAreaExitVolume_C_BndEvt__OverlapVolume_K2Node_ComponentBoundEvent_1_ComponentBeginOverlapSignature__DelegateSignature::OverlappedComponent' has a wrong offset!");
static_assert(offsetof(BP_PlayableAreaExitVolume_C_BndEvt__OverlapVolume_K2Node_ComponentBoundEvent_1_ComponentBeginOverlapSignature__DelegateSignature, OtherActor) == 0x000008, "Member 'BP_PlayableAreaExitVolume_C_BndEvt__OverlapVolume_K2Node_ComponentBoundEvent_1_ComponentBeginOverlapSignature__DelegateSignature::OtherActor' has a wrong offset!");
static_assert(offsetof(BP_PlayableAreaExitVolume_C_BndEvt__OverlapVolume_K2Node_ComponentBoundEvent_1_ComponentBeginOverlapSignature__DelegateSignature, OtherComp) == 0x000010, "Member 'BP_PlayableAreaExitVolume_C_BndEvt__OverlapVolume_K2Node_ComponentBoundEvent_1_ComponentBeginOverlapSignature__DelegateSignature::OtherComp' has a wrong offset!");
static_assert(offsetof(BP_PlayableAreaExitVolume_C_BndEvt__OverlapVolume_K2Node_ComponentBoundEvent_1_ComponentBeginOverlapSignature__DelegateSignature, OtherBodyIndex) == 0x000018, "Member 'BP_PlayableAreaExitVolume_C_BndEvt__OverlapVolume_K2Node_ComponentBoundEvent_1_ComponentBeginOverlapSignature__DelegateSignature::OtherBodyIndex' has a wrong offset!");
static_assert(offsetof(BP_PlayableAreaExitVolume_C_BndEvt__OverlapVolume_K2Node_ComponentBoundEvent_1_ComponentBeginOverlapSignature__DelegateSignature, bFromSweep) == 0x00001C, "Member 'BP_PlayableAreaExitVolume_C_BndEvt__OverlapVolume_K2Node_ComponentBoundEvent_1_ComponentBeginOverlapSignature__DelegateSignature::bFromSweep' has a wrong offset!");
static_assert(offsetof(BP_PlayableAreaExitVolume_C_BndEvt__OverlapVolume_K2Node_ComponentBoundEvent_1_ComponentBeginOverlapSignature__DelegateSignature, SweepResult) == 0x000020, "Member 'BP_PlayableAreaExitVolume_C_BndEvt__OverlapVolume_K2Node_ComponentBoundEvent_1_ComponentBeginOverlapSignature__DelegateSignature::SweepResult' has a wrong offset!");

// Function BP_PlayableAreaExitVolume.BP_PlayableAreaExitVolume_C.BndEvt__Cylinder_K2Node_ComponentBoundEvent_0_ComponentBeginOverlapSignature__DelegateSignature
// 0x00B0 (0x00B0 - 0x0000)
struct BP_PlayableAreaExitVolume_C_BndEvt__Cylinder_K2Node_ComponentBoundEvent_0_ComponentBeginOverlapSignature__DelegateSignature final
{
public:
	class UPrimitiveComponent*                    OverlappedComponent;                               // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 OtherActor;                                        // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UPrimitiveComponent*                    OtherComp;                                         // 0x0010(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         OtherBodyIndex;                                    // 0x0018(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bFromSweep;                                        // 0x001C(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_1D[0x3];                                       // 0x001D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FHitResult                             SweepResult;                                       // 0x0020(0x008C)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, ContainsInstancedReference)
};
static_assert(alignof(BP_PlayableAreaExitVolume_C_BndEvt__Cylinder_K2Node_ComponentBoundEvent_0_ComponentBeginOverlapSignature__DelegateSignature) == 0x000008, "Wrong alignment on BP_PlayableAreaExitVolume_C_BndEvt__Cylinder_K2Node_ComponentBoundEvent_0_ComponentBeginOverlapSignature__DelegateSignature");
static_assert(sizeof(BP_PlayableAreaExitVolume_C_BndEvt__Cylinder_K2Node_ComponentBoundEvent_0_ComponentBeginOverlapSignature__DelegateSignature) == 0x0000B0, "Wrong size on BP_PlayableAreaExitVolume_C_BndEvt__Cylinder_K2Node_ComponentBoundEvent_0_ComponentBeginOverlapSignature__DelegateSignature");
static_assert(offsetof(BP_PlayableAreaExitVolume_C_BndEvt__Cylinder_K2Node_ComponentBoundEvent_0_ComponentBeginOverlapSignature__DelegateSignature, OverlappedComponent) == 0x000000, "Member 'BP_PlayableAreaExitVolume_C_BndEvt__Cylinder_K2Node_ComponentBoundEvent_0_ComponentBeginOverlapSignature__DelegateSignature::OverlappedComponent' has a wrong offset!");
static_assert(offsetof(BP_PlayableAreaExitVolume_C_BndEvt__Cylinder_K2Node_ComponentBoundEvent_0_ComponentBeginOverlapSignature__DelegateSignature, OtherActor) == 0x000008, "Member 'BP_PlayableAreaExitVolume_C_BndEvt__Cylinder_K2Node_ComponentBoundEvent_0_ComponentBeginOverlapSignature__DelegateSignature::OtherActor' has a wrong offset!");
static_assert(offsetof(BP_PlayableAreaExitVolume_C_BndEvt__Cylinder_K2Node_ComponentBoundEvent_0_ComponentBeginOverlapSignature__DelegateSignature, OtherComp) == 0x000010, "Member 'BP_PlayableAreaExitVolume_C_BndEvt__Cylinder_K2Node_ComponentBoundEvent_0_ComponentBeginOverlapSignature__DelegateSignature::OtherComp' has a wrong offset!");
static_assert(offsetof(BP_PlayableAreaExitVolume_C_BndEvt__Cylinder_K2Node_ComponentBoundEvent_0_ComponentBeginOverlapSignature__DelegateSignature, OtherBodyIndex) == 0x000018, "Member 'BP_PlayableAreaExitVolume_C_BndEvt__Cylinder_K2Node_ComponentBoundEvent_0_ComponentBeginOverlapSignature__DelegateSignature::OtherBodyIndex' has a wrong offset!");
static_assert(offsetof(BP_PlayableAreaExitVolume_C_BndEvt__Cylinder_K2Node_ComponentBoundEvent_0_ComponentBeginOverlapSignature__DelegateSignature, bFromSweep) == 0x00001C, "Member 'BP_PlayableAreaExitVolume_C_BndEvt__Cylinder_K2Node_ComponentBoundEvent_0_ComponentBeginOverlapSignature__DelegateSignature::bFromSweep' has a wrong offset!");
static_assert(offsetof(BP_PlayableAreaExitVolume_C_BndEvt__Cylinder_K2Node_ComponentBoundEvent_0_ComponentBeginOverlapSignature__DelegateSignature, SweepResult) == 0x000020, "Member 'BP_PlayableAreaExitVolume_C_BndEvt__Cylinder_K2Node_ComponentBoundEvent_0_ComponentBeginOverlapSignature__DelegateSignature::SweepResult' has a wrong offset!");

// Function BP_PlayableAreaExitVolume.BP_PlayableAreaExitVolume_C.Character Stepped Into Exit
// 0x0050 (0x0050 - 0x0000)
struct BP_PlayableAreaExitVolume_C_Character_Stepped_Into_Exit final
{
public:
	class ABP_Character_Script_C*                 Character;                                         // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FString                                 CallFunc_GetDisplayName_ReturnValue;               // 0x0008(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class AController*                            CallFunc_GetController_ReturnValue;                // 0x0018(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ABP_PlayerController_Tutorial_C*        K2Node_DynamicCast_AsBP_Player_Controller_Tutorial; // 0x0020(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0028(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_29[0x7];                                       // 0x0029(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class ABP_PlayerController_AirDropModular_C*  K2Node_DynamicCast_AsBP_Player_Controller_Air_Drop_Modular; // 0x0030(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess_1;                     // 0x0038(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_39[0x7];                                       // 0x0039(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class ABP_PlayerController_Script_C*          K2Node_DynamicCast_AsBP_Player_Controller_Script;  // 0x0040(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess_2;                     // 0x0048(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_PlayableAreaExitVolume_C_Character_Stepped_Into_Exit) == 0x000008, "Wrong alignment on BP_PlayableAreaExitVolume_C_Character_Stepped_Into_Exit");
static_assert(sizeof(BP_PlayableAreaExitVolume_C_Character_Stepped_Into_Exit) == 0x000050, "Wrong size on BP_PlayableAreaExitVolume_C_Character_Stepped_Into_Exit");
static_assert(offsetof(BP_PlayableAreaExitVolume_C_Character_Stepped_Into_Exit, Character) == 0x000000, "Member 'BP_PlayableAreaExitVolume_C_Character_Stepped_Into_Exit::Character' has a wrong offset!");
static_assert(offsetof(BP_PlayableAreaExitVolume_C_Character_Stepped_Into_Exit, CallFunc_GetDisplayName_ReturnValue) == 0x000008, "Member 'BP_PlayableAreaExitVolume_C_Character_Stepped_Into_Exit::CallFunc_GetDisplayName_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayableAreaExitVolume_C_Character_Stepped_Into_Exit, CallFunc_GetController_ReturnValue) == 0x000018, "Member 'BP_PlayableAreaExitVolume_C_Character_Stepped_Into_Exit::CallFunc_GetController_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayableAreaExitVolume_C_Character_Stepped_Into_Exit, K2Node_DynamicCast_AsBP_Player_Controller_Tutorial) == 0x000020, "Member 'BP_PlayableAreaExitVolume_C_Character_Stepped_Into_Exit::K2Node_DynamicCast_AsBP_Player_Controller_Tutorial' has a wrong offset!");
static_assert(offsetof(BP_PlayableAreaExitVolume_C_Character_Stepped_Into_Exit, K2Node_DynamicCast_bSuccess) == 0x000028, "Member 'BP_PlayableAreaExitVolume_C_Character_Stepped_Into_Exit::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(BP_PlayableAreaExitVolume_C_Character_Stepped_Into_Exit, K2Node_DynamicCast_AsBP_Player_Controller_Air_Drop_Modular) == 0x000030, "Member 'BP_PlayableAreaExitVolume_C_Character_Stepped_Into_Exit::K2Node_DynamicCast_AsBP_Player_Controller_Air_Drop_Modular' has a wrong offset!");
static_assert(offsetof(BP_PlayableAreaExitVolume_C_Character_Stepped_Into_Exit, K2Node_DynamicCast_bSuccess_1) == 0x000038, "Member 'BP_PlayableAreaExitVolume_C_Character_Stepped_Into_Exit::K2Node_DynamicCast_bSuccess_1' has a wrong offset!");
static_assert(offsetof(BP_PlayableAreaExitVolume_C_Character_Stepped_Into_Exit, K2Node_DynamicCast_AsBP_Player_Controller_Script) == 0x000040, "Member 'BP_PlayableAreaExitVolume_C_Character_Stepped_Into_Exit::K2Node_DynamicCast_AsBP_Player_Controller_Script' has a wrong offset!");
static_assert(offsetof(BP_PlayableAreaExitVolume_C_Character_Stepped_Into_Exit, K2Node_DynamicCast_bSuccess_2) == 0x000048, "Member 'BP_PlayableAreaExitVolume_C_Character_Stepped_Into_Exit::K2Node_DynamicCast_bSuccess_2' has a wrong offset!");

// Function BP_PlayableAreaExitVolume.BP_PlayableAreaExitVolume_C.Character Stepped Out Of Exit
// 0x0040 (0x0040 - 0x0000)
struct BP_PlayableAreaExitVolume_C_Character_Stepped_Out_Of_Exit final
{
public:
	class ABP_Character_Script_C*                 Character;                                         // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AController*                            CallFunc_GetController_ReturnValue;                // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ABP_PlayerController_Tutorial_C*        K2Node_DynamicCast_AsBP_Player_Controller_Tutorial; // 0x0010(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0018(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class ABP_PlayerController_AirDropModular_C*  K2Node_DynamicCast_AsBP_Player_Controller_Air_Drop_Modular; // 0x0020(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess_1;                     // 0x0028(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_29[0x7];                                       // 0x0029(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class ABP_PlayerController_Script_C*          K2Node_DynamicCast_AsBP_Player_Controller_Script;  // 0x0030(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess_2;                     // 0x0038(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_PlayableAreaExitVolume_C_Character_Stepped_Out_Of_Exit) == 0x000008, "Wrong alignment on BP_PlayableAreaExitVolume_C_Character_Stepped_Out_Of_Exit");
static_assert(sizeof(BP_PlayableAreaExitVolume_C_Character_Stepped_Out_Of_Exit) == 0x000040, "Wrong size on BP_PlayableAreaExitVolume_C_Character_Stepped_Out_Of_Exit");
static_assert(offsetof(BP_PlayableAreaExitVolume_C_Character_Stepped_Out_Of_Exit, Character) == 0x000000, "Member 'BP_PlayableAreaExitVolume_C_Character_Stepped_Out_Of_Exit::Character' has a wrong offset!");
static_assert(offsetof(BP_PlayableAreaExitVolume_C_Character_Stepped_Out_Of_Exit, CallFunc_GetController_ReturnValue) == 0x000008, "Member 'BP_PlayableAreaExitVolume_C_Character_Stepped_Out_Of_Exit::CallFunc_GetController_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayableAreaExitVolume_C_Character_Stepped_Out_Of_Exit, K2Node_DynamicCast_AsBP_Player_Controller_Tutorial) == 0x000010, "Member 'BP_PlayableAreaExitVolume_C_Character_Stepped_Out_Of_Exit::K2Node_DynamicCast_AsBP_Player_Controller_Tutorial' has a wrong offset!");
static_assert(offsetof(BP_PlayableAreaExitVolume_C_Character_Stepped_Out_Of_Exit, K2Node_DynamicCast_bSuccess) == 0x000018, "Member 'BP_PlayableAreaExitVolume_C_Character_Stepped_Out_Of_Exit::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(BP_PlayableAreaExitVolume_C_Character_Stepped_Out_Of_Exit, K2Node_DynamicCast_AsBP_Player_Controller_Air_Drop_Modular) == 0x000020, "Member 'BP_PlayableAreaExitVolume_C_Character_Stepped_Out_Of_Exit::K2Node_DynamicCast_AsBP_Player_Controller_Air_Drop_Modular' has a wrong offset!");
static_assert(offsetof(BP_PlayableAreaExitVolume_C_Character_Stepped_Out_Of_Exit, K2Node_DynamicCast_bSuccess_1) == 0x000028, "Member 'BP_PlayableAreaExitVolume_C_Character_Stepped_Out_Of_Exit::K2Node_DynamicCast_bSuccess_1' has a wrong offset!");
static_assert(offsetof(BP_PlayableAreaExitVolume_C_Character_Stepped_Out_Of_Exit, K2Node_DynamicCast_AsBP_Player_Controller_Script) == 0x000030, "Member 'BP_PlayableAreaExitVolume_C_Character_Stepped_Out_Of_Exit::K2Node_DynamicCast_AsBP_Player_Controller_Script' has a wrong offset!");
static_assert(offsetof(BP_PlayableAreaExitVolume_C_Character_Stepped_Out_Of_Exit, K2Node_DynamicCast_bSuccess_2) == 0x000038, "Member 'BP_PlayableAreaExitVolume_C_Character_Stepped_Out_Of_Exit::K2Node_DynamicCast_bSuccess_2' has a wrong offset!");

// Function BP_PlayableAreaExitVolume.BP_PlayableAreaExitVolume_C.Call First Frame Overlap
// 0x00C0 (0x00C0 - 0x0000)
struct BP_PlayableAreaExitVolume_C_Call_First_Frame_Overlap final
{
public:
	struct FHitResult                             Sweep;                                             // 0x0000(0x008C)(Edit, BlueprintVisible, IsPlainOldData, NoDestructor, ContainsInstancedReference)
	int32                                         Temp_int_Array_Index_Variable;                     // 0x008C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x0090(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x0094(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<class ABP_Character_C*>                CallFunc_GetAllActorsOfClass_OutActors;            // 0x0098(0x0010)(ReferenceParm)
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x00A8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_AC[0x4];                                       // 0x00AC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class ABP_Character_C*                        CallFunc_Array_Get_Item;                           // 0x00B0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x00B8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsOverlappingActor_ReturnValue;           // 0x00B9(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_PlayableAreaExitVolume_C_Call_First_Frame_Overlap) == 0x000008, "Wrong alignment on BP_PlayableAreaExitVolume_C_Call_First_Frame_Overlap");
static_assert(sizeof(BP_PlayableAreaExitVolume_C_Call_First_Frame_Overlap) == 0x0000C0, "Wrong size on BP_PlayableAreaExitVolume_C_Call_First_Frame_Overlap");
static_assert(offsetof(BP_PlayableAreaExitVolume_C_Call_First_Frame_Overlap, Sweep) == 0x000000, "Member 'BP_PlayableAreaExitVolume_C_Call_First_Frame_Overlap::Sweep' has a wrong offset!");
static_assert(offsetof(BP_PlayableAreaExitVolume_C_Call_First_Frame_Overlap, Temp_int_Array_Index_Variable) == 0x00008C, "Member 'BP_PlayableAreaExitVolume_C_Call_First_Frame_Overlap::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(BP_PlayableAreaExitVolume_C_Call_First_Frame_Overlap, Temp_int_Loop_Counter_Variable) == 0x000090, "Member 'BP_PlayableAreaExitVolume_C_Call_First_Frame_Overlap::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(BP_PlayableAreaExitVolume_C_Call_First_Frame_Overlap, CallFunc_Add_IntInt_ReturnValue) == 0x000094, "Member 'BP_PlayableAreaExitVolume_C_Call_First_Frame_Overlap::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayableAreaExitVolume_C_Call_First_Frame_Overlap, CallFunc_GetAllActorsOfClass_OutActors) == 0x000098, "Member 'BP_PlayableAreaExitVolume_C_Call_First_Frame_Overlap::CallFunc_GetAllActorsOfClass_OutActors' has a wrong offset!");
static_assert(offsetof(BP_PlayableAreaExitVolume_C_Call_First_Frame_Overlap, CallFunc_Array_Length_ReturnValue) == 0x0000A8, "Member 'BP_PlayableAreaExitVolume_C_Call_First_Frame_Overlap::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayableAreaExitVolume_C_Call_First_Frame_Overlap, CallFunc_Array_Get_Item) == 0x0000B0, "Member 'BP_PlayableAreaExitVolume_C_Call_First_Frame_Overlap::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(BP_PlayableAreaExitVolume_C_Call_First_Frame_Overlap, CallFunc_Less_IntInt_ReturnValue) == 0x0000B8, "Member 'BP_PlayableAreaExitVolume_C_Call_First_Frame_Overlap::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayableAreaExitVolume_C_Call_First_Frame_Overlap, CallFunc_IsOverlappingActor_ReturnValue) == 0x0000B9, "Member 'BP_PlayableAreaExitVolume_C_Call_First_Frame_Overlap::CallFunc_IsOverlappingActor_ReturnValue' has a wrong offset!");

}

