#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_PlayerController_TomatoFight

#include "Basic.hpp"

#include "BP_PlayerController_TomatoFight_classes.hpp"
#include "BP_PlayerController_TomatoFight_parameters.hpp"


namespace SDK
{

// Function BP_PlayerController_TomatoFight.BP_PlayerController_TomatoFight_C.ExecuteUbergraph_BP_PlayerController_TomatoFight
// (Final, UbergraphFunction, HasDefaults)
// Parameters:
// int32                                   EntryPoint                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_PlayerController_TomatoFight_C::ExecuteUbergraph_BP_PlayerController_TomatoFight(int32 EntryPoint)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PlayerController_TomatoFight_C", "ExecuteUbergraph_BP_PlayerController_TomatoFight");

	Params::BP_PlayerController_TomatoFight_C_ExecuteUbergraph_BP_PlayerController_TomatoFight Parms{};

	Parms.EntryPoint = EntryPoint;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_PlayerController_TomatoFight.BP_PlayerController_TomatoFight_C.DisableMovement_Client
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    Disable                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ABP_PlayerController_TomatoFight_C::DisableMovement_Client(bool Disable)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PlayerController_TomatoFight_C", "DisableMovement_Client");

	Params::BP_PlayerController_TomatoFight_C_DisableMovement_Client Parms{};

	Parms.Disable = Disable;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_PlayerController_TomatoFight.BP_PlayerController_TomatoFight_C.ReceiveTick
// (Event, Public, BlueprintEvent)
// Parameters:
// float                                   DeltaSeconds                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_PlayerController_TomatoFight_C::ReceiveTick(float DeltaSeconds)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PlayerController_TomatoFight_C", "ReceiveTick");

	Params::BP_PlayerController_TomatoFight_C_ReceiveTick Parms{};

	Parms.DeltaSeconds = DeltaSeconds;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_PlayerController_TomatoFight.BP_PlayerController_TomatoFight_C.Cheat_AddScore
// (Net, NetReliable, NetServer, BlueprintCallable, BlueprintEvent)
// Parameters:
// class FName                             ScoreEvent                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_PlayerController_TomatoFight_C::Cheat_AddScore(class FName ScoreEvent)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PlayerController_TomatoFight_C", "Cheat_AddScore");

	Params::BP_PlayerController_TomatoFight_C_Cheat_AddScore Parms{};

	Parms.ScoreEvent = ScoreEvent;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_PlayerController_TomatoFight.BP_PlayerController_TomatoFight_C.DisableMovement_FromServer
// (Net, NetReliable, NetClient, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    Disable                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ABP_PlayerController_TomatoFight_C::DisableMovement_FromServer(bool Disable)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PlayerController_TomatoFight_C", "DisableMovement_FromServer");

	Params::BP_PlayerController_TomatoFight_C_DisableMovement_FromServer Parms{};

	Parms.Disable = Disable;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_PlayerController_TomatoFight.BP_PlayerController_TomatoFight_C.Show Teammate Positions
// (BlueprintCallable, BlueprintEvent)

void ABP_PlayerController_TomatoFight_C::Show_Teammate_Positions()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PlayerController_TomatoFight_C", "Show Teammate Positions");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_PlayerController_TomatoFight.BP_PlayerController_TomatoFight_C.Save Match ID on Client
// (Net, NetReliable, NetClient, BlueprintCallable, BlueprintEvent)
// Parameters:
// class FString                           Match_ID                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)

void ABP_PlayerController_TomatoFight_C::Save_Match_ID_on_Client(const class FString& Match_ID)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PlayerController_TomatoFight_C", "Save Match ID on Client");

	Params::BP_PlayerController_TomatoFight_C_Save_Match_ID_on_Client Parms{};

	Parms.Match_ID = std::move(Match_ID);

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_PlayerController_TomatoFight.BP_PlayerController_TomatoFight_C.Clear All Pings
// (BlueprintCallable, BlueprintEvent)

void ABP_PlayerController_TomatoFight_C::Clear_All_Pings()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PlayerController_TomatoFight_C", "Clear All Pings");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_PlayerController_TomatoFight.BP_PlayerController_TomatoFight_C.Get Kicked For Teamkilling
// (Net, NetReliable, NetClient, BlueprintCallable, BlueprintEvent)

void ABP_PlayerController_TomatoFight_C::Get_Kicked_For_Teamkilling()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PlayerController_TomatoFight_C", "Get Kicked For Teamkilling");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_PlayerController_TomatoFight.BP_PlayerController_TomatoFight_C.Remove All Player Widgets
// (Net, NetReliable, NetClient, BlueprintCallable, BlueprintEvent)

void ABP_PlayerController_TomatoFight_C::Remove_All_Player_Widgets()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PlayerController_TomatoFight_C", "Remove All Player Widgets");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_PlayerController_TomatoFight.BP_PlayerController_TomatoFight_C.PossessedServer
// (Net, NetReliable, NetServer, BlueprintCallable, BlueprintEvent)
// Parameters:
// class ABP_Character_C*                  Possessed_Character                                    (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_PlayerController_TomatoFight_C::PossessedServer(class ABP_Character_C* Possessed_Character)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PlayerController_TomatoFight_C", "PossessedServer");

	Params::BP_PlayerController_TomatoFight_C_PossessedServer Parms{};

	Parms.Possessed_Character = Possessed_Character;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_PlayerController_TomatoFight.BP_PlayerController_TomatoFight_C.Died
// (Net, NetReliable, NetMulticast, BlueprintCallable, BlueprintEvent)

void ABP_PlayerController_TomatoFight_C::Died()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PlayerController_TomatoFight_C", "Died");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_PlayerController_TomatoFight.BP_PlayerController_TomatoFight_C.Delete the Player widget
// (Net, NetClient, BlueprintCallable, BlueprintEvent)
// Parameters:
// class ABP_Character_C*                  Marked_character                                       (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_PlayerController_TomatoFight_C::Delete_the_Player_widget(class ABP_Character_C* Marked_character)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PlayerController_TomatoFight_C", "Delete the Player widget");

	Params::BP_PlayerController_TomatoFight_C_Delete_the_Player_widget Parms{};

	Parms.Marked_character = Marked_character;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_PlayerController_TomatoFight.BP_PlayerController_TomatoFight_C.Create the Player widget
// (Net, NetReliable, NetClient, BlueprintCallable, BlueprintEvent)
// Parameters:
// class ABP_Character_C*                  Character_to_mark                                      (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_PlayerController_TomatoFight_C::Create_the_Player_widget(class ABP_Character_C* Character_to_mark)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PlayerController_TomatoFight_C", "Create the Player widget");

	Params::BP_PlayerController_TomatoFight_C_Create_the_Player_widget Parms{};

	Parms.Character_to_mark = Character_to_mark;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_PlayerController_TomatoFight.BP_PlayerController_TomatoFight_C.Set Invincibility at Possesed
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// class ABP_Character_C*                  Possessed_Character                                    (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_PlayerController_TomatoFight_C::Set_Invincibility_at_Possesed(class ABP_Character_C* Possessed_Character)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PlayerController_TomatoFight_C", "Set Invincibility at Possesed");

	Params::BP_PlayerController_TomatoFight_C_Set_Invincibility_at_Possesed Parms{};

	Parms.Possessed_Character = Possessed_Character;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_PlayerController_TomatoFight.BP_PlayerController_TomatoFight_C.Set Invincibility
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    New_Invincibility                                      (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ABP_PlayerController_TomatoFight_C::Set_Invincibility(bool New_Invincibility)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PlayerController_TomatoFight_C", "Set Invincibility");

	Params::BP_PlayerController_TomatoFight_C_Set_Invincibility Parms{};

	Parms.New_Invincibility = New_Invincibility;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_PlayerController_TomatoFight.BP_PlayerController_TomatoFight_C.Player Connected Server
// (Net, NetReliable, NetServer, BlueprintCallable, BlueprintEvent)

void ABP_PlayerController_TomatoFight_C::Player_Connected_Server()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PlayerController_TomatoFight_C", "Player Connected Server");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_PlayerController_TomatoFight.BP_PlayerController_TomatoFight_C.Remove Objective Marker
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// class AActor*                           Located_Actor                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_PlayerController_TomatoFight_C::Remove_Objective_Marker(class AActor* Located_Actor)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PlayerController_TomatoFight_C", "Remove Objective Marker");

	Params::BP_PlayerController_TomatoFight_C_Remove_Objective_Marker Parms{};

	Parms.Located_Actor = Located_Actor;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_PlayerController_TomatoFight.BP_PlayerController_TomatoFight_C.Add Objective Marker
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// class AActor*                           Located_Actor                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_PlayerController_TomatoFight_C::Add_Objective_Marker(class AActor* Located_Actor)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PlayerController_TomatoFight_C", "Add Objective Marker");

	Params::BP_PlayerController_TomatoFight_C_Add_Objective_Marker Parms{};

	Parms.Located_Actor = Located_Actor;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_PlayerController_TomatoFight.BP_PlayerController_TomatoFight_C.Create ScorePopUp
// (BlueprintCallable, BlueprintEvent)

void ABP_PlayerController_TomatoFight_C::Create_ScorePopUp()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PlayerController_TomatoFight_C", "Create ScorePopUp");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_PlayerController_TomatoFight.BP_PlayerController_TomatoFight_C.Update Round Start Countdown UI
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// int32                                   Round_Starts_In                                        (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_PlayerController_TomatoFight_C::Update_Round_Start_Countdown_UI(int32 Round_Starts_In)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PlayerController_TomatoFight_C", "Update Round Start Countdown UI");

	Params::BP_PlayerController_TomatoFight_C_Update_Round_Start_Countdown_UI Parms{};

	Parms.Round_Starts_In = Round_Starts_In;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_PlayerController_TomatoFight.BP_PlayerController_TomatoFight_C.Set Round Time
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// int32                                   Round_Time                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    Is_Objective_Phase                                     (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ABP_PlayerController_TomatoFight_C::Set_Round_Time(int32 Round_Time, bool Is_Objective_Phase)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PlayerController_TomatoFight_C", "Set Round Time");

	Params::BP_PlayerController_TomatoFight_C_Set_Round_Time Parms{};

	Parms.Round_Time = Round_Time;
	Parms.Is_Objective_Phase = Is_Objective_Phase;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_PlayerController_TomatoFight.BP_PlayerController_TomatoFight_C.Start Countdown in Waiting for Match
// (Net, NetReliable, NetClient, BlueprintCallable, BlueprintEvent)
// Parameters:
// int32                                   Time                                                   (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    All_Connected                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ABP_PlayerController_TomatoFight_C::Start_Countdown_in_Waiting_for_Match(int32 Time, bool All_Connected)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PlayerController_TomatoFight_C", "Start Countdown in Waiting for Match");

	Params::BP_PlayerController_TomatoFight_C_Start_Countdown_in_Waiting_for_Match Parms{};

	Parms.Time = Time;
	Parms.All_Connected = All_Connected;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_PlayerController_TomatoFight.BP_PlayerController_TomatoFight_C.Hide Waiting For Match To Start
// (BlueprintCallable, BlueprintEvent)

void ABP_PlayerController_TomatoFight_C::Hide_Waiting_For_Match_To_Start()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PlayerController_TomatoFight_C", "Hide Waiting For Match To Start");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_PlayerController_TomatoFight.BP_PlayerController_TomatoFight_C.Show Waiting For Match To Start
// (BlueprintCallable, BlueprintEvent)

void ABP_PlayerController_TomatoFight_C::Show_Waiting_For_Match_To_Start()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PlayerController_TomatoFight_C", "Show Waiting For Match To Start");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_PlayerController_TomatoFight.BP_PlayerController_TomatoFight_C.Hide Round Start Countdown UI
// (BlueprintCallable, BlueprintEvent)

void ABP_PlayerController_TomatoFight_C::Hide_Round_Start_Countdown_UI()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PlayerController_TomatoFight_C", "Hide Round Start Countdown UI");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_PlayerController_TomatoFight.BP_PlayerController_TomatoFight_C.Show Round Start Countdown UI
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// int32                                   Round_Starts_In                                        (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_PlayerController_TomatoFight_C::Show_Round_Start_Countdown_UI(int32 Round_Starts_In)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PlayerController_TomatoFight_C", "Show Round Start Countdown UI");

	Params::BP_PlayerController_TomatoFight_C_Show_Round_Start_Countdown_UI Parms{};

	Parms.Round_Starts_In = Round_Starts_In;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_PlayerController_TomatoFight.BP_PlayerController_TomatoFight_C.Hide Spawn Position Selection UI
// (BlueprintCallable, BlueprintEvent)

void ABP_PlayerController_TomatoFight_C::Hide_Spawn_Position_Selection_UI()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PlayerController_TomatoFight_C", "Hide Spawn Position Selection UI");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_PlayerController_TomatoFight.BP_PlayerController_TomatoFight_C.Update Match Progress
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// int32                                   Attackers_Won_Rounds                                   (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   Defenders_Won_Rounds                                   (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_PlayerController_TomatoFight_C::Update_Match_Progress(int32 Attackers_Won_Rounds, int32 Defenders_Won_Rounds)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PlayerController_TomatoFight_C", "Update Match Progress");

	Params::BP_PlayerController_TomatoFight_C_Update_Match_Progress Parms{};

	Parms.Attackers_Won_Rounds = Attackers_Won_Rounds;
	Parms.Defenders_Won_Rounds = Defenders_Won_Rounds;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_PlayerController_TomatoFight.BP_PlayerController_TomatoFight_C.Hide Match Progress UI
// (BlueprintCallable, BlueprintEvent)

void ABP_PlayerController_TomatoFight_C::Hide_Match_Progress_UI()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PlayerController_TomatoFight_C", "Hide Match Progress UI");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_PlayerController_TomatoFight.BP_PlayerController_TomatoFight_C.Show Match Progress UI
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// int32                                   Round_Time                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   Attackers_Won_Rounds                                   (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   Defenders_Won_Rounds                                   (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_PlayerController_TomatoFight_C::Show_Match_Progress_UI(int32 Round_Time, int32 Attackers_Won_Rounds, int32 Defenders_Won_Rounds)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PlayerController_TomatoFight_C", "Show Match Progress UI");

	Params::BP_PlayerController_TomatoFight_C_Show_Match_Progress_UI Parms{};

	Parms.Round_Time = Round_Time;
	Parms.Attackers_Won_Rounds = Attackers_Won_Rounds;
	Parms.Defenders_Won_Rounds = Defenders_Won_Rounds;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_PlayerController_TomatoFight.BP_PlayerController_TomatoFight_C.Show Player Notification
// (Net, NetReliable, NetClient, BlueprintCallable, BlueprintEvent)
// Parameters:
// class FText                             Title                                                  (BlueprintVisible, BlueprintReadOnly, Parm)
// class FText                             Reason                                                 (BlueprintVisible, BlueprintReadOnly, Parm)
// ERaidNotificationType                   Type                                                   (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_PlayerController_TomatoFight_C::Show_Player_Notification(const class FText& Title, const class FText& Reason, ERaidNotificationType Type)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PlayerController_TomatoFight_C", "Show Player Notification");

	Params::BP_PlayerController_TomatoFight_C_Show_Player_Notification Parms{};

	Parms.Title = std::move(Title);
	Parms.Reason = std::move(Reason);
	Parms.Type = Type;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_PlayerController_TomatoFight.BP_PlayerController_TomatoFight_C.Hide End Turn UI
// (Net, NetReliable, NetClient, BlueprintCallable, BlueprintEvent)

void ABP_PlayerController_TomatoFight_C::Hide_End_Turn_UI()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PlayerController_TomatoFight_C", "Hide End Turn UI");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_PlayerController_TomatoFight.BP_PlayerController_TomatoFight_C.Cheat_SkipMatch
// (Net, NetReliable, NetServer, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    LocalPlayerWins                                        (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ABP_PlayerController_TomatoFight_C::Cheat_SkipMatch(bool LocalPlayerWins)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PlayerController_TomatoFight_C", "Cheat_SkipMatch");

	Params::BP_PlayerController_TomatoFight_C_Cheat_SkipMatch Parms{};

	Parms.LocalPlayerWins = LocalPlayerWins;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_PlayerController_TomatoFight.BP_PlayerController_TomatoFight_C.Client Request Pause Match
// (BlueprintCallable, BlueprintEvent)

void ABP_PlayerController_TomatoFight_C::Client_Request_Pause_Match()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PlayerController_TomatoFight_C", "Client Request Pause Match");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_PlayerController_TomatoFight.BP_PlayerController_TomatoFight_C.Request Pause Match
// (Net, NetReliable, NetServer, BlueprintCallable, BlueprintEvent)

void ABP_PlayerController_TomatoFight_C::Request_Pause_Match()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PlayerController_TomatoFight_C", "Request Pause Match");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_PlayerController_TomatoFight.BP_PlayerController_TomatoFight_C.Add or Remove Objective Marker
// (Private, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// class AActor*                           Located_Actor                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    Add                                                    (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ABP_PlayerController_TomatoFight_C::Add_or_Remove_Objective_Marker(class AActor* Located_Actor, bool Add)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PlayerController_TomatoFight_C", "Add or Remove Objective Marker");

	Params::BP_PlayerController_TomatoFight_C_Add_or_Remove_Objective_Marker Parms{};

	Parms.Located_Actor = Located_Actor;
	Parms.Add = Add;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_PlayerController_TomatoFight.BP_PlayerController_TomatoFight_C.Start Spectating
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)

void ABP_PlayerController_TomatoFight_C::Start_Spectating()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PlayerController_TomatoFight_C", "Start Spectating");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_PlayerController_TomatoFight.BP_PlayerController_TomatoFight_C.Is Attacker
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// bool                                    Is_Attacker_0                                          (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ABP_PlayerController_TomatoFight_C::Is_Attacker(bool* Is_Attacker_0)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PlayerController_TomatoFight_C", "Is Attacker");

	Params::BP_PlayerController_TomatoFight_C_Is_Attacker Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Is_Attacker_0 != nullptr)
		*Is_Attacker_0 = Parms.Is_Attacker_0;
}


// Function BP_PlayerController_TomatoFight.BP_PlayerController_TomatoFight_C.Add Teammate Markers
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)

void ABP_PlayerController_TomatoFight_C::Add_Teammate_Markers()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PlayerController_TomatoFight_C", "Add Teammate Markers");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_PlayerController_TomatoFight.BP_PlayerController_TomatoFight_C.Player Respawned
// (Net, NetReliable, NetMulticast, BlueprintCallable, BlueprintEvent)

void ABP_PlayerController_TomatoFight_C::Player_Respawned()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PlayerController_TomatoFight_C", "Player Respawned");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_PlayerController_TomatoFight.BP_PlayerController_TomatoFight_C.ReceiveBeginPlay
// (Event, Protected, BlueprintEvent)

void ABP_PlayerController_TomatoFight_C::ReceiveBeginPlay()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PlayerController_TomatoFight_C", "ReceiveBeginPlay");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_PlayerController_TomatoFight.BP_PlayerController_TomatoFight_C.CheatHideUI
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    Hide                                                   (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ABP_PlayerController_TomatoFight_C::CheatHideUI(bool Hide)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PlayerController_TomatoFight_C", "CheatHideUI");

	Params::BP_PlayerController_TomatoFight_C_CheatHideUI Parms{};

	Parms.Hide = Hide;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_PlayerController_TomatoFight.BP_PlayerController_TomatoFight_C.Send Kill Scored Event
// (Net, NetReliable, NetClient, BlueprintCallable, BlueprintEvent)
// Parameters:
// class AHumanCharacter*                  Killer                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class AHumanCharacter*                  Victim                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class UClass*                           Instigating_Item                                       (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    Headshot                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// bool                                    Teamkill                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ABP_PlayerController_TomatoFight_C::Send_Kill_Scored_Event(class AHumanCharacter* Killer, class AHumanCharacter* Victim, class UClass* Instigating_Item, bool Headshot, bool Teamkill)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PlayerController_TomatoFight_C", "Send Kill Scored Event");

	Params::BP_PlayerController_TomatoFight_C_Send_Kill_Scored_Event Parms{};

	Parms.Killer = Killer;
	Parms.Victim = Victim;
	Parms.Instigating_Item = Instigating_Item;
	Parms.Headshot = Headshot;
	Parms.Teamkill = Teamkill;

	UObject::ProcessEvent(Func, &Parms);
}

}

