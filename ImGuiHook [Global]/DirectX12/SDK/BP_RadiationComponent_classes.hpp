#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_RadiationComponent

#include "Basic.hpp"

#include "Flame_structs.hpp"
#include "Engine_structs.hpp"
#include "Engine_classes.hpp"


namespace SDK
{

// BlueprintGeneratedClass BP_RadiationComponent.BP_RadiationComponent_C
// 0x0088 (0x0138 - 0x00B0)
class UBP_RadiationComponent_C final : public UActorComponent
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x00B0(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class ABP_Character_Script_C*                 Character;                                         // 0x00B8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ABP_RadiationWave_C*                    Radiation_wave;                                    // 0x00C0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Radiation_Exposure;                                // 0x00C8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_CC[0x4];                                       // 0x00CC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class ABP_PlayerController_Script_C*          Controller;                                        // 0x00D0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Should_affect_player_in_buildings;                 // 0x00D8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_D9[0x3];                                       // 0x00D9(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Min_accumulated_rads_for_damage;                   // 0x00DC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Max_radiation_exposure;                            // 0x00E0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Wave_Exposure;                                     // 0x00E4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Airdrop_Exposure;                                  // 0x00E8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Cloud_Exposure;                                    // 0x00EC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Radiation_damage_music_and_achievement_triggered;  // 0x00F0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_F1[0x7];                                       // 0x00F1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class ABP_GameMode_AirDropModular_C*          Game_mode_ADM;                                     // 0x00F8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Radiation_exposure_reduction_per_tick;             // 0x0100(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Max_accumulated_rads;                              // 0x0104(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FTimerHandle                           Time_to_kill_tracker;                              // 0x0108(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	bool                                          Track_time_to_kill;                                // 0x0110(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_111[0x3];                                      // 0x0111(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Max_radiation_exposure_rad_cloud;                  // 0x0114(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Iodine_exposure_reduction_multiplier;              // 0x0118(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Iodine_exposure_increase_multiplier;               // 0x011C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Track_exposure_gains;                              // 0x0120(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_121[0x3];                                      // 0x0121(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Max_radiation_exposure_visual_effect;              // 0x0124(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Time_spent_in_radiation;                           // 0x0128(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Challenge_repeating_timer;                         // 0x012C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Challenge_repeating_timer_interval;                // 0x0130(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Max_radiation_exposure_rad_airdrop;                // 0x0134(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

public:
	void ExecuteUbergraph_BP_RadiationComponent(int32 EntryPoint);
	void Empty_event_to_hold_timer();
	void Character_Died(class ABP_Character_C* DyingCharacter, float DamageAmount, EDamageType DamageType, class AHumanCharacter* InstigatingCharacter, class UClass* InstigatingItem, const struct FHitResult& HitResult);
	void Radiation_Wave_Determined();
	void ReceiveTick(float DeltaSeconds);
	void ReceiveBeginPlay();
	void Add_Radiation_Exposure(float Radiation_Exposure_0);
	void Decrease_Radiation_Exposure(float Radiation_Exposure_0);
	void Check_If_Player_Switched_To_Spectator();
	void Process_Radiation_Damage(bool* Character_Died);
	void Calculate_radiation_wave_exposure(float* Wave_exposure_at_character_location);
	void Calculate_and_set_radiation_on_character(float DeltaSeconds, float Cloud_Exposure_0, float Wave_Exposure_0, float Airdrop_Exposure_0);
	void Set_radiation_exposure(float Value);
	void Add_Radiation_Exposure_from_rad_cloud(float Incomming_Radiation_Exposure);
	void Calculate_and_set_radiation_cloud_exposure(float Delta_seconds);
	void Set_radiation_exposure_from_airdrop_crate(float Value);
	void SetupForTutorialWave(class ABP_RadiationWave_C* RadiationWave);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BP_RadiationComponent_C">();
	}
	static class UBP_RadiationComponent_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UBP_RadiationComponent_C>();
	}
};
static_assert(alignof(UBP_RadiationComponent_C) == 0x000008, "Wrong alignment on UBP_RadiationComponent_C");
static_assert(sizeof(UBP_RadiationComponent_C) == 0x000138, "Wrong size on UBP_RadiationComponent_C");
static_assert(offsetof(UBP_RadiationComponent_C, UberGraphFrame) == 0x0000B0, "Member 'UBP_RadiationComponent_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(UBP_RadiationComponent_C, Character) == 0x0000B8, "Member 'UBP_RadiationComponent_C::Character' has a wrong offset!");
static_assert(offsetof(UBP_RadiationComponent_C, Radiation_wave) == 0x0000C0, "Member 'UBP_RadiationComponent_C::Radiation_wave' has a wrong offset!");
static_assert(offsetof(UBP_RadiationComponent_C, Radiation_Exposure) == 0x0000C8, "Member 'UBP_RadiationComponent_C::Radiation_Exposure' has a wrong offset!");
static_assert(offsetof(UBP_RadiationComponent_C, Controller) == 0x0000D0, "Member 'UBP_RadiationComponent_C::Controller' has a wrong offset!");
static_assert(offsetof(UBP_RadiationComponent_C, Should_affect_player_in_buildings) == 0x0000D8, "Member 'UBP_RadiationComponent_C::Should_affect_player_in_buildings' has a wrong offset!");
static_assert(offsetof(UBP_RadiationComponent_C, Min_accumulated_rads_for_damage) == 0x0000DC, "Member 'UBP_RadiationComponent_C::Min_accumulated_rads_for_damage' has a wrong offset!");
static_assert(offsetof(UBP_RadiationComponent_C, Max_radiation_exposure) == 0x0000E0, "Member 'UBP_RadiationComponent_C::Max_radiation_exposure' has a wrong offset!");
static_assert(offsetof(UBP_RadiationComponent_C, Wave_Exposure) == 0x0000E4, "Member 'UBP_RadiationComponent_C::Wave_Exposure' has a wrong offset!");
static_assert(offsetof(UBP_RadiationComponent_C, Airdrop_Exposure) == 0x0000E8, "Member 'UBP_RadiationComponent_C::Airdrop_Exposure' has a wrong offset!");
static_assert(offsetof(UBP_RadiationComponent_C, Cloud_Exposure) == 0x0000EC, "Member 'UBP_RadiationComponent_C::Cloud_Exposure' has a wrong offset!");
static_assert(offsetof(UBP_RadiationComponent_C, Radiation_damage_music_and_achievement_triggered) == 0x0000F0, "Member 'UBP_RadiationComponent_C::Radiation_damage_music_and_achievement_triggered' has a wrong offset!");
static_assert(offsetof(UBP_RadiationComponent_C, Game_mode_ADM) == 0x0000F8, "Member 'UBP_RadiationComponent_C::Game_mode_ADM' has a wrong offset!");
static_assert(offsetof(UBP_RadiationComponent_C, Radiation_exposure_reduction_per_tick) == 0x000100, "Member 'UBP_RadiationComponent_C::Radiation_exposure_reduction_per_tick' has a wrong offset!");
static_assert(offsetof(UBP_RadiationComponent_C, Max_accumulated_rads) == 0x000104, "Member 'UBP_RadiationComponent_C::Max_accumulated_rads' has a wrong offset!");
static_assert(offsetof(UBP_RadiationComponent_C, Time_to_kill_tracker) == 0x000108, "Member 'UBP_RadiationComponent_C::Time_to_kill_tracker' has a wrong offset!");
static_assert(offsetof(UBP_RadiationComponent_C, Track_time_to_kill) == 0x000110, "Member 'UBP_RadiationComponent_C::Track_time_to_kill' has a wrong offset!");
static_assert(offsetof(UBP_RadiationComponent_C, Max_radiation_exposure_rad_cloud) == 0x000114, "Member 'UBP_RadiationComponent_C::Max_radiation_exposure_rad_cloud' has a wrong offset!");
static_assert(offsetof(UBP_RadiationComponent_C, Iodine_exposure_reduction_multiplier) == 0x000118, "Member 'UBP_RadiationComponent_C::Iodine_exposure_reduction_multiplier' has a wrong offset!");
static_assert(offsetof(UBP_RadiationComponent_C, Iodine_exposure_increase_multiplier) == 0x00011C, "Member 'UBP_RadiationComponent_C::Iodine_exposure_increase_multiplier' has a wrong offset!");
static_assert(offsetof(UBP_RadiationComponent_C, Track_exposure_gains) == 0x000120, "Member 'UBP_RadiationComponent_C::Track_exposure_gains' has a wrong offset!");
static_assert(offsetof(UBP_RadiationComponent_C, Max_radiation_exposure_visual_effect) == 0x000124, "Member 'UBP_RadiationComponent_C::Max_radiation_exposure_visual_effect' has a wrong offset!");
static_assert(offsetof(UBP_RadiationComponent_C, Time_spent_in_radiation) == 0x000128, "Member 'UBP_RadiationComponent_C::Time_spent_in_radiation' has a wrong offset!");
static_assert(offsetof(UBP_RadiationComponent_C, Challenge_repeating_timer) == 0x00012C, "Member 'UBP_RadiationComponent_C::Challenge_repeating_timer' has a wrong offset!");
static_assert(offsetof(UBP_RadiationComponent_C, Challenge_repeating_timer_interval) == 0x000130, "Member 'UBP_RadiationComponent_C::Challenge_repeating_timer_interval' has a wrong offset!");
static_assert(offsetof(UBP_RadiationComponent_C, Max_radiation_exposure_rad_airdrop) == 0x000134, "Member 'UBP_RadiationComponent_C::Max_radiation_exposure_rad_airdrop' has a wrong offset!");

}

