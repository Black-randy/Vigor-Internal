#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_SeparatePoster

#include "Basic.hpp"

#include "BP_SeparatePoster_classes.hpp"
#include "BP_SeparatePoster_parameters.hpp"


namespace SDK
{

// Function BP_SeparatePoster.BP_SeparatePoster_C.PosterTexturesUpdated__DelegateSignature
// (Public, Delegate, BlueprintCallable, BlueprintEvent)
// Parameters:
// class ABP_SeparatePoster_C*             Poster                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_SeparatePoster_C::PosterTexturesUpdated__DelegateSignature(class ABP_SeparatePoster_C* Poster)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_SeparatePoster_C", "PosterTexturesUpdated__DelegateSignature");

	Params::BP_SeparatePoster_C_PosterTexturesUpdated__DelegateSignature Parms{};

	Parms.Poster = Poster;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_SeparatePoster.BP_SeparatePoster_C.ExecuteUbergraph_BP_SeparatePoster
// (Final, UbergraphFunction, HasDefaults)
// Parameters:
// int32                                   EntryPoint                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_SeparatePoster_C::ExecuteUbergraph_BP_SeparatePoster(int32 EntryPoint)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_SeparatePoster_C", "ExecuteUbergraph_BP_SeparatePoster");

	Params::BP_SeparatePoster_C_ExecuteUbergraph_BP_SeparatePoster Parms{};

	Parms.EntryPoint = EntryPoint;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_SeparatePoster.BP_SeparatePoster_C.OpenEditPosterUI
// (BlueprintCallable, BlueprintEvent)

void ABP_SeparatePoster_C::OpenEditPosterUI()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_SeparatePoster_C", "OpenEditPosterUI");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_SeparatePoster.BP_SeparatePoster_C.BndEvt__BP_InteractionItemComponent_K2Node_ComponentBoundEvent_0_Interaction Start On Client__DelegateSignature
// (BlueprintEvent)
// Parameters:
// class UInteractionItemComponent*        Sender                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class AActor*                           Interacting_Actor                                      (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_SeparatePoster_C::BndEvt__BP_InteractionItemComponent_K2Node_ComponentBoundEvent_0_Interaction_Start_On_Client__DelegateSignature(class UInteractionItemComponent* Sender, class AActor* Interacting_Actor)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_SeparatePoster_C", "BndEvt__BP_InteractionItemComponent_K2Node_ComponentBoundEvent_0_Interaction Start On Client__DelegateSignature");

	Params::BP_SeparatePoster_C_BndEvt__BP_InteractionItemComponent_K2Node_ComponentBoundEvent_0_Interaction_Start_On_Client__DelegateSignature Parms{};

	Parms.Sender = Sender;
	Parms.Interacting_Actor = Interacting_Actor;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_SeparatePoster.BP_SeparatePoster_C.SetAppearance
// (BlueprintCallable, BlueprintEvent)

void ABP_SeparatePoster_C::SetAppearance()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_SeparatePoster_C", "SetAppearance");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_SeparatePoster.BP_SeparatePoster_C.ExportCurrentPosterEvent
// (BlueprintCallable, BlueprintEvent)

void ABP_SeparatePoster_C::ExportCurrentPosterEvent()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_SeparatePoster_C", "ExportCurrentPosterEvent");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_SeparatePoster.BP_SeparatePoster_C.UserConstructionScript
// (Event, Public, BlueprintCallable, BlueprintEvent)

void ABP_SeparatePoster_C::UserConstructionScript()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_SeparatePoster_C", "UserConstructionScript");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_SeparatePoster.BP_SeparatePoster_C.SetInitialVisibility
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    bHidden_0                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ABP_SeparatePoster_C::SetInitialVisibility(bool bHidden_0)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_SeparatePoster_C", "SetInitialVisibility");

	Params::BP_SeparatePoster_C_SetInitialVisibility Parms{};

	Parms.bHidden_0 = bHidden_0;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_SeparatePoster.BP_SeparatePoster_C.GetCameraPosition
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FTransform                       ReturnValue                                            (Parm, OutParm, ReturnParm, IsPlainOldData, NoDestructor)

struct FTransform ABP_SeparatePoster_C::GetCameraPosition()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_SeparatePoster_C", "GetCameraPosition");

	Params::BP_SeparatePoster_C_GetCameraPosition Parms{};

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function BP_SeparatePoster.BP_SeparatePoster_C.HighlightPoster
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    ShouldHighlight                                        (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ABP_SeparatePoster_C::HighlightPoster(bool ShouldHighlight)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_SeparatePoster_C", "HighlightPoster");

	Params::BP_SeparatePoster_C_HighlightPoster Parms{};

	Parms.ShouldHighlight = ShouldHighlight;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_SeparatePoster.BP_SeparatePoster_C.SetDynamicMaterial
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// class FName                             OptionalName                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class UMaterialInstanceDynamic*         ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

class UMaterialInstanceDynamic* ABP_SeparatePoster_C::SetDynamicMaterial(class FName OptionalName)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_SeparatePoster_C", "SetDynamicMaterial");

	Params::BP_SeparatePoster_C_SetDynamicMaterial Parms{};

	Parms.OptionalName = OptionalName;

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function BP_SeparatePoster.BP_SeparatePoster_C.SetCapturedRenderTexture
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class UTextureRenderTarget2D*           RenderTargetTexture                                    (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_SeparatePoster_C::SetCapturedRenderTexture(class UTextureRenderTarget2D* RenderTargetTexture)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_SeparatePoster_C", "SetCapturedRenderTexture");

	Params::BP_SeparatePoster_C_SetCapturedRenderTexture Parms{};

	Parms.RenderTargetTexture = RenderTargetTexture;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_SeparatePoster.BP_SeparatePoster_C.SetMaterialTextureParam
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class UTexture2D*                       Texture                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_SeparatePoster_C::SetMaterialTextureParam(class UTexture2D* Texture)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_SeparatePoster_C", "SetMaterialTextureParam");

	Params::BP_SeparatePoster_C_SetMaterialTextureParam Parms{};

	Parms.Texture = Texture;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_SeparatePoster.BP_SeparatePoster_C.SetOverlayTexture
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class UTexture2D*                       Texture                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_SeparatePoster_C::SetOverlayTexture(class UTexture2D* Texture)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_SeparatePoster_C", "SetOverlayTexture");

	Params::BP_SeparatePoster_C_SetOverlayTexture Parms{};

	Parms.Texture = Texture;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_SeparatePoster.BP_SeparatePoster_C.ClearOverlayTexture
// (Public, BlueprintCallable, BlueprintEvent)

void ABP_SeparatePoster_C::ClearOverlayTexture()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_SeparatePoster_C", "ClearOverlayTexture");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_SeparatePoster.BP_SeparatePoster_C.GetRenderResolution
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// int32                                   X                                                      (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   Y                                                      (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_SeparatePoster_C::GetRenderResolution(int32* X, int32* Y)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_SeparatePoster_C", "GetRenderResolution");

	Params::BP_SeparatePoster_C_GetRenderResolution Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (X != nullptr)
		*X = Parms.X;

	if (Y != nullptr)
		*Y = Parms.Y;
}


// Function BP_SeparatePoster.BP_SeparatePoster_C.ExportPresentTexture
// (Public, BlueprintCallable, BlueprintEvent)

void ABP_SeparatePoster_C::ExportPresentTexture()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_SeparatePoster_C", "ExportPresentTexture");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_SeparatePoster.BP_SeparatePoster_C.SetPosterModel
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// int32                                   ModelID                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_SeparatePoster_C::SetPosterModel(int32 ModelID)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_SeparatePoster_C", "SetPosterModel");

	Params::BP_SeparatePoster_C_SetPosterModel Parms{};

	Parms.ModelID = ModelID;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_SeparatePoster.BP_SeparatePoster_C.Check for Correct Wall Placement
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// TArray<class ABP_ValidPosterPlane_C*>   ValidWalls                                             (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
// bool                                    Valid                                                  (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ABP_SeparatePoster_C::Check_for_Correct_Wall_Placement(TArray<class ABP_ValidPosterPlane_C*>& ValidWalls, bool* Valid)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_SeparatePoster_C", "Check for Correct Wall Placement");

	Params::BP_SeparatePoster_C_Check_for_Correct_Wall_Placement Parms{};

	Parms.ValidWalls = std::move(ValidWalls);

	UObject::ProcessEvent(Func, &Parms);

	ValidWalls = std::move(Parms.ValidWalls);

	if (Valid != nullptr)
		*Valid = Parms.Valid;
}


// Function BP_SeparatePoster.BP_SeparatePoster_C.GetValidTeleportLocation
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FTransform                       ReturnValue                                            (Parm, OutParm, ReturnParm, IsPlainOldData, NoDestructor)
// bool                                    Valid                                                  (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

struct FTransform ABP_SeparatePoster_C::GetValidTeleportLocation(bool* Valid)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_SeparatePoster_C", "GetValidTeleportLocation");

	Params::BP_SeparatePoster_C_GetValidTeleportLocation Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Valid != nullptr)
		*Valid = Parms.Valid;

	return Parms.ReturnValue;
}


// Function BP_SeparatePoster.BP_SeparatePoster_C.GetTheWallPosterIsPlacedUpon
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// class ABP_ValidPosterPlane_C*           Wall                                                   (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_SeparatePoster_C::GetTheWallPosterIsPlacedUpon(class ABP_ValidPosterPlane_C** Wall)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_SeparatePoster_C", "GetTheWallPosterIsPlacedUpon");

	Params::BP_SeparatePoster_C_GetTheWallPosterIsPlacedUpon Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Wall != nullptr)
		*Wall = Parms.Wall;
}


// Function BP_SeparatePoster.BP_SeparatePoster_C.Adjust ScaleDependentStuff
// (Public, BlueprintCallable, BlueprintEvent)

void ABP_SeparatePoster_C::Adjust_ScaleDependentStuff()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_SeparatePoster_C", "Adjust ScaleDependentStuff");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_SeparatePoster.BP_SeparatePoster_C.DEBUG_PrintArmLength
// (Public, BlueprintCallable, BlueprintEvent)

void ABP_SeparatePoster_C::DEBUG_PrintArmLength()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_SeparatePoster_C", "DEBUG_PrintArmLength");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_SeparatePoster.BP_SeparatePoster_C.DEBUG_ReRenderPoster
// (Public, BlueprintCallable, BlueprintEvent)

void ABP_SeparatePoster_C::DEBUG_ReRenderPoster()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_SeparatePoster_C", "DEBUG_ReRenderPoster");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_SeparatePoster.BP_SeparatePoster_C.SetLightEnabled
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    bNewEnabled                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ABP_SeparatePoster_C::SetLightEnabled(bool bNewEnabled)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_SeparatePoster_C", "SetLightEnabled");

	Params::BP_SeparatePoster_C_SetLightEnabled Parms{};

	Parms.bNewEnabled = bNewEnabled;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_SeparatePoster.BP_SeparatePoster_C.CheckForShelterPropsOverlaps
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)

void ABP_SeparatePoster_C::CheckForShelterPropsOverlaps()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_SeparatePoster_C", "CheckForShelterPropsOverlaps");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_SeparatePoster.BP_SeparatePoster_C.Cycle to Another Poster ModelID
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// int32                                   NewPosterModel                                         (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_SeparatePoster_C::Cycle_to_Another_Poster_ModelID(int32* NewPosterModel)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_SeparatePoster_C", "Cycle to Another Poster ModelID");

	Params::BP_SeparatePoster_C_Cycle_to_Another_Poster_ModelID Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (NewPosterModel != nullptr)
		*NewPosterModel = Parms.NewPosterModel;
}


// Function BP_SeparatePoster.BP_SeparatePoster_C.CheckForDefaultPosterMaterial
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    HasEmptyTexture                                        (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ABP_SeparatePoster_C::CheckForDefaultPosterMaterial(bool* HasEmptyTexture)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_SeparatePoster_C", "CheckForDefaultPosterMaterial");

	Params::BP_SeparatePoster_C_CheckForDefaultPosterMaterial Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (HasEmptyTexture != nullptr)
		*HasEmptyTexture = Parms.HasEmptyTexture;
}

}

