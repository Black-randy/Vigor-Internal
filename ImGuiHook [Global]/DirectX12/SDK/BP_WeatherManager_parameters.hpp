#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_WeatherManager

#include "Basic.hpp"

#include "InputCore_structs.hpp"
#include "CoreUObject_structs.hpp"
#include "Engine_structs.hpp"
#include "PhysicsCore_structs.hpp"
#include "S_SmokeCloud_structs.hpp"


namespace SDK::Params
{

// Function BP_WeatherManager.BP_WeatherManager_C.ExecuteUbergraph_BP_WeatherManager
// 0x00A0 (0x00A0 - 0x0000)
struct BP_WeatherManager_C_ExecuteUbergraph_BP_WeatherManager final
{
public:
	int32                                         EntryPoint;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FKey                                   K2Node_InputKeyEvent_Key;                          // 0x0008(0x0018)(HasGetValueTypeHash)
	float                                         K2Node_Event_DeltaSeconds;                         // 0x0020(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x0024(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x0028(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2C[0x4];                                       // 0x002C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FKey                                   K2Node_InputActionEvent_Key;                       // 0x0030(0x0018)(HasGetValueTypeHash)
	int32                                         Temp_int_Array_Index_Variable;                     // 0x0048(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsDedicatedServer_ReturnValue;            // 0x004C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_4D[0x3];                                       // 0x004D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class UUI_LobbyBase_C*>                CallFunc_GetAllWidgetsOfClass_FoundWidgets;        // 0x0050(0x0010)(ReferenceParm, ContainsInstancedReference)
	struct FKey                                   K2Node_InputActionEvent_Key_1;                     // 0x0060(0x0018)(HasGetValueTypeHash)
	class UUI_LobbyBase_C*                        CallFunc_Array_Get_Item;                           // 0x0078(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x0080(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x0084(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_85[0x3];                                       // 0x0085(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class APlayerController*                      CallFunc_GetPlayerController_ReturnValue;          // 0x0088(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AHumanPlayerController*                 K2Node_DynamicCast_AsHuman_Player_Controller;      // 0x0090(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0098(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_WeatherManager_C_ExecuteUbergraph_BP_WeatherManager) == 0x000008, "Wrong alignment on BP_WeatherManager_C_ExecuteUbergraph_BP_WeatherManager");
static_assert(sizeof(BP_WeatherManager_C_ExecuteUbergraph_BP_WeatherManager) == 0x0000A0, "Wrong size on BP_WeatherManager_C_ExecuteUbergraph_BP_WeatherManager");
static_assert(offsetof(BP_WeatherManager_C_ExecuteUbergraph_BP_WeatherManager, EntryPoint) == 0x000000, "Member 'BP_WeatherManager_C_ExecuteUbergraph_BP_WeatherManager::EntryPoint' has a wrong offset!");
static_assert(offsetof(BP_WeatherManager_C_ExecuteUbergraph_BP_WeatherManager, K2Node_InputKeyEvent_Key) == 0x000008, "Member 'BP_WeatherManager_C_ExecuteUbergraph_BP_WeatherManager::K2Node_InputKeyEvent_Key' has a wrong offset!");
static_assert(offsetof(BP_WeatherManager_C_ExecuteUbergraph_BP_WeatherManager, K2Node_Event_DeltaSeconds) == 0x000020, "Member 'BP_WeatherManager_C_ExecuteUbergraph_BP_WeatherManager::K2Node_Event_DeltaSeconds' has a wrong offset!");
static_assert(offsetof(BP_WeatherManager_C_ExecuteUbergraph_BP_WeatherManager, Temp_int_Loop_Counter_Variable) == 0x000024, "Member 'BP_WeatherManager_C_ExecuteUbergraph_BP_WeatherManager::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(BP_WeatherManager_C_ExecuteUbergraph_BP_WeatherManager, CallFunc_Add_IntInt_ReturnValue) == 0x000028, "Member 'BP_WeatherManager_C_ExecuteUbergraph_BP_WeatherManager::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_WeatherManager_C_ExecuteUbergraph_BP_WeatherManager, K2Node_InputActionEvent_Key) == 0x000030, "Member 'BP_WeatherManager_C_ExecuteUbergraph_BP_WeatherManager::K2Node_InputActionEvent_Key' has a wrong offset!");
static_assert(offsetof(BP_WeatherManager_C_ExecuteUbergraph_BP_WeatherManager, Temp_int_Array_Index_Variable) == 0x000048, "Member 'BP_WeatherManager_C_ExecuteUbergraph_BP_WeatherManager::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(BP_WeatherManager_C_ExecuteUbergraph_BP_WeatherManager, CallFunc_IsDedicatedServer_ReturnValue) == 0x00004C, "Member 'BP_WeatherManager_C_ExecuteUbergraph_BP_WeatherManager::CallFunc_IsDedicatedServer_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_WeatherManager_C_ExecuteUbergraph_BP_WeatherManager, CallFunc_GetAllWidgetsOfClass_FoundWidgets) == 0x000050, "Member 'BP_WeatherManager_C_ExecuteUbergraph_BP_WeatherManager::CallFunc_GetAllWidgetsOfClass_FoundWidgets' has a wrong offset!");
static_assert(offsetof(BP_WeatherManager_C_ExecuteUbergraph_BP_WeatherManager, K2Node_InputActionEvent_Key_1) == 0x000060, "Member 'BP_WeatherManager_C_ExecuteUbergraph_BP_WeatherManager::K2Node_InputActionEvent_Key_1' has a wrong offset!");
static_assert(offsetof(BP_WeatherManager_C_ExecuteUbergraph_BP_WeatherManager, CallFunc_Array_Get_Item) == 0x000078, "Member 'BP_WeatherManager_C_ExecuteUbergraph_BP_WeatherManager::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(BP_WeatherManager_C_ExecuteUbergraph_BP_WeatherManager, CallFunc_Array_Length_ReturnValue) == 0x000080, "Member 'BP_WeatherManager_C_ExecuteUbergraph_BP_WeatherManager::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_WeatherManager_C_ExecuteUbergraph_BP_WeatherManager, CallFunc_Less_IntInt_ReturnValue) == 0x000084, "Member 'BP_WeatherManager_C_ExecuteUbergraph_BP_WeatherManager::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_WeatherManager_C_ExecuteUbergraph_BP_WeatherManager, CallFunc_GetPlayerController_ReturnValue) == 0x000088, "Member 'BP_WeatherManager_C_ExecuteUbergraph_BP_WeatherManager::CallFunc_GetPlayerController_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_WeatherManager_C_ExecuteUbergraph_BP_WeatherManager, K2Node_DynamicCast_AsHuman_Player_Controller) == 0x000090, "Member 'BP_WeatherManager_C_ExecuteUbergraph_BP_WeatherManager::K2Node_DynamicCast_AsHuman_Player_Controller' has a wrong offset!");
static_assert(offsetof(BP_WeatherManager_C_ExecuteUbergraph_BP_WeatherManager, K2Node_DynamicCast_bSuccess) == 0x000098, "Member 'BP_WeatherManager_C_ExecuteUbergraph_BP_WeatherManager::K2Node_DynamicCast_bSuccess' has a wrong offset!");

// Function BP_WeatherManager.BP_WeatherManager_C.ReceiveTick
// 0x0004 (0x0004 - 0x0000)
struct BP_WeatherManager_C_ReceiveTick final
{
public:
	float                                         DeltaSeconds;                                      // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_WeatherManager_C_ReceiveTick) == 0x000004, "Wrong alignment on BP_WeatherManager_C_ReceiveTick");
static_assert(sizeof(BP_WeatherManager_C_ReceiveTick) == 0x000004, "Wrong size on BP_WeatherManager_C_ReceiveTick");
static_assert(offsetof(BP_WeatherManager_C_ReceiveTick, DeltaSeconds) == 0x000000, "Member 'BP_WeatherManager_C_ReceiveTick::DeltaSeconds' has a wrong offset!");

// Function BP_WeatherManager.BP_WeatherManager_C.InpActEvt_SmokeAdd_K2Node_InputActionEvent_0
// 0x0018 (0x0018 - 0x0000)
struct BP_WeatherManager_C_InpActEvt_SmokeAdd_K2Node_InputActionEvent_0 final
{
public:
	struct FKey                                   Key;                                               // 0x0000(0x0018)(BlueprintVisible, BlueprintReadOnly, Parm, HasGetValueTypeHash)
};
static_assert(alignof(BP_WeatherManager_C_InpActEvt_SmokeAdd_K2Node_InputActionEvent_0) == 0x000008, "Wrong alignment on BP_WeatherManager_C_InpActEvt_SmokeAdd_K2Node_InputActionEvent_0");
static_assert(sizeof(BP_WeatherManager_C_InpActEvt_SmokeAdd_K2Node_InputActionEvent_0) == 0x000018, "Wrong size on BP_WeatherManager_C_InpActEvt_SmokeAdd_K2Node_InputActionEvent_0");
static_assert(offsetof(BP_WeatherManager_C_InpActEvt_SmokeAdd_K2Node_InputActionEvent_0, Key) == 0x000000, "Member 'BP_WeatherManager_C_InpActEvt_SmokeAdd_K2Node_InputActionEvent_0::Key' has a wrong offset!");

// Function BP_WeatherManager.BP_WeatherManager_C.InpActEvt_SmokeRemove_K2Node_InputActionEvent_1
// 0x0018 (0x0018 - 0x0000)
struct BP_WeatherManager_C_InpActEvt_SmokeRemove_K2Node_InputActionEvent_1 final
{
public:
	struct FKey                                   Key;                                               // 0x0000(0x0018)(BlueprintVisible, BlueprintReadOnly, Parm, HasGetValueTypeHash)
};
static_assert(alignof(BP_WeatherManager_C_InpActEvt_SmokeRemove_K2Node_InputActionEvent_1) == 0x000008, "Wrong alignment on BP_WeatherManager_C_InpActEvt_SmokeRemove_K2Node_InputActionEvent_1");
static_assert(sizeof(BP_WeatherManager_C_InpActEvt_SmokeRemove_K2Node_InputActionEvent_1) == 0x000018, "Wrong size on BP_WeatherManager_C_InpActEvt_SmokeRemove_K2Node_InputActionEvent_1");
static_assert(offsetof(BP_WeatherManager_C_InpActEvt_SmokeRemove_K2Node_InputActionEvent_1, Key) == 0x000000, "Member 'BP_WeatherManager_C_InpActEvt_SmokeRemove_K2Node_InputActionEvent_1::Key' has a wrong offset!");

// Function BP_WeatherManager.BP_WeatherManager_C.InpActEvt_Ctrl+Alt_NumPadNine_K2Node_InputKeyEvent_0
// 0x0018 (0x0018 - 0x0000)
struct BP_WeatherManager_C_InpActEvt_CtrlPlusAlt_NumPadNine_K2Node_InputKeyEvent_0 final
{
public:
	struct FKey                                   Key;                                               // 0x0000(0x0018)(BlueprintVisible, BlueprintReadOnly, Parm, HasGetValueTypeHash)
};
static_assert(alignof(BP_WeatherManager_C_InpActEvt_CtrlPlusAlt_NumPadNine_K2Node_InputKeyEvent_0) == 0x000008, "Wrong alignment on BP_WeatherManager_C_InpActEvt_CtrlPlusAlt_NumPadNine_K2Node_InputKeyEvent_0");
static_assert(sizeof(BP_WeatherManager_C_InpActEvt_CtrlPlusAlt_NumPadNine_K2Node_InputKeyEvent_0) == 0x000018, "Wrong size on BP_WeatherManager_C_InpActEvt_CtrlPlusAlt_NumPadNine_K2Node_InputKeyEvent_0");
static_assert(offsetof(BP_WeatherManager_C_InpActEvt_CtrlPlusAlt_NumPadNine_K2Node_InputKeyEvent_0, Key) == 0x000000, "Member 'BP_WeatherManager_C_InpActEvt_CtrlPlusAlt_NumPadNine_K2Node_InputKeyEvent_0::Key' has a wrong offset!");

// Function BP_WeatherManager.BP_WeatherManager_C.UpdateMaterialParams
// 0x0044 (0x0044 - 0x0000)
struct BP_WeatherManager_C_UpdateMaterialParams final
{
public:
	float                                         CallFunc_GetCurrentWindIntensity_OutWindIntensity; // 0x0000(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_FClamp_ReturnValue;                       // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_GetCurrentSnowCoverAmount_OutSnowCoverAmount; // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_FMax_ReturnValue;                         // 0x000C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Divide_FloatFloat_ReturnValue;            // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector2D                              CallFunc_Conv_VectorToVector2D_ReturnValue;        // 0x0014(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_GetCurrentWetnessAmount_OutWetnessAmount; // 0x001C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector2D                              CallFunc_Normal2D_ReturnValue;                     // 0x0020(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector2D_X;                          // 0x0028(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector2D_Y;                          // 0x002C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_GetCurrentRainAmount_OutRainAmount;       // 0x0030(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           CallFunc_MakeColor_ReturnValue;                    // 0x0034(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_WeatherManager_C_UpdateMaterialParams) == 0x000004, "Wrong alignment on BP_WeatherManager_C_UpdateMaterialParams");
static_assert(sizeof(BP_WeatherManager_C_UpdateMaterialParams) == 0x000044, "Wrong size on BP_WeatherManager_C_UpdateMaterialParams");
static_assert(offsetof(BP_WeatherManager_C_UpdateMaterialParams, CallFunc_GetCurrentWindIntensity_OutWindIntensity) == 0x000000, "Member 'BP_WeatherManager_C_UpdateMaterialParams::CallFunc_GetCurrentWindIntensity_OutWindIntensity' has a wrong offset!");
static_assert(offsetof(BP_WeatherManager_C_UpdateMaterialParams, CallFunc_FClamp_ReturnValue) == 0x000004, "Member 'BP_WeatherManager_C_UpdateMaterialParams::CallFunc_FClamp_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_WeatherManager_C_UpdateMaterialParams, CallFunc_GetCurrentSnowCoverAmount_OutSnowCoverAmount) == 0x000008, "Member 'BP_WeatherManager_C_UpdateMaterialParams::CallFunc_GetCurrentSnowCoverAmount_OutSnowCoverAmount' has a wrong offset!");
static_assert(offsetof(BP_WeatherManager_C_UpdateMaterialParams, CallFunc_FMax_ReturnValue) == 0x00000C, "Member 'BP_WeatherManager_C_UpdateMaterialParams::CallFunc_FMax_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_WeatherManager_C_UpdateMaterialParams, CallFunc_Divide_FloatFloat_ReturnValue) == 0x000010, "Member 'BP_WeatherManager_C_UpdateMaterialParams::CallFunc_Divide_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_WeatherManager_C_UpdateMaterialParams, CallFunc_Conv_VectorToVector2D_ReturnValue) == 0x000014, "Member 'BP_WeatherManager_C_UpdateMaterialParams::CallFunc_Conv_VectorToVector2D_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_WeatherManager_C_UpdateMaterialParams, CallFunc_GetCurrentWetnessAmount_OutWetnessAmount) == 0x00001C, "Member 'BP_WeatherManager_C_UpdateMaterialParams::CallFunc_GetCurrentWetnessAmount_OutWetnessAmount' has a wrong offset!");
static_assert(offsetof(BP_WeatherManager_C_UpdateMaterialParams, CallFunc_Normal2D_ReturnValue) == 0x000020, "Member 'BP_WeatherManager_C_UpdateMaterialParams::CallFunc_Normal2D_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_WeatherManager_C_UpdateMaterialParams, CallFunc_BreakVector2D_X) == 0x000028, "Member 'BP_WeatherManager_C_UpdateMaterialParams::CallFunc_BreakVector2D_X' has a wrong offset!");
static_assert(offsetof(BP_WeatherManager_C_UpdateMaterialParams, CallFunc_BreakVector2D_Y) == 0x00002C, "Member 'BP_WeatherManager_C_UpdateMaterialParams::CallFunc_BreakVector2D_Y' has a wrong offset!");
static_assert(offsetof(BP_WeatherManager_C_UpdateMaterialParams, CallFunc_GetCurrentRainAmount_OutRainAmount) == 0x000030, "Member 'BP_WeatherManager_C_UpdateMaterialParams::CallFunc_GetCurrentRainAmount_OutRainAmount' has a wrong offset!");
static_assert(offsetof(BP_WeatherManager_C_UpdateMaterialParams, CallFunc_MakeColor_ReturnValue) == 0x000034, "Member 'BP_WeatherManager_C_UpdateMaterialParams::CallFunc_MakeColor_ReturnValue' has a wrong offset!");

// Function BP_WeatherManager.BP_WeatherManager_C.UpdateRainPPEffects
// 0x0010 (0x0010 - 0x0000)
struct BP_WeatherManager_C_UpdateRainPPEffects final
{
public:
	class UMaterialInstance*                      FinalPPMaterial;                                   // 0x0000(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Greater_FloatFloat_ReturnValue;           // 0x0008(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Greater_FloatFloat_ReturnValue_1;         // 0x0009(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanOR_ReturnValue;                    // 0x000A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsWet_OutWet;                             // 0x000B(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_WeatherManager_C_UpdateRainPPEffects) == 0x000008, "Wrong alignment on BP_WeatherManager_C_UpdateRainPPEffects");
static_assert(sizeof(BP_WeatherManager_C_UpdateRainPPEffects) == 0x000010, "Wrong size on BP_WeatherManager_C_UpdateRainPPEffects");
static_assert(offsetof(BP_WeatherManager_C_UpdateRainPPEffects, FinalPPMaterial) == 0x000000, "Member 'BP_WeatherManager_C_UpdateRainPPEffects::FinalPPMaterial' has a wrong offset!");
static_assert(offsetof(BP_WeatherManager_C_UpdateRainPPEffects, CallFunc_Greater_FloatFloat_ReturnValue) == 0x000008, "Member 'BP_WeatherManager_C_UpdateRainPPEffects::CallFunc_Greater_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_WeatherManager_C_UpdateRainPPEffects, CallFunc_Greater_FloatFloat_ReturnValue_1) == 0x000009, "Member 'BP_WeatherManager_C_UpdateRainPPEffects::CallFunc_Greater_FloatFloat_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_WeatherManager_C_UpdateRainPPEffects, CallFunc_BooleanOR_ReturnValue) == 0x00000A, "Member 'BP_WeatherManager_C_UpdateRainPPEffects::CallFunc_BooleanOR_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_WeatherManager_C_UpdateRainPPEffects, CallFunc_IsWet_OutWet) == 0x00000B, "Member 'BP_WeatherManager_C_UpdateRainPPEffects::CallFunc_IsWet_OutWet' has a wrong offset!");

// Function BP_WeatherManager.BP_WeatherManager_C.IsRaining
// 0x000C (0x000C - 0x0000)
struct BP_WeatherManager_C_IsRaining final
{
public:
	bool                                          OutRaining;                                        // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_GetCurrentRainAmount_OutRainAmount;       // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Greater_FloatFloat_ReturnValue;           // 0x0008(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_WeatherManager_C_IsRaining) == 0x000004, "Wrong alignment on BP_WeatherManager_C_IsRaining");
static_assert(sizeof(BP_WeatherManager_C_IsRaining) == 0x00000C, "Wrong size on BP_WeatherManager_C_IsRaining");
static_assert(offsetof(BP_WeatherManager_C_IsRaining, OutRaining) == 0x000000, "Member 'BP_WeatherManager_C_IsRaining::OutRaining' has a wrong offset!");
static_assert(offsetof(BP_WeatherManager_C_IsRaining, CallFunc_GetCurrentRainAmount_OutRainAmount) == 0x000004, "Member 'BP_WeatherManager_C_IsRaining::CallFunc_GetCurrentRainAmount_OutRainAmount' has a wrong offset!");
static_assert(offsetof(BP_WeatherManager_C_IsRaining, CallFunc_Greater_FloatFloat_ReturnValue) == 0x000008, "Member 'BP_WeatherManager_C_IsRaining::CallFunc_Greater_FloatFloat_ReturnValue' has a wrong offset!");

// Function BP_WeatherManager.BP_WeatherManager_C.IsWet
// 0x000C (0x000C - 0x0000)
struct BP_WeatherManager_C_IsWet final
{
public:
	bool                                          OutWet;                                            // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_GetCurrentWetnessAmount_OutWetnessAmount; // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Greater_FloatFloat_ReturnValue;           // 0x0008(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_WeatherManager_C_IsWet) == 0x000004, "Wrong alignment on BP_WeatherManager_C_IsWet");
static_assert(sizeof(BP_WeatherManager_C_IsWet) == 0x00000C, "Wrong size on BP_WeatherManager_C_IsWet");
static_assert(offsetof(BP_WeatherManager_C_IsWet, OutWet) == 0x000000, "Member 'BP_WeatherManager_C_IsWet::OutWet' has a wrong offset!");
static_assert(offsetof(BP_WeatherManager_C_IsWet, CallFunc_GetCurrentWetnessAmount_OutWetnessAmount) == 0x000004, "Member 'BP_WeatherManager_C_IsWet::CallFunc_GetCurrentWetnessAmount_OutWetnessAmount' has a wrong offset!");
static_assert(offsetof(BP_WeatherManager_C_IsWet, CallFunc_Greater_FloatFloat_ReturnValue) == 0x000008, "Member 'BP_WeatherManager_C_IsWet::CallFunc_Greater_FloatFloat_ReturnValue' has a wrong offset!");

// Function BP_WeatherManager.BP_WeatherManager_C.GetCurrentRainAmount
// 0x0008 (0x0008 - 0x0000)
struct BP_WeatherManager_C_GetCurrentRainAmount final
{
public:
	float                                         OutRainAmount;                                     // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Lerp_ReturnValue;                         // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_WeatherManager_C_GetCurrentRainAmount) == 0x000004, "Wrong alignment on BP_WeatherManager_C_GetCurrentRainAmount");
static_assert(sizeof(BP_WeatherManager_C_GetCurrentRainAmount) == 0x000008, "Wrong size on BP_WeatherManager_C_GetCurrentRainAmount");
static_assert(offsetof(BP_WeatherManager_C_GetCurrentRainAmount, OutRainAmount) == 0x000000, "Member 'BP_WeatherManager_C_GetCurrentRainAmount::OutRainAmount' has a wrong offset!");
static_assert(offsetof(BP_WeatherManager_C_GetCurrentRainAmount, CallFunc_Lerp_ReturnValue) == 0x000004, "Member 'BP_WeatherManager_C_GetCurrentRainAmount::CallFunc_Lerp_ReturnValue' has a wrong offset!");

// Function BP_WeatherManager.BP_WeatherManager_C.GetCurrentWetnessAmount
// 0x0008 (0x0008 - 0x0000)
struct BP_WeatherManager_C_GetCurrentWetnessAmount final
{
public:
	float                                         OutWetnessAmount;                                  // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Lerp_ReturnValue;                         // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_WeatherManager_C_GetCurrentWetnessAmount) == 0x000004, "Wrong alignment on BP_WeatherManager_C_GetCurrentWetnessAmount");
static_assert(sizeof(BP_WeatherManager_C_GetCurrentWetnessAmount) == 0x000008, "Wrong size on BP_WeatherManager_C_GetCurrentWetnessAmount");
static_assert(offsetof(BP_WeatherManager_C_GetCurrentWetnessAmount, OutWetnessAmount) == 0x000000, "Member 'BP_WeatherManager_C_GetCurrentWetnessAmount::OutWetnessAmount' has a wrong offset!");
static_assert(offsetof(BP_WeatherManager_C_GetCurrentWetnessAmount, CallFunc_Lerp_ReturnValue) == 0x000004, "Member 'BP_WeatherManager_C_GetCurrentWetnessAmount::CallFunc_Lerp_ReturnValue' has a wrong offset!");

// Function BP_WeatherManager.BP_WeatherManager_C.UpdateWeatherManagerComponent
// 0x0020 (0x0020 - 0x0000)
struct BP_WeatherManager_C_UpdateWeatherManagerComponent final
{
public:
	float                                         CallFunc_GetCurrentWindIntensity_OutWindIntensity; // 0x0000(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Multiply_VectorFloat_ReturnValue;         // 0x0004(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_GetCurrentSnowCoverAmount_OutSnowCoverAmount; // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_GetCurrentSnowingAmount_OutSnowingAmount; // 0x0014(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_GetCurrentWetnessAmount_OutWetnessAmount; // 0x0018(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_GetCurrentRainAmount_OutRainAmount;       // 0x001C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_WeatherManager_C_UpdateWeatherManagerComponent) == 0x000004, "Wrong alignment on BP_WeatherManager_C_UpdateWeatherManagerComponent");
static_assert(sizeof(BP_WeatherManager_C_UpdateWeatherManagerComponent) == 0x000020, "Wrong size on BP_WeatherManager_C_UpdateWeatherManagerComponent");
static_assert(offsetof(BP_WeatherManager_C_UpdateWeatherManagerComponent, CallFunc_GetCurrentWindIntensity_OutWindIntensity) == 0x000000, "Member 'BP_WeatherManager_C_UpdateWeatherManagerComponent::CallFunc_GetCurrentWindIntensity_OutWindIntensity' has a wrong offset!");
static_assert(offsetof(BP_WeatherManager_C_UpdateWeatherManagerComponent, CallFunc_Multiply_VectorFloat_ReturnValue) == 0x000004, "Member 'BP_WeatherManager_C_UpdateWeatherManagerComponent::CallFunc_Multiply_VectorFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_WeatherManager_C_UpdateWeatherManagerComponent, CallFunc_GetCurrentSnowCoverAmount_OutSnowCoverAmount) == 0x000010, "Member 'BP_WeatherManager_C_UpdateWeatherManagerComponent::CallFunc_GetCurrentSnowCoverAmount_OutSnowCoverAmount' has a wrong offset!");
static_assert(offsetof(BP_WeatherManager_C_UpdateWeatherManagerComponent, CallFunc_GetCurrentSnowingAmount_OutSnowingAmount) == 0x000014, "Member 'BP_WeatherManager_C_UpdateWeatherManagerComponent::CallFunc_GetCurrentSnowingAmount_OutSnowingAmount' has a wrong offset!");
static_assert(offsetof(BP_WeatherManager_C_UpdateWeatherManagerComponent, CallFunc_GetCurrentWetnessAmount_OutWetnessAmount) == 0x000018, "Member 'BP_WeatherManager_C_UpdateWeatherManagerComponent::CallFunc_GetCurrentWetnessAmount_OutWetnessAmount' has a wrong offset!");
static_assert(offsetof(BP_WeatherManager_C_UpdateWeatherManagerComponent, CallFunc_GetCurrentRainAmount_OutRainAmount) == 0x00001C, "Member 'BP_WeatherManager_C_UpdateWeatherManagerComponent::CallFunc_GetCurrentRainAmount_OutRainAmount' has a wrong offset!");

// Function BP_WeatherManager.BP_WeatherManager_C.GetCurrentCameraPosition
// 0x00C0 (0x00C0 - 0x0000)
struct BP_WeatherManager_C_GetCurrentCameraPosition final
{
public:
	struct FVector                                OutPosition;                                       // 0x0000(0x000C)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               OutRotation;                                       // 0x000C(0x000C)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          OutPositionValid;                                  // 0x0018(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_19[0x3];                                       // 0x0019(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FRotator                               ResultRotation;                                    // 0x001C(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          ResultPositionValid;                               // 0x0028(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_29[0x3];                                       // 0x0029(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                ResultPosition;                                    // 0x002C(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_GetUserControllerId_ReturnValue;          // 0x0038(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3C[0x4];                                       // 0x003C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class AHumanPlayerController*                 CallFunc_GetHumanPlayerControllerByControllerId_ReturnValue; // 0x0040(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0048(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_49[0x7];                                       // 0x0049(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 CallFunc_GetViewTarget_ReturnValue;                // 0x0050(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_58[0x8];                                       // 0x0058(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             CallFunc_GetTransform_ReturnValue;                 // 0x0060(0x0030)(ConstParm, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue_1;                    // 0x0090(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_91[0x3];                                       // 0x0091(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_BreakTransform_Location;                  // 0x0094(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               CallFunc_BreakTransform_Rotation;                  // 0x00A0(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FVector                                CallFunc_BreakTransform_Scale;                     // 0x00AC(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_WeatherManager_C_GetCurrentCameraPosition) == 0x000010, "Wrong alignment on BP_WeatherManager_C_GetCurrentCameraPosition");
static_assert(sizeof(BP_WeatherManager_C_GetCurrentCameraPosition) == 0x0000C0, "Wrong size on BP_WeatherManager_C_GetCurrentCameraPosition");
static_assert(offsetof(BP_WeatherManager_C_GetCurrentCameraPosition, OutPosition) == 0x000000, "Member 'BP_WeatherManager_C_GetCurrentCameraPosition::OutPosition' has a wrong offset!");
static_assert(offsetof(BP_WeatherManager_C_GetCurrentCameraPosition, OutRotation) == 0x00000C, "Member 'BP_WeatherManager_C_GetCurrentCameraPosition::OutRotation' has a wrong offset!");
static_assert(offsetof(BP_WeatherManager_C_GetCurrentCameraPosition, OutPositionValid) == 0x000018, "Member 'BP_WeatherManager_C_GetCurrentCameraPosition::OutPositionValid' has a wrong offset!");
static_assert(offsetof(BP_WeatherManager_C_GetCurrentCameraPosition, ResultRotation) == 0x00001C, "Member 'BP_WeatherManager_C_GetCurrentCameraPosition::ResultRotation' has a wrong offset!");
static_assert(offsetof(BP_WeatherManager_C_GetCurrentCameraPosition, ResultPositionValid) == 0x000028, "Member 'BP_WeatherManager_C_GetCurrentCameraPosition::ResultPositionValid' has a wrong offset!");
static_assert(offsetof(BP_WeatherManager_C_GetCurrentCameraPosition, ResultPosition) == 0x00002C, "Member 'BP_WeatherManager_C_GetCurrentCameraPosition::ResultPosition' has a wrong offset!");
static_assert(offsetof(BP_WeatherManager_C_GetCurrentCameraPosition, CallFunc_GetUserControllerId_ReturnValue) == 0x000038, "Member 'BP_WeatherManager_C_GetCurrentCameraPosition::CallFunc_GetUserControllerId_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_WeatherManager_C_GetCurrentCameraPosition, CallFunc_GetHumanPlayerControllerByControllerId_ReturnValue) == 0x000040, "Member 'BP_WeatherManager_C_GetCurrentCameraPosition::CallFunc_GetHumanPlayerControllerByControllerId_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_WeatherManager_C_GetCurrentCameraPosition, CallFunc_IsValid_ReturnValue) == 0x000048, "Member 'BP_WeatherManager_C_GetCurrentCameraPosition::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_WeatherManager_C_GetCurrentCameraPosition, CallFunc_GetViewTarget_ReturnValue) == 0x000050, "Member 'BP_WeatherManager_C_GetCurrentCameraPosition::CallFunc_GetViewTarget_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_WeatherManager_C_GetCurrentCameraPosition, CallFunc_GetTransform_ReturnValue) == 0x000060, "Member 'BP_WeatherManager_C_GetCurrentCameraPosition::CallFunc_GetTransform_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_WeatherManager_C_GetCurrentCameraPosition, CallFunc_IsValid_ReturnValue_1) == 0x000090, "Member 'BP_WeatherManager_C_GetCurrentCameraPosition::CallFunc_IsValid_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_WeatherManager_C_GetCurrentCameraPosition, CallFunc_BreakTransform_Location) == 0x000094, "Member 'BP_WeatherManager_C_GetCurrentCameraPosition::CallFunc_BreakTransform_Location' has a wrong offset!");
static_assert(offsetof(BP_WeatherManager_C_GetCurrentCameraPosition, CallFunc_BreakTransform_Rotation) == 0x0000A0, "Member 'BP_WeatherManager_C_GetCurrentCameraPosition::CallFunc_BreakTransform_Rotation' has a wrong offset!");
static_assert(offsetof(BP_WeatherManager_C_GetCurrentCameraPosition, CallFunc_BreakTransform_Scale) == 0x0000AC, "Member 'BP_WeatherManager_C_GetCurrentCameraPosition::CallFunc_BreakTransform_Scale' has a wrong offset!");

// Function BP_WeatherManager.BP_WeatherManager_C.UpdateParticleSystems
// 0x03C8 (0x03C8 - 0x0000)
struct BP_WeatherManager_C_UpdateParticleSystems final
{
public:
	bool                                          CallFunc_IsSnowing_OutRaining;                     // 0x0000(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_GetCurrentSnowingAmount_OutSnowingAmount; // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_FClamp_ReturnValue;                       // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_MakeVector_ReturnValue;                   // 0x000C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Lerp_ReturnValue;                         // 0x0018(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_MakeVector_ReturnValue_1;                 // 0x001C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_RandomFloatInRange_ReturnValue;           // 0x0028(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Lerp_ReturnValue_1;                       // 0x002C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_X;                            // 0x0030(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_Y;                            // 0x0034(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_Z;                            // 0x0038(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_GetCurrentCameraPosition_OutPosition;     // 0x003C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               CallFunc_GetCurrentCameraPosition_OutRotation;     // 0x0048(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_GetCurrentCameraPosition_OutPositionValid; // 0x0054(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_55[0x3];                                       // 0x0055(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector2D                              CallFunc_MakeVector2D_ReturnValue;                 // 0x0058(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector2D                              CallFunc_Normal2D_ReturnValue;                     // 0x0060(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Add_VectorVector_ReturnValue;             // 0x0068(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector2D                              CallFunc_Multiply_Vector2DFloat_ReturnValue;       // 0x0074(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FHitResult                             CallFunc_K2_SetWorldLocationAndRotation_SweepHitResult; // 0x007C(0x008C)(IsPlainOldData, NoDestructor, ContainsInstancedReference)
	float                                         CallFunc_BreakVector2D_X;                          // 0x0108(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector2D_Y;                          // 0x010C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector2D                              CallFunc_Multiply_Vector2DFloat_ReturnValue_1;     // 0x0110(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_MakeVector_ReturnValue_2;                 // 0x0118(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector2D_X_1;                        // 0x0124(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector2D_Y_1;                        // 0x0128(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_MakeVector_ReturnValue_3;                 // 0x012C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsRaining_OutRaining;                     // 0x0138(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_139[0x3];                                      // 0x0139(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_GetCurrentRainAmount_OutRainAmount;       // 0x013C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_FClamp_ReturnValue_1;                     // 0x0140(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Lerp_ReturnValue_2;                       // 0x0144(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_MakeVector_ReturnValue_4;                 // 0x0148(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Lerp_ReturnValue_3;                       // 0x0154(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_GetCurrentCameraPosition_OutPosition_1;   // 0x0158(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               CallFunc_GetCurrentCameraPosition_OutRotation_1;   // 0x0164(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_GetCurrentCameraPosition_OutPositionValid_1; // 0x0170(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_171[0x3];                                      // 0x0171(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_Add_VectorVector_ReturnValue_1;           // 0x0174(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FHitResult                             CallFunc_K2_SetWorldLocationAndRotation_SweepHitResult_1; // 0x0180(0x008C)(IsPlainOldData, NoDestructor, ContainsInstancedReference)
	struct FVector                                CallFunc_Subtract_VectorVector_ReturnValue;        // 0x020C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FHitResult                             CallFunc_K2_SetWorldLocationAndRotation_SweepHitResult_2; // 0x0218(0x008C)(IsPlainOldData, NoDestructor, ContainsInstancedReference)
	struct FHitResult                             CallFunc_K2_SetWorldLocationAndRotation_SweepHitResult_3; // 0x02A4(0x008C)(IsPlainOldData, NoDestructor, ContainsInstancedReference)
	struct FVector                                CallFunc_Add_VectorVector_ReturnValue_2;           // 0x0330(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FHitResult                             CallFunc_K2_SetWorldLocationAndRotation_SweepHitResult_4; // 0x033C(0x008C)(IsPlainOldData, NoDestructor, ContainsInstancedReference)
};
static_assert(alignof(BP_WeatherManager_C_UpdateParticleSystems) == 0x000004, "Wrong alignment on BP_WeatherManager_C_UpdateParticleSystems");
static_assert(sizeof(BP_WeatherManager_C_UpdateParticleSystems) == 0x0003C8, "Wrong size on BP_WeatherManager_C_UpdateParticleSystems");
static_assert(offsetof(BP_WeatherManager_C_UpdateParticleSystems, CallFunc_IsSnowing_OutRaining) == 0x000000, "Member 'BP_WeatherManager_C_UpdateParticleSystems::CallFunc_IsSnowing_OutRaining' has a wrong offset!");
static_assert(offsetof(BP_WeatherManager_C_UpdateParticleSystems, CallFunc_GetCurrentSnowingAmount_OutSnowingAmount) == 0x000004, "Member 'BP_WeatherManager_C_UpdateParticleSystems::CallFunc_GetCurrentSnowingAmount_OutSnowingAmount' has a wrong offset!");
static_assert(offsetof(BP_WeatherManager_C_UpdateParticleSystems, CallFunc_FClamp_ReturnValue) == 0x000008, "Member 'BP_WeatherManager_C_UpdateParticleSystems::CallFunc_FClamp_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_WeatherManager_C_UpdateParticleSystems, CallFunc_MakeVector_ReturnValue) == 0x00000C, "Member 'BP_WeatherManager_C_UpdateParticleSystems::CallFunc_MakeVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_WeatherManager_C_UpdateParticleSystems, CallFunc_Lerp_ReturnValue) == 0x000018, "Member 'BP_WeatherManager_C_UpdateParticleSystems::CallFunc_Lerp_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_WeatherManager_C_UpdateParticleSystems, CallFunc_MakeVector_ReturnValue_1) == 0x00001C, "Member 'BP_WeatherManager_C_UpdateParticleSystems::CallFunc_MakeVector_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_WeatherManager_C_UpdateParticleSystems, CallFunc_RandomFloatInRange_ReturnValue) == 0x000028, "Member 'BP_WeatherManager_C_UpdateParticleSystems::CallFunc_RandomFloatInRange_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_WeatherManager_C_UpdateParticleSystems, CallFunc_Lerp_ReturnValue_1) == 0x00002C, "Member 'BP_WeatherManager_C_UpdateParticleSystems::CallFunc_Lerp_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_WeatherManager_C_UpdateParticleSystems, CallFunc_BreakVector_X) == 0x000030, "Member 'BP_WeatherManager_C_UpdateParticleSystems::CallFunc_BreakVector_X' has a wrong offset!");
static_assert(offsetof(BP_WeatherManager_C_UpdateParticleSystems, CallFunc_BreakVector_Y) == 0x000034, "Member 'BP_WeatherManager_C_UpdateParticleSystems::CallFunc_BreakVector_Y' has a wrong offset!");
static_assert(offsetof(BP_WeatherManager_C_UpdateParticleSystems, CallFunc_BreakVector_Z) == 0x000038, "Member 'BP_WeatherManager_C_UpdateParticleSystems::CallFunc_BreakVector_Z' has a wrong offset!");
static_assert(offsetof(BP_WeatherManager_C_UpdateParticleSystems, CallFunc_GetCurrentCameraPosition_OutPosition) == 0x00003C, "Member 'BP_WeatherManager_C_UpdateParticleSystems::CallFunc_GetCurrentCameraPosition_OutPosition' has a wrong offset!");
static_assert(offsetof(BP_WeatherManager_C_UpdateParticleSystems, CallFunc_GetCurrentCameraPosition_OutRotation) == 0x000048, "Member 'BP_WeatherManager_C_UpdateParticleSystems::CallFunc_GetCurrentCameraPosition_OutRotation' has a wrong offset!");
static_assert(offsetof(BP_WeatherManager_C_UpdateParticleSystems, CallFunc_GetCurrentCameraPosition_OutPositionValid) == 0x000054, "Member 'BP_WeatherManager_C_UpdateParticleSystems::CallFunc_GetCurrentCameraPosition_OutPositionValid' has a wrong offset!");
static_assert(offsetof(BP_WeatherManager_C_UpdateParticleSystems, CallFunc_MakeVector2D_ReturnValue) == 0x000058, "Member 'BP_WeatherManager_C_UpdateParticleSystems::CallFunc_MakeVector2D_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_WeatherManager_C_UpdateParticleSystems, CallFunc_Normal2D_ReturnValue) == 0x000060, "Member 'BP_WeatherManager_C_UpdateParticleSystems::CallFunc_Normal2D_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_WeatherManager_C_UpdateParticleSystems, CallFunc_Add_VectorVector_ReturnValue) == 0x000068, "Member 'BP_WeatherManager_C_UpdateParticleSystems::CallFunc_Add_VectorVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_WeatherManager_C_UpdateParticleSystems, CallFunc_Multiply_Vector2DFloat_ReturnValue) == 0x000074, "Member 'BP_WeatherManager_C_UpdateParticleSystems::CallFunc_Multiply_Vector2DFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_WeatherManager_C_UpdateParticleSystems, CallFunc_K2_SetWorldLocationAndRotation_SweepHitResult) == 0x00007C, "Member 'BP_WeatherManager_C_UpdateParticleSystems::CallFunc_K2_SetWorldLocationAndRotation_SweepHitResult' has a wrong offset!");
static_assert(offsetof(BP_WeatherManager_C_UpdateParticleSystems, CallFunc_BreakVector2D_X) == 0x000108, "Member 'BP_WeatherManager_C_UpdateParticleSystems::CallFunc_BreakVector2D_X' has a wrong offset!");
static_assert(offsetof(BP_WeatherManager_C_UpdateParticleSystems, CallFunc_BreakVector2D_Y) == 0x00010C, "Member 'BP_WeatherManager_C_UpdateParticleSystems::CallFunc_BreakVector2D_Y' has a wrong offset!");
static_assert(offsetof(BP_WeatherManager_C_UpdateParticleSystems, CallFunc_Multiply_Vector2DFloat_ReturnValue_1) == 0x000110, "Member 'BP_WeatherManager_C_UpdateParticleSystems::CallFunc_Multiply_Vector2DFloat_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_WeatherManager_C_UpdateParticleSystems, CallFunc_MakeVector_ReturnValue_2) == 0x000118, "Member 'BP_WeatherManager_C_UpdateParticleSystems::CallFunc_MakeVector_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BP_WeatherManager_C_UpdateParticleSystems, CallFunc_BreakVector2D_X_1) == 0x000124, "Member 'BP_WeatherManager_C_UpdateParticleSystems::CallFunc_BreakVector2D_X_1' has a wrong offset!");
static_assert(offsetof(BP_WeatherManager_C_UpdateParticleSystems, CallFunc_BreakVector2D_Y_1) == 0x000128, "Member 'BP_WeatherManager_C_UpdateParticleSystems::CallFunc_BreakVector2D_Y_1' has a wrong offset!");
static_assert(offsetof(BP_WeatherManager_C_UpdateParticleSystems, CallFunc_MakeVector_ReturnValue_3) == 0x00012C, "Member 'BP_WeatherManager_C_UpdateParticleSystems::CallFunc_MakeVector_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(BP_WeatherManager_C_UpdateParticleSystems, CallFunc_IsRaining_OutRaining) == 0x000138, "Member 'BP_WeatherManager_C_UpdateParticleSystems::CallFunc_IsRaining_OutRaining' has a wrong offset!");
static_assert(offsetof(BP_WeatherManager_C_UpdateParticleSystems, CallFunc_GetCurrentRainAmount_OutRainAmount) == 0x00013C, "Member 'BP_WeatherManager_C_UpdateParticleSystems::CallFunc_GetCurrentRainAmount_OutRainAmount' has a wrong offset!");
static_assert(offsetof(BP_WeatherManager_C_UpdateParticleSystems, CallFunc_FClamp_ReturnValue_1) == 0x000140, "Member 'BP_WeatherManager_C_UpdateParticleSystems::CallFunc_FClamp_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_WeatherManager_C_UpdateParticleSystems, CallFunc_Lerp_ReturnValue_2) == 0x000144, "Member 'BP_WeatherManager_C_UpdateParticleSystems::CallFunc_Lerp_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BP_WeatherManager_C_UpdateParticleSystems, CallFunc_MakeVector_ReturnValue_4) == 0x000148, "Member 'BP_WeatherManager_C_UpdateParticleSystems::CallFunc_MakeVector_ReturnValue_4' has a wrong offset!");
static_assert(offsetof(BP_WeatherManager_C_UpdateParticleSystems, CallFunc_Lerp_ReturnValue_3) == 0x000154, "Member 'BP_WeatherManager_C_UpdateParticleSystems::CallFunc_Lerp_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(BP_WeatherManager_C_UpdateParticleSystems, CallFunc_GetCurrentCameraPosition_OutPosition_1) == 0x000158, "Member 'BP_WeatherManager_C_UpdateParticleSystems::CallFunc_GetCurrentCameraPosition_OutPosition_1' has a wrong offset!");
static_assert(offsetof(BP_WeatherManager_C_UpdateParticleSystems, CallFunc_GetCurrentCameraPosition_OutRotation_1) == 0x000164, "Member 'BP_WeatherManager_C_UpdateParticleSystems::CallFunc_GetCurrentCameraPosition_OutRotation_1' has a wrong offset!");
static_assert(offsetof(BP_WeatherManager_C_UpdateParticleSystems, CallFunc_GetCurrentCameraPosition_OutPositionValid_1) == 0x000170, "Member 'BP_WeatherManager_C_UpdateParticleSystems::CallFunc_GetCurrentCameraPosition_OutPositionValid_1' has a wrong offset!");
static_assert(offsetof(BP_WeatherManager_C_UpdateParticleSystems, CallFunc_Add_VectorVector_ReturnValue_1) == 0x000174, "Member 'BP_WeatherManager_C_UpdateParticleSystems::CallFunc_Add_VectorVector_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_WeatherManager_C_UpdateParticleSystems, CallFunc_K2_SetWorldLocationAndRotation_SweepHitResult_1) == 0x000180, "Member 'BP_WeatherManager_C_UpdateParticleSystems::CallFunc_K2_SetWorldLocationAndRotation_SweepHitResult_1' has a wrong offset!");
static_assert(offsetof(BP_WeatherManager_C_UpdateParticleSystems, CallFunc_Subtract_VectorVector_ReturnValue) == 0x00020C, "Member 'BP_WeatherManager_C_UpdateParticleSystems::CallFunc_Subtract_VectorVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_WeatherManager_C_UpdateParticleSystems, CallFunc_K2_SetWorldLocationAndRotation_SweepHitResult_2) == 0x000218, "Member 'BP_WeatherManager_C_UpdateParticleSystems::CallFunc_K2_SetWorldLocationAndRotation_SweepHitResult_2' has a wrong offset!");
static_assert(offsetof(BP_WeatherManager_C_UpdateParticleSystems, CallFunc_K2_SetWorldLocationAndRotation_SweepHitResult_3) == 0x0002A4, "Member 'BP_WeatherManager_C_UpdateParticleSystems::CallFunc_K2_SetWorldLocationAndRotation_SweepHitResult_3' has a wrong offset!");
static_assert(offsetof(BP_WeatherManager_C_UpdateParticleSystems, CallFunc_Add_VectorVector_ReturnValue_2) == 0x000330, "Member 'BP_WeatherManager_C_UpdateParticleSystems::CallFunc_Add_VectorVector_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BP_WeatherManager_C_UpdateParticleSystems, CallFunc_K2_SetWorldLocationAndRotation_SweepHitResult_4) == 0x00033C, "Member 'BP_WeatherManager_C_UpdateParticleSystems::CallFunc_K2_SetWorldLocationAndRotation_SweepHitResult_4' has a wrong offset!");

// Function BP_WeatherManager.BP_WeatherManager_C.Simulate
// 0x0098 (0x0098 - 0x0000)
struct BP_WeatherManager_C_Simulate final
{
public:
	float                                         ChangeDir;                                         // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         DeltaValue;                                        // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_FMax_ReturnValue;                         // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_GetCurrentWetnessAmount_OutWetnessAmount; // 0x000C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Divide_FloatFloat_ReturnValue;            // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_GreaterEqual_FloatFloat_ReturnValue;      // 0x0014(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_15[0x3];                                       // 0x0015(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_GetCurrentRainAmount_OutRainAmount;       // 0x0018(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_GreaterEqual_FloatFloat_ReturnValue_1;    // 0x001C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Greater_FloatFloat_ReturnValue;           // 0x001D(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanAND_ReturnValue;                   // 0x001E(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_1F[0x1];                                       // 0x001F(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_FMax_ReturnValue_1;                       // 0x0020(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_GetCurrentWetnessAmount_OutWetnessAmount_1; // 0x0024(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Divide_FloatFloat_ReturnValue_1;          // 0x0028(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue;          // 0x002C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_GreaterEqual_FloatFloat_ReturnValue_2;    // 0x0030(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_31[0x3];                                       // 0x0031(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_Add_FloatFloat_ReturnValue;               // 0x0034(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_FClamp_ReturnValue;                       // 0x0038(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_GetCurrentRainAmount_OutRainAmount_1;     // 0x003C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_GreaterEqual_FloatFloat_ReturnValue_3;    // 0x0040(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_41[0x3];                                       // 0x0041(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_GetTimeSeconds_ReturnValue;               // 0x0044(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanAND_ReturnValue_1;                 // 0x0048(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_49[0x3];                                       // 0x0049(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_UpdateWeatherForecastSetup_ReturnValue;   // 0x004C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_GetTimeSeconds_ReturnValue_1;             // 0x0050(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_UpdateWeatherForecastSetup_ReturnValue_1; // 0x0054(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue_1;        // 0x0058(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_GetTimeSeconds_ReturnValue_2;             // 0x005C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Add_FloatFloat_ReturnValue_1;             // 0x0060(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_UpdateWeatherForecastSetup_ReturnValue_2; // 0x0064(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_FClamp_ReturnValue_1;                     // 0x0068(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_FMax_ReturnValue_2;                       // 0x006C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_HasAuthority_ReturnValue;                 // 0x0070(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_71[0x3];                                       // 0x0071(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_Divide_FloatFloat_ReturnValue_2;          // 0x0074(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue_2;        // 0x0078(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_GetCurrentRainAmount_OutRainAmount_2;     // 0x007C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsRaining_OutRaining;                     // 0x0080(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_81[0x3];                                       // 0x0081(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_Lerp_ReturnValue;                         // 0x0084(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_FMax_ReturnValue_3;                       // 0x0088(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Divide_FloatFloat_ReturnValue_3;          // 0x008C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Add_FloatFloat_ReturnValue_2;             // 0x0090(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_FClamp_ReturnValue_2;                     // 0x0094(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_WeatherManager_C_Simulate) == 0x000004, "Wrong alignment on BP_WeatherManager_C_Simulate");
static_assert(sizeof(BP_WeatherManager_C_Simulate) == 0x000098, "Wrong size on BP_WeatherManager_C_Simulate");
static_assert(offsetof(BP_WeatherManager_C_Simulate, ChangeDir) == 0x000000, "Member 'BP_WeatherManager_C_Simulate::ChangeDir' has a wrong offset!");
static_assert(offsetof(BP_WeatherManager_C_Simulate, DeltaValue) == 0x000004, "Member 'BP_WeatherManager_C_Simulate::DeltaValue' has a wrong offset!");
static_assert(offsetof(BP_WeatherManager_C_Simulate, CallFunc_FMax_ReturnValue) == 0x000008, "Member 'BP_WeatherManager_C_Simulate::CallFunc_FMax_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_WeatherManager_C_Simulate, CallFunc_GetCurrentWetnessAmount_OutWetnessAmount) == 0x00000C, "Member 'BP_WeatherManager_C_Simulate::CallFunc_GetCurrentWetnessAmount_OutWetnessAmount' has a wrong offset!");
static_assert(offsetof(BP_WeatherManager_C_Simulate, CallFunc_Divide_FloatFloat_ReturnValue) == 0x000010, "Member 'BP_WeatherManager_C_Simulate::CallFunc_Divide_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_WeatherManager_C_Simulate, CallFunc_GreaterEqual_FloatFloat_ReturnValue) == 0x000014, "Member 'BP_WeatherManager_C_Simulate::CallFunc_GreaterEqual_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_WeatherManager_C_Simulate, CallFunc_GetCurrentRainAmount_OutRainAmount) == 0x000018, "Member 'BP_WeatherManager_C_Simulate::CallFunc_GetCurrentRainAmount_OutRainAmount' has a wrong offset!");
static_assert(offsetof(BP_WeatherManager_C_Simulate, CallFunc_GreaterEqual_FloatFloat_ReturnValue_1) == 0x00001C, "Member 'BP_WeatherManager_C_Simulate::CallFunc_GreaterEqual_FloatFloat_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_WeatherManager_C_Simulate, CallFunc_Greater_FloatFloat_ReturnValue) == 0x00001D, "Member 'BP_WeatherManager_C_Simulate::CallFunc_Greater_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_WeatherManager_C_Simulate, CallFunc_BooleanAND_ReturnValue) == 0x00001E, "Member 'BP_WeatherManager_C_Simulate::CallFunc_BooleanAND_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_WeatherManager_C_Simulate, CallFunc_FMax_ReturnValue_1) == 0x000020, "Member 'BP_WeatherManager_C_Simulate::CallFunc_FMax_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_WeatherManager_C_Simulate, CallFunc_GetCurrentWetnessAmount_OutWetnessAmount_1) == 0x000024, "Member 'BP_WeatherManager_C_Simulate::CallFunc_GetCurrentWetnessAmount_OutWetnessAmount_1' has a wrong offset!");
static_assert(offsetof(BP_WeatherManager_C_Simulate, CallFunc_Divide_FloatFloat_ReturnValue_1) == 0x000028, "Member 'BP_WeatherManager_C_Simulate::CallFunc_Divide_FloatFloat_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_WeatherManager_C_Simulate, CallFunc_Multiply_FloatFloat_ReturnValue) == 0x00002C, "Member 'BP_WeatherManager_C_Simulate::CallFunc_Multiply_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_WeatherManager_C_Simulate, CallFunc_GreaterEqual_FloatFloat_ReturnValue_2) == 0x000030, "Member 'BP_WeatherManager_C_Simulate::CallFunc_GreaterEqual_FloatFloat_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BP_WeatherManager_C_Simulate, CallFunc_Add_FloatFloat_ReturnValue) == 0x000034, "Member 'BP_WeatherManager_C_Simulate::CallFunc_Add_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_WeatherManager_C_Simulate, CallFunc_FClamp_ReturnValue) == 0x000038, "Member 'BP_WeatherManager_C_Simulate::CallFunc_FClamp_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_WeatherManager_C_Simulate, CallFunc_GetCurrentRainAmount_OutRainAmount_1) == 0x00003C, "Member 'BP_WeatherManager_C_Simulate::CallFunc_GetCurrentRainAmount_OutRainAmount_1' has a wrong offset!");
static_assert(offsetof(BP_WeatherManager_C_Simulate, CallFunc_GreaterEqual_FloatFloat_ReturnValue_3) == 0x000040, "Member 'BP_WeatherManager_C_Simulate::CallFunc_GreaterEqual_FloatFloat_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(BP_WeatherManager_C_Simulate, CallFunc_GetTimeSeconds_ReturnValue) == 0x000044, "Member 'BP_WeatherManager_C_Simulate::CallFunc_GetTimeSeconds_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_WeatherManager_C_Simulate, CallFunc_BooleanAND_ReturnValue_1) == 0x000048, "Member 'BP_WeatherManager_C_Simulate::CallFunc_BooleanAND_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_WeatherManager_C_Simulate, CallFunc_UpdateWeatherForecastSetup_ReturnValue) == 0x00004C, "Member 'BP_WeatherManager_C_Simulate::CallFunc_UpdateWeatherForecastSetup_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_WeatherManager_C_Simulate, CallFunc_GetTimeSeconds_ReturnValue_1) == 0x000050, "Member 'BP_WeatherManager_C_Simulate::CallFunc_GetTimeSeconds_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_WeatherManager_C_Simulate, CallFunc_UpdateWeatherForecastSetup_ReturnValue_1) == 0x000054, "Member 'BP_WeatherManager_C_Simulate::CallFunc_UpdateWeatherForecastSetup_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_WeatherManager_C_Simulate, CallFunc_Multiply_FloatFloat_ReturnValue_1) == 0x000058, "Member 'BP_WeatherManager_C_Simulate::CallFunc_Multiply_FloatFloat_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_WeatherManager_C_Simulate, CallFunc_GetTimeSeconds_ReturnValue_2) == 0x00005C, "Member 'BP_WeatherManager_C_Simulate::CallFunc_GetTimeSeconds_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BP_WeatherManager_C_Simulate, CallFunc_Add_FloatFloat_ReturnValue_1) == 0x000060, "Member 'BP_WeatherManager_C_Simulate::CallFunc_Add_FloatFloat_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_WeatherManager_C_Simulate, CallFunc_UpdateWeatherForecastSetup_ReturnValue_2) == 0x000064, "Member 'BP_WeatherManager_C_Simulate::CallFunc_UpdateWeatherForecastSetup_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BP_WeatherManager_C_Simulate, CallFunc_FClamp_ReturnValue_1) == 0x000068, "Member 'BP_WeatherManager_C_Simulate::CallFunc_FClamp_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_WeatherManager_C_Simulate, CallFunc_FMax_ReturnValue_2) == 0x00006C, "Member 'BP_WeatherManager_C_Simulate::CallFunc_FMax_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BP_WeatherManager_C_Simulate, CallFunc_HasAuthority_ReturnValue) == 0x000070, "Member 'BP_WeatherManager_C_Simulate::CallFunc_HasAuthority_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_WeatherManager_C_Simulate, CallFunc_Divide_FloatFloat_ReturnValue_2) == 0x000074, "Member 'BP_WeatherManager_C_Simulate::CallFunc_Divide_FloatFloat_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BP_WeatherManager_C_Simulate, CallFunc_Multiply_FloatFloat_ReturnValue_2) == 0x000078, "Member 'BP_WeatherManager_C_Simulate::CallFunc_Multiply_FloatFloat_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BP_WeatherManager_C_Simulate, CallFunc_GetCurrentRainAmount_OutRainAmount_2) == 0x00007C, "Member 'BP_WeatherManager_C_Simulate::CallFunc_GetCurrentRainAmount_OutRainAmount_2' has a wrong offset!");
static_assert(offsetof(BP_WeatherManager_C_Simulate, CallFunc_IsRaining_OutRaining) == 0x000080, "Member 'BP_WeatherManager_C_Simulate::CallFunc_IsRaining_OutRaining' has a wrong offset!");
static_assert(offsetof(BP_WeatherManager_C_Simulate, CallFunc_Lerp_ReturnValue) == 0x000084, "Member 'BP_WeatherManager_C_Simulate::CallFunc_Lerp_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_WeatherManager_C_Simulate, CallFunc_FMax_ReturnValue_3) == 0x000088, "Member 'BP_WeatherManager_C_Simulate::CallFunc_FMax_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(BP_WeatherManager_C_Simulate, CallFunc_Divide_FloatFloat_ReturnValue_3) == 0x00008C, "Member 'BP_WeatherManager_C_Simulate::CallFunc_Divide_FloatFloat_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(BP_WeatherManager_C_Simulate, CallFunc_Add_FloatFloat_ReturnValue_2) == 0x000090, "Member 'BP_WeatherManager_C_Simulate::CallFunc_Add_FloatFloat_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BP_WeatherManager_C_Simulate, CallFunc_FClamp_ReturnValue_2) == 0x000094, "Member 'BP_WeatherManager_C_Simulate::CallFunc_FClamp_ReturnValue_2' has a wrong offset!");

// Function BP_WeatherManager.BP_WeatherManager_C.IsRainPostprocessEnabled
// 0x0006 (0x0006 - 0x0000)
struct BP_WeatherManager_C_IsRainPostprocessEnabled final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsSnowCover_OutSnowCover;                 // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsWet_OutWet;                             // 0x0002(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsRaining_OutRaining;                     // 0x0003(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanOR_ReturnValue;                    // 0x0004(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanOR_ReturnValue_1;                  // 0x0005(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_WeatherManager_C_IsRainPostprocessEnabled) == 0x000001, "Wrong alignment on BP_WeatherManager_C_IsRainPostprocessEnabled");
static_assert(sizeof(BP_WeatherManager_C_IsRainPostprocessEnabled) == 0x000006, "Wrong size on BP_WeatherManager_C_IsRainPostprocessEnabled");
static_assert(offsetof(BP_WeatherManager_C_IsRainPostprocessEnabled, ReturnValue) == 0x000000, "Member 'BP_WeatherManager_C_IsRainPostprocessEnabled::ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_WeatherManager_C_IsRainPostprocessEnabled, CallFunc_IsSnowCover_OutSnowCover) == 0x000001, "Member 'BP_WeatherManager_C_IsRainPostprocessEnabled::CallFunc_IsSnowCover_OutSnowCover' has a wrong offset!");
static_assert(offsetof(BP_WeatherManager_C_IsRainPostprocessEnabled, CallFunc_IsWet_OutWet) == 0x000002, "Member 'BP_WeatherManager_C_IsRainPostprocessEnabled::CallFunc_IsWet_OutWet' has a wrong offset!");
static_assert(offsetof(BP_WeatherManager_C_IsRainPostprocessEnabled, CallFunc_IsRaining_OutRaining) == 0x000003, "Member 'BP_WeatherManager_C_IsRainPostprocessEnabled::CallFunc_IsRaining_OutRaining' has a wrong offset!");
static_assert(offsetof(BP_WeatherManager_C_IsRainPostprocessEnabled, CallFunc_BooleanOR_ReturnValue) == 0x000004, "Member 'BP_WeatherManager_C_IsRainPostprocessEnabled::CallFunc_BooleanOR_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_WeatherManager_C_IsRainPostprocessEnabled, CallFunc_BooleanOR_ReturnValue_1) == 0x000005, "Member 'BP_WeatherManager_C_IsRainPostprocessEnabled::CallFunc_BooleanOR_ReturnValue_1' has a wrong offset!");

// Function BP_WeatherManager.BP_WeatherManager_C.IsRainOcclusionEnabled
// 0x0008 (0x0008 - 0x0000)
struct BP_WeatherManager_C_IsRainOcclusionEnabled final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsSnowCover_OutSnowCover;                 // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsSnowing_OutRaining;                     // 0x0002(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsWet_OutWet;                             // 0x0003(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsRaining_OutRaining;                     // 0x0004(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanOR_ReturnValue;                    // 0x0005(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanOR_ReturnValue_1;                  // 0x0006(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanOR_ReturnValue_2;                  // 0x0007(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_WeatherManager_C_IsRainOcclusionEnabled) == 0x000001, "Wrong alignment on BP_WeatherManager_C_IsRainOcclusionEnabled");
static_assert(sizeof(BP_WeatherManager_C_IsRainOcclusionEnabled) == 0x000008, "Wrong size on BP_WeatherManager_C_IsRainOcclusionEnabled");
static_assert(offsetof(BP_WeatherManager_C_IsRainOcclusionEnabled, ReturnValue) == 0x000000, "Member 'BP_WeatherManager_C_IsRainOcclusionEnabled::ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_WeatherManager_C_IsRainOcclusionEnabled, CallFunc_IsSnowCover_OutSnowCover) == 0x000001, "Member 'BP_WeatherManager_C_IsRainOcclusionEnabled::CallFunc_IsSnowCover_OutSnowCover' has a wrong offset!");
static_assert(offsetof(BP_WeatherManager_C_IsRainOcclusionEnabled, CallFunc_IsSnowing_OutRaining) == 0x000002, "Member 'BP_WeatherManager_C_IsRainOcclusionEnabled::CallFunc_IsSnowing_OutRaining' has a wrong offset!");
static_assert(offsetof(BP_WeatherManager_C_IsRainOcclusionEnabled, CallFunc_IsWet_OutWet) == 0x000003, "Member 'BP_WeatherManager_C_IsRainOcclusionEnabled::CallFunc_IsWet_OutWet' has a wrong offset!");
static_assert(offsetof(BP_WeatherManager_C_IsRainOcclusionEnabled, CallFunc_IsRaining_OutRaining) == 0x000004, "Member 'BP_WeatherManager_C_IsRainOcclusionEnabled::CallFunc_IsRaining_OutRaining' has a wrong offset!");
static_assert(offsetof(BP_WeatherManager_C_IsRainOcclusionEnabled, CallFunc_BooleanOR_ReturnValue) == 0x000005, "Member 'BP_WeatherManager_C_IsRainOcclusionEnabled::CallFunc_BooleanOR_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_WeatherManager_C_IsRainOcclusionEnabled, CallFunc_BooleanOR_ReturnValue_1) == 0x000006, "Member 'BP_WeatherManager_C_IsRainOcclusionEnabled::CallFunc_BooleanOR_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_WeatherManager_C_IsRainOcclusionEnabled, CallFunc_BooleanOR_ReturnValue_2) == 0x000007, "Member 'BP_WeatherManager_C_IsRainOcclusionEnabled::CallFunc_BooleanOR_ReturnValue_2' has a wrong offset!");

// Function BP_WeatherManager.BP_WeatherManager_C.GetCurrentSnowingAmount
// 0x0008 (0x0008 - 0x0000)
struct BP_WeatherManager_C_GetCurrentSnowingAmount final
{
public:
	float                                         OutSnowingAmount;                                  // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Lerp_ReturnValue;                         // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_WeatherManager_C_GetCurrentSnowingAmount) == 0x000004, "Wrong alignment on BP_WeatherManager_C_GetCurrentSnowingAmount");
static_assert(sizeof(BP_WeatherManager_C_GetCurrentSnowingAmount) == 0x000008, "Wrong size on BP_WeatherManager_C_GetCurrentSnowingAmount");
static_assert(offsetof(BP_WeatherManager_C_GetCurrentSnowingAmount, OutSnowingAmount) == 0x000000, "Member 'BP_WeatherManager_C_GetCurrentSnowingAmount::OutSnowingAmount' has a wrong offset!");
static_assert(offsetof(BP_WeatherManager_C_GetCurrentSnowingAmount, CallFunc_Lerp_ReturnValue) == 0x000004, "Member 'BP_WeatherManager_C_GetCurrentSnowingAmount::CallFunc_Lerp_ReturnValue' has a wrong offset!");

// Function BP_WeatherManager.BP_WeatherManager_C.SetRainParticleSystemsEnabled
// 0x0002 (0x0002 - 0x0000)
struct BP_WeatherManager_C_SetRainParticleSystemsEnabled final
{
public:
	bool                                          IsEnabled;                                         // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Not_PreBool_ReturnValue;                  // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_WeatherManager_C_SetRainParticleSystemsEnabled) == 0x000001, "Wrong alignment on BP_WeatherManager_C_SetRainParticleSystemsEnabled");
static_assert(sizeof(BP_WeatherManager_C_SetRainParticleSystemsEnabled) == 0x000002, "Wrong size on BP_WeatherManager_C_SetRainParticleSystemsEnabled");
static_assert(offsetof(BP_WeatherManager_C_SetRainParticleSystemsEnabled, IsEnabled) == 0x000000, "Member 'BP_WeatherManager_C_SetRainParticleSystemsEnabled::IsEnabled' has a wrong offset!");
static_assert(offsetof(BP_WeatherManager_C_SetRainParticleSystemsEnabled, CallFunc_Not_PreBool_ReturnValue) == 0x000001, "Member 'BP_WeatherManager_C_SetRainParticleSystemsEnabled::CallFunc_Not_PreBool_ReturnValue' has a wrong offset!");

// Function BP_WeatherManager.BP_WeatherManager_C.SetSnowParticleSystemsEnabled
// 0x0002 (0x0002 - 0x0000)
struct BP_WeatherManager_C_SetSnowParticleSystemsEnabled final
{
public:
	bool                                          IsEnabled;                                         // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Not_PreBool_ReturnValue;                  // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_WeatherManager_C_SetSnowParticleSystemsEnabled) == 0x000001, "Wrong alignment on BP_WeatherManager_C_SetSnowParticleSystemsEnabled");
static_assert(sizeof(BP_WeatherManager_C_SetSnowParticleSystemsEnabled) == 0x000002, "Wrong size on BP_WeatherManager_C_SetSnowParticleSystemsEnabled");
static_assert(offsetof(BP_WeatherManager_C_SetSnowParticleSystemsEnabled, IsEnabled) == 0x000000, "Member 'BP_WeatherManager_C_SetSnowParticleSystemsEnabled::IsEnabled' has a wrong offset!");
static_assert(offsetof(BP_WeatherManager_C_SetSnowParticleSystemsEnabled, CallFunc_Not_PreBool_ReturnValue) == 0x000001, "Member 'BP_WeatherManager_C_SetSnowParticleSystemsEnabled::CallFunc_Not_PreBool_ReturnValue' has a wrong offset!");

// Function BP_WeatherManager.BP_WeatherManager_C.IsSnowing
// 0x000C (0x000C - 0x0000)
struct BP_WeatherManager_C_IsSnowing final
{
public:
	bool                                          OutRaining;                                        // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_GetCurrentSnowingAmount_OutSnowingAmount; // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Greater_FloatFloat_ReturnValue;           // 0x0008(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_WeatherManager_C_IsSnowing) == 0x000004, "Wrong alignment on BP_WeatherManager_C_IsSnowing");
static_assert(sizeof(BP_WeatherManager_C_IsSnowing) == 0x00000C, "Wrong size on BP_WeatherManager_C_IsSnowing");
static_assert(offsetof(BP_WeatherManager_C_IsSnowing, OutRaining) == 0x000000, "Member 'BP_WeatherManager_C_IsSnowing::OutRaining' has a wrong offset!");
static_assert(offsetof(BP_WeatherManager_C_IsSnowing, CallFunc_GetCurrentSnowingAmount_OutSnowingAmount) == 0x000004, "Member 'BP_WeatherManager_C_IsSnowing::CallFunc_GetCurrentSnowingAmount_OutSnowingAmount' has a wrong offset!");
static_assert(offsetof(BP_WeatherManager_C_IsSnowing, CallFunc_Greater_FloatFloat_ReturnValue) == 0x000008, "Member 'BP_WeatherManager_C_IsSnowing::CallFunc_Greater_FloatFloat_ReturnValue' has a wrong offset!");

// Function BP_WeatherManager.BP_WeatherManager_C.GetCurrentSnowCoverAmount
// 0x0008 (0x0008 - 0x0000)
struct BP_WeatherManager_C_GetCurrentSnowCoverAmount final
{
public:
	float                                         OutSnowCoverAmount;                                // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Lerp_ReturnValue;                         // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_WeatherManager_C_GetCurrentSnowCoverAmount) == 0x000004, "Wrong alignment on BP_WeatherManager_C_GetCurrentSnowCoverAmount");
static_assert(sizeof(BP_WeatherManager_C_GetCurrentSnowCoverAmount) == 0x000008, "Wrong size on BP_WeatherManager_C_GetCurrentSnowCoverAmount");
static_assert(offsetof(BP_WeatherManager_C_GetCurrentSnowCoverAmount, OutSnowCoverAmount) == 0x000000, "Member 'BP_WeatherManager_C_GetCurrentSnowCoverAmount::OutSnowCoverAmount' has a wrong offset!");
static_assert(offsetof(BP_WeatherManager_C_GetCurrentSnowCoverAmount, CallFunc_Lerp_ReturnValue) == 0x000004, "Member 'BP_WeatherManager_C_GetCurrentSnowCoverAmount::CallFunc_Lerp_ReturnValue' has a wrong offset!");

// Function BP_WeatherManager.BP_WeatherManager_C.IsSnowCover
// 0x000C (0x000C - 0x0000)
struct BP_WeatherManager_C_IsSnowCover final
{
public:
	bool                                          OutSnowCover;                                      // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_GetCurrentSnowCoverAmount_OutSnowCoverAmount; // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Greater_FloatFloat_ReturnValue;           // 0x0008(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_WeatherManager_C_IsSnowCover) == 0x000004, "Wrong alignment on BP_WeatherManager_C_IsSnowCover");
static_assert(sizeof(BP_WeatherManager_C_IsSnowCover) == 0x00000C, "Wrong size on BP_WeatherManager_C_IsSnowCover");
static_assert(offsetof(BP_WeatherManager_C_IsSnowCover, OutSnowCover) == 0x000000, "Member 'BP_WeatherManager_C_IsSnowCover::OutSnowCover' has a wrong offset!");
static_assert(offsetof(BP_WeatherManager_C_IsSnowCover, CallFunc_GetCurrentSnowCoverAmount_OutSnowCoverAmount) == 0x000004, "Member 'BP_WeatherManager_C_IsSnowCover::CallFunc_GetCurrentSnowCoverAmount_OutSnowCoverAmount' has a wrong offset!");
static_assert(offsetof(BP_WeatherManager_C_IsSnowCover, CallFunc_Greater_FloatFloat_ReturnValue) == 0x000008, "Member 'BP_WeatherManager_C_IsSnowCover::CallFunc_Greater_FloatFloat_ReturnValue' has a wrong offset!");

// Function BP_WeatherManager.BP_WeatherManager_C.UpdateSnowPPEffects
// 0x0018 (0x0018 - 0x0000)
struct BP_WeatherManager_C_UpdateSnowPPEffects final
{
public:
	float                                         ChangeDir;                                         // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UMaterialInstance*                      FinalPPMaterial;                                   // 0x0008(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_GetCurrentSnowCoverAmount_OutSnowCoverAmount; // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Greater_FloatFloat_ReturnValue;           // 0x0014(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_WeatherManager_C_UpdateSnowPPEffects) == 0x000008, "Wrong alignment on BP_WeatherManager_C_UpdateSnowPPEffects");
static_assert(sizeof(BP_WeatherManager_C_UpdateSnowPPEffects) == 0x000018, "Wrong size on BP_WeatherManager_C_UpdateSnowPPEffects");
static_assert(offsetof(BP_WeatherManager_C_UpdateSnowPPEffects, ChangeDir) == 0x000000, "Member 'BP_WeatherManager_C_UpdateSnowPPEffects::ChangeDir' has a wrong offset!");
static_assert(offsetof(BP_WeatherManager_C_UpdateSnowPPEffects, FinalPPMaterial) == 0x000008, "Member 'BP_WeatherManager_C_UpdateSnowPPEffects::FinalPPMaterial' has a wrong offset!");
static_assert(offsetof(BP_WeatherManager_C_UpdateSnowPPEffects, CallFunc_GetCurrentSnowCoverAmount_OutSnowCoverAmount) == 0x000010, "Member 'BP_WeatherManager_C_UpdateSnowPPEffects::CallFunc_GetCurrentSnowCoverAmount_OutSnowCoverAmount' has a wrong offset!");
static_assert(offsetof(BP_WeatherManager_C_UpdateSnowPPEffects, CallFunc_Greater_FloatFloat_ReturnValue) == 0x000014, "Member 'BP_WeatherManager_C_UpdateSnowPPEffects::CallFunc_Greater_FloatFloat_ReturnValue' has a wrong offset!");

// Function BP_WeatherManager.BP_WeatherManager_C.UpdateWeatherPPEffects
// 0x0001 (0x0001 - 0x0000)
struct BP_WeatherManager_C_UpdateWeatherPPEffects final
{
public:
	bool                                          K2Node_SwitchEnum_CmpSuccess;                      // 0x0000(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_WeatherManager_C_UpdateWeatherPPEffects) == 0x000001, "Wrong alignment on BP_WeatherManager_C_UpdateWeatherPPEffects");
static_assert(sizeof(BP_WeatherManager_C_UpdateWeatherPPEffects) == 0x000001, "Wrong size on BP_WeatherManager_C_UpdateWeatherPPEffects");
static_assert(offsetof(BP_WeatherManager_C_UpdateWeatherPPEffects, K2Node_SwitchEnum_CmpSuccess) == 0x000000, "Member 'BP_WeatherManager_C_UpdateWeatherPPEffects::K2Node_SwitchEnum_CmpSuccess' has a wrong offset!");

// Function BP_WeatherManager.BP_WeatherManager_C.InitForecastSetups
// 0x0001 (0x0001 - 0x0000)
struct BP_WeatherManager_C_InitForecastSetups final
{
public:
	bool                                          CallFunc_HasAuthority_ReturnValue;                 // 0x0000(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_WeatherManager_C_InitForecastSetups) == 0x000001, "Wrong alignment on BP_WeatherManager_C_InitForecastSetups");
static_assert(sizeof(BP_WeatherManager_C_InitForecastSetups) == 0x000001, "Wrong size on BP_WeatherManager_C_InitForecastSetups");
static_assert(offsetof(BP_WeatherManager_C_InitForecastSetups, CallFunc_HasAuthority_ReturnValue) == 0x000000, "Member 'BP_WeatherManager_C_InitForecastSetups::CallFunc_HasAuthority_ReturnValue' has a wrong offset!");

// Function BP_WeatherManager.BP_WeatherManager_C.GetSunDirection
// 0x000C (0x000C - 0x0000)
struct BP_WeatherManager_C_GetSunDirection final
{
public:
	struct FVector                                OutDir;                                            // 0x0000(0x000C)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_WeatherManager_C_GetSunDirection) == 0x000004, "Wrong alignment on BP_WeatherManager_C_GetSunDirection");
static_assert(sizeof(BP_WeatherManager_C_GetSunDirection) == 0x00000C, "Wrong size on BP_WeatherManager_C_GetSunDirection");
static_assert(offsetof(BP_WeatherManager_C_GetSunDirection, OutDir) == 0x000000, "Member 'BP_WeatherManager_C_GetSunDirection::OutDir' has a wrong offset!");

// Function BP_WeatherManager.BP_WeatherManager_C.UpdateLevelAmbience
// 0x0088 (0x0088 - 0x0000)
struct BP_WeatherManager_C_UpdateLevelAmbience final
{
public:
	int32                                         Temp_int_Array_Index_Variable;                     // 0x0000(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_GetCurrentWindIntensity_OutWindIntensity; // 0x000C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_GetCurrentRainAmount_OutRainAmount;       // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_GetCurrentWindIntensity_OutWindIntensity_1; // 0x0014(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_GetCurrentWindIntensity_OutWindIntensity_2; // 0x0018(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_GetCurrentRainAmount_OutRainAmount_1;     // 0x001C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_GetCurrentRainAmount_OutRainAmount_2;     // 0x0020(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Subtract_FloatFloat_ReturnValue;          // 0x0024(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Abs_ReturnValue;                          // 0x0028(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_GreaterEqual_FloatFloat_ReturnValue;      // 0x002C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_2D[0x3];                                       // 0x002D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_Subtract_FloatFloat_ReturnValue_1;        // 0x0030(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Subtract_FloatFloat_ReturnValue_2;        // 0x0034(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Abs_ReturnValue_1;                        // 0x0038(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Abs_ReturnValue_2;                        // 0x003C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_GreaterEqual_FloatFloat_ReturnValue_1;    // 0x0040(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_GreaterEqual_FloatFloat_ReturnValue_2;    // 0x0041(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanOR_ReturnValue;                    // 0x0042(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_GreaterEqual_FloatFloat_ReturnValue_3;    // 0x0043(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanOR_ReturnValue_1;                  // 0x0044(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanAND_ReturnValue;                   // 0x0045(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_46[0x2];                                       // 0x0046(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 CallFunc_Array_Get_Item;                           // 0x0048(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TScriptInterface<class IWeatherManagedInterface_C> K2Node_DynamicCast_AsWeather_Managed_Interface;    // 0x0050(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0060(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_61[0x7];                                       // 0x0061(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TScriptInterface<class IWeatherManagedInterface_C> K2Node_DynamicCast_AsWeather_Managed_Interface_1;  // 0x0068(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_DynamicCast_bSuccess_1;                     // 0x0078(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_79[0x3];                                       // 0x0079(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x007C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x0080(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_WeatherManager_C_UpdateLevelAmbience) == 0x000008, "Wrong alignment on BP_WeatherManager_C_UpdateLevelAmbience");
static_assert(sizeof(BP_WeatherManager_C_UpdateLevelAmbience) == 0x000088, "Wrong size on BP_WeatherManager_C_UpdateLevelAmbience");
static_assert(offsetof(BP_WeatherManager_C_UpdateLevelAmbience, Temp_int_Array_Index_Variable) == 0x000000, "Member 'BP_WeatherManager_C_UpdateLevelAmbience::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(BP_WeatherManager_C_UpdateLevelAmbience, Temp_int_Loop_Counter_Variable) == 0x000004, "Member 'BP_WeatherManager_C_UpdateLevelAmbience::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(BP_WeatherManager_C_UpdateLevelAmbience, CallFunc_Add_IntInt_ReturnValue) == 0x000008, "Member 'BP_WeatherManager_C_UpdateLevelAmbience::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_WeatherManager_C_UpdateLevelAmbience, CallFunc_GetCurrentWindIntensity_OutWindIntensity) == 0x00000C, "Member 'BP_WeatherManager_C_UpdateLevelAmbience::CallFunc_GetCurrentWindIntensity_OutWindIntensity' has a wrong offset!");
static_assert(offsetof(BP_WeatherManager_C_UpdateLevelAmbience, CallFunc_GetCurrentRainAmount_OutRainAmount) == 0x000010, "Member 'BP_WeatherManager_C_UpdateLevelAmbience::CallFunc_GetCurrentRainAmount_OutRainAmount' has a wrong offset!");
static_assert(offsetof(BP_WeatherManager_C_UpdateLevelAmbience, CallFunc_GetCurrentWindIntensity_OutWindIntensity_1) == 0x000014, "Member 'BP_WeatherManager_C_UpdateLevelAmbience::CallFunc_GetCurrentWindIntensity_OutWindIntensity_1' has a wrong offset!");
static_assert(offsetof(BP_WeatherManager_C_UpdateLevelAmbience, CallFunc_GetCurrentWindIntensity_OutWindIntensity_2) == 0x000018, "Member 'BP_WeatherManager_C_UpdateLevelAmbience::CallFunc_GetCurrentWindIntensity_OutWindIntensity_2' has a wrong offset!");
static_assert(offsetof(BP_WeatherManager_C_UpdateLevelAmbience, CallFunc_GetCurrentRainAmount_OutRainAmount_1) == 0x00001C, "Member 'BP_WeatherManager_C_UpdateLevelAmbience::CallFunc_GetCurrentRainAmount_OutRainAmount_1' has a wrong offset!");
static_assert(offsetof(BP_WeatherManager_C_UpdateLevelAmbience, CallFunc_GetCurrentRainAmount_OutRainAmount_2) == 0x000020, "Member 'BP_WeatherManager_C_UpdateLevelAmbience::CallFunc_GetCurrentRainAmount_OutRainAmount_2' has a wrong offset!");
static_assert(offsetof(BP_WeatherManager_C_UpdateLevelAmbience, CallFunc_Subtract_FloatFloat_ReturnValue) == 0x000024, "Member 'BP_WeatherManager_C_UpdateLevelAmbience::CallFunc_Subtract_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_WeatherManager_C_UpdateLevelAmbience, CallFunc_Abs_ReturnValue) == 0x000028, "Member 'BP_WeatherManager_C_UpdateLevelAmbience::CallFunc_Abs_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_WeatherManager_C_UpdateLevelAmbience, CallFunc_GreaterEqual_FloatFloat_ReturnValue) == 0x00002C, "Member 'BP_WeatherManager_C_UpdateLevelAmbience::CallFunc_GreaterEqual_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_WeatherManager_C_UpdateLevelAmbience, CallFunc_Subtract_FloatFloat_ReturnValue_1) == 0x000030, "Member 'BP_WeatherManager_C_UpdateLevelAmbience::CallFunc_Subtract_FloatFloat_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_WeatherManager_C_UpdateLevelAmbience, CallFunc_Subtract_FloatFloat_ReturnValue_2) == 0x000034, "Member 'BP_WeatherManager_C_UpdateLevelAmbience::CallFunc_Subtract_FloatFloat_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BP_WeatherManager_C_UpdateLevelAmbience, CallFunc_Abs_ReturnValue_1) == 0x000038, "Member 'BP_WeatherManager_C_UpdateLevelAmbience::CallFunc_Abs_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_WeatherManager_C_UpdateLevelAmbience, CallFunc_Abs_ReturnValue_2) == 0x00003C, "Member 'BP_WeatherManager_C_UpdateLevelAmbience::CallFunc_Abs_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BP_WeatherManager_C_UpdateLevelAmbience, CallFunc_GreaterEqual_FloatFloat_ReturnValue_1) == 0x000040, "Member 'BP_WeatherManager_C_UpdateLevelAmbience::CallFunc_GreaterEqual_FloatFloat_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_WeatherManager_C_UpdateLevelAmbience, CallFunc_GreaterEqual_FloatFloat_ReturnValue_2) == 0x000041, "Member 'BP_WeatherManager_C_UpdateLevelAmbience::CallFunc_GreaterEqual_FloatFloat_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BP_WeatherManager_C_UpdateLevelAmbience, CallFunc_BooleanOR_ReturnValue) == 0x000042, "Member 'BP_WeatherManager_C_UpdateLevelAmbience::CallFunc_BooleanOR_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_WeatherManager_C_UpdateLevelAmbience, CallFunc_GreaterEqual_FloatFloat_ReturnValue_3) == 0x000043, "Member 'BP_WeatherManager_C_UpdateLevelAmbience::CallFunc_GreaterEqual_FloatFloat_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(BP_WeatherManager_C_UpdateLevelAmbience, CallFunc_BooleanOR_ReturnValue_1) == 0x000044, "Member 'BP_WeatherManager_C_UpdateLevelAmbience::CallFunc_BooleanOR_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_WeatherManager_C_UpdateLevelAmbience, CallFunc_BooleanAND_ReturnValue) == 0x000045, "Member 'BP_WeatherManager_C_UpdateLevelAmbience::CallFunc_BooleanAND_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_WeatherManager_C_UpdateLevelAmbience, CallFunc_Array_Get_Item) == 0x000048, "Member 'BP_WeatherManager_C_UpdateLevelAmbience::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(BP_WeatherManager_C_UpdateLevelAmbience, K2Node_DynamicCast_AsWeather_Managed_Interface) == 0x000050, "Member 'BP_WeatherManager_C_UpdateLevelAmbience::K2Node_DynamicCast_AsWeather_Managed_Interface' has a wrong offset!");
static_assert(offsetof(BP_WeatherManager_C_UpdateLevelAmbience, K2Node_DynamicCast_bSuccess) == 0x000060, "Member 'BP_WeatherManager_C_UpdateLevelAmbience::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(BP_WeatherManager_C_UpdateLevelAmbience, K2Node_DynamicCast_AsWeather_Managed_Interface_1) == 0x000068, "Member 'BP_WeatherManager_C_UpdateLevelAmbience::K2Node_DynamicCast_AsWeather_Managed_Interface_1' has a wrong offset!");
static_assert(offsetof(BP_WeatherManager_C_UpdateLevelAmbience, K2Node_DynamicCast_bSuccess_1) == 0x000078, "Member 'BP_WeatherManager_C_UpdateLevelAmbience::K2Node_DynamicCast_bSuccess_1' has a wrong offset!");
static_assert(offsetof(BP_WeatherManager_C_UpdateLevelAmbience, CallFunc_Array_Length_ReturnValue) == 0x00007C, "Member 'BP_WeatherManager_C_UpdateLevelAmbience::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_WeatherManager_C_UpdateLevelAmbience, CallFunc_Less_IntInt_ReturnValue) == 0x000080, "Member 'BP_WeatherManager_C_UpdateLevelAmbience::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");

// Function BP_WeatherManager.BP_WeatherManager_C.InitLevelAmbience
// 0x0010 (0x0010 - 0x0000)
struct BP_WeatherManager_C_InitLevelAmbience final
{
public:
	TArray<class AActor*>                         CallFunc_GetAllActorsWithInterface_OutActors;      // 0x0000(0x0010)(ReferenceParm)
};
static_assert(alignof(BP_WeatherManager_C_InitLevelAmbience) == 0x000008, "Wrong alignment on BP_WeatherManager_C_InitLevelAmbience");
static_assert(sizeof(BP_WeatherManager_C_InitLevelAmbience) == 0x000010, "Wrong size on BP_WeatherManager_C_InitLevelAmbience");
static_assert(offsetof(BP_WeatherManager_C_InitLevelAmbience, CallFunc_GetAllActorsWithInterface_OutActors) == 0x000000, "Member 'BP_WeatherManager_C_InitLevelAmbience::CallFunc_GetAllActorsWithInterface_OutActors' has a wrong offset!");

// Function BP_WeatherManager.BP_WeatherManager_C.GetCurrentWindIntensity
// 0x0008 (0x0008 - 0x0000)
struct BP_WeatherManager_C_GetCurrentWindIntensity final
{
public:
	float                                         OutWindIntensity;                                  // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Lerp_ReturnValue;                         // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_WeatherManager_C_GetCurrentWindIntensity) == 0x000004, "Wrong alignment on BP_WeatherManager_C_GetCurrentWindIntensity");
static_assert(sizeof(BP_WeatherManager_C_GetCurrentWindIntensity) == 0x000008, "Wrong size on BP_WeatherManager_C_GetCurrentWindIntensity");
static_assert(offsetof(BP_WeatherManager_C_GetCurrentWindIntensity, OutWindIntensity) == 0x000000, "Member 'BP_WeatherManager_C_GetCurrentWindIntensity::OutWindIntensity' has a wrong offset!");
static_assert(offsetof(BP_WeatherManager_C_GetCurrentWindIntensity, CallFunc_Lerp_ReturnValue) == 0x000004, "Member 'BP_WeatherManager_C_GetCurrentWindIntensity::CallFunc_Lerp_ReturnValue' has a wrong offset!");

// Function BP_WeatherManager.BP_WeatherManager_C.DisableWeather
// 0x0010 (0x0010 - 0x0000)
struct BP_WeatherManager_C_DisableWeather final
{
public:
	bool                                          Disable;                                           // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable;                                // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_2[0x2];                                        // 0x0002(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Temp_float_Variable;                               // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Temp_float_Variable_1;                             // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_Select_Default;                             // 0x000C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_WeatherManager_C_DisableWeather) == 0x000004, "Wrong alignment on BP_WeatherManager_C_DisableWeather");
static_assert(sizeof(BP_WeatherManager_C_DisableWeather) == 0x000010, "Wrong size on BP_WeatherManager_C_DisableWeather");
static_assert(offsetof(BP_WeatherManager_C_DisableWeather, Disable) == 0x000000, "Member 'BP_WeatherManager_C_DisableWeather::Disable' has a wrong offset!");
static_assert(offsetof(BP_WeatherManager_C_DisableWeather, Temp_bool_Variable) == 0x000001, "Member 'BP_WeatherManager_C_DisableWeather::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(BP_WeatherManager_C_DisableWeather, Temp_float_Variable) == 0x000004, "Member 'BP_WeatherManager_C_DisableWeather::Temp_float_Variable' has a wrong offset!");
static_assert(offsetof(BP_WeatherManager_C_DisableWeather, Temp_float_Variable_1) == 0x000008, "Member 'BP_WeatherManager_C_DisableWeather::Temp_float_Variable_1' has a wrong offset!");
static_assert(offsetof(BP_WeatherManager_C_DisableWeather, K2Node_Select_Default) == 0x00000C, "Member 'BP_WeatherManager_C_DisableWeather::K2Node_Select_Default' has a wrong offset!");

// Function BP_WeatherManager.BP_WeatherManager_C.GetMapBoundaries
// 0x0098 (0x0098 - 0x0000)
struct BP_WeatherManager_C_GetMapBoundaries final
{
public:
	struct FLinearColor                           MapSizeDetails;                                    // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Success;                                           // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class ABP_MapCorner_C*>                CallFunc_GetAllActorsOfClass_OutActors;            // 0x0018(0x0010)(ReferenceParm)
	class ABP_MapCorner_C*                        CallFunc_Array_Get_Item;                           // 0x0028(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0030(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_31[0x3];                                       // 0x0031(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_K2_GetComponentLocation_ReturnValue;      // 0x0034(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ABP_MapCorner_C*                        CallFunc_Array_Get_Item_1;                         // 0x0040(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_X;                            // 0x0048(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_Y;                            // 0x004C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_Z;                            // 0x0050(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue_1;                    // 0x0054(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_55[0x3];                                       // 0x0055(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_K2_GetComponentLocation_ReturnValue_1;    // 0x0058(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x0064(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_X_1;                          // 0x0068(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_Y_1;                          // 0x006C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_Z_1;                          // 0x0070(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_IntInt_ReturnValue;            // 0x0074(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_75[0x3];                                       // 0x0075(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_FMax_ReturnValue;                         // 0x0078(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_FMin_ReturnValue;                         // 0x007C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_FMax_ReturnValue_1;                       // 0x0080(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_FMin_ReturnValue_1;                       // 0x0084(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           K2Node_MakeStruct_LinearColor;                     // 0x0088(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_WeatherManager_C_GetMapBoundaries) == 0x000008, "Wrong alignment on BP_WeatherManager_C_GetMapBoundaries");
static_assert(sizeof(BP_WeatherManager_C_GetMapBoundaries) == 0x000098, "Wrong size on BP_WeatherManager_C_GetMapBoundaries");
static_assert(offsetof(BP_WeatherManager_C_GetMapBoundaries, MapSizeDetails) == 0x000000, "Member 'BP_WeatherManager_C_GetMapBoundaries::MapSizeDetails' has a wrong offset!");
static_assert(offsetof(BP_WeatherManager_C_GetMapBoundaries, Success) == 0x000010, "Member 'BP_WeatherManager_C_GetMapBoundaries::Success' has a wrong offset!");
static_assert(offsetof(BP_WeatherManager_C_GetMapBoundaries, CallFunc_GetAllActorsOfClass_OutActors) == 0x000018, "Member 'BP_WeatherManager_C_GetMapBoundaries::CallFunc_GetAllActorsOfClass_OutActors' has a wrong offset!");
static_assert(offsetof(BP_WeatherManager_C_GetMapBoundaries, CallFunc_Array_Get_Item) == 0x000028, "Member 'BP_WeatherManager_C_GetMapBoundaries::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(BP_WeatherManager_C_GetMapBoundaries, CallFunc_IsValid_ReturnValue) == 0x000030, "Member 'BP_WeatherManager_C_GetMapBoundaries::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_WeatherManager_C_GetMapBoundaries, CallFunc_K2_GetComponentLocation_ReturnValue) == 0x000034, "Member 'BP_WeatherManager_C_GetMapBoundaries::CallFunc_K2_GetComponentLocation_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_WeatherManager_C_GetMapBoundaries, CallFunc_Array_Get_Item_1) == 0x000040, "Member 'BP_WeatherManager_C_GetMapBoundaries::CallFunc_Array_Get_Item_1' has a wrong offset!");
static_assert(offsetof(BP_WeatherManager_C_GetMapBoundaries, CallFunc_BreakVector_X) == 0x000048, "Member 'BP_WeatherManager_C_GetMapBoundaries::CallFunc_BreakVector_X' has a wrong offset!");
static_assert(offsetof(BP_WeatherManager_C_GetMapBoundaries, CallFunc_BreakVector_Y) == 0x00004C, "Member 'BP_WeatherManager_C_GetMapBoundaries::CallFunc_BreakVector_Y' has a wrong offset!");
static_assert(offsetof(BP_WeatherManager_C_GetMapBoundaries, CallFunc_BreakVector_Z) == 0x000050, "Member 'BP_WeatherManager_C_GetMapBoundaries::CallFunc_BreakVector_Z' has a wrong offset!");
static_assert(offsetof(BP_WeatherManager_C_GetMapBoundaries, CallFunc_IsValid_ReturnValue_1) == 0x000054, "Member 'BP_WeatherManager_C_GetMapBoundaries::CallFunc_IsValid_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_WeatherManager_C_GetMapBoundaries, CallFunc_K2_GetComponentLocation_ReturnValue_1) == 0x000058, "Member 'BP_WeatherManager_C_GetMapBoundaries::CallFunc_K2_GetComponentLocation_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_WeatherManager_C_GetMapBoundaries, CallFunc_Array_Length_ReturnValue) == 0x000064, "Member 'BP_WeatherManager_C_GetMapBoundaries::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_WeatherManager_C_GetMapBoundaries, CallFunc_BreakVector_X_1) == 0x000068, "Member 'BP_WeatherManager_C_GetMapBoundaries::CallFunc_BreakVector_X_1' has a wrong offset!");
static_assert(offsetof(BP_WeatherManager_C_GetMapBoundaries, CallFunc_BreakVector_Y_1) == 0x00006C, "Member 'BP_WeatherManager_C_GetMapBoundaries::CallFunc_BreakVector_Y_1' has a wrong offset!");
static_assert(offsetof(BP_WeatherManager_C_GetMapBoundaries, CallFunc_BreakVector_Z_1) == 0x000070, "Member 'BP_WeatherManager_C_GetMapBoundaries::CallFunc_BreakVector_Z_1' has a wrong offset!");
static_assert(offsetof(BP_WeatherManager_C_GetMapBoundaries, CallFunc_EqualEqual_IntInt_ReturnValue) == 0x000074, "Member 'BP_WeatherManager_C_GetMapBoundaries::CallFunc_EqualEqual_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_WeatherManager_C_GetMapBoundaries, CallFunc_FMax_ReturnValue) == 0x000078, "Member 'BP_WeatherManager_C_GetMapBoundaries::CallFunc_FMax_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_WeatherManager_C_GetMapBoundaries, CallFunc_FMin_ReturnValue) == 0x00007C, "Member 'BP_WeatherManager_C_GetMapBoundaries::CallFunc_FMin_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_WeatherManager_C_GetMapBoundaries, CallFunc_FMax_ReturnValue_1) == 0x000080, "Member 'BP_WeatherManager_C_GetMapBoundaries::CallFunc_FMax_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_WeatherManager_C_GetMapBoundaries, CallFunc_FMin_ReturnValue_1) == 0x000084, "Member 'BP_WeatherManager_C_GetMapBoundaries::CallFunc_FMin_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_WeatherManager_C_GetMapBoundaries, K2Node_MakeStruct_LinearColor) == 0x000088, "Member 'BP_WeatherManager_C_GetMapBoundaries::K2Node_MakeStruct_LinearColor' has a wrong offset!");

// Function BP_WeatherManager.BP_WeatherManager_C.AddSmokeCloud
// 0x00F0 (0x00F0 - 0x0000)
struct BP_WeatherManager_C_AddSmokeCloud final
{
public:
	struct FVector                                Position;                                          // 0x0000(0x000C)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Radius;                                            // 0x000C(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UParticleSystem*                        Particles;                                         // 0x0010(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UParticleSystem*                        ParticlesBuilding;                                 // 0x0018(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FS_SmokeCloud                          Cloud;                                             // 0x0020(0x0018)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Success;                                           // 0x0038(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_39[0x3];                                       // 0x0039(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                Vector;                                            // 0x003C(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_48[0x8];                                       // 0x0048(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             CallFunc_MakeTransform_ReturnValue;                // 0x0050(0x0030)(IsPlainOldData, NoDestructor)
	struct FVector                                CallFunc_MakeVector_ReturnValue;                   // 0x0080(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector2D                              CallFunc_AddCloud_ReturnKey;                       // 0x008C(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_94[0x4];                                       // 0x0094(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UParticleSystemComponent*               CallFunc_AddCloud_ReturnParticleSystem;            // 0x0098(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FTransform                             CallFunc_AddCloud_boxSize;                         // 0x00A0(0x0030)(IsPlainOldData, NoDestructor)
	bool                                          CallFunc_AddCloud_InBuilding;                      // 0x00D0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_AddCloud_bOutBuildingCollision;           // 0x00D1(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_AddCloud_volumeLines;                     // 0x00D2(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_AddCloud_ReturnValue;                     // 0x00D3(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FS_SmokeCloud                          K2Node_MakeStruct_S_SmokeCloud;                    // 0x00D4(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Add_ReturnValue;                    // 0x00EC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_WeatherManager_C_AddSmokeCloud) == 0x000010, "Wrong alignment on BP_WeatherManager_C_AddSmokeCloud");
static_assert(sizeof(BP_WeatherManager_C_AddSmokeCloud) == 0x0000F0, "Wrong size on BP_WeatherManager_C_AddSmokeCloud");
static_assert(offsetof(BP_WeatherManager_C_AddSmokeCloud, Position) == 0x000000, "Member 'BP_WeatherManager_C_AddSmokeCloud::Position' has a wrong offset!");
static_assert(offsetof(BP_WeatherManager_C_AddSmokeCloud, Radius) == 0x00000C, "Member 'BP_WeatherManager_C_AddSmokeCloud::Radius' has a wrong offset!");
static_assert(offsetof(BP_WeatherManager_C_AddSmokeCloud, Particles) == 0x000010, "Member 'BP_WeatherManager_C_AddSmokeCloud::Particles' has a wrong offset!");
static_assert(offsetof(BP_WeatherManager_C_AddSmokeCloud, ParticlesBuilding) == 0x000018, "Member 'BP_WeatherManager_C_AddSmokeCloud::ParticlesBuilding' has a wrong offset!");
static_assert(offsetof(BP_WeatherManager_C_AddSmokeCloud, Cloud) == 0x000020, "Member 'BP_WeatherManager_C_AddSmokeCloud::Cloud' has a wrong offset!");
static_assert(offsetof(BP_WeatherManager_C_AddSmokeCloud, Success) == 0x000038, "Member 'BP_WeatherManager_C_AddSmokeCloud::Success' has a wrong offset!");
static_assert(offsetof(BP_WeatherManager_C_AddSmokeCloud, Vector) == 0x00003C, "Member 'BP_WeatherManager_C_AddSmokeCloud::Vector' has a wrong offset!");
static_assert(offsetof(BP_WeatherManager_C_AddSmokeCloud, CallFunc_MakeTransform_ReturnValue) == 0x000050, "Member 'BP_WeatherManager_C_AddSmokeCloud::CallFunc_MakeTransform_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_WeatherManager_C_AddSmokeCloud, CallFunc_MakeVector_ReturnValue) == 0x000080, "Member 'BP_WeatherManager_C_AddSmokeCloud::CallFunc_MakeVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_WeatherManager_C_AddSmokeCloud, CallFunc_AddCloud_ReturnKey) == 0x00008C, "Member 'BP_WeatherManager_C_AddSmokeCloud::CallFunc_AddCloud_ReturnKey' has a wrong offset!");
static_assert(offsetof(BP_WeatherManager_C_AddSmokeCloud, CallFunc_AddCloud_ReturnParticleSystem) == 0x000098, "Member 'BP_WeatherManager_C_AddSmokeCloud::CallFunc_AddCloud_ReturnParticleSystem' has a wrong offset!");
static_assert(offsetof(BP_WeatherManager_C_AddSmokeCloud, CallFunc_AddCloud_boxSize) == 0x0000A0, "Member 'BP_WeatherManager_C_AddSmokeCloud::CallFunc_AddCloud_boxSize' has a wrong offset!");
static_assert(offsetof(BP_WeatherManager_C_AddSmokeCloud, CallFunc_AddCloud_InBuilding) == 0x0000D0, "Member 'BP_WeatherManager_C_AddSmokeCloud::CallFunc_AddCloud_InBuilding' has a wrong offset!");
static_assert(offsetof(BP_WeatherManager_C_AddSmokeCloud, CallFunc_AddCloud_bOutBuildingCollision) == 0x0000D1, "Member 'BP_WeatherManager_C_AddSmokeCloud::CallFunc_AddCloud_bOutBuildingCollision' has a wrong offset!");
static_assert(offsetof(BP_WeatherManager_C_AddSmokeCloud, CallFunc_AddCloud_volumeLines) == 0x0000D2, "Member 'BP_WeatherManager_C_AddSmokeCloud::CallFunc_AddCloud_volumeLines' has a wrong offset!");
static_assert(offsetof(BP_WeatherManager_C_AddSmokeCloud, CallFunc_AddCloud_ReturnValue) == 0x0000D3, "Member 'BP_WeatherManager_C_AddSmokeCloud::CallFunc_AddCloud_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_WeatherManager_C_AddSmokeCloud, K2Node_MakeStruct_S_SmokeCloud) == 0x0000D4, "Member 'BP_WeatherManager_C_AddSmokeCloud::K2Node_MakeStruct_S_SmokeCloud' has a wrong offset!");
static_assert(offsetof(BP_WeatherManager_C_AddSmokeCloud, CallFunc_Array_Add_ReturnValue) == 0x0000EC, "Member 'BP_WeatherManager_C_AddSmokeCloud::CallFunc_Array_Add_ReturnValue' has a wrong offset!");

// Function BP_WeatherManager.BP_WeatherManager_C.InitSmokeDistribution
// 0x0014 (0x0014 - 0x0000)
struct BP_WeatherManager_C_InitSmokeDistribution final
{
public:
	struct FLinearColor                           CallFunc_GetMapBoundaries_MapSizeDetails;          // 0x0000(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_GetMapBoundaries_Success;                 // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0011(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_WeatherManager_C_InitSmokeDistribution) == 0x000004, "Wrong alignment on BP_WeatherManager_C_InitSmokeDistribution");
static_assert(sizeof(BP_WeatherManager_C_InitSmokeDistribution) == 0x000014, "Wrong size on BP_WeatherManager_C_InitSmokeDistribution");
static_assert(offsetof(BP_WeatherManager_C_InitSmokeDistribution, CallFunc_GetMapBoundaries_MapSizeDetails) == 0x000000, "Member 'BP_WeatherManager_C_InitSmokeDistribution::CallFunc_GetMapBoundaries_MapSizeDetails' has a wrong offset!");
static_assert(offsetof(BP_WeatherManager_C_InitSmokeDistribution, CallFunc_GetMapBoundaries_Success) == 0x000010, "Member 'BP_WeatherManager_C_InitSmokeDistribution::CallFunc_GetMapBoundaries_Success' has a wrong offset!");
static_assert(offsetof(BP_WeatherManager_C_InitSmokeDistribution, CallFunc_IsValid_ReturnValue) == 0x000011, "Member 'BP_WeatherManager_C_InitSmokeDistribution::CallFunc_IsValid_ReturnValue' has a wrong offset!");

// Function BP_WeatherManager.BP_WeatherManager_C.RemoveSmokeCloud
// 0x0008 (0x0008 - 0x0000)
struct BP_WeatherManager_C_RemoveSmokeCloud final
{
public:
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x0000(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Greater_IntInt_ReturnValue;               // 0x0004(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_WeatherManager_C_RemoveSmokeCloud) == 0x000004, "Wrong alignment on BP_WeatherManager_C_RemoveSmokeCloud");
static_assert(sizeof(BP_WeatherManager_C_RemoveSmokeCloud) == 0x000008, "Wrong size on BP_WeatherManager_C_RemoveSmokeCloud");
static_assert(offsetof(BP_WeatherManager_C_RemoveSmokeCloud, CallFunc_Array_Length_ReturnValue) == 0x000000, "Member 'BP_WeatherManager_C_RemoveSmokeCloud::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_WeatherManager_C_RemoveSmokeCloud, CallFunc_Greater_IntInt_ReturnValue) == 0x000004, "Member 'BP_WeatherManager_C_RemoveSmokeCloud::CallFunc_Greater_IntInt_ReturnValue' has a wrong offset!");

// Function BP_WeatherManager.BP_WeatherManager_C.DebugSpawnSmokeCloud
// 0x01C0 (0x01C0 - 0x0000)
struct BP_WeatherManager_C_DebugSpawnSmokeCloud final
{
public:
	float                                         NewLocalVar_0;                                     // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class AActor*>                         Temp_object_Variable;                              // 0x0008(0x0010)(ConstParm, ReferenceParm)
	int32                                         CallFunc_GetUserControllerId_ReturnValue;          // 0x0018(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class AHumanPlayerController*                 CallFunc_GetHumanPlayerControllerByControllerId_ReturnValue; // 0x0020(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0028(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_29[0x3];                                       // 0x0029(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_GetActorForwardVector_ReturnValue;        // 0x002C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Multiply_VectorFloat_ReturnValue;         // 0x0038(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_44[0x4];                                       // 0x0044(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 CallFunc_GetViewTarget_ReturnValue;                // 0x0048(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue_1;                    // 0x0050(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_51[0x3];                                       // 0x0051(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_K2_GetActorLocation_ReturnValue;          // 0x0054(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Add_VectorVector_ReturnValue;             // 0x0060(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FHitResult                             CallFunc_LineTraceSingle_OutHit;                   // 0x006C(0x008C)(IsPlainOldData, NoDestructor, ContainsInstancedReference)
	bool                                          CallFunc_LineTraceSingle_ReturnValue;              // 0x00F8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BreakHitResult_bBlockingHit;              // 0x00F9(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BreakHitResult_bInitialOverlap;           // 0x00FA(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_FB[0x1];                                       // 0x00FB(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_BreakHitResult_Time;                      // 0x00FC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakHitResult_Distance;                  // 0x0100(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_Location;                  // 0x0104(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_ImpactPoint;               // 0x0110(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_Normal;                    // 0x011C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_ImpactNormal;              // 0x0128(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_134[0x4];                                      // 0x0134(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UPhysicalMaterial*                      CallFunc_BreakHitResult_PhysMat;                   // 0x0138(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 CallFunc_BreakHitResult_HitActor;                  // 0x0140(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UPrimitiveComponent*                    CallFunc_BreakHitResult_HitComponent;              // 0x0148(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EPhysicalSurface                              CallFunc_BreakHitResult_ShapeSurfaceType;          // 0x0150(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_151[0x3];                                      // 0x0151(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   CallFunc_BreakHitResult_HitBoneName;               // 0x0154(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_BreakHitResult_HitItem;                   // 0x015C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_BreakHitResult_ElementIndex;              // 0x0160(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_BreakHitResult_FaceIndex;                 // 0x0164(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_TraceStart;                // 0x0168(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_TraceEnd;                  // 0x0174(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FTransform                             CallFunc_MakeTransform_ReturnValue;                // 0x0180(0x0030)(IsPlainOldData, NoDestructor)
	class AActor*                                 CallFunc_BeginDeferredActorSpawnFromClass_ReturnValue; // 0x01B0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ABP_SmokeCloud_Simplified_C*            CallFunc_FinishSpawningActor_ReturnValue;          // 0x01B8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_WeatherManager_C_DebugSpawnSmokeCloud) == 0x000010, "Wrong alignment on BP_WeatherManager_C_DebugSpawnSmokeCloud");
static_assert(sizeof(BP_WeatherManager_C_DebugSpawnSmokeCloud) == 0x0001C0, "Wrong size on BP_WeatherManager_C_DebugSpawnSmokeCloud");
static_assert(offsetof(BP_WeatherManager_C_DebugSpawnSmokeCloud, NewLocalVar_0) == 0x000000, "Member 'BP_WeatherManager_C_DebugSpawnSmokeCloud::NewLocalVar_0' has a wrong offset!");
static_assert(offsetof(BP_WeatherManager_C_DebugSpawnSmokeCloud, Temp_object_Variable) == 0x000008, "Member 'BP_WeatherManager_C_DebugSpawnSmokeCloud::Temp_object_Variable' has a wrong offset!");
static_assert(offsetof(BP_WeatherManager_C_DebugSpawnSmokeCloud, CallFunc_GetUserControllerId_ReturnValue) == 0x000018, "Member 'BP_WeatherManager_C_DebugSpawnSmokeCloud::CallFunc_GetUserControllerId_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_WeatherManager_C_DebugSpawnSmokeCloud, CallFunc_GetHumanPlayerControllerByControllerId_ReturnValue) == 0x000020, "Member 'BP_WeatherManager_C_DebugSpawnSmokeCloud::CallFunc_GetHumanPlayerControllerByControllerId_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_WeatherManager_C_DebugSpawnSmokeCloud, CallFunc_IsValid_ReturnValue) == 0x000028, "Member 'BP_WeatherManager_C_DebugSpawnSmokeCloud::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_WeatherManager_C_DebugSpawnSmokeCloud, CallFunc_GetActorForwardVector_ReturnValue) == 0x00002C, "Member 'BP_WeatherManager_C_DebugSpawnSmokeCloud::CallFunc_GetActorForwardVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_WeatherManager_C_DebugSpawnSmokeCloud, CallFunc_Multiply_VectorFloat_ReturnValue) == 0x000038, "Member 'BP_WeatherManager_C_DebugSpawnSmokeCloud::CallFunc_Multiply_VectorFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_WeatherManager_C_DebugSpawnSmokeCloud, CallFunc_GetViewTarget_ReturnValue) == 0x000048, "Member 'BP_WeatherManager_C_DebugSpawnSmokeCloud::CallFunc_GetViewTarget_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_WeatherManager_C_DebugSpawnSmokeCloud, CallFunc_IsValid_ReturnValue_1) == 0x000050, "Member 'BP_WeatherManager_C_DebugSpawnSmokeCloud::CallFunc_IsValid_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_WeatherManager_C_DebugSpawnSmokeCloud, CallFunc_K2_GetActorLocation_ReturnValue) == 0x000054, "Member 'BP_WeatherManager_C_DebugSpawnSmokeCloud::CallFunc_K2_GetActorLocation_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_WeatherManager_C_DebugSpawnSmokeCloud, CallFunc_Add_VectorVector_ReturnValue) == 0x000060, "Member 'BP_WeatherManager_C_DebugSpawnSmokeCloud::CallFunc_Add_VectorVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_WeatherManager_C_DebugSpawnSmokeCloud, CallFunc_LineTraceSingle_OutHit) == 0x00006C, "Member 'BP_WeatherManager_C_DebugSpawnSmokeCloud::CallFunc_LineTraceSingle_OutHit' has a wrong offset!");
static_assert(offsetof(BP_WeatherManager_C_DebugSpawnSmokeCloud, CallFunc_LineTraceSingle_ReturnValue) == 0x0000F8, "Member 'BP_WeatherManager_C_DebugSpawnSmokeCloud::CallFunc_LineTraceSingle_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_WeatherManager_C_DebugSpawnSmokeCloud, CallFunc_BreakHitResult_bBlockingHit) == 0x0000F9, "Member 'BP_WeatherManager_C_DebugSpawnSmokeCloud::CallFunc_BreakHitResult_bBlockingHit' has a wrong offset!");
static_assert(offsetof(BP_WeatherManager_C_DebugSpawnSmokeCloud, CallFunc_BreakHitResult_bInitialOverlap) == 0x0000FA, "Member 'BP_WeatherManager_C_DebugSpawnSmokeCloud::CallFunc_BreakHitResult_bInitialOverlap' has a wrong offset!");
static_assert(offsetof(BP_WeatherManager_C_DebugSpawnSmokeCloud, CallFunc_BreakHitResult_Time) == 0x0000FC, "Member 'BP_WeatherManager_C_DebugSpawnSmokeCloud::CallFunc_BreakHitResult_Time' has a wrong offset!");
static_assert(offsetof(BP_WeatherManager_C_DebugSpawnSmokeCloud, CallFunc_BreakHitResult_Distance) == 0x000100, "Member 'BP_WeatherManager_C_DebugSpawnSmokeCloud::CallFunc_BreakHitResult_Distance' has a wrong offset!");
static_assert(offsetof(BP_WeatherManager_C_DebugSpawnSmokeCloud, CallFunc_BreakHitResult_Location) == 0x000104, "Member 'BP_WeatherManager_C_DebugSpawnSmokeCloud::CallFunc_BreakHitResult_Location' has a wrong offset!");
static_assert(offsetof(BP_WeatherManager_C_DebugSpawnSmokeCloud, CallFunc_BreakHitResult_ImpactPoint) == 0x000110, "Member 'BP_WeatherManager_C_DebugSpawnSmokeCloud::CallFunc_BreakHitResult_ImpactPoint' has a wrong offset!");
static_assert(offsetof(BP_WeatherManager_C_DebugSpawnSmokeCloud, CallFunc_BreakHitResult_Normal) == 0x00011C, "Member 'BP_WeatherManager_C_DebugSpawnSmokeCloud::CallFunc_BreakHitResult_Normal' has a wrong offset!");
static_assert(offsetof(BP_WeatherManager_C_DebugSpawnSmokeCloud, CallFunc_BreakHitResult_ImpactNormal) == 0x000128, "Member 'BP_WeatherManager_C_DebugSpawnSmokeCloud::CallFunc_BreakHitResult_ImpactNormal' has a wrong offset!");
static_assert(offsetof(BP_WeatherManager_C_DebugSpawnSmokeCloud, CallFunc_BreakHitResult_PhysMat) == 0x000138, "Member 'BP_WeatherManager_C_DebugSpawnSmokeCloud::CallFunc_BreakHitResult_PhysMat' has a wrong offset!");
static_assert(offsetof(BP_WeatherManager_C_DebugSpawnSmokeCloud, CallFunc_BreakHitResult_HitActor) == 0x000140, "Member 'BP_WeatherManager_C_DebugSpawnSmokeCloud::CallFunc_BreakHitResult_HitActor' has a wrong offset!");
static_assert(offsetof(BP_WeatherManager_C_DebugSpawnSmokeCloud, CallFunc_BreakHitResult_HitComponent) == 0x000148, "Member 'BP_WeatherManager_C_DebugSpawnSmokeCloud::CallFunc_BreakHitResult_HitComponent' has a wrong offset!");
static_assert(offsetof(BP_WeatherManager_C_DebugSpawnSmokeCloud, CallFunc_BreakHitResult_ShapeSurfaceType) == 0x000150, "Member 'BP_WeatherManager_C_DebugSpawnSmokeCloud::CallFunc_BreakHitResult_ShapeSurfaceType' has a wrong offset!");
static_assert(offsetof(BP_WeatherManager_C_DebugSpawnSmokeCloud, CallFunc_BreakHitResult_HitBoneName) == 0x000154, "Member 'BP_WeatherManager_C_DebugSpawnSmokeCloud::CallFunc_BreakHitResult_HitBoneName' has a wrong offset!");
static_assert(offsetof(BP_WeatherManager_C_DebugSpawnSmokeCloud, CallFunc_BreakHitResult_HitItem) == 0x00015C, "Member 'BP_WeatherManager_C_DebugSpawnSmokeCloud::CallFunc_BreakHitResult_HitItem' has a wrong offset!");
static_assert(offsetof(BP_WeatherManager_C_DebugSpawnSmokeCloud, CallFunc_BreakHitResult_ElementIndex) == 0x000160, "Member 'BP_WeatherManager_C_DebugSpawnSmokeCloud::CallFunc_BreakHitResult_ElementIndex' has a wrong offset!");
static_assert(offsetof(BP_WeatherManager_C_DebugSpawnSmokeCloud, CallFunc_BreakHitResult_FaceIndex) == 0x000164, "Member 'BP_WeatherManager_C_DebugSpawnSmokeCloud::CallFunc_BreakHitResult_FaceIndex' has a wrong offset!");
static_assert(offsetof(BP_WeatherManager_C_DebugSpawnSmokeCloud, CallFunc_BreakHitResult_TraceStart) == 0x000168, "Member 'BP_WeatherManager_C_DebugSpawnSmokeCloud::CallFunc_BreakHitResult_TraceStart' has a wrong offset!");
static_assert(offsetof(BP_WeatherManager_C_DebugSpawnSmokeCloud, CallFunc_BreakHitResult_TraceEnd) == 0x000174, "Member 'BP_WeatherManager_C_DebugSpawnSmokeCloud::CallFunc_BreakHitResult_TraceEnd' has a wrong offset!");
static_assert(offsetof(BP_WeatherManager_C_DebugSpawnSmokeCloud, CallFunc_MakeTransform_ReturnValue) == 0x000180, "Member 'BP_WeatherManager_C_DebugSpawnSmokeCloud::CallFunc_MakeTransform_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_WeatherManager_C_DebugSpawnSmokeCloud, CallFunc_BeginDeferredActorSpawnFromClass_ReturnValue) == 0x0001B0, "Member 'BP_WeatherManager_C_DebugSpawnSmokeCloud::CallFunc_BeginDeferredActorSpawnFromClass_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_WeatherManager_C_DebugSpawnSmokeCloud, CallFunc_FinishSpawningActor_ReturnValue) == 0x0001B8, "Member 'BP_WeatherManager_C_DebugSpawnSmokeCloud::CallFunc_FinishSpawningActor_ReturnValue' has a wrong offset!");

// Function BP_WeatherManager.BP_WeatherManager_C.CheckCurrentWeatherStringForLightScenarios
// 0x0040 (0x0040 - 0x0000)
struct BP_WeatherManager_C_CheckCurrentWeatherStringForLightScenarios final
{
public:
	class FString                                 CurrWeather;                                       // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)
	bool                                          LightScenario;                                     // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          LIghtingScen;                                      // 0x0011(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_12[0x2];                                       // 0x0012(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Temp_int_Array_Index_Variable;                     // 0x0014(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x0018(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x001C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x0020(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_24[0x4];                                       // 0x0024(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 CallFunc_Array_Get_Item;                           // 0x0028(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x0038(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Contains_ReturnValue;                     // 0x0039(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanOR_ReturnValue;                    // 0x003A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_WeatherManager_C_CheckCurrentWeatherStringForLightScenarios) == 0x000008, "Wrong alignment on BP_WeatherManager_C_CheckCurrentWeatherStringForLightScenarios");
static_assert(sizeof(BP_WeatherManager_C_CheckCurrentWeatherStringForLightScenarios) == 0x000040, "Wrong size on BP_WeatherManager_C_CheckCurrentWeatherStringForLightScenarios");
static_assert(offsetof(BP_WeatherManager_C_CheckCurrentWeatherStringForLightScenarios, CurrWeather) == 0x000000, "Member 'BP_WeatherManager_C_CheckCurrentWeatherStringForLightScenarios::CurrWeather' has a wrong offset!");
static_assert(offsetof(BP_WeatherManager_C_CheckCurrentWeatherStringForLightScenarios, LightScenario) == 0x000010, "Member 'BP_WeatherManager_C_CheckCurrentWeatherStringForLightScenarios::LightScenario' has a wrong offset!");
static_assert(offsetof(BP_WeatherManager_C_CheckCurrentWeatherStringForLightScenarios, LIghtingScen) == 0x000011, "Member 'BP_WeatherManager_C_CheckCurrentWeatherStringForLightScenarios::LIghtingScen' has a wrong offset!");
static_assert(offsetof(BP_WeatherManager_C_CheckCurrentWeatherStringForLightScenarios, Temp_int_Array_Index_Variable) == 0x000014, "Member 'BP_WeatherManager_C_CheckCurrentWeatherStringForLightScenarios::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(BP_WeatherManager_C_CheckCurrentWeatherStringForLightScenarios, Temp_int_Loop_Counter_Variable) == 0x000018, "Member 'BP_WeatherManager_C_CheckCurrentWeatherStringForLightScenarios::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(BP_WeatherManager_C_CheckCurrentWeatherStringForLightScenarios, CallFunc_Add_IntInt_ReturnValue) == 0x00001C, "Member 'BP_WeatherManager_C_CheckCurrentWeatherStringForLightScenarios::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_WeatherManager_C_CheckCurrentWeatherStringForLightScenarios, CallFunc_Array_Length_ReturnValue) == 0x000020, "Member 'BP_WeatherManager_C_CheckCurrentWeatherStringForLightScenarios::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_WeatherManager_C_CheckCurrentWeatherStringForLightScenarios, CallFunc_Array_Get_Item) == 0x000028, "Member 'BP_WeatherManager_C_CheckCurrentWeatherStringForLightScenarios::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(BP_WeatherManager_C_CheckCurrentWeatherStringForLightScenarios, CallFunc_Less_IntInt_ReturnValue) == 0x000038, "Member 'BP_WeatherManager_C_CheckCurrentWeatherStringForLightScenarios::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_WeatherManager_C_CheckCurrentWeatherStringForLightScenarios, CallFunc_Contains_ReturnValue) == 0x000039, "Member 'BP_WeatherManager_C_CheckCurrentWeatherStringForLightScenarios::CallFunc_Contains_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_WeatherManager_C_CheckCurrentWeatherStringForLightScenarios, CallFunc_BooleanOR_ReturnValue) == 0x00003A, "Member 'BP_WeatherManager_C_CheckCurrentWeatherStringForLightScenarios::CallFunc_BooleanOR_ReturnValue' has a wrong offset!");

}

