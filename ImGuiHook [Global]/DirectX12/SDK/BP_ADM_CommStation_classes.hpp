#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_ADM_CommStation

#include "Basic.hpp"

#include "CoreUObject_structs.hpp"
#include "Engine_structs.hpp"
#include "Engine_classes.hpp"


namespace SDK
{

// BlueprintGeneratedClass BP_ADM_CommStation.BP_ADM_CommStation_C
// 0x0098 (0x02B8 - 0x0220)
class ABP_ADM_CommStation_C final : public AActor
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x0220(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class UBP_InteractionItemComponent_C*         BP_InteractionItemComponent;                       // 0x0228(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UStaticMeshComponent*                   OverlapVolumeEncounterHint;                        // 0x0230(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UStaticMeshComponent*                   StaticMesh;                                        // 0x0238(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UBP_MapMarkerComponent_C*               MapMarkerComponent;                                // 0x0240(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USceneComponent*                        DefaultSceneRoot;                                  // 0x0248(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	struct FVector                                Air_Drop_Location;                                 // 0x0250(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Air_Drop_Ready;                                    // 0x025C(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_25D[0x3];                                      // 0x025D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	FMulticastInlineDelegateProperty_             Comm_Station_Interaction_Triggered;                // 0x0260(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	class UAudioComponent*                        AmbientSound;                                      // 0x0270(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               Rotation;                                          // 0x0278(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                         VolumeMultiplier;                                  // 0x0284(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         PitchMultiplier;                                   // 0x0288(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         StartTime;                                         // 0x028C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class USoundAttenuation*                      AttenuationSettings;                               // 0x0290(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class USoundConcurrency*                      ConcurrencySettings;                               // 0x0298(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Sound_Is_Playing;                                  // 0x02A0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_2A1[0x7];                                      // 0x02A1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTimerHandle                           Disabled_Timer;                                    // 0x02A8(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	class UParticleSystemComponent*               Spark_VFX;                                         // 0x02B0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

public:
	void Set_Interactability(bool Interactable);
	void UserConstructionScript();
	void ReceiveBeginPlay();
	void BndEvt__OverlapVolumeEncounterHint_K2Node_ComponentBoundEvent_1_ComponentBeginOverlapSignature__DelegateSignature(class UPrimitiveComponent* OverlappedComponent, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, int32 OtherBodyIndex, bool bFromSweep, const struct FHitResult& SweepResult);
	void BndEvt__BP_InteractionItemComponent_K2Node_ComponentBoundEvent_2_Interaction_Start_on_Server__DelegateSignature(class UInteractionItemComponent* Sender, class AActor* Interacting_Actor);
	void Disable_Commstation(float Time);
	void Enable_Commstation();
	void Minute_To_Airdrop_Left();
	void Create_or_Destroy_Sparks_effect(bool Create);
	void Set_Comm_Station_Material(class UMaterialInterface* Material);
	void Container_Spawned(class ABP_AirDropContainer_Base_C* Container);
	void Play_ambient_sound(class USoundBase* NewSound);
	void ExecuteUbergraph_BP_ADM_CommStation(int32 EntryPoint);
	void Comm_Station_Interaction_Triggered__DelegateSignature(class ABP_ADM_CommStation_C* Comm_Station, class AHumanCharacter* Interacting_Character);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BP_ADM_CommStation_C">();
	}
	static class ABP_ADM_CommStation_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<ABP_ADM_CommStation_C>();
	}
};
static_assert(alignof(ABP_ADM_CommStation_C) == 0x000008, "Wrong alignment on ABP_ADM_CommStation_C");
static_assert(sizeof(ABP_ADM_CommStation_C) == 0x0002B8, "Wrong size on ABP_ADM_CommStation_C");
static_assert(offsetof(ABP_ADM_CommStation_C, UberGraphFrame) == 0x000220, "Member 'ABP_ADM_CommStation_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(ABP_ADM_CommStation_C, BP_InteractionItemComponent) == 0x000228, "Member 'ABP_ADM_CommStation_C::BP_InteractionItemComponent' has a wrong offset!");
static_assert(offsetof(ABP_ADM_CommStation_C, OverlapVolumeEncounterHint) == 0x000230, "Member 'ABP_ADM_CommStation_C::OverlapVolumeEncounterHint' has a wrong offset!");
static_assert(offsetof(ABP_ADM_CommStation_C, StaticMesh) == 0x000238, "Member 'ABP_ADM_CommStation_C::StaticMesh' has a wrong offset!");
static_assert(offsetof(ABP_ADM_CommStation_C, MapMarkerComponent) == 0x000240, "Member 'ABP_ADM_CommStation_C::MapMarkerComponent' has a wrong offset!");
static_assert(offsetof(ABP_ADM_CommStation_C, DefaultSceneRoot) == 0x000248, "Member 'ABP_ADM_CommStation_C::DefaultSceneRoot' has a wrong offset!");
static_assert(offsetof(ABP_ADM_CommStation_C, Air_Drop_Location) == 0x000250, "Member 'ABP_ADM_CommStation_C::Air_Drop_Location' has a wrong offset!");
static_assert(offsetof(ABP_ADM_CommStation_C, Air_Drop_Ready) == 0x00025C, "Member 'ABP_ADM_CommStation_C::Air_Drop_Ready' has a wrong offset!");
static_assert(offsetof(ABP_ADM_CommStation_C, Comm_Station_Interaction_Triggered) == 0x000260, "Member 'ABP_ADM_CommStation_C::Comm_Station_Interaction_Triggered' has a wrong offset!");
static_assert(offsetof(ABP_ADM_CommStation_C, AmbientSound) == 0x000270, "Member 'ABP_ADM_CommStation_C::AmbientSound' has a wrong offset!");
static_assert(offsetof(ABP_ADM_CommStation_C, Rotation) == 0x000278, "Member 'ABP_ADM_CommStation_C::Rotation' has a wrong offset!");
static_assert(offsetof(ABP_ADM_CommStation_C, VolumeMultiplier) == 0x000284, "Member 'ABP_ADM_CommStation_C::VolumeMultiplier' has a wrong offset!");
static_assert(offsetof(ABP_ADM_CommStation_C, PitchMultiplier) == 0x000288, "Member 'ABP_ADM_CommStation_C::PitchMultiplier' has a wrong offset!");
static_assert(offsetof(ABP_ADM_CommStation_C, StartTime) == 0x00028C, "Member 'ABP_ADM_CommStation_C::StartTime' has a wrong offset!");
static_assert(offsetof(ABP_ADM_CommStation_C, AttenuationSettings) == 0x000290, "Member 'ABP_ADM_CommStation_C::AttenuationSettings' has a wrong offset!");
static_assert(offsetof(ABP_ADM_CommStation_C, ConcurrencySettings) == 0x000298, "Member 'ABP_ADM_CommStation_C::ConcurrencySettings' has a wrong offset!");
static_assert(offsetof(ABP_ADM_CommStation_C, Sound_Is_Playing) == 0x0002A0, "Member 'ABP_ADM_CommStation_C::Sound_Is_Playing' has a wrong offset!");
static_assert(offsetof(ABP_ADM_CommStation_C, Disabled_Timer) == 0x0002A8, "Member 'ABP_ADM_CommStation_C::Disabled_Timer' has a wrong offset!");
static_assert(offsetof(ABP_ADM_CommStation_C, Spark_VFX) == 0x0002B0, "Member 'ABP_ADM_CommStation_C::Spark_VFX' has a wrong offset!");

}

