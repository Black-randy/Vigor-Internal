#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_PuzzleCube_Functional

#include "Basic.hpp"

#include "BP_PuzzleCube_Functional_classes.hpp"
#include "BP_PuzzleCube_Functional_parameters.hpp"


namespace SDK
{

// Function BP_PuzzleCube_Functional.BP_PuzzleCube_Functional_C.ExecuteUbergraph_BP_PuzzleCube_Functional
// (Final, UbergraphFunction)
// Parameters:
// int32                                   EntryPoint                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_PuzzleCube_Functional_C::ExecuteUbergraph_BP_PuzzleCube_Functional(int32 EntryPoint)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PuzzleCube_Functional_C", "ExecuteUbergraph_BP_PuzzleCube_Functional");

	Params::BP_PuzzleCube_Functional_C_ExecuteUbergraph_BP_PuzzleCube_Functional Parms{};

	Parms.EntryPoint = EntryPoint;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_PuzzleCube_Functional.BP_PuzzleCube_Functional_C.SaveToSlotAsync
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// class USaveGame*                        SaveGameObject                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class FString                           SlotName                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)

void ABP_PuzzleCube_Functional_C::SaveToSlotAsync(class USaveGame* SaveGameObject, const class FString& SlotName)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PuzzleCube_Functional_C", "SaveToSlotAsync");

	Params::BP_PuzzleCube_Functional_C_SaveToSlotAsync Parms{};

	Parms.SaveGameObject = SaveGameObject;
	Parms.SlotName = std::move(SlotName);

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_PuzzleCube_Functional.BP_PuzzleCube_Functional_C.Rotate
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// float                                   Angle                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// E_PuzzleCube_SelectedSide               Side                                                   (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    RotateCenter_0                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ABP_PuzzleCube_Functional_C::Rotate(float Angle, E_PuzzleCube_SelectedSide Side, bool RotateCenter_0)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PuzzleCube_Functional_C", "Rotate");

	Params::BP_PuzzleCube_Functional_C_Rotate Parms{};

	Parms.Angle = Angle;
	Parms.Side = Side;
	Parms.RotateCenter_0 = RotateCenter_0;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_PuzzleCube_Functional.BP_PuzzleCube_Functional_C.ReceiveBeginPlay
// (Event, Protected, BlueprintEvent)

void ABP_PuzzleCube_Functional_C::ReceiveBeginPlay()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PuzzleCube_Functional_C", "ReceiveBeginPlay");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_PuzzleCube_Functional.BP_PuzzleCube_Functional_C.OnSaveSucceed_BBA922CF443C06F17BF094A4DDE62BF4
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// class FString                           SlotName                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)
// int32                                   UserIndex                                              (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_PuzzleCube_Functional_C::OnSaveSucceed_BBA922CF443C06F17BF094A4DDE62BF4(const class FString& SlotName, const int32 UserIndex)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PuzzleCube_Functional_C", "OnSaveSucceed_BBA922CF443C06F17BF094A4DDE62BF4");

	Params::BP_PuzzleCube_Functional_C_OnSaveSucceed_BBA922CF443C06F17BF094A4DDE62BF4 Parms{};

	Parms.SlotName = std::move(SlotName);
	Parms.UserIndex = UserIndex;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_PuzzleCube_Functional.BP_PuzzleCube_Functional_C.OnSaveFailed_BBA922CF443C06F17BF094A4DDE62BF4
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// class FString                           SlotName                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)
// int32                                   UserIndex                                              (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_PuzzleCube_Functional_C::OnSaveFailed_BBA922CF443C06F17BF094A4DDE62BF4(const class FString& SlotName, const int32 UserIndex)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PuzzleCube_Functional_C", "OnSaveFailed_BBA922CF443C06F17BF094A4DDE62BF4");

	Params::BP_PuzzleCube_Functional_C_OnSaveFailed_BBA922CF443C06F17BF094A4DDE62BF4 Parms{};

	Parms.SlotName = std::move(SlotName);
	Parms.UserIndex = UserIndex;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_PuzzleCube_Functional.BP_PuzzleCube_Functional_C.OnLoadSucceed_3560E73A455123247FA38EB20F6A2859
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// class USaveGame*                        SaveGame                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_PuzzleCube_Functional_C::OnLoadSucceed_3560E73A455123247FA38EB20F6A2859(class USaveGame* SaveGame)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PuzzleCube_Functional_C", "OnLoadSucceed_3560E73A455123247FA38EB20F6A2859");

	Params::BP_PuzzleCube_Functional_C_OnLoadSucceed_3560E73A455123247FA38EB20F6A2859 Parms{};

	Parms.SaveGame = SaveGame;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_PuzzleCube_Functional.BP_PuzzleCube_Functional_C.OnLoadFailed_3560E73A455123247FA38EB20F6A2859
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// class USaveGame*                        SaveGame                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_PuzzleCube_Functional_C::OnLoadFailed_3560E73A455123247FA38EB20F6A2859(class USaveGame* SaveGame)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PuzzleCube_Functional_C", "OnLoadFailed_3560E73A455123247FA38EB20F6A2859");

	Params::BP_PuzzleCube_Functional_C_OnLoadFailed_3560E73A455123247FA38EB20F6A2859 Parms{};

	Parms.SaveGame = SaveGame;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_PuzzleCube_Functional.BP_PuzzleCube_Functional_C.Timeline_Lerp__UpdateFunc
// (BlueprintEvent)

void ABP_PuzzleCube_Functional_C::Timeline_Lerp__UpdateFunc()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PuzzleCube_Functional_C", "Timeline_Lerp__UpdateFunc");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_PuzzleCube_Functional.BP_PuzzleCube_Functional_C.Timeline_Lerp__FinishedFunc
// (BlueprintEvent)

void ABP_PuzzleCube_Functional_C::Timeline_Lerp__FinishedFunc()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PuzzleCube_Functional_C", "Timeline_Lerp__FinishedFunc");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_PuzzleCube_Functional.BP_PuzzleCube_Functional_C.GetRotationForFace
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// class USceneComponent*                  Part                                                   (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   Rotation_Roll                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// E_PuzzleCube_SelectedSide               Side                                                   (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    RotateCenter_0                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// bool                                    Exec                                                   (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
// struct FQuat                            DeltaQuat                                              (Parm, OutParm, IsPlainOldData, NoDestructor)

void ABP_PuzzleCube_Functional_C::GetRotationForFace(class USceneComponent* Part, float Rotation_Roll, E_PuzzleCube_SelectedSide Side, bool RotateCenter_0, bool* Exec, struct FQuat* DeltaQuat)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PuzzleCube_Functional_C", "GetRotationForFace");

	Params::BP_PuzzleCube_Functional_C_GetRotationForFace Parms{};

	Parms.Part = Part;
	Parms.Rotation_Roll = Rotation_Roll;
	Parms.Side = Side;
	Parms.RotateCenter_0 = RotateCenter_0;

	UObject::ProcessEvent(Func, &Parms);

	if (Exec != nullptr)
		*Exec = Parms.Exec;

	if (DeltaQuat != nullptr)
		*DeltaQuat = std::move(Parms.DeltaQuat);
}


// Function BP_PuzzleCube_Functional.BP_PuzzleCube_Functional_C.Init
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)

void ABP_PuzzleCube_Functional_C::Init()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PuzzleCube_Functional_C", "Init");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_PuzzleCube_Functional.BP_PuzzleCube_Functional_C.RotateFace
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// float                                   Angle                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_PuzzleCube_Functional_C::RotateFace(float Angle)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PuzzleCube_Functional_C", "RotateFace");

	Params::BP_PuzzleCube_Functional_C_RotateFace Parms{};

	Parms.Angle = Angle;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_PuzzleCube_Functional.BP_PuzzleCube_Functional_C.SetActiveFace
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// E_PuzzleCube_SelectedSide               SideToRotate                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_PuzzleCube_Functional_C::SetActiveFace(E_PuzzleCube_SelectedSide SideToRotate)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PuzzleCube_Functional_C", "SetActiveFace");

	Params::BP_PuzzleCube_Functional_C_SetActiveFace Parms{};

	Parms.SideToRotate = SideToRotate;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_PuzzleCube_Functional.BP_PuzzleCube_Functional_C.RotateCenter
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// float                                   Angle                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_PuzzleCube_Functional_C::RotateCenter(float Angle)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PuzzleCube_Functional_C", "RotateCenter");

	Params::BP_PuzzleCube_Functional_C_RotateCenter Parms{};

	Parms.Angle = Angle;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_PuzzleCube_Functional.BP_PuzzleCube_Functional_C.SnapToGrid(vector)
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// struct FVector                          Vector                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   GridSize                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FVector                          ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

struct FVector ABP_PuzzleCube_Functional_C::SnapToGrid_vector_(const struct FVector& Vector, float GridSize)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PuzzleCube_Functional_C", "SnapToGrid(vector)");

	Params::BP_PuzzleCube_Functional_C_SnapToGrid_vector_ Parms{};

	Parms.Vector = std::move(Vector);
	Parms.GridSize = GridSize;

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function BP_PuzzleCube_Functional.BP_PuzzleCube_Functional_C.RotationTimelineInit
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// float                                   Angle                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// E_PuzzleCube_SelectedSide               Side                                                   (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    RotateCenter                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ABP_PuzzleCube_Functional_C::RotationTimelineInit(float Angle, E_PuzzleCube_SelectedSide Side, bool RotateCenter)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PuzzleCube_Functional_C", "RotationTimelineInit");

	Params::BP_PuzzleCube_Functional_C_RotationTimelineInit Parms{};

	Parms.Angle = Angle;
	Parms.Side = Side;
	Parms.RotateCenter = RotateCenter;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_PuzzleCube_Functional.BP_PuzzleCube_Functional_C.RotationTimelineFinished
// (Public, BlueprintCallable, BlueprintEvent)

void ABP_PuzzleCube_Functional_C::RotationTimelineFinished()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PuzzleCube_Functional_C", "RotationTimelineFinished");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_PuzzleCube_Functional.BP_PuzzleCube_Functional_C.RotationTimelineUpdate
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// float                                   Alpha                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_PuzzleCube_Functional_C::RotationTimelineUpdate(float Alpha)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PuzzleCube_Functional_C", "RotationTimelineUpdate");

	Params::BP_PuzzleCube_Functional_C_RotationTimelineUpdate Parms{};

	Parms.Alpha = Alpha;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_PuzzleCube_Functional.BP_PuzzleCube_Functional_C.Shuffle
// (Public, BlueprintCallable, BlueprintEvent)

void ABP_PuzzleCube_Functional_C::Shuffle()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PuzzleCube_Functional_C", "Shuffle");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_PuzzleCube_Functional.BP_PuzzleCube_Functional_C.SaveToFile
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)

void ABP_PuzzleCube_Functional_C::SaveToFile()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PuzzleCube_Functional_C", "SaveToFile");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_PuzzleCube_Functional.BP_PuzzleCube_Functional_C.Solve
// (Public, BlueprintCallable, BlueprintEvent)

void ABP_PuzzleCube_Functional_C::Solve()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PuzzleCube_Functional_C", "Solve");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_PuzzleCube_Functional.BP_PuzzleCube_Functional_C.Rotate3DCube
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FRotator                         NewParam                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ABP_PuzzleCube_Functional_C::Rotate3DCube(const struct FRotator& NewParam)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PuzzleCube_Functional_C", "Rotate3DCube");

	Params::BP_PuzzleCube_Functional_C_Rotate3DCube Parms{};

	Parms.NewParam = std::move(NewParam);

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_PuzzleCube_Functional.BP_PuzzleCube_Functional_C.ShuffleInternal
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// int32                                   Times                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_PuzzleCube_Functional_C::ShuffleInternal(int32 Times)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PuzzleCube_Functional_C", "ShuffleInternal");

	Params::BP_PuzzleCube_Functional_C_ShuffleInternal Parms{};

	Parms.Times = Times;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_PuzzleCube_Functional.BP_PuzzleCube_Functional_C.UpdateCumulativeRotationsAndSnapToGrid
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)

void ABP_PuzzleCube_Functional_C::UpdateCumulativeRotationsAndSnapToGrid()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PuzzleCube_Functional_C", "UpdateCumulativeRotationsAndSnapToGrid");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_PuzzleCube_Functional.BP_PuzzleCube_Functional_C.SnapToGrid(rotator)
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// struct FRotator                         Rotator                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// float                                   GridSize                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FRotator                         ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)

struct FRotator ABP_PuzzleCube_Functional_C::SnapToGrid_rotator_(const struct FRotator& Rotator, float GridSize)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PuzzleCube_Functional_C", "SnapToGrid(rotator)");

	Params::BP_PuzzleCube_Functional_C_SnapToGrid_rotator_ Parms{};

	Parms.Rotator = std::move(Rotator);
	Parms.GridSize = GridSize;

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function BP_PuzzleCube_Functional.BP_PuzzleCube_Functional_C.SnapTo90DegGrid
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// struct FQuat                            Quat                                                   (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor)
// struct FQuat                            Quat2                                                  (Parm, OutParm, IsPlainOldData, NoDestructor)

void ABP_PuzzleCube_Functional_C::SnapTo90DegGrid(const struct FQuat& Quat, struct FQuat* Quat2)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PuzzleCube_Functional_C", "SnapTo90DegGrid");

	Params::BP_PuzzleCube_Functional_C_SnapTo90DegGrid Parms{};

	Parms.Quat = std::move(Quat);

	UObject::ProcessEvent(Func, &Parms);

	if (Quat2 != nullptr)
		*Quat2 = std::move(Parms.Quat2);
}


// Function BP_PuzzleCube_Functional.BP_PuzzleCube_Functional_C.SnapTo90DegGrid(float)
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// float                                   In                                                     (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   Out                                                    (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_PuzzleCube_Functional_C::SnapTo90DegGrid_float_(float In, float* Out)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PuzzleCube_Functional_C", "SnapTo90DegGrid(float)");

	Params::BP_PuzzleCube_Functional_C_SnapTo90DegGrid_float_ Parms{};

	Parms.In = In;

	UObject::ProcessEvent(Func, &Parms);

	if (Out != nullptr)
		*Out = Parms.Out;
}


// Function BP_PuzzleCube_Functional.BP_PuzzleCube_Functional_C.IsKubeSolved
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    Solved                                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ABP_PuzzleCube_Functional_C::IsKubeSolved(bool* Solved)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PuzzleCube_Functional_C", "IsKubeSolved");

	Params::BP_PuzzleCube_Functional_C_IsKubeSolved Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Solved != nullptr)
		*Solved = Parms.Solved;
}


// Function BP_PuzzleCube_Functional.BP_PuzzleCube_Functional_C.Quat2String
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// struct FQuat                            Quat                                                   (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor)
// class FString                           String                                                 (Parm, OutParm, ZeroConstructor, HasGetValueTypeHash)

void ABP_PuzzleCube_Functional_C::Quat2String(const struct FQuat& Quat, class FString* String)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PuzzleCube_Functional_C", "Quat2String");

	Params::BP_PuzzleCube_Functional_C_Quat2String Parms{};

	Parms.Quat = std::move(Quat);

	UObject::ProcessEvent(Func, &Parms);

	if (String != nullptr)
		*String = std::move(Parms.String);
}


// Function BP_PuzzleCube_Functional.BP_PuzzleCube_Functional_C.ResetCounters
// (Public, BlueprintCallable, BlueprintEvent)

void ABP_PuzzleCube_Functional_C::ResetCounters()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PuzzleCube_Functional_C", "ResetCounters");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_PuzzleCube_Functional.BP_PuzzleCube_Functional_C.GetTimeTaken
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// struct FTimespan                        ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash)

struct FTimespan ABP_PuzzleCube_Functional_C::GetTimeTaken()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PuzzleCube_Functional_C", "GetTimeTaken");

	Params::BP_PuzzleCube_Functional_C_GetTimeTaken Parms{};

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function BP_PuzzleCube_Functional.BP_PuzzleCube_Functional_C.SolveInternal
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)

void ABP_PuzzleCube_Functional_C::SolveInternal()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PuzzleCube_Functional_C", "SolveInternal");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_PuzzleCube_Functional.BP_PuzzleCube_Functional_C.SpawnMiniCubes
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)

void ABP_PuzzleCube_Functional_C::SpawnMiniCubes()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PuzzleCube_Functional_C", "SpawnMiniCubes");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_PuzzleCube_Functional.BP_PuzzleCube_Functional_C.CloseTheKube
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    WasClosed                                              (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ABP_PuzzleCube_Functional_C::CloseTheKube(bool* WasClosed)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PuzzleCube_Functional_C", "CloseTheKube");

	Params::BP_PuzzleCube_Functional_C_CloseTheKube Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (WasClosed != nullptr)
		*WasClosed = Parms.WasClosed;
}


// Function BP_PuzzleCube_Functional.BP_PuzzleCube_Functional_C.Equal (Quaternion)
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// struct FQuat                            A                                                      (BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor)
// struct FQuat                            B                                                      (BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor)
// float                                   Tolerance                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)

bool ABP_PuzzleCube_Functional_C::Equal__Quaternion_(const struct FQuat& A, const struct FQuat& B, float Tolerance)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PuzzleCube_Functional_C", "Equal (Quaternion)");

	Params::BP_PuzzleCube_Functional_C_Equal__Quaternion_ Parms{};

	Parms.A = std::move(A);
	Parms.B = std::move(B);
	Parms.Tolerance = Tolerance;

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function BP_PuzzleCube_Functional.BP_PuzzleCube_Functional_C.ResizeTheKube
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// int32                                   CubeSize_0                                             (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_PuzzleCube_Functional_C::ResizeTheKube(int32* CubeSize_0)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PuzzleCube_Functional_C", "ResizeTheKube");

	Params::BP_PuzzleCube_Functional_C_ResizeTheKube Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (CubeSize_0 != nullptr)
		*CubeSize_0 = Parms.CubeSize_0;
}


// Function BP_PuzzleCube_Functional.BP_PuzzleCube_Functional_C.Is Face Solved
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// TArray<int32>                           FaceIndices                                            (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)

bool ABP_PuzzleCube_Functional_C::Is_Face_Solved(TArray<int32>& FaceIndices)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PuzzleCube_Functional_C", "Is Face Solved");

	Params::BP_PuzzleCube_Functional_C_Is_Face_Solved Parms{};

	Parms.FaceIndices = std::move(FaceIndices);

	UObject::ProcessEvent(Func, &Parms);

	FaceIndices = std::move(Parms.FaceIndices);

	return Parms.ReturnValue;
}


// Function BP_PuzzleCube_Functional.BP_PuzzleCube_Functional_C.SetColorBlindSkin
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    ColorBlindActive                                       (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ABP_PuzzleCube_Functional_C::SetColorBlindSkin(bool ColorBlindActive)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PuzzleCube_Functional_C", "SetColorBlindSkin");

	Params::BP_PuzzleCube_Functional_C_SetColorBlindSkin Parms{};

	Parms.ColorBlindActive = ColorBlindActive;

	UObject::ProcessEvent(Func, &Parms);
}

}

