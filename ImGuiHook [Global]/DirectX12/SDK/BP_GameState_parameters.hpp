#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_GameState

#include "Basic.hpp"

#include "CoreUObject_structs.hpp"
#include "Flame_structs.hpp"


namespace SDK::Params
{

// Function BP_GameState.BP_GameState_C.Get Game Mode Description
// 0x0018 (0x0018 - 0x0000)
struct BP_GameState_C_Get_Game_Mode_Description final
{
public:
	class FText                                   Game_Mode_Description_0;                           // 0x0000(0x0018)(Parm, OutParm)
};
static_assert(alignof(BP_GameState_C_Get_Game_Mode_Description) == 0x000008, "Wrong alignment on BP_GameState_C_Get_Game_Mode_Description");
static_assert(sizeof(BP_GameState_C_Get_Game_Mode_Description) == 0x000018, "Wrong size on BP_GameState_C_Get_Game_Mode_Description");
static_assert(offsetof(BP_GameState_C_Get_Game_Mode_Description, Game_Mode_Description_0) == 0x000000, "Member 'BP_GameState_C_Get_Game_Mode_Description::Game_Mode_Description_0' has a wrong offset!");

// Function BP_GameState.BP_GameState_C.Set Game Mode Description
// 0x0020 (0x0020 - 0x0000)
struct BP_GameState_C_Set_Game_Mode_Description final
{
public:
	class FText                                   New_Game_Mode_Description;                         // 0x0000(0x0018)(BlueprintVisible, BlueprintReadOnly, Parm)
	bool                                          CallFunc_IsServer_ReturnValue;                     // 0x0018(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_GameState_C_Set_Game_Mode_Description) == 0x000008, "Wrong alignment on BP_GameState_C_Set_Game_Mode_Description");
static_assert(sizeof(BP_GameState_C_Set_Game_Mode_Description) == 0x000020, "Wrong size on BP_GameState_C_Set_Game_Mode_Description");
static_assert(offsetof(BP_GameState_C_Set_Game_Mode_Description, New_Game_Mode_Description) == 0x000000, "Member 'BP_GameState_C_Set_Game_Mode_Description::New_Game_Mode_Description' has a wrong offset!");
static_assert(offsetof(BP_GameState_C_Set_Game_Mode_Description, CallFunc_IsServer_ReturnValue) == 0x000018, "Member 'BP_GameState_C_Set_Game_Mode_Description::CallFunc_IsServer_ReturnValue' has a wrong offset!");

// Function BP_GameState.BP_GameState_C.GetMapTexture
// 0x0010 (0x0010 - 0x0000)
struct BP_GameState_C_GetMapTexture final
{
public:
	class UTexture2D*                             TwoD_MapTexture;                                   // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0008(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_GameState_C_GetMapTexture) == 0x000008, "Wrong alignment on BP_GameState_C_GetMapTexture");
static_assert(sizeof(BP_GameState_C_GetMapTexture) == 0x000010, "Wrong size on BP_GameState_C_GetMapTexture");
static_assert(offsetof(BP_GameState_C_GetMapTexture, TwoD_MapTexture) == 0x000000, "Member 'BP_GameState_C_GetMapTexture::TwoD_MapTexture' has a wrong offset!");
static_assert(offsetof(BP_GameState_C_GetMapTexture, CallFunc_IsValid_ReturnValue) == 0x000008, "Member 'BP_GameState_C_GetMapTexture::CallFunc_IsValid_ReturnValue' has a wrong offset!");

// Function BP_GameState.BP_GameState_C.GetGameModeStringName
// 0x0010 (0x0010 - 0x0000)
struct BP_GameState_C_GetGameModeStringName final
{
public:
	class FString                                 StringName;                                        // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_GameState_C_GetGameModeStringName) == 0x000008, "Wrong alignment on BP_GameState_C_GetGameModeStringName");
static_assert(sizeof(BP_GameState_C_GetGameModeStringName) == 0x000010, "Wrong size on BP_GameState_C_GetGameModeStringName");
static_assert(offsetof(BP_GameState_C_GetGameModeStringName, StringName) == 0x000000, "Member 'BP_GameState_C_GetGameModeStringName::StringName' has a wrong offset!");

// Function BP_GameState.BP_GameState_C.GetMapOverlayTexture
// 0x0030 (0x0030 - 0x0000)
struct BP_GameState_C_GetMapOverlayTexture final
{
public:
	class UTexture2D*                             TwoD_MapTexture;                                   // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0008(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 CallFunc_GetGameModeStringName_StringName;         // 0x0010(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class UTexture2D*                             CallFunc_GetMapOverlayTexture_OverlayTexture;      // 0x0020(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_StringIsEmpty_ReturnValue;                // 0x0028(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_GameState_C_GetMapOverlayTexture) == 0x000008, "Wrong alignment on BP_GameState_C_GetMapOverlayTexture");
static_assert(sizeof(BP_GameState_C_GetMapOverlayTexture) == 0x000030, "Wrong size on BP_GameState_C_GetMapOverlayTexture");
static_assert(offsetof(BP_GameState_C_GetMapOverlayTexture, TwoD_MapTexture) == 0x000000, "Member 'BP_GameState_C_GetMapOverlayTexture::TwoD_MapTexture' has a wrong offset!");
static_assert(offsetof(BP_GameState_C_GetMapOverlayTexture, CallFunc_IsValid_ReturnValue) == 0x000008, "Member 'BP_GameState_C_GetMapOverlayTexture::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_GameState_C_GetMapOverlayTexture, CallFunc_GetGameModeStringName_StringName) == 0x000010, "Member 'BP_GameState_C_GetMapOverlayTexture::CallFunc_GetGameModeStringName_StringName' has a wrong offset!");
static_assert(offsetof(BP_GameState_C_GetMapOverlayTexture, CallFunc_GetMapOverlayTexture_OverlayTexture) == 0x000020, "Member 'BP_GameState_C_GetMapOverlayTexture::CallFunc_GetMapOverlayTexture_OverlayTexture' has a wrong offset!");
static_assert(offsetof(BP_GameState_C_GetMapOverlayTexture, CallFunc_StringIsEmpty_ReturnValue) == 0x000028, "Member 'BP_GameState_C_GetMapOverlayTexture::CallFunc_StringIsEmpty_ReturnValue' has a wrong offset!");

// Function BP_GameState.BP_GameState_C.GetCustomZoomLimits
// 0x00A8 (0x00A8 - 0x0000)
struct BP_GameState_C_GetCustomZoomLimits final
{
public:
	struct FLinearColor                           LowerLimit;                                        // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           UpperLimit;                                        // 0x0010(0x0010)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           StartPosition;                                     // 0x0020(0x0010)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FString                                 CallFunc_GetGameModeStringName_StringName;         // 0x0030(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0040(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_41[0x3];                                       // 0x0041(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FLinearColor                           CallFunc_GetCustomZoomLimits_lowerLimit;           // 0x0044(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           CallFunc_GetCustomZoomLimits_upperLimit;           // 0x0054(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           CallFunc_GetCustomZoomLimits_StartOffset;          // 0x0064(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_StringIsEmpty_ReturnValue;                // 0x0074(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_75[0x3];                                       // 0x0075(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FLinearColor                           CallFunc_MakeColor_ReturnValue;                    // 0x0078(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           CallFunc_MakeColor_ReturnValue_1;                  // 0x0088(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           CallFunc_MakeColor_ReturnValue_2;                  // 0x0098(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_GameState_C_GetCustomZoomLimits) == 0x000008, "Wrong alignment on BP_GameState_C_GetCustomZoomLimits");
static_assert(sizeof(BP_GameState_C_GetCustomZoomLimits) == 0x0000A8, "Wrong size on BP_GameState_C_GetCustomZoomLimits");
static_assert(offsetof(BP_GameState_C_GetCustomZoomLimits, LowerLimit) == 0x000000, "Member 'BP_GameState_C_GetCustomZoomLimits::LowerLimit' has a wrong offset!");
static_assert(offsetof(BP_GameState_C_GetCustomZoomLimits, UpperLimit) == 0x000010, "Member 'BP_GameState_C_GetCustomZoomLimits::UpperLimit' has a wrong offset!");
static_assert(offsetof(BP_GameState_C_GetCustomZoomLimits, StartPosition) == 0x000020, "Member 'BP_GameState_C_GetCustomZoomLimits::StartPosition' has a wrong offset!");
static_assert(offsetof(BP_GameState_C_GetCustomZoomLimits, CallFunc_GetGameModeStringName_StringName) == 0x000030, "Member 'BP_GameState_C_GetCustomZoomLimits::CallFunc_GetGameModeStringName_StringName' has a wrong offset!");
static_assert(offsetof(BP_GameState_C_GetCustomZoomLimits, CallFunc_IsValid_ReturnValue) == 0x000040, "Member 'BP_GameState_C_GetCustomZoomLimits::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_GameState_C_GetCustomZoomLimits, CallFunc_GetCustomZoomLimits_lowerLimit) == 0x000044, "Member 'BP_GameState_C_GetCustomZoomLimits::CallFunc_GetCustomZoomLimits_lowerLimit' has a wrong offset!");
static_assert(offsetof(BP_GameState_C_GetCustomZoomLimits, CallFunc_GetCustomZoomLimits_upperLimit) == 0x000054, "Member 'BP_GameState_C_GetCustomZoomLimits::CallFunc_GetCustomZoomLimits_upperLimit' has a wrong offset!");
static_assert(offsetof(BP_GameState_C_GetCustomZoomLimits, CallFunc_GetCustomZoomLimits_StartOffset) == 0x000064, "Member 'BP_GameState_C_GetCustomZoomLimits::CallFunc_GetCustomZoomLimits_StartOffset' has a wrong offset!");
static_assert(offsetof(BP_GameState_C_GetCustomZoomLimits, CallFunc_StringIsEmpty_ReturnValue) == 0x000074, "Member 'BP_GameState_C_GetCustomZoomLimits::CallFunc_StringIsEmpty_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_GameState_C_GetCustomZoomLimits, CallFunc_MakeColor_ReturnValue) == 0x000078, "Member 'BP_GameState_C_GetCustomZoomLimits::CallFunc_MakeColor_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_GameState_C_GetCustomZoomLimits, CallFunc_MakeColor_ReturnValue_1) == 0x000088, "Member 'BP_GameState_C_GetCustomZoomLimits::CallFunc_MakeColor_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_GameState_C_GetCustomZoomLimits, CallFunc_MakeColor_ReturnValue_2) == 0x000098, "Member 'BP_GameState_C_GetCustomZoomLimits::CallFunc_MakeColor_ReturnValue_2' has a wrong offset!");

// Function BP_GameState.BP_GameState_C.BPI_GetCompassRotator
// 0x002C (0x002C - 0x0000)
struct BP_GameState_C_BPI_GetCompassRotator final
{
public:
	bool                                          bValid;                                            // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FRotator                               CompasRotator;                                     // 0x0004(0x000C)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FRotator                               CallFunc_GetCompassRotator_Compass_Rotator;        // 0x0010(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FRotator                               CallFunc_GetCompassRotator_Landscape_Rotator;      // 0x001C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_GetCompassRotator_Valid_Landscape;        // 0x0028(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0029(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_GameState_C_BPI_GetCompassRotator) == 0x000004, "Wrong alignment on BP_GameState_C_BPI_GetCompassRotator");
static_assert(sizeof(BP_GameState_C_BPI_GetCompassRotator) == 0x00002C, "Wrong size on BP_GameState_C_BPI_GetCompassRotator");
static_assert(offsetof(BP_GameState_C_BPI_GetCompassRotator, bValid) == 0x000000, "Member 'BP_GameState_C_BPI_GetCompassRotator::bValid' has a wrong offset!");
static_assert(offsetof(BP_GameState_C_BPI_GetCompassRotator, CompasRotator) == 0x000004, "Member 'BP_GameState_C_BPI_GetCompassRotator::CompasRotator' has a wrong offset!");
static_assert(offsetof(BP_GameState_C_BPI_GetCompassRotator, CallFunc_GetCompassRotator_Compass_Rotator) == 0x000010, "Member 'BP_GameState_C_BPI_GetCompassRotator::CallFunc_GetCompassRotator_Compass_Rotator' has a wrong offset!");
static_assert(offsetof(BP_GameState_C_BPI_GetCompassRotator, CallFunc_GetCompassRotator_Landscape_Rotator) == 0x00001C, "Member 'BP_GameState_C_BPI_GetCompassRotator::CallFunc_GetCompassRotator_Landscape_Rotator' has a wrong offset!");
static_assert(offsetof(BP_GameState_C_BPI_GetCompassRotator, CallFunc_GetCompassRotator_Valid_Landscape) == 0x000028, "Member 'BP_GameState_C_BPI_GetCompassRotator::CallFunc_GetCompassRotator_Valid_Landscape' has a wrong offset!");
static_assert(offsetof(BP_GameState_C_BPI_GetCompassRotator, CallFunc_IsValid_ReturnValue) == 0x000029, "Member 'BP_GameState_C_BPI_GetCompassRotator::CallFunc_IsValid_ReturnValue' has a wrong offset!");

// Function BP_GameState.BP_GameState_C.BPI_GetMapCorners
// 0x0018 (0x0018 - 0x0000)
struct BP_GameState_C_BPI_GetMapCorners final
{
public:
	bool                                          bValid;                                            // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class AActor*>                         MapCorners_0;                                      // 0x0008(0x0010)(Parm, OutParm)
};
static_assert(alignof(BP_GameState_C_BPI_GetMapCorners) == 0x000008, "Wrong alignment on BP_GameState_C_BPI_GetMapCorners");
static_assert(sizeof(BP_GameState_C_BPI_GetMapCorners) == 0x000018, "Wrong size on BP_GameState_C_BPI_GetMapCorners");
static_assert(offsetof(BP_GameState_C_BPI_GetMapCorners, bValid) == 0x000000, "Member 'BP_GameState_C_BPI_GetMapCorners::bValid' has a wrong offset!");
static_assert(offsetof(BP_GameState_C_BPI_GetMapCorners, MapCorners_0) == 0x000008, "Member 'BP_GameState_C_BPI_GetMapCorners::MapCorners_0' has a wrong offset!");

// Function BP_GameState.BP_GameState_C.GetCloudMatchSettingsInfo
// 0x0028 (0x0028 - 0x0000)
struct BP_GameState_C_GetCloudMatchSettingsInfo final
{
public:
	struct FCloudMatchSettingsInfo                ReturnValue;                                       // 0x0000(0x0028)(Parm, OutParm, ReturnParm)
};
static_assert(alignof(BP_GameState_C_GetCloudMatchSettingsInfo) == 0x000008, "Wrong alignment on BP_GameState_C_GetCloudMatchSettingsInfo");
static_assert(sizeof(BP_GameState_C_GetCloudMatchSettingsInfo) == 0x000028, "Wrong size on BP_GameState_C_GetCloudMatchSettingsInfo");
static_assert(offsetof(BP_GameState_C_GetCloudMatchSettingsInfo, ReturnValue) == 0x000000, "Member 'BP_GameState_C_GetCloudMatchSettingsInfo::ReturnValue' has a wrong offset!");

}

