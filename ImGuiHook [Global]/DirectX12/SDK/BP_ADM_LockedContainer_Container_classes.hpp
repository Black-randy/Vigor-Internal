#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_ADM_LockedContainer_Container

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "Engine_classes.hpp"


namespace SDK
{

// BlueprintGeneratedClass BP_ADM_LockedContainer_Container.BP_ADM_LockedContainer_Container_C
// 0x00F8 (0x0318 - 0x0220)
class ABP_ADM_LockedContainer_Container_C final : public AActor
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x0220(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class UStaticMeshComponent*                   ExplosionCollision;                                // 0x0228(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USceneComponent*                        Ideal_Explosion_Loc;                               // 0x0230(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UStaticMeshComponent*                   Light2;                                            // 0x0238(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UStaticMeshComponent*                   Light1;                                            // 0x0240(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UBoxComponent*                          TopLockCollision;                                  // 0x0248(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UStaticMeshComponent*                   Light;                                             // 0x0250(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USceneComponent*                        HorizontalBeam_RightOpened;                        // 0x0258(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USceneComponent*                        HorizontalBeam_LeftOpened;                         // 0x0260(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UStaticMeshComponent*                   SM_Container_HorizontalBeam;                       // 0x0268(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UStaticMeshComponent*                   SM_Container_VerticalBeam;                         // 0x0270(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UStaticMeshComponent*                   SM_Container_LockPoints;                           // 0x0278(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UStaticMeshComponent*                   SM_ContainerSingleLatch_Right;                     // 0x0280(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UStaticMeshComponent*                   SM_ContainerSingleLatch_Left;                      // 0x0288(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USceneComponent*                        LatchesRoot;                                       // 0x0290(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USceneComponent*                        CrateRoot;                                         // 0x0298(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UStaticMeshComponent*                   Cage_3;                                            // 0x02A0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UStaticMeshComponent*                   Cage_2;                                            // 0x02A8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UStaticMeshComponent*                   CagedBox;                                          // 0x02B0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UStaticMeshComponent*                   Cage_1;                                            // 0x02B8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UStaticMeshComponent*                   Cage_4;                                            // 0x02C0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UStaticMeshComponent*                   CagedShelf;                                        // 0x02C8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UStaticMeshComponent*                   CagedBarrel_1;                                     // 0x02D0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UStaticMeshComponent*                   CagedBarrel_2;                                     // 0x02D8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UObstacleComponent*                     Obstacle;                                          // 0x02E0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UStaticMeshComponent*                   SM_Container_01_DoorMinusL;                        // 0x02E8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UStaticMeshComponent*                   SM_Container_01_NoDoor;                            // 0x02F0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UStaticMeshComponent*                   SM_Container_01_DoorMinusR;                        // 0x02F8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UStaticMeshComponent*                   SM_Container;                                      // 0x0300(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USceneComponent*                        DefaultSceneRoot;                                  // 0x0308(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	int32                                         LatchesOpenInex;                                   // 0x0310(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

public:
	void ExecuteUbergraph_BP_ADM_LockedContainer_Container(int32 EntryPoint);
	void ProccessExplosion(const struct FVector& Location, float ExplosionRadius, class AController* InstigatorController, class AActor* DamageCauser, bool DamagingExplosion, float EnviromentDamageMultiplier);
	void SetLatchOpened(class UStaticMeshComponent* Target, bool Opened);
	void ChangeOpenedLatches(bool LeftOpened, bool RightOpened, bool TopOpened);
	void Open_door();
	void UserConstructionScript();
	void Get_the_mesh_with_sockets(class UStaticMeshComponent** SM_Container_0);
	void GetHorizontalBeamTransform(struct FTransform* RelativeTransform);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BP_ADM_LockedContainer_Container_C">();
	}
	static class ABP_ADM_LockedContainer_Container_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<ABP_ADM_LockedContainer_Container_C>();
	}
};
static_assert(alignof(ABP_ADM_LockedContainer_Container_C) == 0x000008, "Wrong alignment on ABP_ADM_LockedContainer_Container_C");
static_assert(sizeof(ABP_ADM_LockedContainer_Container_C) == 0x000318, "Wrong size on ABP_ADM_LockedContainer_Container_C");
static_assert(offsetof(ABP_ADM_LockedContainer_Container_C, UberGraphFrame) == 0x000220, "Member 'ABP_ADM_LockedContainer_Container_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(ABP_ADM_LockedContainer_Container_C, ExplosionCollision) == 0x000228, "Member 'ABP_ADM_LockedContainer_Container_C::ExplosionCollision' has a wrong offset!");
static_assert(offsetof(ABP_ADM_LockedContainer_Container_C, Ideal_Explosion_Loc) == 0x000230, "Member 'ABP_ADM_LockedContainer_Container_C::Ideal_Explosion_Loc' has a wrong offset!");
static_assert(offsetof(ABP_ADM_LockedContainer_Container_C, Light2) == 0x000238, "Member 'ABP_ADM_LockedContainer_Container_C::Light2' has a wrong offset!");
static_assert(offsetof(ABP_ADM_LockedContainer_Container_C, Light1) == 0x000240, "Member 'ABP_ADM_LockedContainer_Container_C::Light1' has a wrong offset!");
static_assert(offsetof(ABP_ADM_LockedContainer_Container_C, TopLockCollision) == 0x000248, "Member 'ABP_ADM_LockedContainer_Container_C::TopLockCollision' has a wrong offset!");
static_assert(offsetof(ABP_ADM_LockedContainer_Container_C, Light) == 0x000250, "Member 'ABP_ADM_LockedContainer_Container_C::Light' has a wrong offset!");
static_assert(offsetof(ABP_ADM_LockedContainer_Container_C, HorizontalBeam_RightOpened) == 0x000258, "Member 'ABP_ADM_LockedContainer_Container_C::HorizontalBeam_RightOpened' has a wrong offset!");
static_assert(offsetof(ABP_ADM_LockedContainer_Container_C, HorizontalBeam_LeftOpened) == 0x000260, "Member 'ABP_ADM_LockedContainer_Container_C::HorizontalBeam_LeftOpened' has a wrong offset!");
static_assert(offsetof(ABP_ADM_LockedContainer_Container_C, SM_Container_HorizontalBeam) == 0x000268, "Member 'ABP_ADM_LockedContainer_Container_C::SM_Container_HorizontalBeam' has a wrong offset!");
static_assert(offsetof(ABP_ADM_LockedContainer_Container_C, SM_Container_VerticalBeam) == 0x000270, "Member 'ABP_ADM_LockedContainer_Container_C::SM_Container_VerticalBeam' has a wrong offset!");
static_assert(offsetof(ABP_ADM_LockedContainer_Container_C, SM_Container_LockPoints) == 0x000278, "Member 'ABP_ADM_LockedContainer_Container_C::SM_Container_LockPoints' has a wrong offset!");
static_assert(offsetof(ABP_ADM_LockedContainer_Container_C, SM_ContainerSingleLatch_Right) == 0x000280, "Member 'ABP_ADM_LockedContainer_Container_C::SM_ContainerSingleLatch_Right' has a wrong offset!");
static_assert(offsetof(ABP_ADM_LockedContainer_Container_C, SM_ContainerSingleLatch_Left) == 0x000288, "Member 'ABP_ADM_LockedContainer_Container_C::SM_ContainerSingleLatch_Left' has a wrong offset!");
static_assert(offsetof(ABP_ADM_LockedContainer_Container_C, LatchesRoot) == 0x000290, "Member 'ABP_ADM_LockedContainer_Container_C::LatchesRoot' has a wrong offset!");
static_assert(offsetof(ABP_ADM_LockedContainer_Container_C, CrateRoot) == 0x000298, "Member 'ABP_ADM_LockedContainer_Container_C::CrateRoot' has a wrong offset!");
static_assert(offsetof(ABP_ADM_LockedContainer_Container_C, Cage_3) == 0x0002A0, "Member 'ABP_ADM_LockedContainer_Container_C::Cage_3' has a wrong offset!");
static_assert(offsetof(ABP_ADM_LockedContainer_Container_C, Cage_2) == 0x0002A8, "Member 'ABP_ADM_LockedContainer_Container_C::Cage_2' has a wrong offset!");
static_assert(offsetof(ABP_ADM_LockedContainer_Container_C, CagedBox) == 0x0002B0, "Member 'ABP_ADM_LockedContainer_Container_C::CagedBox' has a wrong offset!");
static_assert(offsetof(ABP_ADM_LockedContainer_Container_C, Cage_1) == 0x0002B8, "Member 'ABP_ADM_LockedContainer_Container_C::Cage_1' has a wrong offset!");
static_assert(offsetof(ABP_ADM_LockedContainer_Container_C, Cage_4) == 0x0002C0, "Member 'ABP_ADM_LockedContainer_Container_C::Cage_4' has a wrong offset!");
static_assert(offsetof(ABP_ADM_LockedContainer_Container_C, CagedShelf) == 0x0002C8, "Member 'ABP_ADM_LockedContainer_Container_C::CagedShelf' has a wrong offset!");
static_assert(offsetof(ABP_ADM_LockedContainer_Container_C, CagedBarrel_1) == 0x0002D0, "Member 'ABP_ADM_LockedContainer_Container_C::CagedBarrel_1' has a wrong offset!");
static_assert(offsetof(ABP_ADM_LockedContainer_Container_C, CagedBarrel_2) == 0x0002D8, "Member 'ABP_ADM_LockedContainer_Container_C::CagedBarrel_2' has a wrong offset!");
static_assert(offsetof(ABP_ADM_LockedContainer_Container_C, Obstacle) == 0x0002E0, "Member 'ABP_ADM_LockedContainer_Container_C::Obstacle' has a wrong offset!");
static_assert(offsetof(ABP_ADM_LockedContainer_Container_C, SM_Container_01_DoorMinusL) == 0x0002E8, "Member 'ABP_ADM_LockedContainer_Container_C::SM_Container_01_DoorMinusL' has a wrong offset!");
static_assert(offsetof(ABP_ADM_LockedContainer_Container_C, SM_Container_01_NoDoor) == 0x0002F0, "Member 'ABP_ADM_LockedContainer_Container_C::SM_Container_01_NoDoor' has a wrong offset!");
static_assert(offsetof(ABP_ADM_LockedContainer_Container_C, SM_Container_01_DoorMinusR) == 0x0002F8, "Member 'ABP_ADM_LockedContainer_Container_C::SM_Container_01_DoorMinusR' has a wrong offset!");
static_assert(offsetof(ABP_ADM_LockedContainer_Container_C, SM_Container) == 0x000300, "Member 'ABP_ADM_LockedContainer_Container_C::SM_Container' has a wrong offset!");
static_assert(offsetof(ABP_ADM_LockedContainer_Container_C, DefaultSceneRoot) == 0x000308, "Member 'ABP_ADM_LockedContainer_Container_C::DefaultSceneRoot' has a wrong offset!");
static_assert(offsetof(ABP_ADM_LockedContainer_Container_C, LatchesOpenInex) == 0x000310, "Member 'ABP_ADM_LockedContainer_Container_C::LatchesOpenInex' has a wrong offset!");

}

