#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_CarryingComponent

#include "Basic.hpp"

#include "BP_CarryingComponent_classes.hpp"
#include "BP_CarryingComponent_parameters.hpp"


namespace SDK
{

// Function BP_CarryingComponent.BP_CarryingComponent_C.ExecuteUbergraph_BP_CarryingComponent
// (Final, UbergraphFunction, HasDefaults)
// Parameters:
// int32                                   EntryPoint                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_CarryingComponent_C::ExecuteUbergraph_BP_CarryingComponent(int32 EntryPoint)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_CarryingComponent_C", "ExecuteUbergraph_BP_CarryingComponent");

	Params::BP_CarryingComponent_C_ExecuteUbergraph_BP_CarryingComponent Parms{};

	Parms.EntryPoint = EntryPoint;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_CarryingComponent.BP_CarryingComponent_C.SetRestrictionsOnOwningClient
// (Net, HasOutParams, NetClient, BlueprintCallable, BlueprintEvent)
// Parameters:
// class ABP_Character_C*                  Character                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// TArray<class ABP_ActorToCarry_C*>       Cargos                                                 (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)

void UBP_CarryingComponent_C::SetRestrictionsOnOwningClient(class ABP_Character_C* Character, TArray<class ABP_ActorToCarry_C*>& Cargos)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_CarryingComponent_C", "SetRestrictionsOnOwningClient");

	Params::BP_CarryingComponent_C_SetRestrictionsOnOwningClient Parms{};

	Parms.Character = Character;
	Parms.Cargos = std::move(Cargos);

	UObject::ProcessEvent(Func, &Parms);

	Cargos = std::move(Parms.Cargos);
}


// Function BP_CarryingComponent.BP_CarryingComponent_C.CloseUI
// (Net, NetClient, BlueprintCallable, BlueprintEvent)

void UBP_CarryingComponent_C::CloseUI()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_CarryingComponent_C", "CloseUI");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_CarryingComponent.BP_CarryingComponent_C.ShowUI
// (Net, NetClient, BlueprintCallable, BlueprintEvent)

void UBP_CarryingComponent_C::ShowUI()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_CarryingComponent_C", "ShowUI");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_CarryingComponent.BP_CarryingComponent_C.DropAll
// (Net, NetServer, BlueprintCallable, BlueprintEvent)

void UBP_CarryingComponent_C::DropAll()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_CarryingComponent_C", "DropAll");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_CarryingComponent.BP_CarryingComponent_C.DropCargoGetHandleLocation
// (Net, NetReliable, NetClient, BlueprintCallable, BlueprintEvent)
// Parameters:
// class ABP_ActorToCarry_C*               Cargo                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_CarryingComponent_C::DropCargoGetHandleLocation(class ABP_ActorToCarry_C* Cargo)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_CarryingComponent_C", "DropCargoGetHandleLocation");

	Params::BP_CarryingComponent_C_DropCargoGetHandleLocation Parms{};

	Parms.Cargo = Cargo;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_CarryingComponent.BP_CarryingComponent_C.GrabCargo
// (Net, NetReliable, NetServer, BlueprintCallable, BlueprintEvent)
// Parameters:
// class ABP_ActorToCarry_C*               Cargo                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_CarryingComponent_C::GrabCargo(class ABP_ActorToCarry_C* Cargo)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_CarryingComponent_C", "GrabCargo");

	Params::BP_CarryingComponent_C_GrabCargo Parms{};

	Parms.Cargo = Cargo;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_CarryingComponent.BP_CarryingComponent_C.DropCargoServer
// (Net, NetReliable, NetServer, BlueprintCallable, BlueprintEvent)
// Parameters:
// class ABP_ActorToCarry_C*               Cargo                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FTransform                       HandleWorldTransform                                   (BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor)

void UBP_CarryingComponent_C::DropCargoServer(class ABP_ActorToCarry_C* Cargo, const struct FTransform& HandleWorldTransform)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_CarryingComponent_C", "DropCargoServer");

	Params::BP_CarryingComponent_C_DropCargoServer Parms{};

	Parms.Cargo = Cargo;
	Parms.HandleWorldTransform = std::move(HandleWorldTransform);

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_CarryingComponent.BP_CarryingComponent_C.SetRestrictions
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// class AHumanCharacter*                  Character                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// TArray<class ABP_ActorToCarry_C*>       Cargos                                                 (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)

void UBP_CarryingComponent_C::SetRestrictions(class AHumanCharacter* Character, TArray<class ABP_ActorToCarry_C*>& Cargos)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_CarryingComponent_C", "SetRestrictions");

	Params::BP_CarryingComponent_C_SetRestrictions Parms{};

	Parms.Character = Character;
	Parms.Cargos = std::move(Cargos);

	UObject::ProcessEvent(Func, &Parms);

	Cargos = std::move(Parms.Cargos);
}


// Function BP_CarryingComponent.BP_CarryingComponent_C.HasCapacityFor
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// class ABP_ActorToCarry_C*               Cargo                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)

bool UBP_CarryingComponent_C::HasCapacityFor(class ABP_ActorToCarry_C* Cargo)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_CarryingComponent_C", "HasCapacityFor");

	Params::BP_CarryingComponent_C_HasCapacityFor Parms{};

	Parms.Cargo = Cargo;

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}

}

