#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_AmbienceArea

#include "Basic.hpp"

#include "BP_AmbienceArea_classes.hpp"
#include "BP_AmbienceArea_parameters.hpp"


namespace SDK
{

// Function BP_AmbienceArea.BP_AmbienceArea_C.ExecuteUbergraph_BP_AmbienceArea
// (Final, UbergraphFunction, HasDefaults)
// Parameters:
// int32                                   EntryPoint                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_AmbienceArea_C::ExecuteUbergraph_BP_AmbienceArea(int32 EntryPoint)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_AmbienceArea_C", "ExecuteUbergraph_BP_AmbienceArea");

	Params::BP_AmbienceArea_C_ExecuteUbergraph_BP_AmbienceArea Parms{};

	Parms.EntryPoint = EntryPoint;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_AmbienceArea.BP_AmbienceArea_C.StopProceduralSoundsBP
// (BlueprintCallable, BlueprintEvent)

void ABP_AmbienceArea_C::StopProceduralSoundsBP()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_AmbienceArea_C", "StopProceduralSoundsBP");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_AmbienceArea.BP_AmbienceArea_C.SetProceduralSoundsBP
// (BlueprintCallable, BlueprintEvent)

void ABP_AmbienceArea_C::SetProceduralSoundsBP()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_AmbienceArea_C", "SetProceduralSoundsBP");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_AmbienceArea.BP_AmbienceArea_C.SetSound
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    Active                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// class USoundBase*                       Sound                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_AmbienceArea_C::SetSound(bool Active, class USoundBase* Sound)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_AmbienceArea_C", "SetSound");

	Params::BP_AmbienceArea_C_SetSound Parms{};

	Parms.Active = Active;
	Parms.Sound = Sound;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_AmbienceArea.BP_AmbienceArea_C.UpdateCurrentLightingScenario
// (BlueprintCallable, BlueprintEvent)

void ABP_AmbienceArea_C::UpdateCurrentLightingScenario()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_AmbienceArea_C", "UpdateCurrentLightingScenario");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_AmbienceArea.BP_AmbienceArea_C.DisableComponents
// (BlueprintCallable, BlueprintEvent)

void ABP_AmbienceArea_C::DisableComponents()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_AmbienceArea_C", "DisableComponents");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_AmbienceArea.BP_AmbienceArea_C.ActivateComponents
// (HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// E_LightingScenarios                     Scenario                                               (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_AmbienceArea_C::ActivateComponents(const E_LightingScenarios& Scenario)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_AmbienceArea_C", "ActivateComponents");

	Params::BP_AmbienceArea_C_ActivateComponents Parms{};

	Parms.Scenario = Scenario;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_AmbienceArea.BP_AmbienceArea_C.RetryInit
// (BlueprintCallable, BlueprintEvent)

void ABP_AmbienceArea_C::RetryInit()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_AmbienceArea_C", "RetryInit");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_AmbienceArea.BP_AmbienceArea_C.LightingNameChanged_Event
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// class FString                           LightScenarioString                                    (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)

void ABP_AmbienceArea_C::LightingNameChanged_Event(const class FString& LightScenarioString)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_AmbienceArea_C", "LightingNameChanged_Event");

	Params::BP_AmbienceArea_C_LightingNameChanged_Event Parms{};

	Parms.LightScenarioString = std::move(LightScenarioString);

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_AmbienceArea.BP_AmbienceArea_C.CheckWeatherBound
// (BlueprintCallable, BlueprintEvent)

void ABP_AmbienceArea_C::CheckWeatherBound()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_AmbienceArea_C", "CheckWeatherBound");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_AmbienceArea.BP_AmbienceArea_C.CheckForScenario
// (BlueprintCallable, BlueprintEvent)

void ABP_AmbienceArea_C::CheckForScenario()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_AmbienceArea_C", "CheckForScenario");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_AmbienceArea.BP_AmbienceArea_C.ReceiveBeginPlay
// (Event, Protected, BlueprintEvent)

void ABP_AmbienceArea_C::ReceiveBeginPlay()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_AmbienceArea_C", "ReceiveBeginPlay");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_AmbienceArea.BP_AmbienceArea_C.GetWeatherSwitcherRef
// (BlueprintCallable, BlueprintEvent)

void ABP_AmbienceArea_C::GetWeatherSwitcherRef()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_AmbienceArea_C", "GetWeatherSwitcherRef");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_AmbienceArea.BP_AmbienceArea_C.AdjustWeather
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// float                                   CurrentRainAmount_0                                    (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   CurrentWindIntensity                                   (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FVector                          CurrentWindDirection                                   (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   CurrentWetnessAmount                                   (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_AmbienceArea_C::AdjustWeather(float CurrentRainAmount_0, float CurrentWindIntensity, const struct FVector& CurrentWindDirection, float CurrentWetnessAmount)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_AmbienceArea_C", "AdjustWeather");

	Params::BP_AmbienceArea_C_AdjustWeather Parms{};

	Parms.CurrentRainAmount_0 = CurrentRainAmount_0;
	Parms.CurrentWindIntensity = CurrentWindIntensity;
	Parms.CurrentWindDirection = std::move(CurrentWindDirection);
	Parms.CurrentWetnessAmount = CurrentWetnessAmount;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_AmbienceArea.BP_AmbienceArea_C.AdjustRainIntensity
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// float                                   CurrentRainAmount_0                                    (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   CurrentWetnessAmount                                   (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_AmbienceArea_C::AdjustRainIntensity(float CurrentRainAmount_0, float CurrentWetnessAmount)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_AmbienceArea_C", "AdjustRainIntensity");

	Params::BP_AmbienceArea_C_AdjustRainIntensity Parms{};

	Parms.CurrentRainAmount_0 = CurrentRainAmount_0;
	Parms.CurrentWetnessAmount = CurrentWetnessAmount;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_AmbienceArea.BP_AmbienceArea_C.SetHeavyRain
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    HeavyRain                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ABP_AmbienceArea_C::SetHeavyRain(bool HeavyRain)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_AmbienceArea_C", "SetHeavyRain");

	Params::BP_AmbienceArea_C_SetHeavyRain Parms{};

	Parms.HeavyRain = HeavyRain;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_AmbienceArea.BP_AmbienceArea_C.AdjustWindDirection
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FVector                          CurrentWindDirection                                   (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_AmbienceArea_C::AdjustWindDirection(const struct FVector& CurrentWindDirection)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_AmbienceArea_C", "AdjustWindDirection");

	Params::BP_AmbienceArea_C_AdjustWindDirection Parms{};

	Parms.CurrentWindDirection = std::move(CurrentWindDirection);

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_AmbienceArea.BP_AmbienceArea_C.AdjustWindIntensity
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// float                                   CurrentWindIntensity                                   (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_AmbienceArea_C::AdjustWindIntensity(float CurrentWindIntensity)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_AmbienceArea_C", "AdjustWindIntensity");

	Params::BP_AmbienceArea_C_AdjustWindIntensity Parms{};

	Parms.CurrentWindIntensity = CurrentWindIntensity;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_AmbienceArea.BP_AmbienceArea_C.UserConstructionScript
// (Event, Public, HasDefaults, BlueprintCallable, BlueprintEvent)

void ABP_AmbienceArea_C::UserConstructionScript()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_AmbienceArea_C", "UserConstructionScript");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_AmbienceArea.BP_AmbienceArea_C.GetRelativeDistanceFromCenter
// (Event, Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure, Const)
// Parameters:
// struct FVector                          Location                                               (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    bInnerOnly                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// bool                                    bClamped                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

float ABP_AmbienceArea_C::GetRelativeDistanceFromCenter(const struct FVector& Location, bool bInnerOnly, bool bClamped) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_AmbienceArea_C", "GetRelativeDistanceFromCenter");

	Params::BP_AmbienceArea_C_GetRelativeDistanceFromCenter Parms{};

	Parms.Location = std::move(Location);
	Parms.bInnerOnly = bInnerOnly;
	Parms.bClamped = bClamped;

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}

}

