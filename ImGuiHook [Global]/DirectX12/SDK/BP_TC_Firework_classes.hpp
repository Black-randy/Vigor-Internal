#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_TC_Firework

#include "Basic.hpp"

#include "CoreUObject_structs.hpp"
#include "Engine_structs.hpp"
#include "BP_PlacableTrap_Base_classes.hpp"
#include "PhysicsCore_structs.hpp"


namespace SDK
{

// BlueprintGeneratedClass BP_TC_Firework.BP_TC_Firework_C
// 0x0030 (0x0720 - 0x06F0)
class ABP_TC_Firework_C final : public ABP_PlacableTrap_Base_C
{
public:
	uint8                                         Pad_6E1[0x7];                                      // 0x06E1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FPointerToUberGraphFrame               UberGraphFrame_BP_TC_Firework_C;                   // 0x06E8(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	struct FTimerHandle                           TimerHandle;                                       // 0x06F0(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	struct FVector                                HitPoint;                                          // 0x06F8(0x000C)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_704[0x4];                                      // 0x0704(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FVector>                        StartLocationToCheckIfRoomForFireworks;            // 0x0708(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	bool                                          CanBeLaunched;                                     // 0x0718(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)

public:
	void ExecuteUbergraph_BP_TC_Firework(int32 EntryPoint);
	void ReceiveEndPlay(EEndPlayReason EndPlayReason);
	void ComputeLineTracers();
	void ReceiveBeginPlay();
	void Trap_Placement_CanBePlaced(const struct FHitResult& Hit, float MaxZNormal, TArray<TSoftClassPtr<class UClass>>& ActorsThatBlocksThePlacement, TArray<EPhysicalSurface>& SurfacesThatBlocksThePlacement, bool Trap_CanBePlacedInWater, bool Trap_CanBePlacedVertically, bool* CanBePlaced);
	void Trap_Hologram_Show();
	void Trap_Hologram_Hide();
	void ThrowLinetracers(TArray<struct FVector>& Array, bool* CanBeLaunched_0);
	void PlacementIsCorrect(bool* CanBePlaced);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BP_TC_Firework_C">();
	}
	static class ABP_TC_Firework_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<ABP_TC_Firework_C>();
	}
};
static_assert(alignof(ABP_TC_Firework_C) == 0x000010, "Wrong alignment on ABP_TC_Firework_C");
static_assert(sizeof(ABP_TC_Firework_C) == 0x000720, "Wrong size on ABP_TC_Firework_C");
static_assert(offsetof(ABP_TC_Firework_C, UberGraphFrame_BP_TC_Firework_C) == 0x0006E8, "Member 'ABP_TC_Firework_C::UberGraphFrame_BP_TC_Firework_C' has a wrong offset!");
static_assert(offsetof(ABP_TC_Firework_C, TimerHandle) == 0x0006F0, "Member 'ABP_TC_Firework_C::TimerHandle' has a wrong offset!");
static_assert(offsetof(ABP_TC_Firework_C, HitPoint) == 0x0006F8, "Member 'ABP_TC_Firework_C::HitPoint' has a wrong offset!");
static_assert(offsetof(ABP_TC_Firework_C, StartLocationToCheckIfRoomForFireworks) == 0x000708, "Member 'ABP_TC_Firework_C::StartLocationToCheckIfRoomForFireworks' has a wrong offset!");
static_assert(offsetof(ABP_TC_Firework_C, CanBeLaunched) == 0x000718, "Member 'ABP_TC_Firework_C::CanBeLaunched' has a wrong offset!");

}

