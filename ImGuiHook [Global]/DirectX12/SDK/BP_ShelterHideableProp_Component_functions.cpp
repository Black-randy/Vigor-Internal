#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_ShelterHideableProp_Component

#include "Basic.hpp"

#include "BP_ShelterHideableProp_Component_classes.hpp"
#include "BP_ShelterHideableProp_Component_parameters.hpp"


namespace SDK
{

// Function BP_ShelterHideableProp_Component.BP_ShelterHideableProp_Component_C.ExecuteUbergraph_BP_ShelterHideableProp_Component
// (Final, UbergraphFunction, HasDefaults)
// Parameters:
// int32                                   EntryPoint                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_ShelterHideableProp_Component_C::ExecuteUbergraph_BP_ShelterHideableProp_Component(int32 EntryPoint)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_ShelterHideableProp_Component_C", "ExecuteUbergraph_BP_ShelterHideableProp_Component");

	Params::BP_ShelterHideableProp_Component_C_ExecuteUbergraph_BP_ShelterHideableProp_Component Parms{};

	Parms.EntryPoint = EntryPoint;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_ShelterHideableProp_Component.BP_ShelterHideableProp_Component_C.DisableOverlapsEvent
// (BlueprintCallable, BlueprintEvent)

void UBP_ShelterHideableProp_Component_C::DisableOverlapsEvent()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_ShelterHideableProp_Component_C", "DisableOverlapsEvent");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_ShelterHideableProp_Component.BP_ShelterHideableProp_Component_C.EnableOverlapsForTime
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// float                                   Time                                                   (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_ShelterHideableProp_Component_C::EnableOverlapsForTime(float Time)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_ShelterHideableProp_Component_C", "EnableOverlapsForTime");

	Params::BP_ShelterHideableProp_Component_C_EnableOverlapsForTime Parms{};

	Parms.Time = Time;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_ShelterHideableProp_Component.BP_ShelterHideableProp_Component_C.SetVisibility
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    bNewVisibility                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void UBP_ShelterHideableProp_Component_C::SetVisibility(bool bNewVisibility)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_ShelterHideableProp_Component_C", "SetVisibility");

	Params::BP_ShelterHideableProp_Component_C_SetVisibility Parms{};

	Parms.bNewVisibility = bNewVisibility;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_ShelterHideableProp_Component.BP_ShelterHideableProp_Component_C.Test Owner for Collisions with Posters
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// class UPrimitiveComponent*              OptionalPrimitive                                      (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    Overlaps                                               (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void UBP_ShelterHideableProp_Component_C::Test_Owner_for_Collisions_with_Posters(class UPrimitiveComponent* OptionalPrimitive, bool* Overlaps)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_ShelterHideableProp_Component_C", "Test Owner for Collisions with Posters");

	Params::BP_ShelterHideableProp_Component_C_Test_Owner_for_Collisions_with_Posters Parms{};

	Parms.OptionalPrimitive = OptionalPrimitive;

	UObject::ProcessEvent(Func, &Parms);

	if (Overlaps != nullptr)
		*Overlaps = Parms.Overlaps;
}

}

