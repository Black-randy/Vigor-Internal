#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_GMComponent_ADM_Base

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "BP_GameModeComponent_Base_classes.hpp"


namespace SDK
{

// BlueprintGeneratedClass BP_GMComponent_ADM_Base.BP_GMComponent_ADM_Base_C
// 0x0080 (0x0138 - 0x00B8)
#pragma pack(push, 0x1)
class alignas(0x08) UBP_GMComponent_ADM_Base_C : public UBP_GameModeComponent_Base_C
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame_BP_GMComponent_ADM_Base_C;          // 0x00B8(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class UBP_GSComponent_ADM_C*                  Game_State_Component;                              // 0x00C0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<class UBP_PCComponent_ADM_C*>          Player_Controller_Components;                      // 0x00C8(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance, ContainsInstancedReference)
	class UClass*                                 Game_State_Component_Class;                        // 0x00D8(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UClass*                                 Player_Controller_Component_Class;                 // 0x00E0(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UClass*                                 Debug_UI_Screen_Class;                             // 0x00E8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FString                                 Module_Name;                                       // 0x00F0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash)
	class FText                                   Module_Description;                                // 0x0100(0x0018)(Edit, BlueprintVisible)
	bool                                          Bindings_Initialization_Complete;                  // 0x0118(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          Module_Initialization_Complete;                    // 0x0119(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_11A[0x6];                                      // 0x011A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class ABP_PlayerController_AirDropModular_C*> Player_Initializations_in_Progress;                // 0x0120(0x0010)(Edit, BlueprintVisible, DisableEditOnTemplate, DisableEditOnInstance)
	int32                                         Module_ID;                                         // 0x0130(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

public:
	void ExecuteUbergraph_BP_GMComponent_ADM_Base(int32 EntryPoint);
	void Player_Logging_Out(class ABP_PlayerController_AirDropModular_C* Exiting_Controller);
	void Player_Logged_In(class ABP_PlayerController_AirDropModular_C* New_Controller);
	void Initialize_Component();
	void ReceiveEndPlay(EEndPlayReason EndPlayReason);
	void ReceiveBeginPlay();
	void Hide_Passive_UI();
	void Show_Passive_UI();
	void Flash_Debug_UI_Tab_Labels(int32 Number_of_Flashes, const struct FLinearColor& Flash_Label_Color);
	void Player_Closed_Debug_UI(class ABP_PlayerController_AirDropModular_C* Player_Controller);
	void Player_Opened_Debug_UI(class ABP_PlayerController_AirDropModular_C* Player_Controller);
	void Game_Mode_Toggled(bool Game_Mode_Is_Running);
	void Create_PCComponent_for_Player_Controller(class ABP_PlayerController_AirDropModular_C* Controller, class UBP_PCComponent_ADM_C** Player_Controller_Component);
	void Get_PCComponent_for_Player_Controller(class ABP_PlayerController_AirDropModular_C* Player_Controller, class UBP_PCComponent_ADM_C** Player_Controller_Component, bool* Found);
	void Initialize_Bindings(bool* Success);
	void Create_GSComponent_for_Game_State(class ABP_GameState_AirDropModular_C* Game_State, class UBP_GSComponent_ADM_C** Game_State_Component_0);
	void Is_Player_Winner(class ABP_PlayerController_AirDropModular_C* Player_Controller, bool* Player_Is_Winner, bool* Output_is_Valid);
	void Get_PCComponents_for_Player_Controllers(TArray<class ABP_PlayerController_AirDropModular_C*>& Player_Controllers, TArray<class UBP_PCComponent_ADM_C*>* Player_Controller_Component);
	void Ready_To_Start_Match(bool* Return_Value);
	void Get_Rewards_For_Player(class ABP_PlayerController_AirDropModular_C* Player_Controller, TArray<class FString>* Rewards);
	void Is_Initialization_Successful(bool* IsInitialized);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BP_GMComponent_ADM_Base_C">();
	}
	static class UBP_GMComponent_ADM_Base_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UBP_GMComponent_ADM_Base_C>();
	}
};
#pragma pack(pop)
static_assert(alignof(UBP_GMComponent_ADM_Base_C) == 0x000008, "Wrong alignment on UBP_GMComponent_ADM_Base_C");
static_assert(sizeof(UBP_GMComponent_ADM_Base_C) == 0x000138, "Wrong size on UBP_GMComponent_ADM_Base_C");
static_assert(offsetof(UBP_GMComponent_ADM_Base_C, UberGraphFrame_BP_GMComponent_ADM_Base_C) == 0x0000B8, "Member 'UBP_GMComponent_ADM_Base_C::UberGraphFrame_BP_GMComponent_ADM_Base_C' has a wrong offset!");
static_assert(offsetof(UBP_GMComponent_ADM_Base_C, Game_State_Component) == 0x0000C0, "Member 'UBP_GMComponent_ADM_Base_C::Game_State_Component' has a wrong offset!");
static_assert(offsetof(UBP_GMComponent_ADM_Base_C, Player_Controller_Components) == 0x0000C8, "Member 'UBP_GMComponent_ADM_Base_C::Player_Controller_Components' has a wrong offset!");
static_assert(offsetof(UBP_GMComponent_ADM_Base_C, Game_State_Component_Class) == 0x0000D8, "Member 'UBP_GMComponent_ADM_Base_C::Game_State_Component_Class' has a wrong offset!");
static_assert(offsetof(UBP_GMComponent_ADM_Base_C, Player_Controller_Component_Class) == 0x0000E0, "Member 'UBP_GMComponent_ADM_Base_C::Player_Controller_Component_Class' has a wrong offset!");
static_assert(offsetof(UBP_GMComponent_ADM_Base_C, Debug_UI_Screen_Class) == 0x0000E8, "Member 'UBP_GMComponent_ADM_Base_C::Debug_UI_Screen_Class' has a wrong offset!");
static_assert(offsetof(UBP_GMComponent_ADM_Base_C, Module_Name) == 0x0000F0, "Member 'UBP_GMComponent_ADM_Base_C::Module_Name' has a wrong offset!");
static_assert(offsetof(UBP_GMComponent_ADM_Base_C, Module_Description) == 0x000100, "Member 'UBP_GMComponent_ADM_Base_C::Module_Description' has a wrong offset!");
static_assert(offsetof(UBP_GMComponent_ADM_Base_C, Bindings_Initialization_Complete) == 0x000118, "Member 'UBP_GMComponent_ADM_Base_C::Bindings_Initialization_Complete' has a wrong offset!");
static_assert(offsetof(UBP_GMComponent_ADM_Base_C, Module_Initialization_Complete) == 0x000119, "Member 'UBP_GMComponent_ADM_Base_C::Module_Initialization_Complete' has a wrong offset!");
static_assert(offsetof(UBP_GMComponent_ADM_Base_C, Player_Initializations_in_Progress) == 0x000120, "Member 'UBP_GMComponent_ADM_Base_C::Player_Initializations_in_Progress' has a wrong offset!");
static_assert(offsetof(UBP_GMComponent_ADM_Base_C, Module_ID) == 0x000130, "Member 'UBP_GMComponent_ADM_Base_C::Module_ID' has a wrong offset!");

}

