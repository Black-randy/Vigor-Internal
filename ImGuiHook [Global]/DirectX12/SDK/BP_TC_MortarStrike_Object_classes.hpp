#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_TC_MortarStrike_Object

#include "Basic.hpp"

#include "BP_PlacableTrap_Object_Base_classes.hpp"
#include "Engine_structs.hpp"
#include "CoreUObject_structs.hpp"
#include "PhysicsCore_structs.hpp"


namespace SDK
{

// BlueprintGeneratedClass BP_TC_MortarStrike_Object.BP_TC_MortarStrike_Object_C
// 0x00F8 (0x0560 - 0x0468)
class ABP_TC_MortarStrike_Object_C final : public ABP_PlacableTrap_Object_Base_C
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame_BP_TC_MortarStrike_Object_C;        // 0x0468(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class ULethalItemComponent*                   LethalItem;                                        // 0x0470(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	float                                         Explosion_Radius;                                  // 0x0478(0x0004)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Explosion_Damage;                                  // 0x047C(0x0004)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Target_was_hit;                                    // 0x0480(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_481[0x3];                                      // 0x0481(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FHitResult                             Hit_actor;                                         // 0x0484(0x008C)(Edit, BlueprintVisible, DisableEditOnInstance, IsPlainOldData, NoDestructor, ContainsInstancedReference)
	struct FVector2D                              Mortar_Strike_Delay_Between_Explosions;            // 0x0510(0x0008)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Mortar_Strike_Shells_Left;                         // 0x0518(0x0004)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_51C[0x4];                                      // 0x051C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TSoftObjectPtr<class USoundBase>              Mortar_Strike_Explosion_Sound;                     // 0x0520(0x0028)(Edit, BlueprintVisible, Net, DisableEditOnInstance, HasGetValueTypeHash)
	float                                         Mortar_Strike_Max_Range;                           // 0x0548(0x0004)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_54C[0x4];                                      // 0x054C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class ABP_MortarStrikeShell_C*>        Fired_shels;                                       // 0x0550(0x0010)(Edit, BlueprintVisible, DisableEditOnTemplate, DisableEditOnInstance)

public:
	void ExecuteUbergraph_BP_TC_MortarStrike_Object(int32 EntryPoint);
	void Fire_Mortar_Shell();
	void Set_up_variables_from_item(float Explosion_Damage_0, float Explosion_Radius_0, const struct FVector2D& Mortar_Delay_Between_Explosions, float Mortar_Max_Range, int32 Mortar_Shells_Left, TSoftObjectPtr<class USoundBase> Explosion_Sound);
	void Get_Explosion_Location(bool* Success, struct FVector* Location);
	void Get_Hit_Actors(const struct FVector& Location);
	void Trap_Despawn();
	void Trap_GotHit(float Damage, class AController* PlayerControllerThatHitTheTrap, bool Delayed_Trigger);
	void Trap_Phase_Activated();

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BP_TC_MortarStrike_Object_C">();
	}
	static class ABP_TC_MortarStrike_Object_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<ABP_TC_MortarStrike_Object_C>();
	}
};
static_assert(alignof(ABP_TC_MortarStrike_Object_C) == 0x000008, "Wrong alignment on ABP_TC_MortarStrike_Object_C");
static_assert(sizeof(ABP_TC_MortarStrike_Object_C) == 0x000560, "Wrong size on ABP_TC_MortarStrike_Object_C");
static_assert(offsetof(ABP_TC_MortarStrike_Object_C, UberGraphFrame_BP_TC_MortarStrike_Object_C) == 0x000468, "Member 'ABP_TC_MortarStrike_Object_C::UberGraphFrame_BP_TC_MortarStrike_Object_C' has a wrong offset!");
static_assert(offsetof(ABP_TC_MortarStrike_Object_C, LethalItem) == 0x000470, "Member 'ABP_TC_MortarStrike_Object_C::LethalItem' has a wrong offset!");
static_assert(offsetof(ABP_TC_MortarStrike_Object_C, Explosion_Radius) == 0x000478, "Member 'ABP_TC_MortarStrike_Object_C::Explosion_Radius' has a wrong offset!");
static_assert(offsetof(ABP_TC_MortarStrike_Object_C, Explosion_Damage) == 0x00047C, "Member 'ABP_TC_MortarStrike_Object_C::Explosion_Damage' has a wrong offset!");
static_assert(offsetof(ABP_TC_MortarStrike_Object_C, Target_was_hit) == 0x000480, "Member 'ABP_TC_MortarStrike_Object_C::Target_was_hit' has a wrong offset!");
static_assert(offsetof(ABP_TC_MortarStrike_Object_C, Hit_actor) == 0x000484, "Member 'ABP_TC_MortarStrike_Object_C::Hit_actor' has a wrong offset!");
static_assert(offsetof(ABP_TC_MortarStrike_Object_C, Mortar_Strike_Delay_Between_Explosions) == 0x000510, "Member 'ABP_TC_MortarStrike_Object_C::Mortar_Strike_Delay_Between_Explosions' has a wrong offset!");
static_assert(offsetof(ABP_TC_MortarStrike_Object_C, Mortar_Strike_Shells_Left) == 0x000518, "Member 'ABP_TC_MortarStrike_Object_C::Mortar_Strike_Shells_Left' has a wrong offset!");
static_assert(offsetof(ABP_TC_MortarStrike_Object_C, Mortar_Strike_Explosion_Sound) == 0x000520, "Member 'ABP_TC_MortarStrike_Object_C::Mortar_Strike_Explosion_Sound' has a wrong offset!");
static_assert(offsetof(ABP_TC_MortarStrike_Object_C, Mortar_Strike_Max_Range) == 0x000548, "Member 'ABP_TC_MortarStrike_Object_C::Mortar_Strike_Max_Range' has a wrong offset!");
static_assert(offsetof(ABP_TC_MortarStrike_Object_C, Fired_shels) == 0x000550, "Member 'ABP_TC_MortarStrike_Object_C::Fired_shels' has a wrong offset!");

}

