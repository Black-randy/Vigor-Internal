#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: UI_WeaponInfo

#include "Basic.hpp"

#include "Flame_structs.hpp"
#include "Flame_classes.hpp"
#include "Engine_structs.hpp"


namespace SDK
{

// WidgetBlueprintGeneratedClass UI_WeaponInfo.UI_WeaponInfo_C
// 0x0070 (0x0328 - 0x02B8)
class UUI_WeaponInfo_C final : public UFlameWidget
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x02B8(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class UWidgetAnimation*                       FadeWeaponInfo;                                    // 0x02C0(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, RepSkip, NoDestructor, HasGetValueTypeHash)
	class UCanvasPanel*                           CanvasPanel_0;                                     // 0x02C8(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UImage*                                 ImageFireMode;                                     // 0x02D0(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UImage*                                 ImageWeapon;                                       // 0x02D8(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UTextBlock*                             TextAmmo;                                          // 0x02E0(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UTextBlock*                             TextAmmoSeparator;                                 // 0x02E8(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UTextBlock*                             TextMagazines;                                     // 0x02F0(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	bool                                          ShowPermanently;                                   // 0x02F8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          IsWeaponInfoVisible;                               // 0x02F9(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_2FA[0x2];                                      // 0x02FA(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         LastShotTime;                                      // 0x02FC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         LastFireModeChange;                                // 0x0300(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         HideWeaponInfoAfter;                               // 0x0304(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AWeapon*                                LastWeapon;                                        // 0x0308(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         LastWeaponChangeTime;                              // 0x0310(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_314[0x4];                                      // 0x0314(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UMaterialInstanceDynamic*               HudIconMaterialInstance;                           // 0x0318(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UMaterialInstanceDynamic*               HudIconMaterialInstanceFireMode;                   // 0x0320(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

public:
	void ExecuteUbergraph_UI_WeaponInfo(int32 EntryPoint);
	void OnGameSettingsChanged(const struct FGameSaveSettings& GameSettings);
	void PlayerFiredFullAuto();
	void PlayerChangedFireMode();
	void PlayerFiredSingle();
	void Tick(const struct FGeometry& MyGeometry, float InDeltaTime);
	void Construct();
	class FText GetTextAmmoText();
	class FText GetTextMagazinesText();
	void SetWeaponInfoVisibility();
	struct FSlateBrush GetFireModeImage();
	void UpdateShowPermanentlyFromSave(const struct FGameSaveSettings& GameSettings);
	void IsShooting(bool* IsShootingOut);
	void IsChangingFireMode(bool* IsChangingFMOut);
	bool HasChangedWeapon(class AWeapon* CurrentWeapon);
	struct FSlateBrush GetWeaponImage();

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"UI_WeaponInfo_C">();
	}
	static class UUI_WeaponInfo_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UUI_WeaponInfo_C>();
	}
};
static_assert(alignof(UUI_WeaponInfo_C) == 0x000008, "Wrong alignment on UUI_WeaponInfo_C");
static_assert(sizeof(UUI_WeaponInfo_C) == 0x000328, "Wrong size on UUI_WeaponInfo_C");
static_assert(offsetof(UUI_WeaponInfo_C, UberGraphFrame) == 0x0002B8, "Member 'UUI_WeaponInfo_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(UUI_WeaponInfo_C, FadeWeaponInfo) == 0x0002C0, "Member 'UUI_WeaponInfo_C::FadeWeaponInfo' has a wrong offset!");
static_assert(offsetof(UUI_WeaponInfo_C, CanvasPanel_0) == 0x0002C8, "Member 'UUI_WeaponInfo_C::CanvasPanel_0' has a wrong offset!");
static_assert(offsetof(UUI_WeaponInfo_C, ImageFireMode) == 0x0002D0, "Member 'UUI_WeaponInfo_C::ImageFireMode' has a wrong offset!");
static_assert(offsetof(UUI_WeaponInfo_C, ImageWeapon) == 0x0002D8, "Member 'UUI_WeaponInfo_C::ImageWeapon' has a wrong offset!");
static_assert(offsetof(UUI_WeaponInfo_C, TextAmmo) == 0x0002E0, "Member 'UUI_WeaponInfo_C::TextAmmo' has a wrong offset!");
static_assert(offsetof(UUI_WeaponInfo_C, TextAmmoSeparator) == 0x0002E8, "Member 'UUI_WeaponInfo_C::TextAmmoSeparator' has a wrong offset!");
static_assert(offsetof(UUI_WeaponInfo_C, TextMagazines) == 0x0002F0, "Member 'UUI_WeaponInfo_C::TextMagazines' has a wrong offset!");
static_assert(offsetof(UUI_WeaponInfo_C, ShowPermanently) == 0x0002F8, "Member 'UUI_WeaponInfo_C::ShowPermanently' has a wrong offset!");
static_assert(offsetof(UUI_WeaponInfo_C, IsWeaponInfoVisible) == 0x0002F9, "Member 'UUI_WeaponInfo_C::IsWeaponInfoVisible' has a wrong offset!");
static_assert(offsetof(UUI_WeaponInfo_C, LastShotTime) == 0x0002FC, "Member 'UUI_WeaponInfo_C::LastShotTime' has a wrong offset!");
static_assert(offsetof(UUI_WeaponInfo_C, LastFireModeChange) == 0x000300, "Member 'UUI_WeaponInfo_C::LastFireModeChange' has a wrong offset!");
static_assert(offsetof(UUI_WeaponInfo_C, HideWeaponInfoAfter) == 0x000304, "Member 'UUI_WeaponInfo_C::HideWeaponInfoAfter' has a wrong offset!");
static_assert(offsetof(UUI_WeaponInfo_C, LastWeapon) == 0x000308, "Member 'UUI_WeaponInfo_C::LastWeapon' has a wrong offset!");
static_assert(offsetof(UUI_WeaponInfo_C, LastWeaponChangeTime) == 0x000310, "Member 'UUI_WeaponInfo_C::LastWeaponChangeTime' has a wrong offset!");
static_assert(offsetof(UUI_WeaponInfo_C, HudIconMaterialInstance) == 0x000318, "Member 'UUI_WeaponInfo_C::HudIconMaterialInstance' has a wrong offset!");
static_assert(offsetof(UUI_WeaponInfo_C, HudIconMaterialInstanceFireMode) == 0x000320, "Member 'UUI_WeaponInfo_C::HudIconMaterialInstanceFireMode' has a wrong offset!");

}

