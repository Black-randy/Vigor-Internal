#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_TutorialAI_Character

#include "Basic.hpp"

#include "Flame_structs.hpp"
#include "Flame_classes.hpp"
#include "Engine_structs.hpp"
#include "PhysicsCore_structs.hpp"


namespace SDK
{

// BlueprintGeneratedClass BP_TutorialAI_Character.BP_TutorialAI_Character_C
// 0x0020 (0x0C80 - 0x0C60)
class ABP_TutorialAI_Character_C final : public AHumanAICharacter
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x0C60(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class UPawnSensingComponent*                  PawnSensing;                                       // 0x0C68(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UClass*                                 Weapon;                                            // 0x0C70(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ETutorialAIRole                               AIRole;                                            // 0x0C78(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CloseEnoughToPlayer;                               // 0x0C79(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)

public:
	void ExecuteUbergraph_BP_TutorialAI_Character(int32 EntryPoint);
	void BeforeDied(float DamageAmount, EDamageType DamageType, class AHumanCharacter* InstigatingCharacter, TSubclassOf<class AItem> InstigatingItem, const struct FHitResult& HitResult);
	void ResetTargetHitIndicationColor();
	void OnTakeDamage(float DamageAmount, EDamageType DamageType, const class AHumanCharacter* InstigatingActor, TSubclassOf<class AItem> InstigatingItemClass, const struct FHitResultSimplified& HitOptimised, const TArray<TSubclassOf<class AItem>>& AffectedItems);
	void Die(float DamageAmount, EDamageType DamageType, class AHumanCharacter* InstigatingCharacter, TSubclassOf<class AItem> InstigatingItem, const struct FHitResult& HitResult);
	float GetSpecialDamageAmountForCharacter(const class AHumanCharacter* EnemyTakingDamage, float CurrentDamageAmount);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BP_TutorialAI_Character_C">();
	}
	static class ABP_TutorialAI_Character_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<ABP_TutorialAI_Character_C>();
	}
};
static_assert(alignof(ABP_TutorialAI_Character_C) == 0x000010, "Wrong alignment on ABP_TutorialAI_Character_C");
static_assert(sizeof(ABP_TutorialAI_Character_C) == 0x000C80, "Wrong size on ABP_TutorialAI_Character_C");
static_assert(offsetof(ABP_TutorialAI_Character_C, UberGraphFrame) == 0x000C60, "Member 'ABP_TutorialAI_Character_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(ABP_TutorialAI_Character_C, PawnSensing) == 0x000C68, "Member 'ABP_TutorialAI_Character_C::PawnSensing' has a wrong offset!");
static_assert(offsetof(ABP_TutorialAI_Character_C, Weapon) == 0x000C70, "Member 'ABP_TutorialAI_Character_C::Weapon' has a wrong offset!");
static_assert(offsetof(ABP_TutorialAI_Character_C, AIRole) == 0x000C78, "Member 'ABP_TutorialAI_Character_C::AIRole' has a wrong offset!");
static_assert(offsetof(ABP_TutorialAI_Character_C, CloseEnoughToPlayer) == 0x000C79, "Member 'ABP_TutorialAI_Character_C::CloseEnoughToPlayer' has a wrong offset!");

}

