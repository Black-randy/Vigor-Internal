#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: UI_BattlePassProgressBar

#include "Basic.hpp"

#include "Flame_classes.hpp"
#include "Engine_structs.hpp"
#include "E_BattlePassProgressBarParameter_structs.hpp"


namespace SDK
{

// WidgetBlueprintGeneratedClass UI_BattlePassProgressBar.UI_BattlePassProgressBar_C
// 0x0060 (0x0318 - 0x02B8)
class UUI_BattlePassProgressBar_C final : public UFlameWidget
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x02B8(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class UWidgetAnimation*                       ResetXP;                                           // 0x02C0(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, RepSkip, NoDestructor, HasGetValueTypeHash)
	class UWidgetAnimation*                       AnimateBoostXP;                                    // 0x02C8(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, RepSkip, NoDestructor, HasGetValueTypeHash)
	class UWidgetAnimation*                       AnimateAwardedXP;                                  // 0x02D0(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, RepSkip, NoDestructor, HasGetValueTypeHash)
	class UWidgetAnimation*                       AnimateBaseXP;                                     // 0x02D8(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, RepSkip, NoDestructor, HasGetValueTypeHash)
	class UImage*                                 HealthBackground;                                  // 0x02E0(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UProgressBar*                           LevelProgressBar;                                  // 0x02E8(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	float                                         PlaybackSpeed;                                     // 0x02F0(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Is_Level_Up;                                       // 0x02F4(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          In_Progress;                                       // 0x02F5(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_2F6[0x2];                                      // 0x02F6(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Base_XP;                                           // 0x02F8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Awarded_XP;                                        // 0x02FC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Boost_XP;                                          // 0x0300(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_304[0x4];                                      // 0x0304(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UUI_RewardScreen_BattlePass_C*          Reward_Screen;                                     // 0x0308(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UMaterialInstanceDynamic*               ProgressBarMaterial;                               // 0x0310(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

public:
	void ExecuteUbergraph_UI_BattlePassProgressBar(int32 EntryPoint);
	void Finish_Up_Progress();
	void Reset_XP_Progress();
	void XP_Progress_finished();
	void Animation_Timer(float Time);
	void EventAwardedXPFinished();
	void EventBaseXPFinished();
	void EventPlayBarAnimation(float BaseXP, float AwardedXP, float BoostXP, class UUI_RewardScreen_BattlePass_C* RewardScreen, bool IsLevelUp);
	void Set_Progress_Parameter(E_BattlePassProgressBarParameter Parameter, float Value);
	void Get_Dynamic_Material();

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"UI_BattlePassProgressBar_C">();
	}
	static class UUI_BattlePassProgressBar_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UUI_BattlePassProgressBar_C>();
	}
};
static_assert(alignof(UUI_BattlePassProgressBar_C) == 0x000008, "Wrong alignment on UUI_BattlePassProgressBar_C");
static_assert(sizeof(UUI_BattlePassProgressBar_C) == 0x000318, "Wrong size on UUI_BattlePassProgressBar_C");
static_assert(offsetof(UUI_BattlePassProgressBar_C, UberGraphFrame) == 0x0002B8, "Member 'UUI_BattlePassProgressBar_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(UUI_BattlePassProgressBar_C, ResetXP) == 0x0002C0, "Member 'UUI_BattlePassProgressBar_C::ResetXP' has a wrong offset!");
static_assert(offsetof(UUI_BattlePassProgressBar_C, AnimateBoostXP) == 0x0002C8, "Member 'UUI_BattlePassProgressBar_C::AnimateBoostXP' has a wrong offset!");
static_assert(offsetof(UUI_BattlePassProgressBar_C, AnimateAwardedXP) == 0x0002D0, "Member 'UUI_BattlePassProgressBar_C::AnimateAwardedXP' has a wrong offset!");
static_assert(offsetof(UUI_BattlePassProgressBar_C, AnimateBaseXP) == 0x0002D8, "Member 'UUI_BattlePassProgressBar_C::AnimateBaseXP' has a wrong offset!");
static_assert(offsetof(UUI_BattlePassProgressBar_C, HealthBackground) == 0x0002E0, "Member 'UUI_BattlePassProgressBar_C::HealthBackground' has a wrong offset!");
static_assert(offsetof(UUI_BattlePassProgressBar_C, LevelProgressBar) == 0x0002E8, "Member 'UUI_BattlePassProgressBar_C::LevelProgressBar' has a wrong offset!");
static_assert(offsetof(UUI_BattlePassProgressBar_C, PlaybackSpeed) == 0x0002F0, "Member 'UUI_BattlePassProgressBar_C::PlaybackSpeed' has a wrong offset!");
static_assert(offsetof(UUI_BattlePassProgressBar_C, Is_Level_Up) == 0x0002F4, "Member 'UUI_BattlePassProgressBar_C::Is_Level_Up' has a wrong offset!");
static_assert(offsetof(UUI_BattlePassProgressBar_C, In_Progress) == 0x0002F5, "Member 'UUI_BattlePassProgressBar_C::In_Progress' has a wrong offset!");
static_assert(offsetof(UUI_BattlePassProgressBar_C, Base_XP) == 0x0002F8, "Member 'UUI_BattlePassProgressBar_C::Base_XP' has a wrong offset!");
static_assert(offsetof(UUI_BattlePassProgressBar_C, Awarded_XP) == 0x0002FC, "Member 'UUI_BattlePassProgressBar_C::Awarded_XP' has a wrong offset!");
static_assert(offsetof(UUI_BattlePassProgressBar_C, Boost_XP) == 0x000300, "Member 'UUI_BattlePassProgressBar_C::Boost_XP' has a wrong offset!");
static_assert(offsetof(UUI_BattlePassProgressBar_C, Reward_Screen) == 0x000308, "Member 'UUI_BattlePassProgressBar_C::Reward_Screen' has a wrong offset!");
static_assert(offsetof(UUI_BattlePassProgressBar_C, ProgressBarMaterial) == 0x000310, "Member 'UUI_BattlePassProgressBar_C::ProgressBarMaterial' has a wrong offset!");

}

