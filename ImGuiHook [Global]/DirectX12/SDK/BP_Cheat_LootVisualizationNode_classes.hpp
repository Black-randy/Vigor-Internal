#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_Cheat_LootVisualizationNode

#include "Basic.hpp"

#include "Flame_structs.hpp"
#include "Engine_structs.hpp"
#include "Engine_classes.hpp"
#include "CoreUObject_structs.hpp"
#include "Struct_CheatLootVisualizationCommodityData_structs.hpp"
#include "E_LootVisualization_LootSourceTypes_structs.hpp"


namespace SDK
{

// BlueprintGeneratedClass BP_Cheat_LootVisualizationNode.BP_Cheat_LootVisualizationNode_C
// 0x00B8 (0x02D8 - 0x0220)
class ABP_Cheat_LootVisualizationNode_C final : public AActor
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x0220(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class USphereComponent*                       CommodityDetailsDisplayArea;                       // 0x0228(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USphereComponent*                       HUDMarkerDisplayArea;                              // 0x0230(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UStaticMeshComponent*                   LootIndicatorBeam;                                 // 0x0238(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USceneComponent*                        DefaultSceneRoot;                                  // 0x0240(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class ABP_PlayerController_Script_C*          Owning_Player_Controller;                          // 0x0248(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UUI_CheatWidget_LootVisualizationMarker_C* HUDMarkerWidget;                                   // 0x0250(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UUI_CheatWidget_LootVisualizationDetails_C* CommodityDetailsWidget;                            // 0x0258(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UTexture2D*                             MarkerIcon;                                        // 0x0260(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           HighlightColor;                                    // 0x0268(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EMapMarkerType                                MapMarkerColor;                                    // 0x0278(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_279[0x7];                                      // 0x0279(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UClass*                                 Loot_Source_Object_Class;                          // 0x0280(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash)
	class FName                                   Loot_Source_Name;                                  // 0x0288(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash)
	class FString                                 Loot_Source_Category;                              // 0x0290(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, ExposeOnSpawn, HasGetValueTypeHash)
	TArray<struct FStruct_CheatLootVisualizationCommodityData> Assigned_Commodities;                              // 0x02A0(0x0010)(Edit, BlueprintVisible, Net, ExposeOnSpawn)
	bool                                          ShouldDisplayWidgets;                              // 0x02B0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_2B1[0x3];                                      // 0x02B1(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         HUDMarkerDisplayDistance;                          // 0x02B4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CommodityDetailsDisplayDistance;                   // 0x02B8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	E_LootVisualization_LootSourceTypes           LootableType;                                      // 0x02BC(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          HUDMarkerIsInRange;                                // 0x02BD(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          CommodityDetailsIsInRange;                         // 0x02BE(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_2BF[0x1];                                      // 0x02BF(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	struct FLinearColor                           OriginalHighlighColor;                             // 0x02C0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EMapMarkerType                                OriginalMapMarkerColor;                            // 0x02D0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

public:
	void ExecuteUbergraph_BP_Cheat_LootVisualizationNode(int32 EntryPoint);
	void AddIntoCommodityList(class UClass* Item, int32 Count);
	void OnStoredWeapon(class AWeapon* Weapon);
	void OnLootedWeapon(class AWeapon* Weapon);
	void RemoveFromCommodityList(class UClass* Item, int32 Count);
	void BndEvt__CommodityDetailsDisplayArea_K2Node_ComponentBoundEvent_1_ComponentEndOverlapSignature__DelegateSignature(class UPrimitiveComponent* OverlappedComponent, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, int32 OtherBodyIndex);
	void BndEvt__CommodityDetailsDisplayArea_K2Node_ComponentBoundEvent_0_ComponentBeginOverlapSignature__DelegateSignature(class UPrimitiveComponent* OverlappedComponent, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, int32 OtherBodyIndex, bool bFromSweep, const struct FHitResult& SweepResult);
	void BndEvt__HUDMarkerDisplayRange_K2Node_ComponentBoundEvent_3_ComponentEndOverlapSignature__DelegateSignature(class UPrimitiveComponent* OverlappedComponent, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, int32 OtherBodyIndex);
	void BndEvt__HUDMarkerDisplayRange_K2Node_ComponentBoundEvent_2_ComponentBeginOverlapSignature__DelegateSignature(class UPrimitiveComponent* OverlappedComponent, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, int32 OtherBodyIndex, bool bFromSweep, const struct FHitResult& SweepResult);
	void OnLootedCommodity(TSubclassOf<class AItemForBackpack> BagItemClass, int32 Count);
	void InitializeLootingEvents();
	void ReceiveBeginPlay();
	void OnLoaded_303A9E7341428F48F05BE78AAC47A84E(class UObject* Loaded);
	void Load_Marker_Data(E_LootVisualization_LootSourceTypes* LootSourceType, struct FLinearColor* Marker_Highlight_Color, EMapMarkerType* Map_Marker_Color, TSoftObjectPtr<class UTexture2D>* Marker_Icon_Reference);
	void Update_HUD_Marker_Widget();
	void Update_Commodity_Details_Widget();
	void HideHUDMarker();
	void DisplayHUDMarker();
	void ToggleHUDMarker();
	void HideIndicatorBeam();
	void DisplayIndicatorBeam();
	void ToggleIndicatorBeam();
	void HideMapMarker();
	void DisplayMapMarker();
	void ToggleMapMarker();
	void MarkCommodityLooted(class UClass* Commodity_Class, int32 Commodity_amount);
	void GetClosestLootable(class ABP_Lootable_Base_C** Lootable);
	void CheckLootableEmpty(bool* LootableEmpty);
	void MarkNodeEmpty(bool Node_Empty);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BP_Cheat_LootVisualizationNode_C">();
	}
	static class ABP_Cheat_LootVisualizationNode_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<ABP_Cheat_LootVisualizationNode_C>();
	}
};
static_assert(alignof(ABP_Cheat_LootVisualizationNode_C) == 0x000008, "Wrong alignment on ABP_Cheat_LootVisualizationNode_C");
static_assert(sizeof(ABP_Cheat_LootVisualizationNode_C) == 0x0002D8, "Wrong size on ABP_Cheat_LootVisualizationNode_C");
static_assert(offsetof(ABP_Cheat_LootVisualizationNode_C, UberGraphFrame) == 0x000220, "Member 'ABP_Cheat_LootVisualizationNode_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(ABP_Cheat_LootVisualizationNode_C, CommodityDetailsDisplayArea) == 0x000228, "Member 'ABP_Cheat_LootVisualizationNode_C::CommodityDetailsDisplayArea' has a wrong offset!");
static_assert(offsetof(ABP_Cheat_LootVisualizationNode_C, HUDMarkerDisplayArea) == 0x000230, "Member 'ABP_Cheat_LootVisualizationNode_C::HUDMarkerDisplayArea' has a wrong offset!");
static_assert(offsetof(ABP_Cheat_LootVisualizationNode_C, LootIndicatorBeam) == 0x000238, "Member 'ABP_Cheat_LootVisualizationNode_C::LootIndicatorBeam' has a wrong offset!");
static_assert(offsetof(ABP_Cheat_LootVisualizationNode_C, DefaultSceneRoot) == 0x000240, "Member 'ABP_Cheat_LootVisualizationNode_C::DefaultSceneRoot' has a wrong offset!");
static_assert(offsetof(ABP_Cheat_LootVisualizationNode_C, Owning_Player_Controller) == 0x000248, "Member 'ABP_Cheat_LootVisualizationNode_C::Owning_Player_Controller' has a wrong offset!");
static_assert(offsetof(ABP_Cheat_LootVisualizationNode_C, HUDMarkerWidget) == 0x000250, "Member 'ABP_Cheat_LootVisualizationNode_C::HUDMarkerWidget' has a wrong offset!");
static_assert(offsetof(ABP_Cheat_LootVisualizationNode_C, CommodityDetailsWidget) == 0x000258, "Member 'ABP_Cheat_LootVisualizationNode_C::CommodityDetailsWidget' has a wrong offset!");
static_assert(offsetof(ABP_Cheat_LootVisualizationNode_C, MarkerIcon) == 0x000260, "Member 'ABP_Cheat_LootVisualizationNode_C::MarkerIcon' has a wrong offset!");
static_assert(offsetof(ABP_Cheat_LootVisualizationNode_C, HighlightColor) == 0x000268, "Member 'ABP_Cheat_LootVisualizationNode_C::HighlightColor' has a wrong offset!");
static_assert(offsetof(ABP_Cheat_LootVisualizationNode_C, MapMarkerColor) == 0x000278, "Member 'ABP_Cheat_LootVisualizationNode_C::MapMarkerColor' has a wrong offset!");
static_assert(offsetof(ABP_Cheat_LootVisualizationNode_C, Loot_Source_Object_Class) == 0x000280, "Member 'ABP_Cheat_LootVisualizationNode_C::Loot_Source_Object_Class' has a wrong offset!");
static_assert(offsetof(ABP_Cheat_LootVisualizationNode_C, Loot_Source_Name) == 0x000288, "Member 'ABP_Cheat_LootVisualizationNode_C::Loot_Source_Name' has a wrong offset!");
static_assert(offsetof(ABP_Cheat_LootVisualizationNode_C, Loot_Source_Category) == 0x000290, "Member 'ABP_Cheat_LootVisualizationNode_C::Loot_Source_Category' has a wrong offset!");
static_assert(offsetof(ABP_Cheat_LootVisualizationNode_C, Assigned_Commodities) == 0x0002A0, "Member 'ABP_Cheat_LootVisualizationNode_C::Assigned_Commodities' has a wrong offset!");
static_assert(offsetof(ABP_Cheat_LootVisualizationNode_C, ShouldDisplayWidgets) == 0x0002B0, "Member 'ABP_Cheat_LootVisualizationNode_C::ShouldDisplayWidgets' has a wrong offset!");
static_assert(offsetof(ABP_Cheat_LootVisualizationNode_C, HUDMarkerDisplayDistance) == 0x0002B4, "Member 'ABP_Cheat_LootVisualizationNode_C::HUDMarkerDisplayDistance' has a wrong offset!");
static_assert(offsetof(ABP_Cheat_LootVisualizationNode_C, CommodityDetailsDisplayDistance) == 0x0002B8, "Member 'ABP_Cheat_LootVisualizationNode_C::CommodityDetailsDisplayDistance' has a wrong offset!");
static_assert(offsetof(ABP_Cheat_LootVisualizationNode_C, LootableType) == 0x0002BC, "Member 'ABP_Cheat_LootVisualizationNode_C::LootableType' has a wrong offset!");
static_assert(offsetof(ABP_Cheat_LootVisualizationNode_C, HUDMarkerIsInRange) == 0x0002BD, "Member 'ABP_Cheat_LootVisualizationNode_C::HUDMarkerIsInRange' has a wrong offset!");
static_assert(offsetof(ABP_Cheat_LootVisualizationNode_C, CommodityDetailsIsInRange) == 0x0002BE, "Member 'ABP_Cheat_LootVisualizationNode_C::CommodityDetailsIsInRange' has a wrong offset!");
static_assert(offsetof(ABP_Cheat_LootVisualizationNode_C, OriginalHighlighColor) == 0x0002C0, "Member 'ABP_Cheat_LootVisualizationNode_C::OriginalHighlighColor' has a wrong offset!");
static_assert(offsetof(ABP_Cheat_LootVisualizationNode_C, OriginalMapMarkerColor) == 0x0002D0, "Member 'ABP_Cheat_LootVisualizationNode_C::OriginalMapMarkerColor' has a wrong offset!");

}

