#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_PlayerController

#include "Basic.hpp"

#include "InputCore_structs.hpp"
#include "CoreUObject_structs.hpp"
#include "Flame_structs.hpp"


namespace SDK::Params
{

// Function BP_PlayerController.BP_PlayerController_C.Possessed A Character__DelegateSignature
// 0x0008 (0x0008 - 0x0000)
struct BP_PlayerController_C_Possessed_A_Character__DelegateSignature final
{
public:
	class ABP_Character_C*                        Possessed_Character;                               // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_PlayerController_C_Possessed_A_Character__DelegateSignature) == 0x000008, "Wrong alignment on BP_PlayerController_C_Possessed_A_Character__DelegateSignature");
static_assert(sizeof(BP_PlayerController_C_Possessed_A_Character__DelegateSignature) == 0x000008, "Wrong size on BP_PlayerController_C_Possessed_A_Character__DelegateSignature");
static_assert(offsetof(BP_PlayerController_C_Possessed_A_Character__DelegateSignature, Possessed_Character) == 0x000000, "Member 'BP_PlayerController_C_Possessed_A_Character__DelegateSignature::Possessed_Character' has a wrong offset!");

// Function BP_PlayerController.BP_PlayerController_C.ExecuteUbergraph_BP_PlayerController
// 0x01A8 (0x01A8 - 0x0000)
struct BP_PlayerController_C_ExecuteUbergraph_BP_PlayerController final
{
public:
	int32                                         EntryPoint;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class ABP_Character_C*                        K2Node_CustomEvent_Possessed_Character_1;          // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UUI_EncounterTextNotification_C*        CallFunc_Create_ReturnValue;                       // 0x0010(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class USceneComponent*                        K2Node_Event_AttachComponent;                      // 0x0018(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_Event_Size;                                 // 0x0020(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Conv_FloatToVector_ReturnValue;           // 0x0024(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UNotificationSystem*                    CallFunc_GetNotificationSystem_ReturnValue;        // 0x0030(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UParticleSystemComponent*               CallFunc_SpawnEmitterAttached_ReturnValue;         // 0x0038(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FText                                   K2Node_CustomEvent_Message;                        // 0x0040(0x0018)()
	TSoftObjectPtr<class USoundBase>              K2Node_CustomEvent_Optional2D_Sound;               // 0x0058(0x0028)(HasGetValueTypeHash)
	struct FNotificationParams                    K2Node_MakeStruct_NotificationParams;              // 0x0080(0x000C)(NoDestructor)
	bool                                          CallFunc_IsValidSoftObjectReference_ReturnValue;   // 0x008C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_8D[0x3];                                       // 0x008D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class AHumanPlayerCharacter*                  CallFunc_GetHumanCharacter_ReturnValue;            // 0x0090(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0098(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsPlayerInteracting_ReturnValue;          // 0x0099(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_GetIsDead_ReturnValue;                    // 0x009A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_9B[0x5];                                       // 0x009B(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   K2Node_Event_Message;                              // 0x00A0(0x0018)()
	TSoftObjectPtr<class USoundBase>              K2Node_Event_Optional2D_Sound;                     // 0x00B8(0x0028)(HasGetValueTypeHash)
	bool                                          CallFunc_BooleanOR_ReturnValue;                    // 0x00E0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_E1[0x7];                                       // 0x00E1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FKey                                   K2Node_InputActionEvent_Key;                       // 0x00E8(0x0018)(HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue_1;                    // 0x0100(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_101[0x7];                                      // 0x0101(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class ABP_Character_C*                        K2Node_CustomEvent_Possessed_Character;            // 0x0108(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AHUD*                                   CallFunc_GetHUD_ReturnValue;                       // 0x0110(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ABP_FlameHUD_C*                         K2Node_DynamicCast_AsBP_Flame_HUD;                 // 0x0118(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0120(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_121[0x7];                                      // 0x0121(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UFlameAssetManager*                     CallFunc_GetAssetManagerSystem_ReturnValue;        // 0x0128(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UObject*                                CallFunc_LoadSoftReference_ReturnValue;            // 0x0130(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class USoundBase*                             K2Node_DynamicCast_AsSound_Base;                   // 0x0138(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess_1;                     // 0x0140(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_141[0x7];                                      // 0x0141(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FKey                                   K2Node_InputActionEvent_Key_1;                     // 0x0148(0x0018)(HasGetValueTypeHash)
	bool                                          CallFunc_IsPlatformGroupDesktop_ReturnValue;       // 0x0160(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_161[0x7];                                      // 0x0161(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FKey                                   K2Node_InputActionEvent_Key_2;                     // 0x0168(0x0018)(HasGetValueTypeHash)
	struct FKey                                   K2Node_InputActionEvent_Key_3;                     // 0x0180(0x0018)(HasGetValueTypeHash)
	bool                                          CallFunc_IsPlatformGroupDesktop_ReturnValue_1;     // 0x0198(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_199[0x3];                                      // 0x0199(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         K2Node_InputAxisEvent_AxisValue;                   // 0x019C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_FloatFloat_ReturnValue;              // 0x01A0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Greater_FloatFloat_ReturnValue;           // 0x01A1(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_PlayerController_C_ExecuteUbergraph_BP_PlayerController) == 0x000008, "Wrong alignment on BP_PlayerController_C_ExecuteUbergraph_BP_PlayerController");
static_assert(sizeof(BP_PlayerController_C_ExecuteUbergraph_BP_PlayerController) == 0x0001A8, "Wrong size on BP_PlayerController_C_ExecuteUbergraph_BP_PlayerController");
static_assert(offsetof(BP_PlayerController_C_ExecuteUbergraph_BP_PlayerController, EntryPoint) == 0x000000, "Member 'BP_PlayerController_C_ExecuteUbergraph_BP_PlayerController::EntryPoint' has a wrong offset!");
static_assert(offsetof(BP_PlayerController_C_ExecuteUbergraph_BP_PlayerController, K2Node_CustomEvent_Possessed_Character_1) == 0x000008, "Member 'BP_PlayerController_C_ExecuteUbergraph_BP_PlayerController::K2Node_CustomEvent_Possessed_Character_1' has a wrong offset!");
static_assert(offsetof(BP_PlayerController_C_ExecuteUbergraph_BP_PlayerController, CallFunc_Create_ReturnValue) == 0x000010, "Member 'BP_PlayerController_C_ExecuteUbergraph_BP_PlayerController::CallFunc_Create_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerController_C_ExecuteUbergraph_BP_PlayerController, K2Node_Event_AttachComponent) == 0x000018, "Member 'BP_PlayerController_C_ExecuteUbergraph_BP_PlayerController::K2Node_Event_AttachComponent' has a wrong offset!");
static_assert(offsetof(BP_PlayerController_C_ExecuteUbergraph_BP_PlayerController, K2Node_Event_Size) == 0x000020, "Member 'BP_PlayerController_C_ExecuteUbergraph_BP_PlayerController::K2Node_Event_Size' has a wrong offset!");
static_assert(offsetof(BP_PlayerController_C_ExecuteUbergraph_BP_PlayerController, CallFunc_Conv_FloatToVector_ReturnValue) == 0x000024, "Member 'BP_PlayerController_C_ExecuteUbergraph_BP_PlayerController::CallFunc_Conv_FloatToVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerController_C_ExecuteUbergraph_BP_PlayerController, CallFunc_GetNotificationSystem_ReturnValue) == 0x000030, "Member 'BP_PlayerController_C_ExecuteUbergraph_BP_PlayerController::CallFunc_GetNotificationSystem_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerController_C_ExecuteUbergraph_BP_PlayerController, CallFunc_SpawnEmitterAttached_ReturnValue) == 0x000038, "Member 'BP_PlayerController_C_ExecuteUbergraph_BP_PlayerController::CallFunc_SpawnEmitterAttached_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerController_C_ExecuteUbergraph_BP_PlayerController, K2Node_CustomEvent_Message) == 0x000040, "Member 'BP_PlayerController_C_ExecuteUbergraph_BP_PlayerController::K2Node_CustomEvent_Message' has a wrong offset!");
static_assert(offsetof(BP_PlayerController_C_ExecuteUbergraph_BP_PlayerController, K2Node_CustomEvent_Optional2D_Sound) == 0x000058, "Member 'BP_PlayerController_C_ExecuteUbergraph_BP_PlayerController::K2Node_CustomEvent_Optional2D_Sound' has a wrong offset!");
static_assert(offsetof(BP_PlayerController_C_ExecuteUbergraph_BP_PlayerController, K2Node_MakeStruct_NotificationParams) == 0x000080, "Member 'BP_PlayerController_C_ExecuteUbergraph_BP_PlayerController::K2Node_MakeStruct_NotificationParams' has a wrong offset!");
static_assert(offsetof(BP_PlayerController_C_ExecuteUbergraph_BP_PlayerController, CallFunc_IsValidSoftObjectReference_ReturnValue) == 0x00008C, "Member 'BP_PlayerController_C_ExecuteUbergraph_BP_PlayerController::CallFunc_IsValidSoftObjectReference_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerController_C_ExecuteUbergraph_BP_PlayerController, CallFunc_GetHumanCharacter_ReturnValue) == 0x000090, "Member 'BP_PlayerController_C_ExecuteUbergraph_BP_PlayerController::CallFunc_GetHumanCharacter_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerController_C_ExecuteUbergraph_BP_PlayerController, CallFunc_IsValid_ReturnValue) == 0x000098, "Member 'BP_PlayerController_C_ExecuteUbergraph_BP_PlayerController::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerController_C_ExecuteUbergraph_BP_PlayerController, CallFunc_IsPlayerInteracting_ReturnValue) == 0x000099, "Member 'BP_PlayerController_C_ExecuteUbergraph_BP_PlayerController::CallFunc_IsPlayerInteracting_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerController_C_ExecuteUbergraph_BP_PlayerController, CallFunc_GetIsDead_ReturnValue) == 0x00009A, "Member 'BP_PlayerController_C_ExecuteUbergraph_BP_PlayerController::CallFunc_GetIsDead_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerController_C_ExecuteUbergraph_BP_PlayerController, K2Node_Event_Message) == 0x0000A0, "Member 'BP_PlayerController_C_ExecuteUbergraph_BP_PlayerController::K2Node_Event_Message' has a wrong offset!");
static_assert(offsetof(BP_PlayerController_C_ExecuteUbergraph_BP_PlayerController, K2Node_Event_Optional2D_Sound) == 0x0000B8, "Member 'BP_PlayerController_C_ExecuteUbergraph_BP_PlayerController::K2Node_Event_Optional2D_Sound' has a wrong offset!");
static_assert(offsetof(BP_PlayerController_C_ExecuteUbergraph_BP_PlayerController, CallFunc_BooleanOR_ReturnValue) == 0x0000E0, "Member 'BP_PlayerController_C_ExecuteUbergraph_BP_PlayerController::CallFunc_BooleanOR_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerController_C_ExecuteUbergraph_BP_PlayerController, K2Node_InputActionEvent_Key) == 0x0000E8, "Member 'BP_PlayerController_C_ExecuteUbergraph_BP_PlayerController::K2Node_InputActionEvent_Key' has a wrong offset!");
static_assert(offsetof(BP_PlayerController_C_ExecuteUbergraph_BP_PlayerController, CallFunc_IsValid_ReturnValue_1) == 0x000100, "Member 'BP_PlayerController_C_ExecuteUbergraph_BP_PlayerController::CallFunc_IsValid_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_PlayerController_C_ExecuteUbergraph_BP_PlayerController, K2Node_CustomEvent_Possessed_Character) == 0x000108, "Member 'BP_PlayerController_C_ExecuteUbergraph_BP_PlayerController::K2Node_CustomEvent_Possessed_Character' has a wrong offset!");
static_assert(offsetof(BP_PlayerController_C_ExecuteUbergraph_BP_PlayerController, CallFunc_GetHUD_ReturnValue) == 0x000110, "Member 'BP_PlayerController_C_ExecuteUbergraph_BP_PlayerController::CallFunc_GetHUD_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerController_C_ExecuteUbergraph_BP_PlayerController, K2Node_DynamicCast_AsBP_Flame_HUD) == 0x000118, "Member 'BP_PlayerController_C_ExecuteUbergraph_BP_PlayerController::K2Node_DynamicCast_AsBP_Flame_HUD' has a wrong offset!");
static_assert(offsetof(BP_PlayerController_C_ExecuteUbergraph_BP_PlayerController, K2Node_DynamicCast_bSuccess) == 0x000120, "Member 'BP_PlayerController_C_ExecuteUbergraph_BP_PlayerController::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(BP_PlayerController_C_ExecuteUbergraph_BP_PlayerController, CallFunc_GetAssetManagerSystem_ReturnValue) == 0x000128, "Member 'BP_PlayerController_C_ExecuteUbergraph_BP_PlayerController::CallFunc_GetAssetManagerSystem_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerController_C_ExecuteUbergraph_BP_PlayerController, CallFunc_LoadSoftReference_ReturnValue) == 0x000130, "Member 'BP_PlayerController_C_ExecuteUbergraph_BP_PlayerController::CallFunc_LoadSoftReference_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerController_C_ExecuteUbergraph_BP_PlayerController, K2Node_DynamicCast_AsSound_Base) == 0x000138, "Member 'BP_PlayerController_C_ExecuteUbergraph_BP_PlayerController::K2Node_DynamicCast_AsSound_Base' has a wrong offset!");
static_assert(offsetof(BP_PlayerController_C_ExecuteUbergraph_BP_PlayerController, K2Node_DynamicCast_bSuccess_1) == 0x000140, "Member 'BP_PlayerController_C_ExecuteUbergraph_BP_PlayerController::K2Node_DynamicCast_bSuccess_1' has a wrong offset!");
static_assert(offsetof(BP_PlayerController_C_ExecuteUbergraph_BP_PlayerController, K2Node_InputActionEvent_Key_1) == 0x000148, "Member 'BP_PlayerController_C_ExecuteUbergraph_BP_PlayerController::K2Node_InputActionEvent_Key_1' has a wrong offset!");
static_assert(offsetof(BP_PlayerController_C_ExecuteUbergraph_BP_PlayerController, CallFunc_IsPlatformGroupDesktop_ReturnValue) == 0x000160, "Member 'BP_PlayerController_C_ExecuteUbergraph_BP_PlayerController::CallFunc_IsPlatformGroupDesktop_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerController_C_ExecuteUbergraph_BP_PlayerController, K2Node_InputActionEvent_Key_2) == 0x000168, "Member 'BP_PlayerController_C_ExecuteUbergraph_BP_PlayerController::K2Node_InputActionEvent_Key_2' has a wrong offset!");
static_assert(offsetof(BP_PlayerController_C_ExecuteUbergraph_BP_PlayerController, K2Node_InputActionEvent_Key_3) == 0x000180, "Member 'BP_PlayerController_C_ExecuteUbergraph_BP_PlayerController::K2Node_InputActionEvent_Key_3' has a wrong offset!");
static_assert(offsetof(BP_PlayerController_C_ExecuteUbergraph_BP_PlayerController, CallFunc_IsPlatformGroupDesktop_ReturnValue_1) == 0x000198, "Member 'BP_PlayerController_C_ExecuteUbergraph_BP_PlayerController::CallFunc_IsPlatformGroupDesktop_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_PlayerController_C_ExecuteUbergraph_BP_PlayerController, K2Node_InputAxisEvent_AxisValue) == 0x00019C, "Member 'BP_PlayerController_C_ExecuteUbergraph_BP_PlayerController::K2Node_InputAxisEvent_AxisValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerController_C_ExecuteUbergraph_BP_PlayerController, CallFunc_Less_FloatFloat_ReturnValue) == 0x0001A0, "Member 'BP_PlayerController_C_ExecuteUbergraph_BP_PlayerController::CallFunc_Less_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerController_C_ExecuteUbergraph_BP_PlayerController, CallFunc_Greater_FloatFloat_ReturnValue) == 0x0001A1, "Member 'BP_PlayerController_C_ExecuteUbergraph_BP_PlayerController::CallFunc_Greater_FloatFloat_ReturnValue' has a wrong offset!");

// Function BP_PlayerController.BP_PlayerController_C.InpAxisEvt_MouseWheel_K2Node_InputAxisEvent_0
// 0x0004 (0x0004 - 0x0000)
struct BP_PlayerController_C_InpAxisEvt_MouseWheel_K2Node_InputAxisEvent_0 final
{
public:
	float                                         AxisValue;                                         // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_PlayerController_C_InpAxisEvt_MouseWheel_K2Node_InputAxisEvent_0) == 0x000004, "Wrong alignment on BP_PlayerController_C_InpAxisEvt_MouseWheel_K2Node_InputAxisEvent_0");
static_assert(sizeof(BP_PlayerController_C_InpAxisEvt_MouseWheel_K2Node_InputAxisEvent_0) == 0x000004, "Wrong size on BP_PlayerController_C_InpAxisEvt_MouseWheel_K2Node_InputAxisEvent_0");
static_assert(offsetof(BP_PlayerController_C_InpAxisEvt_MouseWheel_K2Node_InputAxisEvent_0, AxisValue) == 0x000000, "Member 'BP_PlayerController_C_InpAxisEvt_MouseWheel_K2Node_InputAxisEvent_0::AxisValue' has a wrong offset!");

// Function BP_PlayerController.BP_PlayerController_C.AddUserMessage
// 0x0040 (0x0040 - 0x0000)
struct BP_PlayerController_C_AddUserMessage final
{
public:
	class FText                                   Message;                                           // 0x0000(0x0018)(BlueprintVisible, BlueprintReadOnly, Parm)
	TSoftObjectPtr<class USoundBase>              Optional2D_Sound;                                  // 0x0018(0x0028)(BlueprintVisible, BlueprintReadOnly, Parm, HasGetValueTypeHash)
};
static_assert(alignof(BP_PlayerController_C_AddUserMessage) == 0x000008, "Wrong alignment on BP_PlayerController_C_AddUserMessage");
static_assert(sizeof(BP_PlayerController_C_AddUserMessage) == 0x000040, "Wrong size on BP_PlayerController_C_AddUserMessage");
static_assert(offsetof(BP_PlayerController_C_AddUserMessage, Message) == 0x000000, "Member 'BP_PlayerController_C_AddUserMessage::Message' has a wrong offset!");
static_assert(offsetof(BP_PlayerController_C_AddUserMessage, Optional2D_Sound) == 0x000018, "Member 'BP_PlayerController_C_AddUserMessage::Optional2D_Sound' has a wrong offset!");

// Function BP_PlayerController.BP_PlayerController_C.CreateGlint
// 0x0010 (0x0010 - 0x0000)
struct BP_PlayerController_C_CreateGlint final
{
public:
	class USceneComponent*                        AttachComponent;                                   // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Size;                                              // 0x0008(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_PlayerController_C_CreateGlint) == 0x000008, "Wrong alignment on BP_PlayerController_C_CreateGlint");
static_assert(sizeof(BP_PlayerController_C_CreateGlint) == 0x000010, "Wrong size on BP_PlayerController_C_CreateGlint");
static_assert(offsetof(BP_PlayerController_C_CreateGlint, AttachComponent) == 0x000000, "Member 'BP_PlayerController_C_CreateGlint::AttachComponent' has a wrong offset!");
static_assert(offsetof(BP_PlayerController_C_CreateGlint, Size) == 0x000008, "Member 'BP_PlayerController_C_CreateGlint::Size' has a wrong offset!");

// Function BP_PlayerController.BP_PlayerController_C.Possessed
// 0x0008 (0x0008 - 0x0000)
struct BP_PlayerController_C_Possessed final
{
public:
	class ABP_Character_C*                        Possessed_Character;                               // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_PlayerController_C_Possessed) == 0x000008, "Wrong alignment on BP_PlayerController_C_Possessed");
static_assert(sizeof(BP_PlayerController_C_Possessed) == 0x000008, "Wrong size on BP_PlayerController_C_Possessed");
static_assert(offsetof(BP_PlayerController_C_Possessed, Possessed_Character) == 0x000000, "Member 'BP_PlayerController_C_Possessed::Possessed_Character' has a wrong offset!");

// Function BP_PlayerController.BP_PlayerController_C.Add User Message
// 0x0040 (0x0040 - 0x0000)
struct BP_PlayerController_C_Add_User_Message final
{
public:
	class FText                                   Message;                                           // 0x0000(0x0018)(BlueprintVisible, BlueprintReadOnly, Parm)
	TSoftObjectPtr<class USoundBase>              Optional2D_Sound;                                  // 0x0018(0x0028)(BlueprintVisible, BlueprintReadOnly, Parm, HasGetValueTypeHash)
};
static_assert(alignof(BP_PlayerController_C_Add_User_Message) == 0x000008, "Wrong alignment on BP_PlayerController_C_Add_User_Message");
static_assert(sizeof(BP_PlayerController_C_Add_User_Message) == 0x000040, "Wrong size on BP_PlayerController_C_Add_User_Message");
static_assert(offsetof(BP_PlayerController_C_Add_User_Message, Message) == 0x000000, "Member 'BP_PlayerController_C_Add_User_Message::Message' has a wrong offset!");
static_assert(offsetof(BP_PlayerController_C_Add_User_Message, Optional2D_Sound) == 0x000018, "Member 'BP_PlayerController_C_Add_User_Message::Optional2D_Sound' has a wrong offset!");

// Function BP_PlayerController.BP_PlayerController_C.PossessedServer
// 0x0008 (0x0008 - 0x0000)
struct BP_PlayerController_C_PossessedServer final
{
public:
	class ABP_Character_C*                        Possessed_Character;                               // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_PlayerController_C_PossessedServer) == 0x000008, "Wrong alignment on BP_PlayerController_C_PossessedServer");
static_assert(sizeof(BP_PlayerController_C_PossessedServer) == 0x000008, "Wrong size on BP_PlayerController_C_PossessedServer");
static_assert(offsetof(BP_PlayerController_C_PossessedServer, Possessed_Character) == 0x000000, "Member 'BP_PlayerController_C_PossessedServer::Possessed_Character' has a wrong offset!");

// Function BP_PlayerController.BP_PlayerController_C.InpActEvt_SecondaryWeaponTwo_K2Node_InputActionEvent_0
// 0x0018 (0x0018 - 0x0000)
struct BP_PlayerController_C_InpActEvt_SecondaryWeaponTwo_K2Node_InputActionEvent_0 final
{
public:
	struct FKey                                   Key;                                               // 0x0000(0x0018)(BlueprintVisible, BlueprintReadOnly, Parm, HasGetValueTypeHash)
};
static_assert(alignof(BP_PlayerController_C_InpActEvt_SecondaryWeaponTwo_K2Node_InputActionEvent_0) == 0x000008, "Wrong alignment on BP_PlayerController_C_InpActEvt_SecondaryWeaponTwo_K2Node_InputActionEvent_0");
static_assert(sizeof(BP_PlayerController_C_InpActEvt_SecondaryWeaponTwo_K2Node_InputActionEvent_0) == 0x000018, "Wrong size on BP_PlayerController_C_InpActEvt_SecondaryWeaponTwo_K2Node_InputActionEvent_0");
static_assert(offsetof(BP_PlayerController_C_InpActEvt_SecondaryWeaponTwo_K2Node_InputActionEvent_0, Key) == 0x000000, "Member 'BP_PlayerController_C_InpActEvt_SecondaryWeaponTwo_K2Node_InputActionEvent_0::Key' has a wrong offset!");

// Function BP_PlayerController.BP_PlayerController_C.InpActEvt_SecondaryWeaponOne_K2Node_InputActionEvent_1
// 0x0018 (0x0018 - 0x0000)
struct BP_PlayerController_C_InpActEvt_SecondaryWeaponOne_K2Node_InputActionEvent_1 final
{
public:
	struct FKey                                   Key;                                               // 0x0000(0x0018)(BlueprintVisible, BlueprintReadOnly, Parm, HasGetValueTypeHash)
};
static_assert(alignof(BP_PlayerController_C_InpActEvt_SecondaryWeaponOne_K2Node_InputActionEvent_1) == 0x000008, "Wrong alignment on BP_PlayerController_C_InpActEvt_SecondaryWeaponOne_K2Node_InputActionEvent_1");
static_assert(sizeof(BP_PlayerController_C_InpActEvt_SecondaryWeaponOne_K2Node_InputActionEvent_1) == 0x000018, "Wrong size on BP_PlayerController_C_InpActEvt_SecondaryWeaponOne_K2Node_InputActionEvent_1");
static_assert(offsetof(BP_PlayerController_C_InpActEvt_SecondaryWeaponOne_K2Node_InputActionEvent_1, Key) == 0x000000, "Member 'BP_PlayerController_C_InpActEvt_SecondaryWeaponOne_K2Node_InputActionEvent_1::Key' has a wrong offset!");

// Function BP_PlayerController.BP_PlayerController_C.InpActEvt_PrimaryWeaponTwo_K2Node_InputActionEvent_2
// 0x0018 (0x0018 - 0x0000)
struct BP_PlayerController_C_InpActEvt_PrimaryWeaponTwo_K2Node_InputActionEvent_2 final
{
public:
	struct FKey                                   Key;                                               // 0x0000(0x0018)(BlueprintVisible, BlueprintReadOnly, Parm, HasGetValueTypeHash)
};
static_assert(alignof(BP_PlayerController_C_InpActEvt_PrimaryWeaponTwo_K2Node_InputActionEvent_2) == 0x000008, "Wrong alignment on BP_PlayerController_C_InpActEvt_PrimaryWeaponTwo_K2Node_InputActionEvent_2");
static_assert(sizeof(BP_PlayerController_C_InpActEvt_PrimaryWeaponTwo_K2Node_InputActionEvent_2) == 0x000018, "Wrong size on BP_PlayerController_C_InpActEvt_PrimaryWeaponTwo_K2Node_InputActionEvent_2");
static_assert(offsetof(BP_PlayerController_C_InpActEvt_PrimaryWeaponTwo_K2Node_InputActionEvent_2, Key) == 0x000000, "Member 'BP_PlayerController_C_InpActEvt_PrimaryWeaponTwo_K2Node_InputActionEvent_2::Key' has a wrong offset!");

// Function BP_PlayerController.BP_PlayerController_C.InpActEvt_PrimaryWeaponOne_K2Node_InputActionEvent_3
// 0x0018 (0x0018 - 0x0000)
struct BP_PlayerController_C_InpActEvt_PrimaryWeaponOne_K2Node_InputActionEvent_3 final
{
public:
	struct FKey                                   Key;                                               // 0x0000(0x0018)(BlueprintVisible, BlueprintReadOnly, Parm, HasGetValueTypeHash)
};
static_assert(alignof(BP_PlayerController_C_InpActEvt_PrimaryWeaponOne_K2Node_InputActionEvent_3) == 0x000008, "Wrong alignment on BP_PlayerController_C_InpActEvt_PrimaryWeaponOne_K2Node_InputActionEvent_3");
static_assert(sizeof(BP_PlayerController_C_InpActEvt_PrimaryWeaponOne_K2Node_InputActionEvent_3) == 0x000018, "Wrong size on BP_PlayerController_C_InpActEvt_PrimaryWeaponOne_K2Node_InputActionEvent_3");
static_assert(offsetof(BP_PlayerController_C_InpActEvt_PrimaryWeaponOne_K2Node_InputActionEvent_3, Key) == 0x000000, "Member 'BP_PlayerController_C_InpActEvt_PrimaryWeaponOne_K2Node_InputActionEvent_3::Key' has a wrong offset!");

// Function BP_PlayerController.BP_PlayerController_C.SetWeatherManagerRef
// 0x0010 (0x0010 - 0x0000)
struct BP_PlayerController_C_SetWeatherManagerRef final
{
public:
	class ABP_WeatherManager_C*                   CallFunc_GetActorOfClass_ReturnValue;              // 0x0000(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0008(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_PlayerController_C_SetWeatherManagerRef) == 0x000008, "Wrong alignment on BP_PlayerController_C_SetWeatherManagerRef");
static_assert(sizeof(BP_PlayerController_C_SetWeatherManagerRef) == 0x000010, "Wrong size on BP_PlayerController_C_SetWeatherManagerRef");
static_assert(offsetof(BP_PlayerController_C_SetWeatherManagerRef, CallFunc_GetActorOfClass_ReturnValue) == 0x000000, "Member 'BP_PlayerController_C_SetWeatherManagerRef::CallFunc_GetActorOfClass_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerController_C_SetWeatherManagerRef, CallFunc_IsValid_ReturnValue) == 0x000008, "Member 'BP_PlayerController_C_SetWeatherManagerRef::CallFunc_IsValid_ReturnValue' has a wrong offset!");

// Function BP_PlayerController.BP_PlayerController_C.ChangeWeaponWheel
// 0x0090 (0x0090 - 0x0000)
struct BP_PlayerController_C_ChangeWeaponWheel final
{
public:
	bool                                          DoesIncrement;                                     // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UUI_SelectionWheel_C*                   SelectionWheelUI;                                  // 0x0008(0x0008)(Edit, BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x0014(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Array_Index_Variable;                     // 0x0018(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_SwitchInteger_CmpSuccess;                   // 0x001C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_1D[0x3];                                       // 0x001D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Temp_int_Array_Index_Variable_1;                   // 0x0020(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0024(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_25[0x3];                                       // 0x0025(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UWheelSegment*                          CallFunc_Array_Get_Item;                           // 0x0028(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_IntInt_ReturnValue;            // 0x0030(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_31[0x7];                                       // 0x0031(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UUI_WeaponSegment_C*                    K2Node_DynamicCast_AsUI_Weapon_Segment;            // 0x0038(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0040(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_41[0x3];                                       // 0x0041(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x0044(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable_1;                  // 0x0048(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x004C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_4D[0x3];                                       // 0x004D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Add_IntInt_ReturnValue_1;                 // 0x0050(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Subtract_IntInt_ReturnValue;              // 0x0054(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue_2;                 // 0x0058(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_5C[0x4];                                       // 0x005C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class UUI_SelectionWheel_C*>           CallFunc_GetAllWidgetsOfClass_FoundWidgets;        // 0x0060(0x0010)(ReferenceParm, ContainsInstancedReference)
	int32                                         CallFunc_SelectInt_ReturnValue;                    // 0x0070(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_74[0x4];                                       // 0x0074(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UUI_SelectionWheel_C*                   CallFunc_Array_Get_Item_1;                         // 0x0078(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue_1;                // 0x0080(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Greater_IntInt_ReturnValue;               // 0x0081(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_82[0x2];                                       // 0x0082(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Array_Length_ReturnValue_1;               // 0x0084(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsPlatformGroupDesktop_ReturnValue;       // 0x0088(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Less_IntInt_ReturnValue_2;                // 0x0089(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_PlayerController_C_ChangeWeaponWheel) == 0x000008, "Wrong alignment on BP_PlayerController_C_ChangeWeaponWheel");
static_assert(sizeof(BP_PlayerController_C_ChangeWeaponWheel) == 0x000090, "Wrong size on BP_PlayerController_C_ChangeWeaponWheel");
static_assert(offsetof(BP_PlayerController_C_ChangeWeaponWheel, DoesIncrement) == 0x000000, "Member 'BP_PlayerController_C_ChangeWeaponWheel::DoesIncrement' has a wrong offset!");
static_assert(offsetof(BP_PlayerController_C_ChangeWeaponWheel, SelectionWheelUI) == 0x000008, "Member 'BP_PlayerController_C_ChangeWeaponWheel::SelectionWheelUI' has a wrong offset!");
static_assert(offsetof(BP_PlayerController_C_ChangeWeaponWheel, Temp_int_Loop_Counter_Variable) == 0x000010, "Member 'BP_PlayerController_C_ChangeWeaponWheel::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(BP_PlayerController_C_ChangeWeaponWheel, CallFunc_Add_IntInt_ReturnValue) == 0x000014, "Member 'BP_PlayerController_C_ChangeWeaponWheel::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerController_C_ChangeWeaponWheel, Temp_int_Array_Index_Variable) == 0x000018, "Member 'BP_PlayerController_C_ChangeWeaponWheel::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(BP_PlayerController_C_ChangeWeaponWheel, K2Node_SwitchInteger_CmpSuccess) == 0x00001C, "Member 'BP_PlayerController_C_ChangeWeaponWheel::K2Node_SwitchInteger_CmpSuccess' has a wrong offset!");
static_assert(offsetof(BP_PlayerController_C_ChangeWeaponWheel, Temp_int_Array_Index_Variable_1) == 0x000020, "Member 'BP_PlayerController_C_ChangeWeaponWheel::Temp_int_Array_Index_Variable_1' has a wrong offset!");
static_assert(offsetof(BP_PlayerController_C_ChangeWeaponWheel, CallFunc_IsValid_ReturnValue) == 0x000024, "Member 'BP_PlayerController_C_ChangeWeaponWheel::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerController_C_ChangeWeaponWheel, CallFunc_Array_Get_Item) == 0x000028, "Member 'BP_PlayerController_C_ChangeWeaponWheel::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(BP_PlayerController_C_ChangeWeaponWheel, CallFunc_EqualEqual_IntInt_ReturnValue) == 0x000030, "Member 'BP_PlayerController_C_ChangeWeaponWheel::CallFunc_EqualEqual_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerController_C_ChangeWeaponWheel, K2Node_DynamicCast_AsUI_Weapon_Segment) == 0x000038, "Member 'BP_PlayerController_C_ChangeWeaponWheel::K2Node_DynamicCast_AsUI_Weapon_Segment' has a wrong offset!");
static_assert(offsetof(BP_PlayerController_C_ChangeWeaponWheel, K2Node_DynamicCast_bSuccess) == 0x000040, "Member 'BP_PlayerController_C_ChangeWeaponWheel::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(BP_PlayerController_C_ChangeWeaponWheel, CallFunc_Array_Length_ReturnValue) == 0x000044, "Member 'BP_PlayerController_C_ChangeWeaponWheel::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerController_C_ChangeWeaponWheel, Temp_int_Loop_Counter_Variable_1) == 0x000048, "Member 'BP_PlayerController_C_ChangeWeaponWheel::Temp_int_Loop_Counter_Variable_1' has a wrong offset!");
static_assert(offsetof(BP_PlayerController_C_ChangeWeaponWheel, CallFunc_Less_IntInt_ReturnValue) == 0x00004C, "Member 'BP_PlayerController_C_ChangeWeaponWheel::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerController_C_ChangeWeaponWheel, CallFunc_Add_IntInt_ReturnValue_1) == 0x000050, "Member 'BP_PlayerController_C_ChangeWeaponWheel::CallFunc_Add_IntInt_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_PlayerController_C_ChangeWeaponWheel, CallFunc_Subtract_IntInt_ReturnValue) == 0x000054, "Member 'BP_PlayerController_C_ChangeWeaponWheel::CallFunc_Subtract_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerController_C_ChangeWeaponWheel, CallFunc_Add_IntInt_ReturnValue_2) == 0x000058, "Member 'BP_PlayerController_C_ChangeWeaponWheel::CallFunc_Add_IntInt_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BP_PlayerController_C_ChangeWeaponWheel, CallFunc_GetAllWidgetsOfClass_FoundWidgets) == 0x000060, "Member 'BP_PlayerController_C_ChangeWeaponWheel::CallFunc_GetAllWidgetsOfClass_FoundWidgets' has a wrong offset!");
static_assert(offsetof(BP_PlayerController_C_ChangeWeaponWheel, CallFunc_SelectInt_ReturnValue) == 0x000070, "Member 'BP_PlayerController_C_ChangeWeaponWheel::CallFunc_SelectInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerController_C_ChangeWeaponWheel, CallFunc_Array_Get_Item_1) == 0x000078, "Member 'BP_PlayerController_C_ChangeWeaponWheel::CallFunc_Array_Get_Item_1' has a wrong offset!");
static_assert(offsetof(BP_PlayerController_C_ChangeWeaponWheel, CallFunc_Less_IntInt_ReturnValue_1) == 0x000080, "Member 'BP_PlayerController_C_ChangeWeaponWheel::CallFunc_Less_IntInt_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_PlayerController_C_ChangeWeaponWheel, CallFunc_Greater_IntInt_ReturnValue) == 0x000081, "Member 'BP_PlayerController_C_ChangeWeaponWheel::CallFunc_Greater_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerController_C_ChangeWeaponWheel, CallFunc_Array_Length_ReturnValue_1) == 0x000084, "Member 'BP_PlayerController_C_ChangeWeaponWheel::CallFunc_Array_Length_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_PlayerController_C_ChangeWeaponWheel, CallFunc_IsPlatformGroupDesktop_ReturnValue) == 0x000088, "Member 'BP_PlayerController_C_ChangeWeaponWheel::CallFunc_IsPlatformGroupDesktop_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerController_C_ChangeWeaponWheel, CallFunc_Less_IntInt_ReturnValue_2) == 0x000089, "Member 'BP_PlayerController_C_ChangeWeaponWheel::CallFunc_Less_IntInt_ReturnValue_2' has a wrong offset!");

// Function BP_PlayerController.BP_PlayerController_C.BPI_RegisterMapMarkedActor
// 0x0018 (0x0018 - 0x0000)
struct BP_PlayerController_C_BPI_RegisterMapMarkedActor final
{
public:
	class UBP_MapMarkerComponent_C*               MarkerComponent;                                   // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bValid;                                            // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   UsedTag;                                           // 0x000C(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_PlayerController_C_BPI_RegisterMapMarkedActor) == 0x000008, "Wrong alignment on BP_PlayerController_C_BPI_RegisterMapMarkedActor");
static_assert(sizeof(BP_PlayerController_C_BPI_RegisterMapMarkedActor) == 0x000018, "Wrong size on BP_PlayerController_C_BPI_RegisterMapMarkedActor");
static_assert(offsetof(BP_PlayerController_C_BPI_RegisterMapMarkedActor, MarkerComponent) == 0x000000, "Member 'BP_PlayerController_C_BPI_RegisterMapMarkedActor::MarkerComponent' has a wrong offset!");
static_assert(offsetof(BP_PlayerController_C_BPI_RegisterMapMarkedActor, bValid) == 0x000008, "Member 'BP_PlayerController_C_BPI_RegisterMapMarkedActor::bValid' has a wrong offset!");
static_assert(offsetof(BP_PlayerController_C_BPI_RegisterMapMarkedActor, UsedTag) == 0x00000C, "Member 'BP_PlayerController_C_BPI_RegisterMapMarkedActor::UsedTag' has a wrong offset!");

// Function BP_PlayerController.BP_PlayerController_C.BPI_UnRegisterMapMarkedActor
// 0x0010 (0x0010 - 0x0000)
struct BP_PlayerController_C_BPI_UnRegisterMapMarkedActor final
{
public:
	class UBP_MapMarkerComponent_C*               MarkerComponent;                                   // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Success;                                           // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_PlayerController_C_BPI_UnRegisterMapMarkedActor) == 0x000008, "Wrong alignment on BP_PlayerController_C_BPI_UnRegisterMapMarkedActor");
static_assert(sizeof(BP_PlayerController_C_BPI_UnRegisterMapMarkedActor) == 0x000010, "Wrong size on BP_PlayerController_C_BPI_UnRegisterMapMarkedActor");
static_assert(offsetof(BP_PlayerController_C_BPI_UnRegisterMapMarkedActor, MarkerComponent) == 0x000000, "Member 'BP_PlayerController_C_BPI_UnRegisterMapMarkedActor::MarkerComponent' has a wrong offset!");
static_assert(offsetof(BP_PlayerController_C_BPI_UnRegisterMapMarkedActor, Success) == 0x000008, "Member 'BP_PlayerController_C_BPI_UnRegisterMapMarkedActor::Success' has a wrong offset!");

// Function BP_PlayerController.BP_PlayerController_C.GetLobbyStateAndTimes
// 0x000C (0x000C - 0x0000)
struct BP_PlayerController_C_GetLobbyStateAndTimes final
{
public:
	bool                                          Valid;                                             // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          HasMatchStarted;                                   // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          DelayedMatchStartIsInEffect;                       // 0x0002(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_3[0x1];                                        // 0x0003(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         RemainingTimeToEncounter;                          // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         TotalTimeToEncounter;                              // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_PlayerController_C_GetLobbyStateAndTimes) == 0x000004, "Wrong alignment on BP_PlayerController_C_GetLobbyStateAndTimes");
static_assert(sizeof(BP_PlayerController_C_GetLobbyStateAndTimes) == 0x00000C, "Wrong size on BP_PlayerController_C_GetLobbyStateAndTimes");
static_assert(offsetof(BP_PlayerController_C_GetLobbyStateAndTimes, Valid) == 0x000000, "Member 'BP_PlayerController_C_GetLobbyStateAndTimes::Valid' has a wrong offset!");
static_assert(offsetof(BP_PlayerController_C_GetLobbyStateAndTimes, HasMatchStarted) == 0x000001, "Member 'BP_PlayerController_C_GetLobbyStateAndTimes::HasMatchStarted' has a wrong offset!");
static_assert(offsetof(BP_PlayerController_C_GetLobbyStateAndTimes, DelayedMatchStartIsInEffect) == 0x000002, "Member 'BP_PlayerController_C_GetLobbyStateAndTimes::DelayedMatchStartIsInEffect' has a wrong offset!");
static_assert(offsetof(BP_PlayerController_C_GetLobbyStateAndTimes, RemainingTimeToEncounter) == 0x000004, "Member 'BP_PlayerController_C_GetLobbyStateAndTimes::RemainingTimeToEncounter' has a wrong offset!");
static_assert(offsetof(BP_PlayerController_C_GetLobbyStateAndTimes, TotalTimeToEncounter) == 0x000008, "Member 'BP_PlayerController_C_GetLobbyStateAndTimes::TotalTimeToEncounter' has a wrong offset!");

// Function BP_PlayerController.BP_PlayerController_C.GetGroupID
// 0x0018 (0x0018 - 0x0000)
struct BP_PlayerController_C_GetGroupID final
{
public:
	bool                                          Valid;                                             // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 GroupId;                                           // 0x0008(0x0010)(Parm, OutParm, ZeroConstructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_PlayerController_C_GetGroupID) == 0x000008, "Wrong alignment on BP_PlayerController_C_GetGroupID");
static_assert(sizeof(BP_PlayerController_C_GetGroupID) == 0x000018, "Wrong size on BP_PlayerController_C_GetGroupID");
static_assert(offsetof(BP_PlayerController_C_GetGroupID, Valid) == 0x000000, "Member 'BP_PlayerController_C_GetGroupID::Valid' has a wrong offset!");
static_assert(offsetof(BP_PlayerController_C_GetGroupID, GroupId) == 0x000008, "Member 'BP_PlayerController_C_GetGroupID::GroupId' has a wrong offset!");

// Function BP_PlayerController.BP_PlayerController_C.GetLastRespawnTime
// 0x0010 (0x0010 - 0x0000)
struct BP_PlayerController_C_GetLastRespawnTime final
{
public:
	bool                                          Valid;                                             // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FDateTime                              LastRespawnTime;                                   // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_PlayerController_C_GetLastRespawnTime) == 0x000008, "Wrong alignment on BP_PlayerController_C_GetLastRespawnTime");
static_assert(sizeof(BP_PlayerController_C_GetLastRespawnTime) == 0x000010, "Wrong size on BP_PlayerController_C_GetLastRespawnTime");
static_assert(offsetof(BP_PlayerController_C_GetLastRespawnTime, Valid) == 0x000000, "Member 'BP_PlayerController_C_GetLastRespawnTime::Valid' has a wrong offset!");
static_assert(offsetof(BP_PlayerController_C_GetLastRespawnTime, LastRespawnTime) == 0x000008, "Member 'BP_PlayerController_C_GetLastRespawnTime::LastRespawnTime' has a wrong offset!");

// Function BP_PlayerController.BP_PlayerController_C.GetLastMatchID_Info
// 0x0018 (0x0018 - 0x0000)
struct BP_PlayerController_C_GetLastMatchID_Info final
{
public:
	bool                                          Valid;                                             // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          LastMatchIDReset;                                  // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_2[0x6];                                        // 0x0002(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 MatchID_ToSave;                                    // 0x0008(0x0010)(Parm, OutParm, ZeroConstructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_PlayerController_C_GetLastMatchID_Info) == 0x000008, "Wrong alignment on BP_PlayerController_C_GetLastMatchID_Info");
static_assert(sizeof(BP_PlayerController_C_GetLastMatchID_Info) == 0x000018, "Wrong size on BP_PlayerController_C_GetLastMatchID_Info");
static_assert(offsetof(BP_PlayerController_C_GetLastMatchID_Info, Valid) == 0x000000, "Member 'BP_PlayerController_C_GetLastMatchID_Info::Valid' has a wrong offset!");
static_assert(offsetof(BP_PlayerController_C_GetLastMatchID_Info, LastMatchIDReset) == 0x000001, "Member 'BP_PlayerController_C_GetLastMatchID_Info::LastMatchIDReset' has a wrong offset!");
static_assert(offsetof(BP_PlayerController_C_GetLastMatchID_Info, MatchID_ToSave) == 0x000008, "Member 'BP_PlayerController_C_GetLastMatchID_Info::MatchID_ToSave' has a wrong offset!");

}

