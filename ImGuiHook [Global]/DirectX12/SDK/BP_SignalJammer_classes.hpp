#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_SignalJammer

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "Engine_classes.hpp"


namespace SDK
{

// BlueprintGeneratedClass BP_SignalJammer.BP_SignalJammer_C
// 0x00A8 (0x02C8 - 0x0220)
class ABP_SignalJammer_C final : public AActor
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x0220(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class UStaticMeshComponent*                   StaticMesh;                                        // 0x0228(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UBP_MapMarkerComponent_C*               BP_MapMarkerComponent;                             // 0x0230(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USphereComponent*                       Jamming_Range_Collision;                           // 0x0238(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UBP_InteractionItemComponent_C*         BP_InteractionItemComponent;                       // 0x0240(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	bool                                          IsOnCooldown;                                      // 0x0248(0x0001)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_249[0x3];                                      // 0x0249(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CooldownTime;                                      // 0x024C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         JammingMaxTime;                                    // 0x0250(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         JammerStartRange;                                  // 0x0254(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         JammerEndRange;                                    // 0x0258(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         JammedUniquePeople;                                // 0x025C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         JammedPeople;                                      // 0x0260(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_264[0x4];                                      // 0x0264(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class ABP_Character_C*>                AlreadyJammedCharacters;                           // 0x0268(0x0010)(Edit, BlueprintVisible, DisableEditOnTemplate, DisableEditOnInstance)
	class UAudioComponent*                        Ambient_Audio_Component;                           // 0x0278(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         JammingAreaDisplacementRange;                      // 0x0280(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   MarkerName;                                        // 0x0284(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         JammingTimeLeft;                                   // 0x028C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<class ABP_Character_C*>                JammedCharacters;                                  // 0x0290(0x0010)(Edit, BlueprintVisible, DisableEditOnTemplate, DisableEditOnInstance)
	struct FTimerHandle                           JammingAreaShrinkingTimer;                         // 0x02A0(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	FMulticastInlineDelegateProperty_             Signal_Jammer_Interaction_Triggered;               // 0x02A8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	class ABP_Character_Script_C*                 Last_Interacting_Character;                        // 0x02B8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Should_jam_friendly_players;                       // 0x02C0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)

public:
	void Signal_Jammer_Interaction_Triggered__DelegateSignature(class ABP_SignalJammer_C* Interacted_Signal_Jammer, class AHumanCharacter* Interacting_Character);
	void ExecuteUbergraph_BP_SignalJammer(int32 EntryPoint);
	void Jammed_Second_Passed();
	void FadeIn_Jamming_Sound();
	void FadeOut_Jamming_Sound();
	void BndEvt__BP_InteractionItemComponent_K2Node_ComponentBoundEvent_5_Interaction_Start_On_Client__DelegateSignature(class UInteractionItemComponent* Sender, class AActor* Interacting_Actor);
	void Signal_Jammer_Was_Used(class AHumanCharacter* Character_That_Used_Jammer);
	void Stop_Jamming();
	void Cooldown_Passed();
	void BndEvt__Sphere_K2Node_ComponentBoundEvent_4_ComponentEndOverlapSignature__DelegateSignature(class UPrimitiveComponent* OverlappedComponent, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, int32 OtherBodyIndex);
	void BndEvt__Sphere_K2Node_ComponentBoundEvent_3_ComponentBeginOverlapSignature__DelegateSignature(class UPrimitiveComponent* OverlappedComponent, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, int32 OtherBodyIndex, bool bFromSweep, const struct FHitResult& SweepResult);
	void Disable_Signal_Jammer_Interaction();
	void Enable_Signal_Jammer_Interaction();
	void BndEvt__BP_InteractionItemComponent_K2Node_ComponentBoundEvent_0_Interaction_Start_on_Server__DelegateSignature(class UInteractionItemComponent* Sender, class AActor* Interacting_Actor);
	void ReceiveBeginPlay();
	void UserConstructionScript();
	void Check_Jammed_Player_For_Analytics(class ABP_Character_C* Character);
	void Set_New_Jamming_Area_Location();
	void Update_Jamming_Area_Marker(class ABP_Character_C* BP_Character);
	void Update_Jamming_Area_Range();

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BP_SignalJammer_C">();
	}
	static class ABP_SignalJammer_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<ABP_SignalJammer_C>();
	}
};
static_assert(alignof(ABP_SignalJammer_C) == 0x000008, "Wrong alignment on ABP_SignalJammer_C");
static_assert(sizeof(ABP_SignalJammer_C) == 0x0002C8, "Wrong size on ABP_SignalJammer_C");
static_assert(offsetof(ABP_SignalJammer_C, UberGraphFrame) == 0x000220, "Member 'ABP_SignalJammer_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(ABP_SignalJammer_C, StaticMesh) == 0x000228, "Member 'ABP_SignalJammer_C::StaticMesh' has a wrong offset!");
static_assert(offsetof(ABP_SignalJammer_C, BP_MapMarkerComponent) == 0x000230, "Member 'ABP_SignalJammer_C::BP_MapMarkerComponent' has a wrong offset!");
static_assert(offsetof(ABP_SignalJammer_C, Jamming_Range_Collision) == 0x000238, "Member 'ABP_SignalJammer_C::Jamming_Range_Collision' has a wrong offset!");
static_assert(offsetof(ABP_SignalJammer_C, BP_InteractionItemComponent) == 0x000240, "Member 'ABP_SignalJammer_C::BP_InteractionItemComponent' has a wrong offset!");
static_assert(offsetof(ABP_SignalJammer_C, IsOnCooldown) == 0x000248, "Member 'ABP_SignalJammer_C::IsOnCooldown' has a wrong offset!");
static_assert(offsetof(ABP_SignalJammer_C, CooldownTime) == 0x00024C, "Member 'ABP_SignalJammer_C::CooldownTime' has a wrong offset!");
static_assert(offsetof(ABP_SignalJammer_C, JammingMaxTime) == 0x000250, "Member 'ABP_SignalJammer_C::JammingMaxTime' has a wrong offset!");
static_assert(offsetof(ABP_SignalJammer_C, JammerStartRange) == 0x000254, "Member 'ABP_SignalJammer_C::JammerStartRange' has a wrong offset!");
static_assert(offsetof(ABP_SignalJammer_C, JammerEndRange) == 0x000258, "Member 'ABP_SignalJammer_C::JammerEndRange' has a wrong offset!");
static_assert(offsetof(ABP_SignalJammer_C, JammedUniquePeople) == 0x00025C, "Member 'ABP_SignalJammer_C::JammedUniquePeople' has a wrong offset!");
static_assert(offsetof(ABP_SignalJammer_C, JammedPeople) == 0x000260, "Member 'ABP_SignalJammer_C::JammedPeople' has a wrong offset!");
static_assert(offsetof(ABP_SignalJammer_C, AlreadyJammedCharacters) == 0x000268, "Member 'ABP_SignalJammer_C::AlreadyJammedCharacters' has a wrong offset!");
static_assert(offsetof(ABP_SignalJammer_C, Ambient_Audio_Component) == 0x000278, "Member 'ABP_SignalJammer_C::Ambient_Audio_Component' has a wrong offset!");
static_assert(offsetof(ABP_SignalJammer_C, JammingAreaDisplacementRange) == 0x000280, "Member 'ABP_SignalJammer_C::JammingAreaDisplacementRange' has a wrong offset!");
static_assert(offsetof(ABP_SignalJammer_C, MarkerName) == 0x000284, "Member 'ABP_SignalJammer_C::MarkerName' has a wrong offset!");
static_assert(offsetof(ABP_SignalJammer_C, JammingTimeLeft) == 0x00028C, "Member 'ABP_SignalJammer_C::JammingTimeLeft' has a wrong offset!");
static_assert(offsetof(ABP_SignalJammer_C, JammedCharacters) == 0x000290, "Member 'ABP_SignalJammer_C::JammedCharacters' has a wrong offset!");
static_assert(offsetof(ABP_SignalJammer_C, JammingAreaShrinkingTimer) == 0x0002A0, "Member 'ABP_SignalJammer_C::JammingAreaShrinkingTimer' has a wrong offset!");
static_assert(offsetof(ABP_SignalJammer_C, Signal_Jammer_Interaction_Triggered) == 0x0002A8, "Member 'ABP_SignalJammer_C::Signal_Jammer_Interaction_Triggered' has a wrong offset!");
static_assert(offsetof(ABP_SignalJammer_C, Last_Interacting_Character) == 0x0002B8, "Member 'ABP_SignalJammer_C::Last_Interacting_Character' has a wrong offset!");
static_assert(offsetof(ABP_SignalJammer_C, Should_jam_friendly_players) == 0x0002C0, "Member 'ABP_SignalJammer_C::Should_jam_friendly_players' has a wrong offset!");

}

