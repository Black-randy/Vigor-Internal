#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_SeasonalChallengesReward_PreviewActor

#include "Basic.hpp"

#include "BP_SeasonalChallengesReward_PreviewActor_classes.hpp"
#include "BP_SeasonalChallengesReward_PreviewActor_parameters.hpp"


namespace SDK
{

// Function BP_SeasonalChallengesReward_PreviewActor.BP_SeasonalChallengesReward_PreviewActor_C.RewardPresentationEnded__DelegateSignature
// (Public, Delegate, BlueprintCallable, BlueprintEvent)

void ABP_SeasonalChallengesReward_PreviewActor_C::RewardPresentationEnded__DelegateSignature()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_SeasonalChallengesReward_PreviewActor_C", "RewardPresentationEnded__DelegateSignature");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_SeasonalChallengesReward_PreviewActor.BP_SeasonalChallengesReward_PreviewActor_C.ExecuteUbergraph_BP_SeasonalChallengesReward_PreviewActor
// (Final, UbergraphFunction, HasDefaults)
// Parameters:
// int32                                   EntryPoint                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_SeasonalChallengesReward_PreviewActor_C::ExecuteUbergraph_BP_SeasonalChallengesReward_PreviewActor(int32 EntryPoint)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_SeasonalChallengesReward_PreviewActor_C", "ExecuteUbergraph_BP_SeasonalChallengesReward_PreviewActor");

	Params::BP_SeasonalChallengesReward_PreviewActor_C_ExecuteUbergraph_BP_SeasonalChallengesReward_PreviewActor Parms{};

	Parms.EntryPoint = EntryPoint;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_SeasonalChallengesReward_PreviewActor.BP_SeasonalChallengesReward_PreviewActor_C.ReceiveBeginPlay
// (Event, Protected, BlueprintEvent)

void ABP_SeasonalChallengesReward_PreviewActor_C::ReceiveBeginPlay()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_SeasonalChallengesReward_PreviewActor_C", "ReceiveBeginPlay");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_SeasonalChallengesReward_PreviewActor.BP_SeasonalChallengesReward_PreviewActor_C.SetContainerBase
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// TSoftObjectPtr<class UObject>           NewContainerMesh                                       (BlueprintVisible, BlueprintReadOnly, Parm, HasGetValueTypeHash)
// bool                                    RotateAround                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ABP_SeasonalChallengesReward_PreviewActor_C::SetContainerBase(TSoftObjectPtr<class UObject> NewContainerMesh, bool RotateAround)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_SeasonalChallengesReward_PreviewActor_C", "SetContainerBase");

	Params::BP_SeasonalChallengesReward_PreviewActor_C_SetContainerBase Parms{};

	Parms.NewContainerMesh = NewContainerMesh;
	Parms.RotateAround = RotateAround;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_SeasonalChallengesReward_PreviewActor.BP_SeasonalChallengesReward_PreviewActor_C.DEBUG_PlayInEditor Event
// (BlueprintCallable, BlueprintEvent)

void ABP_SeasonalChallengesReward_PreviewActor_C::DEBUG_PlayInEditor_Event()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_SeasonalChallengesReward_PreviewActor_C", "DEBUG_PlayInEditor Event");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_SeasonalChallengesReward_PreviewActor.BP_SeasonalChallengesReward_PreviewActor_C.UpdateChallengeCountOnProgressReceive
// (HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FCloudRequestResult              RequestResult                                          (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
// struct FCloudSeasonChallengeProgressResultResponse                                               (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor)

void ABP_SeasonalChallengesReward_PreviewActor_C::UpdateChallengeCountOnProgressReceive(const struct FCloudRequestResult& RequestResult, const struct FCloudSeasonChallengeProgressResult& Response)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_SeasonalChallengesReward_PreviewActor_C", "UpdateChallengeCountOnProgressReceive");

	Params::BP_SeasonalChallengesReward_PreviewActor_C_UpdateChallengeCountOnProgressReceive Parms{};

	Parms.RequestResult = std::move(RequestResult);
	Parms.Response = std::move(Response);

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_SeasonalChallengesReward_PreviewActor.BP_SeasonalChallengesReward_PreviewActor_C.ReceiveDestroyed
// (Event, Public, BlueprintEvent)

void ABP_SeasonalChallengesReward_PreviewActor_C::ReceiveDestroyed()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_SeasonalChallengesReward_PreviewActor_C", "ReceiveDestroyed");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_SeasonalChallengesReward_PreviewActor.BP_SeasonalChallengesReward_PreviewActor_C.CheckForPropVisibilityWithTransition
// (BlueprintCallable, BlueprintEvent)

void ABP_SeasonalChallengesReward_PreviewActor_C::CheckForPropVisibilityWithTransition()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_SeasonalChallengesReward_PreviewActor_C", "CheckForPropVisibilityWithTransition");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_SeasonalChallengesReward_PreviewActor.BP_SeasonalChallengesReward_PreviewActor_C.PreviewClaimedSeasonalRewards
// (BlueprintCallable, BlueprintEvent)

void ABP_SeasonalChallengesReward_PreviewActor_C::PreviewClaimedSeasonalRewards()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_SeasonalChallengesReward_PreviewActor_C", "PreviewClaimedSeasonalRewards");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_SeasonalChallengesReward_PreviewActor.BP_SeasonalChallengesReward_PreviewActor_C.RewardAnimEnded
// (BlueprintCallable, BlueprintEvent)

void ABP_SeasonalChallengesReward_PreviewActor_C::RewardAnimEnded()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_SeasonalChallengesReward_PreviewActor_C", "RewardAnimEnded");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_SeasonalChallengesReward_PreviewActor.BP_SeasonalChallengesReward_PreviewActor_C.StartRewardPhase
// (BlueprintCallable, BlueprintEvent)

void ABP_SeasonalChallengesReward_PreviewActor_C::StartRewardPhase()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_SeasonalChallengesReward_PreviewActor_C", "StartRewardPhase");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_SeasonalChallengesReward_PreviewActor.BP_SeasonalChallengesReward_PreviewActor_C.GatherSubGoalData
// (BlueprintCallable, BlueprintEvent)

void ABP_SeasonalChallengesReward_PreviewActor_C::GatherSubGoalData()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_SeasonalChallengesReward_PreviewActor_C", "GatherSubGoalData");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_SeasonalChallengesReward_PreviewActor.BP_SeasonalChallengesReward_PreviewActor_C.UpdateCameraDesiredPosition
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    bInstantChange                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// struct FTransform                       DesiredCameraTransform                                 (BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor)

void ABP_SeasonalChallengesReward_PreviewActor_C::UpdateCameraDesiredPosition(bool bInstantChange, const struct FTransform& DesiredCameraTransform)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_SeasonalChallengesReward_PreviewActor_C", "UpdateCameraDesiredPosition");

	Params::BP_SeasonalChallengesReward_PreviewActor_C_UpdateCameraDesiredPosition Parms{};

	Parms.bInstantChange = bInstantChange;
	Parms.DesiredCameraTransform = std::move(DesiredCameraTransform);

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_SeasonalChallengesReward_PreviewActor.BP_SeasonalChallengesReward_PreviewActor_C.Init
// (HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// class ABP_ChallengeManager_C*           ChallengeManager_0                                     (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class UUI_SeasonalChallengesSubTab_C*   SeasonRewardUI                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// TArray<struct FStruct_SeasonalChallengesSubGoalInfo>SubGoalsInfo_0                                         (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)

void ABP_SeasonalChallengesReward_PreviewActor_C::Init(class ABP_ChallengeManager_C* ChallengeManager_0, class UUI_SeasonalChallengesSubTab_C* SeasonRewardUI, TArray<struct FStruct_SeasonalChallengesSubGoalInfo>& SubGoalsInfo_0)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_SeasonalChallengesReward_PreviewActor_C", "Init");

	Params::BP_SeasonalChallengesReward_PreviewActor_C_Init Parms{};

	Parms.ChallengeManager_0 = ChallengeManager_0;
	Parms.SeasonRewardUI = SeasonRewardUI;
	Parms.SubGoalsInfo_0 = std::move(SubGoalsInfo_0);

	UObject::ProcessEvent(Func, &Parms);

	SubGoalsInfo_0 = std::move(Parms.SubGoalsInfo_0);
}


// Function BP_SeasonalChallengesReward_PreviewActor.BP_SeasonalChallengesReward_PreviewActor_C.TransitionFadeOut__FadedOutCompletely__EventFunc
// (BlueprintEvent)

void ABP_SeasonalChallengesReward_PreviewActor_C::TransitionFadeOut__FadedOutCompletely__EventFunc()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_SeasonalChallengesReward_PreviewActor_C", "TransitionFadeOut__FadedOutCompletely__EventFunc");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_SeasonalChallengesReward_PreviewActor.BP_SeasonalChallengesReward_PreviewActor_C.TransitionFadeOut__UpdateFunc
// (BlueprintEvent)

void ABP_SeasonalChallengesReward_PreviewActor_C::TransitionFadeOut__UpdateFunc()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_SeasonalChallengesReward_PreviewActor_C", "TransitionFadeOut__UpdateFunc");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_SeasonalChallengesReward_PreviewActor.BP_SeasonalChallengesReward_PreviewActor_C.TransitionFadeOut__FinishedFunc
// (BlueprintEvent)

void ABP_SeasonalChallengesReward_PreviewActor_C::TransitionFadeOut__FinishedFunc()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_SeasonalChallengesReward_PreviewActor_C", "TransitionFadeOut__FinishedFunc");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_SeasonalChallengesReward_PreviewActor.BP_SeasonalChallengesReward_PreviewActor_C.TransitionToReward__UpdateFunc
// (BlueprintEvent)

void ABP_SeasonalChallengesReward_PreviewActor_C::TransitionToReward__UpdateFunc()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_SeasonalChallengesReward_PreviewActor_C", "TransitionToReward__UpdateFunc");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_SeasonalChallengesReward_PreviewActor.BP_SeasonalChallengesReward_PreviewActor_C.TransitionToReward__FinishedFunc
// (BlueprintEvent)

void ABP_SeasonalChallengesReward_PreviewActor_C::TransitionToReward__FinishedFunc()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_SeasonalChallengesReward_PreviewActor_C", "TransitionToReward__FinishedFunc");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_SeasonalChallengesReward_PreviewActor.BP_SeasonalChallengesReward_PreviewActor_C.UserConstructionScript
// (Event, Public, HasDefaults, BlueprintCallable, BlueprintEvent)

void ABP_SeasonalChallengesReward_PreviewActor_C::UserConstructionScript()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_SeasonalChallengesReward_PreviewActor_C", "UserConstructionScript");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_SeasonalChallengesReward_PreviewActor.BP_SeasonalChallengesReward_PreviewActor_C.InitSubGoalWidgets
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// int32                                   SeasonalChallengesCompletedCount                       (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_SeasonalChallengesReward_PreviewActor_C::InitSubGoalWidgets(int32 SeasonalChallengesCompletedCount)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_SeasonalChallengesReward_PreviewActor_C", "InitSubGoalWidgets");

	Params::BP_SeasonalChallengesReward_PreviewActor_C_InitSubGoalWidgets Parms{};

	Parms.SeasonalChallengesCompletedCount = SeasonalChallengesCompletedCount;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_SeasonalChallengesReward_PreviewActor.BP_SeasonalChallengesReward_PreviewActor_C.InitLowestUnusedSubGoalWidget_By_TAG
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FStruct_SeasonalChallengesSubGoalInfoSubGoalInfo                                            (BlueprintVisible, BlueprintReadOnly, Parm, HasGetValueTypeHash)
// int32                                   CompletedSeasonalChallenges                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_SeasonalChallengesReward_PreviewActor_C::InitLowestUnusedSubGoalWidget_By_TAG(const struct FStruct_SeasonalChallengesSubGoalInfo& SubGoalInfo, int32 CompletedSeasonalChallenges)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_SeasonalChallengesReward_PreviewActor_C", "InitLowestUnusedSubGoalWidget_By_TAG");

	Params::BP_SeasonalChallengesReward_PreviewActor_C_InitLowestUnusedSubGoalWidget_By_TAG Parms{};

	Parms.SubGoalInfo = std::move(SubGoalInfo);
	Parms.CompletedSeasonalChallenges = CompletedSeasonalChallenges;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_SeasonalChallengesReward_PreviewActor.BP_SeasonalChallengesReward_PreviewActor_C.UpdateAllSubGoalWidgets
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)

void ABP_SeasonalChallengesReward_PreviewActor_C::UpdateAllSubGoalWidgets()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_SeasonalChallengesReward_PreviewActor_C", "UpdateAllSubGoalWidgets");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_SeasonalChallengesReward_PreviewActor.BP_SeasonalChallengesReward_PreviewActor_C.CheckForPropsVisibility
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)

void ABP_SeasonalChallengesReward_PreviewActor_C::CheckForPropsVisibility()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_SeasonalChallengesReward_PreviewActor_C", "CheckForPropsVisibility");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_SeasonalChallengesReward_PreviewActor.BP_SeasonalChallengesReward_PreviewActor_C.GetCompletedSubGoalCount
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// int32                                   TotalCompletedChallenges                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   SubGoalCount                                           (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    CompletedAll                                           (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ABP_SeasonalChallengesReward_PreviewActor_C::GetCompletedSubGoalCount(int32 TotalCompletedChallenges, int32* SubGoalCount, bool* CompletedAll)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_SeasonalChallengesReward_PreviewActor_C", "GetCompletedSubGoalCount");

	Params::BP_SeasonalChallengesReward_PreviewActor_C_GetCompletedSubGoalCount Parms{};

	Parms.TotalCompletedChallenges = TotalCompletedChallenges;

	UObject::ProcessEvent(Func, &Parms);

	if (SubGoalCount != nullptr)
		*SubGoalCount = Parms.SubGoalCount;

	if (CompletedAll != nullptr)
		*CompletedAll = Parms.CompletedAll;
}


// Function BP_SeasonalChallengesReward_PreviewActor.BP_SeasonalChallengesReward_PreviewActor_C.FillCards
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// TMap<class UClass*, int32>              RewardList                                             (BlueprintVisible, BlueprintReadOnly, Parm)

void ABP_SeasonalChallengesReward_PreviewActor_C::FillCards(const TMap<class UClass*, int32>& RewardList)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_SeasonalChallengesReward_PreviewActor_C", "FillCards");

	Params::BP_SeasonalChallengesReward_PreviewActor_C_FillCards Parms{};

	Parms.RewardList = std::move(RewardList);

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_SeasonalChallengesReward_PreviewActor.BP_SeasonalChallengesReward_PreviewActor_C.GetCameraTransformBasedOnSubGoalProgress
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// class UArrowComponent*                  CameraPosition                                         (Parm, OutParm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_SeasonalChallengesReward_PreviewActor_C::GetCameraTransformBasedOnSubGoalProgress(class UArrowComponent** CameraPosition)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_SeasonalChallengesReward_PreviewActor_C", "GetCameraTransformBasedOnSubGoalProgress");

	Params::BP_SeasonalChallengesReward_PreviewActor_C_GetCameraTransformBasedOnSubGoalProgress Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (CameraPosition != nullptr)
		*CameraPosition = Parms.CameraPosition;
}


// Function BP_SeasonalChallengesReward_PreviewActor.BP_SeasonalChallengesReward_PreviewActor_C.HideAllSubGoalWidgets
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)

void ABP_SeasonalChallengesReward_PreviewActor_C::HideAllSubGoalWidgets()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_SeasonalChallengesReward_PreviewActor_C", "HideAllSubGoalWidgets");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_SeasonalChallengesReward_PreviewActor.BP_SeasonalChallengesReward_PreviewActor_C.HideAllSubGoalProps
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)

void ABP_SeasonalChallengesReward_PreviewActor_C::HideAllSubGoalProps()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_SeasonalChallengesReward_PreviewActor_C", "HideAllSubGoalProps");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_SeasonalChallengesReward_PreviewActor.BP_SeasonalChallengesReward_PreviewActor_C.DEBUG_ResetClaimedSaveFlag
// (Public, BlueprintCallable, BlueprintEvent)

void ABP_SeasonalChallengesReward_PreviewActor_C::DEBUG_ResetClaimedSaveFlag()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_SeasonalChallengesReward_PreviewActor_C", "DEBUG_ResetClaimedSaveFlag");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_SeasonalChallengesReward_PreviewActor.BP_SeasonalChallengesReward_PreviewActor_C.DEBUG Play in editor
// (Public, BlueprintCallable, BlueprintEvent)

void ABP_SeasonalChallengesReward_PreviewActor_C::DEBUG_Play_in_editor()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_SeasonalChallengesReward_PreviewActor_C", "DEBUG Play in editor");

	UObject::ProcessEvent(Func, nullptr);
}

}

