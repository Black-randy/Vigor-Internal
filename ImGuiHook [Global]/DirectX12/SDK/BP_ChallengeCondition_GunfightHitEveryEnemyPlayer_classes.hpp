#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_ChallengeCondition_GunfightHitEveryEnemyPlayer

#include "Basic.hpp"

#include "Flame_structs.hpp"
#include "Engine_structs.hpp"
#include "BP_ChallengeCondition_Base_classes.hpp"


namespace SDK
{

// BlueprintGeneratedClass BP_ChallengeCondition_GunfightHitEveryEnemyPlayer.BP_ChallengeCondition_GunfightHitEveryEnemyPlayer_C
// 0x0030 (0x03B0 - 0x0380)
class ABP_ChallengeCondition_GunfightHitEveryEnemyPlayer_C final : public ABP_ChallengeCondition_Base_C
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame_BP_ChallengeCondition_GunfightHitEveryEnemyPlayer_C; // 0x0380(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	int32                                         PlayersHitCountRequired;                           // 0x0388(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         EnemyTeamMemberCount;                              // 0x038C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<int32>                                 HitPlayerIDs;                                      // 0x0390(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	int32                                         HitCount;                                          // 0x03A0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3A4[0x4];                                      // 0x03A4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UBP_GSC_Team_C*                         EnemyTeam;                                         // 0x03A8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

public:
	void ExecuteUbergraph_BP_ChallengeCondition_GunfightHitEveryEnemyPlayer(int32 EntryPoint);
	void UpdateEnemyTeamCount();
	void MatchStartedEvent();
	void PlayerDealtDamage_Event(int32 PlayerId, float Damage, EDamageType DamageType, class UClass* DamagingItem);
	void RoundEnded();
	void ReceiveBeginPlay();
	void Get_Maximum_Progress(int32* Maximum_Progress);
	void Get_Condition_Text(class FText* Condition_Text);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BP_ChallengeCondition_GunfightHitEveryEnemyPlayer_C">();
	}
	static class ABP_ChallengeCondition_GunfightHitEveryEnemyPlayer_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<ABP_ChallengeCondition_GunfightHitEveryEnemyPlayer_C>();
	}
};
static_assert(alignof(ABP_ChallengeCondition_GunfightHitEveryEnemyPlayer_C) == 0x000008, "Wrong alignment on ABP_ChallengeCondition_GunfightHitEveryEnemyPlayer_C");
static_assert(sizeof(ABP_ChallengeCondition_GunfightHitEveryEnemyPlayer_C) == 0x0003B0, "Wrong size on ABP_ChallengeCondition_GunfightHitEveryEnemyPlayer_C");
static_assert(offsetof(ABP_ChallengeCondition_GunfightHitEveryEnemyPlayer_C, UberGraphFrame_BP_ChallengeCondition_GunfightHitEveryEnemyPlayer_C) == 0x000380, "Member 'ABP_ChallengeCondition_GunfightHitEveryEnemyPlayer_C::UberGraphFrame_BP_ChallengeCondition_GunfightHitEveryEnemyPlayer_C' has a wrong offset!");
static_assert(offsetof(ABP_ChallengeCondition_GunfightHitEveryEnemyPlayer_C, PlayersHitCountRequired) == 0x000388, "Member 'ABP_ChallengeCondition_GunfightHitEveryEnemyPlayer_C::PlayersHitCountRequired' has a wrong offset!");
static_assert(offsetof(ABP_ChallengeCondition_GunfightHitEveryEnemyPlayer_C, EnemyTeamMemberCount) == 0x00038C, "Member 'ABP_ChallengeCondition_GunfightHitEveryEnemyPlayer_C::EnemyTeamMemberCount' has a wrong offset!");
static_assert(offsetof(ABP_ChallengeCondition_GunfightHitEveryEnemyPlayer_C, HitPlayerIDs) == 0x000390, "Member 'ABP_ChallengeCondition_GunfightHitEveryEnemyPlayer_C::HitPlayerIDs' has a wrong offset!");
static_assert(offsetof(ABP_ChallengeCondition_GunfightHitEveryEnemyPlayer_C, HitCount) == 0x0003A0, "Member 'ABP_ChallengeCondition_GunfightHitEveryEnemyPlayer_C::HitCount' has a wrong offset!");
static_assert(offsetof(ABP_ChallengeCondition_GunfightHitEveryEnemyPlayer_C, EnemyTeam) == 0x0003A8, "Member 'ABP_ChallengeCondition_GunfightHitEveryEnemyPlayer_C::EnemyTeam' has a wrong offset!");

}

