#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_OnlineChallengesComponent

#include "Basic.hpp"

#include "BP_OnlineChallengesComponent_classes.hpp"
#include "BP_OnlineChallengesComponent_parameters.hpp"


namespace SDK
{

// Function BP_OnlineChallengesComponent.BP_OnlineChallengesComponent_C.Assign Challenge
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// int32                                   SlotId                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class FName                             ChallengeName                                          (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

int32 UBP_OnlineChallengesComponent_C::Assign_Challenge(int32 SlotId, const class FName ChallengeName)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_OnlineChallengesComponent_C", "Assign Challenge");

	Params::BP_OnlineChallengesComponent_C_Assign_Challenge Parms{};

	Parms.SlotId = SlotId;
	Parms.ChallengeName = ChallengeName;

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function BP_OnlineChallengesComponent.BP_OnlineChallengesComponent_C.Set Challenge Progress
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// class FString                           Slot_Category                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)
// int32                                   SlotId                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class FName                             ChallengeName                                          (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   Progress                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

int32 UBP_OnlineChallengesComponent_C::Set_Challenge_Progress(const class FString& Slot_Category, int32 SlotId, const class FName ChallengeName, int32 Progress)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_OnlineChallengesComponent_C", "Set Challenge Progress");

	Params::BP_OnlineChallengesComponent_C_Set_Challenge_Progress Parms{};

	Parms.Slot_Category = std::move(Slot_Category);
	Parms.SlotId = SlotId;
	Parms.ChallengeName = ChallengeName;
	Parms.Progress = Progress;

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function BP_OnlineChallengesComponent.BP_OnlineChallengesComponent_C.Claim Challenge Rewards
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// class FString                           Slot_Category                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)
// int32                                   SlotId                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class FName                             ChallengeName                                          (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

int32 UBP_OnlineChallengesComponent_C::Claim_Challenge_Rewards(const class FString& Slot_Category, int32 SlotId, const class FName ChallengeName)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_OnlineChallengesComponent_C", "Claim Challenge Rewards");

	Params::BP_OnlineChallengesComponent_C_Claim_Challenge_Rewards Parms{};

	Parms.Slot_Category = std::move(Slot_Category);
	Parms.SlotId = SlotId;
	Parms.ChallengeName = ChallengeName;

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function BP_OnlineChallengesComponent.BP_OnlineChallengesComponent_C.Cancel Challenge
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// class FString                           Slot_Category                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)
// int32                                   SlotId                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class FName                             ChallengeName                                          (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

int32 UBP_OnlineChallengesComponent_C::Cancel_Challenge(const class FString& Slot_Category, int32 SlotId, const class FName& ChallengeName)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_OnlineChallengesComponent_C", "Cancel Challenge");

	Params::BP_OnlineChallengesComponent_C_Cancel_Challenge Parms{};

	Parms.Slot_Category = std::move(Slot_Category);
	Parms.SlotId = SlotId;
	Parms.ChallengeName = ChallengeName;

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function BP_OnlineChallengesComponent.BP_OnlineChallengesComponent_C.Get Challenge Slots
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

int32 UBP_OnlineChallengesComponent_C::Get_Challenge_Slots()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_OnlineChallengesComponent_C", "Get Challenge Slots");

	Params::BP_OnlineChallengesComponent_C_Get_Challenge_Slots Parms{};

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function BP_OnlineChallengesComponent.BP_OnlineChallengesComponent_C.Get Challenge Stats
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

int32 UBP_OnlineChallengesComponent_C::Get_Challenge_Stats()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_OnlineChallengesComponent_C", "Get Challenge Stats");

	Params::BP_OnlineChallengesComponent_C_Get_Challenge_Stats Parms{};

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}

}

