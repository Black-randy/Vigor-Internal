#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_PlayerController_GunFight

#include "Basic.hpp"

#include "BP_PlayerController_GunFight_classes.hpp"
#include "BP_PlayerController_GunFight_parameters.hpp"


namespace SDK
{

// Function BP_PlayerController_GunFight.BP_PlayerController_GunFight_C.ExecuteUbergraph_BP_PlayerController_GunFight
// (Final, UbergraphFunction, HasDefaults)
// Parameters:
// int32                                   EntryPoint                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_PlayerController_GunFight_C::ExecuteUbergraph_BP_PlayerController_GunFight(int32 EntryPoint)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PlayerController_GunFight_C", "ExecuteUbergraph_BP_PlayerController_GunFight");

	Params::BP_PlayerController_GunFight_C_ExecuteUbergraph_BP_PlayerController_GunFight Parms{};

	Parms.EntryPoint = EntryPoint;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_PlayerController_GunFight.BP_PlayerController_GunFight_C.TryShowingLoadoutsAgain
// (Net, NetReliable, NetClient, BlueprintCallable, BlueprintEvent)

void ABP_PlayerController_GunFight_C::TryShowingLoadoutsAgain()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PlayerController_GunFight_C", "TryShowingLoadoutsAgain");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_PlayerController_GunFight.BP_PlayerController_GunFight_C.LoadoutShownCheckTimedOut
// (BlueprintCallable, BlueprintEvent)

void ABP_PlayerController_GunFight_C::LoadoutShownCheckTimedOut()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PlayerController_GunFight_C", "LoadoutShownCheckTimedOut");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_PlayerController_GunFight.BP_PlayerController_GunFight_C.StartLoadoutShownCheckTimer
// (BlueprintCallable, BlueprintEvent)

void ABP_PlayerController_GunFight_C::StartLoadoutShownCheckTimer()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PlayerController_GunFight_C", "StartLoadoutShownCheckTimer");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_PlayerController_GunFight.BP_PlayerController_GunFight_C.ReceiveLoadoutShown
// (Net, NetReliable, NetServer, BlueprintCallable, BlueprintEvent)

void ABP_PlayerController_GunFight_C::ReceiveLoadoutShown()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PlayerController_GunFight_C", "ReceiveLoadoutShown");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_PlayerController_GunFight.BP_PlayerController_GunFight_C.ShowLoadouts
// (BlueprintCallable, BlueprintEvent)

void ABP_PlayerController_GunFight_C::ShowLoadouts()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PlayerController_GunFight_C", "ShowLoadouts");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_PlayerController_GunFight.BP_PlayerController_GunFight_C.Client_RequestVoteKick
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// int32                                   PlayerID_to_kick                                       (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_PlayerController_GunFight_C::Client_RequestVoteKick(int32 PlayerID_to_kick)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PlayerController_GunFight_C", "Client_RequestVoteKick");

	Params::BP_PlayerController_GunFight_C_Client_RequestVoteKick Parms{};

	Parms.PlayerID_to_kick = PlayerID_to_kick;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_PlayerController_GunFight.BP_PlayerController_GunFight_C.CustomEvent_0
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// EMessageBoxAction                       Result                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_PlayerController_GunFight_C::CustomEvent_0(EMessageBoxAction Result)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PlayerController_GunFight_C", "CustomEvent_0");

	Params::BP_PlayerController_GunFight_C_CustomEvent_0 Parms{};

	Parms.Result = Result;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_PlayerController_GunFight.BP_PlayerController_GunFight_C.GetKicked
// (Net, NetReliable, NetClient, BlueprintCallable, BlueprintEvent)

void ABP_PlayerController_GunFight_C::GetKicked()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PlayerController_GunFight_C", "GetKicked");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_PlayerController_GunFight.BP_PlayerController_GunFight_C.Server_RequestVoteKick
// (Net, NetReliable, NetServer, BlueprintCallable, BlueprintEvent)
// Parameters:
// int32                                   PlayerID_to_kick                                       (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_PlayerController_GunFight_C::Server_RequestVoteKick(int32 PlayerID_to_kick)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PlayerController_GunFight_C", "Server_RequestVoteKick");

	Params::BP_PlayerController_GunFight_C_Server_RequestVoteKick Parms{};

	Parms.PlayerID_to_kick = PlayerID_to_kick;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_PlayerController_GunFight.BP_PlayerController_GunFight_C.UpdateLoadoutWidgetPlayerCount
// (Net, NetReliable, NetClient, BlueprintCallable, BlueprintEvent)
// Parameters:
// int32                                   LoadoutIndex                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   PlayerCount                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_PlayerController_GunFight_C::UpdateLoadoutWidgetPlayerCount(int32 LoadoutIndex, int32 PlayerCount)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PlayerController_GunFight_C", "UpdateLoadoutWidgetPlayerCount");

	Params::BP_PlayerController_GunFight_C_UpdateLoadoutWidgetPlayerCount Parms{};

	Parms.LoadoutIndex = LoadoutIndex;
	Parms.PlayerCount = PlayerCount;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_PlayerController_GunFight.BP_PlayerController_GunFight_C.BreakLockEventResult
// (Net, NetReliable, NetClient, BlueprintCallable, BlueprintEvent)
// Parameters:
// int32                                   LoadoutIndex                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    LockBroken                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// bool                                    UsedTicket                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ABP_PlayerController_GunFight_C::BreakLockEventResult(int32 LoadoutIndex, bool LockBroken, bool UsedTicket)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PlayerController_GunFight_C", "BreakLockEventResult");

	Params::BP_PlayerController_GunFight_C_BreakLockEventResult Parms{};

	Parms.LoadoutIndex = LoadoutIndex;
	Parms.LockBroken = LockBroken;
	Parms.UsedTicket = UsedTicket;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_PlayerController_GunFight.BP_PlayerController_GunFight_C.BlockCurrencyForInstantLockBreak
// (Net, NetReliable, NetClient, BlueprintCallable, BlueprintEvent)
// Parameters:
// class FString                           MatchID                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)

void ABP_PlayerController_GunFight_C::BlockCurrencyForInstantLockBreak(const class FString& MatchID)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PlayerController_GunFight_C", "BlockCurrencyForInstantLockBreak");

	Params::BP_PlayerController_GunFight_C_BlockCurrencyForInstantLockBreak Parms{};

	Parms.MatchID = std::move(MatchID);

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_PlayerController_GunFight.BP_PlayerController_GunFight_C.SetPickedLoadout
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FS_GunFightLoadouts_S12          LoadoutInfo                                            (BlueprintVisible, BlueprintReadOnly, Parm, HasGetValueTypeHash)

void ABP_PlayerController_GunFight_C::SetPickedLoadout(const struct FS_GunFightLoadouts_S12& LoadoutInfo)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PlayerController_GunFight_C", "SetPickedLoadout");

	Params::BP_PlayerController_GunFight_C_SetPickedLoadout Parms{};

	Parms.LoadoutInfo = std::move(LoadoutInfo);

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_PlayerController_GunFight.BP_PlayerController_GunFight_C.UpdateTicketCount
// (Net, NetReliable, NetMulticast, BlueprintCallable, BlueprintEvent)
// Parameters:
// int32                                   TicketCount                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_PlayerController_GunFight_C::UpdateTicketCount(int32 TicketCount)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PlayerController_GunFight_C", "UpdateTicketCount");

	Params::BP_PlayerController_GunFight_C_UpdateTicketCount Parms{};

	Parms.TicketCount = TicketCount;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_PlayerController_GunFight.BP_PlayerController_GunFight_C.TryToBreakLock
// (Net, NetReliable, NetServer, BlueprintCallable, BlueprintEvent)
// Parameters:
// int32                                   LoadoutIndex                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_PlayerController_GunFight_C::TryToBreakLock(int32 LoadoutIndex)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PlayerController_GunFight_C", "TryToBreakLock");

	Params::BP_PlayerController_GunFight_C_TryToBreakLock Parms{};

	Parms.LoadoutIndex = LoadoutIndex;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_PlayerController_GunFight.BP_PlayerController_GunFight_C.UpdateLoadoutState_Locally
// (Net, NetReliable, NetClient, BlueprintCallable, BlueprintEvent)
// Parameters:
// int32                                   LoadoutIndex                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// EGunFight_LoadoutState                  State                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    ThisPlayerLockedTheSlot                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ABP_PlayerController_GunFight_C::UpdateLoadoutState_Locally(int32 LoadoutIndex, EGunFight_LoadoutState State, bool ThisPlayerLockedTheSlot)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PlayerController_GunFight_C", "UpdateLoadoutState_Locally");

	Params::BP_PlayerController_GunFight_C_UpdateLoadoutState_Locally Parms{};

	Parms.LoadoutIndex = LoadoutIndex;
	Parms.State = State;
	Parms.ThisPlayerLockedTheSlot = ThisPlayerLockedTheSlot;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_PlayerController_GunFight.BP_PlayerController_GunFight_C.TryLockingLoadout
// (Net, NetReliable, NetServer, BlueprintCallable, BlueprintEvent)
// Parameters:
// int32                                   LoadoutIndex                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_PlayerController_GunFight_C::TryLockingLoadout(int32 LoadoutIndex)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PlayerController_GunFight_C", "TryLockingLoadout");

	Params::BP_PlayerController_GunFight_C_TryLockingLoadout Parms{};

	Parms.LoadoutIndex = LoadoutIndex;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_PlayerController_GunFight.BP_PlayerController_GunFight_C.Show Teammate Positions
// (BlueprintCallable, BlueprintEvent)

void ABP_PlayerController_GunFight_C::Show_Teammate_Positions()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PlayerController_GunFight_C", "Show Teammate Positions");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_PlayerController_GunFight.BP_PlayerController_GunFight_C.Save Match ID on Client
// (Net, NetReliable, NetClient, BlueprintCallable, BlueprintEvent)
// Parameters:
// class FString                           Match_ID                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)

void ABP_PlayerController_GunFight_C::Save_Match_ID_on_Client(const class FString& Match_ID)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PlayerController_GunFight_C", "Save Match ID on Client");

	Params::BP_PlayerController_GunFight_C_Save_Match_ID_on_Client Parms{};

	Parms.Match_ID = std::move(Match_ID);

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_PlayerController_GunFight.BP_PlayerController_GunFight_C.Clear All Pings
// (BlueprintCallable, BlueprintEvent)

void ABP_PlayerController_GunFight_C::Clear_All_Pings()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PlayerController_GunFight_C", "Clear All Pings");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_PlayerController_GunFight.BP_PlayerController_GunFight_C.Get Kicked For Teamkilling
// (Net, NetReliable, NetClient, BlueprintCallable, BlueprintEvent)

void ABP_PlayerController_GunFight_C::Get_Kicked_For_Teamkilling()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PlayerController_GunFight_C", "Get Kicked For Teamkilling");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_PlayerController_GunFight.BP_PlayerController_GunFight_C.Remove All Player Widgets
// (Net, NetReliable, NetClient, BlueprintCallable, BlueprintEvent)

void ABP_PlayerController_GunFight_C::Remove_All_Player_Widgets()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PlayerController_GunFight_C", "Remove All Player Widgets");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_PlayerController_GunFight.BP_PlayerController_GunFight_C.PossessedServer
// (Net, NetReliable, NetServer, BlueprintCallable, BlueprintEvent)
// Parameters:
// class ABP_Character_C*                  Possessed_Character                                    (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_PlayerController_GunFight_C::PossessedServer(class ABP_Character_C* Possessed_Character)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PlayerController_GunFight_C", "PossessedServer");

	Params::BP_PlayerController_GunFight_C_PossessedServer Parms{};

	Parms.Possessed_Character = Possessed_Character;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_PlayerController_GunFight.BP_PlayerController_GunFight_C.Died
// (Net, NetReliable, NetMulticast, BlueprintCallable, BlueprintEvent)

void ABP_PlayerController_GunFight_C::Died()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PlayerController_GunFight_C", "Died");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_PlayerController_GunFight.BP_PlayerController_GunFight_C.Delete the Player widget
// (Net, NetClient, BlueprintCallable, BlueprintEvent)
// Parameters:
// class ABP_Character_C*                  Marked_character                                       (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_PlayerController_GunFight_C::Delete_the_Player_widget(class ABP_Character_C* Marked_character)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PlayerController_GunFight_C", "Delete the Player widget");

	Params::BP_PlayerController_GunFight_C_Delete_the_Player_widget Parms{};

	Parms.Marked_character = Marked_character;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_PlayerController_GunFight.BP_PlayerController_GunFight_C.Create the Player widget
// (Net, NetReliable, NetClient, BlueprintCallable, BlueprintEvent)
// Parameters:
// class ABP_Character_C*                  Character_to_mark                                      (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_PlayerController_GunFight_C::Create_the_Player_widget(class ABP_Character_C* Character_to_mark)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PlayerController_GunFight_C", "Create the Player widget");

	Params::BP_PlayerController_GunFight_C_Create_the_Player_widget Parms{};

	Parms.Character_to_mark = Character_to_mark;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_PlayerController_GunFight.BP_PlayerController_GunFight_C.Set Invincibility at Possesed
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// class ABP_Character_C*                  Possessed_Character                                    (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_PlayerController_GunFight_C::Set_Invincibility_at_Possesed(class ABP_Character_C* Possessed_Character)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PlayerController_GunFight_C", "Set Invincibility at Possesed");

	Params::BP_PlayerController_GunFight_C_Set_Invincibility_at_Possesed Parms{};

	Parms.Possessed_Character = Possessed_Character;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_PlayerController_GunFight.BP_PlayerController_GunFight_C.Set Invincibility
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    New_Invincibility                                      (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ABP_PlayerController_GunFight_C::Set_Invincibility(bool New_Invincibility)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PlayerController_GunFight_C", "Set Invincibility");

	Params::BP_PlayerController_GunFight_C_Set_Invincibility Parms{};

	Parms.New_Invincibility = New_Invincibility;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_PlayerController_GunFight.BP_PlayerController_GunFight_C.Player Connected Server
// (Net, NetReliable, NetServer, BlueprintCallable, BlueprintEvent)

void ABP_PlayerController_GunFight_C::Player_Connected_Server()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PlayerController_GunFight_C", "Player Connected Server");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_PlayerController_GunFight.BP_PlayerController_GunFight_C.Remove Objective Marker
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// class AActor*                           Located_Actor                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_PlayerController_GunFight_C::Remove_Objective_Marker(class AActor* Located_Actor)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PlayerController_GunFight_C", "Remove Objective Marker");

	Params::BP_PlayerController_GunFight_C_Remove_Objective_Marker Parms{};

	Parms.Located_Actor = Located_Actor;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_PlayerController_GunFight.BP_PlayerController_GunFight_C.Add Objective Marker
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// class AActor*                           Located_Actor                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_PlayerController_GunFight_C::Add_Objective_Marker(class AActor* Located_Actor)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PlayerController_GunFight_C", "Add Objective Marker");

	Params::BP_PlayerController_GunFight_C_Add_Objective_Marker Parms{};

	Parms.Located_Actor = Located_Actor;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_PlayerController_GunFight.BP_PlayerController_GunFight_C.Replicate_RemoveVoteKickUI
// (Net, NetReliable, NetClient, BlueprintCallable, BlueprintEvent)

void ABP_PlayerController_GunFight_C::Replicate_RemoveVoteKickUI()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PlayerController_GunFight_C", "Replicate_RemoveVoteKickUI");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_PlayerController_GunFight.BP_PlayerController_GunFight_C.ReplicateAFK_Check
// (Net, NetReliable, NetClient, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    ShouldDisplayAFKCheck                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ABP_PlayerController_GunFight_C::ReplicateAFK_Check(bool ShouldDisplayAFKCheck)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PlayerController_GunFight_C", "ReplicateAFK_Check");

	Params::BP_PlayerController_GunFight_C_ReplicateAFK_Check Parms{};

	Parms.ShouldDisplayAFKCheck = ShouldDisplayAFKCheck;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_PlayerController_GunFight.BP_PlayerController_GunFight_C.ShowAFK_CheckResult
// (Net, NetReliable, NetClient, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    ToBeKicked                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// int32                                   PlayerId                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class FString                           PlayerName                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)

void ABP_PlayerController_GunFight_C::ShowAFK_CheckResult(bool ToBeKicked, int32 PlayerId, const class FString& PlayerName)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PlayerController_GunFight_C", "ShowAFK_CheckResult");

	Params::BP_PlayerController_GunFight_C_ShowAFK_CheckResult Parms{};

	Parms.ToBeKicked = ToBeKicked;
	Parms.PlayerId = PlayerId;
	Parms.PlayerName = std::move(PlayerName);

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_PlayerController_GunFight.BP_PlayerController_GunFight_C.OnClosedDelegate_Event_0
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// class UFlameWidget*                     FlameWidget                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_PlayerController_GunFight_C::OnClosedDelegate_Event_0(class UFlameWidget* FlameWidget)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PlayerController_GunFight_C", "OnClosedDelegate_Event_0");

	Params::BP_PlayerController_GunFight_C_OnClosedDelegate_Event_0 Parms{};

	Parms.FlameWidget = FlameWidget;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_PlayerController_GunFight.BP_PlayerController_GunFight_C.SendAFK_CheckResult
// (Net, NetReliable, NetServer, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    ToBeKicked                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// bool                                    Attempted                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ABP_PlayerController_GunFight_C::SendAFK_CheckResult(bool ToBeKicked, bool Attempted)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PlayerController_GunFight_C", "SendAFK_CheckResult");

	Params::BP_PlayerController_GunFight_C_SendAFK_CheckResult Parms{};

	Parms.ToBeKicked = ToBeKicked;
	Parms.Attempted = Attempted;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_PlayerController_GunFight.BP_PlayerController_GunFight_C.ShowAFK_Check
// (Net, NetReliable, NetClient, BlueprintCallable, BlueprintEvent)

void ABP_PlayerController_GunFight_C::ShowAFK_Check()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PlayerController_GunFight_C", "ShowAFK_Check");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_PlayerController_GunFight.BP_PlayerController_GunFight_C.MarkTeammateForVoteKick
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    bMarkerEnabled                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// int32                                   PlayerID_to_kick                                       (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_PlayerController_GunFight_C::MarkTeammateForVoteKick(bool bMarkerEnabled, int32 PlayerID_to_kick)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PlayerController_GunFight_C", "MarkTeammateForVoteKick");

	Params::BP_PlayerController_GunFight_C_MarkTeammateForVoteKick Parms{};

	Parms.bMarkerEnabled = bMarkerEnabled;
	Parms.PlayerID_to_kick = PlayerID_to_kick;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_PlayerController_GunFight.BP_PlayerController_GunFight_C.Client_SendInKickVote
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    VotedToKick                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ABP_PlayerController_GunFight_C::Client_SendInKickVote(bool VotedToKick)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PlayerController_GunFight_C", "Client_SendInKickVote");

	Params::BP_PlayerController_GunFight_C_Client_SendInKickVote Parms{};

	Parms.VotedToKick = VotedToKick;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_PlayerController_GunFight.BP_PlayerController_GunFight_C.ShowKickVoteResult
// (Net, NetReliable, NetClient, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    bGotKicked                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// int32                                   PlayerID_to_kick                                       (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_PlayerController_GunFight_C::ShowKickVoteResult(bool bGotKicked, int32 PlayerID_to_kick)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PlayerController_GunFight_C", "ShowKickVoteResult");

	Params::BP_PlayerController_GunFight_C_ShowKickVoteResult Parms{};

	Parms.bGotKicked = bGotKicked;
	Parms.PlayerID_to_kick = PlayerID_to_kick;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_PlayerController_GunFight.BP_PlayerController_GunFight_C.ReplicateVoteCount
// (Net, NetReliable, NetClient, BlueprintCallable, BlueprintEvent)
// Parameters:
// int32                                   TotalCount                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   YesCount                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   NoCount                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_PlayerController_GunFight_C::ReplicateVoteCount(int32 TotalCount, int32 YesCount, int32 NoCount)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PlayerController_GunFight_C", "ReplicateVoteCount");

	Params::BP_PlayerController_GunFight_C_ReplicateVoteCount Parms{};

	Parms.TotalCount = TotalCount;
	Parms.YesCount = YesCount;
	Parms.NoCount = NoCount;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_PlayerController_GunFight.BP_PlayerController_GunFight_C.Server_SendInKickVote
// (Net, NetReliable, NetServer, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    VotedToKick                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ABP_PlayerController_GunFight_C::Server_SendInKickVote(bool VotedToKick)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PlayerController_GunFight_C", "Server_SendInKickVote");

	Params::BP_PlayerController_GunFight_C_Server_SendInKickVote Parms{};

	Parms.VotedToKick = VotedToKick;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_PlayerController_GunFight.BP_PlayerController_GunFight_C.UpdateVoteCount
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// int32                                   TotalCount                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   YesCount                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   NoCount                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_PlayerController_GunFight_C::UpdateVoteCount(int32 TotalCount, int32 YesCount, int32 NoCount)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PlayerController_GunFight_C", "UpdateVoteCount");

	Params::BP_PlayerController_GunFight_C_UpdateVoteCount Parms{};

	Parms.TotalCount = TotalCount;
	Parms.YesCount = YesCount;
	Parms.NoCount = NoCount;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_PlayerController_GunFight.BP_PlayerController_GunFight_C.Remove VoteKickUI
// (BlueprintCallable, BlueprintEvent)

void ABP_PlayerController_GunFight_C::Remove_VoteKickUI()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PlayerController_GunFight_C", "Remove VoteKickUI");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_PlayerController_GunFight.BP_PlayerController_GunFight_C.Add VoteKickUI
// (Net, NetReliable, HasOutParams, NetClient, BlueprintCallable, BlueprintEvent)
// Parameters:
// int32                                   PlayerID_to_kick                                       (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class FString                           PlayerName_to_kick                                     (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)
// int32                                   PlayerID_of_Vote_Starter                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_PlayerController_GunFight_C::Add_VoteKickUI(const int32& PlayerID_to_kick, const class FString& PlayerName_to_kick, int32 PlayerID_of_Vote_Starter)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PlayerController_GunFight_C", "Add VoteKickUI");

	Params::BP_PlayerController_GunFight_C_Add_VoteKickUI Parms{};

	Parms.PlayerID_to_kick = PlayerID_to_kick;
	Parms.PlayerName_to_kick = std::move(PlayerName_to_kick);
	Parms.PlayerID_of_Vote_Starter = PlayerID_of_Vote_Starter;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_PlayerController_GunFight.BP_PlayerController_GunFight_C.HidePersistentHUDIcons
// (BlueprintCallable, BlueprintEvent)

void ABP_PlayerController_GunFight_C::HidePersistentHUDIcons()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PlayerController_GunFight_C", "HidePersistentHUDIcons");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_PlayerController_GunFight.BP_PlayerController_GunFight_C.HideLoadoutAndTransfer
// (BlueprintCallable, BlueprintEvent)

void ABP_PlayerController_GunFight_C::HideLoadoutAndTransfer()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PlayerController_GunFight_C", "HideLoadoutAndTransfer");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_PlayerController_GunFight.BP_PlayerController_GunFight_C.UpdatePreRoundInputBlockTime
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// int32                                   Round_Starts_In                                        (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_PlayerController_GunFight_C::UpdatePreRoundInputBlockTime(int32 Round_Starts_In)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PlayerController_GunFight_C", "UpdatePreRoundInputBlockTime");

	Params::BP_PlayerController_GunFight_C_UpdatePreRoundInputBlockTime Parms{};

	Parms.Round_Starts_In = Round_Starts_In;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_PlayerController_GunFight.BP_PlayerController_GunFight_C.HidePreRoundCountdownInputBlock
// (BlueprintCallable, BlueprintEvent)

void ABP_PlayerController_GunFight_C::HidePreRoundCountdownInputBlock()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PlayerController_GunFight_C", "HidePreRoundCountdownInputBlock");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_PlayerController_GunFight.BP_PlayerController_GunFight_C.ShowPreRoundCountdownInputBlock
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// int32                                   PreRoundTime                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_PlayerController_GunFight_C::ShowPreRoundCountdownInputBlock(int32 PreRoundTime)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PlayerController_GunFight_C", "ShowPreRoundCountdownInputBlock");

	Params::BP_PlayerController_GunFight_C_ShowPreRoundCountdownInputBlock Parms{};

	Parms.PreRoundTime = PreRoundTime;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_PlayerController_GunFight.BP_PlayerController_GunFight_C.Remove Forced Black Screen
// (BlueprintCallable, BlueprintEvent)

void ABP_PlayerController_GunFight_C::Remove_Forced_Black_Screen()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PlayerController_GunFight_C", "Remove Forced Black Screen");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_PlayerController_GunFight.BP_PlayerController_GunFight_C.Add Forced Black Screen
// (BlueprintCallable, BlueprintEvent)

void ABP_PlayerController_GunFight_C::Add_Forced_Black_Screen()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PlayerController_GunFight_C", "Add Forced Black Screen");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_PlayerController_GunFight.BP_PlayerController_GunFight_C.HideChosenLoadoutPopUp
// (BlueprintCallable, BlueprintEvent)

void ABP_PlayerController_GunFight_C::HideChosenLoadoutPopUp()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PlayerController_GunFight_C", "HideChosenLoadoutPopUp");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_PlayerController_GunFight.BP_PlayerController_GunFight_C.ShowChosenLoadoutPopUp
// (BlueprintCallable, BlueprintEvent)

void ABP_PlayerController_GunFight_C::ShowChosenLoadoutPopUp()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PlayerController_GunFight_C", "ShowChosenLoadoutPopUp");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_PlayerController_GunFight.BP_PlayerController_GunFight_C.HideLoadoutPicker
// (BlueprintCallable, BlueprintEvent)

void ABP_PlayerController_GunFight_C::HideLoadoutPicker()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PlayerController_GunFight_C", "HideLoadoutPicker");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_PlayerController_GunFight.BP_PlayerController_GunFight_C.UpdateLoadoutPickerPreRoundTime
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// int32                                   RoundStartsIn                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_PlayerController_GunFight_C::UpdateLoadoutPickerPreRoundTime(int32 RoundStartsIn)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PlayerController_GunFight_C", "UpdateLoadoutPickerPreRoundTime");

	Params::BP_PlayerController_GunFight_C_UpdateLoadoutPickerPreRoundTime Parms{};

	Parms.RoundStartsIn = RoundStartsIn;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_PlayerController_GunFight.BP_PlayerController_GunFight_C.CreateLoadoutPicker
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// int32                                   PreMinusRound_Time                                     (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_PlayerController_GunFight_C::CreateLoadoutPicker(int32 PreMinusRound_Time)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PlayerController_GunFight_C", "CreateLoadoutPicker");

	Params::BP_PlayerController_GunFight_C_CreateLoadoutPicker Parms{};

	Parms.PreMinusRound_Time = PreMinusRound_Time;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_PlayerController_GunFight.BP_PlayerController_GunFight_C.Create ScorePopUp
// (BlueprintCallable, BlueprintEvent)

void ABP_PlayerController_GunFight_C::Create_ScorePopUp()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PlayerController_GunFight_C", "Create ScorePopUp");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_PlayerController_GunFight.BP_PlayerController_GunFight_C.Update Round Start Countdown UI
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// int32                                   Round_Starts_In                                        (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_PlayerController_GunFight_C::Update_Round_Start_Countdown_UI(int32 Round_Starts_In)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PlayerController_GunFight_C", "Update Round Start Countdown UI");

	Params::BP_PlayerController_GunFight_C_Update_Round_Start_Countdown_UI Parms{};

	Parms.Round_Starts_In = Round_Starts_In;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_PlayerController_GunFight.BP_PlayerController_GunFight_C.Set Round Time
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// int32                                   Round_Time                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    Is_Objective_Phase                                     (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ABP_PlayerController_GunFight_C::Set_Round_Time(int32 Round_Time, bool Is_Objective_Phase)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PlayerController_GunFight_C", "Set Round Time");

	Params::BP_PlayerController_GunFight_C_Set_Round_Time Parms{};

	Parms.Round_Time = Round_Time;
	Parms.Is_Objective_Phase = Is_Objective_Phase;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_PlayerController_GunFight.BP_PlayerController_GunFight_C.Start Countdown in Waiting for Match
// (Net, NetReliable, NetClient, BlueprintCallable, BlueprintEvent)
// Parameters:
// int32                                   Time                                                   (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    All_Connected                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ABP_PlayerController_GunFight_C::Start_Countdown_in_Waiting_for_Match(int32 Time, bool All_Connected)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PlayerController_GunFight_C", "Start Countdown in Waiting for Match");

	Params::BP_PlayerController_GunFight_C_Start_Countdown_in_Waiting_for_Match Parms{};

	Parms.Time = Time;
	Parms.All_Connected = All_Connected;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_PlayerController_GunFight.BP_PlayerController_GunFight_C.Hide Waiting For Match To Start
// (BlueprintCallable, BlueprintEvent)

void ABP_PlayerController_GunFight_C::Hide_Waiting_For_Match_To_Start()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PlayerController_GunFight_C", "Hide Waiting For Match To Start");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_PlayerController_GunFight.BP_PlayerController_GunFight_C.Show Waiting For Match To Start
// (BlueprintCallable, BlueprintEvent)

void ABP_PlayerController_GunFight_C::Show_Waiting_For_Match_To_Start()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PlayerController_GunFight_C", "Show Waiting For Match To Start");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_PlayerController_GunFight.BP_PlayerController_GunFight_C.Hide Round Start Countdown UI
// (BlueprintCallable, BlueprintEvent)

void ABP_PlayerController_GunFight_C::Hide_Round_Start_Countdown_UI()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PlayerController_GunFight_C", "Hide Round Start Countdown UI");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_PlayerController_GunFight.BP_PlayerController_GunFight_C.Show Round Start Countdown UI
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// int32                                   PreMinusRoundStart                                     (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_PlayerController_GunFight_C::Show_Round_Start_Countdown_UI(int32 PreMinusRoundStart)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PlayerController_GunFight_C", "Show Round Start Countdown UI");

	Params::BP_PlayerController_GunFight_C_Show_Round_Start_Countdown_UI Parms{};

	Parms.PreMinusRoundStart = PreMinusRoundStart;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_PlayerController_GunFight.BP_PlayerController_GunFight_C.Update Match Progress
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// int32                                   Attackers_Won_Rounds                                   (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   Defenders_Won_Rounds                                   (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_PlayerController_GunFight_C::Update_Match_Progress(int32 Attackers_Won_Rounds, int32 Defenders_Won_Rounds)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PlayerController_GunFight_C", "Update Match Progress");

	Params::BP_PlayerController_GunFight_C_Update_Match_Progress Parms{};

	Parms.Attackers_Won_Rounds = Attackers_Won_Rounds;
	Parms.Defenders_Won_Rounds = Defenders_Won_Rounds;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_PlayerController_GunFight.BP_PlayerController_GunFight_C.Hide Match Progress UI
// (BlueprintCallable, BlueprintEvent)

void ABP_PlayerController_GunFight_C::Hide_Match_Progress_UI()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PlayerController_GunFight_C", "Hide Match Progress UI");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_PlayerController_GunFight.BP_PlayerController_GunFight_C.Show Match Progress UI
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// int32                                   Round_Time                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   Attackers_Won_Rounds                                   (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   Defenders_Won_Rounds                                   (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_PlayerController_GunFight_C::Show_Match_Progress_UI(int32 Round_Time, int32 Attackers_Won_Rounds, const int32 Defenders_Won_Rounds)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PlayerController_GunFight_C", "Show Match Progress UI");

	Params::BP_PlayerController_GunFight_C_Show_Match_Progress_UI Parms{};

	Parms.Round_Time = Round_Time;
	Parms.Attackers_Won_Rounds = Attackers_Won_Rounds;
	Parms.Defenders_Won_Rounds = Defenders_Won_Rounds;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_PlayerController_GunFight.BP_PlayerController_GunFight_C.Show Player Notification
// (Net, NetReliable, NetClient, BlueprintCallable, BlueprintEvent)
// Parameters:
// class FText                             Title                                                  (BlueprintVisible, BlueprintReadOnly, Parm)
// class FText                             Reason                                                 (BlueprintVisible, BlueprintReadOnly, Parm)
// ERaidNotificationType                   Type                                                   (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_PlayerController_GunFight_C::Show_Player_Notification(const class FText& Title, const class FText& Reason, ERaidNotificationType Type)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PlayerController_GunFight_C", "Show Player Notification");

	Params::BP_PlayerController_GunFight_C_Show_Player_Notification Parms{};

	Parms.Title = std::move(Title);
	Parms.Reason = std::move(Reason);
	Parms.Type = Type;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_PlayerController_GunFight.BP_PlayerController_GunFight_C.Hide End Turn UI
// (Net, NetReliable, NetClient, BlueprintCallable, BlueprintEvent)

void ABP_PlayerController_GunFight_C::Hide_End_Turn_UI()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PlayerController_GunFight_C", "Hide End Turn UI");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_PlayerController_GunFight.BP_PlayerController_GunFight_C.Cheat_SetRoundsToWin
// (Net, NetReliable, NetServer, BlueprintCallable, BlueprintEvent)
// Parameters:
// int32                                   RoundsToWin                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_PlayerController_GunFight_C::Cheat_SetRoundsToWin(int32 RoundsToWin)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PlayerController_GunFight_C", "Cheat_SetRoundsToWin");

	Params::BP_PlayerController_GunFight_C_Cheat_SetRoundsToWin Parms{};

	Parms.RoundsToWin = RoundsToWin;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_PlayerController_GunFight.BP_PlayerController_GunFight_C.Cheat_UpdateNewLoadouts
// (Net, NetReliable, NetClient, BlueprintCallable, BlueprintEvent)

void ABP_PlayerController_GunFight_C::Cheat_UpdateNewLoadouts()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PlayerController_GunFight_C", "Cheat_UpdateNewLoadouts");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_PlayerController_GunFight.BP_PlayerController_GunFight_C.Cheat_RollNewLoadouts
// (Net, NetReliable, NetServer, BlueprintCallable, BlueprintEvent)

void ABP_PlayerController_GunFight_C::Cheat_RollNewLoadouts()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PlayerController_GunFight_C", "Cheat_RollNewLoadouts");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_PlayerController_GunFight.BP_PlayerController_GunFight_C.Cheat_SkipMatch
// (Net, NetReliable, NetServer, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    LocalPlayerWins                                        (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ABP_PlayerController_GunFight_C::Cheat_SkipMatch(bool LocalPlayerWins)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PlayerController_GunFight_C", "Cheat_SkipMatch");

	Params::BP_PlayerController_GunFight_C_Cheat_SkipMatch Parms{};

	Parms.LocalPlayerWins = LocalPlayerWins;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_PlayerController_GunFight.BP_PlayerController_GunFight_C.Cheat_SkipRound
// (Net, NetReliable, NetServer, BlueprintCallable, BlueprintEvent)

void ABP_PlayerController_GunFight_C::Cheat_SkipRound()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PlayerController_GunFight_C", "Cheat_SkipRound");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_PlayerController_GunFight.BP_PlayerController_GunFight_C.Cheat_UpdateCurrentAndMaxSettingID
// (Net, NetReliable, NetServer, BlueprintCallable, BlueprintEvent)

void ABP_PlayerController_GunFight_C::Cheat_UpdateCurrentAndMaxSettingID()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PlayerController_GunFight_C", "Cheat_UpdateCurrentAndMaxSettingID");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_PlayerController_GunFight.BP_PlayerController_GunFight_C.Cheat_UpdateLocalWidgetSettingID_Display
// (Net, NetReliable, NetClient, BlueprintCallable, BlueprintEvent)
// Parameters:
// int32                                   CurrentID                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   NewID                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   MaxID                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_PlayerController_GunFight_C::Cheat_UpdateLocalWidgetSettingID_Display(int32 CurrentID, int32 NewID, int32 MaxID)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PlayerController_GunFight_C", "Cheat_UpdateLocalWidgetSettingID_Display");

	Params::BP_PlayerController_GunFight_C_Cheat_UpdateLocalWidgetSettingID_Display Parms{};

	Parms.CurrentID = CurrentID;
	Parms.NewID = NewID;
	Parms.MaxID = MaxID;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_PlayerController_GunFight.BP_PlayerController_GunFight_C.Cheat_SetSettingID
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// int32                                   SettingID                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_PlayerController_GunFight_C::Cheat_SetSettingID(int32 SettingID)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PlayerController_GunFight_C", "Cheat_SetSettingID");

	Params::BP_PlayerController_GunFight_C_Cheat_SetSettingID Parms{};

	Parms.SettingID = SettingID;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_PlayerController_GunFight.BP_PlayerController_GunFight_C.Cheat_ResetScore
// (Net, NetReliable, NetServer, BlueprintCallable, BlueprintEvent)

void ABP_PlayerController_GunFight_C::Cheat_ResetScore()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PlayerController_GunFight_C", "Cheat_ResetScore");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_PlayerController_GunFight.BP_PlayerController_GunFight_C.Cheat_AddScore
// (Net, NetReliable, NetServer, BlueprintCallable, BlueprintEvent)
// Parameters:
// class FName                             ScoreEvent                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_PlayerController_GunFight_C::Cheat_AddScore(class FName ScoreEvent)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PlayerController_GunFight_C", "Cheat_AddScore");

	Params::BP_PlayerController_GunFight_C_Cheat_AddScore Parms{};

	Parms.ScoreEvent = ScoreEvent;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_PlayerController_GunFight.BP_PlayerController_GunFight_C.Client Request Pause Match
// (BlueprintCallable, BlueprintEvent)

void ABP_PlayerController_GunFight_C::Client_Request_Pause_Match()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PlayerController_GunFight_C", "Client Request Pause Match");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_PlayerController_GunFight.BP_PlayerController_GunFight_C.Request Pause Match
// (Net, NetReliable, NetServer, BlueprintCallable, BlueprintEvent)

void ABP_PlayerController_GunFight_C::Request_Pause_Match()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PlayerController_GunFight_C", "Request Pause Match");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_PlayerController_GunFight.BP_PlayerController_GunFight_C.Add or Remove Objective Marker
// (Private, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// class AActor*                           Located_Actor                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    Add                                                    (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ABP_PlayerController_GunFight_C::Add_or_Remove_Objective_Marker(class AActor* Located_Actor, bool Add)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PlayerController_GunFight_C", "Add or Remove Objective Marker");

	Params::BP_PlayerController_GunFight_C_Add_or_Remove_Objective_Marker Parms{};

	Parms.Located_Actor = Located_Actor;
	Parms.Add = Add;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_PlayerController_GunFight.BP_PlayerController_GunFight_C.Start Spectating
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)

void ABP_PlayerController_GunFight_C::Start_Spectating()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PlayerController_GunFight_C", "Start Spectating");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_PlayerController_GunFight.BP_PlayerController_GunFight_C.Is Attacker
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// bool                                    Is_Attacker_0                                          (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ABP_PlayerController_GunFight_C::Is_Attacker(bool* Is_Attacker_0)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PlayerController_GunFight_C", "Is Attacker");

	Params::BP_PlayerController_GunFight_C_Is_Attacker Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Is_Attacker_0 != nullptr)
		*Is_Attacker_0 = Parms.Is_Attacker_0;
}


// Function BP_PlayerController_GunFight.BP_PlayerController_GunFight_C.Add Teammate Markers
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)

void ABP_PlayerController_GunFight_C::Add_Teammate_Markers()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PlayerController_GunFight_C", "Add Teammate Markers");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_PlayerController_GunFight.BP_PlayerController_GunFight_C.GetGunfightUIHud
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    Valid                                                  (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
// class UUI_HUD_C*                        HUD                                                    (Parm, OutParm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_PlayerController_GunFight_C::GetGunfightUIHud(bool* Valid, class UUI_HUD_C** HUD)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PlayerController_GunFight_C", "GetGunfightUIHud");

	Params::BP_PlayerController_GunFight_C_GetGunfightUIHud Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Valid != nullptr)
		*Valid = Parms.Valid;

	if (HUD != nullptr)
		*HUD = Parms.HUD;
}


// Function BP_PlayerController_GunFight.BP_PlayerController_GunFight_C.Get Total Owned Lobby Booster Cost
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// int32                                   TotalCost                                              (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_PlayerController_GunFight_C::Get_Total_Owned_Lobby_Booster_Cost(int32* TotalCost)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PlayerController_GunFight_C", "Get Total Owned Lobby Booster Cost");

	Params::BP_PlayerController_GunFight_C_Get_Total_Owned_Lobby_Booster_Cost Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (TotalCost != nullptr)
		*TotalCost = Parms.TotalCost;
}


// Function BP_PlayerController_GunFight.BP_PlayerController_GunFight_C.HasEnoughHC_ForBooster
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// EBooster                                BoosterType                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    EnoughHC                                               (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ABP_PlayerController_GunFight_C::HasEnoughHC_ForBooster(EBooster BoosterType, bool* EnoughHC)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PlayerController_GunFight_C", "HasEnoughHC_ForBooster");

	Params::BP_PlayerController_GunFight_C_HasEnoughHC_ForBooster Parms{};

	Parms.BoosterType = BoosterType;

	UObject::ProcessEvent(Func, &Parms);

	if (EnoughHC != nullptr)
		*EnoughHC = Parms.EnoughHC;
}


// Function BP_PlayerController_GunFight.BP_PlayerController_GunFight_C.Player Respawned
// (Net, NetReliable, NetMulticast, BlueprintCallable, BlueprintEvent)

void ABP_PlayerController_GunFight_C::Player_Respawned()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PlayerController_GunFight_C", "Player Respawned");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_PlayerController_GunFight.BP_PlayerController_GunFight_C.ReceiveBeginPlay
// (Event, Protected, BlueprintEvent)

void ABP_PlayerController_GunFight_C::ReceiveBeginPlay()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PlayerController_GunFight_C", "ReceiveBeginPlay");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_PlayerController_GunFight.BP_PlayerController_GunFight_C.CheatHideUI
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    Hide                                                   (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ABP_PlayerController_GunFight_C::CheatHideUI(bool Hide)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PlayerController_GunFight_C", "CheatHideUI");

	Params::BP_PlayerController_GunFight_C_CheatHideUI Parms{};

	Parms.Hide = Hide;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_PlayerController_GunFight.BP_PlayerController_GunFight_C.Send Kill Scored Event
// (Net, NetReliable, NetClient, BlueprintCallable, BlueprintEvent)
// Parameters:
// class AHumanCharacter*                  Killer                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class AHumanCharacter*                  Victim                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class UClass*                           Instigating_Item                                       (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    Headshot                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// bool                                    Teamkill                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ABP_PlayerController_GunFight_C::Send_Kill_Scored_Event(class AHumanCharacter* Killer, class AHumanCharacter* Victim, class UClass* Instigating_Item, bool Headshot, bool Teamkill)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PlayerController_GunFight_C", "Send Kill Scored Event");

	Params::BP_PlayerController_GunFight_C_Send_Kill_Scored_Event Parms{};

	Parms.Killer = Killer;
	Parms.Victim = Victim;
	Parms.Instigating_Item = Instigating_Item;
	Parms.Headshot = Headshot;
	Parms.Teamkill = Teamkill;

	UObject::ProcessEvent(Func, &Parms);
}

}

