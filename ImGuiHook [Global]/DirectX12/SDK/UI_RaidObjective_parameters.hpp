#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: UI_RaidObjective

#include "Basic.hpp"

#include "ERaidObjectiveState_structs.hpp"
#include "Engine_structs.hpp"
#include "SlateCore_structs.hpp"


namespace SDK::Params
{

// Function UI_RaidObjective.UI_RaidObjective_C.ExecuteUbergraph_UI_RaidObjective
// 0x0068 (0x0068 - 0x0000)
struct UI_RaidObjective_C_ExecuteUbergraph_UI_RaidObjective final
{
public:
	int32                                         EntryPoint;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0004(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGeometry                              K2Node_Event_MyGeometry;                           // 0x0008(0x0038)(IsPlainOldData, NoDestructor)
	float                                         K2Node_Event_InDeltaTime;                          // 0x0040(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_44[0x4];                                       // 0x0044(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UUMGSequencePlayer*                     CallFunc_PlayAnimation_ReturnValue;                // 0x0048(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TDelegate<void()>                             K2Node_CreateDelegate_OutputDelegate;              // 0x0050(0x0010)(ZeroConstructor, NoDestructor)
	class UUMGSequencePlayer*                     CallFunc_PlayAnimation_ReturnValue_1;              // 0x0060(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(UI_RaidObjective_C_ExecuteUbergraph_UI_RaidObjective) == 0x000008, "Wrong alignment on UI_RaidObjective_C_ExecuteUbergraph_UI_RaidObjective");
static_assert(sizeof(UI_RaidObjective_C_ExecuteUbergraph_UI_RaidObjective) == 0x000068, "Wrong size on UI_RaidObjective_C_ExecuteUbergraph_UI_RaidObjective");
static_assert(offsetof(UI_RaidObjective_C_ExecuteUbergraph_UI_RaidObjective, EntryPoint) == 0x000000, "Member 'UI_RaidObjective_C_ExecuteUbergraph_UI_RaidObjective::EntryPoint' has a wrong offset!");
static_assert(offsetof(UI_RaidObjective_C_ExecuteUbergraph_UI_RaidObjective, CallFunc_IsValid_ReturnValue) == 0x000004, "Member 'UI_RaidObjective_C_ExecuteUbergraph_UI_RaidObjective::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(UI_RaidObjective_C_ExecuteUbergraph_UI_RaidObjective, K2Node_Event_MyGeometry) == 0x000008, "Member 'UI_RaidObjective_C_ExecuteUbergraph_UI_RaidObjective::K2Node_Event_MyGeometry' has a wrong offset!");
static_assert(offsetof(UI_RaidObjective_C_ExecuteUbergraph_UI_RaidObjective, K2Node_Event_InDeltaTime) == 0x000040, "Member 'UI_RaidObjective_C_ExecuteUbergraph_UI_RaidObjective::K2Node_Event_InDeltaTime' has a wrong offset!");
static_assert(offsetof(UI_RaidObjective_C_ExecuteUbergraph_UI_RaidObjective, CallFunc_PlayAnimation_ReturnValue) == 0x000048, "Member 'UI_RaidObjective_C_ExecuteUbergraph_UI_RaidObjective::CallFunc_PlayAnimation_ReturnValue' has a wrong offset!");
static_assert(offsetof(UI_RaidObjective_C_ExecuteUbergraph_UI_RaidObjective, K2Node_CreateDelegate_OutputDelegate) == 0x000050, "Member 'UI_RaidObjective_C_ExecuteUbergraph_UI_RaidObjective::K2Node_CreateDelegate_OutputDelegate' has a wrong offset!");
static_assert(offsetof(UI_RaidObjective_C_ExecuteUbergraph_UI_RaidObjective, CallFunc_PlayAnimation_ReturnValue_1) == 0x000060, "Member 'UI_RaidObjective_C_ExecuteUbergraph_UI_RaidObjective::CallFunc_PlayAnimation_ReturnValue_1' has a wrong offset!");

// Function UI_RaidObjective.UI_RaidObjective_C.Tick
// 0x003C (0x003C - 0x0000)
struct UI_RaidObjective_C_Tick final
{
public:
	struct FGeometry                              MyGeometry;                                        // 0x0000(0x0038)(BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor)
	float                                         InDeltaTime;                                       // 0x0038(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(UI_RaidObjective_C_Tick) == 0x000004, "Wrong alignment on UI_RaidObjective_C_Tick");
static_assert(sizeof(UI_RaidObjective_C_Tick) == 0x00003C, "Wrong size on UI_RaidObjective_C_Tick");
static_assert(offsetof(UI_RaidObjective_C_Tick, MyGeometry) == 0x000000, "Member 'UI_RaidObjective_C_Tick::MyGeometry' has a wrong offset!");
static_assert(offsetof(UI_RaidObjective_C_Tick, InDeltaTime) == 0x000038, "Member 'UI_RaidObjective_C_Tick::InDeltaTime' has a wrong offset!");

// Function UI_RaidObjective.UI_RaidObjective_C.Set Progress
// 0x00B0 (0x00B0 - 0x0000)
struct UI_RaidObjective_C_Set_Progress final
{
public:
	float                                         Defender_Progress;                                 // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Attacker_Progress;                                 // 0x0004(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable;                                // 0x0008(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Temp_float_Variable;                               // 0x000C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Greater_FloatFloat_ReturnValue;           // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Greater_FloatFloat_ReturnValue_1;         // 0x0011(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_12[0x2];                                       // 0x0012(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         K2Node_Select_Default;                             // 0x0014(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable_1;                              // 0x0018(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_19[0x3];                                       // 0x0019(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_Divide_FloatFloat_ReturnValue;            // 0x001C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_Select_Default_1;                           // 0x0020(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_24[0x4];                                       // 0x0024(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   CallFunc_Conv_FloatToText_ReturnValue;             // 0x0028(0x0018)()
	float                                         CallFunc_Divide_FloatFloat_ReturnValue_1;          // 0x0040(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_44[0x4];                                       // 0x0044(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FFormatArgumentData                    K2Node_MakeStruct_FormatArgumentData;              // 0x0048(0x0040)(HasGetValueTypeHash)
	TArray<struct FFormatArgumentData>            K2Node_MakeArray_Array;                            // 0x0088(0x0010)(ReferenceParm)
	class FText                                   CallFunc_Format_ReturnValue;                       // 0x0098(0x0018)()
};
static_assert(alignof(UI_RaidObjective_C_Set_Progress) == 0x000008, "Wrong alignment on UI_RaidObjective_C_Set_Progress");
static_assert(sizeof(UI_RaidObjective_C_Set_Progress) == 0x0000B0, "Wrong size on UI_RaidObjective_C_Set_Progress");
static_assert(offsetof(UI_RaidObjective_C_Set_Progress, Defender_Progress) == 0x000000, "Member 'UI_RaidObjective_C_Set_Progress::Defender_Progress' has a wrong offset!");
static_assert(offsetof(UI_RaidObjective_C_Set_Progress, Attacker_Progress) == 0x000004, "Member 'UI_RaidObjective_C_Set_Progress::Attacker_Progress' has a wrong offset!");
static_assert(offsetof(UI_RaidObjective_C_Set_Progress, Temp_bool_Variable) == 0x000008, "Member 'UI_RaidObjective_C_Set_Progress::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(UI_RaidObjective_C_Set_Progress, Temp_float_Variable) == 0x00000C, "Member 'UI_RaidObjective_C_Set_Progress::Temp_float_Variable' has a wrong offset!");
static_assert(offsetof(UI_RaidObjective_C_Set_Progress, CallFunc_Greater_FloatFloat_ReturnValue) == 0x000010, "Member 'UI_RaidObjective_C_Set_Progress::CallFunc_Greater_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(UI_RaidObjective_C_Set_Progress, CallFunc_Greater_FloatFloat_ReturnValue_1) == 0x000011, "Member 'UI_RaidObjective_C_Set_Progress::CallFunc_Greater_FloatFloat_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(UI_RaidObjective_C_Set_Progress, K2Node_Select_Default) == 0x000014, "Member 'UI_RaidObjective_C_Set_Progress::K2Node_Select_Default' has a wrong offset!");
static_assert(offsetof(UI_RaidObjective_C_Set_Progress, Temp_bool_Variable_1) == 0x000018, "Member 'UI_RaidObjective_C_Set_Progress::Temp_bool_Variable_1' has a wrong offset!");
static_assert(offsetof(UI_RaidObjective_C_Set_Progress, CallFunc_Divide_FloatFloat_ReturnValue) == 0x00001C, "Member 'UI_RaidObjective_C_Set_Progress::CallFunc_Divide_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(UI_RaidObjective_C_Set_Progress, K2Node_Select_Default_1) == 0x000020, "Member 'UI_RaidObjective_C_Set_Progress::K2Node_Select_Default_1' has a wrong offset!");
static_assert(offsetof(UI_RaidObjective_C_Set_Progress, CallFunc_Conv_FloatToText_ReturnValue) == 0x000028, "Member 'UI_RaidObjective_C_Set_Progress::CallFunc_Conv_FloatToText_ReturnValue' has a wrong offset!");
static_assert(offsetof(UI_RaidObjective_C_Set_Progress, CallFunc_Divide_FloatFloat_ReturnValue_1) == 0x000040, "Member 'UI_RaidObjective_C_Set_Progress::CallFunc_Divide_FloatFloat_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(UI_RaidObjective_C_Set_Progress, K2Node_MakeStruct_FormatArgumentData) == 0x000048, "Member 'UI_RaidObjective_C_Set_Progress::K2Node_MakeStruct_FormatArgumentData' has a wrong offset!");
static_assert(offsetof(UI_RaidObjective_C_Set_Progress, K2Node_MakeArray_Array) == 0x000088, "Member 'UI_RaidObjective_C_Set_Progress::K2Node_MakeArray_Array' has a wrong offset!");
static_assert(offsetof(UI_RaidObjective_C_Set_Progress, CallFunc_Format_ReturnValue) == 0x000098, "Member 'UI_RaidObjective_C_Set_Progress::CallFunc_Format_ReturnValue' has a wrong offset!");

// Function UI_RaidObjective.UI_RaidObjective_C.Set State
// 0x0003 (0x0003 - 0x0000)
struct UI_RaidObjective_C_Set_State final
{
public:
	ERaidObjectiveState                           Objective_State;                                   // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_SwitchEnum_CmpSuccess;                      // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_NotEqual_ByteByte_ReturnValue;            // 0x0002(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(UI_RaidObjective_C_Set_State) == 0x000001, "Wrong alignment on UI_RaidObjective_C_Set_State");
static_assert(sizeof(UI_RaidObjective_C_Set_State) == 0x000003, "Wrong size on UI_RaidObjective_C_Set_State");
static_assert(offsetof(UI_RaidObjective_C_Set_State, Objective_State) == 0x000000, "Member 'UI_RaidObjective_C_Set_State::Objective_State' has a wrong offset!");
static_assert(offsetof(UI_RaidObjective_C_Set_State, K2Node_SwitchEnum_CmpSuccess) == 0x000001, "Member 'UI_RaidObjective_C_Set_State::K2Node_SwitchEnum_CmpSuccess' has a wrong offset!");
static_assert(offsetof(UI_RaidObjective_C_Set_State, CallFunc_NotEqual_ByteByte_ReturnValue) == 0x000002, "Member 'UI_RaidObjective_C_Set_State::CallFunc_NotEqual_ByteByte_ReturnValue' has a wrong offset!");

}

