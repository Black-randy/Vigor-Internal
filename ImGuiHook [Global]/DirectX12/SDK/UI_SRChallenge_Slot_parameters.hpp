#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: UI_SRChallenge_Slot

#include "Basic.hpp"

#include "UMG_structs.hpp"
#include "E_ShootingChallengeResult_structs.hpp"
#include "SlateCore_structs.hpp"


namespace SDK::Params
{

// Function UI_SRChallenge_Slot.UI_SRChallenge_Slot_C.ExecuteUbergraph_UI_SRChallenge_Slot
// 0x0098 (0x0098 - 0x0000)
struct UI_SRChallenge_Slot_C_ExecuteUbergraph_UI_SRChallenge_Slot final
{
public:
	int32                                         EntryPoint;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UButton*                                K2Node_ComponentBoundEvent_Sender;                 // 0x0008(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Variable;                                 // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Variable_1;                               // 0x0014(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x0018(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue_1;                 // 0x001C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UUserWidget*                            CallFunc_GetParentUserWidget_ReturnValue;          // 0x0020(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UButton*                                K2Node_ComponentBoundEvent_Sender_2;               // 0x0028(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UUI_SRChallenge_Row_C*                  K2Node_DynamicCast_AsUI_SRChallenge_Row;           // 0x0030(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0038(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_Event_IsDesignTime;                         // 0x0039(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsPlatformGroupDesktop_ReturnValue;       // 0x003A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsPlatformGroupDesktop_ReturnValue_1;     // 0x003B(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_3C[0x4];                                       // 0x003C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class UUI_CustomCursor_C*>             CallFunc_GetAllWidgetsOfClass_FoundWidgets;        // 0x0040(0x0010)(ReferenceParm, ContainsInstancedReference)
	bool                                          CallFunc_IsPlatformGroupDesktop_ReturnValue_2;     // 0x0050(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_51[0x7];                                       // 0x0051(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UUI_CustomCursor_C*                     CallFunc_Array_Get_Item;                           // 0x0058(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x0060(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_64[0x4];                                       // 0x0064(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class UUI_CustomCursor_C*>             CallFunc_GetAllWidgetsOfClass_FoundWidgets_1;      // 0x0068(0x0010)(ReferenceParm, ContainsInstancedReference)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x0078(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_79[0x7];                                       // 0x0079(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UUI_CustomCursor_C*                     CallFunc_Array_Get_Item_1;                         // 0x0080(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue_1;               // 0x0088(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue_1;                // 0x008C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_8D[0x3];                                       // 0x008D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UButton*                                K2Node_ComponentBoundEvent_Sender_1;               // 0x0090(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(UI_SRChallenge_Slot_C_ExecuteUbergraph_UI_SRChallenge_Slot) == 0x000008, "Wrong alignment on UI_SRChallenge_Slot_C_ExecuteUbergraph_UI_SRChallenge_Slot");
static_assert(sizeof(UI_SRChallenge_Slot_C_ExecuteUbergraph_UI_SRChallenge_Slot) == 0x000098, "Wrong size on UI_SRChallenge_Slot_C_ExecuteUbergraph_UI_SRChallenge_Slot");
static_assert(offsetof(UI_SRChallenge_Slot_C_ExecuteUbergraph_UI_SRChallenge_Slot, EntryPoint) == 0x000000, "Member 'UI_SRChallenge_Slot_C_ExecuteUbergraph_UI_SRChallenge_Slot::EntryPoint' has a wrong offset!");
static_assert(offsetof(UI_SRChallenge_Slot_C_ExecuteUbergraph_UI_SRChallenge_Slot, K2Node_ComponentBoundEvent_Sender) == 0x000008, "Member 'UI_SRChallenge_Slot_C_ExecuteUbergraph_UI_SRChallenge_Slot::K2Node_ComponentBoundEvent_Sender' has a wrong offset!");
static_assert(offsetof(UI_SRChallenge_Slot_C_ExecuteUbergraph_UI_SRChallenge_Slot, Temp_int_Variable) == 0x000010, "Member 'UI_SRChallenge_Slot_C_ExecuteUbergraph_UI_SRChallenge_Slot::Temp_int_Variable' has a wrong offset!");
static_assert(offsetof(UI_SRChallenge_Slot_C_ExecuteUbergraph_UI_SRChallenge_Slot, Temp_int_Variable_1) == 0x000014, "Member 'UI_SRChallenge_Slot_C_ExecuteUbergraph_UI_SRChallenge_Slot::Temp_int_Variable_1' has a wrong offset!");
static_assert(offsetof(UI_SRChallenge_Slot_C_ExecuteUbergraph_UI_SRChallenge_Slot, CallFunc_Add_IntInt_ReturnValue) == 0x000018, "Member 'UI_SRChallenge_Slot_C_ExecuteUbergraph_UI_SRChallenge_Slot::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(UI_SRChallenge_Slot_C_ExecuteUbergraph_UI_SRChallenge_Slot, CallFunc_Add_IntInt_ReturnValue_1) == 0x00001C, "Member 'UI_SRChallenge_Slot_C_ExecuteUbergraph_UI_SRChallenge_Slot::CallFunc_Add_IntInt_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(UI_SRChallenge_Slot_C_ExecuteUbergraph_UI_SRChallenge_Slot, CallFunc_GetParentUserWidget_ReturnValue) == 0x000020, "Member 'UI_SRChallenge_Slot_C_ExecuteUbergraph_UI_SRChallenge_Slot::CallFunc_GetParentUserWidget_ReturnValue' has a wrong offset!");
static_assert(offsetof(UI_SRChallenge_Slot_C_ExecuteUbergraph_UI_SRChallenge_Slot, K2Node_ComponentBoundEvent_Sender_2) == 0x000028, "Member 'UI_SRChallenge_Slot_C_ExecuteUbergraph_UI_SRChallenge_Slot::K2Node_ComponentBoundEvent_Sender_2' has a wrong offset!");
static_assert(offsetof(UI_SRChallenge_Slot_C_ExecuteUbergraph_UI_SRChallenge_Slot, K2Node_DynamicCast_AsUI_SRChallenge_Row) == 0x000030, "Member 'UI_SRChallenge_Slot_C_ExecuteUbergraph_UI_SRChallenge_Slot::K2Node_DynamicCast_AsUI_SRChallenge_Row' has a wrong offset!");
static_assert(offsetof(UI_SRChallenge_Slot_C_ExecuteUbergraph_UI_SRChallenge_Slot, K2Node_DynamicCast_bSuccess) == 0x000038, "Member 'UI_SRChallenge_Slot_C_ExecuteUbergraph_UI_SRChallenge_Slot::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(UI_SRChallenge_Slot_C_ExecuteUbergraph_UI_SRChallenge_Slot, K2Node_Event_IsDesignTime) == 0x000039, "Member 'UI_SRChallenge_Slot_C_ExecuteUbergraph_UI_SRChallenge_Slot::K2Node_Event_IsDesignTime' has a wrong offset!");
static_assert(offsetof(UI_SRChallenge_Slot_C_ExecuteUbergraph_UI_SRChallenge_Slot, CallFunc_IsPlatformGroupDesktop_ReturnValue) == 0x00003A, "Member 'UI_SRChallenge_Slot_C_ExecuteUbergraph_UI_SRChallenge_Slot::CallFunc_IsPlatformGroupDesktop_ReturnValue' has a wrong offset!");
static_assert(offsetof(UI_SRChallenge_Slot_C_ExecuteUbergraph_UI_SRChallenge_Slot, CallFunc_IsPlatformGroupDesktop_ReturnValue_1) == 0x00003B, "Member 'UI_SRChallenge_Slot_C_ExecuteUbergraph_UI_SRChallenge_Slot::CallFunc_IsPlatformGroupDesktop_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(UI_SRChallenge_Slot_C_ExecuteUbergraph_UI_SRChallenge_Slot, CallFunc_GetAllWidgetsOfClass_FoundWidgets) == 0x000040, "Member 'UI_SRChallenge_Slot_C_ExecuteUbergraph_UI_SRChallenge_Slot::CallFunc_GetAllWidgetsOfClass_FoundWidgets' has a wrong offset!");
static_assert(offsetof(UI_SRChallenge_Slot_C_ExecuteUbergraph_UI_SRChallenge_Slot, CallFunc_IsPlatformGroupDesktop_ReturnValue_2) == 0x000050, "Member 'UI_SRChallenge_Slot_C_ExecuteUbergraph_UI_SRChallenge_Slot::CallFunc_IsPlatformGroupDesktop_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(UI_SRChallenge_Slot_C_ExecuteUbergraph_UI_SRChallenge_Slot, CallFunc_Array_Get_Item) == 0x000058, "Member 'UI_SRChallenge_Slot_C_ExecuteUbergraph_UI_SRChallenge_Slot::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(UI_SRChallenge_Slot_C_ExecuteUbergraph_UI_SRChallenge_Slot, CallFunc_Array_Length_ReturnValue) == 0x000060, "Member 'UI_SRChallenge_Slot_C_ExecuteUbergraph_UI_SRChallenge_Slot::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(UI_SRChallenge_Slot_C_ExecuteUbergraph_UI_SRChallenge_Slot, CallFunc_GetAllWidgetsOfClass_FoundWidgets_1) == 0x000068, "Member 'UI_SRChallenge_Slot_C_ExecuteUbergraph_UI_SRChallenge_Slot::CallFunc_GetAllWidgetsOfClass_FoundWidgets_1' has a wrong offset!");
static_assert(offsetof(UI_SRChallenge_Slot_C_ExecuteUbergraph_UI_SRChallenge_Slot, CallFunc_Less_IntInt_ReturnValue) == 0x000078, "Member 'UI_SRChallenge_Slot_C_ExecuteUbergraph_UI_SRChallenge_Slot::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(UI_SRChallenge_Slot_C_ExecuteUbergraph_UI_SRChallenge_Slot, CallFunc_Array_Get_Item_1) == 0x000080, "Member 'UI_SRChallenge_Slot_C_ExecuteUbergraph_UI_SRChallenge_Slot::CallFunc_Array_Get_Item_1' has a wrong offset!");
static_assert(offsetof(UI_SRChallenge_Slot_C_ExecuteUbergraph_UI_SRChallenge_Slot, CallFunc_Array_Length_ReturnValue_1) == 0x000088, "Member 'UI_SRChallenge_Slot_C_ExecuteUbergraph_UI_SRChallenge_Slot::CallFunc_Array_Length_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(UI_SRChallenge_Slot_C_ExecuteUbergraph_UI_SRChallenge_Slot, CallFunc_Less_IntInt_ReturnValue_1) == 0x00008C, "Member 'UI_SRChallenge_Slot_C_ExecuteUbergraph_UI_SRChallenge_Slot::CallFunc_Less_IntInt_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(UI_SRChallenge_Slot_C_ExecuteUbergraph_UI_SRChallenge_Slot, K2Node_ComponentBoundEvent_Sender_1) == 0x000090, "Member 'UI_SRChallenge_Slot_C_ExecuteUbergraph_UI_SRChallenge_Slot::K2Node_ComponentBoundEvent_Sender_1' has a wrong offset!");

// Function UI_SRChallenge_Slot.UI_SRChallenge_Slot_C.BndEvt__UI_SRChallenge_Slot_SlotButton_K2Node_ComponentBoundEvent_3_OnButtonHoverEvent__DelegateSignature
// 0x0008 (0x0008 - 0x0000)
struct UI_SRChallenge_Slot_C_BndEvt__UI_SRChallenge_Slot_SlotButton_K2Node_ComponentBoundEvent_3_OnButtonHoverEvent__DelegateSignature final
{
public:
	class UButton*                                Sender;                                            // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(UI_SRChallenge_Slot_C_BndEvt__UI_SRChallenge_Slot_SlotButton_K2Node_ComponentBoundEvent_3_OnButtonHoverEvent__DelegateSignature) == 0x000008, "Wrong alignment on UI_SRChallenge_Slot_C_BndEvt__UI_SRChallenge_Slot_SlotButton_K2Node_ComponentBoundEvent_3_OnButtonHoverEvent__DelegateSignature");
static_assert(sizeof(UI_SRChallenge_Slot_C_BndEvt__UI_SRChallenge_Slot_SlotButton_K2Node_ComponentBoundEvent_3_OnButtonHoverEvent__DelegateSignature) == 0x000008, "Wrong size on UI_SRChallenge_Slot_C_BndEvt__UI_SRChallenge_Slot_SlotButton_K2Node_ComponentBoundEvent_3_OnButtonHoverEvent__DelegateSignature");
static_assert(offsetof(UI_SRChallenge_Slot_C_BndEvt__UI_SRChallenge_Slot_SlotButton_K2Node_ComponentBoundEvent_3_OnButtonHoverEvent__DelegateSignature, Sender) == 0x000000, "Member 'UI_SRChallenge_Slot_C_BndEvt__UI_SRChallenge_Slot_SlotButton_K2Node_ComponentBoundEvent_3_OnButtonHoverEvent__DelegateSignature::Sender' has a wrong offset!");

// Function UI_SRChallenge_Slot.UI_SRChallenge_Slot_C.BndEvt__UI_SRChallenge_Slot_SlotButton_K2Node_ComponentBoundEvent_0_OnButtonHoverEvent__DelegateSignature
// 0x0008 (0x0008 - 0x0000)
struct UI_SRChallenge_Slot_C_BndEvt__UI_SRChallenge_Slot_SlotButton_K2Node_ComponentBoundEvent_0_OnButtonHoverEvent__DelegateSignature final
{
public:
	class UButton*                                Sender;                                            // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(UI_SRChallenge_Slot_C_BndEvt__UI_SRChallenge_Slot_SlotButton_K2Node_ComponentBoundEvent_0_OnButtonHoverEvent__DelegateSignature) == 0x000008, "Wrong alignment on UI_SRChallenge_Slot_C_BndEvt__UI_SRChallenge_Slot_SlotButton_K2Node_ComponentBoundEvent_0_OnButtonHoverEvent__DelegateSignature");
static_assert(sizeof(UI_SRChallenge_Slot_C_BndEvt__UI_SRChallenge_Slot_SlotButton_K2Node_ComponentBoundEvent_0_OnButtonHoverEvent__DelegateSignature) == 0x000008, "Wrong size on UI_SRChallenge_Slot_C_BndEvt__UI_SRChallenge_Slot_SlotButton_K2Node_ComponentBoundEvent_0_OnButtonHoverEvent__DelegateSignature");
static_assert(offsetof(UI_SRChallenge_Slot_C_BndEvt__UI_SRChallenge_Slot_SlotButton_K2Node_ComponentBoundEvent_0_OnButtonHoverEvent__DelegateSignature, Sender) == 0x000000, "Member 'UI_SRChallenge_Slot_C_BndEvt__UI_SRChallenge_Slot_SlotButton_K2Node_ComponentBoundEvent_0_OnButtonHoverEvent__DelegateSignature::Sender' has a wrong offset!");

// Function UI_SRChallenge_Slot.UI_SRChallenge_Slot_C.PreConstruct
// 0x0001 (0x0001 - 0x0000)
struct UI_SRChallenge_Slot_C_PreConstruct final
{
public:
	bool                                          IsDesignTime;                                      // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(UI_SRChallenge_Slot_C_PreConstruct) == 0x000001, "Wrong alignment on UI_SRChallenge_Slot_C_PreConstruct");
static_assert(sizeof(UI_SRChallenge_Slot_C_PreConstruct) == 0x000001, "Wrong size on UI_SRChallenge_Slot_C_PreConstruct");
static_assert(offsetof(UI_SRChallenge_Slot_C_PreConstruct, IsDesignTime) == 0x000000, "Member 'UI_SRChallenge_Slot_C_PreConstruct::IsDesignTime' has a wrong offset!");

// Function UI_SRChallenge_Slot.UI_SRChallenge_Slot_C.BndEvt__SlotButton_K2Node_ComponentBoundEvent_1_OnButtonFocusEvent__DelegateSignature
// 0x0008 (0x0008 - 0x0000)
struct UI_SRChallenge_Slot_C_BndEvt__SlotButton_K2Node_ComponentBoundEvent_1_OnButtonFocusEvent__DelegateSignature final
{
public:
	class UButton*                                Sender;                                            // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(UI_SRChallenge_Slot_C_BndEvt__SlotButton_K2Node_ComponentBoundEvent_1_OnButtonFocusEvent__DelegateSignature) == 0x000008, "Wrong alignment on UI_SRChallenge_Slot_C_BndEvt__SlotButton_K2Node_ComponentBoundEvent_1_OnButtonFocusEvent__DelegateSignature");
static_assert(sizeof(UI_SRChallenge_Slot_C_BndEvt__SlotButton_K2Node_ComponentBoundEvent_1_OnButtonFocusEvent__DelegateSignature) == 0x000008, "Wrong size on UI_SRChallenge_Slot_C_BndEvt__SlotButton_K2Node_ComponentBoundEvent_1_OnButtonFocusEvent__DelegateSignature");
static_assert(offsetof(UI_SRChallenge_Slot_C_BndEvt__SlotButton_K2Node_ComponentBoundEvent_1_OnButtonFocusEvent__DelegateSignature, Sender) == 0x000000, "Member 'UI_SRChallenge_Slot_C_BndEvt__SlotButton_K2Node_ComponentBoundEvent_1_OnButtonFocusEvent__DelegateSignature::Sender' has a wrong offset!");

// Function UI_SRChallenge_Slot.UI_SRChallenge_Slot_C.FillRank
// 0x0110 (0x0110 - 0x0000)
struct UI_SRChallenge_Slot_C_FillRank final
{
public:
	E_ShootingChallengeResult                     Rank_0;                                            // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSlateBrush                            RankBrush;                                         // 0x0008(0x0088)(Edit, BlueprintVisible)
	bool                                          K2Node_SwitchEnum_CmpSuccess;                      // 0x0090(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_91[0x7];                                       // 0x0091(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSlateColor                            K2Node_MakeStruct_SlateColor;                      // 0x0098(0x0028)()
	struct FSlateColor                            K2Node_MakeStruct_SlateColor_1;                    // 0x00C0(0x0028)()
	struct FSlateColor                            K2Node_MakeStruct_SlateColor_2;                    // 0x00E8(0x0028)()
};
static_assert(alignof(UI_SRChallenge_Slot_C_FillRank) == 0x000008, "Wrong alignment on UI_SRChallenge_Slot_C_FillRank");
static_assert(sizeof(UI_SRChallenge_Slot_C_FillRank) == 0x000110, "Wrong size on UI_SRChallenge_Slot_C_FillRank");
static_assert(offsetof(UI_SRChallenge_Slot_C_FillRank, Rank_0) == 0x000000, "Member 'UI_SRChallenge_Slot_C_FillRank::Rank_0' has a wrong offset!");
static_assert(offsetof(UI_SRChallenge_Slot_C_FillRank, RankBrush) == 0x000008, "Member 'UI_SRChallenge_Slot_C_FillRank::RankBrush' has a wrong offset!");
static_assert(offsetof(UI_SRChallenge_Slot_C_FillRank, K2Node_SwitchEnum_CmpSuccess) == 0x000090, "Member 'UI_SRChallenge_Slot_C_FillRank::K2Node_SwitchEnum_CmpSuccess' has a wrong offset!");
static_assert(offsetof(UI_SRChallenge_Slot_C_FillRank, K2Node_MakeStruct_SlateColor) == 0x000098, "Member 'UI_SRChallenge_Slot_C_FillRank::K2Node_MakeStruct_SlateColor' has a wrong offset!");
static_assert(offsetof(UI_SRChallenge_Slot_C_FillRank, K2Node_MakeStruct_SlateColor_1) == 0x0000C0, "Member 'UI_SRChallenge_Slot_C_FillRank::K2Node_MakeStruct_SlateColor_1' has a wrong offset!");
static_assert(offsetof(UI_SRChallenge_Slot_C_FillRank, K2Node_MakeStruct_SlateColor_2) == 0x0000E8, "Member 'UI_SRChallenge_Slot_C_FillRank::K2Node_MakeStruct_SlateColor_2' has a wrong offset!");

// Function UI_SRChallenge_Slot.UI_SRChallenge_Slot_C.FillName
// 0x0048 (0x0048 - 0x0000)
struct UI_SRChallenge_Slot_C_FillName final
{
public:
	int32                                         Name_0;                                            // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Variable;                                 // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Clamp_ReturnValue;                        // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UTexture2D*                             Temp_object_Variable;                              // 0x0010(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UTexture2D*                             Temp_object_Variable_1;                            // 0x0018(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UTexture2D*                             Temp_object_Variable_2;                            // 0x0020(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UTexture2D*                             Temp_object_Variable_3;                            // 0x0028(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UTexture2D*                             Temp_object_Variable_4;                            // 0x0030(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UTexture2D*                             Temp_object_Variable_5;                            // 0x0038(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UTexture2D*                             K2Node_Select_Default;                             // 0x0040(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(UI_SRChallenge_Slot_C_FillName) == 0x000008, "Wrong alignment on UI_SRChallenge_Slot_C_FillName");
static_assert(sizeof(UI_SRChallenge_Slot_C_FillName) == 0x000048, "Wrong size on UI_SRChallenge_Slot_C_FillName");
static_assert(offsetof(UI_SRChallenge_Slot_C_FillName, Name_0) == 0x000000, "Member 'UI_SRChallenge_Slot_C_FillName::Name_0' has a wrong offset!");
static_assert(offsetof(UI_SRChallenge_Slot_C_FillName, Temp_int_Variable) == 0x000004, "Member 'UI_SRChallenge_Slot_C_FillName::Temp_int_Variable' has a wrong offset!");
static_assert(offsetof(UI_SRChallenge_Slot_C_FillName, CallFunc_Clamp_ReturnValue) == 0x000008, "Member 'UI_SRChallenge_Slot_C_FillName::CallFunc_Clamp_ReturnValue' has a wrong offset!");
static_assert(offsetof(UI_SRChallenge_Slot_C_FillName, Temp_object_Variable) == 0x000010, "Member 'UI_SRChallenge_Slot_C_FillName::Temp_object_Variable' has a wrong offset!");
static_assert(offsetof(UI_SRChallenge_Slot_C_FillName, Temp_object_Variable_1) == 0x000018, "Member 'UI_SRChallenge_Slot_C_FillName::Temp_object_Variable_1' has a wrong offset!");
static_assert(offsetof(UI_SRChallenge_Slot_C_FillName, Temp_object_Variable_2) == 0x000020, "Member 'UI_SRChallenge_Slot_C_FillName::Temp_object_Variable_2' has a wrong offset!");
static_assert(offsetof(UI_SRChallenge_Slot_C_FillName, Temp_object_Variable_3) == 0x000028, "Member 'UI_SRChallenge_Slot_C_FillName::Temp_object_Variable_3' has a wrong offset!");
static_assert(offsetof(UI_SRChallenge_Slot_C_FillName, Temp_object_Variable_4) == 0x000030, "Member 'UI_SRChallenge_Slot_C_FillName::Temp_object_Variable_4' has a wrong offset!");
static_assert(offsetof(UI_SRChallenge_Slot_C_FillName, Temp_object_Variable_5) == 0x000038, "Member 'UI_SRChallenge_Slot_C_FillName::Temp_object_Variable_5' has a wrong offset!");
static_assert(offsetof(UI_SRChallenge_Slot_C_FillName, K2Node_Select_Default) == 0x000040, "Member 'UI_SRChallenge_Slot_C_FillName::K2Node_Select_Default' has a wrong offset!");

// Function UI_SRChallenge_Slot.UI_SRChallenge_Slot_C.ShowFocus
// 0x0005 (0x0005 - 0x0000)
struct UI_SRChallenge_Slot_C_ShowFocus final
{
public:
	bool                                          Show;                                              // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable;                                // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	ESlateVisibility                              Temp_byte_Variable;                                // 0x0002(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              Temp_byte_Variable_1;                              // 0x0003(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              K2Node_Select_Default;                             // 0x0004(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(UI_SRChallenge_Slot_C_ShowFocus) == 0x000001, "Wrong alignment on UI_SRChallenge_Slot_C_ShowFocus");
static_assert(sizeof(UI_SRChallenge_Slot_C_ShowFocus) == 0x000005, "Wrong size on UI_SRChallenge_Slot_C_ShowFocus");
static_assert(offsetof(UI_SRChallenge_Slot_C_ShowFocus, Show) == 0x000000, "Member 'UI_SRChallenge_Slot_C_ShowFocus::Show' has a wrong offset!");
static_assert(offsetof(UI_SRChallenge_Slot_C_ShowFocus, Temp_bool_Variable) == 0x000001, "Member 'UI_SRChallenge_Slot_C_ShowFocus::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(UI_SRChallenge_Slot_C_ShowFocus, Temp_byte_Variable) == 0x000002, "Member 'UI_SRChallenge_Slot_C_ShowFocus::Temp_byte_Variable' has a wrong offset!");
static_assert(offsetof(UI_SRChallenge_Slot_C_ShowFocus, Temp_byte_Variable_1) == 0x000003, "Member 'UI_SRChallenge_Slot_C_ShowFocus::Temp_byte_Variable_1' has a wrong offset!");
static_assert(offsetof(UI_SRChallenge_Slot_C_ShowFocus, K2Node_Select_Default) == 0x000004, "Member 'UI_SRChallenge_Slot_C_ShowFocus::K2Node_Select_Default' has a wrong offset!");

// Function UI_SRChallenge_Slot.UI_SRChallenge_Slot_C.SlotEnabled
// 0x0005 (0x0005 - 0x0000)
struct UI_SRChallenge_Slot_C_SlotEnabled final
{
public:
	bool                                          Enabled;                                           // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable;                                // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	ESlateVisibility                              Temp_byte_Variable;                                // 0x0002(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              Temp_byte_Variable_1;                              // 0x0003(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              K2Node_Select_Default;                             // 0x0004(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(UI_SRChallenge_Slot_C_SlotEnabled) == 0x000001, "Wrong alignment on UI_SRChallenge_Slot_C_SlotEnabled");
static_assert(sizeof(UI_SRChallenge_Slot_C_SlotEnabled) == 0x000005, "Wrong size on UI_SRChallenge_Slot_C_SlotEnabled");
static_assert(offsetof(UI_SRChallenge_Slot_C_SlotEnabled, Enabled) == 0x000000, "Member 'UI_SRChallenge_Slot_C_SlotEnabled::Enabled' has a wrong offset!");
static_assert(offsetof(UI_SRChallenge_Slot_C_SlotEnabled, Temp_bool_Variable) == 0x000001, "Member 'UI_SRChallenge_Slot_C_SlotEnabled::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(UI_SRChallenge_Slot_C_SlotEnabled, Temp_byte_Variable) == 0x000002, "Member 'UI_SRChallenge_Slot_C_SlotEnabled::Temp_byte_Variable' has a wrong offset!");
static_assert(offsetof(UI_SRChallenge_Slot_C_SlotEnabled, Temp_byte_Variable_1) == 0x000003, "Member 'UI_SRChallenge_Slot_C_SlotEnabled::Temp_byte_Variable_1' has a wrong offset!");
static_assert(offsetof(UI_SRChallenge_Slot_C_SlotEnabled, K2Node_Select_Default) == 0x000004, "Member 'UI_SRChallenge_Slot_C_SlotEnabled::K2Node_Select_Default' has a wrong offset!");

}

