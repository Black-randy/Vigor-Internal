#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_ChallengeCondition_LootGenericLootable

#include "Basic.hpp"

#include "BP_ChallengeCondition_LootGenericLootable_classes.hpp"
#include "BP_ChallengeCondition_LootGenericLootable_parameters.hpp"


namespace SDK
{

// Function BP_ChallengeCondition_LootGenericLootable.BP_ChallengeCondition_LootGenericLootable_C.ExecuteUbergraph_BP_ChallengeCondition_LootGenericLootable
// (Final, UbergraphFunction, HasDefaults)
// Parameters:
// int32                                   EntryPoint                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_ChallengeCondition_LootGenericLootable_C::ExecuteUbergraph_BP_ChallengeCondition_LootGenericLootable(int32 EntryPoint)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_ChallengeCondition_LootGenericLootable_C", "ExecuteUbergraph_BP_ChallengeCondition_LootGenericLootable");

	Params::BP_ChallengeCondition_LootGenericLootable_C_ExecuteUbergraph_BP_ChallengeCondition_LootGenericLootable Parms{};

	Parms.EntryPoint = EntryPoint;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_ChallengeCondition_LootGenericLootable.BP_ChallengeCondition_LootGenericLootable_C.Generic Lootable Object Inventory Accessed
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// class ALootable*                        Lootable_Object                                        (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_ChallengeCondition_LootGenericLootable_C::Generic_Lootable_Object_Inventory_Accessed(class ALootable* Lootable_Object)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_ChallengeCondition_LootGenericLootable_C", "Generic Lootable Object Inventory Accessed");

	Params::BP_ChallengeCondition_LootGenericLootable_C_Generic_Lootable_Object_Inventory_Accessed Parms{};

	Parms.Lootable_Object = Lootable_Object;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_ChallengeCondition_LootGenericLootable.BP_ChallengeCondition_LootGenericLootable_C.ReceiveBeginPlay
// (Event, Protected, BlueprintEvent)

void ABP_ChallengeCondition_LootGenericLootable_C::ReceiveBeginPlay()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_ChallengeCondition_LootGenericLootable_C", "ReceiveBeginPlay");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_ChallengeCondition_LootGenericLootable.BP_ChallengeCondition_LootGenericLootable_C.Get Maximum Progress
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// int32                                   Maximum_Progress                                       (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_ChallengeCondition_LootGenericLootable_C::Get_Maximum_Progress(int32* Maximum_Progress)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_ChallengeCondition_LootGenericLootable_C", "Get Maximum Progress");

	Params::BP_ChallengeCondition_LootGenericLootable_C_Get_Maximum_Progress Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Maximum_Progress != nullptr)
		*Maximum_Progress = Parms.Maximum_Progress;
}


// Function BP_ChallengeCondition_LootGenericLootable.BP_ChallengeCondition_LootGenericLootable_C.Get Condition Text
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// class FText                             Condition_Text                                         (Parm, OutParm)

void ABP_ChallengeCondition_LootGenericLootable_C::Get_Condition_Text(class FText* Condition_Text)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_ChallengeCondition_LootGenericLootable_C", "Get Condition Text");

	Params::BP_ChallengeCondition_LootGenericLootable_C_Get_Condition_Text Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Condition_Text != nullptr)
		*Condition_Text = std::move(Parms.Condition_Text);
}

}

