#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_BulletManager

#include "Basic.hpp"

#include "FlameUI_structs.hpp"
#include "CoreUObject_structs.hpp"
#include "Flame_structs.hpp"
#include "Flame_classes.hpp"
#include "Engine_structs.hpp"
#include "PhysicsCore_structs.hpp"


namespace SDK
{

// BlueprintGeneratedClass BP_BulletManager.BP_BulletManager_C
// 0x0078 (0x109340 - 0x1092C8)
class ABP_BulletManager_C final : public ABulletManager
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x1092C8(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	float                                         DecalBaseScale;                                    // 0x1092D0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector2D                              RandomScaleOffset;                                 // 0x1092D4(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector2D                              RandomRotationAngleDegrees;                        // 0x1092DC(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector2D                              RandomFrame;                                       // 0x1092E4(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EPhysicalSurface                              HitSurfaceType;                                    // 0x1092EC(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CheatShowHitInfo;                                  // 0x1092ED(0x0001)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_1092EE[0x2];                                   // 0x1092EE(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         MinDecalScaleMultiplier;                           // 0x1092F0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         MaxDecalScaleMultiplier;                           // 0x1092F4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                ImpactPoint;                                       // 0x1092F8(0x000C)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FHitResultSimplified                   Test;                                              // 0x109304(0x003C)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, ContainsInstancedReference)

public:
	void ExecuteUbergraph_BP_BulletManager(int32 EntryPoint);
	void ReceiveBeginPlay();
	void OnProjectileFlybyGeneric(EProjectileType ProjectileType, const struct FVector& ProjectileOriginLocation, const class AHumanCharacter* PlayerVictim, const class AHumanCharacter* PlayerInstigator, bool bPlayerIsBeingHit, const struct FHitResultSimplified& HitOptimised);
	void CustomEvent_0(const struct FHitResultSimplified& HitResultOptimised, const struct FAmmoTypeConfiguration& BulletTypeConfig, const class AHumanCharacter* OwnerCharacter, bool bIsPenetrating, bool bIsDeformed);
	void OnBulletHitOwningClientEvent(const struct FHitResultSimplified& HitResultOptimised, const struct FAmmoTypeConfiguration& BulletTypeConfig, const class AHumanCharacter* OwnerCharacter, bool bIsPenetrating, bool bIsDeformed);
	void HitEvent(const struct FHitResultSimplified& HitResultOptimised, const struct FAmmoTypeConfiguration& BulletTypeConfig, const class AHumanCharacter* OwnerCharacter, bool bIsPenetrating, bool bIsDeformed, const struct FVector& RelativeHitPosition);
	void StopArrowWhizz(class UAudioComponent* WhizzSound);
	void CalcDecalScale(float* DecalScale);
	struct FRotator CalcDecalRotation(const struct FVector& InVec, const struct FVector& Axis);
	void OnBulletHitEventBP(const struct FVector& ImpactPoint_0, const struct FVector& ImpactNormal, EPhysicalSurface SurfaceType, class AHumanCharacter* Owner_0, const struct FAmmoTypeConfiguration& BulletTypeConfig, bool IsPenetrated);
	void SetHitSurfaceType(class AActor* HitActor, class UPhysicalMaterial* PhysicalMaterial, EPhysicalSurface HitSurfaceType_0);
	void GetHitSound(EPhysicalSurface SurfaceType, const struct FAmmoTypeConfiguration& AmmoType, class FName BoneName, class USoundBase** Sound, class USoundConcurrency** Concurrency);
	class UAudioComponent* PlayArrowWhizz(const struct FVector& WhizzLocation, float ArrowSpeed);
	void PlayHitSound(const struct FVector& InputPin, EPhysicalSurface SurfaceType, const struct FAmmoTypeConfiguration& AmmoType, class FName BoneName, bool IsPenetrating, bool IsDeformed, bool IsLocallyControlled);
	class UAudioComponent* PlayBulletSonicCrack(const struct FVector& SonicCrackLocation, const struct FVector& BulletOrigin, float BulletSpeed, const class AHumanCharacter* PlayerVictim, bool bPlayerIsBeingHit, bool bIsProjectileDeformed);
	class UAudioComponent* PlayBulletWhizz(const struct FVector& WhizzLocation, const struct FVector& BulletOrigin, float BulletSpeed, const class AHumanCharacter* PlayerVictim, bool bPlayerIsBeingHit, bool bIsProjectileDeformed);
	void ShowHitDecals(struct FAmmoTypeConfiguration& BulletTypeConfig, class AHumanCharacter*& OwnerCharacter, bool IsPenetrating, bool IsDeformed, bool IsRelative, struct FVector& RelativeHitPosition, struct FHitResultSimplified& HitResultOptimised);
	void Player_Has_Armor_Equiped(const struct FHitResultSimplified& HitOptimised, bool* Has_Armor_Equiped);
	void UpdateImpactEmitters(class AHumanCharacter* HumanOwner, EPhysicalSurface Surface, const struct FVector& Location, const struct FRotator& Rotator, const struct FVector& Scale);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BP_BulletManager_C">();
	}
	static class ABP_BulletManager_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<ABP_BulletManager_C>();
	}
};
static_assert(alignof(ABP_BulletManager_C) == 0x000008, "Wrong alignment on ABP_BulletManager_C");
static_assert(sizeof(ABP_BulletManager_C) == 0x109340, "Wrong size on ABP_BulletManager_C");
static_assert(offsetof(ABP_BulletManager_C, UberGraphFrame) == 0x1092C8, "Member 'ABP_BulletManager_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(ABP_BulletManager_C, DecalBaseScale) == 0x1092D0, "Member 'ABP_BulletManager_C::DecalBaseScale' has a wrong offset!");
static_assert(offsetof(ABP_BulletManager_C, RandomScaleOffset) == 0x1092D4, "Member 'ABP_BulletManager_C::RandomScaleOffset' has a wrong offset!");
static_assert(offsetof(ABP_BulletManager_C, RandomRotationAngleDegrees) == 0x1092DC, "Member 'ABP_BulletManager_C::RandomRotationAngleDegrees' has a wrong offset!");
static_assert(offsetof(ABP_BulletManager_C, RandomFrame) == 0x1092E4, "Member 'ABP_BulletManager_C::RandomFrame' has a wrong offset!");
static_assert(offsetof(ABP_BulletManager_C, HitSurfaceType) == 0x1092EC, "Member 'ABP_BulletManager_C::HitSurfaceType' has a wrong offset!");
static_assert(offsetof(ABP_BulletManager_C, CheatShowHitInfo) == 0x1092ED, "Member 'ABP_BulletManager_C::CheatShowHitInfo' has a wrong offset!");
static_assert(offsetof(ABP_BulletManager_C, MinDecalScaleMultiplier) == 0x1092F0, "Member 'ABP_BulletManager_C::MinDecalScaleMultiplier' has a wrong offset!");
static_assert(offsetof(ABP_BulletManager_C, MaxDecalScaleMultiplier) == 0x1092F4, "Member 'ABP_BulletManager_C::MaxDecalScaleMultiplier' has a wrong offset!");
static_assert(offsetof(ABP_BulletManager_C, ImpactPoint) == 0x1092F8, "Member 'ABP_BulletManager_C::ImpactPoint' has a wrong offset!");
static_assert(offsetof(ABP_BulletManager_C, Test) == 0x109304, "Member 'ABP_BulletManager_C::Test' has a wrong offset!");

}

