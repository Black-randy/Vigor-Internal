#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: UI_GunFight_TeamIndicator

#include "Basic.hpp"

#include "UI_GunFight_TeamIndicator_classes.hpp"
#include "UI_GunFight_TeamIndicator_parameters.hpp"


namespace SDK
{

// Function UI_GunFight_TeamIndicator.UI_GunFight_TeamIndicator_C.ExecuteUbergraph_UI_GunFight_TeamIndicator
// (Final, UbergraphFunction, HasDefaults)
// Parameters:
// int32                                   EntryPoint                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UUI_GunFight_TeamIndicator_C::ExecuteUbergraph_UI_GunFight_TeamIndicator(int32 EntryPoint)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UI_GunFight_TeamIndicator_C", "ExecuteUbergraph_UI_GunFight_TeamIndicator");

	Params::UI_GunFight_TeamIndicator_C_ExecuteUbergraph_UI_GunFight_TeamIndicator Parms{};

	Parms.EntryPoint = EntryPoint;

	UObject::ProcessEvent(Func, &Parms);
}


// Function UI_GunFight_TeamIndicator.UI_GunFight_TeamIndicator_C.Destruct
// (BlueprintCosmetic, Event, Public, BlueprintEvent)

void UUI_GunFight_TeamIndicator_C::Destruct()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UI_GunFight_TeamIndicator_C", "Destruct");

	UObject::ProcessEvent(Func, nullptr);
}


// Function UI_GunFight_TeamIndicator.UI_GunFight_TeamIndicator_C.Set Team
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// class UBP_GSC_Team_Raid_C*              Team                                                   (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    Friendly_Team                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void UUI_GunFight_TeamIndicator_C::Set_Team(class UBP_GSC_Team_Raid_C* Team, bool Friendly_Team)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UI_GunFight_TeamIndicator_C", "Set Team");

	Params::UI_GunFight_TeamIndicator_C_Set_Team Parms{};

	Parms.Team = Team;
	Parms.Friendly_Team = Friendly_Team;

	UObject::ProcessEvent(Func, &Parms);
}


// Function UI_GunFight_TeamIndicator.UI_GunFight_TeamIndicator_C.Update Indicator
// (BlueprintCallable, BlueprintEvent)

void UUI_GunFight_TeamIndicator_C::Update_Indicator()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UI_GunFight_TeamIndicator_C", "Update Indicator");

	UObject::ProcessEvent(Func, nullptr);
}


// Function UI_GunFight_TeamIndicator.UI_GunFight_TeamIndicator_C.Fill Player Indicators
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)

void UUI_GunFight_TeamIndicator_C::Fill_Player_Indicators()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UI_GunFight_TeamIndicator_C", "Fill Player Indicators");

	UObject::ProcessEvent(Func, nullptr);
}


// Function UI_GunFight_TeamIndicator.UI_GunFight_TeamIndicator_C.Get Team Health and Alive Number
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// TMap<int32, float>                      Team_Healths                                           (Parm, OutParm)
// int32                                   Alive_Players                                          (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UUI_GunFight_TeamIndicator_C::Get_Team_Health_and_Alive_Number(TMap<int32, float>* Team_Healths, int32* Alive_Players)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UI_GunFight_TeamIndicator_C", "Get Team Health and Alive Number");

	Params::UI_GunFight_TeamIndicator_C_Get_Team_Health_and_Alive_Number Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Team_Healths != nullptr)
		*Team_Healths = std::move(Parms.Team_Healths);

	if (Alive_Players != nullptr)
		*Alive_Players = Parms.Alive_Players;
}


// Function UI_GunFight_TeamIndicator.UI_GunFight_TeamIndicator_C.Set Alive Players
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// TMap<int32, float>                      Player_Healths                                         (BlueprintVisible, BlueprintReadOnly, Parm)
// int32                                   Alive_Players                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UUI_GunFight_TeamIndicator_C::Set_Alive_Players(const TMap<int32, float>& Player_Healths, int32 Alive_Players)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UI_GunFight_TeamIndicator_C", "Set Alive Players");

	Params::UI_GunFight_TeamIndicator_C_Set_Alive_Players Parms{};

	Parms.Player_Healths = std::move(Player_Healths);
	Parms.Alive_Players = Alive_Players;

	UObject::ProcessEvent(Func, &Parms);
}


// Function UI_GunFight_TeamIndicator.UI_GunFight_TeamIndicator_C.Sort Healths
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// TArray<float>                           Team_Healths                                           (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
// bool                                    Sort_Descending                                        (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// TArray<float>                           Sorted_Healths                                         (Parm, OutParm)

void UUI_GunFight_TeamIndicator_C::Sort_Healths(TArray<float>& Team_Healths, bool Sort_Descending, TArray<float>* Sorted_Healths)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UI_GunFight_TeamIndicator_C", "Sort Healths");

	Params::UI_GunFight_TeamIndicator_C_Sort_Healths Parms{};

	Parms.Team_Healths = std::move(Team_Healths);
	Parms.Sort_Descending = Sort_Descending;

	UObject::ProcessEvent(Func, &Parms);

	Team_Healths = std::move(Parms.Team_Healths);

	if (Sorted_Healths != nullptr)
		*Sorted_Healths = std::move(Parms.Sorted_Healths);
}

}

