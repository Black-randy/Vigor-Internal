#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_AmbienceArea

#include "Basic.hpp"

#include "Flame_classes.hpp"
#include "Engine_structs.hpp"
#include "CoreUObject_structs.hpp"
#include "E_LightingScenarios_structs.hpp"


namespace SDK
{

// BlueprintGeneratedClass BP_AmbienceArea.BP_AmbienceArea_C
// 0x0530 (0x07C8 - 0x0298)
class ABP_AmbienceArea_C : public AAmbienceAreaBase
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x0298(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class USphereComponent*                       SphereCollisionVolume;                             // 0x02A0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class USphereComponent*                       OuterSphereCollisionVolume;                        // 0x02A8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UCapsuleComponent*                      CapsuleCollisionVolume;                            // 0x02B0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UCapsuleComponent*                      OuterCapsuleCollisionVolume;                       // 0x02B8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UBoxComponent*                          BoxCollisionVolume;                                // 0x02C0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UBoxComponent*                          OuterBoxCollisionVolume;                           // 0x02C8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EAttenuationShape                             AttenuationShape;                                  // 0x02D0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2D1[0x3];                                      // 0x02D1(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         FalloffDistance;                                   // 0x02D4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         SphereRadius;                                      // 0x02D8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CapsuleRadius;                                     // 0x02DC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CapsuleHalfHeight;                                 // 0x02E0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                BoxExtent;                                         // 0x02E4(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class USoundCue*                              ProceduralSoundCue1;                               // 0x02F0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         MinDelay1;                                         // 0x02F8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         MaxDelay1;                                         // 0x02FC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class USoundCue*                              ProceduralSoundCue2;                               // 0x0300(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         MinDelay2;                                         // 0x0308(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         MaxDelay2;                                         // 0x030C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class USoundCue*                              ProceduralSoundCue3;                               // 0x0310(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         MinDelay3;                                         // 0x0318(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         MaxDelay3;                                         // 0x031C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CurrentRainAmount;                                 // 0x0320(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_324[0x4];                                      // 0x0324(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class USoundCue*                              ProceduralSoundCue4;                               // 0x0328(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         MinDelay4;                                         // 0x0330(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         MaxDelay4;                                         // 0x0334(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class USoundCue*                              ProceduralSoundCue5;                               // 0x0338(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         MinDelay5;                                         // 0x0340(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         MaxDelay5;                                         // 0x0344(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class USoundCue*                              ProceduralSoundCue6;                               // 0x0348(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         MinDelay6;                                         // 0x0350(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         MaxDelay6;                                         // 0x0354(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                InnerProceduralSoundsPosition;                     // 0x0358(0x000C)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_364[0x4];                                      // 0x0364(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSoundAttenuationSettings              FinalAttenuationSettings;                          // 0x0368(0x03A0)(Edit, BlueprintVisible, DisableEditOnInstance)
	class ABP_LightingScenarioSwitcher_C*         LightingScenario;                                  // 0x0708(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          BoundToWeatherChange;                              // 0x0710(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          CurrentlyActive;                                   // 0x0711(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_712[0x6];                                      // 0x0712(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	TMap<E_LightingScenarios, class USoundBase*>  LightingScenarioToSound;                           // 0x0718(0x0050)(Edit, BlueprintVisible)
	E_LightingScenarios                           CurrentLighting_Scenario;                          // 0x0768(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_769[0x7];                                      // 0x0769(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class USoundBase*                             DefaultSoundUponConstruct;                         // 0x0770(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TMap<E_LightingScenarios, bool>               LightingScenarioToEnabledProceduralSounds;         // 0x0778(0x0050)(Edit, BlueprintVisible)

public:
	void ExecuteUbergraph_BP_AmbienceArea(int32 EntryPoint);
	void StopProceduralSoundsBP();
	void SetProceduralSoundsBP();
	void SetSound(bool Active, class USoundBase* Sound);
	void UpdateCurrentLightingScenario();
	void DisableComponents();
	void ActivateComponents(const E_LightingScenarios& Scenario);
	void RetryInit();
	void LightingNameChanged_Event(const class FString& LightScenarioString);
	void CheckWeatherBound();
	void CheckForScenario();
	void ReceiveBeginPlay();
	void GetWeatherSwitcherRef();
	void AdjustWeather(float CurrentRainAmount_0, float CurrentWindIntensity, const struct FVector& CurrentWindDirection, float CurrentWetnessAmount);
	void AdjustRainIntensity(float CurrentRainAmount_0, float CurrentWetnessAmount);
	void SetHeavyRain(bool HeavyRain);
	void AdjustWindDirection(const struct FVector& CurrentWindDirection);
	void AdjustWindIntensity(float CurrentWindIntensity);
	void UserConstructionScript();

	float GetRelativeDistanceFromCenter(const struct FVector& Location, bool bInnerOnly, bool bClamped) const;

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BP_AmbienceArea_C">();
	}
	static class ABP_AmbienceArea_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<ABP_AmbienceArea_C>();
	}
};
static_assert(alignof(ABP_AmbienceArea_C) == 0x000008, "Wrong alignment on ABP_AmbienceArea_C");
static_assert(sizeof(ABP_AmbienceArea_C) == 0x0007C8, "Wrong size on ABP_AmbienceArea_C");
static_assert(offsetof(ABP_AmbienceArea_C, UberGraphFrame) == 0x000298, "Member 'ABP_AmbienceArea_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(ABP_AmbienceArea_C, SphereCollisionVolume) == 0x0002A0, "Member 'ABP_AmbienceArea_C::SphereCollisionVolume' has a wrong offset!");
static_assert(offsetof(ABP_AmbienceArea_C, OuterSphereCollisionVolume) == 0x0002A8, "Member 'ABP_AmbienceArea_C::OuterSphereCollisionVolume' has a wrong offset!");
static_assert(offsetof(ABP_AmbienceArea_C, CapsuleCollisionVolume) == 0x0002B0, "Member 'ABP_AmbienceArea_C::CapsuleCollisionVolume' has a wrong offset!");
static_assert(offsetof(ABP_AmbienceArea_C, OuterCapsuleCollisionVolume) == 0x0002B8, "Member 'ABP_AmbienceArea_C::OuterCapsuleCollisionVolume' has a wrong offset!");
static_assert(offsetof(ABP_AmbienceArea_C, BoxCollisionVolume) == 0x0002C0, "Member 'ABP_AmbienceArea_C::BoxCollisionVolume' has a wrong offset!");
static_assert(offsetof(ABP_AmbienceArea_C, OuterBoxCollisionVolume) == 0x0002C8, "Member 'ABP_AmbienceArea_C::OuterBoxCollisionVolume' has a wrong offset!");
static_assert(offsetof(ABP_AmbienceArea_C, AttenuationShape) == 0x0002D0, "Member 'ABP_AmbienceArea_C::AttenuationShape' has a wrong offset!");
static_assert(offsetof(ABP_AmbienceArea_C, FalloffDistance) == 0x0002D4, "Member 'ABP_AmbienceArea_C::FalloffDistance' has a wrong offset!");
static_assert(offsetof(ABP_AmbienceArea_C, SphereRadius) == 0x0002D8, "Member 'ABP_AmbienceArea_C::SphereRadius' has a wrong offset!");
static_assert(offsetof(ABP_AmbienceArea_C, CapsuleRadius) == 0x0002DC, "Member 'ABP_AmbienceArea_C::CapsuleRadius' has a wrong offset!");
static_assert(offsetof(ABP_AmbienceArea_C, CapsuleHalfHeight) == 0x0002E0, "Member 'ABP_AmbienceArea_C::CapsuleHalfHeight' has a wrong offset!");
static_assert(offsetof(ABP_AmbienceArea_C, BoxExtent) == 0x0002E4, "Member 'ABP_AmbienceArea_C::BoxExtent' has a wrong offset!");
static_assert(offsetof(ABP_AmbienceArea_C, ProceduralSoundCue1) == 0x0002F0, "Member 'ABP_AmbienceArea_C::ProceduralSoundCue1' has a wrong offset!");
static_assert(offsetof(ABP_AmbienceArea_C, MinDelay1) == 0x0002F8, "Member 'ABP_AmbienceArea_C::MinDelay1' has a wrong offset!");
static_assert(offsetof(ABP_AmbienceArea_C, MaxDelay1) == 0x0002FC, "Member 'ABP_AmbienceArea_C::MaxDelay1' has a wrong offset!");
static_assert(offsetof(ABP_AmbienceArea_C, ProceduralSoundCue2) == 0x000300, "Member 'ABP_AmbienceArea_C::ProceduralSoundCue2' has a wrong offset!");
static_assert(offsetof(ABP_AmbienceArea_C, MinDelay2) == 0x000308, "Member 'ABP_AmbienceArea_C::MinDelay2' has a wrong offset!");
static_assert(offsetof(ABP_AmbienceArea_C, MaxDelay2) == 0x00030C, "Member 'ABP_AmbienceArea_C::MaxDelay2' has a wrong offset!");
static_assert(offsetof(ABP_AmbienceArea_C, ProceduralSoundCue3) == 0x000310, "Member 'ABP_AmbienceArea_C::ProceduralSoundCue3' has a wrong offset!");
static_assert(offsetof(ABP_AmbienceArea_C, MinDelay3) == 0x000318, "Member 'ABP_AmbienceArea_C::MinDelay3' has a wrong offset!");
static_assert(offsetof(ABP_AmbienceArea_C, MaxDelay3) == 0x00031C, "Member 'ABP_AmbienceArea_C::MaxDelay3' has a wrong offset!");
static_assert(offsetof(ABP_AmbienceArea_C, CurrentRainAmount) == 0x000320, "Member 'ABP_AmbienceArea_C::CurrentRainAmount' has a wrong offset!");
static_assert(offsetof(ABP_AmbienceArea_C, ProceduralSoundCue4) == 0x000328, "Member 'ABP_AmbienceArea_C::ProceduralSoundCue4' has a wrong offset!");
static_assert(offsetof(ABP_AmbienceArea_C, MinDelay4) == 0x000330, "Member 'ABP_AmbienceArea_C::MinDelay4' has a wrong offset!");
static_assert(offsetof(ABP_AmbienceArea_C, MaxDelay4) == 0x000334, "Member 'ABP_AmbienceArea_C::MaxDelay4' has a wrong offset!");
static_assert(offsetof(ABP_AmbienceArea_C, ProceduralSoundCue5) == 0x000338, "Member 'ABP_AmbienceArea_C::ProceduralSoundCue5' has a wrong offset!");
static_assert(offsetof(ABP_AmbienceArea_C, MinDelay5) == 0x000340, "Member 'ABP_AmbienceArea_C::MinDelay5' has a wrong offset!");
static_assert(offsetof(ABP_AmbienceArea_C, MaxDelay5) == 0x000344, "Member 'ABP_AmbienceArea_C::MaxDelay5' has a wrong offset!");
static_assert(offsetof(ABP_AmbienceArea_C, ProceduralSoundCue6) == 0x000348, "Member 'ABP_AmbienceArea_C::ProceduralSoundCue6' has a wrong offset!");
static_assert(offsetof(ABP_AmbienceArea_C, MinDelay6) == 0x000350, "Member 'ABP_AmbienceArea_C::MinDelay6' has a wrong offset!");
static_assert(offsetof(ABP_AmbienceArea_C, MaxDelay6) == 0x000354, "Member 'ABP_AmbienceArea_C::MaxDelay6' has a wrong offset!");
static_assert(offsetof(ABP_AmbienceArea_C, InnerProceduralSoundsPosition) == 0x000358, "Member 'ABP_AmbienceArea_C::InnerProceduralSoundsPosition' has a wrong offset!");
static_assert(offsetof(ABP_AmbienceArea_C, FinalAttenuationSettings) == 0x000368, "Member 'ABP_AmbienceArea_C::FinalAttenuationSettings' has a wrong offset!");
static_assert(offsetof(ABP_AmbienceArea_C, LightingScenario) == 0x000708, "Member 'ABP_AmbienceArea_C::LightingScenario' has a wrong offset!");
static_assert(offsetof(ABP_AmbienceArea_C, BoundToWeatherChange) == 0x000710, "Member 'ABP_AmbienceArea_C::BoundToWeatherChange' has a wrong offset!");
static_assert(offsetof(ABP_AmbienceArea_C, CurrentlyActive) == 0x000711, "Member 'ABP_AmbienceArea_C::CurrentlyActive' has a wrong offset!");
static_assert(offsetof(ABP_AmbienceArea_C, LightingScenarioToSound) == 0x000718, "Member 'ABP_AmbienceArea_C::LightingScenarioToSound' has a wrong offset!");
static_assert(offsetof(ABP_AmbienceArea_C, CurrentLighting_Scenario) == 0x000768, "Member 'ABP_AmbienceArea_C::CurrentLighting_Scenario' has a wrong offset!");
static_assert(offsetof(ABP_AmbienceArea_C, DefaultSoundUponConstruct) == 0x000770, "Member 'ABP_AmbienceArea_C::DefaultSoundUponConstruct' has a wrong offset!");
static_assert(offsetof(ABP_AmbienceArea_C, LightingScenarioToEnabledProceduralSounds) == 0x000778, "Member 'ABP_AmbienceArea_C::LightingScenarioToEnabledProceduralSounds' has a wrong offset!");

}

