#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: UI_RewardScreen_BattlePass

#include "Basic.hpp"

#include "UI_RewardScreen_BattlePass_classes.hpp"
#include "UI_RewardScreen_BattlePass_parameters.hpp"


namespace SDK
{

// Function UI_RewardScreen_BattlePass.UI_RewardScreen_BattlePass_C.ExecuteUbergraph_UI_RewardScreen_BattlePass
// (Final, UbergraphFunction, HasDefaults)
// Parameters:
// int32                                   EntryPoint                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UUI_RewardScreen_BattlePass_C::ExecuteUbergraph_UI_RewardScreen_BattlePass(int32 EntryPoint)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UI_RewardScreen_BattlePass_C", "ExecuteUbergraph_UI_RewardScreen_BattlePass");

	Params::UI_RewardScreen_BattlePass_C_ExecuteUbergraph_UI_RewardScreen_BattlePass Parms{};

	Parms.EntryPoint = EntryPoint;

	UObject::ProcessEvent(Func, &Parms);
}


// Function UI_RewardScreen_BattlePass.UI_RewardScreen_BattlePass_C.List Battle Pass Match Results
// (HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// class UBP_BattlePassSystem_C*           BattlePassSystem_0                                     (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class UUI_RewardScreen_LevelUp_C*       Level_Up_Screen                                        (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// TArray<struct FCloudBattlePassMatchEventResult>Match_Events                                           (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
// struct FCloudBattlePassMatchResults     Match_Result                                           (BlueprintVisible, BlueprintReadOnly, Parm, NoDestructor)
// TArray<struct FCloudBattlePassEventXp>  XpBreakdown_0                                          (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
// bool                                    Was_Lonewolf_0                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// bool                                    IsLegacyCard_0                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// struct FCloudUserLobbyInfo              UserCloudLobbyInfo                                     (BlueprintVisible, BlueprintReadOnly, Parm)

void UUI_RewardScreen_BattlePass_C::List_Battle_Pass_Match_Results(class UBP_BattlePassSystem_C* BattlePassSystem_0, class UUI_RewardScreen_LevelUp_C* Level_Up_Screen, const TArray<struct FCloudBattlePassMatchEventResult>& Match_Events, const struct FCloudBattlePassMatchResults& Match_Result, const TArray<struct FCloudBattlePassEventXp>& XpBreakdown_0, bool Was_Lonewolf_0, bool IsLegacyCard_0, const struct FCloudUserLobbyInfo& UserCloudLobbyInfo)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UI_RewardScreen_BattlePass_C", "List Battle Pass Match Results");

	Params::UI_RewardScreen_BattlePass_C_List_Battle_Pass_Match_Results Parms{};

	Parms.BattlePassSystem_0 = BattlePassSystem_0;
	Parms.Level_Up_Screen = Level_Up_Screen;
	Parms.Match_Events = std::move(Match_Events);
	Parms.Match_Result = std::move(Match_Result);
	Parms.XpBreakdown_0 = std::move(XpBreakdown_0);
	Parms.Was_Lonewolf_0 = Was_Lonewolf_0;
	Parms.IsLegacyCard_0 = IsLegacyCard_0;
	Parms.UserCloudLobbyInfo = std::move(UserCloudLobbyInfo);

	UObject::ProcessEvent(Func, &Parms);
}


// Function UI_RewardScreen_BattlePass.UI_RewardScreen_BattlePass_C.Tick
// (BlueprintCosmetic, Event, Public, BlueprintEvent)
// Parameters:
// struct FGeometry                        MyGeometry                                             (BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor)
// float                                   InDeltaTime                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UUI_RewardScreen_BattlePass_C::Tick(const struct FGeometry& MyGeometry, float InDeltaTime)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UI_RewardScreen_BattlePass_C", "Tick");

	Params::UI_RewardScreen_BattlePass_C_Tick Parms{};

	Parms.MyGeometry = std::move(MyGeometry);
	Parms.InDeltaTime = InDeltaTime;

	UObject::ProcessEvent(Func, &Parms);
}


// Function UI_RewardScreen_BattlePass.UI_RewardScreen_BattlePass_C.Construct
// (BlueprintCosmetic, Event, Public, BlueprintEvent)

void UUI_RewardScreen_BattlePass_C::Construct()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UI_RewardScreen_BattlePass_C", "Construct");

	UObject::ProcessEvent(Func, nullptr);
}


// Function UI_RewardScreen_BattlePass.UI_RewardScreen_BattlePass_C.Show Gained XP PopUp
// (BlueprintCallable, BlueprintEvent)

void UUI_RewardScreen_BattlePass_C::Show_Gained_XP_PopUp()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UI_RewardScreen_BattlePass_C", "Show Gained XP PopUp");

	UObject::ProcessEvent(Func, nullptr);
}


// Function UI_RewardScreen_BattlePass.UI_RewardScreen_BattlePass_C.Level Up
// (BlueprintCallable, BlueprintEvent)

void UUI_RewardScreen_BattlePass_C::Level_Up()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UI_RewardScreen_BattlePass_C", "Level Up");

	UObject::ProcessEvent(Func, nullptr);
}


// Function UI_RewardScreen_BattlePass.UI_RewardScreen_BattlePass_C.Finished Current Level Progress
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    IsLevelUp                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void UUI_RewardScreen_BattlePass_C::Finished_Current_Level_Progress(bool IsLevelUp)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UI_RewardScreen_BattlePass_C", "Finished Current Level Progress");

	Params::UI_RewardScreen_BattlePass_C_Finished_Current_Level_Progress Parms{};

	Parms.IsLevelUp = IsLevelUp;

	UObject::ProcessEvent(Func, &Parms);
}


// Function UI_RewardScreen_BattlePass.UI_RewardScreen_BattlePass_C.Start Playing Level Progresses
// (BlueprintCallable, BlueprintEvent)

void UUI_RewardScreen_BattlePass_C::Start_Playing_Level_Progresses()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UI_RewardScreen_BattlePass_C", "Start Playing Level Progresses");

	UObject::ProcessEvent(Func, nullptr);
}


// Function UI_RewardScreen_BattlePass.UI_RewardScreen_BattlePass_C.Play Next Level Progress
// (BlueprintCallable, BlueprintEvent)

void UUI_RewardScreen_BattlePass_C::Play_Next_Level_Progress()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UI_RewardScreen_BattlePass_C", "Play Next Level Progress");

	UObject::ProcessEvent(Func, nullptr);
}


// Function UI_RewardScreen_BattlePass.UI_RewardScreen_BattlePass_C.Show Booster XP PopUp
// (BlueprintCallable, BlueprintEvent)

void UUI_RewardScreen_BattlePass_C::Show_Booster_XP_PopUp()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UI_RewardScreen_BattlePass_C", "Show Booster XP PopUp");

	UObject::ProcessEvent(Func, nullptr);
}


// Function UI_RewardScreen_BattlePass.UI_RewardScreen_BattlePass_C.Show XP Progress
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FCloudBattlePassMatchResults     Match_Results                                          (BlueprintVisible, BlueprintReadOnly, Parm, NoDestructor)

void UUI_RewardScreen_BattlePass_C::Show_XP_Progress(const struct FCloudBattlePassMatchResults& Match_Results)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UI_RewardScreen_BattlePass_C", "Show XP Progress");

	Params::UI_RewardScreen_BattlePass_C_Show_XP_Progress Parms{};

	Parms.Match_Results = std::move(Match_Results);

	UObject::ProcessEvent(Func, &Parms);
}


// Function UI_RewardScreen_BattlePass.UI_RewardScreen_BattlePass_C.ResetXPProgressBar
// (Public, BlueprintCallable, BlueprintEvent)

void UUI_RewardScreen_BattlePass_C::ResetXPProgressBar()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UI_RewardScreen_BattlePass_C", "ResetXPProgressBar");

	UObject::ProcessEvent(Func, nullptr);
}


// Function UI_RewardScreen_BattlePass.UI_RewardScreen_BattlePass_C.FillActions
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// TArray<struct FCloudBattlePassMatchEventResult>Match_Events                                           (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)

void UUI_RewardScreen_BattlePass_C::FillActions(TArray<struct FCloudBattlePassMatchEventResult>& Match_Events)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UI_RewardScreen_BattlePass_C", "FillActions");

	Params::UI_RewardScreen_BattlePass_C_FillActions Parms{};

	Parms.Match_Events = std::move(Match_Events);

	UObject::ProcessEvent(Func, &Parms);

	Match_Events = std::move(Parms.Match_Events);
}


// Function UI_RewardScreen_BattlePass.UI_RewardScreen_BattlePass_C.SetSeasonActive
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    Active                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void UUI_RewardScreen_BattlePass_C::SetSeasonActive(bool Active)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UI_RewardScreen_BattlePass_C", "SetSeasonActive");

	Params::UI_RewardScreen_BattlePass_C_SetSeasonActive Parms{};

	Parms.Active = Active;

	UObject::ProcessEvent(Func, &Parms);
}


// Function UI_RewardScreen_BattlePass.UI_RewardScreen_BattlePass_C.GetAction
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// class FName                             Action_Name                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   Amount                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    Is_Legit                                               (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
// class FText                             ActionName                                             (Parm, OutParm)
// int32                                   XP                                                     (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UUI_RewardScreen_BattlePass_C::GetAction(class FName Action_Name, int32 Amount, bool* Is_Legit, class FText* ActionName, int32* XP)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UI_RewardScreen_BattlePass_C", "GetAction");

	Params::UI_RewardScreen_BattlePass_C_GetAction Parms{};

	Parms.Action_Name = Action_Name;
	Parms.Amount = Amount;

	UObject::ProcessEvent(Func, &Parms);

	if (Is_Legit != nullptr)
		*Is_Legit = Parms.Is_Legit;

	if (ActionName != nullptr)
		*ActionName = std::move(Parms.ActionName);

	if (XP != nullptr)
		*XP = Parms.XP;
}


// Function UI_RewardScreen_BattlePass.UI_RewardScreen_BattlePass_C.GetSeasonInfo
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// class FName                             Season_Name                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FBattlePassSeason                Season_Info                                            (Parm, OutParm)
// bool                                    Found                                                  (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void UUI_RewardScreen_BattlePass_C::GetSeasonInfo(class FName Season_Name, struct FBattlePassSeason* Season_Info, bool* Found)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UI_RewardScreen_BattlePass_C", "GetSeasonInfo");

	Params::UI_RewardScreen_BattlePass_C_GetSeasonInfo Parms{};

	Parms.Season_Name = Season_Name;

	UObject::ProcessEvent(Func, &Parms);

	if (Season_Info != nullptr)
		*Season_Info = std::move(Parms.Season_Info);

	if (Found != nullptr)
		*Found = Parms.Found;
}


// Function UI_RewardScreen_BattlePass.UI_RewardScreen_BattlePass_C.GetRelevantLevelUps
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// class FName                             Season_Name                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   Start_Level                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   Total_XP_0                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// TArray<struct FBattlePassLevel>         Level_Ups                                              (Parm, OutParm)
// bool                                    Max_Level_Reached                                      (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void UUI_RewardScreen_BattlePass_C::GetRelevantLevelUps(class FName Season_Name, int32 Start_Level, int32 Total_XP_0, TArray<struct FBattlePassLevel>* Level_Ups, bool* Max_Level_Reached)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UI_RewardScreen_BattlePass_C", "GetRelevantLevelUps");

	Params::UI_RewardScreen_BattlePass_C_GetRelevantLevelUps Parms{};

	Parms.Season_Name = Season_Name;
	Parms.Start_Level = Start_Level;
	Parms.Total_XP_0 = Total_XP_0;

	UObject::ProcessEvent(Func, &Parms);

	if (Level_Ups != nullptr)
		*Level_Ups = std::move(Parms.Level_Ups);

	if (Max_Level_Reached != nullptr)
		*Max_Level_Reached = Parms.Max_Level_Reached;
}


// Function UI_RewardScreen_BattlePass.UI_RewardScreen_BattlePass_C.ShowLevelUpProgress
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// int32                                   Experience_Needed                                      (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UUI_RewardScreen_BattlePass_C::ShowLevelUpProgress(int32 Experience_Needed)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UI_RewardScreen_BattlePass_C", "ShowLevelUpProgress");

	Params::UI_RewardScreen_BattlePass_C_ShowLevelUpProgress Parms{};

	Parms.Experience_Needed = Experience_Needed;

	UObject::ProcessEvent(Func, &Parms);
}


// Function UI_RewardScreen_BattlePass.UI_RewardScreen_BattlePass_C.Set XP For Next Level
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// int32                                   Current_XP                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   XP_To_Next_Level                                       (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   Current_Level_0                                        (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    MaxLevel                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void UUI_RewardScreen_BattlePass_C::Set_XP_For_Next_Level(int32 Current_XP, int32 XP_To_Next_Level, int32 Current_Level_0, bool MaxLevel)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UI_RewardScreen_BattlePass_C", "Set XP For Next Level");

	Params::UI_RewardScreen_BattlePass_C_Set_XP_For_Next_Level Parms{};

	Parms.Current_XP = Current_XP;
	Parms.XP_To_Next_Level = XP_To_Next_Level;
	Parms.Current_Level_0 = Current_Level_0;
	Parms.MaxLevel = MaxLevel;

	UObject::ProcessEvent(Func, &Parms);
}


// Function UI_RewardScreen_BattlePass.UI_RewardScreen_BattlePass_C.Show Rewards
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// TArray<struct FBattlePassLevel>         Achieved_Level_Ups                                     (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)

void UUI_RewardScreen_BattlePass_C::Show_Rewards(TArray<struct FBattlePassLevel>& Achieved_Level_Ups)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UI_RewardScreen_BattlePass_C", "Show Rewards");

	Params::UI_RewardScreen_BattlePass_C_Show_Rewards Parms{};

	Parms.Achieved_Level_Ups = std::move(Achieved_Level_Ups);

	UObject::ProcessEvent(Func, &Parms);

	Achieved_Level_Ups = std::move(Parms.Achieved_Level_Ups);
}


// Function UI_RewardScreen_BattlePass.UI_RewardScreen_BattlePass_C.Get Remaining Time In Progress
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// float                                   Time_Left                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   XP                                                     (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   XP_Needed                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   New_Time_Left                                          (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   Time_Clamped_XP                                        (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UUI_RewardScreen_BattlePass_C::Get_Remaining_Time_In_Progress(float Time_Left, int32 XP, int32 XP_Needed, float* New_Time_Left, float* Time_Clamped_XP)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UI_RewardScreen_BattlePass_C", "Get Remaining Time In Progress");

	Params::UI_RewardScreen_BattlePass_C_Get_Remaining_Time_In_Progress Parms{};

	Parms.Time_Left = Time_Left;
	Parms.XP = XP;
	Parms.XP_Needed = XP_Needed;

	UObject::ProcessEvent(Func, &Parms);

	if (New_Time_Left != nullptr)
		*New_Time_Left = Parms.New_Time_Left;

	if (Time_Clamped_XP != nullptr)
		*Time_Clamped_XP = Parms.Time_Clamped_XP;
}


// Function UI_RewardScreen_BattlePass.UI_RewardScreen_BattlePass_C.CheckForDoubleXP_BoosterTicket
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// struct FCloudUserLobbyInfo              CloudUserLobbyInfo                                     (BlueprintVisible, BlueprintReadOnly, Parm)
// bool                                    BoosterPresent                                         (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void UUI_RewardScreen_BattlePass_C::CheckForDoubleXP_BoosterTicket(const struct FCloudUserLobbyInfo& CloudUserLobbyInfo, bool* BoosterPresent)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UI_RewardScreen_BattlePass_C", "CheckForDoubleXP_BoosterTicket");

	Params::UI_RewardScreen_BattlePass_C_CheckForDoubleXP_BoosterTicket Parms{};

	Parms.CloudUserLobbyInfo = std::move(CloudUserLobbyInfo);

	UObject::ProcessEvent(Func, &Parms);

	if (BoosterPresent != nullptr)
		*BoosterPresent = Parms.BoosterPresent;
}

}

