#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_GSC_Team_Raid

#include "Basic.hpp"

#include "BP_GSC_Team_Raid_classes.hpp"
#include "BP_GSC_Team_Raid_parameters.hpp"


namespace SDK
{

// Function BP_GSC_Team_Raid.BP_GSC_Team_Raid_C.ExecuteUbergraph_BP_GSC_Team_Raid
// (Final, UbergraphFunction)
// Parameters:
// int32                                   EntryPoint                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_GSC_Team_Raid_C::ExecuteUbergraph_BP_GSC_Team_Raid(int32 EntryPoint)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_GSC_Team_Raid_C", "ExecuteUbergraph_BP_GSC_Team_Raid");

	Params::BP_GSC_Team_Raid_C_ExecuteUbergraph_BP_GSC_Team_Raid Parms{};

	Parms.EntryPoint = EntryPoint;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_GSC_Team_Raid.BP_GSC_Team_Raid_C.Set Is Attacking Team
// (Net, NetReliable, NetMulticast, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    Is_Attacker_0                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void UBP_GSC_Team_Raid_C::Set_Is_Attacking_Team(bool Is_Attacker_0)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_GSC_Team_Raid_C", "Set Is Attacking Team");

	Params::BP_GSC_Team_Raid_C_Set_Is_Attacking_Team Parms{};

	Parms.Is_Attacker_0 = Is_Attacker_0;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_GSC_Team_Raid.BP_GSC_Team_Raid_C.Set Won Rounds
// (Net, NetReliable, NetMulticast, BlueprintCallable, BlueprintEvent)
// Parameters:
// int32                                   New_Rounds_Won                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_GSC_Team_Raid_C::Set_Won_Rounds(int32 New_Rounds_Won)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_GSC_Team_Raid_C", "Set Won Rounds");

	Params::BP_GSC_Team_Raid_C_Set_Won_Rounds Parms{};

	Parms.New_Rounds_Won = New_Rounds_Won;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_GSC_Team_Raid.BP_GSC_Team_Raid_C.ReceiveBeginPlay
// (Event, Public, BlueprintEvent)

void UBP_GSC_Team_Raid_C::ReceiveBeginPlay()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_GSC_Team_Raid_C", "ReceiveBeginPlay");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_GSC_Team_Raid.BP_GSC_Team_Raid_C.Is Attacker
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    Is_Attacker_0                                          (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void UBP_GSC_Team_Raid_C::Is_Attacker(bool* Is_Attacker_0)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_GSC_Team_Raid_C", "Is Attacker");

	Params::BP_GSC_Team_Raid_C_Is_Attacker Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Is_Attacker_0 != nullptr)
		*Is_Attacker_0 = Parms.Is_Attacker_0;
}


// Function BP_GSC_Team_Raid.BP_GSC_Team_Raid_C.Is Everyone Dead
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    AllDead                                                (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void UBP_GSC_Team_Raid_C::Is_Everyone_Dead(bool* AllDead)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_GSC_Team_Raid_C", "Is Everyone Dead");

	Params::BP_GSC_Team_Raid_C_Is_Everyone_Dead Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (AllDead != nullptr)
		*AllDead = Parms.AllDead;
}


// Function BP_GSC_Team_Raid.BP_GSC_Team_Raid_C.Get Member Controllers
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// TArray<class ABP_PlayerController_Teams_C*>Player_Controllers                                     (Parm, OutParm)

void UBP_GSC_Team_Raid_C::Get_Member_Controllers(TArray<class ABP_PlayerController_Teams_C*>* Player_Controllers)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_GSC_Team_Raid_C", "Get Member Controllers");

	Params::BP_GSC_Team_Raid_C_Get_Member_Controllers Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Player_Controllers != nullptr)
		*Player_Controllers = std::move(Parms.Player_Controllers);
}


// Function BP_GSC_Team_Raid.BP_GSC_Team_Raid_C.Set Side
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// class FName                             Side_0                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    Success                                                (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void UBP_GSC_Team_Raid_C::Set_Side(class FName Side_0, bool* Success)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_GSC_Team_Raid_C", "Set Side");

	Params::BP_GSC_Team_Raid_C_Set_Side Parms{};

	Parms.Side_0 = Side_0;

	UObject::ProcessEvent(Func, &Parms);

	if (Success != nullptr)
		*Success = Parms.Success;
}


// Function BP_GSC_Team_Raid.BP_GSC_Team_Raid_C.Add Player
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// class ABP_PlayerController_Teams_C*     Player                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    Success                                                (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void UBP_GSC_Team_Raid_C::Add_Player(class ABP_PlayerController_Teams_C* Player, bool* Success)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_GSC_Team_Raid_C", "Add Player");

	Params::BP_GSC_Team_Raid_C_Add_Player Parms{};

	Parms.Player = Player;

	UObject::ProcessEvent(Func, &Parms);

	if (Success != nullptr)
		*Success = Parms.Success;
}

}

