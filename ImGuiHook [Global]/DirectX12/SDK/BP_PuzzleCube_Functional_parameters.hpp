#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_PuzzleCube_Functional

#include "Basic.hpp"

#include "S_PuzzleCubeSavedState_structs.hpp"
#include "CoreUObject_structs.hpp"
#include "Engine_structs.hpp"
#include "FPuzzleCube_RotationInfo_structs.hpp"
#include "E_PuzzleCube_SelectedSide_structs.hpp"


namespace SDK::Params
{

// Function BP_PuzzleCube_Functional.BP_PuzzleCube_Functional_C.ExecuteUbergraph_BP_PuzzleCube_Functional
// 0x0110 (0x0110 - 0x0000)
struct BP_PuzzleCube_Functional_C_ExecuteUbergraph_BP_PuzzleCube_Functional final
{
public:
	int32                                         EntryPoint;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class USaveGame*                              K2Node_CustomEvent_SaveGame_1;                     // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TDelegate<void(class USaveGame* SaveGame)>    K2Node_CreateDelegate_OutputDelegate;              // 0x0010(0x0010)(ZeroConstructor, NoDestructor)
	class USaveGame*                              K2Node_CustomEvent_SaveGame;                       // 0x0020(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TDelegate<void(class USaveGame* SaveGame)>    K2Node_CreateDelegate_OutputDelegate_1;            // 0x0028(0x0010)(ZeroConstructor, NoDestructor)
	class USaveGame*                              Temp_object_Variable;                              // 0x0038(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TDelegate<void(const class FString& SlotName, int32 UserIndex)> K2Node_CreateDelegate_OutputDelegate_2;            // 0x0040(0x0010)(ZeroConstructor, NoDestructor)
	class UBP_PuzzleCube_SaveGame_C*              K2Node_DynamicCast_AsBP_Puzzle_Cube_Save_Game;     // 0x0050(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0058(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_59[0x7];                                       // 0x0059(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 K2Node_CustomEvent_SlotName_2;                     // 0x0060(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	int32                                         K2Node_CustomEvent_UserIndex_1;                    // 0x0070(0x0004)(ConstParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_74[0x4];                                       // 0x0074(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 K2Node_CustomEvent_SlotName_1;                     // 0x0078(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	int32                                         K2Node_CustomEvent_UserIndex;                      // 0x0088(0x0004)(ConstParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TDelegate<void(const class FString& SlotName, int32 UserIndex)> K2Node_CreateDelegate_OutputDelegate_3;            // 0x008C(0x0010)(ZeroConstructor, NoDestructor)
	int32                                         Temp_int_Variable;                                 // 0x009C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FString                                 Temp_string_Variable;                              // 0x00A0(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x00B0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_B1[0x3];                                       // 0x00B1(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Temp_int_Variable_1;                               // 0x00B4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_CustomEvent_Angle;                          // 0x00B8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	E_PuzzleCube_SelectedSide                     K2Node_CustomEvent_Side;                           // 0x00BC(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_CustomEvent_RotateCenter;                   // 0x00BD(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsKubeSolved_Solved;                      // 0x00BE(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_BF[0x1];                                       // 0x00BF(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x00C0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_C4[0x4];                                       // 0x00C4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class USaveGame*                              K2Node_CustomEvent_SaveGameObject;                 // 0x00C8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FString                                 K2Node_CustomEvent_SlotName;                       // 0x00D0(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	int32                                         CallFunc_GetUserControllerId_ReturnValue;          // 0x00E0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_GetUserControllerId_ReturnValue_1;        // 0x00E4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UFlameGameInstance*                     CallFunc_GetFlameGameInstance_ReturnValue;         // 0x00E8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UFlameGameInstance*                     CallFunc_GetFlameGameInstance_ReturnValue_1;       // 0x00F0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UFlameGameSave*                         CallFunc_SaveGameToSlotByPlatform_ReturnValue;     // 0x00F8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UFlameGameLoad*                         CallFunc_LoadGameFromSlotByPlatform_ReturnValue;   // 0x0100(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue_1;                    // 0x0108(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue_2;                    // 0x0109(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_PuzzleCube_Functional_C_ExecuteUbergraph_BP_PuzzleCube_Functional) == 0x000008, "Wrong alignment on BP_PuzzleCube_Functional_C_ExecuteUbergraph_BP_PuzzleCube_Functional");
static_assert(sizeof(BP_PuzzleCube_Functional_C_ExecuteUbergraph_BP_PuzzleCube_Functional) == 0x000110, "Wrong size on BP_PuzzleCube_Functional_C_ExecuteUbergraph_BP_PuzzleCube_Functional");
static_assert(offsetof(BP_PuzzleCube_Functional_C_ExecuteUbergraph_BP_PuzzleCube_Functional, EntryPoint) == 0x000000, "Member 'BP_PuzzleCube_Functional_C_ExecuteUbergraph_BP_PuzzleCube_Functional::EntryPoint' has a wrong offset!");
static_assert(offsetof(BP_PuzzleCube_Functional_C_ExecuteUbergraph_BP_PuzzleCube_Functional, K2Node_CustomEvent_SaveGame_1) == 0x000008, "Member 'BP_PuzzleCube_Functional_C_ExecuteUbergraph_BP_PuzzleCube_Functional::K2Node_CustomEvent_SaveGame_1' has a wrong offset!");
static_assert(offsetof(BP_PuzzleCube_Functional_C_ExecuteUbergraph_BP_PuzzleCube_Functional, K2Node_CreateDelegate_OutputDelegate) == 0x000010, "Member 'BP_PuzzleCube_Functional_C_ExecuteUbergraph_BP_PuzzleCube_Functional::K2Node_CreateDelegate_OutputDelegate' has a wrong offset!");
static_assert(offsetof(BP_PuzzleCube_Functional_C_ExecuteUbergraph_BP_PuzzleCube_Functional, K2Node_CustomEvent_SaveGame) == 0x000020, "Member 'BP_PuzzleCube_Functional_C_ExecuteUbergraph_BP_PuzzleCube_Functional::K2Node_CustomEvent_SaveGame' has a wrong offset!");
static_assert(offsetof(BP_PuzzleCube_Functional_C_ExecuteUbergraph_BP_PuzzleCube_Functional, K2Node_CreateDelegate_OutputDelegate_1) == 0x000028, "Member 'BP_PuzzleCube_Functional_C_ExecuteUbergraph_BP_PuzzleCube_Functional::K2Node_CreateDelegate_OutputDelegate_1' has a wrong offset!");
static_assert(offsetof(BP_PuzzleCube_Functional_C_ExecuteUbergraph_BP_PuzzleCube_Functional, Temp_object_Variable) == 0x000038, "Member 'BP_PuzzleCube_Functional_C_ExecuteUbergraph_BP_PuzzleCube_Functional::Temp_object_Variable' has a wrong offset!");
static_assert(offsetof(BP_PuzzleCube_Functional_C_ExecuteUbergraph_BP_PuzzleCube_Functional, K2Node_CreateDelegate_OutputDelegate_2) == 0x000040, "Member 'BP_PuzzleCube_Functional_C_ExecuteUbergraph_BP_PuzzleCube_Functional::K2Node_CreateDelegate_OutputDelegate_2' has a wrong offset!");
static_assert(offsetof(BP_PuzzleCube_Functional_C_ExecuteUbergraph_BP_PuzzleCube_Functional, K2Node_DynamicCast_AsBP_Puzzle_Cube_Save_Game) == 0x000050, "Member 'BP_PuzzleCube_Functional_C_ExecuteUbergraph_BP_PuzzleCube_Functional::K2Node_DynamicCast_AsBP_Puzzle_Cube_Save_Game' has a wrong offset!");
static_assert(offsetof(BP_PuzzleCube_Functional_C_ExecuteUbergraph_BP_PuzzleCube_Functional, K2Node_DynamicCast_bSuccess) == 0x000058, "Member 'BP_PuzzleCube_Functional_C_ExecuteUbergraph_BP_PuzzleCube_Functional::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(BP_PuzzleCube_Functional_C_ExecuteUbergraph_BP_PuzzleCube_Functional, K2Node_CustomEvent_SlotName_2) == 0x000060, "Member 'BP_PuzzleCube_Functional_C_ExecuteUbergraph_BP_PuzzleCube_Functional::K2Node_CustomEvent_SlotName_2' has a wrong offset!");
static_assert(offsetof(BP_PuzzleCube_Functional_C_ExecuteUbergraph_BP_PuzzleCube_Functional, K2Node_CustomEvent_UserIndex_1) == 0x000070, "Member 'BP_PuzzleCube_Functional_C_ExecuteUbergraph_BP_PuzzleCube_Functional::K2Node_CustomEvent_UserIndex_1' has a wrong offset!");
static_assert(offsetof(BP_PuzzleCube_Functional_C_ExecuteUbergraph_BP_PuzzleCube_Functional, K2Node_CustomEvent_SlotName_1) == 0x000078, "Member 'BP_PuzzleCube_Functional_C_ExecuteUbergraph_BP_PuzzleCube_Functional::K2Node_CustomEvent_SlotName_1' has a wrong offset!");
static_assert(offsetof(BP_PuzzleCube_Functional_C_ExecuteUbergraph_BP_PuzzleCube_Functional, K2Node_CustomEvent_UserIndex) == 0x000088, "Member 'BP_PuzzleCube_Functional_C_ExecuteUbergraph_BP_PuzzleCube_Functional::K2Node_CustomEvent_UserIndex' has a wrong offset!");
static_assert(offsetof(BP_PuzzleCube_Functional_C_ExecuteUbergraph_BP_PuzzleCube_Functional, K2Node_CreateDelegate_OutputDelegate_3) == 0x00008C, "Member 'BP_PuzzleCube_Functional_C_ExecuteUbergraph_BP_PuzzleCube_Functional::K2Node_CreateDelegate_OutputDelegate_3' has a wrong offset!");
static_assert(offsetof(BP_PuzzleCube_Functional_C_ExecuteUbergraph_BP_PuzzleCube_Functional, Temp_int_Variable) == 0x00009C, "Member 'BP_PuzzleCube_Functional_C_ExecuteUbergraph_BP_PuzzleCube_Functional::Temp_int_Variable' has a wrong offset!");
static_assert(offsetof(BP_PuzzleCube_Functional_C_ExecuteUbergraph_BP_PuzzleCube_Functional, Temp_string_Variable) == 0x0000A0, "Member 'BP_PuzzleCube_Functional_C_ExecuteUbergraph_BP_PuzzleCube_Functional::Temp_string_Variable' has a wrong offset!");
static_assert(offsetof(BP_PuzzleCube_Functional_C_ExecuteUbergraph_BP_PuzzleCube_Functional, CallFunc_IsValid_ReturnValue) == 0x0000B0, "Member 'BP_PuzzleCube_Functional_C_ExecuteUbergraph_BP_PuzzleCube_Functional::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PuzzleCube_Functional_C_ExecuteUbergraph_BP_PuzzleCube_Functional, Temp_int_Variable_1) == 0x0000B4, "Member 'BP_PuzzleCube_Functional_C_ExecuteUbergraph_BP_PuzzleCube_Functional::Temp_int_Variable_1' has a wrong offset!");
static_assert(offsetof(BP_PuzzleCube_Functional_C_ExecuteUbergraph_BP_PuzzleCube_Functional, K2Node_CustomEvent_Angle) == 0x0000B8, "Member 'BP_PuzzleCube_Functional_C_ExecuteUbergraph_BP_PuzzleCube_Functional::K2Node_CustomEvent_Angle' has a wrong offset!");
static_assert(offsetof(BP_PuzzleCube_Functional_C_ExecuteUbergraph_BP_PuzzleCube_Functional, K2Node_CustomEvent_Side) == 0x0000BC, "Member 'BP_PuzzleCube_Functional_C_ExecuteUbergraph_BP_PuzzleCube_Functional::K2Node_CustomEvent_Side' has a wrong offset!");
static_assert(offsetof(BP_PuzzleCube_Functional_C_ExecuteUbergraph_BP_PuzzleCube_Functional, K2Node_CustomEvent_RotateCenter) == 0x0000BD, "Member 'BP_PuzzleCube_Functional_C_ExecuteUbergraph_BP_PuzzleCube_Functional::K2Node_CustomEvent_RotateCenter' has a wrong offset!");
static_assert(offsetof(BP_PuzzleCube_Functional_C_ExecuteUbergraph_BP_PuzzleCube_Functional, CallFunc_IsKubeSolved_Solved) == 0x0000BE, "Member 'BP_PuzzleCube_Functional_C_ExecuteUbergraph_BP_PuzzleCube_Functional::CallFunc_IsKubeSolved_Solved' has a wrong offset!");
static_assert(offsetof(BP_PuzzleCube_Functional_C_ExecuteUbergraph_BP_PuzzleCube_Functional, CallFunc_Add_IntInt_ReturnValue) == 0x0000C0, "Member 'BP_PuzzleCube_Functional_C_ExecuteUbergraph_BP_PuzzleCube_Functional::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PuzzleCube_Functional_C_ExecuteUbergraph_BP_PuzzleCube_Functional, K2Node_CustomEvent_SaveGameObject) == 0x0000C8, "Member 'BP_PuzzleCube_Functional_C_ExecuteUbergraph_BP_PuzzleCube_Functional::K2Node_CustomEvent_SaveGameObject' has a wrong offset!");
static_assert(offsetof(BP_PuzzleCube_Functional_C_ExecuteUbergraph_BP_PuzzleCube_Functional, K2Node_CustomEvent_SlotName) == 0x0000D0, "Member 'BP_PuzzleCube_Functional_C_ExecuteUbergraph_BP_PuzzleCube_Functional::K2Node_CustomEvent_SlotName' has a wrong offset!");
static_assert(offsetof(BP_PuzzleCube_Functional_C_ExecuteUbergraph_BP_PuzzleCube_Functional, CallFunc_GetUserControllerId_ReturnValue) == 0x0000E0, "Member 'BP_PuzzleCube_Functional_C_ExecuteUbergraph_BP_PuzzleCube_Functional::CallFunc_GetUserControllerId_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PuzzleCube_Functional_C_ExecuteUbergraph_BP_PuzzleCube_Functional, CallFunc_GetUserControllerId_ReturnValue_1) == 0x0000E4, "Member 'BP_PuzzleCube_Functional_C_ExecuteUbergraph_BP_PuzzleCube_Functional::CallFunc_GetUserControllerId_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_PuzzleCube_Functional_C_ExecuteUbergraph_BP_PuzzleCube_Functional, CallFunc_GetFlameGameInstance_ReturnValue) == 0x0000E8, "Member 'BP_PuzzleCube_Functional_C_ExecuteUbergraph_BP_PuzzleCube_Functional::CallFunc_GetFlameGameInstance_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PuzzleCube_Functional_C_ExecuteUbergraph_BP_PuzzleCube_Functional, CallFunc_GetFlameGameInstance_ReturnValue_1) == 0x0000F0, "Member 'BP_PuzzleCube_Functional_C_ExecuteUbergraph_BP_PuzzleCube_Functional::CallFunc_GetFlameGameInstance_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_PuzzleCube_Functional_C_ExecuteUbergraph_BP_PuzzleCube_Functional, CallFunc_SaveGameToSlotByPlatform_ReturnValue) == 0x0000F8, "Member 'BP_PuzzleCube_Functional_C_ExecuteUbergraph_BP_PuzzleCube_Functional::CallFunc_SaveGameToSlotByPlatform_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PuzzleCube_Functional_C_ExecuteUbergraph_BP_PuzzleCube_Functional, CallFunc_LoadGameFromSlotByPlatform_ReturnValue) == 0x000100, "Member 'BP_PuzzleCube_Functional_C_ExecuteUbergraph_BP_PuzzleCube_Functional::CallFunc_LoadGameFromSlotByPlatform_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PuzzleCube_Functional_C_ExecuteUbergraph_BP_PuzzleCube_Functional, CallFunc_IsValid_ReturnValue_1) == 0x000108, "Member 'BP_PuzzleCube_Functional_C_ExecuteUbergraph_BP_PuzzleCube_Functional::CallFunc_IsValid_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_PuzzleCube_Functional_C_ExecuteUbergraph_BP_PuzzleCube_Functional, CallFunc_IsValid_ReturnValue_2) == 0x000109, "Member 'BP_PuzzleCube_Functional_C_ExecuteUbergraph_BP_PuzzleCube_Functional::CallFunc_IsValid_ReturnValue_2' has a wrong offset!");

// Function BP_PuzzleCube_Functional.BP_PuzzleCube_Functional_C.SaveToSlotAsync
// 0x0018 (0x0018 - 0x0000)
struct BP_PuzzleCube_Functional_C_SaveToSlotAsync final
{
public:
	class USaveGame*                              SaveGameObject;                                    // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FString                                 SlotName;                                          // 0x0008(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_PuzzleCube_Functional_C_SaveToSlotAsync) == 0x000008, "Wrong alignment on BP_PuzzleCube_Functional_C_SaveToSlotAsync");
static_assert(sizeof(BP_PuzzleCube_Functional_C_SaveToSlotAsync) == 0x000018, "Wrong size on BP_PuzzleCube_Functional_C_SaveToSlotAsync");
static_assert(offsetof(BP_PuzzleCube_Functional_C_SaveToSlotAsync, SaveGameObject) == 0x000000, "Member 'BP_PuzzleCube_Functional_C_SaveToSlotAsync::SaveGameObject' has a wrong offset!");
static_assert(offsetof(BP_PuzzleCube_Functional_C_SaveToSlotAsync, SlotName) == 0x000008, "Member 'BP_PuzzleCube_Functional_C_SaveToSlotAsync::SlotName' has a wrong offset!");

// Function BP_PuzzleCube_Functional.BP_PuzzleCube_Functional_C.Rotate
// 0x0008 (0x0008 - 0x0000)
struct BP_PuzzleCube_Functional_C_Rotate final
{
public:
	float                                         Angle;                                             // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	E_PuzzleCube_SelectedSide                     Side;                                              // 0x0004(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          RotateCenter_0;                                    // 0x0005(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_PuzzleCube_Functional_C_Rotate) == 0x000004, "Wrong alignment on BP_PuzzleCube_Functional_C_Rotate");
static_assert(sizeof(BP_PuzzleCube_Functional_C_Rotate) == 0x000008, "Wrong size on BP_PuzzleCube_Functional_C_Rotate");
static_assert(offsetof(BP_PuzzleCube_Functional_C_Rotate, Angle) == 0x000000, "Member 'BP_PuzzleCube_Functional_C_Rotate::Angle' has a wrong offset!");
static_assert(offsetof(BP_PuzzleCube_Functional_C_Rotate, Side) == 0x000004, "Member 'BP_PuzzleCube_Functional_C_Rotate::Side' has a wrong offset!");
static_assert(offsetof(BP_PuzzleCube_Functional_C_Rotate, RotateCenter_0) == 0x000005, "Member 'BP_PuzzleCube_Functional_C_Rotate::RotateCenter_0' has a wrong offset!");

// Function BP_PuzzleCube_Functional.BP_PuzzleCube_Functional_C.OnSaveSucceed_BBA922CF443C06F17BF094A4DDE62BF4
// 0x0018 (0x0018 - 0x0000)
struct BP_PuzzleCube_Functional_C_OnSaveSucceed_BBA922CF443C06F17BF094A4DDE62BF4 final
{
public:
	class FString                                 SlotName;                                          // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)
	int32                                         UserIndex;                                         // 0x0010(0x0004)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_PuzzleCube_Functional_C_OnSaveSucceed_BBA922CF443C06F17BF094A4DDE62BF4) == 0x000008, "Wrong alignment on BP_PuzzleCube_Functional_C_OnSaveSucceed_BBA922CF443C06F17BF094A4DDE62BF4");
static_assert(sizeof(BP_PuzzleCube_Functional_C_OnSaveSucceed_BBA922CF443C06F17BF094A4DDE62BF4) == 0x000018, "Wrong size on BP_PuzzleCube_Functional_C_OnSaveSucceed_BBA922CF443C06F17BF094A4DDE62BF4");
static_assert(offsetof(BP_PuzzleCube_Functional_C_OnSaveSucceed_BBA922CF443C06F17BF094A4DDE62BF4, SlotName) == 0x000000, "Member 'BP_PuzzleCube_Functional_C_OnSaveSucceed_BBA922CF443C06F17BF094A4DDE62BF4::SlotName' has a wrong offset!");
static_assert(offsetof(BP_PuzzleCube_Functional_C_OnSaveSucceed_BBA922CF443C06F17BF094A4DDE62BF4, UserIndex) == 0x000010, "Member 'BP_PuzzleCube_Functional_C_OnSaveSucceed_BBA922CF443C06F17BF094A4DDE62BF4::UserIndex' has a wrong offset!");

// Function BP_PuzzleCube_Functional.BP_PuzzleCube_Functional_C.OnSaveFailed_BBA922CF443C06F17BF094A4DDE62BF4
// 0x0018 (0x0018 - 0x0000)
struct BP_PuzzleCube_Functional_C_OnSaveFailed_BBA922CF443C06F17BF094A4DDE62BF4 final
{
public:
	class FString                                 SlotName;                                          // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)
	int32                                         UserIndex;                                         // 0x0010(0x0004)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_PuzzleCube_Functional_C_OnSaveFailed_BBA922CF443C06F17BF094A4DDE62BF4) == 0x000008, "Wrong alignment on BP_PuzzleCube_Functional_C_OnSaveFailed_BBA922CF443C06F17BF094A4DDE62BF4");
static_assert(sizeof(BP_PuzzleCube_Functional_C_OnSaveFailed_BBA922CF443C06F17BF094A4DDE62BF4) == 0x000018, "Wrong size on BP_PuzzleCube_Functional_C_OnSaveFailed_BBA922CF443C06F17BF094A4DDE62BF4");
static_assert(offsetof(BP_PuzzleCube_Functional_C_OnSaveFailed_BBA922CF443C06F17BF094A4DDE62BF4, SlotName) == 0x000000, "Member 'BP_PuzzleCube_Functional_C_OnSaveFailed_BBA922CF443C06F17BF094A4DDE62BF4::SlotName' has a wrong offset!");
static_assert(offsetof(BP_PuzzleCube_Functional_C_OnSaveFailed_BBA922CF443C06F17BF094A4DDE62BF4, UserIndex) == 0x000010, "Member 'BP_PuzzleCube_Functional_C_OnSaveFailed_BBA922CF443C06F17BF094A4DDE62BF4::UserIndex' has a wrong offset!");

// Function BP_PuzzleCube_Functional.BP_PuzzleCube_Functional_C.OnLoadSucceed_3560E73A455123247FA38EB20F6A2859
// 0x0008 (0x0008 - 0x0000)
struct BP_PuzzleCube_Functional_C_OnLoadSucceed_3560E73A455123247FA38EB20F6A2859 final
{
public:
	class USaveGame*                              SaveGame;                                          // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_PuzzleCube_Functional_C_OnLoadSucceed_3560E73A455123247FA38EB20F6A2859) == 0x000008, "Wrong alignment on BP_PuzzleCube_Functional_C_OnLoadSucceed_3560E73A455123247FA38EB20F6A2859");
static_assert(sizeof(BP_PuzzleCube_Functional_C_OnLoadSucceed_3560E73A455123247FA38EB20F6A2859) == 0x000008, "Wrong size on BP_PuzzleCube_Functional_C_OnLoadSucceed_3560E73A455123247FA38EB20F6A2859");
static_assert(offsetof(BP_PuzzleCube_Functional_C_OnLoadSucceed_3560E73A455123247FA38EB20F6A2859, SaveGame) == 0x000000, "Member 'BP_PuzzleCube_Functional_C_OnLoadSucceed_3560E73A455123247FA38EB20F6A2859::SaveGame' has a wrong offset!");

// Function BP_PuzzleCube_Functional.BP_PuzzleCube_Functional_C.OnLoadFailed_3560E73A455123247FA38EB20F6A2859
// 0x0008 (0x0008 - 0x0000)
struct BP_PuzzleCube_Functional_C_OnLoadFailed_3560E73A455123247FA38EB20F6A2859 final
{
public:
	class USaveGame*                              SaveGame;                                          // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_PuzzleCube_Functional_C_OnLoadFailed_3560E73A455123247FA38EB20F6A2859) == 0x000008, "Wrong alignment on BP_PuzzleCube_Functional_C_OnLoadFailed_3560E73A455123247FA38EB20F6A2859");
static_assert(sizeof(BP_PuzzleCube_Functional_C_OnLoadFailed_3560E73A455123247FA38EB20F6A2859) == 0x000008, "Wrong size on BP_PuzzleCube_Functional_C_OnLoadFailed_3560E73A455123247FA38EB20F6A2859");
static_assert(offsetof(BP_PuzzleCube_Functional_C_OnLoadFailed_3560E73A455123247FA38EB20F6A2859, SaveGame) == 0x000000, "Member 'BP_PuzzleCube_Functional_C_OnLoadFailed_3560E73A455123247FA38EB20F6A2859::SaveGame' has a wrong offset!");

// Function BP_PuzzleCube_Functional.BP_PuzzleCube_Functional_C.GetRotationForFace
// 0x00C0 (0x00C0 - 0x0000)
struct BP_PuzzleCube_Functional_C_GetRotationForFace final
{
public:
	class USceneComponent*                        Part;                                              // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Rotation_Roll;                                     // 0x0008(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	E_PuzzleCube_SelectedSide                     Side;                                              // 0x000C(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          RotateCenter_0;                                    // 0x000D(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Exec;                                              // 0x000E(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_F[0x1];                                        // 0x000F(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	struct FQuat                                  DeltaQuat;                                         // 0x0010(0x0010)(Parm, OutParm, IsPlainOldData, NoDestructor)
	int32                                         Temp_int_Variable;                                 // 0x0020(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue;          // 0x0024(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_DegSin_ReturnValue;                       // 0x0028(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue_1;        // 0x002C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_DegSin_ReturnValue_1;                     // 0x0030(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_X;                            // 0x0034(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_Y;                            // 0x0038(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_Z;                            // 0x003C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	E_PuzzleCube_SelectedSide                     Temp_byte_Variable;                                // 0x0040(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	E_PuzzleCube_SelectedSide                     Temp_byte_Variable_1;                              // 0x0041(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_42[0x2];                                       // 0x0042(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_MakeLiteralFloat_ReturnValue;             // 0x0044(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_DegSin_ReturnValue_2;                     // 0x0048(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Variable_1;                               // 0x004C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FQuat                                  K2Node_MakeStruct_Quat;                            // 0x0050(0x0010)(IsPlainOldData, NoDestructor)
	struct FQuat                                  K2Node_MakeStruct_Quat_1;                          // 0x0060(0x0010)(IsPlainOldData, NoDestructor)
	struct FQuat                                  K2Node_MakeStruct_Quat_2;                          // 0x0070(0x0010)(IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable;                                // 0x0080(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_81[0xF];                                       // 0x0081(0x000F)(Fixing Size After Last Property [ Dumper-7 ])
	struct FQuat                                  K2Node_Select_Default;                             // 0x0090(0x0010)(IsPlainOldData, NoDestructor)
	int32                                         K2Node_Select_Default_1;                           // 0x00A0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Array_Get_Item;                           // 0x00A4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Multiply_IntFloat_ReturnValue;            // 0x00A8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_NearlyEqual_FloatFloat_ReturnValue;       // 0x00AC(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_NearlyEqual_FloatFloat_ReturnValue_1;     // 0x00AD(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_NearlyEqual_FloatFloat_ReturnValue_2;     // 0x00AE(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_NearlyEqual_FloatFloat_ReturnValue_3;     // 0x00AF(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_NearlyEqual_FloatFloat_ReturnValue_4;     // 0x00B0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_NearlyEqual_FloatFloat_ReturnValue_5;     // 0x00B1(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_Select_Default_2;                           // 0x00B2(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_PuzzleCube_Functional_C_GetRotationForFace) == 0x000010, "Wrong alignment on BP_PuzzleCube_Functional_C_GetRotationForFace");
static_assert(sizeof(BP_PuzzleCube_Functional_C_GetRotationForFace) == 0x0000C0, "Wrong size on BP_PuzzleCube_Functional_C_GetRotationForFace");
static_assert(offsetof(BP_PuzzleCube_Functional_C_GetRotationForFace, Part) == 0x000000, "Member 'BP_PuzzleCube_Functional_C_GetRotationForFace::Part' has a wrong offset!");
static_assert(offsetof(BP_PuzzleCube_Functional_C_GetRotationForFace, Rotation_Roll) == 0x000008, "Member 'BP_PuzzleCube_Functional_C_GetRotationForFace::Rotation_Roll' has a wrong offset!");
static_assert(offsetof(BP_PuzzleCube_Functional_C_GetRotationForFace, Side) == 0x00000C, "Member 'BP_PuzzleCube_Functional_C_GetRotationForFace::Side' has a wrong offset!");
static_assert(offsetof(BP_PuzzleCube_Functional_C_GetRotationForFace, RotateCenter_0) == 0x00000D, "Member 'BP_PuzzleCube_Functional_C_GetRotationForFace::RotateCenter_0' has a wrong offset!");
static_assert(offsetof(BP_PuzzleCube_Functional_C_GetRotationForFace, Exec) == 0x00000E, "Member 'BP_PuzzleCube_Functional_C_GetRotationForFace::Exec' has a wrong offset!");
static_assert(offsetof(BP_PuzzleCube_Functional_C_GetRotationForFace, DeltaQuat) == 0x000010, "Member 'BP_PuzzleCube_Functional_C_GetRotationForFace::DeltaQuat' has a wrong offset!");
static_assert(offsetof(BP_PuzzleCube_Functional_C_GetRotationForFace, Temp_int_Variable) == 0x000020, "Member 'BP_PuzzleCube_Functional_C_GetRotationForFace::Temp_int_Variable' has a wrong offset!");
static_assert(offsetof(BP_PuzzleCube_Functional_C_GetRotationForFace, CallFunc_Multiply_FloatFloat_ReturnValue) == 0x000024, "Member 'BP_PuzzleCube_Functional_C_GetRotationForFace::CallFunc_Multiply_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PuzzleCube_Functional_C_GetRotationForFace, CallFunc_DegSin_ReturnValue) == 0x000028, "Member 'BP_PuzzleCube_Functional_C_GetRotationForFace::CallFunc_DegSin_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PuzzleCube_Functional_C_GetRotationForFace, CallFunc_Multiply_FloatFloat_ReturnValue_1) == 0x00002C, "Member 'BP_PuzzleCube_Functional_C_GetRotationForFace::CallFunc_Multiply_FloatFloat_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_PuzzleCube_Functional_C_GetRotationForFace, CallFunc_DegSin_ReturnValue_1) == 0x000030, "Member 'BP_PuzzleCube_Functional_C_GetRotationForFace::CallFunc_DegSin_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_PuzzleCube_Functional_C_GetRotationForFace, CallFunc_BreakVector_X) == 0x000034, "Member 'BP_PuzzleCube_Functional_C_GetRotationForFace::CallFunc_BreakVector_X' has a wrong offset!");
static_assert(offsetof(BP_PuzzleCube_Functional_C_GetRotationForFace, CallFunc_BreakVector_Y) == 0x000038, "Member 'BP_PuzzleCube_Functional_C_GetRotationForFace::CallFunc_BreakVector_Y' has a wrong offset!");
static_assert(offsetof(BP_PuzzleCube_Functional_C_GetRotationForFace, CallFunc_BreakVector_Z) == 0x00003C, "Member 'BP_PuzzleCube_Functional_C_GetRotationForFace::CallFunc_BreakVector_Z' has a wrong offset!");
static_assert(offsetof(BP_PuzzleCube_Functional_C_GetRotationForFace, Temp_byte_Variable) == 0x000040, "Member 'BP_PuzzleCube_Functional_C_GetRotationForFace::Temp_byte_Variable' has a wrong offset!");
static_assert(offsetof(BP_PuzzleCube_Functional_C_GetRotationForFace, Temp_byte_Variable_1) == 0x000041, "Member 'BP_PuzzleCube_Functional_C_GetRotationForFace::Temp_byte_Variable_1' has a wrong offset!");
static_assert(offsetof(BP_PuzzleCube_Functional_C_GetRotationForFace, CallFunc_MakeLiteralFloat_ReturnValue) == 0x000044, "Member 'BP_PuzzleCube_Functional_C_GetRotationForFace::CallFunc_MakeLiteralFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PuzzleCube_Functional_C_GetRotationForFace, CallFunc_DegSin_ReturnValue_2) == 0x000048, "Member 'BP_PuzzleCube_Functional_C_GetRotationForFace::CallFunc_DegSin_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BP_PuzzleCube_Functional_C_GetRotationForFace, Temp_int_Variable_1) == 0x00004C, "Member 'BP_PuzzleCube_Functional_C_GetRotationForFace::Temp_int_Variable_1' has a wrong offset!");
static_assert(offsetof(BP_PuzzleCube_Functional_C_GetRotationForFace, K2Node_MakeStruct_Quat) == 0x000050, "Member 'BP_PuzzleCube_Functional_C_GetRotationForFace::K2Node_MakeStruct_Quat' has a wrong offset!");
static_assert(offsetof(BP_PuzzleCube_Functional_C_GetRotationForFace, K2Node_MakeStruct_Quat_1) == 0x000060, "Member 'BP_PuzzleCube_Functional_C_GetRotationForFace::K2Node_MakeStruct_Quat_1' has a wrong offset!");
static_assert(offsetof(BP_PuzzleCube_Functional_C_GetRotationForFace, K2Node_MakeStruct_Quat_2) == 0x000070, "Member 'BP_PuzzleCube_Functional_C_GetRotationForFace::K2Node_MakeStruct_Quat_2' has a wrong offset!");
static_assert(offsetof(BP_PuzzleCube_Functional_C_GetRotationForFace, Temp_bool_Variable) == 0x000080, "Member 'BP_PuzzleCube_Functional_C_GetRotationForFace::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(BP_PuzzleCube_Functional_C_GetRotationForFace, K2Node_Select_Default) == 0x000090, "Member 'BP_PuzzleCube_Functional_C_GetRotationForFace::K2Node_Select_Default' has a wrong offset!");
static_assert(offsetof(BP_PuzzleCube_Functional_C_GetRotationForFace, K2Node_Select_Default_1) == 0x0000A0, "Member 'BP_PuzzleCube_Functional_C_GetRotationForFace::K2Node_Select_Default_1' has a wrong offset!");
static_assert(offsetof(BP_PuzzleCube_Functional_C_GetRotationForFace, CallFunc_Array_Get_Item) == 0x0000A4, "Member 'BP_PuzzleCube_Functional_C_GetRotationForFace::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(BP_PuzzleCube_Functional_C_GetRotationForFace, CallFunc_Multiply_IntFloat_ReturnValue) == 0x0000A8, "Member 'BP_PuzzleCube_Functional_C_GetRotationForFace::CallFunc_Multiply_IntFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PuzzleCube_Functional_C_GetRotationForFace, CallFunc_NearlyEqual_FloatFloat_ReturnValue) == 0x0000AC, "Member 'BP_PuzzleCube_Functional_C_GetRotationForFace::CallFunc_NearlyEqual_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PuzzleCube_Functional_C_GetRotationForFace, CallFunc_NearlyEqual_FloatFloat_ReturnValue_1) == 0x0000AD, "Member 'BP_PuzzleCube_Functional_C_GetRotationForFace::CallFunc_NearlyEqual_FloatFloat_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_PuzzleCube_Functional_C_GetRotationForFace, CallFunc_NearlyEqual_FloatFloat_ReturnValue_2) == 0x0000AE, "Member 'BP_PuzzleCube_Functional_C_GetRotationForFace::CallFunc_NearlyEqual_FloatFloat_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BP_PuzzleCube_Functional_C_GetRotationForFace, CallFunc_NearlyEqual_FloatFloat_ReturnValue_3) == 0x0000AF, "Member 'BP_PuzzleCube_Functional_C_GetRotationForFace::CallFunc_NearlyEqual_FloatFloat_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(BP_PuzzleCube_Functional_C_GetRotationForFace, CallFunc_NearlyEqual_FloatFloat_ReturnValue_4) == 0x0000B0, "Member 'BP_PuzzleCube_Functional_C_GetRotationForFace::CallFunc_NearlyEqual_FloatFloat_ReturnValue_4' has a wrong offset!");
static_assert(offsetof(BP_PuzzleCube_Functional_C_GetRotationForFace, CallFunc_NearlyEqual_FloatFloat_ReturnValue_5) == 0x0000B1, "Member 'BP_PuzzleCube_Functional_C_GetRotationForFace::CallFunc_NearlyEqual_FloatFloat_ReturnValue_5' has a wrong offset!");
static_assert(offsetof(BP_PuzzleCube_Functional_C_GetRotationForFace, K2Node_Select_Default_2) == 0x0000B2, "Member 'BP_PuzzleCube_Functional_C_GetRotationForFace::K2Node_Select_Default_2' has a wrong offset!");

// Function BP_PuzzleCube_Functional.BP_PuzzleCube_Functional_C.Init
// 0x01B0 (0x01B0 - 0x0000)
struct BP_PuzzleCube_Functional_C_Init final
{
public:
	int32                                         Temp_int_Array_Index_Variable;                     // 0x0000(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable_1;                  // 0x000C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue_1;                 // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Array_Index_Variable_1;                   // 0x0014(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FS_PuzzleCubeSavedState                CallFunc_Map_Find_Value;                           // 0x0018(0x0038)(HasGetValueTypeHash)
	bool                                          CallFunc_Map_Find_ReturnValue;                     // 0x0050(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_51[0x3];                                       // 0x0051(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x0054(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue_1;               // 0x0058(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_IntInt_ReturnValue;            // 0x005C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_5D[0x3];                                       // 0x005D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Array_Length_ReturnValue_2;               // 0x0060(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_IntInt_ReturnValue_1;          // 0x0064(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_65[0x3];                                       // 0x0065(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_BreakTransform_Location;                  // 0x0068(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               CallFunc_BreakTransform_Rotation;                  // 0x0074(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FVector                                CallFunc_BreakTransform_Scale;                     // 0x0080(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanAND_ReturnValue;                   // 0x008C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_8D[0x3];                                       // 0x008D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Array_LastIndex_ReturnValue;              // 0x0090(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_94[0x4];                                       // 0x0094(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UStaticMeshComponent*                   CallFunc_Array_Get_Item;                           // 0x0098(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue_3;               // 0x00A0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_A4[0xC];                                       // 0x00A4(0x000C)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             CallFunc_MakeTransform_ReturnValue;                // 0x00B0(0x0030)(IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x00E0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_E1[0x7];                                       // 0x00E1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FDateTime                              CallFunc_Now_ReturnValue;                          // 0x00E8(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	struct FQuat                                  K2Node_MakeStruct_Quat;                            // 0x00F0(0x0010)(IsPlainOldData, NoDestructor)
	int32                                         CallFunc_Array_Add_ReturnValue;                    // 0x0100(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Variable;                                 // 0x0104(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UStaticMeshComponent*                   CallFunc_Array_Get_Item_1;                         // 0x0108(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue_4;               // 0x0110(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FHitResult                             CallFunc_K2_SetRelativeLocationAndRotation_SweepHitResult; // 0x0114(0x008C)(IsPlainOldData, NoDestructor, ContainsInstancedReference)
	bool                                          CallFunc_Less_IntInt_ReturnValue_1;                // 0x01A0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_LessEqual_IntInt_ReturnValue;             // 0x01A1(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_1A2[0x2];                                      // 0x01A2(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Add_IntInt_ReturnValue_2;                 // 0x01A4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Add_ReturnValue_1;                  // 0x01A8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_PuzzleCube_Functional_C_Init) == 0x000010, "Wrong alignment on BP_PuzzleCube_Functional_C_Init");
static_assert(sizeof(BP_PuzzleCube_Functional_C_Init) == 0x0001B0, "Wrong size on BP_PuzzleCube_Functional_C_Init");
static_assert(offsetof(BP_PuzzleCube_Functional_C_Init, Temp_int_Array_Index_Variable) == 0x000000, "Member 'BP_PuzzleCube_Functional_C_Init::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(BP_PuzzleCube_Functional_C_Init, Temp_int_Loop_Counter_Variable) == 0x000004, "Member 'BP_PuzzleCube_Functional_C_Init::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(BP_PuzzleCube_Functional_C_Init, CallFunc_Add_IntInt_ReturnValue) == 0x000008, "Member 'BP_PuzzleCube_Functional_C_Init::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PuzzleCube_Functional_C_Init, Temp_int_Loop_Counter_Variable_1) == 0x00000C, "Member 'BP_PuzzleCube_Functional_C_Init::Temp_int_Loop_Counter_Variable_1' has a wrong offset!");
static_assert(offsetof(BP_PuzzleCube_Functional_C_Init, CallFunc_Add_IntInt_ReturnValue_1) == 0x000010, "Member 'BP_PuzzleCube_Functional_C_Init::CallFunc_Add_IntInt_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_PuzzleCube_Functional_C_Init, Temp_int_Array_Index_Variable_1) == 0x000014, "Member 'BP_PuzzleCube_Functional_C_Init::Temp_int_Array_Index_Variable_1' has a wrong offset!");
static_assert(offsetof(BP_PuzzleCube_Functional_C_Init, CallFunc_Map_Find_Value) == 0x000018, "Member 'BP_PuzzleCube_Functional_C_Init::CallFunc_Map_Find_Value' has a wrong offset!");
static_assert(offsetof(BP_PuzzleCube_Functional_C_Init, CallFunc_Map_Find_ReturnValue) == 0x000050, "Member 'BP_PuzzleCube_Functional_C_Init::CallFunc_Map_Find_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PuzzleCube_Functional_C_Init, CallFunc_Array_Length_ReturnValue) == 0x000054, "Member 'BP_PuzzleCube_Functional_C_Init::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PuzzleCube_Functional_C_Init, CallFunc_Array_Length_ReturnValue_1) == 0x000058, "Member 'BP_PuzzleCube_Functional_C_Init::CallFunc_Array_Length_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_PuzzleCube_Functional_C_Init, CallFunc_EqualEqual_IntInt_ReturnValue) == 0x00005C, "Member 'BP_PuzzleCube_Functional_C_Init::CallFunc_EqualEqual_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PuzzleCube_Functional_C_Init, CallFunc_Array_Length_ReturnValue_2) == 0x000060, "Member 'BP_PuzzleCube_Functional_C_Init::CallFunc_Array_Length_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BP_PuzzleCube_Functional_C_Init, CallFunc_EqualEqual_IntInt_ReturnValue_1) == 0x000064, "Member 'BP_PuzzleCube_Functional_C_Init::CallFunc_EqualEqual_IntInt_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_PuzzleCube_Functional_C_Init, CallFunc_BreakTransform_Location) == 0x000068, "Member 'BP_PuzzleCube_Functional_C_Init::CallFunc_BreakTransform_Location' has a wrong offset!");
static_assert(offsetof(BP_PuzzleCube_Functional_C_Init, CallFunc_BreakTransform_Rotation) == 0x000074, "Member 'BP_PuzzleCube_Functional_C_Init::CallFunc_BreakTransform_Rotation' has a wrong offset!");
static_assert(offsetof(BP_PuzzleCube_Functional_C_Init, CallFunc_BreakTransform_Scale) == 0x000080, "Member 'BP_PuzzleCube_Functional_C_Init::CallFunc_BreakTransform_Scale' has a wrong offset!");
static_assert(offsetof(BP_PuzzleCube_Functional_C_Init, CallFunc_BooleanAND_ReturnValue) == 0x00008C, "Member 'BP_PuzzleCube_Functional_C_Init::CallFunc_BooleanAND_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PuzzleCube_Functional_C_Init, CallFunc_Array_LastIndex_ReturnValue) == 0x000090, "Member 'BP_PuzzleCube_Functional_C_Init::CallFunc_Array_LastIndex_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PuzzleCube_Functional_C_Init, CallFunc_Array_Get_Item) == 0x000098, "Member 'BP_PuzzleCube_Functional_C_Init::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(BP_PuzzleCube_Functional_C_Init, CallFunc_Array_Length_ReturnValue_3) == 0x0000A0, "Member 'BP_PuzzleCube_Functional_C_Init::CallFunc_Array_Length_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(BP_PuzzleCube_Functional_C_Init, CallFunc_MakeTransform_ReturnValue) == 0x0000B0, "Member 'BP_PuzzleCube_Functional_C_Init::CallFunc_MakeTransform_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PuzzleCube_Functional_C_Init, CallFunc_Less_IntInt_ReturnValue) == 0x0000E0, "Member 'BP_PuzzleCube_Functional_C_Init::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PuzzleCube_Functional_C_Init, CallFunc_Now_ReturnValue) == 0x0000E8, "Member 'BP_PuzzleCube_Functional_C_Init::CallFunc_Now_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PuzzleCube_Functional_C_Init, K2Node_MakeStruct_Quat) == 0x0000F0, "Member 'BP_PuzzleCube_Functional_C_Init::K2Node_MakeStruct_Quat' has a wrong offset!");
static_assert(offsetof(BP_PuzzleCube_Functional_C_Init, CallFunc_Array_Add_ReturnValue) == 0x000100, "Member 'BP_PuzzleCube_Functional_C_Init::CallFunc_Array_Add_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PuzzleCube_Functional_C_Init, Temp_int_Variable) == 0x000104, "Member 'BP_PuzzleCube_Functional_C_Init::Temp_int_Variable' has a wrong offset!");
static_assert(offsetof(BP_PuzzleCube_Functional_C_Init, CallFunc_Array_Get_Item_1) == 0x000108, "Member 'BP_PuzzleCube_Functional_C_Init::CallFunc_Array_Get_Item_1' has a wrong offset!");
static_assert(offsetof(BP_PuzzleCube_Functional_C_Init, CallFunc_Array_Length_ReturnValue_4) == 0x000110, "Member 'BP_PuzzleCube_Functional_C_Init::CallFunc_Array_Length_ReturnValue_4' has a wrong offset!");
static_assert(offsetof(BP_PuzzleCube_Functional_C_Init, CallFunc_K2_SetRelativeLocationAndRotation_SweepHitResult) == 0x000114, "Member 'BP_PuzzleCube_Functional_C_Init::CallFunc_K2_SetRelativeLocationAndRotation_SweepHitResult' has a wrong offset!");
static_assert(offsetof(BP_PuzzleCube_Functional_C_Init, CallFunc_Less_IntInt_ReturnValue_1) == 0x0001A0, "Member 'BP_PuzzleCube_Functional_C_Init::CallFunc_Less_IntInt_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_PuzzleCube_Functional_C_Init, CallFunc_LessEqual_IntInt_ReturnValue) == 0x0001A1, "Member 'BP_PuzzleCube_Functional_C_Init::CallFunc_LessEqual_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PuzzleCube_Functional_C_Init, CallFunc_Add_IntInt_ReturnValue_2) == 0x0001A4, "Member 'BP_PuzzleCube_Functional_C_Init::CallFunc_Add_IntInt_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BP_PuzzleCube_Functional_C_Init, CallFunc_Array_Add_ReturnValue_1) == 0x0001A8, "Member 'BP_PuzzleCube_Functional_C_Init::CallFunc_Array_Add_ReturnValue_1' has a wrong offset!");

// Function BP_PuzzleCube_Functional.BP_PuzzleCube_Functional_C.RotateFace
// 0x0014 (0x0014 - 0x0000)
struct BP_PuzzleCube_Functional_C_RotateFace final
{
public:
	float                                         Angle;                                             // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	E_PuzzleCube_SelectedSide                     Temp_byte_Variable;                                // 0x0004(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue;          // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_Select_Default;                             // 0x000C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Not_PreBool_ReturnValue;                  // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_PuzzleCube_Functional_C_RotateFace) == 0x000004, "Wrong alignment on BP_PuzzleCube_Functional_C_RotateFace");
static_assert(sizeof(BP_PuzzleCube_Functional_C_RotateFace) == 0x000014, "Wrong size on BP_PuzzleCube_Functional_C_RotateFace");
static_assert(offsetof(BP_PuzzleCube_Functional_C_RotateFace, Angle) == 0x000000, "Member 'BP_PuzzleCube_Functional_C_RotateFace::Angle' has a wrong offset!");
static_assert(offsetof(BP_PuzzleCube_Functional_C_RotateFace, Temp_byte_Variable) == 0x000004, "Member 'BP_PuzzleCube_Functional_C_RotateFace::Temp_byte_Variable' has a wrong offset!");
static_assert(offsetof(BP_PuzzleCube_Functional_C_RotateFace, CallFunc_Multiply_FloatFloat_ReturnValue) == 0x000008, "Member 'BP_PuzzleCube_Functional_C_RotateFace::CallFunc_Multiply_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PuzzleCube_Functional_C_RotateFace, K2Node_Select_Default) == 0x00000C, "Member 'BP_PuzzleCube_Functional_C_RotateFace::K2Node_Select_Default' has a wrong offset!");
static_assert(offsetof(BP_PuzzleCube_Functional_C_RotateFace, CallFunc_Not_PreBool_ReturnValue) == 0x000010, "Member 'BP_PuzzleCube_Functional_C_RotateFace::CallFunc_Not_PreBool_ReturnValue' has a wrong offset!");

// Function BP_PuzzleCube_Functional.BP_PuzzleCube_Functional_C.SetActiveFace
// 0x0050 (0x0050 - 0x0000)
struct BP_PuzzleCube_Functional_C_SetActiveFace final
{
public:
	E_PuzzleCube_SelectedSide                     SideToRotate;                                      // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable;                                // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_2[0x2];                                        // 0x0002(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Temp_float_Variable;                               // 0x0004(0x0004)(ConstParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Temp_float_Variable_1;                             // 0x0008(0x0004)(ConstParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Array_Index_Variable;                     // 0x000C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x0014(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UStaticMeshComponent*                   CallFunc_Array_Get_Item;                           // 0x0018(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Not_PreBool_ReturnValue;                  // 0x0020(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_GetRotationForFace_Exec;                  // 0x0021(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_22[0xE];                                       // 0x0022(0x000E)(Fixing Size After Last Property [ Dumper-7 ])
	struct FQuat                                  CallFunc_GetRotationForFace_DeltaQuat;             // 0x0030(0x0010)(IsPlainOldData, NoDestructor)
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x0040(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_Select_Default;                             // 0x0044(0x0004)(ConstParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x0048(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_PuzzleCube_Functional_C_SetActiveFace) == 0x000010, "Wrong alignment on BP_PuzzleCube_Functional_C_SetActiveFace");
static_assert(sizeof(BP_PuzzleCube_Functional_C_SetActiveFace) == 0x000050, "Wrong size on BP_PuzzleCube_Functional_C_SetActiveFace");
static_assert(offsetof(BP_PuzzleCube_Functional_C_SetActiveFace, SideToRotate) == 0x000000, "Member 'BP_PuzzleCube_Functional_C_SetActiveFace::SideToRotate' has a wrong offset!");
static_assert(offsetof(BP_PuzzleCube_Functional_C_SetActiveFace, Temp_bool_Variable) == 0x000001, "Member 'BP_PuzzleCube_Functional_C_SetActiveFace::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(BP_PuzzleCube_Functional_C_SetActiveFace, Temp_float_Variable) == 0x000004, "Member 'BP_PuzzleCube_Functional_C_SetActiveFace::Temp_float_Variable' has a wrong offset!");
static_assert(offsetof(BP_PuzzleCube_Functional_C_SetActiveFace, Temp_float_Variable_1) == 0x000008, "Member 'BP_PuzzleCube_Functional_C_SetActiveFace::Temp_float_Variable_1' has a wrong offset!");
static_assert(offsetof(BP_PuzzleCube_Functional_C_SetActiveFace, Temp_int_Array_Index_Variable) == 0x00000C, "Member 'BP_PuzzleCube_Functional_C_SetActiveFace::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(BP_PuzzleCube_Functional_C_SetActiveFace, Temp_int_Loop_Counter_Variable) == 0x000010, "Member 'BP_PuzzleCube_Functional_C_SetActiveFace::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(BP_PuzzleCube_Functional_C_SetActiveFace, CallFunc_Add_IntInt_ReturnValue) == 0x000014, "Member 'BP_PuzzleCube_Functional_C_SetActiveFace::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PuzzleCube_Functional_C_SetActiveFace, CallFunc_Array_Get_Item) == 0x000018, "Member 'BP_PuzzleCube_Functional_C_SetActiveFace::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(BP_PuzzleCube_Functional_C_SetActiveFace, CallFunc_Not_PreBool_ReturnValue) == 0x000020, "Member 'BP_PuzzleCube_Functional_C_SetActiveFace::CallFunc_Not_PreBool_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PuzzleCube_Functional_C_SetActiveFace, CallFunc_GetRotationForFace_Exec) == 0x000021, "Member 'BP_PuzzleCube_Functional_C_SetActiveFace::CallFunc_GetRotationForFace_Exec' has a wrong offset!");
static_assert(offsetof(BP_PuzzleCube_Functional_C_SetActiveFace, CallFunc_GetRotationForFace_DeltaQuat) == 0x000030, "Member 'BP_PuzzleCube_Functional_C_SetActiveFace::CallFunc_GetRotationForFace_DeltaQuat' has a wrong offset!");
static_assert(offsetof(BP_PuzzleCube_Functional_C_SetActiveFace, CallFunc_Array_Length_ReturnValue) == 0x000040, "Member 'BP_PuzzleCube_Functional_C_SetActiveFace::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PuzzleCube_Functional_C_SetActiveFace, K2Node_Select_Default) == 0x000044, "Member 'BP_PuzzleCube_Functional_C_SetActiveFace::K2Node_Select_Default' has a wrong offset!");
static_assert(offsetof(BP_PuzzleCube_Functional_C_SetActiveFace, CallFunc_Less_IntInt_ReturnValue) == 0x000048, "Member 'BP_PuzzleCube_Functional_C_SetActiveFace::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");

// Function BP_PuzzleCube_Functional.BP_PuzzleCube_Functional_C.RotateCenter
// 0x0014 (0x0014 - 0x0000)
struct BP_PuzzleCube_Functional_C_RotateCenter final
{
public:
	float                                         Angle;                                             // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	E_PuzzleCube_SelectedSide                     Temp_byte_Variable;                                // 0x0004(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue;          // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_Select_Default;                             // 0x000C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Not_PreBool_ReturnValue;                  // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_PuzzleCube_Functional_C_RotateCenter) == 0x000004, "Wrong alignment on BP_PuzzleCube_Functional_C_RotateCenter");
static_assert(sizeof(BP_PuzzleCube_Functional_C_RotateCenter) == 0x000014, "Wrong size on BP_PuzzleCube_Functional_C_RotateCenter");
static_assert(offsetof(BP_PuzzleCube_Functional_C_RotateCenter, Angle) == 0x000000, "Member 'BP_PuzzleCube_Functional_C_RotateCenter::Angle' has a wrong offset!");
static_assert(offsetof(BP_PuzzleCube_Functional_C_RotateCenter, Temp_byte_Variable) == 0x000004, "Member 'BP_PuzzleCube_Functional_C_RotateCenter::Temp_byte_Variable' has a wrong offset!");
static_assert(offsetof(BP_PuzzleCube_Functional_C_RotateCenter, CallFunc_Multiply_FloatFloat_ReturnValue) == 0x000008, "Member 'BP_PuzzleCube_Functional_C_RotateCenter::CallFunc_Multiply_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PuzzleCube_Functional_C_RotateCenter, K2Node_Select_Default) == 0x00000C, "Member 'BP_PuzzleCube_Functional_C_RotateCenter::K2Node_Select_Default' has a wrong offset!");
static_assert(offsetof(BP_PuzzleCube_Functional_C_RotateCenter, CallFunc_Not_PreBool_ReturnValue) == 0x000010, "Member 'BP_PuzzleCube_Functional_C_RotateCenter::CallFunc_Not_PreBool_ReturnValue' has a wrong offset!");

// Function BP_PuzzleCube_Functional.BP_PuzzleCube_Functional_C.SnapToGrid(vector)
// 0x0040 (0x0040 - 0x0000)
struct BP_PuzzleCube_Functional_C_SnapToGrid_vector_ final
{
public:
	struct FVector                                Vector;                                            // 0x0000(0x000C)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         GridSize;                                          // 0x000C(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                ReturnValue;                                       // 0x0010(0x000C)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_X;                            // 0x001C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_Y;                            // 0x0020(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_Z;                            // 0x0024(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_GridSnap_Float_ReturnValue;               // 0x0028(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_GridSnap_Float_ReturnValue_1;             // 0x002C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_GridSnap_Float_ReturnValue_2;             // 0x0030(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_MakeVector_ReturnValue;                   // 0x0034(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_PuzzleCube_Functional_C_SnapToGrid_vector_) == 0x000004, "Wrong alignment on BP_PuzzleCube_Functional_C_SnapToGrid_vector_");
static_assert(sizeof(BP_PuzzleCube_Functional_C_SnapToGrid_vector_) == 0x000040, "Wrong size on BP_PuzzleCube_Functional_C_SnapToGrid_vector_");
static_assert(offsetof(BP_PuzzleCube_Functional_C_SnapToGrid_vector_, Vector) == 0x000000, "Member 'BP_PuzzleCube_Functional_C_SnapToGrid_vector_::Vector' has a wrong offset!");
static_assert(offsetof(BP_PuzzleCube_Functional_C_SnapToGrid_vector_, GridSize) == 0x00000C, "Member 'BP_PuzzleCube_Functional_C_SnapToGrid_vector_::GridSize' has a wrong offset!");
static_assert(offsetof(BP_PuzzleCube_Functional_C_SnapToGrid_vector_, ReturnValue) == 0x000010, "Member 'BP_PuzzleCube_Functional_C_SnapToGrid_vector_::ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PuzzleCube_Functional_C_SnapToGrid_vector_, CallFunc_BreakVector_X) == 0x00001C, "Member 'BP_PuzzleCube_Functional_C_SnapToGrid_vector_::CallFunc_BreakVector_X' has a wrong offset!");
static_assert(offsetof(BP_PuzzleCube_Functional_C_SnapToGrid_vector_, CallFunc_BreakVector_Y) == 0x000020, "Member 'BP_PuzzleCube_Functional_C_SnapToGrid_vector_::CallFunc_BreakVector_Y' has a wrong offset!");
static_assert(offsetof(BP_PuzzleCube_Functional_C_SnapToGrid_vector_, CallFunc_BreakVector_Z) == 0x000024, "Member 'BP_PuzzleCube_Functional_C_SnapToGrid_vector_::CallFunc_BreakVector_Z' has a wrong offset!");
static_assert(offsetof(BP_PuzzleCube_Functional_C_SnapToGrid_vector_, CallFunc_GridSnap_Float_ReturnValue) == 0x000028, "Member 'BP_PuzzleCube_Functional_C_SnapToGrid_vector_::CallFunc_GridSnap_Float_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PuzzleCube_Functional_C_SnapToGrid_vector_, CallFunc_GridSnap_Float_ReturnValue_1) == 0x00002C, "Member 'BP_PuzzleCube_Functional_C_SnapToGrid_vector_::CallFunc_GridSnap_Float_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_PuzzleCube_Functional_C_SnapToGrid_vector_, CallFunc_GridSnap_Float_ReturnValue_2) == 0x000030, "Member 'BP_PuzzleCube_Functional_C_SnapToGrid_vector_::CallFunc_GridSnap_Float_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BP_PuzzleCube_Functional_C_SnapToGrid_vector_, CallFunc_MakeVector_ReturnValue) == 0x000034, "Member 'BP_PuzzleCube_Functional_C_SnapToGrid_vector_::CallFunc_MakeVector_ReturnValue' has a wrong offset!");

// Function BP_PuzzleCube_Functional.BP_PuzzleCube_Functional_C.RotationTimelineInit
// 0x00F0 (0x00F0 - 0x0000)
struct BP_PuzzleCube_Functional_C_RotationTimelineInit final
{
public:
	float                                         Angle;                                             // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	E_PuzzleCube_SelectedSide                     Side;                                              // 0x0004(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          RotateCenter;                                      // 0x0005(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_6[0x2];                                        // 0x0006(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x000C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x0014(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_15[0x3];                                       // 0x0015(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Temp_int_Array_Index_Variable;                     // 0x0018(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UStaticMeshComponent*                   CallFunc_Array_Get_Item;                           // 0x0020(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_28[0x8];                                       // 0x0028(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             CallFunc_GetRelativeTransform_ReturnValue;         // 0x0030(0x0030)(IsPlainOldData, NoDestructor)
	bool                                          CallFunc_GetRotationForFace_Exec;                  // 0x0060(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_61[0xF];                                       // 0x0061(0x000F)(Fixing Size After Last Property [ Dumper-7 ])
	struct FQuat                                  CallFunc_GetRotationForFace_DeltaQuat;             // 0x0070(0x0010)(IsPlainOldData, NoDestructor)
	struct FFPuzzleCube_RotationInfo              K2Node_MakeStruct_FPuzzleCube_RotationInfo;        // 0x0080(0x0060)(IsPlainOldData, NoDestructor, ContainsInstancedReference, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Add_ReturnValue;                    // 0x00E0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_PuzzleCube_Functional_C_RotationTimelineInit) == 0x000010, "Wrong alignment on BP_PuzzleCube_Functional_C_RotationTimelineInit");
static_assert(sizeof(BP_PuzzleCube_Functional_C_RotationTimelineInit) == 0x0000F0, "Wrong size on BP_PuzzleCube_Functional_C_RotationTimelineInit");
static_assert(offsetof(BP_PuzzleCube_Functional_C_RotationTimelineInit, Angle) == 0x000000, "Member 'BP_PuzzleCube_Functional_C_RotationTimelineInit::Angle' has a wrong offset!");
static_assert(offsetof(BP_PuzzleCube_Functional_C_RotationTimelineInit, Side) == 0x000004, "Member 'BP_PuzzleCube_Functional_C_RotationTimelineInit::Side' has a wrong offset!");
static_assert(offsetof(BP_PuzzleCube_Functional_C_RotationTimelineInit, RotateCenter) == 0x000005, "Member 'BP_PuzzleCube_Functional_C_RotationTimelineInit::RotateCenter' has a wrong offset!");
static_assert(offsetof(BP_PuzzleCube_Functional_C_RotationTimelineInit, Temp_int_Loop_Counter_Variable) == 0x000008, "Member 'BP_PuzzleCube_Functional_C_RotationTimelineInit::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(BP_PuzzleCube_Functional_C_RotationTimelineInit, CallFunc_Array_Length_ReturnValue) == 0x00000C, "Member 'BP_PuzzleCube_Functional_C_RotationTimelineInit::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PuzzleCube_Functional_C_RotationTimelineInit, CallFunc_Add_IntInt_ReturnValue) == 0x000010, "Member 'BP_PuzzleCube_Functional_C_RotationTimelineInit::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PuzzleCube_Functional_C_RotationTimelineInit, CallFunc_Less_IntInt_ReturnValue) == 0x000014, "Member 'BP_PuzzleCube_Functional_C_RotationTimelineInit::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PuzzleCube_Functional_C_RotationTimelineInit, Temp_int_Array_Index_Variable) == 0x000018, "Member 'BP_PuzzleCube_Functional_C_RotationTimelineInit::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(BP_PuzzleCube_Functional_C_RotationTimelineInit, CallFunc_Array_Get_Item) == 0x000020, "Member 'BP_PuzzleCube_Functional_C_RotationTimelineInit::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(BP_PuzzleCube_Functional_C_RotationTimelineInit, CallFunc_GetRelativeTransform_ReturnValue) == 0x000030, "Member 'BP_PuzzleCube_Functional_C_RotationTimelineInit::CallFunc_GetRelativeTransform_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PuzzleCube_Functional_C_RotationTimelineInit, CallFunc_GetRotationForFace_Exec) == 0x000060, "Member 'BP_PuzzleCube_Functional_C_RotationTimelineInit::CallFunc_GetRotationForFace_Exec' has a wrong offset!");
static_assert(offsetof(BP_PuzzleCube_Functional_C_RotationTimelineInit, CallFunc_GetRotationForFace_DeltaQuat) == 0x000070, "Member 'BP_PuzzleCube_Functional_C_RotationTimelineInit::CallFunc_GetRotationForFace_DeltaQuat' has a wrong offset!");
static_assert(offsetof(BP_PuzzleCube_Functional_C_RotationTimelineInit, K2Node_MakeStruct_FPuzzleCube_RotationInfo) == 0x000080, "Member 'BP_PuzzleCube_Functional_C_RotationTimelineInit::K2Node_MakeStruct_FPuzzleCube_RotationInfo' has a wrong offset!");
static_assert(offsetof(BP_PuzzleCube_Functional_C_RotationTimelineInit, CallFunc_Array_Add_ReturnValue) == 0x0000E0, "Member 'BP_PuzzleCube_Functional_C_RotationTimelineInit::CallFunc_Array_Add_ReturnValue' has a wrong offset!");

// Function BP_PuzzleCube_Functional.BP_PuzzleCube_Functional_C.RotationTimelineUpdate
// 0x0170 (0x0170 - 0x0000)
struct BP_PuzzleCube_Functional_C_RotationTimelineUpdate final
{
public:
	float                                         Alpha;                                             // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Array_Index_Variable;                     // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x000C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_14[0xC];                                       // 0x0014(0x000C)(Fixing Size After Last Property [ Dumper-7 ])
	struct FFPuzzleCube_RotationInfo              CallFunc_Array_Get_Item;                           // 0x0020(0x0060)(IsPlainOldData, NoDestructor, ContainsInstancedReference, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x0080(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_81[0x3];                                       // 0x0081(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue;          // 0x0084(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue_1;        // 0x0088(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue_2;        // 0x008C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FQuat                                  K2Node_MakeStruct_Quat;                            // 0x0090(0x0010)(IsPlainOldData, NoDestructor)
	struct FQuat                                  CallFunc_NormalizeQuaternion_ReturnValue;          // 0x00A0(0x0010)(IsPlainOldData, NoDestructor)
	struct FTransform                             CallFunc_RotateTransformQuat_ReturnValue;          // 0x00B0(0x0030)(IsPlainOldData, NoDestructor)
	struct FHitResult                             CallFunc_K2_SetRelativeTransform_SweepHitResult;   // 0x00E0(0x008C)(IsPlainOldData, NoDestructor, ContainsInstancedReference)
};
static_assert(alignof(BP_PuzzleCube_Functional_C_RotationTimelineUpdate) == 0x000010, "Wrong alignment on BP_PuzzleCube_Functional_C_RotationTimelineUpdate");
static_assert(sizeof(BP_PuzzleCube_Functional_C_RotationTimelineUpdate) == 0x000170, "Wrong size on BP_PuzzleCube_Functional_C_RotationTimelineUpdate");
static_assert(offsetof(BP_PuzzleCube_Functional_C_RotationTimelineUpdate, Alpha) == 0x000000, "Member 'BP_PuzzleCube_Functional_C_RotationTimelineUpdate::Alpha' has a wrong offset!");
static_assert(offsetof(BP_PuzzleCube_Functional_C_RotationTimelineUpdate, Temp_int_Array_Index_Variable) == 0x000004, "Member 'BP_PuzzleCube_Functional_C_RotationTimelineUpdate::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(BP_PuzzleCube_Functional_C_RotationTimelineUpdate, Temp_int_Loop_Counter_Variable) == 0x000008, "Member 'BP_PuzzleCube_Functional_C_RotationTimelineUpdate::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(BP_PuzzleCube_Functional_C_RotationTimelineUpdate, CallFunc_Add_IntInt_ReturnValue) == 0x00000C, "Member 'BP_PuzzleCube_Functional_C_RotationTimelineUpdate::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PuzzleCube_Functional_C_RotationTimelineUpdate, CallFunc_Array_Length_ReturnValue) == 0x000010, "Member 'BP_PuzzleCube_Functional_C_RotationTimelineUpdate::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PuzzleCube_Functional_C_RotationTimelineUpdate, CallFunc_Array_Get_Item) == 0x000020, "Member 'BP_PuzzleCube_Functional_C_RotationTimelineUpdate::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(BP_PuzzleCube_Functional_C_RotationTimelineUpdate, CallFunc_Less_IntInt_ReturnValue) == 0x000080, "Member 'BP_PuzzleCube_Functional_C_RotationTimelineUpdate::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PuzzleCube_Functional_C_RotationTimelineUpdate, CallFunc_Multiply_FloatFloat_ReturnValue) == 0x000084, "Member 'BP_PuzzleCube_Functional_C_RotationTimelineUpdate::CallFunc_Multiply_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PuzzleCube_Functional_C_RotationTimelineUpdate, CallFunc_Multiply_FloatFloat_ReturnValue_1) == 0x000088, "Member 'BP_PuzzleCube_Functional_C_RotationTimelineUpdate::CallFunc_Multiply_FloatFloat_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_PuzzleCube_Functional_C_RotationTimelineUpdate, CallFunc_Multiply_FloatFloat_ReturnValue_2) == 0x00008C, "Member 'BP_PuzzleCube_Functional_C_RotationTimelineUpdate::CallFunc_Multiply_FloatFloat_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BP_PuzzleCube_Functional_C_RotationTimelineUpdate, K2Node_MakeStruct_Quat) == 0x000090, "Member 'BP_PuzzleCube_Functional_C_RotationTimelineUpdate::K2Node_MakeStruct_Quat' has a wrong offset!");
static_assert(offsetof(BP_PuzzleCube_Functional_C_RotationTimelineUpdate, CallFunc_NormalizeQuaternion_ReturnValue) == 0x0000A0, "Member 'BP_PuzzleCube_Functional_C_RotationTimelineUpdate::CallFunc_NormalizeQuaternion_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PuzzleCube_Functional_C_RotationTimelineUpdate, CallFunc_RotateTransformQuat_ReturnValue) == 0x0000B0, "Member 'BP_PuzzleCube_Functional_C_RotationTimelineUpdate::CallFunc_RotateTransformQuat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PuzzleCube_Functional_C_RotationTimelineUpdate, CallFunc_K2_SetRelativeTransform_SweepHitResult) == 0x0000E0, "Member 'BP_PuzzleCube_Functional_C_RotationTimelineUpdate::CallFunc_K2_SetRelativeTransform_SweepHitResult' has a wrong offset!");

// Function BP_PuzzleCube_Functional.BP_PuzzleCube_Functional_C.Shuffle
// 0x0001 (0x0001 - 0x0000)
struct BP_PuzzleCube_Functional_C_Shuffle final
{
public:
	bool                                          CallFunc_Not_PreBool_ReturnValue;                  // 0x0000(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_PuzzleCube_Functional_C_Shuffle) == 0x000001, "Wrong alignment on BP_PuzzleCube_Functional_C_Shuffle");
static_assert(sizeof(BP_PuzzleCube_Functional_C_Shuffle) == 0x000001, "Wrong size on BP_PuzzleCube_Functional_C_Shuffle");
static_assert(offsetof(BP_PuzzleCube_Functional_C_Shuffle, CallFunc_Not_PreBool_ReturnValue) == 0x000000, "Member 'BP_PuzzleCube_Functional_C_Shuffle::CallFunc_Not_PreBool_ReturnValue' has a wrong offset!");

// Function BP_PuzzleCube_Functional.BP_PuzzleCube_Functional_C.SaveToFile
// 0x00C0 (0x00C0 - 0x0000)
struct BP_PuzzleCube_Functional_C_SaveToFile final
{
public:
	TArray<struct FTransform>                     PartsTransforms;                                   // 0x0000(0x0010)(Edit, BlueprintVisible)
	int32                                         Temp_int_Array_Index_Variable;                     // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x0014(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x0018(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x001C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_1D[0x3];                                       // 0x001D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTimespan                              CallFunc_GetTimeTaken_ReturnValue;                 // 0x0020(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	struct FS_PuzzleCubeSavedState                K2Node_MakeStruct_S_PuzzleCubeSavedState;          // 0x0028(0x0038)(HasGetValueTypeHash)
	class UBP_PuzzleCube_SaveGame_C*              CallFunc_CreateSaveGameObject_ReturnValue;         // 0x0060(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UStaticMeshComponent*                   CallFunc_Array_Get_Item;                           // 0x0068(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x0070(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x0074(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_75[0xB];                                       // 0x0075(0x000B)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             CallFunc_MakeTransform_ReturnValue;                // 0x0080(0x0030)(IsPlainOldData, NoDestructor)
	int32                                         CallFunc_Array_Add_ReturnValue;                    // 0x00B0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_PuzzleCube_Functional_C_SaveToFile) == 0x000010, "Wrong alignment on BP_PuzzleCube_Functional_C_SaveToFile");
static_assert(sizeof(BP_PuzzleCube_Functional_C_SaveToFile) == 0x0000C0, "Wrong size on BP_PuzzleCube_Functional_C_SaveToFile");
static_assert(offsetof(BP_PuzzleCube_Functional_C_SaveToFile, PartsTransforms) == 0x000000, "Member 'BP_PuzzleCube_Functional_C_SaveToFile::PartsTransforms' has a wrong offset!");
static_assert(offsetof(BP_PuzzleCube_Functional_C_SaveToFile, Temp_int_Array_Index_Variable) == 0x000010, "Member 'BP_PuzzleCube_Functional_C_SaveToFile::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(BP_PuzzleCube_Functional_C_SaveToFile, Temp_int_Loop_Counter_Variable) == 0x000014, "Member 'BP_PuzzleCube_Functional_C_SaveToFile::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(BP_PuzzleCube_Functional_C_SaveToFile, CallFunc_Add_IntInt_ReturnValue) == 0x000018, "Member 'BP_PuzzleCube_Functional_C_SaveToFile::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PuzzleCube_Functional_C_SaveToFile, CallFunc_IsValid_ReturnValue) == 0x00001C, "Member 'BP_PuzzleCube_Functional_C_SaveToFile::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PuzzleCube_Functional_C_SaveToFile, CallFunc_GetTimeTaken_ReturnValue) == 0x000020, "Member 'BP_PuzzleCube_Functional_C_SaveToFile::CallFunc_GetTimeTaken_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PuzzleCube_Functional_C_SaveToFile, K2Node_MakeStruct_S_PuzzleCubeSavedState) == 0x000028, "Member 'BP_PuzzleCube_Functional_C_SaveToFile::K2Node_MakeStruct_S_PuzzleCubeSavedState' has a wrong offset!");
static_assert(offsetof(BP_PuzzleCube_Functional_C_SaveToFile, CallFunc_CreateSaveGameObject_ReturnValue) == 0x000060, "Member 'BP_PuzzleCube_Functional_C_SaveToFile::CallFunc_CreateSaveGameObject_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PuzzleCube_Functional_C_SaveToFile, CallFunc_Array_Get_Item) == 0x000068, "Member 'BP_PuzzleCube_Functional_C_SaveToFile::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(BP_PuzzleCube_Functional_C_SaveToFile, CallFunc_Array_Length_ReturnValue) == 0x000070, "Member 'BP_PuzzleCube_Functional_C_SaveToFile::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PuzzleCube_Functional_C_SaveToFile, CallFunc_Less_IntInt_ReturnValue) == 0x000074, "Member 'BP_PuzzleCube_Functional_C_SaveToFile::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PuzzleCube_Functional_C_SaveToFile, CallFunc_MakeTransform_ReturnValue) == 0x000080, "Member 'BP_PuzzleCube_Functional_C_SaveToFile::CallFunc_MakeTransform_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PuzzleCube_Functional_C_SaveToFile, CallFunc_Array_Add_ReturnValue) == 0x0000B0, "Member 'BP_PuzzleCube_Functional_C_SaveToFile::CallFunc_Array_Add_ReturnValue' has a wrong offset!");

// Function BP_PuzzleCube_Functional.BP_PuzzleCube_Functional_C.Rotate3DCube
// 0x0098 (0x0098 - 0x0000)
struct BP_PuzzleCube_Functional_C_Rotate3DCube final
{
public:
	struct FRotator                               NewParam;                                          // 0x0000(0x000C)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FHitResult                             CallFunc_K2_AddWorldRotation_SweepHitResult;       // 0x000C(0x008C)(IsPlainOldData, NoDestructor, ContainsInstancedReference)
};
static_assert(alignof(BP_PuzzleCube_Functional_C_Rotate3DCube) == 0x000004, "Wrong alignment on BP_PuzzleCube_Functional_C_Rotate3DCube");
static_assert(sizeof(BP_PuzzleCube_Functional_C_Rotate3DCube) == 0x000098, "Wrong size on BP_PuzzleCube_Functional_C_Rotate3DCube");
static_assert(offsetof(BP_PuzzleCube_Functional_C_Rotate3DCube, NewParam) == 0x000000, "Member 'BP_PuzzleCube_Functional_C_Rotate3DCube::NewParam' has a wrong offset!");
static_assert(offsetof(BP_PuzzleCube_Functional_C_Rotate3DCube, CallFunc_K2_AddWorldRotation_SweepHitResult) == 0x00000C, "Member 'BP_PuzzleCube_Functional_C_Rotate3DCube::CallFunc_K2_AddWorldRotation_SweepHitResult' has a wrong offset!");

// Function BP_PuzzleCube_Functional.BP_PuzzleCube_Functional_C.ShuffleInternal
// 0x0030 (0x0030 - 0x0000)
struct BP_PuzzleCube_Functional_C_ShuffleInternal final
{
public:
	int32                                         Times;                                             // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Variable;                                 // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	E_PuzzleCube_SelectedSide                     Temp_byte_Variable;                                // 0x0008(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	E_PuzzleCube_SelectedSide                     Temp_byte_Variable_1;                              // 0x0009(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	E_PuzzleCube_SelectedSide                     Temp_byte_Variable_2;                              // 0x000A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	E_PuzzleCube_SelectedSide                     Temp_byte_Variable_3;                              // 0x000B(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	E_PuzzleCube_SelectedSide                     Temp_byte_Variable_4;                              // 0x000C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	E_PuzzleCube_SelectedSide                     Temp_byte_Variable_5;                              // 0x000D(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_E[0x2];                                        // 0x000E(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Temp_int_Variable_1;                               // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_LessEqual_IntInt_ReturnValue;             // 0x0014(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_15[0x3];                                       // 0x0015(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x0018(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_RandomBool_ReturnValue;                   // 0x001C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_1D[0x3];                                       // 0x001D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_RandomInteger_ReturnValue;                // 0x0020(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_RandomBool_ReturnValue_1;                 // 0x0024(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_25[0x3];                                       // 0x0025(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_SelectFloat_ReturnValue;                  // 0x0028(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	E_PuzzleCube_SelectedSide                     K2Node_Select_Default;                             // 0x002C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_PuzzleCube_Functional_C_ShuffleInternal) == 0x000004, "Wrong alignment on BP_PuzzleCube_Functional_C_ShuffleInternal");
static_assert(sizeof(BP_PuzzleCube_Functional_C_ShuffleInternal) == 0x000030, "Wrong size on BP_PuzzleCube_Functional_C_ShuffleInternal");
static_assert(offsetof(BP_PuzzleCube_Functional_C_ShuffleInternal, Times) == 0x000000, "Member 'BP_PuzzleCube_Functional_C_ShuffleInternal::Times' has a wrong offset!");
static_assert(offsetof(BP_PuzzleCube_Functional_C_ShuffleInternal, Temp_int_Variable) == 0x000004, "Member 'BP_PuzzleCube_Functional_C_ShuffleInternal::Temp_int_Variable' has a wrong offset!");
static_assert(offsetof(BP_PuzzleCube_Functional_C_ShuffleInternal, Temp_byte_Variable) == 0x000008, "Member 'BP_PuzzleCube_Functional_C_ShuffleInternal::Temp_byte_Variable' has a wrong offset!");
static_assert(offsetof(BP_PuzzleCube_Functional_C_ShuffleInternal, Temp_byte_Variable_1) == 0x000009, "Member 'BP_PuzzleCube_Functional_C_ShuffleInternal::Temp_byte_Variable_1' has a wrong offset!");
static_assert(offsetof(BP_PuzzleCube_Functional_C_ShuffleInternal, Temp_byte_Variable_2) == 0x00000A, "Member 'BP_PuzzleCube_Functional_C_ShuffleInternal::Temp_byte_Variable_2' has a wrong offset!");
static_assert(offsetof(BP_PuzzleCube_Functional_C_ShuffleInternal, Temp_byte_Variable_3) == 0x00000B, "Member 'BP_PuzzleCube_Functional_C_ShuffleInternal::Temp_byte_Variable_3' has a wrong offset!");
static_assert(offsetof(BP_PuzzleCube_Functional_C_ShuffleInternal, Temp_byte_Variable_4) == 0x00000C, "Member 'BP_PuzzleCube_Functional_C_ShuffleInternal::Temp_byte_Variable_4' has a wrong offset!");
static_assert(offsetof(BP_PuzzleCube_Functional_C_ShuffleInternal, Temp_byte_Variable_5) == 0x00000D, "Member 'BP_PuzzleCube_Functional_C_ShuffleInternal::Temp_byte_Variable_5' has a wrong offset!");
static_assert(offsetof(BP_PuzzleCube_Functional_C_ShuffleInternal, Temp_int_Variable_1) == 0x000010, "Member 'BP_PuzzleCube_Functional_C_ShuffleInternal::Temp_int_Variable_1' has a wrong offset!");
static_assert(offsetof(BP_PuzzleCube_Functional_C_ShuffleInternal, CallFunc_LessEqual_IntInt_ReturnValue) == 0x000014, "Member 'BP_PuzzleCube_Functional_C_ShuffleInternal::CallFunc_LessEqual_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PuzzleCube_Functional_C_ShuffleInternal, CallFunc_Add_IntInt_ReturnValue) == 0x000018, "Member 'BP_PuzzleCube_Functional_C_ShuffleInternal::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PuzzleCube_Functional_C_ShuffleInternal, CallFunc_RandomBool_ReturnValue) == 0x00001C, "Member 'BP_PuzzleCube_Functional_C_ShuffleInternal::CallFunc_RandomBool_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PuzzleCube_Functional_C_ShuffleInternal, CallFunc_RandomInteger_ReturnValue) == 0x000020, "Member 'BP_PuzzleCube_Functional_C_ShuffleInternal::CallFunc_RandomInteger_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PuzzleCube_Functional_C_ShuffleInternal, CallFunc_RandomBool_ReturnValue_1) == 0x000024, "Member 'BP_PuzzleCube_Functional_C_ShuffleInternal::CallFunc_RandomBool_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_PuzzleCube_Functional_C_ShuffleInternal, CallFunc_SelectFloat_ReturnValue) == 0x000028, "Member 'BP_PuzzleCube_Functional_C_ShuffleInternal::CallFunc_SelectFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PuzzleCube_Functional_C_ShuffleInternal, K2Node_Select_Default) == 0x00002C, "Member 'BP_PuzzleCube_Functional_C_ShuffleInternal::K2Node_Select_Default' has a wrong offset!");

// Function BP_PuzzleCube_Functional.BP_PuzzleCube_Functional_C.UpdateCumulativeRotationsAndSnapToGrid
// 0x0320 (0x0320 - 0x0000)
struct BP_PuzzleCube_Functional_C_UpdateCumulativeRotationsAndSnapToGrid final
{
public:
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x0000(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4[0xC];                                        // 0x0004(0x000C)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             CallFunc_K2_GetComponentToWorld_ReturnValue;       // 0x0010(0x0030)(IsPlainOldData, NoDestructor)
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x0040(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FHitResult                             CallFunc_K2_SetWorldTransform_SweepHitResult;      // 0x0044(0x008C)(IsPlainOldData, NoDestructor, ContainsInstancedReference)
	int32                                         Temp_int_Array_Index_Variable;                     // 0x00D0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Array_Index_Variable_1;                   // 0x00D4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable_1;                  // 0x00D8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue_1;                 // 0x00DC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FFPuzzleCube_RotationInfo              CallFunc_Array_Get_Item;                           // 0x00E0(0x0060)(IsPlainOldData, NoDestructor, ContainsInstancedReference, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x0140(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x0144(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_145[0xB];                                      // 0x0145(0x000B)(Fixing Size After Last Property [ Dumper-7 ])
	struct FQuat                                  CallFunc_ComposeQuaternions_ReturnValue;           // 0x0150(0x0010)(IsPlainOldData, NoDestructor)
	struct FQuat                                  CallFunc_SnapTo90DegGrid_Quat2;                    // 0x0160(0x0010)(IsPlainOldData, NoDestructor)
	struct FQuat                                  CallFunc_NormalizeQuaternion_ReturnValue;          // 0x0170(0x0010)(IsPlainOldData, NoDestructor)
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue;          // 0x0180(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue_1;        // 0x0184(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue_2;        // 0x0188(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_18C[0x4];                                      // 0x018C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FQuat                                  K2Node_MakeStruct_Quat;                            // 0x0190(0x0010)(IsPlainOldData, NoDestructor)
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue_3;        // 0x01A0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1A4[0xC];                                      // 0x01A4(0x000C)(Fixing Size After Last Property [ Dumper-7 ])
	struct FQuat                                  CallFunc_NormalizeQuaternion_ReturnValue_1;        // 0x01B0(0x0010)(IsPlainOldData, NoDestructor)
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue_4;        // 0x01C0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue_5;        // 0x01C4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1C8[0x8];                                      // 0x01C8(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FQuat                                  K2Node_MakeStruct_Quat_1;                          // 0x01D0(0x0010)(IsPlainOldData, NoDestructor)
	class UStaticMeshComponent*                   CallFunc_Array_Get_Item_1;                         // 0x01E0(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1E8[0x8];                                      // 0x01E8(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FQuat                                  CallFunc_NormalizeQuaternion_ReturnValue_2;        // 0x01F0(0x0010)(IsPlainOldData, NoDestructor)
	struct FQuat                                  CallFunc_RotatorToQuaternion_ReturnValue;          // 0x0200(0x0010)(IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Equal__Quaternion__ReturnValue;           // 0x0210(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Not_PreBool_ReturnValue;                  // 0x0211(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_212[0xE];                                      // 0x0212(0x000E)(Fixing Size After Last Property [ Dumper-7 ])
	struct FQuat                                  CallFunc_RotatorToQuaternion_ReturnValue_1;        // 0x0220(0x0010)(IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Equal__Quaternion__ReturnValue_1;         // 0x0230(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Not_PreBool_ReturnValue_1;                // 0x0231(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_232[0xE];                                      // 0x0232(0x000E)(Fixing Size After Last Property [ Dumper-7 ])
	struct FQuat                                  CallFunc_RotatorToQuaternion_ReturnValue_2;        // 0x0240(0x0010)(IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Equal__Quaternion__ReturnValue_2;         // 0x0250(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Not_PreBool_ReturnValue_2;                // 0x0251(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_252[0xE];                                      // 0x0252(0x000E)(Fixing Size After Last Property [ Dumper-7 ])
	struct FQuat                                  CallFunc_RotatorToQuaternion_ReturnValue_3;        // 0x0260(0x0010)(IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Equal__Quaternion__ReturnValue_3;         // 0x0270(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Not_PreBool_ReturnValue_3;                // 0x0271(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_272[0x2];                                      // 0x0272(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_SnapToGrid_vector__ReturnValue;           // 0x0274(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FHitResult                             CallFunc_K2_SetRelativeLocation_SweepHitResult;    // 0x0280(0x008C)(IsPlainOldData, NoDestructor, ContainsInstancedReference)
	int32                                         CallFunc_Array_Length_ReturnValue_1;               // 0x030C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue_1;                // 0x0310(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_PuzzleCube_Functional_C_UpdateCumulativeRotationsAndSnapToGrid) == 0x000010, "Wrong alignment on BP_PuzzleCube_Functional_C_UpdateCumulativeRotationsAndSnapToGrid");
static_assert(sizeof(BP_PuzzleCube_Functional_C_UpdateCumulativeRotationsAndSnapToGrid) == 0x000320, "Wrong size on BP_PuzzleCube_Functional_C_UpdateCumulativeRotationsAndSnapToGrid");
static_assert(offsetof(BP_PuzzleCube_Functional_C_UpdateCumulativeRotationsAndSnapToGrid, Temp_int_Loop_Counter_Variable) == 0x000000, "Member 'BP_PuzzleCube_Functional_C_UpdateCumulativeRotationsAndSnapToGrid::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(BP_PuzzleCube_Functional_C_UpdateCumulativeRotationsAndSnapToGrid, CallFunc_K2_GetComponentToWorld_ReturnValue) == 0x000010, "Member 'BP_PuzzleCube_Functional_C_UpdateCumulativeRotationsAndSnapToGrid::CallFunc_K2_GetComponentToWorld_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PuzzleCube_Functional_C_UpdateCumulativeRotationsAndSnapToGrid, CallFunc_Add_IntInt_ReturnValue) == 0x000040, "Member 'BP_PuzzleCube_Functional_C_UpdateCumulativeRotationsAndSnapToGrid::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PuzzleCube_Functional_C_UpdateCumulativeRotationsAndSnapToGrid, CallFunc_K2_SetWorldTransform_SweepHitResult) == 0x000044, "Member 'BP_PuzzleCube_Functional_C_UpdateCumulativeRotationsAndSnapToGrid::CallFunc_K2_SetWorldTransform_SweepHitResult' has a wrong offset!");
static_assert(offsetof(BP_PuzzleCube_Functional_C_UpdateCumulativeRotationsAndSnapToGrid, Temp_int_Array_Index_Variable) == 0x0000D0, "Member 'BP_PuzzleCube_Functional_C_UpdateCumulativeRotationsAndSnapToGrid::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(BP_PuzzleCube_Functional_C_UpdateCumulativeRotationsAndSnapToGrid, Temp_int_Array_Index_Variable_1) == 0x0000D4, "Member 'BP_PuzzleCube_Functional_C_UpdateCumulativeRotationsAndSnapToGrid::Temp_int_Array_Index_Variable_1' has a wrong offset!");
static_assert(offsetof(BP_PuzzleCube_Functional_C_UpdateCumulativeRotationsAndSnapToGrid, Temp_int_Loop_Counter_Variable_1) == 0x0000D8, "Member 'BP_PuzzleCube_Functional_C_UpdateCumulativeRotationsAndSnapToGrid::Temp_int_Loop_Counter_Variable_1' has a wrong offset!");
static_assert(offsetof(BP_PuzzleCube_Functional_C_UpdateCumulativeRotationsAndSnapToGrid, CallFunc_Add_IntInt_ReturnValue_1) == 0x0000DC, "Member 'BP_PuzzleCube_Functional_C_UpdateCumulativeRotationsAndSnapToGrid::CallFunc_Add_IntInt_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_PuzzleCube_Functional_C_UpdateCumulativeRotationsAndSnapToGrid, CallFunc_Array_Get_Item) == 0x0000E0, "Member 'BP_PuzzleCube_Functional_C_UpdateCumulativeRotationsAndSnapToGrid::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(BP_PuzzleCube_Functional_C_UpdateCumulativeRotationsAndSnapToGrid, CallFunc_Array_Length_ReturnValue) == 0x000140, "Member 'BP_PuzzleCube_Functional_C_UpdateCumulativeRotationsAndSnapToGrid::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PuzzleCube_Functional_C_UpdateCumulativeRotationsAndSnapToGrid, CallFunc_Less_IntInt_ReturnValue) == 0x000144, "Member 'BP_PuzzleCube_Functional_C_UpdateCumulativeRotationsAndSnapToGrid::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PuzzleCube_Functional_C_UpdateCumulativeRotationsAndSnapToGrid, CallFunc_ComposeQuaternions_ReturnValue) == 0x000150, "Member 'BP_PuzzleCube_Functional_C_UpdateCumulativeRotationsAndSnapToGrid::CallFunc_ComposeQuaternions_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PuzzleCube_Functional_C_UpdateCumulativeRotationsAndSnapToGrid, CallFunc_SnapTo90DegGrid_Quat2) == 0x000160, "Member 'BP_PuzzleCube_Functional_C_UpdateCumulativeRotationsAndSnapToGrid::CallFunc_SnapTo90DegGrid_Quat2' has a wrong offset!");
static_assert(offsetof(BP_PuzzleCube_Functional_C_UpdateCumulativeRotationsAndSnapToGrid, CallFunc_NormalizeQuaternion_ReturnValue) == 0x000170, "Member 'BP_PuzzleCube_Functional_C_UpdateCumulativeRotationsAndSnapToGrid::CallFunc_NormalizeQuaternion_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PuzzleCube_Functional_C_UpdateCumulativeRotationsAndSnapToGrid, CallFunc_Multiply_FloatFloat_ReturnValue) == 0x000180, "Member 'BP_PuzzleCube_Functional_C_UpdateCumulativeRotationsAndSnapToGrid::CallFunc_Multiply_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PuzzleCube_Functional_C_UpdateCumulativeRotationsAndSnapToGrid, CallFunc_Multiply_FloatFloat_ReturnValue_1) == 0x000184, "Member 'BP_PuzzleCube_Functional_C_UpdateCumulativeRotationsAndSnapToGrid::CallFunc_Multiply_FloatFloat_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_PuzzleCube_Functional_C_UpdateCumulativeRotationsAndSnapToGrid, CallFunc_Multiply_FloatFloat_ReturnValue_2) == 0x000188, "Member 'BP_PuzzleCube_Functional_C_UpdateCumulativeRotationsAndSnapToGrid::CallFunc_Multiply_FloatFloat_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BP_PuzzleCube_Functional_C_UpdateCumulativeRotationsAndSnapToGrid, K2Node_MakeStruct_Quat) == 0x000190, "Member 'BP_PuzzleCube_Functional_C_UpdateCumulativeRotationsAndSnapToGrid::K2Node_MakeStruct_Quat' has a wrong offset!");
static_assert(offsetof(BP_PuzzleCube_Functional_C_UpdateCumulativeRotationsAndSnapToGrid, CallFunc_Multiply_FloatFloat_ReturnValue_3) == 0x0001A0, "Member 'BP_PuzzleCube_Functional_C_UpdateCumulativeRotationsAndSnapToGrid::CallFunc_Multiply_FloatFloat_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(BP_PuzzleCube_Functional_C_UpdateCumulativeRotationsAndSnapToGrid, CallFunc_NormalizeQuaternion_ReturnValue_1) == 0x0001B0, "Member 'BP_PuzzleCube_Functional_C_UpdateCumulativeRotationsAndSnapToGrid::CallFunc_NormalizeQuaternion_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_PuzzleCube_Functional_C_UpdateCumulativeRotationsAndSnapToGrid, CallFunc_Multiply_FloatFloat_ReturnValue_4) == 0x0001C0, "Member 'BP_PuzzleCube_Functional_C_UpdateCumulativeRotationsAndSnapToGrid::CallFunc_Multiply_FloatFloat_ReturnValue_4' has a wrong offset!");
static_assert(offsetof(BP_PuzzleCube_Functional_C_UpdateCumulativeRotationsAndSnapToGrid, CallFunc_Multiply_FloatFloat_ReturnValue_5) == 0x0001C4, "Member 'BP_PuzzleCube_Functional_C_UpdateCumulativeRotationsAndSnapToGrid::CallFunc_Multiply_FloatFloat_ReturnValue_5' has a wrong offset!");
static_assert(offsetof(BP_PuzzleCube_Functional_C_UpdateCumulativeRotationsAndSnapToGrid, K2Node_MakeStruct_Quat_1) == 0x0001D0, "Member 'BP_PuzzleCube_Functional_C_UpdateCumulativeRotationsAndSnapToGrid::K2Node_MakeStruct_Quat_1' has a wrong offset!");
static_assert(offsetof(BP_PuzzleCube_Functional_C_UpdateCumulativeRotationsAndSnapToGrid, CallFunc_Array_Get_Item_1) == 0x0001E0, "Member 'BP_PuzzleCube_Functional_C_UpdateCumulativeRotationsAndSnapToGrid::CallFunc_Array_Get_Item_1' has a wrong offset!");
static_assert(offsetof(BP_PuzzleCube_Functional_C_UpdateCumulativeRotationsAndSnapToGrid, CallFunc_NormalizeQuaternion_ReturnValue_2) == 0x0001F0, "Member 'BP_PuzzleCube_Functional_C_UpdateCumulativeRotationsAndSnapToGrid::CallFunc_NormalizeQuaternion_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BP_PuzzleCube_Functional_C_UpdateCumulativeRotationsAndSnapToGrid, CallFunc_RotatorToQuaternion_ReturnValue) == 0x000200, "Member 'BP_PuzzleCube_Functional_C_UpdateCumulativeRotationsAndSnapToGrid::CallFunc_RotatorToQuaternion_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PuzzleCube_Functional_C_UpdateCumulativeRotationsAndSnapToGrid, CallFunc_Equal__Quaternion__ReturnValue) == 0x000210, "Member 'BP_PuzzleCube_Functional_C_UpdateCumulativeRotationsAndSnapToGrid::CallFunc_Equal__Quaternion__ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PuzzleCube_Functional_C_UpdateCumulativeRotationsAndSnapToGrid, CallFunc_Not_PreBool_ReturnValue) == 0x000211, "Member 'BP_PuzzleCube_Functional_C_UpdateCumulativeRotationsAndSnapToGrid::CallFunc_Not_PreBool_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PuzzleCube_Functional_C_UpdateCumulativeRotationsAndSnapToGrid, CallFunc_RotatorToQuaternion_ReturnValue_1) == 0x000220, "Member 'BP_PuzzleCube_Functional_C_UpdateCumulativeRotationsAndSnapToGrid::CallFunc_RotatorToQuaternion_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_PuzzleCube_Functional_C_UpdateCumulativeRotationsAndSnapToGrid, CallFunc_Equal__Quaternion__ReturnValue_1) == 0x000230, "Member 'BP_PuzzleCube_Functional_C_UpdateCumulativeRotationsAndSnapToGrid::CallFunc_Equal__Quaternion__ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_PuzzleCube_Functional_C_UpdateCumulativeRotationsAndSnapToGrid, CallFunc_Not_PreBool_ReturnValue_1) == 0x000231, "Member 'BP_PuzzleCube_Functional_C_UpdateCumulativeRotationsAndSnapToGrid::CallFunc_Not_PreBool_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_PuzzleCube_Functional_C_UpdateCumulativeRotationsAndSnapToGrid, CallFunc_RotatorToQuaternion_ReturnValue_2) == 0x000240, "Member 'BP_PuzzleCube_Functional_C_UpdateCumulativeRotationsAndSnapToGrid::CallFunc_RotatorToQuaternion_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BP_PuzzleCube_Functional_C_UpdateCumulativeRotationsAndSnapToGrid, CallFunc_Equal__Quaternion__ReturnValue_2) == 0x000250, "Member 'BP_PuzzleCube_Functional_C_UpdateCumulativeRotationsAndSnapToGrid::CallFunc_Equal__Quaternion__ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BP_PuzzleCube_Functional_C_UpdateCumulativeRotationsAndSnapToGrid, CallFunc_Not_PreBool_ReturnValue_2) == 0x000251, "Member 'BP_PuzzleCube_Functional_C_UpdateCumulativeRotationsAndSnapToGrid::CallFunc_Not_PreBool_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BP_PuzzleCube_Functional_C_UpdateCumulativeRotationsAndSnapToGrid, CallFunc_RotatorToQuaternion_ReturnValue_3) == 0x000260, "Member 'BP_PuzzleCube_Functional_C_UpdateCumulativeRotationsAndSnapToGrid::CallFunc_RotatorToQuaternion_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(BP_PuzzleCube_Functional_C_UpdateCumulativeRotationsAndSnapToGrid, CallFunc_Equal__Quaternion__ReturnValue_3) == 0x000270, "Member 'BP_PuzzleCube_Functional_C_UpdateCumulativeRotationsAndSnapToGrid::CallFunc_Equal__Quaternion__ReturnValue_3' has a wrong offset!");
static_assert(offsetof(BP_PuzzleCube_Functional_C_UpdateCumulativeRotationsAndSnapToGrid, CallFunc_Not_PreBool_ReturnValue_3) == 0x000271, "Member 'BP_PuzzleCube_Functional_C_UpdateCumulativeRotationsAndSnapToGrid::CallFunc_Not_PreBool_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(BP_PuzzleCube_Functional_C_UpdateCumulativeRotationsAndSnapToGrid, CallFunc_SnapToGrid_vector__ReturnValue) == 0x000274, "Member 'BP_PuzzleCube_Functional_C_UpdateCumulativeRotationsAndSnapToGrid::CallFunc_SnapToGrid_vector__ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PuzzleCube_Functional_C_UpdateCumulativeRotationsAndSnapToGrid, CallFunc_K2_SetRelativeLocation_SweepHitResult) == 0x000280, "Member 'BP_PuzzleCube_Functional_C_UpdateCumulativeRotationsAndSnapToGrid::CallFunc_K2_SetRelativeLocation_SweepHitResult' has a wrong offset!");
static_assert(offsetof(BP_PuzzleCube_Functional_C_UpdateCumulativeRotationsAndSnapToGrid, CallFunc_Array_Length_ReturnValue_1) == 0x00030C, "Member 'BP_PuzzleCube_Functional_C_UpdateCumulativeRotationsAndSnapToGrid::CallFunc_Array_Length_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_PuzzleCube_Functional_C_UpdateCumulativeRotationsAndSnapToGrid, CallFunc_Less_IntInt_ReturnValue_1) == 0x000310, "Member 'BP_PuzzleCube_Functional_C_UpdateCumulativeRotationsAndSnapToGrid::CallFunc_Less_IntInt_ReturnValue_1' has a wrong offset!");

// Function BP_PuzzleCube_Functional.BP_PuzzleCube_Functional_C.SnapToGrid(rotator)
// 0x0040 (0x0040 - 0x0000)
struct BP_PuzzleCube_Functional_C_SnapToGrid_rotator_ final
{
public:
	struct FRotator                               Rotator;                                           // 0x0000(0x000C)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                         GridSize;                                          // 0x000C(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               ReturnValue;                                       // 0x0010(0x000C)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)
	float                                         CallFunc_BreakRotator_Roll;                        // 0x001C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakRotator_Pitch;                       // 0x0020(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakRotator_Yaw;                         // 0x0024(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_GridSnap_Float_ReturnValue;               // 0x0028(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_GridSnap_Float_ReturnValue_1;             // 0x002C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_GridSnap_Float_ReturnValue_2;             // 0x0030(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               CallFunc_MakeRotator_ReturnValue;                  // 0x0034(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_PuzzleCube_Functional_C_SnapToGrid_rotator_) == 0x000004, "Wrong alignment on BP_PuzzleCube_Functional_C_SnapToGrid_rotator_");
static_assert(sizeof(BP_PuzzleCube_Functional_C_SnapToGrid_rotator_) == 0x000040, "Wrong size on BP_PuzzleCube_Functional_C_SnapToGrid_rotator_");
static_assert(offsetof(BP_PuzzleCube_Functional_C_SnapToGrid_rotator_, Rotator) == 0x000000, "Member 'BP_PuzzleCube_Functional_C_SnapToGrid_rotator_::Rotator' has a wrong offset!");
static_assert(offsetof(BP_PuzzleCube_Functional_C_SnapToGrid_rotator_, GridSize) == 0x00000C, "Member 'BP_PuzzleCube_Functional_C_SnapToGrid_rotator_::GridSize' has a wrong offset!");
static_assert(offsetof(BP_PuzzleCube_Functional_C_SnapToGrid_rotator_, ReturnValue) == 0x000010, "Member 'BP_PuzzleCube_Functional_C_SnapToGrid_rotator_::ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PuzzleCube_Functional_C_SnapToGrid_rotator_, CallFunc_BreakRotator_Roll) == 0x00001C, "Member 'BP_PuzzleCube_Functional_C_SnapToGrid_rotator_::CallFunc_BreakRotator_Roll' has a wrong offset!");
static_assert(offsetof(BP_PuzzleCube_Functional_C_SnapToGrid_rotator_, CallFunc_BreakRotator_Pitch) == 0x000020, "Member 'BP_PuzzleCube_Functional_C_SnapToGrid_rotator_::CallFunc_BreakRotator_Pitch' has a wrong offset!");
static_assert(offsetof(BP_PuzzleCube_Functional_C_SnapToGrid_rotator_, CallFunc_BreakRotator_Yaw) == 0x000024, "Member 'BP_PuzzleCube_Functional_C_SnapToGrid_rotator_::CallFunc_BreakRotator_Yaw' has a wrong offset!");
static_assert(offsetof(BP_PuzzleCube_Functional_C_SnapToGrid_rotator_, CallFunc_GridSnap_Float_ReturnValue) == 0x000028, "Member 'BP_PuzzleCube_Functional_C_SnapToGrid_rotator_::CallFunc_GridSnap_Float_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PuzzleCube_Functional_C_SnapToGrid_rotator_, CallFunc_GridSnap_Float_ReturnValue_1) == 0x00002C, "Member 'BP_PuzzleCube_Functional_C_SnapToGrid_rotator_::CallFunc_GridSnap_Float_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_PuzzleCube_Functional_C_SnapToGrid_rotator_, CallFunc_GridSnap_Float_ReturnValue_2) == 0x000030, "Member 'BP_PuzzleCube_Functional_C_SnapToGrid_rotator_::CallFunc_GridSnap_Float_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BP_PuzzleCube_Functional_C_SnapToGrid_rotator_, CallFunc_MakeRotator_ReturnValue) == 0x000034, "Member 'BP_PuzzleCube_Functional_C_SnapToGrid_rotator_::CallFunc_MakeRotator_ReturnValue' has a wrong offset!");

// Function BP_PuzzleCube_Functional.BP_PuzzleCube_Functional_C.SnapTo90DegGrid
// 0x0040 (0x0040 - 0x0000)
struct BP_PuzzleCube_Functional_C_SnapTo90DegGrid final
{
public:
	struct FQuat                                  Quat;                                              // 0x0000(0x0010)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor)
	struct FQuat                                  Quat2;                                             // 0x0010(0x0010)(Parm, OutParm, IsPlainOldData, NoDestructor)
	float                                         CallFunc_SnapTo90DegGrid_float__Out;               // 0x0020(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_SnapTo90DegGrid_float__Out_1;             // 0x0024(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_SnapTo90DegGrid_float__Out_2;             // 0x0028(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_SnapTo90DegGrid_float__Out_3;             // 0x002C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FQuat                                  K2Node_MakeStruct_Quat;                            // 0x0030(0x0010)(IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_PuzzleCube_Functional_C_SnapTo90DegGrid) == 0x000010, "Wrong alignment on BP_PuzzleCube_Functional_C_SnapTo90DegGrid");
static_assert(sizeof(BP_PuzzleCube_Functional_C_SnapTo90DegGrid) == 0x000040, "Wrong size on BP_PuzzleCube_Functional_C_SnapTo90DegGrid");
static_assert(offsetof(BP_PuzzleCube_Functional_C_SnapTo90DegGrid, Quat) == 0x000000, "Member 'BP_PuzzleCube_Functional_C_SnapTo90DegGrid::Quat' has a wrong offset!");
static_assert(offsetof(BP_PuzzleCube_Functional_C_SnapTo90DegGrid, Quat2) == 0x000010, "Member 'BP_PuzzleCube_Functional_C_SnapTo90DegGrid::Quat2' has a wrong offset!");
static_assert(offsetof(BP_PuzzleCube_Functional_C_SnapTo90DegGrid, CallFunc_SnapTo90DegGrid_float__Out) == 0x000020, "Member 'BP_PuzzleCube_Functional_C_SnapTo90DegGrid::CallFunc_SnapTo90DegGrid_float__Out' has a wrong offset!");
static_assert(offsetof(BP_PuzzleCube_Functional_C_SnapTo90DegGrid, CallFunc_SnapTo90DegGrid_float__Out_1) == 0x000024, "Member 'BP_PuzzleCube_Functional_C_SnapTo90DegGrid::CallFunc_SnapTo90DegGrid_float__Out_1' has a wrong offset!");
static_assert(offsetof(BP_PuzzleCube_Functional_C_SnapTo90DegGrid, CallFunc_SnapTo90DegGrid_float__Out_2) == 0x000028, "Member 'BP_PuzzleCube_Functional_C_SnapTo90DegGrid::CallFunc_SnapTo90DegGrid_float__Out_2' has a wrong offset!");
static_assert(offsetof(BP_PuzzleCube_Functional_C_SnapTo90DegGrid, CallFunc_SnapTo90DegGrid_float__Out_3) == 0x00002C, "Member 'BP_PuzzleCube_Functional_C_SnapTo90DegGrid::CallFunc_SnapTo90DegGrid_float__Out_3' has a wrong offset!");
static_assert(offsetof(BP_PuzzleCube_Functional_C_SnapTo90DegGrid, K2Node_MakeStruct_Quat) == 0x000030, "Member 'BP_PuzzleCube_Functional_C_SnapTo90DegGrid::K2Node_MakeStruct_Quat' has a wrong offset!");

// Function BP_PuzzleCube_Functional.BP_PuzzleCube_Functional_C.SnapTo90DegGrid(float)
// 0x0028 (0x0028 - 0x0000)
struct BP_PuzzleCube_Functional_C_SnapTo90DegGrid_float_ final
{
public:
	float                                         In;                                                // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Out;                                               // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_SignOfFloat_ReturnValue;                  // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Square_ReturnValue;                       // 0x000C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Multiply_IntFloat_ReturnValue;            // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Round_ReturnValue;                        // 0x0014(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Conv_IntToFloat_ReturnValue;              // 0x0018(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Divide_FloatFloat_ReturnValue;            // 0x001C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Sqrt_ReturnValue;                         // 0x0020(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue;          // 0x0024(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_PuzzleCube_Functional_C_SnapTo90DegGrid_float_) == 0x000004, "Wrong alignment on BP_PuzzleCube_Functional_C_SnapTo90DegGrid_float_");
static_assert(sizeof(BP_PuzzleCube_Functional_C_SnapTo90DegGrid_float_) == 0x000028, "Wrong size on BP_PuzzleCube_Functional_C_SnapTo90DegGrid_float_");
static_assert(offsetof(BP_PuzzleCube_Functional_C_SnapTo90DegGrid_float_, In) == 0x000000, "Member 'BP_PuzzleCube_Functional_C_SnapTo90DegGrid_float_::In' has a wrong offset!");
static_assert(offsetof(BP_PuzzleCube_Functional_C_SnapTo90DegGrid_float_, Out) == 0x000004, "Member 'BP_PuzzleCube_Functional_C_SnapTo90DegGrid_float_::Out' has a wrong offset!");
static_assert(offsetof(BP_PuzzleCube_Functional_C_SnapTo90DegGrid_float_, CallFunc_SignOfFloat_ReturnValue) == 0x000008, "Member 'BP_PuzzleCube_Functional_C_SnapTo90DegGrid_float_::CallFunc_SignOfFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PuzzleCube_Functional_C_SnapTo90DegGrid_float_, CallFunc_Square_ReturnValue) == 0x00000C, "Member 'BP_PuzzleCube_Functional_C_SnapTo90DegGrid_float_::CallFunc_Square_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PuzzleCube_Functional_C_SnapTo90DegGrid_float_, CallFunc_Multiply_IntFloat_ReturnValue) == 0x000010, "Member 'BP_PuzzleCube_Functional_C_SnapTo90DegGrid_float_::CallFunc_Multiply_IntFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PuzzleCube_Functional_C_SnapTo90DegGrid_float_, CallFunc_Round_ReturnValue) == 0x000014, "Member 'BP_PuzzleCube_Functional_C_SnapTo90DegGrid_float_::CallFunc_Round_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PuzzleCube_Functional_C_SnapTo90DegGrid_float_, CallFunc_Conv_IntToFloat_ReturnValue) == 0x000018, "Member 'BP_PuzzleCube_Functional_C_SnapTo90DegGrid_float_::CallFunc_Conv_IntToFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PuzzleCube_Functional_C_SnapTo90DegGrid_float_, CallFunc_Divide_FloatFloat_ReturnValue) == 0x00001C, "Member 'BP_PuzzleCube_Functional_C_SnapTo90DegGrid_float_::CallFunc_Divide_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PuzzleCube_Functional_C_SnapTo90DegGrid_float_, CallFunc_Sqrt_ReturnValue) == 0x000020, "Member 'BP_PuzzleCube_Functional_C_SnapTo90DegGrid_float_::CallFunc_Sqrt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PuzzleCube_Functional_C_SnapTo90DegGrid_float_, CallFunc_Multiply_FloatFloat_ReturnValue) == 0x000024, "Member 'BP_PuzzleCube_Functional_C_SnapTo90DegGrid_float_::CallFunc_Multiply_FloatFloat_ReturnValue' has a wrong offset!");

// Function BP_PuzzleCube_Functional.BP_PuzzleCube_Functional_C.IsKubeSolved
// 0x0030 (0x0030 - 0x0000)
struct BP_PuzzleCube_Functional_C_IsKubeSolved final
{
public:
	bool                                          Solved;                                            // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          RetVal;                                            // 0x0001(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_2[0xE];                                        // 0x0002(0x000E)(Fixing Size After Last Property [ Dumper-7 ])
	struct FQuat                                  PrevElem;                                          // 0x0010(0x0010)(Edit, BlueprintVisible, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Is_Face_Solved_ReturnValue;               // 0x0020(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Is_Face_Solved_ReturnValue_1;             // 0x0021(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Is_Face_Solved_ReturnValue_2;             // 0x0022(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Is_Face_Solved_ReturnValue_3;             // 0x0023(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Is_Face_Solved_ReturnValue_4;             // 0x0024(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Is_Face_Solved_ReturnValue_5;             // 0x0025(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_PuzzleCube_Functional_C_IsKubeSolved) == 0x000010, "Wrong alignment on BP_PuzzleCube_Functional_C_IsKubeSolved");
static_assert(sizeof(BP_PuzzleCube_Functional_C_IsKubeSolved) == 0x000030, "Wrong size on BP_PuzzleCube_Functional_C_IsKubeSolved");
static_assert(offsetof(BP_PuzzleCube_Functional_C_IsKubeSolved, Solved) == 0x000000, "Member 'BP_PuzzleCube_Functional_C_IsKubeSolved::Solved' has a wrong offset!");
static_assert(offsetof(BP_PuzzleCube_Functional_C_IsKubeSolved, RetVal) == 0x000001, "Member 'BP_PuzzleCube_Functional_C_IsKubeSolved::RetVal' has a wrong offset!");
static_assert(offsetof(BP_PuzzleCube_Functional_C_IsKubeSolved, PrevElem) == 0x000010, "Member 'BP_PuzzleCube_Functional_C_IsKubeSolved::PrevElem' has a wrong offset!");
static_assert(offsetof(BP_PuzzleCube_Functional_C_IsKubeSolved, CallFunc_Is_Face_Solved_ReturnValue) == 0x000020, "Member 'BP_PuzzleCube_Functional_C_IsKubeSolved::CallFunc_Is_Face_Solved_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PuzzleCube_Functional_C_IsKubeSolved, CallFunc_Is_Face_Solved_ReturnValue_1) == 0x000021, "Member 'BP_PuzzleCube_Functional_C_IsKubeSolved::CallFunc_Is_Face_Solved_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_PuzzleCube_Functional_C_IsKubeSolved, CallFunc_Is_Face_Solved_ReturnValue_2) == 0x000022, "Member 'BP_PuzzleCube_Functional_C_IsKubeSolved::CallFunc_Is_Face_Solved_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BP_PuzzleCube_Functional_C_IsKubeSolved, CallFunc_Is_Face_Solved_ReturnValue_3) == 0x000023, "Member 'BP_PuzzleCube_Functional_C_IsKubeSolved::CallFunc_Is_Face_Solved_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(BP_PuzzleCube_Functional_C_IsKubeSolved, CallFunc_Is_Face_Solved_ReturnValue_4) == 0x000024, "Member 'BP_PuzzleCube_Functional_C_IsKubeSolved::CallFunc_Is_Face_Solved_ReturnValue_4' has a wrong offset!");
static_assert(offsetof(BP_PuzzleCube_Functional_C_IsKubeSolved, CallFunc_Is_Face_Solved_ReturnValue_5) == 0x000025, "Member 'BP_PuzzleCube_Functional_C_IsKubeSolved::CallFunc_Is_Face_Solved_ReturnValue_5' has a wrong offset!");

// Function BP_PuzzleCube_Functional.BP_PuzzleCube_Functional_C.Quat2String
// 0x00C0 (0x00C0 - 0x0000)
struct BP_PuzzleCube_Functional_C_Quat2String final
{
public:
	struct FQuat                                  Quat;                                              // 0x0000(0x0010)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor)
	class FString                                 String;                                            // 0x0010(0x0010)(Parm, OutParm, ZeroConstructor, HasGetValueTypeHash)
	class FString                                 CallFunc_Conv_FloatToString_ReturnValue;           // 0x0020(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FString                                 CallFunc_Conv_FloatToString_ReturnValue_1;         // 0x0030(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FString                                 CallFunc_Concat_StrStr_ReturnValue;                // 0x0040(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FString                                 CallFunc_Conv_FloatToString_ReturnValue_2;         // 0x0050(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FString                                 CallFunc_Conv_FloatToString_ReturnValue_3;         // 0x0060(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FString                                 CallFunc_Concat_StrStr_ReturnValue_1;              // 0x0070(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FString                                 CallFunc_Concat_StrStr_ReturnValue_2;              // 0x0080(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FString                                 CallFunc_Concat_StrStr_ReturnValue_3;              // 0x0090(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FString                                 CallFunc_Concat_StrStr_ReturnValue_4;              // 0x00A0(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FString                                 CallFunc_Concat_StrStr_ReturnValue_5;              // 0x00B0(0x0010)(ZeroConstructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_PuzzleCube_Functional_C_Quat2String) == 0x000010, "Wrong alignment on BP_PuzzleCube_Functional_C_Quat2String");
static_assert(sizeof(BP_PuzzleCube_Functional_C_Quat2String) == 0x0000C0, "Wrong size on BP_PuzzleCube_Functional_C_Quat2String");
static_assert(offsetof(BP_PuzzleCube_Functional_C_Quat2String, Quat) == 0x000000, "Member 'BP_PuzzleCube_Functional_C_Quat2String::Quat' has a wrong offset!");
static_assert(offsetof(BP_PuzzleCube_Functional_C_Quat2String, String) == 0x000010, "Member 'BP_PuzzleCube_Functional_C_Quat2String::String' has a wrong offset!");
static_assert(offsetof(BP_PuzzleCube_Functional_C_Quat2String, CallFunc_Conv_FloatToString_ReturnValue) == 0x000020, "Member 'BP_PuzzleCube_Functional_C_Quat2String::CallFunc_Conv_FloatToString_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PuzzleCube_Functional_C_Quat2String, CallFunc_Conv_FloatToString_ReturnValue_1) == 0x000030, "Member 'BP_PuzzleCube_Functional_C_Quat2String::CallFunc_Conv_FloatToString_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_PuzzleCube_Functional_C_Quat2String, CallFunc_Concat_StrStr_ReturnValue) == 0x000040, "Member 'BP_PuzzleCube_Functional_C_Quat2String::CallFunc_Concat_StrStr_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PuzzleCube_Functional_C_Quat2String, CallFunc_Conv_FloatToString_ReturnValue_2) == 0x000050, "Member 'BP_PuzzleCube_Functional_C_Quat2String::CallFunc_Conv_FloatToString_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BP_PuzzleCube_Functional_C_Quat2String, CallFunc_Conv_FloatToString_ReturnValue_3) == 0x000060, "Member 'BP_PuzzleCube_Functional_C_Quat2String::CallFunc_Conv_FloatToString_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(BP_PuzzleCube_Functional_C_Quat2String, CallFunc_Concat_StrStr_ReturnValue_1) == 0x000070, "Member 'BP_PuzzleCube_Functional_C_Quat2String::CallFunc_Concat_StrStr_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_PuzzleCube_Functional_C_Quat2String, CallFunc_Concat_StrStr_ReturnValue_2) == 0x000080, "Member 'BP_PuzzleCube_Functional_C_Quat2String::CallFunc_Concat_StrStr_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BP_PuzzleCube_Functional_C_Quat2String, CallFunc_Concat_StrStr_ReturnValue_3) == 0x000090, "Member 'BP_PuzzleCube_Functional_C_Quat2String::CallFunc_Concat_StrStr_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(BP_PuzzleCube_Functional_C_Quat2String, CallFunc_Concat_StrStr_ReturnValue_4) == 0x0000A0, "Member 'BP_PuzzleCube_Functional_C_Quat2String::CallFunc_Concat_StrStr_ReturnValue_4' has a wrong offset!");
static_assert(offsetof(BP_PuzzleCube_Functional_C_Quat2String, CallFunc_Concat_StrStr_ReturnValue_5) == 0x0000B0, "Member 'BP_PuzzleCube_Functional_C_Quat2String::CallFunc_Concat_StrStr_ReturnValue_5' has a wrong offset!");

// Function BP_PuzzleCube_Functional.BP_PuzzleCube_Functional_C.ResetCounters
// 0x0010 (0x0010 - 0x0000)
struct BP_PuzzleCube_Functional_C_ResetCounters final
{
public:
	struct FTimespan                              CallFunc_MakeTimespan_ReturnValue;                 // 0x0000(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	struct FDateTime                              CallFunc_Now_ReturnValue;                          // 0x0008(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_PuzzleCube_Functional_C_ResetCounters) == 0x000008, "Wrong alignment on BP_PuzzleCube_Functional_C_ResetCounters");
static_assert(sizeof(BP_PuzzleCube_Functional_C_ResetCounters) == 0x000010, "Wrong size on BP_PuzzleCube_Functional_C_ResetCounters");
static_assert(offsetof(BP_PuzzleCube_Functional_C_ResetCounters, CallFunc_MakeTimespan_ReturnValue) == 0x000000, "Member 'BP_PuzzleCube_Functional_C_ResetCounters::CallFunc_MakeTimespan_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PuzzleCube_Functional_C_ResetCounters, CallFunc_Now_ReturnValue) == 0x000008, "Member 'BP_PuzzleCube_Functional_C_ResetCounters::CallFunc_Now_ReturnValue' has a wrong offset!");

// Function BP_PuzzleCube_Functional.BP_PuzzleCube_Functional_C.GetTimeTaken
// 0x0020 (0x0020 - 0x0000)
struct BP_PuzzleCube_Functional_C_GetTimeTaken final
{
public:
	struct FTimespan                              ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash)
	struct FDateTime                              CallFunc_Now_ReturnValue;                          // 0x0008(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	struct FTimespan                              CallFunc_Subtract_DateTimeDateTime_ReturnValue;    // 0x0010(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	struct FTimespan                              CallFunc_Add_TimespanTimespan_ReturnValue;         // 0x0018(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_PuzzleCube_Functional_C_GetTimeTaken) == 0x000008, "Wrong alignment on BP_PuzzleCube_Functional_C_GetTimeTaken");
static_assert(sizeof(BP_PuzzleCube_Functional_C_GetTimeTaken) == 0x000020, "Wrong size on BP_PuzzleCube_Functional_C_GetTimeTaken");
static_assert(offsetof(BP_PuzzleCube_Functional_C_GetTimeTaken, ReturnValue) == 0x000000, "Member 'BP_PuzzleCube_Functional_C_GetTimeTaken::ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PuzzleCube_Functional_C_GetTimeTaken, CallFunc_Now_ReturnValue) == 0x000008, "Member 'BP_PuzzleCube_Functional_C_GetTimeTaken::CallFunc_Now_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PuzzleCube_Functional_C_GetTimeTaken, CallFunc_Subtract_DateTimeDateTime_ReturnValue) == 0x000010, "Member 'BP_PuzzleCube_Functional_C_GetTimeTaken::CallFunc_Subtract_DateTimeDateTime_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PuzzleCube_Functional_C_GetTimeTaken, CallFunc_Add_TimespanTimespan_ReturnValue) == 0x000018, "Member 'BP_PuzzleCube_Functional_C_GetTimeTaken::CallFunc_Add_TimespanTimespan_ReturnValue' has a wrong offset!");

// Function BP_PuzzleCube_Functional.BP_PuzzleCube_Functional_C.SolveInternal
// 0x0100 (0x0100 - 0x0000)
struct BP_PuzzleCube_Functional_C_SolveInternal final
{
public:
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x0000(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Array_Index_Variable;                     // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_LastIndex_ReturnValue;              // 0x000C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Variable;                                 // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_14[0xC];                                       // 0x0014(0x000C)(Fixing Size After Last Property [ Dumper-7 ])
	struct FQuat                                  K2Node_MakeStruct_Quat;                            // 0x0020(0x0010)(IsPlainOldData, NoDestructor)
	bool                                          CallFunc_LessEqual_IntInt_ReturnValue;             // 0x0030(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_31[0x3];                                       // 0x0031(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Add_IntInt_ReturnValue_1;                 // 0x0034(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Add_ReturnValue;                    // 0x0038(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakTransform_Location;                  // 0x003C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               CallFunc_BreakTransform_Rotation;                  // 0x0048(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FVector                                CallFunc_BreakTransform_Scale;                     // 0x0054(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x0060(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_64[0x4];                                       // 0x0064(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UStaticMeshComponent*                   CallFunc_Array_Get_Item;                           // 0x0068(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x0070(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_71[0x3];                                       // 0x0071(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FHitResult                             CallFunc_K2_SetRelativeLocationAndRotation_SweepHitResult; // 0x0074(0x008C)(IsPlainOldData, NoDestructor, ContainsInstancedReference)
};
static_assert(alignof(BP_PuzzleCube_Functional_C_SolveInternal) == 0x000010, "Wrong alignment on BP_PuzzleCube_Functional_C_SolveInternal");
static_assert(sizeof(BP_PuzzleCube_Functional_C_SolveInternal) == 0x000100, "Wrong size on BP_PuzzleCube_Functional_C_SolveInternal");
static_assert(offsetof(BP_PuzzleCube_Functional_C_SolveInternal, Temp_int_Loop_Counter_Variable) == 0x000000, "Member 'BP_PuzzleCube_Functional_C_SolveInternal::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(BP_PuzzleCube_Functional_C_SolveInternal, CallFunc_Add_IntInt_ReturnValue) == 0x000004, "Member 'BP_PuzzleCube_Functional_C_SolveInternal::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PuzzleCube_Functional_C_SolveInternal, Temp_int_Array_Index_Variable) == 0x000008, "Member 'BP_PuzzleCube_Functional_C_SolveInternal::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(BP_PuzzleCube_Functional_C_SolveInternal, CallFunc_Array_LastIndex_ReturnValue) == 0x00000C, "Member 'BP_PuzzleCube_Functional_C_SolveInternal::CallFunc_Array_LastIndex_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PuzzleCube_Functional_C_SolveInternal, Temp_int_Variable) == 0x000010, "Member 'BP_PuzzleCube_Functional_C_SolveInternal::Temp_int_Variable' has a wrong offset!");
static_assert(offsetof(BP_PuzzleCube_Functional_C_SolveInternal, K2Node_MakeStruct_Quat) == 0x000020, "Member 'BP_PuzzleCube_Functional_C_SolveInternal::K2Node_MakeStruct_Quat' has a wrong offset!");
static_assert(offsetof(BP_PuzzleCube_Functional_C_SolveInternal, CallFunc_LessEqual_IntInt_ReturnValue) == 0x000030, "Member 'BP_PuzzleCube_Functional_C_SolveInternal::CallFunc_LessEqual_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PuzzleCube_Functional_C_SolveInternal, CallFunc_Add_IntInt_ReturnValue_1) == 0x000034, "Member 'BP_PuzzleCube_Functional_C_SolveInternal::CallFunc_Add_IntInt_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_PuzzleCube_Functional_C_SolveInternal, CallFunc_Array_Add_ReturnValue) == 0x000038, "Member 'BP_PuzzleCube_Functional_C_SolveInternal::CallFunc_Array_Add_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PuzzleCube_Functional_C_SolveInternal, CallFunc_BreakTransform_Location) == 0x00003C, "Member 'BP_PuzzleCube_Functional_C_SolveInternal::CallFunc_BreakTransform_Location' has a wrong offset!");
static_assert(offsetof(BP_PuzzleCube_Functional_C_SolveInternal, CallFunc_BreakTransform_Rotation) == 0x000048, "Member 'BP_PuzzleCube_Functional_C_SolveInternal::CallFunc_BreakTransform_Rotation' has a wrong offset!");
static_assert(offsetof(BP_PuzzleCube_Functional_C_SolveInternal, CallFunc_BreakTransform_Scale) == 0x000054, "Member 'BP_PuzzleCube_Functional_C_SolveInternal::CallFunc_BreakTransform_Scale' has a wrong offset!");
static_assert(offsetof(BP_PuzzleCube_Functional_C_SolveInternal, CallFunc_Array_Length_ReturnValue) == 0x000060, "Member 'BP_PuzzleCube_Functional_C_SolveInternal::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PuzzleCube_Functional_C_SolveInternal, CallFunc_Array_Get_Item) == 0x000068, "Member 'BP_PuzzleCube_Functional_C_SolveInternal::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(BP_PuzzleCube_Functional_C_SolveInternal, CallFunc_Less_IntInt_ReturnValue) == 0x000070, "Member 'BP_PuzzleCube_Functional_C_SolveInternal::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PuzzleCube_Functional_C_SolveInternal, CallFunc_K2_SetRelativeLocationAndRotation_SweepHitResult) == 0x000074, "Member 'BP_PuzzleCube_Functional_C_SolveInternal::CallFunc_K2_SetRelativeLocationAndRotation_SweepHitResult' has a wrong offset!");

// Function BP_PuzzleCube_Functional.BP_PuzzleCube_Functional_C.SpawnMiniCubes
// 0x0100 (0x0100 - 0x0000)
struct BP_PuzzleCube_Functional_C_SpawnMiniCubes final
{
public:
	int32                                         Temp_int_Variable;                                 // 0x0000(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_IntInt_ReturnValue;            // 0x0004(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         K2Node_MathExpression_ReturnValue;                 // 0x000C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Variable_1;                               // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UStaticMeshComponent*                   CallFunc_Array_Get_Item;                           // 0x0018(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_IntInt_ReturnValue_1;          // 0x0020(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_21[0x7];                                       // 0x0021(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UMaterialInstanceDynamic*               CallFunc_CreateDynamicMaterialInstance_ReturnValue; // 0x0028(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue_4;                 // 0x0030(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Array_IsValidIndex_ReturnValue;           // 0x0034(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_35[0x3];                                       // 0x0035(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Temp_int_Variable_2;                               // 0x0038(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_IntInt_ReturnValue_2;          // 0x003C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_3D[0x3];                                       // 0x003D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Add_IntInt_ReturnValue_5;                 // 0x0040(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_RandomFloat_ReturnValue;                  // 0x0044(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Array_Get_Item_1;                         // 0x0048(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Array_Get_Item_2;                         // 0x004C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Array_Get_Item_3;                         // 0x0050(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_MakeVector_ReturnValue;                   // 0x0054(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Subtract_IntInt_ReturnValue_3;            // 0x0060(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_64[0xC];                                       // 0x0064(0x000C)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             CallFunc_MakeTransform_ReturnValue;                // 0x0070(0x0030)(IsPlainOldData, NoDestructor)
	bool                                          CallFunc_EqualEqual_IntInt_ReturnValue_3;          // 0x00A0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_A1[0x7];                                       // 0x00A1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UStaticMeshComponent*                   CallFunc_AddComponent_ReturnValue;                 // 0x00A8(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_SetStaticMesh_ReturnValue;                // 0x00B0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_EqualEqual_IntInt_ReturnValue_4;          // 0x00B1(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_EqualEqual_IntInt_ReturnValue_5;          // 0x00B2(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanOR_ReturnValue;                    // 0x00B3(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanOR_ReturnValue_1;                  // 0x00B4(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_LessEqual_IntInt_ReturnValue;             // 0x00B5(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanOR_ReturnValue_2;                  // 0x00B6(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanOR_ReturnValue_3;                  // 0x00B7(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_LessEqual_IntInt_ReturnValue_1;           // 0x00B8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanOR_ReturnValue_4;                  // 0x00B9(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_LessEqual_IntInt_ReturnValue_2;           // 0x00BA(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_BB[0x1];                                       // 0x00BB(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_Conv_IntToFloat_ReturnValue;              // 0x00BC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Divide_FloatFloat_ReturnValue;            // 0x00C0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_K2_AttachToComponent_ReturnValue;         // 0x00C4(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_C5[0x3];                                       // 0x00C5(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Array_Add_ReturnValue;                    // 0x00C8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Variable_3;                               // 0x00CC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Add_ReturnValue_1;                  // 0x00D0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Conv_IntToFloat_ReturnValue_1;            // 0x00D4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Subtract_FloatFloat_ReturnValue;          // 0x00D8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_LessEqual_IntInt_ReturnValue_3;           // 0x00DC(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_DD[0x3];                                       // 0x00DD(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue;          // 0x00E0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Add_ReturnValue_2;                  // 0x00E4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue_6;                 // 0x00E8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Add_ReturnValue_3;                  // 0x00EC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Add_ReturnValue_4;                  // 0x00F0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Add_ReturnValue_5;                  // 0x00F4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Add_ReturnValue_6;                  // 0x00F8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Add_ReturnValue_7;                  // 0x00FC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_PuzzleCube_Functional_C_SpawnMiniCubes) == 0x000010, "Wrong alignment on BP_PuzzleCube_Functional_C_SpawnMiniCubes");
static_assert(sizeof(BP_PuzzleCube_Functional_C_SpawnMiniCubes) == 0x000100, "Wrong size on BP_PuzzleCube_Functional_C_SpawnMiniCubes");
static_assert(offsetof(BP_PuzzleCube_Functional_C_SpawnMiniCubes, Temp_int_Variable) == 0x000000, "Member 'BP_PuzzleCube_Functional_C_SpawnMiniCubes::Temp_int_Variable' has a wrong offset!");
static_assert(offsetof(BP_PuzzleCube_Functional_C_SpawnMiniCubes, CallFunc_EqualEqual_IntInt_ReturnValue) == 0x000004, "Member 'BP_PuzzleCube_Functional_C_SpawnMiniCubes::CallFunc_EqualEqual_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PuzzleCube_Functional_C_SpawnMiniCubes, CallFunc_Add_IntInt_ReturnValue) == 0x000008, "Member 'BP_PuzzleCube_Functional_C_SpawnMiniCubes::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PuzzleCube_Functional_C_SpawnMiniCubes, K2Node_MathExpression_ReturnValue) == 0x00000C, "Member 'BP_PuzzleCube_Functional_C_SpawnMiniCubes::K2Node_MathExpression_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PuzzleCube_Functional_C_SpawnMiniCubes, Temp_int_Variable_1) == 0x000010, "Member 'BP_PuzzleCube_Functional_C_SpawnMiniCubes::Temp_int_Variable_1' has a wrong offset!");
static_assert(offsetof(BP_PuzzleCube_Functional_C_SpawnMiniCubes, CallFunc_Array_Get_Item) == 0x000018, "Member 'BP_PuzzleCube_Functional_C_SpawnMiniCubes::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(BP_PuzzleCube_Functional_C_SpawnMiniCubes, CallFunc_EqualEqual_IntInt_ReturnValue_1) == 0x000020, "Member 'BP_PuzzleCube_Functional_C_SpawnMiniCubes::CallFunc_EqualEqual_IntInt_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_PuzzleCube_Functional_C_SpawnMiniCubes, CallFunc_CreateDynamicMaterialInstance_ReturnValue) == 0x000028, "Member 'BP_PuzzleCube_Functional_C_SpawnMiniCubes::CallFunc_CreateDynamicMaterialInstance_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PuzzleCube_Functional_C_SpawnMiniCubes, CallFunc_Add_IntInt_ReturnValue_4) == 0x000030, "Member 'BP_PuzzleCube_Functional_C_SpawnMiniCubes::CallFunc_Add_IntInt_ReturnValue_4' has a wrong offset!");
static_assert(offsetof(BP_PuzzleCube_Functional_C_SpawnMiniCubes, CallFunc_Array_IsValidIndex_ReturnValue) == 0x000034, "Member 'BP_PuzzleCube_Functional_C_SpawnMiniCubes::CallFunc_Array_IsValidIndex_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PuzzleCube_Functional_C_SpawnMiniCubes, Temp_int_Variable_2) == 0x000038, "Member 'BP_PuzzleCube_Functional_C_SpawnMiniCubes::Temp_int_Variable_2' has a wrong offset!");
static_assert(offsetof(BP_PuzzleCube_Functional_C_SpawnMiniCubes, CallFunc_EqualEqual_IntInt_ReturnValue_2) == 0x00003C, "Member 'BP_PuzzleCube_Functional_C_SpawnMiniCubes::CallFunc_EqualEqual_IntInt_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BP_PuzzleCube_Functional_C_SpawnMiniCubes, CallFunc_Add_IntInt_ReturnValue_5) == 0x000040, "Member 'BP_PuzzleCube_Functional_C_SpawnMiniCubes::CallFunc_Add_IntInt_ReturnValue_5' has a wrong offset!");
static_assert(offsetof(BP_PuzzleCube_Functional_C_SpawnMiniCubes, CallFunc_RandomFloat_ReturnValue) == 0x000044, "Member 'BP_PuzzleCube_Functional_C_SpawnMiniCubes::CallFunc_RandomFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PuzzleCube_Functional_C_SpawnMiniCubes, CallFunc_Array_Get_Item_1) == 0x000048, "Member 'BP_PuzzleCube_Functional_C_SpawnMiniCubes::CallFunc_Array_Get_Item_1' has a wrong offset!");
static_assert(offsetof(BP_PuzzleCube_Functional_C_SpawnMiniCubes, CallFunc_Array_Get_Item_2) == 0x00004C, "Member 'BP_PuzzleCube_Functional_C_SpawnMiniCubes::CallFunc_Array_Get_Item_2' has a wrong offset!");
static_assert(offsetof(BP_PuzzleCube_Functional_C_SpawnMiniCubes, CallFunc_Array_Get_Item_3) == 0x000050, "Member 'BP_PuzzleCube_Functional_C_SpawnMiniCubes::CallFunc_Array_Get_Item_3' has a wrong offset!");
static_assert(offsetof(BP_PuzzleCube_Functional_C_SpawnMiniCubes, CallFunc_MakeVector_ReturnValue) == 0x000054, "Member 'BP_PuzzleCube_Functional_C_SpawnMiniCubes::CallFunc_MakeVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PuzzleCube_Functional_C_SpawnMiniCubes, CallFunc_Subtract_IntInt_ReturnValue_3) == 0x000060, "Member 'BP_PuzzleCube_Functional_C_SpawnMiniCubes::CallFunc_Subtract_IntInt_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(BP_PuzzleCube_Functional_C_SpawnMiniCubes, CallFunc_MakeTransform_ReturnValue) == 0x000070, "Member 'BP_PuzzleCube_Functional_C_SpawnMiniCubes::CallFunc_MakeTransform_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PuzzleCube_Functional_C_SpawnMiniCubes, CallFunc_EqualEqual_IntInt_ReturnValue_3) == 0x0000A0, "Member 'BP_PuzzleCube_Functional_C_SpawnMiniCubes::CallFunc_EqualEqual_IntInt_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(BP_PuzzleCube_Functional_C_SpawnMiniCubes, CallFunc_AddComponent_ReturnValue) == 0x0000A8, "Member 'BP_PuzzleCube_Functional_C_SpawnMiniCubes::CallFunc_AddComponent_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PuzzleCube_Functional_C_SpawnMiniCubes, CallFunc_SetStaticMesh_ReturnValue) == 0x0000B0, "Member 'BP_PuzzleCube_Functional_C_SpawnMiniCubes::CallFunc_SetStaticMesh_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PuzzleCube_Functional_C_SpawnMiniCubes, CallFunc_EqualEqual_IntInt_ReturnValue_4) == 0x0000B1, "Member 'BP_PuzzleCube_Functional_C_SpawnMiniCubes::CallFunc_EqualEqual_IntInt_ReturnValue_4' has a wrong offset!");
static_assert(offsetof(BP_PuzzleCube_Functional_C_SpawnMiniCubes, CallFunc_EqualEqual_IntInt_ReturnValue_5) == 0x0000B2, "Member 'BP_PuzzleCube_Functional_C_SpawnMiniCubes::CallFunc_EqualEqual_IntInt_ReturnValue_5' has a wrong offset!");
static_assert(offsetof(BP_PuzzleCube_Functional_C_SpawnMiniCubes, CallFunc_BooleanOR_ReturnValue) == 0x0000B3, "Member 'BP_PuzzleCube_Functional_C_SpawnMiniCubes::CallFunc_BooleanOR_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PuzzleCube_Functional_C_SpawnMiniCubes, CallFunc_BooleanOR_ReturnValue_1) == 0x0000B4, "Member 'BP_PuzzleCube_Functional_C_SpawnMiniCubes::CallFunc_BooleanOR_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_PuzzleCube_Functional_C_SpawnMiniCubes, CallFunc_LessEqual_IntInt_ReturnValue) == 0x0000B5, "Member 'BP_PuzzleCube_Functional_C_SpawnMiniCubes::CallFunc_LessEqual_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PuzzleCube_Functional_C_SpawnMiniCubes, CallFunc_BooleanOR_ReturnValue_2) == 0x0000B6, "Member 'BP_PuzzleCube_Functional_C_SpawnMiniCubes::CallFunc_BooleanOR_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BP_PuzzleCube_Functional_C_SpawnMiniCubes, CallFunc_BooleanOR_ReturnValue_3) == 0x0000B7, "Member 'BP_PuzzleCube_Functional_C_SpawnMiniCubes::CallFunc_BooleanOR_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(BP_PuzzleCube_Functional_C_SpawnMiniCubes, CallFunc_LessEqual_IntInt_ReturnValue_1) == 0x0000B8, "Member 'BP_PuzzleCube_Functional_C_SpawnMiniCubes::CallFunc_LessEqual_IntInt_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_PuzzleCube_Functional_C_SpawnMiniCubes, CallFunc_BooleanOR_ReturnValue_4) == 0x0000B9, "Member 'BP_PuzzleCube_Functional_C_SpawnMiniCubes::CallFunc_BooleanOR_ReturnValue_4' has a wrong offset!");
static_assert(offsetof(BP_PuzzleCube_Functional_C_SpawnMiniCubes, CallFunc_LessEqual_IntInt_ReturnValue_2) == 0x0000BA, "Member 'BP_PuzzleCube_Functional_C_SpawnMiniCubes::CallFunc_LessEqual_IntInt_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BP_PuzzleCube_Functional_C_SpawnMiniCubes, CallFunc_Conv_IntToFloat_ReturnValue) == 0x0000BC, "Member 'BP_PuzzleCube_Functional_C_SpawnMiniCubes::CallFunc_Conv_IntToFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PuzzleCube_Functional_C_SpawnMiniCubes, CallFunc_Divide_FloatFloat_ReturnValue) == 0x0000C0, "Member 'BP_PuzzleCube_Functional_C_SpawnMiniCubes::CallFunc_Divide_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PuzzleCube_Functional_C_SpawnMiniCubes, CallFunc_K2_AttachToComponent_ReturnValue) == 0x0000C4, "Member 'BP_PuzzleCube_Functional_C_SpawnMiniCubes::CallFunc_K2_AttachToComponent_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PuzzleCube_Functional_C_SpawnMiniCubes, CallFunc_Array_Add_ReturnValue) == 0x0000C8, "Member 'BP_PuzzleCube_Functional_C_SpawnMiniCubes::CallFunc_Array_Add_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PuzzleCube_Functional_C_SpawnMiniCubes, Temp_int_Variable_3) == 0x0000CC, "Member 'BP_PuzzleCube_Functional_C_SpawnMiniCubes::Temp_int_Variable_3' has a wrong offset!");
static_assert(offsetof(BP_PuzzleCube_Functional_C_SpawnMiniCubes, CallFunc_Array_Add_ReturnValue_1) == 0x0000D0, "Member 'BP_PuzzleCube_Functional_C_SpawnMiniCubes::CallFunc_Array_Add_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_PuzzleCube_Functional_C_SpawnMiniCubes, CallFunc_Conv_IntToFloat_ReturnValue_1) == 0x0000D4, "Member 'BP_PuzzleCube_Functional_C_SpawnMiniCubes::CallFunc_Conv_IntToFloat_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_PuzzleCube_Functional_C_SpawnMiniCubes, CallFunc_Subtract_FloatFloat_ReturnValue) == 0x0000D8, "Member 'BP_PuzzleCube_Functional_C_SpawnMiniCubes::CallFunc_Subtract_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PuzzleCube_Functional_C_SpawnMiniCubes, CallFunc_LessEqual_IntInt_ReturnValue_3) == 0x0000DC, "Member 'BP_PuzzleCube_Functional_C_SpawnMiniCubes::CallFunc_LessEqual_IntInt_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(BP_PuzzleCube_Functional_C_SpawnMiniCubes, CallFunc_Multiply_FloatFloat_ReturnValue) == 0x0000E0, "Member 'BP_PuzzleCube_Functional_C_SpawnMiniCubes::CallFunc_Multiply_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PuzzleCube_Functional_C_SpawnMiniCubes, CallFunc_Array_Add_ReturnValue_2) == 0x0000E4, "Member 'BP_PuzzleCube_Functional_C_SpawnMiniCubes::CallFunc_Array_Add_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BP_PuzzleCube_Functional_C_SpawnMiniCubes, CallFunc_Add_IntInt_ReturnValue_6) == 0x0000E8, "Member 'BP_PuzzleCube_Functional_C_SpawnMiniCubes::CallFunc_Add_IntInt_ReturnValue_6' has a wrong offset!");
static_assert(offsetof(BP_PuzzleCube_Functional_C_SpawnMiniCubes, CallFunc_Array_Add_ReturnValue_3) == 0x0000EC, "Member 'BP_PuzzleCube_Functional_C_SpawnMiniCubes::CallFunc_Array_Add_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(BP_PuzzleCube_Functional_C_SpawnMiniCubes, CallFunc_Array_Add_ReturnValue_4) == 0x0000F0, "Member 'BP_PuzzleCube_Functional_C_SpawnMiniCubes::CallFunc_Array_Add_ReturnValue_4' has a wrong offset!");
static_assert(offsetof(BP_PuzzleCube_Functional_C_SpawnMiniCubes, CallFunc_Array_Add_ReturnValue_5) == 0x0000F4, "Member 'BP_PuzzleCube_Functional_C_SpawnMiniCubes::CallFunc_Array_Add_ReturnValue_5' has a wrong offset!");
static_assert(offsetof(BP_PuzzleCube_Functional_C_SpawnMiniCubes, CallFunc_Array_Add_ReturnValue_6) == 0x0000F8, "Member 'BP_PuzzleCube_Functional_C_SpawnMiniCubes::CallFunc_Array_Add_ReturnValue_6' has a wrong offset!");
static_assert(offsetof(BP_PuzzleCube_Functional_C_SpawnMiniCubes, CallFunc_Array_Add_ReturnValue_7) == 0x0000FC, "Member 'BP_PuzzleCube_Functional_C_SpawnMiniCubes::CallFunc_Array_Add_ReturnValue_7' has a wrong offset!");

// Function BP_PuzzleCube_Functional.BP_PuzzleCube_Functional_C.CloseTheKube
// 0x0001 (0x0001 - 0x0000)
struct BP_PuzzleCube_Functional_C_CloseTheKube final
{
public:
	bool                                          WasClosed;                                         // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_PuzzleCube_Functional_C_CloseTheKube) == 0x000001, "Wrong alignment on BP_PuzzleCube_Functional_C_CloseTheKube");
static_assert(sizeof(BP_PuzzleCube_Functional_C_CloseTheKube) == 0x000001, "Wrong size on BP_PuzzleCube_Functional_C_CloseTheKube");
static_assert(offsetof(BP_PuzzleCube_Functional_C_CloseTheKube, WasClosed) == 0x000000, "Member 'BP_PuzzleCube_Functional_C_CloseTheKube::WasClosed' has a wrong offset!");

// Function BP_PuzzleCube_Functional.BP_PuzzleCube_Functional_C.Equal (Quaternion)
// 0x0060 (0x0060 - 0x0000)
struct BP_PuzzleCube_Functional_C_Equal__Quaternion_ final
{
public:
	struct FQuat                                  A;                                                 // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor)
	struct FQuat                                  B;                                                 // 0x0010(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor)
	float                                         Tolerance;                                         // 0x0020(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          ReturnValue;                                       // 0x0024(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)
	uint8                                         Pad_25[0x3];                                       // 0x0025(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue;          // 0x0028(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue_1;        // 0x002C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue_2;        // 0x0030(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue_3;        // 0x0034(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_38[0x8];                                       // 0x0038(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FQuat                                  K2Node_MakeStruct_Quat;                            // 0x0040(0x0010)(IsPlainOldData, NoDestructor)
	bool                                          CallFunc_NearlyEqual_FloatFloat_ReturnValue;       // 0x0050(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_NearlyEqual_FloatFloat_ReturnValue_1;     // 0x0051(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_NearlyEqual_FloatFloat_ReturnValue_2;     // 0x0052(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_NearlyEqual_FloatFloat_ReturnValue_3;     // 0x0053(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_NearlyEqual_FloatFloat_ReturnValue_4;     // 0x0054(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_NearlyEqual_FloatFloat_ReturnValue_5;     // 0x0055(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_NearlyEqual_FloatFloat_ReturnValue_6;     // 0x0056(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanAND_ReturnValue;                   // 0x0057(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_NearlyEqual_FloatFloat_ReturnValue_7;     // 0x0058(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanAND_ReturnValue_1;                 // 0x0059(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanAND_ReturnValue_2;                 // 0x005A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanAND_ReturnValue_3;                 // 0x005B(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanAND_ReturnValue_4;                 // 0x005C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanAND_ReturnValue_5;                 // 0x005D(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanOR_ReturnValue;                    // 0x005E(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_PuzzleCube_Functional_C_Equal__Quaternion_) == 0x000010, "Wrong alignment on BP_PuzzleCube_Functional_C_Equal__Quaternion_");
static_assert(sizeof(BP_PuzzleCube_Functional_C_Equal__Quaternion_) == 0x000060, "Wrong size on BP_PuzzleCube_Functional_C_Equal__Quaternion_");
static_assert(offsetof(BP_PuzzleCube_Functional_C_Equal__Quaternion_, A) == 0x000000, "Member 'BP_PuzzleCube_Functional_C_Equal__Quaternion_::A' has a wrong offset!");
static_assert(offsetof(BP_PuzzleCube_Functional_C_Equal__Quaternion_, B) == 0x000010, "Member 'BP_PuzzleCube_Functional_C_Equal__Quaternion_::B' has a wrong offset!");
static_assert(offsetof(BP_PuzzleCube_Functional_C_Equal__Quaternion_, Tolerance) == 0x000020, "Member 'BP_PuzzleCube_Functional_C_Equal__Quaternion_::Tolerance' has a wrong offset!");
static_assert(offsetof(BP_PuzzleCube_Functional_C_Equal__Quaternion_, ReturnValue) == 0x000024, "Member 'BP_PuzzleCube_Functional_C_Equal__Quaternion_::ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PuzzleCube_Functional_C_Equal__Quaternion_, CallFunc_Multiply_FloatFloat_ReturnValue) == 0x000028, "Member 'BP_PuzzleCube_Functional_C_Equal__Quaternion_::CallFunc_Multiply_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PuzzleCube_Functional_C_Equal__Quaternion_, CallFunc_Multiply_FloatFloat_ReturnValue_1) == 0x00002C, "Member 'BP_PuzzleCube_Functional_C_Equal__Quaternion_::CallFunc_Multiply_FloatFloat_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_PuzzleCube_Functional_C_Equal__Quaternion_, CallFunc_Multiply_FloatFloat_ReturnValue_2) == 0x000030, "Member 'BP_PuzzleCube_Functional_C_Equal__Quaternion_::CallFunc_Multiply_FloatFloat_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BP_PuzzleCube_Functional_C_Equal__Quaternion_, CallFunc_Multiply_FloatFloat_ReturnValue_3) == 0x000034, "Member 'BP_PuzzleCube_Functional_C_Equal__Quaternion_::CallFunc_Multiply_FloatFloat_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(BP_PuzzleCube_Functional_C_Equal__Quaternion_, K2Node_MakeStruct_Quat) == 0x000040, "Member 'BP_PuzzleCube_Functional_C_Equal__Quaternion_::K2Node_MakeStruct_Quat' has a wrong offset!");
static_assert(offsetof(BP_PuzzleCube_Functional_C_Equal__Quaternion_, CallFunc_NearlyEqual_FloatFloat_ReturnValue) == 0x000050, "Member 'BP_PuzzleCube_Functional_C_Equal__Quaternion_::CallFunc_NearlyEqual_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PuzzleCube_Functional_C_Equal__Quaternion_, CallFunc_NearlyEqual_FloatFloat_ReturnValue_1) == 0x000051, "Member 'BP_PuzzleCube_Functional_C_Equal__Quaternion_::CallFunc_NearlyEqual_FloatFloat_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_PuzzleCube_Functional_C_Equal__Quaternion_, CallFunc_NearlyEqual_FloatFloat_ReturnValue_2) == 0x000052, "Member 'BP_PuzzleCube_Functional_C_Equal__Quaternion_::CallFunc_NearlyEqual_FloatFloat_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BP_PuzzleCube_Functional_C_Equal__Quaternion_, CallFunc_NearlyEqual_FloatFloat_ReturnValue_3) == 0x000053, "Member 'BP_PuzzleCube_Functional_C_Equal__Quaternion_::CallFunc_NearlyEqual_FloatFloat_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(BP_PuzzleCube_Functional_C_Equal__Quaternion_, CallFunc_NearlyEqual_FloatFloat_ReturnValue_4) == 0x000054, "Member 'BP_PuzzleCube_Functional_C_Equal__Quaternion_::CallFunc_NearlyEqual_FloatFloat_ReturnValue_4' has a wrong offset!");
static_assert(offsetof(BP_PuzzleCube_Functional_C_Equal__Quaternion_, CallFunc_NearlyEqual_FloatFloat_ReturnValue_5) == 0x000055, "Member 'BP_PuzzleCube_Functional_C_Equal__Quaternion_::CallFunc_NearlyEqual_FloatFloat_ReturnValue_5' has a wrong offset!");
static_assert(offsetof(BP_PuzzleCube_Functional_C_Equal__Quaternion_, CallFunc_NearlyEqual_FloatFloat_ReturnValue_6) == 0x000056, "Member 'BP_PuzzleCube_Functional_C_Equal__Quaternion_::CallFunc_NearlyEqual_FloatFloat_ReturnValue_6' has a wrong offset!");
static_assert(offsetof(BP_PuzzleCube_Functional_C_Equal__Quaternion_, CallFunc_BooleanAND_ReturnValue) == 0x000057, "Member 'BP_PuzzleCube_Functional_C_Equal__Quaternion_::CallFunc_BooleanAND_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PuzzleCube_Functional_C_Equal__Quaternion_, CallFunc_NearlyEqual_FloatFloat_ReturnValue_7) == 0x000058, "Member 'BP_PuzzleCube_Functional_C_Equal__Quaternion_::CallFunc_NearlyEqual_FloatFloat_ReturnValue_7' has a wrong offset!");
static_assert(offsetof(BP_PuzzleCube_Functional_C_Equal__Quaternion_, CallFunc_BooleanAND_ReturnValue_1) == 0x000059, "Member 'BP_PuzzleCube_Functional_C_Equal__Quaternion_::CallFunc_BooleanAND_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_PuzzleCube_Functional_C_Equal__Quaternion_, CallFunc_BooleanAND_ReturnValue_2) == 0x00005A, "Member 'BP_PuzzleCube_Functional_C_Equal__Quaternion_::CallFunc_BooleanAND_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BP_PuzzleCube_Functional_C_Equal__Quaternion_, CallFunc_BooleanAND_ReturnValue_3) == 0x00005B, "Member 'BP_PuzzleCube_Functional_C_Equal__Quaternion_::CallFunc_BooleanAND_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(BP_PuzzleCube_Functional_C_Equal__Quaternion_, CallFunc_BooleanAND_ReturnValue_4) == 0x00005C, "Member 'BP_PuzzleCube_Functional_C_Equal__Quaternion_::CallFunc_BooleanAND_ReturnValue_4' has a wrong offset!");
static_assert(offsetof(BP_PuzzleCube_Functional_C_Equal__Quaternion_, CallFunc_BooleanAND_ReturnValue_5) == 0x00005D, "Member 'BP_PuzzleCube_Functional_C_Equal__Quaternion_::CallFunc_BooleanAND_ReturnValue_5' has a wrong offset!");
static_assert(offsetof(BP_PuzzleCube_Functional_C_Equal__Quaternion_, CallFunc_BooleanOR_ReturnValue) == 0x00005E, "Member 'BP_PuzzleCube_Functional_C_Equal__Quaternion_::CallFunc_BooleanOR_ReturnValue' has a wrong offset!");

// Function BP_PuzzleCube_Functional.BP_PuzzleCube_Functional_C.ResizeTheKube
// 0x0030 (0x0030 - 0x0000)
struct BP_PuzzleCube_Functional_C_ResizeTheKube final
{
public:
	int32                                         CubeSize_0;                                        // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Array_Index_Variable;                     // 0x000C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Variable;                                 // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Greater_IntInt_ReturnValue;               // 0x0014(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_15[0x3];                                       // 0x0015(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class USceneComponent*                        CallFunc_Array_Get_Item;                           // 0x0018(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x0020(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x0024(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_25[0x3];                                       // 0x0025(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Add_IntInt_ReturnValue_1;                 // 0x0028(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_PuzzleCube_Functional_C_ResizeTheKube) == 0x000008, "Wrong alignment on BP_PuzzleCube_Functional_C_ResizeTheKube");
static_assert(sizeof(BP_PuzzleCube_Functional_C_ResizeTheKube) == 0x000030, "Wrong size on BP_PuzzleCube_Functional_C_ResizeTheKube");
static_assert(offsetof(BP_PuzzleCube_Functional_C_ResizeTheKube, CubeSize_0) == 0x000000, "Member 'BP_PuzzleCube_Functional_C_ResizeTheKube::CubeSize_0' has a wrong offset!");
static_assert(offsetof(BP_PuzzleCube_Functional_C_ResizeTheKube, Temp_int_Loop_Counter_Variable) == 0x000004, "Member 'BP_PuzzleCube_Functional_C_ResizeTheKube::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(BP_PuzzleCube_Functional_C_ResizeTheKube, CallFunc_Add_IntInt_ReturnValue) == 0x000008, "Member 'BP_PuzzleCube_Functional_C_ResizeTheKube::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PuzzleCube_Functional_C_ResizeTheKube, Temp_int_Array_Index_Variable) == 0x00000C, "Member 'BP_PuzzleCube_Functional_C_ResizeTheKube::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(BP_PuzzleCube_Functional_C_ResizeTheKube, Temp_int_Variable) == 0x000010, "Member 'BP_PuzzleCube_Functional_C_ResizeTheKube::Temp_int_Variable' has a wrong offset!");
static_assert(offsetof(BP_PuzzleCube_Functional_C_ResizeTheKube, CallFunc_Greater_IntInt_ReturnValue) == 0x000014, "Member 'BP_PuzzleCube_Functional_C_ResizeTheKube::CallFunc_Greater_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PuzzleCube_Functional_C_ResizeTheKube, CallFunc_Array_Get_Item) == 0x000018, "Member 'BP_PuzzleCube_Functional_C_ResizeTheKube::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(BP_PuzzleCube_Functional_C_ResizeTheKube, CallFunc_Array_Length_ReturnValue) == 0x000020, "Member 'BP_PuzzleCube_Functional_C_ResizeTheKube::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PuzzleCube_Functional_C_ResizeTheKube, CallFunc_Less_IntInt_ReturnValue) == 0x000024, "Member 'BP_PuzzleCube_Functional_C_ResizeTheKube::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PuzzleCube_Functional_C_ResizeTheKube, CallFunc_Add_IntInt_ReturnValue_1) == 0x000028, "Member 'BP_PuzzleCube_Functional_C_ResizeTheKube::CallFunc_Add_IntInt_ReturnValue_1' has a wrong offset!");

// Function BP_PuzzleCube_Functional.BP_PuzzleCube_Functional_C.Is Face Solved
// 0x0060 (0x0060 - 0x0000)
struct BP_PuzzleCube_Functional_C_Is_Face_Solved final
{
public:
	TArray<int32>                                 FaceIndices;                                       // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
	bool                                          ReturnValue;                                       // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)
	uint8                                         Pad_11[0x3];                                       // 0x0011(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                PrevIndexLocation;                                 // 0x0014(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Z;                                                 // 0x0020(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Y;                                                 // 0x0021(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          X;                                                 // 0x0022(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_23[0x1];                                       // 0x0023(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Array_Get_Item;                           // 0x0024(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x0028(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Array_Index_Variable;                     // 0x002C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x0030(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Get_Item_1;                         // 0x0034(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x0038(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_39[0x3];                                       // 0x0039(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x003C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanOR_ReturnValue;                    // 0x0040(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanOR_ReturnValue_1;                  // 0x0041(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_42[0x6];                                       // 0x0042(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class UStaticMeshComponent*                   CallFunc_Array_Get_Item_2;                         // 0x0048(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UStaticMeshComponent*                   CallFunc_Array_Get_Item_3;                         // 0x0050(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Nearly_Equal__Vector_Element_wise__EqualX; // 0x0058(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Nearly_Equal__Vector_Element_wise__EqualY; // 0x0059(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Nearly_Equal__Vector_Element_wise__EqualZ; // 0x005A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_PuzzleCube_Functional_C_Is_Face_Solved) == 0x000008, "Wrong alignment on BP_PuzzleCube_Functional_C_Is_Face_Solved");
static_assert(sizeof(BP_PuzzleCube_Functional_C_Is_Face_Solved) == 0x000060, "Wrong size on BP_PuzzleCube_Functional_C_Is_Face_Solved");
static_assert(offsetof(BP_PuzzleCube_Functional_C_Is_Face_Solved, FaceIndices) == 0x000000, "Member 'BP_PuzzleCube_Functional_C_Is_Face_Solved::FaceIndices' has a wrong offset!");
static_assert(offsetof(BP_PuzzleCube_Functional_C_Is_Face_Solved, ReturnValue) == 0x000010, "Member 'BP_PuzzleCube_Functional_C_Is_Face_Solved::ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PuzzleCube_Functional_C_Is_Face_Solved, PrevIndexLocation) == 0x000014, "Member 'BP_PuzzleCube_Functional_C_Is_Face_Solved::PrevIndexLocation' has a wrong offset!");
static_assert(offsetof(BP_PuzzleCube_Functional_C_Is_Face_Solved, Z) == 0x000020, "Member 'BP_PuzzleCube_Functional_C_Is_Face_Solved::Z' has a wrong offset!");
static_assert(offsetof(BP_PuzzleCube_Functional_C_Is_Face_Solved, Y) == 0x000021, "Member 'BP_PuzzleCube_Functional_C_Is_Face_Solved::Y' has a wrong offset!");
static_assert(offsetof(BP_PuzzleCube_Functional_C_Is_Face_Solved, X) == 0x000022, "Member 'BP_PuzzleCube_Functional_C_Is_Face_Solved::X' has a wrong offset!");
static_assert(offsetof(BP_PuzzleCube_Functional_C_Is_Face_Solved, CallFunc_Array_Get_Item) == 0x000024, "Member 'BP_PuzzleCube_Functional_C_Is_Face_Solved::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(BP_PuzzleCube_Functional_C_Is_Face_Solved, CallFunc_Array_Length_ReturnValue) == 0x000028, "Member 'BP_PuzzleCube_Functional_C_Is_Face_Solved::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PuzzleCube_Functional_C_Is_Face_Solved, Temp_int_Array_Index_Variable) == 0x00002C, "Member 'BP_PuzzleCube_Functional_C_Is_Face_Solved::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(BP_PuzzleCube_Functional_C_Is_Face_Solved, Temp_int_Loop_Counter_Variable) == 0x000030, "Member 'BP_PuzzleCube_Functional_C_Is_Face_Solved::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(BP_PuzzleCube_Functional_C_Is_Face_Solved, CallFunc_Array_Get_Item_1) == 0x000034, "Member 'BP_PuzzleCube_Functional_C_Is_Face_Solved::CallFunc_Array_Get_Item_1' has a wrong offset!");
static_assert(offsetof(BP_PuzzleCube_Functional_C_Is_Face_Solved, CallFunc_Less_IntInt_ReturnValue) == 0x000038, "Member 'BP_PuzzleCube_Functional_C_Is_Face_Solved::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PuzzleCube_Functional_C_Is_Face_Solved, CallFunc_Add_IntInt_ReturnValue) == 0x00003C, "Member 'BP_PuzzleCube_Functional_C_Is_Face_Solved::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PuzzleCube_Functional_C_Is_Face_Solved, CallFunc_BooleanOR_ReturnValue) == 0x000040, "Member 'BP_PuzzleCube_Functional_C_Is_Face_Solved::CallFunc_BooleanOR_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PuzzleCube_Functional_C_Is_Face_Solved, CallFunc_BooleanOR_ReturnValue_1) == 0x000041, "Member 'BP_PuzzleCube_Functional_C_Is_Face_Solved::CallFunc_BooleanOR_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_PuzzleCube_Functional_C_Is_Face_Solved, CallFunc_Array_Get_Item_2) == 0x000048, "Member 'BP_PuzzleCube_Functional_C_Is_Face_Solved::CallFunc_Array_Get_Item_2' has a wrong offset!");
static_assert(offsetof(BP_PuzzleCube_Functional_C_Is_Face_Solved, CallFunc_Array_Get_Item_3) == 0x000050, "Member 'BP_PuzzleCube_Functional_C_Is_Face_Solved::CallFunc_Array_Get_Item_3' has a wrong offset!");
static_assert(offsetof(BP_PuzzleCube_Functional_C_Is_Face_Solved, CallFunc_Nearly_Equal__Vector_Element_wise__EqualX) == 0x000058, "Member 'BP_PuzzleCube_Functional_C_Is_Face_Solved::CallFunc_Nearly_Equal__Vector_Element_wise__EqualX' has a wrong offset!");
static_assert(offsetof(BP_PuzzleCube_Functional_C_Is_Face_Solved, CallFunc_Nearly_Equal__Vector_Element_wise__EqualY) == 0x000059, "Member 'BP_PuzzleCube_Functional_C_Is_Face_Solved::CallFunc_Nearly_Equal__Vector_Element_wise__EqualY' has a wrong offset!");
static_assert(offsetof(BP_PuzzleCube_Functional_C_Is_Face_Solved, CallFunc_Nearly_Equal__Vector_Element_wise__EqualZ) == 0x00005A, "Member 'BP_PuzzleCube_Functional_C_Is_Face_Solved::CallFunc_Nearly_Equal__Vector_Element_wise__EqualZ' has a wrong offset!");

// Function BP_PuzzleCube_Functional.BP_PuzzleCube_Functional_C.SetColorBlindSkin
// 0x00A0 (0x00A0 - 0x0000)
struct BP_PuzzleCube_Functional_C_SetColorBlindSkin final
{
public:
	bool                                          ColorBlindActive;                                  // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   Temp_text_Variable;                                // 0x0008(0x0018)()
	class FText                                   Temp_text_Variable_1;                              // 0x0020(0x0018)()
	bool                                          Temp_bool_Variable;                                // 0x0038(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_39[0x7];                                       // 0x0039(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UTexture*                               Temp_object_Variable;                              // 0x0040(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UTexture*                               Temp_object_Variable_1;                            // 0x0048(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x0050(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x0054(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UTexture*                               K2Node_Select_Default;                             // 0x0058(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Array_Index_Variable;                     // 0x0060(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable_1;                              // 0x0064(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_65[0x3];                                       // 0x0065(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UStaticMeshComponent*                   CallFunc_Array_Get_Item;                           // 0x0068(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FText                                   K2Node_Select_Default_1;                           // 0x0070(0x0018)()
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0088(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_89[0x7];                                       // 0x0089(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UMaterialInstanceDynamic*               CallFunc_CreateDynamicMaterialInstance_ReturnValue; // 0x0090(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x0098(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x009C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_PuzzleCube_Functional_C_SetColorBlindSkin) == 0x000008, "Wrong alignment on BP_PuzzleCube_Functional_C_SetColorBlindSkin");
static_assert(sizeof(BP_PuzzleCube_Functional_C_SetColorBlindSkin) == 0x0000A0, "Wrong size on BP_PuzzleCube_Functional_C_SetColorBlindSkin");
static_assert(offsetof(BP_PuzzleCube_Functional_C_SetColorBlindSkin, ColorBlindActive) == 0x000000, "Member 'BP_PuzzleCube_Functional_C_SetColorBlindSkin::ColorBlindActive' has a wrong offset!");
static_assert(offsetof(BP_PuzzleCube_Functional_C_SetColorBlindSkin, Temp_text_Variable) == 0x000008, "Member 'BP_PuzzleCube_Functional_C_SetColorBlindSkin::Temp_text_Variable' has a wrong offset!");
static_assert(offsetof(BP_PuzzleCube_Functional_C_SetColorBlindSkin, Temp_text_Variable_1) == 0x000020, "Member 'BP_PuzzleCube_Functional_C_SetColorBlindSkin::Temp_text_Variable_1' has a wrong offset!");
static_assert(offsetof(BP_PuzzleCube_Functional_C_SetColorBlindSkin, Temp_bool_Variable) == 0x000038, "Member 'BP_PuzzleCube_Functional_C_SetColorBlindSkin::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(BP_PuzzleCube_Functional_C_SetColorBlindSkin, Temp_object_Variable) == 0x000040, "Member 'BP_PuzzleCube_Functional_C_SetColorBlindSkin::Temp_object_Variable' has a wrong offset!");
static_assert(offsetof(BP_PuzzleCube_Functional_C_SetColorBlindSkin, Temp_object_Variable_1) == 0x000048, "Member 'BP_PuzzleCube_Functional_C_SetColorBlindSkin::Temp_object_Variable_1' has a wrong offset!");
static_assert(offsetof(BP_PuzzleCube_Functional_C_SetColorBlindSkin, Temp_int_Loop_Counter_Variable) == 0x000050, "Member 'BP_PuzzleCube_Functional_C_SetColorBlindSkin::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(BP_PuzzleCube_Functional_C_SetColorBlindSkin, CallFunc_Add_IntInt_ReturnValue) == 0x000054, "Member 'BP_PuzzleCube_Functional_C_SetColorBlindSkin::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PuzzleCube_Functional_C_SetColorBlindSkin, K2Node_Select_Default) == 0x000058, "Member 'BP_PuzzleCube_Functional_C_SetColorBlindSkin::K2Node_Select_Default' has a wrong offset!");
static_assert(offsetof(BP_PuzzleCube_Functional_C_SetColorBlindSkin, Temp_int_Array_Index_Variable) == 0x000060, "Member 'BP_PuzzleCube_Functional_C_SetColorBlindSkin::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(BP_PuzzleCube_Functional_C_SetColorBlindSkin, Temp_bool_Variable_1) == 0x000064, "Member 'BP_PuzzleCube_Functional_C_SetColorBlindSkin::Temp_bool_Variable_1' has a wrong offset!");
static_assert(offsetof(BP_PuzzleCube_Functional_C_SetColorBlindSkin, CallFunc_Array_Get_Item) == 0x000068, "Member 'BP_PuzzleCube_Functional_C_SetColorBlindSkin::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(BP_PuzzleCube_Functional_C_SetColorBlindSkin, K2Node_Select_Default_1) == 0x000070, "Member 'BP_PuzzleCube_Functional_C_SetColorBlindSkin::K2Node_Select_Default_1' has a wrong offset!");
static_assert(offsetof(BP_PuzzleCube_Functional_C_SetColorBlindSkin, CallFunc_IsValid_ReturnValue) == 0x000088, "Member 'BP_PuzzleCube_Functional_C_SetColorBlindSkin::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PuzzleCube_Functional_C_SetColorBlindSkin, CallFunc_CreateDynamicMaterialInstance_ReturnValue) == 0x000090, "Member 'BP_PuzzleCube_Functional_C_SetColorBlindSkin::CallFunc_CreateDynamicMaterialInstance_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PuzzleCube_Functional_C_SetColorBlindSkin, CallFunc_Array_Length_ReturnValue) == 0x000098, "Member 'BP_PuzzleCube_Functional_C_SetColorBlindSkin::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PuzzleCube_Functional_C_SetColorBlindSkin, CallFunc_Less_IntInt_ReturnValue) == 0x00009C, "Member 'BP_PuzzleCube_Functional_C_SetColorBlindSkin::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");

}

