#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_AudioFunctions

#include "Basic.hpp"


namespace SDK::Params
{

// Function BP_AudioFunctions.BP_AudioFunctions_C.DB_to_Float
// 0x0020 (0x0020 - 0x0000)
struct BP_AudioFunctions_C_DB_to_Float final
{
public:
	float                                         In_Decibel;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UObject*                                __WorldContext;                                    // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Out_Float;                                         // 0x0010(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue;          // 0x0014(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_MultiplyMultiply_FloatFloat_ReturnValue;  // 0x0018(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_AudioFunctions_C_DB_to_Float) == 0x000008, "Wrong alignment on BP_AudioFunctions_C_DB_to_Float");
static_assert(sizeof(BP_AudioFunctions_C_DB_to_Float) == 0x000020, "Wrong size on BP_AudioFunctions_C_DB_to_Float");
static_assert(offsetof(BP_AudioFunctions_C_DB_to_Float, In_Decibel) == 0x000000, "Member 'BP_AudioFunctions_C_DB_to_Float::In_Decibel' has a wrong offset!");
static_assert(offsetof(BP_AudioFunctions_C_DB_to_Float, __WorldContext) == 0x000008, "Member 'BP_AudioFunctions_C_DB_to_Float::__WorldContext' has a wrong offset!");
static_assert(offsetof(BP_AudioFunctions_C_DB_to_Float, Out_Float) == 0x000010, "Member 'BP_AudioFunctions_C_DB_to_Float::Out_Float' has a wrong offset!");
static_assert(offsetof(BP_AudioFunctions_C_DB_to_Float, CallFunc_Multiply_FloatFloat_ReturnValue) == 0x000014, "Member 'BP_AudioFunctions_C_DB_to_Float::CallFunc_Multiply_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AudioFunctions_C_DB_to_Float, CallFunc_MultiplyMultiply_FloatFloat_ReturnValue) == 0x000018, "Member 'BP_AudioFunctions_C_DB_to_Float::CallFunc_MultiplyMultiply_FloatFloat_ReturnValue' has a wrong offset!");

// Function BP_AudioFunctions.BP_AudioFunctions_C.Float_To_DB
// 0x0020 (0x0020 - 0x0000)
struct BP_AudioFunctions_C_Float_To_DB final
{
public:
	float                                         In_Float;                                          // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UObject*                                __WorldContext;                                    // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Out_Decibel;                                       // 0x0010(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Log_ReturnValue;                          // 0x0014(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue;          // 0x0018(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_AudioFunctions_C_Float_To_DB) == 0x000008, "Wrong alignment on BP_AudioFunctions_C_Float_To_DB");
static_assert(sizeof(BP_AudioFunctions_C_Float_To_DB) == 0x000020, "Wrong size on BP_AudioFunctions_C_Float_To_DB");
static_assert(offsetof(BP_AudioFunctions_C_Float_To_DB, In_Float) == 0x000000, "Member 'BP_AudioFunctions_C_Float_To_DB::In_Float' has a wrong offset!");
static_assert(offsetof(BP_AudioFunctions_C_Float_To_DB, __WorldContext) == 0x000008, "Member 'BP_AudioFunctions_C_Float_To_DB::__WorldContext' has a wrong offset!");
static_assert(offsetof(BP_AudioFunctions_C_Float_To_DB, Out_Decibel) == 0x000010, "Member 'BP_AudioFunctions_C_Float_To_DB::Out_Decibel' has a wrong offset!");
static_assert(offsetof(BP_AudioFunctions_C_Float_To_DB, CallFunc_Log_ReturnValue) == 0x000014, "Member 'BP_AudioFunctions_C_Float_To_DB::CallFunc_Log_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AudioFunctions_C_Float_To_DB, CallFunc_Multiply_FloatFloat_ReturnValue) == 0x000018, "Member 'BP_AudioFunctions_C_Float_To_DB::CallFunc_Multiply_FloatFloat_ReturnValue' has a wrong offset!");

}

