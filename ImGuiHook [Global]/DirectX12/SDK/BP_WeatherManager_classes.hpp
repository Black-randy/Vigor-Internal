#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_WeatherManager

#include "Basic.hpp"

#include "CoreUObject_structs.hpp"
#include "Engine_structs.hpp"
#include "E_LightingScenarios_structs.hpp"
#include "PhysicsCore_structs.hpp"
#include "WeatherManager_structs.hpp"
#include "WeatherManager_classes.hpp"
#include "S_SmokeCloud_structs.hpp"


namespace SDK
{

// BlueprintGeneratedClass BP_WeatherManager.BP_WeatherManager_C
// 0x0240 (0x0480 - 0x0240)
class ABP_WeatherManager_C : public AWeatherManager
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x0240(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class UParticleSystemComponent*               SnowParticleSystem;                                // 0x0248(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UParticleSystemComponent*               RainFogParticleSystem;                             // 0x0250(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UParticleSystemComponent*               RainSplashParticleSystem;                          // 0x0258(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UParticleSystemComponent*               RainParticleSystem;                                // 0x0260(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UMaterialInstance*                      Rain_PP_Material_Minus_Wetness_Only;               // 0x0268(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         LimitAmount;                                       // 0x0270(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_274[0x4];                                      // 0x0274(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UMaterialInstance*                      Rain_PP_Material_Minus_Rain_With_All_FX;           // 0x0278(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Rain_Amount_Start_Ripple;                          // 0x0280(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Wetness_Amount_Start_Ripple;                       // 0x0284(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         RippleFadeSpeed;                                   // 0x0288(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Rain_Amount_Start_Sliding;                         // 0x028C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Wetness_Amount_Start_Sliding;                      // 0x0290(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         SlidingFadeSpeed;                                  // 0x0294(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EWeatherType                                  WeatherType;                                       // 0x0298(0x0001)(Edit, BlueprintVisible, Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_299[0x3];                                      // 0x0299(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Current_Rain_Amount;                               // 0x029C(0x0004)(Edit, BlueprintVisible, Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FWeatherForecastSetup                  Rain_Forecast;                                     // 0x02A0(0x0038)(Edit, BlueprintVisible, NoDestructor)
	float                                         Current_Wetness_Amount;                            // 0x02D8(0x0004)(Edit, BlueprintVisible, Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Wetness_Increase_Time_Min_Rain;                    // 0x02DC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Wetness_Increase_Time_Max_Rain;                    // 0x02E0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Wetness_Decrease_Time;                             // 0x02E4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Rain_Emitter_Height_Above_Player;                  // 0x02E8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Rain_Emitter_Min_Spawn_Rate;                       // 0x02EC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Rain_Emitter_Max_Spawn_Rate;                       // 0x02F0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Rain_Splash_Emitter_Min_Spawn_Rate;                // 0x02F4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Rain_Splash_Emitter_Max_Spawn_Rate;                // 0x02F8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CurentRippleAmount;                                // 0x02FC(0x0004)(Edit, BlueprintVisible, Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CurentSlidingAmount;                               // 0x0300(0x0004)(Edit, BlueprintVisible, Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         DeltaTime;                                         // 0x0304(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                Current_Wind_Direction;                            // 0x0308(0x000C)(Edit, BlueprintVisible, Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Current_Wind_Speed;                                // 0x0314(0x0004)(Edit, BlueprintVisible, Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Current_Wind_Intensity;                            // 0x0318(0x0004)(Edit, BlueprintVisible, Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_31C[0x4];                                      // 0x031C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FWeatherForecastSetup                  Wind_Intensity_Forecast;                           // 0x0320(0x0038)(Edit, BlueprintVisible, NoDestructor)
	float                                         Wind_Patch_Size;                                   // 0x0358(0x0004)(Edit, BlueprintVisible, Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Rain_Fog_Emitter_Distance;                         // 0x035C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Rain_Fog_Min_Velocity;                             // 0x0360(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Rain_Fog_Max_Velocity;                             // 0x0364(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Current_Snowing_Amount;                            // 0x0368(0x0004)(Edit, BlueprintVisible, Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_36C[0x4];                                      // 0x036C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FWeatherForecastSetup                  Snowing_Forecast;                                  // 0x0370(0x0038)(Edit, BlueprintVisible, NoDestructor)
	float                                         Current_Snow_Cover_Amount;                         // 0x03A8(0x0004)(Edit, BlueprintVisible, Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           Snow_Ambient_Color;                                // 0x03AC(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Snow_Emitter_Height_Above_Player;                  // 0x03BC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Snow_Emitter_Min_Spawn_Rate;                       // 0x03C0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Snow_Emitter_Max_Spawn_Rate;                       // 0x03C4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UMaterialInstance*                      Snow_PP_Material;                                  // 0x03C8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Wind_Particle_Initial_Speed_Coef;                  // 0x03D0(0x0004)(Edit, BlueprintVisible, Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Wind_Particle_Acceleration_Coef;                   // 0x03D4(0x0004)(Edit, BlueprintVisible, Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	E_LightingScenarios                           LightingScenario;                                  // 0x03D8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3D9[0x7];                                      // 0x03D9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class AActor*>                         LevelAmbientActors;                                // 0x03E0(0x0010)(Edit, BlueprintVisible, DisableEditOnTemplate, DisableEditOnInstance)
	float                                         HeavyRainThreshold;                                // 0x03F0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          LevelAmbientActorsLoaded;                          // 0x03F4(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_3F5[0x3];                                      // 0x03F5(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         PreviousRainAmount;                                // 0x03F8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         PreviousWetnessAmount;                             // 0x03FC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         PreviousWindIntensity;                             // 0x0400(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         DynamicRainAmount;                                 // 0x0404(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         DynamicRainLerp;                                   // 0x0408(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         DynamicSnowAmount;                                 // 0x040C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         DynamicSnowLerp;                                   // 0x0410(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         DynamicWindIntensity;                              // 0x0414(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         DynamicWindLerp;                                   // 0x0418(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CanUseDynamicRain;                                 // 0x041C(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn)
	uint8                                         Pad_41D[0x3];                                      // 0x041D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         DynamicSnowCover;                                  // 0x0420(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         DynamicSnowCoverLerp;                              // 0x0424(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         DynamicWetness;                                    // 0x0428(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         DynamicWetnessLerp;                                // 0x042C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         SmokeDistributionDensity;                          // 0x0430(0x0004)(Edit, BlueprintVisible, Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           MapSizeInfo;                                       // 0x0434(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_444[0x4];                                      // 0x0444(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FS_SmokeCloud>                  SmokeQueue;                                        // 0x0448(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	float                                         ParticleWallOffsetInBuilding;                      // 0x0458(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         SpawnRateMultiplier;                               // 0x045C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         ParticleWallOffsetOuter;                           // 0x0460(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         SmokeVolumeHeightInBuilding;                       // 0x0464(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash)
	float                                         SmokeVolumeXYExtendInBuilding;                     // 0x0468(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_46C[0x4];                                      // 0x046C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class FString>                         SmokeBrightSettingsIn;                             // 0x0470(0x0010)(Edit, BlueprintVisible)

public:
	void ExecuteUbergraph_BP_WeatherManager(int32 EntryPoint);
	void ReceiveBeginPlay();
	void ReceiveTick(float DeltaSeconds);
	void InpActEvt_SmokeAdd_K2Node_InputActionEvent_0(const struct FKey& Key);
	void InpActEvt_SmokeRemove_K2Node_InputActionEvent_1(const struct FKey& Key);
	void InpActEvt_CtrlPlusAlt_NumPadNine_K2Node_InputKeyEvent_0(const struct FKey& Key);
	void UserConstructionScript();
	void UpdateMaterialParams();
	void UpdateRainPPEffects();
	void IsRaining(bool* OutRaining);
	void IsWet(bool* OutWet);
	void GetCurrentRainAmount(float* OutRainAmount);
	void GetCurrentWetnessAmount(float* OutWetnessAmount);
	void UpdateAll();
	void UpdateWeatherManagerComponent();
	void GetCurrentCameraPosition(struct FVector* OutPosition, struct FRotator* OutRotation, bool* OutPositionValid);
	void UpdateParticleSystems();
	void Simulate();
	bool IsRainPostprocessEnabled();
	bool IsRainOcclusionEnabled();
	void GetCurrentSnowingAmount(float* OutSnowingAmount);
	void SetRainParticleSystemsEnabled(bool IsEnabled);
	void SetSnowParticleSystemsEnabled(bool IsEnabled);
	void IsSnowing(bool* OutRaining);
	void GetCurrentSnowCoverAmount(float* OutSnowCoverAmount);
	void IsSnowCover(bool* OutSnowCover);
	void UpdateSnowPPEffects();
	void UpdateWeatherPPEffects();
	void InitForecastSetups();
	void GetSunDirection(struct FVector* OutDir);
	void UpdateLevelAmbience();
	void InitLevelAmbience();
	void GetCurrentWindIntensity(float* OutWindIntensity);
	void DisableWeather(bool Disable);
	void GetMapBoundaries(struct FLinearColor* MapSizeDetails, bool* Success);
	void AddSmokeCloud(const struct FVector& Position, int32 Radius, class UParticleSystem* Particles, class UParticleSystem* ParticlesBuilding, struct FS_SmokeCloud* Cloud, bool* Success);
	void InitSmokeDistribution();
	void RemoveSmokeCloud();
	void DebugSpawnSmokeCloud();
	void CheckCurrentWeatherStringForLightScenarios(const class FString& CurrWeather, bool* LightScenario);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BP_WeatherManager_C">();
	}
	static class ABP_WeatherManager_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<ABP_WeatherManager_C>();
	}
};
static_assert(alignof(ABP_WeatherManager_C) == 0x000008, "Wrong alignment on ABP_WeatherManager_C");
static_assert(sizeof(ABP_WeatherManager_C) == 0x000480, "Wrong size on ABP_WeatherManager_C");
static_assert(offsetof(ABP_WeatherManager_C, UberGraphFrame) == 0x000240, "Member 'ABP_WeatherManager_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(ABP_WeatherManager_C, SnowParticleSystem) == 0x000248, "Member 'ABP_WeatherManager_C::SnowParticleSystem' has a wrong offset!");
static_assert(offsetof(ABP_WeatherManager_C, RainFogParticleSystem) == 0x000250, "Member 'ABP_WeatherManager_C::RainFogParticleSystem' has a wrong offset!");
static_assert(offsetof(ABP_WeatherManager_C, RainSplashParticleSystem) == 0x000258, "Member 'ABP_WeatherManager_C::RainSplashParticleSystem' has a wrong offset!");
static_assert(offsetof(ABP_WeatherManager_C, RainParticleSystem) == 0x000260, "Member 'ABP_WeatherManager_C::RainParticleSystem' has a wrong offset!");
static_assert(offsetof(ABP_WeatherManager_C, Rain_PP_Material_Minus_Wetness_Only) == 0x000268, "Member 'ABP_WeatherManager_C::Rain_PP_Material_Minus_Wetness_Only' has a wrong offset!");
static_assert(offsetof(ABP_WeatherManager_C, LimitAmount) == 0x000270, "Member 'ABP_WeatherManager_C::LimitAmount' has a wrong offset!");
static_assert(offsetof(ABP_WeatherManager_C, Rain_PP_Material_Minus_Rain_With_All_FX) == 0x000278, "Member 'ABP_WeatherManager_C::Rain_PP_Material_Minus_Rain_With_All_FX' has a wrong offset!");
static_assert(offsetof(ABP_WeatherManager_C, Rain_Amount_Start_Ripple) == 0x000280, "Member 'ABP_WeatherManager_C::Rain_Amount_Start_Ripple' has a wrong offset!");
static_assert(offsetof(ABP_WeatherManager_C, Wetness_Amount_Start_Ripple) == 0x000284, "Member 'ABP_WeatherManager_C::Wetness_Amount_Start_Ripple' has a wrong offset!");
static_assert(offsetof(ABP_WeatherManager_C, RippleFadeSpeed) == 0x000288, "Member 'ABP_WeatherManager_C::RippleFadeSpeed' has a wrong offset!");
static_assert(offsetof(ABP_WeatherManager_C, Rain_Amount_Start_Sliding) == 0x00028C, "Member 'ABP_WeatherManager_C::Rain_Amount_Start_Sliding' has a wrong offset!");
static_assert(offsetof(ABP_WeatherManager_C, Wetness_Amount_Start_Sliding) == 0x000290, "Member 'ABP_WeatherManager_C::Wetness_Amount_Start_Sliding' has a wrong offset!");
static_assert(offsetof(ABP_WeatherManager_C, SlidingFadeSpeed) == 0x000294, "Member 'ABP_WeatherManager_C::SlidingFadeSpeed' has a wrong offset!");
static_assert(offsetof(ABP_WeatherManager_C, WeatherType) == 0x000298, "Member 'ABP_WeatherManager_C::WeatherType' has a wrong offset!");
static_assert(offsetof(ABP_WeatherManager_C, Current_Rain_Amount) == 0x00029C, "Member 'ABP_WeatherManager_C::Current_Rain_Amount' has a wrong offset!");
static_assert(offsetof(ABP_WeatherManager_C, Rain_Forecast) == 0x0002A0, "Member 'ABP_WeatherManager_C::Rain_Forecast' has a wrong offset!");
static_assert(offsetof(ABP_WeatherManager_C, Current_Wetness_Amount) == 0x0002D8, "Member 'ABP_WeatherManager_C::Current_Wetness_Amount' has a wrong offset!");
static_assert(offsetof(ABP_WeatherManager_C, Wetness_Increase_Time_Min_Rain) == 0x0002DC, "Member 'ABP_WeatherManager_C::Wetness_Increase_Time_Min_Rain' has a wrong offset!");
static_assert(offsetof(ABP_WeatherManager_C, Wetness_Increase_Time_Max_Rain) == 0x0002E0, "Member 'ABP_WeatherManager_C::Wetness_Increase_Time_Max_Rain' has a wrong offset!");
static_assert(offsetof(ABP_WeatherManager_C, Wetness_Decrease_Time) == 0x0002E4, "Member 'ABP_WeatherManager_C::Wetness_Decrease_Time' has a wrong offset!");
static_assert(offsetof(ABP_WeatherManager_C, Rain_Emitter_Height_Above_Player) == 0x0002E8, "Member 'ABP_WeatherManager_C::Rain_Emitter_Height_Above_Player' has a wrong offset!");
static_assert(offsetof(ABP_WeatherManager_C, Rain_Emitter_Min_Spawn_Rate) == 0x0002EC, "Member 'ABP_WeatherManager_C::Rain_Emitter_Min_Spawn_Rate' has a wrong offset!");
static_assert(offsetof(ABP_WeatherManager_C, Rain_Emitter_Max_Spawn_Rate) == 0x0002F0, "Member 'ABP_WeatherManager_C::Rain_Emitter_Max_Spawn_Rate' has a wrong offset!");
static_assert(offsetof(ABP_WeatherManager_C, Rain_Splash_Emitter_Min_Spawn_Rate) == 0x0002F4, "Member 'ABP_WeatherManager_C::Rain_Splash_Emitter_Min_Spawn_Rate' has a wrong offset!");
static_assert(offsetof(ABP_WeatherManager_C, Rain_Splash_Emitter_Max_Spawn_Rate) == 0x0002F8, "Member 'ABP_WeatherManager_C::Rain_Splash_Emitter_Max_Spawn_Rate' has a wrong offset!");
static_assert(offsetof(ABP_WeatherManager_C, CurentRippleAmount) == 0x0002FC, "Member 'ABP_WeatherManager_C::CurentRippleAmount' has a wrong offset!");
static_assert(offsetof(ABP_WeatherManager_C, CurentSlidingAmount) == 0x000300, "Member 'ABP_WeatherManager_C::CurentSlidingAmount' has a wrong offset!");
static_assert(offsetof(ABP_WeatherManager_C, DeltaTime) == 0x000304, "Member 'ABP_WeatherManager_C::DeltaTime' has a wrong offset!");
static_assert(offsetof(ABP_WeatherManager_C, Current_Wind_Direction) == 0x000308, "Member 'ABP_WeatherManager_C::Current_Wind_Direction' has a wrong offset!");
static_assert(offsetof(ABP_WeatherManager_C, Current_Wind_Speed) == 0x000314, "Member 'ABP_WeatherManager_C::Current_Wind_Speed' has a wrong offset!");
static_assert(offsetof(ABP_WeatherManager_C, Current_Wind_Intensity) == 0x000318, "Member 'ABP_WeatherManager_C::Current_Wind_Intensity' has a wrong offset!");
static_assert(offsetof(ABP_WeatherManager_C, Wind_Intensity_Forecast) == 0x000320, "Member 'ABP_WeatherManager_C::Wind_Intensity_Forecast' has a wrong offset!");
static_assert(offsetof(ABP_WeatherManager_C, Wind_Patch_Size) == 0x000358, "Member 'ABP_WeatherManager_C::Wind_Patch_Size' has a wrong offset!");
static_assert(offsetof(ABP_WeatherManager_C, Rain_Fog_Emitter_Distance) == 0x00035C, "Member 'ABP_WeatherManager_C::Rain_Fog_Emitter_Distance' has a wrong offset!");
static_assert(offsetof(ABP_WeatherManager_C, Rain_Fog_Min_Velocity) == 0x000360, "Member 'ABP_WeatherManager_C::Rain_Fog_Min_Velocity' has a wrong offset!");
static_assert(offsetof(ABP_WeatherManager_C, Rain_Fog_Max_Velocity) == 0x000364, "Member 'ABP_WeatherManager_C::Rain_Fog_Max_Velocity' has a wrong offset!");
static_assert(offsetof(ABP_WeatherManager_C, Current_Snowing_Amount) == 0x000368, "Member 'ABP_WeatherManager_C::Current_Snowing_Amount' has a wrong offset!");
static_assert(offsetof(ABP_WeatherManager_C, Snowing_Forecast) == 0x000370, "Member 'ABP_WeatherManager_C::Snowing_Forecast' has a wrong offset!");
static_assert(offsetof(ABP_WeatherManager_C, Current_Snow_Cover_Amount) == 0x0003A8, "Member 'ABP_WeatherManager_C::Current_Snow_Cover_Amount' has a wrong offset!");
static_assert(offsetof(ABP_WeatherManager_C, Snow_Ambient_Color) == 0x0003AC, "Member 'ABP_WeatherManager_C::Snow_Ambient_Color' has a wrong offset!");
static_assert(offsetof(ABP_WeatherManager_C, Snow_Emitter_Height_Above_Player) == 0x0003BC, "Member 'ABP_WeatherManager_C::Snow_Emitter_Height_Above_Player' has a wrong offset!");
static_assert(offsetof(ABP_WeatherManager_C, Snow_Emitter_Min_Spawn_Rate) == 0x0003C0, "Member 'ABP_WeatherManager_C::Snow_Emitter_Min_Spawn_Rate' has a wrong offset!");
static_assert(offsetof(ABP_WeatherManager_C, Snow_Emitter_Max_Spawn_Rate) == 0x0003C4, "Member 'ABP_WeatherManager_C::Snow_Emitter_Max_Spawn_Rate' has a wrong offset!");
static_assert(offsetof(ABP_WeatherManager_C, Snow_PP_Material) == 0x0003C8, "Member 'ABP_WeatherManager_C::Snow_PP_Material' has a wrong offset!");
static_assert(offsetof(ABP_WeatherManager_C, Wind_Particle_Initial_Speed_Coef) == 0x0003D0, "Member 'ABP_WeatherManager_C::Wind_Particle_Initial_Speed_Coef' has a wrong offset!");
static_assert(offsetof(ABP_WeatherManager_C, Wind_Particle_Acceleration_Coef) == 0x0003D4, "Member 'ABP_WeatherManager_C::Wind_Particle_Acceleration_Coef' has a wrong offset!");
static_assert(offsetof(ABP_WeatherManager_C, LightingScenario) == 0x0003D8, "Member 'ABP_WeatherManager_C::LightingScenario' has a wrong offset!");
static_assert(offsetof(ABP_WeatherManager_C, LevelAmbientActors) == 0x0003E0, "Member 'ABP_WeatherManager_C::LevelAmbientActors' has a wrong offset!");
static_assert(offsetof(ABP_WeatherManager_C, HeavyRainThreshold) == 0x0003F0, "Member 'ABP_WeatherManager_C::HeavyRainThreshold' has a wrong offset!");
static_assert(offsetof(ABP_WeatherManager_C, LevelAmbientActorsLoaded) == 0x0003F4, "Member 'ABP_WeatherManager_C::LevelAmbientActorsLoaded' has a wrong offset!");
static_assert(offsetof(ABP_WeatherManager_C, PreviousRainAmount) == 0x0003F8, "Member 'ABP_WeatherManager_C::PreviousRainAmount' has a wrong offset!");
static_assert(offsetof(ABP_WeatherManager_C, PreviousWetnessAmount) == 0x0003FC, "Member 'ABP_WeatherManager_C::PreviousWetnessAmount' has a wrong offset!");
static_assert(offsetof(ABP_WeatherManager_C, PreviousWindIntensity) == 0x000400, "Member 'ABP_WeatherManager_C::PreviousWindIntensity' has a wrong offset!");
static_assert(offsetof(ABP_WeatherManager_C, DynamicRainAmount) == 0x000404, "Member 'ABP_WeatherManager_C::DynamicRainAmount' has a wrong offset!");
static_assert(offsetof(ABP_WeatherManager_C, DynamicRainLerp) == 0x000408, "Member 'ABP_WeatherManager_C::DynamicRainLerp' has a wrong offset!");
static_assert(offsetof(ABP_WeatherManager_C, DynamicSnowAmount) == 0x00040C, "Member 'ABP_WeatherManager_C::DynamicSnowAmount' has a wrong offset!");
static_assert(offsetof(ABP_WeatherManager_C, DynamicSnowLerp) == 0x000410, "Member 'ABP_WeatherManager_C::DynamicSnowLerp' has a wrong offset!");
static_assert(offsetof(ABP_WeatherManager_C, DynamicWindIntensity) == 0x000414, "Member 'ABP_WeatherManager_C::DynamicWindIntensity' has a wrong offset!");
static_assert(offsetof(ABP_WeatherManager_C, DynamicWindLerp) == 0x000418, "Member 'ABP_WeatherManager_C::DynamicWindLerp' has a wrong offset!");
static_assert(offsetof(ABP_WeatherManager_C, CanUseDynamicRain) == 0x00041C, "Member 'ABP_WeatherManager_C::CanUseDynamicRain' has a wrong offset!");
static_assert(offsetof(ABP_WeatherManager_C, DynamicSnowCover) == 0x000420, "Member 'ABP_WeatherManager_C::DynamicSnowCover' has a wrong offset!");
static_assert(offsetof(ABP_WeatherManager_C, DynamicSnowCoverLerp) == 0x000424, "Member 'ABP_WeatherManager_C::DynamicSnowCoverLerp' has a wrong offset!");
static_assert(offsetof(ABP_WeatherManager_C, DynamicWetness) == 0x000428, "Member 'ABP_WeatherManager_C::DynamicWetness' has a wrong offset!");
static_assert(offsetof(ABP_WeatherManager_C, DynamicWetnessLerp) == 0x00042C, "Member 'ABP_WeatherManager_C::DynamicWetnessLerp' has a wrong offset!");
static_assert(offsetof(ABP_WeatherManager_C, SmokeDistributionDensity) == 0x000430, "Member 'ABP_WeatherManager_C::SmokeDistributionDensity' has a wrong offset!");
static_assert(offsetof(ABP_WeatherManager_C, MapSizeInfo) == 0x000434, "Member 'ABP_WeatherManager_C::MapSizeInfo' has a wrong offset!");
static_assert(offsetof(ABP_WeatherManager_C, SmokeQueue) == 0x000448, "Member 'ABP_WeatherManager_C::SmokeQueue' has a wrong offset!");
static_assert(offsetof(ABP_WeatherManager_C, ParticleWallOffsetInBuilding) == 0x000458, "Member 'ABP_WeatherManager_C::ParticleWallOffsetInBuilding' has a wrong offset!");
static_assert(offsetof(ABP_WeatherManager_C, SpawnRateMultiplier) == 0x00045C, "Member 'ABP_WeatherManager_C::SpawnRateMultiplier' has a wrong offset!");
static_assert(offsetof(ABP_WeatherManager_C, ParticleWallOffsetOuter) == 0x000460, "Member 'ABP_WeatherManager_C::ParticleWallOffsetOuter' has a wrong offset!");
static_assert(offsetof(ABP_WeatherManager_C, SmokeVolumeHeightInBuilding) == 0x000464, "Member 'ABP_WeatherManager_C::SmokeVolumeHeightInBuilding' has a wrong offset!");
static_assert(offsetof(ABP_WeatherManager_C, SmokeVolumeXYExtendInBuilding) == 0x000468, "Member 'ABP_WeatherManager_C::SmokeVolumeXYExtendInBuilding' has a wrong offset!");
static_assert(offsetof(ABP_WeatherManager_C, SmokeBrightSettingsIn) == 0x000470, "Member 'ABP_WeatherManager_C::SmokeBrightSettingsIn' has a wrong offset!");

}

