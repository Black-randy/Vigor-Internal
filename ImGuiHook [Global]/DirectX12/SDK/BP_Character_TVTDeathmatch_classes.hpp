#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_Character_TVTDeathmatch

#include "Basic.hpp"

#include "Flame_structs.hpp"
#include "Engine_structs.hpp"
#include "PhysicsCore_structs.hpp"
#include "BP_Character_Teams_classes.hpp"


namespace SDK
{

// BlueprintGeneratedClass BP_Character_TVTDeathmatch.BP_Character_TVTDeathmatch_C
// 0x0070 (0x12B0 - 0x1240)
class ABP_Character_TVTDeathmatch_C final : public ABP_Character_Teams_C
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame_BP_Character_TVTDeathmatch_C;       // 0x1240(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	struct FTimerHandle                           EquipFirstWeaponHandle;                            // 0x1248(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	struct FTimerHandle                           CheckWeaponsSkinsHandle_0;                         // 0x1250(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	TMap<class UClass*, class UClass*>            WaitingSkins_0;                                    // 0x1258(0x0050)(Edit, BlueprintVisible, DisableEditOnInstance)
	class AController*                            LastPossessingController_;                         // 0x12A8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

public:
	void ExecuteUbergraph_BP_Character_TVTDeathmatch(int32 EntryPoint);
	void HideChosenLoadoutUI();
	void TemporarilyShowChosenLoadout();
	void DelayedCheckSkins();
	void CheckSkins(class UClass* Weapon, class UClass* Skin);
	void HideConsumableIndicators();
	void PlayerLootedLootbox(class ALootable* LootBox);
	void ClientEquipFirstWeapon();
	void EquipWeapon();
	void OnAfterRespawn();
	void RespawnPlayerIfReused();
	void Initial_Loadout();
	void BeforeDied(float DamageAmount, EDamageType DamageType, class AHumanCharacter* InstigatingCharacter, TSubclassOf<class AItem> InstigatingItem, const struct FHitResult& HitResult);
	void Clear_Loadout();
	void Add_Item_To_Backpack(class UClass* Item_Type, int32 Amount);
	void Add_Weapon_To_Loadout(class UClass* Weapon_Type, int32 Ammo_in_Mag_Count, int32 Chambered_Ammo);
	void Load_Loadout();
	void ApplyOwnSkinClients(const class UClass* Weapon, const class UClass* Skin);
	void ReceivePossessed(class AController* NewController);
	void ReceiveBeginPlay();
	void ReceiveTick(float DeltaSeconds);
	void Die(float DamageAmount, EDamageType DamageType, class AHumanCharacter* InstigatingCharacter, TSubclassOf<class AItem> InstigatingItem, const struct FHitResult& HitResult);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BP_Character_TVTDeathmatch_C">();
	}
	static class ABP_Character_TVTDeathmatch_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<ABP_Character_TVTDeathmatch_C>();
	}
};
static_assert(alignof(ABP_Character_TVTDeathmatch_C) == 0x000010, "Wrong alignment on ABP_Character_TVTDeathmatch_C");
static_assert(sizeof(ABP_Character_TVTDeathmatch_C) == 0x0012B0, "Wrong size on ABP_Character_TVTDeathmatch_C");
static_assert(offsetof(ABP_Character_TVTDeathmatch_C, UberGraphFrame_BP_Character_TVTDeathmatch_C) == 0x001240, "Member 'ABP_Character_TVTDeathmatch_C::UberGraphFrame_BP_Character_TVTDeathmatch_C' has a wrong offset!");
static_assert(offsetof(ABP_Character_TVTDeathmatch_C, EquipFirstWeaponHandle) == 0x001248, "Member 'ABP_Character_TVTDeathmatch_C::EquipFirstWeaponHandle' has a wrong offset!");
static_assert(offsetof(ABP_Character_TVTDeathmatch_C, CheckWeaponsSkinsHandle_0) == 0x001250, "Member 'ABP_Character_TVTDeathmatch_C::CheckWeaponsSkinsHandle_0' has a wrong offset!");
static_assert(offsetof(ABP_Character_TVTDeathmatch_C, WaitingSkins_0) == 0x001258, "Member 'ABP_Character_TVTDeathmatch_C::WaitingSkins_0' has a wrong offset!");
static_assert(offsetof(ABP_Character_TVTDeathmatch_C, LastPossessingController_) == 0x0012A8, "Member 'ABP_Character_TVTDeathmatch_C::LastPossessingController_' has a wrong offset!");

}

