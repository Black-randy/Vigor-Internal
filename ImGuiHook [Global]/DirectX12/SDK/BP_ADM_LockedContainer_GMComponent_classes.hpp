#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_ADM_LockedContainer_GMComponent

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "BP_GMComponent_ADM_Event_Base_classes.hpp"


namespace SDK
{

// BlueprintGeneratedClass BP_ADM_LockedContainer_GMComponent.BP_ADM_LockedContainer_GMComponent_C
// 0x00E0 (0x02B8 - 0x01D8)
class UBP_ADM_LockedContainer_GMComponent_C final : public UBP_GMComponent_ADM_Event_Base_C
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame_BP_ADM_LockedContainer_GMComponent_C; // 0x01D8(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class ABP_ADM_LockedContainer_Location_C*     Locked_container_location;                         // 0x01E0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ABP_ADM_LockedContainer_Crate_C*        Locked_crate;                                      // 0x01E8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ABP_ADM_LockedContainer_LootManager_C*  Crashed_convoy_loot_manager;                       // 0x01F0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<class ABP_ADM_LockedContainer_Location_C*> Debug_Convoy_Locations;                            // 0x01F8(0x0010)(Edit, BlueprintVisible, DisableEditOnTemplate, DisableEditOnInstance)
	TArray<class ABP_ADM_LockedContainer_Crate_C*> Debug_Convoys;                                     // 0x0208(0x0010)(Edit, BlueprintVisible, DisableEditOnTemplate, DisableEditOnInstance)
	TMap<class UBP_CombinationLock_Component_C*, class ABP_ADM_LockedContainer_Lock_C*> Locks;                                             // 0x0218(0x0050)(Edit, BlueprintVisible, DisableEditOnInstance, ContainsInstancedReference)
	class FName                                   Locked_container_marker_tag;                       // 0x0268(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FTimerHandle                           Markers_Timer;                                     // 0x0270(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	int32                                         Max_ammount_of_locks_on_convoy;                    // 0x0278(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Ammount_of_digits_in_lock;                         // 0x027C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Shooter_detection_radius;                          // 0x0280(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Shooter_mark_duration;                             // 0x0284(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UClass*                                 Locked_container_class;                            // 0x0288(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UClass*                                 Lock_class;                                        // 0x0290(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Chance_to_spawn_bombardment;                       // 0x0298(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Should_bombard_on_shot_lock;                       // 0x029C(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          Bombardment_fired_off;                             // 0x029D(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_29E[0x2];                                      // 0x029E(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Shell_count;                                       // 0x02A0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Radius;                                            // 0x02A4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Time_to_first_shell;                               // 0x02A8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Was_convoy_accessed_already;                       // 0x02AC(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_2AD[0x3];                                      // 0x02AD(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class ABP_ADM_LockedContainer_Container_C*    Container;                                         // 0x02B0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

public:
	void ExecuteUbergraph_BP_ADM_LockedContainer_GMComponent(int32 EntryPoint);
	void Match_Has_Started();
	void Enable_interaction_on_convoy(bool Enabled);
	void Try_to_open_vault();
	void Start_spawning_loot_manager();
	void Verify_that_everything_spawned_properly();
	void Start_spawning_convoy();
	void Start_spawning_locks();
	void Player_solved_the_combination(class UBP_CombinationLock_PCComponent_C* Player_that_opened_lock, class UBP_CombinationLock_Component_C* Unlocked_Combination_lock);
	void Destroy_loot_manager(bool Result);
	void Character_interacted_with_convoy(class ABP_Character_Script_C* Character_that_interacted);
	void Erase_Player_Markers();
	void Mark_Container_Alarm_On_Map(class APawn* Shooting_character, float Duration);
	void Player_shot_the_lock(class APawn* Shooting_character, class ABP_ADM_LockedContainer_Lock_C* Shooted_lock);
	void Player_interacted_with_lock(class APawn* Interacting_Character, class ABP_ADM_LockedContainer_Lock_C* Interacted_lock);
	void Initialize_Component();
	void Debug_unlock_convoy();
	void Debug_Spawn_all_Convoys();
	void Spawn_Container(bool* Success);
	void Spawn_Lock(class UClass* Lcok_Class, const struct FTransform& SpawnTransform, int32 Ammount_of_digits_in_lock_0);
	void Spawn_Loot_manager(class ABP_ADM_LockedContainer_LootManager_C** Loot_manager);
	void Check_status_of_all_locks(bool* All_locks_down, bool* RightLockOpened, bool* LeftLockOpened, bool* TopLockOpened);
	void Unlock_convoy();
	void Deactivate_lock(class ABP_ADM_LockedContainer_Lock_C* Lock_to_deactivate, bool* Lock_deactivated);
	void Randomly_select_available_convoy(class UClass** Randomly_selected_available_convoy);
	void Start_bombardment();

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BP_ADM_LockedContainer_GMComponent_C">();
	}
	static class UBP_ADM_LockedContainer_GMComponent_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UBP_ADM_LockedContainer_GMComponent_C>();
	}
};
static_assert(alignof(UBP_ADM_LockedContainer_GMComponent_C) == 0x000008, "Wrong alignment on UBP_ADM_LockedContainer_GMComponent_C");
static_assert(sizeof(UBP_ADM_LockedContainer_GMComponent_C) == 0x0002B8, "Wrong size on UBP_ADM_LockedContainer_GMComponent_C");
static_assert(offsetof(UBP_ADM_LockedContainer_GMComponent_C, UberGraphFrame_BP_ADM_LockedContainer_GMComponent_C) == 0x0001D8, "Member 'UBP_ADM_LockedContainer_GMComponent_C::UberGraphFrame_BP_ADM_LockedContainer_GMComponent_C' has a wrong offset!");
static_assert(offsetof(UBP_ADM_LockedContainer_GMComponent_C, Locked_container_location) == 0x0001E0, "Member 'UBP_ADM_LockedContainer_GMComponent_C::Locked_container_location' has a wrong offset!");
static_assert(offsetof(UBP_ADM_LockedContainer_GMComponent_C, Locked_crate) == 0x0001E8, "Member 'UBP_ADM_LockedContainer_GMComponent_C::Locked_crate' has a wrong offset!");
static_assert(offsetof(UBP_ADM_LockedContainer_GMComponent_C, Crashed_convoy_loot_manager) == 0x0001F0, "Member 'UBP_ADM_LockedContainer_GMComponent_C::Crashed_convoy_loot_manager' has a wrong offset!");
static_assert(offsetof(UBP_ADM_LockedContainer_GMComponent_C, Debug_Convoy_Locations) == 0x0001F8, "Member 'UBP_ADM_LockedContainer_GMComponent_C::Debug_Convoy_Locations' has a wrong offset!");
static_assert(offsetof(UBP_ADM_LockedContainer_GMComponent_C, Debug_Convoys) == 0x000208, "Member 'UBP_ADM_LockedContainer_GMComponent_C::Debug_Convoys' has a wrong offset!");
static_assert(offsetof(UBP_ADM_LockedContainer_GMComponent_C, Locks) == 0x000218, "Member 'UBP_ADM_LockedContainer_GMComponent_C::Locks' has a wrong offset!");
static_assert(offsetof(UBP_ADM_LockedContainer_GMComponent_C, Locked_container_marker_tag) == 0x000268, "Member 'UBP_ADM_LockedContainer_GMComponent_C::Locked_container_marker_tag' has a wrong offset!");
static_assert(offsetof(UBP_ADM_LockedContainer_GMComponent_C, Markers_Timer) == 0x000270, "Member 'UBP_ADM_LockedContainer_GMComponent_C::Markers_Timer' has a wrong offset!");
static_assert(offsetof(UBP_ADM_LockedContainer_GMComponent_C, Max_ammount_of_locks_on_convoy) == 0x000278, "Member 'UBP_ADM_LockedContainer_GMComponent_C::Max_ammount_of_locks_on_convoy' has a wrong offset!");
static_assert(offsetof(UBP_ADM_LockedContainer_GMComponent_C, Ammount_of_digits_in_lock) == 0x00027C, "Member 'UBP_ADM_LockedContainer_GMComponent_C::Ammount_of_digits_in_lock' has a wrong offset!");
static_assert(offsetof(UBP_ADM_LockedContainer_GMComponent_C, Shooter_detection_radius) == 0x000280, "Member 'UBP_ADM_LockedContainer_GMComponent_C::Shooter_detection_radius' has a wrong offset!");
static_assert(offsetof(UBP_ADM_LockedContainer_GMComponent_C, Shooter_mark_duration) == 0x000284, "Member 'UBP_ADM_LockedContainer_GMComponent_C::Shooter_mark_duration' has a wrong offset!");
static_assert(offsetof(UBP_ADM_LockedContainer_GMComponent_C, Locked_container_class) == 0x000288, "Member 'UBP_ADM_LockedContainer_GMComponent_C::Locked_container_class' has a wrong offset!");
static_assert(offsetof(UBP_ADM_LockedContainer_GMComponent_C, Lock_class) == 0x000290, "Member 'UBP_ADM_LockedContainer_GMComponent_C::Lock_class' has a wrong offset!");
static_assert(offsetof(UBP_ADM_LockedContainer_GMComponent_C, Chance_to_spawn_bombardment) == 0x000298, "Member 'UBP_ADM_LockedContainer_GMComponent_C::Chance_to_spawn_bombardment' has a wrong offset!");
static_assert(offsetof(UBP_ADM_LockedContainer_GMComponent_C, Should_bombard_on_shot_lock) == 0x00029C, "Member 'UBP_ADM_LockedContainer_GMComponent_C::Should_bombard_on_shot_lock' has a wrong offset!");
static_assert(offsetof(UBP_ADM_LockedContainer_GMComponent_C, Bombardment_fired_off) == 0x00029D, "Member 'UBP_ADM_LockedContainer_GMComponent_C::Bombardment_fired_off' has a wrong offset!");
static_assert(offsetof(UBP_ADM_LockedContainer_GMComponent_C, Shell_count) == 0x0002A0, "Member 'UBP_ADM_LockedContainer_GMComponent_C::Shell_count' has a wrong offset!");
static_assert(offsetof(UBP_ADM_LockedContainer_GMComponent_C, Radius) == 0x0002A4, "Member 'UBP_ADM_LockedContainer_GMComponent_C::Radius' has a wrong offset!");
static_assert(offsetof(UBP_ADM_LockedContainer_GMComponent_C, Time_to_first_shell) == 0x0002A8, "Member 'UBP_ADM_LockedContainer_GMComponent_C::Time_to_first_shell' has a wrong offset!");
static_assert(offsetof(UBP_ADM_LockedContainer_GMComponent_C, Was_convoy_accessed_already) == 0x0002AC, "Member 'UBP_ADM_LockedContainer_GMComponent_C::Was_convoy_accessed_already' has a wrong offset!");
static_assert(offsetof(UBP_ADM_LockedContainer_GMComponent_C, Container) == 0x0002B0, "Member 'UBP_ADM_LockedContainer_GMComponent_C::Container' has a wrong offset!");

}

