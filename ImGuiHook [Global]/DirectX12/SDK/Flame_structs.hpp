#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: Flame

#include "Basic.hpp"

#include "FlameUI_structs.hpp"
#include "InputCore_structs.hpp"
#include "CoreUObject_structs.hpp"
#include "Engine_structs.hpp"
#include "SlateCore_structs.hpp"
#include "LoadingScreen_structs.hpp"
#include "AnimGraphRuntime_structs.hpp"
#include "PhysicsCore_structs.hpp"


namespace SDK
{

// Enum Flame.EStatePhase
// NumValues: 0x0009
enum class EStatePhase : uint8
{
	Inactive                                 = 0,
	WaitingForStart                          = 1,
	Started                                  = 2,
	Active                                   = 3,
	WaitingForInterrupt                      = 4,
	WaitingForFinishCycle                    = 5,
	Ended                                    = 6,
	Interrupted                              = 7,
	EStatePhase_MAX                          = 8,
};

// Enum Flame.EOperationResult
// NumValues: 0x0004
enum class EOperationResult : uint8
{
	NotProcessed                             = 0,
	Failed                                   = 1,
	Done                                     = 2,
	EOperationResult_MAX                     = 3,
};

// Enum Flame.EInventoryItemDescriptorType
// NumValues: 0x0007
enum class EInventoryItemDescriptorType : uint8
{
	Default                                  = 0,
	Weapon                                   = 1,
	BackpackItem                             = 2,
	Plan                                     = 3,
	CDO                                      = 4,
	Other                                    = 5,
	EInventoryItemDescriptorType_MAX         = 6,
};

// Enum Flame.Stance
// NumValues: 0x0006
enum class EStance : uint8
{
	Stand                                    = 0,
	Crouch                                   = 1,
	Prone                                    = 2,
	Down                                     = 3,
	Stunned                                  = 4,
	Stance_MAX                               = 5,
};

// Enum Flame.ECameraPositionState
// NumValues: 0x0005
enum class ECameraPositionState : uint8
{
	Follow                                   = 0,
	ADS3P                                    = 1,
	ADS1P                                    = 2,
	DEAD                                     = 3,
	ECameraPositionState_MAX                 = 4,
};

// Enum Flame.EItemActionFinishedState
// NumValues: 0x0003
enum class EItemActionFinishedState : uint8
{
	Normal                                   = 0,
	Cancelled                                = 1,
	EItemActionFinishedState_MAX             = 2,
};

// Enum Flame.EInteriorRoomType
// NumValues: 0x0004
enum class EInteriorRoomType : uint8
{
	Default                                  = 0,
	Cramped                                  = 1,
	Spacious                                 = 2,
	EInteriorRoomType_MAX                    = 3,
};

// Enum Flame.EGameScenario
// NumValues: 0x0008
enum class EGameScenario : uint8
{
	None                                     = 0,
	Tutorial                                 = 1,
	Shelter                                  = 2,
	Encounter                                = 3,
	ResultScreen                             = 4,
	Hub                                      = 5,
	Teams                                    = 6,
	EGameScenario_MAX                        = 7,
};

// Enum Flame.ECloudRequestResult
// NumValues: 0x0006
enum class ECloudRequestResult : uint8
{
	Success                                  = 0,
	Canceled                                 = 1,
	ConnectionIssue                          = 2,
	LoggedOut                                = 3,
	Failed                                   = 4,
	ECloudRequestResult_MAX                  = 5,
};

// Enum Flame.EGameStorePurchaseType
// NumValues: 0x0003
enum class EGameStorePurchaseType : uint8
{
	RequestedPurchase                        = 0,
	UnexpectedPurchase                       = 1,
	EGameStorePurchaseType_MAX               = 2,
};

// Enum Flame.EWeaponSlotType
// NumValues: 0x000A
enum class EWeaponSlotType : uint8
{
	None                                     = 255,
	PrimaryWeaponA                           = 0,
	PrimaryWeaponB                           = 1,
	SecondaryWeaponA                         = 2,
	SecondaryWeaponB                         = 3,
	Count                                    = 4,
	HackedGrenadeWeapon                      = 4,
	Backpack                                 = 5,
	Stash                                    = 6,
	EWeaponSlotType_MAX                      = 256,
};

// Enum Flame.EMachineMode
// NumValues: 0x0003
enum class EMachineMode : uint8
{
	RPC                                      = 0,
	Replication                              = 1,
	EMachineMode_MAX                         = 2,
};

// Enum Flame.ECloudInitMode
// NumValues: 0x0003
enum class ECloudInitMode : uint8
{
	AlwaysLoadOnPossess                      = 0,
	LoadOnceOnly                             = 1,
	ECloudInitMode_MAX                       = 2,
};

// Enum Flame.ERadiationShieldingLevel
// NumValues: 0x0006
enum class ERadiationShieldingLevel : uint8
{
	ERSL_None                                = 0,
	ERSL_Partial                             = 1,
	ERSL_Half                                = 2,
	ERSL_Extensive                           = 3,
	ERSL_Full                                = 4,
	ERSL_MAX                                 = 5,
};

// Enum Flame.ECloudManagerState
// NumValues: 0x0009
enum class ECloudManagerState : uint8
{
	NotInitialized                           = 0,
	Initializing                             = 1,
	LoggingIn                                = 2,
	LoggedIn                                 = 3,
	LoggedOut                                = 4,
	WrongVersion                             = 5,
	ServerFull                               = 6,
	MaintenanceMode                          = 7,
	ECloudManagerState_MAX                   = 8,
};

// Enum Flame.ECloudRequestResultLevel
// NumValues: 0x0003
enum class ECloudRequestResultLevel : uint8
{
	LogoutOnError                            = 0,
	NothingOnError                           = 1,
	ECloudRequestResultLevel_MAX             = 2,
};

// Enum Flame.EBattlePassSeasonType
// NumValues: 0x0003
enum class EBattlePassSeasonType : uint8
{
	Current                                  = 0,
	Legacy                                   = 1,
	EBattlePassSeasonType_MAX                = 2,
};

// Enum Flame.EPlatformStoreOffersState
// NumValues: 0x0006
enum class EPlatformStoreOffersState : uint8
{
	NotInitialized                           = 0,
	Initializing                             = 1,
	ReadyInGameStore                         = 2,
	Ready                                    = 3,
	Failed                                   = 4,
	EPlatformStoreOffersState_MAX            = 5,
};

// Enum Flame.EPlatformStoreOffersRefreshMode
// NumValues: 0x0003
enum class EPlatformStoreOffersRefreshMode : uint8
{
	CloudAndPlatformOffers                   = 0,
	OnlyPlatformOffers                       = 1,
	EPlatformStoreOffersRefreshMode_MAX      = 2,
};

// Enum Flame.EGameStoreTransactionSource
// NumValues: 0x0006
enum class EGameStoreTransactionSource : uint8
{
	None                                     = 0,
	InGameShop                               = 1,
	Wardrobe                                 = 2,
	CosmeticsStore                           = 3,
	MatchLobby                               = 8,
	EGameStoreTransactionSource_MAX          = 9,
};

// Enum Flame.EGameStoreProductUsageType
// NumValues: 0x0003
enum class EGameStoreProductUsageType : uint8
{
	Consumable                               = 0,
	Durable                                  = 1,
	EGameStoreProductUsageType_MAX           = 2,
};

// Enum Flame.EGameStoreProductType
// NumValues: 0x0004
enum class EGameStoreProductType : uint8
{
	Unknown                                  = 0,
	GameStoreProduct                         = 1,
	PlatformStoreProduct                     = 2,
	EGameStoreProductType_MAX                = 3,
};

// Enum Flame.EClientGroupState
// NumValues: 0x0006
enum class EClientGroupState : uint8
{
	Unknown                                  = 0,
	Shelter                                  = 1,
	Ready                                    = 2,
	Cancel                                   = 3,
	Match                                    = 4,
	EClientGroupState_MAX                    = 5,
};

// Enum Flame.ELeaderboardType
// NumValues: 0x0005
enum class ELeaderboardType : uint8
{
	Unknown                                  = 0,
	Friends                                  = 1,
	AroundRank                               = 2,
	AroundUser                               = 3,
	ELeaderboardType_MAX                     = 4,
};

// Enum Flame.EMessageBoxAction
// NumValues: 0x0006
enum class EMessageBoxAction : uint8
{
	GotIt                                    = 0,
	Confirm                                  = 1,
	Cancel                                   = 2,
	Yes                                      = 3,
	No                                       = 4,
	EMessageBoxAction_MAX                    = 5,
};

// Enum Flame.EInputMode
// NumValues: 0x0004
enum class EInputMode : uint8
{
	MouseAndKeyboard                         = 0,
	Gamepad                                  = 1,
	Unknown                                  = 2,
	EInputMode_MAX                           = 3,
};

// Enum Flame.EDataProviderState
// NumValues: 0x0006
enum class EDataProviderState : uint8
{
	NotInitialized                           = 0,
	Initializing                             = 1,
	AllReady                                 = 2,
	ConnectionIssue                          = 3,
	SomeErrors                               = 4,
	EDataProviderState_MAX                   = 5,
};

// Enum Flame.ECommodityManagerDistributionAlgorithm
// NumValues: 0x0004
enum class ECommodityManagerDistributionAlgorithm : uint8
{
	BreadthFirst                             = 0,
	DepthFirst                               = 1,
	Default                                  = 2,
	ECommodityManagerDistributionAlgorithm_MAX = 3,
};

// Enum Flame.ECommodityManagerSpawnType
// NumValues: 0x0003
enum class ECommodityManagerSpawnType : uint8
{
	FirstTick                                = 0,
	FunctionCall                             = 1,
	ECommodityManagerSpawnType_MAX           = 2,
};

// Enum Flame.EIconSize
// NumValues: 0x0003
enum class EIconSize : uint8
{
	Normal                                   = 0,
	Big                                      = 1,
	EIconSize_MAX                            = 2,
};

// Enum Flame.EItemCategory
// NumValues: 0x0031
enum class EItemCategory : uint8
{
	Default                                  = 0,
	Archetype                                = 1,
	Backpack                                 = 2,
	Cap                                      = 3,
	CraftingPart                             = 4,
	CraftingPlan                             = 5,
	Crowns                                   = 6,
	Set                                      = 7,
	Eyewear                                  = 8,
	Facewear                                 = 9,
	Food                                     = 10,
	Gloves                                   = 11,
	Headgear                                 = 12,
	Outfit                                   = 13,
	Resource                                 = 14,
	Ammo                                     = 15,
	Currency                                 = 16,
	SpecialCategory                          = 17,
	Gesture                                  = 18,
	HealingConsumable                        = 19,
	ThrowableConsumable                      = 20,
	Materials                                = 21,
	ShelterCustomization                     = 22,
	Sprays                                   = 23,
	Tools                                    = 24,
	Traps                                    = 25,
	AssaultRifle                             = 26,
	Machinegun                               = 27,
	Melee                                    = 28,
	Rifle                                    = 29,
	Shotgun                                  = 30,
	Pistol                                   = 31,
	SubmachineGun                            = 32,
	SpecialWeapon                            = 33,
	WeaponSkin                               = 34,
	Booster                                  = 35,
	Crate                                    = 36,
	Title                                    = 37,
	Memento                                  = 38,
	CustomizationBundle                      = 39,
	PersistentConsumable                     = 40,
	Persistent                               = 41,
	Toy                                      = 42,
	HeadgearSet                              = 43,
	Cassette                                 = 44,
	Count                                    = 45,
	LobbyTicket                              = 46,
	PersonalTicket                           = 47,
	EItemCategory_MAX                        = 48,
};

// Enum Flame.EProjectileType
// NumValues: 0x0004
enum class EProjectileType : uint8
{
	EPT_Zero                                 = 0,
	EPT_Bullet                               = 1,
	EPT_Arrow                                = 2,
	EPT_MAX                                  = 3,
};

// Enum Flame.EGameStoreOffersState
// NumValues: 0x0007
enum class EGameStoreOffersState : uint8
{
	NotInitialized                           = 0,
	Downloading                              = 1,
	DownloadFinished                         = 2,
	UpdatingPlatformInfo                     = 3,
	Ready                                    = 4,
	Failed                                   = 5,
	EGameStoreOffersState_MAX                = 6,
};

// Enum Flame.EGameStoreProductsState
// NumValues: 0x0007
enum class EGameStoreProductsState : uint8
{
	NotInitialized                           = 0,
	Downloading                              = 1,
	DownloadFinished                         = 2,
	UpdatingPlatformInfo                     = 3,
	Ready                                    = 4,
	Failed                                   = 5,
	EGameStoreProductsState_MAX              = 6,
};

// Enum Flame.EGameStoreSellingPointsState
// NumValues: 0x0005
enum class EGameStoreSellingPointsState : uint8
{
	NotInitialized                           = 0,
	Downloading                              = 1,
	Ready                                    = 2,
	Failed                                   = 3,
	EGameStoreSellingPointsState_MAX         = 4,
};

// Enum Flame.EGameStorePurchasesState
// NumValues: 0x0005
enum class EGameStorePurchasesState : uint8
{
	NotInitialized                           = 0,
	Downloading                              = 1,
	Ready                                    = 2,
	Failed                                   = 3,
	EGameStorePurchasesState_MAX             = 4,
};

// Enum Flame.ECloudMatchLootboxType
// NumValues: 0x0009
enum class ECloudMatchLootboxType : uint8
{
	SpeedBox                                 = 0,
	AssaultBox                               = 1,
	SniperBox                                = 2,
	HeavyBox                                 = 3,
	MixedBox                                 = 4,
	Consumable                               = 5,
	Tool                                     = 6,
	Score                                    = 7,
	ECloudMatchLootboxType_MAX               = 8,
};

// Enum Flame.ECloudUserMatchStatisticsPeriod
// NumValues: 0x0004
enum class ECloudUserMatchStatisticsPeriod : uint8
{
	Today                                    = 0,
	Season                                   = 1,
	Overall                                  = 2,
	ECloudUserMatchStatisticsPeriod_MAX      = 3,
};

// Enum Flame.ECloudDeathCauseType
// NumValues: 0x000D
enum class ECloudDeathCauseType : uint8
{
	Unknown                                  = 0,
	Bullet                                   = 1,
	Grenade                                  = 2,
	Melee                                    = 3,
	Radiation                                = 4,
	Fall                                     = 5,
	Consumable                               = 6,
	Collision                                = 7,
	Cheat                                    = 8,
	Disconnected                             = 9,
	Tool                                     = 10,
	Environment                              = 11,
	ECloudDeathCauseType_MAX                 = 12,
};

// Enum Flame.ECloudMatchEndType
// NumValues: 0x0005
enum class ECloudMatchEndType : uint8
{
	None                                     = 0,
	Victory                                  = 1,
	Death                                    = 2,
	Retreat                                  = 3,
	ECloudMatchEndType_MAX                   = 4,
};

// Enum Flame.EGetAllRawDataOrder
// NumValues: 0x0004
enum class EGetAllRawDataOrder : uint8
{
	None                                     = 0,
	Ascending                                = 1,
	Descending                               = 2,
	EGetAllRawDataOrder_MAX                  = 3,
};

// Enum Flame.ECloudUserCounterOperation
// NumValues: 0x0005
enum class ECloudUserCounterOperation : uint8
{
	None                                     = 0,
	Increment                                = 1,
	Set                                      = 2,
	Clear                                    = 3,
	ECloudUserCounterOperation_MAX           = 4,
};

// Enum Flame.ESublevelTheme
// NumValues: 0x0004
enum class ESublevelTheme : uint8
{
	None                                     = 0,
	Christmas                                = 1,
	Halloween                                = 2,
	ESublevelTheme_MAX                       = 3,
};

// Enum Flame.StatType
// NumValues: 0x001B
enum class EStatType : uint8
{
	SkillRating                              = 0,
	MatchesPlayed                            = 1,
	MatchesSurvived                          = 2,
	SurvivalRate                             = 3,
	AirdropsRetrieved                        = 4,
	Kills                                    = 5,
	KillDeathRatio                           = 6,
	KillsPerMatch                            = 7,
	TotalLootValue                           = 8,
	AverageLootValue                         = 9,
	Headshots                                = 10,
	LongestSecondsInMatch                    = 11,
	HpHealed                                 = 12,
	BecameThreat                             = 13,
	KilledThreat                             = 14,
	FireAccuracy                             = 15,
	ConsumableKills                          = 16,
	HighestScore                             = 17,
	TotalScore                               = 18,
	MatchesWon                               = 19,
	MatchesWonPercentage                     = 20,
	TotalDamageDone                          = 21,
	AverageDamage                            = 22,
	AverageAccuracy                          = 23,
	FlagsTaken                               = 24,
	AverageScore                             = 25,
	StatType_MAX                             = 26,
};

// Enum Flame.ECloudWipeSlotState
// NumValues: 0x0005
enum class ECloudWipeSlotState : uint8
{
	Claimed                                  = 0,
	JustClaimed                              = 1,
	Promised                                 = 2,
	Unknown                                  = 3,
	ECloudWipeSlotState_MAX                  = 4,
};

// Enum Flame.ELevelCookSettings
// NumValues: 0x0004
enum class ELevelCookSettings : uint8
{
	Never                                    = 0,
	DevOnly                                  = 1,
	Always                                   = 2,
	ELevelCookSettings_MAX                   = 3,
};

// Enum Flame.EMapMarkerType
// NumValues: 0x000E
enum class EMapMarkerType : uint8
{
	Default                                  = 0,
	Transparent                              = 1,
	Player                                   = 2,
	Teammate                                 = 3,
	AnotherPlayer                            = 4,
	Threat                                   = 5,
	Teamkiller                               = 6,
	Exit                                     = 7,
	POI                                      = 8,
	Radiation                                = 9,
	CustomMarker                             = 10,
	Airdrop                                  = 11,
	EncounterEvent                           = 12,
	EMapMarkerType_MAX                       = 13,
};

// Enum Flame.EUILayer
// NumValues: 0x0007
enum class EUILayer : uint8
{
	HUD                                      = 0,
	CommonScreen                             = 1,
	ModalWidget                              = 2,
	Notifications                            = 3,
	MatchmakingStatus                        = 4,
	Topmost                                  = 5,
	EUILayer_MAX                             = 6,
};

// Enum Flame.EShelterMainTab
// NumValues: 0x000F
enum class EShelterMainTab : uint8
{
	Play                                     = 0,
	Equip                                    = 1,
	BuildHome                                = 2,
	LootBoxes                                = 3,
	BattlePass                               = 4,
	Customize                                = 5,
	Leaderboards                             = 6,
	Shop                                     = 7,
	Player                                   = 8,
	Mementos                                 = 9,
	Achievements                             = 10,
	Challenges                               = 11,
	Collections                              = 12,
	Count                                    = 13,
	EShelterMainTab_MAX                      = 14,
};

// Enum Flame.EMessageBoxType
// NumValues: 0x0004
enum class EMessageBoxType : uint8
{
	GotIt                                    = 0,
	ConfirmCancel                            = 1,
	YesNo                                    = 2,
	EMessageBoxType_MAX                      = 3,
};

// Enum Flame.ENotificationExpirationPolicy
// NumValues: 0x0004
enum class ENotificationExpirationPolicy : uint8
{
	LoadMap                                  = 0,
	AppShutDown                              = 1,
	Never                                    = 2,
	ENotificationExpirationPolicy_MAX        = 3,
};

// Enum Flame.ENotificationChannel
// NumValues: 0x0006
enum class ENotificationChannel : uint8
{
	System                                   = 0,
	Group                                    = 1,
	Shelter                                  = 2,
	Encounter                                = 3,
	Challenges                               = 4,
	ENotificationChannel_MAX                 = 5,
};

// Enum Flame.ETextNotificationType
// NumValues: 0x0004
enum class ETextNotificationType : uint8
{
	Information                              = 0,
	Warning                                  = 1,
	Error                                    = 2,
	ETextNotificationType_MAX                = 3,
};

// Enum Flame.EInputRule
// NumValues: 0x0005
enum class EInputRule : uint8
{
	Undefined                                = 0,
	Concurrent                               = 1,
	Interrupt                                = 2,
	Blocked                                  = 3,
	EInputRule_MAX                           = 4,
};

// Enum Flame.AAIPatrolPathType
// NumValues: 0x0003
enum class EAAIPatrolPathType : uint8
{
	Loop                                     = 0,
	OneDirectionAndStop                      = 1,
	AAIPatrolPathType_MAX                    = 2,
};

// Enum Flame.EAnimActionState
// NumValues: 0x0004
enum class EAnimActionState : uint32
{
	Forward                                  = 0,
	Backward                                 = 1,
	Stop                                     = 2,
	EAnimActionState_MAX                     = 3,
};

// Enum Flame.ESoundTextureType
// NumValues: 0x0006
enum class ESoundTextureType : uint8
{
	Cloth                                    = 0,
	Army                                     = 1,
	Leather                                  = 2,
	Nylon                                    = 3,
	Rubber                                   = 4,
	ESoundTextureType_MAX                    = 5,
};

// Enum Flame.EVoiceModifierType
// NumValues: 0x0004
enum class EVoiceModifierType : uint8
{
	None                                     = 0,
	ClothMask                                = 1,
	GasMask                                  = 2,
	EVoiceModifierType_MAX                   = 3,
};

// Enum Flame.EBodyColliderType
// NumValues: 0x0003
enum class EBodyColliderType : uint32
{
	Box                                      = 0,
	Capsule                                  = 1,
	EBodyColliderType_MAX                    = 2,
};

// Enum Flame.EAimAndShootBehaviorType
// NumValues: 0x0004
enum class EAimAndShootBehaviorType : uint8
{
	SingleShot                               = 0,
	BurstShot                                = 1,
	Waiting                                  = 2,
	EAimAndShootBehaviorType_MAX             = 3,
};

// Enum Flame.ECameraSpeedDependentType
// NumValues: 0x0004
enum class ECameraSpeedDependentType : uint8
{
	Idle                                     = 0,
	Walking                                  = 1,
	Running                                  = 2,
	ECameraSpeedDependentType_MAX            = 3,
};

// Enum Flame.ECanAimState
// NumValues: 0x0004
enum class ECanAimState : uint8
{
	ECAS_Cannot                              = 0,
	ECAS_CanOnlyMelee                        = 1,
	ECAS_CanAim                              = 2,
	ECAS_MAX                                 = 3,
};

// Enum Flame.ECloudCraftingBoosterPaymentType
// NumValues: 0x0004
enum class ECloudCraftingBoosterPaymentType : uint8
{
	None                                     = 0,
	HardCurrency                             = 1,
	Ticket                                   = 2,
	ECloudCraftingBoosterPaymentType_MAX     = 3,
};

// Enum Flame.ECloudCraftingResult
// NumValues: 0x0003
enum class ECloudCraftingResult : uint8
{
	Crafted                                  = 0,
	Queued                                   = 1,
	ECloudCraftingResult_MAX                 = 2,
};

// Enum Flame.ECloudCraftingPaymentType
// NumValues: 0x0003
enum class ECloudCraftingPaymentType : uint8
{
	Material                                 = 0,
	Parts                                    = 1,
	ECloudCraftingPaymentType_MAX            = 2,
};

// Enum Flame.ECloudDataPackCompressionType
// NumValues: 0x0003
enum class ECloudDataPackCompressionType : uint8
{
	Uncompressed                             = 0,
	Compressed                               = 1,
	ECloudDataPackCompressionType_MAX        = 2,
};

// Enum Flame.ECloudDataPackTypeType
// NumValues: 0x0003
enum class ECloudDataPackTypeType : uint8
{
	DownloadPack                             = 0,
	CachedPack                               = 1,
	ECloudDataPackTypeType_MAX               = 2,
};

// Enum Flame.ECloudDataDownloadContainerType
// NumValues: 0x0003
enum class ECloudDataDownloadContainerType : uint8
{
	JsonItems                                = 0,
	PackedItems                              = 1,
	ECloudDataDownloadContainerType_MAX      = 2,
};

// Enum Flame.ECloudDataDownloadItemType
// NumValues: 0x0003
enum class ECloudDataDownloadItemType : uint8
{
	CloudModeDownload                        = 0,
	AlwaysDownload                           = 1,
	ECloudDataDownloadItemType_MAX           = 2,
};

// Enum Flame.ECloudHeartBeatServerType
// NumValues: 0x0004
enum class ECloudHeartBeatServerType : uint8
{
	Unknown                                  = 0,
	Virtual                                  = 1,
	BareMetal                                = 2,
	ECloudHeartBeatServerType_MAX            = 3,
};

// Enum Flame.ENewsFrequency
// NumValues: 0x0006
enum class ENewsFrequency : uint8
{
	None                                     = 0,
	Once                                     = 1,
	Day                                      = 2,
	Session                                  = 3,
	ShelterEntry                             = 4,
	ENewsFrequency_MAX                       = 5,
};

// Enum Flame.ECloudErrorLevelSettings
// NumValues: 0x0004
enum class ECloudErrorLevelSettings : uint8
{
	LogoutPlayerOnRequestError               = 0,
	ReportOnRequestError                     = 1,
	SkipOnRequestError                       = 2,
	ECloudErrorLevelSettings_MAX             = 3,
};

// Enum Flame.ECloudManagerLogoutReason
// NumValues: 0x000A
enum class ECloudManagerLogoutReason : uint8
{
	None                                     = 0,
	LoginToCloud                             = 1,
	DeInit                                   = 2,
	TickIsLogoutRequested                    = 3,
	OnAppSuspended                           = 4,
	OnAppResumed                             = 5,
	OnAppTerminate                           = 6,
	OnUserLoginChanged                       = 7,
	OnLoginUIClosed                          = 8,
	ECloudManagerLogoutReason_MAX            = 9,
};

// Enum Flame.ECompoundPanelPart
// NumValues: 0x000B
enum class ECompoundPanelPart : uint8
{
	ECPPart_TopLeft                          = 0,
	ECPPart_Top                              = 1,
	ECPPart_TopRight                         = 2,
	ECPPart_Left                             = 3,
	ECPPart_Center                           = 4,
	ECPPart_Right                            = 5,
	ECPPart_BottomLeft                       = 6,
	ECPPart_Bottom                           = 7,
	ECPPart_BottomRight                      = 8,
	ECPPart_Count                            = 9,
	ECPPart_MAX                              = 10,
};

// Enum Flame.ECanPlayOnline
// NumValues: 0x0004
enum class ECanPlayOnline : uint8
{
	Unknown                                  = 0,
	No                                       = 1,
	Yes                                      = 2,
	ECanPlayOnline_MAX                       = 3,
};

// Enum Flame.ECountOfMode
// NumValues: 0x0003
enum class ECountOfMode : uint8
{
	IsA                                      = 0,
	IsChildOf                                = 1,
	ECountOfMode_MAX                         = 2,
};

// Enum Flame.EEventHandlerMode
// NumValues: 0x0003
enum class EEventHandlerMode : uint8
{
	BroadcastDelegates                       = 0,
	SkipDelegates                            = 1,
	EEventHandlerMode_MAX                    = 2,
};

// Enum Flame.ECraftingQueueType
// NumValues: 0x0006
enum class ECraftingQueueType : uint8
{
	Unknown                                  = 0,
	Weapon                                   = 1,
	Consumable                               = 2,
	Ammo                                     = 3,
	Count                                    = 4,
	ECraftingQueueType_MAX                   = 5,
};

// Enum Flame.EInputFilterResult
// NumValues: 0x0003
enum class EInputFilterResult : uint8
{
	ConditionsWereHit                        = 0,
	InputWontBeAffected                      = 1,
	EInputFilterResult_MAX                   = 2,
};

// Enum Flame.EItemFilter
// NumValues: 0x000B
enum class EItemFilter : uint8
{
	Weapons                                  = 0,
	Ammo                                     = 1,
	Consumables                              = 2,
	Resources                                = 3,
	WeaponParts                              = 4,
	WeaponPlans                              = 5,
	ConsumableParts                          = 6,
	ConsumablePlans                          = 7,
	ObjectiveItems                           = 8,
	Collectibles                             = 9,
	EItemFilter_MAX                          = 10,
};

// Enum Flame.EHairUnderHeadgearMode
// NumValues: 0x0007
enum class EHairUnderHeadgearMode : uint32
{
	Default                                  = 0,
	PonyTailFull                             = 1,
	PonyTailLower                            = 2,
	PonyTailUpper                            = 3,
	UnderHat                                 = 4,
	Count                                    = 5,
	EHairUnderHeadgearMode_MAX               = 6,
};

// Enum Flame.ECloudDataStructuresState
// NumValues: 0x0004
enum class ECloudDataStructuresState : uint8
{
	NotInitialized                           = 0,
	AllReady                                 = 1,
	SomeErrors                               = 2,
	ECloudDataStructuresState_MAX            = 3,
};

// Enum Flame.ECloudStructureTypes
// NumValues: 0x0007
enum class ECloudStructureTypes : uint8
{
	ImprovementClasses                       = 0,
	ImprovementSlots                         = 1,
	ImprovementLevels                        = 2,
	ImprovementsPerLevel                     = 3,
	Configuration                            = 4,
	CustomizationDefaults                    = 5,
	ECloudStructureTypes_MAX                 = 6,
};

// Enum Flame.EDataProviderTableState
// NumValues: 0x0005
enum class EDataProviderTableState : uint8
{
	Unknown                                  = 0,
	Unloaded                                 = 1,
	Ready                                    = 2,
	Failed                                   = 3,
	EDataProviderTableState_MAX              = 4,
};

// Enum Flame.EDefaultInventoryLoadMode
// NumValues: 0x0004
enum class EDefaultInventoryLoadMode : uint8
{
	LoadFromCloud                            = 0,
	LoadFromDefaults                         = 1,
	LoadEmpty                                = 2,
	EDefaultInventoryLoadMode_MAX            = 3,
};

// Enum Flame.EDoorState
// NumValues: 0x0005
enum class EDoorState : uint8
{
	Closed                                   = 0,
	OpenForward                              = 1,
	OpenBackward                             = 2,
	Broken                                   = 3,
	EDoorState_MAX                           = 4,
};

// Enum Flame.EDoubleDoorType
// NumValues: 0x0004
enum class EDoubleDoorType : uint8
{
	OpenBoth                                 = 0,
	OpenLeftOnly                             = 1,
	OpenRightOnly                            = 2,
	EDoubleDoorType_MAX                      = 3,
};

// Enum Flame.EStorageType
// NumValues: 0x0006
enum class EStorageType : uint8
{
	Loot                                     = 0,
	Stash                                    = 1,
	Corpse                                   = 2,
	GenericStorage                           = 3,
	Default                                  = 4,
	EStorageType_MAX                         = 5,
};

// Enum Flame.EAnalyticsFileType
// NumValues: 0x0003
enum class EAnalyticsFileType : uint8
{
	CSV                                      = 0,
	TXT                                      = 1,
	EAnalyticsFileType_MAX                   = 2,
};

// Enum Flame.EAnalyticsFile
// NumValues: 0x0003
enum class EAnalyticsFile : uint8
{
	WeaponOverhaul                           = 0,
	Other                                    = 1,
	EAnalyticsFile_MAX                       = 2,
};

// Enum Flame.EAnimWeaponType
// NumValues: 0x0007
enum class EAnimWeaponType : uint8
{
	WT_DEFAULT                               = 0,
	WT_UNARMED                               = 1,
	WT_PISTOL                                = 2,
	WT_RIFLE                                 = 3,
	WT_MACHINEGUN                            = 4,
	WT_THROWABLE                             = 5,
	WT_MAX                                   = 6,
};

// Enum Flame.EFullBodyMode
// NumValues: 0x0006
enum class EFullBodyMode : uint8
{
	FB_Regular                               = 0,
	FB_Ladder                                = 1,
	FB_FPV                                   = 2,
	FB_Gesture                               = 3,
	FB_Interaction                           = 4,
	FB_MAX                                   = 5,
};

// Enum Flame.ECardinalDirection
// NumValues: 0x0005
enum class ECardinalDirection : uint8
{
	CD_Forward                               = 0,
	CD_Left                                  = 1,
	CD_Right                                 = 2,
	CD_Backward                              = 3,
	CD_MAX                                   = 4,
};

// Enum Flame.ECompoundStates
// NumValues: 0x0004
enum class ECompoundStates : uint8
{
	CS_LOOP                                  = 0,
	CS_ACTION                                = 1,
	CS_END                                   = 2,
	CS_MAX                                   = 3,
};

// Enum Flame.EAnimInteractionType
// NumValues: 0x000D
enum class EAnimInteractionType : uint8
{
	EIT_NONE                                 = 0,
	EIT_AUTOMATIC                            = 1,
	EIT_LOOTABLE                             = 2,
	EIT_INTERACTABLE                         = 3,
	EIT_LINKEDLOOTONEARM                     = 4,
	EIT_LINKEDLOOTTWOARMS                    = 5,
	EIT_LINKEDLOOTTWOARMSWITHOUTUI           = 6,
	EIT_LINKEDINTERACT                       = 7,
	EIT_DOOR                                 = 8,
	EIT_AIRDROP                              = 9,
	EIT_BURIEDCACHE                          = 10,
	EIT_BARRED                               = 11,
	EIT_MAX                                  = 12,
};

// Enum Flame.EAnimInteraction
// NumValues: 0x0005
enum class EAnimInteraction : uint8
{
	EAI_NONE                                 = 0,
	EAI_ASSERT                               = 1,
	EAI_ONESHOT                              = 2,
	EAI_LINKED                               = 3,
	EAI_MAX                                  = 4,
};

// Enum Flame.ELocomotionType
// NumValues: 0x0004
enum class ELocomotionType : uint8
{
	ELT_WALK                                 = 0,
	ELT_RUN                                  = 1,
	ELT_SPRINT                               = 2,
	ELT_MAX                                  = 3,
};

// Enum Flame.EAimHands
// NumValues: 0x0004
enum class EAimHands : uint8
{
	EAH_SHOULDER                             = 0,
	EAH_BLOCKED                              = 1,
	EAH_HIP                                  = 2,
	EAH_MAX                                  = 3,
};

// Enum Flame.EAnimActionType
// NumValues: 0x0008
enum class EAnimActionType : uint8
{
	EAAT_GESTURE                             = 0,
	EAAT_INTERACTION                         = 1,
	EAAT_EQUIP                               = 2,
	EAAT_RELOAD                              = 3,
	EAAT_CHAMBER                             = 4,
	EAAT_CONSUMABLE                          = 5,
	EAAT_NONE                                = 6,
	EAAT_MAX                                 = 7,
};

// Enum Flame.ERotationType
// NumValues: 0x0006
enum class ERotationType : uint8
{
	ERT_FREE                                 = 0,
	ERT_CAMERAORIENT                         = 1,
	ERT_CAMERALOCKED                         = 2,
	ERT_DIRECTIONLOCKED                      = 3,
	ERT_CHARACTERLOCKED                      = 4,
	ERT_MAX                                  = 5,
};

// Enum Flame.ELowerBodyState
// NumValues: 0x0006
enum class ELowerBodyState : uint8
{
	Locomotion                               = 0,
	Adjust                                   = 1,
	Idle                                     = 2,
	Vertical                                 = 3,
	Special                                  = 4,
	ELowerBodyState_MAX                      = 5,
};

// Enum Flame.EUpperBodyState
// NumValues: 0x0004
enum class EUpperBodyState : uint8
{
	Basic                                    = 0,
	SwitchingWeapon                          = 1,
	WeaponManipulation                       = 2,
	EUpperBodyState_MAX                      = 3,
};

// Enum Flame.EDamageType
// NumValues: 0x000C
enum class EDamageType : uint8
{
	EDT_Unknown                              = 0,
	EDT_Bullet                               = 1,
	EDT_Grenade                              = 2,
	EDT_Melee                                = 3,
	EDT_Radiation                            = 4,
	EDT_Fall                                 = 5,
	EDT_Consumable                           = 6,
	EDT_Collision                            = 7,
	EDT_Cheat                                = 8,
	EDT_Tool                                 = 9,
	EDT_Environment                          = 10,
	EDT_MAX                                  = 11,
};

// Enum Flame.ENintendoSwitchOperationMode
// NumValues: 0x0004
enum class ENintendoSwitchOperationMode : uint8
{
	Default                                  = 0,
	Handheld                                 = 1,
	Console                                  = 2,
	ENintendoSwitchOperationMode_MAX         = 3,
};

// Enum Flame.ESpeedMode
// NumValues: 0x0005
enum class ESpeedMode : uint8
{
	Idle                                     = 0,
	Walk                                     = 1,
	Run                                      = 2,
	Sprint                                   = 3,
	ESpeedMode_MAX                           = 4,
};

// Enum Flame.EHUDElement
// NumValues: 0x000A
enum class EHUDElement : uint8
{
	Zero                                     = 0,
	Healthbar                                = 1,
	WeaponInfo                               = 2,
	Compass                                  = 4,
	GameInfo                                 = 8,
	Crosshair                                = 16,
	GameplayIndicators                       = 32,
	ConsumableIndicators                     = 64,
	ControlsInfo                             = 128,
	EHUDElement_MAX                          = 129,
};

// Enum Flame.ELadderStepLimbIndex
// NumValues: 0x0003
enum class ELadderStepLimbIndex : uint8
{
	Arm                                      = 0,
	Leg                                      = 1,
	ELadderStepLimbIndex_MAX                 = 2,
};

// Enum Flame.EProneStepLimbIndex
// NumValues: 0x0005
enum class EProneStepLimbIndex : uint8
{
	LeftArm                                  = 0,
	RightArm                                 = 1,
	LeftLeg                                  = 2,
	RightLeg                                 = 3,
	EProneStepLimbIndex_MAX                  = 4,
};

// Enum Flame.EFootStepMovementType
// NumValues: 0x0004
enum class EFootStepMovementType : uint8
{
	Walk                                     = 0,
	Jump                                     = 1,
	Landing                                  = 2,
	EFootStepMovementType_MAX                = 3,
};

// Enum Flame.EFootStepLegIndex
// NumValues: 0x0003
enum class EFootStepLegIndex : uint8
{
	Left                                     = 0,
	Right                                    = 1,
	EFootStepLegIndex_MAX                    = 2,
};

// Enum Flame.GameControlSelectionType
// NumValues: 0x0005
enum class EGameControlSelectionType : uint8
{
	Random                                   = 0,
	RandomByRating                           = 1,
	MinRating                                = 2,
	MaxRating                                = 3,
	GameControlSelectionType_MAX             = 4,
};

// Enum Flame.ESellingPointType
// NumValues: 0x0006
enum class ESellingPointType : uint8
{
	Default                                  = 0,
	WeaponSkin                               = 1,
	Customization                            = 2,
	Currency                                 = 3,
	CraftingPlan                             = 4,
	ESellingPointType_MAX                    = 5,
};

// Enum Flame.EHealthType
// NumValues: 0x0003
enum class EHealthType : uint8
{
	EHT_TrueHealth                           = 0,
	EHT_TemporaryHealth                      = 1,
	EHT_MAX                                  = 2,
};

// Enum Flame.EHealthStatus
// NumValues: 0x0009
enum class EHealthStatus : uint8
{
	EHS_Healthy                              = 0,
	EHS_Wounded                              = 1,
	EHS_HeavilyWounded                       = 2,
	EHS_AlmostDead                           = 3,
	EHS_Dead                                 = 4,
	EHS_Down                                 = 5,
	EHS_Incapacitated                        = 6,
	EHS_Stunned                              = 7,
	EHS_MAX                                  = 8,
};

// Enum Flame.ECharacterHitZone
// NumValues: 0x0005
enum class ECharacterHitZone : uint8
{
	Head                                     = 0,
	Stomach                                  = 1,
	Chest                                    = 2,
	ArmsLegs                                 = 3,
	ECharacterHitZone_MAX                    = 4,
};

// Enum Flame.EAnimationNotifyIKViewType
// NumValues: 0x0004
enum class EAnimationNotifyIKViewType : uint8
{
	View1POnly                               = 0,
	View3POnly                               = 1,
	ViewAll                                  = 2,
	EAnimationNotifyIKViewType_MAX           = 3,
};

// Enum Flame.EHumanArchetypeBodyType
// NumValues: 0x0003
enum class EHumanArchetypeBodyType : uint8
{
	Man                                      = 0,
	Woman                                    = 1,
	EHumanArchetypeBodyType_MAX              = 2,
};

// Enum Flame.ECanChangeStanceResult
// NumValues: 0x0005
enum class ECanChangeStanceResult : uint8
{
	ECCSR_Success                            = 0,
	ECCSR_Denied                             = 1,
	ECCSR_InvalidProneSpace                  = 2,
	ECCSR_NoCapsuleSpace                     = 3,
	ECCSR_MAX                                = 4,
};

// Enum Flame.EBoostImprovementMode
// NumValues: 0x0003
enum class EBoostImprovementMode : uint8
{
	BoostOnly                                = 0,
	BuildAndBoost                            = 1,
	EBoostImprovementMode_MAX                = 2,
};

// Enum Flame.ECloudState
// NumValues: 0x0003
enum class ECloudState : uint8
{
	Ready                                    = 0,
	WaitingForRequest                        = 1,
	ECloudState_MAX                          = 2,
};

// Enum Flame.EChallengeDifficulty
// NumValues: 0x0005
enum class EChallengeDifficulty : uint8
{
	None                                     = 0,
	Low                                      = 1,
	Medium                                   = 2,
	High                                     = 3,
	EChallengeDifficulty_MAX                 = 4,
};

// Enum Flame.EChallengeCategory
// NumValues: 0x0008
enum class EChallengeCategory : uint8
{
	None                                     = 0,
	Story                                    = 1,
	Combat                                   = 2,
	Loot                                     = 3,
	Crafting                                 = 4,
	Encounter                                = 5,
	Other                                    = 6,
	EChallengeCategory_MAX                   = 7,
};

// Enum Flame.EShelterImprovementDescription
// NumValues: 0x0003
enum class EShelterImprovementDescription : uint8
{
	CurrentLevel                             = 0,
	NextLevel                                = 1,
	EShelterImprovementDescription_MAX       = 2,
};

// Enum Flame.EImprovementType
// NumValues: 0x0005
enum class EImprovementType : uint8
{
	Generator                                = 0,
	Mutator                                  = 1,
	Special                                  = 2,
	Unknown                                  = 3,
	EImprovementType_MAX                     = 4,
};

// Enum Flame.EInteractionAngleLimit
// NumValues: 0x0008
enum class EInteractionAngleLimit : uint8
{
	NoLimit                                  = 0,
	ByAxisX                                  = 1,
	ByNegativeAxisX                          = 2,
	ByAxisY                                  = 3,
	ByNegativeAxisY                          = 4,
	ByAxisZ                                  = 5,
	ByNegativeAxisZ                          = 6,
	EInteractionAngleLimit_MAX               = 7,
};

// Enum Flame.EBuildingOverrideBehavior
// NumValues: 0x0005
enum class EBuildingOverrideBehavior : uint8
{
	BOB_NoChange                             = 0,
	BOB_Lock                                 = 1,
	BOB_Block                                = 2,
	BOB_Open                                 = 3,
	BOB_MAX                                  = 4,
};

// Enum Flame.EInteriorSpawnMethod
// NumValues: 0x0004
enum class EInteriorSpawnMethod : uint8
{
	ISM_UseStaticMeshComponents              = 0,
	ISM_UseInstancedStaticMeshComponents     = 1,
	ISM_UseInstancedStaticMeshComponentsOverThreshold = 2,
	ISM_MAX                                  = 3,
};

// Enum Flame.EInteriorSpawnBehavior
// NumValues: 0x0004
enum class EInteriorSpawnBehavior : uint8
{
	Zero                                     = 0,
	Interior                                 = 1,
	Base                                     = 2,
	EInteriorSpawnBehavior_MAX               = 3,
};

// Enum Flame.ECustomzationChangedMode
// NumValues: 0x0003
enum class ECustomzationChangedMode : uint8
{
	ProcessChangesToCloud                    = 0,
	TemporaryChangeOnlyForTests              = 1,
	ECustomzationChangedMode_MAX             = 2,
};

// Enum Flame.ECustomizationVisibility
// NumValues: 0x0004
enum class ECustomizationVisibility : uint8
{
	Default                                  = 0,
	Show                                     = 1,
	Hide                                     = 2,
	ECustomizationVisibility_MAX             = 3,
};

// Enum Flame.EInvalidResultReason
// NumValues: 0x0005
enum class EInvalidResultReason : uint8
{
	None                                     = 0,
	InventoryIsFull                          = 1,
	LimitForItemReached                      = 2,
	Other                                    = 3,
	EInvalidResultReason_MAX                 = 4,
};

// Enum Flame.EInventoryView
// NumValues: 0x000A
enum class EInventoryView : uint8
{
	All                                      = 0,
	Weapons                                  = 1,
	Ammo                                     = 2,
	Consumables                              = 3,
	Crafting                                 = 4,
	Loot                                     = 5,
	LootSimple                               = 6,
	Loadout                                  = 7,
	Default                                  = 8,
	EInventoryView_MAX                       = 9,
};

// Enum Flame.EInventoryOperationMode
// NumValues: 0x000A
enum class EInventoryOperationMode : uint8
{
	TakeOne                                  = 0,
	TakeWholeSlot                            = 1,
	TakeAllLoot                              = 2,
	FillSlot                                 = 3,
	DiscardOne                               = 4,
	DiscardSlot                              = 5,
	DiscardAndReplace                        = 6,
	Swap                                     = 7,
	Default                                  = 8,
	EInventoryOperationMode_MAX              = 9,
};

// Enum Flame.EAttachedContainerType
// NumValues: 0x0004
enum class EAttachedContainerType : uint8
{
	Unknown                                  = 0,
	LootInGame                               = 1,
	Stash                                    = 2,
	EAttachedContainerType_MAX               = 3,
};

// Enum Flame.EItemOrigin
// NumValues: 0x0003
enum class EItemOrigin : uint8
{
	Default                                  = 0,
	AddedByCheat                             = 1,
	EItemOrigin_MAX                          = 2,
};

// Enum Flame.EItemUseMode
// NumValues: 0x0005
enum class EItemUseMode : uint8
{
	Default                                  = 0,
	Aiming                                   = 1,
	PreparingOnSelf                          = 2,
	PreparingOnTarget                        = 3,
	EItemUseMode_MAX                         = 4,
};

// Enum Flame.EJsonType
// NumValues: 0x0008
enum class EJsonType : uint8
{
	None                                     = 0,
	Null                                     = 1,
	String                                   = 2,
	Number                                   = 3,
	Boolean                                  = 4,
	Array                                    = 5,
	Object                                   = 6,
	EJsonType_MAX                            = 7,
};

// Enum Flame.ELeaderboardHandlerState
// NumValues: 0x0005
enum class ELeaderboardHandlerState : uint8
{
	NotStarted                               = 0,
	InProgress                               = 1,
	Done                                     = 2,
	Failed                                   = 3,
	ELeaderboardHandlerState_MAX             = 4,
};

// Enum Flame.EBoosterTypes
// NumValues: 0x000D
enum class EBoosterTypes : uint8
{
	Loot                                     = 0,
	Crate                                    = 1,
	Insurance                                = 2,
	FreeInsurance                            = 3,
	Shootout                                 = 4,
	Ticket                                   = 5,
	InstantBreakLock                         = 6,
	ScoreTeam1                               = 7,
	ScoreTeam2                               = 8,
	BoosterTicket_DoubleXP                   = 9,
	BoosterTicket_DoubleParts                = 10,
	BoosterTicket_DoubleResources            = 11,
	EBoosterTypes_MAX                        = 12,
};

// Enum Flame.EMatchmakingStatusState
// NumValues: 0x0005
enum class EMatchmakingStatusState : uint8
{
	Hidden                                   = 0,
	SearchInProgress                         = 1,
	Information                              = 2,
	Warning                                  = 3,
	EMatchmakingStatusState_MAX              = 4,
};

// Enum Flame.MirrorDir
// NumValues: 0x000E
enum class EMirrorDir : uint8
{
	None                                     = 0,
	X_Axis                                   = 1,
	Y_Axis                                   = 2,
	Z_Axis                                   = 3,
	XY_Axis                                  = 4,
	YZ_Axis                                  = 5,
	XZ_Axis                                  = 6,
	NegX_Axis                                = 7,
	NegY_Axis                                = 8,
	NegZ_Axis                                = 9,
	NegXY_Axis                               = 10,
	NegYZ_Axis                               = 11,
	NegXZ_Axis                               = 12,
	MirrorDir_MAX                            = 13,
};

// Enum Flame.EMovementSpeedType
// NumValues: 0x0007
enum class EMovementSpeedType : uint8
{
	ADS3PVWalk                               = 0,
	ADS1PVWalk                               = 1,
	Walk                                     = 2,
	ADS3PVRun                                = 3,
	Run                                      = 4,
	Sprint                                   = 5,
	EMovementSpeedType_MAX                   = 6,
};

// Enum Flame.EPickerDirection
// NumValues: 0x0003
enum class EPickerDirection : uint8
{
	Horizontal                               = 0,
	Vertical                                 = 1,
	EPickerDirection_MAX                     = 2,
};

// Enum Flame.EOptionsElementValuePreference
// NumValues: 0x0007
enum class EOptionsElementValuePreference : uint8
{
	OEVP_Default                             = 0,
	OEVP_Float                               = 1,
	OEVP_Bool                                = 2,
	OEVP_Int                                 = 3,
	OEVP_Name                                = 4,
	OEVP_String                              = 5,
	OEVP_MAX                                 = 6,
};

// Enum Flame.CommandType
// NumValues: 0x0004
enum class ECommandType : uint8
{
	JustScreenshot                           = 0,
	JustText                                 = 1,
	ScreenshotAndText                        = 2,
	CommandType_MAX                          = 3,
};

// Enum Flame.EPlayerPresence
// NumValues: 0x0007
enum class EPlayerPresence : uint8
{
	None                                     = 0,
	Unknown                                  = 1,
	Offline                                  = 2,
	Online                                   = 3,
	InShelter                                = 4,
	InMatch                                  = 5,
	EPlayerPresence_MAX                      = 6,
};

// Enum Flame.ERiverFlowDirection
// NumValues: 0x0005
enum class ERiverFlowDirection : uint8
{
	UPositive                                = 0,
	UNegative                                = 1,
	VPositive                                = 2,
	VNegative                                = 3,
	ERiverFlowDirection_MAX                  = 4,
};

// Enum Flame.ESelectionWheelType
// NumValues: 0x0006
enum class ESelectionWheelType : uint8
{
	Type1                                    = 0,
	Type2                                    = 1,
	Type3                                    = 2,
	Type4                                    = 3,
	Type5                                    = 4,
	ESelectionWheelType_MAX                  = 5,
};

// Enum Flame.ESettingsProfilesTypes
// NumValues: 0x0012
enum class ESettingsProfilesTypes : uint8
{
	Development                              = 0,
	Development2                             = 1,
	DevelopmentQA                            = 2,
	Localhost                                = 3,
	Staging                                  = 4,
	External                                 = 5,
	Production                               = 6,
	Production2                              = 7,
	StableQA                                 = 8,
	FeatureQA                                = 9,
	FeatureTest                              = 10,
	Feature2                                 = 11,
	Feature2Test                             = 12,
	Preprod                                  = 13,
	PreprodTest                              = 14,
	Preview                                  = 15,
	Unknown                                  = 16,
	ESettingsProfilesTypes_MAX               = 17,
};

// Enum Flame.EShelterSlotState
// NumValues: 0x0006
enum class EShelterSlotState : uint8
{
	Locked                                   = 0,
	Available                                = 1,
	ReadyToBuild                             = 2,
	BuildInProgress                          = 3,
	AlreadyBuilt                             = 4,
	EShelterSlotState_MAX                    = 5,
};

// Enum Flame.EBonusMode
// NumValues: 0x0003
enum class EBonusMode : uint8
{
	Use                                      = 0,
	IgnoreAll                                = 1,
	EBonusMode_MAX                           = 2,
};

// Enum Flame.EShelterMapTileState
// NumValues: 0x0004
enum class EShelterMapTileState : uint8
{
	Normal                                   = 0,
	TeamTooBig                               = 1,
	CrossplayOff                             = 2,
	EShelterMapTileState_MAX                 = 3,
};

// Enum Flame.EStashState
// NumValues: 0x0004
enum class EStashState : uint8
{
	InRootMenu                               = 0,
	InSubmenu                                = 1,
	InItemPreview                            = 2,
	EStashState_MAX                          = 3,
};

// Enum Flame.EStashSection
// NumValues: 0x000F
enum class EStashSection : uint8
{
	None                                     = 0,
	Owned                                    = 1,
	Craftable                                = 2,
	Unavailable                              = 3,
	Others                                   = 4,
	MachineGuns                              = 5,
	Pistols                                  = 6,
	Rifles                                   = 7,
	SubmachineGuns                           = 8,
	Knifes                                   = 9,
	AssaultRifles                            = 10,
	Shotguns                                 = 11,
	Compatible                               = 12,
	Available                                = 13,
	EStashSection_MAX                        = 14,
};

// Enum Flame.ESlotVisualBackground
// NumValues: 0x0004
enum class ESlotVisualBackground : uint8
{
	NotCompatible                            = 0,
	LoadoutCompatible                        = 1,
	StashCompatible                          = 2,
	ESlotVisualBackground_MAX                = 3,
};

// Enum Flame.ESpectateSearch
// NumValues: 0x0005
enum class ESpectateSearch : uint8
{
	ESS_First                                = 0,
	ESS_Param                                = 1,
	ESS_Previous                             = 2,
	ESS_Next                                 = 3,
	ESS_MAX                                  = 4,
};

// Enum Flame.ESpectateEvent
// NumValues: 0x0008
enum class ESpectateEvent : uint8
{
	EVE_OnDeath                              = 0,
	EVE_OnNext                               = 1,
	EVE_OnPrevious                           = 2,
	EVE_OnLeft                               = 3,
	EVE_OnSetTarget                          = 4,
	EVE_OnSetTransform                       = 5,
	EVE_OnRespawn                            = 6,
	EVE_Max                                  = 7,
};

// Enum Flame.EIKFootRootLocalAxis
// NumValues: 0x0005
enum class EIKFootRootLocalAxis : uint8
{
	NONE                                     = 0,
	X                                        = 1,
	Y                                        = 2,
	Z                                        = 3,
	EIKFootRootLocalAxis_MAX                 = 4,
};

// Enum Flame.EBreathType
// NumValues: 0x0008
enum class EBreathType : uint8
{
	NONE                                     = 0,
	In                                       = 1,
	Out                                      = 2,
	Cough                                    = 3,
	HoldStart                                = 4,
	HoldEnd                                  = 5,
	HoldEndForced                            = 6,
	EBreathType_MAX                          = 7,
};

// Enum Flame.EConsumptionSource
// NumValues: 0x0009
enum class EConsumptionSource : uint8
{
	None                                     = 0,
	Climbing                                 = 1,
	Vaulting                                 = 2,
	Sprinting                                = 3,
	HoldingBreath                            = 4,
	Jumping                                  = 5,
	StanceChange                             = 6,
	Trap                                     = 7,
	EConsumptionSource_MAX                   = 8,
};

// Enum Flame.ERequestMode
// NumValues: 0x0004
enum class ERequestMode : uint8
{
	Default                                  = 0,
	External                                 = 1,
	Internal                                 = 2,
	ERequestMode_MAX                         = 3,
};

// Enum Flame.EAimV2_AimInputSettings
// NumValues: 0x0004
enum class EAimV2_AimInputSettings : uint8
{
	AV2_AIS_Camera                           = 0,
	AV2_AIS_3ADS                             = 1,
	AV2_AIS_1ADS                             = 2,
	AV2_AIS_MAX                              = 3,
};

// Enum Flame.ETabControlType
// NumValues: 0x0003
enum class ETabControlType : uint8
{
	Main                                     = 0,
	Sub                                      = 1,
	ETabControlType_MAX                      = 2,
};

// Enum Flame.ETaskState
// NumValues: 0x0007
enum class ETaskState : uint8
{
	Unavailable                              = 0,
	Available                                = 1,
	Active                                   = 2,
	Hidden                                   = 3,
	Ready                                    = 4,
	Completed                                = 5,
	ETaskState_MAX                           = 6,
};

// Enum Flame.ETaskCategory
// NumValues: 0x0005
enum class ETaskCategory : uint8
{
	Story                                    = 0,
	Daily                                    = 1,
	Collectible                              = 2,
	Bounty                                   = 3,
	ETaskCategory_MAX                        = 4,
};

// Enum Flame.EExplosionEffects
// NumValues: 0x0006
enum class EExplosionEffects : uint8
{
	ENone                                    = 0,
	EDamage                                  = 1,
	EFlash                                   = 2,
	EStagger                                 = 3,
	EConcussion                              = 4,
	EExplosionEffects_MAX                    = 5,
};

// Enum Flame.ETutorialAIRole
// NumValues: 0x0004
enum class ETutorialAIRole : uint8
{
	ShortDistance                            = 0,
	MediumDistance                           = 1,
	FarDistance                              = 2,
	ETutorialAIRole_MAX                      = 3,
};

// Enum Flame.ETutorialAIID
// NumValues: 0x0007
enum class ETutorialAIID : uint8
{
	AI_A                                     = 0,
	AI_B                                     = 1,
	AI_C                                     = 2,
	AI_X                                     = 3,
	AI_Y                                     = 4,
	TOTAL_TUTORIAL_AI_COUNT                  = 5,
	ETutorialAIID_MAX                        = 6,
};

// Enum Flame.ETutorialAIState
// NumValues: 0x0006
enum class ETutorialAIState : uint8
{
	NotActive                                = 0,
	PursuitScene                             = 1,
	IdleShooting                             = 2,
	ScriptedScene                            = 3,
	BehaviourTreeControlledAI                = 4,
	ETutorialAIState_MAX                     = 5,
};

// Enum Flame.EWaterType
// NumValues: 0x0004
enum class EWaterType : uint8
{
	EWT_Spline                               = 0,
	EWT_Body                                 = 1,
	EWT_Ocean                                = 2,
	EWT_MAX                                  = 3,
};

// Enum Flame.ELoadWeaponMode
// NumValues: 0x0003
enum class ELoadWeaponMode : uint8
{
	LoadFromInventory                        = 0,
	CheatForceLoad                           = 1,
	ELoadWeaponMode_MAX                      = 2,
};

// Enum Flame.EMachineStatus
// NumValues: 0x0004
enum class EMachineStatus : uint8
{
	Ready                                    = 0,
	Busy                                     = 1,
	Fail                                     = 2,
	EMachineStatus_MAX                       = 3,
};

// Enum Flame.ERequestPriority
// NumValues: 0x0004
enum class ERequestPriority : uint8
{
	Enqueue                                  = 0,
	FinishCurrent                            = 1,
	CancelCurrent                            = 2,
	ERequestPriority_MAX                     = 3,
};

// Enum Flame.EOpticsType
// NumValues: 0x0005
enum class EOpticsType : uint8
{
	EOT_None                                 = 0,
	EOT_Ironsights                           = 1,
	EOT_Reflector                            = 2,
	EOT_Optics                               = 3,
	EOT_MAX                                  = 4,
};

// Enum Flame.EVersion
// NumValues: 0x0005
enum class EVersion : uint8
{
	EV_0_5                                   = 0,
	EV_0_6                                   = 1,
	EV_0_7                                   = 2,
	EV_1_0                                   = 3,
	EV_MAX                                   = 4,
};

// Enum Flame.EGripType
// NumValues: 0x0005
enum class EGripType : uint8
{
	EPT_Default                              = 0,
	EPT_Handguard                            = 1,
	EPT_Vertical                             = 2,
	EPT_Angled                               = 4,
	EPT_MAX                                  = 5,
};

// Enum Flame.ESpreadType
// NumValues: 0x0003
enum class ESpreadType : uint8
{
	EST_Random                               = 0,
	EST_Gaussian                             = 1,
	EST_MAX                                  = 2,
};

// Enum Flame.EWeaponFireType
// NumValues: 0x0005
enum class EWeaponFireType : uint8
{
	Semi                                     = 0,
	Burst                                    = 1,
	Auto                                     = 2,
	Melee                                    = 3,
	EWeaponFireType_MAX                      = 4,
};

// Enum Flame.EMuzzleType
// NumValues: 0x0004
enum class EMuzzleType : uint8
{
	EMT_Weapon                               = 0,
	EMT_Melee                                = 1,
	EMT_Default                              = 2,
	EMT_MAX                                  = 3,
};

// Enum Flame.ESkinParticleType
// NumValues: 0x0003
enum class ESkinParticleType : uint8
{
	None                                     = 0,
	Vigorous                                 = 1,
	ESkinParticleType_MAX                    = 2,
};

// Enum Flame.EStateTickMode
// NumValues: 0x0003
enum class EStateTickMode : uint8
{
	Process                                  = 0,
	Consumed                                 = 1,
	EStateTickMode_MAX                       = 2,
};

// Enum Flame.ECancelReloadState
// NumValues: 0x0006
enum class ECancelReloadState : uint8
{
	Default                                  = 0,
	WaitingForReleaseRT                      = 1,
	WaitingForCancel                         = 2,
	Canceling                                = 3,
	Canceled                                 = 4,
	ECancelReloadState_MAX                   = 5,
};

// Enum Flame.EReloadStateMode
// NumValues: 0x0004
enum class EReloadStateMode : uint8
{
	Default                                  = 0,
	FullReload                               = 1,
	SpecifiedReload                          = 2,
	EReloadStateMode_MAX                     = 3,
};

// Enum Flame.EWeaponInventoryType
// NumValues: 0x0004
enum class EWeaponInventoryType : uint8
{
	Default                                  = 0,
	PrimaryWeapon                            = 16,
	SecondaryWeapon                          = 32,
	EWeaponInventoryType_MAX                 = 33,
};

// Enum Flame.EWeaponType
// NumValues: 0x000B
enum class EWeaponType : uint8
{
	Default                                  = 0,
	SMG                                      = 17,
	Rifle                                    = 18,
	Shotgun                                  = 19,
	MG                                       = 20,
	GrenadeLauncher                          = 24,
	Knife                                    = 33,
	Pistol                                   = 34,
	Crossbow                                 = 35,
	Grenade                                  = 64,
	EWeaponType_MAX                          = 65,
};

// Enum Flame.EWindowBoardBehavior
// NumValues: 0x0004
enum class EWindowBoardBehavior : uint8
{
	WBB_KeepDefault                          = 0,
	WBB_ForcePlacement                       = 1,
	WBB_NoPlacement                          = 2,
	WBB_MAX                                  = 3,
};

// Enum Flame.EWoundsManagerAddMode
// NumValues: 0x0003
enum class EWoundsManagerAddMode : uint8
{
	PreserveOldWounds                        = 0,
	DiscardOldWounds                         = 1,
	EWoundsManagerAddMode_MAX                = 2,
};

// ScriptStruct Flame.ToolSlot
// 0x0010 (0x0010 - 0x0000)
struct FToolSlot final
{
public:
	TSubclassOf<class ATool>                      ObjectType;                                        // 0x0000(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Count;                                             // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FToolSlot) == 0x000008, "Wrong alignment on FToolSlot");
static_assert(sizeof(FToolSlot) == 0x000010, "Wrong size on FToolSlot");
static_assert(offsetof(FToolSlot, ObjectType) == 0x000000, "Member 'FToolSlot::ObjectType' has a wrong offset!");
static_assert(offsetof(FToolSlot, Count) == 0x000008, "Member 'FToolSlot::Count' has a wrong offset!");

// ScriptStruct Flame.CloudBattlePassClaimedSeason
// 0x0014 (0x0014 - 0x0000)
struct FCloudBattlePassClaimedSeason final
{
public:
	class FName                                   SeasonName;                                        // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         FreeClaimedLevel;                                  // 0x0008(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         PremiumClaimedLevel;                               // 0x000C(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ExperienceBooster;                                 // 0x0010(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FCloudBattlePassClaimedSeason) == 0x000004, "Wrong alignment on FCloudBattlePassClaimedSeason");
static_assert(sizeof(FCloudBattlePassClaimedSeason) == 0x000014, "Wrong size on FCloudBattlePassClaimedSeason");
static_assert(offsetof(FCloudBattlePassClaimedSeason, SeasonName) == 0x000000, "Member 'FCloudBattlePassClaimedSeason::SeasonName' has a wrong offset!");
static_assert(offsetof(FCloudBattlePassClaimedSeason, FreeClaimedLevel) == 0x000008, "Member 'FCloudBattlePassClaimedSeason::FreeClaimedLevel' has a wrong offset!");
static_assert(offsetof(FCloudBattlePassClaimedSeason, PremiumClaimedLevel) == 0x00000C, "Member 'FCloudBattlePassClaimedSeason::PremiumClaimedLevel' has a wrong offset!");
static_assert(offsetof(FCloudBattlePassClaimedSeason, ExperienceBooster) == 0x000010, "Member 'FCloudBattlePassClaimedSeason::ExperienceBooster' has a wrong offset!");

// ScriptStruct Flame.CloudBattlePassRewardsClaim
// 0x0020 (0x0020 - 0x0000)
struct FCloudBattlePassRewardsClaim final
{
public:
	TArray<struct FCloudBattlePassClaimedSeason>  ClaimedSeasons;                                    // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_10[0x10];                                      // 0x0010(0x0010)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FCloudBattlePassRewardsClaim) == 0x000008, "Wrong alignment on FCloudBattlePassRewardsClaim");
static_assert(sizeof(FCloudBattlePassRewardsClaim) == 0x000020, "Wrong size on FCloudBattlePassRewardsClaim");
static_assert(offsetof(FCloudBattlePassRewardsClaim, ClaimedSeasons) == 0x000000, "Member 'FCloudBattlePassRewardsClaim::ClaimedSeasons' has a wrong offset!");

// ScriptStruct Flame.GameStoreProductId
// 0x0010 (0x0010 - 0x0000)
struct FGameStoreProductId final
{
public:
	class FString                                 ID;                                                // 0x0000(0x0010)(BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FGameStoreProductId) == 0x000008, "Wrong alignment on FGameStoreProductId");
static_assert(sizeof(FGameStoreProductId) == 0x000010, "Wrong size on FGameStoreProductId");
static_assert(offsetof(FGameStoreProductId, ID) == 0x000000, "Member 'FGameStoreProductId::ID' has a wrong offset!");

// ScriptStruct Flame.InvetoryItemDescriptor
// 0x0030 (0x0030 - 0x0000)
struct FInvetoryItemDescriptor final
{
public:
	EInventoryItemDescriptorType                  Type;                                              // 0x0000(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TSubclassOf<class AItem>                      ItemType;                                          // 0x0008(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Count;                                             // 0x0010(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Index;                                             // 0x0014(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TWeakObjectPtr<class UItemsList>              List;                                              // 0x0018(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TWeakObjectPtr<class UEquipmentStorageComponent> Storage;                                           // 0x0020(0x0008)(ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AItem*                                  Item;                                              // 0x0028(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
};
static_assert(alignof(FInvetoryItemDescriptor) == 0x000008, "Wrong alignment on FInvetoryItemDescriptor");
static_assert(sizeof(FInvetoryItemDescriptor) == 0x000030, "Wrong size on FInvetoryItemDescriptor");
static_assert(offsetof(FInvetoryItemDescriptor, Type) == 0x000000, "Member 'FInvetoryItemDescriptor::Type' has a wrong offset!");
static_assert(offsetof(FInvetoryItemDescriptor, ItemType) == 0x000008, "Member 'FInvetoryItemDescriptor::ItemType' has a wrong offset!");
static_assert(offsetof(FInvetoryItemDescriptor, Count) == 0x000010, "Member 'FInvetoryItemDescriptor::Count' has a wrong offset!");
static_assert(offsetof(FInvetoryItemDescriptor, Index) == 0x000014, "Member 'FInvetoryItemDescriptor::Index' has a wrong offset!");
static_assert(offsetof(FInvetoryItemDescriptor, List) == 0x000018, "Member 'FInvetoryItemDescriptor::List' has a wrong offset!");
static_assert(offsetof(FInvetoryItemDescriptor, Storage) == 0x000020, "Member 'FInvetoryItemDescriptor::Storage' has a wrong offset!");
static_assert(offsetof(FInvetoryItemDescriptor, Item) == 0x000028, "Member 'FInvetoryItemDescriptor::Item' has a wrong offset!");

// ScriptStruct Flame.LootBoxPoolItem
// 0x0030 (0x0030 - 0x0000)
struct FLootBoxPoolItem final
{
public:
	class FString                                 KeyName;                                           // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Name;                                              // 0x0010(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSubclassOf<class AItem>                      Item;                                              // 0x0020(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Count;                                             // 0x0028(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsLooted;                                          // 0x002C(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2D[0x3];                                       // 0x002D(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FLootBoxPoolItem) == 0x000008, "Wrong alignment on FLootBoxPoolItem");
static_assert(sizeof(FLootBoxPoolItem) == 0x000030, "Wrong size on FLootBoxPoolItem");
static_assert(offsetof(FLootBoxPoolItem, KeyName) == 0x000000, "Member 'FLootBoxPoolItem::KeyName' has a wrong offset!");
static_assert(offsetof(FLootBoxPoolItem, Name) == 0x000010, "Member 'FLootBoxPoolItem::Name' has a wrong offset!");
static_assert(offsetof(FLootBoxPoolItem, Item) == 0x000020, "Member 'FLootBoxPoolItem::Item' has a wrong offset!");
static_assert(offsetof(FLootBoxPoolItem, Count) == 0x000028, "Member 'FLootBoxPoolItem::Count' has a wrong offset!");
static_assert(offsetof(FLootBoxPoolItem, IsLooted) == 0x00002C, "Member 'FLootBoxPoolItem::IsLooted' has a wrong offset!");

// ScriptStruct Flame.LootBoxOpenedCloudResult
// 0x0028 (0x0028 - 0x0000)
struct FLootBoxOpenedCloudResult final
{
public:
	class FString                                 LootBoxName;                                       // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSubclassOf<class AItem>                      LootBoxClass;                                      // 0x0010(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FLootBoxPoolItem>               Items;                                             // 0x0018(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FLootBoxOpenedCloudResult) == 0x000008, "Wrong alignment on FLootBoxOpenedCloudResult");
static_assert(sizeof(FLootBoxOpenedCloudResult) == 0x000028, "Wrong size on FLootBoxOpenedCloudResult");
static_assert(offsetof(FLootBoxOpenedCloudResult, LootBoxName) == 0x000000, "Member 'FLootBoxOpenedCloudResult::LootBoxName' has a wrong offset!");
static_assert(offsetof(FLootBoxOpenedCloudResult, LootBoxClass) == 0x000010, "Member 'FLootBoxOpenedCloudResult::LootBoxClass' has a wrong offset!");
static_assert(offsetof(FLootBoxOpenedCloudResult, Items) == 0x000018, "Member 'FLootBoxOpenedCloudResult::Items' has a wrong offset!");

// ScriptStruct Flame.ChallengeReward
// 0x0010 (0x0010 - 0x0000)
struct FChallengeReward final
{
public:
	TSubclassOf<class AItem>                      ItemType;                                          // 0x0000(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Count;                                             // 0x0008(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FChallengeReward) == 0x000008, "Wrong alignment on FChallengeReward");
static_assert(sizeof(FChallengeReward) == 0x000010, "Wrong size on FChallengeReward");
static_assert(offsetof(FChallengeReward, ItemType) == 0x000000, "Member 'FChallengeReward::ItemType' has a wrong offset!");
static_assert(offsetof(FChallengeReward, Count) == 0x000008, "Member 'FChallengeReward::Count' has a wrong offset!");

// ScriptStruct Flame.CloudBattlePassMatchEventInfo
// 0x000C (0x000C - 0x0000)
struct FCloudBattlePassMatchEventInfo final
{
public:
	class FName                                   EventName;                                         // 0x0000(0x0008)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Amount;                                            // 0x0008(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FCloudBattlePassMatchEventInfo) == 0x000004, "Wrong alignment on FCloudBattlePassMatchEventInfo");
static_assert(sizeof(FCloudBattlePassMatchEventInfo) == 0x00000C, "Wrong size on FCloudBattlePassMatchEventInfo");
static_assert(offsetof(FCloudBattlePassMatchEventInfo, EventName) == 0x000000, "Member 'FCloudBattlePassMatchEventInfo::EventName' has a wrong offset!");
static_assert(offsetof(FCloudBattlePassMatchEventInfo, Amount) == 0x000008, "Member 'FCloudBattlePassMatchEventInfo::Amount' has a wrong offset!");

// ScriptStruct Flame.SpectatorRules
// 0x0010 (0x0010 - 0x0000)
struct FSpectatorRules final
{
public:
	bool                                          bAllowSpectateTeammates;                           // 0x0000(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bAllowSpectateNonTeammates;                        // 0x0001(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bAllowRotation;                                    // 0x0002(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bAllowSpectateNonPlayers;                          // 0x0003(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bAllowSpectateSelf;                                // 0x0004(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bTryOnlyParam;                                     // 0x0005(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bParamPriority;                                    // 0x0006(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bPrioritizeDistance;                               // 0x0007(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bScriptOnly;                                       // 0x0008(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bScriptAppend;                                     // 0x0009(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_A[0x2];                                        // 0x000A(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         ScripterParam;                                     // 0x000C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSpectatorRules) == 0x000004, "Wrong alignment on FSpectatorRules");
static_assert(sizeof(FSpectatorRules) == 0x000010, "Wrong size on FSpectatorRules");
static_assert(offsetof(FSpectatorRules, bAllowSpectateTeammates) == 0x000000, "Member 'FSpectatorRules::bAllowSpectateTeammates' has a wrong offset!");
static_assert(offsetof(FSpectatorRules, bAllowSpectateNonTeammates) == 0x000001, "Member 'FSpectatorRules::bAllowSpectateNonTeammates' has a wrong offset!");
static_assert(offsetof(FSpectatorRules, bAllowRotation) == 0x000002, "Member 'FSpectatorRules::bAllowRotation' has a wrong offset!");
static_assert(offsetof(FSpectatorRules, bAllowSpectateNonPlayers) == 0x000003, "Member 'FSpectatorRules::bAllowSpectateNonPlayers' has a wrong offset!");
static_assert(offsetof(FSpectatorRules, bAllowSpectateSelf) == 0x000004, "Member 'FSpectatorRules::bAllowSpectateSelf' has a wrong offset!");
static_assert(offsetof(FSpectatorRules, bTryOnlyParam) == 0x000005, "Member 'FSpectatorRules::bTryOnlyParam' has a wrong offset!");
static_assert(offsetof(FSpectatorRules, bParamPriority) == 0x000006, "Member 'FSpectatorRules::bParamPriority' has a wrong offset!");
static_assert(offsetof(FSpectatorRules, bPrioritizeDistance) == 0x000007, "Member 'FSpectatorRules::bPrioritizeDistance' has a wrong offset!");
static_assert(offsetof(FSpectatorRules, bScriptOnly) == 0x000008, "Member 'FSpectatorRules::bScriptOnly' has a wrong offset!");
static_assert(offsetof(FSpectatorRules, bScriptAppend) == 0x000009, "Member 'FSpectatorRules::bScriptAppend' has a wrong offset!");
static_assert(offsetof(FSpectatorRules, ScripterParam) == 0x00000C, "Member 'FSpectatorRules::ScripterParam' has a wrong offset!");

// ScriptStruct Flame.GameStorePurchaseItemInfo
// 0x0018 (0x0018 - 0x0000)
struct FGameStorePurchaseItemInfo final
{
public:
	struct FGameStoreProductId                    ProductId;                                         // 0x0000(0x0010)(BlueprintVisible, NativeAccessSpecifierPublic)
	int32                                         Count;                                             // 0x0010(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FGameStorePurchaseItemInfo) == 0x000008, "Wrong alignment on FGameStorePurchaseItemInfo");
static_assert(sizeof(FGameStorePurchaseItemInfo) == 0x000018, "Wrong size on FGameStorePurchaseItemInfo");
static_assert(offsetof(FGameStorePurchaseItemInfo, ProductId) == 0x000000, "Member 'FGameStorePurchaseItemInfo::ProductId' has a wrong offset!");
static_assert(offsetof(FGameStorePurchaseItemInfo, Count) == 0x000010, "Member 'FGameStorePurchaseItemInfo::Count' has a wrong offset!");

// ScriptStruct Flame.GameStorePurchaseInfo
// 0x0028 (0x0028 - 0x0000)
struct FGameStorePurchaseInfo final
{
public:
	struct FGameStorePurchaseItemInfo             ProductInfo;                                       // 0x0000(0x0018)(BlueprintVisible, NativeAccessSpecifierPublic)
	uint8                                         Pad_18[0x10];                                      // 0x0018(0x0010)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FGameStorePurchaseInfo) == 0x000008, "Wrong alignment on FGameStorePurchaseInfo");
static_assert(sizeof(FGameStorePurchaseInfo) == 0x000028, "Wrong size on FGameStorePurchaseInfo");
static_assert(offsetof(FGameStorePurchaseInfo, ProductInfo) == 0x000000, "Member 'FGameStorePurchaseInfo::ProductInfo' has a wrong offset!");

// ScriptStruct Flame.CustomJsonParser
// 0x0008 (0x0008 - 0x0000)
struct alignas(0x08) FCustomJsonParser
{
public:
	uint8                                         Pad_0[0x8];                                        // 0x0000(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FCustomJsonParser) == 0x000008, "Wrong alignment on FCustomJsonParser");
static_assert(sizeof(FCustomJsonParser) == 0x000008, "Wrong size on FCustomJsonParser");

// ScriptStruct Flame.GameStorePurchaseResult
// 0x0030 (0x0038 - 0x0008)
struct FGameStorePurchaseResult final : public FCustomJsonParser
{
public:
	TArray<struct FGameStorePurchaseInfo>         PurchaseInfo;                                      // 0x0008(0x0010)(BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	class FText                                   PlatformMessage;                                   // 0x0018(0x0018)(BlueprintVisible, NativeAccessSpecifierPublic)
	uint8                                         Pad_30[0x8];                                       // 0x0030(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FGameStorePurchaseResult) == 0x000008, "Wrong alignment on FGameStorePurchaseResult");
static_assert(sizeof(FGameStorePurchaseResult) == 0x000038, "Wrong size on FGameStorePurchaseResult");
static_assert(offsetof(FGameStorePurchaseResult, PurchaseInfo) == 0x000008, "Member 'FGameStorePurchaseResult::PurchaseInfo' has a wrong offset!");
static_assert(offsetof(FGameStorePurchaseResult, PlatformMessage) == 0x000018, "Member 'FGameStorePurchaseResult::PlatformMessage' has a wrong offset!");

// ScriptStruct Flame.PersistentChange
// 0x0020 (0x0020 - 0x0000)
struct FPersistentChange final
{
public:
	TArray<TSubclassOf<class APersistentItem>>    AddedClasses;                                      // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, UObjectWrapper, NativeAccessSpecifierPublic)
	TArray<TSubclassOf<class APersistentItem>>    RemovedClasses;                                    // 0x0010(0x0010)(Edit, BlueprintVisible, ZeroConstructor, UObjectWrapper, NativeAccessSpecifierPublic)
};
static_assert(alignof(FPersistentChange) == 0x000008, "Wrong alignment on FPersistentChange");
static_assert(sizeof(FPersistentChange) == 0x000020, "Wrong size on FPersistentChange");
static_assert(offsetof(FPersistentChange, AddedClasses) == 0x000000, "Member 'FPersistentChange::AddedClasses' has a wrong offset!");
static_assert(offsetof(FPersistentChange, RemovedClasses) == 0x000010, "Member 'FPersistentChange::RemovedClasses' has a wrong offset!");

// ScriptStruct Flame.LootSlot
// 0x0010 (0x0010 - 0x0000)
struct FLootSlot final
{
public:
	TSubclassOf<class AItem>                      ObjectType;                                        // 0x0000(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Count;                                             // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FLootSlot) == 0x000008, "Wrong alignment on FLootSlot");
static_assert(sizeof(FLootSlot) == 0x000010, "Wrong size on FLootSlot");
static_assert(offsetof(FLootSlot, ObjectType) == 0x000000, "Member 'FLootSlot::ObjectType' has a wrong offset!");
static_assert(offsetof(FLootSlot, Count) == 0x000008, "Member 'FLootSlot::Count' has a wrong offset!");

// ScriptStruct Flame.ClassTableRow
// 0x0008 (0x0010 - 0x0008)
struct FClassTableRow : public FTableRowBase
{
public:
	int32                                         Version;                                           // 0x0008(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FClassTableRow) == 0x000008, "Wrong alignment on FClassTableRow");
static_assert(sizeof(FClassTableRow) == 0x000010, "Wrong size on FClassTableRow");
static_assert(offsetof(FClassTableRow, Version) == 0x000008, "Member 'FClassTableRow::Version' has a wrong offset!");

// ScriptStruct Flame.ClassTableRowWithDisplayName
// 0x0030 (0x0040 - 0x0010)
struct FClassTableRowWithDisplayName : public FClassTableRow
{
public:
	class FText                                   DisplayName;                                       // 0x0010(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NativeAccessSpecifierPublic)
	class FText                                   Description;                                       // 0x0028(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NativeAccessSpecifierPublic)
};
static_assert(alignof(FClassTableRowWithDisplayName) == 0x000008, "Wrong alignment on FClassTableRowWithDisplayName");
static_assert(sizeof(FClassTableRowWithDisplayName) == 0x000040, "Wrong size on FClassTableRowWithDisplayName");
static_assert(offsetof(FClassTableRowWithDisplayName, DisplayName) == 0x000010, "Member 'FClassTableRowWithDisplayName::DisplayName' has a wrong offset!");
static_assert(offsetof(FClassTableRowWithDisplayName, Description) == 0x000028, "Member 'FClassTableRowWithDisplayName::Description' has a wrong offset!");

// ScriptStruct Flame.ItemClassTableRow
// 0x00D8 (0x0118 - 0x0040)
struct FItemClassTableRow : public FClassTableRowWithDisplayName
{
public:
	int32                                         Rarity;                                            // 0x0040(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EItemCategory                                 Category;                                          // 0x0044(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_45[0x3];                                       // 0x0045(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	TMap<EIconSize, TSoftObjectPtr<class UTexture2D>> IconMap;                                           // 0x0048(0x0050)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, UObjectWrapper, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UTexture2D>              CardImage;                                         // 0x0098(0x0028)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class USkeletalMesh>           ShelterPreviewSkeletalMesh;                        // 0x00C0(0x0028)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UStaticMesh>             ShelterPreviewStaticMesh;                          // 0x00E8(0x0028)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Weight;                                            // 0x0110(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_114[0x4];                                      // 0x0114(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FItemClassTableRow) == 0x000008, "Wrong alignment on FItemClassTableRow");
static_assert(sizeof(FItemClassTableRow) == 0x000118, "Wrong size on FItemClassTableRow");
static_assert(offsetof(FItemClassTableRow, Rarity) == 0x000040, "Member 'FItemClassTableRow::Rarity' has a wrong offset!");
static_assert(offsetof(FItemClassTableRow, Category) == 0x000044, "Member 'FItemClassTableRow::Category' has a wrong offset!");
static_assert(offsetof(FItemClassTableRow, IconMap) == 0x000048, "Member 'FItemClassTableRow::IconMap' has a wrong offset!");
static_assert(offsetof(FItemClassTableRow, CardImage) == 0x000098, "Member 'FItemClassTableRow::CardImage' has a wrong offset!");
static_assert(offsetof(FItemClassTableRow, ShelterPreviewSkeletalMesh) == 0x0000C0, "Member 'FItemClassTableRow::ShelterPreviewSkeletalMesh' has a wrong offset!");
static_assert(offsetof(FItemClassTableRow, ShelterPreviewStaticMesh) == 0x0000E8, "Member 'FItemClassTableRow::ShelterPreviewStaticMesh' has a wrong offset!");
static_assert(offsetof(FItemClassTableRow, Weight) == 0x000110, "Member 'FItemClassTableRow::Weight' has a wrong offset!");

// ScriptStruct Flame.ItemClassTableRowWithInsurance
// 0x0008 (0x0120 - 0x0118)
struct FItemClassTableRowWithInsurance : public FItemClassTableRow
{
public:
	bool                                          IsInsurable;                                       // 0x0118(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          CanBeDestroyed;                                    // 0x0119(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11A[0x6];                                      // 0x011A(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FItemClassTableRowWithInsurance) == 0x000008, "Wrong alignment on FItemClassTableRowWithInsurance");
static_assert(sizeof(FItemClassTableRowWithInsurance) == 0x000120, "Wrong size on FItemClassTableRowWithInsurance");
static_assert(offsetof(FItemClassTableRowWithInsurance, IsInsurable) == 0x000118, "Member 'FItemClassTableRowWithInsurance::IsInsurable' has a wrong offset!");
static_assert(offsetof(FItemClassTableRowWithInsurance, CanBeDestroyed) == 0x000119, "Member 'FItemClassTableRowWithInsurance::CanBeDestroyed' has a wrong offset!");

// ScriptStruct Flame.AmmoTypeConfiguration
// 0x0028 (0x0148 - 0x0120)
struct FAmmoTypeConfiguration final : public FItemClassTableRowWithInsurance
{
public:
	TSubclassOf<class AAmmoItem>                  Class;                                             // 0x0120(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Drop;                                              // 0x0128(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Count;                                             // 0x012C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Life;                                              // 0x0130(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EProjectileType                               Type;                                              // 0x0134(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_135[0x3];                                      // 0x0135(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         ParticleSystemScale;                               // 0x0138(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         StackSize;                                         // 0x013C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Value;                                             // 0x0140(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_144[0x4];                                      // 0x0144(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FAmmoTypeConfiguration) == 0x000008, "Wrong alignment on FAmmoTypeConfiguration");
static_assert(sizeof(FAmmoTypeConfiguration) == 0x000148, "Wrong size on FAmmoTypeConfiguration");
static_assert(offsetof(FAmmoTypeConfiguration, Class) == 0x000120, "Member 'FAmmoTypeConfiguration::Class' has a wrong offset!");
static_assert(offsetof(FAmmoTypeConfiguration, Drop) == 0x000128, "Member 'FAmmoTypeConfiguration::Drop' has a wrong offset!");
static_assert(offsetof(FAmmoTypeConfiguration, Count) == 0x00012C, "Member 'FAmmoTypeConfiguration::Count' has a wrong offset!");
static_assert(offsetof(FAmmoTypeConfiguration, Life) == 0x000130, "Member 'FAmmoTypeConfiguration::Life' has a wrong offset!");
static_assert(offsetof(FAmmoTypeConfiguration, Type) == 0x000134, "Member 'FAmmoTypeConfiguration::Type' has a wrong offset!");
static_assert(offsetof(FAmmoTypeConfiguration, ParticleSystemScale) == 0x000138, "Member 'FAmmoTypeConfiguration::ParticleSystemScale' has a wrong offset!");
static_assert(offsetof(FAmmoTypeConfiguration, StackSize) == 0x00013C, "Member 'FAmmoTypeConfiguration::StackSize' has a wrong offset!");
static_assert(offsetof(FAmmoTypeConfiguration, Value) == 0x000140, "Member 'FAmmoTypeConfiguration::Value' has a wrong offset!");

// ScriptStruct Flame.CustomizationSlotList
// 0x0010 (0x0050 - 0x0040)
struct FCustomizationSlotList final : public FClassTableRowWithDisplayName
{
public:
	TSubclassOf<class ACustomizationSlot>         Class;                                             // 0x0040(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsMandatory;                                       // 0x0048(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_49[0x7];                                       // 0x0049(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FCustomizationSlotList) == 0x000008, "Wrong alignment on FCustomizationSlotList");
static_assert(sizeof(FCustomizationSlotList) == 0x000050, "Wrong size on FCustomizationSlotList");
static_assert(offsetof(FCustomizationSlotList, Class) == 0x000040, "Member 'FCustomizationSlotList::Class' has a wrong offset!");
static_assert(offsetof(FCustomizationSlotList, IsMandatory) == 0x000048, "Member 'FCustomizationSlotList::IsMandatory' has a wrong offset!");

// ScriptStruct Flame.CloudStatusSettings
// 0x0040 (0x0040 - 0x0000)
struct FCloudStatusSettings final
{
public:
	class FString                                 GetStatusClientRequestName;                        // 0x0000(0x0010)(Edit, ZeroConstructor, Config, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 GetStatusServerRequestName;                        // 0x0010(0x0010)(Edit, ZeroConstructor, Config, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 GetOverviewClientRequestName;                      // 0x0020(0x0010)(Edit, ZeroConstructor, Config, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 GetOverviewServerRequestName;                      // 0x0030(0x0010)(Edit, ZeroConstructor, Config, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FCloudStatusSettings) == 0x000008, "Wrong alignment on FCloudStatusSettings");
static_assert(sizeof(FCloudStatusSettings) == 0x000040, "Wrong size on FCloudStatusSettings");
static_assert(offsetof(FCloudStatusSettings, GetStatusClientRequestName) == 0x000000, "Member 'FCloudStatusSettings::GetStatusClientRequestName' has a wrong offset!");
static_assert(offsetof(FCloudStatusSettings, GetStatusServerRequestName) == 0x000010, "Member 'FCloudStatusSettings::GetStatusServerRequestName' has a wrong offset!");
static_assert(offsetof(FCloudStatusSettings, GetOverviewClientRequestName) == 0x000020, "Member 'FCloudStatusSettings::GetOverviewClientRequestName' has a wrong offset!");
static_assert(offsetof(FCloudStatusSettings, GetOverviewServerRequestName) == 0x000030, "Member 'FCloudStatusSettings::GetOverviewServerRequestName' has a wrong offset!");

// ScriptStruct Flame.MiscInputSettings
// 0x0010 (0x0010 - 0x0000)
struct FMiscInputSettings final
{
public:
	int32                                         ControllerScheme;                                  // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bSwapSticks;                                       // 0x0004(0x0001)(ZeroConstructor, Deprecated, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         ZoomSensitivityExponent;                           // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bHoldForADS;                                       // 0x000C(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bHoldForSprint;                                    // 0x000D(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bAllowVibration;                                   // 0x000E(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bInvertVertical;                                   // 0x000F(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FMiscInputSettings) == 0x000004, "Wrong alignment on FMiscInputSettings");
static_assert(sizeof(FMiscInputSettings) == 0x000010, "Wrong size on FMiscInputSettings");
static_assert(offsetof(FMiscInputSettings, ControllerScheme) == 0x000000, "Member 'FMiscInputSettings::ControllerScheme' has a wrong offset!");
static_assert(offsetof(FMiscInputSettings, bSwapSticks) == 0x000004, "Member 'FMiscInputSettings::bSwapSticks' has a wrong offset!");
static_assert(offsetof(FMiscInputSettings, ZoomSensitivityExponent) == 0x000008, "Member 'FMiscInputSettings::ZoomSensitivityExponent' has a wrong offset!");
static_assert(offsetof(FMiscInputSettings, bHoldForADS) == 0x00000C, "Member 'FMiscInputSettings::bHoldForADS' has a wrong offset!");
static_assert(offsetof(FMiscInputSettings, bHoldForSprint) == 0x00000D, "Member 'FMiscInputSettings::bHoldForSprint' has a wrong offset!");
static_assert(offsetof(FMiscInputSettings, bAllowVibration) == 0x00000E, "Member 'FMiscInputSettings::bAllowVibration' has a wrong offset!");
static_assert(offsetof(FMiscInputSettings, bInvertVertical) == 0x00000F, "Member 'FMiscInputSettings::bInvertVertical' has a wrong offset!");

// ScriptStruct Flame.GameStoreItemInfo
// 0x0010 (0x0010 - 0x0000)
struct FGameStoreItemInfo final
{
public:
	TSubclassOf<class AItem>                      ItemClass;                                         // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         BaseAmount;                                        // 0x0008(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         BonusAmount;                                       // 0x000C(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FGameStoreItemInfo) == 0x000008, "Wrong alignment on FGameStoreItemInfo");
static_assert(sizeof(FGameStoreItemInfo) == 0x000010, "Wrong size on FGameStoreItemInfo");
static_assert(offsetof(FGameStoreItemInfo, ItemClass) == 0x000000, "Member 'FGameStoreItemInfo::ItemClass' has a wrong offset!");
static_assert(offsetof(FGameStoreItemInfo, BaseAmount) == 0x000008, "Member 'FGameStoreItemInfo::BaseAmount' has a wrong offset!");
static_assert(offsetof(FGameStoreItemInfo, BonusAmount) == 0x00000C, "Member 'FGameStoreItemInfo::BonusAmount' has a wrong offset!");

// ScriptStruct Flame.GameStoreBundleInfo
// 0x0028 (0x0028 - 0x0000)
struct FGameStoreBundleInfo final
{
public:
	int32                                         ID;                                                // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 VisualName;                                        // 0x0008(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FGameStoreItemInfo>             Items;                                             // 0x0018(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FGameStoreBundleInfo) == 0x000008, "Wrong alignment on FGameStoreBundleInfo");
static_assert(sizeof(FGameStoreBundleInfo) == 0x000028, "Wrong size on FGameStoreBundleInfo");
static_assert(offsetof(FGameStoreBundleInfo, ID) == 0x000000, "Member 'FGameStoreBundleInfo::ID' has a wrong offset!");
static_assert(offsetof(FGameStoreBundleInfo, VisualName) == 0x000008, "Member 'FGameStoreBundleInfo::VisualName' has a wrong offset!");
static_assert(offsetof(FGameStoreBundleInfo, Items) == 0x000018, "Member 'FGameStoreBundleInfo::Items' has a wrong offset!");

// ScriptStruct Flame.GameStoreProductInfo
// 0x0050 (0x0050 - 0x0000)
struct FGameStoreProductInfo final
{
public:
	struct FGameStoreProductId                    ProductId;                                         // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	bool                                          IsEnabled;                                         // 0x0010(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x3];                                       // 0x0011(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Price;                                             // 0x0014(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         DiscountPercent;                                   // 0x0018(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         PriceAfterDiscount;                                // 0x001C(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 SaleLabelName;                                     // 0x0020(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FGameStoreBundleInfo>           Bundles;                                           // 0x0030(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
	EGameStoreProductType                         ProductType;                                       // 0x0040(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_41[0x3];                                       // 0x0041(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	TWeakObjectPtr<class UPlatformStoreOfferInfo> PlatformOffer;                                     // 0x0044(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EGameStoreProductUsageType                    UsageType;                                         // 0x004C(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4D[0x3];                                       // 0x004D(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FGameStoreProductInfo) == 0x000008, "Wrong alignment on FGameStoreProductInfo");
static_assert(sizeof(FGameStoreProductInfo) == 0x000050, "Wrong size on FGameStoreProductInfo");
static_assert(offsetof(FGameStoreProductInfo, ProductId) == 0x000000, "Member 'FGameStoreProductInfo::ProductId' has a wrong offset!");
static_assert(offsetof(FGameStoreProductInfo, IsEnabled) == 0x000010, "Member 'FGameStoreProductInfo::IsEnabled' has a wrong offset!");
static_assert(offsetof(FGameStoreProductInfo, Price) == 0x000014, "Member 'FGameStoreProductInfo::Price' has a wrong offset!");
static_assert(offsetof(FGameStoreProductInfo, DiscountPercent) == 0x000018, "Member 'FGameStoreProductInfo::DiscountPercent' has a wrong offset!");
static_assert(offsetof(FGameStoreProductInfo, PriceAfterDiscount) == 0x00001C, "Member 'FGameStoreProductInfo::PriceAfterDiscount' has a wrong offset!");
static_assert(offsetof(FGameStoreProductInfo, SaleLabelName) == 0x000020, "Member 'FGameStoreProductInfo::SaleLabelName' has a wrong offset!");
static_assert(offsetof(FGameStoreProductInfo, Bundles) == 0x000030, "Member 'FGameStoreProductInfo::Bundles' has a wrong offset!");
static_assert(offsetof(FGameStoreProductInfo, ProductType) == 0x000040, "Member 'FGameStoreProductInfo::ProductType' has a wrong offset!");
static_assert(offsetof(FGameStoreProductInfo, PlatformOffer) == 0x000044, "Member 'FGameStoreProductInfo::PlatformOffer' has a wrong offset!");
static_assert(offsetof(FGameStoreProductInfo, UsageType) == 0x00004C, "Member 'FGameStoreProductInfo::UsageType' has a wrong offset!");

// ScriptStruct Flame.GameStoreSellingPointInfo
// 0x0060 (0x0060 - 0x0000)
struct FGameStoreSellingPointInfo final
{
public:
	struct FGameStoreProductInfo                  ProductInfo;                                       // 0x0000(0x0050)(BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	struct FDateTime                              ValidSinceUtc;                                     // 0x0050(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FDateTime                              ValidUntilUtc;                                     // 0x0058(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FGameStoreSellingPointInfo) == 0x000008, "Wrong alignment on FGameStoreSellingPointInfo");
static_assert(sizeof(FGameStoreSellingPointInfo) == 0x000060, "Wrong size on FGameStoreSellingPointInfo");
static_assert(offsetof(FGameStoreSellingPointInfo, ProductInfo) == 0x000000, "Member 'FGameStoreSellingPointInfo::ProductInfo' has a wrong offset!");
static_assert(offsetof(FGameStoreSellingPointInfo, ValidSinceUtc) == 0x000050, "Member 'FGameStoreSellingPointInfo::ValidSinceUtc' has a wrong offset!");
static_assert(offsetof(FGameStoreSellingPointInfo, ValidUntilUtc) == 0x000058, "Member 'FGameStoreSellingPointInfo::ValidUntilUtc' has a wrong offset!");

// ScriptStruct Flame.SpeedDef
// 0x0010 (0x0010 - 0x0000)
struct FSpeedDef final
{
public:
	float                                         Fast;                                              // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         FastBack;                                          // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         FastStrafe;                                        // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Slow;                                              // 0x000C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSpeedDef) == 0x000004, "Wrong alignment on FSpeedDef");
static_assert(sizeof(FSpeedDef) == 0x000010, "Wrong size on FSpeedDef");
static_assert(offsetof(FSpeedDef, Fast) == 0x000000, "Member 'FSpeedDef::Fast' has a wrong offset!");
static_assert(offsetof(FSpeedDef, FastBack) == 0x000004, "Member 'FSpeedDef::FastBack' has a wrong offset!");
static_assert(offsetof(FSpeedDef, FastStrafe) == 0x000008, "Member 'FSpeedDef::FastStrafe' has a wrong offset!");
static_assert(offsetof(FSpeedDef, Slow) == 0x00000C, "Member 'FSpeedDef::Slow' has a wrong offset!");

// ScriptStruct Flame.UserMatchInfoStats
// 0x0060 (0x0060 - 0x0000)
struct FUserMatchInfoStats final
{
public:
	ECloudMatchEndType                            MatchEndType;                                      // 0x0000(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ECloudDeathCauseType                          DeathCause;                                        // 0x0001(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2[0x2];                                        // 0x0002(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Kills;                                             // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Headshots;                                         // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         FireAccuracy;                                      // 0x000C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         DistanceTraveledInMeters;                          // 0x0010(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MatchTimeInSeconds;                                // 0x0014(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         DeathmatchScore;                                   // 0x0018(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Score;                                             // 0x001C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TimeSinceLastSeenInSeconds;                        // 0x0020(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsHandledAsDisconnect;                             // 0x0024(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_25[0x3];                                       // 0x0025(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         AirdropsRetrieved;                                 // 0x0028(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         HpHealed;                                          // 0x002C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ThreatsKilled;                                     // 0x0030(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_34[0x4];                                       // 0x0034(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 ScreenName;                                        // 0x0038(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ConsumableKills;                                   // 0x0048(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Deaths;                                            // 0x004C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         TeamScore;                                         // 0x0050(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         FlagsTaken;                                        // 0x0054(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         DamageDone;                                        // 0x0058(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5C[0x4];                                       // 0x005C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FUserMatchInfoStats) == 0x000008, "Wrong alignment on FUserMatchInfoStats");
static_assert(sizeof(FUserMatchInfoStats) == 0x000060, "Wrong size on FUserMatchInfoStats");
static_assert(offsetof(FUserMatchInfoStats, MatchEndType) == 0x000000, "Member 'FUserMatchInfoStats::MatchEndType' has a wrong offset!");
static_assert(offsetof(FUserMatchInfoStats, DeathCause) == 0x000001, "Member 'FUserMatchInfoStats::DeathCause' has a wrong offset!");
static_assert(offsetof(FUserMatchInfoStats, Kills) == 0x000004, "Member 'FUserMatchInfoStats::Kills' has a wrong offset!");
static_assert(offsetof(FUserMatchInfoStats, Headshots) == 0x000008, "Member 'FUserMatchInfoStats::Headshots' has a wrong offset!");
static_assert(offsetof(FUserMatchInfoStats, FireAccuracy) == 0x00000C, "Member 'FUserMatchInfoStats::FireAccuracy' has a wrong offset!");
static_assert(offsetof(FUserMatchInfoStats, DistanceTraveledInMeters) == 0x000010, "Member 'FUserMatchInfoStats::DistanceTraveledInMeters' has a wrong offset!");
static_assert(offsetof(FUserMatchInfoStats, MatchTimeInSeconds) == 0x000014, "Member 'FUserMatchInfoStats::MatchTimeInSeconds' has a wrong offset!");
static_assert(offsetof(FUserMatchInfoStats, DeathmatchScore) == 0x000018, "Member 'FUserMatchInfoStats::DeathmatchScore' has a wrong offset!");
static_assert(offsetof(FUserMatchInfoStats, Score) == 0x00001C, "Member 'FUserMatchInfoStats::Score' has a wrong offset!");
static_assert(offsetof(FUserMatchInfoStats, TimeSinceLastSeenInSeconds) == 0x000020, "Member 'FUserMatchInfoStats::TimeSinceLastSeenInSeconds' has a wrong offset!");
static_assert(offsetof(FUserMatchInfoStats, IsHandledAsDisconnect) == 0x000024, "Member 'FUserMatchInfoStats::IsHandledAsDisconnect' has a wrong offset!");
static_assert(offsetof(FUserMatchInfoStats, AirdropsRetrieved) == 0x000028, "Member 'FUserMatchInfoStats::AirdropsRetrieved' has a wrong offset!");
static_assert(offsetof(FUserMatchInfoStats, HpHealed) == 0x00002C, "Member 'FUserMatchInfoStats::HpHealed' has a wrong offset!");
static_assert(offsetof(FUserMatchInfoStats, ThreatsKilled) == 0x000030, "Member 'FUserMatchInfoStats::ThreatsKilled' has a wrong offset!");
static_assert(offsetof(FUserMatchInfoStats, ScreenName) == 0x000038, "Member 'FUserMatchInfoStats::ScreenName' has a wrong offset!");
static_assert(offsetof(FUserMatchInfoStats, ConsumableKills) == 0x000048, "Member 'FUserMatchInfoStats::ConsumableKills' has a wrong offset!");
static_assert(offsetof(FUserMatchInfoStats, Deaths) == 0x00004C, "Member 'FUserMatchInfoStats::Deaths' has a wrong offset!");
static_assert(offsetof(FUserMatchInfoStats, TeamScore) == 0x000050, "Member 'FUserMatchInfoStats::TeamScore' has a wrong offset!");
static_assert(offsetof(FUserMatchInfoStats, FlagsTaken) == 0x000054, "Member 'FUserMatchInfoStats::FlagsTaken' has a wrong offset!");
static_assert(offsetof(FUserMatchInfoStats, DamageDone) == 0x000058, "Member 'FUserMatchInfoStats::DamageDone' has a wrong offset!");

// ScriptStruct Flame.AnimAggregate
// 0x0040 (0x0040 - 0x0000)
struct FAnimAggregate final
{
public:
	class UAnimSequence*                          StanceTransition;                                  // 0x0000(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UBlendSpace*                            Stand;                                             // 0x0008(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UBlendSpace*                            Crouch;                                            // 0x0010(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UBlendSpace*                            Prone;                                             // 0x0018(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UBlendSpace*                            Aiming;                                            // 0x0020(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UBlendSpace*                            AimingProne;                                       // 0x0028(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAnimSequence*                          WeaponUneqip;                                      // 0x0030(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAnimSequence*                          WeaponEquip;                                       // 0x0038(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAnimAggregate) == 0x000008, "Wrong alignment on FAnimAggregate");
static_assert(sizeof(FAnimAggregate) == 0x000040, "Wrong size on FAnimAggregate");
static_assert(offsetof(FAnimAggregate, StanceTransition) == 0x000000, "Member 'FAnimAggregate::StanceTransition' has a wrong offset!");
static_assert(offsetof(FAnimAggregate, Stand) == 0x000008, "Member 'FAnimAggregate::Stand' has a wrong offset!");
static_assert(offsetof(FAnimAggregate, Crouch) == 0x000010, "Member 'FAnimAggregate::Crouch' has a wrong offset!");
static_assert(offsetof(FAnimAggregate, Prone) == 0x000018, "Member 'FAnimAggregate::Prone' has a wrong offset!");
static_assert(offsetof(FAnimAggregate, Aiming) == 0x000020, "Member 'FAnimAggregate::Aiming' has a wrong offset!");
static_assert(offsetof(FAnimAggregate, AimingProne) == 0x000028, "Member 'FAnimAggregate::AimingProne' has a wrong offset!");
static_assert(offsetof(FAnimAggregate, WeaponUneqip) == 0x000030, "Member 'FAnimAggregate::WeaponUneqip' has a wrong offset!");
static_assert(offsetof(FAnimAggregate, WeaponEquip) == 0x000038, "Member 'FAnimAggregate::WeaponEquip' has a wrong offset!");

// ScriptStruct Flame.WeaponDescriptor
// 0x0020 (0x0020 - 0x0000)
struct FWeaponDescriptor final
{
public:
	TSubclassOf<class AWeapon>                    WeaponType;                                        // 0x0000(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSubclassOf<class AWeaponSkin>                WeaponSkin;                                        // 0x0008(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSubclassOf<class AAmmoItem>                  AmmoType;                                          // 0x0010(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         AmmoInMagCount;                                    // 0x0018(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ChamberedAmmo;                                     // 0x001C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FWeaponDescriptor) == 0x000008, "Wrong alignment on FWeaponDescriptor");
static_assert(sizeof(FWeaponDescriptor) == 0x000020, "Wrong size on FWeaponDescriptor");
static_assert(offsetof(FWeaponDescriptor, WeaponType) == 0x000000, "Member 'FWeaponDescriptor::WeaponType' has a wrong offset!");
static_assert(offsetof(FWeaponDescriptor, WeaponSkin) == 0x000008, "Member 'FWeaponDescriptor::WeaponSkin' has a wrong offset!");
static_assert(offsetof(FWeaponDescriptor, AmmoType) == 0x000010, "Member 'FWeaponDescriptor::AmmoType' has a wrong offset!");
static_assert(offsetof(FWeaponDescriptor, AmmoInMagCount) == 0x000018, "Member 'FWeaponDescriptor::AmmoInMagCount' has a wrong offset!");
static_assert(offsetof(FWeaponDescriptor, ChamberedAmmo) == 0x00001C, "Member 'FWeaponDescriptor::ChamberedAmmo' has a wrong offset!");

// ScriptStruct Flame.ItemSlot
// 0x0010 (0x0010 - 0x0000)
struct FItemSlot final
{
public:
	TSubclassOf<class AItem>                      ObjectType;                                        // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Count;                                             // 0x0008(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FItemSlot) == 0x000008, "Wrong alignment on FItemSlot");
static_assert(sizeof(FItemSlot) == 0x000010, "Wrong size on FItemSlot");
static_assert(offsetof(FItemSlot, ObjectType) == 0x000000, "Member 'FItemSlot::ObjectType' has a wrong offset!");
static_assert(offsetof(FItemSlot, Count) == 0x000008, "Member 'FItemSlot::Count' has a wrong offset!");

// ScriptStruct Flame.LoadoutInfo
// 0x0028 (0x0028 - 0x0000)
struct FLoadoutInfo final
{
public:
	TArray<struct FWeaponDescriptor>              WeaponInfos;                                       // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FItemSlot>                      Backpack;                                          // 0x0010(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	int32                                         Cols;                                              // 0x0020(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Rows;                                              // 0x0024(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FLoadoutInfo) == 0x000008, "Wrong alignment on FLoadoutInfo");
static_assert(sizeof(FLoadoutInfo) == 0x000028, "Wrong size on FLoadoutInfo");
static_assert(offsetof(FLoadoutInfo, WeaponInfos) == 0x000000, "Member 'FLoadoutInfo::WeaponInfos' has a wrong offset!");
static_assert(offsetof(FLoadoutInfo, Backpack) == 0x000010, "Member 'FLoadoutInfo::Backpack' has a wrong offset!");
static_assert(offsetof(FLoadoutInfo, Cols) == 0x000020, "Member 'FLoadoutInfo::Cols' has a wrong offset!");
static_assert(offsetof(FLoadoutInfo, Rows) == 0x000024, "Member 'FLoadoutInfo::Rows' has a wrong offset!");

// ScriptStruct Flame.AimV2AimInputSettings
// 0x002C (0x002C - 0x0000)
struct FAimV2AimInputSettings final
{
public:
	float                                         InnerDeadzone;                                     // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         OuterDeadzone;                                     // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Exponent;                                          // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SensitivityX;                                      // 0x000C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SensitivityY;                                      // 0x0010(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         RumpupMultiplierX;                                 // 0x0014(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         RumpupMultiplierY;                                 // 0x0018(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         RumpupDelay;                                       // 0x001C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         RumpupApply;                                       // 0x0020(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         RumpupDecay;                                       // 0x0024(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ZoomExponent;                                      // 0x0028(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAimV2AimInputSettings) == 0x000004, "Wrong alignment on FAimV2AimInputSettings");
static_assert(sizeof(FAimV2AimInputSettings) == 0x00002C, "Wrong size on FAimV2AimInputSettings");
static_assert(offsetof(FAimV2AimInputSettings, InnerDeadzone) == 0x000000, "Member 'FAimV2AimInputSettings::InnerDeadzone' has a wrong offset!");
static_assert(offsetof(FAimV2AimInputSettings, OuterDeadzone) == 0x000004, "Member 'FAimV2AimInputSettings::OuterDeadzone' has a wrong offset!");
static_assert(offsetof(FAimV2AimInputSettings, Exponent) == 0x000008, "Member 'FAimV2AimInputSettings::Exponent' has a wrong offset!");
static_assert(offsetof(FAimV2AimInputSettings, SensitivityX) == 0x00000C, "Member 'FAimV2AimInputSettings::SensitivityX' has a wrong offset!");
static_assert(offsetof(FAimV2AimInputSettings, SensitivityY) == 0x000010, "Member 'FAimV2AimInputSettings::SensitivityY' has a wrong offset!");
static_assert(offsetof(FAimV2AimInputSettings, RumpupMultiplierX) == 0x000014, "Member 'FAimV2AimInputSettings::RumpupMultiplierX' has a wrong offset!");
static_assert(offsetof(FAimV2AimInputSettings, RumpupMultiplierY) == 0x000018, "Member 'FAimV2AimInputSettings::RumpupMultiplierY' has a wrong offset!");
static_assert(offsetof(FAimV2AimInputSettings, RumpupDelay) == 0x00001C, "Member 'FAimV2AimInputSettings::RumpupDelay' has a wrong offset!");
static_assert(offsetof(FAimV2AimInputSettings, RumpupApply) == 0x000020, "Member 'FAimV2AimInputSettings::RumpupApply' has a wrong offset!");
static_assert(offsetof(FAimV2AimInputSettings, RumpupDecay) == 0x000024, "Member 'FAimV2AimInputSettings::RumpupDecay' has a wrong offset!");
static_assert(offsetof(FAimV2AimInputSettings, ZoomExponent) == 0x000028, "Member 'FAimV2AimInputSettings::ZoomExponent' has a wrong offset!");

// ScriptStruct Flame.StickInputSettings
// 0x0090 (0x0090 - 0x0000)
struct FStickInputSettings final
{
public:
	float                                         MoveInnerDeadZone;                                 // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MoveOuterDeadZone;                                 // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MoveExponent;                                      // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FAimV2AimInputSettings                 AimV2Settings_Camera;                              // 0x000C(0x002C)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	struct FAimV2AimInputSettings                 AimV2Settings_1ADS;                                // 0x0038(0x002C)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	struct FAimV2AimInputSettings                 AimV2Settings_3ADS;                                // 0x0064(0x002C)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FStickInputSettings) == 0x000004, "Wrong alignment on FStickInputSettings");
static_assert(sizeof(FStickInputSettings) == 0x000090, "Wrong size on FStickInputSettings");
static_assert(offsetof(FStickInputSettings, MoveInnerDeadZone) == 0x000000, "Member 'FStickInputSettings::MoveInnerDeadZone' has a wrong offset!");
static_assert(offsetof(FStickInputSettings, MoveOuterDeadZone) == 0x000004, "Member 'FStickInputSettings::MoveOuterDeadZone' has a wrong offset!");
static_assert(offsetof(FStickInputSettings, MoveExponent) == 0x000008, "Member 'FStickInputSettings::MoveExponent' has a wrong offset!");
static_assert(offsetof(FStickInputSettings, AimV2Settings_Camera) == 0x00000C, "Member 'FStickInputSettings::AimV2Settings_Camera' has a wrong offset!");
static_assert(offsetof(FStickInputSettings, AimV2Settings_1ADS) == 0x000038, "Member 'FStickInputSettings::AimV2Settings_1ADS' has a wrong offset!");
static_assert(offsetof(FStickInputSettings, AimV2Settings_3ADS) == 0x000064, "Member 'FStickInputSettings::AimV2Settings_3ADS' has a wrong offset!");

// ScriptStruct Flame.CloudBattlePassSeasonClaim
// 0x000C (0x000C - 0x0000)
struct FCloudBattlePassSeasonClaim final
{
public:
	class FName                                   SeasonName;                                        // 0x0000(0x0008)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Level;                                             // 0x0008(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FCloudBattlePassSeasonClaim) == 0x000004, "Wrong alignment on FCloudBattlePassSeasonClaim");
static_assert(sizeof(FCloudBattlePassSeasonClaim) == 0x00000C, "Wrong size on FCloudBattlePassSeasonClaim");
static_assert(offsetof(FCloudBattlePassSeasonClaim, SeasonName) == 0x000000, "Member 'FCloudBattlePassSeasonClaim::SeasonName' has a wrong offset!");
static_assert(offsetof(FCloudBattlePassSeasonClaim, Level) == 0x000008, "Member 'FCloudBattlePassSeasonClaim::Level' has a wrong offset!");

// ScriptStruct Flame.CloudBattlePassLevelPurchase
// 0x0028 (0x0028 - 0x0000)
struct alignas(0x08) FCloudBattlePassLevelPurchase final
{
public:
	class FName                                   SeasonName;                                        // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         CurrentLevel;                                      // 0x0008(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Level;                                             // 0x000C(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         AccumulatedXp;                                     // 0x0010(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x14];                                      // 0x0014(0x0014)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FCloudBattlePassLevelPurchase) == 0x000008, "Wrong alignment on FCloudBattlePassLevelPurchase");
static_assert(sizeof(FCloudBattlePassLevelPurchase) == 0x000028, "Wrong size on FCloudBattlePassLevelPurchase");
static_assert(offsetof(FCloudBattlePassLevelPurchase, SeasonName) == 0x000000, "Member 'FCloudBattlePassLevelPurchase::SeasonName' has a wrong offset!");
static_assert(offsetof(FCloudBattlePassLevelPurchase, CurrentLevel) == 0x000008, "Member 'FCloudBattlePassLevelPurchase::CurrentLevel' has a wrong offset!");
static_assert(offsetof(FCloudBattlePassLevelPurchase, Level) == 0x00000C, "Member 'FCloudBattlePassLevelPurchase::Level' has a wrong offset!");
static_assert(offsetof(FCloudBattlePassLevelPurchase, AccumulatedXp) == 0x000010, "Member 'FCloudBattlePassLevelPurchase::AccumulatedXp' has a wrong offset!");

// ScriptStruct Flame.GameStoreOfferInfo
// 0x0028 (0x0028 - 0x0000)
struct FGameStoreOfferInfo final
{
public:
	TArray<struct FGameStoreProductInfo>          Products;                                          // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
	struct FTimespan                              ValidFor;                                          // 0x0010(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FDateTime                              ValidFrom;                                         // 0x0018(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FDateTime                              ValidTo;                                           // 0x0020(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FGameStoreOfferInfo) == 0x000008, "Wrong alignment on FGameStoreOfferInfo");
static_assert(sizeof(FGameStoreOfferInfo) == 0x000028, "Wrong size on FGameStoreOfferInfo");
static_assert(offsetof(FGameStoreOfferInfo, Products) == 0x000000, "Member 'FGameStoreOfferInfo::Products' has a wrong offset!");
static_assert(offsetof(FGameStoreOfferInfo, ValidFor) == 0x000010, "Member 'FGameStoreOfferInfo::ValidFor' has a wrong offset!");
static_assert(offsetof(FGameStoreOfferInfo, ValidFrom) == 0x000018, "Member 'FGameStoreOfferInfo::ValidFrom' has a wrong offset!");
static_assert(offsetof(FGameStoreOfferInfo, ValidTo) == 0x000020, "Member 'FGameStoreOfferInfo::ValidTo' has a wrong offset!");

// ScriptStruct Flame.HairMeshesForHeadgear
// 0x0050 (0x0050 - 0x0000)
struct FHairMeshesForHeadgear final
{
public:
	TMap<EHairUnderHeadgearMode, class USkeletalMesh*> Meshes;                                            // 0x0000(0x0050)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NativeAccessSpecifierPublic)
};
static_assert(alignof(FHairMeshesForHeadgear) == 0x000008, "Wrong alignment on FHairMeshesForHeadgear");
static_assert(sizeof(FHairMeshesForHeadgear) == 0x000050, "Wrong size on FHairMeshesForHeadgear");
static_assert(offsetof(FHairMeshesForHeadgear, Meshes) == 0x000000, "Member 'FHairMeshesForHeadgear::Meshes' has a wrong offset!");

// ScriptStruct Flame.CloudItemInfo
// 0x0010 (0x0018 - 0x0008)
struct FCloudItemInfo final : public FCustomJsonParser
{
public:
	TSubclassOf<class AItem>                      ItemClass;                                         // 0x0008(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Count;                                             // 0x0010(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FCloudItemInfo) == 0x000008, "Wrong alignment on FCloudItemInfo");
static_assert(sizeof(FCloudItemInfo) == 0x000018, "Wrong size on FCloudItemInfo");
static_assert(offsetof(FCloudItemInfo, ItemClass) == 0x000008, "Member 'FCloudItemInfo::ItemClass' has a wrong offset!");
static_assert(offsetof(FCloudItemInfo, Count) == 0x000010, "Member 'FCloudItemInfo::Count' has a wrong offset!");

// ScriptStruct Flame.CloudMatchWeapon
// 0x0020 (0x0020 - 0x0000)
struct FCloudMatchWeapon final
{
public:
	struct FCloudItemInfo                         Item;                                              // 0x0000(0x0018)(BlueprintVisible, NativeAccessSpecifierPublic)
	int32                                         MagazineCount;                                     // 0x0018(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FCloudMatchWeapon) == 0x000008, "Wrong alignment on FCloudMatchWeapon");
static_assert(sizeof(FCloudMatchWeapon) == 0x000020, "Wrong size on FCloudMatchWeapon");
static_assert(offsetof(FCloudMatchWeapon, Item) == 0x000000, "Member 'FCloudMatchWeapon::Item' has a wrong offset!");
static_assert(offsetof(FCloudMatchWeapon, MagazineCount) == 0x000018, "Member 'FCloudMatchWeapon::MagazineCount' has a wrong offset!");

// ScriptStruct Flame.CloudMatchWeaponGroup
// 0x0010 (0x0010 - 0x0000)
struct FCloudMatchWeaponGroup final
{
public:
	TArray<struct FCloudMatchWeapon>              Weapons;                                           // 0x0000(0x0010)(BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FCloudMatchWeaponGroup) == 0x000008, "Wrong alignment on FCloudMatchWeaponGroup");
static_assert(sizeof(FCloudMatchWeaponGroup) == 0x000010, "Wrong size on FCloudMatchWeaponGroup");
static_assert(offsetof(FCloudMatchWeaponGroup, Weapons) == 0x000000, "Member 'FCloudMatchWeaponGroup::Weapons' has a wrong offset!");

// ScriptStruct Flame.CloudMatchLootboxItem
// 0x0020 (0x0020 - 0x0000)
struct FCloudMatchLootboxItem final
{
public:
	struct FCloudItemInfo                         Item;                                              // 0x0000(0x0018)(BlueprintVisible, NativeAccessSpecifierPublic)
	bool                                          ForceSpawn;                                        // 0x0018(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x3];                                       // 0x0019(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Weight;                                            // 0x001C(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FCloudMatchLootboxItem) == 0x000008, "Wrong alignment on FCloudMatchLootboxItem");
static_assert(sizeof(FCloudMatchLootboxItem) == 0x000020, "Wrong size on FCloudMatchLootboxItem");
static_assert(offsetof(FCloudMatchLootboxItem, Item) == 0x000000, "Member 'FCloudMatchLootboxItem::Item' has a wrong offset!");
static_assert(offsetof(FCloudMatchLootboxItem, ForceSpawn) == 0x000018, "Member 'FCloudMatchLootboxItem::ForceSpawn' has a wrong offset!");
static_assert(offsetof(FCloudMatchLootboxItem, Weight) == 0x00001C, "Member 'FCloudMatchLootboxItem::Weight' has a wrong offset!");

// ScriptStruct Flame.CloudLoadout
// 0x0028 (0x0028 - 0x0000)
struct FCloudLoadout final
{
public:
	TArray<struct FCloudMatchWeaponGroup>         Weapons;                                           // 0x0000(0x0010)(BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FCloudMatchLootboxItem>         Items;                                             // 0x0010(0x0010)(BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	int32                                         ItemsToSpawn;                                      // 0x0020(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_24[0x4];                                       // 0x0024(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FCloudLoadout) == 0x000008, "Wrong alignment on FCloudLoadout");
static_assert(sizeof(FCloudLoadout) == 0x000028, "Wrong size on FCloudLoadout");
static_assert(offsetof(FCloudLoadout, Weapons) == 0x000000, "Member 'FCloudLoadout::Weapons' has a wrong offset!");
static_assert(offsetof(FCloudLoadout, Items) == 0x000010, "Member 'FCloudLoadout::Items' has a wrong offset!");
static_assert(offsetof(FCloudLoadout, ItemsToSpawn) == 0x000020, "Member 'FCloudLoadout::ItemsToSpawn' has a wrong offset!");

// ScriptStruct Flame.CloudMatchLootbox
// 0x0030 (0x0030 - 0x0000)
struct FCloudMatchLootbox final
{
public:
	ECloudMatchLootboxType                        LootboxType;                                       // 0x0000(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         LootboxSpawnCount;                                 // 0x0004(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FCloudLoadout                          Loadout;                                           // 0x0008(0x0028)(BlueprintVisible, NativeAccessSpecifierPublic)
};
static_assert(alignof(FCloudMatchLootbox) == 0x000008, "Wrong alignment on FCloudMatchLootbox");
static_assert(sizeof(FCloudMatchLootbox) == 0x000030, "Wrong size on FCloudMatchLootbox");
static_assert(offsetof(FCloudMatchLootbox, LootboxType) == 0x000000, "Member 'FCloudMatchLootbox::LootboxType' has a wrong offset!");
static_assert(offsetof(FCloudMatchLootbox, LootboxSpawnCount) == 0x000004, "Member 'FCloudMatchLootbox::LootboxSpawnCount' has a wrong offset!");
static_assert(offsetof(FCloudMatchLootbox, Loadout) == 0x000008, "Member 'FCloudMatchLootbox::Loadout' has a wrong offset!");

// ScriptStruct Flame.CharacterSwayParameters
// 0x0018 (0x0018 - 0x0000)
struct FCharacterSwayParameters final
{
public:
	bool                                          bCanHoldBreath;                                    // 0x0000(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         TransitionSpeed;                                   // 0x0004(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         InhalationDuration;                                // 0x0008(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Stabilisation;                                     // 0x000C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Distortion;                                        // 0x0010(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DistortionThirdPersonMultiplier;                   // 0x0014(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FCharacterSwayParameters) == 0x000004, "Wrong alignment on FCharacterSwayParameters");
static_assert(sizeof(FCharacterSwayParameters) == 0x000018, "Wrong size on FCharacterSwayParameters");
static_assert(offsetof(FCharacterSwayParameters, bCanHoldBreath) == 0x000000, "Member 'FCharacterSwayParameters::bCanHoldBreath' has a wrong offset!");
static_assert(offsetof(FCharacterSwayParameters, TransitionSpeed) == 0x000004, "Member 'FCharacterSwayParameters::TransitionSpeed' has a wrong offset!");
static_assert(offsetof(FCharacterSwayParameters, InhalationDuration) == 0x000008, "Member 'FCharacterSwayParameters::InhalationDuration' has a wrong offset!");
static_assert(offsetof(FCharacterSwayParameters, Stabilisation) == 0x00000C, "Member 'FCharacterSwayParameters::Stabilisation' has a wrong offset!");
static_assert(offsetof(FCharacterSwayParameters, Distortion) == 0x000010, "Member 'FCharacterSwayParameters::Distortion' has a wrong offset!");
static_assert(offsetof(FCharacterSwayParameters, DistortionThirdPersonMultiplier) == 0x000014, "Member 'FCharacterSwayParameters::DistortionThirdPersonMultiplier' has a wrong offset!");

// ScriptStruct Flame.ExplosionEffect
// 0x0018 (0x0018 - 0x0000)
struct FExplosionEffect final
{
public:
	class AActor*                                 Owner;                                             // 0x0000(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Damage;                                            // 0x0008(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Flash;                                             // 0x000C(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Stagger;                                           // 0x0010(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Concussion;                                        // 0x0014(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FExplosionEffect) == 0x000008, "Wrong alignment on FExplosionEffect");
static_assert(sizeof(FExplosionEffect) == 0x000018, "Wrong size on FExplosionEffect");
static_assert(offsetof(FExplosionEffect, Owner) == 0x000000, "Member 'FExplosionEffect::Owner' has a wrong offset!");
static_assert(offsetof(FExplosionEffect, Damage) == 0x000008, "Member 'FExplosionEffect::Damage' has a wrong offset!");
static_assert(offsetof(FExplosionEffect, Flash) == 0x00000C, "Member 'FExplosionEffect::Flash' has a wrong offset!");
static_assert(offsetof(FExplosionEffect, Stagger) == 0x000010, "Member 'FExplosionEffect::Stagger' has a wrong offset!");
static_assert(offsetof(FExplosionEffect, Concussion) == 0x000014, "Member 'FExplosionEffect::Concussion' has a wrong offset!");

// ScriptStruct Flame.LeaderboardDataRow
// 0x0098 (0x0098 - 0x0000)
struct FLeaderboardDataRow final
{
public:
	int32                                         Rank;                                              // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FUniqueNetIdRepl                       Userid;                                            // 0x0008(0x0028)(BlueprintVisible, BlueprintReadOnly, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Name;                                              // 0x0030(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         StatValue;                                         // 0x0040(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Percentile;                                        // 0x0044(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TMap<class FName, int32>                      StatValues;                                        // 0x0048(0x0050)(BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
};
static_assert(alignof(FLeaderboardDataRow) == 0x000008, "Wrong alignment on FLeaderboardDataRow");
static_assert(sizeof(FLeaderboardDataRow) == 0x000098, "Wrong size on FLeaderboardDataRow");
static_assert(offsetof(FLeaderboardDataRow, Rank) == 0x000000, "Member 'FLeaderboardDataRow::Rank' has a wrong offset!");
static_assert(offsetof(FLeaderboardDataRow, Userid) == 0x000008, "Member 'FLeaderboardDataRow::Userid' has a wrong offset!");
static_assert(offsetof(FLeaderboardDataRow, Name) == 0x000030, "Member 'FLeaderboardDataRow::Name' has a wrong offset!");
static_assert(offsetof(FLeaderboardDataRow, StatValue) == 0x000040, "Member 'FLeaderboardDataRow::StatValue' has a wrong offset!");
static_assert(offsetof(FLeaderboardDataRow, Percentile) == 0x000044, "Member 'FLeaderboardDataRow::Percentile' has a wrong offset!");
static_assert(offsetof(FLeaderboardDataRow, StatValues) == 0x000048, "Member 'FLeaderboardDataRow::StatValues' has a wrong offset!");

// ScriptStruct Flame.CloudRawDataSettings
// 0x00C0 (0x00C0 - 0x0000)
struct FCloudRawDataSettings final
{
public:
	class FString                                 GetCloudRawDataAllUsersOrderedClientRequestName;   // 0x0000(0x0010)(Edit, ZeroConstructor, Config, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 GetCloudRawDataAllUsersOrderedServerRequestName;   // 0x0010(0x0010)(Edit, ZeroConstructor, Config, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 GetCloudRawDataAllUsersClientRequestName;          // 0x0020(0x0010)(Edit, ZeroConstructor, Config, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 GetCloudRawDataAllUsersServerRequestName;          // 0x0030(0x0010)(Edit, ZeroConstructor, Config, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 GetCloudAllRawDataForUserClientRequestName;        // 0x0040(0x0010)(Edit, ZeroConstructor, Config, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 GetCloudAllRawDataForUserServerRequestName;        // 0x0050(0x0010)(Edit, ZeroConstructor, Config, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 GetCloudRawDataKeyClientRequestName;               // 0x0060(0x0010)(Edit, ZeroConstructor, Config, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 GetCloudRawDataKeyServerRequestName;               // 0x0070(0x0010)(Edit, ZeroConstructor, Config, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 SetCloudRawDataKeyClientRequestName;               // 0x0080(0x0010)(Edit, ZeroConstructor, Config, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 SetCloudRawDataKeyServerRequestName;               // 0x0090(0x0010)(Edit, ZeroConstructor, Config, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ClearCloudRawKeyDataClientRequestName;             // 0x00A0(0x0010)(Edit, ZeroConstructor, Config, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ClearCloudRawKeyDataServerRequestName;             // 0x00B0(0x0010)(Edit, ZeroConstructor, Config, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FCloudRawDataSettings) == 0x000008, "Wrong alignment on FCloudRawDataSettings");
static_assert(sizeof(FCloudRawDataSettings) == 0x0000C0, "Wrong size on FCloudRawDataSettings");
static_assert(offsetof(FCloudRawDataSettings, GetCloudRawDataAllUsersOrderedClientRequestName) == 0x000000, "Member 'FCloudRawDataSettings::GetCloudRawDataAllUsersOrderedClientRequestName' has a wrong offset!");
static_assert(offsetof(FCloudRawDataSettings, GetCloudRawDataAllUsersOrderedServerRequestName) == 0x000010, "Member 'FCloudRawDataSettings::GetCloudRawDataAllUsersOrderedServerRequestName' has a wrong offset!");
static_assert(offsetof(FCloudRawDataSettings, GetCloudRawDataAllUsersClientRequestName) == 0x000020, "Member 'FCloudRawDataSettings::GetCloudRawDataAllUsersClientRequestName' has a wrong offset!");
static_assert(offsetof(FCloudRawDataSettings, GetCloudRawDataAllUsersServerRequestName) == 0x000030, "Member 'FCloudRawDataSettings::GetCloudRawDataAllUsersServerRequestName' has a wrong offset!");
static_assert(offsetof(FCloudRawDataSettings, GetCloudAllRawDataForUserClientRequestName) == 0x000040, "Member 'FCloudRawDataSettings::GetCloudAllRawDataForUserClientRequestName' has a wrong offset!");
static_assert(offsetof(FCloudRawDataSettings, GetCloudAllRawDataForUserServerRequestName) == 0x000050, "Member 'FCloudRawDataSettings::GetCloudAllRawDataForUserServerRequestName' has a wrong offset!");
static_assert(offsetof(FCloudRawDataSettings, GetCloudRawDataKeyClientRequestName) == 0x000060, "Member 'FCloudRawDataSettings::GetCloudRawDataKeyClientRequestName' has a wrong offset!");
static_assert(offsetof(FCloudRawDataSettings, GetCloudRawDataKeyServerRequestName) == 0x000070, "Member 'FCloudRawDataSettings::GetCloudRawDataKeyServerRequestName' has a wrong offset!");
static_assert(offsetof(FCloudRawDataSettings, SetCloudRawDataKeyClientRequestName) == 0x000080, "Member 'FCloudRawDataSettings::SetCloudRawDataKeyClientRequestName' has a wrong offset!");
static_assert(offsetof(FCloudRawDataSettings, SetCloudRawDataKeyServerRequestName) == 0x000090, "Member 'FCloudRawDataSettings::SetCloudRawDataKeyServerRequestName' has a wrong offset!");
static_assert(offsetof(FCloudRawDataSettings, ClearCloudRawKeyDataClientRequestName) == 0x0000A0, "Member 'FCloudRawDataSettings::ClearCloudRawKeyDataClientRequestName' has a wrong offset!");
static_assert(offsetof(FCloudRawDataSettings, ClearCloudRawKeyDataServerRequestName) == 0x0000B0, "Member 'FCloudRawDataSettings::ClearCloudRawKeyDataServerRequestName' has a wrong offset!");

// ScriptStruct Flame.KillerUserInfo
// 0x0040 (0x0040 - 0x0000)
struct FKillerUserInfo final
{
public:
	class FString                                 KillerUserId;                                      // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLoadoutInfo                           KillerLoadout;                                     // 0x0010(0x0028)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	TSubclassOf<class AItem>                      KillerWeapon;                                      // 0x0038(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FKillerUserInfo) == 0x000008, "Wrong alignment on FKillerUserInfo");
static_assert(sizeof(FKillerUserInfo) == 0x000040, "Wrong size on FKillerUserInfo");
static_assert(offsetof(FKillerUserInfo, KillerUserId) == 0x000000, "Member 'FKillerUserInfo::KillerUserId' has a wrong offset!");
static_assert(offsetof(FKillerUserInfo, KillerLoadout) == 0x000010, "Member 'FKillerUserInfo::KillerLoadout' has a wrong offset!");
static_assert(offsetof(FKillerUserInfo, KillerWeapon) == 0x000038, "Member 'FKillerUserInfo::KillerWeapon' has a wrong offset!");

// ScriptStruct Flame.ContextSpeedModifier
// 0x0018 (0x0018 - 0x0000)
struct alignas(0x04) FContextSpeedModifier final
{
public:
	uint8                                         Pad_0[0x18];                                       // 0x0000(0x0018)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FContextSpeedModifier) == 0x000004, "Wrong alignment on FContextSpeedModifier");
static_assert(sizeof(FContextSpeedModifier) == 0x000018, "Wrong size on FContextSpeedModifier");

// ScriptStruct Flame.PartsList
// 0x0008 (0x0128 - 0x0120)
struct FPartsList : public FItemClassTableRowWithInsurance
{
public:
	int32                                         DeconstructCost;                                   // 0x0120(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         StackSize;                                         // 0x0124(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FPartsList) == 0x000008, "Wrong alignment on FPartsList");
static_assert(sizeof(FPartsList) == 0x000128, "Wrong size on FPartsList");
static_assert(offsetof(FPartsList, DeconstructCost) == 0x000120, "Member 'FPartsList::DeconstructCost' has a wrong offset!");
static_assert(offsetof(FPartsList, StackSize) == 0x000124, "Member 'FPartsList::StackSize' has a wrong offset!");

// ScriptStruct Flame.CloudRequestResult
// 0x0058 (0x0058 - 0x0000)
struct FCloudRequestResult final
{
public:
	ECloudRequestResult                           Result;                                            // 0x0000(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         ResultCode;                                        // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         StatusCode;                                        // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ErrorCode;                                         // 0x000C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Message;                                           // 0x0010(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         RequestId;                                         // 0x0020(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_24[0x34];                                      // 0x0024(0x0034)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FCloudRequestResult) == 0x000008, "Wrong alignment on FCloudRequestResult");
static_assert(sizeof(FCloudRequestResult) == 0x000058, "Wrong size on FCloudRequestResult");
static_assert(offsetof(FCloudRequestResult, Result) == 0x000000, "Member 'FCloudRequestResult::Result' has a wrong offset!");
static_assert(offsetof(FCloudRequestResult, ResultCode) == 0x000004, "Member 'FCloudRequestResult::ResultCode' has a wrong offset!");
static_assert(offsetof(FCloudRequestResult, StatusCode) == 0x000008, "Member 'FCloudRequestResult::StatusCode' has a wrong offset!");
static_assert(offsetof(FCloudRequestResult, ErrorCode) == 0x00000C, "Member 'FCloudRequestResult::ErrorCode' has a wrong offset!");
static_assert(offsetof(FCloudRequestResult, Message) == 0x000010, "Member 'FCloudRequestResult::Message' has a wrong offset!");
static_assert(offsetof(FCloudRequestResult, RequestId) == 0x000020, "Member 'FCloudRequestResult::RequestId' has a wrong offset!");

// ScriptStruct Flame.TargetSnappingConfiguration
// 0x000C (0x000C - 0x0000)
struct FTargetSnappingConfiguration final
{
public:
	float                                         CircleRadius;                                      // 0x0000(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Cooldown;                                          // 0x0004(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SnapZone;                                          // 0x0008(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FTargetSnappingConfiguration) == 0x000004, "Wrong alignment on FTargetSnappingConfiguration");
static_assert(sizeof(FTargetSnappingConfiguration) == 0x00000C, "Wrong size on FTargetSnappingConfiguration");
static_assert(offsetof(FTargetSnappingConfiguration, CircleRadius) == 0x000000, "Member 'FTargetSnappingConfiguration::CircleRadius' has a wrong offset!");
static_assert(offsetof(FTargetSnappingConfiguration, Cooldown) == 0x000004, "Member 'FTargetSnappingConfiguration::Cooldown' has a wrong offset!");
static_assert(offsetof(FTargetSnappingConfiguration, SnapZone) == 0x000008, "Member 'FTargetSnappingConfiguration::SnapZone' has a wrong offset!");

// ScriptStruct Flame.PlatformConfiguration
// 0x0040 (0x0040 - 0x0000)
struct FPlatformConfiguration final
{
public:
	TArray<float>                                 RotationalMovementStrength;                        // 0x0000(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic)
	TArray<float>                                 SlowingEffectStrength;                             // 0x0010(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic)
	struct FTargetSnappingConfiguration           TargetSnappingStrength;                            // 0x0020(0x000C)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_2C[0x4];                                       // 0x002C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<float>                                 MaximumDistance;                                   // 0x0030(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic)
};
static_assert(alignof(FPlatformConfiguration) == 0x000008, "Wrong alignment on FPlatformConfiguration");
static_assert(sizeof(FPlatformConfiguration) == 0x000040, "Wrong size on FPlatformConfiguration");
static_assert(offsetof(FPlatformConfiguration, RotationalMovementStrength) == 0x000000, "Member 'FPlatformConfiguration::RotationalMovementStrength' has a wrong offset!");
static_assert(offsetof(FPlatformConfiguration, SlowingEffectStrength) == 0x000010, "Member 'FPlatformConfiguration::SlowingEffectStrength' has a wrong offset!");
static_assert(offsetof(FPlatformConfiguration, TargetSnappingStrength) == 0x000020, "Member 'FPlatformConfiguration::TargetSnappingStrength' has a wrong offset!");
static_assert(offsetof(FPlatformConfiguration, MaximumDistance) == 0x000030, "Member 'FPlatformConfiguration::MaximumDistance' has a wrong offset!");

// ScriptStruct Flame.MirrorAnim
// 0x0078 (0x0088 - 0x0010)
struct FMirrorAnim final : public FAnimNode_Base
{
public:
	struct FPoseLink                              BasePose;                                          // 0x0010(0x0010)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	class UAnimationMirrorData*                   MAnimMirrorData;                                   // 0x0020(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bMirrorBoolEnabled;                                // 0x0028(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_29[0x3];                                       // 0x0029(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         ActualAlpha;                                       // 0x002C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FInputAlphaBoolBlend                   AlphaBoolBlend;                                    // 0x0030(0x0048)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	EMirrorDir                                    ForwardAxis;                                       // 0x0078(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EMirrorDir                                    RightAxis;                                         // 0x0079(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EMirrorDir                                    ForwardWeaponBoneAxis;                             // 0x007A(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EMirrorDir                                    RightWeaponBoneAxis;                               // 0x007B(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_7C[0xC];                                       // 0x007C(0x000C)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FMirrorAnim) == 0x000008, "Wrong alignment on FMirrorAnim");
static_assert(sizeof(FMirrorAnim) == 0x000088, "Wrong size on FMirrorAnim");
static_assert(offsetof(FMirrorAnim, BasePose) == 0x000010, "Member 'FMirrorAnim::BasePose' has a wrong offset!");
static_assert(offsetof(FMirrorAnim, MAnimMirrorData) == 0x000020, "Member 'FMirrorAnim::MAnimMirrorData' has a wrong offset!");
static_assert(offsetof(FMirrorAnim, bMirrorBoolEnabled) == 0x000028, "Member 'FMirrorAnim::bMirrorBoolEnabled' has a wrong offset!");
static_assert(offsetof(FMirrorAnim, ActualAlpha) == 0x00002C, "Member 'FMirrorAnim::ActualAlpha' has a wrong offset!");
static_assert(offsetof(FMirrorAnim, AlphaBoolBlend) == 0x000030, "Member 'FMirrorAnim::AlphaBoolBlend' has a wrong offset!");
static_assert(offsetof(FMirrorAnim, ForwardAxis) == 0x000078, "Member 'FMirrorAnim::ForwardAxis' has a wrong offset!");
static_assert(offsetof(FMirrorAnim, RightAxis) == 0x000079, "Member 'FMirrorAnim::RightAxis' has a wrong offset!");
static_assert(offsetof(FMirrorAnim, ForwardWeaponBoneAxis) == 0x00007A, "Member 'FMirrorAnim::ForwardWeaponBoneAxis' has a wrong offset!");
static_assert(offsetof(FMirrorAnim, RightWeaponBoneAxis) == 0x00007B, "Member 'FMirrorAnim::RightWeaponBoneAxis' has a wrong offset!");

// ScriptStruct Flame.CloudImprovementInfo
// 0x0078 (0x0078 - 0x0000)
struct FCloudImprovementInfo final
{
public:
	class FString                                 SlotName;                                          // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSubclassOf<class AShelterSlot>               SlotClass;                                         // 0x0010(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Name;                                              // 0x0018(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSubclassOf<class AShelterImprovement>        ImprovementClass;                                  // 0x0028(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Level;                                             // 0x0030(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_34[0x4];                                       // 0x0034(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FDateTime                              BuiltTimeStamp;                                    // 0x0038(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          UpgradeInProgress;                                 // 0x0040(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_41[0x7];                                       // 0x0041(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FDateTime                              UpgradeStartedTimestamp;                           // 0x0048(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FDateTime                              UpgradeEndTimestamp;                               // 0x0050(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FDateTime                              LastLootedTimestamp;                               // 0x0058(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         GeneratorRate;                                     // 0x0060(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         GeneratorRateBase;                                 // 0x0064(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         GeneratorRateMultiplier;                           // 0x0068(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         StoredCommodity;                                   // 0x006C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FDateTime                              StoredCommodityUpdateTimestamp;                    // 0x0070(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FCloudImprovementInfo) == 0x000008, "Wrong alignment on FCloudImprovementInfo");
static_assert(sizeof(FCloudImprovementInfo) == 0x000078, "Wrong size on FCloudImprovementInfo");
static_assert(offsetof(FCloudImprovementInfo, SlotName) == 0x000000, "Member 'FCloudImprovementInfo::SlotName' has a wrong offset!");
static_assert(offsetof(FCloudImprovementInfo, SlotClass) == 0x000010, "Member 'FCloudImprovementInfo::SlotClass' has a wrong offset!");
static_assert(offsetof(FCloudImprovementInfo, Name) == 0x000018, "Member 'FCloudImprovementInfo::Name' has a wrong offset!");
static_assert(offsetof(FCloudImprovementInfo, ImprovementClass) == 0x000028, "Member 'FCloudImprovementInfo::ImprovementClass' has a wrong offset!");
static_assert(offsetof(FCloudImprovementInfo, Level) == 0x000030, "Member 'FCloudImprovementInfo::Level' has a wrong offset!");
static_assert(offsetof(FCloudImprovementInfo, BuiltTimeStamp) == 0x000038, "Member 'FCloudImprovementInfo::BuiltTimeStamp' has a wrong offset!");
static_assert(offsetof(FCloudImprovementInfo, UpgradeInProgress) == 0x000040, "Member 'FCloudImprovementInfo::UpgradeInProgress' has a wrong offset!");
static_assert(offsetof(FCloudImprovementInfo, UpgradeStartedTimestamp) == 0x000048, "Member 'FCloudImprovementInfo::UpgradeStartedTimestamp' has a wrong offset!");
static_assert(offsetof(FCloudImprovementInfo, UpgradeEndTimestamp) == 0x000050, "Member 'FCloudImprovementInfo::UpgradeEndTimestamp' has a wrong offset!");
static_assert(offsetof(FCloudImprovementInfo, LastLootedTimestamp) == 0x000058, "Member 'FCloudImprovementInfo::LastLootedTimestamp' has a wrong offset!");
static_assert(offsetof(FCloudImprovementInfo, GeneratorRate) == 0x000060, "Member 'FCloudImprovementInfo::GeneratorRate' has a wrong offset!");
static_assert(offsetof(FCloudImprovementInfo, GeneratorRateBase) == 0x000064, "Member 'FCloudImprovementInfo::GeneratorRateBase' has a wrong offset!");
static_assert(offsetof(FCloudImprovementInfo, GeneratorRateMultiplier) == 0x000068, "Member 'FCloudImprovementInfo::GeneratorRateMultiplier' has a wrong offset!");
static_assert(offsetof(FCloudImprovementInfo, StoredCommodity) == 0x00006C, "Member 'FCloudImprovementInfo::StoredCommodity' has a wrong offset!");
static_assert(offsetof(FCloudImprovementInfo, StoredCommodityUpdateTimestamp) == 0x000070, "Member 'FCloudImprovementInfo::StoredCommodityUpdateTimestamp' has a wrong offset!");

// ScriptStruct Flame.CloudShelterEvent
// 0x0090 (0x0090 - 0x0000)
struct FCloudShelterEvent final
{
public:
	struct FCloudImprovementInfo                  Improvement;                                       // 0x0000(0x0078)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	class FString                                 Op;                                                // 0x0078(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         FromLevel;                                         // 0x0088(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ToLevel;                                           // 0x008C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FCloudShelterEvent) == 0x000008, "Wrong alignment on FCloudShelterEvent");
static_assert(sizeof(FCloudShelterEvent) == 0x000090, "Wrong size on FCloudShelterEvent");
static_assert(offsetof(FCloudShelterEvent, Improvement) == 0x000000, "Member 'FCloudShelterEvent::Improvement' has a wrong offset!");
static_assert(offsetof(FCloudShelterEvent, Op) == 0x000078, "Member 'FCloudShelterEvent::Op' has a wrong offset!");
static_assert(offsetof(FCloudShelterEvent, FromLevel) == 0x000088, "Member 'FCloudShelterEvent::FromLevel' has a wrong offset!");
static_assert(offsetof(FCloudShelterEvent, ToLevel) == 0x00008C, "Member 'FCloudShelterEvent::ToLevel' has a wrong offset!");

// ScriptStruct Flame.CloudShelterEventList
// 0x0010 (0x0010 - 0x0000)
struct FCloudShelterEventList final
{
public:
	TArray<struct FCloudShelterEvent>             Events;                                            // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FCloudShelterEventList) == 0x000008, "Wrong alignment on FCloudShelterEventList");
static_assert(sizeof(FCloudShelterEventList) == 0x000010, "Wrong size on FCloudShelterEventList");
static_assert(offsetof(FCloudShelterEventList, Events) == 0x000000, "Member 'FCloudShelterEventList::Events' has a wrong offset!");

// ScriptStruct Flame.IKBones
// 0x0024 (0x0024 - 0x0000)
struct FIKBones final
{
public:
	struct FBoneReference                         IKFootBone;                                        // 0x0000(0x0010)(Edit, NoDestructor, NativeAccessSpecifierPublic)
	struct FBoneReference                         FKFootBone;                                        // 0x0010(0x0010)(Edit, NoDestructor, NativeAccessSpecifierPublic)
	int32                                         NumBonesInLimb;                                    // 0x0020(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FIKBones) == 0x000004, "Wrong alignment on FIKBones");
static_assert(sizeof(FIKBones) == 0x000024, "Wrong size on FIKBones");
static_assert(offsetof(FIKBones, IKFootBone) == 0x000000, "Member 'FIKBones::IKFootBone' has a wrong offset!");
static_assert(offsetof(FIKBones, FKFootBone) == 0x000010, "Member 'FIKBones::FKFootBone' has a wrong offset!");
static_assert(offsetof(FIKBones, NumBonesInLimb) == 0x000020, "Member 'FIKBones::NumBonesInLimb' has a wrong offset!");

// ScriptStruct Flame.CloudChallengeSlotInfo
// 0x0050 (0x0050 - 0x0000)
struct FCloudChallengeSlotInfo final
{
public:
	int32                                         SlotId;                                            // 0x0000(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 SlotCategory;                                      // 0x0008(0x0010)(BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ChallengeCategory;                                 // 0x0018(0x0010)(BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   ChallengeName;                                     // 0x0028(0x0008)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Progress;                                          // 0x0030(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_34[0x4];                                       // 0x0034(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FDateTime                              AssignedTime;                                      // 0x0038(0x0008)(BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FDateTime                              CompletedTime;                                     // 0x0040(0x0008)(BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReRollPrice;                                       // 0x0048(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4C[0x4];                                       // 0x004C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FCloudChallengeSlotInfo) == 0x000008, "Wrong alignment on FCloudChallengeSlotInfo");
static_assert(sizeof(FCloudChallengeSlotInfo) == 0x000050, "Wrong size on FCloudChallengeSlotInfo");
static_assert(offsetof(FCloudChallengeSlotInfo, SlotId) == 0x000000, "Member 'FCloudChallengeSlotInfo::SlotId' has a wrong offset!");
static_assert(offsetof(FCloudChallengeSlotInfo, SlotCategory) == 0x000008, "Member 'FCloudChallengeSlotInfo::SlotCategory' has a wrong offset!");
static_assert(offsetof(FCloudChallengeSlotInfo, ChallengeCategory) == 0x000018, "Member 'FCloudChallengeSlotInfo::ChallengeCategory' has a wrong offset!");
static_assert(offsetof(FCloudChallengeSlotInfo, ChallengeName) == 0x000028, "Member 'FCloudChallengeSlotInfo::ChallengeName' has a wrong offset!");
static_assert(offsetof(FCloudChallengeSlotInfo, Progress) == 0x000030, "Member 'FCloudChallengeSlotInfo::Progress' has a wrong offset!");
static_assert(offsetof(FCloudChallengeSlotInfo, AssignedTime) == 0x000038, "Member 'FCloudChallengeSlotInfo::AssignedTime' has a wrong offset!");
static_assert(offsetof(FCloudChallengeSlotInfo, CompletedTime) == 0x000040, "Member 'FCloudChallengeSlotInfo::CompletedTime' has a wrong offset!");
static_assert(offsetof(FCloudChallengeSlotInfo, ReRollPrice) == 0x000048, "Member 'FCloudChallengeSlotInfo::ReRollPrice' has a wrong offset!");

// ScriptStruct Flame.CloudChallengeCategorySlots
// 0x0010 (0x0010 - 0x0000)
struct FCloudChallengeCategorySlots final
{
public:
	TArray<struct FCloudChallengeSlotInfo>        Slots;                                             // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FCloudChallengeCategorySlots) == 0x000008, "Wrong alignment on FCloudChallengeCategorySlots");
static_assert(sizeof(FCloudChallengeCategorySlots) == 0x000010, "Wrong size on FCloudChallengeCategorySlots");
static_assert(offsetof(FCloudChallengeCategorySlots, Slots) == 0x000000, "Member 'FCloudChallengeCategorySlots::Slots' has a wrong offset!");

// ScriptStruct Flame.CloudGetChallengeResponse
// 0x0058 (0x0058 - 0x0000)
struct FCloudGetChallengeResponse final
{
public:
	TMap<class FString, struct FCloudChallengeCategorySlots> CategorySlots;                                     // 0x0000(0x0050)(BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	bool                                          IsNextRerollFree;                                  // 0x0050(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_51[0x7];                                       // 0x0051(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FCloudGetChallengeResponse) == 0x000008, "Wrong alignment on FCloudGetChallengeResponse");
static_assert(sizeof(FCloudGetChallengeResponse) == 0x000058, "Wrong size on FCloudGetChallengeResponse");
static_assert(offsetof(FCloudGetChallengeResponse, CategorySlots) == 0x000000, "Member 'FCloudGetChallengeResponse::CategorySlots' has a wrong offset!");
static_assert(offsetof(FCloudGetChallengeResponse, IsNextRerollFree) == 0x000050, "Member 'FCloudGetChallengeResponse::IsNextRerollFree' has a wrong offset!");

// ScriptStruct Flame.ClientHeartBeatInfo
// 0x0020 (0x0020 - 0x0000)
struct FClientHeartBeatInfo final
{
public:
	TArray<float>                                 FPS;                                               // 0x0000(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<float>                                 DynamicResolution;                                 // 0x0010(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FClientHeartBeatInfo) == 0x000008, "Wrong alignment on FClientHeartBeatInfo");
static_assert(sizeof(FClientHeartBeatInfo) == 0x000020, "Wrong size on FClientHeartBeatInfo");
static_assert(offsetof(FClientHeartBeatInfo, FPS) == 0x000000, "Member 'FClientHeartBeatInfo::FPS' has a wrong offset!");
static_assert(offsetof(FClientHeartBeatInfo, DynamicResolution) == 0x000010, "Member 'FClientHeartBeatInfo::DynamicResolution' has a wrong offset!");

// ScriptStruct Flame.CloudBattlePassMatchResults
// 0x001C (0x001C - 0x0000)
struct FCloudBattlePassMatchResults final
{
public:
	class FName                                   ActiveSeasonName;                                  // 0x0000(0x0008)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         NewTotalXp;                                        // 0x0008(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         GainedBaseXp;                                      // 0x000C(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         GainedBonusXp;                                     // 0x0010(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ExperienceBooster;                                 // 0x0014(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          PremiumActive;                                     // 0x0018(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x3];                                       // 0x0019(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FCloudBattlePassMatchResults) == 0x000004, "Wrong alignment on FCloudBattlePassMatchResults");
static_assert(sizeof(FCloudBattlePassMatchResults) == 0x00001C, "Wrong size on FCloudBattlePassMatchResults");
static_assert(offsetof(FCloudBattlePassMatchResults, ActiveSeasonName) == 0x000000, "Member 'FCloudBattlePassMatchResults::ActiveSeasonName' has a wrong offset!");
static_assert(offsetof(FCloudBattlePassMatchResults, NewTotalXp) == 0x000008, "Member 'FCloudBattlePassMatchResults::NewTotalXp' has a wrong offset!");
static_assert(offsetof(FCloudBattlePassMatchResults, GainedBaseXp) == 0x00000C, "Member 'FCloudBattlePassMatchResults::GainedBaseXp' has a wrong offset!");
static_assert(offsetof(FCloudBattlePassMatchResults, GainedBonusXp) == 0x000010, "Member 'FCloudBattlePassMatchResults::GainedBonusXp' has a wrong offset!");
static_assert(offsetof(FCloudBattlePassMatchResults, ExperienceBooster) == 0x000014, "Member 'FCloudBattlePassMatchResults::ExperienceBooster' has a wrong offset!");
static_assert(offsetof(FCloudBattlePassMatchResults, PremiumActive) == 0x000018, "Member 'FCloudBattlePassMatchResults::PremiumActive' has a wrong offset!");

// ScriptStruct Flame.CustomizationSlotVariant
// 0x0010 (0x0010 - 0x0000)
struct FCustomizationSlotVariant final
{
public:
	TSubclassOf<class ACustomizationSlot>         Slot;                                              // 0x0000(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSubclassOf<class ACustomizationVariant>      Variant;                                           // 0x0008(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FCustomizationSlotVariant) == 0x000008, "Wrong alignment on FCustomizationSlotVariant");
static_assert(sizeof(FCustomizationSlotVariant) == 0x000010, "Wrong size on FCustomizationSlotVariant");
static_assert(offsetof(FCustomizationSlotVariant, Slot) == 0x000000, "Member 'FCustomizationSlotVariant::Slot' has a wrong offset!");
static_assert(offsetof(FCustomizationSlotVariant, Variant) == 0x000008, "Member 'FCustomizationSlotVariant::Variant' has a wrong offset!");

// ScriptStruct Flame.CustomizationContainer
// 0x0010 (0x0010 - 0x0000)
struct FCustomizationContainer final
{
public:
	TArray<struct FCustomizationSlotVariant>      Customizations;                                    // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FCustomizationContainer) == 0x000008, "Wrong alignment on FCustomizationContainer");
static_assert(sizeof(FCustomizationContainer) == 0x000010, "Wrong size on FCustomizationContainer");
static_assert(offsetof(FCustomizationContainer, Customizations) == 0x000000, "Member 'FCustomizationContainer::Customizations' has a wrong offset!");

// ScriptStruct Flame.CloudUserLobbyInfo
// 0x0030 (0x0030 - 0x0000)
struct FCloudUserLobbyInfo final
{
public:
	class FString                                 Userid;                                            // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 GroupName;                                         // 0x0010(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class FString>                         Products;                                          // 0x0020(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FCloudUserLobbyInfo) == 0x000008, "Wrong alignment on FCloudUserLobbyInfo");
static_assert(sizeof(FCloudUserLobbyInfo) == 0x000030, "Wrong size on FCloudUserLobbyInfo");
static_assert(offsetof(FCloudUserLobbyInfo, Userid) == 0x000000, "Member 'FCloudUserLobbyInfo::Userid' has a wrong offset!");
static_assert(offsetof(FCloudUserLobbyInfo, GroupName) == 0x000010, "Member 'FCloudUserLobbyInfo::GroupName' has a wrong offset!");
static_assert(offsetof(FCloudUserLobbyInfo, Products) == 0x000020, "Member 'FCloudUserLobbyInfo::Products' has a wrong offset!");

// ScriptStruct Flame.CloudBattlePassEventXp
// 0x0018 (0x0018 - 0x0000)
struct FCloudBattlePassEventXp final
{
public:
	class FString                                 EventName;                                         // 0x0000(0x0010)(BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Amount;                                            // 0x0010(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         XpAwarded;                                         // 0x0014(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FCloudBattlePassEventXp) == 0x000008, "Wrong alignment on FCloudBattlePassEventXp");
static_assert(sizeof(FCloudBattlePassEventXp) == 0x000018, "Wrong size on FCloudBattlePassEventXp");
static_assert(offsetof(FCloudBattlePassEventXp, EventName) == 0x000000, "Member 'FCloudBattlePassEventXp::EventName' has a wrong offset!");
static_assert(offsetof(FCloudBattlePassEventXp, Amount) == 0x000010, "Member 'FCloudBattlePassEventXp::Amount' has a wrong offset!");
static_assert(offsetof(FCloudBattlePassEventXp, XpAwarded) == 0x000014, "Member 'FCloudBattlePassEventXp::XpAwarded' has a wrong offset!");

// ScriptStruct Flame.CloudBattlePassMatchEventResult
// 0x000C (0x000C - 0x0000)
struct FCloudBattlePassMatchEventResult final
{
public:
	class FName                                   EventName;                                         // 0x0000(0x0008)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Amount;                                            // 0x0008(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FCloudBattlePassMatchEventResult) == 0x000004, "Wrong alignment on FCloudBattlePassMatchEventResult");
static_assert(sizeof(FCloudBattlePassMatchEventResult) == 0x00000C, "Wrong size on FCloudBattlePassMatchEventResult");
static_assert(offsetof(FCloudBattlePassMatchEventResult, EventName) == 0x000000, "Member 'FCloudBattlePassMatchEventResult::EventName' has a wrong offset!");
static_assert(offsetof(FCloudBattlePassMatchEventResult, Amount) == 0x000008, "Member 'FCloudBattlePassMatchEventResult::Amount' has a wrong offset!");

// ScriptStruct Flame.CloudUserStatistics
// 0x0140 (0x0140 - 0x0000)
struct FCloudUserStatistics final
{
public:
	TMap<class FString, float>                    LastMatch;                                         // 0x0000(0x0050)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	TMap<class FString, float>                    Weekly;                                            // 0x0050(0x0050)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	TMap<class FString, float>                    Seasonal;                                          // 0x00A0(0x0050)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	TMap<class FString, float>                    AllTime;                                           // 0x00F0(0x0050)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
};
static_assert(alignof(FCloudUserStatistics) == 0x000008, "Wrong alignment on FCloudUserStatistics");
static_assert(sizeof(FCloudUserStatistics) == 0x000140, "Wrong size on FCloudUserStatistics");
static_assert(offsetof(FCloudUserStatistics, LastMatch) == 0x000000, "Member 'FCloudUserStatistics::LastMatch' has a wrong offset!");
static_assert(offsetof(FCloudUserStatistics, Weekly) == 0x000050, "Member 'FCloudUserStatistics::Weekly' has a wrong offset!");
static_assert(offsetof(FCloudUserStatistics, Seasonal) == 0x0000A0, "Member 'FCloudUserStatistics::Seasonal' has a wrong offset!");
static_assert(offsetof(FCloudUserStatistics, AllTime) == 0x0000F0, "Member 'FCloudUserStatistics::AllTime' has a wrong offset!");

// ScriptStruct Flame.CloudUserProfileStatistics
// 0x03C0 (0x03C0 - 0x0000)
struct FCloudUserProfileStatistics final
{
public:
	struct FCloudUserStatistics                   Airdrop;                                           // 0x0000(0x0140)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	struct FCloudUserStatistics                   TvTDeathmatch;                                     // 0x0140(0x0140)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	struct FCloudUserStatistics                   TvTGunfight;                                       // 0x0280(0x0140)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
};
static_assert(alignof(FCloudUserProfileStatistics) == 0x000008, "Wrong alignment on FCloudUserProfileStatistics");
static_assert(sizeof(FCloudUserProfileStatistics) == 0x0003C0, "Wrong size on FCloudUserProfileStatistics");
static_assert(offsetof(FCloudUserProfileStatistics, Airdrop) == 0x000000, "Member 'FCloudUserProfileStatistics::Airdrop' has a wrong offset!");
static_assert(offsetof(FCloudUserProfileStatistics, TvTDeathmatch) == 0x000140, "Member 'FCloudUserProfileStatistics::TvTDeathmatch' has a wrong offset!");
static_assert(offsetof(FCloudUserProfileStatistics, TvTGunfight) == 0x000280, "Member 'FCloudUserProfileStatistics::TvTGunfight' has a wrong offset!");

// ScriptStruct Flame.CloudUserStatisticsInfo
// 0x0040 (0x0040 - 0x0000)
struct FCloudUserStatisticsInfo final
{
public:
	int32                                         MatchesWon;                                        // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MatchesRetreated;                                  // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MatchesDied;                                       // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Kills;                                             // 0x000C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         CollectedAirDrops;                                 // 0x0010(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         CollectedLootValue;                                // 0x0014(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         DistanceTraveled;                                  // 0x0018(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MatchesPlayed;                                     // 0x001C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MatchesSurvived;                                   // 0x0020(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Headshots;                                         // 0x0024(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         BecameThreat;                                      // 0x0028(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         KilledThreat;                                      // 0x002C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         TotalScore;                                        // 0x0030(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         TeamScore;                                         // 0x0034(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         FlagsTaken;                                        // 0x0038(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         DamageDone;                                        // 0x003C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FCloudUserStatisticsInfo) == 0x000004, "Wrong alignment on FCloudUserStatisticsInfo");
static_assert(sizeof(FCloudUserStatisticsInfo) == 0x000040, "Wrong size on FCloudUserStatisticsInfo");
static_assert(offsetof(FCloudUserStatisticsInfo, MatchesWon) == 0x000000, "Member 'FCloudUserStatisticsInfo::MatchesWon' has a wrong offset!");
static_assert(offsetof(FCloudUserStatisticsInfo, MatchesRetreated) == 0x000004, "Member 'FCloudUserStatisticsInfo::MatchesRetreated' has a wrong offset!");
static_assert(offsetof(FCloudUserStatisticsInfo, MatchesDied) == 0x000008, "Member 'FCloudUserStatisticsInfo::MatchesDied' has a wrong offset!");
static_assert(offsetof(FCloudUserStatisticsInfo, Kills) == 0x00000C, "Member 'FCloudUserStatisticsInfo::Kills' has a wrong offset!");
static_assert(offsetof(FCloudUserStatisticsInfo, CollectedAirDrops) == 0x000010, "Member 'FCloudUserStatisticsInfo::CollectedAirDrops' has a wrong offset!");
static_assert(offsetof(FCloudUserStatisticsInfo, CollectedLootValue) == 0x000014, "Member 'FCloudUserStatisticsInfo::CollectedLootValue' has a wrong offset!");
static_assert(offsetof(FCloudUserStatisticsInfo, DistanceTraveled) == 0x000018, "Member 'FCloudUserStatisticsInfo::DistanceTraveled' has a wrong offset!");
static_assert(offsetof(FCloudUserStatisticsInfo, MatchesPlayed) == 0x00001C, "Member 'FCloudUserStatisticsInfo::MatchesPlayed' has a wrong offset!");
static_assert(offsetof(FCloudUserStatisticsInfo, MatchesSurvived) == 0x000020, "Member 'FCloudUserStatisticsInfo::MatchesSurvived' has a wrong offset!");
static_assert(offsetof(FCloudUserStatisticsInfo, Headshots) == 0x000024, "Member 'FCloudUserStatisticsInfo::Headshots' has a wrong offset!");
static_assert(offsetof(FCloudUserStatisticsInfo, BecameThreat) == 0x000028, "Member 'FCloudUserStatisticsInfo::BecameThreat' has a wrong offset!");
static_assert(offsetof(FCloudUserStatisticsInfo, KilledThreat) == 0x00002C, "Member 'FCloudUserStatisticsInfo::KilledThreat' has a wrong offset!");
static_assert(offsetof(FCloudUserStatisticsInfo, TotalScore) == 0x000030, "Member 'FCloudUserStatisticsInfo::TotalScore' has a wrong offset!");
static_assert(offsetof(FCloudUserStatisticsInfo, TeamScore) == 0x000034, "Member 'FCloudUserStatisticsInfo::TeamScore' has a wrong offset!");
static_assert(offsetof(FCloudUserStatisticsInfo, FlagsTaken) == 0x000038, "Member 'FCloudUserStatisticsInfo::FlagsTaken' has a wrong offset!");
static_assert(offsetof(FCloudUserStatisticsInfo, DamageDone) == 0x00003C, "Member 'FCloudUserStatisticsInfo::DamageDone' has a wrong offset!");

// ScriptStruct Flame.UserMatchResult
// 0x0588 (0x0588 - 0x0000)
struct FUserMatchResult final
{
public:
	struct FUserMatchInfoStats                    MatchStatistics;                                   // 0x0000(0x0060)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	bool                                          IsThreat;                                          // 0x0060(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsTeamKiller;                                      // 0x0061(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_62[0x6];                                       // 0x0062(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	struct FLoadoutInfo                           PlayerLoadout;                                     // 0x0068(0x0028)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	class FString                                 GameMode;                                          // 0x0090(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MaterialRewards;                                   // 0x00A0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MaterialValue;                                     // 0x00A4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class FString>                         RequestedRewards;                                  // 0x00A8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	struct FLoadoutInfo                           KillerLoadout;                                     // 0x00B8(0x0028)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	TSubclassOf<class AItem>                      KillerWeapon;                                      // 0x00E0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSubclassOf<class AWeaponSkin>                KillerWeaponSkin;                                  // 0x00E8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FCustomizationContainer                KillerCustomizations;                              // 0x00F0(0x0010)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	TArray<struct FCloudItemInfo>                 AwardedItems;                                      // 0x0100(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	struct FCloudUserLobbyInfo                    LobbyInfo;                                         // 0x0110(0x0030)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	TArray<struct FCloudUserLobbyInfo>            Players;                                           // 0x0140(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FCloudBattlePassMatchEventResult> MatchEvents;                                       // 0x0150(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FCloudBattlePassMatchResults>   BattlePassStatuses;                                // 0x0160(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FCloudBattlePassEventXp>        XpBreakdown;                                       // 0x0170(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	struct FCloudUserProfileStatistics            UserStatistics;                                    // 0x0180(0x03C0)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	struct FCloudUserStatisticsInfo               KillerStatistics;                                  // 0x0540(0x0040)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	int32                                         PreMatchAveragePercentile;                         // 0x0580(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MatchDifficultyForRequestingUser;                  // 0x0584(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FUserMatchResult) == 0x000008, "Wrong alignment on FUserMatchResult");
static_assert(sizeof(FUserMatchResult) == 0x000588, "Wrong size on FUserMatchResult");
static_assert(offsetof(FUserMatchResult, MatchStatistics) == 0x000000, "Member 'FUserMatchResult::MatchStatistics' has a wrong offset!");
static_assert(offsetof(FUserMatchResult, IsThreat) == 0x000060, "Member 'FUserMatchResult::IsThreat' has a wrong offset!");
static_assert(offsetof(FUserMatchResult, IsTeamKiller) == 0x000061, "Member 'FUserMatchResult::IsTeamKiller' has a wrong offset!");
static_assert(offsetof(FUserMatchResult, PlayerLoadout) == 0x000068, "Member 'FUserMatchResult::PlayerLoadout' has a wrong offset!");
static_assert(offsetof(FUserMatchResult, GameMode) == 0x000090, "Member 'FUserMatchResult::GameMode' has a wrong offset!");
static_assert(offsetof(FUserMatchResult, MaterialRewards) == 0x0000A0, "Member 'FUserMatchResult::MaterialRewards' has a wrong offset!");
static_assert(offsetof(FUserMatchResult, MaterialValue) == 0x0000A4, "Member 'FUserMatchResult::MaterialValue' has a wrong offset!");
static_assert(offsetof(FUserMatchResult, RequestedRewards) == 0x0000A8, "Member 'FUserMatchResult::RequestedRewards' has a wrong offset!");
static_assert(offsetof(FUserMatchResult, KillerLoadout) == 0x0000B8, "Member 'FUserMatchResult::KillerLoadout' has a wrong offset!");
static_assert(offsetof(FUserMatchResult, KillerWeapon) == 0x0000E0, "Member 'FUserMatchResult::KillerWeapon' has a wrong offset!");
static_assert(offsetof(FUserMatchResult, KillerWeaponSkin) == 0x0000E8, "Member 'FUserMatchResult::KillerWeaponSkin' has a wrong offset!");
static_assert(offsetof(FUserMatchResult, KillerCustomizations) == 0x0000F0, "Member 'FUserMatchResult::KillerCustomizations' has a wrong offset!");
static_assert(offsetof(FUserMatchResult, AwardedItems) == 0x000100, "Member 'FUserMatchResult::AwardedItems' has a wrong offset!");
static_assert(offsetof(FUserMatchResult, LobbyInfo) == 0x000110, "Member 'FUserMatchResult::LobbyInfo' has a wrong offset!");
static_assert(offsetof(FUserMatchResult, Players) == 0x000140, "Member 'FUserMatchResult::Players' has a wrong offset!");
static_assert(offsetof(FUserMatchResult, MatchEvents) == 0x000150, "Member 'FUserMatchResult::MatchEvents' has a wrong offset!");
static_assert(offsetof(FUserMatchResult, BattlePassStatuses) == 0x000160, "Member 'FUserMatchResult::BattlePassStatuses' has a wrong offset!");
static_assert(offsetof(FUserMatchResult, XpBreakdown) == 0x000170, "Member 'FUserMatchResult::XpBreakdown' has a wrong offset!");
static_assert(offsetof(FUserMatchResult, UserStatistics) == 0x000180, "Member 'FUserMatchResult::UserStatistics' has a wrong offset!");
static_assert(offsetof(FUserMatchResult, KillerStatistics) == 0x000540, "Member 'FUserMatchResult::KillerStatistics' has a wrong offset!");
static_assert(offsetof(FUserMatchResult, PreMatchAveragePercentile) == 0x000580, "Member 'FUserMatchResult::PreMatchAveragePercentile' has a wrong offset!");
static_assert(offsetof(FUserMatchResult, MatchDifficultyForRequestingUser) == 0x000584, "Member 'FUserMatchResult::MatchDifficultyForRequestingUser' has a wrong offset!");

// ScriptStruct Flame.AimAssistSettings
// 0x000C (0x000C - 0x0000)
struct FAimAssistSettings final
{
public:
	float                                         FrictionStrength;                                  // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ScrollActiveStrength;                              // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ScrollPassiveStrength;                             // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAimAssistSettings) == 0x000004, "Wrong alignment on FAimAssistSettings");
static_assert(sizeof(FAimAssistSettings) == 0x00000C, "Wrong size on FAimAssistSettings");
static_assert(offsetof(FAimAssistSettings, FrictionStrength) == 0x000000, "Member 'FAimAssistSettings::FrictionStrength' has a wrong offset!");
static_assert(offsetof(FAimAssistSettings, ScrollActiveStrength) == 0x000004, "Member 'FAimAssistSettings::ScrollActiveStrength' has a wrong offset!");
static_assert(offsetof(FAimAssistSettings, ScrollPassiveStrength) == 0x000008, "Member 'FAimAssistSettings::ScrollPassiveStrength' has a wrong offset!");

// ScriptStruct Flame.CloudBattlePassSeasonState
// 0x001C (0x001C - 0x0000)
struct FCloudBattlePassSeasonState final
{
public:
	class FName                                   SeasonName;                                        // 0x0000(0x0008)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         AccumulatedXp;                                     // 0x0008(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ExperienceBooster;                                 // 0x000C(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          PremiumActive;                                     // 0x0010(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x3];                                       // 0x0011(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         FreeTrackClaimedLevel;                             // 0x0014(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         PremiumTrackClaimedLevel;                          // 0x0018(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FCloudBattlePassSeasonState) == 0x000004, "Wrong alignment on FCloudBattlePassSeasonState");
static_assert(sizeof(FCloudBattlePassSeasonState) == 0x00001C, "Wrong size on FCloudBattlePassSeasonState");
static_assert(offsetof(FCloudBattlePassSeasonState, SeasonName) == 0x000000, "Member 'FCloudBattlePassSeasonState::SeasonName' has a wrong offset!");
static_assert(offsetof(FCloudBattlePassSeasonState, AccumulatedXp) == 0x000008, "Member 'FCloudBattlePassSeasonState::AccumulatedXp' has a wrong offset!");
static_assert(offsetof(FCloudBattlePassSeasonState, ExperienceBooster) == 0x00000C, "Member 'FCloudBattlePassSeasonState::ExperienceBooster' has a wrong offset!");
static_assert(offsetof(FCloudBattlePassSeasonState, PremiumActive) == 0x000010, "Member 'FCloudBattlePassSeasonState::PremiumActive' has a wrong offset!");
static_assert(offsetof(FCloudBattlePassSeasonState, FreeTrackClaimedLevel) == 0x000014, "Member 'FCloudBattlePassSeasonState::FreeTrackClaimedLevel' has a wrong offset!");
static_assert(offsetof(FCloudBattlePassSeasonState, PremiumTrackClaimedLevel) == 0x000018, "Member 'FCloudBattlePassSeasonState::PremiumTrackClaimedLevel' has a wrong offset!");

// ScriptStruct Flame.StaminaEffect
// 0x0050 (0x0050 - 0x0000)
struct FStaminaEffect final
{
public:
	class FName                                   EffectName;                                        // 0x0000(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Gain;                                              // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Multiplier;                                        // 0x000C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bPermanentEffect;                                  // 0x0010(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x3];                                       // 0x0011(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Duration;                                          // 0x0014(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class FName>                           EffectsToRemoveWhenActivated;                      // 0x0018(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	TSoftClassPtr<class UClass>                   UIType;                                            // 0x0028(0x0028)(Edit, BlueprintVisible, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FStaminaEffect) == 0x000008, "Wrong alignment on FStaminaEffect");
static_assert(sizeof(FStaminaEffect) == 0x000050, "Wrong size on FStaminaEffect");
static_assert(offsetof(FStaminaEffect, EffectName) == 0x000000, "Member 'FStaminaEffect::EffectName' has a wrong offset!");
static_assert(offsetof(FStaminaEffect, Gain) == 0x000008, "Member 'FStaminaEffect::Gain' has a wrong offset!");
static_assert(offsetof(FStaminaEffect, Multiplier) == 0x00000C, "Member 'FStaminaEffect::Multiplier' has a wrong offset!");
static_assert(offsetof(FStaminaEffect, bPermanentEffect) == 0x000010, "Member 'FStaminaEffect::bPermanentEffect' has a wrong offset!");
static_assert(offsetof(FStaminaEffect, Duration) == 0x000014, "Member 'FStaminaEffect::Duration' has a wrong offset!");
static_assert(offsetof(FStaminaEffect, EffectsToRemoveWhenActivated) == 0x000018, "Member 'FStaminaEffect::EffectsToRemoveWhenActivated' has a wrong offset!");
static_assert(offsetof(FStaminaEffect, UIType) == 0x000028, "Member 'FStaminaEffect::UIType' has a wrong offset!");

// ScriptStruct Flame.CloudUserWeaponSkinInfo
// 0x0010 (0x0010 - 0x0000)
struct FCloudUserWeaponSkinInfo final
{
public:
	TSubclassOf<class AItem>                      Weapon;                                            // 0x0000(0x0008)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSubclassOf<class AItem>                      Skin;                                              // 0x0008(0x0008)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FCloudUserWeaponSkinInfo) == 0x000008, "Wrong alignment on FCloudUserWeaponSkinInfo");
static_assert(sizeof(FCloudUserWeaponSkinInfo) == 0x000010, "Wrong size on FCloudUserWeaponSkinInfo");
static_assert(offsetof(FCloudUserWeaponSkinInfo, Weapon) == 0x000000, "Member 'FCloudUserWeaponSkinInfo::Weapon' has a wrong offset!");
static_assert(offsetof(FCloudUserWeaponSkinInfo, Skin) == 0x000008, "Member 'FCloudUserWeaponSkinInfo::Skin' has a wrong offset!");

// ScriptStruct Flame.CloudUserWeaponSkinsInfo
// 0x0010 (0x0010 - 0x0000)
struct FCloudUserWeaponSkinsInfo final
{
public:
	TArray<struct FCloudUserWeaponSkinInfo>       WeaponSkins;                                       // 0x0000(0x0010)(BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FCloudUserWeaponSkinsInfo) == 0x000008, "Wrong alignment on FCloudUserWeaponSkinsInfo");
static_assert(sizeof(FCloudUserWeaponSkinsInfo) == 0x000010, "Wrong size on FCloudUserWeaponSkinsInfo");
static_assert(offsetof(FCloudUserWeaponSkinsInfo, WeaponSkins) == 0x000000, "Member 'FCloudUserWeaponSkinsInfo::WeaponSkins' has a wrong offset!");

// ScriptStruct Flame.InputActionMapper
// 0x0010 (0x0010 - 0x0000)
struct FInputActionMapper final
{
public:
	TArray<class UInputAction*>                   Actions;                                           // 0x0000(0x0010)(ZeroConstructor, NativeAccessSpecifierPrivate)
};
static_assert(alignof(FInputActionMapper) == 0x000008, "Wrong alignment on FInputActionMapper");
static_assert(sizeof(FInputActionMapper) == 0x000010, "Wrong size on FInputActionMapper");
static_assert(offsetof(FInputActionMapper, Actions) == 0x000000, "Member 'FInputActionMapper::Actions' has a wrong offset!");

// ScriptStruct Flame.MetaList
// 0x0008 (0x0018 - 0x0010)
struct FMetaList final : public FClassTableRow
{
public:
	TSubclassOf<class AItem>                      Class;                                             // 0x0010(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FMetaList) == 0x000008, "Wrong alignment on FMetaList");
static_assert(sizeof(FMetaList) == 0x000018, "Wrong size on FMetaList");
static_assert(offsetof(FMetaList, Class) == 0x000010, "Member 'FMetaList::Class' has a wrong offset!");

// ScriptStruct Flame.ActiveEventSpeedModifierCurve
// 0x0010 (0x0010 - 0x0000)
struct FActiveEventSpeedModifierCurve final
{
public:
	class UCurveFloat*                            Curve;                                             // 0x0000(0x0008)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         CurrentTime;                                       // 0x0008(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         PlayRate;                                          // 0x000C(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FActiveEventSpeedModifierCurve) == 0x000008, "Wrong alignment on FActiveEventSpeedModifierCurve");
static_assert(sizeof(FActiveEventSpeedModifierCurve) == 0x000010, "Wrong size on FActiveEventSpeedModifierCurve");
static_assert(offsetof(FActiveEventSpeedModifierCurve, Curve) == 0x000000, "Member 'FActiveEventSpeedModifierCurve::Curve' has a wrong offset!");
static_assert(offsetof(FActiveEventSpeedModifierCurve, CurrentTime) == 0x000008, "Member 'FActiveEventSpeedModifierCurve::CurrentTime' has a wrong offset!");
static_assert(offsetof(FActiveEventSpeedModifierCurve, PlayRate) == 0x00000C, "Member 'FActiveEventSpeedModifierCurve::PlayRate' has a wrong offset!");

// ScriptStruct Flame.MapInfoCloud
// 0x0038 (0x0038 - 0x0000)
struct FMapInfoCloud final
{
public:
	int32                                         MapId;                                             // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 MapName;                                           // 0x0008(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsEnabled;                                         // 0x0018(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          StartTimeSet;                                      // 0x0019(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1A[0x6];                                       // 0x001A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	struct FDateTime                              StartTime;                                         // 0x0020(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          EndTimeSet;                                        // 0x0028(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_29[0x7];                                       // 0x0029(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FDateTime                              EndTime;                                           // 0x0030(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FMapInfoCloud) == 0x000008, "Wrong alignment on FMapInfoCloud");
static_assert(sizeof(FMapInfoCloud) == 0x000038, "Wrong size on FMapInfoCloud");
static_assert(offsetof(FMapInfoCloud, MapId) == 0x000000, "Member 'FMapInfoCloud::MapId' has a wrong offset!");
static_assert(offsetof(FMapInfoCloud, MapName) == 0x000008, "Member 'FMapInfoCloud::MapName' has a wrong offset!");
static_assert(offsetof(FMapInfoCloud, IsEnabled) == 0x000018, "Member 'FMapInfoCloud::IsEnabled' has a wrong offset!");
static_assert(offsetof(FMapInfoCloud, StartTimeSet) == 0x000019, "Member 'FMapInfoCloud::StartTimeSet' has a wrong offset!");
static_assert(offsetof(FMapInfoCloud, StartTime) == 0x000020, "Member 'FMapInfoCloud::StartTime' has a wrong offset!");
static_assert(offsetof(FMapInfoCloud, EndTimeSet) == 0x000028, "Member 'FMapInfoCloud::EndTimeSet' has a wrong offset!");
static_assert(offsetof(FMapInfoCloud, EndTime) == 0x000030, "Member 'FMapInfoCloud::EndTime' has a wrong offset!");

// ScriptStruct Flame.PelvisAdjustmentInterp
// 0x0008 (0x0008 - 0x0000)
struct FPelvisAdjustmentInterp final
{
public:
	float                                         Stiffness;                                         // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Dampen;                                            // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FPelvisAdjustmentInterp) == 0x000004, "Wrong alignment on FPelvisAdjustmentInterp");
static_assert(sizeof(FPelvisAdjustmentInterp) == 0x000008, "Wrong size on FPelvisAdjustmentInterp");
static_assert(offsetof(FPelvisAdjustmentInterp, Stiffness) == 0x000000, "Member 'FPelvisAdjustmentInterp::Stiffness' has a wrong offset!");
static_assert(offsetof(FPelvisAdjustmentInterp, Dampen) == 0x000004, "Member 'FPelvisAdjustmentInterp::Dampen' has a wrong offset!");

// ScriptStruct Flame.CloudManagerStateInfo
// 0x0020 (0x0020 - 0x0000)
struct FCloudManagerStateInfo final
{
public:
	ECloudManagerState                            State;                                             // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   StatusCode;                                        // 0x0004(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 DebugMessage;                                      // 0x0010(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FCloudManagerStateInfo) == 0x000008, "Wrong alignment on FCloudManagerStateInfo");
static_assert(sizeof(FCloudManagerStateInfo) == 0x000020, "Wrong size on FCloudManagerStateInfo");
static_assert(offsetof(FCloudManagerStateInfo, State) == 0x000000, "Member 'FCloudManagerStateInfo::State' has a wrong offset!");
static_assert(offsetof(FCloudManagerStateInfo, StatusCode) == 0x000004, "Member 'FCloudManagerStateInfo::StatusCode' has a wrong offset!");
static_assert(offsetof(FCloudManagerStateInfo, DebugMessage) == 0x000010, "Member 'FCloudManagerStateInfo::DebugMessage' has a wrong offset!");

// ScriptStruct Flame.InputActionRule
// 0x001C (0x001C - 0x0000)
struct alignas(0x04) FInputActionRule final
{
public:
	uint8                                         Pad_0[0x1C];                                       // 0x0000(0x001C)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FInputActionRule) == 0x000004, "Wrong alignment on FInputActionRule");
static_assert(sizeof(FInputActionRule) == 0x00001C, "Wrong size on FInputActionRule");

// ScriptStruct Flame.HumanMirrorMap
// 0x0010 (0x0010 - 0x0000)
struct FHumanMirrorMap final
{
public:
	class FName                                   BoneName1;                                         // 0x0000(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   BoneName2;                                         // 0x0008(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FHumanMirrorMap) == 0x000004, "Wrong alignment on FHumanMirrorMap");
static_assert(sizeof(FHumanMirrorMap) == 0x000010, "Wrong size on FHumanMirrorMap");
static_assert(offsetof(FHumanMirrorMap, BoneName1) == 0x000000, "Member 'FHumanMirrorMap::BoneName1' has a wrong offset!");
static_assert(offsetof(FHumanMirrorMap, BoneName2) == 0x000008, "Member 'FHumanMirrorMap::BoneName2' has a wrong offset!");

// ScriptStruct Flame.CloudBattlePassSeasonInfo
// 0x0010 (0x0010 - 0x0000)
struct FCloudBattlePassSeasonInfo final
{
public:
	class FName                                   Name;                                              // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FDateTime                              SeasonStartTime;                                   // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FCloudBattlePassSeasonInfo) == 0x000008, "Wrong alignment on FCloudBattlePassSeasonInfo");
static_assert(sizeof(FCloudBattlePassSeasonInfo) == 0x000010, "Wrong size on FCloudBattlePassSeasonInfo");
static_assert(offsetof(FCloudBattlePassSeasonInfo, Name) == 0x000000, "Member 'FCloudBattlePassSeasonInfo::Name' has a wrong offset!");
static_assert(offsetof(FCloudBattlePassSeasonInfo, SeasonStartTime) == 0x000008, "Member 'FCloudBattlePassSeasonInfo::SeasonStartTime' has a wrong offset!");

// ScriptStruct Flame.CloudBattlePassSeasonsState
// 0x0078 (0x0078 - 0x0000)
struct FCloudBattlePassSeasonsState final
{
public:
	class FName                                   ActiveSeasonName;                                  // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   ActiveLegacySeasonName;                            // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FCloudBattlePassSeasonInfo             UpcomingSeason;                                    // 0x0010(0x0010)(BlueprintVisible, BlueprintReadOnly, NoDestructor, NativeAccessSpecifierPublic)
	TMap<class FName, struct FCloudBattlePassSeasonState> SeasonProgressions;                                // 0x0020(0x0050)(BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	bool                                          IsDoubleXpWeekendActive;                           // 0x0070(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_71[0x7];                                       // 0x0071(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FCloudBattlePassSeasonsState) == 0x000008, "Wrong alignment on FCloudBattlePassSeasonsState");
static_assert(sizeof(FCloudBattlePassSeasonsState) == 0x000078, "Wrong size on FCloudBattlePassSeasonsState");
static_assert(offsetof(FCloudBattlePassSeasonsState, ActiveSeasonName) == 0x000000, "Member 'FCloudBattlePassSeasonsState::ActiveSeasonName' has a wrong offset!");
static_assert(offsetof(FCloudBattlePassSeasonsState, ActiveLegacySeasonName) == 0x000008, "Member 'FCloudBattlePassSeasonsState::ActiveLegacySeasonName' has a wrong offset!");
static_assert(offsetof(FCloudBattlePassSeasonsState, UpcomingSeason) == 0x000010, "Member 'FCloudBattlePassSeasonsState::UpcomingSeason' has a wrong offset!");
static_assert(offsetof(FCloudBattlePassSeasonsState, SeasonProgressions) == 0x000020, "Member 'FCloudBattlePassSeasonsState::SeasonProgressions' has a wrong offset!");
static_assert(offsetof(FCloudBattlePassSeasonsState, IsDoubleXpWeekendActive) == 0x000070, "Member 'FCloudBattlePassSeasonsState::IsDoubleXpWeekendActive' has a wrong offset!");

// ScriptStruct Flame.CloudRawDataInfo
// 0x0050 (0x0050 - 0x0000)
struct FCloudRawDataInfo final
{
public:
	int32                                         Rank;                                              // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 Userid;                                            // 0x0008(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Category;                                          // 0x0018(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 KeyName;                                           // 0x0028(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FDateTime                              LastUpdateAt;                                      // 0x0038(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_40[0x10];                                      // 0x0040(0x0010)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FCloudRawDataInfo) == 0x000008, "Wrong alignment on FCloudRawDataInfo");
static_assert(sizeof(FCloudRawDataInfo) == 0x000050, "Wrong size on FCloudRawDataInfo");
static_assert(offsetof(FCloudRawDataInfo, Rank) == 0x000000, "Member 'FCloudRawDataInfo::Rank' has a wrong offset!");
static_assert(offsetof(FCloudRawDataInfo, Userid) == 0x000008, "Member 'FCloudRawDataInfo::Userid' has a wrong offset!");
static_assert(offsetof(FCloudRawDataInfo, Category) == 0x000018, "Member 'FCloudRawDataInfo::Category' has a wrong offset!");
static_assert(offsetof(FCloudRawDataInfo, KeyName) == 0x000028, "Member 'FCloudRawDataInfo::KeyName' has a wrong offset!");
static_assert(offsetof(FCloudRawDataInfo, LastUpdateAt) == 0x000038, "Member 'FCloudRawDataInfo::LastUpdateAt' has a wrong offset!");

// ScriptStruct Flame.CloudGetAllRawDataForUserResult
// 0x0010 (0x0010 - 0x0000)
struct FCloudGetAllRawDataForUserResult final
{
public:
	TArray<struct FCloudRawDataInfo>              Data;                                              // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FCloudGetAllRawDataForUserResult) == 0x000008, "Wrong alignment on FCloudGetAllRawDataForUserResult");
static_assert(sizeof(FCloudGetAllRawDataForUserResult) == 0x000010, "Wrong size on FCloudGetAllRawDataForUserResult");
static_assert(offsetof(FCloudGetAllRawDataForUserResult, Data) == 0x000000, "Member 'FCloudGetAllRawDataForUserResult::Data' has a wrong offset!");

// ScriptStruct Flame.BackpackItemSlot
// 0x0010 (0x0010 - 0x0000)
struct FBackpackItemSlot final
{
public:
	TSubclassOf<class AItemForBackpack>           ObjectType;                                        // 0x0000(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Count;                                             // 0x0008(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FBackpackItemSlot) == 0x000008, "Wrong alignment on FBackpackItemSlot");
static_assert(sizeof(FBackpackItemSlot) == 0x000010, "Wrong size on FBackpackItemSlot");
static_assert(offsetof(FBackpackItemSlot, ObjectType) == 0x000000, "Member 'FBackpackItemSlot::ObjectType' has a wrong offset!");
static_assert(offsetof(FBackpackItemSlot, Count) == 0x000008, "Member 'FBackpackItemSlot::Count' has a wrong offset!");

// ScriptStruct Flame.ClientStateSync
// 0x0028 (0x0028 - 0x0000)
struct alignas(0x08) FClientStateSync final
{
public:
	uint8                                         Pad_0[0x28];                                       // 0x0000(0x0028)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FClientStateSync) == 0x000008, "Wrong alignment on FClientStateSync");
static_assert(sizeof(FClientStateSync) == 0x000028, "Wrong size on FClientStateSync");

// ScriptStruct Flame.DoorReference
// 0x0060 (0x0060 - 0x0000)
struct FDoorReference final
{
public:
	TSoftObjectPtr<class ADoor>                   Door;                                              // 0x0000(0x0028)(Edit, BlueprintVisible, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   DoorTag;                                           // 0x0028(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FTransform                             DoorTransform;                                     // 0x0030(0x0030)(Edit, BlueprintVisible, BlueprintReadOnly, EditConst, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FDoorReference) == 0x000010, "Wrong alignment on FDoorReference");
static_assert(sizeof(FDoorReference) == 0x000060, "Wrong size on FDoorReference");
static_assert(offsetof(FDoorReference, Door) == 0x000000, "Member 'FDoorReference::Door' has a wrong offset!");
static_assert(offsetof(FDoorReference, DoorTag) == 0x000028, "Member 'FDoorReference::DoorTag' has a wrong offset!");
static_assert(offsetof(FDoorReference, DoorTransform) == 0x000030, "Member 'FDoorReference::DoorTransform' has a wrong offset!");

// ScriptStruct Flame.CloudOverviewResponse
// 0x0050 (0x0050 - 0x0000)
struct FCloudOverviewResponse final
{
public:
	class FString                                 ApplicationName;                                   // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 InstanceName;                                      // 0x0010(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Version;                                           // 0x0020(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Environment;                                       // 0x0030(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 MachineName;                                       // 0x0040(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FCloudOverviewResponse) == 0x000008, "Wrong alignment on FCloudOverviewResponse");
static_assert(sizeof(FCloudOverviewResponse) == 0x000050, "Wrong size on FCloudOverviewResponse");
static_assert(offsetof(FCloudOverviewResponse, ApplicationName) == 0x000000, "Member 'FCloudOverviewResponse::ApplicationName' has a wrong offset!");
static_assert(offsetof(FCloudOverviewResponse, InstanceName) == 0x000010, "Member 'FCloudOverviewResponse::InstanceName' has a wrong offset!");
static_assert(offsetof(FCloudOverviewResponse, Version) == 0x000020, "Member 'FCloudOverviewResponse::Version' has a wrong offset!");
static_assert(offsetof(FCloudOverviewResponse, Environment) == 0x000030, "Member 'FCloudOverviewResponse::Environment' has a wrong offset!");
static_assert(offsetof(FCloudOverviewResponse, MachineName) == 0x000040, "Member 'FCloudOverviewResponse::MachineName' has a wrong offset!");

// ScriptStruct Flame.BattlePassLevelRewardFull
// 0x0020 (0x0020 - 0x0000)
struct FBattlePassLevelRewardFull final
{
public:
	TSubclassOf<class AItem>                      ItemType;                                          // 0x0000(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Count;                                             // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TSubclassOf<class AItem>                      FallbackItemType;                                  // 0x0010(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         FallbackCount;                                     // 0x0018(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          UseFallbackReward;                                 // 0x001C(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1D[0x3];                                       // 0x001D(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FBattlePassLevelRewardFull) == 0x000008, "Wrong alignment on FBattlePassLevelRewardFull");
static_assert(sizeof(FBattlePassLevelRewardFull) == 0x000020, "Wrong size on FBattlePassLevelRewardFull");
static_assert(offsetof(FBattlePassLevelRewardFull, ItemType) == 0x000000, "Member 'FBattlePassLevelRewardFull::ItemType' has a wrong offset!");
static_assert(offsetof(FBattlePassLevelRewardFull, Count) == 0x000008, "Member 'FBattlePassLevelRewardFull::Count' has a wrong offset!");
static_assert(offsetof(FBattlePassLevelRewardFull, FallbackItemType) == 0x000010, "Member 'FBattlePassLevelRewardFull::FallbackItemType' has a wrong offset!");
static_assert(offsetof(FBattlePassLevelRewardFull, FallbackCount) == 0x000018, "Member 'FBattlePassLevelRewardFull::FallbackCount' has a wrong offset!");
static_assert(offsetof(FBattlePassLevelRewardFull, UseFallbackReward) == 0x00001C, "Member 'FBattlePassLevelRewardFull::UseFallbackReward' has a wrong offset!");

// ScriptStruct Flame.UserReviewResultData
// 0x0001 (0x0001 - 0x0000)
struct FUserReviewResultData final
{
public:
	bool                                          Updated;                                           // 0x0000(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FUserReviewResultData) == 0x000001, "Wrong alignment on FUserReviewResultData");
static_assert(sizeof(FUserReviewResultData) == 0x000001, "Wrong size on FUserReviewResultData");
static_assert(offsetof(FUserReviewResultData, Updated) == 0x000000, "Member 'FUserReviewResultData::Updated' has a wrong offset!");

// ScriptStruct Flame.BattlePassSeasonProducts
// 0x0020 (0x0020 - 0x0000)
struct FBattlePassSeasonProducts final
{
public:
	class FString                                 PremiumBattlePassProductID;                        // 0x0000(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Tier;                                              // 0x0010(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UTexture2D*                             ProductImage;                                      // 0x0018(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FBattlePassSeasonProducts) == 0x000008, "Wrong alignment on FBattlePassSeasonProducts");
static_assert(sizeof(FBattlePassSeasonProducts) == 0x000020, "Wrong size on FBattlePassSeasonProducts");
static_assert(offsetof(FBattlePassSeasonProducts, PremiumBattlePassProductID) == 0x000000, "Member 'FBattlePassSeasonProducts::PremiumBattlePassProductID' has a wrong offset!");
static_assert(offsetof(FBattlePassSeasonProducts, Tier) == 0x000010, "Member 'FBattlePassSeasonProducts::Tier' has a wrong offset!");
static_assert(offsetof(FBattlePassSeasonProducts, ProductImage) == 0x000018, "Member 'FBattlePassSeasonProducts::ProductImage' has a wrong offset!");

// ScriptStruct Flame.BattlePassLevelRewardExtended
// 0x0020 (0x0020 - 0x0000)
struct FBattlePassLevelRewardExtended final
{
public:
	TSubclassOf<class AItem>                      ItemType;                                          // 0x0000(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Count;                                             // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TSubclassOf<class AItem>                      FallbackItemType;                                  // 0x0010(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         FallbackCount;                                     // 0x0018(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FBattlePassLevelRewardExtended) == 0x000008, "Wrong alignment on FBattlePassLevelRewardExtended");
static_assert(sizeof(FBattlePassLevelRewardExtended) == 0x000020, "Wrong size on FBattlePassLevelRewardExtended");
static_assert(offsetof(FBattlePassLevelRewardExtended, ItemType) == 0x000000, "Member 'FBattlePassLevelRewardExtended::ItemType' has a wrong offset!");
static_assert(offsetof(FBattlePassLevelRewardExtended, Count) == 0x000008, "Member 'FBattlePassLevelRewardExtended::Count' has a wrong offset!");
static_assert(offsetof(FBattlePassLevelRewardExtended, FallbackItemType) == 0x000010, "Member 'FBattlePassLevelRewardExtended::FallbackItemType' has a wrong offset!");
static_assert(offsetof(FBattlePassLevelRewardExtended, FallbackCount) == 0x000018, "Member 'FBattlePassLevelRewardExtended::FallbackCount' has a wrong offset!");

// ScriptStruct Flame.BattlePassLevel
// 0x0028 (0x0028 - 0x0000)
struct FBattlePassLevel final
{
public:
	int32                                         ExperienceRequired;                                // 0x0000(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         LevelUpPrice;                                      // 0x0004(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FBattlePassLevelRewardExtended> FreeRewards;                                       // 0x0008(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic)
	TArray<struct FBattlePassLevelRewardExtended> PremiumRewards;                                    // 0x0018(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic)
};
static_assert(alignof(FBattlePassLevel) == 0x000008, "Wrong alignment on FBattlePassLevel");
static_assert(sizeof(FBattlePassLevel) == 0x000028, "Wrong size on FBattlePassLevel");
static_assert(offsetof(FBattlePassLevel, ExperienceRequired) == 0x000000, "Member 'FBattlePassLevel::ExperienceRequired' has a wrong offset!");
static_assert(offsetof(FBattlePassLevel, LevelUpPrice) == 0x000004, "Member 'FBattlePassLevel::LevelUpPrice' has a wrong offset!");
static_assert(offsetof(FBattlePassLevel, FreeRewards) == 0x000008, "Member 'FBattlePassLevel::FreeRewards' has a wrong offset!");
static_assert(offsetof(FBattlePassLevel, PremiumRewards) == 0x000018, "Member 'FBattlePassLevel::PremiumRewards' has a wrong offset!");

// ScriptStruct Flame.BattlePassSeason
// 0x0090 (0x00A0 - 0x0010)
struct FBattlePassSeason final : public FClassTableRow
{
public:
	int32                                         Order;                                             // 0x0010(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Number;                                            // 0x0014(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FText                                   Title;                                             // 0x0018(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NativeAccessSpecifierPublic)
	class FText                                   Description;                                       // 0x0030(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NativeAccessSpecifierPublic)
	class UTexture2D*                             Image;                                             // 0x0048(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FDateTime                              SeasonStartTime;                                   // 0x0050(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FDateTime                              SeasonEndTime;                                     // 0x0058(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         PremiumBattlePassProductID;                        // 0x0060(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_64[0x4];                                       // 0x0064(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FBattlePassSeasonProducts>      PremiumBattlePassProducts;                         // 0x0068(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic)
	TSubclassOf<class APremiumBattlePassToken>    PremiumBattlePassToken;                            // 0x0078(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSubclassOf<class ABattlePassLevelToken>      BattlePassLevelToken;                              // 0x0080(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FBattlePassLevel>               Levels;                                            // 0x0088(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic)
	bool                                          IsLegacy;                                          // 0x0098(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_99[0x7];                                       // 0x0099(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FBattlePassSeason) == 0x000008, "Wrong alignment on FBattlePassSeason");
static_assert(sizeof(FBattlePassSeason) == 0x0000A0, "Wrong size on FBattlePassSeason");
static_assert(offsetof(FBattlePassSeason, Order) == 0x000010, "Member 'FBattlePassSeason::Order' has a wrong offset!");
static_assert(offsetof(FBattlePassSeason, Number) == 0x000014, "Member 'FBattlePassSeason::Number' has a wrong offset!");
static_assert(offsetof(FBattlePassSeason, Title) == 0x000018, "Member 'FBattlePassSeason::Title' has a wrong offset!");
static_assert(offsetof(FBattlePassSeason, Description) == 0x000030, "Member 'FBattlePassSeason::Description' has a wrong offset!");
static_assert(offsetof(FBattlePassSeason, Image) == 0x000048, "Member 'FBattlePassSeason::Image' has a wrong offset!");
static_assert(offsetof(FBattlePassSeason, SeasonStartTime) == 0x000050, "Member 'FBattlePassSeason::SeasonStartTime' has a wrong offset!");
static_assert(offsetof(FBattlePassSeason, SeasonEndTime) == 0x000058, "Member 'FBattlePassSeason::SeasonEndTime' has a wrong offset!");
static_assert(offsetof(FBattlePassSeason, PremiumBattlePassProductID) == 0x000060, "Member 'FBattlePassSeason::PremiumBattlePassProductID' has a wrong offset!");
static_assert(offsetof(FBattlePassSeason, PremiumBattlePassProducts) == 0x000068, "Member 'FBattlePassSeason::PremiumBattlePassProducts' has a wrong offset!");
static_assert(offsetof(FBattlePassSeason, PremiumBattlePassToken) == 0x000078, "Member 'FBattlePassSeason::PremiumBattlePassToken' has a wrong offset!");
static_assert(offsetof(FBattlePassSeason, BattlePassLevelToken) == 0x000080, "Member 'FBattlePassSeason::BattlePassLevelToken' has a wrong offset!");
static_assert(offsetof(FBattlePassSeason, Levels) == 0x000088, "Member 'FBattlePassSeason::Levels' has a wrong offset!");
static_assert(offsetof(FBattlePassSeason, IsLegacy) == 0x000098, "Member 'FBattlePassSeason::IsLegacy' has a wrong offset!");

// ScriptStruct Flame.HumanArchetypeHairConfiguration
// 0x0010 (0x0010 - 0x0000)
struct FHumanArchetypeHairConfiguration final
{
public:
	class USkeletalMesh*                          HairMesh;                                          // 0x0000(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UMaterialInterface*                     HeadMaterial;                                      // 0x0008(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FHumanArchetypeHairConfiguration) == 0x000008, "Wrong alignment on FHumanArchetypeHairConfiguration");
static_assert(sizeof(FHumanArchetypeHairConfiguration) == 0x000010, "Wrong size on FHumanArchetypeHairConfiguration");
static_assert(offsetof(FHumanArchetypeHairConfiguration, HairMesh) == 0x000000, "Member 'FHumanArchetypeHairConfiguration::HairMesh' has a wrong offset!");
static_assert(offsetof(FHumanArchetypeHairConfiguration, HeadMaterial) == 0x000008, "Member 'FHumanArchetypeHairConfiguration::HeadMaterial' has a wrong offset!");

// ScriptStruct Flame.CloudBattlePassExperienceEvent
// 0x0024 (0x0024 - 0x0000)
struct FCloudBattlePassExperienceEvent final
{
public:
	class FName                                   SeasonName;                                        // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   GameplayEventName;                                 // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         NewTotalXp;                                        // 0x0010(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         GainedBaseXp;                                      // 0x0014(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         GainedBonusXp;                                     // 0x0018(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ExperienceBooster;                                 // 0x001C(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          PremiumActive;                                     // 0x0020(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_21[0x3];                                       // 0x0021(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FCloudBattlePassExperienceEvent) == 0x000004, "Wrong alignment on FCloudBattlePassExperienceEvent");
static_assert(sizeof(FCloudBattlePassExperienceEvent) == 0x000024, "Wrong size on FCloudBattlePassExperienceEvent");
static_assert(offsetof(FCloudBattlePassExperienceEvent, SeasonName) == 0x000000, "Member 'FCloudBattlePassExperienceEvent::SeasonName' has a wrong offset!");
static_assert(offsetof(FCloudBattlePassExperienceEvent, GameplayEventName) == 0x000008, "Member 'FCloudBattlePassExperienceEvent::GameplayEventName' has a wrong offset!");
static_assert(offsetof(FCloudBattlePassExperienceEvent, NewTotalXp) == 0x000010, "Member 'FCloudBattlePassExperienceEvent::NewTotalXp' has a wrong offset!");
static_assert(offsetof(FCloudBattlePassExperienceEvent, GainedBaseXp) == 0x000014, "Member 'FCloudBattlePassExperienceEvent::GainedBaseXp' has a wrong offset!");
static_assert(offsetof(FCloudBattlePassExperienceEvent, GainedBonusXp) == 0x000018, "Member 'FCloudBattlePassExperienceEvent::GainedBonusXp' has a wrong offset!");
static_assert(offsetof(FCloudBattlePassExperienceEvent, ExperienceBooster) == 0x00001C, "Member 'FCloudBattlePassExperienceEvent::ExperienceBooster' has a wrong offset!");
static_assert(offsetof(FCloudBattlePassExperienceEvent, PremiumActive) == 0x000020, "Member 'FCloudBattlePassExperienceEvent::PremiumActive' has a wrong offset!");

// ScriptStruct Flame.AmmoSyncMessage
// 0x0018 (0x0018 - 0x0000)
struct FAmmoSyncMessage final
{
public:
	class AProjectileWeapon*                      TargetWeapon;                                      // 0x0000(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         AmmoInMagCount;                                    // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ChamberedAmmo;                                     // 0x000C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         BackpackAmmo;                                      // 0x0010(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FAmmoSyncMessage) == 0x000008, "Wrong alignment on FAmmoSyncMessage");
static_assert(sizeof(FAmmoSyncMessage) == 0x000018, "Wrong size on FAmmoSyncMessage");
static_assert(offsetof(FAmmoSyncMessage, TargetWeapon) == 0x000000, "Member 'FAmmoSyncMessage::TargetWeapon' has a wrong offset!");
static_assert(offsetof(FAmmoSyncMessage, AmmoInMagCount) == 0x000008, "Member 'FAmmoSyncMessage::AmmoInMagCount' has a wrong offset!");
static_assert(offsetof(FAmmoSyncMessage, ChamberedAmmo) == 0x00000C, "Member 'FAmmoSyncMessage::ChamberedAmmo' has a wrong offset!");
static_assert(offsetof(FAmmoSyncMessage, BackpackAmmo) == 0x000010, "Member 'FAmmoSyncMessage::BackpackAmmo' has a wrong offset!");

// ScriptStruct Flame.PlansList
// 0x0010 (0x0128 - 0x0118)
struct FPlansList : public FItemClassTableRow
{
public:
	int32                                         NeededLevel;                                       // 0x0118(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         TimeToCraftFromParts;                              // 0x011C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         TimeInSeconds;                                     // 0x0120(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MaterialCost;                                      // 0x0124(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FPlansList) == 0x000008, "Wrong alignment on FPlansList");
static_assert(sizeof(FPlansList) == 0x000128, "Wrong size on FPlansList");
static_assert(offsetof(FPlansList, NeededLevel) == 0x000118, "Member 'FPlansList::NeededLevel' has a wrong offset!");
static_assert(offsetof(FPlansList, TimeToCraftFromParts) == 0x00011C, "Member 'FPlansList::TimeToCraftFromParts' has a wrong offset!");
static_assert(offsetof(FPlansList, TimeInSeconds) == 0x000120, "Member 'FPlansList::TimeInSeconds' has a wrong offset!");
static_assert(offsetof(FPlansList, MaterialCost) == 0x000124, "Member 'FPlansList::MaterialCost' has a wrong offset!");

// ScriptStruct Flame.ConsumablePlansList
// 0x0020 (0x0148 - 0x0128)
struct FConsumablePlansList final : public FPlansList
{
public:
	TSubclassOf<class AConsumablePlan>            Class;                                             // 0x0128(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSubclassOf<class AConsumableItem>            ConsumableClass;                                   // 0x0130(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<TSubclassOf<class AConsumablePart>>    Parts;                                             // 0x0138(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, UObjectWrapper, NativeAccessSpecifierPublic)
};
static_assert(alignof(FConsumablePlansList) == 0x000008, "Wrong alignment on FConsumablePlansList");
static_assert(sizeof(FConsumablePlansList) == 0x000148, "Wrong size on FConsumablePlansList");
static_assert(offsetof(FConsumablePlansList, Class) == 0x000128, "Member 'FConsumablePlansList::Class' has a wrong offset!");
static_assert(offsetof(FConsumablePlansList, ConsumableClass) == 0x000130, "Member 'FConsumablePlansList::ConsumableClass' has a wrong offset!");
static_assert(offsetof(FConsumablePlansList, Parts) == 0x000138, "Member 'FConsumablePlansList::Parts' has a wrong offset!");

// ScriptStruct Flame.CustomInputRuleRow
// 0x0010 (0x0050 - 0x0040)
struct FCustomInputRuleRow final : public FClassTableRowWithDisplayName
{
public:
	bool                                          bEnabled;                                          // 0x0040(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_41[0x7];                                       // 0x0041(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TSubclassOf<class ACustomInputRule>           Class;                                             // 0x0048(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FCustomInputRuleRow) == 0x000008, "Wrong alignment on FCustomInputRuleRow");
static_assert(sizeof(FCustomInputRuleRow) == 0x000050, "Wrong size on FCustomInputRuleRow");
static_assert(offsetof(FCustomInputRuleRow, bEnabled) == 0x000040, "Member 'FCustomInputRuleRow::bEnabled' has a wrong offset!");
static_assert(offsetof(FCustomInputRuleRow, Class) == 0x000048, "Member 'FCustomInputRuleRow::Class' has a wrong offset!");

// ScriptStruct Flame.UpdateFriendsListResult
// 0x0058 (0x0058 - 0x0000)
struct FUpdateFriendsListResult final
{
public:
	bool                                          WasSuccessful;                                     // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TMap<struct FUniqueNetIdRepl, class UFriendInfo*> FriendsList;                                       // 0x0008(0x0050)(BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
};
static_assert(alignof(FUpdateFriendsListResult) == 0x000008, "Wrong alignment on FUpdateFriendsListResult");
static_assert(sizeof(FUpdateFriendsListResult) == 0x000058, "Wrong size on FUpdateFriendsListResult");
static_assert(offsetof(FUpdateFriendsListResult, WasSuccessful) == 0x000000, "Member 'FUpdateFriendsListResult::WasSuccessful' has a wrong offset!");
static_assert(offsetof(FUpdateFriendsListResult, FriendsList) == 0x000008, "Member 'FUpdateFriendsListResult::FriendsList' has a wrong offset!");

// ScriptStruct Flame.CloudBattlePassSettings
// 0x0050 (0x0050 - 0x0000)
struct FCloudBattlePassSettings final
{
public:
	class FString                                 GetCurrentBattlePassSeasonStateClientRequestName;  // 0x0000(0x0010)(Edit, ZeroConstructor, Config, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 GetAllBattlePassSeasonsStateClientRequestName;     // 0x0010(0x0010)(Edit, ZeroConstructor, Config, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ClaimBattlePassRewardsClientRequestName;           // 0x0020(0x0010)(Edit, ZeroConstructor, Config, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 PurchaseBattlePassLevelClientRequestName;          // 0x0030(0x0010)(Edit, ZeroConstructor, Config, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 SelectLegacySeasonClientRequestName;               // 0x0040(0x0010)(Edit, ZeroConstructor, Config, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FCloudBattlePassSettings) == 0x000008, "Wrong alignment on FCloudBattlePassSettings");
static_assert(sizeof(FCloudBattlePassSettings) == 0x000050, "Wrong size on FCloudBattlePassSettings");
static_assert(offsetof(FCloudBattlePassSettings, GetCurrentBattlePassSeasonStateClientRequestName) == 0x000000, "Member 'FCloudBattlePassSettings::GetCurrentBattlePassSeasonStateClientRequestName' has a wrong offset!");
static_assert(offsetof(FCloudBattlePassSettings, GetAllBattlePassSeasonsStateClientRequestName) == 0x000010, "Member 'FCloudBattlePassSettings::GetAllBattlePassSeasonsStateClientRequestName' has a wrong offset!");
static_assert(offsetof(FCloudBattlePassSettings, ClaimBattlePassRewardsClientRequestName) == 0x000020, "Member 'FCloudBattlePassSettings::ClaimBattlePassRewardsClientRequestName' has a wrong offset!");
static_assert(offsetof(FCloudBattlePassSettings, PurchaseBattlePassLevelClientRequestName) == 0x000030, "Member 'FCloudBattlePassSettings::PurchaseBattlePassLevelClientRequestName' has a wrong offset!");
static_assert(offsetof(FCloudBattlePassSettings, SelectLegacySeasonClientRequestName) == 0x000040, "Member 'FCloudBattlePassSettings::SelectLegacySeasonClientRequestName' has a wrong offset!");

// ScriptStruct Flame.CloudItemRead
// 0x0018 (0x0018 - 0x0000)
struct FCloudItemRead final
{
public:
	class FString                                 ClassName;                                         // 0x0000(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Count;                                             // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FCloudItemRead) == 0x000008, "Wrong alignment on FCloudItemRead");
static_assert(sizeof(FCloudItemRead) == 0x000018, "Wrong size on FCloudItemRead");
static_assert(offsetof(FCloudItemRead, ClassName) == 0x000000, "Member 'FCloudItemRead::ClassName' has a wrong offset!");
static_assert(offsetof(FCloudItemRead, Count) == 0x000010, "Member 'FCloudItemRead::Count' has a wrong offset!");

// ScriptStruct Flame.CloudOperationRead
// 0x0050 (0x0050 - 0x0000)
struct FCloudOperationRead final
{
public:
	class FString                                 Op;                                                // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Path;                                              // 0x0010(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FCloudItemRead                         From;                                              // 0x0020(0x0018)(BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	struct FCloudItemRead                         To;                                                // 0x0038(0x0018)(BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
};
static_assert(alignof(FCloudOperationRead) == 0x000008, "Wrong alignment on FCloudOperationRead");
static_assert(sizeof(FCloudOperationRead) == 0x000050, "Wrong size on FCloudOperationRead");
static_assert(offsetof(FCloudOperationRead, Op) == 0x000000, "Member 'FCloudOperationRead::Op' has a wrong offset!");
static_assert(offsetof(FCloudOperationRead, Path) == 0x000010, "Member 'FCloudOperationRead::Path' has a wrong offset!");
static_assert(offsetof(FCloudOperationRead, From) == 0x000020, "Member 'FCloudOperationRead::From' has a wrong offset!");
static_assert(offsetof(FCloudOperationRead, To) == 0x000038, "Member 'FCloudOperationRead::To' has a wrong offset!");

// ScriptStruct Flame.CloudChallengeClaimResult
// 0x0070 (0x0070 - 0x0000)
struct FCloudChallengeClaimResult final
{
public:
	struct FCloudChallengeSlotInfo                Challenge;                                         // 0x0000(0x0050)(BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	TArray<struct FCloudItemRead>                 Rewards;                                           // 0x0050(0x0010)(BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FCloudOperationRead>            Operations;                                        // 0x0060(0x0010)(BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FCloudChallengeClaimResult) == 0x000008, "Wrong alignment on FCloudChallengeClaimResult");
static_assert(sizeof(FCloudChallengeClaimResult) == 0x000070, "Wrong size on FCloudChallengeClaimResult");
static_assert(offsetof(FCloudChallengeClaimResult, Challenge) == 0x000000, "Member 'FCloudChallengeClaimResult::Challenge' has a wrong offset!");
static_assert(offsetof(FCloudChallengeClaimResult, Rewards) == 0x000050, "Member 'FCloudChallengeClaimResult::Rewards' has a wrong offset!");
static_assert(offsetof(FCloudChallengeClaimResult, Operations) == 0x000060, "Member 'FCloudChallengeClaimResult::Operations' has a wrong offset!");

// ScriptStruct Flame.CurrencyItemsList
// 0x0010 (0x0130 - 0x0120)
struct FCurrencyItemsList final : public FItemClassTableRowWithInsurance
{
public:
	TSubclassOf<class ACurrencyItem>              Class;                                             // 0x0120(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         StackSize;                                         // 0x0128(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MaterialCost;                                      // 0x012C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FCurrencyItemsList) == 0x000008, "Wrong alignment on FCurrencyItemsList");
static_assert(sizeof(FCurrencyItemsList) == 0x000130, "Wrong size on FCurrencyItemsList");
static_assert(offsetof(FCurrencyItemsList, Class) == 0x000120, "Member 'FCurrencyItemsList::Class' has a wrong offset!");
static_assert(offsetof(FCurrencyItemsList, StackSize) == 0x000128, "Member 'FCurrencyItemsList::StackSize' has a wrong offset!");
static_assert(offsetof(FCurrencyItemsList, MaterialCost) == 0x00012C, "Member 'FCurrencyItemsList::MaterialCost' has a wrong offset!");

// ScriptStruct Flame.LeaderboardReadContext
// 0x0014 (0x0014 - 0x0000)
struct FLeaderboardReadContext final
{
public:
	ELeaderboardType                              BoardType;                                         // 0x0000(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   StatName;                                          // 0x0004(0x0008)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         StartRank;                                         // 0x000C(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Range;                                             // 0x0010(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FLeaderboardReadContext) == 0x000004, "Wrong alignment on FLeaderboardReadContext");
static_assert(sizeof(FLeaderboardReadContext) == 0x000014, "Wrong size on FLeaderboardReadContext");
static_assert(offsetof(FLeaderboardReadContext, BoardType) == 0x000000, "Member 'FLeaderboardReadContext::BoardType' has a wrong offset!");
static_assert(offsetof(FLeaderboardReadContext, StatName) == 0x000004, "Member 'FLeaderboardReadContext::StatName' has a wrong offset!");
static_assert(offsetof(FLeaderboardReadContext, StartRank) == 0x00000C, "Member 'FLeaderboardReadContext::StartRank' has a wrong offset!");
static_assert(offsetof(FLeaderboardReadContext, Range) == 0x000010, "Member 'FLeaderboardReadContext::Range' has a wrong offset!");

// ScriptStruct Flame.DecalInfo
// 0x0040 (0x0040 - 0x0000)
struct FDecalInfo final
{
public:
	struct FTransform                             Transform;                                         // 0x0000(0x0030)(Edit, BlueprintVisible, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	float                                         SizeMultiplier;                                    // 0x0030(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_34[0x4];                                       // 0x0034(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UMaterialInterface*                     DecalMaterial;                                     // 0x0038(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FDecalInfo) == 0x000010, "Wrong alignment on FDecalInfo");
static_assert(sizeof(FDecalInfo) == 0x000040, "Wrong size on FDecalInfo");
static_assert(offsetof(FDecalInfo, Transform) == 0x000000, "Member 'FDecalInfo::Transform' has a wrong offset!");
static_assert(offsetof(FDecalInfo, SizeMultiplier) == 0x000030, "Member 'FDecalInfo::SizeMultiplier' has a wrong offset!");
static_assert(offsetof(FDecalInfo, DecalMaterial) == 0x000038, "Member 'FDecalInfo::DecalMaterial' has a wrong offset!");

// ScriptStruct Flame.InventoryOperationInfoClient
// 0x0014 (0x0014 - 0x0000)
struct FInventoryOperationInfoClient final
{
public:
	int32                                         ID;                                                // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TWeakObjectPtr<class AItem>                   Item;                                              // 0x0004(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         RequestTime;                                       // 0x000C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bConfirmationFromLoot;                             // 0x0010(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bConfirmationFromHuman;                            // 0x0011(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_12[0x2];                                       // 0x0012(0x0002)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FInventoryOperationInfoClient) == 0x000004, "Wrong alignment on FInventoryOperationInfoClient");
static_assert(sizeof(FInventoryOperationInfoClient) == 0x000014, "Wrong size on FInventoryOperationInfoClient");
static_assert(offsetof(FInventoryOperationInfoClient, ID) == 0x000000, "Member 'FInventoryOperationInfoClient::ID' has a wrong offset!");
static_assert(offsetof(FInventoryOperationInfoClient, Item) == 0x000004, "Member 'FInventoryOperationInfoClient::Item' has a wrong offset!");
static_assert(offsetof(FInventoryOperationInfoClient, RequestTime) == 0x00000C, "Member 'FInventoryOperationInfoClient::RequestTime' has a wrong offset!");
static_assert(offsetof(FInventoryOperationInfoClient, bConfirmationFromLoot) == 0x000010, "Member 'FInventoryOperationInfoClient::bConfirmationFromLoot' has a wrong offset!");
static_assert(offsetof(FInventoryOperationInfoClient, bConfirmationFromHuman) == 0x000011, "Member 'FInventoryOperationInfoClient::bConfirmationFromHuman' has a wrong offset!");

// ScriptStruct Flame.LeaderboardData
// 0x0018 (0x0018 - 0x0000)
struct FLeaderboardData final
{
public:
	struct FDateTime                              Timestamp;                                         // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FLeaderboardDataRow>            Rows;                                              // 0x0008(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FLeaderboardData) == 0x000008, "Wrong alignment on FLeaderboardData");
static_assert(sizeof(FLeaderboardData) == 0x000018, "Wrong size on FLeaderboardData");
static_assert(offsetof(FLeaderboardData, Timestamp) == 0x000000, "Member 'FLeaderboardData::Timestamp' has a wrong offset!");
static_assert(offsetof(FLeaderboardData, Rows) == 0x000008, "Member 'FLeaderboardData::Rows' has a wrong offset!");

// ScriptStruct Flame.WaterMovement
// 0x0038 (0x0038 - 0x0000)
struct FWaterMovement final
{
public:
	class UAnimSequence*                          WaterIdle;                                         // 0x0000(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAnimSequence*                          WaterForward;                                      // 0x0008(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAnimSequence*                          WaterRightForward;                                 // 0x0010(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAnimSequence*                          WaterRightBack;                                    // 0x0018(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAnimSequence*                          WaterLeftForward;                                  // 0x0020(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAnimSequence*                          WaterLeftBack;                                     // 0x0028(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAnimSequence*                          WaterBack;                                         // 0x0030(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FWaterMovement) == 0x000008, "Wrong alignment on FWaterMovement");
static_assert(sizeof(FWaterMovement) == 0x000038, "Wrong size on FWaterMovement");
static_assert(offsetof(FWaterMovement, WaterIdle) == 0x000000, "Member 'FWaterMovement::WaterIdle' has a wrong offset!");
static_assert(offsetof(FWaterMovement, WaterForward) == 0x000008, "Member 'FWaterMovement::WaterForward' has a wrong offset!");
static_assert(offsetof(FWaterMovement, WaterRightForward) == 0x000010, "Member 'FWaterMovement::WaterRightForward' has a wrong offset!");
static_assert(offsetof(FWaterMovement, WaterRightBack) == 0x000018, "Member 'FWaterMovement::WaterRightBack' has a wrong offset!");
static_assert(offsetof(FWaterMovement, WaterLeftForward) == 0x000020, "Member 'FWaterMovement::WaterLeftForward' has a wrong offset!");
static_assert(offsetof(FWaterMovement, WaterLeftBack) == 0x000028, "Member 'FWaterMovement::WaterLeftBack' has a wrong offset!");
static_assert(offsetof(FWaterMovement, WaterBack) == 0x000030, "Member 'FWaterMovement::WaterBack' has a wrong offset!");

// ScriptStruct Flame.MapRotationSlotEntry
// 0x0038 (0x0038 - 0x0000)
struct FMapRotationSlotEntry final
{
public:
	class FString                                 MapName;                                           // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EOnlineGameMode                               GameMode;                                          // 0x0010(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FDateTime                              Start;                                             // 0x0018(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FDateTime                              End;                                               // 0x0020(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 LabelName;                                         // 0x0028(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FMapRotationSlotEntry) == 0x000008, "Wrong alignment on FMapRotationSlotEntry");
static_assert(sizeof(FMapRotationSlotEntry) == 0x000038, "Wrong size on FMapRotationSlotEntry");
static_assert(offsetof(FMapRotationSlotEntry, MapName) == 0x000000, "Member 'FMapRotationSlotEntry::MapName' has a wrong offset!");
static_assert(offsetof(FMapRotationSlotEntry, GameMode) == 0x000010, "Member 'FMapRotationSlotEntry::GameMode' has a wrong offset!");
static_assert(offsetof(FMapRotationSlotEntry, Start) == 0x000018, "Member 'FMapRotationSlotEntry::Start' has a wrong offset!");
static_assert(offsetof(FMapRotationSlotEntry, End) == 0x000020, "Member 'FMapRotationSlotEntry::End' has a wrong offset!");
static_assert(offsetof(FMapRotationSlotEntry, LabelName) == 0x000028, "Member 'FMapRotationSlotEntry::LabelName' has a wrong offset!");

// ScriptStruct Flame.CloudMapRotationSlot
// 0x0050 (0x0050 - 0x0000)
struct FCloudMapRotationSlot final
{
public:
	int32                                         ID;                                                // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FMapRotationSlotEntry                  Current;                                           // 0x0008(0x0038)(BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	TArray<struct FMapRotationSlotEntry>          Upcoming;                                          // 0x0040(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FCloudMapRotationSlot) == 0x000008, "Wrong alignment on FCloudMapRotationSlot");
static_assert(sizeof(FCloudMapRotationSlot) == 0x000050, "Wrong size on FCloudMapRotationSlot");
static_assert(offsetof(FCloudMapRotationSlot, ID) == 0x000000, "Member 'FCloudMapRotationSlot::ID' has a wrong offset!");
static_assert(offsetof(FCloudMapRotationSlot, Current) == 0x000008, "Member 'FCloudMapRotationSlot::Current' has a wrong offset!");
static_assert(offsetof(FCloudMapRotationSlot, Upcoming) == 0x000040, "Member 'FCloudMapRotationSlot::Upcoming' has a wrong offset!");

// ScriptStruct Flame.CloudChallengesSettings
// 0x0090 (0x0090 - 0x0000)
struct FCloudChallengesSettings final
{
public:
	class FString                                 GetChallengesRequestName;                          // 0x0000(0x0010)(Edit, ZeroConstructor, Config, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 GetAllChallengesRequestName;                       // 0x0010(0x0010)(Edit, ZeroConstructor, Config, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 SetChallengeRequestName;                           // 0x0020(0x0010)(Edit, ZeroConstructor, Config, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 SetChallengeProgressRequestName;                   // 0x0030(0x0010)(Edit, ZeroConstructor, Config, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ReRollChallengeRequestName;                        // 0x0040(0x0010)(Edit, ZeroConstructor, Config, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ClaimChallengeRequestName;                         // 0x0050(0x0010)(Edit, ZeroConstructor, Config, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 GetSeasonChallengeRewardsName;                     // 0x0060(0x0010)(Edit, ZeroConstructor, Config, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ClaimSeasonChallengeRequestName;                   // 0x0070(0x0010)(Edit, ZeroConstructor, Config, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 GetUserSeasonChallengeProgressName;                // 0x0080(0x0010)(Edit, ZeroConstructor, Config, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FCloudChallengesSettings) == 0x000008, "Wrong alignment on FCloudChallengesSettings");
static_assert(sizeof(FCloudChallengesSettings) == 0x000090, "Wrong size on FCloudChallengesSettings");
static_assert(offsetof(FCloudChallengesSettings, GetChallengesRequestName) == 0x000000, "Member 'FCloudChallengesSettings::GetChallengesRequestName' has a wrong offset!");
static_assert(offsetof(FCloudChallengesSettings, GetAllChallengesRequestName) == 0x000010, "Member 'FCloudChallengesSettings::GetAllChallengesRequestName' has a wrong offset!");
static_assert(offsetof(FCloudChallengesSettings, SetChallengeRequestName) == 0x000020, "Member 'FCloudChallengesSettings::SetChallengeRequestName' has a wrong offset!");
static_assert(offsetof(FCloudChallengesSettings, SetChallengeProgressRequestName) == 0x000030, "Member 'FCloudChallengesSettings::SetChallengeProgressRequestName' has a wrong offset!");
static_assert(offsetof(FCloudChallengesSettings, ReRollChallengeRequestName) == 0x000040, "Member 'FCloudChallengesSettings::ReRollChallengeRequestName' has a wrong offset!");
static_assert(offsetof(FCloudChallengesSettings, ClaimChallengeRequestName) == 0x000050, "Member 'FCloudChallengesSettings::ClaimChallengeRequestName' has a wrong offset!");
static_assert(offsetof(FCloudChallengesSettings, GetSeasonChallengeRewardsName) == 0x000060, "Member 'FCloudChallengesSettings::GetSeasonChallengeRewardsName' has a wrong offset!");
static_assert(offsetof(FCloudChallengesSettings, ClaimSeasonChallengeRequestName) == 0x000070, "Member 'FCloudChallengesSettings::ClaimSeasonChallengeRequestName' has a wrong offset!");
static_assert(offsetof(FCloudChallengesSettings, GetUserSeasonChallengeProgressName) == 0x000080, "Member 'FCloudChallengesSettings::GetUserSeasonChallengeProgressName' has a wrong offset!");

// ScriptStruct Flame.CommodityDescriptor
// 0x0028 (0x0028 - 0x0000)
struct FCommodityDescriptor
{
public:
	uint8                                         Pad_0[0x8];                                        // 0x0000(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	TSubclassOf<class AActor>                     Commodity;                                         // 0x0008(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FInt32Interval                         Capacity;                                          // 0x0010(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         CapacityVariation;                                 // 0x0018(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FFloatInterval                         Priority;                                          // 0x001C(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_24[0x4];                                       // 0x0024(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FCommodityDescriptor) == 0x000008, "Wrong alignment on FCommodityDescriptor");
static_assert(sizeof(FCommodityDescriptor) == 0x000028, "Wrong size on FCommodityDescriptor");
static_assert(offsetof(FCommodityDescriptor, Commodity) == 0x000008, "Member 'FCommodityDescriptor::Commodity' has a wrong offset!");
static_assert(offsetof(FCommodityDescriptor, Capacity) == 0x000010, "Member 'FCommodityDescriptor::Capacity' has a wrong offset!");
static_assert(offsetof(FCommodityDescriptor, CapacityVariation) == 0x000018, "Member 'FCommodityDescriptor::CapacityVariation' has a wrong offset!");
static_assert(offsetof(FCommodityDescriptor, Priority) == 0x00001C, "Member 'FCommodityDescriptor::Priority' has a wrong offset!");

// ScriptStruct Flame.ManagerCommodityDescriptor
// 0x0010 (0x0038 - 0x0028)
struct FManagerCommodityDescriptor final : public FCommodityDescriptor
{
public:
	float                                         SpawnProbability;                                  // 0x0028(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ECommodityManagerDistributionAlgorithm        DistributionAlgorithm;                             // 0x002C(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2D[0x3];                                       // 0x002D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         PercentageOfLootSourcesToUse;                      // 0x0030(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_34[0x4];                                       // 0x0034(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FManagerCommodityDescriptor) == 0x000008, "Wrong alignment on FManagerCommodityDescriptor");
static_assert(sizeof(FManagerCommodityDescriptor) == 0x000038, "Wrong size on FManagerCommodityDescriptor");
static_assert(offsetof(FManagerCommodityDescriptor, SpawnProbability) == 0x000028, "Member 'FManagerCommodityDescriptor::SpawnProbability' has a wrong offset!");
static_assert(offsetof(FManagerCommodityDescriptor, DistributionAlgorithm) == 0x00002C, "Member 'FManagerCommodityDescriptor::DistributionAlgorithm' has a wrong offset!");
static_assert(offsetof(FManagerCommodityDescriptor, PercentageOfLootSourcesToUse) == 0x000030, "Member 'FManagerCommodityDescriptor::PercentageOfLootSourcesToUse' has a wrong offset!");

// ScriptStruct Flame.CloudUserCountersSettings
// 0x0040 (0x0040 - 0x0000)
struct FCloudUserCountersSettings final
{
public:
	class FString                                 GetUserCounterClientRequestName;                   // 0x0000(0x0010)(Edit, ZeroConstructor, Config, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 UpdateUserCounterClientRequestName;                // 0x0010(0x0010)(Edit, ZeroConstructor, Config, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 GetUserCounterServerRequestName;                   // 0x0020(0x0010)(Edit, ZeroConstructor, Config, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 UpdateUserCounterServerRequestName;                // 0x0030(0x0010)(Edit, ZeroConstructor, Config, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FCloudUserCountersSettings) == 0x000008, "Wrong alignment on FCloudUserCountersSettings");
static_assert(sizeof(FCloudUserCountersSettings) == 0x000040, "Wrong size on FCloudUserCountersSettings");
static_assert(offsetof(FCloudUserCountersSettings, GetUserCounterClientRequestName) == 0x000000, "Member 'FCloudUserCountersSettings::GetUserCounterClientRequestName' has a wrong offset!");
static_assert(offsetof(FCloudUserCountersSettings, UpdateUserCounterClientRequestName) == 0x000010, "Member 'FCloudUserCountersSettings::UpdateUserCounterClientRequestName' has a wrong offset!");
static_assert(offsetof(FCloudUserCountersSettings, GetUserCounterServerRequestName) == 0x000020, "Member 'FCloudUserCountersSettings::GetUserCounterServerRequestName' has a wrong offset!");
static_assert(offsetof(FCloudUserCountersSettings, UpdateUserCounterServerRequestName) == 0x000030, "Member 'FCloudUserCountersSettings::UpdateUserCounterServerRequestName' has a wrong offset!");

// ScriptStruct Flame.CloudMapRotationsResponse
// 0x0010 (0x0010 - 0x0000)
struct FCloudMapRotationsResponse final
{
public:
	TArray<struct FCloudMapRotationSlot>          Slots;                                             // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FCloudMapRotationsResponse) == 0x000008, "Wrong alignment on FCloudMapRotationsResponse");
static_assert(sizeof(FCloudMapRotationsResponse) == 0x000010, "Wrong size on FCloudMapRotationsResponse");
static_assert(offsetof(FCloudMapRotationsResponse, Slots) == 0x000000, "Member 'FCloudMapRotationsResponse::Slots' has a wrong offset!");

// ScriptStruct Flame.AchievementStruct
// 0x0020 (0x0020 - 0x0000)
struct FAchievementStruct final
{
public:
	class FName                                   AchievementId;                                     // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ID;                                                // 0x0008(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Progress;                                          // 0x0018(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FAchievementStruct) == 0x000008, "Wrong alignment on FAchievementStruct");
static_assert(sizeof(FAchievementStruct) == 0x000020, "Wrong size on FAchievementStruct");
static_assert(offsetof(FAchievementStruct, AchievementId) == 0x000000, "Member 'FAchievementStruct::AchievementId' has a wrong offset!");
static_assert(offsetof(FAchievementStruct, ID) == 0x000008, "Member 'FAchievementStruct::ID' has a wrong offset!");
static_assert(offsetof(FAchievementStruct, Progress) == 0x000018, "Member 'FAchievementStruct::Progress' has a wrong offset!");

// ScriptStruct Flame.UserReviewResult
// 0x0028 (0x0028 - 0x0000)
struct FUserReviewResult final
{
public:
	class FString                                 Status;                                            // 0x0000(0x0010)(BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FUserReviewResultData                  Data;                                              // 0x0010(0x0001)(BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 ErrorDetails;                                      // 0x0018(0x0010)(BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FUserReviewResult) == 0x000008, "Wrong alignment on FUserReviewResult");
static_assert(sizeof(FUserReviewResult) == 0x000028, "Wrong size on FUserReviewResult");
static_assert(offsetof(FUserReviewResult, Status) == 0x000000, "Member 'FUserReviewResult::Status' has a wrong offset!");
static_assert(offsetof(FUserReviewResult, Data) == 0x000010, "Member 'FUserReviewResult::Data' has a wrong offset!");
static_assert(offsetof(FUserReviewResult, ErrorDetails) == 0x000018, "Member 'FUserReviewResult::ErrorDetails' has a wrong offset!");

// ScriptStruct Flame.BattlePassLevelTokenList
// 0x0008 (0x0018 - 0x0010)
struct FBattlePassLevelTokenList final : public FClassTableRow
{
public:
	TSubclassOf<class ABattlePassLevelToken>      Class;                                             // 0x0010(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FBattlePassLevelTokenList) == 0x000008, "Wrong alignment on FBattlePassLevelTokenList");
static_assert(sizeof(FBattlePassLevelTokenList) == 0x000018, "Wrong size on FBattlePassLevelTokenList");
static_assert(offsetof(FBattlePassLevelTokenList, Class) == 0x000010, "Member 'FBattlePassLevelTokenList::Class' has a wrong offset!");

// ScriptStruct Flame.GameSaveSettings
// 0x0048 (0x0048 - 0x0000)
struct FGameSaveSettings final
{
public:
	class FString                                 Language;                                          // 0x0000(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bSubtitlesEnabled;                                 // 0x0010(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bShowCompassHUD;                                   // 0x0011(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bShowInteractionHints;                             // 0x0012(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bAlwaysShowWeaponHUD;                              // 0x0013(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bAlwaysShowHealthHUD;                              // 0x0014(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bShowNetworkStatsHUD;                              // 0x0015(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_16[0x2];                                       // 0x0016(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 CrosshairColor;                                    // 0x0018(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         CrosshairLength;                                   // 0x0028(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         CrosshairThickness;                                // 0x002C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         CrosshairOpacity;                                  // 0x0030(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         AimingStyle;                                       // 0x0034(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EColorVisionDeficiency                        ColorVisionDeficiency;                             // 0x0038(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_39[0x3];                                       // 0x0039(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         ColorVisionDeficiencyStrength;                     // 0x003C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bEnableColorBlindMarkers;                          // 0x0040(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_41[0x7];                                       // 0x0041(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FGameSaveSettings) == 0x000008, "Wrong alignment on FGameSaveSettings");
static_assert(sizeof(FGameSaveSettings) == 0x000048, "Wrong size on FGameSaveSettings");
static_assert(offsetof(FGameSaveSettings, Language) == 0x000000, "Member 'FGameSaveSettings::Language' has a wrong offset!");
static_assert(offsetof(FGameSaveSettings, bSubtitlesEnabled) == 0x000010, "Member 'FGameSaveSettings::bSubtitlesEnabled' has a wrong offset!");
static_assert(offsetof(FGameSaveSettings, bShowCompassHUD) == 0x000011, "Member 'FGameSaveSettings::bShowCompassHUD' has a wrong offset!");
static_assert(offsetof(FGameSaveSettings, bShowInteractionHints) == 0x000012, "Member 'FGameSaveSettings::bShowInteractionHints' has a wrong offset!");
static_assert(offsetof(FGameSaveSettings, bAlwaysShowWeaponHUD) == 0x000013, "Member 'FGameSaveSettings::bAlwaysShowWeaponHUD' has a wrong offset!");
static_assert(offsetof(FGameSaveSettings, bAlwaysShowHealthHUD) == 0x000014, "Member 'FGameSaveSettings::bAlwaysShowHealthHUD' has a wrong offset!");
static_assert(offsetof(FGameSaveSettings, bShowNetworkStatsHUD) == 0x000015, "Member 'FGameSaveSettings::bShowNetworkStatsHUD' has a wrong offset!");
static_assert(offsetof(FGameSaveSettings, CrosshairColor) == 0x000018, "Member 'FGameSaveSettings::CrosshairColor' has a wrong offset!");
static_assert(offsetof(FGameSaveSettings, CrosshairLength) == 0x000028, "Member 'FGameSaveSettings::CrosshairLength' has a wrong offset!");
static_assert(offsetof(FGameSaveSettings, CrosshairThickness) == 0x00002C, "Member 'FGameSaveSettings::CrosshairThickness' has a wrong offset!");
static_assert(offsetof(FGameSaveSettings, CrosshairOpacity) == 0x000030, "Member 'FGameSaveSettings::CrosshairOpacity' has a wrong offset!");
static_assert(offsetof(FGameSaveSettings, AimingStyle) == 0x000034, "Member 'FGameSaveSettings::AimingStyle' has a wrong offset!");
static_assert(offsetof(FGameSaveSettings, ColorVisionDeficiency) == 0x000038, "Member 'FGameSaveSettings::ColorVisionDeficiency' has a wrong offset!");
static_assert(offsetof(FGameSaveSettings, ColorVisionDeficiencyStrength) == 0x00003C, "Member 'FGameSaveSettings::ColorVisionDeficiencyStrength' has a wrong offset!");
static_assert(offsetof(FGameSaveSettings, bEnableColorBlindMarkers) == 0x000040, "Member 'FGameSaveSettings::bEnableColorBlindMarkers' has a wrong offset!");

// ScriptStruct Flame.VideoSaveSettings
// 0x0060 (0x0060 - 0x0000)
struct FVideoSaveSettings final
{
public:
	float                                         Contrast;                                          // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Brightness;                                        // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SafeZoneScale;                                     // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 QualitySettingsLevel;                              // 0x0010(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Monitor;                                           // 0x0020(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bVSync;                                            // 0x0024(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_25[0x3];                                       // 0x0025(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Gamma;                                             // 0x0028(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MaxFramerate;                                      // 0x002C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         DLSSmode;                                          // 0x0030(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bFSR;                                              // 0x0034(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_35[0x3];                                       // 0x0035(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Antialiasing;                                      // 0x0038(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bShowFps;                                          // 0x003C(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bMotionBlur;                                       // 0x003D(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bSubsurfaceScattering;                             // 0x003E(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bLensFlare;                                        // 0x003F(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bShouldRecompileShader;                            // 0x0040(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsAutoSet;                                        // 0x0041(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_42[0x2];                                       // 0x0042(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Shadows;                                           // 0x0044(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Textures;                                          // 0x0048(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ViewDistance;                                      // 0x004C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         AmbientOcclusion;                                  // 0x0050(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Resolution;                                        // 0x0054(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         WindowMode;                                        // 0x0058(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5C[0x4];                                       // 0x005C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FVideoSaveSettings) == 0x000008, "Wrong alignment on FVideoSaveSettings");
static_assert(sizeof(FVideoSaveSettings) == 0x000060, "Wrong size on FVideoSaveSettings");
static_assert(offsetof(FVideoSaveSettings, Contrast) == 0x000000, "Member 'FVideoSaveSettings::Contrast' has a wrong offset!");
static_assert(offsetof(FVideoSaveSettings, Brightness) == 0x000004, "Member 'FVideoSaveSettings::Brightness' has a wrong offset!");
static_assert(offsetof(FVideoSaveSettings, SafeZoneScale) == 0x000008, "Member 'FVideoSaveSettings::SafeZoneScale' has a wrong offset!");
static_assert(offsetof(FVideoSaveSettings, QualitySettingsLevel) == 0x000010, "Member 'FVideoSaveSettings::QualitySettingsLevel' has a wrong offset!");
static_assert(offsetof(FVideoSaveSettings, Monitor) == 0x000020, "Member 'FVideoSaveSettings::Monitor' has a wrong offset!");
static_assert(offsetof(FVideoSaveSettings, bVSync) == 0x000024, "Member 'FVideoSaveSettings::bVSync' has a wrong offset!");
static_assert(offsetof(FVideoSaveSettings, Gamma) == 0x000028, "Member 'FVideoSaveSettings::Gamma' has a wrong offset!");
static_assert(offsetof(FVideoSaveSettings, MaxFramerate) == 0x00002C, "Member 'FVideoSaveSettings::MaxFramerate' has a wrong offset!");
static_assert(offsetof(FVideoSaveSettings, DLSSmode) == 0x000030, "Member 'FVideoSaveSettings::DLSSmode' has a wrong offset!");
static_assert(offsetof(FVideoSaveSettings, bFSR) == 0x000034, "Member 'FVideoSaveSettings::bFSR' has a wrong offset!");
static_assert(offsetof(FVideoSaveSettings, Antialiasing) == 0x000038, "Member 'FVideoSaveSettings::Antialiasing' has a wrong offset!");
static_assert(offsetof(FVideoSaveSettings, bShowFps) == 0x00003C, "Member 'FVideoSaveSettings::bShowFps' has a wrong offset!");
static_assert(offsetof(FVideoSaveSettings, bMotionBlur) == 0x00003D, "Member 'FVideoSaveSettings::bMotionBlur' has a wrong offset!");
static_assert(offsetof(FVideoSaveSettings, bSubsurfaceScattering) == 0x00003E, "Member 'FVideoSaveSettings::bSubsurfaceScattering' has a wrong offset!");
static_assert(offsetof(FVideoSaveSettings, bLensFlare) == 0x00003F, "Member 'FVideoSaveSettings::bLensFlare' has a wrong offset!");
static_assert(offsetof(FVideoSaveSettings, bShouldRecompileShader) == 0x000040, "Member 'FVideoSaveSettings::bShouldRecompileShader' has a wrong offset!");
static_assert(offsetof(FVideoSaveSettings, bIsAutoSet) == 0x000041, "Member 'FVideoSaveSettings::bIsAutoSet' has a wrong offset!");
static_assert(offsetof(FVideoSaveSettings, Shadows) == 0x000044, "Member 'FVideoSaveSettings::Shadows' has a wrong offset!");
static_assert(offsetof(FVideoSaveSettings, Textures) == 0x000048, "Member 'FVideoSaveSettings::Textures' has a wrong offset!");
static_assert(offsetof(FVideoSaveSettings, ViewDistance) == 0x00004C, "Member 'FVideoSaveSettings::ViewDistance' has a wrong offset!");
static_assert(offsetof(FVideoSaveSettings, AmbientOcclusion) == 0x000050, "Member 'FVideoSaveSettings::AmbientOcclusion' has a wrong offset!");
static_assert(offsetof(FVideoSaveSettings, Resolution) == 0x000054, "Member 'FVideoSaveSettings::Resolution' has a wrong offset!");
static_assert(offsetof(FVideoSaveSettings, WindowMode) == 0x000058, "Member 'FVideoSaveSettings::WindowMode' has a wrong offset!");

// ScriptStruct Flame.ArrayHelper
// 0x0010 (0x0010 - 0x0000)
struct FArrayHelper final
{
public:
	TArray<class AActor*>                         Instances;                                         // 0x0000(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FArrayHelper) == 0x000008, "Wrong alignment on FArrayHelper");
static_assert(sizeof(FArrayHelper) == 0x000010, "Wrong size on FArrayHelper");
static_assert(offsetof(FArrayHelper, Instances) == 0x000000, "Member 'FArrayHelper::Instances' has a wrong offset!");

// ScriptStruct Flame.GameStoreSlotInfo
// 0x0020 (0x0020 - 0x0000)
struct FGameStoreSlotInfo final
{
public:
	class FString                                 Name;                                              // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FGameStoreOfferInfo>            Offers;                                            // 0x0010(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FGameStoreSlotInfo) == 0x000008, "Wrong alignment on FGameStoreSlotInfo");
static_assert(sizeof(FGameStoreSlotInfo) == 0x000020, "Wrong size on FGameStoreSlotInfo");
static_assert(offsetof(FGameStoreSlotInfo, Name) == 0x000000, "Member 'FGameStoreSlotInfo::Name' has a wrong offset!");
static_assert(offsetof(FGameStoreSlotInfo, Offers) == 0x000010, "Member 'FGameStoreSlotInfo::Offers' has a wrong offset!");

// ScriptStruct Flame.GameStoreInfo
// 0x0028 (0x0028 - 0x0000)
struct FGameStoreInfo final
{
public:
	class FString                                 Name;                                              // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FDateTime                              OriginTime;                                        // 0x0010(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FGameStoreSlotInfo>             Slots;                                             // 0x0018(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FGameStoreInfo) == 0x000008, "Wrong alignment on FGameStoreInfo");
static_assert(sizeof(FGameStoreInfo) == 0x000028, "Wrong size on FGameStoreInfo");
static_assert(offsetof(FGameStoreInfo, Name) == 0x000000, "Member 'FGameStoreInfo::Name' has a wrong offset!");
static_assert(offsetof(FGameStoreInfo, OriginTime) == 0x000010, "Member 'FGameStoreInfo::OriginTime' has a wrong offset!");
static_assert(offsetof(FGameStoreInfo, Slots) == 0x000018, "Member 'FGameStoreInfo::Slots' has a wrong offset!");

// ScriptStruct Flame.InteriorClassProperties
// 0x01A0 (0x01A0 - 0x0000)
struct FInteriorClassProperties final
{
public:
	TMap<class FName, float>                      FloatProperties;                                   // 0x0000(0x0050)(Edit, NativeAccessSpecifierPublic)
	TMap<class FName, int32>                      IntProperties;                                     // 0x0050(0x0050)(Edit, NativeAccessSpecifierPublic)
	TMap<class FName, bool>                       BoolProperties;                                    // 0x00A0(0x0050)(Edit, NativeAccessSpecifierPublic)
	TMap<class FName, class UClass*>              ClassProperties;                                   // 0x00F0(0x0050)(Edit, NativeAccessSpecifierPublic)
	TMap<class FName, class UObject*>             ObjectProperties;                                  // 0x0140(0x0050)(Edit, NativeAccessSpecifierPublic)
	TArray<class FName>                           Tags;                                              // 0x0190(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FInteriorClassProperties) == 0x000008, "Wrong alignment on FInteriorClassProperties");
static_assert(sizeof(FInteriorClassProperties) == 0x0001A0, "Wrong size on FInteriorClassProperties");
static_assert(offsetof(FInteriorClassProperties, FloatProperties) == 0x000000, "Member 'FInteriorClassProperties::FloatProperties' has a wrong offset!");
static_assert(offsetof(FInteriorClassProperties, IntProperties) == 0x000050, "Member 'FInteriorClassProperties::IntProperties' has a wrong offset!");
static_assert(offsetof(FInteriorClassProperties, BoolProperties) == 0x0000A0, "Member 'FInteriorClassProperties::BoolProperties' has a wrong offset!");
static_assert(offsetof(FInteriorClassProperties, ClassProperties) == 0x0000F0, "Member 'FInteriorClassProperties::ClassProperties' has a wrong offset!");
static_assert(offsetof(FInteriorClassProperties, ObjectProperties) == 0x000140, "Member 'FInteriorClassProperties::ObjectProperties' has a wrong offset!");
static_assert(offsetof(FInteriorClassProperties, Tags) == 0x000190, "Member 'FInteriorClassProperties::Tags' has a wrong offset!");

// ScriptStruct Flame.InteriorClass
// 0x01E0 (0x01E0 - 0x0000)
struct FInteriorClass final
{
public:
	struct FTransform                             Transform;                                         // 0x0000(0x0030)(Edit, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	class UClass*                                 Class;                                             // 0x0030(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FInteriorClassProperties               Properties;                                        // 0x0038(0x01A0)(Edit, NativeAccessSpecifierPublic)
	uint8                                         Pad_1D8[0x8];                                      // 0x01D8(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FInteriorClass) == 0x000010, "Wrong alignment on FInteriorClass");
static_assert(sizeof(FInteriorClass) == 0x0001E0, "Wrong size on FInteriorClass");
static_assert(offsetof(FInteriorClass, Transform) == 0x000000, "Member 'FInteriorClass::Transform' has a wrong offset!");
static_assert(offsetof(FInteriorClass, Class) == 0x000030, "Member 'FInteriorClass::Class' has a wrong offset!");
static_assert(offsetof(FInteriorClass, Properties) == 0x000038, "Member 'FInteriorClass::Properties' has a wrong offset!");

// ScriptStruct Flame.KeyBinding
// 0x0068 (0x0068 - 0x0000)
struct FKeyBinding final
{
public:
	class FName                                   Name;                                              // 0x0000(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FKey                                   RHKey1;                                            // 0x0008(0x0018)(Edit, BlueprintVisible, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FKey                                   RHKey2;                                            // 0x0020(0x0018)(Edit, BlueprintVisible, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FKey                                   LHKey1;                                            // 0x0038(0x0018)(Edit, BlueprintVisible, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FKey                                   LHKey2;                                            // 0x0050(0x0018)(Edit, BlueprintVisible, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FKeyBinding) == 0x000008, "Wrong alignment on FKeyBinding");
static_assert(sizeof(FKeyBinding) == 0x000068, "Wrong size on FKeyBinding");
static_assert(offsetof(FKeyBinding, Name) == 0x000000, "Member 'FKeyBinding::Name' has a wrong offset!");
static_assert(offsetof(FKeyBinding, RHKey1) == 0x000008, "Member 'FKeyBinding::RHKey1' has a wrong offset!");
static_assert(offsetof(FKeyBinding, RHKey2) == 0x000020, "Member 'FKeyBinding::RHKey2' has a wrong offset!");
static_assert(offsetof(FKeyBinding, LHKey1) == 0x000038, "Member 'FKeyBinding::LHKey1' has a wrong offset!");
static_assert(offsetof(FKeyBinding, LHKey2) == 0x000050, "Member 'FKeyBinding::LHKey2' has a wrong offset!");

// ScriptStruct Flame.KeyboardSettings
// 0x0018 (0x0018 - 0x0000)
struct FKeyboardSettings final
{
public:
	int32                                         InputVersionNo;                                    // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Controls;                                          // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FKeyBinding>                    KeyBindings;                                       // 0x0008(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FKeyboardSettings) == 0x000008, "Wrong alignment on FKeyboardSettings");
static_assert(sizeof(FKeyboardSettings) == 0x000018, "Wrong size on FKeyboardSettings");
static_assert(offsetof(FKeyboardSettings, InputVersionNo) == 0x000000, "Member 'FKeyboardSettings::InputVersionNo' has a wrong offset!");
static_assert(offsetof(FKeyboardSettings, Controls) == 0x000004, "Member 'FKeyboardSettings::Controls' has a wrong offset!");
static_assert(offsetof(FKeyboardSettings, KeyBindings) == 0x000008, "Member 'FKeyboardSettings::KeyBindings' has a wrong offset!");

// ScriptStruct Flame.Melee
// 0x0030 (0x0030 - 0x0000)
struct FMelee final
{
public:
	class UAnimMontage*                           KnifeMelee;                                        // 0x0000(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAimOffsetBlendSpace1D*                 KnifeAttackAim;                                    // 0x0008(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAnimMontage*                           PistolMelee;                                       // 0x0010(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAimOffsetBlendSpace1D*                 PistolAttackAim;                                   // 0x0018(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAnimMontage*                           RifleMelee;                                        // 0x0020(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAimOffsetBlendSpace1D*                 RifleAttackAim;                                    // 0x0028(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FMelee) == 0x000008, "Wrong alignment on FMelee");
static_assert(sizeof(FMelee) == 0x000030, "Wrong size on FMelee");
static_assert(offsetof(FMelee, KnifeMelee) == 0x000000, "Member 'FMelee::KnifeMelee' has a wrong offset!");
static_assert(offsetof(FMelee, KnifeAttackAim) == 0x000008, "Member 'FMelee::KnifeAttackAim' has a wrong offset!");
static_assert(offsetof(FMelee, PistolMelee) == 0x000010, "Member 'FMelee::PistolMelee' has a wrong offset!");
static_assert(offsetof(FMelee, PistolAttackAim) == 0x000018, "Member 'FMelee::PistolAttackAim' has a wrong offset!");
static_assert(offsetof(FMelee, RifleMelee) == 0x000020, "Member 'FMelee::RifleMelee' has a wrong offset!");
static_assert(offsetof(FMelee, RifleAttackAim) == 0x000028, "Member 'FMelee::RifleAttackAim' has a wrong offset!");

// ScriptStruct Flame.CustomizationHairList
// 0x0058 (0x0098 - 0x0040)
struct FCustomizationHairList final : public FClassTableRowWithDisplayName
{
public:
	TSubclassOf<class ACustomizationHair>         Class;                                             // 0x0040(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TMap<TSubclassOf<class AGender>, struct FHairMeshesForHeadgear> Meshes;                                            // 0x0048(0x0050)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NativeAccessSpecifierPublic)
};
static_assert(alignof(FCustomizationHairList) == 0x000008, "Wrong alignment on FCustomizationHairList");
static_assert(sizeof(FCustomizationHairList) == 0x000098, "Wrong size on FCustomizationHairList");
static_assert(offsetof(FCustomizationHairList, Class) == 0x000040, "Member 'FCustomizationHairList::Class' has a wrong offset!");
static_assert(offsetof(FCustomizationHairList, Meshes) == 0x000048, "Member 'FCustomizationHairList::Meshes' has a wrong offset!");

// ScriptStruct Flame.CloudImprovementInfoList
// 0x0018 (0x0018 - 0x0000)
struct FCloudImprovementInfoList final
{
public:
	TArray<struct FCloudImprovementInfo>          Improvements;                                      // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_10[0x8];                                       // 0x0010(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FCloudImprovementInfoList) == 0x000008, "Wrong alignment on FCloudImprovementInfoList");
static_assert(sizeof(FCloudImprovementInfoList) == 0x000018, "Wrong size on FCloudImprovementInfoList");
static_assert(offsetof(FCloudImprovementInfoList, Improvements) == 0x000000, "Member 'FCloudImprovementInfoList::Improvements' has a wrong offset!");

// ScriptStruct Flame.CameraSpeedDependentHeightOffset
// 0x0018 (0x0018 - 0x0000)
struct FCameraSpeedDependentHeightOffset final
{
public:
	struct FVector                                IdleWalkingRunningHeight;                          // 0x0000(0x000C)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                IdleWalkingRunningTransitionSpeed;                 // 0x000C(0x000C)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FCameraSpeedDependentHeightOffset) == 0x000004, "Wrong alignment on FCameraSpeedDependentHeightOffset");
static_assert(sizeof(FCameraSpeedDependentHeightOffset) == 0x000018, "Wrong size on FCameraSpeedDependentHeightOffset");
static_assert(offsetof(FCameraSpeedDependentHeightOffset, IdleWalkingRunningHeight) == 0x000000, "Member 'FCameraSpeedDependentHeightOffset::IdleWalkingRunningHeight' has a wrong offset!");
static_assert(offsetof(FCameraSpeedDependentHeightOffset, IdleWalkingRunningTransitionSpeed) == 0x00000C, "Member 'FCameraSpeedDependentHeightOffset::IdleWalkingRunningTransitionSpeed' has a wrong offset!");

// ScriptStruct Flame.AttachedCharacterInfo
// 0x0030 (0x0030 - 0x0000)
struct FAttachedCharacterInfo final
{
public:
	bool                                          bIsAttached;                                       // 0x0000(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	TWeakObjectPtr<class AHumanCharacter>         Human;                                             // 0x0004(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 Name;                                              // 0x0010(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Progress;                                          // 0x0020(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_24[0x4];                                       // 0x0024(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TSubclassOf<class AConsumableItem>            UsingItem;                                         // 0x0028(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAttachedCharacterInfo) == 0x000008, "Wrong alignment on FAttachedCharacterInfo");
static_assert(sizeof(FAttachedCharacterInfo) == 0x000030, "Wrong size on FAttachedCharacterInfo");
static_assert(offsetof(FAttachedCharacterInfo, bIsAttached) == 0x000000, "Member 'FAttachedCharacterInfo::bIsAttached' has a wrong offset!");
static_assert(offsetof(FAttachedCharacterInfo, Human) == 0x000004, "Member 'FAttachedCharacterInfo::Human' has a wrong offset!");
static_assert(offsetof(FAttachedCharacterInfo, Name) == 0x000010, "Member 'FAttachedCharacterInfo::Name' has a wrong offset!");
static_assert(offsetof(FAttachedCharacterInfo, Progress) == 0x000020, "Member 'FAttachedCharacterInfo::Progress' has a wrong offset!");
static_assert(offsetof(FAttachedCharacterInfo, UsingItem) == 0x000028, "Member 'FAttachedCharacterInfo::UsingItem' has a wrong offset!");

// ScriptStruct Flame.BuildingMaterial
// 0x0030 (0x0030 - 0x0000)
struct FBuildingMaterial final
{
public:
	int32                                         BuildingMaterialIndex;                             // 0x0000(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   SlotName;                                          // 0x0004(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bExterior;                                         // 0x000C(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bInterior;                                         // 0x000D(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bFoundation;                                       // 0x000E(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_F[0x1];                                        // 0x000F(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class UMaterialInterface*>             AvailableBuildingMaterials;                        // 0x0010(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<TSoftObjectPtr<class UMaterialInterface>> AvailableSoftBuildingMaterials;                    // 0x0020(0x0010)(Edit, ZeroConstructor, UObjectWrapper, NativeAccessSpecifierPublic)
};
static_assert(alignof(FBuildingMaterial) == 0x000008, "Wrong alignment on FBuildingMaterial");
static_assert(sizeof(FBuildingMaterial) == 0x000030, "Wrong size on FBuildingMaterial");
static_assert(offsetof(FBuildingMaterial, BuildingMaterialIndex) == 0x000000, "Member 'FBuildingMaterial::BuildingMaterialIndex' has a wrong offset!");
static_assert(offsetof(FBuildingMaterial, SlotName) == 0x000004, "Member 'FBuildingMaterial::SlotName' has a wrong offset!");
static_assert(offsetof(FBuildingMaterial, bExterior) == 0x00000C, "Member 'FBuildingMaterial::bExterior' has a wrong offset!");
static_assert(offsetof(FBuildingMaterial, bInterior) == 0x00000D, "Member 'FBuildingMaterial::bInterior' has a wrong offset!");
static_assert(offsetof(FBuildingMaterial, bFoundation) == 0x00000E, "Member 'FBuildingMaterial::bFoundation' has a wrong offset!");
static_assert(offsetof(FBuildingMaterial, AvailableBuildingMaterials) == 0x000010, "Member 'FBuildingMaterial::AvailableBuildingMaterials' has a wrong offset!");
static_assert(offsetof(FBuildingMaterial, AvailableSoftBuildingMaterials) == 0x000020, "Member 'FBuildingMaterial::AvailableSoftBuildingMaterials' has a wrong offset!");

// ScriptStruct Flame.CustomizationVariantBundleList
// 0x0008 (0x0120 - 0x0118)
struct FCustomizationVariantBundleList final : public FItemClassTableRow
{
public:
	TSubclassOf<class ACustomizationVariantBundle> Class;                                             // 0x0118(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FCustomizationVariantBundleList) == 0x000008, "Wrong alignment on FCustomizationVariantBundleList");
static_assert(sizeof(FCustomizationVariantBundleList) == 0x000120, "Wrong size on FCustomizationVariantBundleList");
static_assert(offsetof(FCustomizationVariantBundleList, Class) == 0x000118, "Member 'FCustomizationVariantBundleList::Class' has a wrong offset!");

// ScriptStruct Flame.HitResultSimplified
// 0x003C (0x003C - 0x0000)
struct FHitResultSimplified final
{
public:
	struct FVector_NetQuantize                    ImpactPoint;                                       // 0x0000(0x000C)(BlueprintVisible, BlueprintReadOnly, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector_NetQuantizeNormal              Normal;                                            // 0x000C(0x000C)(BlueprintVisible, BlueprintReadOnly, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TWeakObjectPtr<class UPhysicalMaterial>       PhysMaterial;                                      // 0x0018(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TWeakObjectPtr<class AActor>                  Actor;                                             // 0x0020(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TWeakObjectPtr<class UPrimitiveComponent>     Component;                                         // 0x0028(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EPhysicalSurface                              ShapeSurfaceType;                                  // 0x0030(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_31[0x3];                                       // 0x0031(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   BoneName;                                          // 0x0034(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FHitResultSimplified) == 0x000004, "Wrong alignment on FHitResultSimplified");
static_assert(sizeof(FHitResultSimplified) == 0x00003C, "Wrong size on FHitResultSimplified");
static_assert(offsetof(FHitResultSimplified, ImpactPoint) == 0x000000, "Member 'FHitResultSimplified::ImpactPoint' has a wrong offset!");
static_assert(offsetof(FHitResultSimplified, Normal) == 0x00000C, "Member 'FHitResultSimplified::Normal' has a wrong offset!");
static_assert(offsetof(FHitResultSimplified, PhysMaterial) == 0x000018, "Member 'FHitResultSimplified::PhysMaterial' has a wrong offset!");
static_assert(offsetof(FHitResultSimplified, Actor) == 0x000020, "Member 'FHitResultSimplified::Actor' has a wrong offset!");
static_assert(offsetof(FHitResultSimplified, Component) == 0x000028, "Member 'FHitResultSimplified::Component' has a wrong offset!");
static_assert(offsetof(FHitResultSimplified, ShapeSurfaceType) == 0x000030, "Member 'FHitResultSimplified::ShapeSurfaceType' has a wrong offset!");
static_assert(offsetof(FHitResultSimplified, BoneName) == 0x000034, "Member 'FHitResultSimplified::BoneName' has a wrong offset!");

// ScriptStruct Flame.GameStoreData
// 0x0010 (0x0010 - 0x0000)
struct FGameStoreData final
{
public:
	TArray<struct FGameStoreInfo>                 Stores;                                            // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FGameStoreData) == 0x000008, "Wrong alignment on FGameStoreData");
static_assert(sizeof(FGameStoreData) == 0x000010, "Wrong size on FGameStoreData");
static_assert(offsetof(FGameStoreData, Stores) == 0x000000, "Member 'FGameStoreData::Stores' has a wrong offset!");

// ScriptStruct Flame.CommodityDescriptorNode
// 0x0008 (0x0030 - 0x0028)
struct FCommodityDescriptorNode final : public FCommodityDescriptor
{
public:
	ECommodityManagerDistributionAlgorithm        DistributionAlgorithm;                             // 0x0028(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_29[0x7];                                       // 0x0029(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FCommodityDescriptorNode) == 0x000008, "Wrong alignment on FCommodityDescriptorNode");
static_assert(sizeof(FCommodityDescriptorNode) == 0x000030, "Wrong size on FCommodityDescriptorNode");
static_assert(offsetof(FCommodityDescriptorNode, DistributionAlgorithm) == 0x000028, "Member 'FCommodityDescriptorNode::DistributionAlgorithm' has a wrong offset!");

// ScriptStruct Flame.InteriorCommoditySpawnNode
// 0x0070 (0x0070 - 0x0000)
struct FInteriorCommoditySpawnNode final
{
public:
	struct FTransform                             Transform;                                         // 0x0000(0x0030)(Edit, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	TSubclassOf<class AActor>                     Group;                                             // 0x0030(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<TSubclassOf<class AGameModeBase>>      AcceptedGameModes;                                 // 0x0038(0x0010)(Edit, ZeroConstructor, UObjectWrapper, NativeAccessSpecifierPublic)
	struct FInt32Interval                         SubObjectsLimit;                                   // 0x0048(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FCommodityDescriptorNode>       Commodities;                                       // 0x0050(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	int32                                         ParentIdx;                                         // 0x0060(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_64[0xC];                                       // 0x0064(0x000C)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FInteriorCommoditySpawnNode) == 0x000010, "Wrong alignment on FInteriorCommoditySpawnNode");
static_assert(sizeof(FInteriorCommoditySpawnNode) == 0x000070, "Wrong size on FInteriorCommoditySpawnNode");
static_assert(offsetof(FInteriorCommoditySpawnNode, Transform) == 0x000000, "Member 'FInteriorCommoditySpawnNode::Transform' has a wrong offset!");
static_assert(offsetof(FInteriorCommoditySpawnNode, Group) == 0x000030, "Member 'FInteriorCommoditySpawnNode::Group' has a wrong offset!");
static_assert(offsetof(FInteriorCommoditySpawnNode, AcceptedGameModes) == 0x000038, "Member 'FInteriorCommoditySpawnNode::AcceptedGameModes' has a wrong offset!");
static_assert(offsetof(FInteriorCommoditySpawnNode, SubObjectsLimit) == 0x000048, "Member 'FInteriorCommoditySpawnNode::SubObjectsLimit' has a wrong offset!");
static_assert(offsetof(FInteriorCommoditySpawnNode, Commodities) == 0x000050, "Member 'FInteriorCommoditySpawnNode::Commodities' has a wrong offset!");
static_assert(offsetof(FInteriorCommoditySpawnNode, ParentIdx) == 0x000060, "Member 'FInteriorCommoditySpawnNode::ParentIdx' has a wrong offset!");

// ScriptStruct Flame.GameStoreProductInfoList
// 0x0010 (0x0010 - 0x0000)
struct alignas(0x08) FGameStoreProductInfoList final
{
public:
	uint8                                         Pad_0[0x10];                                       // 0x0000(0x0010)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FGameStoreProductInfoList) == 0x000008, "Wrong alignment on FGameStoreProductInfoList");
static_assert(sizeof(FGameStoreProductInfoList) == 0x000010, "Wrong size on FGameStoreProductInfoList");

// ScriptStruct Flame.SubLevel
// 0x0028 (0x0028 - 0x0000)
struct FSubLevel final
{
public:
	TArray<class FName>                           LoadLevels;                                        // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic)
	TArray<class FName>                           UnloadLevels;                                      // 0x0010(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic)
	bool                                          OverrideLightScenario;                             // 0x0020(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_21[0x7];                                       // 0x0021(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FSubLevel) == 0x000008, "Wrong alignment on FSubLevel");
static_assert(sizeof(FSubLevel) == 0x000028, "Wrong size on FSubLevel");
static_assert(offsetof(FSubLevel, LoadLevels) == 0x000000, "Member 'FSubLevel::LoadLevels' has a wrong offset!");
static_assert(offsetof(FSubLevel, UnloadLevels) == 0x000010, "Member 'FSubLevel::UnloadLevels' has a wrong offset!");
static_assert(offsetof(FSubLevel, OverrideLightScenario) == 0x000020, "Member 'FSubLevel::OverrideLightScenario' has a wrong offset!");

// ScriptStruct Flame.GameStoreSellingPointDetail
// 0x0020 (0x0020 - 0x0000)
struct FGameStoreSellingPointDetail final
{
public:
	class FString                                 ProductName;                                       // 0x0000(0x0010)(BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FDateTime                              ValidSinceUtc;                                     // 0x0010(0x0008)(BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FDateTime                              ValidUntilUtc;                                     // 0x0018(0x0008)(BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FGameStoreSellingPointDetail) == 0x000008, "Wrong alignment on FGameStoreSellingPointDetail");
static_assert(sizeof(FGameStoreSellingPointDetail) == 0x000020, "Wrong size on FGameStoreSellingPointDetail");
static_assert(offsetof(FGameStoreSellingPointDetail, ProductName) == 0x000000, "Member 'FGameStoreSellingPointDetail::ProductName' has a wrong offset!");
static_assert(offsetof(FGameStoreSellingPointDetail, ValidSinceUtc) == 0x000010, "Member 'FGameStoreSellingPointDetail::ValidSinceUtc' has a wrong offset!");
static_assert(offsetof(FGameStoreSellingPointDetail, ValidUntilUtc) == 0x000018, "Member 'FGameStoreSellingPointDetail::ValidUntilUtc' has a wrong offset!");

// ScriptStruct Flame.GameStoreSellingPointsData
// 0x0050 (0x0050 - 0x0000)
struct FGameStoreSellingPointsData final
{
public:
	TMap<TSubclassOf<class AItem>, struct FGameStoreSellingPointDetail> SellingPoints;                                     // 0x0000(0x0050)(BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
};
static_assert(alignof(FGameStoreSellingPointsData) == 0x000008, "Wrong alignment on FGameStoreSellingPointsData");
static_assert(sizeof(FGameStoreSellingPointsData) == 0x000050, "Wrong size on FGameStoreSellingPointsData");
static_assert(offsetof(FGameStoreSellingPointsData, SellingPoints) == 0x000000, "Member 'FGameStoreSellingPointsData::SellingPoints' has a wrong offset!");

// ScriptStruct Flame.ClimbingAnimationRange
// 0x0010 (0x0010 - 0x0000)
struct FClimbingAnimationRange final
{
public:
	class UAnimMontage*                           Animation;                                         // 0x0000(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         StartingHeight;                                    // 0x0008(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bRunningStart;                                     // 0x000C(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D[0x3];                                        // 0x000D(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FClimbingAnimationRange) == 0x000008, "Wrong alignment on FClimbingAnimationRange");
static_assert(sizeof(FClimbingAnimationRange) == 0x000010, "Wrong size on FClimbingAnimationRange");
static_assert(offsetof(FClimbingAnimationRange, Animation) == 0x000000, "Member 'FClimbingAnimationRange::Animation' has a wrong offset!");
static_assert(offsetof(FClimbingAnimationRange, StartingHeight) == 0x000008, "Member 'FClimbingAnimationRange::StartingHeight' has a wrong offset!");
static_assert(offsetof(FClimbingAnimationRange, bRunningStart) == 0x00000C, "Member 'FClimbingAnimationRange::bRunningStart' has a wrong offset!");

// ScriptStruct Flame.BanPlayerRequest
// 0x0010 (0x0010 - 0x0000)
struct FBanPlayerRequest final
{
public:
	class FString                                 Userid;                                            // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FBanPlayerRequest) == 0x000008, "Wrong alignment on FBanPlayerRequest");
static_assert(sizeof(FBanPlayerRequest) == 0x000010, "Wrong size on FBanPlayerRequest");
static_assert(offsetof(FBanPlayerRequest, Userid) == 0x000000, "Member 'FBanPlayerRequest::Userid' has a wrong offset!");

// ScriptStruct Flame.EquipItems
// 0x0028 (0x0028 - 0x0000)
struct FEquipItems final
{
public:
	class UAnimMontage*                           RightWeaponEquip;                                  // 0x0000(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAnimMontage*                           LeftWeaponEquip;                                   // 0x0008(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAnimMontage*                           SecondaryWeaponEquip;                              // 0x0010(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAnimMontage*                           KnifeWeaponEquip;                                  // 0x0018(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAnimMontage*                           OtherEquip;                                        // 0x0020(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FEquipItems) == 0x000008, "Wrong alignment on FEquipItems");
static_assert(sizeof(FEquipItems) == 0x000028, "Wrong size on FEquipItems");
static_assert(offsetof(FEquipItems, RightWeaponEquip) == 0x000000, "Member 'FEquipItems::RightWeaponEquip' has a wrong offset!");
static_assert(offsetof(FEquipItems, LeftWeaponEquip) == 0x000008, "Member 'FEquipItems::LeftWeaponEquip' has a wrong offset!");
static_assert(offsetof(FEquipItems, SecondaryWeaponEquip) == 0x000010, "Member 'FEquipItems::SecondaryWeaponEquip' has a wrong offset!");
static_assert(offsetof(FEquipItems, KnifeWeaponEquip) == 0x000018, "Member 'FEquipItems::KnifeWeaponEquip' has a wrong offset!");
static_assert(offsetof(FEquipItems, OtherEquip) == 0x000020, "Member 'FEquipItems::OtherEquip' has a wrong offset!");

// ScriptStruct Flame.WeaponCategoryMap
// 0x0058 (0x0058 - 0x0000)
struct FWeaponCategoryMap final
{
public:
	TMap<TSubclassOf<class AWeaponSkin>, struct FGameStoreSellingPointDetail> Skins;                                             // 0x0000(0x0050)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	EItemCategory                                 Category;                                          // 0x0050(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_51[0x7];                                       // 0x0051(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FWeaponCategoryMap) == 0x000008, "Wrong alignment on FWeaponCategoryMap");
static_assert(sizeof(FWeaponCategoryMap) == 0x000058, "Wrong size on FWeaponCategoryMap");
static_assert(offsetof(FWeaponCategoryMap, Skins) == 0x000000, "Member 'FWeaponCategoryMap::Skins' has a wrong offset!");
static_assert(offsetof(FWeaponCategoryMap, Category) == 0x000050, "Member 'FWeaponCategoryMap::Category' has a wrong offset!");

// ScriptStruct Flame.CustomizationCategoryMap
// 0x0058 (0x0058 - 0x0000)
struct FCustomizationCategoryMap final
{
public:
	TMap<TSubclassOf<class ACustomizationVariant>, struct FGameStoreSellingPointDetail> Skins;                                             // 0x0000(0x0050)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	EItemCategory                                 Category;                                          // 0x0050(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_51[0x7];                                       // 0x0051(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FCustomizationCategoryMap) == 0x000008, "Wrong alignment on FCustomizationCategoryMap");
static_assert(sizeof(FCustomizationCategoryMap) == 0x000058, "Wrong size on FCustomizationCategoryMap");
static_assert(offsetof(FCustomizationCategoryMap, Skins) == 0x000000, "Member 'FCustomizationCategoryMap::Skins' has a wrong offset!");
static_assert(offsetof(FCustomizationCategoryMap, Category) == 0x000050, "Member 'FCustomizationCategoryMap::Category' has a wrong offset!");

// ScriptStruct Flame.CraftingPlanStoreDetail
// 0x0030 (0x0030 - 0x0000)
struct FCraftingPlanStoreDetail final
{
public:
	TSubclassOf<class APlan>                      Plan;                                              // 0x0000(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameStoreSellingPointDetail           StoreDetail;                                       // 0x0008(0x0020)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	EItemCategory                                 CraftedItemCategory;                               // 0x0028(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_29[0x7];                                       // 0x0029(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FCraftingPlanStoreDetail) == 0x000008, "Wrong alignment on FCraftingPlanStoreDetail");
static_assert(sizeof(FCraftingPlanStoreDetail) == 0x000030, "Wrong size on FCraftingPlanStoreDetail");
static_assert(offsetof(FCraftingPlanStoreDetail, Plan) == 0x000000, "Member 'FCraftingPlanStoreDetail::Plan' has a wrong offset!");
static_assert(offsetof(FCraftingPlanStoreDetail, StoreDetail) == 0x000008, "Member 'FCraftingPlanStoreDetail::StoreDetail' has a wrong offset!");
static_assert(offsetof(FCraftingPlanStoreDetail, CraftedItemCategory) == 0x000028, "Member 'FCraftingPlanStoreDetail::CraftedItemCategory' has a wrong offset!");

// ScriptStruct Flame.SortedSellingpoints
// 0x0210 (0x0210 - 0x0000)
struct FSortedSellingpoints final
{
public:
	TMap<TSubclassOf<class AWeapon>, struct FWeaponCategoryMap> Weapons;                                           // 0x0000(0x0050)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	TMap<TSubclassOf<class ACustomization>, struct FCustomizationCategoryMap> Customization;                                     // 0x0050(0x0050)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	TMap<TSubclassOf<class AWeaponSkin>, struct FGameStoreSellingPointDetail> WeaponsTempSellingsPoints;                         // 0x00A0(0x0050)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	TMap<TSubclassOf<class ACustomizationVariant>, struct FGameStoreSellingPointDetail> CustomizationTempSellingsPoints;                   // 0x00F0(0x0050)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	TMap<TSubclassOf<class ACurrency>, struct FGameStoreSellingPointDetail> CurrencySellingsPoints;                            // 0x0140(0x0050)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	TMap<TSubclassOf<class AItem>, struct FCraftingPlanStoreDetail> PlansSellingsPoints;                               // 0x0190(0x0050)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	struct FGameStoreSellingPointDetail           NearestToNowTimes;                                 // 0x01E0(0x0020)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	struct FDateTime                              SortedTime;                                        // 0x0200(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsDirty;                                           // 0x0208(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_209[0x7];                                      // 0x0209(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FSortedSellingpoints) == 0x000008, "Wrong alignment on FSortedSellingpoints");
static_assert(sizeof(FSortedSellingpoints) == 0x000210, "Wrong size on FSortedSellingpoints");
static_assert(offsetof(FSortedSellingpoints, Weapons) == 0x000000, "Member 'FSortedSellingpoints::Weapons' has a wrong offset!");
static_assert(offsetof(FSortedSellingpoints, Customization) == 0x000050, "Member 'FSortedSellingpoints::Customization' has a wrong offset!");
static_assert(offsetof(FSortedSellingpoints, WeaponsTempSellingsPoints) == 0x0000A0, "Member 'FSortedSellingpoints::WeaponsTempSellingsPoints' has a wrong offset!");
static_assert(offsetof(FSortedSellingpoints, CustomizationTempSellingsPoints) == 0x0000F0, "Member 'FSortedSellingpoints::CustomizationTempSellingsPoints' has a wrong offset!");
static_assert(offsetof(FSortedSellingpoints, CurrencySellingsPoints) == 0x000140, "Member 'FSortedSellingpoints::CurrencySellingsPoints' has a wrong offset!");
static_assert(offsetof(FSortedSellingpoints, PlansSellingsPoints) == 0x000190, "Member 'FSortedSellingpoints::PlansSellingsPoints' has a wrong offset!");
static_assert(offsetof(FSortedSellingpoints, NearestToNowTimes) == 0x0001E0, "Member 'FSortedSellingpoints::NearestToNowTimes' has a wrong offset!");
static_assert(offsetof(FSortedSellingpoints, SortedTime) == 0x000200, "Member 'FSortedSellingpoints::SortedTime' has a wrong offset!");
static_assert(offsetof(FSortedSellingpoints, IsDirty) == 0x000208, "Member 'FSortedSellingpoints::IsDirty' has a wrong offset!");

// ScriptStruct Flame.StanceTransitionPair
// 0x0010 (0x0010 - 0x0000)
struct FStanceTransitionPair final
{
public:
	class UAnimSequence*                          Up;                                                // 0x0000(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAnimSequence*                          Down;                                              // 0x0008(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FStanceTransitionPair) == 0x000008, "Wrong alignment on FStanceTransitionPair");
static_assert(sizeof(FStanceTransitionPair) == 0x000010, "Wrong size on FStanceTransitionPair");
static_assert(offsetof(FStanceTransitionPair, Up) == 0x000000, "Member 'FStanceTransitionPair::Up' has a wrong offset!");
static_assert(offsetof(FStanceTransitionPair, Down) == 0x000008, "Member 'FStanceTransitionPair::Down' has a wrong offset!");

// ScriptStruct Flame.StanceTransition
// 0x0030 (0x0030 - 0x0000)
struct FStanceTransition final
{
public:
	struct FStanceTransitionPair                  StandCrouch;                                       // 0x0000(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, NativeAccessSpecifierPublic)
	struct FStanceTransitionPair                  StandProne;                                        // 0x0010(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, NativeAccessSpecifierPublic)
	struct FStanceTransitionPair                  CrouchProne;                                       // 0x0020(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FStanceTransition) == 0x000008, "Wrong alignment on FStanceTransition");
static_assert(sizeof(FStanceTransition) == 0x000030, "Wrong size on FStanceTransition");
static_assert(offsetof(FStanceTransition, StandCrouch) == 0x000000, "Member 'FStanceTransition::StandCrouch' has a wrong offset!");
static_assert(offsetof(FStanceTransition, StandProne) == 0x000010, "Member 'FStanceTransition::StandProne' has a wrong offset!");
static_assert(offsetof(FStanceTransition, CrouchProne) == 0x000020, "Member 'FStanceTransition::CrouchProne' has a wrong offset!");

// ScriptStruct Flame.BlendspacePair
// 0x0010 (0x0010 - 0x0000)
struct FBlendspacePair final
{
public:
	class UBlendSpace*                            Forward;                                           // 0x0000(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UBlendSpace*                            Backward;                                          // 0x0008(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FBlendspacePair) == 0x000008, "Wrong alignment on FBlendspacePair");
static_assert(sizeof(FBlendspacePair) == 0x000010, "Wrong size on FBlendspacePair");
static_assert(offsetof(FBlendspacePair, Forward) == 0x000000, "Member 'FBlendspacePair::Forward' has a wrong offset!");
static_assert(offsetof(FBlendspacePair, Backward) == 0x000008, "Member 'FBlendspacePair::Backward' has a wrong offset!");

// ScriptStruct Flame.LocomotionStateDef
// 0x0038 (0x0038 - 0x0000)
struct FLocomotionStateDef final
{
public:
	class UAnimSequence*                          Idle;                                              // 0x0000(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FBlendspacePair                        Walk;                                              // 0x0008(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, NativeAccessSpecifierPublic)
	struct FBlendspacePair                        Run;                                               // 0x0018(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, NativeAccessSpecifierPublic)
	struct FBlendspacePair                        Sprint;                                            // 0x0028(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FLocomotionStateDef) == 0x000008, "Wrong alignment on FLocomotionStateDef");
static_assert(sizeof(FLocomotionStateDef) == 0x000038, "Wrong size on FLocomotionStateDef");
static_assert(offsetof(FLocomotionStateDef, Idle) == 0x000000, "Member 'FLocomotionStateDef::Idle' has a wrong offset!");
static_assert(offsetof(FLocomotionStateDef, Walk) == 0x000008, "Member 'FLocomotionStateDef::Walk' has a wrong offset!");
static_assert(offsetof(FLocomotionStateDef, Run) == 0x000018, "Member 'FLocomotionStateDef::Run' has a wrong offset!");
static_assert(offsetof(FLocomotionStateDef, Sprint) == 0x000028, "Member 'FLocomotionStateDef::Sprint' has a wrong offset!");

// ScriptStruct Flame.LocomotionPerWeapon
// 0x0118 (0x0118 - 0x0000)
struct FLocomotionPerWeapon final
{
public:
	struct FLocomotionStateDef                    Stand;                                             // 0x0000(0x0038)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, NativeAccessSpecifierPublic)
	struct FLocomotionStateDef                    StandAim;                                          // 0x0038(0x0038)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, NativeAccessSpecifierPublic)
	struct FLocomotionStateDef                    Crouch;                                            // 0x0070(0x0038)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, NativeAccessSpecifierPublic)
	struct FLocomotionStateDef                    CrouchAim;                                         // 0x00A8(0x0038)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, NativeAccessSpecifierPublic)
	struct FLocomotionStateDef                    Prone;                                             // 0x00E0(0x0038)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FLocomotionPerWeapon) == 0x000008, "Wrong alignment on FLocomotionPerWeapon");
static_assert(sizeof(FLocomotionPerWeapon) == 0x000118, "Wrong size on FLocomotionPerWeapon");
static_assert(offsetof(FLocomotionPerWeapon, Stand) == 0x000000, "Member 'FLocomotionPerWeapon::Stand' has a wrong offset!");
static_assert(offsetof(FLocomotionPerWeapon, StandAim) == 0x000038, "Member 'FLocomotionPerWeapon::StandAim' has a wrong offset!");
static_assert(offsetof(FLocomotionPerWeapon, Crouch) == 0x000070, "Member 'FLocomotionPerWeapon::Crouch' has a wrong offset!");
static_assert(offsetof(FLocomotionPerWeapon, CrouchAim) == 0x0000A8, "Member 'FLocomotionPerWeapon::CrouchAim' has a wrong offset!");
static_assert(offsetof(FLocomotionPerWeapon, Prone) == 0x0000E0, "Member 'FLocomotionPerWeapon::Prone' has a wrong offset!");

// ScriptStruct Flame.BasicMovementSet
// 0x0170 (0x0170 - 0x0000)
struct FBasicMovementSet final
{
public:
	class UBlendSpace*                            Stand;                                             // 0x0000(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UBlendSpace*                            Crouch;                                            // 0x0008(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UBlendSpace*                            StandAim;                                          // 0x0010(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UBlendSpace*                            CrouchAim;                                         // 0x0018(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UBlendSpace*                            Prone;                                             // 0x0020(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FStanceTransition                      Stances;                                           // 0x0028(0x0030)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, NativeAccessSpecifierPublic)
	struct FLocomotionPerWeapon                   Locomotion;                                        // 0x0058(0x0118)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FBasicMovementSet) == 0x000008, "Wrong alignment on FBasicMovementSet");
static_assert(sizeof(FBasicMovementSet) == 0x000170, "Wrong size on FBasicMovementSet");
static_assert(offsetof(FBasicMovementSet, Stand) == 0x000000, "Member 'FBasicMovementSet::Stand' has a wrong offset!");
static_assert(offsetof(FBasicMovementSet, Crouch) == 0x000008, "Member 'FBasicMovementSet::Crouch' has a wrong offset!");
static_assert(offsetof(FBasicMovementSet, StandAim) == 0x000010, "Member 'FBasicMovementSet::StandAim' has a wrong offset!");
static_assert(offsetof(FBasicMovementSet, CrouchAim) == 0x000018, "Member 'FBasicMovementSet::CrouchAim' has a wrong offset!");
static_assert(offsetof(FBasicMovementSet, Prone) == 0x000020, "Member 'FBasicMovementSet::Prone' has a wrong offset!");
static_assert(offsetof(FBasicMovementSet, Stances) == 0x000028, "Member 'FBasicMovementSet::Stances' has a wrong offset!");
static_assert(offsetof(FBasicMovementSet, Locomotion) == 0x000058, "Member 'FBasicMovementSet::Locomotion' has a wrong offset!");

// ScriptStruct Flame.WeaponSwayParameters
// 0x0014 (0x0014 - 0x0000)
struct FWeaponSwayParameters final
{
public:
	struct FVector2D                              Size;                                              // 0x0000(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2D                              Speed;                                             // 0x0008(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bSwayCamera;                                       // 0x0010(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x3];                                       // 0x0011(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FWeaponSwayParameters) == 0x000004, "Wrong alignment on FWeaponSwayParameters");
static_assert(sizeof(FWeaponSwayParameters) == 0x000014, "Wrong size on FWeaponSwayParameters");
static_assert(offsetof(FWeaponSwayParameters, Size) == 0x000000, "Member 'FWeaponSwayParameters::Size' has a wrong offset!");
static_assert(offsetof(FWeaponSwayParameters, Speed) == 0x000008, "Member 'FWeaponSwayParameters::Speed' has a wrong offset!");
static_assert(offsetof(FWeaponSwayParameters, bSwayCamera) == 0x000010, "Member 'FWeaponSwayParameters::bSwayCamera' has a wrong offset!");

// ScriptStruct Flame.BipedalRegularIdle
// 0x0010 (0x0010 - 0x0000)
struct FBipedalRegularIdle final
{
public:
	class UAnimSequence*                          RegularIdle;                                       // 0x0000(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAnimSequence*                          RegularIdleSlope;                                  // 0x0008(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FBipedalRegularIdle) == 0x000008, "Wrong alignment on FBipedalRegularIdle");
static_assert(sizeof(FBipedalRegularIdle) == 0x000010, "Wrong size on FBipedalRegularIdle");
static_assert(offsetof(FBipedalRegularIdle, RegularIdle) == 0x000000, "Member 'FBipedalRegularIdle::RegularIdle' has a wrong offset!");
static_assert(offsetof(FBipedalRegularIdle, RegularIdleSlope) == 0x000008, "Member 'FBipedalRegularIdle::RegularIdleSlope' has a wrong offset!");

// ScriptStruct Flame.BipedalRegularLoop
// 0x0040 (0x0040 - 0x0000)
struct FBipedalRegularLoop final
{
public:
	class UBlendSpace*                            BlendForwardLeanSLope;                             // 0x0000(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAnimSequence*                          DisplacingRightForward;                            // 0x0008(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAnimSequence*                          DisplacingLeftForward;                             // 0x0010(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAnimSequence*                          DisplacingRightBack;                               // 0x0018(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAnimSequence*                          DisplacingLeftBack;                                // 0x0020(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAnimSequence*                          DisplacingBack;                                    // 0x0028(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAimOffsetBlendSpace*                   MeshTurnLean;                                      // 0x0030(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAimOffsetBlendSpace*                   MovingLookAtForward;                               // 0x0038(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FBipedalRegularLoop) == 0x000008, "Wrong alignment on FBipedalRegularLoop");
static_assert(sizeof(FBipedalRegularLoop) == 0x000040, "Wrong size on FBipedalRegularLoop");
static_assert(offsetof(FBipedalRegularLoop, BlendForwardLeanSLope) == 0x000000, "Member 'FBipedalRegularLoop::BlendForwardLeanSLope' has a wrong offset!");
static_assert(offsetof(FBipedalRegularLoop, DisplacingRightForward) == 0x000008, "Member 'FBipedalRegularLoop::DisplacingRightForward' has a wrong offset!");
static_assert(offsetof(FBipedalRegularLoop, DisplacingLeftForward) == 0x000010, "Member 'FBipedalRegularLoop::DisplacingLeftForward' has a wrong offset!");
static_assert(offsetof(FBipedalRegularLoop, DisplacingRightBack) == 0x000018, "Member 'FBipedalRegularLoop::DisplacingRightBack' has a wrong offset!");
static_assert(offsetof(FBipedalRegularLoop, DisplacingLeftBack) == 0x000020, "Member 'FBipedalRegularLoop::DisplacingLeftBack' has a wrong offset!");
static_assert(offsetof(FBipedalRegularLoop, DisplacingBack) == 0x000028, "Member 'FBipedalRegularLoop::DisplacingBack' has a wrong offset!");
static_assert(offsetof(FBipedalRegularLoop, MeshTurnLean) == 0x000030, "Member 'FBipedalRegularLoop::MeshTurnLean' has a wrong offset!");
static_assert(offsetof(FBipedalRegularLoop, MovingLookAtForward) == 0x000038, "Member 'FBipedalRegularLoop::MovingLookAtForward' has a wrong offset!");

// ScriptStruct Flame.BipedalStartCollection
// 0x0028 (0x0028 - 0x0000)
struct FBipedalStartCollection final
{
public:
	class UAnimSequence*                          StartForward;                                      // 0x0000(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAnimSequence*                          StartRightHalf;                                    // 0x0008(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAnimSequence*                          StartLeftHalf;                                     // 0x0010(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAnimSequence*                          StartRightFull;                                    // 0x0018(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAnimSequence*                          StartLeftFull;                                     // 0x0020(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FBipedalStartCollection) == 0x000008, "Wrong alignment on FBipedalStartCollection");
static_assert(sizeof(FBipedalStartCollection) == 0x000028, "Wrong size on FBipedalStartCollection");
static_assert(offsetof(FBipedalStartCollection, StartForward) == 0x000000, "Member 'FBipedalStartCollection::StartForward' has a wrong offset!");
static_assert(offsetof(FBipedalStartCollection, StartRightHalf) == 0x000008, "Member 'FBipedalStartCollection::StartRightHalf' has a wrong offset!");
static_assert(offsetof(FBipedalStartCollection, StartLeftHalf) == 0x000010, "Member 'FBipedalStartCollection::StartLeftHalf' has a wrong offset!");
static_assert(offsetof(FBipedalStartCollection, StartRightFull) == 0x000018, "Member 'FBipedalStartCollection::StartRightFull' has a wrong offset!");
static_assert(offsetof(FBipedalStartCollection, StartLeftFull) == 0x000020, "Member 'FBipedalStartCollection::StartLeftFull' has a wrong offset!");

// ScriptStruct Flame.BipedalCollection
// 0x0108 (0x0108 - 0x0000)
struct FBipedalCollection final
{
public:
	struct FBipedalRegularIdle                    Idle;                                              // 0x0000(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NoDestructor, NativeAccessSpecifierPublic)
	TMap<ELocomotionType, struct FBipedalRegularLoop> LoopCollection;                                    // 0x0010(0x0050)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NativeAccessSpecifierPublic)
	TMap<ELocomotionType, struct FBipedalStartCollection> StartCollection;                                   // 0x0060(0x0050)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NativeAccessSpecifierPublic)
	TMap<ELocomotionType, class UAnimSequence*>   StopCollection;                                    // 0x00B0(0x0050)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NativeAccessSpecifierPublic)
	class UAimOffsetBlendSpace*                   LookAt;                                            // 0x0100(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FBipedalCollection) == 0x000008, "Wrong alignment on FBipedalCollection");
static_assert(sizeof(FBipedalCollection) == 0x000108, "Wrong size on FBipedalCollection");
static_assert(offsetof(FBipedalCollection, Idle) == 0x000000, "Member 'FBipedalCollection::Idle' has a wrong offset!");
static_assert(offsetof(FBipedalCollection, LoopCollection) == 0x000010, "Member 'FBipedalCollection::LoopCollection' has a wrong offset!");
static_assert(offsetof(FBipedalCollection, StartCollection) == 0x000060, "Member 'FBipedalCollection::StartCollection' has a wrong offset!");
static_assert(offsetof(FBipedalCollection, StopCollection) == 0x0000B0, "Member 'FBipedalCollection::StopCollection' has a wrong offset!");
static_assert(offsetof(FBipedalCollection, LookAt) == 0x000100, "Member 'FBipedalCollection::LookAt' has a wrong offset!");

// ScriptStruct Flame.CloudRequestAcceptSettings
// 0x0020 (0x0020 - 0x0000)
struct FCloudRequestAcceptSettings final
{
public:
	class FString                                 RequestAcceptTypeWithEvents;                       // 0x0000(0x0010)(Edit, ZeroConstructor, Config, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 RequestAcceptTypeNoEvents;                         // 0x0010(0x0010)(Edit, ZeroConstructor, Config, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FCloudRequestAcceptSettings) == 0x000008, "Wrong alignment on FCloudRequestAcceptSettings");
static_assert(sizeof(FCloudRequestAcceptSettings) == 0x000020, "Wrong size on FCloudRequestAcceptSettings");
static_assert(offsetof(FCloudRequestAcceptSettings, RequestAcceptTypeWithEvents) == 0x000000, "Member 'FCloudRequestAcceptSettings::RequestAcceptTypeWithEvents' has a wrong offset!");
static_assert(offsetof(FCloudRequestAcceptSettings, RequestAcceptTypeNoEvents) == 0x000010, "Member 'FCloudRequestAcceptSettings::RequestAcceptTypeNoEvents' has a wrong offset!");

// ScriptStruct Flame.CloudPlatformStorePlayFabProduct
// 0x0030 (0x0038 - 0x0008)
struct FCloudPlatformStorePlayFabProduct final : public FCustomJsonParser
{
public:
	struct FGameStoreProductId                    GameStoreProductId;                                // 0x0008(0x0010)(NativeAccessSpecifierPublic)
	class FString                                 CatalogId;                                         // 0x0018(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 PlatformProductId;                                 // 0x0028(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FCloudPlatformStorePlayFabProduct) == 0x000008, "Wrong alignment on FCloudPlatformStorePlayFabProduct");
static_assert(sizeof(FCloudPlatformStorePlayFabProduct) == 0x000038, "Wrong size on FCloudPlatformStorePlayFabProduct");
static_assert(offsetof(FCloudPlatformStorePlayFabProduct, GameStoreProductId) == 0x000008, "Member 'FCloudPlatformStorePlayFabProduct::GameStoreProductId' has a wrong offset!");
static_assert(offsetof(FCloudPlatformStorePlayFabProduct, CatalogId) == 0x000018, "Member 'FCloudPlatformStorePlayFabProduct::CatalogId' has a wrong offset!");
static_assert(offsetof(FCloudPlatformStorePlayFabProduct, PlatformProductId) == 0x000028, "Member 'FCloudPlatformStorePlayFabProduct::PlatformProductId' has a wrong offset!");

// ScriptStruct Flame.CloudPlatformStorePlayFabPlaystationProductList
// 0x0010 (0x0010 - 0x0000)
struct FCloudPlatformStorePlayFabPlaystationProductList final
{
public:
	TArray<struct FCloudPlatformStorePlayFabProduct> Products;                                          // 0x0000(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FCloudPlatformStorePlayFabPlaystationProductList) == 0x000008, "Wrong alignment on FCloudPlatformStorePlayFabPlaystationProductList");
static_assert(sizeof(FCloudPlatformStorePlayFabPlaystationProductList) == 0x000010, "Wrong size on FCloudPlatformStorePlayFabPlaystationProductList");
static_assert(offsetof(FCloudPlatformStorePlayFabPlaystationProductList, Products) == 0x000000, "Member 'FCloudPlatformStorePlayFabPlaystationProductList::Products' has a wrong offset!");

// ScriptStruct Flame.GameStorePurchasesInfo
// 0x0010 (0x0010 - 0x0000)
struct FGameStorePurchasesInfo final
{
public:
	TArray<struct FGameStorePurchaseItemInfo>     Purchases;                                         // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FGameStorePurchasesInfo) == 0x000008, "Wrong alignment on FGameStorePurchasesInfo");
static_assert(sizeof(FGameStorePurchasesInfo) == 0x000010, "Wrong size on FGameStorePurchasesInfo");
static_assert(offsetof(FGameStorePurchasesInfo, Purchases) == 0x000000, "Member 'FGameStorePurchasesInfo::Purchases' has a wrong offset!");

// ScriptStruct Flame.CloudPriceListItem
// 0x0030 (0x0030 - 0x0000)
struct FCloudPriceListItem final
{
public:
	class FString                                 ProductSku;                                        // 0x0000(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 CurrencyCode;                                      // 0x0010(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Price;                                             // 0x0020(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         PriceBeforeDiscount;                               // 0x0024(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         DiscountPercentage;                                // 0x0028(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsDiscounted;                                      // 0x002C(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2D[0x3];                                       // 0x002D(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FCloudPriceListItem) == 0x000008, "Wrong alignment on FCloudPriceListItem");
static_assert(sizeof(FCloudPriceListItem) == 0x000030, "Wrong size on FCloudPriceListItem");
static_assert(offsetof(FCloudPriceListItem, ProductSku) == 0x000000, "Member 'FCloudPriceListItem::ProductSku' has a wrong offset!");
static_assert(offsetof(FCloudPriceListItem, CurrencyCode) == 0x000010, "Member 'FCloudPriceListItem::CurrencyCode' has a wrong offset!");
static_assert(offsetof(FCloudPriceListItem, Price) == 0x000020, "Member 'FCloudPriceListItem::Price' has a wrong offset!");
static_assert(offsetof(FCloudPriceListItem, PriceBeforeDiscount) == 0x000024, "Member 'FCloudPriceListItem::PriceBeforeDiscount' has a wrong offset!");
static_assert(offsetof(FCloudPriceListItem, DiscountPercentage) == 0x000028, "Member 'FCloudPriceListItem::DiscountPercentage' has a wrong offset!");
static_assert(offsetof(FCloudPriceListItem, IsDiscounted) == 0x00002C, "Member 'FCloudPriceListItem::IsDiscounted' has a wrong offset!");

// ScriptStruct Flame.CloudPriceList
// 0x0018 (0x0018 - 0x0000)
struct FCloudPriceList final
{
public:
	int32                                         Generation;                                        // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FCloudPriceListItem>            Items;                                             // 0x0008(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FCloudPriceList) == 0x000008, "Wrong alignment on FCloudPriceList");
static_assert(sizeof(FCloudPriceList) == 0x000018, "Wrong size on FCloudPriceList");
static_assert(offsetof(FCloudPriceList, Generation) == 0x000000, "Member 'FCloudPriceList::Generation' has a wrong offset!");
static_assert(offsetof(FCloudPriceList, Items) == 0x000008, "Member 'FCloudPriceList::Items' has a wrong offset!");

// ScriptStruct Flame.SubCommodityDescriptor
// 0x0010 (0x0010 - 0x0000)
struct FSubCommodityDescriptor final
{
public:
	TSubclassOf<class AActor>                     Commodity;                                         // 0x0000(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FInt32Interval                         Capacity;                                          // 0x0008(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSubCommodityDescriptor) == 0x000008, "Wrong alignment on FSubCommodityDescriptor");
static_assert(sizeof(FSubCommodityDescriptor) == 0x000010, "Wrong size on FSubCommodityDescriptor");
static_assert(offsetof(FSubCommodityDescriptor, Commodity) == 0x000000, "Member 'FSubCommodityDescriptor::Commodity' has a wrong offset!");
static_assert(offsetof(FSubCommodityDescriptor, Capacity) == 0x000008, "Member 'FSubCommodityDescriptor::Capacity' has a wrong offset!");

// ScriptStruct Flame.CapsuleCollider
// 0x001C (0x001C - 0x0000)
struct FCapsuleCollider final
{
public:
	struct FVector                                Top;                                               // 0x0000(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                Bottom;                                            // 0x000C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Radius;                                            // 0x0018(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FCapsuleCollider) == 0x000004, "Wrong alignment on FCapsuleCollider");
static_assert(sizeof(FCapsuleCollider) == 0x00001C, "Wrong size on FCapsuleCollider");
static_assert(offsetof(FCapsuleCollider, Top) == 0x000000, "Member 'FCapsuleCollider::Top' has a wrong offset!");
static_assert(offsetof(FCapsuleCollider, Bottom) == 0x00000C, "Member 'FCapsuleCollider::Bottom' has a wrong offset!");
static_assert(offsetof(FCapsuleCollider, Radius) == 0x000018, "Member 'FCapsuleCollider::Radius' has a wrong offset!");

// ScriptStruct Flame.BoxCollider
// 0x0040 (0x0040 - 0x0000)
struct FBoxCollider final
{
public:
	struct FVector                                Size;                                              // 0x0000(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             Transform;                                         // 0x0010(0x0030)(IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FBoxCollider) == 0x000010, "Wrong alignment on FBoxCollider");
static_assert(sizeof(FBoxCollider) == 0x000040, "Wrong size on FBoxCollider");
static_assert(offsetof(FBoxCollider, Size) == 0x000000, "Member 'FBoxCollider::Size' has a wrong offset!");
static_assert(offsetof(FBoxCollider, Transform) == 0x000010, "Member 'FBoxCollider::Transform' has a wrong offset!");

// ScriptStruct Flame.BodyCollider
// 0x0070 (0x0070 - 0x0000)
struct FBodyCollider final
{
public:
	EBodyColliderType                             Type;                                              // 0x0000(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0xC];                                        // 0x0004(0x000C)(Fixing Size After Last Property [ Dumper-7 ])
	struct FBoxCollider                           Box;                                               // 0x0010(0x0040)(NoDestructor, NativeAccessSpecifierPublic)
	struct FCapsuleCollider                       Capsule;                                           // 0x0050(0x001C)(NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_6C[0x4];                                       // 0x006C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FBodyCollider) == 0x000010, "Wrong alignment on FBodyCollider");
static_assert(sizeof(FBodyCollider) == 0x000070, "Wrong size on FBodyCollider");
static_assert(offsetof(FBodyCollider, Type) == 0x000000, "Member 'FBodyCollider::Type' has a wrong offset!");
static_assert(offsetof(FBodyCollider, Box) == 0x000010, "Member 'FBodyCollider::Box' has a wrong offset!");
static_assert(offsetof(FBodyCollider, Capsule) == 0x000050, "Member 'FBodyCollider::Capsule' has a wrong offset!");

// ScriptStruct Flame.CommodityDescriptorPoint
// 0x0010 (0x0038 - 0x0028)
struct FCommodityDescriptorPoint final : public FCommodityDescriptor
{
public:
	TArray<struct FSubCommodityDescriptor>        SubCommodities;                                    // 0x0028(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FCommodityDescriptorPoint) == 0x000008, "Wrong alignment on FCommodityDescriptorPoint");
static_assert(sizeof(FCommodityDescriptorPoint) == 0x000038, "Wrong size on FCommodityDescriptorPoint");
static_assert(offsetof(FCommodityDescriptorPoint, SubCommodities) == 0x000028, "Member 'FCommodityDescriptorPoint::SubCommodities' has a wrong offset!");

// ScriptStruct Flame.AllCommoditiesOfType
// 0x0018 (0x0018 - 0x0000)
struct FAllCommoditiesOfType final
{
public:
	int32                                         LimitOfCommoditiesType;                            // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FCommodityDescriptorPoint>      Commodities;                                       // 0x0008(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAllCommoditiesOfType) == 0x000008, "Wrong alignment on FAllCommoditiesOfType");
static_assert(sizeof(FAllCommoditiesOfType) == 0x000018, "Wrong size on FAllCommoditiesOfType");
static_assert(offsetof(FAllCommoditiesOfType, LimitOfCommoditiesType) == 0x000000, "Member 'FAllCommoditiesOfType::LimitOfCommoditiesType' has a wrong offset!");
static_assert(offsetof(FAllCommoditiesOfType, Commodities) == 0x000008, "Member 'FAllCommoditiesOfType::Commodities' has a wrong offset!");

// ScriptStruct Flame.CloudUserBalance
// 0x0008 (0x0008 - 0x0000)
struct FCloudUserBalance final
{
public:
	int32                                         TotalHardCurrency;                                 // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         TotalHardCurrencyBlocked;                          // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FCloudUserBalance) == 0x000004, "Wrong alignment on FCloudUserBalance");
static_assert(sizeof(FCloudUserBalance) == 0x000008, "Wrong size on FCloudUserBalance");
static_assert(offsetof(FCloudUserBalance, TotalHardCurrency) == 0x000000, "Member 'FCloudUserBalance::TotalHardCurrency' has a wrong offset!");
static_assert(offsetof(FCloudUserBalance, TotalHardCurrencyBlocked) == 0x000004, "Member 'FCloudUserBalance::TotalHardCurrencyBlocked' has a wrong offset!");

// ScriptStruct Flame.SpecificGestures
// 0x0008 (0x0008 - 0x0000)
struct FSpecificGestures final
{
public:
	class UAnimMontage*                           MapLookMontage;                                    // 0x0000(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSpecificGestures) == 0x000008, "Wrong alignment on FSpecificGestures");
static_assert(sizeof(FSpecificGestures) == 0x000008, "Wrong size on FSpecificGestures");
static_assert(offsetof(FSpecificGestures, MapLookMontage) == 0x000000, "Member 'FSpecificGestures::MapLookMontage' has a wrong offset!");

// ScriptStruct Flame.BoosterDetails
// 0x0020 (0x0020 - 0x0000)
struct FBoosterDetails final
{
public:
	class FString                                 Name;                                              // 0x0000(0x0010)(BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         TicketsUnused;                                     // 0x0010(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         TicketsInUse;                                      // 0x0014(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FDateTime                              ExpiresAt;                                         // 0x0018(0x0008)(BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FBoosterDetails) == 0x000008, "Wrong alignment on FBoosterDetails");
static_assert(sizeof(FBoosterDetails) == 0x000020, "Wrong size on FBoosterDetails");
static_assert(offsetof(FBoosterDetails, Name) == 0x000000, "Member 'FBoosterDetails::Name' has a wrong offset!");
static_assert(offsetof(FBoosterDetails, TicketsUnused) == 0x000010, "Member 'FBoosterDetails::TicketsUnused' has a wrong offset!");
static_assert(offsetof(FBoosterDetails, TicketsInUse) == 0x000014, "Member 'FBoosterDetails::TicketsInUse' has a wrong offset!");
static_assert(offsetof(FBoosterDetails, ExpiresAt) == 0x000018, "Member 'FBoosterDetails::ExpiresAt' has a wrong offset!");

// ScriptStruct Flame.InputActionContext
// 0x0020 (0x0020 - 0x0000)
struct FInputActionContext final
{
public:
	TWeakObjectPtr<class AItem>                   Item;                                              // 0x0000(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FAmmoSyncMessage                       AmmoState;                                         // 0x0008(0x0018)(NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FInputActionContext) == 0x000008, "Wrong alignment on FInputActionContext");
static_assert(sizeof(FInputActionContext) == 0x000020, "Wrong size on FInputActionContext");
static_assert(offsetof(FInputActionContext, Item) == 0x000000, "Member 'FInputActionContext::Item' has a wrong offset!");
static_assert(offsetof(FInputActionContext, AmmoState) == 0x000008, "Member 'FInputActionContext::AmmoState' has a wrong offset!");

// ScriptStruct Flame.InputActionMachineState
// 0x0058 (0x0058 - 0x0000)
struct FInputActionMachineState final
{
public:
	class FName                                   InputActionName;                                   // 0x0000(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ID;                                                // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Time;                                              // 0x000C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class FName>                           ActionsInProgress;                                 // 0x0010(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<class FName>                           ActionsProcessed;                                  // 0x0020(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
	struct FInputActionContext                    Context;                                           // 0x0030(0x0020)(NoDestructor, NativeAccessSpecifierPublic)
	int32                                         TotalInputsCount;                                  // 0x0050(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         TotalActionsCount;                                 // 0x0054(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FInputActionMachineState) == 0x000008, "Wrong alignment on FInputActionMachineState");
static_assert(sizeof(FInputActionMachineState) == 0x000058, "Wrong size on FInputActionMachineState");
static_assert(offsetof(FInputActionMachineState, InputActionName) == 0x000000, "Member 'FInputActionMachineState::InputActionName' has a wrong offset!");
static_assert(offsetof(FInputActionMachineState, ID) == 0x000008, "Member 'FInputActionMachineState::ID' has a wrong offset!");
static_assert(offsetof(FInputActionMachineState, Time) == 0x00000C, "Member 'FInputActionMachineState::Time' has a wrong offset!");
static_assert(offsetof(FInputActionMachineState, ActionsInProgress) == 0x000010, "Member 'FInputActionMachineState::ActionsInProgress' has a wrong offset!");
static_assert(offsetof(FInputActionMachineState, ActionsProcessed) == 0x000020, "Member 'FInputActionMachineState::ActionsProcessed' has a wrong offset!");
static_assert(offsetof(FInputActionMachineState, Context) == 0x000030, "Member 'FInputActionMachineState::Context' has a wrong offset!");
static_assert(offsetof(FInputActionMachineState, TotalInputsCount) == 0x000050, "Member 'FInputActionMachineState::TotalInputsCount' has a wrong offset!");
static_assert(offsetof(FInputActionMachineState, TotalActionsCount) == 0x000054, "Member 'FInputActionMachineState::TotalActionsCount' has a wrong offset!");

// ScriptStruct Flame.InputActionMachine
// 0x0178 (0x0178 - 0x0000)
struct FInputActionMachine final
{
public:
	uint8                                         Pad_0[0x30];                                       // 0x0000(0x0030)(Fixing Size After Last Property [ Dumper-7 ])
	struct FInputActionMachineState               State;                                             // 0x0030(0x0058)(NativeAccessSpecifierPrivate)
	uint8                                         Pad_88[0xF0];                                      // 0x0088(0x00F0)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FInputActionMachine) == 0x000008, "Wrong alignment on FInputActionMachine");
static_assert(sizeof(FInputActionMachine) == 0x000178, "Wrong size on FInputActionMachine");
static_assert(offsetof(FInputActionMachine, State) == 0x000030, "Member 'FInputActionMachine::State' has a wrong offset!");

// ScriptStruct Flame.InteriorCommoditySpawnPoint
// 0x0070 (0x0070 - 0x0000)
struct FInteriorCommoditySpawnPoint final
{
public:
	struct FTransform                             Transform;                                         // 0x0000(0x0030)(Edit, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	TSubclassOf<class AActor>                     Group;                                             // 0x0030(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<TSubclassOf<class AGameModeBase>>      AcceptedGameModes;                                 // 0x0038(0x0010)(Edit, ZeroConstructor, UObjectWrapper, NativeAccessSpecifierPublic)
	TArray<struct FCommodityDescriptorPoint>      Commodities;                                       // 0x0048(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<TSubclassOf<class AActor>>             SpawnDescriptors;                                  // 0x0058(0x0010)(Edit, ZeroConstructor, UObjectWrapper, NativeAccessSpecifierPublic)
	int32                                         ParentIdx;                                         // 0x0068(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_6C[0x4];                                       // 0x006C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FInteriorCommoditySpawnPoint) == 0x000010, "Wrong alignment on FInteriorCommoditySpawnPoint");
static_assert(sizeof(FInteriorCommoditySpawnPoint) == 0x000070, "Wrong size on FInteriorCommoditySpawnPoint");
static_assert(offsetof(FInteriorCommoditySpawnPoint, Transform) == 0x000000, "Member 'FInteriorCommoditySpawnPoint::Transform' has a wrong offset!");
static_assert(offsetof(FInteriorCommoditySpawnPoint, Group) == 0x000030, "Member 'FInteriorCommoditySpawnPoint::Group' has a wrong offset!");
static_assert(offsetof(FInteriorCommoditySpawnPoint, AcceptedGameModes) == 0x000038, "Member 'FInteriorCommoditySpawnPoint::AcceptedGameModes' has a wrong offset!");
static_assert(offsetof(FInteriorCommoditySpawnPoint, Commodities) == 0x000048, "Member 'FInteriorCommoditySpawnPoint::Commodities' has a wrong offset!");
static_assert(offsetof(FInteriorCommoditySpawnPoint, SpawnDescriptors) == 0x000058, "Member 'FInteriorCommoditySpawnPoint::SpawnDescriptors' has a wrong offset!");
static_assert(offsetof(FInteriorCommoditySpawnPoint, ParentIdx) == 0x000068, "Member 'FInteriorCommoditySpawnPoint::ParentIdx' has a wrong offset!");

// ScriptStruct Flame.SightMisalignment
// 0x000C (0x000C - 0x0000)
struct FSightMisalignment final
{
public:
	float                                         Rate;                                              // 0x0000(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Maximum;                                           // 0x0004(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Decay;                                             // 0x0008(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSightMisalignment) == 0x000004, "Wrong alignment on FSightMisalignment");
static_assert(sizeof(FSightMisalignment) == 0x00000C, "Wrong size on FSightMisalignment");
static_assert(offsetof(FSightMisalignment, Rate) == 0x000000, "Member 'FSightMisalignment::Rate' has a wrong offset!");
static_assert(offsetof(FSightMisalignment, Maximum) == 0x000004, "Member 'FSightMisalignment::Maximum' has a wrong offset!");
static_assert(offsetof(FSightMisalignment, Decay) == 0x000008, "Member 'FSightMisalignment::Decay' has a wrong offset!");

// ScriptStruct Flame.WeaponSkinsList
// 0x0010 (0x0128 - 0x0118)
struct FWeaponSkinsList final : public FItemClassTableRow
{
public:
	TSubclassOf<class AItemSkin>                  Class;                                             // 0x0118(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSubclassOf<class AItem>                      WeaponClass;                                       // 0x0120(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FWeaponSkinsList) == 0x000008, "Wrong alignment on FWeaponSkinsList");
static_assert(sizeof(FWeaponSkinsList) == 0x000128, "Wrong size on FWeaponSkinsList");
static_assert(offsetof(FWeaponSkinsList, Class) == 0x000118, "Member 'FWeaponSkinsList::Class' has a wrong offset!");
static_assert(offsetof(FWeaponSkinsList, WeaponClass) == 0x000120, "Member 'FWeaponSkinsList::WeaponClass' has a wrong offset!");

// ScriptStruct Flame.CloudItem
// 0x0018 (0x0018 - 0x0000)
struct FCloudItem final
{
public:
	class FString                                 ClassName;                                         // 0x0000(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Count;                                             // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FCloudItem) == 0x000008, "Wrong alignment on FCloudItem");
static_assert(sizeof(FCloudItem) == 0x000018, "Wrong size on FCloudItem");
static_assert(offsetof(FCloudItem, ClassName) == 0x000000, "Member 'FCloudItem::ClassName' has a wrong offset!");
static_assert(offsetof(FCloudItem, Count) == 0x000010, "Member 'FCloudItem::Count' has a wrong offset!");

// ScriptStruct Flame.CloudOperation
// 0x0050 (0x0050 - 0x0000)
struct FCloudOperation final
{
public:
	class FString                                 Op;                                                // 0x0000(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Path;                                              // 0x0010(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FCloudItem                             From;                                              // 0x0020(0x0018)(NativeAccessSpecifierPublic)
	struct FCloudItem                             To;                                                // 0x0038(0x0018)(NativeAccessSpecifierPublic)
};
static_assert(alignof(FCloudOperation) == 0x000008, "Wrong alignment on FCloudOperation");
static_assert(sizeof(FCloudOperation) == 0x000050, "Wrong size on FCloudOperation");
static_assert(offsetof(FCloudOperation, Op) == 0x000000, "Member 'FCloudOperation::Op' has a wrong offset!");
static_assert(offsetof(FCloudOperation, Path) == 0x000010, "Member 'FCloudOperation::Path' has a wrong offset!");
static_assert(offsetof(FCloudOperation, From) == 0x000020, "Member 'FCloudOperation::From' has a wrong offset!");
static_assert(offsetof(FCloudOperation, To) == 0x000038, "Member 'FCloudOperation::To' has a wrong offset!");

// ScriptStruct Flame.CloudSeasonChallengeClaimResult
// 0x0020 (0x0020 - 0x0000)
struct FCloudSeasonChallengeClaimResult final
{
public:
	TArray<struct FCloudItemInfo>                 Rewards;                                           // 0x0000(0x0010)(BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FCloudOperation>                Operations;                                        // 0x0010(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FCloudSeasonChallengeClaimResult) == 0x000008, "Wrong alignment on FCloudSeasonChallengeClaimResult");
static_assert(sizeof(FCloudSeasonChallengeClaimResult) == 0x000020, "Wrong size on FCloudSeasonChallengeClaimResult");
static_assert(offsetof(FCloudSeasonChallengeClaimResult, Rewards) == 0x000000, "Member 'FCloudSeasonChallengeClaimResult::Rewards' has a wrong offset!");
static_assert(offsetof(FCloudSeasonChallengeClaimResult, Operations) == 0x000010, "Member 'FCloudSeasonChallengeClaimResult::Operations' has a wrong offset!");

// ScriptStruct Flame.WholeBodyHitZoneMultiplayers
// 0x0050 (0x0050 - 0x0000)
struct FWholeBodyHitZoneMultiplayers final
{
public:
	TMap<ECharacterHitZone, float>                HitZoneMultiplayers;                               // 0x0000(0x0050)(Edit, DisableEditOnInstance, NativeAccessSpecifierPublic)
};
static_assert(alignof(FWholeBodyHitZoneMultiplayers) == 0x000008, "Wrong alignment on FWholeBodyHitZoneMultiplayers");
static_assert(sizeof(FWholeBodyHitZoneMultiplayers) == 0x000050, "Wrong size on FWholeBodyHitZoneMultiplayers");
static_assert(offsetof(FWholeBodyHitZoneMultiplayers, HitZoneMultiplayers) == 0x000000, "Member 'FWholeBodyHitZoneMultiplayers::HitZoneMultiplayers' has a wrong offset!");

// ScriptStruct Flame.CloudPlatformStoreSteamProductPriceInfo
// 0x0020 (0x0020 - 0x0000)
struct FCloudPlatformStoreSteamProductPriceInfo final
{
public:
	class FString                                 Currency;                                          // 0x0000(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint32                                        InitialPrice;                                      // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint32                                        FinalPrice;                                        // 0x0014(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint32                                        DiscountPercent;                                   // 0x0018(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FCloudPlatformStoreSteamProductPriceInfo) == 0x000008, "Wrong alignment on FCloudPlatformStoreSteamProductPriceInfo");
static_assert(sizeof(FCloudPlatformStoreSteamProductPriceInfo) == 0x000020, "Wrong size on FCloudPlatformStoreSteamProductPriceInfo");
static_assert(offsetof(FCloudPlatformStoreSteamProductPriceInfo, Currency) == 0x000000, "Member 'FCloudPlatformStoreSteamProductPriceInfo::Currency' has a wrong offset!");
static_assert(offsetof(FCloudPlatformStoreSteamProductPriceInfo, InitialPrice) == 0x000010, "Member 'FCloudPlatformStoreSteamProductPriceInfo::InitialPrice' has a wrong offset!");
static_assert(offsetof(FCloudPlatformStoreSteamProductPriceInfo, FinalPrice) == 0x000014, "Member 'FCloudPlatformStoreSteamProductPriceInfo::FinalPrice' has a wrong offset!");
static_assert(offsetof(FCloudPlatformStoreSteamProductPriceInfo, DiscountPercent) == 0x000018, "Member 'FCloudPlatformStoreSteamProductPriceInfo::DiscountPercent' has a wrong offset!");

// ScriptStruct Flame.CloudPlatformStoreSteamProduct
// 0x0040 (0x0040 - 0x0000)
struct FCloudPlatformStoreSteamProduct final
{
public:
	struct FGameStoreProductId                    GameStoreProductId;                                // 0x0000(0x0010)(NativeAccessSpecifierPublic)
	class FString                                 StoreId;                                           // 0x0010(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FCloudPlatformStoreSteamProductPriceInfo PriceInfo;                                         // 0x0020(0x0020)(NativeAccessSpecifierPublic)
};
static_assert(alignof(FCloudPlatformStoreSteamProduct) == 0x000008, "Wrong alignment on FCloudPlatformStoreSteamProduct");
static_assert(sizeof(FCloudPlatformStoreSteamProduct) == 0x000040, "Wrong size on FCloudPlatformStoreSteamProduct");
static_assert(offsetof(FCloudPlatformStoreSteamProduct, GameStoreProductId) == 0x000000, "Member 'FCloudPlatformStoreSteamProduct::GameStoreProductId' has a wrong offset!");
static_assert(offsetof(FCloudPlatformStoreSteamProduct, StoreId) == 0x000010, "Member 'FCloudPlatformStoreSteamProduct::StoreId' has a wrong offset!");
static_assert(offsetof(FCloudPlatformStoreSteamProduct, PriceInfo) == 0x000020, "Member 'FCloudPlatformStoreSteamProduct::PriceInfo' has a wrong offset!");

// ScriptStruct Flame.CloudPlatformStoreSteamProductList
// 0x0010 (0x0010 - 0x0000)
struct FCloudPlatformStoreSteamProductList final
{
public:
	TArray<struct FCloudPlatformStoreSteamProduct> Products;                                          // 0x0000(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FCloudPlatformStoreSteamProductList) == 0x000008, "Wrong alignment on FCloudPlatformStoreSteamProductList");
static_assert(sizeof(FCloudPlatformStoreSteamProductList) == 0x000010, "Wrong size on FCloudPlatformStoreSteamProductList");
static_assert(offsetof(FCloudPlatformStoreSteamProductList, Products) == 0x000000, "Member 'FCloudPlatformStoreSteamProductList::Products' has a wrong offset!");

// ScriptStruct Flame.HumanAimingCollDetection
// 0x0018 (0x0018 - 0x0000)
struct FHumanAimingCollDetection final
{
public:
	bool                                          DetectObstacles;                                   // 0x0000(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                PositionOffset;                                    // 0x0004(0x000C)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TestLen;                                           // 0x0010(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SphereRadius;                                      // 0x0014(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FHumanAimingCollDetection) == 0x000004, "Wrong alignment on FHumanAimingCollDetection");
static_assert(sizeof(FHumanAimingCollDetection) == 0x000018, "Wrong size on FHumanAimingCollDetection");
static_assert(offsetof(FHumanAimingCollDetection, DetectObstacles) == 0x000000, "Member 'FHumanAimingCollDetection::DetectObstacles' has a wrong offset!");
static_assert(offsetof(FHumanAimingCollDetection, PositionOffset) == 0x000004, "Member 'FHumanAimingCollDetection::PositionOffset' has a wrong offset!");
static_assert(offsetof(FHumanAimingCollDetection, TestLen) == 0x000010, "Member 'FHumanAimingCollDetection::TestLen' has a wrong offset!");
static_assert(offsetof(FHumanAimingCollDetection, SphereRadius) == 0x000014, "Member 'FHumanAimingCollDetection::SphereRadius' has a wrong offset!");

// ScriptStruct Flame.ActiveEventSpeedModifierConstant
// 0x000C (0x000C - 0x0000)
struct FActiveEventSpeedModifierConstant final
{
public:
	float                                         Constant;                                          // 0x0000(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         CurrentTime;                                       // 0x0004(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Duration;                                          // 0x0008(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FActiveEventSpeedModifierConstant) == 0x000004, "Wrong alignment on FActiveEventSpeedModifierConstant");
static_assert(sizeof(FActiveEventSpeedModifierConstant) == 0x00000C, "Wrong size on FActiveEventSpeedModifierConstant");
static_assert(offsetof(FActiveEventSpeedModifierConstant, Constant) == 0x000000, "Member 'FActiveEventSpeedModifierConstant::Constant' has a wrong offset!");
static_assert(offsetof(FActiveEventSpeedModifierConstant, CurrentTime) == 0x000004, "Member 'FActiveEventSpeedModifierConstant::CurrentTime' has a wrong offset!");
static_assert(offsetof(FActiveEventSpeedModifierConstant, Duration) == 0x000008, "Member 'FActiveEventSpeedModifierConstant::Duration' has a wrong offset!");

// ScriptStruct Flame.WaterCollection
// 0x00A8 (0x00A8 - 0x0000)
struct FWaterCollection final
{
public:
	struct FWaterMovement                         RifleWater;                                        // 0x0000(0x0038)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, NativeAccessSpecifierPublic)
	struct FWaterMovement                         PistolWater;                                       // 0x0038(0x0038)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, NativeAccessSpecifierPublic)
	struct FWaterMovement                         UnarmedWater;                                      // 0x0070(0x0038)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FWaterCollection) == 0x000008, "Wrong alignment on FWaterCollection");
static_assert(sizeof(FWaterCollection) == 0x0000A8, "Wrong size on FWaterCollection");
static_assert(offsetof(FWaterCollection, RifleWater) == 0x000000, "Member 'FWaterCollection::RifleWater' has a wrong offset!");
static_assert(offsetof(FWaterCollection, PistolWater) == 0x000038, "Member 'FWaterCollection::PistolWater' has a wrong offset!");
static_assert(offsetof(FWaterCollection, UnarmedWater) == 0x000070, "Member 'FWaterCollection::UnarmedWater' has a wrong offset!");

// ScriptStruct Flame.IKFootLocation
// 0x0030 (0x0030 - 0x0000)
struct FIKFootLocation final
{
public:
	struct FVector                                LimbRootLocation;                                  // 0x0000(0x000C)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                OriginLocation;                                    // 0x000C(0x000C)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                ActualLocation;                                    // 0x0018(0x000C)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                NewLocation;                                       // 0x0024(0x000C)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FIKFootLocation) == 0x000004, "Wrong alignment on FIKFootLocation");
static_assert(sizeof(FIKFootLocation) == 0x000030, "Wrong size on FIKFootLocation");
static_assert(offsetof(FIKFootLocation, LimbRootLocation) == 0x000000, "Member 'FIKFootLocation::LimbRootLocation' has a wrong offset!");
static_assert(offsetof(FIKFootLocation, OriginLocation) == 0x00000C, "Member 'FIKFootLocation::OriginLocation' has a wrong offset!");
static_assert(offsetof(FIKFootLocation, ActualLocation) == 0x000018, "Member 'FIKFootLocation::ActualLocation' has a wrong offset!");
static_assert(offsetof(FIKFootLocation, NewLocation) == 0x000024, "Member 'FIKFootLocation::NewLocation' has a wrong offset!");

// ScriptStruct Flame.CloudSeasonChallengeProgressResult
// 0x000C (0x000C - 0x0000)
struct FCloudSeasonChallengeProgressResult final
{
public:
	int32                                         ChallengesDone;                                    // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ChallengesTotal;                                   // 0x0004(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsClaimed;                                         // 0x0008(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FCloudSeasonChallengeProgressResult) == 0x000004, "Wrong alignment on FCloudSeasonChallengeProgressResult");
static_assert(sizeof(FCloudSeasonChallengeProgressResult) == 0x00000C, "Wrong size on FCloudSeasonChallengeProgressResult");
static_assert(offsetof(FCloudSeasonChallengeProgressResult, ChallengesDone) == 0x000000, "Member 'FCloudSeasonChallengeProgressResult::ChallengesDone' has a wrong offset!");
static_assert(offsetof(FCloudSeasonChallengeProgressResult, ChallengesTotal) == 0x000004, "Member 'FCloudSeasonChallengeProgressResult::ChallengesTotal' has a wrong offset!");
static_assert(offsetof(FCloudSeasonChallengeProgressResult, IsClaimed) == 0x000008, "Member 'FCloudSeasonChallengeProgressResult::IsClaimed' has a wrong offset!");

// ScriptStruct Flame.SocketDescriptor
// 0x0014 (0x0014 - 0x0000)
struct FSocketDescriptor final
{
public:
	class FName                                   Name;                                              // 0x0000(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TWeakObjectPtr<class USceneComponent>         Component;                                         // 0x0008(0x0008)(ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bHasSocket;                                        // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x3];                                       // 0x0011(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FSocketDescriptor) == 0x000004, "Wrong alignment on FSocketDescriptor");
static_assert(sizeof(FSocketDescriptor) == 0x000014, "Wrong size on FSocketDescriptor");
static_assert(offsetof(FSocketDescriptor, Name) == 0x000000, "Member 'FSocketDescriptor::Name' has a wrong offset!");
static_assert(offsetof(FSocketDescriptor, Component) == 0x000008, "Member 'FSocketDescriptor::Component' has a wrong offset!");
static_assert(offsetof(FSocketDescriptor, bHasSocket) == 0x000010, "Member 'FSocketDescriptor::bHasSocket' has a wrong offset!");

// ScriptStruct Flame.ServerStateInfo
// 0x0028 (0x0028 - 0x0000)
struct FServerStateInfo final
{
public:
	int32                                         StateId;                                           // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         AutonomousInstigatorStateId;                       // 0x0004(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Timestamp;                                         // 0x0008(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class AItem*                                  Item;                                              // 0x0010(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UItemState*                             State;                                             // 0x0018(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EStatePhase                                   Phase;                                             // 0x0020(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_21[0x7];                                       // 0x0021(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FServerStateInfo) == 0x000008, "Wrong alignment on FServerStateInfo");
static_assert(sizeof(FServerStateInfo) == 0x000028, "Wrong size on FServerStateInfo");
static_assert(offsetof(FServerStateInfo, StateId) == 0x000000, "Member 'FServerStateInfo::StateId' has a wrong offset!");
static_assert(offsetof(FServerStateInfo, AutonomousInstigatorStateId) == 0x000004, "Member 'FServerStateInfo::AutonomousInstigatorStateId' has a wrong offset!");
static_assert(offsetof(FServerStateInfo, Timestamp) == 0x000008, "Member 'FServerStateInfo::Timestamp' has a wrong offset!");
static_assert(offsetof(FServerStateInfo, Item) == 0x000010, "Member 'FServerStateInfo::Item' has a wrong offset!");
static_assert(offsetof(FServerStateInfo, State) == 0x000018, "Member 'FServerStateInfo::State' has a wrong offset!");
static_assert(offsetof(FServerStateInfo, Phase) == 0x000020, "Member 'FServerStateInfo::Phase' has a wrong offset!");

// ScriptStruct Flame.CloudSeasonChallengeRewardsResult
// 0x0010 (0x0010 - 0x0000)
struct FCloudSeasonChallengeRewardsResult final
{
public:
	TArray<struct FCloudItemInfo>                 Rewards;                                           // 0x0000(0x0010)(BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FCloudSeasonChallengeRewardsResult) == 0x000008, "Wrong alignment on FCloudSeasonChallengeRewardsResult");
static_assert(sizeof(FCloudSeasonChallengeRewardsResult) == 0x000010, "Wrong size on FCloudSeasonChallengeRewardsResult");
static_assert(offsetof(FCloudSeasonChallengeRewardsResult, Rewards) == 0x000000, "Member 'FCloudSeasonChallengeRewardsResult::Rewards' has a wrong offset!");

// ScriptStruct Flame.CloudCharityBoxAddInfo
// 0x0004 (0x0004 - 0x0000)
struct FCloudCharityBoxAddInfo final
{
public:
	int32                                         FoodAmount;                                        // 0x0000(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FCloudCharityBoxAddInfo) == 0x000004, "Wrong alignment on FCloudCharityBoxAddInfo");
static_assert(sizeof(FCloudCharityBoxAddInfo) == 0x000004, "Wrong size on FCloudCharityBoxAddInfo");
static_assert(offsetof(FCloudCharityBoxAddInfo, FoodAmount) == 0x000000, "Member 'FCloudCharityBoxAddInfo::FoodAmount' has a wrong offset!");

// ScriptStruct Flame.InventoryOperationInfoServer
// 0x0020 (0x0020 - 0x0000)
struct FInventoryOperationInfoServer final
{
public:
	int32                                         ID;                                                // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TSubclassOf<class AWeapon>                    TakenWeapon;                                       // 0x0008(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         CountBeforeTake;                                   // 0x0010(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         CountAfterTake;                                    // 0x0014(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EOperationResult                              Result;                                            // 0x0018(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FInventoryOperationInfoServer) == 0x000008, "Wrong alignment on FInventoryOperationInfoServer");
static_assert(sizeof(FInventoryOperationInfoServer) == 0x000020, "Wrong size on FInventoryOperationInfoServer");
static_assert(offsetof(FInventoryOperationInfoServer, ID) == 0x000000, "Member 'FInventoryOperationInfoServer::ID' has a wrong offset!");
static_assert(offsetof(FInventoryOperationInfoServer, TakenWeapon) == 0x000008, "Member 'FInventoryOperationInfoServer::TakenWeapon' has a wrong offset!");
static_assert(offsetof(FInventoryOperationInfoServer, CountBeforeTake) == 0x000010, "Member 'FInventoryOperationInfoServer::CountBeforeTake' has a wrong offset!");
static_assert(offsetof(FInventoryOperationInfoServer, CountAfterTake) == 0x000014, "Member 'FInventoryOperationInfoServer::CountAfterTake' has a wrong offset!");
static_assert(offsetof(FInventoryOperationInfoServer, Result) == 0x000018, "Member 'FInventoryOperationInfoServer::Result' has a wrong offset!");

// ScriptStruct Flame.CloudCharityBoxState
// 0x0028 (0x0028 - 0x0000)
struct FCloudCharityBoxState final
{
public:
	int32                                         FoodAmount;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 SeasonName;                                        // 0x0008(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_18[0x10];                                      // 0x0018(0x0010)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FCloudCharityBoxState) == 0x000008, "Wrong alignment on FCloudCharityBoxState");
static_assert(sizeof(FCloudCharityBoxState) == 0x000028, "Wrong size on FCloudCharityBoxState");
static_assert(offsetof(FCloudCharityBoxState, FoodAmount) == 0x000000, "Member 'FCloudCharityBoxState::FoodAmount' has a wrong offset!");
static_assert(offsetof(FCloudCharityBoxState, SeasonName) == 0x000008, "Member 'FCloudCharityBoxState::SeasonName' has a wrong offset!");

// ScriptStruct Flame.ItemCategoriesList
// 0x0020 (0x0028 - 0x0008)
struct FItemCategoriesList final : public FTableRowBase
{
public:
	EItemCategory                                 Category;                                          // 0x0008(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   Name;                                              // 0x0010(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NativeAccessSpecifierPublic)
};
static_assert(alignof(FItemCategoriesList) == 0x000008, "Wrong alignment on FItemCategoriesList");
static_assert(sizeof(FItemCategoriesList) == 0x000028, "Wrong size on FItemCategoriesList");
static_assert(offsetof(FItemCategoriesList, Category) == 0x000008, "Member 'FItemCategoriesList::Category' has a wrong offset!");
static_assert(offsetof(FItemCategoriesList, Name) == 0x000010, "Member 'FItemCategoriesList::Name' has a wrong offset!");

// ScriptStruct Flame.CloudCharityBoxClaimInfo
// 0x0018 (0x0018 - 0x0000)
struct alignas(0x08) FCloudCharityBoxClaimInfo final
{
public:
	int32                                         DataVersion;                                       // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         FoodAmount;                                        // 0x0004(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_8[0x10];                                       // 0x0008(0x0010)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FCloudCharityBoxClaimInfo) == 0x000008, "Wrong alignment on FCloudCharityBoxClaimInfo");
static_assert(sizeof(FCloudCharityBoxClaimInfo) == 0x000018, "Wrong size on FCloudCharityBoxClaimInfo");
static_assert(offsetof(FCloudCharityBoxClaimInfo, DataVersion) == 0x000000, "Member 'FCloudCharityBoxClaimInfo::DataVersion' has a wrong offset!");
static_assert(offsetof(FCloudCharityBoxClaimInfo, FoodAmount) == 0x000004, "Member 'FCloudCharityBoxClaimInfo::FoodAmount' has a wrong offset!");

// ScriptStruct Flame.PendingOptionsElement
// 0x0050 (0x0050 - 0x0000)
struct FPendingOptionsElement final
{
public:
	uint8                                         Pad_0[0x48];                                       // 0x0000(0x0048)(Fixing Size After Last Property [ Dumper-7 ])
	class UOptionsElementWidget*                  Widget;                                            // 0x0048(0x0008)(ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FPendingOptionsElement) == 0x000008, "Wrong alignment on FPendingOptionsElement");
static_assert(sizeof(FPendingOptionsElement) == 0x000050, "Wrong size on FPendingOptionsElement");
static_assert(offsetof(FPendingOptionsElement, Widget) == 0x000048, "Member 'FPendingOptionsElement::Widget' has a wrong offset!");

// ScriptStruct Flame.CloudCharityBoxSeasonMilestoneRewardInfo
// 0x0010 (0x0010 - 0x0000)
struct FCloudCharityBoxSeasonMilestoneRewardInfo final
{
public:
	TSubclassOf<class AItem>                      ItemClass;                                         // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Count;                                             // 0x0008(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FCloudCharityBoxSeasonMilestoneRewardInfo) == 0x000008, "Wrong alignment on FCloudCharityBoxSeasonMilestoneRewardInfo");
static_assert(sizeof(FCloudCharityBoxSeasonMilestoneRewardInfo) == 0x000010, "Wrong size on FCloudCharityBoxSeasonMilestoneRewardInfo");
static_assert(offsetof(FCloudCharityBoxSeasonMilestoneRewardInfo, ItemClass) == 0x000000, "Member 'FCloudCharityBoxSeasonMilestoneRewardInfo::ItemClass' has a wrong offset!");
static_assert(offsetof(FCloudCharityBoxSeasonMilestoneRewardInfo, Count) == 0x000008, "Member 'FCloudCharityBoxSeasonMilestoneRewardInfo::Count' has a wrong offset!");

// ScriptStruct Flame.CloudCharityBoxSeasonMilestoneInfo
// 0x0028 (0x0028 - 0x0000)
struct FCloudCharityBoxSeasonMilestoneInfo final
{
public:
	class FString                                 MilestoneName;                                     // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         RequiredFood;                                      // 0x0010(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FCloudCharityBoxSeasonMilestoneRewardInfo> Rewards;                                           // 0x0018(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FCloudCharityBoxSeasonMilestoneInfo) == 0x000008, "Wrong alignment on FCloudCharityBoxSeasonMilestoneInfo");
static_assert(sizeof(FCloudCharityBoxSeasonMilestoneInfo) == 0x000028, "Wrong size on FCloudCharityBoxSeasonMilestoneInfo");
static_assert(offsetof(FCloudCharityBoxSeasonMilestoneInfo, MilestoneName) == 0x000000, "Member 'FCloudCharityBoxSeasonMilestoneInfo::MilestoneName' has a wrong offset!");
static_assert(offsetof(FCloudCharityBoxSeasonMilestoneInfo, RequiredFood) == 0x000010, "Member 'FCloudCharityBoxSeasonMilestoneInfo::RequiredFood' has a wrong offset!");
static_assert(offsetof(FCloudCharityBoxSeasonMilestoneInfo, Rewards) == 0x000018, "Member 'FCloudCharityBoxSeasonMilestoneInfo::Rewards' has a wrong offset!");

// ScriptStruct Flame.CloudCharityBoxSeasonInfo
// 0x0040 (0x0040 - 0x0000)
struct FCloudCharityBoxSeasonInfo final
{
public:
	class FString                                 SeasonName;                                        // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 LeaderboardName;                                   // 0x0010(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FDateTime                              From;                                              // 0x0020(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FDateTime                              To;                                                // 0x0028(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FCloudCharityBoxSeasonMilestoneInfo> Milestones;                                        // 0x0030(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FCloudCharityBoxSeasonInfo) == 0x000008, "Wrong alignment on FCloudCharityBoxSeasonInfo");
static_assert(sizeof(FCloudCharityBoxSeasonInfo) == 0x000040, "Wrong size on FCloudCharityBoxSeasonInfo");
static_assert(offsetof(FCloudCharityBoxSeasonInfo, SeasonName) == 0x000000, "Member 'FCloudCharityBoxSeasonInfo::SeasonName' has a wrong offset!");
static_assert(offsetof(FCloudCharityBoxSeasonInfo, LeaderboardName) == 0x000010, "Member 'FCloudCharityBoxSeasonInfo::LeaderboardName' has a wrong offset!");
static_assert(offsetof(FCloudCharityBoxSeasonInfo, From) == 0x000020, "Member 'FCloudCharityBoxSeasonInfo::From' has a wrong offset!");
static_assert(offsetof(FCloudCharityBoxSeasonInfo, To) == 0x000028, "Member 'FCloudCharityBoxSeasonInfo::To' has a wrong offset!");
static_assert(offsetof(FCloudCharityBoxSeasonInfo, Milestones) == 0x000030, "Member 'FCloudCharityBoxSeasonInfo::Milestones' has a wrong offset!");

// ScriptStruct Flame.CloudCharityBoxSeasonsInfo
// 0x0018 (0x0018 - 0x0000)
struct FCloudCharityBoxSeasonsInfo final
{
public:
	int32                                         DataVersion;                                       // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FCloudCharityBoxSeasonInfo>     Seasons;                                           // 0x0008(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FCloudCharityBoxSeasonsInfo) == 0x000008, "Wrong alignment on FCloudCharityBoxSeasonsInfo");
static_assert(sizeof(FCloudCharityBoxSeasonsInfo) == 0x000018, "Wrong size on FCloudCharityBoxSeasonsInfo");
static_assert(offsetof(FCloudCharityBoxSeasonsInfo, DataVersion) == 0x000000, "Member 'FCloudCharityBoxSeasonsInfo::DataVersion' has a wrong offset!");
static_assert(offsetof(FCloudCharityBoxSeasonsInfo, Seasons) == 0x000008, "Member 'FCloudCharityBoxSeasonsInfo::Seasons' has a wrong offset!");

// ScriptStruct Flame.AxisSettings
// 0x0008 (0x0008 - 0x0000)
struct FAxisSettings final
{
public:
	EAxis                                         YawRotationAxis;                                   // 0x0000(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EAxis                                         YawFixIKROOT;                                      // 0x0001(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2[0x2];                                        // 0x0002(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         BodyOrientationAlpha;                              // 0x0004(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAxisSettings) == 0x000004, "Wrong alignment on FAxisSettings");
static_assert(sizeof(FAxisSettings) == 0x000008, "Wrong size on FAxisSettings");
static_assert(offsetof(FAxisSettings, YawRotationAxis) == 0x000000, "Member 'FAxisSettings::YawRotationAxis' has a wrong offset!");
static_assert(offsetof(FAxisSettings, YawFixIKROOT) == 0x000001, "Member 'FAxisSettings::YawFixIKROOT' has a wrong offset!");
static_assert(offsetof(FAxisSettings, BodyOrientationAlpha) == 0x000004, "Member 'FAxisSettings::BodyOrientationAlpha' has a wrong offset!");

// ScriptStruct Flame.WindowSashData
// 0x0050 (0x0050 - 0x0000)
struct FWindowSashData final
{
public:
	class UStaticMesh*                            Mesh;                                              // 0x0000(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UStaticMesh*                            MeshLocked;                                        // 0x0008(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   SocketName;                                        // 0x0010(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         OpenDegrees;                                       // 0x0018(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bEnableCanIntersectOnMeshes;                       // 0x001C(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1D[0x3];                                       // 0x001D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class UMaterialInterface*>             Materials;                                         // 0x0020(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	class FName                                   MaterialSlot;                                      // 0x0030(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class UMaterialInterface*>             MaterialsLocked;                                   // 0x0038(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	class FName                                   MaterialSlotLocked;                                // 0x0048(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FWindowSashData) == 0x000008, "Wrong alignment on FWindowSashData");
static_assert(sizeof(FWindowSashData) == 0x000050, "Wrong size on FWindowSashData");
static_assert(offsetof(FWindowSashData, Mesh) == 0x000000, "Member 'FWindowSashData::Mesh' has a wrong offset!");
static_assert(offsetof(FWindowSashData, MeshLocked) == 0x000008, "Member 'FWindowSashData::MeshLocked' has a wrong offset!");
static_assert(offsetof(FWindowSashData, SocketName) == 0x000010, "Member 'FWindowSashData::SocketName' has a wrong offset!");
static_assert(offsetof(FWindowSashData, OpenDegrees) == 0x000018, "Member 'FWindowSashData::OpenDegrees' has a wrong offset!");
static_assert(offsetof(FWindowSashData, bEnableCanIntersectOnMeshes) == 0x00001C, "Member 'FWindowSashData::bEnableCanIntersectOnMeshes' has a wrong offset!");
static_assert(offsetof(FWindowSashData, Materials) == 0x000020, "Member 'FWindowSashData::Materials' has a wrong offset!");
static_assert(offsetof(FWindowSashData, MaterialSlot) == 0x000030, "Member 'FWindowSashData::MaterialSlot' has a wrong offset!");
static_assert(offsetof(FWindowSashData, MaterialsLocked) == 0x000038, "Member 'FWindowSashData::MaterialsLocked' has a wrong offset!");
static_assert(offsetof(FWindowSashData, MaterialSlotLocked) == 0x000048, "Member 'FWindowSashData::MaterialSlotLocked' has a wrong offset!");

// ScriptStruct Flame.ObstacleEdge
// 0x0024 (0x0024 - 0x0000)
struct FObstacleEdge final
{
public:
	struct FVector                                Start;                                             // 0x0000(0x000C)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                End;                                               // 0x000C(0x000C)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                Normal;                                            // 0x0018(0x000C)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FObstacleEdge) == 0x000004, "Wrong alignment on FObstacleEdge");
static_assert(sizeof(FObstacleEdge) == 0x000024, "Wrong size on FObstacleEdge");
static_assert(offsetof(FObstacleEdge, Start) == 0x000000, "Member 'FObstacleEdge::Start' has a wrong offset!");
static_assert(offsetof(FObstacleEdge, End) == 0x00000C, "Member 'FObstacleEdge::End' has a wrong offset!");
static_assert(offsetof(FObstacleEdge, Normal) == 0x000018, "Member 'FObstacleEdge::Normal' has a wrong offset!");

// ScriptStruct Flame.WindowSashSetData
// 0x0078 (0x0078 - 0x0000)
struct FWindowSashSetData final
{
public:
	TArray<struct FWindowSashData>                SashData;                                          // 0x0000(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	TMap<class FString, class UStaticMesh*>       Panes;                                             // 0x0010(0x0050)(Edit, NativeAccessSpecifierPublic)
	bool                                          bAttachPanesToParent;                              // 0x0060(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_61[0x7];                                       // 0x0061(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FObstacleEdge>                  ObstacleEdges;                                     // 0x0068(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FWindowSashSetData) == 0x000008, "Wrong alignment on FWindowSashSetData");
static_assert(sizeof(FWindowSashSetData) == 0x000078, "Wrong size on FWindowSashSetData");
static_assert(offsetof(FWindowSashSetData, SashData) == 0x000000, "Member 'FWindowSashSetData::SashData' has a wrong offset!");
static_assert(offsetof(FWindowSashSetData, Panes) == 0x000010, "Member 'FWindowSashSetData::Panes' has a wrong offset!");
static_assert(offsetof(FWindowSashSetData, bAttachPanesToParent) == 0x000060, "Member 'FWindowSashSetData::bAttachPanesToParent' has a wrong offset!");
static_assert(offsetof(FWindowSashSetData, ObstacleEdges) == 0x000068, "Member 'FWindowSashSetData::ObstacleEdges' has a wrong offset!");

// ScriptStruct Flame.CloudLeaderboardSingleStat
// 0x000C (0x000C - 0x0000)
struct FCloudLeaderboardSingleStat final
{
public:
	float                                         Value;                                             // 0x0000(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         PlatformPosition;                                  // 0x0004(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         PlatformPositionPrevious;                          // 0x0008(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FCloudLeaderboardSingleStat) == 0x000004, "Wrong alignment on FCloudLeaderboardSingleStat");
static_assert(sizeof(FCloudLeaderboardSingleStat) == 0x00000C, "Wrong size on FCloudLeaderboardSingleStat");
static_assert(offsetof(FCloudLeaderboardSingleStat, Value) == 0x000000, "Member 'FCloudLeaderboardSingleStat::Value' has a wrong offset!");
static_assert(offsetof(FCloudLeaderboardSingleStat, PlatformPosition) == 0x000004, "Member 'FCloudLeaderboardSingleStat::PlatformPosition' has a wrong offset!");
static_assert(offsetof(FCloudLeaderboardSingleStat, PlatformPositionPrevious) == 0x000008, "Member 'FCloudLeaderboardSingleStat::PlatformPositionPrevious' has a wrong offset!");

// ScriptStruct Flame.HumanArchetypeFacialHairConfiguration
// 0x0008 (0x0008 - 0x0000)
struct FHumanArchetypeFacialHairConfiguration final
{
public:
	class USkeletalMesh*                          FacialHairMesh;                                    // 0x0000(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FHumanArchetypeFacialHairConfiguration) == 0x000008, "Wrong alignment on FHumanArchetypeFacialHairConfiguration");
static_assert(sizeof(FHumanArchetypeFacialHairConfiguration) == 0x000008, "Wrong size on FHumanArchetypeFacialHairConfiguration");
static_assert(offsetof(FHumanArchetypeFacialHairConfiguration, FacialHairMesh) == 0x000000, "Member 'FHumanArchetypeFacialHairConfiguration::FacialHairMesh' has a wrong offset!");

// ScriptStruct Flame.HumanArchetypeConfiguration
// 0x0060 (0x0068 - 0x0008)
struct FHumanArchetypeConfiguration final : public FTableRowBase
{
public:
	class FText                                   ArchetypeName;                                     // 0x0008(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NativeAccessSpecifierPublic)
	class USkeletalMesh*                          HeadMesh;                                          // 0x0020(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UMaterialInterface*                     HeadMaterial;                                      // 0x0028(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USkeletalMesh*                          HandsMesh;                                         // 0x0030(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UMaterialInterface*                     HandsMaterial;                                     // 0x0038(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FHumanArchetypeHairConfiguration> HairConfig;                                        // 0x0040(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic)
	TArray<struct FHumanArchetypeFacialHairConfiguration> FacialHairConfig;                                  // 0x0050(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic)
	EHumanArchetypeBodyType                       BodyType;                                          // 0x0060(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_61[0x7];                                       // 0x0061(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FHumanArchetypeConfiguration) == 0x000008, "Wrong alignment on FHumanArchetypeConfiguration");
static_assert(sizeof(FHumanArchetypeConfiguration) == 0x000068, "Wrong size on FHumanArchetypeConfiguration");
static_assert(offsetof(FHumanArchetypeConfiguration, ArchetypeName) == 0x000008, "Member 'FHumanArchetypeConfiguration::ArchetypeName' has a wrong offset!");
static_assert(offsetof(FHumanArchetypeConfiguration, HeadMesh) == 0x000020, "Member 'FHumanArchetypeConfiguration::HeadMesh' has a wrong offset!");
static_assert(offsetof(FHumanArchetypeConfiguration, HeadMaterial) == 0x000028, "Member 'FHumanArchetypeConfiguration::HeadMaterial' has a wrong offset!");
static_assert(offsetof(FHumanArchetypeConfiguration, HandsMesh) == 0x000030, "Member 'FHumanArchetypeConfiguration::HandsMesh' has a wrong offset!");
static_assert(offsetof(FHumanArchetypeConfiguration, HandsMaterial) == 0x000038, "Member 'FHumanArchetypeConfiguration::HandsMaterial' has a wrong offset!");
static_assert(offsetof(FHumanArchetypeConfiguration, HairConfig) == 0x000040, "Member 'FHumanArchetypeConfiguration::HairConfig' has a wrong offset!");
static_assert(offsetof(FHumanArchetypeConfiguration, FacialHairConfig) == 0x000050, "Member 'FHumanArchetypeConfiguration::FacialHairConfig' has a wrong offset!");
static_assert(offsetof(FHumanArchetypeConfiguration, BodyType) == 0x000060, "Member 'FHumanArchetypeConfiguration::BodyType' has a wrong offset!");

// ScriptStruct Flame.BipedalStopCollection
// 0x0018 (0x0018 - 0x0000)
struct FBipedalStopCollection final
{
public:
	class UAnimSequence*                          StopRun;                                           // 0x0000(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAnimSequence*                          StopWalk;                                          // 0x0008(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAnimSequence*                          StopSprint;                                        // 0x0010(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FBipedalStopCollection) == 0x000008, "Wrong alignment on FBipedalStopCollection");
static_assert(sizeof(FBipedalStopCollection) == 0x000018, "Wrong size on FBipedalStopCollection");
static_assert(offsetof(FBipedalStopCollection, StopRun) == 0x000000, "Member 'FBipedalStopCollection::StopRun' has a wrong offset!");
static_assert(offsetof(FBipedalStopCollection, StopWalk) == 0x000008, "Member 'FBipedalStopCollection::StopWalk' has a wrong offset!");
static_assert(offsetof(FBipedalStopCollection, StopSprint) == 0x000010, "Member 'FBipedalStopCollection::StopSprint' has a wrong offset!");

// ScriptStruct Flame.CloudUserLeaderBoardDetailRequest
// 0x0030 (0x0030 - 0x0000)
struct FCloudUserLeaderBoardDetailRequest final
{
public:
	EOnlineGameMode                               GameMode;                                          // 0x0000(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 Interval;                                          // 0x0008(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EStatType                                     StatType;                                          // 0x0018(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FGuid>                          Friends;                                           // 0x0020(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FCloudUserLeaderBoardDetailRequest) == 0x000008, "Wrong alignment on FCloudUserLeaderBoardDetailRequest");
static_assert(sizeof(FCloudUserLeaderBoardDetailRequest) == 0x000030, "Wrong size on FCloudUserLeaderBoardDetailRequest");
static_assert(offsetof(FCloudUserLeaderBoardDetailRequest, GameMode) == 0x000000, "Member 'FCloudUserLeaderBoardDetailRequest::GameMode' has a wrong offset!");
static_assert(offsetof(FCloudUserLeaderBoardDetailRequest, Interval) == 0x000008, "Member 'FCloudUserLeaderBoardDetailRequest::Interval' has a wrong offset!");
static_assert(offsetof(FCloudUserLeaderBoardDetailRequest, StatType) == 0x000018, "Member 'FCloudUserLeaderBoardDetailRequest::StatType' has a wrong offset!");
static_assert(offsetof(FCloudUserLeaderBoardDetailRequest, Friends) == 0x000020, "Member 'FCloudUserLeaderBoardDetailRequest::Friends' has a wrong offset!");

// ScriptStruct Flame.CloudDataImprovementIngredient
// 0x0020 (0x0020 - 0x0000)
struct FCloudDataImprovementIngredient final
{
public:
	class FString                                 Name;                                              // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSubclassOf<class AShelterResourceItem>       ItemClass;                                         // 0x0010(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Count;                                             // 0x0018(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FCloudDataImprovementIngredient) == 0x000008, "Wrong alignment on FCloudDataImprovementIngredient");
static_assert(sizeof(FCloudDataImprovementIngredient) == 0x000020, "Wrong size on FCloudDataImprovementIngredient");
static_assert(offsetof(FCloudDataImprovementIngredient, Name) == 0x000000, "Member 'FCloudDataImprovementIngredient::Name' has a wrong offset!");
static_assert(offsetof(FCloudDataImprovementIngredient, ItemClass) == 0x000010, "Member 'FCloudDataImprovementIngredient::ItemClass' has a wrong offset!");
static_assert(offsetof(FCloudDataImprovementIngredient, Count) == 0x000018, "Member 'FCloudDataImprovementIngredient::Count' has a wrong offset!");

// ScriptStruct Flame.CloudDataImprovementRequirement
// 0x0020 (0x0020 - 0x0000)
struct FCloudDataImprovementRequirement final
{
public:
	class FString                                 Name;                                              // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSubclassOf<class AShelterImprovement>        ImprovementClass;                                  // 0x0010(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Count;                                             // 0x0018(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FCloudDataImprovementRequirement) == 0x000008, "Wrong alignment on FCloudDataImprovementRequirement");
static_assert(sizeof(FCloudDataImprovementRequirement) == 0x000020, "Wrong size on FCloudDataImprovementRequirement");
static_assert(offsetof(FCloudDataImprovementRequirement, Name) == 0x000000, "Member 'FCloudDataImprovementRequirement::Name' has a wrong offset!");
static_assert(offsetof(FCloudDataImprovementRequirement, ImprovementClass) == 0x000010, "Member 'FCloudDataImprovementRequirement::ImprovementClass' has a wrong offset!");
static_assert(offsetof(FCloudDataImprovementRequirement, Count) == 0x000018, "Member 'FCloudDataImprovementRequirement::Count' has a wrong offset!");

// ScriptStruct Flame.CloudDataImprovementLevel
// 0x0040 (0x0040 - 0x0000)
struct FCloudDataImprovementLevel final
{
public:
	int32                                         Level;                                             // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         GeneratorRatePerHour;                              // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         GeneratorRelativeRate;                             // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MinimumCollectionTimeSpanInSeconds;                // 0x000C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         StorageLimit;                                      // 0x0010(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         BuildTimeInSeconds;                                // 0x0014(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         InstantCraftPrice;                                 // 0x0018(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FCloudDataImprovementIngredient> Ingredients;                                       // 0x0020(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FCloudDataImprovementRequirement> RequiredImprovements;                              // 0x0030(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FCloudDataImprovementLevel) == 0x000008, "Wrong alignment on FCloudDataImprovementLevel");
static_assert(sizeof(FCloudDataImprovementLevel) == 0x000040, "Wrong size on FCloudDataImprovementLevel");
static_assert(offsetof(FCloudDataImprovementLevel, Level) == 0x000000, "Member 'FCloudDataImprovementLevel::Level' has a wrong offset!");
static_assert(offsetof(FCloudDataImprovementLevel, GeneratorRatePerHour) == 0x000004, "Member 'FCloudDataImprovementLevel::GeneratorRatePerHour' has a wrong offset!");
static_assert(offsetof(FCloudDataImprovementLevel, GeneratorRelativeRate) == 0x000008, "Member 'FCloudDataImprovementLevel::GeneratorRelativeRate' has a wrong offset!");
static_assert(offsetof(FCloudDataImprovementLevel, MinimumCollectionTimeSpanInSeconds) == 0x00000C, "Member 'FCloudDataImprovementLevel::MinimumCollectionTimeSpanInSeconds' has a wrong offset!");
static_assert(offsetof(FCloudDataImprovementLevel, StorageLimit) == 0x000010, "Member 'FCloudDataImprovementLevel::StorageLimit' has a wrong offset!");
static_assert(offsetof(FCloudDataImprovementLevel, BuildTimeInSeconds) == 0x000014, "Member 'FCloudDataImprovementLevel::BuildTimeInSeconds' has a wrong offset!");
static_assert(offsetof(FCloudDataImprovementLevel, InstantCraftPrice) == 0x000018, "Member 'FCloudDataImprovementLevel::InstantCraftPrice' has a wrong offset!");
static_assert(offsetof(FCloudDataImprovementLevel, Ingredients) == 0x000020, "Member 'FCloudDataImprovementLevel::Ingredients' has a wrong offset!");
static_assert(offsetof(FCloudDataImprovementLevel, RequiredImprovements) == 0x000030, "Member 'FCloudDataImprovementLevel::RequiredImprovements' has a wrong offset!");

// ScriptStruct Flame.LootBoxInfoCloud
// 0x0030 (0x0030 - 0x0000)
struct FLootBoxInfoCloud final
{
public:
	class FString                                 Name;                                              // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSubclassOf<class AItem>                      LootBox;                                           // 0x0010(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         UnopenedCount;                                     // 0x0018(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FLootBoxPoolItem>               Pool;                                              // 0x0020(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FLootBoxInfoCloud) == 0x000008, "Wrong alignment on FLootBoxInfoCloud");
static_assert(sizeof(FLootBoxInfoCloud) == 0x000030, "Wrong size on FLootBoxInfoCloud");
static_assert(offsetof(FLootBoxInfoCloud, Name) == 0x000000, "Member 'FLootBoxInfoCloud::Name' has a wrong offset!");
static_assert(offsetof(FLootBoxInfoCloud, LootBox) == 0x000010, "Member 'FLootBoxInfoCloud::LootBox' has a wrong offset!");
static_assert(offsetof(FLootBoxInfoCloud, UnopenedCount) == 0x000018, "Member 'FLootBoxInfoCloud::UnopenedCount' has a wrong offset!");
static_assert(offsetof(FLootBoxInfoCloud, Pool) == 0x000020, "Member 'FLootBoxInfoCloud::Pool' has a wrong offset!");

// ScriptStruct Flame.LootBoxesInfoCloud
// 0x0010 (0x0010 - 0x0000)
struct FLootBoxesInfoCloud final
{
public:
	TArray<struct FLootBoxInfoCloud>              LootBoxes;                                         // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FLootBoxesInfoCloud) == 0x000008, "Wrong alignment on FLootBoxesInfoCloud");
static_assert(sizeof(FLootBoxesInfoCloud) == 0x000010, "Wrong size on FLootBoxesInfoCloud");
static_assert(offsetof(FLootBoxesInfoCloud, LootBoxes) == 0x000000, "Member 'FLootBoxesInfoCloud::LootBoxes' has a wrong offset!");

// ScriptStruct Flame.DebugFireInfo
// 0x0030 (0x0030 - 0x0000)
struct FDebugFireInfo final
{
public:
	struct FVector                                Position;                                          // 0x0000(0x000C)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                Direction;                                         // 0x000C(0x000C)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bWasFired;                                         // 0x0018(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 Message;                                           // 0x0020(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FDebugFireInfo) == 0x000008, "Wrong alignment on FDebugFireInfo");
static_assert(sizeof(FDebugFireInfo) == 0x000030, "Wrong size on FDebugFireInfo");
static_assert(offsetof(FDebugFireInfo, Position) == 0x000000, "Member 'FDebugFireInfo::Position' has a wrong offset!");
static_assert(offsetof(FDebugFireInfo, Direction) == 0x00000C, "Member 'FDebugFireInfo::Direction' has a wrong offset!");
static_assert(offsetof(FDebugFireInfo, bWasFired) == 0x000018, "Member 'FDebugFireInfo::bWasFired' has a wrong offset!");
static_assert(offsetof(FDebugFireInfo, Message) == 0x000020, "Member 'FDebugFireInfo::Message' has a wrong offset!");

// ScriptStruct Flame.Transition
// 0x0030 (0x0030 - 0x0000)
struct FTransition final
{
public:
	class UAnimMontage*                           StandToCrouch;                                     // 0x0000(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAnimMontage*                           StandToProne;                                      // 0x0008(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAnimMontage*                           CrouchToStand;                                     // 0x0010(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAnimMontage*                           CrouchToProne;                                     // 0x0018(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAnimMontage*                           ProneToStand;                                      // 0x0020(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAnimMontage*                           ProneToCrouch;                                     // 0x0028(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FTransition) == 0x000008, "Wrong alignment on FTransition");
static_assert(sizeof(FTransition) == 0x000030, "Wrong size on FTransition");
static_assert(offsetof(FTransition, StandToCrouch) == 0x000000, "Member 'FTransition::StandToCrouch' has a wrong offset!");
static_assert(offsetof(FTransition, StandToProne) == 0x000008, "Member 'FTransition::StandToProne' has a wrong offset!");
static_assert(offsetof(FTransition, CrouchToStand) == 0x000010, "Member 'FTransition::CrouchToStand' has a wrong offset!");
static_assert(offsetof(FTransition, CrouchToProne) == 0x000018, "Member 'FTransition::CrouchToProne' has a wrong offset!");
static_assert(offsetof(FTransition, ProneToStand) == 0x000020, "Member 'FTransition::ProneToStand' has a wrong offset!");
static_assert(offsetof(FTransition, ProneToCrouch) == 0x000028, "Member 'FTransition::ProneToCrouch' has a wrong offset!");

// ScriptStruct Flame.CloudUserWipeRewardItem
// 0x0010 (0x0010 - 0x0000)
struct FCloudUserWipeRewardItem final
{
public:
	TSubclassOf<class AItem>                      ItemClass;                                         // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Count;                                             // 0x0008(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FCloudUserWipeRewardItem) == 0x000008, "Wrong alignment on FCloudUserWipeRewardItem");
static_assert(sizeof(FCloudUserWipeRewardItem) == 0x000010, "Wrong size on FCloudUserWipeRewardItem");
static_assert(offsetof(FCloudUserWipeRewardItem, ItemClass) == 0x000000, "Member 'FCloudUserWipeRewardItem::ItemClass' has a wrong offset!");
static_assert(offsetof(FCloudUserWipeRewardItem, Count) == 0x000008, "Member 'FCloudUserWipeRewardItem::Count' has a wrong offset!");

// ScriptStruct Flame.FlameDirectParams
// 0x002C (0x002C - 0x0000)
struct FFlameDirectParams final
{
public:
	struct FVector                                LeftHandIK;                                        // 0x0000(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         LeftHandIKFactor;                                  // 0x000C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                WeaponOffset;                                      // 0x0010(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRotator                               WeaponRotation;                                    // 0x001C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	float                                         WeaponRotFactor;                                   // 0x0028(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FFlameDirectParams) == 0x000004, "Wrong alignment on FFlameDirectParams");
static_assert(sizeof(FFlameDirectParams) == 0x00002C, "Wrong size on FFlameDirectParams");
static_assert(offsetof(FFlameDirectParams, LeftHandIK) == 0x000000, "Member 'FFlameDirectParams::LeftHandIK' has a wrong offset!");
static_assert(offsetof(FFlameDirectParams, LeftHandIKFactor) == 0x00000C, "Member 'FFlameDirectParams::LeftHandIKFactor' has a wrong offset!");
static_assert(offsetof(FFlameDirectParams, WeaponOffset) == 0x000010, "Member 'FFlameDirectParams::WeaponOffset' has a wrong offset!");
static_assert(offsetof(FFlameDirectParams, WeaponRotation) == 0x00001C, "Member 'FFlameDirectParams::WeaponRotation' has a wrong offset!");
static_assert(offsetof(FFlameDirectParams, WeaponRotFactor) == 0x000028, "Member 'FFlameDirectParams::WeaponRotFactor' has a wrong offset!");

// ScriptStruct Flame.FlameDirectTransform
// 0x0448 (0x0510 - 0x00C8)
struct alignas(0x10) FFlameDirectTransform final : public FAnimNode_SkeletalControlBase
{
public:
	struct FBoneReference                         Weapon;                                            // 0x00C8(0x0010)(Edit, NoDestructor, NativeAccessSpecifierPublic)
	struct FBoneReference                         LeftHand;                                          // 0x00D8(0x0010)(Edit, NoDestructor, NativeAccessSpecifierPublic)
	struct FBoneReference                         RightHand;                                         // 0x00E8(0x0010)(Edit, NoDestructor, NativeAccessSpecifierPublic)
	struct FFlameDirectParams                     Runtime;                                           // 0x00F8(0x002C)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          Enabled;                                           // 0x0124(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_125[0x3];                                      // 0x0125(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         UnusedTweakingVar;                                 // 0x0128(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_12C[0x3E4];                                    // 0x012C(0x03E4)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FFlameDirectTransform) == 0x000010, "Wrong alignment on FFlameDirectTransform");
static_assert(sizeof(FFlameDirectTransform) == 0x000510, "Wrong size on FFlameDirectTransform");
static_assert(offsetof(FFlameDirectTransform, Weapon) == 0x0000C8, "Member 'FFlameDirectTransform::Weapon' has a wrong offset!");
static_assert(offsetof(FFlameDirectTransform, LeftHand) == 0x0000D8, "Member 'FFlameDirectTransform::LeftHand' has a wrong offset!");
static_assert(offsetof(FFlameDirectTransform, RightHand) == 0x0000E8, "Member 'FFlameDirectTransform::RightHand' has a wrong offset!");
static_assert(offsetof(FFlameDirectTransform, Runtime) == 0x0000F8, "Member 'FFlameDirectTransform::Runtime' has a wrong offset!");
static_assert(offsetof(FFlameDirectTransform, Enabled) == 0x000124, "Member 'FFlameDirectTransform::Enabled' has a wrong offset!");
static_assert(offsetof(FFlameDirectTransform, UnusedTweakingVar) == 0x000128, "Member 'FFlameDirectTransform::UnusedTweakingVar' has a wrong offset!");

// ScriptStruct Flame.LocalizedContent
// 0x0020 (0x0020 - 0x0000)
struct FLocalizedContent final
{
public:
	class FString                                 Title;                                             // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Content;                                           // 0x0010(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FLocalizedContent) == 0x000008, "Wrong alignment on FLocalizedContent");
static_assert(sizeof(FLocalizedContent) == 0x000020, "Wrong size on FLocalizedContent");
static_assert(offsetof(FLocalizedContent, Title) == 0x000000, "Member 'FLocalizedContent::Title' has a wrong offset!");
static_assert(offsetof(FLocalizedContent, Content) == 0x000010, "Member 'FLocalizedContent::Content' has a wrong offset!");

// ScriptStruct Flame.NewsDto
// 0x0098 (0x0098 - 0x0000)
struct FNewsDto final
{
public:
	class FString                                 ID;                                                // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FDateTime                              ValidSince;                                        // 0x0010(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FDateTime                              ValidUntil;                                        // 0x0018(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TMap<class FString, struct FLocalizedContent> LocalizedContent;                                  // 0x0020(0x0050)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	class FString                                 ImageUrl;                                          // 0x0070(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ReadMoreUrl;                                       // 0x0080(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ENewsFrequency                                Frequency;                                         // 0x0090(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_91[0x7];                                       // 0x0091(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FNewsDto) == 0x000008, "Wrong alignment on FNewsDto");
static_assert(sizeof(FNewsDto) == 0x000098, "Wrong size on FNewsDto");
static_assert(offsetof(FNewsDto, ID) == 0x000000, "Member 'FNewsDto::ID' has a wrong offset!");
static_assert(offsetof(FNewsDto, ValidSince) == 0x000010, "Member 'FNewsDto::ValidSince' has a wrong offset!");
static_assert(offsetof(FNewsDto, ValidUntil) == 0x000018, "Member 'FNewsDto::ValidUntil' has a wrong offset!");
static_assert(offsetof(FNewsDto, LocalizedContent) == 0x000020, "Member 'FNewsDto::LocalizedContent' has a wrong offset!");
static_assert(offsetof(FNewsDto, ImageUrl) == 0x000070, "Member 'FNewsDto::ImageUrl' has a wrong offset!");
static_assert(offsetof(FNewsDto, ReadMoreUrl) == 0x000080, "Member 'FNewsDto::ReadMoreUrl' has a wrong offset!");
static_assert(offsetof(FNewsDto, Frequency) == 0x000090, "Member 'FNewsDto::Frequency' has a wrong offset!");

// ScriptStruct Flame.CloudItemInfoList
// 0x0010 (0x0010 - 0x0000)
struct FCloudItemInfoList final
{
public:
	TArray<struct FCloudItemInfo>                 Items;                                             // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FCloudItemInfoList) == 0x000008, "Wrong alignment on FCloudItemInfoList");
static_assert(sizeof(FCloudItemInfoList) == 0x000010, "Wrong size on FCloudItemInfoList");
static_assert(offsetof(FCloudItemInfoList, Items) == 0x000000, "Member 'FCloudItemInfoList::Items' has a wrong offset!");

// ScriptStruct Flame.MapReward
// 0x0068 (0x0068 - 0x0000)
struct FMapReward final
{
public:
	class FString                                 Name;                                              // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EOnlineGameMode                               GameMode;                                          // 0x0010(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TMap<int32, struct FCloudItemInfoList>        RewardsPerBoostLevel;                              // 0x0018(0x0050)(BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
};
static_assert(alignof(FMapReward) == 0x000008, "Wrong alignment on FMapReward");
static_assert(sizeof(FMapReward) == 0x000068, "Wrong size on FMapReward");
static_assert(offsetof(FMapReward, Name) == 0x000000, "Member 'FMapReward::Name' has a wrong offset!");
static_assert(offsetof(FMapReward, GameMode) == 0x000010, "Member 'FMapReward::GameMode' has a wrong offset!");
static_assert(offsetof(FMapReward, RewardsPerBoostLevel) == 0x000018, "Member 'FMapReward::RewardsPerBoostLevel' has a wrong offset!");

// ScriptStruct Flame.CloudMapRewardsResult
// 0x0010 (0x0010 - 0x0000)
struct FCloudMapRewardsResult final
{
public:
	TArray<struct FMapReward>                     Rewards;                                           // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FCloudMapRewardsResult) == 0x000008, "Wrong alignment on FCloudMapRewardsResult");
static_assert(sizeof(FCloudMapRewardsResult) == 0x000010, "Wrong size on FCloudMapRewardsResult");
static_assert(offsetof(FCloudMapRewardsResult, Rewards) == 0x000000, "Member 'FCloudMapRewardsResult::Rewards' has a wrong offset!");

// ScriptStruct Flame.FluidAnimEvaluator
// 0x00D0 (0x0108 - 0x0038)
struct FFluidAnimEvaluator final : public FAnimNode_AssetPlayerBase
{
public:
	class UAnimSequenceBase*                      InputSequence;                                     // 0x0038(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bLoopAnimation;                                    // 0x0040(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_41[0x3];                                       // 0x0041(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         ExplicitTime;                                      // 0x0044(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         StartPosition;                                     // 0x0048(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         BlendSpeed;                                        // 0x004C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_50[0xB8];                                      // 0x0050(0x00B8)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FFluidAnimEvaluator) == 0x000008, "Wrong alignment on FFluidAnimEvaluator");
static_assert(sizeof(FFluidAnimEvaluator) == 0x000108, "Wrong size on FFluidAnimEvaluator");
static_assert(offsetof(FFluidAnimEvaluator, InputSequence) == 0x000038, "Member 'FFluidAnimEvaluator::InputSequence' has a wrong offset!");
static_assert(offsetof(FFluidAnimEvaluator, bLoopAnimation) == 0x000040, "Member 'FFluidAnimEvaluator::bLoopAnimation' has a wrong offset!");
static_assert(offsetof(FFluidAnimEvaluator, ExplicitTime) == 0x000044, "Member 'FFluidAnimEvaluator::ExplicitTime' has a wrong offset!");
static_assert(offsetof(FFluidAnimEvaluator, StartPosition) == 0x000048, "Member 'FFluidAnimEvaluator::StartPosition' has a wrong offset!");
static_assert(offsetof(FFluidAnimEvaluator, BlendSpeed) == 0x00004C, "Member 'FFluidAnimEvaluator::BlendSpeed' has a wrong offset!");

// ScriptStruct Flame.CloudUserCounterValue
// 0x000C (0x000C - 0x0000)
struct FCloudUserCounterValue final
{
public:
	class FName                                   CounterName;                                       // 0x0000(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Value;                                             // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FCloudUserCounterValue) == 0x000004, "Wrong alignment on FCloudUserCounterValue");
static_assert(sizeof(FCloudUserCounterValue) == 0x00000C, "Wrong size on FCloudUserCounterValue");
static_assert(offsetof(FCloudUserCounterValue, CounterName) == 0x000000, "Member 'FCloudUserCounterValue::CounterName' has a wrong offset!");
static_assert(offsetof(FCloudUserCounterValue, Value) == 0x000008, "Member 'FCloudUserCounterValue::Value' has a wrong offset!");

// ScriptStruct Flame.FluidAnimPlayer
// 0x0130 (0x0168 - 0x0038)
struct FFluidAnimPlayer final : public FAnimNode_AssetPlayerBase
{
public:
	class UAnimSequenceBase*                      Sequence;                                          // 0x0038(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bLoopAnimation;                                    // 0x0040(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_41[0x3];                                       // 0x0041(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         PlayRate;                                          // 0x0044(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         StartPosition;                                     // 0x0048(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         BlendSpeed;                                        // 0x004C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_50[0x118];                                     // 0x0050(0x0118)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FFluidAnimPlayer) == 0x000008, "Wrong alignment on FFluidAnimPlayer");
static_assert(sizeof(FFluidAnimPlayer) == 0x000168, "Wrong size on FFluidAnimPlayer");
static_assert(offsetof(FFluidAnimPlayer, Sequence) == 0x000038, "Member 'FFluidAnimPlayer::Sequence' has a wrong offset!");
static_assert(offsetof(FFluidAnimPlayer, bLoopAnimation) == 0x000040, "Member 'FFluidAnimPlayer::bLoopAnimation' has a wrong offset!");
static_assert(offsetof(FFluidAnimPlayer, PlayRate) == 0x000044, "Member 'FFluidAnimPlayer::PlayRate' has a wrong offset!");
static_assert(offsetof(FFluidAnimPlayer, StartPosition) == 0x000048, "Member 'FFluidAnimPlayer::StartPosition' has a wrong offset!");
static_assert(offsetof(FFluidAnimPlayer, BlendSpeed) == 0x00004C, "Member 'FFluidAnimPlayer::BlendSpeed' has a wrong offset!");

// ScriptStruct Flame.CloudClaimChallengeRequest
// 0x0020 (0x0020 - 0x0000)
struct FCloudClaimChallengeRequest final
{
public:
	class FName                                   ChallengeName;                                     // 0x0000(0x0008)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         SlotId;                                            // 0x0008(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 SlotCategory;                                      // 0x0010(0x0010)(BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FCloudClaimChallengeRequest) == 0x000008, "Wrong alignment on FCloudClaimChallengeRequest");
static_assert(sizeof(FCloudClaimChallengeRequest) == 0x000020, "Wrong size on FCloudClaimChallengeRequest");
static_assert(offsetof(FCloudClaimChallengeRequest, ChallengeName) == 0x000000, "Member 'FCloudClaimChallengeRequest::ChallengeName' has a wrong offset!");
static_assert(offsetof(FCloudClaimChallengeRequest, SlotId) == 0x000008, "Member 'FCloudClaimChallengeRequest::SlotId' has a wrong offset!");
static_assert(offsetof(FCloudClaimChallengeRequest, SlotCategory) == 0x000010, "Member 'FCloudClaimChallengeRequest::SlotCategory' has a wrong offset!");

// ScriptStruct Flame.FluidBlendSpacePlayer
// 0x02B8 (0x02F0 - 0x0038)
struct FFluidBlendSpacePlayer final : public FAnimNode_AssetPlayerBase
{
public:
	class UBlendSpaceBase*                        BlendSpace;                                        // 0x0038(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         XX;                                                // 0x0040(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         YY;                                                // 0x0044(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ZZ;                                                // 0x0048(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         BlendSpeed;                                        // 0x004C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          KeepUpdatingInputForPrevious;                      // 0x0050(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_51[0x3];                                       // 0x0051(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         PlayRate;                                          // 0x0054(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bLoop;                                             // 0x0058(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_59[0x3];                                       // 0x0059(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         StartPosition;                                     // 0x005C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FBlendFilter                           BlendFilter;                                       // 0x0060(0x0078)(Protected, NativeAccessSpecifierProtected)
	TArray<struct FBlendSampleData>               BlendSampleDataCache;                              // 0x00D8(0x0010)(ZeroConstructor, Protected, NativeAccessSpecifierProtected)
	uint8                                         Pad_E8[0x208];                                     // 0x00E8(0x0208)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FFluidBlendSpacePlayer) == 0x000008, "Wrong alignment on FFluidBlendSpacePlayer");
static_assert(sizeof(FFluidBlendSpacePlayer) == 0x0002F0, "Wrong size on FFluidBlendSpacePlayer");
static_assert(offsetof(FFluidBlendSpacePlayer, BlendSpace) == 0x000038, "Member 'FFluidBlendSpacePlayer::BlendSpace' has a wrong offset!");
static_assert(offsetof(FFluidBlendSpacePlayer, XX) == 0x000040, "Member 'FFluidBlendSpacePlayer::XX' has a wrong offset!");
static_assert(offsetof(FFluidBlendSpacePlayer, YY) == 0x000044, "Member 'FFluidBlendSpacePlayer::YY' has a wrong offset!");
static_assert(offsetof(FFluidBlendSpacePlayer, ZZ) == 0x000048, "Member 'FFluidBlendSpacePlayer::ZZ' has a wrong offset!");
static_assert(offsetof(FFluidBlendSpacePlayer, BlendSpeed) == 0x00004C, "Member 'FFluidBlendSpacePlayer::BlendSpeed' has a wrong offset!");
static_assert(offsetof(FFluidBlendSpacePlayer, KeepUpdatingInputForPrevious) == 0x000050, "Member 'FFluidBlendSpacePlayer::KeepUpdatingInputForPrevious' has a wrong offset!");
static_assert(offsetof(FFluidBlendSpacePlayer, PlayRate) == 0x000054, "Member 'FFluidBlendSpacePlayer::PlayRate' has a wrong offset!");
static_assert(offsetof(FFluidBlendSpacePlayer, bLoop) == 0x000058, "Member 'FFluidBlendSpacePlayer::bLoop' has a wrong offset!");
static_assert(offsetof(FFluidBlendSpacePlayer, StartPosition) == 0x00005C, "Member 'FFluidBlendSpacePlayer::StartPosition' has a wrong offset!");
static_assert(offsetof(FFluidBlendSpacePlayer, BlendFilter) == 0x000060, "Member 'FFluidBlendSpacePlayer::BlendFilter' has a wrong offset!");
static_assert(offsetof(FFluidBlendSpacePlayer, BlendSampleDataCache) == 0x0000D8, "Member 'FFluidBlendSpacePlayer::BlendSampleDataCache' has a wrong offset!");

// ScriptStruct Flame.CloudMatchSettingsInfo
// 0x0028 (0x0028 - 0x0000)
struct FCloudMatchSettingsInfo final
{
public:
	class FString                                 MatchID;                                           // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         LootBoostersActive;                                // 0x0010(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         LootBoxBoostersActive;                             // 0x0014(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FCloudUserLobbyInfo>            Players;                                           // 0x0018(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FCloudMatchSettingsInfo) == 0x000008, "Wrong alignment on FCloudMatchSettingsInfo");
static_assert(sizeof(FCloudMatchSettingsInfo) == 0x000028, "Wrong size on FCloudMatchSettingsInfo");
static_assert(offsetof(FCloudMatchSettingsInfo, MatchID) == 0x000000, "Member 'FCloudMatchSettingsInfo::MatchID' has a wrong offset!");
static_assert(offsetof(FCloudMatchSettingsInfo, LootBoostersActive) == 0x000010, "Member 'FCloudMatchSettingsInfo::LootBoostersActive' has a wrong offset!");
static_assert(offsetof(FCloudMatchSettingsInfo, LootBoxBoostersActive) == 0x000014, "Member 'FCloudMatchSettingsInfo::LootBoxBoostersActive' has a wrong offset!");
static_assert(offsetof(FCloudMatchSettingsInfo, Players) == 0x000018, "Member 'FCloudMatchSettingsInfo::Players' has a wrong offset!");

// ScriptStruct Flame.CloudLootSettings
// 0x0020 (0x0020 - 0x0000)
struct FCloudLootSettings final
{
public:
	TArray<struct FManagerCommodityDescriptor>    Commodities;                                       // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<class FString>                         MissingCommodities;                                // 0x0010(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FCloudLootSettings) == 0x000008, "Wrong alignment on FCloudLootSettings");
static_assert(sizeof(FCloudLootSettings) == 0x000020, "Wrong size on FCloudLootSettings");
static_assert(offsetof(FCloudLootSettings, Commodities) == 0x000000, "Member 'FCloudLootSettings::Commodities' has a wrong offset!");
static_assert(offsetof(FCloudLootSettings, MissingCommodities) == 0x000010, "Member 'FCloudLootSettings::MissingCommodities' has a wrong offset!");

// ScriptStruct Flame.CloudMatchCommitInfo
// 0x0048 (0x0048 - 0x0000)
struct FCloudMatchCommitInfo final
{
public:
	struct FCloudMatchSettingsInfo                MatchSettings;                                     // 0x0000(0x0028)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	struct FCloudLootSettings                     LootSettings;                                      // 0x0028(0x0020)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
};
static_assert(alignof(FCloudMatchCommitInfo) == 0x000008, "Wrong alignment on FCloudMatchCommitInfo");
static_assert(sizeof(FCloudMatchCommitInfo) == 0x000048, "Wrong size on FCloudMatchCommitInfo");
static_assert(offsetof(FCloudMatchCommitInfo, MatchSettings) == 0x000000, "Member 'FCloudMatchCommitInfo::MatchSettings' has a wrong offset!");
static_assert(offsetof(FCloudMatchCommitInfo, LootSettings) == 0x000028, "Member 'FCloudMatchCommitInfo::LootSettings' has a wrong offset!");

// ScriptStruct Flame.BattlePassEventInfo
// 0x0004 (0x0004 - 0x0000)
struct FBattlePassEventInfo final
{
public:
	int32                                         ExperienceAwarded;                                 // 0x0000(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FBattlePassEventInfo) == 0x000004, "Wrong alignment on FBattlePassEventInfo");
static_assert(sizeof(FBattlePassEventInfo) == 0x000004, "Wrong size on FBattlePassEventInfo");
static_assert(offsetof(FBattlePassEventInfo, ExperienceAwarded) == 0x000000, "Member 'FBattlePassEventInfo::ExperienceAwarded' has a wrong offset!");

// ScriptStruct Flame.GameplayEvent
// 0x0020 (0x0030 - 0x0010)
struct FGameplayEvent final : public FClassTableRow
{
public:
	class FText                                   Description;                                       // 0x0010(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NativeAccessSpecifierPublic)
	struct FBattlePassEventInfo                   BattlePassInfo;                                    // 0x0028(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_2C[0x4];                                       // 0x002C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FGameplayEvent) == 0x000008, "Wrong alignment on FGameplayEvent");
static_assert(sizeof(FGameplayEvent) == 0x000030, "Wrong size on FGameplayEvent");
static_assert(offsetof(FGameplayEvent, Description) == 0x000010, "Member 'FGameplayEvent::Description' has a wrong offset!");
static_assert(offsetof(FGameplayEvent, BattlePassInfo) == 0x000028, "Member 'FGameplayEvent::BattlePassInfo' has a wrong offset!");

// ScriptStruct Flame.ImprovementSlotInfo
// 0x0010 (0x0010 - 0x0000)
struct FImprovementSlotInfo final
{
public:
	TSubclassOf<class AShelterSlot>               SlotClass;                                         // 0x0000(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSubclassOf<class AShelterImprovement>        ImprovementClass;                                  // 0x0008(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FImprovementSlotInfo) == 0x000008, "Wrong alignment on FImprovementSlotInfo");
static_assert(sizeof(FImprovementSlotInfo) == 0x000010, "Wrong size on FImprovementSlotInfo");
static_assert(offsetof(FImprovementSlotInfo, SlotClass) == 0x000000, "Member 'FImprovementSlotInfo::SlotClass' has a wrong offset!");
static_assert(offsetof(FImprovementSlotInfo, ImprovementClass) == 0x000008, "Member 'FImprovementSlotInfo::ImprovementClass' has a wrong offset!");

// ScriptStruct Flame.ImprovementTextDescription
// 0x0018 (0x0018 - 0x0000)
struct FImprovementTextDescription final
{
public:
	class FText                                   Effect;                                            // 0x0000(0x0018)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
};
static_assert(alignof(FImprovementTextDescription) == 0x000008, "Wrong alignment on FImprovementTextDescription");
static_assert(sizeof(FImprovementTextDescription) == 0x000018, "Wrong size on FImprovementTextDescription");
static_assert(offsetof(FImprovementTextDescription, Effect) == 0x000000, "Member 'FImprovementTextDescription::Effect' has a wrong offset!");

// ScriptStruct Flame.ShelterImprovementInfo
// 0x0070 (0x0070 - 0x0000)
struct FShelterImprovementInfo final
{
public:
	TSubclassOf<class AShelterImprovement>        ImprovementClass;                                  // 0x0000(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSubclassOf<class AItem>                      GeneratedItemClass;                                // 0x0008(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EImprovementType                              ImprovementType;                                   // 0x0010(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x3];                                       // 0x0011(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Level;                                             // 0x0014(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FText                                   DisplayName;                                       // 0x0018(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	class FText                                   Description;                                       // 0x0030(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	struct FImprovementTextDescription            LevelDescription;                                  // 0x0048(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	float                                         GeneratorRatePerHour;                              // 0x0060(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         GeneratorRelativeRate;                             // 0x0064(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MinimumCollectionTimeSpanInSeconds;                // 0x0068(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_6C[0x4];                                       // 0x006C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FShelterImprovementInfo) == 0x000008, "Wrong alignment on FShelterImprovementInfo");
static_assert(sizeof(FShelterImprovementInfo) == 0x000070, "Wrong size on FShelterImprovementInfo");
static_assert(offsetof(FShelterImprovementInfo, ImprovementClass) == 0x000000, "Member 'FShelterImprovementInfo::ImprovementClass' has a wrong offset!");
static_assert(offsetof(FShelterImprovementInfo, GeneratedItemClass) == 0x000008, "Member 'FShelterImprovementInfo::GeneratedItemClass' has a wrong offset!");
static_assert(offsetof(FShelterImprovementInfo, ImprovementType) == 0x000010, "Member 'FShelterImprovementInfo::ImprovementType' has a wrong offset!");
static_assert(offsetof(FShelterImprovementInfo, Level) == 0x000014, "Member 'FShelterImprovementInfo::Level' has a wrong offset!");
static_assert(offsetof(FShelterImprovementInfo, DisplayName) == 0x000018, "Member 'FShelterImprovementInfo::DisplayName' has a wrong offset!");
static_assert(offsetof(FShelterImprovementInfo, Description) == 0x000030, "Member 'FShelterImprovementInfo::Description' has a wrong offset!");
static_assert(offsetof(FShelterImprovementInfo, LevelDescription) == 0x000048, "Member 'FShelterImprovementInfo::LevelDescription' has a wrong offset!");
static_assert(offsetof(FShelterImprovementInfo, GeneratorRatePerHour) == 0x000060, "Member 'FShelterImprovementInfo::GeneratorRatePerHour' has a wrong offset!");
static_assert(offsetof(FShelterImprovementInfo, GeneratorRelativeRate) == 0x000064, "Member 'FShelterImprovementInfo::GeneratorRelativeRate' has a wrong offset!");
static_assert(offsetof(FShelterImprovementInfo, MinimumCollectionTimeSpanInSeconds) == 0x000068, "Member 'FShelterImprovementInfo::MinimumCollectionTimeSpanInSeconds' has a wrong offset!");

// ScriptStruct Flame.CloudGetMatchLoadoutsRequest
// 0x0018 (0x0018 - 0x0000)
struct FCloudGetMatchLoadoutsRequest final
{
public:
	EOnlineGameMode                               GameMode;                                          // 0x0000(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 Map;                                               // 0x0008(0x0010)(BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FCloudGetMatchLoadoutsRequest) == 0x000008, "Wrong alignment on FCloudGetMatchLoadoutsRequest");
static_assert(sizeof(FCloudGetMatchLoadoutsRequest) == 0x000018, "Wrong size on FCloudGetMatchLoadoutsRequest");
static_assert(offsetof(FCloudGetMatchLoadoutsRequest, GameMode) == 0x000000, "Member 'FCloudGetMatchLoadoutsRequest::GameMode' has a wrong offset!");
static_assert(offsetof(FCloudGetMatchLoadoutsRequest, Map) == 0x000008, "Member 'FCloudGetMatchLoadoutsRequest::Map' has a wrong offset!");

// ScriptStruct Flame.CloudMatchLoadouts
// 0x0038 (0x0038 - 0x0000)
struct FCloudMatchLoadouts final
{
public:
	struct FCloudLoadout                          Loadout;                                           // 0x0000(0x0028)(BlueprintVisible, NativeAccessSpecifierPublic)
	TArray<struct FCloudMatchLootbox>             LootBoxes;                                         // 0x0028(0x0010)(BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FCloudMatchLoadouts) == 0x000008, "Wrong alignment on FCloudMatchLoadouts");
static_assert(sizeof(FCloudMatchLoadouts) == 0x000038, "Wrong size on FCloudMatchLoadouts");
static_assert(offsetof(FCloudMatchLoadouts, Loadout) == 0x000000, "Member 'FCloudMatchLoadouts::Loadout' has a wrong offset!");
static_assert(offsetof(FCloudMatchLoadouts, LootBoxes) == 0x000028, "Member 'FCloudMatchLoadouts::LootBoxes' has a wrong offset!");

// ScriptStruct Flame.CharacterWeaponSway
// 0x00A0 (0x00A0 - 0x0000)
struct alignas(0x10) FCharacterWeaponSway final
{
public:
	uint8                                         Pad_0[0x30];                                       // 0x0000(0x0030)(Fixing Size After Last Property [ Dumper-7 ])
	class AHumanPlayerCharacter*                  Character;                                         // 0x0030(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class AWeapon*                                CurrentWeapon;                                     // 0x0038(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_40[0x60];                                      // 0x0040(0x0060)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FCharacterWeaponSway) == 0x000010, "Wrong alignment on FCharacterWeaponSway");
static_assert(sizeof(FCharacterWeaponSway) == 0x0000A0, "Wrong size on FCharacterWeaponSway");
static_assert(offsetof(FCharacterWeaponSway, Character) == 0x000030, "Member 'FCharacterWeaponSway::Character' has a wrong offset!");
static_assert(offsetof(FCharacterWeaponSway, CurrentWeapon) == 0x000038, "Member 'FCharacterWeaponSway::CurrentWeapon' has a wrong offset!");

// ScriptStruct Flame.ImprovementList
// 0x00A0 (0x00E0 - 0x0040)
struct FImprovementList final : public FClassTableRowWithDisplayName
{
public:
	TSubclassOf<class AShelterImprovement>        Class;                                             // 0x0040(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EImprovementType                              ImprovementType;                                   // 0x0048(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_49[0x7];                                       // 0x0049(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   CurrentLevelDescriptionFormat;                     // 0x0050(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NativeAccessSpecifierPublic)
	class FText                                   NextLevelDescriptionFormat;                        // 0x0068(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NativeAccessSpecifierPublic)
	class FString                                 DescriptionValueFormat;                            // 0x0080(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TMap<int32, struct FImprovementTextDescription> LevelDescription;                                  // 0x0090(0x0050)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NativeAccessSpecifierPublic)
};
static_assert(alignof(FImprovementList) == 0x000008, "Wrong alignment on FImprovementList");
static_assert(sizeof(FImprovementList) == 0x0000E0, "Wrong size on FImprovementList");
static_assert(offsetof(FImprovementList, Class) == 0x000040, "Member 'FImprovementList::Class' has a wrong offset!");
static_assert(offsetof(FImprovementList, ImprovementType) == 0x000048, "Member 'FImprovementList::ImprovementType' has a wrong offset!");
static_assert(offsetof(FImprovementList, CurrentLevelDescriptionFormat) == 0x000050, "Member 'FImprovementList::CurrentLevelDescriptionFormat' has a wrong offset!");
static_assert(offsetof(FImprovementList, NextLevelDescriptionFormat) == 0x000068, "Member 'FImprovementList::NextLevelDescriptionFormat' has a wrong offset!");
static_assert(offsetof(FImprovementList, DescriptionValueFormat) == 0x000080, "Member 'FImprovementList::DescriptionValueFormat' has a wrong offset!");
static_assert(offsetof(FImprovementList, LevelDescription) == 0x000090, "Member 'FImprovementList::LevelDescription' has a wrong offset!");

// ScriptStruct Flame.InactivePlayerInfo
// 0x0048 (0x0048 - 0x0000)
struct FInactivePlayerInfo final
{
public:
	struct FUniqueNetIdRepl                       UniqueNetId;                                       // 0x0000(0x0028)(BlueprintVisible, BlueprintReadOnly, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         PlayerId;                                          // 0x0028(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2C[0x4];                                       // 0x002C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 NickName;                                          // 0x0030(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EFlamePlatform                                Platform;                                          // 0x0040(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_41[0x7];                                       // 0x0041(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FInactivePlayerInfo) == 0x000008, "Wrong alignment on FInactivePlayerInfo");
static_assert(sizeof(FInactivePlayerInfo) == 0x000048, "Wrong size on FInactivePlayerInfo");
static_assert(offsetof(FInactivePlayerInfo, UniqueNetId) == 0x000000, "Member 'FInactivePlayerInfo::UniqueNetId' has a wrong offset!");
static_assert(offsetof(FInactivePlayerInfo, PlayerId) == 0x000028, "Member 'FInactivePlayerInfo::PlayerId' has a wrong offset!");
static_assert(offsetof(FInactivePlayerInfo, NickName) == 0x000030, "Member 'FInactivePlayerInfo::NickName' has a wrong offset!");
static_assert(offsetof(FInactivePlayerInfo, Platform) == 0x000040, "Member 'FInactivePlayerInfo::Platform' has a wrong offset!");

// ScriptStruct Flame.CloudUserMatchesStatistic
// 0x000C (0x000C - 0x0000)
struct FCloudUserMatchesStatistic final
{
public:
	int32                                         Won;                                               // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Died;                                              // 0x0004(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Retreated;                                         // 0x0008(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FCloudUserMatchesStatistic) == 0x000004, "Wrong alignment on FCloudUserMatchesStatistic");
static_assert(sizeof(FCloudUserMatchesStatistic) == 0x00000C, "Wrong size on FCloudUserMatchesStatistic");
static_assert(offsetof(FCloudUserMatchesStatistic, Won) == 0x000000, "Member 'FCloudUserMatchesStatistic::Won' has a wrong offset!");
static_assert(offsetof(FCloudUserMatchesStatistic, Died) == 0x000004, "Member 'FCloudUserMatchesStatistic::Died' has a wrong offset!");
static_assert(offsetof(FCloudUserMatchesStatistic, Retreated) == 0x000008, "Member 'FCloudUserMatchesStatistic::Retreated' has a wrong offset!");

// ScriptStruct Flame.ShelterSlotInfo
// 0x000C (0x000C - 0x0000)
struct FShelterSlotInfo final
{
public:
	bool                                          bLocked;                                           // 0x0000(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Level;                                             // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EShelterSlotState                             State;                                             // 0x0008(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FShelterSlotInfo) == 0x000004, "Wrong alignment on FShelterSlotInfo");
static_assert(sizeof(FShelterSlotInfo) == 0x00000C, "Wrong size on FShelterSlotInfo");
static_assert(offsetof(FShelterSlotInfo, bLocked) == 0x000000, "Member 'FShelterSlotInfo::bLocked' has a wrong offset!");
static_assert(offsetof(FShelterSlotInfo, Level) == 0x000004, "Member 'FShelterSlotInfo::Level' has a wrong offset!");
static_assert(offsetof(FShelterSlotInfo, State) == 0x000008, "Member 'FShelterSlotInfo::State' has a wrong offset!");

// ScriptStruct Flame.UserMatchInfo
// 0x00F0 (0x00F0 - 0x0000)
struct FUserMatchInfo final
{
public:
	struct FUserMatchInfoStats                    Stats;                                             // 0x0000(0x0060)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	bool                                          IsThreat;                                          // 0x0060(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsTeamKiller;                                      // 0x0061(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_62[0x6];                                       // 0x0062(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	struct FLoadoutInfo                           PlayerLoadout;                                     // 0x0068(0x0028)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	TArray<class FString>                         Rewards;                                           // 0x0090(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	struct FKillerUserInfo                        KillerInfo;                                        // 0x00A0(0x0040)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	TArray<struct FCloudBattlePassMatchEventInfo> MatchEvents;                                       // 0x00E0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FUserMatchInfo) == 0x000008, "Wrong alignment on FUserMatchInfo");
static_assert(sizeof(FUserMatchInfo) == 0x0000F0, "Wrong size on FUserMatchInfo");
static_assert(offsetof(FUserMatchInfo, Stats) == 0x000000, "Member 'FUserMatchInfo::Stats' has a wrong offset!");
static_assert(offsetof(FUserMatchInfo, IsThreat) == 0x000060, "Member 'FUserMatchInfo::IsThreat' has a wrong offset!");
static_assert(offsetof(FUserMatchInfo, IsTeamKiller) == 0x000061, "Member 'FUserMatchInfo::IsTeamKiller' has a wrong offset!");
static_assert(offsetof(FUserMatchInfo, PlayerLoadout) == 0x000068, "Member 'FUserMatchInfo::PlayerLoadout' has a wrong offset!");
static_assert(offsetof(FUserMatchInfo, Rewards) == 0x000090, "Member 'FUserMatchInfo::Rewards' has a wrong offset!");
static_assert(offsetof(FUserMatchInfo, KillerInfo) == 0x0000A0, "Member 'FUserMatchInfo::KillerInfo' has a wrong offset!");
static_assert(offsetof(FUserMatchInfo, MatchEvents) == 0x0000E0, "Member 'FUserMatchInfo::MatchEvents' has a wrong offset!");

// ScriptStruct Flame.SpectatorOldCharacter
// 0x0010 (0x0010 - 0x0000)
struct FSpectatorOldCharacter final
{
public:
	class APawn*                                  Pawn;                                              // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AController*                            Controller;                                        // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSpectatorOldCharacter) == 0x000008, "Wrong alignment on FSpectatorOldCharacter");
static_assert(sizeof(FSpectatorOldCharacter) == 0x000010, "Wrong size on FSpectatorOldCharacter");
static_assert(offsetof(FSpectatorOldCharacter, Pawn) == 0x000000, "Member 'FSpectatorOldCharacter::Pawn' has a wrong offset!");
static_assert(offsetof(FSpectatorOldCharacter, Controller) == 0x000008, "Member 'FSpectatorOldCharacter::Controller' has a wrong offset!");

// ScriptStruct Flame.Rewards
// 0x0018 (0x0018 - 0x0000)
struct FRewards final
{
public:
	int32                                         Count;                                             // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 Name;                                              // 0x0008(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FRewards) == 0x000008, "Wrong alignment on FRewards");
static_assert(sizeof(FRewards) == 0x000018, "Wrong size on FRewards");
static_assert(offsetof(FRewards, Count) == 0x000000, "Member 'FRewards::Count' has a wrong offset!");
static_assert(offsetof(FRewards, Name) == 0x000008, "Member 'FRewards::Name' has a wrong offset!");

// ScriptStruct Flame.UserMatchReward
// 0x0010 (0x0010 - 0x0000)
struct FUserMatchReward final
{
public:
	TArray<struct FRewards>                       AwardedItems;                                      // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FUserMatchReward) == 0x000008, "Wrong alignment on FUserMatchReward");
static_assert(sizeof(FUserMatchReward) == 0x000010, "Wrong size on FUserMatchReward");
static_assert(offsetof(FUserMatchReward, AwardedItems) == 0x000000, "Member 'FUserMatchReward::AwardedItems' has a wrong offset!");

// ScriptStruct Flame.AnimActionPars
// 0x0028 (0x0028 - 0x0000)
struct FAnimActionPars final
{
public:
	class UAnimSequence*                          Start;                                             // 0x0000(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAnimSequence*                          Loop;                                              // 0x0008(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAnimSequence*                          LoopBack;                                          // 0x0010(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAnimSequence*                          End;                                               // 0x0018(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EAnimActionState                              ActionState;                                       // 0x0020(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Looped;                                            // 0x0024(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_25[0x3];                                       // 0x0025(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FAnimActionPars) == 0x000008, "Wrong alignment on FAnimActionPars");
static_assert(sizeof(FAnimActionPars) == 0x000028, "Wrong size on FAnimActionPars");
static_assert(offsetof(FAnimActionPars, Start) == 0x000000, "Member 'FAnimActionPars::Start' has a wrong offset!");
static_assert(offsetof(FAnimActionPars, Loop) == 0x000008, "Member 'FAnimActionPars::Loop' has a wrong offset!");
static_assert(offsetof(FAnimActionPars, LoopBack) == 0x000010, "Member 'FAnimActionPars::LoopBack' has a wrong offset!");
static_assert(offsetof(FAnimActionPars, End) == 0x000018, "Member 'FAnimActionPars::End' has a wrong offset!");
static_assert(offsetof(FAnimActionPars, ActionState) == 0x000020, "Member 'FAnimActionPars::ActionState' has a wrong offset!");
static_assert(offsetof(FAnimActionPars, Looped) == 0x000024, "Member 'FAnimActionPars::Looped' has a wrong offset!");

// ScriptStruct Flame.CloudClaimOnboardingLoginRewardsResult
// 0x0020 (0x0020 - 0x0000)
struct FCloudClaimOnboardingLoginRewardsResult final
{
public:
	struct FCloudItemInfoList                     Rewards;                                           // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	TArray<struct FCloudOperation>                Operations;                                        // 0x0010(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FCloudClaimOnboardingLoginRewardsResult) == 0x000008, "Wrong alignment on FCloudClaimOnboardingLoginRewardsResult");
static_assert(sizeof(FCloudClaimOnboardingLoginRewardsResult) == 0x000020, "Wrong size on FCloudClaimOnboardingLoginRewardsResult");
static_assert(offsetof(FCloudClaimOnboardingLoginRewardsResult, Rewards) == 0x000000, "Member 'FCloudClaimOnboardingLoginRewardsResult::Rewards' has a wrong offset!");
static_assert(offsetof(FCloudClaimOnboardingLoginRewardsResult, Operations) == 0x000010, "Member 'FCloudClaimOnboardingLoginRewardsResult::Operations' has a wrong offset!");

// ScriptStruct Flame.AccelerationDef
// 0x000C (0x000C - 0x0000)
struct FAccelerationDef final
{
public:
	float                                         Regular;                                           // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Aimed;                                             // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         WaterModifier;                                     // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAccelerationDef) == 0x000004, "Wrong alignment on FAccelerationDef");
static_assert(sizeof(FAccelerationDef) == 0x00000C, "Wrong size on FAccelerationDef");
static_assert(offsetof(FAccelerationDef, Regular) == 0x000000, "Member 'FAccelerationDef::Regular' has a wrong offset!");
static_assert(offsetof(FAccelerationDef, Aimed) == 0x000004, "Member 'FAccelerationDef::Aimed' has a wrong offset!");
static_assert(offsetof(FAccelerationDef, WaterModifier) == 0x000008, "Member 'FAccelerationDef::WaterModifier' has a wrong offset!");

// ScriptStruct Flame.RecoilParameters
// 0x0038 (0x0038 - 0x0000)
struct FRecoilParameters final
{
public:
	float                                         RandomHorizontalRecoil;                            // 0x0000(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         AbsoluteVerticalRecoil;                            // 0x0004(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         RecoilDisplacementSpeed;                           // 0x0008(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         CenterMultiplierStand;                             // 0x000C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         CenterMultiplierCrouch;                            // 0x0010(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         CenterMultiplierProne;                             // 0x0014(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<float>                                 Multiplicators;                                    // 0x0018(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	float                                         ReturnSpeed;                                       // 0x0028(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2C[0x4];                                       // 0x002C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TSubclassOf<class UCameraShakeBase>           FireCameraShakeClass;                              // 0x0030(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FRecoilParameters) == 0x000008, "Wrong alignment on FRecoilParameters");
static_assert(sizeof(FRecoilParameters) == 0x000038, "Wrong size on FRecoilParameters");
static_assert(offsetof(FRecoilParameters, RandomHorizontalRecoil) == 0x000000, "Member 'FRecoilParameters::RandomHorizontalRecoil' has a wrong offset!");
static_assert(offsetof(FRecoilParameters, AbsoluteVerticalRecoil) == 0x000004, "Member 'FRecoilParameters::AbsoluteVerticalRecoil' has a wrong offset!");
static_assert(offsetof(FRecoilParameters, RecoilDisplacementSpeed) == 0x000008, "Member 'FRecoilParameters::RecoilDisplacementSpeed' has a wrong offset!");
static_assert(offsetof(FRecoilParameters, CenterMultiplierStand) == 0x00000C, "Member 'FRecoilParameters::CenterMultiplierStand' has a wrong offset!");
static_assert(offsetof(FRecoilParameters, CenterMultiplierCrouch) == 0x000010, "Member 'FRecoilParameters::CenterMultiplierCrouch' has a wrong offset!");
static_assert(offsetof(FRecoilParameters, CenterMultiplierProne) == 0x000014, "Member 'FRecoilParameters::CenterMultiplierProne' has a wrong offset!");
static_assert(offsetof(FRecoilParameters, Multiplicators) == 0x000018, "Member 'FRecoilParameters::Multiplicators' has a wrong offset!");
static_assert(offsetof(FRecoilParameters, ReturnSpeed) == 0x000028, "Member 'FRecoilParameters::ReturnSpeed' has a wrong offset!");
static_assert(offsetof(FRecoilParameters, FireCameraShakeClass) == 0x000030, "Member 'FRecoilParameters::FireCameraShakeClass' has a wrong offset!");

// ScriptStruct Flame.CloudGetOnboardingLoginRewardsResult
// 0x0060 (0x0060 - 0x0000)
struct FCloudGetOnboardingLoginRewardsResult final
{
public:
	TMap<int32, struct FCloudItemInfoList>        RewardsPerDay;                                     // 0x0000(0x0050)(BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	TArray<struct FDateTime>                      ClaimTimes;                                        // 0x0050(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FCloudGetOnboardingLoginRewardsResult) == 0x000008, "Wrong alignment on FCloudGetOnboardingLoginRewardsResult");
static_assert(sizeof(FCloudGetOnboardingLoginRewardsResult) == 0x000060, "Wrong size on FCloudGetOnboardingLoginRewardsResult");
static_assert(offsetof(FCloudGetOnboardingLoginRewardsResult, RewardsPerDay) == 0x000000, "Member 'FCloudGetOnboardingLoginRewardsResult::RewardsPerDay' has a wrong offset!");
static_assert(offsetof(FCloudGetOnboardingLoginRewardsResult, ClaimTimes) == 0x000050, "Member 'FCloudGetOnboardingLoginRewardsResult::ClaimTimes' has a wrong offset!");

// ScriptStruct Flame.BasicAimingSet
// 0x0018 (0x0018 - 0x0000)
struct FBasicAimingSet final
{
public:
	class UBlendSpace*                            Rifle;                                             // 0x0000(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UBlendSpace*                            Handgun;                                           // 0x0008(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UBlendSpace*                            Prone360;                                          // 0x0010(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FBasicAimingSet) == 0x000008, "Wrong alignment on FBasicAimingSet");
static_assert(sizeof(FBasicAimingSet) == 0x000018, "Wrong size on FBasicAimingSet");
static_assert(offsetof(FBasicAimingSet, Rifle) == 0x000000, "Member 'FBasicAimingSet::Rifle' has a wrong offset!");
static_assert(offsetof(FBasicAimingSet, Handgun) == 0x000008, "Member 'FBasicAimingSet::Handgun' has a wrong offset!");
static_assert(offsetof(FBasicAimingSet, Prone360) == 0x000010, "Member 'FBasicAimingSet::Prone360' has a wrong offset!");

// ScriptStruct Flame.CloudGetRawDataAllUsersResult
// 0x0010 (0x0010 - 0x0000)
struct FCloudGetRawDataAllUsersResult final
{
public:
	TArray<struct FCloudRawDataInfo>              Data;                                              // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FCloudGetRawDataAllUsersResult) == 0x000008, "Wrong alignment on FCloudGetRawDataAllUsersResult");
static_assert(sizeof(FCloudGetRawDataAllUsersResult) == 0x000010, "Wrong size on FCloudGetRawDataAllUsersResult");
static_assert(offsetof(FCloudGetRawDataAllUsersResult, Data) == 0x000000, "Member 'FCloudGetRawDataAllUsersResult::Data' has a wrong offset!");

// ScriptStruct Flame.RiverSplinePointDimensions
// 0x0018 (0x0018 - 0x0000)
struct FRiverSplinePointDimensions final
{
public:
	float                                         PointOffset;                                       // 0x0000(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         PointWidth;                                        // 0x0004(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         PointDepth;                                        // 0x0008(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                PointScale;                                        // 0x000C(0x000C)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FRiverSplinePointDimensions) == 0x000004, "Wrong alignment on FRiverSplinePointDimensions");
static_assert(sizeof(FRiverSplinePointDimensions) == 0x000018, "Wrong size on FRiverSplinePointDimensions");
static_assert(offsetof(FRiverSplinePointDimensions, PointOffset) == 0x000000, "Member 'FRiverSplinePointDimensions::PointOffset' has a wrong offset!");
static_assert(offsetof(FRiverSplinePointDimensions, PointWidth) == 0x000004, "Member 'FRiverSplinePointDimensions::PointWidth' has a wrong offset!");
static_assert(offsetof(FRiverSplinePointDimensions, PointDepth) == 0x000008, "Member 'FRiverSplinePointDimensions::PointDepth' has a wrong offset!");
static_assert(offsetof(FRiverSplinePointDimensions, PointScale) == 0x00000C, "Member 'FRiverSplinePointDimensions::PointScale' has a wrong offset!");

// ScriptStruct Flame.CloudGetRawDataAllUsersOrderedResult
// 0x0030 (0x0030 - 0x0000)
struct FCloudGetRawDataAllUsersOrderedResult final
{
public:
	class FString                                 SortValue;                                         // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EGetAllRawDataOrder                           Order;                                             // 0x0010(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x3];                                       // 0x0011(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         PageIndex;                                         // 0x0014(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         PageSize;                                          // 0x0018(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FCloudRawDataInfo>              Data;                                              // 0x0020(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FCloudGetRawDataAllUsersOrderedResult) == 0x000008, "Wrong alignment on FCloudGetRawDataAllUsersOrderedResult");
static_assert(sizeof(FCloudGetRawDataAllUsersOrderedResult) == 0x000030, "Wrong size on FCloudGetRawDataAllUsersOrderedResult");
static_assert(offsetof(FCloudGetRawDataAllUsersOrderedResult, SortValue) == 0x000000, "Member 'FCloudGetRawDataAllUsersOrderedResult::SortValue' has a wrong offset!");
static_assert(offsetof(FCloudGetRawDataAllUsersOrderedResult, Order) == 0x000010, "Member 'FCloudGetRawDataAllUsersOrderedResult::Order' has a wrong offset!");
static_assert(offsetof(FCloudGetRawDataAllUsersOrderedResult, PageIndex) == 0x000014, "Member 'FCloudGetRawDataAllUsersOrderedResult::PageIndex' has a wrong offset!");
static_assert(offsetof(FCloudGetRawDataAllUsersOrderedResult, PageSize) == 0x000018, "Member 'FCloudGetRawDataAllUsersOrderedResult::PageSize' has a wrong offset!");
static_assert(offsetof(FCloudGetRawDataAllUsersOrderedResult, Data) == 0x000020, "Member 'FCloudGetRawDataAllUsersOrderedResult::Data' has a wrong offset!");

// ScriptStruct Flame.ClientHit
// 0x0030 (0x0030 - 0x0000)
struct FClientHit final
{
public:
	float                                         DeltaTime;                                         // 0x0000(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                StartLocation;                                     // 0x0004(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                Direction;                                         // 0x0010(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         InitialSpeed;                                      // 0x001C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Gravity;                                           // 0x0020(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         AmmoDrop;                                          // 0x0024(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         AmmoLife;                                          // 0x0028(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Damage;                                            // 0x002C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FClientHit) == 0x000004, "Wrong alignment on FClientHit");
static_assert(sizeof(FClientHit) == 0x000030, "Wrong size on FClientHit");
static_assert(offsetof(FClientHit, DeltaTime) == 0x000000, "Member 'FClientHit::DeltaTime' has a wrong offset!");
static_assert(offsetof(FClientHit, StartLocation) == 0x000004, "Member 'FClientHit::StartLocation' has a wrong offset!");
static_assert(offsetof(FClientHit, Direction) == 0x000010, "Member 'FClientHit::Direction' has a wrong offset!");
static_assert(offsetof(FClientHit, InitialSpeed) == 0x00001C, "Member 'FClientHit::InitialSpeed' has a wrong offset!");
static_assert(offsetof(FClientHit, Gravity) == 0x000020, "Member 'FClientHit::Gravity' has a wrong offset!");
static_assert(offsetof(FClientHit, AmmoDrop) == 0x000024, "Member 'FClientHit::AmmoDrop' has a wrong offset!");
static_assert(offsetof(FClientHit, AmmoLife) == 0x000028, "Member 'FClientHit::AmmoLife' has a wrong offset!");
static_assert(offsetof(FClientHit, Damage) == 0x00002C, "Member 'FClientHit::Damage' has a wrong offset!");

// ScriptStruct Flame.GhostFireHitParams
// 0x0190 (0x0190 - 0x0000)
struct FGhostFireHitParams final
{
public:
	float                                         ElapsedSeconds;                                    // 0x0000(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class AHumanCharacter*                        FireActor;                                         // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AHumanCharacter*                        HitActor;                                          // 0x0010(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AWeapon*                                Weapon;                                            // 0x0018(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                Location;                                          // 0x0020(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                Direction;                                         // 0x002C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FClientHit                             HitInfo;                                           // 0x0038(0x0030)(NoDestructor, NativeAccessSpecifierPublic)
	TSubclassOf<class AItem>                      BulletType;                                        // 0x0068(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FHitResult                             HitResult;                                         // 0x0070(0x008C)(IsPlainOldData, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
	struct FHitResultSimplified                   HitOptimised;                                      // 0x00FC(0x003C)(NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
	bool                                          IsPenetrating;                                     // 0x0138(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsDeformed;                                        // 0x0139(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_13A[0x2];                                      // 0x013A(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Damage;                                            // 0x013C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         CharacterVersion;                                  // 0x0140(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                InitialDirection;                                  // 0x0144(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                InitialPosition;                                   // 0x0150(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                TraceDatumStart;                                   // 0x015C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                TraceDatumEnd;                                     // 0x0168(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                FirePositionRaw;                                   // 0x0174(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                FireDirectionRaw;                                  // 0x0180(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TraceTimeLived;                                    // 0x018C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FGhostFireHitParams) == 0x000008, "Wrong alignment on FGhostFireHitParams");
static_assert(sizeof(FGhostFireHitParams) == 0x000190, "Wrong size on FGhostFireHitParams");
static_assert(offsetof(FGhostFireHitParams, ElapsedSeconds) == 0x000000, "Member 'FGhostFireHitParams::ElapsedSeconds' has a wrong offset!");
static_assert(offsetof(FGhostFireHitParams, FireActor) == 0x000008, "Member 'FGhostFireHitParams::FireActor' has a wrong offset!");
static_assert(offsetof(FGhostFireHitParams, HitActor) == 0x000010, "Member 'FGhostFireHitParams::HitActor' has a wrong offset!");
static_assert(offsetof(FGhostFireHitParams, Weapon) == 0x000018, "Member 'FGhostFireHitParams::Weapon' has a wrong offset!");
static_assert(offsetof(FGhostFireHitParams, Location) == 0x000020, "Member 'FGhostFireHitParams::Location' has a wrong offset!");
static_assert(offsetof(FGhostFireHitParams, Direction) == 0x00002C, "Member 'FGhostFireHitParams::Direction' has a wrong offset!");
static_assert(offsetof(FGhostFireHitParams, HitInfo) == 0x000038, "Member 'FGhostFireHitParams::HitInfo' has a wrong offset!");
static_assert(offsetof(FGhostFireHitParams, BulletType) == 0x000068, "Member 'FGhostFireHitParams::BulletType' has a wrong offset!");
static_assert(offsetof(FGhostFireHitParams, HitResult) == 0x000070, "Member 'FGhostFireHitParams::HitResult' has a wrong offset!");
static_assert(offsetof(FGhostFireHitParams, HitOptimised) == 0x0000FC, "Member 'FGhostFireHitParams::HitOptimised' has a wrong offset!");
static_assert(offsetof(FGhostFireHitParams, IsPenetrating) == 0x000138, "Member 'FGhostFireHitParams::IsPenetrating' has a wrong offset!");
static_assert(offsetof(FGhostFireHitParams, IsDeformed) == 0x000139, "Member 'FGhostFireHitParams::IsDeformed' has a wrong offset!");
static_assert(offsetof(FGhostFireHitParams, Damage) == 0x00013C, "Member 'FGhostFireHitParams::Damage' has a wrong offset!");
static_assert(offsetof(FGhostFireHitParams, CharacterVersion) == 0x000140, "Member 'FGhostFireHitParams::CharacterVersion' has a wrong offset!");
static_assert(offsetof(FGhostFireHitParams, InitialDirection) == 0x000144, "Member 'FGhostFireHitParams::InitialDirection' has a wrong offset!");
static_assert(offsetof(FGhostFireHitParams, InitialPosition) == 0x000150, "Member 'FGhostFireHitParams::InitialPosition' has a wrong offset!");
static_assert(offsetof(FGhostFireHitParams, TraceDatumStart) == 0x00015C, "Member 'FGhostFireHitParams::TraceDatumStart' has a wrong offset!");
static_assert(offsetof(FGhostFireHitParams, TraceDatumEnd) == 0x000168, "Member 'FGhostFireHitParams::TraceDatumEnd' has a wrong offset!");
static_assert(offsetof(FGhostFireHitParams, FirePositionRaw) == 0x000174, "Member 'FGhostFireHitParams::FirePositionRaw' has a wrong offset!");
static_assert(offsetof(FGhostFireHitParams, FireDirectionRaw) == 0x000180, "Member 'FGhostFireHitParams::FireDirectionRaw' has a wrong offset!");
static_assert(offsetof(FGhostFireHitParams, TraceTimeLived) == 0x00018C, "Member 'FGhostFireHitParams::TraceTimeLived' has a wrong offset!");

// ScriptStruct Flame.CloudGetRawDataKeyResult
// 0x0050 (0x0050 - 0x0000)
struct FCloudGetRawDataKeyResult final
{
public:
	struct FCloudRawDataInfo                      Data;                                              // 0x0000(0x0050)(BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
};
static_assert(alignof(FCloudGetRawDataKeyResult) == 0x000008, "Wrong alignment on FCloudGetRawDataKeyResult");
static_assert(sizeof(FCloudGetRawDataKeyResult) == 0x000050, "Wrong size on FCloudGetRawDataKeyResult");
static_assert(offsetof(FCloudGetRawDataKeyResult, Data) == 0x000000, "Member 'FCloudGetRawDataKeyResult::Data' has a wrong offset!");

// ScriptStruct Flame.StanceChangeEffectParameters
// 0x000C (0x000C - 0x0000)
struct FStanceChangeEffectParameters final
{
public:
	float                                         SpeedMultiplier;                                   // 0x0000(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SpeedDuration;                                     // 0x0004(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DelayBeforeAllowingStance;                         // 0x0008(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FStanceChangeEffectParameters) == 0x000004, "Wrong alignment on FStanceChangeEffectParameters");
static_assert(sizeof(FStanceChangeEffectParameters) == 0x00000C, "Wrong size on FStanceChangeEffectParameters");
static_assert(offsetof(FStanceChangeEffectParameters, SpeedMultiplier) == 0x000000, "Member 'FStanceChangeEffectParameters::SpeedMultiplier' has a wrong offset!");
static_assert(offsetof(FStanceChangeEffectParameters, SpeedDuration) == 0x000004, "Member 'FStanceChangeEffectParameters::SpeedDuration' has a wrong offset!");
static_assert(offsetof(FStanceChangeEffectParameters, DelayBeforeAllowingStance) == 0x000008, "Member 'FStanceChangeEffectParameters::DelayBeforeAllowingStance' has a wrong offset!");

// ScriptStruct Flame.CloudStatusResponse
// 0x0028 (0x0028 - 0x0000)
struct FCloudStatusResponse final
{
public:
	class FString                                 App;                                               // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Version;                                           // 0x0010(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FDateTime                              TimeUTC;                                           // 0x0020(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FCloudStatusResponse) == 0x000008, "Wrong alignment on FCloudStatusResponse");
static_assert(sizeof(FCloudStatusResponse) == 0x000028, "Wrong size on FCloudStatusResponse");
static_assert(offsetof(FCloudStatusResponse, App) == 0x000000, "Member 'FCloudStatusResponse::App' has a wrong offset!");
static_assert(offsetof(FCloudStatusResponse, Version) == 0x000010, "Member 'FCloudStatusResponse::Version' has a wrong offset!");
static_assert(offsetof(FCloudStatusResponse, TimeUTC) == 0x000020, "Member 'FCloudStatusResponse::TimeUTC' has a wrong offset!");

// ScriptStruct Flame.FallDamageEvent
// 0x0000 (0x0010 - 0x0010)
struct FFallDamageEvent final : public FDamageEvent
{
};
static_assert(alignof(FFallDamageEvent) == 0x000008, "Wrong alignment on FFallDamageEvent");
static_assert(sizeof(FFallDamageEvent) == 0x000010, "Wrong size on FFallDamageEvent");

// ScriptStruct Flame.CloudUserCounterUpdate
// 0x0008 (0x0008 - 0x0000)
struct FCloudUserCounterUpdate final
{
public:
	ECloudUserCounterOperation                    Operation;                                         // 0x0000(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Value;                                             // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FCloudUserCounterUpdate) == 0x000004, "Wrong alignment on FCloudUserCounterUpdate");
static_assert(sizeof(FCloudUserCounterUpdate) == 0x000008, "Wrong size on FCloudUserCounterUpdate");
static_assert(offsetof(FCloudUserCounterUpdate, Operation) == 0x000000, "Member 'FCloudUserCounterUpdate::Operation' has a wrong offset!");
static_assert(offsetof(FCloudUserCounterUpdate, Value) == 0x000004, "Member 'FCloudUserCounterUpdate::Value' has a wrong offset!");

// ScriptStruct Flame.BannedPlayerDetail
// 0x0030 (0x0030 - 0x0000)
struct FBannedPlayerDetail final
{
public:
	class FString                                 TrackingId;                                        // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ScreenName;                                        // 0x0010(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Platform;                                          // 0x0020(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FBannedPlayerDetail) == 0x000008, "Wrong alignment on FBannedPlayerDetail");
static_assert(sizeof(FBannedPlayerDetail) == 0x000030, "Wrong size on FBannedPlayerDetail");
static_assert(offsetof(FBannedPlayerDetail, TrackingId) == 0x000000, "Member 'FBannedPlayerDetail::TrackingId' has a wrong offset!");
static_assert(offsetof(FBannedPlayerDetail, ScreenName) == 0x000010, "Member 'FBannedPlayerDetail::ScreenName' has a wrong offset!");
static_assert(offsetof(FBannedPlayerDetail, Platform) == 0x000020, "Member 'FBannedPlayerDetail::Platform' has a wrong offset!");

// ScriptStruct Flame.CloudBannedPlayersResult
// 0x0018 (0x0018 - 0x0000)
struct FCloudBannedPlayersResult final
{
public:
	TArray<struct FBannedPlayerDetail>            Banlist;                                           // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	int32                                         BanLimit;                                          // 0x0010(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FCloudBannedPlayersResult) == 0x000008, "Wrong alignment on FCloudBannedPlayersResult");
static_assert(sizeof(FCloudBannedPlayersResult) == 0x000018, "Wrong size on FCloudBannedPlayersResult");
static_assert(offsetof(FCloudBannedPlayersResult, Banlist) == 0x000000, "Member 'FCloudBannedPlayersResult::Banlist' has a wrong offset!");
static_assert(offsetof(FCloudBannedPlayersResult, BanLimit) == 0x000010, "Member 'FCloudBannedPlayersResult::BanLimit' has a wrong offset!");

// ScriptStruct Flame.ShelterResourceInfo
// 0x0010 (0x0010 - 0x0000)
struct FShelterResourceInfo final
{
public:
	TSubclassOf<class AShelterResourceItem>       ResourceClass;                                     // 0x0000(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Count;                                             // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FShelterResourceInfo) == 0x000008, "Wrong alignment on FShelterResourceInfo");
static_assert(sizeof(FShelterResourceInfo) == 0x000010, "Wrong size on FShelterResourceInfo");
static_assert(offsetof(FShelterResourceInfo, ResourceClass) == 0x000000, "Member 'FShelterResourceInfo::ResourceClass' has a wrong offset!");
static_assert(offsetof(FShelterResourceInfo, Count) == 0x000008, "Member 'FShelterResourceInfo::Count' has a wrong offset!");

// ScriptStruct Flame.ImageToSafe
// 0x0020 (0x0020 - 0x0000)
struct alignas(0x08) FImageToSafe final
{
public:
	uint8                                         Pad_0[0x20];                                       // 0x0000(0x0020)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FImageToSafe) == 0x000008, "Wrong alignment on FImageToSafe");
static_assert(sizeof(FImageToSafe) == 0x000020, "Wrong size on FImageToSafe");

// ScriptStruct Flame.BreathProperties
// 0x000C (0x000C - 0x0000)
struct FBreathProperties final
{
public:
	float                                         BreathTime;                                        // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         BreathLevel;                                       // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         BreathIndex;                                       // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FBreathProperties) == 0x000004, "Wrong alignment on FBreathProperties");
static_assert(sizeof(FBreathProperties) == 0x00000C, "Wrong size on FBreathProperties");
static_assert(offsetof(FBreathProperties, BreathTime) == 0x000000, "Member 'FBreathProperties::BreathTime' has a wrong offset!");
static_assert(offsetof(FBreathProperties, BreathLevel) == 0x000004, "Member 'FBreathProperties::BreathLevel' has a wrong offset!");
static_assert(offsetof(FBreathProperties, BreathIndex) == 0x000008, "Member 'FBreathProperties::BreathIndex' has a wrong offset!");

// ScriptStruct Flame.MouseSettings
// 0x0024 (0x0024 - 0x0000)
struct FMouseSettings final
{
public:
	float                                         SensitivityMouse;                                  // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SensitivityMouseAim1P;                             // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SensitivityMouseAim3P;                             // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SensitivityMouseX;                                 // 0x000C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SensitivityMouseY;                                 // 0x0010(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SensitivityMouseAimX1P;                            // 0x0014(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SensitivityMouseAimY1P;                            // 0x0018(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SensitivityMouseAimX3P;                            // 0x001C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SensitivityMouseAimY3P;                            // 0x0020(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FMouseSettings) == 0x000004, "Wrong alignment on FMouseSettings");
static_assert(sizeof(FMouseSettings) == 0x000024, "Wrong size on FMouseSettings");
static_assert(offsetof(FMouseSettings, SensitivityMouse) == 0x000000, "Member 'FMouseSettings::SensitivityMouse' has a wrong offset!");
static_assert(offsetof(FMouseSettings, SensitivityMouseAim1P) == 0x000004, "Member 'FMouseSettings::SensitivityMouseAim1P' has a wrong offset!");
static_assert(offsetof(FMouseSettings, SensitivityMouseAim3P) == 0x000008, "Member 'FMouseSettings::SensitivityMouseAim3P' has a wrong offset!");
static_assert(offsetof(FMouseSettings, SensitivityMouseX) == 0x00000C, "Member 'FMouseSettings::SensitivityMouseX' has a wrong offset!");
static_assert(offsetof(FMouseSettings, SensitivityMouseY) == 0x000010, "Member 'FMouseSettings::SensitivityMouseY' has a wrong offset!");
static_assert(offsetof(FMouseSettings, SensitivityMouseAimX1P) == 0x000014, "Member 'FMouseSettings::SensitivityMouseAimX1P' has a wrong offset!");
static_assert(offsetof(FMouseSettings, SensitivityMouseAimY1P) == 0x000018, "Member 'FMouseSettings::SensitivityMouseAimY1P' has a wrong offset!");
static_assert(offsetof(FMouseSettings, SensitivityMouseAimX3P) == 0x00001C, "Member 'FMouseSettings::SensitivityMouseAimX3P' has a wrong offset!");
static_assert(offsetof(FMouseSettings, SensitivityMouseAimY3P) == 0x000020, "Member 'FMouseSettings::SensitivityMouseAimY3P' has a wrong offset!");

// ScriptStruct Flame.UserInfoStats
// 0x00F0 (0x00F0 - 0x0000)
struct FUserInfoStats final
{
public:
	TMap<EOnlineGameMode, int32>                  AveragePercentiles;                                // 0x0000(0x0050)(BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	TMap<class FString, int32>                    Ranks;                                             // 0x0050(0x0050)(BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	TMap<class FString, float>                    SkillRatings;                                      // 0x00A0(0x0050)(BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
};
static_assert(alignof(FUserInfoStats) == 0x000008, "Wrong alignment on FUserInfoStats");
static_assert(sizeof(FUserInfoStats) == 0x0000F0, "Wrong size on FUserInfoStats");
static_assert(offsetof(FUserInfoStats, AveragePercentiles) == 0x000000, "Member 'FUserInfoStats::AveragePercentiles' has a wrong offset!");
static_assert(offsetof(FUserInfoStats, Ranks) == 0x000050, "Member 'FUserInfoStats::Ranks' has a wrong offset!");
static_assert(offsetof(FUserInfoStats, SkillRatings) == 0x0000A0, "Member 'FUserInfoStats::SkillRatings' has a wrong offset!");

// ScriptStruct Flame.UserCloudInfo
// 0x01B0 (0x01B0 - 0x0000)
struct FUserCloudInfo final
{
public:
	class FString                                 Username;                                          // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsTutorialCompleted;                               // 0x0010(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x3];                                       // 0x0011(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         TotalFood;                                         // 0x0014(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         TotalMaterials;                                    // 0x0018(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         TotalHardCurrency;                                 // 0x001C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TMap<class FString, int32>                    TotalCurrencies;                                   // 0x0020(0x0050)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	int32                                         ShelterBuildQueuesCount;                           // 0x0070(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ShelterLevel;                                      // 0x0074(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ShelterMaterialsCapacity;                          // 0x0078(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ShelterFoodCapacity;                               // 0x007C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         CraftingModifierWeaponsTime;                       // 0x0080(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         CraftingModifierConsumablesCost;                   // 0x0084(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         CraftingModifierConsumablesTime;                   // 0x0088(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         CraftingModifierDeconstructionMaterials;           // 0x008C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ShelterModifierImprovementBuildingTime;            // 0x0090(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsFounder;                                         // 0x0094(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsFoundersPackRedeemed;                            // 0x0095(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsCheatMonitored;                                  // 0x0096(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_97[0x1];                                       // 0x0097(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class FString>                         Banlist;                                           // 0x0098(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FBoosterDetails>                BoostersDetails;                                   // 0x00A8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	bool                                          IsInitializedFromCloud;                            // 0x00B8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ESublevelTheme                                ActiveTheme;                                       // 0x00B9(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_BA[0x6];                                       // 0x00BA(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	struct FUserInfoStats                         UserStats;                                         // 0x00C0(0x00F0)(BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
};
static_assert(alignof(FUserCloudInfo) == 0x000008, "Wrong alignment on FUserCloudInfo");
static_assert(sizeof(FUserCloudInfo) == 0x0001B0, "Wrong size on FUserCloudInfo");
static_assert(offsetof(FUserCloudInfo, Username) == 0x000000, "Member 'FUserCloudInfo::Username' has a wrong offset!");
static_assert(offsetof(FUserCloudInfo, IsTutorialCompleted) == 0x000010, "Member 'FUserCloudInfo::IsTutorialCompleted' has a wrong offset!");
static_assert(offsetof(FUserCloudInfo, TotalFood) == 0x000014, "Member 'FUserCloudInfo::TotalFood' has a wrong offset!");
static_assert(offsetof(FUserCloudInfo, TotalMaterials) == 0x000018, "Member 'FUserCloudInfo::TotalMaterials' has a wrong offset!");
static_assert(offsetof(FUserCloudInfo, TotalHardCurrency) == 0x00001C, "Member 'FUserCloudInfo::TotalHardCurrency' has a wrong offset!");
static_assert(offsetof(FUserCloudInfo, TotalCurrencies) == 0x000020, "Member 'FUserCloudInfo::TotalCurrencies' has a wrong offset!");
static_assert(offsetof(FUserCloudInfo, ShelterBuildQueuesCount) == 0x000070, "Member 'FUserCloudInfo::ShelterBuildQueuesCount' has a wrong offset!");
static_assert(offsetof(FUserCloudInfo, ShelterLevel) == 0x000074, "Member 'FUserCloudInfo::ShelterLevel' has a wrong offset!");
static_assert(offsetof(FUserCloudInfo, ShelterMaterialsCapacity) == 0x000078, "Member 'FUserCloudInfo::ShelterMaterialsCapacity' has a wrong offset!");
static_assert(offsetof(FUserCloudInfo, ShelterFoodCapacity) == 0x00007C, "Member 'FUserCloudInfo::ShelterFoodCapacity' has a wrong offset!");
static_assert(offsetof(FUserCloudInfo, CraftingModifierWeaponsTime) == 0x000080, "Member 'FUserCloudInfo::CraftingModifierWeaponsTime' has a wrong offset!");
static_assert(offsetof(FUserCloudInfo, CraftingModifierConsumablesCost) == 0x000084, "Member 'FUserCloudInfo::CraftingModifierConsumablesCost' has a wrong offset!");
static_assert(offsetof(FUserCloudInfo, CraftingModifierConsumablesTime) == 0x000088, "Member 'FUserCloudInfo::CraftingModifierConsumablesTime' has a wrong offset!");
static_assert(offsetof(FUserCloudInfo, CraftingModifierDeconstructionMaterials) == 0x00008C, "Member 'FUserCloudInfo::CraftingModifierDeconstructionMaterials' has a wrong offset!");
static_assert(offsetof(FUserCloudInfo, ShelterModifierImprovementBuildingTime) == 0x000090, "Member 'FUserCloudInfo::ShelterModifierImprovementBuildingTime' has a wrong offset!");
static_assert(offsetof(FUserCloudInfo, IsFounder) == 0x000094, "Member 'FUserCloudInfo::IsFounder' has a wrong offset!");
static_assert(offsetof(FUserCloudInfo, IsFoundersPackRedeemed) == 0x000095, "Member 'FUserCloudInfo::IsFoundersPackRedeemed' has a wrong offset!");
static_assert(offsetof(FUserCloudInfo, IsCheatMonitored) == 0x000096, "Member 'FUserCloudInfo::IsCheatMonitored' has a wrong offset!");
static_assert(offsetof(FUserCloudInfo, Banlist) == 0x000098, "Member 'FUserCloudInfo::Banlist' has a wrong offset!");
static_assert(offsetof(FUserCloudInfo, BoostersDetails) == 0x0000A8, "Member 'FUserCloudInfo::BoostersDetails' has a wrong offset!");
static_assert(offsetof(FUserCloudInfo, IsInitializedFromCloud) == 0x0000B8, "Member 'FUserCloudInfo::IsInitializedFromCloud' has a wrong offset!");
static_assert(offsetof(FUserCloudInfo, ActiveTheme) == 0x0000B9, "Member 'FUserCloudInfo::ActiveTheme' has a wrong offset!");
static_assert(offsetof(FUserCloudInfo, UserStats) == 0x0000C0, "Member 'FUserCloudInfo::UserStats' has a wrong offset!");

// ScriptStruct Flame.CloudSetChallengeProgressRequest
// 0x0020 (0x0020 - 0x0000)
struct FCloudSetChallengeProgressRequest final
{
public:
	int32                                         Progress;                                          // 0x0000(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   ChallengeName;                                     // 0x0004(0x0008)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         SlotId;                                            // 0x000C(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 SlotCategory;                                      // 0x0010(0x0010)(BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FCloudSetChallengeProgressRequest) == 0x000008, "Wrong alignment on FCloudSetChallengeProgressRequest");
static_assert(sizeof(FCloudSetChallengeProgressRequest) == 0x000020, "Wrong size on FCloudSetChallengeProgressRequest");
static_assert(offsetof(FCloudSetChallengeProgressRequest, Progress) == 0x000000, "Member 'FCloudSetChallengeProgressRequest::Progress' has a wrong offset!");
static_assert(offsetof(FCloudSetChallengeProgressRequest, ChallengeName) == 0x000004, "Member 'FCloudSetChallengeProgressRequest::ChallengeName' has a wrong offset!");
static_assert(offsetof(FCloudSetChallengeProgressRequest, SlotId) == 0x00000C, "Member 'FCloudSetChallengeProgressRequest::SlotId' has a wrong offset!");
static_assert(offsetof(FCloudSetChallengeProgressRequest, SlotCategory) == 0x000010, "Member 'FCloudSetChallengeProgressRequest::SlotCategory' has a wrong offset!");

// ScriptStruct Flame.CloudHeartBeatInfo
// 0x0120 (0x0120 - 0x0000)
struct FCloudHeartBeatInfo final
{
public:
	class FString                                 BuildCode;                                         // 0x0000(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 VersionCode;                                       // 0x0010(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 BranchCode;                                        // 0x0020(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 VersionData;                                       // 0x0030(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ServerAddress;                                     // 0x0040(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ServerPort;                                        // 0x0050(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_54[0x4];                                       // 0x0054(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 ServerId;                                          // 0x0058(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 MachineId;                                         // 0x0068(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ECloudHeartBeatServerType                     ServerType;                                        // 0x0078(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_79[0x7];                                       // 0x0079(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 Map;                                               // 0x0080(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Group;                                             // 0x0090(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Location;                                          // 0x00A0(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 GameState;                                         // 0x00B0(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Players;                                           // 0x00C0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MaxPlayers;                                        // 0x00C4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C8[0x58];                                      // 0x00C8(0x0058)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FCloudHeartBeatInfo) == 0x000008, "Wrong alignment on FCloudHeartBeatInfo");
static_assert(sizeof(FCloudHeartBeatInfo) == 0x000120, "Wrong size on FCloudHeartBeatInfo");
static_assert(offsetof(FCloudHeartBeatInfo, BuildCode) == 0x000000, "Member 'FCloudHeartBeatInfo::BuildCode' has a wrong offset!");
static_assert(offsetof(FCloudHeartBeatInfo, VersionCode) == 0x000010, "Member 'FCloudHeartBeatInfo::VersionCode' has a wrong offset!");
static_assert(offsetof(FCloudHeartBeatInfo, BranchCode) == 0x000020, "Member 'FCloudHeartBeatInfo::BranchCode' has a wrong offset!");
static_assert(offsetof(FCloudHeartBeatInfo, VersionData) == 0x000030, "Member 'FCloudHeartBeatInfo::VersionData' has a wrong offset!");
static_assert(offsetof(FCloudHeartBeatInfo, ServerAddress) == 0x000040, "Member 'FCloudHeartBeatInfo::ServerAddress' has a wrong offset!");
static_assert(offsetof(FCloudHeartBeatInfo, ServerPort) == 0x000050, "Member 'FCloudHeartBeatInfo::ServerPort' has a wrong offset!");
static_assert(offsetof(FCloudHeartBeatInfo, ServerId) == 0x000058, "Member 'FCloudHeartBeatInfo::ServerId' has a wrong offset!");
static_assert(offsetof(FCloudHeartBeatInfo, MachineId) == 0x000068, "Member 'FCloudHeartBeatInfo::MachineId' has a wrong offset!");
static_assert(offsetof(FCloudHeartBeatInfo, ServerType) == 0x000078, "Member 'FCloudHeartBeatInfo::ServerType' has a wrong offset!");
static_assert(offsetof(FCloudHeartBeatInfo, Map) == 0x000080, "Member 'FCloudHeartBeatInfo::Map' has a wrong offset!");
static_assert(offsetof(FCloudHeartBeatInfo, Group) == 0x000090, "Member 'FCloudHeartBeatInfo::Group' has a wrong offset!");
static_assert(offsetof(FCloudHeartBeatInfo, Location) == 0x0000A0, "Member 'FCloudHeartBeatInfo::Location' has a wrong offset!");
static_assert(offsetof(FCloudHeartBeatInfo, GameState) == 0x0000B0, "Member 'FCloudHeartBeatInfo::GameState' has a wrong offset!");
static_assert(offsetof(FCloudHeartBeatInfo, Players) == 0x0000C0, "Member 'FCloudHeartBeatInfo::Players' has a wrong offset!");
static_assert(offsetof(FCloudHeartBeatInfo, MaxPlayers) == 0x0000C4, "Member 'FCloudHeartBeatInfo::MaxPlayers' has a wrong offset!");

// ScriptStruct Flame.FireModeSoundsConfiguration
// 0x0070 (0x0078 - 0x0008)
struct FFireModeSoundsConfiguration final : public FTableRowBase
{
public:
	class USoundBase*                             FireSound;                                         // 0x0008(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USoundBase*                             TriggerSound;                                      // 0x0010(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USoundBase*                             ShellSound;                                        // 0x0018(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USoundBase*                             MeleeSound;                                        // 0x0020(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USoundBase*                             BringUpSound;                                      // 0x0028(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USoundBase*                             BringDownSound;                                    // 0x0030(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USoundBase*                             Enter1PVSound;                                     // 0x0038(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USoundBase*                             Exit1PVSound;                                      // 0x0040(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USoundBase*                             AimStartSound;                                     // 0x0048(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USoundBase*                             AimEndSound;                                       // 0x0050(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USoundBase*                             AimBlockedStartSound;                              // 0x0058(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USoundBase*                             AimBlockedEndSound;                                // 0x0060(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USoundBase*                             FireModeSwitchSound;                               // 0x0068(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         FireDelay;                                         // 0x0070(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         FadeOutTime;                                       // 0x0074(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FFireModeSoundsConfiguration) == 0x000008, "Wrong alignment on FFireModeSoundsConfiguration");
static_assert(sizeof(FFireModeSoundsConfiguration) == 0x000078, "Wrong size on FFireModeSoundsConfiguration");
static_assert(offsetof(FFireModeSoundsConfiguration, FireSound) == 0x000008, "Member 'FFireModeSoundsConfiguration::FireSound' has a wrong offset!");
static_assert(offsetof(FFireModeSoundsConfiguration, TriggerSound) == 0x000010, "Member 'FFireModeSoundsConfiguration::TriggerSound' has a wrong offset!");
static_assert(offsetof(FFireModeSoundsConfiguration, ShellSound) == 0x000018, "Member 'FFireModeSoundsConfiguration::ShellSound' has a wrong offset!");
static_assert(offsetof(FFireModeSoundsConfiguration, MeleeSound) == 0x000020, "Member 'FFireModeSoundsConfiguration::MeleeSound' has a wrong offset!");
static_assert(offsetof(FFireModeSoundsConfiguration, BringUpSound) == 0x000028, "Member 'FFireModeSoundsConfiguration::BringUpSound' has a wrong offset!");
static_assert(offsetof(FFireModeSoundsConfiguration, BringDownSound) == 0x000030, "Member 'FFireModeSoundsConfiguration::BringDownSound' has a wrong offset!");
static_assert(offsetof(FFireModeSoundsConfiguration, Enter1PVSound) == 0x000038, "Member 'FFireModeSoundsConfiguration::Enter1PVSound' has a wrong offset!");
static_assert(offsetof(FFireModeSoundsConfiguration, Exit1PVSound) == 0x000040, "Member 'FFireModeSoundsConfiguration::Exit1PVSound' has a wrong offset!");
static_assert(offsetof(FFireModeSoundsConfiguration, AimStartSound) == 0x000048, "Member 'FFireModeSoundsConfiguration::AimStartSound' has a wrong offset!");
static_assert(offsetof(FFireModeSoundsConfiguration, AimEndSound) == 0x000050, "Member 'FFireModeSoundsConfiguration::AimEndSound' has a wrong offset!");
static_assert(offsetof(FFireModeSoundsConfiguration, AimBlockedStartSound) == 0x000058, "Member 'FFireModeSoundsConfiguration::AimBlockedStartSound' has a wrong offset!");
static_assert(offsetof(FFireModeSoundsConfiguration, AimBlockedEndSound) == 0x000060, "Member 'FFireModeSoundsConfiguration::AimBlockedEndSound' has a wrong offset!");
static_assert(offsetof(FFireModeSoundsConfiguration, FireModeSwitchSound) == 0x000068, "Member 'FFireModeSoundsConfiguration::FireModeSwitchSound' has a wrong offset!");
static_assert(offsetof(FFireModeSoundsConfiguration, FireDelay) == 0x000070, "Member 'FFireModeSoundsConfiguration::FireDelay' has a wrong offset!");
static_assert(offsetof(FFireModeSoundsConfiguration, FadeOutTime) == 0x000074, "Member 'FFireModeSoundsConfiguration::FadeOutTime' has a wrong offset!");

// ScriptStruct Flame.CloudLeaderBoardDetailRowDto
// 0x0030 (0x0030 - 0x0000)
struct FCloudLeaderBoardDetailRowDto final
{
public:
	int32                                         Position;                                          // 0x0000(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 ScreenName;                                        // 0x0008(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ScoreValue;                                        // 0x0018(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsCurrentPlayer;                                   // 0x001C(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsFriend;                                          // 0x001D(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1E[0x2];                                       // 0x001E(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 Userid;                                            // 0x0020(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FCloudLeaderBoardDetailRowDto) == 0x000008, "Wrong alignment on FCloudLeaderBoardDetailRowDto");
static_assert(sizeof(FCloudLeaderBoardDetailRowDto) == 0x000030, "Wrong size on FCloudLeaderBoardDetailRowDto");
static_assert(offsetof(FCloudLeaderBoardDetailRowDto, Position) == 0x000000, "Member 'FCloudLeaderBoardDetailRowDto::Position' has a wrong offset!");
static_assert(offsetof(FCloudLeaderBoardDetailRowDto, ScreenName) == 0x000008, "Member 'FCloudLeaderBoardDetailRowDto::ScreenName' has a wrong offset!");
static_assert(offsetof(FCloudLeaderBoardDetailRowDto, ScoreValue) == 0x000018, "Member 'FCloudLeaderBoardDetailRowDto::ScoreValue' has a wrong offset!");
static_assert(offsetof(FCloudLeaderBoardDetailRowDto, IsCurrentPlayer) == 0x00001C, "Member 'FCloudLeaderBoardDetailRowDto::IsCurrentPlayer' has a wrong offset!");
static_assert(offsetof(FCloudLeaderBoardDetailRowDto, IsFriend) == 0x00001D, "Member 'FCloudLeaderBoardDetailRowDto::IsFriend' has a wrong offset!");
static_assert(offsetof(FCloudLeaderBoardDetailRowDto, Userid) == 0x000020, "Member 'FCloudLeaderBoardDetailRowDto::Userid' has a wrong offset!");

// ScriptStruct Flame.CloudUserLeaderBoardDetailDto
// 0x0030 (0x0030 - 0x0000)
struct FCloudUserLeaderBoardDetailDto final
{
public:
	TArray<struct FCloudLeaderBoardDetailRowDto>  Friends;                                           // 0x0000(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FCloudLeaderBoardDetailRowDto>  All;                                               // 0x0010(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FCloudLeaderBoardDetailRowDto>  TopPlayers;                                        // 0x0020(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FCloudUserLeaderBoardDetailDto) == 0x000008, "Wrong alignment on FCloudUserLeaderBoardDetailDto");
static_assert(sizeof(FCloudUserLeaderBoardDetailDto) == 0x000030, "Wrong size on FCloudUserLeaderBoardDetailDto");
static_assert(offsetof(FCloudUserLeaderBoardDetailDto, Friends) == 0x000000, "Member 'FCloudUserLeaderBoardDetailDto::Friends' has a wrong offset!");
static_assert(offsetof(FCloudUserLeaderBoardDetailDto, All) == 0x000010, "Member 'FCloudUserLeaderBoardDetailDto::All' has a wrong offset!");
static_assert(offsetof(FCloudUserLeaderBoardDetailDto, TopPlayers) == 0x000020, "Member 'FCloudUserLeaderBoardDetailDto::TopPlayers' has a wrong offset!");

// ScriptStruct Flame.ImprovementSlotList
// 0x0018 (0x0130 - 0x0118)
struct FImprovementSlotList final : public FItemClassTableRow
{
public:
	TSubclassOf<class AShelterSlot>               SlotClass;                                         // 0x0118(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         NeededShelterLevel;                                // 0x0120(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         SlotPriority;                                      // 0x0124(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSubclassOf<class AShelterImprovement>        ImprovementClass;                                  // 0x0128(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FImprovementSlotList) == 0x000008, "Wrong alignment on FImprovementSlotList");
static_assert(sizeof(FImprovementSlotList) == 0x000130, "Wrong size on FImprovementSlotList");
static_assert(offsetof(FImprovementSlotList, SlotClass) == 0x000118, "Member 'FImprovementSlotList::SlotClass' has a wrong offset!");
static_assert(offsetof(FImprovementSlotList, NeededShelterLevel) == 0x000120, "Member 'FImprovementSlotList::NeededShelterLevel' has a wrong offset!");
static_assert(offsetof(FImprovementSlotList, SlotPriority) == 0x000124, "Member 'FImprovementSlotList::SlotPriority' has a wrong offset!");
static_assert(offsetof(FImprovementSlotList, ImprovementClass) == 0x000128, "Member 'FImprovementSlotList::ImprovementClass' has a wrong offset!");

// ScriptStruct Flame.WeaponSpecificAnimData
// 0x0018 (0x0018 - 0x0000)
struct FWeaponSpecificAnimData final
{
public:
	class UAnimSequence*                          ReloadMagazine;                                    // 0x0000(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAnimSequence*                          ReloadFinish;                                      // 0x0008(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAnimSequence*                          ReloadSingleShot;                                  // 0x0010(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FWeaponSpecificAnimData) == 0x000008, "Wrong alignment on FWeaponSpecificAnimData");
static_assert(sizeof(FWeaponSpecificAnimData) == 0x000018, "Wrong size on FWeaponSpecificAnimData");
static_assert(offsetof(FWeaponSpecificAnimData, ReloadMagazine) == 0x000000, "Member 'FWeaponSpecificAnimData::ReloadMagazine' has a wrong offset!");
static_assert(offsetof(FWeaponSpecificAnimData, ReloadFinish) == 0x000008, "Member 'FWeaponSpecificAnimData::ReloadFinish' has a wrong offset!");
static_assert(offsetof(FWeaponSpecificAnimData, ReloadSingleShot) == 0x000010, "Member 'FWeaponSpecificAnimData::ReloadSingleShot' has a wrong offset!");

// ScriptStruct Flame.TokenRequestOptions
// 0x0020 (0x0020 - 0x0000)
struct FTokenRequestOptions final
{
public:
	class FString                                 Name;                                              // 0x0000(0x0010)(Edit, ZeroConstructor, Config, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Scope;                                             // 0x0010(0x0010)(Edit, ZeroConstructor, Config, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FTokenRequestOptions) == 0x000008, "Wrong alignment on FTokenRequestOptions");
static_assert(sizeof(FTokenRequestOptions) == 0x000020, "Wrong size on FTokenRequestOptions");
static_assert(offsetof(FTokenRequestOptions, Name) == 0x000000, "Member 'FTokenRequestOptions::Name' has a wrong offset!");
static_assert(offsetof(FTokenRequestOptions, Scope) == 0x000010, "Member 'FTokenRequestOptions::Scope' has a wrong offset!");

// ScriptStruct Flame.CloudLeaderBoardsPerMode
// 0x0060 (0x0060 - 0x0000)
struct FCloudLeaderBoardsPerMode final
{
public:
	struct FDateTime                              LastChange;                                        // 0x0000(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         SkillRatingPercentileGroup;                        // 0x0008(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TMap<EStatType, struct FCloudLeaderboardSingleStat> LeaderBoardSingleStats;                            // 0x0010(0x0050)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
};
static_assert(alignof(FCloudLeaderBoardsPerMode) == 0x000008, "Wrong alignment on FCloudLeaderBoardsPerMode");
static_assert(sizeof(FCloudLeaderBoardsPerMode) == 0x000060, "Wrong size on FCloudLeaderBoardsPerMode");
static_assert(offsetof(FCloudLeaderBoardsPerMode, LastChange) == 0x000000, "Member 'FCloudLeaderBoardsPerMode::LastChange' has a wrong offset!");
static_assert(offsetof(FCloudLeaderBoardsPerMode, SkillRatingPercentileGroup) == 0x000008, "Member 'FCloudLeaderBoardsPerMode::SkillRatingPercentileGroup' has a wrong offset!");
static_assert(offsetof(FCloudLeaderBoardsPerMode, LeaderBoardSingleStats) == 0x000010, "Member 'FCloudLeaderBoardsPerMode::LeaderBoardSingleStats' has a wrong offset!");

// ScriptStruct Flame.CloudUserLeaderBoardsIntervals
// 0x0120 (0x0120 - 0x0000)
struct FCloudUserLeaderBoardsIntervals final
{
public:
	struct FCloudLeaderBoardsPerMode              Weekly;                                            // 0x0000(0x0060)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	struct FCloudLeaderBoardsPerMode              Seasonal;                                          // 0x0060(0x0060)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	struct FCloudLeaderBoardsPerMode              AllTime;                                           // 0x00C0(0x0060)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
};
static_assert(alignof(FCloudUserLeaderBoardsIntervals) == 0x000008, "Wrong alignment on FCloudUserLeaderBoardsIntervals");
static_assert(sizeof(FCloudUserLeaderBoardsIntervals) == 0x000120, "Wrong size on FCloudUserLeaderBoardsIntervals");
static_assert(offsetof(FCloudUserLeaderBoardsIntervals, Weekly) == 0x000000, "Member 'FCloudUserLeaderBoardsIntervals::Weekly' has a wrong offset!");
static_assert(offsetof(FCloudUserLeaderBoardsIntervals, Seasonal) == 0x000060, "Member 'FCloudUserLeaderBoardsIntervals::Seasonal' has a wrong offset!");
static_assert(offsetof(FCloudUserLeaderBoardsIntervals, AllTime) == 0x0000C0, "Member 'FCloudUserLeaderBoardsIntervals::AllTime' has a wrong offset!");

// ScriptStruct Flame.CloudUserLeaderBoards
// 0x0360 (0x0360 - 0x0000)
struct FCloudUserLeaderBoards final
{
public:
	struct FCloudUserLeaderBoardsIntervals        Encounters;                                        // 0x0000(0x0120)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	struct FCloudUserLeaderBoardsIntervals        Eliminations;                                      // 0x0120(0x0120)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	struct FCloudUserLeaderBoardsIntervals        Shootouts;                                         // 0x0240(0x0120)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
};
static_assert(alignof(FCloudUserLeaderBoards) == 0x000008, "Wrong alignment on FCloudUserLeaderBoards");
static_assert(sizeof(FCloudUserLeaderBoards) == 0x000360, "Wrong size on FCloudUserLeaderBoards");
static_assert(offsetof(FCloudUserLeaderBoards, Encounters) == 0x000000, "Member 'FCloudUserLeaderBoards::Encounters' has a wrong offset!");
static_assert(offsetof(FCloudUserLeaderBoards, Eliminations) == 0x000120, "Member 'FCloudUserLeaderBoards::Eliminations' has a wrong offset!");
static_assert(offsetof(FCloudUserLeaderBoards, Shootouts) == 0x000240, "Member 'FCloudUserLeaderBoards::Shootouts' has a wrong offset!");

// ScriptStruct Flame.ChainContext
// 0x0028 (0x0028 - 0x0000)
struct alignas(0x08) FChainContext final
{
public:
	uint8                                         Pad_0[0x28];                                       // 0x0000(0x0028)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FChainContext) == 0x000008, "Wrong alignment on FChainContext");
static_assert(sizeof(FChainContext) == 0x000028, "Wrong size on FChainContext");

// ScriptStruct Flame.WeaponTypeStaggerConfiguration
// 0x0018 (0x0028 - 0x0010)
struct FWeaponTypeStaggerConfiguration final : public FClassTableRow
{
public:
	TSubclassOf<class AWeapon>                    WeaponClass;                                       // 0x0010(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EDamageType                                   DamageType;                                        // 0x0018(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x3];                                       // 0x0019(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         StaggerDamageThreshold;                            // 0x001C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DamageStunDuration;                                // 0x0020(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_24[0x4];                                       // 0x0024(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FWeaponTypeStaggerConfiguration) == 0x000008, "Wrong alignment on FWeaponTypeStaggerConfiguration");
static_assert(sizeof(FWeaponTypeStaggerConfiguration) == 0x000028, "Wrong size on FWeaponTypeStaggerConfiguration");
static_assert(offsetof(FWeaponTypeStaggerConfiguration, WeaponClass) == 0x000010, "Member 'FWeaponTypeStaggerConfiguration::WeaponClass' has a wrong offset!");
static_assert(offsetof(FWeaponTypeStaggerConfiguration, DamageType) == 0x000018, "Member 'FWeaponTypeStaggerConfiguration::DamageType' has a wrong offset!");
static_assert(offsetof(FWeaponTypeStaggerConfiguration, StaggerDamageThreshold) == 0x00001C, "Member 'FWeaponTypeStaggerConfiguration::StaggerDamageThreshold' has a wrong offset!");
static_assert(offsetof(FWeaponTypeStaggerConfiguration, DamageStunDuration) == 0x000020, "Member 'FWeaponTypeStaggerConfiguration::DamageStunDuration' has a wrong offset!");

// ScriptStruct Flame.WindowData
// 0x0088 (0x0088 - 0x0000)
struct FWindowData final
{
public:
	struct FWindowSashSetData                     Set;                                               // 0x0000(0x0078)(Edit, NativeAccessSpecifierPublic)
	class FName                                   SocketTransform;                                   // 0x0078(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSubclassOf<class AWindowSashSet>             DefaultSashClass;                                  // 0x0080(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FWindowData) == 0x000008, "Wrong alignment on FWindowData");
static_assert(sizeof(FWindowData) == 0x000088, "Wrong size on FWindowData");
static_assert(offsetof(FWindowData, Set) == 0x000000, "Member 'FWindowData::Set' has a wrong offset!");
static_assert(offsetof(FWindowData, SocketTransform) == 0x000078, "Member 'FWindowData::SocketTransform' has a wrong offset!");
static_assert(offsetof(FWindowData, DefaultSashClass) == 0x000080, "Member 'FWindowData::DefaultSashClass' has a wrong offset!");

// ScriptStruct Flame.CloudUserWipeRewardSlot
// 0x0018 (0x0018 - 0x0000)
struct FCloudUserWipeRewardSlot final
{
public:
	ECloudWipeSlotState                           SlotState;                                         // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FCloudUserWipeRewardItem>       Rewards;                                           // 0x0008(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FCloudUserWipeRewardSlot) == 0x000008, "Wrong alignment on FCloudUserWipeRewardSlot");
static_assert(sizeof(FCloudUserWipeRewardSlot) == 0x000018, "Wrong size on FCloudUserWipeRewardSlot");
static_assert(offsetof(FCloudUserWipeRewardSlot, SlotState) == 0x000000, "Member 'FCloudUserWipeRewardSlot::SlotState' has a wrong offset!");
static_assert(offsetof(FCloudUserWipeRewardSlot, Rewards) == 0x000008, "Member 'FCloudUserWipeRewardSlot::Rewards' has a wrong offset!");

// ScriptStruct Flame.CloudUserWipeRewardInfo
// 0x0020 (0x0020 - 0x0000)
struct FCloudUserWipeRewardInfo final
{
public:
	TArray<struct FCloudUserWipeRewardSlot>       Slots;                                             // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_10[0x10];                                      // 0x0010(0x0010)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FCloudUserWipeRewardInfo) == 0x000008, "Wrong alignment on FCloudUserWipeRewardInfo");
static_assert(sizeof(FCloudUserWipeRewardInfo) == 0x000020, "Wrong size on FCloudUserWipeRewardInfo");
static_assert(offsetof(FCloudUserWipeRewardInfo, Slots) == 0x000000, "Member 'FCloudUserWipeRewardInfo::Slots' has a wrong offset!");

// ScriptStruct Flame.CloudUserWipeRewards
// 0x0030 (0x0030 - 0x0000)
struct FCloudUserWipeRewards final
{
public:
	bool                                          AreRewardsGenerated;                               // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          HasPlayedGamePreview;                              // 0x0001(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2[0x2];                                        // 0x0002(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         GamePreviewPurchasedHardCurrency;                  // 0x0004(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         GamePreviewShelterLevel;                           // 0x0008(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         GamePreviewShelterImprovementsCount;               // 0x000C(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FCloudUserWipeRewardInfo               Rewards;                                           // 0x0010(0x0020)(BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
};
static_assert(alignof(FCloudUserWipeRewards) == 0x000008, "Wrong alignment on FCloudUserWipeRewards");
static_assert(sizeof(FCloudUserWipeRewards) == 0x000030, "Wrong size on FCloudUserWipeRewards");
static_assert(offsetof(FCloudUserWipeRewards, AreRewardsGenerated) == 0x000000, "Member 'FCloudUserWipeRewards::AreRewardsGenerated' has a wrong offset!");
static_assert(offsetof(FCloudUserWipeRewards, HasPlayedGamePreview) == 0x000001, "Member 'FCloudUserWipeRewards::HasPlayedGamePreview' has a wrong offset!");
static_assert(offsetof(FCloudUserWipeRewards, GamePreviewPurchasedHardCurrency) == 0x000004, "Member 'FCloudUserWipeRewards::GamePreviewPurchasedHardCurrency' has a wrong offset!");
static_assert(offsetof(FCloudUserWipeRewards, GamePreviewShelterLevel) == 0x000008, "Member 'FCloudUserWipeRewards::GamePreviewShelterLevel' has a wrong offset!");
static_assert(offsetof(FCloudUserWipeRewards, GamePreviewShelterImprovementsCount) == 0x00000C, "Member 'FCloudUserWipeRewards::GamePreviewShelterImprovementsCount' has a wrong offset!");
static_assert(offsetof(FCloudUserWipeRewards, Rewards) == 0x000010, "Member 'FCloudUserWipeRewards::Rewards' has a wrong offset!");

// ScriptStruct Flame.CloudNotificationMessageEvent
// 0x0008 (0x0008 - 0x0000)
struct FCloudNotificationMessageEvent final
{
public:
	class FName                                   NotificationMessage;                               // 0x0000(0x0008)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FCloudNotificationMessageEvent) == 0x000004, "Wrong alignment on FCloudNotificationMessageEvent");
static_assert(sizeof(FCloudNotificationMessageEvent) == 0x000008, "Wrong size on FCloudNotificationMessageEvent");
static_assert(offsetof(FCloudNotificationMessageEvent, NotificationMessage) == 0x000000, "Member 'FCloudNotificationMessageEvent::NotificationMessage' has a wrong offset!");

// ScriptStruct Flame.CloudPlatformStoreSteamInitMicrotransaction
// 0x0028 (0x0028 - 0x0000)
struct FCloudPlatformStoreSteamInitMicrotransaction final
{
public:
	uint32                                        PurchasedAppId;                                    // 0x0000(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 GameLanguageCode;                                  // 0x0008(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 MicroTransactionItemDescription;                   // 0x0018(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FCloudPlatformStoreSteamInitMicrotransaction) == 0x000008, "Wrong alignment on FCloudPlatformStoreSteamInitMicrotransaction");
static_assert(sizeof(FCloudPlatformStoreSteamInitMicrotransaction) == 0x000028, "Wrong size on FCloudPlatformStoreSteamInitMicrotransaction");
static_assert(offsetof(FCloudPlatformStoreSteamInitMicrotransaction, PurchasedAppId) == 0x000000, "Member 'FCloudPlatformStoreSteamInitMicrotransaction::PurchasedAppId' has a wrong offset!");
static_assert(offsetof(FCloudPlatformStoreSteamInitMicrotransaction, GameLanguageCode) == 0x000008, "Member 'FCloudPlatformStoreSteamInitMicrotransaction::GameLanguageCode' has a wrong offset!");
static_assert(offsetof(FCloudPlatformStoreSteamInitMicrotransaction, MicroTransactionItemDescription) == 0x000018, "Member 'FCloudPlatformStoreSteamInitMicrotransaction::MicroTransactionItemDescription' has a wrong offset!");

// ScriptStruct Flame.ItemRarity
// 0x0028 (0x0028 - 0x0000)
struct FItemRarity final
{
public:
	class FText                                   Name;                                              // 0x0000(0x0018)(Edit, BlueprintVisible, DisableEditOnInstance, NativeAccessSpecifierPublic)
	struct FLinearColor                           Color;                                             // 0x0018(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FItemRarity) == 0x000008, "Wrong alignment on FItemRarity");
static_assert(sizeof(FItemRarity) == 0x000028, "Wrong size on FItemRarity");
static_assert(offsetof(FItemRarity, Name) == 0x000000, "Member 'FItemRarity::Name' has a wrong offset!");
static_assert(offsetof(FItemRarity, Color) == 0x000018, "Member 'FItemRarity::Color' has a wrong offset!");

// ScriptStruct Flame.LevelDescriptionTableRow
// 0x0048 (0x0050 - 0x0008)
struct FLevelDescriptionTableRow final : public FTableRowBase
{
public:
	class FText                                   DisplayName;                                       // 0x0008(0x0018)(Edit, BlueprintVisible, DisableEditOnInstance, NativeAccessSpecifierPublic)
	class FString                                 DisplayNameCultureInvariant;                       // 0x0020(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 GamemodeAlias;                                     // 0x0030(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UTexture2D*                             ShelterMapImage;                                   // 0x0040(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ELevelCookSettings                            CookSettings;                                      // 0x0048(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_49[0x7];                                       // 0x0049(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FLevelDescriptionTableRow) == 0x000008, "Wrong alignment on FLevelDescriptionTableRow");
static_assert(sizeof(FLevelDescriptionTableRow) == 0x000050, "Wrong size on FLevelDescriptionTableRow");
static_assert(offsetof(FLevelDescriptionTableRow, DisplayName) == 0x000008, "Member 'FLevelDescriptionTableRow::DisplayName' has a wrong offset!");
static_assert(offsetof(FLevelDescriptionTableRow, DisplayNameCultureInvariant) == 0x000020, "Member 'FLevelDescriptionTableRow::DisplayNameCultureInvariant' has a wrong offset!");
static_assert(offsetof(FLevelDescriptionTableRow, GamemodeAlias) == 0x000030, "Member 'FLevelDescriptionTableRow::GamemodeAlias' has a wrong offset!");
static_assert(offsetof(FLevelDescriptionTableRow, ShelterMapImage) == 0x000040, "Member 'FLevelDescriptionTableRow::ShelterMapImage' has a wrong offset!");
static_assert(offsetof(FLevelDescriptionTableRow, CookSettings) == 0x000048, "Member 'FLevelDescriptionTableRow::CookSettings' has a wrong offset!");

// ScriptStruct Flame.NotificationParams
// 0x000C (0x000C - 0x0000)
struct FNotificationParams final
{
public:
	ENotificationChannel                          Channel;                                           // 0x0000(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Duration;                                          // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ENotificationExpirationPolicy                 ExpirationPolicy;                                  // 0x0008(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FNotificationParams) == 0x000004, "Wrong alignment on FNotificationParams");
static_assert(sizeof(FNotificationParams) == 0x00000C, "Wrong size on FNotificationParams");
static_assert(offsetof(FNotificationParams, Channel) == 0x000000, "Member 'FNotificationParams::Channel' has a wrong offset!");
static_assert(offsetof(FNotificationParams, Duration) == 0x000004, "Member 'FNotificationParams::Duration' has a wrong offset!");
static_assert(offsetof(FNotificationParams, ExpirationPolicy) == 0x000008, "Member 'FNotificationParams::ExpirationPolicy' has a wrong offset!");

// ScriptStruct Flame.CloudDataStructureConfig
// 0x0010 (0x0010 - 0x0000)
struct FCloudDataStructureConfig final
{
public:
	ECloudStructureTypes                          Type;                                              // 0x0000(0x0001)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   DownloadItemName;                                  // 0x0004(0x0008)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ManualLoad;                                        // 0x000C(0x0001)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Optional;                                          // 0x000D(0x0001)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_E[0x2];                                        // 0x000E(0x0002)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FCloudDataStructureConfig) == 0x000004, "Wrong alignment on FCloudDataStructureConfig");
static_assert(sizeof(FCloudDataStructureConfig) == 0x000010, "Wrong size on FCloudDataStructureConfig");
static_assert(offsetof(FCloudDataStructureConfig, Type) == 0x000000, "Member 'FCloudDataStructureConfig::Type' has a wrong offset!");
static_assert(offsetof(FCloudDataStructureConfig, DownloadItemName) == 0x000004, "Member 'FCloudDataStructureConfig::DownloadItemName' has a wrong offset!");
static_assert(offsetof(FCloudDataStructureConfig, ManualLoad) == 0x00000C, "Member 'FCloudDataStructureConfig::ManualLoad' has a wrong offset!");
static_assert(offsetof(FCloudDataStructureConfig, Optional) == 0x00000D, "Member 'FCloudDataStructureConfig::Optional' has a wrong offset!");

// ScriptStruct Flame.CloudDataStructuresConfig
// 0x0010 (0x0010 - 0x0000)
struct FCloudDataStructuresConfig final
{
public:
	TArray<struct FCloudDataStructureConfig>      Structures;                                        // 0x0000(0x0010)(Edit, ZeroConstructor, Config, NativeAccessSpecifierPublic)
};
static_assert(alignof(FCloudDataStructuresConfig) == 0x000008, "Wrong alignment on FCloudDataStructuresConfig");
static_assert(sizeof(FCloudDataStructuresConfig) == 0x000010, "Wrong size on FCloudDataStructuresConfig");
static_assert(offsetof(FCloudDataStructuresConfig, Structures) == 0x000000, "Member 'FCloudDataStructuresConfig::Structures' has a wrong offset!");

// ScriptStruct Flame.BoneRef
// 0x0010 (0x0010 - 0x0000)
struct FBoneRef final
{
public:
	struct FBoneReference                         Bone;                                              // 0x0000(0x0010)(Edit, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FBoneRef) == 0x000004, "Wrong alignment on FBoneRef");
static_assert(sizeof(FBoneRef) == 0x000010, "Wrong size on FBoneRef");
static_assert(offsetof(FBoneRef, Bone) == 0x000000, "Member 'FBoneRef::Bone' has a wrong offset!");

// ScriptStruct Flame.AnimNode_OrientationWarping
// 0x0058 (0x0068 - 0x0010)
struct FAnimNode_OrientationWarping final : public FAnimNode_Base
{
public:
	struct FPoseLink                              BasePose;                                          // 0x0010(0x0010)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	float                                         LocomotionAngle;                                   // 0x0020(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FAxisSettings                          Settings;                                          // 0x0024(0x0008)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	struct FBoneReference                         HipBone;                                           // 0x002C(0x0010)(Edit, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_3C[0x4];                                       // 0x003C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FBoneRef>                       SpineBones;                                        // 0x0040(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	struct FBoneReference                         IKFootRootBone;                                    // 0x0050(0x0010)(Edit, NoDestructor, NativeAccessSpecifierPublic)
	float                                         Alpha;                                             // 0x0060(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_64[0x4];                                       // 0x0064(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FAnimNode_OrientationWarping) == 0x000008, "Wrong alignment on FAnimNode_OrientationWarping");
static_assert(sizeof(FAnimNode_OrientationWarping) == 0x000068, "Wrong size on FAnimNode_OrientationWarping");
static_assert(offsetof(FAnimNode_OrientationWarping, BasePose) == 0x000010, "Member 'FAnimNode_OrientationWarping::BasePose' has a wrong offset!");
static_assert(offsetof(FAnimNode_OrientationWarping, LocomotionAngle) == 0x000020, "Member 'FAnimNode_OrientationWarping::LocomotionAngle' has a wrong offset!");
static_assert(offsetof(FAnimNode_OrientationWarping, Settings) == 0x000024, "Member 'FAnimNode_OrientationWarping::Settings' has a wrong offset!");
static_assert(offsetof(FAnimNode_OrientationWarping, HipBone) == 0x00002C, "Member 'FAnimNode_OrientationWarping::HipBone' has a wrong offset!");
static_assert(offsetof(FAnimNode_OrientationWarping, SpineBones) == 0x000040, "Member 'FAnimNode_OrientationWarping::SpineBones' has a wrong offset!");
static_assert(offsetof(FAnimNode_OrientationWarping, IKFootRootBone) == 0x000050, "Member 'FAnimNode_OrientationWarping::IKFootRootBone' has a wrong offset!");
static_assert(offsetof(FAnimNode_OrientationWarping, Alpha) == 0x000060, "Member 'FAnimNode_OrientationWarping::Alpha' has a wrong offset!");

// ScriptStruct Flame.FlameInput
// 0x000C (0x000C - 0x0000)
struct alignas(0x04) FFlameInput final
{
public:
	uint8                                         Pad_0[0xC];                                        // 0x0000(0x000C)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FFlameInput) == 0x000004, "Wrong alignment on FFlameInput");
static_assert(sizeof(FFlameInput) == 0x00000C, "Wrong size on FFlameInput");

// ScriptStruct Flame.AmbienceAreaLoopingSound
// 0x0020 (0x0020 - 0x0000)
struct FAmbienceAreaLoopingSound final
{
public:
	class USoundBase*                             Sound;                                             // 0x0000(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         NumInstances;                                      // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          PlaceOnGround;                                     // 0x000C(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D[0x3];                                        // 0x000D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class UAudioComponent*>                AudioComponents;                                   // 0x0010(0x0010)(BlueprintVisible, ExportObject, ZeroConstructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAmbienceAreaLoopingSound) == 0x000008, "Wrong alignment on FAmbienceAreaLoopingSound");
static_assert(sizeof(FAmbienceAreaLoopingSound) == 0x000020, "Wrong size on FAmbienceAreaLoopingSound");
static_assert(offsetof(FAmbienceAreaLoopingSound, Sound) == 0x000000, "Member 'FAmbienceAreaLoopingSound::Sound' has a wrong offset!");
static_assert(offsetof(FAmbienceAreaLoopingSound, NumInstances) == 0x000008, "Member 'FAmbienceAreaLoopingSound::NumInstances' has a wrong offset!");
static_assert(offsetof(FAmbienceAreaLoopingSound, PlaceOnGround) == 0x00000C, "Member 'FAmbienceAreaLoopingSound::PlaceOnGround' has a wrong offset!");
static_assert(offsetof(FAmbienceAreaLoopingSound, AudioComponents) == 0x000010, "Member 'FAmbienceAreaLoopingSound::AudioComponents' has a wrong offset!");

// ScriptStruct Flame.AmbienceAreaProceduralSound
// 0x0020 (0x0020 - 0x0000)
struct FAmbienceAreaProceduralSound final
{
public:
	class USoundBase*                             Sound;                                             // 0x0000(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MinDelay;                                          // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MaxDelay;                                          // 0x000C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          PlaceOnGround;                                     // 0x0010(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0xF];                                       // 0x0011(0x000F)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FAmbienceAreaProceduralSound) == 0x000008, "Wrong alignment on FAmbienceAreaProceduralSound");
static_assert(sizeof(FAmbienceAreaProceduralSound) == 0x000020, "Wrong size on FAmbienceAreaProceduralSound");
static_assert(offsetof(FAmbienceAreaProceduralSound, Sound) == 0x000000, "Member 'FAmbienceAreaProceduralSound::Sound' has a wrong offset!");
static_assert(offsetof(FAmbienceAreaProceduralSound, MinDelay) == 0x000008, "Member 'FAmbienceAreaProceduralSound::MinDelay' has a wrong offset!");
static_assert(offsetof(FAmbienceAreaProceduralSound, MaxDelay) == 0x00000C, "Member 'FAmbienceAreaProceduralSound::MaxDelay' has a wrong offset!");
static_assert(offsetof(FAmbienceAreaProceduralSound, PlaceOnGround) == 0x000010, "Member 'FAmbienceAreaProceduralSound::PlaceOnGround' has a wrong offset!");

// ScriptStruct Flame.CloudUserStat
// 0x0018 (0x0018 - 0x0000)
struct FCloudUserStat final
{
public:
	class FString                                 Name;                                              // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Value;                                             // 0x0010(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FCloudUserStat) == 0x000008, "Wrong alignment on FCloudUserStat");
static_assert(sizeof(FCloudUserStat) == 0x000018, "Wrong size on FCloudUserStat");
static_assert(offsetof(FCloudUserStat, Name) == 0x000000, "Member 'FCloudUserStat::Name' has a wrong offset!");
static_assert(offsetof(FCloudUserStat, Value) == 0x000010, "Member 'FCloudUserStat::Value' has a wrong offset!");

// ScriptStruct Flame.AnimAction
// 0x01A8 (0x01B8 - 0x0010)
struct FAnimAction final : public FAnimNode_Base
{
public:
	struct FAnimActionPars                        Input;                                             // 0x0010(0x0028)(Edit, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_38[0x180];                                     // 0x0038(0x0180)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FAnimAction) == 0x000008, "Wrong alignment on FAnimAction");
static_assert(sizeof(FAnimAction) == 0x0001B8, "Wrong size on FAnimAction");
static_assert(offsetof(FAnimAction, Input) == 0x000010, "Member 'FAnimAction::Input' has a wrong offset!");

// ScriptStruct Flame.AimingDebug
// 0x000C (0x000C - 0x0000)
struct FAimingDebug final
{
public:
	bool                                          Enabled;                                           // 0x0000(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Azimuth;                                           // 0x0004(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Altitude;                                          // 0x0008(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAimingDebug) == 0x000004, "Wrong alignment on FAimingDebug");
static_assert(sizeof(FAimingDebug) == 0x00000C, "Wrong size on FAimingDebug");
static_assert(offsetof(FAimingDebug, Enabled) == 0x000000, "Member 'FAimingDebug::Enabled' has a wrong offset!");
static_assert(offsetof(FAimingDebug, Azimuth) == 0x000004, "Member 'FAimingDebug::Azimuth' has a wrong offset!");
static_assert(offsetof(FAimingDebug, Altitude) == 0x000008, "Member 'FAimingDebug::Altitude' has a wrong offset!");

// ScriptStruct Flame.AudioWeatherInfo
// 0x0018 (0x0018 - 0x0000)
struct FAudioWeatherInfo final
{
public:
	float                                         RainAmount;                                        // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         WetnessAmount;                                     // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SnowingAmount;                                     // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                Wind;                                              // 0x000C(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAudioWeatherInfo) == 0x000004, "Wrong alignment on FAudioWeatherInfo");
static_assert(sizeof(FAudioWeatherInfo) == 0x000018, "Wrong size on FAudioWeatherInfo");
static_assert(offsetof(FAudioWeatherInfo, RainAmount) == 0x000000, "Member 'FAudioWeatherInfo::RainAmount' has a wrong offset!");
static_assert(offsetof(FAudioWeatherInfo, WetnessAmount) == 0x000004, "Member 'FAudioWeatherInfo::WetnessAmount' has a wrong offset!");
static_assert(offsetof(FAudioWeatherInfo, SnowingAmount) == 0x000008, "Member 'FAudioWeatherInfo::SnowingAmount' has a wrong offset!");
static_assert(offsetof(FAudioWeatherInfo, Wind) == 0x00000C, "Member 'FAudioWeatherInfo::Wind' has a wrong offset!");

// ScriptStruct Flame.AudioOcclusionMainTraceResult
// 0x0010 (0x0010 - 0x0000)
struct FAudioOcclusionMainTraceResult final
{
public:
	float                                         CloseOcclusionIndex;                               // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         FarOcclusionIndex;                                 // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         CloseLowPassIndex;                                 // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         FarLowPassIndex;                                   // 0x000C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAudioOcclusionMainTraceResult) == 0x000004, "Wrong alignment on FAudioOcclusionMainTraceResult");
static_assert(sizeof(FAudioOcclusionMainTraceResult) == 0x000010, "Wrong size on FAudioOcclusionMainTraceResult");
static_assert(offsetof(FAudioOcclusionMainTraceResult, CloseOcclusionIndex) == 0x000000, "Member 'FAudioOcclusionMainTraceResult::CloseOcclusionIndex' has a wrong offset!");
static_assert(offsetof(FAudioOcclusionMainTraceResult, FarOcclusionIndex) == 0x000004, "Member 'FAudioOcclusionMainTraceResult::FarOcclusionIndex' has a wrong offset!");
static_assert(offsetof(FAudioOcclusionMainTraceResult, CloseLowPassIndex) == 0x000008, "Member 'FAudioOcclusionMainTraceResult::CloseLowPassIndex' has a wrong offset!");
static_assert(offsetof(FAudioOcclusionMainTraceResult, FarLowPassIndex) == 0x00000C, "Member 'FAudioOcclusionMainTraceResult::FarLowPassIndex' has a wrong offset!");

// ScriptStruct Flame.LeaderBoardsDetailRequest
// 0x0030 (0x0030 - 0x0000)
struct FLeaderBoardsDetailRequest final
{
public:
	EOnlineGameMode                               GameMode;                                          // 0x0000(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 Interval;                                          // 0x0008(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EStatType                                     StatType;                                          // 0x0018(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FGuid>                          Friends;                                           // 0x0020(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FLeaderBoardsDetailRequest) == 0x000008, "Wrong alignment on FLeaderBoardsDetailRequest");
static_assert(sizeof(FLeaderBoardsDetailRequest) == 0x000030, "Wrong size on FLeaderBoardsDetailRequest");
static_assert(offsetof(FLeaderBoardsDetailRequest, GameMode) == 0x000000, "Member 'FLeaderBoardsDetailRequest::GameMode' has a wrong offset!");
static_assert(offsetof(FLeaderBoardsDetailRequest, Interval) == 0x000008, "Member 'FLeaderBoardsDetailRequest::Interval' has a wrong offset!");
static_assert(offsetof(FLeaderBoardsDetailRequest, StatType) == 0x000018, "Member 'FLeaderBoardsDetailRequest::StatType' has a wrong offset!");
static_assert(offsetof(FLeaderBoardsDetailRequest, Friends) == 0x000020, "Member 'FLeaderBoardsDetailRequest::Friends' has a wrong offset!");

// ScriptStruct Flame.AudioOcclusionSideTraceResult
// 0x0010 (0x0010 - 0x0000)
struct FAudioOcclusionSideTraceResult final
{
public:
	float                                         OcclusionIndex;                                    // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         LowPassIndex;                                      // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         OcclusionWeight;                                   // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         LowPassWeight;                                     // 0x000C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAudioOcclusionSideTraceResult) == 0x000004, "Wrong alignment on FAudioOcclusionSideTraceResult");
static_assert(sizeof(FAudioOcclusionSideTraceResult) == 0x000010, "Wrong size on FAudioOcclusionSideTraceResult");
static_assert(offsetof(FAudioOcclusionSideTraceResult, OcclusionIndex) == 0x000000, "Member 'FAudioOcclusionSideTraceResult::OcclusionIndex' has a wrong offset!");
static_assert(offsetof(FAudioOcclusionSideTraceResult, LowPassIndex) == 0x000004, "Member 'FAudioOcclusionSideTraceResult::LowPassIndex' has a wrong offset!");
static_assert(offsetof(FAudioOcclusionSideTraceResult, OcclusionWeight) == 0x000008, "Member 'FAudioOcclusionSideTraceResult::OcclusionWeight' has a wrong offset!");
static_assert(offsetof(FAudioOcclusionSideTraceResult, LowPassWeight) == 0x00000C, "Member 'FAudioOcclusionSideTraceResult::LowPassWeight' has a wrong offset!");

// ScriptStruct Flame.AudioOcclusionTraceHit
// 0x000C (0x000C - 0x0000)
struct FAudioOcclusionTraceHit final
{
public:
	EPhysicalSurface                              SurfaceType;                                       // 0x0000(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Depth;                                             // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Distance;                                          // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAudioOcclusionTraceHit) == 0x000004, "Wrong alignment on FAudioOcclusionTraceHit");
static_assert(sizeof(FAudioOcclusionTraceHit) == 0x00000C, "Wrong size on FAudioOcclusionTraceHit");
static_assert(offsetof(FAudioOcclusionTraceHit, SurfaceType) == 0x000000, "Member 'FAudioOcclusionTraceHit::SurfaceType' has a wrong offset!");
static_assert(offsetof(FAudioOcclusionTraceHit, Depth) == 0x000004, "Member 'FAudioOcclusionTraceHit::Depth' has a wrong offset!");
static_assert(offsetof(FAudioOcclusionTraceHit, Distance) == 0x000008, "Member 'FAudioOcclusionTraceHit::Distance' has a wrong offset!");

// ScriptStruct Flame.CollectiblesList
// 0x0030 (0x0150 - 0x0120)
struct FCollectiblesList final : public FItemClassTableRowWithInsurance
{
public:
	TSubclassOf<class ACollectibleItem>           Class;                                             // 0x0120(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FDataTableRowHandle                    AssociatedSeason;                                  // 0x0128(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         UnlockOrderInSeason;                               // 0x0138(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_139[0x7];                                      // 0x0139(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<TSoftObjectPtr<class UMaterialInstance>> ShelterPreviewMaterials;                           // 0x0140(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, UObjectWrapper, NativeAccessSpecifierPublic)
};
static_assert(alignof(FCollectiblesList) == 0x000008, "Wrong alignment on FCollectiblesList");
static_assert(sizeof(FCollectiblesList) == 0x000150, "Wrong size on FCollectiblesList");
static_assert(offsetof(FCollectiblesList, Class) == 0x000120, "Member 'FCollectiblesList::Class' has a wrong offset!");
static_assert(offsetof(FCollectiblesList, AssociatedSeason) == 0x000128, "Member 'FCollectiblesList::AssociatedSeason' has a wrong offset!");
static_assert(offsetof(FCollectiblesList, UnlockOrderInSeason) == 0x000138, "Member 'FCollectiblesList::UnlockOrderInSeason' has a wrong offset!");
static_assert(offsetof(FCollectiblesList, ShelterPreviewMaterials) == 0x000140, "Member 'FCollectiblesList::ShelterPreviewMaterials' has a wrong offset!");

// ScriptStruct Flame.CloudReportPlayerRequest
// 0x0020 (0x0020 - 0x0000)
struct FCloudReportPlayerRequest final
{
public:
	class FString                                 UserAnalyticsId;                                   // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Reason;                                            // 0x0010(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FCloudReportPlayerRequest) == 0x000008, "Wrong alignment on FCloudReportPlayerRequest");
static_assert(sizeof(FCloudReportPlayerRequest) == 0x000020, "Wrong size on FCloudReportPlayerRequest");
static_assert(offsetof(FCloudReportPlayerRequest, UserAnalyticsId) == 0x000000, "Member 'FCloudReportPlayerRequest::UserAnalyticsId' has a wrong offset!");
static_assert(offsetof(FCloudReportPlayerRequest, Reason) == 0x000010, "Member 'FCloudReportPlayerRequest::Reason' has a wrong offset!");

// ScriptStruct Flame.BattlePassLevelReward
// 0x0010 (0x0010 - 0x0000)
struct FBattlePassLevelReward final
{
public:
	TSubclassOf<class AItem>                      ItemType;                                          // 0x0000(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Count;                                             // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FBattlePassLevelReward) == 0x000008, "Wrong alignment on FBattlePassLevelReward");
static_assert(sizeof(FBattlePassLevelReward) == 0x000010, "Wrong size on FBattlePassLevelReward");
static_assert(offsetof(FBattlePassLevelReward, ItemType) == 0x000000, "Member 'FBattlePassLevelReward::ItemType' has a wrong offset!");
static_assert(offsetof(FBattlePassLevelReward, Count) == 0x000008, "Member 'FBattlePassLevelReward::Count' has a wrong offset!");

// ScriptStruct Flame.FlameTimerInfo
// 0x0018 (0x0018 - 0x0000)
struct alignas(0x08) FFlameTimerInfo final
{
public:
	uint8                                         Pad_0[0x18];                                       // 0x0000(0x0018)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FFlameTimerInfo) == 0x000008, "Wrong alignment on FFlameTimerInfo");
static_assert(sizeof(FFlameTimerInfo) == 0x000018, "Wrong size on FFlameTimerInfo");

// ScriptStruct Flame.AimAndShootBehaviorData
// 0x0034 (0x0034 - 0x0000)
struct FAimAndShootBehaviorData final
{
public:
	uint32                                        SelectionRate;                                     // 0x0000(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EAimAndShootBehaviorType                      BehaviorType;                                      // 0x0004(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         NextMandatoryBehavior;                             // 0x0008(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MaxDistanceForShootable;                           // 0x000C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bUseShotNumberForBehaviorDuration;                 // 0x0010(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x3];                                       // 0x0011(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         DurationMin;                                       // 0x0014(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DurationMax;                                       // 0x0018(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int8                                          DurationShotBulletMin;                             // 0x001C(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int8                                          DurationShotBulletMax;                             // 0x001D(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1E[0x2];                                       // 0x001E(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         TimeBetweenShotsMin;                               // 0x0020(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TimeBetweenShotsMax;                               // 0x0024(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ShortestDistanceToEnemy;                           // 0x0028(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         FarthestDistanceToEnemy;                           // 0x002C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         SuccessRateNear;                                   // 0x0030(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         SuccessRateFar;                                    // 0x0031(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_32[0x2];                                       // 0x0032(0x0002)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FAimAndShootBehaviorData) == 0x000004, "Wrong alignment on FAimAndShootBehaviorData");
static_assert(sizeof(FAimAndShootBehaviorData) == 0x000034, "Wrong size on FAimAndShootBehaviorData");
static_assert(offsetof(FAimAndShootBehaviorData, SelectionRate) == 0x000000, "Member 'FAimAndShootBehaviorData::SelectionRate' has a wrong offset!");
static_assert(offsetof(FAimAndShootBehaviorData, BehaviorType) == 0x000004, "Member 'FAimAndShootBehaviorData::BehaviorType' has a wrong offset!");
static_assert(offsetof(FAimAndShootBehaviorData, NextMandatoryBehavior) == 0x000008, "Member 'FAimAndShootBehaviorData::NextMandatoryBehavior' has a wrong offset!");
static_assert(offsetof(FAimAndShootBehaviorData, MaxDistanceForShootable) == 0x00000C, "Member 'FAimAndShootBehaviorData::MaxDistanceForShootable' has a wrong offset!");
static_assert(offsetof(FAimAndShootBehaviorData, bUseShotNumberForBehaviorDuration) == 0x000010, "Member 'FAimAndShootBehaviorData::bUseShotNumberForBehaviorDuration' has a wrong offset!");
static_assert(offsetof(FAimAndShootBehaviorData, DurationMin) == 0x000014, "Member 'FAimAndShootBehaviorData::DurationMin' has a wrong offset!");
static_assert(offsetof(FAimAndShootBehaviorData, DurationMax) == 0x000018, "Member 'FAimAndShootBehaviorData::DurationMax' has a wrong offset!");
static_assert(offsetof(FAimAndShootBehaviorData, DurationShotBulletMin) == 0x00001C, "Member 'FAimAndShootBehaviorData::DurationShotBulletMin' has a wrong offset!");
static_assert(offsetof(FAimAndShootBehaviorData, DurationShotBulletMax) == 0x00001D, "Member 'FAimAndShootBehaviorData::DurationShotBulletMax' has a wrong offset!");
static_assert(offsetof(FAimAndShootBehaviorData, TimeBetweenShotsMin) == 0x000020, "Member 'FAimAndShootBehaviorData::TimeBetweenShotsMin' has a wrong offset!");
static_assert(offsetof(FAimAndShootBehaviorData, TimeBetweenShotsMax) == 0x000024, "Member 'FAimAndShootBehaviorData::TimeBetweenShotsMax' has a wrong offset!");
static_assert(offsetof(FAimAndShootBehaviorData, ShortestDistanceToEnemy) == 0x000028, "Member 'FAimAndShootBehaviorData::ShortestDistanceToEnemy' has a wrong offset!");
static_assert(offsetof(FAimAndShootBehaviorData, FarthestDistanceToEnemy) == 0x00002C, "Member 'FAimAndShootBehaviorData::FarthestDistanceToEnemy' has a wrong offset!");
static_assert(offsetof(FAimAndShootBehaviorData, SuccessRateNear) == 0x000030, "Member 'FAimAndShootBehaviorData::SuccessRateNear' has a wrong offset!");
static_assert(offsetof(FAimAndShootBehaviorData, SuccessRateFar) == 0x000031, "Member 'FAimAndShootBehaviorData::SuccessRateFar' has a wrong offset!");

// ScriptStruct Flame.BuildingDoorData
// 0x0080 (0x0080 - 0x0000)
struct FBuildingDoorData final
{
public:
	struct FDoorReference                         Ref;                                               // 0x0000(0x0060)(NativeAccessSpecifierPublic)
	int32                                         MaterialIndex;                                     // 0x0060(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bCanBeRammed;                                      // 0x0064(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EBuildingOverrideBehavior                     OverrideBehavior;                                  // 0x0065(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_66[0x2];                                       // 0x0066(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         MaxApertureAngle;                                  // 0x0068(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_6C[0x4];                                       // 0x006C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class FName>                           Tags;                                              // 0x0070(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FBuildingDoorData) == 0x000010, "Wrong alignment on FBuildingDoorData");
static_assert(sizeof(FBuildingDoorData) == 0x000080, "Wrong size on FBuildingDoorData");
static_assert(offsetof(FBuildingDoorData, Ref) == 0x000000, "Member 'FBuildingDoorData::Ref' has a wrong offset!");
static_assert(offsetof(FBuildingDoorData, MaterialIndex) == 0x000060, "Member 'FBuildingDoorData::MaterialIndex' has a wrong offset!");
static_assert(offsetof(FBuildingDoorData, bCanBeRammed) == 0x000064, "Member 'FBuildingDoorData::bCanBeRammed' has a wrong offset!");
static_assert(offsetof(FBuildingDoorData, OverrideBehavior) == 0x000065, "Member 'FBuildingDoorData::OverrideBehavior' has a wrong offset!");
static_assert(offsetof(FBuildingDoorData, MaxApertureAngle) == 0x000068, "Member 'FBuildingDoorData::MaxApertureAngle' has a wrong offset!");
static_assert(offsetof(FBuildingDoorData, Tags) == 0x000070, "Member 'FBuildingDoorData::Tags' has a wrong offset!");

// ScriptStruct Flame.CloudCraftingQueue
// 0x0028 (0x0028 - 0x0000)
struct FCloudCraftingQueue final
{
public:
	struct FDateTime                              From;                                              // 0x0000(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FDateTime                              To;                                                // 0x0008(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         QueueId;                                           // 0x0010(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         BoostPrice;                                        // 0x0014(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_18[0x10];                                      // 0x0018(0x0010)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FCloudCraftingQueue) == 0x000008, "Wrong alignment on FCloudCraftingQueue");
static_assert(sizeof(FCloudCraftingQueue) == 0x000028, "Wrong size on FCloudCraftingQueue");
static_assert(offsetof(FCloudCraftingQueue, From) == 0x000000, "Member 'FCloudCraftingQueue::From' has a wrong offset!");
static_assert(offsetof(FCloudCraftingQueue, To) == 0x000008, "Member 'FCloudCraftingQueue::To' has a wrong offset!");
static_assert(offsetof(FCloudCraftingQueue, QueueId) == 0x000010, "Member 'FCloudCraftingQueue::QueueId' has a wrong offset!");
static_assert(offsetof(FCloudCraftingQueue, BoostPrice) == 0x000014, "Member 'FCloudCraftingQueue::BoostPrice' has a wrong offset!");

// ScriptStruct Flame.CraftingItemInfo
// 0x0030 (0x0030 - 0x0000)
struct FCraftingItemInfo final
{
public:
	struct FCloudCraftingQueue                    QueueInfo;                                         // 0x0000(0x0028)(Edit, BlueprintVisible, BlueprintReadOnly, EditConst, NativeAccessSpecifierPublic)
	bool                                          bValid;                                            // 0x0028(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_29[0x7];                                       // 0x0029(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FCraftingItemInfo) == 0x000008, "Wrong alignment on FCraftingItemInfo");
static_assert(sizeof(FCraftingItemInfo) == 0x000030, "Wrong size on FCraftingItemInfo");
static_assert(offsetof(FCraftingItemInfo, QueueInfo) == 0x000000, "Member 'FCraftingItemInfo::QueueInfo' has a wrong offset!");
static_assert(offsetof(FCraftingItemInfo, bValid) == 0x000028, "Member 'FCraftingItemInfo::bValid' has a wrong offset!");

// ScriptStruct Flame.WindowReference
// 0x0060 (0x0060 - 0x0000)
struct FWindowReference final
{
public:
	TSoftObjectPtr<class AWindow>                 Window;                                            // 0x0000(0x0028)(Edit, BlueprintVisible, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   WindowTag;                                         // 0x0028(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FTransform                             WindowTransform;                                   // 0x0030(0x0030)(Edit, BlueprintVisible, BlueprintReadOnly, EditConst, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FWindowReference) == 0x000010, "Wrong alignment on FWindowReference");
static_assert(sizeof(FWindowReference) == 0x000060, "Wrong size on FWindowReference");
static_assert(offsetof(FWindowReference, Window) == 0x000000, "Member 'FWindowReference::Window' has a wrong offset!");
static_assert(offsetof(FWindowReference, WindowTag) == 0x000028, "Member 'FWindowReference::WindowTag' has a wrong offset!");
static_assert(offsetof(FWindowReference, WindowTransform) == 0x000030, "Member 'FWindowReference::WindowTransform' has a wrong offset!");

// ScriptStruct Flame.BuildingWindowData
// 0x0080 (0x0080 - 0x0000)
struct FBuildingWindowData final
{
public:
	struct FWindowReference                       Ref;                                               // 0x0000(0x0060)(NativeAccessSpecifierPublic)
	EBuildingOverrideBehavior                     OverrideBehavior;                                  // 0x0060(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_61[0x3];                                       // 0x0061(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         MaterialIndex;                                     // 0x0064(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class FName>                           Tags;                                              // 0x0068(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_78[0x8];                                       // 0x0078(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FBuildingWindowData) == 0x000010, "Wrong alignment on FBuildingWindowData");
static_assert(sizeof(FBuildingWindowData) == 0x000080, "Wrong size on FBuildingWindowData");
static_assert(offsetof(FBuildingWindowData, Ref) == 0x000000, "Member 'FBuildingWindowData::Ref' has a wrong offset!");
static_assert(offsetof(FBuildingWindowData, OverrideBehavior) == 0x000060, "Member 'FBuildingWindowData::OverrideBehavior' has a wrong offset!");
static_assert(offsetof(FBuildingWindowData, MaterialIndex) == 0x000064, "Member 'FBuildingWindowData::MaterialIndex' has a wrong offset!");
static_assert(offsetof(FBuildingWindowData, Tags) == 0x000068, "Member 'FBuildingWindowData::Tags' has a wrong offset!");

// ScriptStruct Flame.CustomizationHeadgearsList
// 0x0010 (0x0050 - 0x0040)
struct FCustomizationHeadgearsList final : public FClassTableRowWithDisplayName
{
public:
	TSubclassOf<class ACustomization>             Class;                                             // 0x0040(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EHairUnderHeadgearMode                        HairMode;                                          // 0x0048(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4C[0x4];                                       // 0x004C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FCustomizationHeadgearsList) == 0x000008, "Wrong alignment on FCustomizationHeadgearsList");
static_assert(sizeof(FCustomizationHeadgearsList) == 0x000050, "Wrong size on FCustomizationHeadgearsList");
static_assert(offsetof(FCustomizationHeadgearsList, Class) == 0x000040, "Member 'FCustomizationHeadgearsList::Class' has a wrong offset!");
static_assert(offsetof(FCustomizationHeadgearsList, HairMode) == 0x000048, "Member 'FCustomizationHeadgearsList::HairMode' has a wrong offset!");

// ScriptStruct Flame.WindowSashSetReference
// 0x0060 (0x0060 - 0x0000)
struct FWindowSashSetReference final
{
public:
	TSoftObjectPtr<class AWindowSashSet>          WindowSashSet;                                     // 0x0000(0x0028)(Edit, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         WindowSashSetIdx;                                  // 0x0028(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2C[0x4];                                       // 0x002C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TSoftObjectPtr<class AWindow>                 Window;                                            // 0x0030(0x0028)(UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   WindowTag;                                         // 0x0058(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FWindowSashSetReference) == 0x000008, "Wrong alignment on FWindowSashSetReference");
static_assert(sizeof(FWindowSashSetReference) == 0x000060, "Wrong size on FWindowSashSetReference");
static_assert(offsetof(FWindowSashSetReference, WindowSashSet) == 0x000000, "Member 'FWindowSashSetReference::WindowSashSet' has a wrong offset!");
static_assert(offsetof(FWindowSashSetReference, WindowSashSetIdx) == 0x000028, "Member 'FWindowSashSetReference::WindowSashSetIdx' has a wrong offset!");
static_assert(offsetof(FWindowSashSetReference, Window) == 0x000030, "Member 'FWindowSashSetReference::Window' has a wrong offset!");
static_assert(offsetof(FWindowSashSetReference, WindowTag) == 0x000058, "Member 'FWindowSashSetReference::WindowTag' has a wrong offset!");

// ScriptStruct Flame.ActiveDecal
// 0x0010 (0x0010 - 0x0000)
struct FActiveDecal final
{
public:
	float                                         DecalLifeTime;                                     // 0x0000(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UDecalComponent*                        DecalPtr;                                          // 0x0008(0x0008)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FActiveDecal) == 0x000008, "Wrong alignment on FActiveDecal");
static_assert(sizeof(FActiveDecal) == 0x000010, "Wrong size on FActiveDecal");
static_assert(offsetof(FActiveDecal, DecalLifeTime) == 0x000000, "Member 'FActiveDecal::DecalLifeTime' has a wrong offset!");
static_assert(offsetof(FActiveDecal, DecalPtr) == 0x000008, "Member 'FActiveDecal::DecalPtr' has a wrong offset!");

// ScriptStruct Flame.ObjectDamage
// 0x0008 (0x0010 - 0x0008)
struct FObjectDamage final : public FTableRowBase
{
public:
	float                                         Penetrability;                                     // 0x0008(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bWet;                                              // 0x000C(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EPhysicalSurface                              SurfaceType;                                       // 0x000D(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_E[0x2];                                        // 0x000E(0x0002)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FObjectDamage) == 0x000008, "Wrong alignment on FObjectDamage");
static_assert(sizeof(FObjectDamage) == 0x000010, "Wrong size on FObjectDamage");
static_assert(offsetof(FObjectDamage, Penetrability) == 0x000008, "Member 'FObjectDamage::Penetrability' has a wrong offset!");
static_assert(offsetof(FObjectDamage, bWet) == 0x00000C, "Member 'FObjectDamage::bWet' has a wrong offset!");
static_assert(offsetof(FObjectDamage, SurfaceType) == 0x00000D, "Member 'FObjectDamage::SurfaceType' has a wrong offset!");

// ScriptStruct Flame.HumanCharacterInfo
// 0x0028 (0x0028 - 0x0000)
struct alignas(0x08) FHumanCharacterInfo final
{
public:
	uint8                                         Pad_0[0x28];                                       // 0x0000(0x0028)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FHumanCharacterInfo) == 0x000008, "Wrong alignment on FHumanCharacterInfo");
static_assert(sizeof(FHumanCharacterInfo) == 0x000028, "Wrong size on FHumanCharacterInfo");

// ScriptStruct Flame.PitchCheckStage
// 0x0010 (0x0010 - 0x0000)
struct FPitchCheckStage final
{
public:
	struct FVector                                Forward;                                           // 0x0000(0x000C)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ProbeSize;                                         // 0x000C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FPitchCheckStage) == 0x000004, "Wrong alignment on FPitchCheckStage");
static_assert(sizeof(FPitchCheckStage) == 0x000010, "Wrong size on FPitchCheckStage");
static_assert(offsetof(FPitchCheckStage, Forward) == 0x000000, "Member 'FPitchCheckStage::Forward' has a wrong offset!");
static_assert(offsetof(FPitchCheckStage, ProbeSize) == 0x00000C, "Member 'FPitchCheckStage::ProbeSize' has a wrong offset!");

// ScriptStruct Flame.PitchCheckSetting
// 0x0058 (0x0058 - 0x0000)
struct FPitchCheckSetting final
{
public:
	TArray<struct FPitchCheckStage>               PitchCheckStages;                                  // 0x0000(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	struct FVector                                OffsetStanding;                                    // 0x0010(0x000C)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                OffsetCrouching;                                   // 0x001C(0x000C)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                OffsetProne;                                       // 0x0028(0x000C)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                StartOffsetStanding;                               // 0x0034(0x000C)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                StartOffsetCrouching;                              // 0x0040(0x000C)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                StartOffsetProne;                                  // 0x004C(0x000C)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FPitchCheckSetting) == 0x000008, "Wrong alignment on FPitchCheckSetting");
static_assert(sizeof(FPitchCheckSetting) == 0x000058, "Wrong size on FPitchCheckSetting");
static_assert(offsetof(FPitchCheckSetting, PitchCheckStages) == 0x000000, "Member 'FPitchCheckSetting::PitchCheckStages' has a wrong offset!");
static_assert(offsetof(FPitchCheckSetting, OffsetStanding) == 0x000010, "Member 'FPitchCheckSetting::OffsetStanding' has a wrong offset!");
static_assert(offsetof(FPitchCheckSetting, OffsetCrouching) == 0x00001C, "Member 'FPitchCheckSetting::OffsetCrouching' has a wrong offset!");
static_assert(offsetof(FPitchCheckSetting, OffsetProne) == 0x000028, "Member 'FPitchCheckSetting::OffsetProne' has a wrong offset!");
static_assert(offsetof(FPitchCheckSetting, StartOffsetStanding) == 0x000034, "Member 'FPitchCheckSetting::StartOffsetStanding' has a wrong offset!");
static_assert(offsetof(FPitchCheckSetting, StartOffsetCrouching) == 0x000040, "Member 'FPitchCheckSetting::StartOffsetCrouching' has a wrong offset!");
static_assert(offsetof(FPitchCheckSetting, StartOffsetProne) == 0x00004C, "Member 'FPitchCheckSetting::StartOffsetProne' has a wrong offset!");

// ScriptStruct Flame.CameraFOV
// 0x0018 (0x0018 - 0x0000)
struct FCameraFOV final
{
public:
	float                                         InterpExponent;                                    // 0x0000(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         InterpTargetSpeed;                                 // 0x0004(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         InterpAccelerationSpeed;                           // 0x0008(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0xC];                                        // 0x000C(0x000C)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FCameraFOV) == 0x000004, "Wrong alignment on FCameraFOV");
static_assert(sizeof(FCameraFOV) == 0x000018, "Wrong size on FCameraFOV");
static_assert(offsetof(FCameraFOV, InterpExponent) == 0x000000, "Member 'FCameraFOV::InterpExponent' has a wrong offset!");
static_assert(offsetof(FCameraFOV, InterpTargetSpeed) == 0x000004, "Member 'FCameraFOV::InterpTargetSpeed' has a wrong offset!");
static_assert(offsetof(FCameraFOV, InterpAccelerationSpeed) == 0x000008, "Member 'FCameraFOV::InterpAccelerationSpeed' has a wrong offset!");

// ScriptStruct Flame.CustomizatinMaterials
// 0x0050 (0x0050 - 0x0000)
struct FCustomizatinMaterials final
{
public:
	TMap<class FString, TSoftObjectPtr<class UMaterialInstance>> Materials;                                         // 0x0000(0x0050)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, UObjectWrapper, NativeAccessSpecifierPublic)
};
static_assert(alignof(FCustomizatinMaterials) == 0x000008, "Wrong alignment on FCustomizatinMaterials");
static_assert(sizeof(FCustomizatinMaterials) == 0x000050, "Wrong size on FCustomizatinMaterials");
static_assert(offsetof(FCustomizatinMaterials, Materials) == 0x000000, "Member 'FCustomizatinMaterials::Materials' has a wrong offset!");

// ScriptStruct Flame.WeaponCollisionEntry
// 0x0038 (0x0038 - 0x0000)
struct FWeaponCollisionEntry final
{
public:
	float                                         Pitch;                                             // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Yaw;                                               // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSubclassOf<class AWeapon>                    WeaponClass;                                       // 0x0008(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EStance                                       ActiveStance;                                      // 0x0010(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x3];                                       // 0x0011(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                WeaponStart;                                       // 0x0014(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                WeaponEnd;                                         // 0x0020(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                Camera;                                            // 0x002C(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FWeaponCollisionEntry) == 0x000008, "Wrong alignment on FWeaponCollisionEntry");
static_assert(sizeof(FWeaponCollisionEntry) == 0x000038, "Wrong size on FWeaponCollisionEntry");
static_assert(offsetof(FWeaponCollisionEntry, Pitch) == 0x000000, "Member 'FWeaponCollisionEntry::Pitch' has a wrong offset!");
static_assert(offsetof(FWeaponCollisionEntry, Yaw) == 0x000004, "Member 'FWeaponCollisionEntry::Yaw' has a wrong offset!");
static_assert(offsetof(FWeaponCollisionEntry, WeaponClass) == 0x000008, "Member 'FWeaponCollisionEntry::WeaponClass' has a wrong offset!");
static_assert(offsetof(FWeaponCollisionEntry, ActiveStance) == 0x000010, "Member 'FWeaponCollisionEntry::ActiveStance' has a wrong offset!");
static_assert(offsetof(FWeaponCollisionEntry, WeaponStart) == 0x000014, "Member 'FWeaponCollisionEntry::WeaponStart' has a wrong offset!");
static_assert(offsetof(FWeaponCollisionEntry, WeaponEnd) == 0x000020, "Member 'FWeaponCollisionEntry::WeaponEnd' has a wrong offset!");
static_assert(offsetof(FWeaponCollisionEntry, Camera) == 0x00002C, "Member 'FWeaponCollisionEntry::Camera' has a wrong offset!");

// ScriptStruct Flame.1DAimLookup
// 0x0180 (0x0180 - 0x0000)
struct FOneDAimLookup final
{
public:
	struct FRichCurve                             X;                                                 // 0x0000(0x0080)(Edit, EditConst, NativeAccessSpecifierPublic)
	struct FRichCurve                             Y;                                                 // 0x0080(0x0080)(Edit, EditConst, NativeAccessSpecifierPublic)
	struct FRichCurve                             Z;                                                 // 0x0100(0x0080)(Edit, EditConst, NativeAccessSpecifierPublic)
};
static_assert(alignof(FOneDAimLookup) == 0x000008, "Wrong alignment on FOneDAimLookup");
static_assert(sizeof(FOneDAimLookup) == 0x000180, "Wrong size on FOneDAimLookup");
static_assert(offsetof(FOneDAimLookup, X) == 0x000000, "Member 'FOneDAimLookup::X' has a wrong offset!");
static_assert(offsetof(FOneDAimLookup, Y) == 0x000080, "Member 'FOneDAimLookup::Y' has a wrong offset!");
static_assert(offsetof(FOneDAimLookup, Z) == 0x000100, "Member 'FOneDAimLookup::Z' has a wrong offset!");

// ScriptStruct Flame.2DAimLookup
// 0x0028 (0x0028 - 0x0000)
struct FTwoDAimLookup final
{
public:
	TArray<struct FVector>                        Table;                                             // 0x0000(0x0010)(Edit, ZeroConstructor, EditConst, NativeAccessSpecifierPublic)
	float                                         MinX;                                              // 0x0010(0x0004)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MaxX;                                              // 0x0014(0x0004)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MinY;                                              // 0x0018(0x0004)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MaxY;                                              // 0x001C(0x0004)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2D                              InvDim;                                            // 0x0020(0x0008)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
};
static_assert(alignof(FTwoDAimLookup) == 0x000008, "Wrong alignment on FTwoDAimLookup");
static_assert(sizeof(FTwoDAimLookup) == 0x000028, "Wrong size on FTwoDAimLookup");
static_assert(offsetof(FTwoDAimLookup, Table) == 0x000000, "Member 'FTwoDAimLookup::Table' has a wrong offset!");
static_assert(offsetof(FTwoDAimLookup, MinX) == 0x000010, "Member 'FTwoDAimLookup::MinX' has a wrong offset!");
static_assert(offsetof(FTwoDAimLookup, MaxX) == 0x000014, "Member 'FTwoDAimLookup::MaxX' has a wrong offset!");
static_assert(offsetof(FTwoDAimLookup, MinY) == 0x000018, "Member 'FTwoDAimLookup::MinY' has a wrong offset!");
static_assert(offsetof(FTwoDAimLookup, MaxY) == 0x00001C, "Member 'FTwoDAimLookup::MaxY' has a wrong offset!");
static_assert(offsetof(FTwoDAimLookup, InvDim) == 0x000020, "Member 'FTwoDAimLookup::InvDim' has a wrong offset!");

// ScriptStruct Flame.WeaponCollision
// 0x0338 (0x0338 - 0x0000)
struct FWeaponCollision final
{
public:
	float                                         Length;                                            // 0x0000(0x0004)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         WeaponLength;                                      // 0x0004(0x0004)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DistanceToCamera;                                  // 0x0008(0x0004)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Radius;                                            // 0x000C(0x0004)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FOneDAimLookup                         Curve_Stand;                                       // 0x0010(0x0180)(Edit, EditConst, NativeAccessSpecifierPublic)
	struct FOneDAimLookup                         Curve_Crouch;                                      // 0x0190(0x0180)(Edit, EditConst, NativeAccessSpecifierPublic)
	struct FTwoDAimLookup                         Curves_Prone;                                      // 0x0310(0x0028)(Edit, EditConst, NativeAccessSpecifierPublic)
};
static_assert(alignof(FWeaponCollision) == 0x000008, "Wrong alignment on FWeaponCollision");
static_assert(sizeof(FWeaponCollision) == 0x000338, "Wrong size on FWeaponCollision");
static_assert(offsetof(FWeaponCollision, Length) == 0x000000, "Member 'FWeaponCollision::Length' has a wrong offset!");
static_assert(offsetof(FWeaponCollision, WeaponLength) == 0x000004, "Member 'FWeaponCollision::WeaponLength' has a wrong offset!");
static_assert(offsetof(FWeaponCollision, DistanceToCamera) == 0x000008, "Member 'FWeaponCollision::DistanceToCamera' has a wrong offset!");
static_assert(offsetof(FWeaponCollision, Radius) == 0x00000C, "Member 'FWeaponCollision::Radius' has a wrong offset!");
static_assert(offsetof(FWeaponCollision, Curve_Stand) == 0x000010, "Member 'FWeaponCollision::Curve_Stand' has a wrong offset!");
static_assert(offsetof(FWeaponCollision, Curve_Crouch) == 0x000190, "Member 'FWeaponCollision::Curve_Crouch' has a wrong offset!");
static_assert(offsetof(FWeaponCollision, Curves_Prone) == 0x000310, "Member 'FWeaponCollision::Curves_Prone' has a wrong offset!");

// ScriptStruct Flame.CanvasUVQuad
// 0x000C (0x000C - 0x0000)
struct FCanvasUVQuad final
{
public:
	struct FVector2D                              Center;                                            // 0x0000(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Radius;                                            // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FCanvasUVQuad) == 0x000004, "Wrong alignment on FCanvasUVQuad");
static_assert(sizeof(FCanvasUVQuad) == 0x00000C, "Wrong size on FCanvasUVQuad");
static_assert(offsetof(FCanvasUVQuad, Center) == 0x000000, "Member 'FCanvasUVQuad::Center' has a wrong offset!");
static_assert(offsetof(FCanvasUVQuad, Radius) == 0x000008, "Member 'FCanvasUVQuad::Radius' has a wrong offset!");

// ScriptStruct Flame.CustomizationPairString
// 0x0020 (0x0020 - 0x0000)
struct FCustomizationPairString final
{
public:
	class FString                                 CustomizationName;                                 // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 VariantName;                                       // 0x0010(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FCustomizationPairString) == 0x000008, "Wrong alignment on FCustomizationPairString");
static_assert(sizeof(FCustomizationPairString) == 0x000020, "Wrong size on FCustomizationPairString");
static_assert(offsetof(FCustomizationPairString, CustomizationName) == 0x000000, "Member 'FCustomizationPairString::CustomizationName' has a wrong offset!");
static_assert(offsetof(FCustomizationPairString, VariantName) == 0x000010, "Member 'FCustomizationPairString::VariantName' has a wrong offset!");

// ScriptStruct Flame.AllInventoryCustomizations
// 0x0050 (0x0050 - 0x0000)
struct FAllInventoryCustomizations final
{
public:
	TMap<class FString, struct FCustomizationPairString> Customizations;                                    // 0x0000(0x0050)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAllInventoryCustomizations) == 0x000008, "Wrong alignment on FAllInventoryCustomizations");
static_assert(sizeof(FAllInventoryCustomizations) == 0x000050, "Wrong size on FAllInventoryCustomizations");
static_assert(offsetof(FAllInventoryCustomizations, Customizations) == 0x000000, "Member 'FAllInventoryCustomizations::Customizations' has a wrong offset!");

// ScriptStruct Flame.ActivateBoosterTicketsRequest
// 0x0018 (0x0018 - 0x0000)
struct FActivateBoosterTicketsRequest final
{
public:
	class FString                                 BoosterTicketSku;                                  // 0x0000(0x0010)(BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Count;                                             // 0x0010(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FActivateBoosterTicketsRequest) == 0x000008, "Wrong alignment on FActivateBoosterTicketsRequest");
static_assert(sizeof(FActivateBoosterTicketsRequest) == 0x000018, "Wrong size on FActivateBoosterTicketsRequest");
static_assert(offsetof(FActivateBoosterTicketsRequest, BoosterTicketSku) == 0x000000, "Member 'FActivateBoosterTicketsRequest::BoosterTicketSku' has a wrong offset!");
static_assert(offsetof(FActivateBoosterTicketsRequest, Count) == 0x000010, "Member 'FActivateBoosterTicketsRequest::Count' has a wrong offset!");

// ScriptStruct Flame.CustomizationArchetypeList
// 0x00C0 (0x0100 - 0x0040)
struct FCustomizationArchetypeList final : public FClassTableRowWithDisplayName
{
public:
	TSubclassOf<class ACustomizationArchetype>    Class;                                             // 0x0040(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSubclassOf<class AGender>                    Gender;                                            // 0x0048(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class USkeletalMesh>           HeadMesh;                                          // 0x0050(0x0028)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSubclassOf<class ACustomizationVariant>      DefaultHair;                                       // 0x0078(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSubclassOf<class ACustomizationVariant>      AllowedHair;                                       // 0x0080(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TMap<class FString, TSoftObjectPtr<class UMaterialInstance>> Materials;                                         // 0x0088(0x0050)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, UObjectWrapper, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UTexture2D>              TutorialTile;                                      // 0x00D8(0x0028)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FCustomizationArchetypeList) == 0x000008, "Wrong alignment on FCustomizationArchetypeList");
static_assert(sizeof(FCustomizationArchetypeList) == 0x000100, "Wrong size on FCustomizationArchetypeList");
static_assert(offsetof(FCustomizationArchetypeList, Class) == 0x000040, "Member 'FCustomizationArchetypeList::Class' has a wrong offset!");
static_assert(offsetof(FCustomizationArchetypeList, Gender) == 0x000048, "Member 'FCustomizationArchetypeList::Gender' has a wrong offset!");
static_assert(offsetof(FCustomizationArchetypeList, HeadMesh) == 0x000050, "Member 'FCustomizationArchetypeList::HeadMesh' has a wrong offset!");
static_assert(offsetof(FCustomizationArchetypeList, DefaultHair) == 0x000078, "Member 'FCustomizationArchetypeList::DefaultHair' has a wrong offset!");
static_assert(offsetof(FCustomizationArchetypeList, AllowedHair) == 0x000080, "Member 'FCustomizationArchetypeList::AllowedHair' has a wrong offset!");
static_assert(offsetof(FCustomizationArchetypeList, Materials) == 0x000088, "Member 'FCustomizationArchetypeList::Materials' has a wrong offset!");
static_assert(offsetof(FCustomizationArchetypeList, TutorialTile) == 0x0000D8, "Member 'FCustomizationArchetypeList::TutorialTile' has a wrong offset!");

// ScriptStruct Flame.CloudConverterClassInfo
// 0x0038 (0x0038 - 0x0000)
struct FCloudConverterClassInfo final
{
public:
	TSoftClassPtr<class UClass>                   ItemClass;                                         // 0x0000(0x0028)(UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FDataTableRowHandle                    DataTable;                                         // 0x0028(0x0010)(NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FCloudConverterClassInfo) == 0x000008, "Wrong alignment on FCloudConverterClassInfo");
static_assert(sizeof(FCloudConverterClassInfo) == 0x000038, "Wrong size on FCloudConverterClassInfo");
static_assert(offsetof(FCloudConverterClassInfo, ItemClass) == 0x000000, "Member 'FCloudConverterClassInfo::ItemClass' has a wrong offset!");
static_assert(offsetof(FCloudConverterClassInfo, DataTable) == 0x000028, "Member 'FCloudConverterClassInfo::DataTable' has a wrong offset!");

// ScriptStruct Flame.CustomizationPair
// 0x0010 (0x0010 - 0x0000)
struct FCustomizationPair final
{
public:
	TSubclassOf<class ACustomization>             Customization;                                     // 0x0000(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSubclassOf<class ACustomizationVariant>      Variant;                                           // 0x0008(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FCustomizationPair) == 0x000008, "Wrong alignment on FCustomizationPair");
static_assert(sizeof(FCustomizationPair) == 0x000010, "Wrong size on FCustomizationPair");
static_assert(offsetof(FCustomizationPair, Customization) == 0x000000, "Member 'FCustomizationPair::Customization' has a wrong offset!");
static_assert(offsetof(FCustomizationPair, Variant) == 0x000008, "Member 'FCustomizationPair::Variant' has a wrong offset!");

// ScriptStruct Flame.CustomizationPairWithSlot
// 0x0018 (0x0018 - 0x0000)
struct FCustomizationPairWithSlot final
{
public:
	TSubclassOf<class ACustomizationSlot>         Slot;                                              // 0x0000(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FCustomizationPair                     Pair;                                              // 0x0008(0x0010)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FCustomizationPairWithSlot) == 0x000008, "Wrong alignment on FCustomizationPairWithSlot");
static_assert(sizeof(FCustomizationPairWithSlot) == 0x000018, "Wrong size on FCustomizationPairWithSlot");
static_assert(offsetof(FCustomizationPairWithSlot, Slot) == 0x000000, "Member 'FCustomizationPairWithSlot::Slot' has a wrong offset!");
static_assert(offsetof(FCustomizationPairWithSlot, Pair) == 0x000008, "Member 'FCustomizationPairWithSlot::Pair' has a wrong offset!");

// ScriptStruct Flame.CloudConverterNameInfo
// 0x0020 (0x0020 - 0x0000)
struct FCloudConverterNameInfo final
{
public:
	class FString                                 ItemName;                                          // 0x0000(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FDataTableRowHandle                    DataTable;                                         // 0x0010(0x0010)(NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FCloudConverterNameInfo) == 0x000008, "Wrong alignment on FCloudConverterNameInfo");
static_assert(sizeof(FCloudConverterNameInfo) == 0x000020, "Wrong size on FCloudConverterNameInfo");
static_assert(offsetof(FCloudConverterNameInfo, ItemName) == 0x000000, "Member 'FCloudConverterNameInfo::ItemName' has a wrong offset!");
static_assert(offsetof(FCloudConverterNameInfo, DataTable) == 0x000010, "Member 'FCloudConverterNameInfo::DataTable' has a wrong offset!");

// ScriptStruct Flame.SettingsFromCloud
// 0x0010 (0x0010 - 0x0000)
struct FSettingsFromCloud final
{
public:
	class FString                                 Configuration;                                     // 0x0000(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSettingsFromCloud) == 0x000008, "Wrong alignment on FSettingsFromCloud");
static_assert(sizeof(FSettingsFromCloud) == 0x000010, "Wrong size on FSettingsFromCloud");
static_assert(offsetof(FSettingsFromCloud, Configuration) == 0x000000, "Member 'FSettingsFromCloud::Configuration' has a wrong offset!");

// ScriptStruct Flame.StashInfo
// 0x0010 (0x0010 - 0x0000)
struct FStashInfo final
{
public:
	TArray<struct FItemSlot>                      Items;                                             // 0x0000(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FStashInfo) == 0x000008, "Wrong alignment on FStashInfo");
static_assert(sizeof(FStashInfo) == 0x000010, "Wrong size on FStashInfo");
static_assert(offsetof(FStashInfo, Items) == 0x000000, "Member 'FStashInfo::Items' has a wrong offset!");

// ScriptStruct Flame.CloudCraftedItem
// 0x0020 (0x0020 - 0x0000)
struct FCloudCraftedItem final
{
public:
	TSubclassOf<class AItem>                      ItemClass;                                         // 0x0000(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ClassName;                                         // 0x0008(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ECloudCraftingPaymentType                     Payment;                                           // 0x0018(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x3];                                       // 0x0019(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Count;                                             // 0x001C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FCloudCraftedItem) == 0x000008, "Wrong alignment on FCloudCraftedItem");
static_assert(sizeof(FCloudCraftedItem) == 0x000020, "Wrong size on FCloudCraftedItem");
static_assert(offsetof(FCloudCraftedItem, ItemClass) == 0x000000, "Member 'FCloudCraftedItem::ItemClass' has a wrong offset!");
static_assert(offsetof(FCloudCraftedItem, ClassName) == 0x000008, "Member 'FCloudCraftedItem::ClassName' has a wrong offset!");
static_assert(offsetof(FCloudCraftedItem, Payment) == 0x000018, "Member 'FCloudCraftedItem::Payment' has a wrong offset!");
static_assert(offsetof(FCloudCraftedItem, Count) == 0x00001C, "Member 'FCloudCraftedItem::Count' has a wrong offset!");

// ScriptStruct Flame.CloudCustomizationDefault
// 0x0010 (0x0010 - 0x0000)
struct FCloudCustomizationDefault final
{
public:
	TSubclassOf<class ACustomizationSlot>         Slot;                                              // 0x0000(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSubclassOf<class ACustomizationVariant>      ItemVariant;                                       // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FCloudCustomizationDefault) == 0x000008, "Wrong alignment on FCloudCustomizationDefault");
static_assert(sizeof(FCloudCustomizationDefault) == 0x000010, "Wrong size on FCloudCustomizationDefault");
static_assert(offsetof(FCloudCustomizationDefault, Slot) == 0x000000, "Member 'FCloudCustomizationDefault::Slot' has a wrong offset!");
static_assert(offsetof(FCloudCustomizationDefault, ItemVariant) == 0x000008, "Member 'FCloudCustomizationDefault::ItemVariant' has a wrong offset!");

// ScriptStruct Flame.CloudCustomizationDefaults
// 0x0010 (0x0010 - 0x0000)
struct FCloudCustomizationDefaults final
{
public:
	TArray<struct FCloudCustomizationDefault>     Defaults;                                          // 0x0000(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FCloudCustomizationDefaults) == 0x000008, "Wrong alignment on FCloudCustomizationDefaults");
static_assert(sizeof(FCloudCustomizationDefaults) == 0x000010, "Wrong size on FCloudCustomizationDefaults");
static_assert(offsetof(FCloudCustomizationDefaults, Defaults) == 0x000000, "Member 'FCloudCustomizationDefaults::Defaults' has a wrong offset!");

// ScriptStruct Flame.CustomizationInfo
// 0x0038 (0x0038 - 0x0000)
struct FCustomizationInfo final
{
public:
	TSubclassOf<class ACustomization>             Customization;                                     // 0x0000(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<TSubclassOf<class ACustomizationVariant>> Variants;                                          // 0x0008(0x0010)(Edit, BlueprintVisible, ZeroConstructor, UObjectWrapper, NativeAccessSpecifierPublic)
	TArray<TSubclassOf<class ACustomizationVariant>> UnlockedVariants;                                  // 0x0018(0x0010)(Edit, BlueprintVisible, ZeroConstructor, UObjectWrapper, NativeAccessSpecifierPublic)
	TArray<TSubclassOf<class ACustomizationVariant>> HighlightedVariants;                               // 0x0028(0x0010)(Edit, BlueprintVisible, ZeroConstructor, UObjectWrapper, NativeAccessSpecifierPublic)
};
static_assert(alignof(FCustomizationInfo) == 0x000008, "Wrong alignment on FCustomizationInfo");
static_assert(sizeof(FCustomizationInfo) == 0x000038, "Wrong size on FCustomizationInfo");
static_assert(offsetof(FCustomizationInfo, Customization) == 0x000000, "Member 'FCustomizationInfo::Customization' has a wrong offset!");
static_assert(offsetof(FCustomizationInfo, Variants) == 0x000008, "Member 'FCustomizationInfo::Variants' has a wrong offset!");
static_assert(offsetof(FCustomizationInfo, UnlockedVariants) == 0x000018, "Member 'FCustomizationInfo::UnlockedVariants' has a wrong offset!");
static_assert(offsetof(FCustomizationInfo, HighlightedVariants) == 0x000028, "Member 'FCustomizationInfo::HighlightedVariants' has a wrong offset!");

// ScriptStruct Flame.CloudAllUserOwnedCustomizations
// 0x0020 (0x0020 - 0x0000)
struct FCloudAllUserOwnedCustomizations final
{
public:
	TArray<TSubclassOf<class ACustomizationVariant>> Items;                                             // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, UObjectWrapper, NativeAccessSpecifierPublic)
	TArray<TSubclassOf<class ACustomizationVariantBundle>> Bundles;                                           // 0x0010(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, UObjectWrapper, NativeAccessSpecifierPublic)
};
static_assert(alignof(FCloudAllUserOwnedCustomizations) == 0x000008, "Wrong alignment on FCloudAllUserOwnedCustomizations");
static_assert(sizeof(FCloudAllUserOwnedCustomizations) == 0x000020, "Wrong size on FCloudAllUserOwnedCustomizations");
static_assert(offsetof(FCloudAllUserOwnedCustomizations, Items) == 0x000000, "Member 'FCloudAllUserOwnedCustomizations::Items' has a wrong offset!");
static_assert(offsetof(FCloudAllUserOwnedCustomizations, Bundles) == 0x000010, "Member 'FCloudAllUserOwnedCustomizations::Bundles' has a wrong offset!");

// ScriptStruct Flame.CustomizationCloudInfo
// 0x0020 (0x0020 - 0x0000)
struct FCustomizationCloudInfo final
{
public:
	class FString                                 SlotName;                                          // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 CustomizationName;                                 // 0x0010(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FCustomizationCloudInfo) == 0x000008, "Wrong alignment on FCustomizationCloudInfo");
static_assert(sizeof(FCustomizationCloudInfo) == 0x000020, "Wrong size on FCustomizationCloudInfo");
static_assert(offsetof(FCustomizationCloudInfo, SlotName) == 0x000000, "Member 'FCustomizationCloudInfo::SlotName' has a wrong offset!");
static_assert(offsetof(FCustomizationCloudInfo, CustomizationName) == 0x000010, "Member 'FCustomizationCloudInfo::CustomizationName' has a wrong offset!");

// ScriptStruct Flame.CloudDataDownloadItemConfig
// 0x0028 (0x0028 - 0x0000)
struct FCloudDataDownloadItemConfig final
{
public:
	class FName                                   ItemName;                                          // 0x0000(0x0008)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   ItemUrl;                                           // 0x0008(0x0008)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 PackItemName;                                      // 0x0010(0x0010)(Edit, ZeroConstructor, Config, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ECloudDataDownloadItemType                    DownloadType;                                      // 0x0020(0x0001)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_21[0x7];                                       // 0x0021(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FCloudDataDownloadItemConfig) == 0x000008, "Wrong alignment on FCloudDataDownloadItemConfig");
static_assert(sizeof(FCloudDataDownloadItemConfig) == 0x000028, "Wrong size on FCloudDataDownloadItemConfig");
static_assert(offsetof(FCloudDataDownloadItemConfig, ItemName) == 0x000000, "Member 'FCloudDataDownloadItemConfig::ItemName' has a wrong offset!");
static_assert(offsetof(FCloudDataDownloadItemConfig, ItemUrl) == 0x000008, "Member 'FCloudDataDownloadItemConfig::ItemUrl' has a wrong offset!");
static_assert(offsetof(FCloudDataDownloadItemConfig, PackItemName) == 0x000010, "Member 'FCloudDataDownloadItemConfig::PackItemName' has a wrong offset!");
static_assert(offsetof(FCloudDataDownloadItemConfig, DownloadType) == 0x000020, "Member 'FCloudDataDownloadItemConfig::DownloadType' has a wrong offset!");

// ScriptStruct Flame.CloudDataImprovementPerLevel
// 0x0028 (0x0028 - 0x0000)
struct FCloudDataImprovementPerLevel final
{
public:
	int32                                         Level;                                             // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 ClassName;                                         // 0x0008(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSubclassOf<class AShelterImprovement>        ImprovementClass;                                  // 0x0018(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Count;                                             // 0x0020(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_24[0x4];                                       // 0x0024(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FCloudDataImprovementPerLevel) == 0x000008, "Wrong alignment on FCloudDataImprovementPerLevel");
static_assert(sizeof(FCloudDataImprovementPerLevel) == 0x000028, "Wrong size on FCloudDataImprovementPerLevel");
static_assert(offsetof(FCloudDataImprovementPerLevel, Level) == 0x000000, "Member 'FCloudDataImprovementPerLevel::Level' has a wrong offset!");
static_assert(offsetof(FCloudDataImprovementPerLevel, ClassName) == 0x000008, "Member 'FCloudDataImprovementPerLevel::ClassName' has a wrong offset!");
static_assert(offsetof(FCloudDataImprovementPerLevel, ImprovementClass) == 0x000018, "Member 'FCloudDataImprovementPerLevel::ImprovementClass' has a wrong offset!");
static_assert(offsetof(FCloudDataImprovementPerLevel, Count) == 0x000020, "Member 'FCloudDataImprovementPerLevel::Count' has a wrong offset!");

// ScriptStruct Flame.CloudDataImprovementPerLevelList
// 0x0010 (0x0010 - 0x0000)
struct FCloudDataImprovementPerLevelList final
{
public:
	TArray<struct FCloudDataImprovementPerLevel>  ImprovementsPerLevel;                              // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FCloudDataImprovementPerLevelList) == 0x000008, "Wrong alignment on FCloudDataImprovementPerLevelList");
static_assert(sizeof(FCloudDataImprovementPerLevelList) == 0x000010, "Wrong size on FCloudDataImprovementPerLevelList");
static_assert(offsetof(FCloudDataImprovementPerLevelList, ImprovementsPerLevel) == 0x000000, "Member 'FCloudDataImprovementPerLevelList::ImprovementsPerLevel' has a wrong offset!");

// ScriptStruct Flame.CloudDataShelterLevel
// 0x0010 (0x0010 - 0x0000)
struct FCloudDataShelterLevel final
{
public:
	int32                                         Level;                                             // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         EntryRepairCost;                                   // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MaximumMaterialCapacity;                           // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         RequiredImprovementPoints;                         // 0x000C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FCloudDataShelterLevel) == 0x000004, "Wrong alignment on FCloudDataShelterLevel");
static_assert(sizeof(FCloudDataShelterLevel) == 0x000010, "Wrong size on FCloudDataShelterLevel");
static_assert(offsetof(FCloudDataShelterLevel, Level) == 0x000000, "Member 'FCloudDataShelterLevel::Level' has a wrong offset!");
static_assert(offsetof(FCloudDataShelterLevel, EntryRepairCost) == 0x000004, "Member 'FCloudDataShelterLevel::EntryRepairCost' has a wrong offset!");
static_assert(offsetof(FCloudDataShelterLevel, MaximumMaterialCapacity) == 0x000008, "Member 'FCloudDataShelterLevel::MaximumMaterialCapacity' has a wrong offset!");
static_assert(offsetof(FCloudDataShelterLevel, RequiredImprovementPoints) == 0x00000C, "Member 'FCloudDataShelterLevel::RequiredImprovementPoints' has a wrong offset!");

// ScriptStruct Flame.CloudDataImprovementLevelList
// 0x0010 (0x0010 - 0x0000)
struct FCloudDataImprovementLevelList final
{
public:
	TArray<struct FCloudDataShelterLevel>         Levels;                                            // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FCloudDataImprovementLevelList) == 0x000008, "Wrong alignment on FCloudDataImprovementLevelList");
static_assert(sizeof(FCloudDataImprovementLevelList) == 0x000010, "Wrong size on FCloudDataImprovementLevelList");
static_assert(offsetof(FCloudDataImprovementLevelList, Levels) == 0x000000, "Member 'FCloudDataImprovementLevelList::Levels' has a wrong offset!");

// ScriptStruct Flame.EquipItemsInfo
// 0x0020 (0x0020 - 0x0000)
struct FEquipItemsInfo final
{
public:
	class FString                                 SlotName;                                          // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSubclassOf<class AItem>                      ItemClass;                                         // 0x0010(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Count;                                             // 0x0018(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FEquipItemsInfo) == 0x000008, "Wrong alignment on FEquipItemsInfo");
static_assert(sizeof(FEquipItemsInfo) == 0x000020, "Wrong size on FEquipItemsInfo");
static_assert(offsetof(FEquipItemsInfo, SlotName) == 0x000000, "Member 'FEquipItemsInfo::SlotName' has a wrong offset!");
static_assert(offsetof(FEquipItemsInfo, ItemClass) == 0x000010, "Member 'FEquipItemsInfo::ItemClass' has a wrong offset!");
static_assert(offsetof(FEquipItemsInfo, Count) == 0x000018, "Member 'FEquipItemsInfo::Count' has a wrong offset!");

// ScriptStruct Flame.CloudDataShelterSlot
// 0x0038 (0x0038 - 0x0000)
struct FCloudDataShelterSlot final
{
public:
	class FString                                 Name;                                              // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSubclassOf<class AShelterSlot>               SlotClass;                                         // 0x0010(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ClassName;                                         // 0x0018(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSubclassOf<class AShelterImprovement>        ImprovementClass;                                  // 0x0028(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         UsagePriority;                                     // 0x0030(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_34[0x4];                                       // 0x0034(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FCloudDataShelterSlot) == 0x000008, "Wrong alignment on FCloudDataShelterSlot");
static_assert(sizeof(FCloudDataShelterSlot) == 0x000038, "Wrong size on FCloudDataShelterSlot");
static_assert(offsetof(FCloudDataShelterSlot, Name) == 0x000000, "Member 'FCloudDataShelterSlot::Name' has a wrong offset!");
static_assert(offsetof(FCloudDataShelterSlot, SlotClass) == 0x000010, "Member 'FCloudDataShelterSlot::SlotClass' has a wrong offset!");
static_assert(offsetof(FCloudDataShelterSlot, ClassName) == 0x000018, "Member 'FCloudDataShelterSlot::ClassName' has a wrong offset!");
static_assert(offsetof(FCloudDataShelterSlot, ImprovementClass) == 0x000028, "Member 'FCloudDataShelterSlot::ImprovementClass' has a wrong offset!");
static_assert(offsetof(FCloudDataShelterSlot, UsagePriority) == 0x000030, "Member 'FCloudDataShelterSlot::UsagePriority' has a wrong offset!");

// ScriptStruct Flame.CloudDataImprovementSlotList
// 0x0010 (0x0010 - 0x0000)
struct FCloudDataImprovementSlotList final
{
public:
	TArray<struct FCloudDataShelterSlot>          Slots;                                             // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FCloudDataImprovementSlotList) == 0x000008, "Wrong alignment on FCloudDataImprovementSlotList");
static_assert(sizeof(FCloudDataImprovementSlotList) == 0x000010, "Wrong size on FCloudDataImprovementSlotList");
static_assert(offsetof(FCloudDataImprovementSlotList, Slots) == 0x000000, "Member 'FCloudDataImprovementSlotList::Slots' has a wrong offset!");

// ScriptStruct Flame.DataProviderTableConfig
// 0x0050 (0x0050 - 0x0000)
struct FDataProviderTableConfig final
{
public:
	class FName                                   TableName;                                         // 0x0000(0x0008)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   DownloadItemName;                                  // 0x0008(0x0008)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   RowStructName;                                     // 0x0010(0x0008)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UDataTable>              LocalAssetTable;                                   // 0x0018(0x0028)(Edit, Config, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   TableObjectName;                                   // 0x0040(0x0008)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          LocalOnly;                                         // 0x0048(0x0001)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ManualLoad;                                        // 0x0049(0x0001)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Optional;                                          // 0x004A(0x0001)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4B[0x5];                                       // 0x004B(0x0005)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FDataProviderTableConfig) == 0x000008, "Wrong alignment on FDataProviderTableConfig");
static_assert(sizeof(FDataProviderTableConfig) == 0x000050, "Wrong size on FDataProviderTableConfig");
static_assert(offsetof(FDataProviderTableConfig, TableName) == 0x000000, "Member 'FDataProviderTableConfig::TableName' has a wrong offset!");
static_assert(offsetof(FDataProviderTableConfig, DownloadItemName) == 0x000008, "Member 'FDataProviderTableConfig::DownloadItemName' has a wrong offset!");
static_assert(offsetof(FDataProviderTableConfig, RowStructName) == 0x000010, "Member 'FDataProviderTableConfig::RowStructName' has a wrong offset!");
static_assert(offsetof(FDataProviderTableConfig, LocalAssetTable) == 0x000018, "Member 'FDataProviderTableConfig::LocalAssetTable' has a wrong offset!");
static_assert(offsetof(FDataProviderTableConfig, TableObjectName) == 0x000040, "Member 'FDataProviderTableConfig::TableObjectName' has a wrong offset!");
static_assert(offsetof(FDataProviderTableConfig, LocalOnly) == 0x000048, "Member 'FDataProviderTableConfig::LocalOnly' has a wrong offset!");
static_assert(offsetof(FDataProviderTableConfig, ManualLoad) == 0x000049, "Member 'FDataProviderTableConfig::ManualLoad' has a wrong offset!");
static_assert(offsetof(FDataProviderTableConfig, Optional) == 0x00004A, "Member 'FDataProviderTableConfig::Optional' has a wrong offset!");

// ScriptStruct Flame.CloudDataImprovement
// 0x0058 (0x0058 - 0x0000)
struct FCloudDataImprovement final
{
public:
	class FString                                 Name;                                              // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSubclassOf<class AShelterImprovement>        ImprovementClass;                                  // 0x0010(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 GeneratedItemClassName;                            // 0x0018(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ImprovementTypeName;                               // 0x0028(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EImprovementType                              ImprovementType;                                   // 0x0038(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_39[0x7];                                       // 0x0039(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TSubclassOf<class AItem>                      GeneratedItemClass;                                // 0x0040(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FCloudDataImprovementLevel>     Levels;                                            // 0x0048(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FCloudDataImprovement) == 0x000008, "Wrong alignment on FCloudDataImprovement");
static_assert(sizeof(FCloudDataImprovement) == 0x000058, "Wrong size on FCloudDataImprovement");
static_assert(offsetof(FCloudDataImprovement, Name) == 0x000000, "Member 'FCloudDataImprovement::Name' has a wrong offset!");
static_assert(offsetof(FCloudDataImprovement, ImprovementClass) == 0x000010, "Member 'FCloudDataImprovement::ImprovementClass' has a wrong offset!");
static_assert(offsetof(FCloudDataImprovement, GeneratedItemClassName) == 0x000018, "Member 'FCloudDataImprovement::GeneratedItemClassName' has a wrong offset!");
static_assert(offsetof(FCloudDataImprovement, ImprovementTypeName) == 0x000028, "Member 'FCloudDataImprovement::ImprovementTypeName' has a wrong offset!");
static_assert(offsetof(FCloudDataImprovement, ImprovementType) == 0x000038, "Member 'FCloudDataImprovement::ImprovementType' has a wrong offset!");
static_assert(offsetof(FCloudDataImprovement, GeneratedItemClass) == 0x000040, "Member 'FCloudDataImprovement::GeneratedItemClass' has a wrong offset!");
static_assert(offsetof(FCloudDataImprovement, Levels) == 0x000048, "Member 'FCloudDataImprovement::Levels' has a wrong offset!");

// ScriptStruct Flame.CloudDataImprovementClassList
// 0x0010 (0x0010 - 0x0000)
struct FCloudDataImprovementClassList final
{
public:
	TArray<struct FCloudDataImprovement>          Improvements;                                      // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FCloudDataImprovementClassList) == 0x000008, "Wrong alignment on FCloudDataImprovementClassList");
static_assert(sizeof(FCloudDataImprovementClassList) == 0x000010, "Wrong size on FCloudDataImprovementClassList");
static_assert(offsetof(FCloudDataImprovementClassList, Improvements) == 0x000000, "Member 'FCloudDataImprovementClassList::Improvements' has a wrong offset!");

// ScriptStruct Flame.PoolItem
// 0x0010 (0x0010 - 0x0000)
struct FPoolItem final
{
public:
	class UObject*                                Object;                                            // 0x0000(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_8[0x8];                                        // 0x0008(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FPoolItem) == 0x000008, "Wrong alignment on FPoolItem");
static_assert(sizeof(FPoolItem) == 0x000010, "Wrong size on FPoolItem");
static_assert(offsetof(FPoolItem, Object) == 0x000000, "Member 'FPoolItem::Object' has a wrong offset!");

// ScriptStruct Flame.PlatformStoreInitMicrotransactionResult
// 0x0010 (0x0018 - 0x0008)
struct FPlatformStoreInitMicrotransactionResult final : public FCustomJsonParser
{
public:
	class FString                                 OrderId;                                           // 0x0008(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FPlatformStoreInitMicrotransactionResult) == 0x000008, "Wrong alignment on FPlatformStoreInitMicrotransactionResult");
static_assert(sizeof(FPlatformStoreInitMicrotransactionResult) == 0x000018, "Wrong size on FPlatformStoreInitMicrotransactionResult");
static_assert(offsetof(FPlatformStoreInitMicrotransactionResult, OrderId) == 0x000008, "Member 'FPlatformStoreInitMicrotransactionResult::OrderId' has a wrong offset!");

// ScriptStruct Flame.TransitionDirection
// 0x00C0 (0x00C0 - 0x0000)
struct FTransitionDirection final
{
public:
	struct FTransition                            Forward;                                           // 0x0000(0x0030)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NoDestructor, NativeAccessSpecifierPublic)
	struct FTransition                            Right;                                             // 0x0030(0x0030)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NoDestructor, NativeAccessSpecifierPublic)
	struct FTransition                            Left;                                              // 0x0060(0x0030)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NoDestructor, NativeAccessSpecifierPublic)
	struct FTransition                            back;                                              // 0x0090(0x0030)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FTransitionDirection) == 0x000008, "Wrong alignment on FTransitionDirection");
static_assert(sizeof(FTransitionDirection) == 0x0000C0, "Wrong size on FTransitionDirection");
static_assert(offsetof(FTransitionDirection, Forward) == 0x000000, "Member 'FTransitionDirection::Forward' has a wrong offset!");
static_assert(offsetof(FTransitionDirection, Right) == 0x000030, "Member 'FTransitionDirection::Right' has a wrong offset!");
static_assert(offsetof(FTransitionDirection, Left) == 0x000060, "Member 'FTransitionDirection::Left' has a wrong offset!");
static_assert(offsetof(FTransitionDirection, back) == 0x000090, "Member 'FTransitionDirection::back' has a wrong offset!");

// ScriptStruct Flame.CloudHeartBeatUpdate
// 0x0001 (0x0001 - 0x0000)
struct FCloudHeartBeatUpdate final
{
public:
	uint8                                         Pad_0[0x1];                                        // 0x0000(0x0001)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FCloudHeartBeatUpdate) == 0x000001, "Wrong alignment on FCloudHeartBeatUpdate");
static_assert(sizeof(FCloudHeartBeatUpdate) == 0x000001, "Wrong size on FCloudHeartBeatUpdate");

// ScriptStruct Flame.ClientNetworkStats
// 0x0024 (0x0024 - 0x0000)
struct FClientNetworkStats final
{
public:
	int32                                         Frames;                                            // 0x0000(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         AvgLag;                                            // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MinLag;                                            // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MaxLag;                                            // 0x000C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MaxReceivedTime;                                   // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MaxInPacketsLoss;                                  // 0x0014(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MaxOutPacketsLoss;                                 // 0x0018(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         IncomingTrafficKbps;                               // 0x001C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         OutgoingTrafficKbps;                               // 0x0020(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FClientNetworkStats) == 0x000004, "Wrong alignment on FClientNetworkStats");
static_assert(sizeof(FClientNetworkStats) == 0x000024, "Wrong size on FClientNetworkStats");
static_assert(offsetof(FClientNetworkStats, Frames) == 0x000000, "Member 'FClientNetworkStats::Frames' has a wrong offset!");
static_assert(offsetof(FClientNetworkStats, AvgLag) == 0x000004, "Member 'FClientNetworkStats::AvgLag' has a wrong offset!");
static_assert(offsetof(FClientNetworkStats, MinLag) == 0x000008, "Member 'FClientNetworkStats::MinLag' has a wrong offset!");
static_assert(offsetof(FClientNetworkStats, MaxLag) == 0x00000C, "Member 'FClientNetworkStats::MaxLag' has a wrong offset!");
static_assert(offsetof(FClientNetworkStats, MaxReceivedTime) == 0x000010, "Member 'FClientNetworkStats::MaxReceivedTime' has a wrong offset!");
static_assert(offsetof(FClientNetworkStats, MaxInPacketsLoss) == 0x000014, "Member 'FClientNetworkStats::MaxInPacketsLoss' has a wrong offset!");
static_assert(offsetof(FClientNetworkStats, MaxOutPacketsLoss) == 0x000018, "Member 'FClientNetworkStats::MaxOutPacketsLoss' has a wrong offset!");
static_assert(offsetof(FClientNetworkStats, IncomingTrafficKbps) == 0x00001C, "Member 'FClientNetworkStats::IncomingTrafficKbps' has a wrong offset!");
static_assert(offsetof(FClientNetworkStats, OutgoingTrafficKbps) == 0x000020, "Member 'FClientNetworkStats::OutgoingTrafficKbps' has a wrong offset!");

// ScriptStruct Flame.DynamicResolutionStats
// 0x0010 (0x0010 - 0x0000)
struct FDynamicResolutionStats final
{
public:
	bool                                          Enabled;                                           // 0x0000(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         MinResolutionPercentage;                           // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         AvgResolutionPercentage;                           // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MaxResolutionPercentage;                           // 0x000C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FDynamicResolutionStats) == 0x000004, "Wrong alignment on FDynamicResolutionStats");
static_assert(sizeof(FDynamicResolutionStats) == 0x000010, "Wrong size on FDynamicResolutionStats");
static_assert(offsetof(FDynamicResolutionStats, Enabled) == 0x000000, "Member 'FDynamicResolutionStats::Enabled' has a wrong offset!");
static_assert(offsetof(FDynamicResolutionStats, MinResolutionPercentage) == 0x000004, "Member 'FDynamicResolutionStats::MinResolutionPercentage' has a wrong offset!");
static_assert(offsetof(FDynamicResolutionStats, AvgResolutionPercentage) == 0x000008, "Member 'FDynamicResolutionStats::AvgResolutionPercentage' has a wrong offset!");
static_assert(offsetof(FDynamicResolutionStats, MaxResolutionPercentage) == 0x00000C, "Member 'FDynamicResolutionStats::MaxResolutionPercentage' has a wrong offset!");

// ScriptStruct Flame.RenderingStats
// 0x001C (0x001C - 0x0000)
struct FRenderingStats final
{
public:
	float                                         MinFramesPerSecond;                                // 0x0000(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         AvgFramesPerSecond;                                // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MaxFramesPerSecond;                                // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FDynamicResolutionStats                DynamicResolutionStats;                            // 0x000C(0x0010)(NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FRenderingStats) == 0x000004, "Wrong alignment on FRenderingStats");
static_assert(sizeof(FRenderingStats) == 0x00001C, "Wrong size on FRenderingStats");
static_assert(offsetof(FRenderingStats, MinFramesPerSecond) == 0x000000, "Member 'FRenderingStats::MinFramesPerSecond' has a wrong offset!");
static_assert(offsetof(FRenderingStats, AvgFramesPerSecond) == 0x000004, "Member 'FRenderingStats::AvgFramesPerSecond' has a wrong offset!");
static_assert(offsetof(FRenderingStats, MaxFramesPerSecond) == 0x000008, "Member 'FRenderingStats::MaxFramesPerSecond' has a wrong offset!");
static_assert(offsetof(FRenderingStats, DynamicResolutionStats) == 0x00000C, "Member 'FRenderingStats::DynamicResolutionStats' has a wrong offset!");

// ScriptStruct Flame.PerformanceStats
// 0x0040 (0x0040 - 0x0000)
struct FPerformanceStats final
{
public:
	struct FClientNetworkStats                    NetworkStats;                                      // 0x0000(0x0024)(NoDestructor, NativeAccessSpecifierPublic)
	struct FRenderingStats                        RenderingStats;                                    // 0x0024(0x001C)(NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FPerformanceStats) == 0x000004, "Wrong alignment on FPerformanceStats");
static_assert(sizeof(FPerformanceStats) == 0x000040, "Wrong size on FPerformanceStats");
static_assert(offsetof(FPerformanceStats, NetworkStats) == 0x000000, "Member 'FPerformanceStats::NetworkStats' has a wrong offset!");
static_assert(offsetof(FPerformanceStats, RenderingStats) == 0x000024, "Member 'FPerformanceStats::RenderingStats' has a wrong offset!");

// ScriptStruct Flame.CurrentLocomotionAssetSet
// 0x0020 (0x0020 - 0x0000)
struct FCurrentLocomotionAssetSet final
{
public:
	class UAnimSequence*                          Idle;                                              // 0x0000(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UBlendSpace*                            Walk;                                              // 0x0008(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UBlendSpace*                            Run;                                               // 0x0010(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UBlendSpace*                            Sprint;                                            // 0x0018(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FCurrentLocomotionAssetSet) == 0x000008, "Wrong alignment on FCurrentLocomotionAssetSet");
static_assert(sizeof(FCurrentLocomotionAssetSet) == 0x000020, "Wrong size on FCurrentLocomotionAssetSet");
static_assert(offsetof(FCurrentLocomotionAssetSet, Idle) == 0x000000, "Member 'FCurrentLocomotionAssetSet::Idle' has a wrong offset!");
static_assert(offsetof(FCurrentLocomotionAssetSet, Walk) == 0x000008, "Member 'FCurrentLocomotionAssetSet::Walk' has a wrong offset!");
static_assert(offsetof(FCurrentLocomotionAssetSet, Run) == 0x000010, "Member 'FCurrentLocomotionAssetSet::Run' has a wrong offset!");
static_assert(offsetof(FCurrentLocomotionAssetSet, Sprint) == 0x000018, "Member 'FCurrentLocomotionAssetSet::Sprint' has a wrong offset!");

// ScriptStruct Flame.CloudReRollChallengeRequest
// 0x0020 (0x0020 - 0x0000)
struct FCloudReRollChallengeRequest final
{
public:
	class FName                                   ChallengeName;                                     // 0x0000(0x0008)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         SlotId;                                            // 0x0008(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 SlotCategory;                                      // 0x0010(0x0010)(BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FCloudReRollChallengeRequest) == 0x000008, "Wrong alignment on FCloudReRollChallengeRequest");
static_assert(sizeof(FCloudReRollChallengeRequest) == 0x000020, "Wrong size on FCloudReRollChallengeRequest");
static_assert(offsetof(FCloudReRollChallengeRequest, ChallengeName) == 0x000000, "Member 'FCloudReRollChallengeRequest::ChallengeName' has a wrong offset!");
static_assert(offsetof(FCloudReRollChallengeRequest, SlotId) == 0x000008, "Member 'FCloudReRollChallengeRequest::SlotId' has a wrong offset!");
static_assert(offsetof(FCloudReRollChallengeRequest, SlotCategory) == 0x000010, "Member 'FCloudReRollChallengeRequest::SlotCategory' has a wrong offset!");

// ScriptStruct Flame.CloudGetNewsResponse
// 0x0010 (0x0010 - 0x0000)
struct FCloudGetNewsResponse final
{
public:
	TArray<struct FNewsDto>                       News;                                              // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FCloudGetNewsResponse) == 0x000008, "Wrong alignment on FCloudGetNewsResponse");
static_assert(sizeof(FCloudGetNewsResponse) == 0x000010, "Wrong size on FCloudGetNewsResponse");
static_assert(offsetof(FCloudGetNewsResponse, News) == 0x000000, "Member 'FCloudGetNewsResponse::News' has a wrong offset!");

// ScriptStruct Flame.CloudNotificationsTableRow
// 0x0020 (0x0028 - 0x0008)
struct FCloudNotificationsTableRow final : public FTableRowBase
{
public:
	class FText                                   Text;                                              // 0x0008(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NativeAccessSpecifierPublic)
	float                                         Duration;                                          // 0x0020(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ENotificationChannel                          Channel;                                           // 0x0024(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ENotificationExpirationPolicy                 ExpirationPolicy;                                  // 0x0025(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETextNotificationType                         Type;                                              // 0x0026(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_27[0x1];                                       // 0x0027(0x0001)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FCloudNotificationsTableRow) == 0x000008, "Wrong alignment on FCloudNotificationsTableRow");
static_assert(sizeof(FCloudNotificationsTableRow) == 0x000028, "Wrong size on FCloudNotificationsTableRow");
static_assert(offsetof(FCloudNotificationsTableRow, Text) == 0x000008, "Member 'FCloudNotificationsTableRow::Text' has a wrong offset!");
static_assert(offsetof(FCloudNotificationsTableRow, Duration) == 0x000020, "Member 'FCloudNotificationsTableRow::Duration' has a wrong offset!");
static_assert(offsetof(FCloudNotificationsTableRow, Channel) == 0x000024, "Member 'FCloudNotificationsTableRow::Channel' has a wrong offset!");
static_assert(offsetof(FCloudNotificationsTableRow, ExpirationPolicy) == 0x000025, "Member 'FCloudNotificationsTableRow::ExpirationPolicy' has a wrong offset!");
static_assert(offsetof(FCloudNotificationsTableRow, Type) == 0x000026, "Member 'FCloudNotificationsTableRow::Type' has a wrong offset!");

// ScriptStruct Flame.GestureDesc
// 0x0008 (0x0008 - 0x0000)
struct FGestureDesc final
{
public:
	class UAnimSequenceBase*                      Sequence;                                          // 0x0000(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FGestureDesc) == 0x000008, "Wrong alignment on FGestureDesc");
static_assert(sizeof(FGestureDesc) == 0x000008, "Wrong size on FGestureDesc");
static_assert(offsetof(FGestureDesc, Sequence) == 0x000000, "Member 'FGestureDesc::Sequence' has a wrong offset!");

// ScriptStruct Flame.CloudPlatformStoreWindowsProduct
// 0x0030 (0x0030 - 0x0000)
struct FCloudPlatformStoreWindowsProduct final
{
public:
	struct FGameStoreProductId                    GameStoreProductId;                                // 0x0000(0x0010)(NativeAccessSpecifierPublic)
	class FString                                 WindowsId;                                         // 0x0010(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 StoreId;                                           // 0x0020(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FCloudPlatformStoreWindowsProduct) == 0x000008, "Wrong alignment on FCloudPlatformStoreWindowsProduct");
static_assert(sizeof(FCloudPlatformStoreWindowsProduct) == 0x000030, "Wrong size on FCloudPlatformStoreWindowsProduct");
static_assert(offsetof(FCloudPlatformStoreWindowsProduct, GameStoreProductId) == 0x000000, "Member 'FCloudPlatformStoreWindowsProduct::GameStoreProductId' has a wrong offset!");
static_assert(offsetof(FCloudPlatformStoreWindowsProduct, WindowsId) == 0x000010, "Member 'FCloudPlatformStoreWindowsProduct::WindowsId' has a wrong offset!");
static_assert(offsetof(FCloudPlatformStoreWindowsProduct, StoreId) == 0x000020, "Member 'FCloudPlatformStoreWindowsProduct::StoreId' has a wrong offset!");

// ScriptStruct Flame.CloudPlatformStoreWindowsProductList
// 0x0010 (0x0010 - 0x0000)
struct FCloudPlatformStoreWindowsProductList final
{
public:
	TArray<struct FCloudPlatformStoreWindowsProduct> Products;                                          // 0x0000(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FCloudPlatformStoreWindowsProductList) == 0x000008, "Wrong alignment on FCloudPlatformStoreWindowsProductList");
static_assert(sizeof(FCloudPlatformStoreWindowsProductList) == 0x000010, "Wrong size on FCloudPlatformStoreWindowsProductList");
static_assert(offsetof(FCloudPlatformStoreWindowsProductList, Products) == 0x000000, "Member 'FCloudPlatformStoreWindowsProductList::Products' has a wrong offset!");

// ScriptStruct Flame.AudioPlayerSettings
// 0x0018 (0x0018 - 0x0000)
struct FAudioPlayerSettings final
{
public:
	float                                         Volume_Master;                                     // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Volume_Effects;                                    // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Volume_Music;                                      // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Volume_RadioVoice;                                 // 0x000C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Volume_Voice_Chat;                                 // 0x0010(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bVoiceChatEnabled;                                 // 0x0014(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bEncounterMusicEnabled;                            // 0x0015(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_16[0x2];                                       // 0x0016(0x0002)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FAudioPlayerSettings) == 0x000004, "Wrong alignment on FAudioPlayerSettings");
static_assert(sizeof(FAudioPlayerSettings) == 0x000018, "Wrong size on FAudioPlayerSettings");
static_assert(offsetof(FAudioPlayerSettings, Volume_Master) == 0x000000, "Member 'FAudioPlayerSettings::Volume_Master' has a wrong offset!");
static_assert(offsetof(FAudioPlayerSettings, Volume_Effects) == 0x000004, "Member 'FAudioPlayerSettings::Volume_Effects' has a wrong offset!");
static_assert(offsetof(FAudioPlayerSettings, Volume_Music) == 0x000008, "Member 'FAudioPlayerSettings::Volume_Music' has a wrong offset!");
static_assert(offsetof(FAudioPlayerSettings, Volume_RadioVoice) == 0x00000C, "Member 'FAudioPlayerSettings::Volume_RadioVoice' has a wrong offset!");
static_assert(offsetof(FAudioPlayerSettings, Volume_Voice_Chat) == 0x000010, "Member 'FAudioPlayerSettings::Volume_Voice_Chat' has a wrong offset!");
static_assert(offsetof(FAudioPlayerSettings, bVoiceChatEnabled) == 0x000014, "Member 'FAudioPlayerSettings::bVoiceChatEnabled' has a wrong offset!");
static_assert(offsetof(FAudioPlayerSettings, bEncounterMusicEnabled) == 0x000015, "Member 'FAudioPlayerSettings::bEncounterMusicEnabled' has a wrong offset!");

// ScriptStruct Flame.CloudPlatformStoreSwitchProduct
// 0x0030 (0x0030 - 0x0000)
struct FCloudPlatformStoreSwitchProduct final
{
public:
	struct FGameStoreProductId                    GameStoreProductId;                                // 0x0000(0x0010)(NativeAccessSpecifierPublic)
	class FString                                 ConsumableServiceId;                               // 0x0010(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ConsumableItemId;                                  // 0x0020(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FCloudPlatformStoreSwitchProduct) == 0x000008, "Wrong alignment on FCloudPlatformStoreSwitchProduct");
static_assert(sizeof(FCloudPlatformStoreSwitchProduct) == 0x000030, "Wrong size on FCloudPlatformStoreSwitchProduct");
static_assert(offsetof(FCloudPlatformStoreSwitchProduct, GameStoreProductId) == 0x000000, "Member 'FCloudPlatformStoreSwitchProduct::GameStoreProductId' has a wrong offset!");
static_assert(offsetof(FCloudPlatformStoreSwitchProduct, ConsumableServiceId) == 0x000010, "Member 'FCloudPlatformStoreSwitchProduct::ConsumableServiceId' has a wrong offset!");
static_assert(offsetof(FCloudPlatformStoreSwitchProduct, ConsumableItemId) == 0x000020, "Member 'FCloudPlatformStoreSwitchProduct::ConsumableItemId' has a wrong offset!");

// ScriptStruct Flame.CloudPlatformStoreSwitchProductList
// 0x0010 (0x0010 - 0x0000)
struct FCloudPlatformStoreSwitchProductList final
{
public:
	TArray<struct FCloudPlatformStoreSwitchProduct> Products;                                          // 0x0000(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FCloudPlatformStoreSwitchProductList) == 0x000008, "Wrong alignment on FCloudPlatformStoreSwitchProductList");
static_assert(sizeof(FCloudPlatformStoreSwitchProductList) == 0x000010, "Wrong size on FCloudPlatformStoreSwitchProductList");
static_assert(offsetof(FCloudPlatformStoreSwitchProductList, Products) == 0x000000, "Member 'FCloudPlatformStoreSwitchProductList::Products' has a wrong offset!");

// ScriptStruct Flame.CloudPlatformStoreSteamFinalizeMicroTransaction
// 0x0010 (0x0010 - 0x0000)
struct FCloudPlatformStoreSteamFinalizeMicroTransaction final
{
public:
	class FString                                 OrderId;                                           // 0x0000(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FCloudPlatformStoreSteamFinalizeMicroTransaction) == 0x000008, "Wrong alignment on FCloudPlatformStoreSteamFinalizeMicroTransaction");
static_assert(sizeof(FCloudPlatformStoreSteamFinalizeMicroTransaction) == 0x000010, "Wrong size on FCloudPlatformStoreSteamFinalizeMicroTransaction");
static_assert(offsetof(FCloudPlatformStoreSteamFinalizeMicroTransaction, OrderId) == 0x000000, "Member 'FCloudPlatformStoreSteamFinalizeMicroTransaction::OrderId' has a wrong offset!");

// ScriptStruct Flame.GlintPlayerState
// 0x0048 (0x0048 - 0x0000)
struct FGlintPlayerState final
{
public:
	class AHumanCharacter*                        Character;                                         // 0x0000(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AWeapon*                                Weapon;                                            // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_10[0x30];                                      // 0x0010(0x0030)(Fixing Size After Last Property [ Dumper-7 ])
	class UGlintComponent*                        AttachComponent;                                   // 0x0040(0x0008)(ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FGlintPlayerState) == 0x000008, "Wrong alignment on FGlintPlayerState");
static_assert(sizeof(FGlintPlayerState) == 0x000048, "Wrong size on FGlintPlayerState");
static_assert(offsetof(FGlintPlayerState, Character) == 0x000000, "Member 'FGlintPlayerState::Character' has a wrong offset!");
static_assert(offsetof(FGlintPlayerState, Weapon) == 0x000008, "Member 'FGlintPlayerState::Weapon' has a wrong offset!");
static_assert(offsetof(FGlintPlayerState, AttachComponent) == 0x000040, "Member 'FGlintPlayerState::AttachComponent' has a wrong offset!");

// ScriptStruct Flame.CloudPlatformStoreXboxProduct
// 0x0030 (0x0030 - 0x0000)
struct FCloudPlatformStoreXboxProduct final
{
public:
	struct FGameStoreProductId                    GameStoreProductId;                                // 0x0000(0x0010)(NativeAccessSpecifierPublic)
	class FString                                 XboxId;                                            // 0x0010(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 StoreId;                                           // 0x0020(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FCloudPlatformStoreXboxProduct) == 0x000008, "Wrong alignment on FCloudPlatformStoreXboxProduct");
static_assert(sizeof(FCloudPlatformStoreXboxProduct) == 0x000030, "Wrong size on FCloudPlatformStoreXboxProduct");
static_assert(offsetof(FCloudPlatformStoreXboxProduct, GameStoreProductId) == 0x000000, "Member 'FCloudPlatformStoreXboxProduct::GameStoreProductId' has a wrong offset!");
static_assert(offsetof(FCloudPlatformStoreXboxProduct, XboxId) == 0x000010, "Member 'FCloudPlatformStoreXboxProduct::XboxId' has a wrong offset!");
static_assert(offsetof(FCloudPlatformStoreXboxProduct, StoreId) == 0x000020, "Member 'FCloudPlatformStoreXboxProduct::StoreId' has a wrong offset!");

// ScriptStruct Flame.CloudPlatformStoreXboxProductList
// 0x0010 (0x0010 - 0x0000)
struct FCloudPlatformStoreXboxProductList final
{
public:
	TArray<struct FCloudPlatformStoreXboxProduct> Products;                                          // 0x0000(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FCloudPlatformStoreXboxProductList) == 0x000008, "Wrong alignment on FCloudPlatformStoreXboxProductList");
static_assert(sizeof(FCloudPlatformStoreXboxProductList) == 0x000010, "Wrong size on FCloudPlatformStoreXboxProductList");
static_assert(offsetof(FCloudPlatformStoreXboxProductList, Products) == 0x000000, "Member 'FCloudPlatformStoreXboxProductList::Products' has a wrong offset!");

// ScriptStruct Flame.FootprintInfo
// 0x0014 (0x0014 - 0x0000)
struct alignas(0x04) FFootprintInfo final
{
public:
	uint8                                         Pad_0[0x14];                                       // 0x0000(0x0014)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FFootprintInfo) == 0x000004, "Wrong alignment on FFootprintInfo");
static_assert(sizeof(FFootprintInfo) == 0x000014, "Wrong size on FFootprintInfo");

// ScriptStruct Flame.CloudShelterStats
// 0x0008 (0x0008 - 0x0000)
struct FCloudShelterStats final
{
public:
	int32                                         TotalCount;                                        // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         InProgressCount;                                   // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FCloudShelterStats) == 0x000004, "Wrong alignment on FCloudShelterStats");
static_assert(sizeof(FCloudShelterStats) == 0x000008, "Wrong size on FCloudShelterStats");
static_assert(offsetof(FCloudShelterStats, TotalCount) == 0x000000, "Member 'FCloudShelterStats::TotalCount' has a wrong offset!");
static_assert(offsetof(FCloudShelterStats, InProgressCount) == 0x000004, "Member 'FCloudShelterStats::InProgressCount' has a wrong offset!");

// ScriptStruct Flame.CloudBoostersSettings
// 0x0010 (0x0010 - 0x0000)
struct FCloudBoostersSettings final
{
public:
	class FString                                 ActivateBoosterTicketRequestName;                  // 0x0000(0x0010)(Edit, ZeroConstructor, Config, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FCloudBoostersSettings) == 0x000008, "Wrong alignment on FCloudBoostersSettings");
static_assert(sizeof(FCloudBoostersSettings) == 0x000010, "Wrong size on FCloudBoostersSettings");
static_assert(offsetof(FCloudBoostersSettings, ActivateBoosterTicketRequestName) == 0x000000, "Member 'FCloudBoostersSettings::ActivateBoosterTicketRequestName' has a wrong offset!");

// ScriptStruct Flame.HitCollection
// 0x0020 (0x0020 - 0x0000)
struct FHitCollection final
{
public:
	class UAnimSequence*                          HitForward;                                        // 0x0000(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAnimSequence*                          HitRight;                                          // 0x0008(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAnimSequence*                          HitLeft;                                           // 0x0010(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAnimSequence*                          HitBackward;                                       // 0x0018(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FHitCollection) == 0x000008, "Wrong alignment on FHitCollection");
static_assert(sizeof(FHitCollection) == 0x000020, "Wrong size on FHitCollection");
static_assert(offsetof(FHitCollection, HitForward) == 0x000000, "Member 'FHitCollection::HitForward' has a wrong offset!");
static_assert(offsetof(FHitCollection, HitRight) == 0x000008, "Member 'FHitCollection::HitRight' has a wrong offset!");
static_assert(offsetof(FHitCollection, HitLeft) == 0x000010, "Member 'FHitCollection::HitLeft' has a wrong offset!");
static_assert(offsetof(FHitCollection, HitBackward) == 0x000018, "Member 'FHitCollection::HitBackward' has a wrong offset!");

// ScriptStruct Flame.DeathCollection
// 0x0040 (0x0040 - 0x0000)
struct FDeathCollection final
{
public:
	TArray<class UAnimMontage*>                   DeathForward;                                      // 0x0000(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic)
	TArray<class UAnimMontage*>                   DeathLeft;                                         // 0x0010(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic)
	TArray<class UAnimMontage*>                   DeathRight;                                        // 0x0020(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic)
	TArray<class UAnimMontage*>                   DeathBack;                                         // 0x0030(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic)
};
static_assert(alignof(FDeathCollection) == 0x000008, "Wrong alignment on FDeathCollection");
static_assert(sizeof(FDeathCollection) == 0x000040, "Wrong size on FDeathCollection");
static_assert(offsetof(FDeathCollection, DeathForward) == 0x000000, "Member 'FDeathCollection::DeathForward' has a wrong offset!");
static_assert(offsetof(FDeathCollection, DeathLeft) == 0x000010, "Member 'FDeathCollection::DeathLeft' has a wrong offset!");
static_assert(offsetof(FDeathCollection, DeathRight) == 0x000020, "Member 'FDeathCollection::DeathRight' has a wrong offset!");
static_assert(offsetof(FDeathCollection, DeathBack) == 0x000030, "Member 'FDeathCollection::DeathBack' has a wrong offset!");

// ScriptStruct Flame.DamageCollection
// 0x0060 (0x0060 - 0x0000)
struct FDamageCollection final
{
public:
	struct FHitCollection                         HitCollection;                                     // 0x0000(0x0020)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FDeathCollection                       DeathCollection;                                   // 0x0020(0x0040)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NativeAccessSpecifierPublic)
};
static_assert(alignof(FDamageCollection) == 0x000008, "Wrong alignment on FDamageCollection");
static_assert(sizeof(FDamageCollection) == 0x000060, "Wrong size on FDamageCollection");
static_assert(offsetof(FDamageCollection, HitCollection) == 0x000000, "Member 'FDamageCollection::HitCollection' has a wrong offset!");
static_assert(offsetof(FDamageCollection, DeathCollection) == 0x000020, "Member 'FDamageCollection::DeathCollection' has a wrong offset!");

// ScriptStruct Flame.DamageCollections
// 0x0120 (0x0120 - 0x0000)
struct FDamageCollections final
{
public:
	struct FDamageCollection                      RifleCollection;                                   // 0x0000(0x0060)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NativeAccessSpecifierPublic)
	struct FDamageCollection                      PistolCollection;                                  // 0x0060(0x0060)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NativeAccessSpecifierPublic)
	struct FDamageCollection                      UnarmedCollection;                                 // 0x00C0(0x0060)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NativeAccessSpecifierPublic)
};
static_assert(alignof(FDamageCollections) == 0x000008, "Wrong alignment on FDamageCollections");
static_assert(sizeof(FDamageCollections) == 0x000120, "Wrong size on FDamageCollections");
static_assert(offsetof(FDamageCollections, RifleCollection) == 0x000000, "Member 'FDamageCollections::RifleCollection' has a wrong offset!");
static_assert(offsetof(FDamageCollections, PistolCollection) == 0x000060, "Member 'FDamageCollections::PistolCollection' has a wrong offset!");
static_assert(offsetof(FDamageCollections, UnarmedCollection) == 0x0000C0, "Member 'FDamageCollections::UnarmedCollection' has a wrong offset!");

// ScriptStruct Flame.CloudNewsSettings
// 0x0010 (0x0010 - 0x0000)
struct FCloudNewsSettings final
{
public:
	class FString                                 GetNewsClientRequestName;                          // 0x0000(0x0010)(Edit, ZeroConstructor, Config, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FCloudNewsSettings) == 0x000008, "Wrong alignment on FCloudNewsSettings");
static_assert(sizeof(FCloudNewsSettings) == 0x000010, "Wrong size on FCloudNewsSettings");
static_assert(offsetof(FCloudNewsSettings, GetNewsClientRequestName) == 0x000000, "Member 'FCloudNewsSettings::GetNewsClientRequestName' has a wrong offset!");

// ScriptStruct Flame.CloudMapsSettings
// 0x0020 (0x0020 - 0x0000)
struct FCloudMapsSettings final
{
public:
	class FString                                 GetMapRotationsClientRequestName;                  // 0x0000(0x0010)(Edit, ZeroConstructor, Config, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 GetMapRotationsServerRequestName;                  // 0x0010(0x0010)(Edit, ZeroConstructor, Config, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FCloudMapsSettings) == 0x000008, "Wrong alignment on FCloudMapsSettings");
static_assert(sizeof(FCloudMapsSettings) == 0x000020, "Wrong size on FCloudMapsSettings");
static_assert(offsetof(FCloudMapsSettings, GetMapRotationsClientRequestName) == 0x000000, "Member 'FCloudMapsSettings::GetMapRotationsClientRequestName' has a wrong offset!");
static_assert(offsetof(FCloudMapsSettings, GetMapRotationsServerRequestName) == 0x000010, "Member 'FCloudMapsSettings::GetMapRotationsServerRequestName' has a wrong offset!");

// ScriptStruct Flame.CloudHeartBeatSettings
// 0x0010 (0x0010 - 0x0000)
struct FCloudHeartBeatSettings final
{
public:
	class FString                                 SendHeartBeatUpdateServerRequestName;              // 0x0000(0x0010)(Edit, ZeroConstructor, Config, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FCloudHeartBeatSettings) == 0x000008, "Wrong alignment on FCloudHeartBeatSettings");
static_assert(sizeof(FCloudHeartBeatSettings) == 0x000010, "Wrong size on FCloudHeartBeatSettings");
static_assert(offsetof(FCloudHeartBeatSettings, SendHeartBeatUpdateServerRequestName) == 0x000000, "Member 'FCloudHeartBeatSettings::SendHeartBeatUpdateServerRequestName' has a wrong offset!");

// ScriptStruct Flame.CompoundActionCollection
// 0x0028 (0x0028 - 0x0000)
struct FCompoundActionCollection final
{
public:
	class UAnimSequence*                          Start;                                             // 0x0000(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAnimSequence*                          Loop;                                              // 0x0008(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAnimSequence*                          Action;                                            // 0x0010(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAnimSequence*                          End;                                               // 0x0018(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAnimSequence*                          ArmedLayer;                                        // 0x0020(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FCompoundActionCollection) == 0x000008, "Wrong alignment on FCompoundActionCollection");
static_assert(sizeof(FCompoundActionCollection) == 0x000028, "Wrong size on FCompoundActionCollection");
static_assert(offsetof(FCompoundActionCollection, Start) == 0x000000, "Member 'FCompoundActionCollection::Start' has a wrong offset!");
static_assert(offsetof(FCompoundActionCollection, Loop) == 0x000008, "Member 'FCompoundActionCollection::Loop' has a wrong offset!");
static_assert(offsetof(FCompoundActionCollection, Action) == 0x000010, "Member 'FCompoundActionCollection::Action' has a wrong offset!");
static_assert(offsetof(FCompoundActionCollection, End) == 0x000018, "Member 'FCompoundActionCollection::End' has a wrong offset!");
static_assert(offsetof(FCompoundActionCollection, ArmedLayer) == 0x000020, "Member 'FCompoundActionCollection::ArmedLayer' has a wrong offset!");

// ScriptStruct Flame.InteractionCollection
// 0x0210 (0x0210 - 0x0000)
struct FInteractionCollection final
{
public:
	class UAnimMontage*                           DoorUnarmed;                                       // 0x0000(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAnimMontage*                           DoorPistol;                                        // 0x0008(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAnimMontage*                           DoorRifle;                                         // 0x0010(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAnimMontage*                           CollectUnarmed;                                    // 0x0018(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAnimMontage*                           CollectPistol;                                     // 0x0020(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAnimMontage*                           CollectRifle;                                      // 0x0028(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FCompoundActionCollection              LootingStandOneHand;                               // 0x0030(0x0028)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NoDestructor, NativeAccessSpecifierPublic)
	struct FCompoundActionCollection              LootingCrouchOneHand;                              // 0x0058(0x0028)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NoDestructor, NativeAccessSpecifierPublic)
	struct FCompoundActionCollection              LootingProneOneHand;                               // 0x0080(0x0028)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NoDestructor, NativeAccessSpecifierPublic)
	struct FCompoundActionCollection              LootingStandTwoHands;                              // 0x00A8(0x0028)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NoDestructor, NativeAccessSpecifierPublic)
	struct FCompoundActionCollection              LootingCrouchTwoHands;                             // 0x00D0(0x0028)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NoDestructor, NativeAccessSpecifierPublic)
	struct FCompoundActionCollection              LootingProneTwoHands;                              // 0x00F8(0x0028)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NoDestructor, NativeAccessSpecifierPublic)
	struct FCompoundActionCollection              CachePreInteract;                                  // 0x0120(0x0028)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NoDestructor, NativeAccessSpecifierPublic)
	struct FCompoundActionCollection              CacheLoot;                                         // 0x0148(0x0028)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NoDestructor, NativeAccessSpecifierPublic)
	TMap<EStance, class UAnimSequence*>           AirdropStartInteract;                              // 0x0170(0x0050)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NativeAccessSpecifierPublic)
	struct FCompoundActionCollection              AirdropPreInteract;                                // 0x01C0(0x0028)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NoDestructor, NativeAccessSpecifierPublic)
	struct FCompoundActionCollection              AirdropLoot;                                       // 0x01E8(0x0028)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FInteractionCollection) == 0x000008, "Wrong alignment on FInteractionCollection");
static_assert(sizeof(FInteractionCollection) == 0x000210, "Wrong size on FInteractionCollection");
static_assert(offsetof(FInteractionCollection, DoorUnarmed) == 0x000000, "Member 'FInteractionCollection::DoorUnarmed' has a wrong offset!");
static_assert(offsetof(FInteractionCollection, DoorPistol) == 0x000008, "Member 'FInteractionCollection::DoorPistol' has a wrong offset!");
static_assert(offsetof(FInteractionCollection, DoorRifle) == 0x000010, "Member 'FInteractionCollection::DoorRifle' has a wrong offset!");
static_assert(offsetof(FInteractionCollection, CollectUnarmed) == 0x000018, "Member 'FInteractionCollection::CollectUnarmed' has a wrong offset!");
static_assert(offsetof(FInteractionCollection, CollectPistol) == 0x000020, "Member 'FInteractionCollection::CollectPistol' has a wrong offset!");
static_assert(offsetof(FInteractionCollection, CollectRifle) == 0x000028, "Member 'FInteractionCollection::CollectRifle' has a wrong offset!");
static_assert(offsetof(FInteractionCollection, LootingStandOneHand) == 0x000030, "Member 'FInteractionCollection::LootingStandOneHand' has a wrong offset!");
static_assert(offsetof(FInteractionCollection, LootingCrouchOneHand) == 0x000058, "Member 'FInteractionCollection::LootingCrouchOneHand' has a wrong offset!");
static_assert(offsetof(FInteractionCollection, LootingProneOneHand) == 0x000080, "Member 'FInteractionCollection::LootingProneOneHand' has a wrong offset!");
static_assert(offsetof(FInteractionCollection, LootingStandTwoHands) == 0x0000A8, "Member 'FInteractionCollection::LootingStandTwoHands' has a wrong offset!");
static_assert(offsetof(FInteractionCollection, LootingCrouchTwoHands) == 0x0000D0, "Member 'FInteractionCollection::LootingCrouchTwoHands' has a wrong offset!");
static_assert(offsetof(FInteractionCollection, LootingProneTwoHands) == 0x0000F8, "Member 'FInteractionCollection::LootingProneTwoHands' has a wrong offset!");
static_assert(offsetof(FInteractionCollection, CachePreInteract) == 0x000120, "Member 'FInteractionCollection::CachePreInteract' has a wrong offset!");
static_assert(offsetof(FInteractionCollection, CacheLoot) == 0x000148, "Member 'FInteractionCollection::CacheLoot' has a wrong offset!");
static_assert(offsetof(FInteractionCollection, AirdropStartInteract) == 0x000170, "Member 'FInteractionCollection::AirdropStartInteract' has a wrong offset!");
static_assert(offsetof(FInteractionCollection, AirdropPreInteract) == 0x0001C0, "Member 'FInteractionCollection::AirdropPreInteract' has a wrong offset!");
static_assert(offsetof(FInteractionCollection, AirdropLoot) == 0x0001E8, "Member 'FInteractionCollection::AirdropLoot' has a wrong offset!");

// ScriptStruct Flame.CloudWeaponCustomizationsSettings
// 0x0090 (0x0090 - 0x0000)
struct FCloudWeaponCustomizationsSettings final
{
public:
	class FString                                 GetUserWeaponSkinsClientRequestName;               // 0x0000(0x0010)(Edit, ZeroConstructor, Config, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 GetUserWeaponSkinsServerRequestName;               // 0x0010(0x0010)(Edit, ZeroConstructor, Config, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 SetUserWeaponSkinsClientRequestName;               // 0x0020(0x0010)(Edit, ZeroConstructor, Config, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 GetUserWeaponSkinClientRequestName;                // 0x0030(0x0010)(Edit, ZeroConstructor, Config, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 GetUserWeaponSkinServerRequestName;                // 0x0040(0x0010)(Edit, ZeroConstructor, Config, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 SetUserWeaponSkinClientRequestName;                // 0x0050(0x0010)(Edit, ZeroConstructor, Config, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ClearUserWeaponSkinClientRequestName;              // 0x0060(0x0010)(Edit, ZeroConstructor, Config, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 GetOwnedUserWeaponSkinClientRequestName;           // 0x0070(0x0010)(Edit, ZeroConstructor, Config, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 GetOwnedUserWeaponSkinServerRequestName;           // 0x0080(0x0010)(Edit, ZeroConstructor, Config, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FCloudWeaponCustomizationsSettings) == 0x000008, "Wrong alignment on FCloudWeaponCustomizationsSettings");
static_assert(sizeof(FCloudWeaponCustomizationsSettings) == 0x000090, "Wrong size on FCloudWeaponCustomizationsSettings");
static_assert(offsetof(FCloudWeaponCustomizationsSettings, GetUserWeaponSkinsClientRequestName) == 0x000000, "Member 'FCloudWeaponCustomizationsSettings::GetUserWeaponSkinsClientRequestName' has a wrong offset!");
static_assert(offsetof(FCloudWeaponCustomizationsSettings, GetUserWeaponSkinsServerRequestName) == 0x000010, "Member 'FCloudWeaponCustomizationsSettings::GetUserWeaponSkinsServerRequestName' has a wrong offset!");
static_assert(offsetof(FCloudWeaponCustomizationsSettings, SetUserWeaponSkinsClientRequestName) == 0x000020, "Member 'FCloudWeaponCustomizationsSettings::SetUserWeaponSkinsClientRequestName' has a wrong offset!");
static_assert(offsetof(FCloudWeaponCustomizationsSettings, GetUserWeaponSkinClientRequestName) == 0x000030, "Member 'FCloudWeaponCustomizationsSettings::GetUserWeaponSkinClientRequestName' has a wrong offset!");
static_assert(offsetof(FCloudWeaponCustomizationsSettings, GetUserWeaponSkinServerRequestName) == 0x000040, "Member 'FCloudWeaponCustomizationsSettings::GetUserWeaponSkinServerRequestName' has a wrong offset!");
static_assert(offsetof(FCloudWeaponCustomizationsSettings, SetUserWeaponSkinClientRequestName) == 0x000050, "Member 'FCloudWeaponCustomizationsSettings::SetUserWeaponSkinClientRequestName' has a wrong offset!");
static_assert(offsetof(FCloudWeaponCustomizationsSettings, ClearUserWeaponSkinClientRequestName) == 0x000060, "Member 'FCloudWeaponCustomizationsSettings::ClearUserWeaponSkinClientRequestName' has a wrong offset!");
static_assert(offsetof(FCloudWeaponCustomizationsSettings, GetOwnedUserWeaponSkinClientRequestName) == 0x000070, "Member 'FCloudWeaponCustomizationsSettings::GetOwnedUserWeaponSkinClientRequestName' has a wrong offset!");
static_assert(offsetof(FCloudWeaponCustomizationsSettings, GetOwnedUserWeaponSkinServerRequestName) == 0x000080, "Member 'FCloudWeaponCustomizationsSettings::GetOwnedUserWeaponSkinServerRequestName' has a wrong offset!");

// ScriptStruct Flame.CloudOnboardingLoginRewardsSettings
// 0x0020 (0x0020 - 0x0000)
struct FCloudOnboardingLoginRewardsSettings final
{
public:
	class FString                                 GetCloudOnboardingLoginRewardsRequestName;         // 0x0000(0x0010)(Edit, ZeroConstructor, Config, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ClaimCloudOnboardingLoginRewardsRequestName;       // 0x0010(0x0010)(Edit, ZeroConstructor, Config, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FCloudOnboardingLoginRewardsSettings) == 0x000008, "Wrong alignment on FCloudOnboardingLoginRewardsSettings");
static_assert(sizeof(FCloudOnboardingLoginRewardsSettings) == 0x000020, "Wrong size on FCloudOnboardingLoginRewardsSettings");
static_assert(offsetof(FCloudOnboardingLoginRewardsSettings, GetCloudOnboardingLoginRewardsRequestName) == 0x000000, "Member 'FCloudOnboardingLoginRewardsSettings::GetCloudOnboardingLoginRewardsRequestName' has a wrong offset!");
static_assert(offsetof(FCloudOnboardingLoginRewardsSettings, ClaimCloudOnboardingLoginRewardsRequestName) == 0x000010, "Member 'FCloudOnboardingLoginRewardsSettings::ClaimCloudOnboardingLoginRewardsRequestName' has a wrong offset!");

// ScriptStruct Flame.ClimbingCollection
// 0x0020 (0x0020 - 0x0000)
struct FClimbingCollection final
{
public:
	TArray<struct FClimbingAnimationRange>        ClimbingSet;                                       // 0x0000(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic)
	TArray<struct FClimbingAnimationRange>        VaultingSet;                                       // 0x0010(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic)
};
static_assert(alignof(FClimbingCollection) == 0x000008, "Wrong alignment on FClimbingCollection");
static_assert(sizeof(FClimbingCollection) == 0x000020, "Wrong size on FClimbingCollection");
static_assert(offsetof(FClimbingCollection, ClimbingSet) == 0x000000, "Member 'FClimbingCollection::ClimbingSet' has a wrong offset!");
static_assert(offsetof(FClimbingCollection, VaultingSet) == 0x000010, "Member 'FClimbingCollection::VaultingSet' has a wrong offset!");

// ScriptStruct Flame.JumpingCollection
// 0x0040 (0x0040 - 0x0000)
struct FJumpingCollection final
{
public:
	class UAnimSequence*                          JumpStartIdle;                                     // 0x0000(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAnimSequence*                          JumpStartIdleCrouch;                               // 0x0008(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UBlendSpace1D*                          JumpStartMoving;                                   // 0x0010(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAnimSequence*                          FallIdle;                                          // 0x0018(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UBlendSpace*                            FallMoving;                                        // 0x0020(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAnimSequence*                          LongFall;                                          // 0x0028(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAnimMontage*                           JumpLand;                                          // 0x0030(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAnimMontage*                           JumpLandHard;                                      // 0x0038(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FJumpingCollection) == 0x000008, "Wrong alignment on FJumpingCollection");
static_assert(sizeof(FJumpingCollection) == 0x000040, "Wrong size on FJumpingCollection");
static_assert(offsetof(FJumpingCollection, JumpStartIdle) == 0x000000, "Member 'FJumpingCollection::JumpStartIdle' has a wrong offset!");
static_assert(offsetof(FJumpingCollection, JumpStartIdleCrouch) == 0x000008, "Member 'FJumpingCollection::JumpStartIdleCrouch' has a wrong offset!");
static_assert(offsetof(FJumpingCollection, JumpStartMoving) == 0x000010, "Member 'FJumpingCollection::JumpStartMoving' has a wrong offset!");
static_assert(offsetof(FJumpingCollection, FallIdle) == 0x000018, "Member 'FJumpingCollection::FallIdle' has a wrong offset!");
static_assert(offsetof(FJumpingCollection, FallMoving) == 0x000020, "Member 'FJumpingCollection::FallMoving' has a wrong offset!");
static_assert(offsetof(FJumpingCollection, LongFall) == 0x000028, "Member 'FJumpingCollection::LongFall' has a wrong offset!");
static_assert(offsetof(FJumpingCollection, JumpLand) == 0x000030, "Member 'FJumpingCollection::JumpLand' has a wrong offset!");
static_assert(offsetof(FJumpingCollection, JumpLandHard) == 0x000038, "Member 'FJumpingCollection::JumpLandHard' has a wrong offset!");

// ScriptStruct Flame.LadderCollection
// 0x0050 (0x0050 - 0x0000)
struct FLadderCollection final
{
public:
	class UAnimSequence*                          LadderGoingUp;                                     // 0x0000(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAnimSequence*                          LadderGoingUpSlope;                                // 0x0008(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAnimSequence*                          LadderGoingDown;                                   // 0x0010(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAnimSequence*                          LadderGoingDownSlope;                              // 0x0018(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAnimSequence*                          LadderSlide;                                       // 0x0020(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAnimSequence*                          LadderSlideSlope;                                  // 0x0028(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAnimMontage*                           MountLadderTop;                                    // 0x0030(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAnimMontage*                           MountLadderBottom;                                 // 0x0038(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAnimMontage*                           DismountLadderTop;                                 // 0x0040(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAnimMontage*                           DismountLadderBottom;                              // 0x0048(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FLadderCollection) == 0x000008, "Wrong alignment on FLadderCollection");
static_assert(sizeof(FLadderCollection) == 0x000050, "Wrong size on FLadderCollection");
static_assert(offsetof(FLadderCollection, LadderGoingUp) == 0x000000, "Member 'FLadderCollection::LadderGoingUp' has a wrong offset!");
static_assert(offsetof(FLadderCollection, LadderGoingUpSlope) == 0x000008, "Member 'FLadderCollection::LadderGoingUpSlope' has a wrong offset!");
static_assert(offsetof(FLadderCollection, LadderGoingDown) == 0x000010, "Member 'FLadderCollection::LadderGoingDown' has a wrong offset!");
static_assert(offsetof(FLadderCollection, LadderGoingDownSlope) == 0x000018, "Member 'FLadderCollection::LadderGoingDownSlope' has a wrong offset!");
static_assert(offsetof(FLadderCollection, LadderSlide) == 0x000020, "Member 'FLadderCollection::LadderSlide' has a wrong offset!");
static_assert(offsetof(FLadderCollection, LadderSlideSlope) == 0x000028, "Member 'FLadderCollection::LadderSlideSlope' has a wrong offset!");
static_assert(offsetof(FLadderCollection, MountLadderTop) == 0x000030, "Member 'FLadderCollection::MountLadderTop' has a wrong offset!");
static_assert(offsetof(FLadderCollection, MountLadderBottom) == 0x000038, "Member 'FLadderCollection::MountLadderBottom' has a wrong offset!");
static_assert(offsetof(FLadderCollection, DismountLadderTop) == 0x000040, "Member 'FLadderCollection::DismountLadderTop' has a wrong offset!");
static_assert(offsetof(FLadderCollection, DismountLadderBottom) == 0x000048, "Member 'FLadderCollection::DismountLadderBottom' has a wrong offset!");

// ScriptStruct Flame.VerticalMovement
// 0x0140 (0x0140 - 0x0000)
struct FVerticalMovement final
{
public:
	struct FClimbingCollection                    ClimbingCollection;                                // 0x0000(0x0020)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NativeAccessSpecifierPublic)
	struct FJumpingCollection                     RifleJumping;                                      // 0x0020(0x0040)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NoDestructor, NativeAccessSpecifierPublic)
	struct FJumpingCollection                     UnarmedJumping;                                    // 0x0060(0x0040)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_A0[0x50];                                      // 0x00A0(0x0050)(Fixing Size After Last Property [ Dumper-7 ])
	struct FLadderCollection                      Ladder;                                            // 0x00F0(0x0050)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FVerticalMovement) == 0x000008, "Wrong alignment on FVerticalMovement");
static_assert(sizeof(FVerticalMovement) == 0x000140, "Wrong size on FVerticalMovement");
static_assert(offsetof(FVerticalMovement, ClimbingCollection) == 0x000000, "Member 'FVerticalMovement::ClimbingCollection' has a wrong offset!");
static_assert(offsetof(FVerticalMovement, RifleJumping) == 0x000020, "Member 'FVerticalMovement::RifleJumping' has a wrong offset!");
static_assert(offsetof(FVerticalMovement, UnarmedJumping) == 0x000060, "Member 'FVerticalMovement::UnarmedJumping' has a wrong offset!");
static_assert(offsetof(FVerticalMovement, Ladder) == 0x0000F0, "Member 'FVerticalMovement::Ladder' has a wrong offset!");

// ScriptStruct Flame.CloudMapRewardsSettings
// 0x0010 (0x0010 - 0x0000)
struct FCloudMapRewardsSettings final
{
public:
	class FString                                 GetCloudMapRewardsRequestName;                     // 0x0000(0x0010)(Edit, ZeroConstructor, Config, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FCloudMapRewardsSettings) == 0x000008, "Wrong alignment on FCloudMapRewardsSettings");
static_assert(sizeof(FCloudMapRewardsSettings) == 0x000010, "Wrong size on FCloudMapRewardsSettings");
static_assert(offsetof(FCloudMapRewardsSettings, GetCloudMapRewardsRequestName) == 0x000000, "Member 'FCloudMapRewardsSettings::GetCloudMapRewardsRequestName' has a wrong offset!");

// ScriptStruct Flame.CloudUserWipeRewardsSettings
// 0x0010 (0x0010 - 0x0000)
struct FCloudUserWipeRewardsSettings final
{
public:
	class FString                                 GetCloudUserWipeRewardsRequestName;                // 0x0000(0x0010)(Edit, ZeroConstructor, Config, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FCloudUserWipeRewardsSettings) == 0x000008, "Wrong alignment on FCloudUserWipeRewardsSettings");
static_assert(sizeof(FCloudUserWipeRewardsSettings) == 0x000010, "Wrong size on FCloudUserWipeRewardsSettings");
static_assert(offsetof(FCloudUserWipeRewardsSettings, GetCloudUserWipeRewardsRequestName) == 0x000000, "Member 'FCloudUserWipeRewardsSettings::GetCloudUserWipeRewardsRequestName' has a wrong offset!");

// ScriptStruct Flame.CloudCharityBoxSettings
// 0x0040 (0x0040 - 0x0000)
struct FCloudCharityBoxSettings final
{
public:
	class FString                                 GetCharityBoxStateRequestName;                     // 0x0000(0x0010)(Edit, ZeroConstructor, Config, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 AddToCharityBoxRequestName;                        // 0x0010(0x0010)(Edit, ZeroConstructor, Config, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 GetCharityBoxSeasonsInfoClientRequestName;         // 0x0020(0x0010)(Edit, ZeroConstructor, Config, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ClaimCharityBoxRewardsClientRequestName;           // 0x0030(0x0010)(Edit, ZeroConstructor, Config, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FCloudCharityBoxSettings) == 0x000008, "Wrong alignment on FCloudCharityBoxSettings");
static_assert(sizeof(FCloudCharityBoxSettings) == 0x000040, "Wrong size on FCloudCharityBoxSettings");
static_assert(offsetof(FCloudCharityBoxSettings, GetCharityBoxStateRequestName) == 0x000000, "Member 'FCloudCharityBoxSettings::GetCharityBoxStateRequestName' has a wrong offset!");
static_assert(offsetof(FCloudCharityBoxSettings, AddToCharityBoxRequestName) == 0x000010, "Member 'FCloudCharityBoxSettings::AddToCharityBoxRequestName' has a wrong offset!");
static_assert(offsetof(FCloudCharityBoxSettings, GetCharityBoxSeasonsInfoClientRequestName) == 0x000020, "Member 'FCloudCharityBoxSettings::GetCharityBoxSeasonsInfoClientRequestName' has a wrong offset!");
static_assert(offsetof(FCloudCharityBoxSettings, ClaimCharityBoxRewardsClientRequestName) == 0x000030, "Member 'FCloudCharityBoxSettings::ClaimCharityBoxRewardsClientRequestName' has a wrong offset!");

// ScriptStruct Flame.CloudUserStatsSettings
// 0x0050 (0x0050 - 0x0000)
struct FCloudUserStatsSettings final
{
public:
	class FString                                 GetCloudUserStatsRequestName;                      // 0x0000(0x0010)(Edit, ZeroConstructor, Config, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 GetCloudAllUserStatsRequestName;                   // 0x0010(0x0010)(Edit, ZeroConstructor, Config, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 GetUserStatisticsClientRequestName;                // 0x0020(0x0010)(Edit, ZeroConstructor, Config, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 GetUserLeaderBoardsClientRequestName;              // 0x0030(0x0010)(Edit, ZeroConstructor, Config, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 GetUserLeaderBoardDetailClientRequestName;         // 0x0040(0x0010)(Edit, ZeroConstructor, Config, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FCloudUserStatsSettings) == 0x000008, "Wrong alignment on FCloudUserStatsSettings");
static_assert(sizeof(FCloudUserStatsSettings) == 0x000050, "Wrong size on FCloudUserStatsSettings");
static_assert(offsetof(FCloudUserStatsSettings, GetCloudUserStatsRequestName) == 0x000000, "Member 'FCloudUserStatsSettings::GetCloudUserStatsRequestName' has a wrong offset!");
static_assert(offsetof(FCloudUserStatsSettings, GetCloudAllUserStatsRequestName) == 0x000010, "Member 'FCloudUserStatsSettings::GetCloudAllUserStatsRequestName' has a wrong offset!");
static_assert(offsetof(FCloudUserStatsSettings, GetUserStatisticsClientRequestName) == 0x000020, "Member 'FCloudUserStatsSettings::GetUserStatisticsClientRequestName' has a wrong offset!");
static_assert(offsetof(FCloudUserStatsSettings, GetUserLeaderBoardsClientRequestName) == 0x000030, "Member 'FCloudUserStatsSettings::GetUserLeaderBoardsClientRequestName' has a wrong offset!");
static_assert(offsetof(FCloudUserStatsSettings, GetUserLeaderBoardDetailClientRequestName) == 0x000040, "Member 'FCloudUserStatsSettings::GetUserLeaderBoardDetailClientRequestName' has a wrong offset!");

// ScriptStruct Flame.StaggerSet
// 0x0040 (0x0040 - 0x0000)
struct FStaggerSet final
{
public:
	TArray<class UAnimSequence*>                  StaggerLeft;                                       // 0x0000(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic)
	TArray<class UAnimSequence*>                  StaggerRight;                                      // 0x0010(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic)
	TArray<class UAnimSequence*>                  StaggerForward;                                    // 0x0020(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic)
	TArray<class UAnimSequence*>                  StaggerBack;                                       // 0x0030(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic)
};
static_assert(alignof(FStaggerSet) == 0x000008, "Wrong alignment on FStaggerSet");
static_assert(sizeof(FStaggerSet) == 0x000040, "Wrong size on FStaggerSet");
static_assert(offsetof(FStaggerSet, StaggerLeft) == 0x000000, "Member 'FStaggerSet::StaggerLeft' has a wrong offset!");
static_assert(offsetof(FStaggerSet, StaggerRight) == 0x000010, "Member 'FStaggerSet::StaggerRight' has a wrong offset!");
static_assert(offsetof(FStaggerSet, StaggerForward) == 0x000020, "Member 'FStaggerSet::StaggerForward' has a wrong offset!");
static_assert(offsetof(FStaggerSet, StaggerBack) == 0x000030, "Member 'FStaggerSet::StaggerBack' has a wrong offset!");

// ScriptStruct Flame.StaggerReactionsCollection
// 0x00C0 (0x00C0 - 0x0000)
struct FStaggerReactionsCollection final
{
public:
	struct FStaggerSet                            StaggerSetStand;                                   // 0x0000(0x0040)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NativeAccessSpecifierPublic)
	struct FStaggerSet                            StaggerSetCrouch;                                  // 0x0040(0x0040)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NativeAccessSpecifierPublic)
	struct FStaggerSet                            StaggerSetProne;                                   // 0x0080(0x0040)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NativeAccessSpecifierPublic)
};
static_assert(alignof(FStaggerReactionsCollection) == 0x000008, "Wrong alignment on FStaggerReactionsCollection");
static_assert(sizeof(FStaggerReactionsCollection) == 0x0000C0, "Wrong size on FStaggerReactionsCollection");
static_assert(offsetof(FStaggerReactionsCollection, StaggerSetStand) == 0x000000, "Member 'FStaggerReactionsCollection::StaggerSetStand' has a wrong offset!");
static_assert(offsetof(FStaggerReactionsCollection, StaggerSetCrouch) == 0x000040, "Member 'FStaggerReactionsCollection::StaggerSetCrouch' has a wrong offset!");
static_assert(offsetof(FStaggerReactionsCollection, StaggerSetProne) == 0x000080, "Member 'FStaggerReactionsCollection::StaggerSetProne' has a wrong offset!");

// ScriptStruct Flame.GameStoreSettings
// 0x0050 (0x0050 - 0x0000)
struct FGameStoreSettings final
{
public:
	class FString                                 GetGameStoreProductListRequestName;                // 0x0000(0x0010)(Edit, ZeroConstructor, Config, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 GetGameStoreOfferListRequestName;                  // 0x0010(0x0010)(Edit, ZeroConstructor, Config, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 GetGameStorePurchaseListRequestName;               // 0x0020(0x0010)(Edit, ZeroConstructor, Config, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 PurchaseGameStoreProductRequestName;               // 0x0030(0x0010)(Edit, ZeroConstructor, Config, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 GetGameStoreSellingPointsClientRequestName;        // 0x0040(0x0010)(Edit, ZeroConstructor, Config, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FGameStoreSettings) == 0x000008, "Wrong alignment on FGameStoreSettings");
static_assert(sizeof(FGameStoreSettings) == 0x000050, "Wrong size on FGameStoreSettings");
static_assert(offsetof(FGameStoreSettings, GetGameStoreProductListRequestName) == 0x000000, "Member 'FGameStoreSettings::GetGameStoreProductListRequestName' has a wrong offset!");
static_assert(offsetof(FGameStoreSettings, GetGameStoreOfferListRequestName) == 0x000010, "Member 'FGameStoreSettings::GetGameStoreOfferListRequestName' has a wrong offset!");
static_assert(offsetof(FGameStoreSettings, GetGameStorePurchaseListRequestName) == 0x000020, "Member 'FGameStoreSettings::GetGameStorePurchaseListRequestName' has a wrong offset!");
static_assert(offsetof(FGameStoreSettings, PurchaseGameStoreProductRequestName) == 0x000030, "Member 'FGameStoreSettings::PurchaseGameStoreProductRequestName' has a wrong offset!");
static_assert(offsetof(FGameStoreSettings, GetGameStoreSellingPointsClientRequestName) == 0x000040, "Member 'FGameStoreSettings::GetGameStoreSellingPointsClientRequestName' has a wrong offset!");

// ScriptStruct Flame.CloudPlatformStoreSettings
// 0x00D0 (0x00D0 - 0x0000)
struct FCloudPlatformStoreSettings final
{
public:
	class FString                                 GetSteamProductListRequestName;                    // 0x0000(0x0010)(Edit, ZeroConstructor, Config, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 OnProductPurchasedSteamRequestName;                // 0x0010(0x0010)(Edit, ZeroConstructor, Config, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 GetXboxProductListRequestName;                     // 0x0020(0x0010)(Edit, ZeroConstructor, Config, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 OnProductPurchasedXboxRequestName;                 // 0x0030(0x0010)(Edit, ZeroConstructor, Config, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 GetWindowsProductListRequestName;                  // 0x0040(0x0010)(Edit, ZeroConstructor, Config, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 OnProductPurchasedWindowsRequestName;              // 0x0050(0x0010)(Edit, ZeroConstructor, Config, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 GetSwitchProductListClientRequestName;             // 0x0060(0x0010)(Edit, ZeroConstructor, Config, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 OnProductPurchasedSwitchRequestName;               // 0x0070(0x0010)(Edit, ZeroConstructor, Config, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 GetPlayFabPlaystationProductListClientRequestName; // 0x0080(0x0010)(Edit, ZeroConstructor, Config, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 OnProductPurchasedPlayFabClientRequestName;        // 0x0090(0x0010)(Edit, ZeroConstructor, Config, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 OnProductPurchasedSteamClientRequestName;          // 0x00A0(0x0010)(Edit, ZeroConstructor, Config, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 SteamInitMicroTransactionRequestName;              // 0x00B0(0x0010)(Edit, ZeroConstructor, Config, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 SteamFinalizeMicroTransactionRequestName;          // 0x00C0(0x0010)(Edit, ZeroConstructor, Config, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FCloudPlatformStoreSettings) == 0x000008, "Wrong alignment on FCloudPlatformStoreSettings");
static_assert(sizeof(FCloudPlatformStoreSettings) == 0x0000D0, "Wrong size on FCloudPlatformStoreSettings");
static_assert(offsetof(FCloudPlatformStoreSettings, GetSteamProductListRequestName) == 0x000000, "Member 'FCloudPlatformStoreSettings::GetSteamProductListRequestName' has a wrong offset!");
static_assert(offsetof(FCloudPlatformStoreSettings, OnProductPurchasedSteamRequestName) == 0x000010, "Member 'FCloudPlatformStoreSettings::OnProductPurchasedSteamRequestName' has a wrong offset!");
static_assert(offsetof(FCloudPlatformStoreSettings, GetXboxProductListRequestName) == 0x000020, "Member 'FCloudPlatformStoreSettings::GetXboxProductListRequestName' has a wrong offset!");
static_assert(offsetof(FCloudPlatformStoreSettings, OnProductPurchasedXboxRequestName) == 0x000030, "Member 'FCloudPlatformStoreSettings::OnProductPurchasedXboxRequestName' has a wrong offset!");
static_assert(offsetof(FCloudPlatformStoreSettings, GetWindowsProductListRequestName) == 0x000040, "Member 'FCloudPlatformStoreSettings::GetWindowsProductListRequestName' has a wrong offset!");
static_assert(offsetof(FCloudPlatformStoreSettings, OnProductPurchasedWindowsRequestName) == 0x000050, "Member 'FCloudPlatformStoreSettings::OnProductPurchasedWindowsRequestName' has a wrong offset!");
static_assert(offsetof(FCloudPlatformStoreSettings, GetSwitchProductListClientRequestName) == 0x000060, "Member 'FCloudPlatformStoreSettings::GetSwitchProductListClientRequestName' has a wrong offset!");
static_assert(offsetof(FCloudPlatformStoreSettings, OnProductPurchasedSwitchRequestName) == 0x000070, "Member 'FCloudPlatformStoreSettings::OnProductPurchasedSwitchRequestName' has a wrong offset!");
static_assert(offsetof(FCloudPlatformStoreSettings, GetPlayFabPlaystationProductListClientRequestName) == 0x000080, "Member 'FCloudPlatformStoreSettings::GetPlayFabPlaystationProductListClientRequestName' has a wrong offset!");
static_assert(offsetof(FCloudPlatformStoreSettings, OnProductPurchasedPlayFabClientRequestName) == 0x000090, "Member 'FCloudPlatformStoreSettings::OnProductPurchasedPlayFabClientRequestName' has a wrong offset!");
static_assert(offsetof(FCloudPlatformStoreSettings, OnProductPurchasedSteamClientRequestName) == 0x0000A0, "Member 'FCloudPlatformStoreSettings::OnProductPurchasedSteamClientRequestName' has a wrong offset!");
static_assert(offsetof(FCloudPlatformStoreSettings, SteamInitMicroTransactionRequestName) == 0x0000B0, "Member 'FCloudPlatformStoreSettings::SteamInitMicroTransactionRequestName' has a wrong offset!");
static_assert(offsetof(FCloudPlatformStoreSettings, SteamFinalizeMicroTransactionRequestName) == 0x0000C0, "Member 'FCloudPlatformStoreSettings::SteamFinalizeMicroTransactionRequestName' has a wrong offset!");

// ScriptStruct Flame.BipedalAimedLoop
// 0x0030 (0x0030 - 0x0000)
struct FBipedalAimedLoop final
{
public:
	class UAnimSequence*                          AimMoveForward;                                    // 0x0000(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAnimSequence*                          AimMoveRightForward;                               // 0x0008(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAnimSequence*                          AimMoveRightBack;                                  // 0x0010(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAnimSequence*                          AimMoveLeftForward;                                // 0x0018(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAnimSequence*                          AimMoveLeftBack;                                   // 0x0020(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAnimSequence*                          AimMoveBack;                                       // 0x0028(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FBipedalAimedLoop) == 0x000008, "Wrong alignment on FBipedalAimedLoop");
static_assert(sizeof(FBipedalAimedLoop) == 0x000030, "Wrong size on FBipedalAimedLoop");
static_assert(offsetof(FBipedalAimedLoop, AimMoveForward) == 0x000000, "Member 'FBipedalAimedLoop::AimMoveForward' has a wrong offset!");
static_assert(offsetof(FBipedalAimedLoop, AimMoveRightForward) == 0x000008, "Member 'FBipedalAimedLoop::AimMoveRightForward' has a wrong offset!");
static_assert(offsetof(FBipedalAimedLoop, AimMoveRightBack) == 0x000010, "Member 'FBipedalAimedLoop::AimMoveRightBack' has a wrong offset!");
static_assert(offsetof(FBipedalAimedLoop, AimMoveLeftForward) == 0x000018, "Member 'FBipedalAimedLoop::AimMoveLeftForward' has a wrong offset!");
static_assert(offsetof(FBipedalAimedLoop, AimMoveLeftBack) == 0x000020, "Member 'FBipedalAimedLoop::AimMoveLeftBack' has a wrong offset!");
static_assert(offsetof(FBipedalAimedLoop, AimMoveBack) == 0x000028, "Member 'FBipedalAimedLoop::AimMoveBack' has a wrong offset!");

// ScriptStruct Flame.CloudMarketplaceSettings
// 0x0040 (0x0040 - 0x0000)
struct FCloudMarketplaceSettings final
{
public:
	class FString                                 BlockCurrencyForItemClientRequestName;             // 0x0000(0x0010)(Edit, ZeroConstructor, Config, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 UnBlockCurrencyForItemClientRequestName;           // 0x0010(0x0010)(Edit, ZeroConstructor, Config, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 GetUserBalanceClientRequestName;                   // 0x0020(0x0010)(Edit, ZeroConstructor, Config, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 GetPriceListRequestName;                           // 0x0030(0x0010)(Edit, ZeroConstructor, Config, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FCloudMarketplaceSettings) == 0x000008, "Wrong alignment on FCloudMarketplaceSettings");
static_assert(sizeof(FCloudMarketplaceSettings) == 0x000040, "Wrong size on FCloudMarketplaceSettings");
static_assert(offsetof(FCloudMarketplaceSettings, BlockCurrencyForItemClientRequestName) == 0x000000, "Member 'FCloudMarketplaceSettings::BlockCurrencyForItemClientRequestName' has a wrong offset!");
static_assert(offsetof(FCloudMarketplaceSettings, UnBlockCurrencyForItemClientRequestName) == 0x000010, "Member 'FCloudMarketplaceSettings::UnBlockCurrencyForItemClientRequestName' has a wrong offset!");
static_assert(offsetof(FCloudMarketplaceSettings, GetUserBalanceClientRequestName) == 0x000020, "Member 'FCloudMarketplaceSettings::GetUserBalanceClientRequestName' has a wrong offset!");
static_assert(offsetof(FCloudMarketplaceSettings, GetPriceListRequestName) == 0x000030, "Member 'FCloudMarketplaceSettings::GetPriceListRequestName' has a wrong offset!");

// ScriptStruct Flame.CloudDataStructuresSettings
// 0x0050 (0x0050 - 0x0000)
struct FCloudDataStructuresSettings final
{
public:
	class FString                                 GetImprovementClassesRequestName;                  // 0x0000(0x0010)(Edit, ZeroConstructor, Config, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 GetImprovementSlotsRequestName;                    // 0x0010(0x0010)(Edit, ZeroConstructor, Config, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 GetImprovementLevelsRequestName;                   // 0x0020(0x0010)(Edit, ZeroConstructor, Config, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 GetImprovementsPerLevelRequestName;                // 0x0030(0x0010)(Edit, ZeroConstructor, Config, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 GetConfigurationRequestName;                       // 0x0040(0x0010)(Edit, ZeroConstructor, Config, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FCloudDataStructuresSettings) == 0x000008, "Wrong alignment on FCloudDataStructuresSettings");
static_assert(sizeof(FCloudDataStructuresSettings) == 0x000050, "Wrong size on FCloudDataStructuresSettings");
static_assert(offsetof(FCloudDataStructuresSettings, GetImprovementClassesRequestName) == 0x000000, "Member 'FCloudDataStructuresSettings::GetImprovementClassesRequestName' has a wrong offset!");
static_assert(offsetof(FCloudDataStructuresSettings, GetImprovementSlotsRequestName) == 0x000010, "Member 'FCloudDataStructuresSettings::GetImprovementSlotsRequestName' has a wrong offset!");
static_assert(offsetof(FCloudDataStructuresSettings, GetImprovementLevelsRequestName) == 0x000020, "Member 'FCloudDataStructuresSettings::GetImprovementLevelsRequestName' has a wrong offset!");
static_assert(offsetof(FCloudDataStructuresSettings, GetImprovementsPerLevelRequestName) == 0x000030, "Member 'FCloudDataStructuresSettings::GetImprovementsPerLevelRequestName' has a wrong offset!");
static_assert(offsetof(FCloudDataStructuresSettings, GetConfigurationRequestName) == 0x000040, "Member 'FCloudDataStructuresSettings::GetConfigurationRequestName' has a wrong offset!");

// ScriptStruct Flame.CloudShelterSettings
// 0x0070 (0x0070 - 0x0000)
struct FCloudShelterSettings final
{
public:
	class FString                                 BoostImprovementClientRequestName;                 // 0x0000(0x0010)(Edit, ZeroConstructor, Config, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 GetAllImprovementsClientRequestName;               // 0x0010(0x0010)(Edit, ZeroConstructor, Config, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 GetImprovementSlotClientRequestName;               // 0x0020(0x0010)(Edit, ZeroConstructor, Config, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 UpgradeImprovementSlotClientRequestName;           // 0x0030(0x0010)(Edit, ZeroConstructor, Config, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 CollectFromImprovementSlotClientRequestName;       // 0x0040(0x0010)(Edit, ZeroConstructor, Config, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 LevelUpShelterClientRequestName;                   // 0x0050(0x0010)(Edit, ZeroConstructor, Config, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 GetShelterStatusClientRequestName;                 // 0x0060(0x0010)(Edit, ZeroConstructor, Config, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FCloudShelterSettings) == 0x000008, "Wrong alignment on FCloudShelterSettings");
static_assert(sizeof(FCloudShelterSettings) == 0x000070, "Wrong size on FCloudShelterSettings");
static_assert(offsetof(FCloudShelterSettings, BoostImprovementClientRequestName) == 0x000000, "Member 'FCloudShelterSettings::BoostImprovementClientRequestName' has a wrong offset!");
static_assert(offsetof(FCloudShelterSettings, GetAllImprovementsClientRequestName) == 0x000010, "Member 'FCloudShelterSettings::GetAllImprovementsClientRequestName' has a wrong offset!");
static_assert(offsetof(FCloudShelterSettings, GetImprovementSlotClientRequestName) == 0x000020, "Member 'FCloudShelterSettings::GetImprovementSlotClientRequestName' has a wrong offset!");
static_assert(offsetof(FCloudShelterSettings, UpgradeImprovementSlotClientRequestName) == 0x000030, "Member 'FCloudShelterSettings::UpgradeImprovementSlotClientRequestName' has a wrong offset!");
static_assert(offsetof(FCloudShelterSettings, CollectFromImprovementSlotClientRequestName) == 0x000040, "Member 'FCloudShelterSettings::CollectFromImprovementSlotClientRequestName' has a wrong offset!");
static_assert(offsetof(FCloudShelterSettings, LevelUpShelterClientRequestName) == 0x000050, "Member 'FCloudShelterSettings::LevelUpShelterClientRequestName' has a wrong offset!");
static_assert(offsetof(FCloudShelterSettings, GetShelterStatusClientRequestName) == 0x000060, "Member 'FCloudShelterSettings::GetShelterStatusClientRequestName' has a wrong offset!");

// ScriptStruct Flame.CloudCraftingSettings
// 0x0070 (0x0070 - 0x0000)
struct FCloudCraftingSettings final
{
public:
	class FString                                 DeconstructItemClientRequestName;                  // 0x0000(0x0010)(Edit, ZeroConstructor, Config, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 CraftItemClientRequestName;                        // 0x0010(0x0010)(Edit, ZeroConstructor, Config, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 CraftPlanClientRequestName;                        // 0x0020(0x0010)(Edit, ZeroConstructor, Config, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 CollectCraftedItemsClientRequestName;              // 0x0030(0x0010)(Edit, ZeroConstructor, Config, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 GetAllQueuesStatusClientRequestName;               // 0x0040(0x0010)(Edit, ZeroConstructor, Config, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 GetQueueStatusClientRequestName;                   // 0x0050(0x0010)(Edit, ZeroConstructor, Config, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 PurchaseCraftingBoosterClientRequestName;          // 0x0060(0x0010)(Edit, ZeroConstructor, Config, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FCloudCraftingSettings) == 0x000008, "Wrong alignment on FCloudCraftingSettings");
static_assert(sizeof(FCloudCraftingSettings) == 0x000070, "Wrong size on FCloudCraftingSettings");
static_assert(offsetof(FCloudCraftingSettings, DeconstructItemClientRequestName) == 0x000000, "Member 'FCloudCraftingSettings::DeconstructItemClientRequestName' has a wrong offset!");
static_assert(offsetof(FCloudCraftingSettings, CraftItemClientRequestName) == 0x000010, "Member 'FCloudCraftingSettings::CraftItemClientRequestName' has a wrong offset!");
static_assert(offsetof(FCloudCraftingSettings, CraftPlanClientRequestName) == 0x000020, "Member 'FCloudCraftingSettings::CraftPlanClientRequestName' has a wrong offset!");
static_assert(offsetof(FCloudCraftingSettings, CollectCraftedItemsClientRequestName) == 0x000030, "Member 'FCloudCraftingSettings::CollectCraftedItemsClientRequestName' has a wrong offset!");
static_assert(offsetof(FCloudCraftingSettings, GetAllQueuesStatusClientRequestName) == 0x000040, "Member 'FCloudCraftingSettings::GetAllQueuesStatusClientRequestName' has a wrong offset!");
static_assert(offsetof(FCloudCraftingSettings, GetQueueStatusClientRequestName) == 0x000050, "Member 'FCloudCraftingSettings::GetQueueStatusClientRequestName' has a wrong offset!");
static_assert(offsetof(FCloudCraftingSettings, PurchaseCraftingBoosterClientRequestName) == 0x000060, "Member 'FCloudCraftingSettings::PurchaseCraftingBoosterClientRequestName' has a wrong offset!");

// ScriptStruct Flame.HandsOverride
// 0x0010 (0x0010 - 0x0000)
struct FHandsOverride final
{
public:
	class UAnimSequence*                          ItemHands;                                         // 0x0000(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAnimSequence*                          PistolHands;                                       // 0x0008(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FHandsOverride) == 0x000008, "Wrong alignment on FHandsOverride");
static_assert(sizeof(FHandsOverride) == 0x000010, "Wrong size on FHandsOverride");
static_assert(offsetof(FHandsOverride, ItemHands) == 0x000000, "Member 'FHandsOverride::ItemHands' has a wrong offset!");
static_assert(offsetof(FHandsOverride, PistolHands) == 0x000008, "Member 'FHandsOverride::PistolHands' has a wrong offset!");

// ScriptStruct Flame.CloudLootBoxesSettings
// 0x0030 (0x0030 - 0x0000)
struct FCloudLootBoxesSettings final
{
public:
	class FString                                 GetLootBoxInfoClientRequestName;                   // 0x0000(0x0010)(Edit, ZeroConstructor, Config, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 GetAllLootBoxesInfoClientRequestName;              // 0x0010(0x0010)(Edit, ZeroConstructor, Config, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 OpenLootBoxClientRequestName;                      // 0x0020(0x0010)(Edit, ZeroConstructor, Config, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FCloudLootBoxesSettings) == 0x000008, "Wrong alignment on FCloudLootBoxesSettings");
static_assert(sizeof(FCloudLootBoxesSettings) == 0x000030, "Wrong size on FCloudLootBoxesSettings");
static_assert(offsetof(FCloudLootBoxesSettings, GetLootBoxInfoClientRequestName) == 0x000000, "Member 'FCloudLootBoxesSettings::GetLootBoxInfoClientRequestName' has a wrong offset!");
static_assert(offsetof(FCloudLootBoxesSettings, GetAllLootBoxesInfoClientRequestName) == 0x000010, "Member 'FCloudLootBoxesSettings::GetAllLootBoxesInfoClientRequestName' has a wrong offset!");
static_assert(offsetof(FCloudLootBoxesSettings, OpenLootBoxClientRequestName) == 0x000020, "Member 'FCloudLootBoxesSettings::OpenLootBoxClientRequestName' has a wrong offset!");

// ScriptStruct Flame.CloudCustomizationSettings
// 0x00B0 (0x00B0 - 0x0000)
struct FCloudCustomizationSettings final
{
public:
	class FString                                 GetAllCustomizationsClientRequestName;             // 0x0000(0x0010)(Edit, ZeroConstructor, Config, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 GetAllCustomizationsServerRequestName;             // 0x0010(0x0010)(Edit, ZeroConstructor, Config, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 SetAllCustomizationsClientRequestName;             // 0x0020(0x0010)(Edit, ZeroConstructor, Config, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 SetAllCustomizationsServerRequestName;             // 0x0030(0x0010)(Edit, ZeroConstructor, Config, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 GetOwnedCustomizationsClientRequestName;           // 0x0040(0x0010)(Edit, ZeroConstructor, Config, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 GetOwnedCustomizationsServerRequestName;           // 0x0050(0x0010)(Edit, ZeroConstructor, Config, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 GetAllOwnedCustomizationsClientRequestName;        // 0x0060(0x0010)(Edit, ZeroConstructor, Config, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 GetAllOwnedCustomizationsServerRequestName;        // 0x0070(0x0010)(Edit, ZeroConstructor, Config, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 GetCustomizationSlotClientRequestName;             // 0x0080(0x0010)(Edit, ZeroConstructor, Config, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 SetCustomizationSlotClientRequestName;             // 0x0090(0x0010)(Edit, ZeroConstructor, Config, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ClearCustomizationSlotClientRequestName;           // 0x00A0(0x0010)(Edit, ZeroConstructor, Config, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FCloudCustomizationSettings) == 0x000008, "Wrong alignment on FCloudCustomizationSettings");
static_assert(sizeof(FCloudCustomizationSettings) == 0x0000B0, "Wrong size on FCloudCustomizationSettings");
static_assert(offsetof(FCloudCustomizationSettings, GetAllCustomizationsClientRequestName) == 0x000000, "Member 'FCloudCustomizationSettings::GetAllCustomizationsClientRequestName' has a wrong offset!");
static_assert(offsetof(FCloudCustomizationSettings, GetAllCustomizationsServerRequestName) == 0x000010, "Member 'FCloudCustomizationSettings::GetAllCustomizationsServerRequestName' has a wrong offset!");
static_assert(offsetof(FCloudCustomizationSettings, SetAllCustomizationsClientRequestName) == 0x000020, "Member 'FCloudCustomizationSettings::SetAllCustomizationsClientRequestName' has a wrong offset!");
static_assert(offsetof(FCloudCustomizationSettings, SetAllCustomizationsServerRequestName) == 0x000030, "Member 'FCloudCustomizationSettings::SetAllCustomizationsServerRequestName' has a wrong offset!");
static_assert(offsetof(FCloudCustomizationSettings, GetOwnedCustomizationsClientRequestName) == 0x000040, "Member 'FCloudCustomizationSettings::GetOwnedCustomizationsClientRequestName' has a wrong offset!");
static_assert(offsetof(FCloudCustomizationSettings, GetOwnedCustomizationsServerRequestName) == 0x000050, "Member 'FCloudCustomizationSettings::GetOwnedCustomizationsServerRequestName' has a wrong offset!");
static_assert(offsetof(FCloudCustomizationSettings, GetAllOwnedCustomizationsClientRequestName) == 0x000060, "Member 'FCloudCustomizationSettings::GetAllOwnedCustomizationsClientRequestName' has a wrong offset!");
static_assert(offsetof(FCloudCustomizationSettings, GetAllOwnedCustomizationsServerRequestName) == 0x000070, "Member 'FCloudCustomizationSettings::GetAllOwnedCustomizationsServerRequestName' has a wrong offset!");
static_assert(offsetof(FCloudCustomizationSettings, GetCustomizationSlotClientRequestName) == 0x000080, "Member 'FCloudCustomizationSettings::GetCustomizationSlotClientRequestName' has a wrong offset!");
static_assert(offsetof(FCloudCustomizationSettings, SetCustomizationSlotClientRequestName) == 0x000090, "Member 'FCloudCustomizationSettings::SetCustomizationSlotClientRequestName' has a wrong offset!");
static_assert(offsetof(FCloudCustomizationSettings, ClearCustomizationSlotClientRequestName) == 0x0000A0, "Member 'FCloudCustomizationSettings::ClearCustomizationSlotClientRequestName' has a wrong offset!");

// ScriptStruct Flame.BipedalAimedCollection
// 0x0090 (0x0090 - 0x0000)
struct FBipedalAimedCollection final
{
public:
	struct FBipedalAimedLoop                      LoopJog;                                           // 0x0000(0x0030)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NoDestructor, NativeAccessSpecifierPublic)
	struct FBipedalAimedLoop                      LoopWalk;                                          // 0x0030(0x0030)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NoDestructor, NativeAccessSpecifierPublic)
	class UAimOffsetBlendSpace*                   AimLean;                                           // 0x0060(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UBlendSpace*                            AimLoopMove;                                       // 0x0068(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAnimSequence*                          AimingIdle;                                        // 0x0070(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAnimSequence*                          AimingBlocked;                                     // 0x0078(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAnimSequence*                          RunAiming;                                         // 0x0080(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAimOffsetBlendSpace*                   LookAt;                                            // 0x0088(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FBipedalAimedCollection) == 0x000008, "Wrong alignment on FBipedalAimedCollection");
static_assert(sizeof(FBipedalAimedCollection) == 0x000090, "Wrong size on FBipedalAimedCollection");
static_assert(offsetof(FBipedalAimedCollection, LoopJog) == 0x000000, "Member 'FBipedalAimedCollection::LoopJog' has a wrong offset!");
static_assert(offsetof(FBipedalAimedCollection, LoopWalk) == 0x000030, "Member 'FBipedalAimedCollection::LoopWalk' has a wrong offset!");
static_assert(offsetof(FBipedalAimedCollection, AimLean) == 0x000060, "Member 'FBipedalAimedCollection::AimLean' has a wrong offset!");
static_assert(offsetof(FBipedalAimedCollection, AimLoopMove) == 0x000068, "Member 'FBipedalAimedCollection::AimLoopMove' has a wrong offset!");
static_assert(offsetof(FBipedalAimedCollection, AimingIdle) == 0x000070, "Member 'FBipedalAimedCollection::AimingIdle' has a wrong offset!");
static_assert(offsetof(FBipedalAimedCollection, AimingBlocked) == 0x000078, "Member 'FBipedalAimedCollection::AimingBlocked' has a wrong offset!");
static_assert(offsetof(FBipedalAimedCollection, RunAiming) == 0x000080, "Member 'FBipedalAimedCollection::RunAiming' has a wrong offset!");
static_assert(offsetof(FBipedalAimedCollection, LookAt) == 0x000088, "Member 'FBipedalAimedCollection::LookAt' has a wrong offset!");

// ScriptStruct Flame.BipedalAimed
// 0x02D0 (0x02D0 - 0x0000)
struct FBipedalAimed final
{
public:
	struct FBipedalAimedCollection                RifleAimCollection;                                // 0x0000(0x0090)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NoDestructor, NativeAccessSpecifierPublic)
	struct FBipedalAimedCollection                PistolAimCollection;                               // 0x0090(0x0090)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NoDestructor, NativeAccessSpecifierPublic)
	struct FBipedalAimedCollection                MachineGunAimCollection;                           // 0x0120(0x0090)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NoDestructor, NativeAccessSpecifierPublic)
	struct FBipedalAimedCollection                UnarmedAimCollection;                              // 0x01B0(0x0090)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NoDestructor, NativeAccessSpecifierPublic)
	struct FBipedalAimedCollection                ThrowableAimCollection;                            // 0x0240(0x0090)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FBipedalAimed) == 0x000008, "Wrong alignment on FBipedalAimed");
static_assert(sizeof(FBipedalAimed) == 0x0002D0, "Wrong size on FBipedalAimed");
static_assert(offsetof(FBipedalAimed, RifleAimCollection) == 0x000000, "Member 'FBipedalAimed::RifleAimCollection' has a wrong offset!");
static_assert(offsetof(FBipedalAimed, PistolAimCollection) == 0x000090, "Member 'FBipedalAimed::PistolAimCollection' has a wrong offset!");
static_assert(offsetof(FBipedalAimed, MachineGunAimCollection) == 0x000120, "Member 'FBipedalAimed::MachineGunAimCollection' has a wrong offset!");
static_assert(offsetof(FBipedalAimed, UnarmedAimCollection) == 0x0001B0, "Member 'FBipedalAimed::UnarmedAimCollection' has a wrong offset!");
static_assert(offsetof(FBipedalAimed, ThrowableAimCollection) == 0x000240, "Member 'FBipedalAimed::ThrowableAimCollection' has a wrong offset!");

// ScriptStruct Flame.CloudInventorySettings
// 0x0180 (0x0180 - 0x0000)
struct FCloudInventorySettings final
{
public:
	class FString                                 GetUserLoadoutServerRequestName;                   // 0x0000(0x0010)(Edit, ZeroConstructor, Config, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 GetUserLoadoutWeaponSlotServerRequestName;         // 0x0010(0x0010)(Edit, ZeroConstructor, Config, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 SetUserLoadoutWeaponSlotServerRequestName;         // 0x0020(0x0010)(Edit, ZeroConstructor, Config, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ClearUserLoadoutWeaponSlotServerRequestName;       // 0x0030(0x0010)(Edit, ZeroConstructor, Config, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 GetUserLoadoutBackpackSlotServerRequestName;       // 0x0040(0x0010)(Edit, ZeroConstructor, Config, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 SetUserLoadoutBackpackSlotServerRequestName;       // 0x0050(0x0010)(Edit, ZeroConstructor, Config, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ClearUserLoadoutBackpackSlotServerRequestName;     // 0x0060(0x0010)(Edit, ZeroConstructor, Config, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 SetUserLoadoutSlotsArrayServerRequestName;         // 0x0070(0x0010)(Edit, ZeroConstructor, Config, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 GetUserLoadoutClientRequestName;                   // 0x0080(0x0010)(Edit, ZeroConstructor, Config, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 SetUserLoadoutClientRequestName;                   // 0x0090(0x0010)(Edit, ZeroConstructor, Config, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 GetUserLoadoutWeaponSlotClientRequestName;         // 0x00A0(0x0010)(Edit, ZeroConstructor, Config, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 SetUserLoadoutWeaponSlotClientRequestName;         // 0x00B0(0x0010)(Edit, ZeroConstructor, Config, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ClearUserLoadoutWeaponSlotClientRequestName;       // 0x00C0(0x0010)(Edit, ZeroConstructor, Config, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 SetUserLoadoutSlotsArrayClientRequestName;         // 0x00D0(0x0010)(Edit, ZeroConstructor, Config, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 GetUserLoadoutBackpackSlotClientRequestName;       // 0x00E0(0x0010)(Edit, ZeroConstructor, Config, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 SetUserLoadoutBackpackSlotClientRequestName;       // 0x00F0(0x0010)(Edit, ZeroConstructor, Config, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ClearUserLoadoutBackpackSlotClientRequestName;     // 0x0100(0x0010)(Edit, ZeroConstructor, Config, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class FString>                         WeaponSlots;                                       // 0x0110(0x0010)(Edit, ZeroConstructor, Config, NativeAccessSpecifierPublic)
	class FString                                 WeaponObjectName;                                  // 0x0120(0x0010)(Edit, ZeroConstructor, Config, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 BackpackObjectName;                                // 0x0130(0x0010)(Edit, ZeroConstructor, Config, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 GetUserStashServerRequestName;                     // 0x0140(0x0010)(Edit, ZeroConstructor, Config, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 SetUserStashServerRequestName;                     // 0x0150(0x0010)(Edit, ZeroConstructor, Config, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 GetUserStashClientRequestName;                     // 0x0160(0x0010)(Edit, ZeroConstructor, Config, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 SetUserStashClientRequestName;                     // 0x0170(0x0010)(Edit, ZeroConstructor, Config, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FCloudInventorySettings) == 0x000008, "Wrong alignment on FCloudInventorySettings");
static_assert(sizeof(FCloudInventorySettings) == 0x000180, "Wrong size on FCloudInventorySettings");
static_assert(offsetof(FCloudInventorySettings, GetUserLoadoutServerRequestName) == 0x000000, "Member 'FCloudInventorySettings::GetUserLoadoutServerRequestName' has a wrong offset!");
static_assert(offsetof(FCloudInventorySettings, GetUserLoadoutWeaponSlotServerRequestName) == 0x000010, "Member 'FCloudInventorySettings::GetUserLoadoutWeaponSlotServerRequestName' has a wrong offset!");
static_assert(offsetof(FCloudInventorySettings, SetUserLoadoutWeaponSlotServerRequestName) == 0x000020, "Member 'FCloudInventorySettings::SetUserLoadoutWeaponSlotServerRequestName' has a wrong offset!");
static_assert(offsetof(FCloudInventorySettings, ClearUserLoadoutWeaponSlotServerRequestName) == 0x000030, "Member 'FCloudInventorySettings::ClearUserLoadoutWeaponSlotServerRequestName' has a wrong offset!");
static_assert(offsetof(FCloudInventorySettings, GetUserLoadoutBackpackSlotServerRequestName) == 0x000040, "Member 'FCloudInventorySettings::GetUserLoadoutBackpackSlotServerRequestName' has a wrong offset!");
static_assert(offsetof(FCloudInventorySettings, SetUserLoadoutBackpackSlotServerRequestName) == 0x000050, "Member 'FCloudInventorySettings::SetUserLoadoutBackpackSlotServerRequestName' has a wrong offset!");
static_assert(offsetof(FCloudInventorySettings, ClearUserLoadoutBackpackSlotServerRequestName) == 0x000060, "Member 'FCloudInventorySettings::ClearUserLoadoutBackpackSlotServerRequestName' has a wrong offset!");
static_assert(offsetof(FCloudInventorySettings, SetUserLoadoutSlotsArrayServerRequestName) == 0x000070, "Member 'FCloudInventorySettings::SetUserLoadoutSlotsArrayServerRequestName' has a wrong offset!");
static_assert(offsetof(FCloudInventorySettings, GetUserLoadoutClientRequestName) == 0x000080, "Member 'FCloudInventorySettings::GetUserLoadoutClientRequestName' has a wrong offset!");
static_assert(offsetof(FCloudInventorySettings, SetUserLoadoutClientRequestName) == 0x000090, "Member 'FCloudInventorySettings::SetUserLoadoutClientRequestName' has a wrong offset!");
static_assert(offsetof(FCloudInventorySettings, GetUserLoadoutWeaponSlotClientRequestName) == 0x0000A0, "Member 'FCloudInventorySettings::GetUserLoadoutWeaponSlotClientRequestName' has a wrong offset!");
static_assert(offsetof(FCloudInventorySettings, SetUserLoadoutWeaponSlotClientRequestName) == 0x0000B0, "Member 'FCloudInventorySettings::SetUserLoadoutWeaponSlotClientRequestName' has a wrong offset!");
static_assert(offsetof(FCloudInventorySettings, ClearUserLoadoutWeaponSlotClientRequestName) == 0x0000C0, "Member 'FCloudInventorySettings::ClearUserLoadoutWeaponSlotClientRequestName' has a wrong offset!");
static_assert(offsetof(FCloudInventorySettings, SetUserLoadoutSlotsArrayClientRequestName) == 0x0000D0, "Member 'FCloudInventorySettings::SetUserLoadoutSlotsArrayClientRequestName' has a wrong offset!");
static_assert(offsetof(FCloudInventorySettings, GetUserLoadoutBackpackSlotClientRequestName) == 0x0000E0, "Member 'FCloudInventorySettings::GetUserLoadoutBackpackSlotClientRequestName' has a wrong offset!");
static_assert(offsetof(FCloudInventorySettings, SetUserLoadoutBackpackSlotClientRequestName) == 0x0000F0, "Member 'FCloudInventorySettings::SetUserLoadoutBackpackSlotClientRequestName' has a wrong offset!");
static_assert(offsetof(FCloudInventorySettings, ClearUserLoadoutBackpackSlotClientRequestName) == 0x000100, "Member 'FCloudInventorySettings::ClearUserLoadoutBackpackSlotClientRequestName' has a wrong offset!");
static_assert(offsetof(FCloudInventorySettings, WeaponSlots) == 0x000110, "Member 'FCloudInventorySettings::WeaponSlots' has a wrong offset!");
static_assert(offsetof(FCloudInventorySettings, WeaponObjectName) == 0x000120, "Member 'FCloudInventorySettings::WeaponObjectName' has a wrong offset!");
static_assert(offsetof(FCloudInventorySettings, BackpackObjectName) == 0x000130, "Member 'FCloudInventorySettings::BackpackObjectName' has a wrong offset!");
static_assert(offsetof(FCloudInventorySettings, GetUserStashServerRequestName) == 0x000140, "Member 'FCloudInventorySettings::GetUserStashServerRequestName' has a wrong offset!");
static_assert(offsetof(FCloudInventorySettings, SetUserStashServerRequestName) == 0x000150, "Member 'FCloudInventorySettings::SetUserStashServerRequestName' has a wrong offset!");
static_assert(offsetof(FCloudInventorySettings, GetUserStashClientRequestName) == 0x000160, "Member 'FCloudInventorySettings::GetUserStashClientRequestName' has a wrong offset!");
static_assert(offsetof(FCloudInventorySettings, SetUserStashClientRequestName) == 0x000170, "Member 'FCloudInventorySettings::SetUserStashClientRequestName' has a wrong offset!");

// ScriptStruct Flame.CloudMatchSettings
// 0x0120 (0x0120 - 0x0000)
struct FCloudMatchSettings final
{
public:
	class FString                                 RegisterMatchRequestName;                          // 0x0000(0x0010)(Edit, ZeroConstructor, Config, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 UnRegisterMatchRequestName;                        // 0x0010(0x0010)(Edit, ZeroConstructor, Config, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 RegisterPlayerRequestName;                         // 0x0020(0x0010)(Edit, ZeroConstructor, Config, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 UnRegisterPlayerRequestName;                       // 0x0030(0x0010)(Edit, ZeroConstructor, Config, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 GetMatchLoadoutsRequestName;                       // 0x0040(0x0010)(Edit, ZeroConstructor, Config, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 GetMatchSettingsRequestName;                       // 0x0050(0x0010)(Edit, ZeroConstructor, Config, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 CommitMatchSettingsRequestName;                    // 0x0060(0x0010)(Edit, ZeroConstructor, Config, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 GetLootSettingsRequestName;                        // 0x0070(0x0010)(Edit, ZeroConstructor, Config, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 SetPlayerMatchInfoRequestName;                     // 0x0080(0x0010)(Edit, ZeroConstructor, Config, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 GetPlayerMatchInfoRequestName;                     // 0x0090(0x0010)(Edit, ZeroConstructor, Config, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 SetTutorialCompletedRequestName;                   // 0x00A0(0x0010)(Edit, ZeroConstructor, Config, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 GetUserInfoClientRequestName;                      // 0x00B0(0x0010)(Edit, ZeroConstructor, Config, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 GetUserInfoServerRequestName;                      // 0x00C0(0x0010)(Edit, ZeroConstructor, Config, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 GetUserMatchesStatisticClientRequestName;          // 0x00D0(0x0010)(Edit, ZeroConstructor, Config, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 GetUserMatchesStatisticServerRequestName;          // 0x00E0(0x0010)(Edit, ZeroConstructor, Config, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 GetPlayerBansRequestName;                          // 0x00F0(0x0010)(Edit, ZeroConstructor, Config, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 BanPlayerClientRequestName;                        // 0x0100(0x0010)(Edit, ZeroConstructor, Config, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 UnbanPlayerClientRequestName;                      // 0x0110(0x0010)(Edit, ZeroConstructor, Config, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FCloudMatchSettings) == 0x000008, "Wrong alignment on FCloudMatchSettings");
static_assert(sizeof(FCloudMatchSettings) == 0x000120, "Wrong size on FCloudMatchSettings");
static_assert(offsetof(FCloudMatchSettings, RegisterMatchRequestName) == 0x000000, "Member 'FCloudMatchSettings::RegisterMatchRequestName' has a wrong offset!");
static_assert(offsetof(FCloudMatchSettings, UnRegisterMatchRequestName) == 0x000010, "Member 'FCloudMatchSettings::UnRegisterMatchRequestName' has a wrong offset!");
static_assert(offsetof(FCloudMatchSettings, RegisterPlayerRequestName) == 0x000020, "Member 'FCloudMatchSettings::RegisterPlayerRequestName' has a wrong offset!");
static_assert(offsetof(FCloudMatchSettings, UnRegisterPlayerRequestName) == 0x000030, "Member 'FCloudMatchSettings::UnRegisterPlayerRequestName' has a wrong offset!");
static_assert(offsetof(FCloudMatchSettings, GetMatchLoadoutsRequestName) == 0x000040, "Member 'FCloudMatchSettings::GetMatchLoadoutsRequestName' has a wrong offset!");
static_assert(offsetof(FCloudMatchSettings, GetMatchSettingsRequestName) == 0x000050, "Member 'FCloudMatchSettings::GetMatchSettingsRequestName' has a wrong offset!");
static_assert(offsetof(FCloudMatchSettings, CommitMatchSettingsRequestName) == 0x000060, "Member 'FCloudMatchSettings::CommitMatchSettingsRequestName' has a wrong offset!");
static_assert(offsetof(FCloudMatchSettings, GetLootSettingsRequestName) == 0x000070, "Member 'FCloudMatchSettings::GetLootSettingsRequestName' has a wrong offset!");
static_assert(offsetof(FCloudMatchSettings, SetPlayerMatchInfoRequestName) == 0x000080, "Member 'FCloudMatchSettings::SetPlayerMatchInfoRequestName' has a wrong offset!");
static_assert(offsetof(FCloudMatchSettings, GetPlayerMatchInfoRequestName) == 0x000090, "Member 'FCloudMatchSettings::GetPlayerMatchInfoRequestName' has a wrong offset!");
static_assert(offsetof(FCloudMatchSettings, SetTutorialCompletedRequestName) == 0x0000A0, "Member 'FCloudMatchSettings::SetTutorialCompletedRequestName' has a wrong offset!");
static_assert(offsetof(FCloudMatchSettings, GetUserInfoClientRequestName) == 0x0000B0, "Member 'FCloudMatchSettings::GetUserInfoClientRequestName' has a wrong offset!");
static_assert(offsetof(FCloudMatchSettings, GetUserInfoServerRequestName) == 0x0000C0, "Member 'FCloudMatchSettings::GetUserInfoServerRequestName' has a wrong offset!");
static_assert(offsetof(FCloudMatchSettings, GetUserMatchesStatisticClientRequestName) == 0x0000D0, "Member 'FCloudMatchSettings::GetUserMatchesStatisticClientRequestName' has a wrong offset!");
static_assert(offsetof(FCloudMatchSettings, GetUserMatchesStatisticServerRequestName) == 0x0000E0, "Member 'FCloudMatchSettings::GetUserMatchesStatisticServerRequestName' has a wrong offset!");
static_assert(offsetof(FCloudMatchSettings, GetPlayerBansRequestName) == 0x0000F0, "Member 'FCloudMatchSettings::GetPlayerBansRequestName' has a wrong offset!");
static_assert(offsetof(FCloudMatchSettings, BanPlayerClientRequestName) == 0x000100, "Member 'FCloudMatchSettings::BanPlayerClientRequestName' has a wrong offset!");
static_assert(offsetof(FCloudMatchSettings, UnbanPlayerClientRequestName) == 0x000110, "Member 'FCloudMatchSettings::UnbanPlayerClientRequestName' has a wrong offset!");

// ScriptStruct Flame.ProneTransitions
// 0x0060 (0x0060 - 0x0000)
struct FProneTransitions final
{
public:
	class UAnimSequence*                          IdleForward;                                       // 0x0000(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAnimSequence*                          LeftToForward;                                     // 0x0008(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAnimSequence*                          RightToForward;                                    // 0x0010(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAnimSequence*                          IdleLeft;                                          // 0x0018(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAnimSequence*                          BackToLeft;                                        // 0x0020(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAnimSequence*                          ForwardToLeft;                                     // 0x0028(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAnimSequence*                          IdleRight;                                         // 0x0030(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAnimSequence*                          BackToRight;                                       // 0x0038(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAnimSequence*                          ForwardRight;                                      // 0x0040(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAnimSequence*                          IdleBackward;                                      // 0x0048(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAnimSequence*                          LeftToBackward;                                    // 0x0050(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAnimSequence*                          RightToBackward;                                   // 0x0058(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FProneTransitions) == 0x000008, "Wrong alignment on FProneTransitions");
static_assert(sizeof(FProneTransitions) == 0x000060, "Wrong size on FProneTransitions");
static_assert(offsetof(FProneTransitions, IdleForward) == 0x000000, "Member 'FProneTransitions::IdleForward' has a wrong offset!");
static_assert(offsetof(FProneTransitions, LeftToForward) == 0x000008, "Member 'FProneTransitions::LeftToForward' has a wrong offset!");
static_assert(offsetof(FProneTransitions, RightToForward) == 0x000010, "Member 'FProneTransitions::RightToForward' has a wrong offset!");
static_assert(offsetof(FProneTransitions, IdleLeft) == 0x000018, "Member 'FProneTransitions::IdleLeft' has a wrong offset!");
static_assert(offsetof(FProneTransitions, BackToLeft) == 0x000020, "Member 'FProneTransitions::BackToLeft' has a wrong offset!");
static_assert(offsetof(FProneTransitions, ForwardToLeft) == 0x000028, "Member 'FProneTransitions::ForwardToLeft' has a wrong offset!");
static_assert(offsetof(FProneTransitions, IdleRight) == 0x000030, "Member 'FProneTransitions::IdleRight' has a wrong offset!");
static_assert(offsetof(FProneTransitions, BackToRight) == 0x000038, "Member 'FProneTransitions::BackToRight' has a wrong offset!");
static_assert(offsetof(FProneTransitions, ForwardRight) == 0x000040, "Member 'FProneTransitions::ForwardRight' has a wrong offset!");
static_assert(offsetof(FProneTransitions, IdleBackward) == 0x000048, "Member 'FProneTransitions::IdleBackward' has a wrong offset!");
static_assert(offsetof(FProneTransitions, LeftToBackward) == 0x000050, "Member 'FProneTransitions::LeftToBackward' has a wrong offset!");
static_assert(offsetof(FProneTransitions, RightToBackward) == 0x000058, "Member 'FProneTransitions::RightToBackward' has a wrong offset!");

// ScriptStruct Flame.CloudUserInfoSettings
// 0x0060 (0x0060 - 0x0000)
struct FCloudUserInfoSettings final
{
public:
	struct FTokenRequestOptions                   MatchmakingTokenRequest;                           // 0x0000(0x0020)(Edit, Config, NativeAccessSpecifierPublic)
	struct FTokenRequestOptions                   GameServerTokenRequest;                            // 0x0020(0x0020)(Edit, Config, NativeAccessSpecifierPublic)
	class FString                                 ReportPlayerRequestName;                           // 0x0040(0x0010)(Edit, ZeroConstructor, Config, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_50[0x10];                                      // 0x0050(0x0010)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FCloudUserInfoSettings) == 0x000008, "Wrong alignment on FCloudUserInfoSettings");
static_assert(sizeof(FCloudUserInfoSettings) == 0x000060, "Wrong size on FCloudUserInfoSettings");
static_assert(offsetof(FCloudUserInfoSettings, MatchmakingTokenRequest) == 0x000000, "Member 'FCloudUserInfoSettings::MatchmakingTokenRequest' has a wrong offset!");
static_assert(offsetof(FCloudUserInfoSettings, GameServerTokenRequest) == 0x000020, "Member 'FCloudUserInfoSettings::GameServerTokenRequest' has a wrong offset!");
static_assert(offsetof(FCloudUserInfoSettings, ReportPlayerRequestName) == 0x000040, "Member 'FCloudUserInfoSettings::ReportPlayerRequestName' has a wrong offset!");

// ScriptStruct Flame.CloudReportPlayerResult
// 0x0010 (0x0010 - 0x0000)
struct FCloudReportPlayerResult final
{
public:
	TArray<class FString>                         Banlist;                                           // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FCloudReportPlayerResult) == 0x000008, "Wrong alignment on FCloudReportPlayerResult");
static_assert(sizeof(FCloudReportPlayerResult) == 0x000010, "Wrong size on FCloudReportPlayerResult");
static_assert(offsetof(FCloudReportPlayerResult, Banlist) == 0x000000, "Member 'FCloudReportPlayerResult::Banlist' has a wrong offset!");

// ScriptStruct Flame.CloudSetLoadoutResponse
// 0x0050 (0x0050 - 0x0000)
struct FCloudSetLoadoutResponse final
{
public:
	struct FLoadoutInfo                           RequestedLoadout;                                  // 0x0000(0x0028)(BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	struct FLoadoutInfo                           ActualLoadout;                                     // 0x0028(0x0028)(BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
};
static_assert(alignof(FCloudSetLoadoutResponse) == 0x000008, "Wrong alignment on FCloudSetLoadoutResponse");
static_assert(sizeof(FCloudSetLoadoutResponse) == 0x000050, "Wrong size on FCloudSetLoadoutResponse");
static_assert(offsetof(FCloudSetLoadoutResponse, RequestedLoadout) == 0x000000, "Member 'FCloudSetLoadoutResponse::RequestedLoadout' has a wrong offset!");
static_assert(offsetof(FCloudSetLoadoutResponse, ActualLoadout) == 0x000028, "Member 'FCloudSetLoadoutResponse::ActualLoadout' has a wrong offset!");

// ScriptStruct Flame.CloudUserStats
// 0x0010 (0x0010 - 0x0000)
struct FCloudUserStats final
{
public:
	TArray<struct FCloudUserStat>                 Stats;                                             // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FCloudUserStats) == 0x000008, "Wrong alignment on FCloudUserStats");
static_assert(sizeof(FCloudUserStats) == 0x000010, "Wrong size on FCloudUserStats");
static_assert(offsetof(FCloudUserStats, Stats) == 0x000000, "Member 'FCloudUserStats::Stats' has a wrong offset!");

// ScriptStruct Flame.CloudUserWeaponSkinsOwned
// 0x0010 (0x0010 - 0x0000)
struct FCloudUserWeaponSkinsOwned final
{
public:
	TArray<TSubclassOf<class AItem>>              WeaponSkins;                                       // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, UObjectWrapper, NativeAccessSpecifierPublic)
};
static_assert(alignof(FCloudUserWeaponSkinsOwned) == 0x000008, "Wrong alignment on FCloudUserWeaponSkinsOwned");
static_assert(sizeof(FCloudUserWeaponSkinsOwned) == 0x000010, "Wrong size on FCloudUserWeaponSkinsOwned");
static_assert(offsetof(FCloudUserWeaponSkinsOwned, WeaponSkins) == 0x000000, "Member 'FCloudUserWeaponSkinsOwned::WeaponSkins' has a wrong offset!");

// ScriptStruct Flame.ColorPaletteTableRow
// 0x0058 (0x0060 - 0x0008)
struct FColorPaletteTableRow final : public FTableRowBase
{
public:
	EColorVisionDeficiency                        ColorVision;                                       // 0x0008(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TMap<EMapMarkerType, struct FLinearColor>     MapMarkerPalette;                                  // 0x0010(0x0050)(Edit, BlueprintVisible, DisableEditOnInstance, NativeAccessSpecifierPublic)
};
static_assert(alignof(FColorPaletteTableRow) == 0x000008, "Wrong alignment on FColorPaletteTableRow");
static_assert(sizeof(FColorPaletteTableRow) == 0x000060, "Wrong size on FColorPaletteTableRow");
static_assert(offsetof(FColorPaletteTableRow, ColorVision) == 0x000008, "Member 'FColorPaletteTableRow::ColorVision' has a wrong offset!");
static_assert(offsetof(FColorPaletteTableRow, MapMarkerPalette) == 0x000010, "Member 'FColorPaletteTableRow::MapMarkerPalette' has a wrong offset!");

// ScriptStruct Flame.CompoundPanelParameters
// 0x0050 (0x0050 - 0x0000)
struct FCompoundPanelParameters final
{
public:
	float                                         CenterAlpha;                                       // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UMaterial*                              MaskMaterial;                                      // 0x0008(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UTexture2D*                             Top;                                               // 0x0010(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UTexture2D*                             Bottom;                                            // 0x0018(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UTexture2D*                             Left;                                              // 0x0020(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UTexture2D*                             Right;                                             // 0x0028(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UTexture2D*                             TopLeft;                                           // 0x0030(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UTexture2D*                             TopRight;                                          // 0x0038(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UTexture2D*                             BottomLeft;                                        // 0x0040(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UTexture2D*                             BottomRight;                                       // 0x0048(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FCompoundPanelParameters) == 0x000008, "Wrong alignment on FCompoundPanelParameters");
static_assert(sizeof(FCompoundPanelParameters) == 0x000050, "Wrong size on FCompoundPanelParameters");
static_assert(offsetof(FCompoundPanelParameters, CenterAlpha) == 0x000000, "Member 'FCompoundPanelParameters::CenterAlpha' has a wrong offset!");
static_assert(offsetof(FCompoundPanelParameters, MaskMaterial) == 0x000008, "Member 'FCompoundPanelParameters::MaskMaterial' has a wrong offset!");
static_assert(offsetof(FCompoundPanelParameters, Top) == 0x000010, "Member 'FCompoundPanelParameters::Top' has a wrong offset!");
static_assert(offsetof(FCompoundPanelParameters, Bottom) == 0x000018, "Member 'FCompoundPanelParameters::Bottom' has a wrong offset!");
static_assert(offsetof(FCompoundPanelParameters, Left) == 0x000020, "Member 'FCompoundPanelParameters::Left' has a wrong offset!");
static_assert(offsetof(FCompoundPanelParameters, Right) == 0x000028, "Member 'FCompoundPanelParameters::Right' has a wrong offset!");
static_assert(offsetof(FCompoundPanelParameters, TopLeft) == 0x000030, "Member 'FCompoundPanelParameters::TopLeft' has a wrong offset!");
static_assert(offsetof(FCompoundPanelParameters, TopRight) == 0x000038, "Member 'FCompoundPanelParameters::TopRight' has a wrong offset!");
static_assert(offsetof(FCompoundPanelParameters, BottomLeft) == 0x000040, "Member 'FCompoundPanelParameters::BottomLeft' has a wrong offset!");
static_assert(offsetof(FCompoundPanelParameters, BottomRight) == 0x000048, "Member 'FCompoundPanelParameters::BottomRight' has a wrong offset!");

// ScriptStruct Flame.ConsumablesList
// 0x0018 (0x0138 - 0x0120)
struct FConsumablesList final : public FItemClassTableRowWithInsurance
{
public:
	TSubclassOf<class AConsumableItem>            Class;                                             // 0x0120(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         StackSize;                                         // 0x0128(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsCraftable;                                       // 0x012C(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsEquipableInShelter;                              // 0x012D(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_12E[0x2];                                      // 0x012E(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CraftingBoosterPrice;                              // 0x0130(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_134[0x4];                                      // 0x0134(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FConsumablesList) == 0x000008, "Wrong alignment on FConsumablesList");
static_assert(sizeof(FConsumablesList) == 0x000138, "Wrong size on FConsumablesList");
static_assert(offsetof(FConsumablesList, Class) == 0x000120, "Member 'FConsumablesList::Class' has a wrong offset!");
static_assert(offsetof(FConsumablesList, StackSize) == 0x000128, "Member 'FConsumablesList::StackSize' has a wrong offset!");
static_assert(offsetof(FConsumablesList, IsCraftable) == 0x00012C, "Member 'FConsumablesList::IsCraftable' has a wrong offset!");
static_assert(offsetof(FConsumablesList, IsEquipableInShelter) == 0x00012D, "Member 'FConsumablesList::IsEquipableInShelter' has a wrong offset!");
static_assert(offsetof(FConsumablesList, CraftingBoosterPrice) == 0x000130, "Member 'FConsumablesList::CraftingBoosterPrice' has a wrong offset!");

// ScriptStruct Flame.CraftingItemStatus
// 0x0038 (0x0038 - 0x0000)
struct FCraftingItemStatus final
{
public:
	struct FCloudCraftedItem                      ItemInfo;                                          // 0x0000(0x0020)(Edit, BlueprintVisible, BlueprintReadOnly, EditConst, NativeAccessSpecifierPublic)
	bool                                          bIsValid;                                          // 0x0020(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_21[0x3];                                       // 0x0021(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         PartsCancellationGain;                             // 0x0024(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MaterialCancellationGain;                          // 0x0028(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2C[0x4];                                       // 0x002C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTimespan                              RemainingTime;                                     // 0x0030(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FCraftingItemStatus) == 0x000008, "Wrong alignment on FCraftingItemStatus");
static_assert(sizeof(FCraftingItemStatus) == 0x000038, "Wrong size on FCraftingItemStatus");
static_assert(offsetof(FCraftingItemStatus, ItemInfo) == 0x000000, "Member 'FCraftingItemStatus::ItemInfo' has a wrong offset!");
static_assert(offsetof(FCraftingItemStatus, bIsValid) == 0x000020, "Member 'FCraftingItemStatus::bIsValid' has a wrong offset!");
static_assert(offsetof(FCraftingItemStatus, PartsCancellationGain) == 0x000024, "Member 'FCraftingItemStatus::PartsCancellationGain' has a wrong offset!");
static_assert(offsetof(FCraftingItemStatus, MaterialCancellationGain) == 0x000028, "Member 'FCraftingItemStatus::MaterialCancellationGain' has a wrong offset!");
static_assert(offsetof(FCraftingItemStatus, RemainingTime) == 0x000030, "Member 'FCraftingItemStatus::RemainingTime' has a wrong offset!");

// ScriptStruct Flame.CloudRequest
// 0x0001 (0x0001 - 0x0000)
struct FCloudRequest final
{
public:
	bool                                          bWasRegistered;                                    // 0x0000(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FCloudRequest) == 0x000001, "Wrong alignment on FCloudRequest");
static_assert(sizeof(FCloudRequest) == 0x000001, "Wrong size on FCloudRequest");
static_assert(offsetof(FCloudRequest, bWasRegistered) == 0x000000, "Member 'FCloudRequest::bWasRegistered' has a wrong offset!");

// ScriptStruct Flame.CurrenciesList
// 0x0008 (0x0120 - 0x0118)
struct FCurrenciesList final : public FItemClassTableRow
{
public:
	TSubclassOf<class ACurrency>                  Class;                                             // 0x0118(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FCurrenciesList) == 0x000008, "Wrong alignment on FCurrenciesList");
static_assert(sizeof(FCurrenciesList) == 0x000120, "Wrong size on FCurrenciesList");
static_assert(offsetof(FCurrenciesList, Class) == 0x000118, "Member 'FCurrenciesList::Class' has a wrong offset!");

// ScriptStruct Flame.CustomInputFilterRow
// 0x0030 (0x0070 - 0x0040)
struct FCustomInputFilterRow final : public FClassTableRowWithDisplayName
{
public:
	bool                                          bEnabled;                                          // 0x0040(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_41[0x17];                                      // 0x0041(0x0017)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class FName>                           Blacklist;                                         // 0x0058(0x0010)(Edit, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic)
	TSubclassOf<class ACustomInputFilter>         Class;                                             // 0x0068(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FCustomInputFilterRow) == 0x000008, "Wrong alignment on FCustomInputFilterRow");
static_assert(sizeof(FCustomInputFilterRow) == 0x000070, "Wrong size on FCustomInputFilterRow");
static_assert(offsetof(FCustomInputFilterRow, bEnabled) == 0x000040, "Member 'FCustomInputFilterRow::bEnabled' has a wrong offset!");
static_assert(offsetof(FCustomInputFilterRow, Blacklist) == 0x000058, "Member 'FCustomInputFilterRow::Blacklist' has a wrong offset!");
static_assert(offsetof(FCustomInputFilterRow, Class) == 0x000068, "Member 'FCustomInputFilterRow::Class' has a wrong offset!");

// ScriptStruct Flame.GenderList
// 0x0008 (0x0048 - 0x0040)
struct FGenderList final : public FClassTableRowWithDisplayName
{
public:
	TSubclassOf<class AGender>                    Class;                                             // 0x0040(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FGenderList) == 0x000008, "Wrong alignment on FGenderList");
static_assert(sizeof(FGenderList) == 0x000048, "Wrong size on FGenderList");
static_assert(offsetof(FGenderList, Class) == 0x000040, "Member 'FGenderList::Class' has a wrong offset!");

// ScriptStruct Flame.CustomizationGestureVariantsList
// 0x0020 (0x0138 - 0x0118)
struct FCustomizationGestureVariantsList final : public FItemClassTableRow
{
public:
	TSubclassOf<class ACustomizationGestureVariant> Class;                                             // 0x0118(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSubclassOf<class ACustomization>             CustomizationClass;                                // 0x0120(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAnimMontage*                           AnimationMontage;                                  // 0x0128(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAnimSequence*                          ShelterPreviewStaticPose;                          // 0x0130(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FCustomizationGestureVariantsList) == 0x000008, "Wrong alignment on FCustomizationGestureVariantsList");
static_assert(sizeof(FCustomizationGestureVariantsList) == 0x000138, "Wrong size on FCustomizationGestureVariantsList");
static_assert(offsetof(FCustomizationGestureVariantsList, Class) == 0x000118, "Member 'FCustomizationGestureVariantsList::Class' has a wrong offset!");
static_assert(offsetof(FCustomizationGestureVariantsList, CustomizationClass) == 0x000120, "Member 'FCustomizationGestureVariantsList::CustomizationClass' has a wrong offset!");
static_assert(offsetof(FCustomizationGestureVariantsList, AnimationMontage) == 0x000128, "Member 'FCustomizationGestureVariantsList::AnimationMontage' has a wrong offset!");
static_assert(offsetof(FCustomizationGestureVariantsList, ShelterPreviewStaticPose) == 0x000130, "Member 'FCustomizationGestureVariantsList::ShelterPreviewStaticPose' has a wrong offset!");

// ScriptStruct Flame.MorphNames
// 0x0028 (0x0028 - 0x0000)
struct FMorphNames final
{
public:
	float                                         Left_MoveX;                                        // 0x0000(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Left_MoveY;                                        // 0x0004(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Left_MoveZ;                                        // 0x0008(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Front_ScaleX;                                      // 0x000C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Front_MoveX;                                       // 0x0010(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Front_MoveY;                                       // 0x0014(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Front_MoveZ;                                       // 0x0018(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Right_MoveX;                                       // 0x001C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Right_MoveY;                                       // 0x0020(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Right_MoveZ;                                       // 0x0024(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FMorphNames) == 0x000004, "Wrong alignment on FMorphNames");
static_assert(sizeof(FMorphNames) == 0x000028, "Wrong size on FMorphNames");
static_assert(offsetof(FMorphNames, Left_MoveX) == 0x000000, "Member 'FMorphNames::Left_MoveX' has a wrong offset!");
static_assert(offsetof(FMorphNames, Left_MoveY) == 0x000004, "Member 'FMorphNames::Left_MoveY' has a wrong offset!");
static_assert(offsetof(FMorphNames, Left_MoveZ) == 0x000008, "Member 'FMorphNames::Left_MoveZ' has a wrong offset!");
static_assert(offsetof(FMorphNames, Front_ScaleX) == 0x00000C, "Member 'FMorphNames::Front_ScaleX' has a wrong offset!");
static_assert(offsetof(FMorphNames, Front_MoveX) == 0x000010, "Member 'FMorphNames::Front_MoveX' has a wrong offset!");
static_assert(offsetof(FMorphNames, Front_MoveY) == 0x000014, "Member 'FMorphNames::Front_MoveY' has a wrong offset!");
static_assert(offsetof(FMorphNames, Front_MoveZ) == 0x000018, "Member 'FMorphNames::Front_MoveZ' has a wrong offset!");
static_assert(offsetof(FMorphNames, Right_MoveX) == 0x00001C, "Member 'FMorphNames::Right_MoveX' has a wrong offset!");
static_assert(offsetof(FMorphNames, Right_MoveY) == 0x000020, "Member 'FMorphNames::Right_MoveY' has a wrong offset!");
static_assert(offsetof(FMorphNames, Right_MoveZ) == 0x000024, "Member 'FMorphNames::Right_MoveZ' has a wrong offset!");

// ScriptStruct Flame.CustomizationList
// 0x0140 (0x0180 - 0x0040)
struct FCustomizationList final : public FClassTableRowWithDisplayName
{
public:
	TSubclassOf<class ACustomization>             Class;                                             // 0x0040(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TMap<TSubclassOf<class AGender>, TSoftObjectPtr<class USkeletalMesh>> SkeletalMesh;                                      // 0x0048(0x0050)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, UObjectWrapper, NativeAccessSpecifierPublic)
	TMap<TSubclassOf<class ACustomizationArchetype>, struct FMorphNames> Morphs;                                            // 0x0098(0x0050)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NativeAccessSpecifierPublic)
	TMap<TSubclassOf<class AGender>, TSoftObjectPtr<class USkeletalMesh>> ShelterPreviewSkeletalMeshPerGender;               // 0x00E8(0x0050)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, UObjectWrapper, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class USkeletalMesh>           ShelterPreviewSkeletalMesh;                        // 0x0138(0x0028)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<TSubclassOf<class ACustomizationSlot>> OccupiedSlots;                                     // 0x0160(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, UObjectWrapper, NativeAccessSpecifierPublic)
	TArray<TSubclassOf<class ACustomizationSlot>> FittingSlots;                                      // 0x0170(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, UObjectWrapper, NativeAccessSpecifierPublic)
};
static_assert(alignof(FCustomizationList) == 0x000008, "Wrong alignment on FCustomizationList");
static_assert(sizeof(FCustomizationList) == 0x000180, "Wrong size on FCustomizationList");
static_assert(offsetof(FCustomizationList, Class) == 0x000040, "Member 'FCustomizationList::Class' has a wrong offset!");
static_assert(offsetof(FCustomizationList, SkeletalMesh) == 0x000048, "Member 'FCustomizationList::SkeletalMesh' has a wrong offset!");
static_assert(offsetof(FCustomizationList, Morphs) == 0x000098, "Member 'FCustomizationList::Morphs' has a wrong offset!");
static_assert(offsetof(FCustomizationList, ShelterPreviewSkeletalMeshPerGender) == 0x0000E8, "Member 'FCustomizationList::ShelterPreviewSkeletalMeshPerGender' has a wrong offset!");
static_assert(offsetof(FCustomizationList, ShelterPreviewSkeletalMesh) == 0x000138, "Member 'FCustomizationList::ShelterPreviewSkeletalMesh' has a wrong offset!");
static_assert(offsetof(FCustomizationList, OccupiedSlots) == 0x000160, "Member 'FCustomizationList::OccupiedSlots' has a wrong offset!");
static_assert(offsetof(FCustomizationList, FittingSlots) == 0x000170, "Member 'FCustomizationList::FittingSlots' has a wrong offset!");

// ScriptStruct Flame.CustomizationVariantList
// 0x0070 (0x0188 - 0x0118)
struct FCustomizationVariantList final : public FItemClassTableRow
{
public:
	TSubclassOf<class ACustomizationVariant>      Class;                                             // 0x0118(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSubclassOf<class ACustomization>             CustomizationClass;                                // 0x0120(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TMap<TSubclassOf<class AGender>, struct FCustomizatinMaterials> MaterialsGender;                                   // 0x0128(0x0050)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NativeAccessSpecifierPublic)
	TSubclassOf<class ACustomizationVariantBundle> CustomizationBundle;                               // 0x0178(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EVoiceModifierType                            VoiceModifier;                                     // 0x0180(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ESoundTextureType                             SoundTexture;                                      // 0x0181(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_182[0x6];                                      // 0x0182(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FCustomizationVariantList) == 0x000008, "Wrong alignment on FCustomizationVariantList");
static_assert(sizeof(FCustomizationVariantList) == 0x000188, "Wrong size on FCustomizationVariantList");
static_assert(offsetof(FCustomizationVariantList, Class) == 0x000118, "Member 'FCustomizationVariantList::Class' has a wrong offset!");
static_assert(offsetof(FCustomizationVariantList, CustomizationClass) == 0x000120, "Member 'FCustomizationVariantList::CustomizationClass' has a wrong offset!");
static_assert(offsetof(FCustomizationVariantList, MaterialsGender) == 0x000128, "Member 'FCustomizationVariantList::MaterialsGender' has a wrong offset!");
static_assert(offsetof(FCustomizationVariantList, CustomizationBundle) == 0x000178, "Member 'FCustomizationVariantList::CustomizationBundle' has a wrong offset!");
static_assert(offsetof(FCustomizationVariantList, VoiceModifier) == 0x000180, "Member 'FCustomizationVariantList::VoiceModifier' has a wrong offset!");
static_assert(offsetof(FCustomizationVariantList, SoundTexture) == 0x000181, "Member 'FCustomizationVariantList::SoundTexture' has a wrong offset!");

// ScriptStruct Flame.CustomizationTableStructure
// 0x0048 (0x0058 - 0x0010)
struct FCustomizationTableStructure final : public FClassTableRow
{
public:
	class FText                                   DisplayedName;                                     // 0x0010(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NativeAccessSpecifierPublic)
	class USkeletalMesh*                          SkeletalMesh;                                      // 0x0028(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UMaterialInterface*                     Material_01;                                       // 0x0030(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UMaterialInterface*                     Material_02;                                       // 0x0038(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UMaterialInterface*                     Material_03;                                       // 0x0040(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          UniformSlot;                                       // 0x0048(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          GlovesSlot;                                        // 0x0049(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          UpperHeadSlot;                                     // 0x004A(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          MiddleHeadSlot;                                    // 0x004B(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          BootomHeadSlot;                                    // 0x004C(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          BackpackSlot;                                      // 0x004D(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ArchetypeSlot;                                     // 0x004E(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsEnableled;                                       // 0x004F(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsLegacy;                                          // 0x0050(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Beta;                                              // 0x0051(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_52[0x6];                                       // 0x0052(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FCustomizationTableStructure) == 0x000008, "Wrong alignment on FCustomizationTableStructure");
static_assert(sizeof(FCustomizationTableStructure) == 0x000058, "Wrong size on FCustomizationTableStructure");
static_assert(offsetof(FCustomizationTableStructure, DisplayedName) == 0x000010, "Member 'FCustomizationTableStructure::DisplayedName' has a wrong offset!");
static_assert(offsetof(FCustomizationTableStructure, SkeletalMesh) == 0x000028, "Member 'FCustomizationTableStructure::SkeletalMesh' has a wrong offset!");
static_assert(offsetof(FCustomizationTableStructure, Material_01) == 0x000030, "Member 'FCustomizationTableStructure::Material_01' has a wrong offset!");
static_assert(offsetof(FCustomizationTableStructure, Material_02) == 0x000038, "Member 'FCustomizationTableStructure::Material_02' has a wrong offset!");
static_assert(offsetof(FCustomizationTableStructure, Material_03) == 0x000040, "Member 'FCustomizationTableStructure::Material_03' has a wrong offset!");
static_assert(offsetof(FCustomizationTableStructure, UniformSlot) == 0x000048, "Member 'FCustomizationTableStructure::UniformSlot' has a wrong offset!");
static_assert(offsetof(FCustomizationTableStructure, GlovesSlot) == 0x000049, "Member 'FCustomizationTableStructure::GlovesSlot' has a wrong offset!");
static_assert(offsetof(FCustomizationTableStructure, UpperHeadSlot) == 0x00004A, "Member 'FCustomizationTableStructure::UpperHeadSlot' has a wrong offset!");
static_assert(offsetof(FCustomizationTableStructure, MiddleHeadSlot) == 0x00004B, "Member 'FCustomizationTableStructure::MiddleHeadSlot' has a wrong offset!");
static_assert(offsetof(FCustomizationTableStructure, BootomHeadSlot) == 0x00004C, "Member 'FCustomizationTableStructure::BootomHeadSlot' has a wrong offset!");
static_assert(offsetof(FCustomizationTableStructure, BackpackSlot) == 0x00004D, "Member 'FCustomizationTableStructure::BackpackSlot' has a wrong offset!");
static_assert(offsetof(FCustomizationTableStructure, ArchetypeSlot) == 0x00004E, "Member 'FCustomizationTableStructure::ArchetypeSlot' has a wrong offset!");
static_assert(offsetof(FCustomizationTableStructure, IsEnableled) == 0x00004F, "Member 'FCustomizationTableStructure::IsEnableled' has a wrong offset!");
static_assert(offsetof(FCustomizationTableStructure, IsLegacy) == 0x000050, "Member 'FCustomizationTableStructure::IsLegacy' has a wrong offset!");
static_assert(offsetof(FCustomizationTableStructure, Beta) == 0x000051, "Member 'FCustomizationTableStructure::Beta' has a wrong offset!");

// ScriptStruct Flame.CustomizationPreview
// 0x0018 (0x0018 - 0x0000)
struct FCustomizationPreview final
{
public:
	TSubclassOf<class UCustomisationMeshComponent> MeshComponent;                                     // 0x0000(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USkeletalMesh*                          Mesh;                                              // 0x0008(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UMaterialInstance*                      Material;                                          // 0x0010(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FCustomizationPreview) == 0x000008, "Wrong alignment on FCustomizationPreview");
static_assert(sizeof(FCustomizationPreview) == 0x000018, "Wrong size on FCustomizationPreview");
static_assert(offsetof(FCustomizationPreview, MeshComponent) == 0x000000, "Member 'FCustomizationPreview::MeshComponent' has a wrong offset!");
static_assert(offsetof(FCustomizationPreview, Mesh) == 0x000008, "Member 'FCustomizationPreview::Mesh' has a wrong offset!");
static_assert(offsetof(FCustomizationPreview, Material) == 0x000010, "Member 'FCustomizationPreview::Material' has a wrong offset!");

// ScriptStruct Flame.CloudClassConverterConfig
// 0x0010 (0x0010 - 0x0000)
struct FCloudClassConverterConfig final
{
public:
	TArray<class FName>                           ClassTableNames;                                   // 0x0000(0x0010)(Edit, ZeroConstructor, Config, NativeAccessSpecifierPublic)
};
static_assert(alignof(FCloudClassConverterConfig) == 0x000008, "Wrong alignment on FCloudClassConverterConfig");
static_assert(sizeof(FCloudClassConverterConfig) == 0x000010, "Wrong size on FCloudClassConverterConfig");
static_assert(offsetof(FCloudClassConverterConfig, ClassTableNames) == 0x000000, "Member 'FCloudClassConverterConfig::ClassTableNames' has a wrong offset!");

// ScriptStruct Flame.CloudDataTablesConfig
// 0x0010 (0x0010 - 0x0000)
struct FCloudDataTablesConfig final
{
public:
	TArray<struct FDataProviderTableConfig>       Tables;                                            // 0x0000(0x0010)(Edit, ZeroConstructor, Config, NativeAccessSpecifierPublic)
};
static_assert(alignof(FCloudDataTablesConfig) == 0x000008, "Wrong alignment on FCloudDataTablesConfig");
static_assert(sizeof(FCloudDataTablesConfig) == 0x000010, "Wrong size on FCloudDataTablesConfig");
static_assert(offsetof(FCloudDataTablesConfig, Tables) == 0x000000, "Member 'FCloudDataTablesConfig::Tables' has a wrong offset!");

// ScriptStruct Flame.CloudDataDownloaderConfig
// 0x0040 (0x0040 - 0x0000)
struct FCloudDataDownloaderConfig final
{
public:
	class FString                                 PackUrl;                                           // 0x0000(0x0010)(Edit, ZeroConstructor, Config, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 PackCachePath;                                     // 0x0010(0x0010)(Edit, ZeroConstructor, Config, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ECloudDataPackCompressionType                 CompressionType;                                   // 0x0020(0x0001)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ECloudDataDownloadContainerType               ContainerType;                                     // 0x0021(0x0001)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ECloudDataPackTypeType                        DownloadPackType;                                  // 0x0022(0x0001)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_23[0x1];                                       // 0x0023(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   VersionDownloadItem;                               // 0x0024(0x0008)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2C[0x4];                                       // 0x002C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FCloudDataDownloadItemConfig>   DownloadItems;                                     // 0x0030(0x0010)(Edit, ZeroConstructor, Config, NativeAccessSpecifierPublic)
};
static_assert(alignof(FCloudDataDownloaderConfig) == 0x000008, "Wrong alignment on FCloudDataDownloaderConfig");
static_assert(sizeof(FCloudDataDownloaderConfig) == 0x000040, "Wrong size on FCloudDataDownloaderConfig");
static_assert(offsetof(FCloudDataDownloaderConfig, PackUrl) == 0x000000, "Member 'FCloudDataDownloaderConfig::PackUrl' has a wrong offset!");
static_assert(offsetof(FCloudDataDownloaderConfig, PackCachePath) == 0x000010, "Member 'FCloudDataDownloaderConfig::PackCachePath' has a wrong offset!");
static_assert(offsetof(FCloudDataDownloaderConfig, CompressionType) == 0x000020, "Member 'FCloudDataDownloaderConfig::CompressionType' has a wrong offset!");
static_assert(offsetof(FCloudDataDownloaderConfig, ContainerType) == 0x000021, "Member 'FCloudDataDownloaderConfig::ContainerType' has a wrong offset!");
static_assert(offsetof(FCloudDataDownloaderConfig, DownloadPackType) == 0x000022, "Member 'FCloudDataDownloaderConfig::DownloadPackType' has a wrong offset!");
static_assert(offsetof(FCloudDataDownloaderConfig, VersionDownloadItem) == 0x000024, "Member 'FCloudDataDownloaderConfig::VersionDownloadItem' has a wrong offset!");
static_assert(offsetof(FCloudDataDownloaderConfig, DownloadItems) == 0x000030, "Member 'FCloudDataDownloaderConfig::DownloadItems' has a wrong offset!");

// ScriptStruct Flame.DeconstructCategoryTableRow
// 0x0020 (0x0028 - 0x0008)
struct FDeconstructCategoryTableRow final : public FTableRowBase
{
public:
	class FText                                   DisplayName;                                       // 0x0008(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	int32                                         ItemFilter;                                        // 0x0020(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_24[0x4];                                       // 0x0024(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FDeconstructCategoryTableRow) == 0x000008, "Wrong alignment on FDeconstructCategoryTableRow");
static_assert(sizeof(FDeconstructCategoryTableRow) == 0x000028, "Wrong size on FDeconstructCategoryTableRow");
static_assert(offsetof(FDeconstructCategoryTableRow, DisplayName) == 0x000008, "Member 'FDeconstructCategoryTableRow::DisplayName' has a wrong offset!");
static_assert(offsetof(FDeconstructCategoryTableRow, ItemFilter) == 0x000020, "Member 'FDeconstructCategoryTableRow::ItemFilter' has a wrong offset!");

// ScriptStruct Flame.LoadoutDiff
// 0x00A0 (0x00A0 - 0x0000)
struct FLoadoutDiff final
{
public:
	TMap<TSubclassOf<class AWeapon>, int32>       Weapons;                                           // 0x0000(0x0050)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	TMap<TSubclassOf<class AItem>, int32>         Items;                                             // 0x0050(0x0050)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
};
static_assert(alignof(FLoadoutDiff) == 0x000008, "Wrong alignment on FLoadoutDiff");
static_assert(sizeof(FLoadoutDiff) == 0x0000A0, "Wrong size on FLoadoutDiff");
static_assert(offsetof(FLoadoutDiff, Weapons) == 0x000000, "Member 'FLoadoutDiff::Weapons' has a wrong offset!");
static_assert(offsetof(FLoadoutDiff, Items) == 0x000050, "Member 'FLoadoutDiff::Items' has a wrong offset!");

// ScriptStruct Flame.EquipWeaponWithAmmoOperationContext
// 0x0018 (0x0018 - 0x0000)
struct FEquipWeaponWithAmmoOperationContext final
{
public:
	TSubclassOf<class AWeapon>                    Weapon;                                            // 0x0000(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSubclassOf<class AAmmoItem>                  Ammo;                                              // 0x0008(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         AmmoToCraft;                                       // 0x0010(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         AmmoToEquip;                                       // 0x0014(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FEquipWeaponWithAmmoOperationContext) == 0x000008, "Wrong alignment on FEquipWeaponWithAmmoOperationContext");
static_assert(sizeof(FEquipWeaponWithAmmoOperationContext) == 0x000018, "Wrong size on FEquipWeaponWithAmmoOperationContext");
static_assert(offsetof(FEquipWeaponWithAmmoOperationContext, Weapon) == 0x000000, "Member 'FEquipWeaponWithAmmoOperationContext::Weapon' has a wrong offset!");
static_assert(offsetof(FEquipWeaponWithAmmoOperationContext, Ammo) == 0x000008, "Member 'FEquipWeaponWithAmmoOperationContext::Ammo' has a wrong offset!");
static_assert(offsetof(FEquipWeaponWithAmmoOperationContext, AmmoToCraft) == 0x000010, "Member 'FEquipWeaponWithAmmoOperationContext::AmmoToCraft' has a wrong offset!");
static_assert(offsetof(FEquipWeaponWithAmmoOperationContext, AmmoToEquip) == 0x000014, "Member 'FEquipWeaponWithAmmoOperationContext::AmmoToEquip' has a wrong offset!");

// ScriptStruct Flame.PoolItems
// 0x0010 (0x0010 - 0x0000)
struct FPoolItems final
{
public:
	TArray<struct FPoolItem>                      Objects;                                           // 0x0000(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FPoolItems) == 0x000008, "Wrong alignment on FPoolItems");
static_assert(sizeof(FPoolItems) == 0x000010, "Wrong size on FPoolItems");
static_assert(offsetof(FPoolItems, Objects) == 0x000000, "Member 'FPoolItems::Objects' has a wrong offset!");

// ScriptStruct Flame.FlamePoseModifiers
// 0x0034 (0x0034 - 0x0000)
struct alignas(0x04) FFlamePoseModifiers final
{
public:
	uint8                                         Pad_0[0x34];                                       // 0x0000(0x0034)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FFlamePoseModifiers) == 0x000004, "Wrong alignment on FFlamePoseModifiers");
static_assert(sizeof(FFlamePoseModifiers) == 0x000034, "Wrong size on FFlamePoseModifiers");

// ScriptStruct Flame.MotionAimSettings
// 0x0014 (0x0014 - 0x0000)
struct FMotionAimSettings final
{
public:
	bool                                          bEnabled;                                          // 0x0000(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bInvertView;                                       // 0x0001(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bInvertTurn;                                       // 0x0002(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_3[0x1];                                        // 0x0003(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         SensitivityFirstPersonADS;                         // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SensitivityADS;                                    // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SensitivityWalking;                                // 0x000C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SensitivitySprinting;                              // 0x0010(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FMotionAimSettings) == 0x000004, "Wrong alignment on FMotionAimSettings");
static_assert(sizeof(FMotionAimSettings) == 0x000014, "Wrong size on FMotionAimSettings");
static_assert(offsetof(FMotionAimSettings, bEnabled) == 0x000000, "Member 'FMotionAimSettings::bEnabled' has a wrong offset!");
static_assert(offsetof(FMotionAimSettings, bInvertView) == 0x000001, "Member 'FMotionAimSettings::bInvertView' has a wrong offset!");
static_assert(offsetof(FMotionAimSettings, bInvertTurn) == 0x000002, "Member 'FMotionAimSettings::bInvertTurn' has a wrong offset!");
static_assert(offsetof(FMotionAimSettings, SensitivityFirstPersonADS) == 0x000004, "Member 'FMotionAimSettings::SensitivityFirstPersonADS' has a wrong offset!");
static_assert(offsetof(FMotionAimSettings, SensitivityADS) == 0x000008, "Member 'FMotionAimSettings::SensitivityADS' has a wrong offset!");
static_assert(offsetof(FMotionAimSettings, SensitivityWalking) == 0x00000C, "Member 'FMotionAimSettings::SensitivityWalking' has a wrong offset!");
static_assert(offsetof(FMotionAimSettings, SensitivitySprinting) == 0x000010, "Member 'FMotionAimSettings::SensitivitySprinting' has a wrong offset!");

// ScriptStruct Flame.SpectatorState
// 0x0090 (0x0090 - 0x0000)
struct FSpectatorState final
{
public:
	TWeakObjectPtr<class AHumanCharacter>         TargetHumanCharacter;                              // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TWeakObjectPtr<class AActor>                  TargetActor;                                       // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FTransform                             TargetTransform;                                   // 0x0010(0x0030)(BlueprintVisible, BlueprintReadOnly, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FTransform                             FallbackTransform;                                 // 0x0040(0x0030)(BlueprintVisible, BlueprintReadOnly, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	TWeakObjectPtr<class AFlameSpectatorPawn>     SpectatorPawn;                                     // 0x0070(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TWeakObjectPtr<class AHumanCharacter>         OwnerCharacter;                                    // 0x0078(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         TargetIndex;                                       // 0x0080(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         SpectatorCandidates;                               // 0x0081(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bFastSwitch;                                       // 0x0082(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_83[0xD];                                       // 0x0083(0x000D)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FSpectatorState) == 0x000010, "Wrong alignment on FSpectatorState");
static_assert(sizeof(FSpectatorState) == 0x000090, "Wrong size on FSpectatorState");
static_assert(offsetof(FSpectatorState, TargetHumanCharacter) == 0x000000, "Member 'FSpectatorState::TargetHumanCharacter' has a wrong offset!");
static_assert(offsetof(FSpectatorState, TargetActor) == 0x000008, "Member 'FSpectatorState::TargetActor' has a wrong offset!");
static_assert(offsetof(FSpectatorState, TargetTransform) == 0x000010, "Member 'FSpectatorState::TargetTransform' has a wrong offset!");
static_assert(offsetof(FSpectatorState, FallbackTransform) == 0x000040, "Member 'FSpectatorState::FallbackTransform' has a wrong offset!");
static_assert(offsetof(FSpectatorState, SpectatorPawn) == 0x000070, "Member 'FSpectatorState::SpectatorPawn' has a wrong offset!");
static_assert(offsetof(FSpectatorState, OwnerCharacter) == 0x000078, "Member 'FSpectatorState::OwnerCharacter' has a wrong offset!");
static_assert(offsetof(FSpectatorState, TargetIndex) == 0x000080, "Member 'FSpectatorState::TargetIndex' has a wrong offset!");
static_assert(offsetof(FSpectatorState, SpectatorCandidates) == 0x000081, "Member 'FSpectatorState::SpectatorCandidates' has a wrong offset!");
static_assert(offsetof(FSpectatorState, bFastSwitch) == 0x000082, "Member 'FSpectatorState::bFastSwitch' has a wrong offset!");

// ScriptStruct Flame.FlameSkinInfo
// 0x0018 (0x0018 - 0x0000)
struct FFlameSkinInfo final
{
public:
	class AWeapon*                                Weapon;                                            // 0x0000(0x0008)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSubclassOf<class AItemSkin>                  Skin;                                              // 0x0008(0x0008)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AWeapon*                                OriginalWeapon;                                    // 0x0010(0x0008)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FFlameSkinInfo) == 0x000008, "Wrong alignment on FFlameSkinInfo");
static_assert(sizeof(FFlameSkinInfo) == 0x000018, "Wrong size on FFlameSkinInfo");
static_assert(offsetof(FFlameSkinInfo, Weapon) == 0x000000, "Member 'FFlameSkinInfo::Weapon' has a wrong offset!");
static_assert(offsetof(FFlameSkinInfo, Skin) == 0x000008, "Member 'FFlameSkinInfo::Skin' has a wrong offset!");
static_assert(offsetof(FFlameSkinInfo, OriginalWeapon) == 0x000010, "Member 'FFlameSkinInfo::OriginalWeapon' has a wrong offset!");

// ScriptStruct Flame.GlintSettings
// 0x001C (0x001C - 0x0000)
struct FGlintSettings final
{
public:
	float                                         MinDot;                                            // 0x0000(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MaxDot;                                            // 0x0004(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MinGlintTime;                                      // 0x0008(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MaxGlintTime;                                      // 0x000C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MinGlintSize;                                      // 0x0010(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MaxGlintSize;                                      // 0x0014(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bSelfRegister;                                     // 0x0018(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bUniDirectional;                                   // 0x0019(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1A[0x2];                                       // 0x001A(0x0002)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FGlintSettings) == 0x000004, "Wrong alignment on FGlintSettings");
static_assert(sizeof(FGlintSettings) == 0x00001C, "Wrong size on FGlintSettings");
static_assert(offsetof(FGlintSettings, MinDot) == 0x000000, "Member 'FGlintSettings::MinDot' has a wrong offset!");
static_assert(offsetof(FGlintSettings, MaxDot) == 0x000004, "Member 'FGlintSettings::MaxDot' has a wrong offset!");
static_assert(offsetof(FGlintSettings, MinGlintTime) == 0x000008, "Member 'FGlintSettings::MinGlintTime' has a wrong offset!");
static_assert(offsetof(FGlintSettings, MaxGlintTime) == 0x00000C, "Member 'FGlintSettings::MaxGlintTime' has a wrong offset!");
static_assert(offsetof(FGlintSettings, MinGlintSize) == 0x000010, "Member 'FGlintSettings::MinGlintSize' has a wrong offset!");
static_assert(offsetof(FGlintSettings, MaxGlintSize) == 0x000014, "Member 'FGlintSettings::MaxGlintSize' has a wrong offset!");
static_assert(offsetof(FGlintSettings, bSelfRegister) == 0x000018, "Member 'FGlintSettings::bSelfRegister' has a wrong offset!");
static_assert(offsetof(FGlintSettings, bUniDirectional) == 0x000019, "Member 'FGlintSettings::bUniDirectional' has a wrong offset!");

// ScriptStruct Flame.MeleeDamageEvent
// 0x0008 (0x00B8 - 0x00B0)
struct FMeleeDamageEvent final : public FPointDamageEvent
{
public:
	class AWeapon*                                Weapon;                                            // 0x00B0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FMeleeDamageEvent) == 0x000008, "Wrong alignment on FMeleeDamageEvent");
static_assert(sizeof(FMeleeDamageEvent) == 0x0000B8, "Wrong size on FMeleeDamageEvent");
static_assert(offsetof(FMeleeDamageEvent, Weapon) == 0x0000B0, "Member 'FMeleeDamageEvent::Weapon' has a wrong offset!");

// ScriptStruct Flame.BulletDamageEvent
// 0x0008 (0x00B8 - 0x00B0)
struct FBulletDamageEvent final : public FPointDamageEvent
{
public:
	class AWeapon*                                Weapon;                                            // 0x00B0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FBulletDamageEvent) == 0x000008, "Wrong alignment on FBulletDamageEvent");
static_assert(sizeof(FBulletDamageEvent) == 0x0000B8, "Wrong size on FBulletDamageEvent");
static_assert(offsetof(FBulletDamageEvent, Weapon) == 0x0000B0, "Member 'FBulletDamageEvent::Weapon' has a wrong offset!");

// ScriptStruct Flame.RecoilCollection
// 0x0040 (0x0040 - 0x0000)
struct FRecoilCollection final
{
public:
	class UAnimSequence*                          RecoilRifle;                                       // 0x0000(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAnimSequence*                          ProneRecoilRifle;                                  // 0x0008(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAnimSequence*                          RecoilPistol;                                      // 0x0010(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAnimSequence*                          ProneRecoilPistol;                                 // 0x0018(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAnimSequence*                          RecoilSMG;                                         // 0x0020(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAnimSequence*                          ProneRecoilSMG;                                    // 0x0028(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAnimSequence*                          RecoilMG;                                          // 0x0030(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAnimSequence*                          ProneRecoilMG;                                     // 0x0038(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FRecoilCollection) == 0x000008, "Wrong alignment on FRecoilCollection");
static_assert(sizeof(FRecoilCollection) == 0x000040, "Wrong size on FRecoilCollection");
static_assert(offsetof(FRecoilCollection, RecoilRifle) == 0x000000, "Member 'FRecoilCollection::RecoilRifle' has a wrong offset!");
static_assert(offsetof(FRecoilCollection, ProneRecoilRifle) == 0x000008, "Member 'FRecoilCollection::ProneRecoilRifle' has a wrong offset!");
static_assert(offsetof(FRecoilCollection, RecoilPistol) == 0x000010, "Member 'FRecoilCollection::RecoilPistol' has a wrong offset!");
static_assert(offsetof(FRecoilCollection, ProneRecoilPistol) == 0x000018, "Member 'FRecoilCollection::ProneRecoilPistol' has a wrong offset!");
static_assert(offsetof(FRecoilCollection, RecoilSMG) == 0x000020, "Member 'FRecoilCollection::RecoilSMG' has a wrong offset!");
static_assert(offsetof(FRecoilCollection, ProneRecoilSMG) == 0x000028, "Member 'FRecoilCollection::ProneRecoilSMG' has a wrong offset!");
static_assert(offsetof(FRecoilCollection, RecoilMG) == 0x000030, "Member 'FRecoilCollection::RecoilMG' has a wrong offset!");
static_assert(offsetof(FRecoilCollection, ProneRecoilMG) == 0x000038, "Member 'FRecoilCollection::ProneRecoilMG' has a wrong offset!");

// ScriptStruct Flame.AimedCollection
// 0x0028 (0x0028 - 0x0000)
struct FAimedCollection final
{
public:
	class UAnimSequence*                          AimingIdle;                                        // 0x0000(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAnimSequence*                          AimingBlocked;                                     // 0x0008(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UBlendSpace1D*                          AimingPullBack;                                    // 0x0010(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAimOffsetBlendSpace*                   AimLookAt;                                         // 0x0018(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UBlendSpace1D*                          TurnInPlace;                                       // 0x0020(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAimedCollection) == 0x000008, "Wrong alignment on FAimedCollection");
static_assert(sizeof(FAimedCollection) == 0x000028, "Wrong size on FAimedCollection");
static_assert(offsetof(FAimedCollection, AimingIdle) == 0x000000, "Member 'FAimedCollection::AimingIdle' has a wrong offset!");
static_assert(offsetof(FAimedCollection, AimingBlocked) == 0x000008, "Member 'FAimedCollection::AimingBlocked' has a wrong offset!");
static_assert(offsetof(FAimedCollection, AimingPullBack) == 0x000010, "Member 'FAimedCollection::AimingPullBack' has a wrong offset!");
static_assert(offsetof(FAimedCollection, AimLookAt) == 0x000018, "Member 'FAimedCollection::AimLookAt' has a wrong offset!");
static_assert(offsetof(FAimedCollection, TurnInPlace) == 0x000020, "Member 'FAimedCollection::TurnInPlace' has a wrong offset!");

// ScriptStruct Flame.ProneCollection
// 0x0028 (0x0028 - 0x0000)
struct FProneCollection final
{
public:
	class UBlendSpace*                            Movement;                                          // 0x0000(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UBlendSpace1D*                          LookAround;                                        // 0x0008(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAimOffsetBlendSpace*                   IdleAim;                                           // 0x0010(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAnimSequence*                          ProneIdle;                                         // 0x0018(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UBlendSpace1D*                          TurnInPlace;                                       // 0x0020(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FProneCollection) == 0x000008, "Wrong alignment on FProneCollection");
static_assert(sizeof(FProneCollection) == 0x000028, "Wrong size on FProneCollection");
static_assert(offsetof(FProneCollection, Movement) == 0x000000, "Member 'FProneCollection::Movement' has a wrong offset!");
static_assert(offsetof(FProneCollection, LookAround) == 0x000008, "Member 'FProneCollection::LookAround' has a wrong offset!");
static_assert(offsetof(FProneCollection, IdleAim) == 0x000010, "Member 'FProneCollection::IdleAim' has a wrong offset!");
static_assert(offsetof(FProneCollection, ProneIdle) == 0x000018, "Member 'FProneCollection::ProneIdle' has a wrong offset!");
static_assert(offsetof(FProneCollection, TurnInPlace) == 0x000020, "Member 'FProneCollection::TurnInPlace' has a wrong offset!");

// ScriptStruct Flame.Prone
// 0x0100 (0x0100 - 0x0000)
struct Flame::FProne final
{
public:
	struct FProneCollection                       RifleProneCollection;                              // 0x0000(0x0028)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NoDestructor, NativeAccessSpecifierPublic)
	struct FProneCollection                       PistolProneCollection;                             // 0x0028(0x0028)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NoDestructor, NativeAccessSpecifierPublic)
	struct FProneCollection                       UnarmedProneCollection;                            // 0x0050(0x0028)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NoDestructor, NativeAccessSpecifierPublic)
	struct FProneCollection                       ThrowableProneCollection;                          // 0x0078(0x0028)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NoDestructor, NativeAccessSpecifierPublic)
	struct FProneTransitions                      ProneTransitions;                                  // 0x00A0(0x0060)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(Flame::FProne) == 0x000008, "Wrong alignment on Flame::FProne");
static_assert(sizeof(Flame::FProne) == 0x000100, "Wrong size on Flame::FProne");
static_assert(offsetof(Flame::FProne, RifleProneCollection) == 0x000000, "Member 'Flame::FProne::RifleProneCollection' has a wrong offset!");
static_assert(offsetof(Flame::FProne, PistolProneCollection) == 0x000028, "Member 'Flame::FProne::PistolProneCollection' has a wrong offset!");
static_assert(offsetof(Flame::FProne, UnarmedProneCollection) == 0x000050, "Member 'Flame::FProne::UnarmedProneCollection' has a wrong offset!");
static_assert(offsetof(Flame::FProne, ThrowableProneCollection) == 0x000078, "Member 'Flame::FProne::ThrowableProneCollection' has a wrong offset!");
static_assert(offsetof(Flame::FProne, ProneTransitions) == 0x0000A0, "Member 'Flame::FProne::ProneTransitions' has a wrong offset!");

// ScriptStruct Flame.AimingSet
// 0x0028 (0x0028 - 0x0000)
struct FAimingSet final
{
public:
	class UBlendSpace*                            AimingStand;                                       // 0x0000(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UBlendSpace*                            AimingCrouch;                                      // 0x0008(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UBlendSpace*                            AimingStandMoving;                                 // 0x0010(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UBlendSpace*                            AimingCrouchMoving;                                // 0x0018(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UBlendSpace*                            AimingProne;                                       // 0x0020(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAimingSet) == 0x000008, "Wrong alignment on FAimingSet");
static_assert(sizeof(FAimingSet) == 0x000028, "Wrong size on FAimingSet");
static_assert(offsetof(FAimingSet, AimingStand) == 0x000000, "Member 'FAimingSet::AimingStand' has a wrong offset!");
static_assert(offsetof(FAimingSet, AimingCrouch) == 0x000008, "Member 'FAimingSet::AimingCrouch' has a wrong offset!");
static_assert(offsetof(FAimingSet, AimingStandMoving) == 0x000010, "Member 'FAimingSet::AimingStandMoving' has a wrong offset!");
static_assert(offsetof(FAimingSet, AimingCrouchMoving) == 0x000018, "Member 'FAimingSet::AimingCrouchMoving' has a wrong offset!");
static_assert(offsetof(FAimingSet, AimingProne) == 0x000020, "Member 'FAimingSet::AimingProne' has a wrong offset!");

// ScriptStruct Flame.WeaponCategoryAnimationData
// 0x01A8 (0x01A8 - 0x0000)
struct FWeaponCategoryAnimationData final
{
public:
	class UAnimSequence*                          Equip;                                             // 0x0000(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAnimSequence*                          UnEquip;                                           // 0x0008(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FBasicMovementSet                      BasicMovement;                                     // 0x0010(0x0170)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, NativeAccessSpecifierPublic)
	struct FAimingSet                             BasicAiming;                                       // 0x0180(0x0028)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FWeaponCategoryAnimationData) == 0x000008, "Wrong alignment on FWeaponCategoryAnimationData");
static_assert(sizeof(FWeaponCategoryAnimationData) == 0x0001A8, "Wrong size on FWeaponCategoryAnimationData");
static_assert(offsetof(FWeaponCategoryAnimationData, Equip) == 0x000000, "Member 'FWeaponCategoryAnimationData::Equip' has a wrong offset!");
static_assert(offsetof(FWeaponCategoryAnimationData, UnEquip) == 0x000008, "Member 'FWeaponCategoryAnimationData::UnEquip' has a wrong offset!");
static_assert(offsetof(FWeaponCategoryAnimationData, BasicMovement) == 0x000010, "Member 'FWeaponCategoryAnimationData::BasicMovement' has a wrong offset!");
static_assert(offsetof(FWeaponCategoryAnimationData, BasicAiming) == 0x000180, "Member 'FWeaponCategoryAnimationData::BasicAiming' has a wrong offset!");

// ScriptStruct Flame.HumanArchetypeMorphConfiguration
// 0x0004 (0x0004 - 0x0000)
struct FHumanArchetypeMorphConfiguration final
{
public:
	float                                         MorphValue;                                        // 0x0000(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FHumanArchetypeMorphConfiguration) == 0x000004, "Wrong alignment on FHumanArchetypeMorphConfiguration");
static_assert(sizeof(FHumanArchetypeMorphConfiguration) == 0x000004, "Wrong size on FHumanArchetypeMorphConfiguration");
static_assert(offsetof(FHumanArchetypeMorphConfiguration, MorphValue) == 0x000000, "Member 'FHumanArchetypeMorphConfiguration::MorphValue' has a wrong offset!");

// ScriptStruct Flame.StanceChangeEffect
// 0x0010 (0x0010 - 0x0000)
struct FStanceChangeEffect final
{
public:
	EStance                                       From;                                              // 0x0000(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EStance                                       To;                                                // 0x0001(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2[0x2];                                        // 0x0002(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	struct FStanceChangeEffectParameters          Params;                                            // 0x0004(0x000C)(Edit, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FStanceChangeEffect) == 0x000004, "Wrong alignment on FStanceChangeEffect");
static_assert(sizeof(FStanceChangeEffect) == 0x000010, "Wrong size on FStanceChangeEffect");
static_assert(offsetof(FStanceChangeEffect, From) == 0x000000, "Member 'FStanceChangeEffect::From' has a wrong offset!");
static_assert(offsetof(FStanceChangeEffect, To) == 0x000001, "Member 'FStanceChangeEffect::To' has a wrong offset!");
static_assert(offsetof(FStanceChangeEffect, Params) == 0x000004, "Member 'FStanceChangeEffect::Params' has a wrong offset!");

// ScriptStruct Flame.SimLadderClimb
// 0x000C (0x000C - 0x0000)
struct FSimLadderClimb final
{
public:
	float                                         Position;                                          // 0x0000(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Speed;                                             // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_8[0x4];                                        // 0x0008(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FSimLadderClimb) == 0x000004, "Wrong alignment on FSimLadderClimb");
static_assert(sizeof(FSimLadderClimb) == 0x00000C, "Wrong size on FSimLadderClimb");
static_assert(offsetof(FSimLadderClimb, Position) == 0x000000, "Member 'FSimLadderClimb::Position' has a wrong offset!");
static_assert(offsetof(FSimLadderClimb, Speed) == 0x000004, "Member 'FSimLadderClimb::Speed' has a wrong offset!");

// ScriptStruct Flame.InputDebugData
// 0x0020 (0x0020 - 0x0000)
struct FInputDebugData final
{
public:
	struct FVector2D                              Raw;                                               // 0x0000(0x0008)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2D                              Magnitudes;                                        // 0x0008(0x0008)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         RampupTimer;                                       // 0x0010(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2D                              TurnSpeed;                                         // 0x0014(0x0008)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DiagonalCoefficient;                               // 0x001C(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FInputDebugData) == 0x000004, "Wrong alignment on FInputDebugData");
static_assert(sizeof(FInputDebugData) == 0x000020, "Wrong size on FInputDebugData");
static_assert(offsetof(FInputDebugData, Raw) == 0x000000, "Member 'FInputDebugData::Raw' has a wrong offset!");
static_assert(offsetof(FInputDebugData, Magnitudes) == 0x000008, "Member 'FInputDebugData::Magnitudes' has a wrong offset!");
static_assert(offsetof(FInputDebugData, RampupTimer) == 0x000010, "Member 'FInputDebugData::RampupTimer' has a wrong offset!");
static_assert(offsetof(FInputDebugData, TurnSpeed) == 0x000014, "Member 'FInputDebugData::TurnSpeed' has a wrong offset!");
static_assert(offsetof(FInputDebugData, DiagonalCoefficient) == 0x00001C, "Member 'FInputDebugData::DiagonalCoefficient' has a wrong offset!");

// ScriptStruct Flame.SkinPair
// 0x0010 (0x0010 - 0x0000)
struct FSkinPair final
{
public:
	TSubclassOf<class AItem>                      Item;                                              // 0x0000(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSubclassOf<class AItemSkin>                  Skin;                                              // 0x0008(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSkinPair) == 0x000008, "Wrong alignment on FSkinPair");
static_assert(sizeof(FSkinPair) == 0x000010, "Wrong size on FSkinPair");
static_assert(offsetof(FSkinPair, Item) == 0x000000, "Member 'FSkinPair::Item' has a wrong offset!");
static_assert(offsetof(FSkinPair, Skin) == 0x000008, "Member 'FSkinPair::Skin' has a wrong offset!");

// ScriptStruct Flame.PlayerInLobby
// 0x0028 (0x0028 - 0x0000)
struct FPlayerInLobby final
{
public:
	bool                                          bIsValid;                                          // 0x0000(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FSkinPair>                      Weapons;                                           // 0x0008(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	struct FCustomizationContainer                Customizations;                                    // 0x0018(0x0010)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
};
static_assert(alignof(FPlayerInLobby) == 0x000008, "Wrong alignment on FPlayerInLobby");
static_assert(sizeof(FPlayerInLobby) == 0x000028, "Wrong size on FPlayerInLobby");
static_assert(offsetof(FPlayerInLobby, bIsValid) == 0x000000, "Member 'FPlayerInLobby::bIsValid' has a wrong offset!");
static_assert(offsetof(FPlayerInLobby, Weapons) == 0x000008, "Member 'FPlayerInLobby::Weapons' has a wrong offset!");
static_assert(offsetof(FPlayerInLobby, Customizations) == 0x000018, "Member 'FPlayerInLobby::Customizations' has a wrong offset!");

// ScriptStruct Flame.ChallengeParameter
// 0x0010 (0x0010 - 0x0000)
struct FChallengeParameter final
{
public:
	TSubclassOf<class AItem>                      ItemType;                                          // 0x0000(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Count;                                             // 0x0008(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EItemCategory                                 ItemCategory;                                      // 0x000C(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D[0x3];                                        // 0x000D(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FChallengeParameter) == 0x000008, "Wrong alignment on FChallengeParameter");
static_assert(sizeof(FChallengeParameter) == 0x000010, "Wrong size on FChallengeParameter");
static_assert(offsetof(FChallengeParameter, ItemType) == 0x000000, "Member 'FChallengeParameter::ItemType' has a wrong offset!");
static_assert(offsetof(FChallengeParameter, Count) == 0x000008, "Member 'FChallengeParameter::Count' has a wrong offset!");
static_assert(offsetof(FChallengeParameter, ItemCategory) == 0x00000C, "Member 'FChallengeParameter::ItemCategory' has a wrong offset!");

// ScriptStruct Flame.ChallengePrerequisiteInfo
// 0x0040 (0x0040 - 0x0000)
struct FChallengePrerequisiteInfo final
{
public:
	TSoftClassPtr<class UClass>                   Prerequisite;                                      // 0x0000(0x0028)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSubclassOf<class AItem>                      ItemType;                                          // 0x0028(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Number;                                            // 0x0030(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EItemCategory                                 ItemCategory;                                      // 0x0034(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_35[0x3];                                       // 0x0035(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   ChallengeName;                                     // 0x0038(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FChallengePrerequisiteInfo) == 0x000008, "Wrong alignment on FChallengePrerequisiteInfo");
static_assert(sizeof(FChallengePrerequisiteInfo) == 0x000040, "Wrong size on FChallengePrerequisiteInfo");
static_assert(offsetof(FChallengePrerequisiteInfo, Prerequisite) == 0x000000, "Member 'FChallengePrerequisiteInfo::Prerequisite' has a wrong offset!");
static_assert(offsetof(FChallengePrerequisiteInfo, ItemType) == 0x000028, "Member 'FChallengePrerequisiteInfo::ItemType' has a wrong offset!");
static_assert(offsetof(FChallengePrerequisiteInfo, Number) == 0x000030, "Member 'FChallengePrerequisiteInfo::Number' has a wrong offset!");
static_assert(offsetof(FChallengePrerequisiteInfo, ItemCategory) == 0x000034, "Member 'FChallengePrerequisiteInfo::ItemCategory' has a wrong offset!");
static_assert(offsetof(FChallengePrerequisiteInfo, ChallengeName) == 0x000038, "Member 'FChallengePrerequisiteInfo::ChallengeName' has a wrong offset!");

// ScriptStruct Flame.ChallengeList
// 0x00F0 (0x0100 - 0x0010)
struct FChallengeList final : public FClassTableRow
{
public:
	bool                                          Enabled;                                           // 0x0010(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EChallengeCategory                            Category;                                          // 0x0011(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_12[0x6];                                       // 0x0012(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	TSoftClassPtr<class UClass>                   Condition;                                         // 0x0018(0x0028)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EChallengeDifficulty                          Difficulty;                                        // 0x0040(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_41[0x7];                                       // 0x0041(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FChallengeParameter>            Parameters;                                        // 0x0048(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic)
	TArray<struct FChallengePrerequisiteInfo>     Prerequisites;                                     // 0x0058(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic)
	TArray<struct FChallengeReward>               Rewards;                                           // 0x0068(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic)
	class FString                                 ChallengeGroup;                                    // 0x0078(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   FallbackChallenge;                                 // 0x0088(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FText                                   ConditionText;                                     // 0x0090(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NativeAccessSpecifierPublic)
	class FText                                   TitleText;                                         // 0x00A8(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NativeAccessSpecifierPublic)
	class FText                                   DescriptionText;                                   // 0x00C0(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class USoundWave>              VoiceLine;                                         // 0x00D8(0x0028)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FChallengeList) == 0x000008, "Wrong alignment on FChallengeList");
static_assert(sizeof(FChallengeList) == 0x000100, "Wrong size on FChallengeList");
static_assert(offsetof(FChallengeList, Enabled) == 0x000010, "Member 'FChallengeList::Enabled' has a wrong offset!");
static_assert(offsetof(FChallengeList, Category) == 0x000011, "Member 'FChallengeList::Category' has a wrong offset!");
static_assert(offsetof(FChallengeList, Condition) == 0x000018, "Member 'FChallengeList::Condition' has a wrong offset!");
static_assert(offsetof(FChallengeList, Difficulty) == 0x000040, "Member 'FChallengeList::Difficulty' has a wrong offset!");
static_assert(offsetof(FChallengeList, Parameters) == 0x000048, "Member 'FChallengeList::Parameters' has a wrong offset!");
static_assert(offsetof(FChallengeList, Prerequisites) == 0x000058, "Member 'FChallengeList::Prerequisites' has a wrong offset!");
static_assert(offsetof(FChallengeList, Rewards) == 0x000068, "Member 'FChallengeList::Rewards' has a wrong offset!");
static_assert(offsetof(FChallengeList, ChallengeGroup) == 0x000078, "Member 'FChallengeList::ChallengeGroup' has a wrong offset!");
static_assert(offsetof(FChallengeList, FallbackChallenge) == 0x000088, "Member 'FChallengeList::FallbackChallenge' has a wrong offset!");
static_assert(offsetof(FChallengeList, ConditionText) == 0x000090, "Member 'FChallengeList::ConditionText' has a wrong offset!");
static_assert(offsetof(FChallengeList, TitleText) == 0x0000A8, "Member 'FChallengeList::TitleText' has a wrong offset!");
static_assert(offsetof(FChallengeList, DescriptionText) == 0x0000C0, "Member 'FChallengeList::DescriptionText' has a wrong offset!");
static_assert(offsetof(FChallengeList, VoiceLine) == 0x0000D8, "Member 'FChallengeList::VoiceLine' has a wrong offset!");

// ScriptStruct Flame.ImageFileInCache
// 0x0018 (0x0018 - 0x0000)
struct alignas(0x08) FImageFileInCache final
{
public:
	uint8                                         Pad_0[0x18];                                       // 0x0000(0x0018)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FImageFileInCache) == 0x000008, "Wrong alignment on FImageFileInCache");
static_assert(sizeof(FImageFileInCache) == 0x000018, "Wrong size on FImageFileInCache");

// ScriptStruct Flame.NewsUIData
// 0x00A0 (0x00A0 - 0x0000)
struct FNewsUIData final
{
public:
	struct FNewsDto                               NewsInfo;                                          // 0x0000(0x0098)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	class UTexture2DDynamic*                      NewsDynamicImage;                                  // 0x0098(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FNewsUIData) == 0x000008, "Wrong alignment on FNewsUIData");
static_assert(sizeof(FNewsUIData) == 0x0000A0, "Wrong size on FNewsUIData");
static_assert(offsetof(FNewsUIData, NewsInfo) == 0x000000, "Member 'FNewsUIData::NewsInfo' has a wrong offset!");
static_assert(offsetof(FNewsUIData, NewsDynamicImage) == 0x000098, "Member 'FNewsUIData::NewsDynamicImage' has a wrong offset!");

// ScriptStruct Flame.InputNetworkDistributionRow
// 0x0018 (0x0020 - 0x0008)
struct FInputNetworkDistributionRow final : public FTableRowBase
{
public:
	bool                                          Client;                                            // 0x0008(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Server;                                            // 0x0009(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Proxy;                                             // 0x000A(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_B[0x5];                                        // 0x000B(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 Reason;                                            // 0x0010(0x0010)(Edit, ZeroConstructor, DisableEditOnInstance, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FInputNetworkDistributionRow) == 0x000008, "Wrong alignment on FInputNetworkDistributionRow");
static_assert(sizeof(FInputNetworkDistributionRow) == 0x000020, "Wrong size on FInputNetworkDistributionRow");
static_assert(offsetof(FInputNetworkDistributionRow, Client) == 0x000008, "Member 'FInputNetworkDistributionRow::Client' has a wrong offset!");
static_assert(offsetof(FInputNetworkDistributionRow, Server) == 0x000009, "Member 'FInputNetworkDistributionRow::Server' has a wrong offset!");
static_assert(offsetof(FInputNetworkDistributionRow, Proxy) == 0x00000A, "Member 'FInputNetworkDistributionRow::Proxy' has a wrong offset!");
static_assert(offsetof(FInputNetworkDistributionRow, Reason) == 0x000010, "Member 'FInputNetworkDistributionRow::Reason' has a wrong offset!");

// ScriptStruct Flame.InputRuleRow
// 0x0018 (0x0058 - 0x0040)
struct FInputRuleRow final : public FClassTableRowWithDisplayName
{
public:
	EInputRule                                    Sprint;                                            // 0x0040(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EInputRule                                    Stand;                                             // 0x0041(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EInputRule                                    Crouch;                                            // 0x0042(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EInputRule                                    Prone;                                             // 0x0043(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EInputRule                                    Jump;                                              // 0x0044(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EInputRule                                    Fire;                                              // 0x0045(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EInputRule                                    Reload;                                            // 0x0046(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EInputRule                                    Holster;                                           // 0x0047(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EInputRule                                    ChangeFireMode;                                    // 0x0048(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EInputRule                                    Switch;                                            // 0x0049(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EInputRule                                    Menu;                                              // 0x004A(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EInputRule                                    Use;                                               // 0x004B(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EInputRule                                    QuickMelee;                                        // 0x004C(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EInputRule                                    Chamber;                                           // 0x004D(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EInputRule                                    Gesture;                                           // 0x004E(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EInputRule                                    Interact;                                          // 0x004F(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EInputRule                                    ThrowableAiming;                                   // 0x0050(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_51[0x7];                                       // 0x0051(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FInputRuleRow) == 0x000008, "Wrong alignment on FInputRuleRow");
static_assert(sizeof(FInputRuleRow) == 0x000058, "Wrong size on FInputRuleRow");
static_assert(offsetof(FInputRuleRow, Sprint) == 0x000040, "Member 'FInputRuleRow::Sprint' has a wrong offset!");
static_assert(offsetof(FInputRuleRow, Stand) == 0x000041, "Member 'FInputRuleRow::Stand' has a wrong offset!");
static_assert(offsetof(FInputRuleRow, Crouch) == 0x000042, "Member 'FInputRuleRow::Crouch' has a wrong offset!");
static_assert(offsetof(FInputRuleRow, Prone) == 0x000043, "Member 'FInputRuleRow::Prone' has a wrong offset!");
static_assert(offsetof(FInputRuleRow, Jump) == 0x000044, "Member 'FInputRuleRow::Jump' has a wrong offset!");
static_assert(offsetof(FInputRuleRow, Fire) == 0x000045, "Member 'FInputRuleRow::Fire' has a wrong offset!");
static_assert(offsetof(FInputRuleRow, Reload) == 0x000046, "Member 'FInputRuleRow::Reload' has a wrong offset!");
static_assert(offsetof(FInputRuleRow, Holster) == 0x000047, "Member 'FInputRuleRow::Holster' has a wrong offset!");
static_assert(offsetof(FInputRuleRow, ChangeFireMode) == 0x000048, "Member 'FInputRuleRow::ChangeFireMode' has a wrong offset!");
static_assert(offsetof(FInputRuleRow, Switch) == 0x000049, "Member 'FInputRuleRow::Switch' has a wrong offset!");
static_assert(offsetof(FInputRuleRow, Menu) == 0x00004A, "Member 'FInputRuleRow::Menu' has a wrong offset!");
static_assert(offsetof(FInputRuleRow, Use) == 0x00004B, "Member 'FInputRuleRow::Use' has a wrong offset!");
static_assert(offsetof(FInputRuleRow, QuickMelee) == 0x00004C, "Member 'FInputRuleRow::QuickMelee' has a wrong offset!");
static_assert(offsetof(FInputRuleRow, Chamber) == 0x00004D, "Member 'FInputRuleRow::Chamber' has a wrong offset!");
static_assert(offsetof(FInputRuleRow, Gesture) == 0x00004E, "Member 'FInputRuleRow::Gesture' has a wrong offset!");
static_assert(offsetof(FInputRuleRow, Interact) == 0x00004F, "Member 'FInputRuleRow::Interact' has a wrong offset!");
static_assert(offsetof(FInputRuleRow, ThrowableAiming) == 0x000050, "Member 'FInputRuleRow::ThrowableAiming' has a wrong offset!");

// ScriptStruct Flame.InteriorStaticMeshMaterialParameter
// 0x0010 (0x0010 - 0x0000)
struct FInteriorStaticMeshMaterialParameter final
{
public:
	class UMaterialInterface*                     MaterialInterface;                                 // 0x0000(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         SlotNameHash;                                      // 0x0008(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         SlotIndex;                                         // 0x000C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FInteriorStaticMeshMaterialParameter) == 0x000008, "Wrong alignment on FInteriorStaticMeshMaterialParameter");
static_assert(sizeof(FInteriorStaticMeshMaterialParameter) == 0x000010, "Wrong size on FInteriorStaticMeshMaterialParameter");
static_assert(offsetof(FInteriorStaticMeshMaterialParameter, MaterialInterface) == 0x000000, "Member 'FInteriorStaticMeshMaterialParameter::MaterialInterface' has a wrong offset!");
static_assert(offsetof(FInteriorStaticMeshMaterialParameter, SlotNameHash) == 0x000008, "Member 'FInteriorStaticMeshMaterialParameter::SlotNameHash' has a wrong offset!");
static_assert(offsetof(FInteriorStaticMeshMaterialParameter, SlotIndex) == 0x00000C, "Member 'FInteriorStaticMeshMaterialParameter::SlotIndex' has a wrong offset!");

// ScriptStruct Flame.InteriorStaticMesh
// 0x0060 (0x0060 - 0x0000)
struct FInteriorStaticMesh final
{
public:
	struct FTransform                             Transform;                                         // 0x0000(0x0030)(Edit, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          bMeshFlipped;                                      // 0x0030(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_31[0x7];                                       // 0x0031(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UStaticMesh*                            Mesh;                                              // 0x0038(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FInteriorStaticMeshMaterialParameter> Materials;                                         // 0x0040(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	EDetailMode                                   DetailMode;                                        // 0x0050(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_51[0xF];                                       // 0x0051(0x000F)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FInteriorStaticMesh) == 0x000010, "Wrong alignment on FInteriorStaticMesh");
static_assert(sizeof(FInteriorStaticMesh) == 0x000060, "Wrong size on FInteriorStaticMesh");
static_assert(offsetof(FInteriorStaticMesh, Transform) == 0x000000, "Member 'FInteriorStaticMesh::Transform' has a wrong offset!");
static_assert(offsetof(FInteriorStaticMesh, bMeshFlipped) == 0x000030, "Member 'FInteriorStaticMesh::bMeshFlipped' has a wrong offset!");
static_assert(offsetof(FInteriorStaticMesh, Mesh) == 0x000038, "Member 'FInteriorStaticMesh::Mesh' has a wrong offset!");
static_assert(offsetof(FInteriorStaticMesh, Materials) == 0x000040, "Member 'FInteriorStaticMesh::Materials' has a wrong offset!");
static_assert(offsetof(FInteriorStaticMesh, DetailMode) == 0x000050, "Member 'FInteriorStaticMesh::DetailMode' has a wrong offset!");

// ScriptStruct Flame.CanStoreResult
// 0x0002 (0x0002 - 0x0000)
struct FCanStoreResult final
{
public:
	bool                                          bResult;                                           // 0x0000(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EInvalidResultReason                          Reason;                                            // 0x0001(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FCanStoreResult) == 0x000001, "Wrong alignment on FCanStoreResult");
static_assert(sizeof(FCanStoreResult) == 0x000002, "Wrong size on FCanStoreResult");
static_assert(offsetof(FCanStoreResult, bResult) == 0x000000, "Member 'FCanStoreResult::bResult' has a wrong offset!");
static_assert(offsetof(FCanStoreResult, Reason) == 0x000001, "Member 'FCanStoreResult::Reason' has a wrong offset!");

// ScriptStruct Flame.TorsoPars
// 0x0030 (0x0030 - 0x0000)
struct alignas(0x08) FTorsoPars final
{
public:
	uint8                                         Pad_0[0x30];                                       // 0x0000(0x0030)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FTorsoPars) == 0x000008, "Wrong alignment on FTorsoPars");
static_assert(sizeof(FTorsoPars) == 0x000030, "Wrong size on FTorsoPars");

// ScriptStruct Flame.InventoryOperationContext
// 0x0008 (0x0008 - 0x0000)
struct FInventoryOperationContext final
{
public:
	EInventoryView                                View;                                              // 0x0000(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EInputIcon                                    InputAction;                                       // 0x0001(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2[0x2];                                        // 0x0002(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Count;                                             // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FInventoryOperationContext) == 0x000004, "Wrong alignment on FInventoryOperationContext");
static_assert(sizeof(FInventoryOperationContext) == 0x000008, "Wrong size on FInventoryOperationContext");
static_assert(offsetof(FInventoryOperationContext, View) == 0x000000, "Member 'FInventoryOperationContext::View' has a wrong offset!");
static_assert(offsetof(FInventoryOperationContext, InputAction) == 0x000001, "Member 'FInventoryOperationContext::InputAction' has a wrong offset!");
static_assert(offsetof(FInventoryOperationContext, Count) == 0x000004, "Member 'FInventoryOperationContext::Count' has a wrong offset!");

// ScriptStruct Flame.LabelsList
// 0x0038 (0x0040 - 0x0008)
struct FLabelsList final : public FTableRowBase
{
public:
	class FText                                   Text;                                              // 0x0008(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NativeAccessSpecifierPublic)
	struct FLinearColor                           ForegroundColor;                                   // 0x0020(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           BackgroundColor;                                   // 0x0030(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FLabelsList) == 0x000008, "Wrong alignment on FLabelsList");
static_assert(sizeof(FLabelsList) == 0x000040, "Wrong size on FLabelsList");
static_assert(offsetof(FLabelsList, Text) == 0x000008, "Member 'FLabelsList::Text' has a wrong offset!");
static_assert(offsetof(FLabelsList, ForegroundColor) == 0x000020, "Member 'FLabelsList::ForegroundColor' has a wrong offset!");
static_assert(offsetof(FLabelsList, BackgroundColor) == 0x000030, "Member 'FLabelsList::BackgroundColor' has a wrong offset!");

// ScriptStruct Flame.LeaderboardMonitorWriteCall
// 0x0018 (0x0018 - 0x0000)
struct FLeaderboardMonitorWriteCall final
{
public:
	struct FDateTime                              Time;                                              // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   BoardName;                                         // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         PlayerValue;                                       // 0x0010(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FLeaderboardMonitorWriteCall) == 0x000008, "Wrong alignment on FLeaderboardMonitorWriteCall");
static_assert(sizeof(FLeaderboardMonitorWriteCall) == 0x000018, "Wrong size on FLeaderboardMonitorWriteCall");
static_assert(offsetof(FLeaderboardMonitorWriteCall, Time) == 0x000000, "Member 'FLeaderboardMonitorWriteCall::Time' has a wrong offset!");
static_assert(offsetof(FLeaderboardMonitorWriteCall, BoardName) == 0x000008, "Member 'FLeaderboardMonitorWriteCall::BoardName' has a wrong offset!");
static_assert(offsetof(FLeaderboardMonitorWriteCall, PlayerValue) == 0x000010, "Member 'FLeaderboardMonitorWriteCall::PlayerValue' has a wrong offset!");

// ScriptStruct Flame.StartLoopEnd
// 0x0018 (0x0018 - 0x0000)
struct FStartLoopEnd final
{
public:
	class UAnimSequence*                          Start;                                             // 0x0000(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAnimSequence*                          Loop;                                              // 0x0008(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAnimSequence*                          End;                                               // 0x0010(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FStartLoopEnd) == 0x000008, "Wrong alignment on FStartLoopEnd");
static_assert(sizeof(FStartLoopEnd) == 0x000018, "Wrong size on FStartLoopEnd");
static_assert(offsetof(FStartLoopEnd, Start) == 0x000000, "Member 'FStartLoopEnd::Start' has a wrong offset!");
static_assert(offsetof(FStartLoopEnd, Loop) == 0x000008, "Member 'FStartLoopEnd::Loop' has a wrong offset!");
static_assert(offsetof(FStartLoopEnd, End) == 0x000010, "Member 'FStartLoopEnd::End' has a wrong offset!");

// ScriptStruct Flame.LeaderboardMonitorReadCall
// 0x0020 (0x0020 - 0x0000)
struct FLeaderboardMonitorReadCall final
{
public:
	struct FDateTime                              Time;                                              // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLeaderboardReadContext                Context;                                           // 0x0008(0x0014)(BlueprintVisible, BlueprintReadOnly, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FLeaderboardMonitorReadCall) == 0x000008, "Wrong alignment on FLeaderboardMonitorReadCall");
static_assert(sizeof(FLeaderboardMonitorReadCall) == 0x000020, "Wrong size on FLeaderboardMonitorReadCall");
static_assert(offsetof(FLeaderboardMonitorReadCall, Time) == 0x000000, "Member 'FLeaderboardMonitorReadCall::Time' has a wrong offset!");
static_assert(offsetof(FLeaderboardMonitorReadCall, Context) == 0x000008, "Member 'FLeaderboardMonitorReadCall::Context' has a wrong offset!");

// ScriptStruct Flame.LeaderboardStatTranslation
// 0x0008 (0x0010 - 0x0008)
struct FLeaderboardStatTranslation final : public FTableRowBase
{
public:
	class FName                                   XboxName;                                          // 0x0008(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FLeaderboardStatTranslation) == 0x000008, "Wrong alignment on FLeaderboardStatTranslation");
static_assert(sizeof(FLeaderboardStatTranslation) == 0x000010, "Wrong size on FLeaderboardStatTranslation");
static_assert(offsetof(FLeaderboardStatTranslation, XboxName) == 0x000008, "Member 'FLeaderboardStatTranslation::XboxName' has a wrong offset!");

// ScriptStruct Flame.LevelList
// 0x0088 (0x0090 - 0x0008)
struct FLevelList final : public FTableRowBase
{
public:
	TMap<TSoftClassPtr<class UClass>, struct FSubLevel> GameMode;                                          // 0x0008(0x0050)(Edit, BlueprintVisible, DisableEditOnInstance, NativeAccessSpecifierPublic)
	TArray<class FName>                           StaticLevels;                                      // 0x0058(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UTexture2D>              MapMask;                                           // 0x0068(0x0028)(Edit, BlueprintVisible, DisableEditOnInstance, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FLevelList) == 0x000008, "Wrong alignment on FLevelList");
static_assert(sizeof(FLevelList) == 0x000090, "Wrong size on FLevelList");
static_assert(offsetof(FLevelList, GameMode) == 0x000008, "Member 'FLevelList::GameMode' has a wrong offset!");
static_assert(offsetof(FLevelList, StaticLevels) == 0x000058, "Member 'FLevelList::StaticLevels' has a wrong offset!");
static_assert(offsetof(FLevelList, MapMask) == 0x000068, "Member 'FLevelList::MapMask' has a wrong offset!");

// ScriptStruct Flame.FireMode
// 0x0008 (0x0008 - 0x0000)
struct FFireMode final
{
public:
	EWeaponFireType                               FireModeType;                                      // 0x0000(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         AmmoCost;                                          // 0x0004(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FFireMode) == 0x000004, "Wrong alignment on FFireMode");
static_assert(sizeof(FFireMode) == 0x000008, "Wrong size on FFireMode");
static_assert(offsetof(FFireMode, FireModeType) == 0x000000, "Member 'FFireMode::FireModeType' has a wrong offset!");
static_assert(offsetof(FFireMode, AmmoCost) == 0x000004, "Member 'FFireMode::AmmoCost' has a wrong offset!");

// ScriptStruct Flame.FirearmWeaponConfiguration
// 0x02F8 (0x0418 - 0x0120)
struct FFirearmWeaponConfiguration final : public FItemClassTableRowWithInsurance
{
public:
	TSubclassOf<class AWeapon>                    Class;                                             // 0x0120(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EWeaponType                                   WeaponType;                                        // 0x0128(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EWeaponInventoryType                          InventoryType;                                     // 0x0129(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_12A[0x2];                                      // 0x012A(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Ergonomic;                                         // 0x012C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         BaseDamage;                                        // 0x0130(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Penetration;                                       // 0x0134(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         InitialSpeed;                                      // 0x0138(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_13C[0x4];                                      // 0x013C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UCurveDamageOverDistance*               DamageOverDistance;                                // 0x0140(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<float>                                 RecoilSequence;                                    // 0x0148(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic)
	float                                         AbsoluteVerticalRecoil;                            // 0x0158(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         RandomHorizontalRecoil;                            // 0x015C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         RecoilDisplacementSpeed;                           // 0x0160(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         RecoilAxisMultiplierStand;                         // 0x0164(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         RecoilAxisMultiplierCrouch;                        // 0x0168(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         RecoilAxisMultiplierProne;                         // 0x016C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         RecoilReturnSpeed;                                 // 0x0170(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_174[0x4];                                      // 0x0174(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TSubclassOf<class UCameraShakeBase>           RecoilFireCameraShakeClass;                        // 0x0178(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<float>                                 SpreadSequence;                                    // 0x0180(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic)
	float                                         SpreadBase;                                        // 0x0190(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SpreadMax;                                         // 0x0194(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SpreadRotation;                                    // 0x0198(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SpreadAim;                                         // 0x019C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SpreadAim1P;                                       // 0x01A0(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SpreadJump;                                        // 0x01A4(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SpreadVault;                                       // 0x01A8(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SpreadMove;                                        // 0x01AC(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SpreadCrouch;                                      // 0x01B0(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SpreadProne;                                       // 0x01B4(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SpreadCooldownTimeSec;                             // 0x01B8(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ESpreadType                                   SpreadType;                                        // 0x01BC(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1BD[0x3];                                      // 0x01BD(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Mean;                                              // 0x01C0(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         StandardDeviation;                                 // 0x01C4(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         RateOfFire;                                        // 0x01C8(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MagazineCount;                                     // 0x01CC(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ChamberCount;                                      // 0x01D0(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1D4[0x4];                                      // 0x01D4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TSubclassOf<class AAmmoItem>                  AmmoItemClass;                                     // 0x01D8(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ReloadTimeFull;                                    // 0x01E0(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ReloadTimeEmpty;                                   // 0x01E4(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReloadCount;                                       // 0x01E8(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          CanFireDuringReload;                               // 0x01EC(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bFullReloadWhenEmpty;                              // 0x01ED(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bShouldChamberAfterReload;                         // 0x01EE(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          AutoChamberRound;                                  // 0x01EF(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSubclassOf<class UWeaponStateReload>         ReloadStateClass;                                  // 0x01F0(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSubclassOf<class UWeaponStateChamberRound>   ChamberStateClass;                                 // 0x01F8(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FDataTableRowHandle                    Sight;                                             // 0x0200(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NoDestructor, NativeAccessSpecifierPublic)
	EOpticsType                                   OpticsType;                                        // 0x0210(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_211[0x3];                                      // 0x0211(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector2D                              SwayExtent;                                        // 0x0214(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SwayModifierStand;                                 // 0x021C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SwayModifierCrouch;                                // 0x0220(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SwayModifierProne;                                 // 0x0224(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FCharacterSwayParameters               HoldBreathParameters;                              // 0x0228(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NoDestructor, NativeAccessSpecifierPublic)
	struct FVector2D                              SwaySpeed;                                         // 0x0240(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          SwayCamera;                                        // 0x0248(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_249[0x3];                                      // 0x0249(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector2D                              SwayMovementMultiplier;                            // 0x024C(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                SwayMovementRollProperties;                        // 0x0254(0x000C)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                SwayMovementPitchProperties;                       // 0x0260(0x000C)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SwayMovementOffset;                                // 0x026C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SwayLocationMultiplier;                            // 0x0270(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ADSCrosshairEnabled;                               // 0x0274(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ADSAllowedInStand;                                 // 0x0275(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ADSAllowedInCrouch;                                // 0x0276(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ADSAllowedInProne;                                 // 0x0277(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          FPADSAllowedInStand;                               // 0x0278(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          FPADSAllowedInCrouch;                              // 0x0279(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          FPADSAllowedInProne;                               // 0x027A(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_27B[0x1];                                      // 0x027B(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         MisalignRate;                                      // 0x027C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MisalignSize;                                      // 0x0280(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MisalignVerticalCoefficient;                       // 0x0284(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FDataTableRowHandle                    AimAssistSettings;                                 // 0x0288(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NoDestructor, NativeAccessSpecifierPublic)
	struct FDataTableRowHandle                    MeleeSettings;                                     // 0x0298(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NoDestructor, NativeAccessSpecifierPublic)
	TArray<struct FFireMode>                      FireModes;                                         // 0x02A8(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic)
	TSubclassOf<class AProjectileTracer>          TracerClass;                                       // 0x02B8(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         TracersEvery;                                      // 0x02C0(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         LastRoundsTracer;                                  // 0x02C4(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UParticleSystem*                        FirePartricles;                                    // 0x02C8(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UParticleSystem*                        CasingPartricles;                                  // 0x02D0(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UParticleSystem*                        BeltParticles;                                     // 0x02D8(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UForceFeedbackEffect*                   FireForceFeedback;                                 // 0x02E0(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsSuppresed;                                      // 0x02E8(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsHeavy;                                          // 0x02E9(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bCanStun;                                          // 0x02EA(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2EB[0x1];                                      // 0x02EB(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CraftingBoosterPrice;                              // 0x02EC(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FDataTableRowHandle                    WeaponAnimations;                                  // 0x02F0(0x0010)(Edit, NoDestructor, NativeAccessSpecifierPublic)
	struct FDataTableRowHandle                    FireModeSounds;                                    // 0x0300(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_310[0x108];                                    // 0x0310(0x0108)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FFirearmWeaponConfiguration) == 0x000008, "Wrong alignment on FFirearmWeaponConfiguration");
static_assert(sizeof(FFirearmWeaponConfiguration) == 0x000418, "Wrong size on FFirearmWeaponConfiguration");
static_assert(offsetof(FFirearmWeaponConfiguration, Class) == 0x000120, "Member 'FFirearmWeaponConfiguration::Class' has a wrong offset!");
static_assert(offsetof(FFirearmWeaponConfiguration, WeaponType) == 0x000128, "Member 'FFirearmWeaponConfiguration::WeaponType' has a wrong offset!");
static_assert(offsetof(FFirearmWeaponConfiguration, InventoryType) == 0x000129, "Member 'FFirearmWeaponConfiguration::InventoryType' has a wrong offset!");
static_assert(offsetof(FFirearmWeaponConfiguration, Ergonomic) == 0x00012C, "Member 'FFirearmWeaponConfiguration::Ergonomic' has a wrong offset!");
static_assert(offsetof(FFirearmWeaponConfiguration, BaseDamage) == 0x000130, "Member 'FFirearmWeaponConfiguration::BaseDamage' has a wrong offset!");
static_assert(offsetof(FFirearmWeaponConfiguration, Penetration) == 0x000134, "Member 'FFirearmWeaponConfiguration::Penetration' has a wrong offset!");
static_assert(offsetof(FFirearmWeaponConfiguration, InitialSpeed) == 0x000138, "Member 'FFirearmWeaponConfiguration::InitialSpeed' has a wrong offset!");
static_assert(offsetof(FFirearmWeaponConfiguration, DamageOverDistance) == 0x000140, "Member 'FFirearmWeaponConfiguration::DamageOverDistance' has a wrong offset!");
static_assert(offsetof(FFirearmWeaponConfiguration, RecoilSequence) == 0x000148, "Member 'FFirearmWeaponConfiguration::RecoilSequence' has a wrong offset!");
static_assert(offsetof(FFirearmWeaponConfiguration, AbsoluteVerticalRecoil) == 0x000158, "Member 'FFirearmWeaponConfiguration::AbsoluteVerticalRecoil' has a wrong offset!");
static_assert(offsetof(FFirearmWeaponConfiguration, RandomHorizontalRecoil) == 0x00015C, "Member 'FFirearmWeaponConfiguration::RandomHorizontalRecoil' has a wrong offset!");
static_assert(offsetof(FFirearmWeaponConfiguration, RecoilDisplacementSpeed) == 0x000160, "Member 'FFirearmWeaponConfiguration::RecoilDisplacementSpeed' has a wrong offset!");
static_assert(offsetof(FFirearmWeaponConfiguration, RecoilAxisMultiplierStand) == 0x000164, "Member 'FFirearmWeaponConfiguration::RecoilAxisMultiplierStand' has a wrong offset!");
static_assert(offsetof(FFirearmWeaponConfiguration, RecoilAxisMultiplierCrouch) == 0x000168, "Member 'FFirearmWeaponConfiguration::RecoilAxisMultiplierCrouch' has a wrong offset!");
static_assert(offsetof(FFirearmWeaponConfiguration, RecoilAxisMultiplierProne) == 0x00016C, "Member 'FFirearmWeaponConfiguration::RecoilAxisMultiplierProne' has a wrong offset!");
static_assert(offsetof(FFirearmWeaponConfiguration, RecoilReturnSpeed) == 0x000170, "Member 'FFirearmWeaponConfiguration::RecoilReturnSpeed' has a wrong offset!");
static_assert(offsetof(FFirearmWeaponConfiguration, RecoilFireCameraShakeClass) == 0x000178, "Member 'FFirearmWeaponConfiguration::RecoilFireCameraShakeClass' has a wrong offset!");
static_assert(offsetof(FFirearmWeaponConfiguration, SpreadSequence) == 0x000180, "Member 'FFirearmWeaponConfiguration::SpreadSequence' has a wrong offset!");
static_assert(offsetof(FFirearmWeaponConfiguration, SpreadBase) == 0x000190, "Member 'FFirearmWeaponConfiguration::SpreadBase' has a wrong offset!");
static_assert(offsetof(FFirearmWeaponConfiguration, SpreadMax) == 0x000194, "Member 'FFirearmWeaponConfiguration::SpreadMax' has a wrong offset!");
static_assert(offsetof(FFirearmWeaponConfiguration, SpreadRotation) == 0x000198, "Member 'FFirearmWeaponConfiguration::SpreadRotation' has a wrong offset!");
static_assert(offsetof(FFirearmWeaponConfiguration, SpreadAim) == 0x00019C, "Member 'FFirearmWeaponConfiguration::SpreadAim' has a wrong offset!");
static_assert(offsetof(FFirearmWeaponConfiguration, SpreadAim1P) == 0x0001A0, "Member 'FFirearmWeaponConfiguration::SpreadAim1P' has a wrong offset!");
static_assert(offsetof(FFirearmWeaponConfiguration, SpreadJump) == 0x0001A4, "Member 'FFirearmWeaponConfiguration::SpreadJump' has a wrong offset!");
static_assert(offsetof(FFirearmWeaponConfiguration, SpreadVault) == 0x0001A8, "Member 'FFirearmWeaponConfiguration::SpreadVault' has a wrong offset!");
static_assert(offsetof(FFirearmWeaponConfiguration, SpreadMove) == 0x0001AC, "Member 'FFirearmWeaponConfiguration::SpreadMove' has a wrong offset!");
static_assert(offsetof(FFirearmWeaponConfiguration, SpreadCrouch) == 0x0001B0, "Member 'FFirearmWeaponConfiguration::SpreadCrouch' has a wrong offset!");
static_assert(offsetof(FFirearmWeaponConfiguration, SpreadProne) == 0x0001B4, "Member 'FFirearmWeaponConfiguration::SpreadProne' has a wrong offset!");
static_assert(offsetof(FFirearmWeaponConfiguration, SpreadCooldownTimeSec) == 0x0001B8, "Member 'FFirearmWeaponConfiguration::SpreadCooldownTimeSec' has a wrong offset!");
static_assert(offsetof(FFirearmWeaponConfiguration, SpreadType) == 0x0001BC, "Member 'FFirearmWeaponConfiguration::SpreadType' has a wrong offset!");
static_assert(offsetof(FFirearmWeaponConfiguration, Mean) == 0x0001C0, "Member 'FFirearmWeaponConfiguration::Mean' has a wrong offset!");
static_assert(offsetof(FFirearmWeaponConfiguration, StandardDeviation) == 0x0001C4, "Member 'FFirearmWeaponConfiguration::StandardDeviation' has a wrong offset!");
static_assert(offsetof(FFirearmWeaponConfiguration, RateOfFire) == 0x0001C8, "Member 'FFirearmWeaponConfiguration::RateOfFire' has a wrong offset!");
static_assert(offsetof(FFirearmWeaponConfiguration, MagazineCount) == 0x0001CC, "Member 'FFirearmWeaponConfiguration::MagazineCount' has a wrong offset!");
static_assert(offsetof(FFirearmWeaponConfiguration, ChamberCount) == 0x0001D0, "Member 'FFirearmWeaponConfiguration::ChamberCount' has a wrong offset!");
static_assert(offsetof(FFirearmWeaponConfiguration, AmmoItemClass) == 0x0001D8, "Member 'FFirearmWeaponConfiguration::AmmoItemClass' has a wrong offset!");
static_assert(offsetof(FFirearmWeaponConfiguration, ReloadTimeFull) == 0x0001E0, "Member 'FFirearmWeaponConfiguration::ReloadTimeFull' has a wrong offset!");
static_assert(offsetof(FFirearmWeaponConfiguration, ReloadTimeEmpty) == 0x0001E4, "Member 'FFirearmWeaponConfiguration::ReloadTimeEmpty' has a wrong offset!");
static_assert(offsetof(FFirearmWeaponConfiguration, ReloadCount) == 0x0001E8, "Member 'FFirearmWeaponConfiguration::ReloadCount' has a wrong offset!");
static_assert(offsetof(FFirearmWeaponConfiguration, CanFireDuringReload) == 0x0001EC, "Member 'FFirearmWeaponConfiguration::CanFireDuringReload' has a wrong offset!");
static_assert(offsetof(FFirearmWeaponConfiguration, bFullReloadWhenEmpty) == 0x0001ED, "Member 'FFirearmWeaponConfiguration::bFullReloadWhenEmpty' has a wrong offset!");
static_assert(offsetof(FFirearmWeaponConfiguration, bShouldChamberAfterReload) == 0x0001EE, "Member 'FFirearmWeaponConfiguration::bShouldChamberAfterReload' has a wrong offset!");
static_assert(offsetof(FFirearmWeaponConfiguration, AutoChamberRound) == 0x0001EF, "Member 'FFirearmWeaponConfiguration::AutoChamberRound' has a wrong offset!");
static_assert(offsetof(FFirearmWeaponConfiguration, ReloadStateClass) == 0x0001F0, "Member 'FFirearmWeaponConfiguration::ReloadStateClass' has a wrong offset!");
static_assert(offsetof(FFirearmWeaponConfiguration, ChamberStateClass) == 0x0001F8, "Member 'FFirearmWeaponConfiguration::ChamberStateClass' has a wrong offset!");
static_assert(offsetof(FFirearmWeaponConfiguration, Sight) == 0x000200, "Member 'FFirearmWeaponConfiguration::Sight' has a wrong offset!");
static_assert(offsetof(FFirearmWeaponConfiguration, OpticsType) == 0x000210, "Member 'FFirearmWeaponConfiguration::OpticsType' has a wrong offset!");
static_assert(offsetof(FFirearmWeaponConfiguration, SwayExtent) == 0x000214, "Member 'FFirearmWeaponConfiguration::SwayExtent' has a wrong offset!");
static_assert(offsetof(FFirearmWeaponConfiguration, SwayModifierStand) == 0x00021C, "Member 'FFirearmWeaponConfiguration::SwayModifierStand' has a wrong offset!");
static_assert(offsetof(FFirearmWeaponConfiguration, SwayModifierCrouch) == 0x000220, "Member 'FFirearmWeaponConfiguration::SwayModifierCrouch' has a wrong offset!");
static_assert(offsetof(FFirearmWeaponConfiguration, SwayModifierProne) == 0x000224, "Member 'FFirearmWeaponConfiguration::SwayModifierProne' has a wrong offset!");
static_assert(offsetof(FFirearmWeaponConfiguration, HoldBreathParameters) == 0x000228, "Member 'FFirearmWeaponConfiguration::HoldBreathParameters' has a wrong offset!");
static_assert(offsetof(FFirearmWeaponConfiguration, SwaySpeed) == 0x000240, "Member 'FFirearmWeaponConfiguration::SwaySpeed' has a wrong offset!");
static_assert(offsetof(FFirearmWeaponConfiguration, SwayCamera) == 0x000248, "Member 'FFirearmWeaponConfiguration::SwayCamera' has a wrong offset!");
static_assert(offsetof(FFirearmWeaponConfiguration, SwayMovementMultiplier) == 0x00024C, "Member 'FFirearmWeaponConfiguration::SwayMovementMultiplier' has a wrong offset!");
static_assert(offsetof(FFirearmWeaponConfiguration, SwayMovementRollProperties) == 0x000254, "Member 'FFirearmWeaponConfiguration::SwayMovementRollProperties' has a wrong offset!");
static_assert(offsetof(FFirearmWeaponConfiguration, SwayMovementPitchProperties) == 0x000260, "Member 'FFirearmWeaponConfiguration::SwayMovementPitchProperties' has a wrong offset!");
static_assert(offsetof(FFirearmWeaponConfiguration, SwayMovementOffset) == 0x00026C, "Member 'FFirearmWeaponConfiguration::SwayMovementOffset' has a wrong offset!");
static_assert(offsetof(FFirearmWeaponConfiguration, SwayLocationMultiplier) == 0x000270, "Member 'FFirearmWeaponConfiguration::SwayLocationMultiplier' has a wrong offset!");
static_assert(offsetof(FFirearmWeaponConfiguration, ADSCrosshairEnabled) == 0x000274, "Member 'FFirearmWeaponConfiguration::ADSCrosshairEnabled' has a wrong offset!");
static_assert(offsetof(FFirearmWeaponConfiguration, ADSAllowedInStand) == 0x000275, "Member 'FFirearmWeaponConfiguration::ADSAllowedInStand' has a wrong offset!");
static_assert(offsetof(FFirearmWeaponConfiguration, ADSAllowedInCrouch) == 0x000276, "Member 'FFirearmWeaponConfiguration::ADSAllowedInCrouch' has a wrong offset!");
static_assert(offsetof(FFirearmWeaponConfiguration, ADSAllowedInProne) == 0x000277, "Member 'FFirearmWeaponConfiguration::ADSAllowedInProne' has a wrong offset!");
static_assert(offsetof(FFirearmWeaponConfiguration, FPADSAllowedInStand) == 0x000278, "Member 'FFirearmWeaponConfiguration::FPADSAllowedInStand' has a wrong offset!");
static_assert(offsetof(FFirearmWeaponConfiguration, FPADSAllowedInCrouch) == 0x000279, "Member 'FFirearmWeaponConfiguration::FPADSAllowedInCrouch' has a wrong offset!");
static_assert(offsetof(FFirearmWeaponConfiguration, FPADSAllowedInProne) == 0x00027A, "Member 'FFirearmWeaponConfiguration::FPADSAllowedInProne' has a wrong offset!");
static_assert(offsetof(FFirearmWeaponConfiguration, MisalignRate) == 0x00027C, "Member 'FFirearmWeaponConfiguration::MisalignRate' has a wrong offset!");
static_assert(offsetof(FFirearmWeaponConfiguration, MisalignSize) == 0x000280, "Member 'FFirearmWeaponConfiguration::MisalignSize' has a wrong offset!");
static_assert(offsetof(FFirearmWeaponConfiguration, MisalignVerticalCoefficient) == 0x000284, "Member 'FFirearmWeaponConfiguration::MisalignVerticalCoefficient' has a wrong offset!");
static_assert(offsetof(FFirearmWeaponConfiguration, AimAssistSettings) == 0x000288, "Member 'FFirearmWeaponConfiguration::AimAssistSettings' has a wrong offset!");
static_assert(offsetof(FFirearmWeaponConfiguration, MeleeSettings) == 0x000298, "Member 'FFirearmWeaponConfiguration::MeleeSettings' has a wrong offset!");
static_assert(offsetof(FFirearmWeaponConfiguration, FireModes) == 0x0002A8, "Member 'FFirearmWeaponConfiguration::FireModes' has a wrong offset!");
static_assert(offsetof(FFirearmWeaponConfiguration, TracerClass) == 0x0002B8, "Member 'FFirearmWeaponConfiguration::TracerClass' has a wrong offset!");
static_assert(offsetof(FFirearmWeaponConfiguration, TracersEvery) == 0x0002C0, "Member 'FFirearmWeaponConfiguration::TracersEvery' has a wrong offset!");
static_assert(offsetof(FFirearmWeaponConfiguration, LastRoundsTracer) == 0x0002C4, "Member 'FFirearmWeaponConfiguration::LastRoundsTracer' has a wrong offset!");
static_assert(offsetof(FFirearmWeaponConfiguration, FirePartricles) == 0x0002C8, "Member 'FFirearmWeaponConfiguration::FirePartricles' has a wrong offset!");
static_assert(offsetof(FFirearmWeaponConfiguration, CasingPartricles) == 0x0002D0, "Member 'FFirearmWeaponConfiguration::CasingPartricles' has a wrong offset!");
static_assert(offsetof(FFirearmWeaponConfiguration, BeltParticles) == 0x0002D8, "Member 'FFirearmWeaponConfiguration::BeltParticles' has a wrong offset!");
static_assert(offsetof(FFirearmWeaponConfiguration, FireForceFeedback) == 0x0002E0, "Member 'FFirearmWeaponConfiguration::FireForceFeedback' has a wrong offset!");
static_assert(offsetof(FFirearmWeaponConfiguration, bIsSuppresed) == 0x0002E8, "Member 'FFirearmWeaponConfiguration::bIsSuppresed' has a wrong offset!");
static_assert(offsetof(FFirearmWeaponConfiguration, bIsHeavy) == 0x0002E9, "Member 'FFirearmWeaponConfiguration::bIsHeavy' has a wrong offset!");
static_assert(offsetof(FFirearmWeaponConfiguration, bCanStun) == 0x0002EA, "Member 'FFirearmWeaponConfiguration::bCanStun' has a wrong offset!");
static_assert(offsetof(FFirearmWeaponConfiguration, CraftingBoosterPrice) == 0x0002EC, "Member 'FFirearmWeaponConfiguration::CraftingBoosterPrice' has a wrong offset!");
static_assert(offsetof(FFirearmWeaponConfiguration, WeaponAnimations) == 0x0002F0, "Member 'FFirearmWeaponConfiguration::WeaponAnimations' has a wrong offset!");
static_assert(offsetof(FFirearmWeaponConfiguration, FireModeSounds) == 0x000300, "Member 'FFirearmWeaponConfiguration::FireModeSounds' has a wrong offset!");

// ScriptStruct Flame.LootBoxList
// 0x0010 (0x0128 - 0x0118)
struct FLootBoxList final : public FItemClassTableRow
{
public:
	TSubclassOf<class AItem>                      Class;                                             // 0x0118(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         PoolSize;                                          // 0x0120(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MaterialCost;                                      // 0x0124(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FLootBoxList) == 0x000008, "Wrong alignment on FLootBoxList");
static_assert(sizeof(FLootBoxList) == 0x000128, "Wrong size on FLootBoxList");
static_assert(offsetof(FLootBoxList, Class) == 0x000118, "Member 'FLootBoxList::Class' has a wrong offset!");
static_assert(offsetof(FLootBoxList, PoolSize) == 0x000120, "Member 'FLootBoxList::PoolSize' has a wrong offset!");
static_assert(offsetof(FLootBoxList, MaterialCost) == 0x000124, "Member 'FLootBoxList::MaterialCost' has a wrong offset!");

// ScriptStruct Flame.GestureSFXConfig
// 0x0028 (0x0028 - 0x0000)
struct FGestureSFXConfig final
{
public:
	class UObject*                                Object;                                            // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USoundBase*                             Sound;                                             // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                Location;                                          // 0x0010(0x000C)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         VolumeMultiplier;                                  // 0x001C(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         PitchMultiplier;                                   // 0x0020(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_24[0x4];                                       // 0x0024(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FGestureSFXConfig) == 0x000008, "Wrong alignment on FGestureSFXConfig");
static_assert(sizeof(FGestureSFXConfig) == 0x000028, "Wrong size on FGestureSFXConfig");
static_assert(offsetof(FGestureSFXConfig, Object) == 0x000000, "Member 'FGestureSFXConfig::Object' has a wrong offset!");
static_assert(offsetof(FGestureSFXConfig, Sound) == 0x000008, "Member 'FGestureSFXConfig::Sound' has a wrong offset!");
static_assert(offsetof(FGestureSFXConfig, Location) == 0x000010, "Member 'FGestureSFXConfig::Location' has a wrong offset!");
static_assert(offsetof(FGestureSFXConfig, VolumeMultiplier) == 0x00001C, "Member 'FGestureSFXConfig::VolumeMultiplier' has a wrong offset!");
static_assert(offsetof(FGestureSFXConfig, PitchMultiplier) == 0x000020, "Member 'FGestureSFXConfig::PitchMultiplier' has a wrong offset!");

// ScriptStruct Flame.MusicTrackRow
// 0x0080 (0x0088 - 0x0008)
struct FMusicTrackRow final : public FTableRowBase
{
public:
	class FText                                   TrackName;                                         // 0x0008(0x0018)(Edit, BlueprintVisible, DisableEditOnInstance, NativeAccessSpecifierPublic)
	class FText                                   AuthorName;                                        // 0x0020(0x0018)(Edit, BlueprintVisible, DisableEditOnInstance, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class USoundWave>              Track;                                             // 0x0038(0x0028)(Edit, BlueprintVisible, DisableEditOnInstance, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TrackDuration;                                     // 0x0060(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Unlocked;                                          // 0x0064(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          VisibleWhenLocked;                                 // 0x0065(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_66[0x2];                                       // 0x0066(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	TSubclassOf<class ACollectibleItem>           CollectibleItemClass;                              // 0x0068(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         RequiredShelterLevel;                              // 0x0070(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_74[0x4];                                       // 0x0074(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UTexture2D*                             TrackImage;                                        // 0x0078(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Version;                                           // 0x0080(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ESublevelTheme                                HolidayThemeMusic;                                 // 0x0084(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_85[0x3];                                       // 0x0085(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FMusicTrackRow) == 0x000008, "Wrong alignment on FMusicTrackRow");
static_assert(sizeof(FMusicTrackRow) == 0x000088, "Wrong size on FMusicTrackRow");
static_assert(offsetof(FMusicTrackRow, TrackName) == 0x000008, "Member 'FMusicTrackRow::TrackName' has a wrong offset!");
static_assert(offsetof(FMusicTrackRow, AuthorName) == 0x000020, "Member 'FMusicTrackRow::AuthorName' has a wrong offset!");
static_assert(offsetof(FMusicTrackRow, Track) == 0x000038, "Member 'FMusicTrackRow::Track' has a wrong offset!");
static_assert(offsetof(FMusicTrackRow, TrackDuration) == 0x000060, "Member 'FMusicTrackRow::TrackDuration' has a wrong offset!");
static_assert(offsetof(FMusicTrackRow, Unlocked) == 0x000064, "Member 'FMusicTrackRow::Unlocked' has a wrong offset!");
static_assert(offsetof(FMusicTrackRow, VisibleWhenLocked) == 0x000065, "Member 'FMusicTrackRow::VisibleWhenLocked' has a wrong offset!");
static_assert(offsetof(FMusicTrackRow, CollectibleItemClass) == 0x000068, "Member 'FMusicTrackRow::CollectibleItemClass' has a wrong offset!");
static_assert(offsetof(FMusicTrackRow, RequiredShelterLevel) == 0x000070, "Member 'FMusicTrackRow::RequiredShelterLevel' has a wrong offset!");
static_assert(offsetof(FMusicTrackRow, TrackImage) == 0x000078, "Member 'FMusicTrackRow::TrackImage' has a wrong offset!");
static_assert(offsetof(FMusicTrackRow, Version) == 0x000080, "Member 'FMusicTrackRow::Version' has a wrong offset!");
static_assert(offsetof(FMusicTrackRow, HolidayThemeMusic) == 0x000084, "Member 'FMusicTrackRow::HolidayThemeMusic' has a wrong offset!");

// ScriptStruct Flame.ObjectivesList
// 0x0010 (0x0130 - 0x0120)
struct FObjectivesList final : public FItemClassTableRowWithInsurance
{
public:
	TSubclassOf<class AObjectiveItem>             Class;                                             // 0x0120(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         StackSize;                                         // 0x0128(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         InventoryLimit;                                    // 0x012C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FObjectivesList) == 0x000008, "Wrong alignment on FObjectivesList");
static_assert(sizeof(FObjectivesList) == 0x000130, "Wrong size on FObjectivesList");
static_assert(offsetof(FObjectivesList, Class) == 0x000120, "Member 'FObjectivesList::Class' has a wrong offset!");
static_assert(offsetof(FObjectivesList, StackSize) == 0x000128, "Member 'FObjectivesList::StackSize' has a wrong offset!");
static_assert(offsetof(FObjectivesList, InventoryLimit) == 0x00012C, "Member 'FObjectivesList::InventoryLimit' has a wrong offset!");

// ScriptStruct Flame.OptionsPickerValue
// 0x0028 (0x0028 - 0x0000)
struct FOptionsPickerValue final
{
public:
	class FString                                 Value;                                             // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FText                                   DisplayName;                                       // 0x0010(0x0018)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
};
static_assert(alignof(FOptionsPickerValue) == 0x000008, "Wrong alignment on FOptionsPickerValue");
static_assert(sizeof(FOptionsPickerValue) == 0x000028, "Wrong size on FOptionsPickerValue");
static_assert(offsetof(FOptionsPickerValue, Value) == 0x000000, "Member 'FOptionsPickerValue::Value' has a wrong offset!");
static_assert(offsetof(FOptionsPickerValue, DisplayName) == 0x000010, "Member 'FOptionsPickerValue::DisplayName' has a wrong offset!");

// ScriptStruct Flame.OptionsElementValue
// 0x0030 (0x0030 - 0x0000)
struct FOptionsElementValue final
{
public:
	float                                         FloatValue;                                        // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bBoolValue;                                        // 0x0004(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         IntValue;                                          // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   NameValue;                                         // 0x000C(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 StringValue;                                       // 0x0018(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EOptionsElementValuePreference                Preference;                                        // 0x0028(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_29[0x7];                                       // 0x0029(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FOptionsElementValue) == 0x000008, "Wrong alignment on FOptionsElementValue");
static_assert(sizeof(FOptionsElementValue) == 0x000030, "Wrong size on FOptionsElementValue");
static_assert(offsetof(FOptionsElementValue, FloatValue) == 0x000000, "Member 'FOptionsElementValue::FloatValue' has a wrong offset!");
static_assert(offsetof(FOptionsElementValue, bBoolValue) == 0x000004, "Member 'FOptionsElementValue::bBoolValue' has a wrong offset!");
static_assert(offsetof(FOptionsElementValue, IntValue) == 0x000008, "Member 'FOptionsElementValue::IntValue' has a wrong offset!");
static_assert(offsetof(FOptionsElementValue, NameValue) == 0x00000C, "Member 'FOptionsElementValue::NameValue' has a wrong offset!");
static_assert(offsetof(FOptionsElementValue, StringValue) == 0x000018, "Member 'FOptionsElementValue::StringValue' has a wrong offset!");
static_assert(offsetof(FOptionsElementValue, Preference) == 0x000028, "Member 'FOptionsElementValue::Preference' has a wrong offset!");

// ScriptStruct Flame.ConsumablePartsList
// 0x0008 (0x0130 - 0x0128)
struct FConsumablePartsList final : public FPartsList
{
public:
	TSubclassOf<class AConsumablePart>            Class;                                             // 0x0128(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FConsumablePartsList) == 0x000008, "Wrong alignment on FConsumablePartsList");
static_assert(sizeof(FConsumablePartsList) == 0x000130, "Wrong size on FConsumablePartsList");
static_assert(offsetof(FConsumablePartsList, Class) == 0x000128, "Member 'FConsumablePartsList::Class' has a wrong offset!");

// ScriptStruct Flame.WeaponPartsList
// 0x0008 (0x0130 - 0x0128)
struct FWeaponPartsList final : public FPartsList
{
public:
	TSubclassOf<class AWeaponPart>                Class;                                             // 0x0128(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FWeaponPartsList) == 0x000008, "Wrong alignment on FWeaponPartsList");
static_assert(sizeof(FWeaponPartsList) == 0x000130, "Wrong size on FWeaponPartsList");
static_assert(offsetof(FWeaponPartsList, Class) == 0x000128, "Member 'FWeaponPartsList::Class' has a wrong offset!");

// ScriptStruct Flame.CommandData
// 0x0018 (0x0018 - 0x0000)
struct alignas(0x08) FCommandData final
{
public:
	uint8                                         Pad_0[0x18];                                       // 0x0000(0x0018)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FCommandData) == 0x000008, "Wrong alignment on FCommandData");
static_assert(sizeof(FCommandData) == 0x000018, "Wrong size on FCommandData");

// ScriptStruct Flame.PersistentsList
// 0x0008 (0x0128 - 0x0120)
struct FPersistentsList final : public FItemClassTableRowWithInsurance
{
public:
	TSubclassOf<class APersistentItem>            Class;                                             // 0x0120(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FPersistentsList) == 0x000008, "Wrong alignment on FPersistentsList");
static_assert(sizeof(FPersistentsList) == 0x000128, "Wrong size on FPersistentsList");
static_assert(offsetof(FPersistentsList, Class) == 0x000120, "Member 'FPersistentsList::Class' has a wrong offset!");

// ScriptStruct Flame.PingServer
// 0x0030 (0x0030 - 0x0000)
struct alignas(0x08) FPingServer final
{
public:
	uint8                                         Pad_0[0x30];                                       // 0x0000(0x0030)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FPingServer) == 0x000008, "Wrong alignment on FPingServer");
static_assert(sizeof(FPingServer) == 0x000030, "Wrong size on FPingServer");

// ScriptStruct Flame.WeaponPlansList
// 0x0028 (0x0150 - 0x0128)
struct FWeaponPlansList final : public FPlansList
{
public:
	TSubclassOf<class AWeaponPlan>                Class;                                             // 0x0128(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSubclassOf<class AWeapon>                    WeaponClass;                                       // 0x0130(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<TSubclassOf<class AWeaponPart>>        Parts;                                             // 0x0138(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, UObjectWrapper, NativeAccessSpecifierPublic)
	int32                                         BonusAmmo;                                         // 0x0148(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14C[0x4];                                      // 0x014C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FWeaponPlansList) == 0x000008, "Wrong alignment on FWeaponPlansList");
static_assert(sizeof(FWeaponPlansList) == 0x000150, "Wrong size on FWeaponPlansList");
static_assert(offsetof(FWeaponPlansList, Class) == 0x000128, "Member 'FWeaponPlansList::Class' has a wrong offset!");
static_assert(offsetof(FWeaponPlansList, WeaponClass) == 0x000130, "Member 'FWeaponPlansList::WeaponClass' has a wrong offset!");
static_assert(offsetof(FWeaponPlansList, Parts) == 0x000138, "Member 'FWeaponPlansList::Parts' has a wrong offset!");
static_assert(offsetof(FWeaponPlansList, BonusAmmo) == 0x000148, "Member 'FWeaponPlansList::BonusAmmo' has a wrong offset!");

// ScriptStruct Flame.Poisebar
// 0x0018 (0x0018 - 0x0000)
struct FPoisebar final
{
public:
	float                                         CurrentValue;                                      // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         RecoveryTimer;                                     // 0x0004(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         LastImpact;                                        // 0x0008(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         RecoveryRate;                                      // 0x000C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         RecoveryDelay;                                     // 0x0010(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         StunDelay;                                         // 0x0014(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FPoisebar) == 0x000004, "Wrong alignment on FPoisebar");
static_assert(sizeof(FPoisebar) == 0x000018, "Wrong size on FPoisebar");
static_assert(offsetof(FPoisebar, CurrentValue) == 0x000000, "Member 'FPoisebar::CurrentValue' has a wrong offset!");
static_assert(offsetof(FPoisebar, RecoveryTimer) == 0x000004, "Member 'FPoisebar::RecoveryTimer' has a wrong offset!");
static_assert(offsetof(FPoisebar, LastImpact) == 0x000008, "Member 'FPoisebar::LastImpact' has a wrong offset!");
static_assert(offsetof(FPoisebar, RecoveryRate) == 0x00000C, "Member 'FPoisebar::RecoveryRate' has a wrong offset!");
static_assert(offsetof(FPoisebar, RecoveryDelay) == 0x000010, "Member 'FPoisebar::RecoveryDelay' has a wrong offset!");
static_assert(offsetof(FPoisebar, StunDelay) == 0x000014, "Member 'FPoisebar::StunDelay' has a wrong offset!");

// ScriptStruct Flame.PoiseInfo
// 0x0004 (0x0004 - 0x0000)
struct alignas(0x04) FPoiseInfo final
{
public:
	uint8                                         Pad_0[0x4];                                        // 0x0000(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FPoiseInfo) == 0x000004, "Wrong alignment on FPoiseInfo");
static_assert(sizeof(FPoiseInfo) == 0x000004, "Wrong size on FPoiseInfo");

// ScriptStruct Flame.PremiumBattlePassTokenList
// 0x0008 (0x0018 - 0x0010)
struct FPremiumBattlePassTokenList final : public FClassTableRow
{
public:
	TSubclassOf<class APremiumBattlePassToken>    Class;                                             // 0x0010(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FPremiumBattlePassTokenList) == 0x000008, "Wrong alignment on FPremiumBattlePassTokenList");
static_assert(sizeof(FPremiumBattlePassTokenList) == 0x000018, "Wrong size on FPremiumBattlePassTokenList");
static_assert(offsetof(FPremiumBattlePassTokenList, Class) == 0x000010, "Member 'FPremiumBattlePassTokenList::Class' has a wrong offset!");

// ScriptStruct Flame.ResourceGrid
// 0x0018 (0x0018 - 0x0000)
struct FResourceGrid final
{
public:
	TArray<struct FBackpackItemSlot>              Slots;                                             // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	int32                                         RowsCount;                                         // 0x0010(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ColsCount;                                         // 0x0014(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FResourceGrid) == 0x000008, "Wrong alignment on FResourceGrid");
static_assert(sizeof(FResourceGrid) == 0x000018, "Wrong size on FResourceGrid");
static_assert(offsetof(FResourceGrid, Slots) == 0x000000, "Member 'FResourceGrid::Slots' has a wrong offset!");
static_assert(offsetof(FResourceGrid, RowsCount) == 0x000010, "Member 'FResourceGrid::RowsCount' has a wrong offset!");
static_assert(offsetof(FResourceGrid, ColsCount) == 0x000014, "Member 'FResourceGrid::ColsCount' has a wrong offset!");

// ScriptStruct Flame.WeaponSlot
// 0x0010 (0x0010 - 0x0000)
struct FWeaponSlot final
{
public:
	TSubclassOf<class AWeapon>                    ObjectType;                                        // 0x0000(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Count;                                             // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FWeaponSlot) == 0x000008, "Wrong alignment on FWeaponSlot");
static_assert(sizeof(FWeaponSlot) == 0x000010, "Wrong size on FWeaponSlot");
static_assert(offsetof(FWeaponSlot, ObjectType) == 0x000000, "Member 'FWeaponSlot::ObjectType' has a wrong offset!");
static_assert(offsetof(FWeaponSlot, Count) == 0x000008, "Member 'FWeaponSlot::Count' has a wrong offset!");

// ScriptStruct Flame.ResourcesList
// 0x0010 (0x0130 - 0x0120)
struct FResourcesList final : public FItemClassTableRowWithInsurance
{
public:
	TSubclassOf<class AShelterResourceItem>       Class;                                             // 0x0120(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         StackSize;                                         // 0x0128(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MaterialCost;                                      // 0x012C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FResourcesList) == 0x000008, "Wrong alignment on FResourcesList");
static_assert(sizeof(FResourcesList) == 0x000130, "Wrong size on FResourcesList");
static_assert(offsetof(FResourcesList, Class) == 0x000120, "Member 'FResourcesList::Class' has a wrong offset!");
static_assert(offsetof(FResourcesList, StackSize) == 0x000128, "Member 'FResourcesList::StackSize' has a wrong offset!");
static_assert(offsetof(FResourcesList, MaterialCost) == 0x00012C, "Member 'FResourcesList::MaterialCost' has a wrong offset!");

// ScriptStruct Flame.ColliderLocation
// 0x0020 (0x0020 - 0x0000)
struct alignas(0x04) FColliderLocation final
{
public:
	uint8                                         Pad_0[0x20];                                       // 0x0000(0x0020)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FColliderLocation) == 0x000004, "Wrong alignment on FColliderLocation");
static_assert(sizeof(FColliderLocation) == 0x000020, "Wrong size on FColliderLocation");

// ScriptStruct Flame.SelectionWheelGapProperties
// 0x000C (0x000C - 0x0000)
struct FSelectionWheelGapProperties final
{
public:
	int32                                         ItemCount;                                         // 0x0000(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         GapSharpness;                                      // 0x0004(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         GapThickness;                                      // 0x0008(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSelectionWheelGapProperties) == 0x000004, "Wrong alignment on FSelectionWheelGapProperties");
static_assert(sizeof(FSelectionWheelGapProperties) == 0x00000C, "Wrong size on FSelectionWheelGapProperties");
static_assert(offsetof(FSelectionWheelGapProperties, ItemCount) == 0x000000, "Member 'FSelectionWheelGapProperties::ItemCount' has a wrong offset!");
static_assert(offsetof(FSelectionWheelGapProperties, GapSharpness) == 0x000004, "Member 'FSelectionWheelGapProperties::GapSharpness' has a wrong offset!");
static_assert(offsetof(FSelectionWheelGapProperties, GapThickness) == 0x000008, "Member 'FSelectionWheelGapProperties::GapThickness' has a wrong offset!");

// ScriptStruct Flame.SessionMsgHeader
// 0x0010 (0x0010 - 0x0000)
struct FSessionMsgHeader final
{
public:
	class FString                                 Type;                                              // 0x0000(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSessionMsgHeader) == 0x000008, "Wrong alignment on FSessionMsgHeader");
static_assert(sizeof(FSessionMsgHeader) == 0x000010, "Wrong size on FSessionMsgHeader");
static_assert(offsetof(FSessionMsgHeader, Type) == 0x000000, "Member 'FSessionMsgHeader::Type' has a wrong offset!");

// ScriptStruct Flame.SessionMsgData
// 0x0020 (0x0020 - 0x0000)
struct FSessionMsgData final
{
public:
	class FString                                 Type;                                              // 0x0000(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Data;                                              // 0x0010(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSessionMsgData) == 0x000008, "Wrong alignment on FSessionMsgData");
static_assert(sizeof(FSessionMsgData) == 0x000020, "Wrong size on FSessionMsgData");
static_assert(offsetof(FSessionMsgData, Type) == 0x000000, "Member 'FSessionMsgData::Type' has a wrong offset!");
static_assert(offsetof(FSessionMsgData, Data) == 0x000010, "Member 'FSessionMsgData::Data' has a wrong offset!");

// ScriptStruct Flame.SessionMsgLeave
// 0x0020 (0x0020 - 0x0000)
struct FSessionMsgLeave final
{
public:
	class FString                                 Type;                                              // 0x0000(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 User;                                              // 0x0010(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSessionMsgLeave) == 0x000008, "Wrong alignment on FSessionMsgLeave");
static_assert(sizeof(FSessionMsgLeave) == 0x000020, "Wrong size on FSessionMsgLeave");
static_assert(offsetof(FSessionMsgLeave, Type) == 0x000000, "Member 'FSessionMsgLeave::Type' has a wrong offset!");
static_assert(offsetof(FSessionMsgLeave, User) == 0x000010, "Member 'FSessionMsgLeave::User' has a wrong offset!");

// ScriptStruct Flame.SessionMsgJoin
// 0x0020 (0x0020 - 0x0000)
struct FSessionMsgJoin final
{
public:
	class FString                                 Type;                                              // 0x0000(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 User;                                              // 0x0010(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSessionMsgJoin) == 0x000008, "Wrong alignment on FSessionMsgJoin");
static_assert(sizeof(FSessionMsgJoin) == 0x000020, "Wrong size on FSessionMsgJoin");
static_assert(offsetof(FSessionMsgJoin, Type) == 0x000000, "Member 'FSessionMsgJoin::Type' has a wrong offset!");
static_assert(offsetof(FSessionMsgJoin, User) == 0x000010, "Member 'FSessionMsgJoin::User' has a wrong offset!");

// ScriptStruct Flame.SessionMsgHelloOk
// 0x0030 (0x0030 - 0x0000)
struct FSessionMsgHelloOk final
{
public:
	class FString                                 Type;                                              // 0x0000(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Data;                                              // 0x0010(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class FString>                         Users;                                             // 0x0020(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSessionMsgHelloOk) == 0x000008, "Wrong alignment on FSessionMsgHelloOk");
static_assert(sizeof(FSessionMsgHelloOk) == 0x000030, "Wrong size on FSessionMsgHelloOk");
static_assert(offsetof(FSessionMsgHelloOk, Type) == 0x000000, "Member 'FSessionMsgHelloOk::Type' has a wrong offset!");
static_assert(offsetof(FSessionMsgHelloOk, Data) == 0x000010, "Member 'FSessionMsgHelloOk::Data' has a wrong offset!");
static_assert(offsetof(FSessionMsgHelloOk, Users) == 0x000020, "Member 'FSessionMsgHelloOk::Users' has a wrong offset!");

// ScriptStruct Flame.SessionMsgHello
// 0x0030 (0x0030 - 0x0000)
struct FSessionMsgHello final
{
public:
	class FString                                 Type;                                              // 0x0000(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 SessionName;                                       // 0x0010(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 User;                                              // 0x0020(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSessionMsgHello) == 0x000008, "Wrong alignment on FSessionMsgHello");
static_assert(sizeof(FSessionMsgHello) == 0x000030, "Wrong size on FSessionMsgHello");
static_assert(offsetof(FSessionMsgHello, Type) == 0x000000, "Member 'FSessionMsgHello::Type' has a wrong offset!");
static_assert(offsetof(FSessionMsgHello, SessionName) == 0x000010, "Member 'FSessionMsgHello::SessionName' has a wrong offset!");
static_assert(offsetof(FSessionMsgHello, User) == 0x000020, "Member 'FSessionMsgHello::User' has a wrong offset!");

// ScriptStruct Flame.ShelterRequiredImprovementInfo
// 0x0010 (0x0010 - 0x0000)
struct FShelterRequiredImprovementInfo final
{
public:
	TSubclassOf<class AShelterImprovement>        ImprovementClass;                                  // 0x0000(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Count;                                             // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FShelterRequiredImprovementInfo) == 0x000008, "Wrong alignment on FShelterRequiredImprovementInfo");
static_assert(sizeof(FShelterRequiredImprovementInfo) == 0x000010, "Wrong size on FShelterRequiredImprovementInfo");
static_assert(offsetof(FShelterRequiredImprovementInfo, ImprovementClass) == 0x000000, "Member 'FShelterRequiredImprovementInfo::ImprovementClass' has a wrong offset!");
static_assert(offsetof(FShelterRequiredImprovementInfo, Count) == 0x000008, "Member 'FShelterRequiredImprovementInfo::Count' has a wrong offset!");

// ScriptStruct Flame.StashViewContext
// 0x0048 (0x0048 - 0x0000)
struct FStashViewContext final
{
public:
	EInventoryView                                View;                                              // 0x0000(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   DisplayName;                                       // 0x0008(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	TSoftClassPtr<class UClass>                   SlotClass;                                         // 0x0020(0x0028)(Edit, BlueprintVisible, BlueprintReadOnly, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FStashViewContext) == 0x000008, "Wrong alignment on FStashViewContext");
static_assert(sizeof(FStashViewContext) == 0x000048, "Wrong size on FStashViewContext");
static_assert(offsetof(FStashViewContext, View) == 0x000000, "Member 'FStashViewContext::View' has a wrong offset!");
static_assert(offsetof(FStashViewContext, DisplayName) == 0x000008, "Member 'FStashViewContext::DisplayName' has a wrong offset!");
static_assert(offsetof(FStashViewContext, SlotClass) == 0x000020, "Member 'FStashViewContext::SlotClass' has a wrong offset!");

// ScriptStruct Flame.SlotVisualBackgroundOpacityStruct
// 0x000C (0x000C - 0x0000)
struct FSlotVisualBackgroundOpacityStruct final
{
public:
	float                                         OutlineOpacity;                                    // 0x0000(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         backgroundColorOpacity;                            // 0x0004(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         backgroundBaseOpacity;                             // 0x0008(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSlotVisualBackgroundOpacityStruct) == 0x000004, "Wrong alignment on FSlotVisualBackgroundOpacityStruct");
static_assert(sizeof(FSlotVisualBackgroundOpacityStruct) == 0x00000C, "Wrong size on FSlotVisualBackgroundOpacityStruct");
static_assert(offsetof(FSlotVisualBackgroundOpacityStruct, OutlineOpacity) == 0x000000, "Member 'FSlotVisualBackgroundOpacityStruct::OutlineOpacity' has a wrong offset!");
static_assert(offsetof(FSlotVisualBackgroundOpacityStruct, backgroundColorOpacity) == 0x000004, "Member 'FSlotVisualBackgroundOpacityStruct::backgroundColorOpacity' has a wrong offset!");
static_assert(offsetof(FSlotVisualBackgroundOpacityStruct, backgroundBaseOpacity) == 0x000008, "Member 'FSlotVisualBackgroundOpacityStruct::backgroundBaseOpacity' has a wrong offset!");

// ScriptStruct Flame.AnimNode_SpeedWarping
// 0x0098 (0x0160 - 0x00C8)
struct FAnimNode_SpeedWarping final : public FAnimNode_SkeletalControlBase
{
public:
	struct FBoneReference                         IKFootRootBone;                                    // 0x00C8(0x0010)(Edit, NoDestructor, NativeAccessSpecifierPublic)
	TArray<struct FIKBones>                       FeetDefinitions;                                   // 0x00D8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	struct FBoneReference                         PelvisBone;                                        // 0x00E8(0x0010)(Edit, NoDestructor, NativeAccessSpecifierPublic)
	EIKFootRootLocalAxis                          SpeedWarpingAxisMode;                              // 0x00F8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_F9[0x3];                                       // 0x00F9(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         SpeedScaling;                                      // 0x00FC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         PelvisAdjustmentAlpha;                             // 0x0100(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MaxIter;                                           // 0x0104(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FPelvisAdjustmentInterp                PelvisAdjustmentInterp;                            // 0x0108(0x0008)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          ClampIKUsingFKLeg;                                 // 0x0110(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_111[0x4F];                                     // 0x0111(0x004F)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FAnimNode_SpeedWarping) == 0x000008, "Wrong alignment on FAnimNode_SpeedWarping");
static_assert(sizeof(FAnimNode_SpeedWarping) == 0x000160, "Wrong size on FAnimNode_SpeedWarping");
static_assert(offsetof(FAnimNode_SpeedWarping, IKFootRootBone) == 0x0000C8, "Member 'FAnimNode_SpeedWarping::IKFootRootBone' has a wrong offset!");
static_assert(offsetof(FAnimNode_SpeedWarping, FeetDefinitions) == 0x0000D8, "Member 'FAnimNode_SpeedWarping::FeetDefinitions' has a wrong offset!");
static_assert(offsetof(FAnimNode_SpeedWarping, PelvisBone) == 0x0000E8, "Member 'FAnimNode_SpeedWarping::PelvisBone' has a wrong offset!");
static_assert(offsetof(FAnimNode_SpeedWarping, SpeedWarpingAxisMode) == 0x0000F8, "Member 'FAnimNode_SpeedWarping::SpeedWarpingAxisMode' has a wrong offset!");
static_assert(offsetof(FAnimNode_SpeedWarping, SpeedScaling) == 0x0000FC, "Member 'FAnimNode_SpeedWarping::SpeedScaling' has a wrong offset!");
static_assert(offsetof(FAnimNode_SpeedWarping, PelvisAdjustmentAlpha) == 0x000100, "Member 'FAnimNode_SpeedWarping::PelvisAdjustmentAlpha' has a wrong offset!");
static_assert(offsetof(FAnimNode_SpeedWarping, MaxIter) == 0x000104, "Member 'FAnimNode_SpeedWarping::MaxIter' has a wrong offset!");
static_assert(offsetof(FAnimNode_SpeedWarping, PelvisAdjustmentInterp) == 0x000108, "Member 'FAnimNode_SpeedWarping::PelvisAdjustmentInterp' has a wrong offset!");
static_assert(offsetof(FAnimNode_SpeedWarping, ClampIKUsingFKLeg) == 0x000110, "Member 'FAnimNode_SpeedWarping::ClampIKUsingFKLeg' has a wrong offset!");

// ScriptStruct Flame.StaminaUsageData
// 0x0050 (0x0050 - 0x0000)
struct FStaminaUsageData final
{
public:
	TMap<EConsumptionSource, float>               ConsumptionSources;                                // 0x0000(0x0050)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
};
static_assert(alignof(FStaminaUsageData) == 0x000008, "Wrong alignment on FStaminaUsageData");
static_assert(sizeof(FStaminaUsageData) == 0x000050, "Wrong size on FStaminaUsageData");
static_assert(offsetof(FStaminaUsageData, ConsumptionSources) == 0x000000, "Member 'FStaminaUsageData::ConsumptionSources' has a wrong offset!");

// ScriptStruct Flame.ItemStateHistoryInfo
// 0x0050 (0x0050 - 0x0000)
struct FItemStateHistoryInfo final
{
public:
	int32                                         StateId;                                           // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         LocalInputInstigatorId;                            // 0x0004(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSubclassOf<class AItem>                      Item;                                              // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSubclassOf<class UItemState>                 State;                                             // 0x0010(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EStatePhase                                   LastKnownStatePhase;                               // 0x0018(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 ItemString;                                        // 0x0020(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 StateString;                                       // 0x0030(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 AdditionalInfoString;                              // 0x0040(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FItemStateHistoryInfo) == 0x000008, "Wrong alignment on FItemStateHistoryInfo");
static_assert(sizeof(FItemStateHistoryInfo) == 0x000050, "Wrong size on FItemStateHistoryInfo");
static_assert(offsetof(FItemStateHistoryInfo, StateId) == 0x000000, "Member 'FItemStateHistoryInfo::StateId' has a wrong offset!");
static_assert(offsetof(FItemStateHistoryInfo, LocalInputInstigatorId) == 0x000004, "Member 'FItemStateHistoryInfo::LocalInputInstigatorId' has a wrong offset!");
static_assert(offsetof(FItemStateHistoryInfo, Item) == 0x000008, "Member 'FItemStateHistoryInfo::Item' has a wrong offset!");
static_assert(offsetof(FItemStateHistoryInfo, State) == 0x000010, "Member 'FItemStateHistoryInfo::State' has a wrong offset!");
static_assert(offsetof(FItemStateHistoryInfo, LastKnownStatePhase) == 0x000018, "Member 'FItemStateHistoryInfo::LastKnownStatePhase' has a wrong offset!");
static_assert(offsetof(FItemStateHistoryInfo, ItemString) == 0x000020, "Member 'FItemStateHistoryInfo::ItemString' has a wrong offset!");
static_assert(offsetof(FItemStateHistoryInfo, StateString) == 0x000030, "Member 'FItemStateHistoryInfo::StateString' has a wrong offset!");
static_assert(offsetof(FItemStateHistoryInfo, AdditionalInfoString) == 0x000040, "Member 'FItemStateHistoryInfo::AdditionalInfoString' has a wrong offset!");

// ScriptStruct Flame.ServerStateInfoLocal
// 0x0030 (0x0030 - 0x0000)
struct FServerStateInfoLocal final
{
public:
	int32                                         StateIdServer;                                     // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Timestamp;                                         // 0x0004(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TWeakObjectPtr<class AItem>                   Item;                                              // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSubclassOf<class AItem>                      ItemClass;                                         // 0x0010(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TWeakObjectPtr<class UItemState>              State;                                             // 0x0018(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSubclassOf<class UItemState>                 StateClass;                                        // 0x0020(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EStatePhase                                   Phase;                                             // 0x0028(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          EndByServer;                                       // 0x0029(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2A[0x6];                                       // 0x002A(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FServerStateInfoLocal) == 0x000008, "Wrong alignment on FServerStateInfoLocal");
static_assert(sizeof(FServerStateInfoLocal) == 0x000030, "Wrong size on FServerStateInfoLocal");
static_assert(offsetof(FServerStateInfoLocal, StateIdServer) == 0x000000, "Member 'FServerStateInfoLocal::StateIdServer' has a wrong offset!");
static_assert(offsetof(FServerStateInfoLocal, Timestamp) == 0x000004, "Member 'FServerStateInfoLocal::Timestamp' has a wrong offset!");
static_assert(offsetof(FServerStateInfoLocal, Item) == 0x000008, "Member 'FServerStateInfoLocal::Item' has a wrong offset!");
static_assert(offsetof(FServerStateInfoLocal, ItemClass) == 0x000010, "Member 'FServerStateInfoLocal::ItemClass' has a wrong offset!");
static_assert(offsetof(FServerStateInfoLocal, State) == 0x000018, "Member 'FServerStateInfoLocal::State' has a wrong offset!");
static_assert(offsetof(FServerStateInfoLocal, StateClass) == 0x000020, "Member 'FServerStateInfoLocal::StateClass' has a wrong offset!");
static_assert(offsetof(FServerStateInfoLocal, Phase) == 0x000028, "Member 'FServerStateInfoLocal::Phase' has a wrong offset!");
static_assert(offsetof(FServerStateInfoLocal, EndByServer) == 0x000029, "Member 'FServerStateInfoLocal::EndByServer' has a wrong offset!");

// ScriptStruct Flame.ItemStatePair
// 0x0028 (0x0028 - 0x0000)
struct FItemStatePair final
{
public:
	int32                                         StateIdLocal;                                      // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class AItem*                                  Item;                                              // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UItemState*                             NeededState;                                       // 0x0010(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UItemState*                             PivotState;                                        // 0x0018(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ERequestMode                                  Mode;                                              // 0x0020(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_21[0x7];                                       // 0x0021(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FItemStatePair) == 0x000008, "Wrong alignment on FItemStatePair");
static_assert(sizeof(FItemStatePair) == 0x000028, "Wrong size on FItemStatePair");
static_assert(offsetof(FItemStatePair, StateIdLocal) == 0x000000, "Member 'FItemStatePair::StateIdLocal' has a wrong offset!");
static_assert(offsetof(FItemStatePair, Item) == 0x000008, "Member 'FItemStatePair::Item' has a wrong offset!");
static_assert(offsetof(FItemStatePair, NeededState) == 0x000010, "Member 'FItemStatePair::NeededState' has a wrong offset!");
static_assert(offsetof(FItemStatePair, PivotState) == 0x000018, "Member 'FItemStatePair::PivotState' has a wrong offset!");
static_assert(offsetof(FItemStatePair, Mode) == 0x000020, "Member 'FItemStatePair::Mode' has a wrong offset!");

// ScriptStruct Flame.AimV2StickInputRuntime
// 0x00BC (0x00BC - 0x0000)
struct alignas(0x04) FAimV2StickInputRuntime final
{
public:
	uint8                                         Pad_0[0xBC];                                       // 0x0000(0x00BC)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FAimV2StickInputRuntime) == 0x000004, "Wrong alignment on FAimV2StickInputRuntime");
static_assert(sizeof(FAimV2StickInputRuntime) == 0x0000BC, "Wrong size on FAimV2StickInputRuntime");

// ScriptStruct Flame.AimV2AimStickInputRuntime
// 0x0004 (0x0004 - 0x0000)
struct alignas(0x04) FAimV2AimStickInputRuntime final
{
public:
	uint8                                         Pad_0[0x4];                                        // 0x0000(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FAimV2AimStickInputRuntime) == 0x000004, "Wrong alignment on FAimV2AimStickInputRuntime");
static_assert(sizeof(FAimV2AimStickInputRuntime) == 0x000004, "Wrong size on FAimV2AimStickInputRuntime");

// ScriptStruct Flame.SwapWeaponsWidgetParams
// 0x0018 (0x0018 - 0x0000)
struct FSwapWeaponsWidgetParams final
{
public:
	class AWeapon*                                WeaponA;                                           // 0x0000(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AWeapon*                                WeaponB;                                           // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AWeapon*                                WeaponNew;                                         // 0x0010(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSwapWeaponsWidgetParams) == 0x000008, "Wrong alignment on FSwapWeaponsWidgetParams");
static_assert(sizeof(FSwapWeaponsWidgetParams) == 0x000018, "Wrong size on FSwapWeaponsWidgetParams");
static_assert(offsetof(FSwapWeaponsWidgetParams, WeaponA) == 0x000000, "Member 'FSwapWeaponsWidgetParams::WeaponA' has a wrong offset!");
static_assert(offsetof(FSwapWeaponsWidgetParams, WeaponB) == 0x000008, "Member 'FSwapWeaponsWidgetParams::WeaponB' has a wrong offset!");
static_assert(offsetof(FSwapWeaponsWidgetParams, WeaponNew) == 0x000010, "Member 'FSwapWeaponsWidgetParams::WeaponNew' has a wrong offset!");

// ScriptStruct Flame.TorsoAnim
// 0x0548 (0x0558 - 0x0010)
struct FTorsoAnim final : public FAnimNode_Base
{
public:
	struct FPoseLink                              Input;                                             // 0x0010(0x0010)(Edit, NoDestructor, NativeAccessSpecifierPublic)
	struct FTorsoPars                             Params;                                            // 0x0020(0x0030)(Edit, NoDestructor, NativeAccessSpecifierPublic)
	struct FBoneReference                         Start;                                             // 0x0050(0x0010)(Edit, DisableEditOnInstance, NoDestructor, NativeAccessSpecifierPublic)
	struct FBoneReference                         UpperSpine;                                        // 0x0060(0x0010)(Edit, DisableEditOnInstance, NoDestructor, NativeAccessSpecifierPublic)
	struct FBoneReference                         LeftArm;                                           // 0x0070(0x0010)(Edit, DisableEditOnInstance, NoDestructor, NativeAccessSpecifierPublic)
	struct FBoneReference                         RightArm;                                          // 0x0080(0x0010)(Edit, DisableEditOnInstance, NoDestructor, NativeAccessSpecifierPublic)
	class UAnimSequence*                          DiagAnim;                                          // 0x0090(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IgnoreUpperBody;                                   // 0x0098(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          DiscreteMode;                                      // 0x0099(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9A[0x4BE];                                     // 0x009A(0x04BE)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FTorsoAnim) == 0x000008, "Wrong alignment on FTorsoAnim");
static_assert(sizeof(FTorsoAnim) == 0x000558, "Wrong size on FTorsoAnim");
static_assert(offsetof(FTorsoAnim, Input) == 0x000010, "Member 'FTorsoAnim::Input' has a wrong offset!");
static_assert(offsetof(FTorsoAnim, Params) == 0x000020, "Member 'FTorsoAnim::Params' has a wrong offset!");
static_assert(offsetof(FTorsoAnim, Start) == 0x000050, "Member 'FTorsoAnim::Start' has a wrong offset!");
static_assert(offsetof(FTorsoAnim, UpperSpine) == 0x000060, "Member 'FTorsoAnim::UpperSpine' has a wrong offset!");
static_assert(offsetof(FTorsoAnim, LeftArm) == 0x000070, "Member 'FTorsoAnim::LeftArm' has a wrong offset!");
static_assert(offsetof(FTorsoAnim, RightArm) == 0x000080, "Member 'FTorsoAnim::RightArm' has a wrong offset!");
static_assert(offsetof(FTorsoAnim, DiagAnim) == 0x000090, "Member 'FTorsoAnim::DiagAnim' has a wrong offset!");
static_assert(offsetof(FTorsoAnim, IgnoreUpperBody) == 0x000098, "Member 'FTorsoAnim::IgnoreUpperBody' has a wrong offset!");
static_assert(offsetof(FTorsoAnim, DiscreteMode) == 0x000099, "Member 'FTorsoAnim::DiscreteMode' has a wrong offset!");

// ScriptStruct Flame.TutorialAIInitializationData
// 0x0030 (0x0030 - 0x0000)
struct FTutorialAIInitializationData final
{
public:
	ETutorialAIRole                               AIRole;                                            // 0x0000(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TSubclassOf<class AWeapon>                    Weapon;                                            // 0x0008(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         AffiliationID;                                     // 0x0010(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class AAIPatrolPath*                          PatrolPath;                                        // 0x0018(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<TSubclassOf<class ACustomizationVariant>> Customizations;                                    // 0x0020(0x0010)(Edit, BlueprintVisible, ZeroConstructor, UObjectWrapper, NativeAccessSpecifierPublic)
};
static_assert(alignof(FTutorialAIInitializationData) == 0x000008, "Wrong alignment on FTutorialAIInitializationData");
static_assert(sizeof(FTutorialAIInitializationData) == 0x000030, "Wrong size on FTutorialAIInitializationData");
static_assert(offsetof(FTutorialAIInitializationData, AIRole) == 0x000000, "Member 'FTutorialAIInitializationData::AIRole' has a wrong offset!");
static_assert(offsetof(FTutorialAIInitializationData, Weapon) == 0x000008, "Member 'FTutorialAIInitializationData::Weapon' has a wrong offset!");
static_assert(offsetof(FTutorialAIInitializationData, AffiliationID) == 0x000010, "Member 'FTutorialAIInitializationData::AffiliationID' has a wrong offset!");
static_assert(offsetof(FTutorialAIInitializationData, PatrolPath) == 0x000018, "Member 'FTutorialAIInitializationData::PatrolPath' has a wrong offset!");
static_assert(offsetof(FTutorialAIInitializationData, Customizations) == 0x000020, "Member 'FTutorialAIInitializationData::Customizations' has a wrong offset!");

// ScriptStruct Flame.ClimbingAnims
// 0x0018 (0x0018 - 0x0000)
struct FClimbingAnims final
{
public:
	class UAnimSequence*                          Climb;                                             // 0x0000(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAnimSequence*                          ClimbTall;                                         // 0x0008(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAnimSequence*                          ClimbRun;                                          // 0x0010(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FClimbingAnims) == 0x000008, "Wrong alignment on FClimbingAnims");
static_assert(sizeof(FClimbingAnims) == 0x000018, "Wrong size on FClimbingAnims");
static_assert(offsetof(FClimbingAnims, Climb) == 0x000000, "Member 'FClimbingAnims::Climb' has a wrong offset!");
static_assert(offsetof(FClimbingAnims, ClimbTall) == 0x000008, "Member 'FClimbingAnims::ClimbTall' has a wrong offset!");
static_assert(offsetof(FClimbingAnims, ClimbRun) == 0x000010, "Member 'FClimbingAnims::ClimbRun' has a wrong offset!");

// ScriptStruct Flame.FourAxisJumping
// 0x0078 (0x0078 - 0x0000)
struct FFourAxisJumping final
{
public:
	struct FStartLoopEnd                          Center;                                            // 0x0000(0x0018)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, NativeAccessSpecifierPublic)
	struct FStartLoopEnd                          Forward;                                           // 0x0018(0x0018)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, NativeAccessSpecifierPublic)
	struct FStartLoopEnd                          Left;                                              // 0x0030(0x0018)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, NativeAccessSpecifierPublic)
	struct FStartLoopEnd                          back;                                              // 0x0048(0x0018)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, NativeAccessSpecifierPublic)
	struct FStartLoopEnd                          Right;                                             // 0x0060(0x0018)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FFourAxisJumping) == 0x000008, "Wrong alignment on FFourAxisJumping");
static_assert(sizeof(FFourAxisJumping) == 0x000078, "Wrong size on FFourAxisJumping");
static_assert(offsetof(FFourAxisJumping, Center) == 0x000000, "Member 'FFourAxisJumping::Center' has a wrong offset!");
static_assert(offsetof(FFourAxisJumping, Forward) == 0x000018, "Member 'FFourAxisJumping::Forward' has a wrong offset!");
static_assert(offsetof(FFourAxisJumping, Left) == 0x000030, "Member 'FFourAxisJumping::Left' has a wrong offset!");
static_assert(offsetof(FFourAxisJumping, back) == 0x000048, "Member 'FFourAxisJumping::back' has a wrong offset!");
static_assert(offsetof(FFourAxisJumping, Right) == 0x000060, "Member 'FFourAxisJumping::Right' has a wrong offset!");

// ScriptStruct Flame.FlameSkinMaterialInfo
// 0x0010 (0x0010 - 0x0000)
struct FFlameSkinMaterialInfo final
{
public:
	class UTexture2D*                             MaterialTexture;                                   // 0x0000(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         CamoOpacity;                                       // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FFlameSkinMaterialInfo) == 0x000008, "Wrong alignment on FFlameSkinMaterialInfo");
static_assert(sizeof(FFlameSkinMaterialInfo) == 0x000010, "Wrong size on FFlameSkinMaterialInfo");
static_assert(offsetof(FFlameSkinMaterialInfo, MaterialTexture) == 0x000000, "Member 'FFlameSkinMaterialInfo::MaterialTexture' has a wrong offset!");
static_assert(offsetof(FFlameSkinMaterialInfo, CamoOpacity) == 0x000008, "Member 'FFlameSkinMaterialInfo::CamoOpacity' has a wrong offset!");

// ScriptStruct Flame.WeaponArmAdditive
// 0x0020 (0x0020 - 0x0000)
struct FWeaponArmAdditive final
{
public:
	class UAnimSequence*                          Idle;                                              // 0x0000(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAnimSequence*                          Prone;                                             // 0x0008(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAnimSequence*                          Aiming;                                            // 0x0010(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAnimSequence*                          Hipfire;                                           // 0x0018(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FWeaponArmAdditive) == 0x000008, "Wrong alignment on FWeaponArmAdditive");
static_assert(sizeof(FWeaponArmAdditive) == 0x000020, "Wrong size on FWeaponArmAdditive");
static_assert(offsetof(FWeaponArmAdditive, Idle) == 0x000000, "Member 'FWeaponArmAdditive::Idle' has a wrong offset!");
static_assert(offsetof(FWeaponArmAdditive, Prone) == 0x000008, "Member 'FWeaponArmAdditive::Prone' has a wrong offset!");
static_assert(offsetof(FWeaponArmAdditive, Aiming) == 0x000010, "Member 'FWeaponArmAdditive::Aiming' has a wrong offset!");
static_assert(offsetof(FWeaponArmAdditive, Hipfire) == 0x000018, "Member 'FWeaponArmAdditive::Hipfire' has a wrong offset!");

// ScriptStruct Flame.FireModeAnimationConfiguration
// 0x0088 (0x0090 - 0x0008)
struct FFireModeAnimationConfiguration final : public FTableRowBase
{
public:
	class UAnimMontage*                           ReloadWeaponMontage;                               // 0x0008(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAnimMontage*                           ReloadHandsMontage;                                // 0x0010(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAnimMontage*                           MeleeAttackMontage;                                // 0x0018(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UCurveMeleeArc*                         MeleeAttackArc;                                    // 0x0020(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class UAnimMontage*>                   MeleeAttackMontages;                               // 0x0028(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<int32>                                 MeleeAttackComboSequence;                          // 0x0038(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	class UAnimMontage*                           WeaponChamberMontage;                              // 0x0048(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAnimMontage*                           HandsChamberMontage;                               // 0x0050(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAnimSequence*                          RecoilAnimation;                                   // 0x0058(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAnimSequence*                          ProneRecoilAnimation;                              // 0x0060(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAnimMontage*                           WeaponFireMontage;                                 // 0x0068(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FWeaponArmAdditive                     WeaponArmsAdditive;                                // 0x0070(0x0020)(Edit, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FFireModeAnimationConfiguration) == 0x000008, "Wrong alignment on FFireModeAnimationConfiguration");
static_assert(sizeof(FFireModeAnimationConfiguration) == 0x000090, "Wrong size on FFireModeAnimationConfiguration");
static_assert(offsetof(FFireModeAnimationConfiguration, ReloadWeaponMontage) == 0x000008, "Member 'FFireModeAnimationConfiguration::ReloadWeaponMontage' has a wrong offset!");
static_assert(offsetof(FFireModeAnimationConfiguration, ReloadHandsMontage) == 0x000010, "Member 'FFireModeAnimationConfiguration::ReloadHandsMontage' has a wrong offset!");
static_assert(offsetof(FFireModeAnimationConfiguration, MeleeAttackMontage) == 0x000018, "Member 'FFireModeAnimationConfiguration::MeleeAttackMontage' has a wrong offset!");
static_assert(offsetof(FFireModeAnimationConfiguration, MeleeAttackArc) == 0x000020, "Member 'FFireModeAnimationConfiguration::MeleeAttackArc' has a wrong offset!");
static_assert(offsetof(FFireModeAnimationConfiguration, MeleeAttackMontages) == 0x000028, "Member 'FFireModeAnimationConfiguration::MeleeAttackMontages' has a wrong offset!");
static_assert(offsetof(FFireModeAnimationConfiguration, MeleeAttackComboSequence) == 0x000038, "Member 'FFireModeAnimationConfiguration::MeleeAttackComboSequence' has a wrong offset!");
static_assert(offsetof(FFireModeAnimationConfiguration, WeaponChamberMontage) == 0x000048, "Member 'FFireModeAnimationConfiguration::WeaponChamberMontage' has a wrong offset!");
static_assert(offsetof(FFireModeAnimationConfiguration, HandsChamberMontage) == 0x000050, "Member 'FFireModeAnimationConfiguration::HandsChamberMontage' has a wrong offset!");
static_assert(offsetof(FFireModeAnimationConfiguration, RecoilAnimation) == 0x000058, "Member 'FFireModeAnimationConfiguration::RecoilAnimation' has a wrong offset!");
static_assert(offsetof(FFireModeAnimationConfiguration, ProneRecoilAnimation) == 0x000060, "Member 'FFireModeAnimationConfiguration::ProneRecoilAnimation' has a wrong offset!");
static_assert(offsetof(FFireModeAnimationConfiguration, WeaponFireMontage) == 0x000068, "Member 'FFireModeAnimationConfiguration::WeaponFireMontage' has a wrong offset!");
static_assert(offsetof(FFireModeAnimationConfiguration, WeaponArmsAdditive) == 0x000070, "Member 'FFireModeAnimationConfiguration::WeaponArmsAdditive' has a wrong offset!");

// ScriptStruct Flame.MeleeConfiguration
// 0x0018 (0x0028 - 0x0010)
struct FMeleeConfiguration final : public FClassTableRow
{
public:
	float                                         MeleeDamage;                                       // 0x0010(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MeleeRadius;                                       // 0x0014(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MeleeRange;                                        // 0x0018(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MeleeDelay;                                        // 0x001C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MeleeAttackRate;                                   // 0x0020(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_24[0x4];                                       // 0x0024(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FMeleeConfiguration) == 0x000008, "Wrong alignment on FMeleeConfiguration");
static_assert(sizeof(FMeleeConfiguration) == 0x000028, "Wrong size on FMeleeConfiguration");
static_assert(offsetof(FMeleeConfiguration, MeleeDamage) == 0x000010, "Member 'FMeleeConfiguration::MeleeDamage' has a wrong offset!");
static_assert(offsetof(FMeleeConfiguration, MeleeRadius) == 0x000014, "Member 'FMeleeConfiguration::MeleeRadius' has a wrong offset!");
static_assert(offsetof(FMeleeConfiguration, MeleeRange) == 0x000018, "Member 'FMeleeConfiguration::MeleeRange' has a wrong offset!");
static_assert(offsetof(FMeleeConfiguration, MeleeDelay) == 0x00001C, "Member 'FMeleeConfiguration::MeleeDelay' has a wrong offset!");
static_assert(offsetof(FMeleeConfiguration, MeleeAttackRate) == 0x000020, "Member 'FMeleeConfiguration::MeleeAttackRate' has a wrong offset!");

// ScriptStruct Flame.AimAssistConfiguration
// 0x0010 (0x0020 - 0x0010)
struct FAimAssistConfiguration final : public FClassTableRow
{
public:
	TArray<struct FPlatformConfiguration>         Platforms;                                         // 0x0010(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAimAssistConfiguration) == 0x000008, "Wrong alignment on FAimAssistConfiguration");
static_assert(sizeof(FAimAssistConfiguration) == 0x000020, "Wrong size on FAimAssistConfiguration");
static_assert(offsetof(FAimAssistConfiguration, Platforms) == 0x000010, "Member 'FAimAssistConfiguration::Platforms' has a wrong offset!");

// ScriptStruct Flame.WeaponSightConfiguration
// 0x0020 (0x0030 - 0x0010)
struct FWeaponSightConfiguration final : public FClassTableRow
{
public:
	float                                         AimingSpeed;                                       // 0x0010(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TPAimFOV;                                          // 0x0014(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         FPAimFOV;                                          // 0x0018(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bShouldFade;                                       // 0x001C(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1D[0x3];                                       // 0x001D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         AimFadeSpeed;                                      // 0x0020(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_24[0x4];                                       // 0x0024(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TSubclassOf<class UUserWidget>                AimOverlay;                                        // 0x0028(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FWeaponSightConfiguration) == 0x000008, "Wrong alignment on FWeaponSightConfiguration");
static_assert(sizeof(FWeaponSightConfiguration) == 0x000030, "Wrong size on FWeaponSightConfiguration");
static_assert(offsetof(FWeaponSightConfiguration, AimingSpeed) == 0x000010, "Member 'FWeaponSightConfiguration::AimingSpeed' has a wrong offset!");
static_assert(offsetof(FWeaponSightConfiguration, TPAimFOV) == 0x000014, "Member 'FWeaponSightConfiguration::TPAimFOV' has a wrong offset!");
static_assert(offsetof(FWeaponSightConfiguration, FPAimFOV) == 0x000018, "Member 'FWeaponSightConfiguration::FPAimFOV' has a wrong offset!");
static_assert(offsetof(FWeaponSightConfiguration, bShouldFade) == 0x00001C, "Member 'FWeaponSightConfiguration::bShouldFade' has a wrong offset!");
static_assert(offsetof(FWeaponSightConfiguration, AimFadeSpeed) == 0x000020, "Member 'FWeaponSightConfiguration::AimFadeSpeed' has a wrong offset!");
static_assert(offsetof(FWeaponSightConfiguration, AimOverlay) == 0x000028, "Member 'FWeaponSightConfiguration::AimOverlay' has a wrong offset!");

// ScriptStruct Flame.WeaponFireMode
// 0x0008 (0x0008 - 0x0000)
struct alignas(0x04) FWeaponFireMode final
{
public:
	uint8                                         Pad_0[0x8];                                        // 0x0000(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FWeaponFireMode) == 0x000004, "Wrong alignment on FWeaponFireMode");
static_assert(sizeof(FWeaponFireMode) == 0x000008, "Wrong size on FWeaponFireMode");

// ScriptStruct Flame.SpreadParameters
// 0x0028 (0x0028 - 0x0000)
struct FSpreadParameters final
{
public:
	float                                         Base;                                              // 0x0000(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Max;                                               // 0x0004(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<float>                                 SequenceSpread;                                    // 0x0008(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	float                                         CooldownTime;                                      // 0x0018(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Mean;                                              // 0x001C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         StandardDeviation;                                 // 0x0020(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_24[0x4];                                       // 0x0024(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FSpreadParameters) == 0x000008, "Wrong alignment on FSpreadParameters");
static_assert(sizeof(FSpreadParameters) == 0x000028, "Wrong size on FSpreadParameters");
static_assert(offsetof(FSpreadParameters, Base) == 0x000000, "Member 'FSpreadParameters::Base' has a wrong offset!");
static_assert(offsetof(FSpreadParameters, Max) == 0x000004, "Member 'FSpreadParameters::Max' has a wrong offset!");
static_assert(offsetof(FSpreadParameters, SequenceSpread) == 0x000008, "Member 'FSpreadParameters::SequenceSpread' has a wrong offset!");
static_assert(offsetof(FSpreadParameters, CooldownTime) == 0x000018, "Member 'FSpreadParameters::CooldownTime' has a wrong offset!");
static_assert(offsetof(FSpreadParameters, Mean) == 0x00001C, "Member 'FSpreadParameters::Mean' has a wrong offset!");
static_assert(offsetof(FSpreadParameters, StandardDeviation) == 0x000020, "Member 'FSpreadParameters::StandardDeviation' has a wrong offset!");

// ScriptStruct Flame.WeaponTypeStaggerInfo
// 0x0008 (0x0008 - 0x0000)
struct alignas(0x04) FWeaponTypeStaggerInfo final
{
public:
	uint8                                         Pad_0[0x8];                                        // 0x0000(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FWeaponTypeStaggerInfo) == 0x000004, "Wrong alignment on FWeaponTypeStaggerInfo");
static_assert(sizeof(FWeaponTypeStaggerInfo) == 0x000008, "Wrong size on FWeaponTypeStaggerInfo");

// ScriptStruct Flame.WindowSashRuntime
// 0x0070 (0x0070 - 0x0000)
struct FWindowSashRuntime final
{
public:
	class UStaticMeshComponent*                   Component;                                         // 0x0000(0x0008)(Edit, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UStaticMeshComponent*                   ComponentLocked;                                   // 0x0008(0x0008)(Edit, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FTransform                             ClosedTransform;                                   // 0x0010(0x0030)(Edit, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FTransform                             OpenTransform;                                     // 0x0040(0x0030)(Edit, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FWindowSashRuntime) == 0x000010, "Wrong alignment on FWindowSashRuntime");
static_assert(sizeof(FWindowSashRuntime) == 0x000070, "Wrong size on FWindowSashRuntime");
static_assert(offsetof(FWindowSashRuntime, Component) == 0x000000, "Member 'FWindowSashRuntime::Component' has a wrong offset!");
static_assert(offsetof(FWindowSashRuntime, ComponentLocked) == 0x000008, "Member 'FWindowSashRuntime::ComponentLocked' has a wrong offset!");
static_assert(offsetof(FWindowSashRuntime, ClosedTransform) == 0x000010, "Member 'FWindowSashRuntime::ClosedTransform' has a wrong offset!");
static_assert(offsetof(FWindowSashRuntime, OpenTransform) == 0x000040, "Member 'FWindowSashRuntime::OpenTransform' has a wrong offset!");

}

