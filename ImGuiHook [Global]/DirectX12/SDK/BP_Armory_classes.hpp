#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_Armory

#include "Basic.hpp"

#include "S_Armory_WeaponData_structs.hpp"
#include "CoreUObject_structs.hpp"
#include "Flame_structs.hpp"
#include "Engine_structs.hpp"
#include "Engine_classes.hpp"
#include "E_Armory_ElementSizes_structs.hpp"


namespace SDK
{

// BlueprintGeneratedClass BP_Armory.BP_Armory_C
// 0x0398 (0x05B8 - 0x0220)
class ABP_Armory_C final : public AActor
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x0220(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class UBoxComponent*                          VisibilityBox;                                     // 0x0228(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UChildActorComponent*                   Armory_Tools;                                      // 0x0230(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UChildActorComponent*                   Armory_Volume;                                     // 0x0238(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UBP_OnlineWeaponCustomizationsComponent_C* BP_OnlineWeaponCustomizationsComponent;            // 0x0240(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UStaticMeshComponent*                   Armory_Mesh;                                       // 0x0248(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USceneComponent*                        DefaultSceneRoot;                                  // 0x0250(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	TArray<class FName>                           WeaponList;                                        // 0x0258(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	TArray<class UStaticMeshComponent*>           RackMeshes;                                        // 0x0268(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance, ContainsInstancedReference)
	struct FVector                                WeaponWallOffset;                                  // 0x0278(0x000C)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_284[0x4];                                      // 0x0284(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class USkeletalMeshComponent*>         WeaponMeshes;                                      // 0x0288(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance, ContainsInstancedReference)
	TArray<class UStaticMeshComponent*>           WeaponMeshes_SM;                                   // 0x0298(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance, ContainsInstancedReference)
	TArray<class UStaticMeshComponent*>           BlueprintMeshes;                                   // 0x02A8(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance, ContainsInstancedReference)
	struct FVector                                BlueprintWallOffset;                               // 0x02B8(0x000C)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2C4[0x4];                                      // 0x02C4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<EItemCategory>                         SortOrder;                                         // 0x02C8(0x0010)(Edit, BlueprintVisible)
	TArray<class AWeapon*>                        PlayerStash_Weapons;                               // 0x02D8(0x0010)(Edit, BlueprintVisible, DisableEditOnTemplate, DisableEditOnInstance)
	TArray<class ABP_ArmoryDecal_C*>              DecalActors;                                       // 0x02E8(0x0010)(Edit, BlueprintVisible, DisableEditOnTemplate, DisableEditOnInstance)
	TMap<int32, class USkeletalMeshComponent*>    PendingCamoUpdates;                                // 0x02F8(0x0050)(Edit, BlueprintVisible, DisableEditOnInstance, ContainsInstancedReference)
	class UClass*                                 WeaponPlan;                                        // 0x0348(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UClass*                                 WeaponClass;                                       // 0x0350(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TSoftObjectPtr<class UAnimSequence>           WeaponPoseAnimation;                               // 0x0358(0x0028)(Edit, BlueprintVisible, DisableEditOnInstance, HasGetValueTypeHash)
	E_Armory_ElementSizes                         WeaponSize;                                        // 0x0380(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	E_Armory_ElementSizes                         DecalSize;                                         // 0x0381(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_382[0x6];                                      // 0x0382(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	TSoftObjectPtr<class UStaticMesh>             BlueprintMesh;                                     // 0x0388(0x0028)(Edit, BlueprintVisible, DisableEditOnInstance, HasGetValueTypeHash)
	struct FRotator                               BlueprintRotation;                                 // 0x03B0(0x000C)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_3BC[0x4];                                      // 0x03BC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TSoftObjectPtr<class UStaticMesh>             RackMesh;                                          // 0x03C0(0x0028)(Edit, BlueprintVisible, DisableEditOnInstance, HasGetValueTypeHash)
	TArray<struct FS_Armory_WeaponData>           CurrentRackElements;                               // 0x03E8(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	TSoftObjectPtr<class UMaterialInstance>       DecalMaterial;                                     // 0x03F8(0x0028)(Edit, BlueprintVisible, DisableEditOnInstance, HasGetValueTypeHash)
	struct FVector                                DecalWallOffset;                                   // 0x0420(0x000C)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               DecalRotation;                                     // 0x042C(0x000C)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	class FName                                   CurrentSocket;                                     // 0x0438(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   CurrentName;                                       // 0x0440(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AStash*                                 Stash;                                             // 0x0448(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<class FName>                           OccupiedWeaponSockets;                             // 0x0450(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	class FName                                   LastOccupiedWeaponSocket;                          // 0x0460(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bDisregardStash;                                   // 0x0468(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn)
	uint8                                         Pad_469[0x7];                                      // 0x0469(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class FName>                           OccupiedBPSockets;                                 // 0x0470(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	class FName                                   LastOccupiedBPSocket;                              // 0x0480(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bShowOnlyDecals;                                   // 0x0488(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn)
	uint8                                         Pad_489[0x7];                                      // 0x0489(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class FName>                           OccupiedDecalSockets;                              // 0x0490(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	class FName                                   LastOccupiedDecalSocket;                           // 0x04A0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bDrawDebug;                                        // 0x04A8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn)
	uint8                                         Pad_4A9[0x3];                                      // 0x04A9(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         DebugPointSize;                                    // 0x04AC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         DebugPointDuration;                                // 0x04B0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           DebugDecalPointColor;                              // 0x04B4(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           DebugWeaponPointColor;                             // 0x04C4(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           DebugBlueprintPointcolor;                          // 0x04D4(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               WeaponRotation;                                    // 0x04E4(0x000C)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	TArray<class FName>                           WeaponBonesToHide;                                 // 0x04F0(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	TArray<class UBPC_Armory_WeaponElement_C*>    Elements;                                          // 0x0500(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance, ContainsInstancedReference)
	class UBPC_Armory_WeaponElement_C*            CurrentElement;                                    // 0x0510(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UShelterCustomizationComponent*         Wardrobe;                                          // 0x0518(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	FMulticastInlineDelegateProperty_             Armory_Update_Start;                               // 0x0520(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	FMulticastInlineDelegateProperty_             Armory_Init;                                       // 0x0530(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	float                                         TimeOut_Duration;                                  // 0x0540(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         WPN_AnimPose_Loaded;                               // 0x0544(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TMap<TSoftClassPtr<class UClass>, TSoftObjectPtr<class UStaticMesh>> WeaponClass_To_WeaponStaticMesh;                   // 0x0548(0x0050)(Edit, BlueprintVisible, DisableEditOnInstance)
	bool                                          bShouldRT_Update;                                  // 0x0598(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_599[0x3];                                      // 0x0599(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         BlueprintCustomScale;                              // 0x059C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         DecalCustomScale;                                  // 0x05A0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_5A4[0x4];                                      // 0x05A4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class USkeletalMeshComponent*>         WeaponMeshes_SK;                                   // 0x05A8(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance, ContainsInstancedReference)

public:
	void Armory_Update_Start__DelegateSignature();
	void Armory_Init__DelegateSignature();
	void ExecuteUbergraph_BP_Armory(int32 EntryPoint);
	void SetArmoryVisibility(bool bNewVisibility);
	void BndEvt__BP_Armory_VisibilityBox_K2Node_ComponentBoundEvent_1_ComponentEndOverlapSignature__DelegateSignature(class UPrimitiveComponent* OverlappedComponent, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, int32 OtherBodyIndex);
	void BndEvt__BP_Armory_VisibilityBox_K2Node_ComponentBoundEvent_0_ComponentBeginOverlapSignature__DelegateSignature(class UPrimitiveComponent* OverlappedComponent, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, int32 OtherBodyIndex, bool bFromSweep, const struct FHitResult& SweepResult);
	void UpdatePlan(class APlan* Plan);
	void UpdateOffsets();
	void InitWeaponSkinsLoaded(class UShelterCustomizationComponent* Wardrobe_0);
	void ItemSkinChanged(class UShelterCustomizationComponent* Wardrobe_0, class UClass* Item, class UClass* Skin);
	void Update(class AWeapon* Weapon);
	void Init_Armory();
	void StashRecieved(class AStash* Sender, class UStashComponent* Inventory);
	void ReceiveBeginPlay();
	void WeaponFilter(TArray<class FName>& Array, TArray<class FName>* Return1);
	void CreateRack();
	void StoreInstancedVariableInComponent(TArray<TSoftObjectPtr<class UStaticMesh>>& Array, TSoftClassPtr<class UClass> InputPin, TSoftObjectPtr<class UAnimSequence> WeaponPoseAnimation_0, TSoftObjectPtr<class UMaterialInstance> DecalMaterial_0, const struct FVector& WeaponWallOffset_0, const struct FVector& BlueprintWallOffset_0, const struct FRotator& BlueprintRotation_0, E_Armory_ElementSizes WeaponSize_0, E_Armory_ElementSizes DecalSize_0, const struct FRotator& WeaponRotation_0, TArray<class FName>& WeaponBonesToHide_0, const struct FVector& DecalWallOffset_0, float Blueprint_CustomScale, float Decal_CustomScale, const struct FRotator& Decal_Rotation);
	void ApplySkinOnWeapon(class UBPC_Armory_WeaponElement_C* ArmoryElement, class AWeapon* Weapon);
	void InitApplySkinOnAllWeapons();
	void DEBUGMinusRT_Placement();
	void Set_Weapon(class UBPC_Armory_WeaponElement_C* ArmoryElement);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BP_Armory_C">();
	}
	static class ABP_Armory_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<ABP_Armory_C>();
	}
};
static_assert(alignof(ABP_Armory_C) == 0x000008, "Wrong alignment on ABP_Armory_C");
static_assert(sizeof(ABP_Armory_C) == 0x0005B8, "Wrong size on ABP_Armory_C");
static_assert(offsetof(ABP_Armory_C, UberGraphFrame) == 0x000220, "Member 'ABP_Armory_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(ABP_Armory_C, VisibilityBox) == 0x000228, "Member 'ABP_Armory_C::VisibilityBox' has a wrong offset!");
static_assert(offsetof(ABP_Armory_C, Armory_Tools) == 0x000230, "Member 'ABP_Armory_C::Armory_Tools' has a wrong offset!");
static_assert(offsetof(ABP_Armory_C, Armory_Volume) == 0x000238, "Member 'ABP_Armory_C::Armory_Volume' has a wrong offset!");
static_assert(offsetof(ABP_Armory_C, BP_OnlineWeaponCustomizationsComponent) == 0x000240, "Member 'ABP_Armory_C::BP_OnlineWeaponCustomizationsComponent' has a wrong offset!");
static_assert(offsetof(ABP_Armory_C, Armory_Mesh) == 0x000248, "Member 'ABP_Armory_C::Armory_Mesh' has a wrong offset!");
static_assert(offsetof(ABP_Armory_C, DefaultSceneRoot) == 0x000250, "Member 'ABP_Armory_C::DefaultSceneRoot' has a wrong offset!");
static_assert(offsetof(ABP_Armory_C, WeaponList) == 0x000258, "Member 'ABP_Armory_C::WeaponList' has a wrong offset!");
static_assert(offsetof(ABP_Armory_C, RackMeshes) == 0x000268, "Member 'ABP_Armory_C::RackMeshes' has a wrong offset!");
static_assert(offsetof(ABP_Armory_C, WeaponWallOffset) == 0x000278, "Member 'ABP_Armory_C::WeaponWallOffset' has a wrong offset!");
static_assert(offsetof(ABP_Armory_C, WeaponMeshes) == 0x000288, "Member 'ABP_Armory_C::WeaponMeshes' has a wrong offset!");
static_assert(offsetof(ABP_Armory_C, WeaponMeshes_SM) == 0x000298, "Member 'ABP_Armory_C::WeaponMeshes_SM' has a wrong offset!");
static_assert(offsetof(ABP_Armory_C, BlueprintMeshes) == 0x0002A8, "Member 'ABP_Armory_C::BlueprintMeshes' has a wrong offset!");
static_assert(offsetof(ABP_Armory_C, BlueprintWallOffset) == 0x0002B8, "Member 'ABP_Armory_C::BlueprintWallOffset' has a wrong offset!");
static_assert(offsetof(ABP_Armory_C, SortOrder) == 0x0002C8, "Member 'ABP_Armory_C::SortOrder' has a wrong offset!");
static_assert(offsetof(ABP_Armory_C, PlayerStash_Weapons) == 0x0002D8, "Member 'ABP_Armory_C::PlayerStash_Weapons' has a wrong offset!");
static_assert(offsetof(ABP_Armory_C, DecalActors) == 0x0002E8, "Member 'ABP_Armory_C::DecalActors' has a wrong offset!");
static_assert(offsetof(ABP_Armory_C, PendingCamoUpdates) == 0x0002F8, "Member 'ABP_Armory_C::PendingCamoUpdates' has a wrong offset!");
static_assert(offsetof(ABP_Armory_C, WeaponPlan) == 0x000348, "Member 'ABP_Armory_C::WeaponPlan' has a wrong offset!");
static_assert(offsetof(ABP_Armory_C, WeaponClass) == 0x000350, "Member 'ABP_Armory_C::WeaponClass' has a wrong offset!");
static_assert(offsetof(ABP_Armory_C, WeaponPoseAnimation) == 0x000358, "Member 'ABP_Armory_C::WeaponPoseAnimation' has a wrong offset!");
static_assert(offsetof(ABP_Armory_C, WeaponSize) == 0x000380, "Member 'ABP_Armory_C::WeaponSize' has a wrong offset!");
static_assert(offsetof(ABP_Armory_C, DecalSize) == 0x000381, "Member 'ABP_Armory_C::DecalSize' has a wrong offset!");
static_assert(offsetof(ABP_Armory_C, BlueprintMesh) == 0x000388, "Member 'ABP_Armory_C::BlueprintMesh' has a wrong offset!");
static_assert(offsetof(ABP_Armory_C, BlueprintRotation) == 0x0003B0, "Member 'ABP_Armory_C::BlueprintRotation' has a wrong offset!");
static_assert(offsetof(ABP_Armory_C, RackMesh) == 0x0003C0, "Member 'ABP_Armory_C::RackMesh' has a wrong offset!");
static_assert(offsetof(ABP_Armory_C, CurrentRackElements) == 0x0003E8, "Member 'ABP_Armory_C::CurrentRackElements' has a wrong offset!");
static_assert(offsetof(ABP_Armory_C, DecalMaterial) == 0x0003F8, "Member 'ABP_Armory_C::DecalMaterial' has a wrong offset!");
static_assert(offsetof(ABP_Armory_C, DecalWallOffset) == 0x000420, "Member 'ABP_Armory_C::DecalWallOffset' has a wrong offset!");
static_assert(offsetof(ABP_Armory_C, DecalRotation) == 0x00042C, "Member 'ABP_Armory_C::DecalRotation' has a wrong offset!");
static_assert(offsetof(ABP_Armory_C, CurrentSocket) == 0x000438, "Member 'ABP_Armory_C::CurrentSocket' has a wrong offset!");
static_assert(offsetof(ABP_Armory_C, CurrentName) == 0x000440, "Member 'ABP_Armory_C::CurrentName' has a wrong offset!");
static_assert(offsetof(ABP_Armory_C, Stash) == 0x000448, "Member 'ABP_Armory_C::Stash' has a wrong offset!");
static_assert(offsetof(ABP_Armory_C, OccupiedWeaponSockets) == 0x000450, "Member 'ABP_Armory_C::OccupiedWeaponSockets' has a wrong offset!");
static_assert(offsetof(ABP_Armory_C, LastOccupiedWeaponSocket) == 0x000460, "Member 'ABP_Armory_C::LastOccupiedWeaponSocket' has a wrong offset!");
static_assert(offsetof(ABP_Armory_C, bDisregardStash) == 0x000468, "Member 'ABP_Armory_C::bDisregardStash' has a wrong offset!");
static_assert(offsetof(ABP_Armory_C, OccupiedBPSockets) == 0x000470, "Member 'ABP_Armory_C::OccupiedBPSockets' has a wrong offset!");
static_assert(offsetof(ABP_Armory_C, LastOccupiedBPSocket) == 0x000480, "Member 'ABP_Armory_C::LastOccupiedBPSocket' has a wrong offset!");
static_assert(offsetof(ABP_Armory_C, bShowOnlyDecals) == 0x000488, "Member 'ABP_Armory_C::bShowOnlyDecals' has a wrong offset!");
static_assert(offsetof(ABP_Armory_C, OccupiedDecalSockets) == 0x000490, "Member 'ABP_Armory_C::OccupiedDecalSockets' has a wrong offset!");
static_assert(offsetof(ABP_Armory_C, LastOccupiedDecalSocket) == 0x0004A0, "Member 'ABP_Armory_C::LastOccupiedDecalSocket' has a wrong offset!");
static_assert(offsetof(ABP_Armory_C, bDrawDebug) == 0x0004A8, "Member 'ABP_Armory_C::bDrawDebug' has a wrong offset!");
static_assert(offsetof(ABP_Armory_C, DebugPointSize) == 0x0004AC, "Member 'ABP_Armory_C::DebugPointSize' has a wrong offset!");
static_assert(offsetof(ABP_Armory_C, DebugPointDuration) == 0x0004B0, "Member 'ABP_Armory_C::DebugPointDuration' has a wrong offset!");
static_assert(offsetof(ABP_Armory_C, DebugDecalPointColor) == 0x0004B4, "Member 'ABP_Armory_C::DebugDecalPointColor' has a wrong offset!");
static_assert(offsetof(ABP_Armory_C, DebugWeaponPointColor) == 0x0004C4, "Member 'ABP_Armory_C::DebugWeaponPointColor' has a wrong offset!");
static_assert(offsetof(ABP_Armory_C, DebugBlueprintPointcolor) == 0x0004D4, "Member 'ABP_Armory_C::DebugBlueprintPointcolor' has a wrong offset!");
static_assert(offsetof(ABP_Armory_C, WeaponRotation) == 0x0004E4, "Member 'ABP_Armory_C::WeaponRotation' has a wrong offset!");
static_assert(offsetof(ABP_Armory_C, WeaponBonesToHide) == 0x0004F0, "Member 'ABP_Armory_C::WeaponBonesToHide' has a wrong offset!");
static_assert(offsetof(ABP_Armory_C, Elements) == 0x000500, "Member 'ABP_Armory_C::Elements' has a wrong offset!");
static_assert(offsetof(ABP_Armory_C, CurrentElement) == 0x000510, "Member 'ABP_Armory_C::CurrentElement' has a wrong offset!");
static_assert(offsetof(ABP_Armory_C, Wardrobe) == 0x000518, "Member 'ABP_Armory_C::Wardrobe' has a wrong offset!");
static_assert(offsetof(ABP_Armory_C, Armory_Update_Start) == 0x000520, "Member 'ABP_Armory_C::Armory_Update_Start' has a wrong offset!");
static_assert(offsetof(ABP_Armory_C, Armory_Init) == 0x000530, "Member 'ABP_Armory_C::Armory_Init' has a wrong offset!");
static_assert(offsetof(ABP_Armory_C, TimeOut_Duration) == 0x000540, "Member 'ABP_Armory_C::TimeOut_Duration' has a wrong offset!");
static_assert(offsetof(ABP_Armory_C, WPN_AnimPose_Loaded) == 0x000544, "Member 'ABP_Armory_C::WPN_AnimPose_Loaded' has a wrong offset!");
static_assert(offsetof(ABP_Armory_C, WeaponClass_To_WeaponStaticMesh) == 0x000548, "Member 'ABP_Armory_C::WeaponClass_To_WeaponStaticMesh' has a wrong offset!");
static_assert(offsetof(ABP_Armory_C, bShouldRT_Update) == 0x000598, "Member 'ABP_Armory_C::bShouldRT_Update' has a wrong offset!");
static_assert(offsetof(ABP_Armory_C, BlueprintCustomScale) == 0x00059C, "Member 'ABP_Armory_C::BlueprintCustomScale' has a wrong offset!");
static_assert(offsetof(ABP_Armory_C, DecalCustomScale) == 0x0005A0, "Member 'ABP_Armory_C::DecalCustomScale' has a wrong offset!");
static_assert(offsetof(ABP_Armory_C, WeaponMeshes_SK) == 0x0005A8, "Member 'ABP_Armory_C::WeaponMeshes_SK' has a wrong offset!");

}

