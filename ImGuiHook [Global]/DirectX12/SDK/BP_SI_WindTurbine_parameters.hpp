#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_SI_WindTurbine

#include "Basic.hpp"

#include "CoreUObject_structs.hpp"
#include "Engine_structs.hpp"


namespace SDK::Params
{

// Function BP_SI_WindTurbine.BP_SI_WindTurbine_C.ExecuteUbergraph_BP_SI_WindTurbine
// 0x00C0 (0x00C0 - 0x0000)
struct BP_SI_WindTurbine_C_ExecuteUbergraph_BP_SI_WindTurbine final
{
public:
	int32                                         EntryPoint;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_SwitchInteger_CmpSuccess;                   // 0x0004(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_IsClosed_Variable;                       // 0x0005(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Has_Been_Initd_Variable;                 // 0x0006(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_7[0x1];                                        // 0x0007(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue;          // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UObject*                                K2Node_Event_Hologram;                             // 0x0010(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         K2Node_Event_NewVisualLevel;                       // 0x0018(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_GetWorldDeltaSeconds_ReturnValue;         // 0x001C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Divide_FloatFloat_ReturnValue;            // 0x0020(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue_1;        // 0x0024(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               CallFunc_MakeRotator_ReturnValue;                  // 0x0028(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FHitResult                             CallFunc_K2_AddLocalRotation_SweepHitResult;       // 0x0034(0x008C)(IsPlainOldData, NoDestructor, ContainsInstancedReference)
};
static_assert(alignof(BP_SI_WindTurbine_C_ExecuteUbergraph_BP_SI_WindTurbine) == 0x000008, "Wrong alignment on BP_SI_WindTurbine_C_ExecuteUbergraph_BP_SI_WindTurbine");
static_assert(sizeof(BP_SI_WindTurbine_C_ExecuteUbergraph_BP_SI_WindTurbine) == 0x0000C0, "Wrong size on BP_SI_WindTurbine_C_ExecuteUbergraph_BP_SI_WindTurbine");
static_assert(offsetof(BP_SI_WindTurbine_C_ExecuteUbergraph_BP_SI_WindTurbine, EntryPoint) == 0x000000, "Member 'BP_SI_WindTurbine_C_ExecuteUbergraph_BP_SI_WindTurbine::EntryPoint' has a wrong offset!");
static_assert(offsetof(BP_SI_WindTurbine_C_ExecuteUbergraph_BP_SI_WindTurbine, K2Node_SwitchInteger_CmpSuccess) == 0x000004, "Member 'BP_SI_WindTurbine_C_ExecuteUbergraph_BP_SI_WindTurbine::K2Node_SwitchInteger_CmpSuccess' has a wrong offset!");
static_assert(offsetof(BP_SI_WindTurbine_C_ExecuteUbergraph_BP_SI_WindTurbine, Temp_bool_IsClosed_Variable) == 0x000005, "Member 'BP_SI_WindTurbine_C_ExecuteUbergraph_BP_SI_WindTurbine::Temp_bool_IsClosed_Variable' has a wrong offset!");
static_assert(offsetof(BP_SI_WindTurbine_C_ExecuteUbergraph_BP_SI_WindTurbine, Temp_bool_Has_Been_Initd_Variable) == 0x000006, "Member 'BP_SI_WindTurbine_C_ExecuteUbergraph_BP_SI_WindTurbine::Temp_bool_Has_Been_Initd_Variable' has a wrong offset!");
static_assert(offsetof(BP_SI_WindTurbine_C_ExecuteUbergraph_BP_SI_WindTurbine, CallFunc_Multiply_FloatFloat_ReturnValue) == 0x000008, "Member 'BP_SI_WindTurbine_C_ExecuteUbergraph_BP_SI_WindTurbine::CallFunc_Multiply_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_SI_WindTurbine_C_ExecuteUbergraph_BP_SI_WindTurbine, K2Node_Event_Hologram) == 0x000010, "Member 'BP_SI_WindTurbine_C_ExecuteUbergraph_BP_SI_WindTurbine::K2Node_Event_Hologram' has a wrong offset!");
static_assert(offsetof(BP_SI_WindTurbine_C_ExecuteUbergraph_BP_SI_WindTurbine, K2Node_Event_NewVisualLevel) == 0x000018, "Member 'BP_SI_WindTurbine_C_ExecuteUbergraph_BP_SI_WindTurbine::K2Node_Event_NewVisualLevel' has a wrong offset!");
static_assert(offsetof(BP_SI_WindTurbine_C_ExecuteUbergraph_BP_SI_WindTurbine, CallFunc_GetWorldDeltaSeconds_ReturnValue) == 0x00001C, "Member 'BP_SI_WindTurbine_C_ExecuteUbergraph_BP_SI_WindTurbine::CallFunc_GetWorldDeltaSeconds_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_SI_WindTurbine_C_ExecuteUbergraph_BP_SI_WindTurbine, CallFunc_Divide_FloatFloat_ReturnValue) == 0x000020, "Member 'BP_SI_WindTurbine_C_ExecuteUbergraph_BP_SI_WindTurbine::CallFunc_Divide_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_SI_WindTurbine_C_ExecuteUbergraph_BP_SI_WindTurbine, CallFunc_Multiply_FloatFloat_ReturnValue_1) == 0x000024, "Member 'BP_SI_WindTurbine_C_ExecuteUbergraph_BP_SI_WindTurbine::CallFunc_Multiply_FloatFloat_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_SI_WindTurbine_C_ExecuteUbergraph_BP_SI_WindTurbine, CallFunc_MakeRotator_ReturnValue) == 0x000028, "Member 'BP_SI_WindTurbine_C_ExecuteUbergraph_BP_SI_WindTurbine::CallFunc_MakeRotator_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_SI_WindTurbine_C_ExecuteUbergraph_BP_SI_WindTurbine, CallFunc_K2_AddLocalRotation_SweepHitResult) == 0x000034, "Member 'BP_SI_WindTurbine_C_ExecuteUbergraph_BP_SI_WindTurbine::CallFunc_K2_AddLocalRotation_SweepHitResult' has a wrong offset!");

// Function BP_SI_WindTurbine.BP_SI_WindTurbine_C.LoadAndShowVisualLevel
// 0x0004 (0x0004 - 0x0000)
struct BP_SI_WindTurbine_C_LoadAndShowVisualLevel final
{
public:
	int32                                         NewVisualLevel;                                    // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_SI_WindTurbine_C_LoadAndShowVisualLevel) == 0x000004, "Wrong alignment on BP_SI_WindTurbine_C_LoadAndShowVisualLevel");
static_assert(sizeof(BP_SI_WindTurbine_C_LoadAndShowVisualLevel) == 0x000004, "Wrong size on BP_SI_WindTurbine_C_LoadAndShowVisualLevel");
static_assert(offsetof(BP_SI_WindTurbine_C_LoadAndShowVisualLevel, NewVisualLevel) == 0x000000, "Member 'BP_SI_WindTurbine_C_LoadAndShowVisualLevel::NewVisualLevel' has a wrong offset!");

// Function BP_SI_WindTurbine.BP_SI_WindTurbine_C.ShowHologram
// 0x0008 (0x0008 - 0x0000)
struct BP_SI_WindTurbine_C_ShowHologram final
{
public:
	class UObject*                                Hologram;                                          // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_SI_WindTurbine_C_ShowHologram) == 0x000008, "Wrong alignment on BP_SI_WindTurbine_C_ShowHologram");
static_assert(sizeof(BP_SI_WindTurbine_C_ShowHologram) == 0x000008, "Wrong size on BP_SI_WindTurbine_C_ShowHologram");
static_assert(offsetof(BP_SI_WindTurbine_C_ShowHologram, Hologram) == 0x000000, "Member 'BP_SI_WindTurbine_C_ShowHologram::Hologram' has a wrong offset!");

// Function BP_SI_WindTurbine.BP_SI_WindTurbine_C.PropellerRotation
// 0x00B0 (0x00B0 - 0x0000)
struct BP_SI_WindTurbine_C_PropellerRotation final
{
public:
	float                                         InputPin;                                          // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue;          // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_GetWorldDeltaSeconds_ReturnValue;         // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Divide_FloatFloat_ReturnValue;            // 0x000C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue_1;        // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue_2;        // 0x0014(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               CallFunc_MakeRotator_ReturnValue;                  // 0x0018(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FHitResult                             CallFunc_K2_AddLocalRotation_SweepHitResult;       // 0x0024(0x008C)(IsPlainOldData, NoDestructor, ContainsInstancedReference)
};
static_assert(alignof(BP_SI_WindTurbine_C_PropellerRotation) == 0x000004, "Wrong alignment on BP_SI_WindTurbine_C_PropellerRotation");
static_assert(sizeof(BP_SI_WindTurbine_C_PropellerRotation) == 0x0000B0, "Wrong size on BP_SI_WindTurbine_C_PropellerRotation");
static_assert(offsetof(BP_SI_WindTurbine_C_PropellerRotation, InputPin) == 0x000000, "Member 'BP_SI_WindTurbine_C_PropellerRotation::InputPin' has a wrong offset!");
static_assert(offsetof(BP_SI_WindTurbine_C_PropellerRotation, CallFunc_Multiply_FloatFloat_ReturnValue) == 0x000004, "Member 'BP_SI_WindTurbine_C_PropellerRotation::CallFunc_Multiply_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_SI_WindTurbine_C_PropellerRotation, CallFunc_GetWorldDeltaSeconds_ReturnValue) == 0x000008, "Member 'BP_SI_WindTurbine_C_PropellerRotation::CallFunc_GetWorldDeltaSeconds_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_SI_WindTurbine_C_PropellerRotation, CallFunc_Divide_FloatFloat_ReturnValue) == 0x00000C, "Member 'BP_SI_WindTurbine_C_PropellerRotation::CallFunc_Divide_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_SI_WindTurbine_C_PropellerRotation, CallFunc_Multiply_FloatFloat_ReturnValue_1) == 0x000010, "Member 'BP_SI_WindTurbine_C_PropellerRotation::CallFunc_Multiply_FloatFloat_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_SI_WindTurbine_C_PropellerRotation, CallFunc_Multiply_FloatFloat_ReturnValue_2) == 0x000014, "Member 'BP_SI_WindTurbine_C_PropellerRotation::CallFunc_Multiply_FloatFloat_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BP_SI_WindTurbine_C_PropellerRotation, CallFunc_MakeRotator_ReturnValue) == 0x000018, "Member 'BP_SI_WindTurbine_C_PropellerRotation::CallFunc_MakeRotator_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_SI_WindTurbine_C_PropellerRotation, CallFunc_K2_AddLocalRotation_SweepHitResult) == 0x000024, "Member 'BP_SI_WindTurbine_C_PropellerRotation::CallFunc_K2_AddLocalRotation_SweepHitResult' has a wrong offset!");

}

